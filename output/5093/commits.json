[
  {
    "sha": "ab3834baae2e48708de2be74217eaf9da9081fc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjM4MzRiYWFlMmU0ODcwOGRlMmJlNzQyMTdlYWY5ZGE5MDgxZmMz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-16T17:06:53Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-16T17:10:32Z"
      },
      "message": "Merge pull request #4928\n\ne9992fb remove include of chainparams.h (imharrywu)",
      "tree": {
        "sha": "62d5ca3e3f51e45d7bca581efadd34706bd6739a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62d5ca3e3f51e45d7bca581efadd34706bd6739a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab3834baae2e48708de2be74217eaf9da9081fc3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUGG8IAAoJEI9lMlXIeZLgbJMMAKvyWNB8gaGZs75lKYN/0lbQ\nE61CFzfD07p5tcs+OYJKLgxh07fAl1IDwM/CqeJm5U6UNQAKl2NdaoGjqIRfCjia\n/bis1TuqS0YmKl6+rHSSLyIYLwN+u2tTdj9MazBaNSYpnBOBfsY1mv7mQQplrNoM\nN0WSq//+mS/GsB/52arvGKqfPuwi9Mhic2exfDJ5WnbFKlu2IlHwa/ObpsPWnrbp\nNYDa8dWiPA3ScNOWhux+DAfzbBp1lSsVUkLvIbnUeOA6FER/ZDfi+CTWRkBi5vLo\n8/9I6BK+wOHSfSYhfp3oxvh03H95WQqaG2W2NWpXSL71Z+xHxiWIz1AZiCHGyaKX\nyj/n1Ss3YIc653wc4rIsY34GRvMrUSniNk69ry9tUDuQSNg6RqFG7bo6v9kkBFoU\nEYDfZoyTiTWvWleBUVD/LN8oNG+6MU5k4CHtxjeVVXvC47k5i3hZQQpJzS61wqv+\nIqizz1lmxO5367EP62L9W5YO/xvb2c2pu3l0WsOeiQ==\n=XGj6\n-----END PGP SIGNATURE-----",
        "payload": "tree 62d5ca3e3f51e45d7bca581efadd34706bd6739a\nparent 13168ea46cf67e3f3c8dd258ab91c01ee0e1ebc4\nparent e9992fb6453209e93dee0f886fc8e3fe39ef89d4\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1410887213 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1410887432 +0200\n\nMerge pull request #4928\n\ne9992fb remove include of chainparams.h (imharrywu)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab3834baae2e48708de2be74217eaf9da9081fc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab3834baae2e48708de2be74217eaf9da9081fc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab3834baae2e48708de2be74217eaf9da9081fc3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13168ea46cf67e3f3c8dd258ab91c01ee0e1ebc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13168ea46cf67e3f3c8dd258ab91c01ee0e1ebc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13168ea46cf67e3f3c8dd258ab91c01ee0e1ebc4"
      },
      {
        "sha": "e9992fb6453209e93dee0f886fc8e3fe39ef89d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9992fb6453209e93dee0f886fc8e3fe39ef89d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9992fb6453209e93dee0f886fc8e3fe39ef89d4"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0279cd76ec712effe641dc94992073bd3de59356",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab3834baae2e48708de2be74217eaf9da9081fc3/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab3834baae2e48708de2be74217eaf9da9081fc3/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=ab3834baae2e48708de2be74217eaf9da9081fc3",
        "patch": "@@ -8,7 +8,6 @@\n #include \"rpcprotocol.h\"\n #include \"util.h\"\n #include \"ui_interface.h\"\n-#include \"chainparams.h\" // for Params().RPCPort()\n \n #include <set>\n #include <stdint.h>"
      }
    ]
  },
  {
    "sha": "0be990ba34110184c8a5a2c04094311dab5cd84c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmU5OTBiYTM0MTEwMTg0YzhhNWEyYzA0MDk0MzExZGFiNWNkODRj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-11T17:15:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-16T17:14:32Z"
      },
      "message": "Move CTxDestination from script/script to script/standard",
      "tree": {
        "sha": "2eb24931c396ae0dc0c57fee42f345c581bd58c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2eb24931c396ae0dc0c57fee42f345c581bd58c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0be990ba34110184c8a5a2c04094311dab5cd84c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0be990ba34110184c8a5a2c04094311dab5cd84c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0be990ba34110184c8a5a2c04094311dab5cd84c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0be990ba34110184c8a5a2c04094311dab5cd84c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab3834baae2e48708de2be74217eaf9da9081fc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab3834baae2e48708de2be74217eaf9da9081fc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab3834baae2e48708de2be74217eaf9da9081fc3"
      }
    ],
    "stats": {
      "total": 244,
      "additions": 122,
      "deletions": 122
    },
    "files": [
      {
        "sha": "c5e230c72ef94133eb5f1749a23246a756015ee9",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -17,6 +17,7 @@\n #include \"chainparams.h\"\n #include \"key.h\"\n #include \"script/script.h\"\n+#include \"script/standard.h\"\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "6445042f9cba218cfcdc7281e06792fbc9d90283",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -224,9 +224,8 @@ static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n     if (!addr.IsValid())\n         throw runtime_error(\"invalid TX output address\");\n \n-    // build standard output script via SetDestination()\n-    CScript scriptPubKey;\n-    scriptPubKey.SetDestination(addr.Get());\n+    // build standard output script via GetScriptForDestination()\n+    CScript scriptPubKey = GetScriptForDestination(addr.Get());\n \n     // construct TxOut, append to transaction output list\n     CTxOut txout(value, scriptPubKey);"
      },
      {
        "sha": "fc22871a6b042f7b115f66a6826aec212b7909e2",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -13,6 +13,8 @@\n #include \"init.h\"\n #include \"main.h\"\n #include \"protocol.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"util.h\"\n \n #ifdef WIN32\n@@ -222,7 +224,7 @@ QString formatBitcoinURI(const SendCoinsRecipient &info)\n bool isDust(const QString& address, qint64 amount)\n {\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n-    CScript script; script.SetDestination(dest);\n+    CScript script = GetScriptForDestination(dest);\n     CTxOut txOut(amount, script);\n     return txOut.IsDust(::minRelayTxFee);\n }"
      },
      {
        "sha": "cc4478f39f1b4dac2ead0a8d4a924c8931d3fc4b",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -609,7 +609,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     std::string strAccount = account.toStdString();\n     set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n     if (!refundAddresses.empty()) {\n-        CScript s; s.SetDestination(*refundAddresses.begin());\n+        CScript s = GetScriptForDestination(*refundAddresses.begin());\n         payments::Output* refund_to = payment.add_refund_to();\n         refund_to->set_script(&s[0], s.size());\n     }\n@@ -620,7 +620,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n             CKeyID keyID = newKey.GetID();\n             wallet->SetAddressBook(keyID, strAccount, \"refund\");\n \n-            CScript s; s.SetDestination(keyID);\n+            CScript s = GetScriptForDestination(keyID);\n             payments::Output* refund_to = payment.add_refund_to();\n             refund_to->set_script(&s[0], s.size());\n         }"
      },
      {
        "sha": "ed90914ba7fd53950ac3698b3f36a298a9777ed4",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -241,8 +241,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             setAddress.insert(rcp.address);\n             ++nAddresses;\n \n-            CScript scriptPubKey;\n-            scriptPubKey.SetDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n+            CScript scriptPubKey = GetScriptForDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n             vecSend.push_back(std::pair<CScript, int64_t>(scriptPubKey, rcp.amount));\n \n             total += rcp.amount;"
      },
      {
        "sha": "1ac7024550c6f14f5c082f20636ad1f9dd8a861b",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -6,6 +6,8 @@\n #include \"rpcserver.h\"\n #include \"init.h\"\n #include \"main.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"sync.h\"\n #include \"util.h\"\n #include \"utiltime.h\"\n@@ -161,7 +163,7 @@ Value importaddress(const Array& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (address.IsValid()) {\n-        script.SetDestination(address.Get());\n+        script = GetScriptForDestination(address.Get());\n     } else if (IsHex(params[0].get_str())) {\n         std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n         script = CScript(data.begin(), data.end());"
      },
      {
        "sha": "dd45eefd58a9b32cd69e7bef6c7970bd327186ab",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -250,8 +250,7 @@ CScript _createmultisig_redeemScript(const Array& params)\n             throw runtime_error(\" Invalid public key: \"+ks);\n         }\n     }\n-    CScript result;\n-    result.SetMultisig(nRequired, pubkeys);\n+    CScript result = GetScriptForMultisig(nRequired, pubkeys);\n \n     if (result.size() > MAX_SCRIPT_ELEMENT_SIZE)\n         throw runtime_error("
      },
      {
        "sha": "b295be3b515ea185d163d9b8a143729d3074ed9d",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -366,8 +366,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);\n         setAddress.insert(address);\n \n-        CScript scriptPubKey;\n-        scriptPubKey.SetDestination(address.Get());\n+        CScript scriptPubKey = GetScriptForDestination(address.Get());\n         int64_t nAmount = AmountFromValue(s.value_);\n \n         CTxOut out(nAmount, scriptPubKey);"
      },
      {
        "sha": "d9a23b23474b5d97bd241d05af497fee4052c569",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -124,8 +124,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     // Check if the current key has been used\n     if (account.vchPubKey.IsValid())\n     {\n-        CScript scriptPubKey;\n-        scriptPubKey.SetDestination(account.vchPubKey.GetID());\n+        CScript scriptPubKey = GetScriptForDestination(account.vchPubKey.GetID());\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin();\n              it != pwalletMain->mapWallet.end() && account.vchPubKey.IsValid();\n              ++it)\n@@ -472,10 +471,9 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n \n     // Bitcoin address\n     CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n-    CScript scriptPubKey;\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    scriptPubKey.SetDestination(address.Get());\n+    CScript scriptPubKey = GetScriptForDestination(address.Get());\n     if (!IsMine(*pwalletMain,scriptPubKey))\n         return (double)0.0;\n \n@@ -849,8 +847,7 @@ Value sendmany(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);\n         setAddress.insert(address);\n \n-        CScript scriptPubKey;\n-        scriptPubKey.SetDestination(address.Get());\n+        CScript scriptPubKey = GetScriptForDestination(address.Get());\n         int64_t nAmount = AmountFromValue(s.value_);\n         totalAmount += nAmount;\n "
      },
      {
        "sha": "a5126e7cc26fbb1d0aab710c1879be9e86c84656",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 40,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -253,43 +253,3 @@ bool CScript::HasCanonicalPushes() const\n     }\n     return true;\n }\n-\n-class CScriptVisitor : public boost::static_visitor<bool>\n-{\n-private:\n-    CScript *script;\n-public:\n-    CScriptVisitor(CScript *scriptin) { script = scriptin; }\n-\n-    bool operator()(const CNoDestination &dest) const {\n-        script->clear();\n-        return false;\n-    }\n-\n-    bool operator()(const CKeyID &keyID) const {\n-        script->clear();\n-        *script << OP_DUP << OP_HASH160 << keyID << OP_EQUALVERIFY << OP_CHECKSIG;\n-        return true;\n-    }\n-\n-    bool operator()(const CScriptID &scriptID) const {\n-        script->clear();\n-        *script << OP_HASH160 << scriptID << OP_EQUAL;\n-        return true;\n-    }\n-};\n-\n-void CScript::SetDestination(const CTxDestination& dest)\n-{\n-    boost::apply_visitor(CScriptVisitor(this), dest);\n-}\n-\n-void CScript::SetMultisig(int nRequired, const std::vector<CPubKey>& keys)\n-{\n-    this->clear();\n-\n-    *this << EncodeOP_N(nRequired);\n-    BOOST_FOREACH(const CPubKey& key, keys)\n-        *this << key;\n-    *this << EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n-}"
      },
      {
        "sha": "07a4229f853a3e4577b53550a5ace143d094479b",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -320,20 +320,6 @@ inline std::string ValueString(const std::vector<unsigned char>& vch)\n         return HexStr(vch);\n }\n \n-class CNoDestination {\n-public:\n-    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }\n-    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n-};\n-\n-/** A txout script template with a specific destination. It is either:\n- *  * CNoDestination: no destination set\n- *  * CKeyID: TX_PUBKEYHASH destination\n- *  * CScriptID: TX_SCRIPTHASH destination\n- *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n- */\n-typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n-\n /** Serialized script, used inside transaction inputs and outputs */\n class CScript : public std::vector<unsigned char>\n {\n@@ -604,9 +590,6 @@ class CScript : public std::vector<unsigned char>\n         return (size() > 0 && *begin() == OP_RETURN);\n     }\n \n-    void SetDestination(const CTxDestination& address);\n-    void SetMultisig(int nRequired, const std::vector<CPubKey>& keys);\n-\n     std::string ToString() const\n     {\n         std::string str;"
      },
      {
        "sha": "407baf621d043b8c3e19bd6fd314a79763f82ad7",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -252,3 +252,50 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vecto\n \n     return true;\n }\n+\n+namespace\n+{\n+class CScriptVisitor : public boost::static_visitor<bool>\n+{\n+private:\n+    CScript *script;\n+public:\n+    CScriptVisitor(CScript *scriptin) { script = scriptin; }\n+\n+    bool operator()(const CNoDestination &dest) const {\n+        script->clear();\n+        return false;\n+    }\n+\n+    bool operator()(const CKeyID &keyID) const {\n+        script->clear();\n+        *script << OP_DUP << OP_HASH160 << keyID << OP_EQUALVERIFY << OP_CHECKSIG;\n+        return true;\n+    }\n+\n+    bool operator()(const CScriptID &scriptID) const {\n+        script->clear();\n+        *script << OP_HASH160 << scriptID << OP_EQUAL;\n+        return true;\n+    }\n+};\n+}\n+\n+CScript GetScriptForDestination(const CTxDestination& dest)\n+{\n+    CScript script;\n+\n+    boost::apply_visitor(CScriptVisitor(&script), dest);\n+    return script;\n+}\n+\n+CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n+{\n+    CScript script;\n+\n+    script << CScript::EncodeOP_N(nRequired);\n+    BOOST_FOREACH(const CPubKey& key, keys)\n+        script << key;\n+    script << CScript::EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n+    return script;\n+}"
      },
      {
        "sha": "ead79b82a23d2cba0529b439f0b5c9b18af96571",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -45,6 +45,20 @@ enum txnouttype\n     TX_NULL_DATA,\n };\n \n+class CNoDestination {\n+public:\n+    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }\n+    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n+};\n+\n+/** A txout script template with a specific destination. It is either:\n+ *  * CNoDestination: no destination set\n+ *  * CKeyID: TX_PUBKEYHASH destination\n+ *  * CScriptID: TX_SCRIPTHASH destination\n+ *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n+ */\n+typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n+\n const char* GetTxnOutputType(txnouttype t);\n \n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n@@ -53,4 +67,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n \n+CScript GetScriptForDestination(const CTxDestination& dest);\n+CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n+\n #endif // H_BITCOIN_SCRIPT_STANDARD"
      },
      {
        "sha": "af01e5518cec1bf4abbfc8a638ce74e0a4c65e55",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -173,7 +173,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vin[0].scriptSig << OP_1;\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n+        tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n         AddOrphanTx(tx, i);\n     }\n@@ -189,7 +189,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vin[0].prevout.hash = txPrev.GetHash();\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n+        tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n         SignSignature(keystore, txPrev, tx, 0);\n \n         AddOrphanTx(tx, i);\n@@ -203,7 +203,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         CMutableTransaction tx;\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n+        tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n         tx.vin.resize(500);\n         for (unsigned int j = 0; j < tx.vin.size(); j++)\n         {"
      },
      {
        "sha": "9e4669eba90075c3eae6cc82a6e4e44114322c57",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -170,7 +170,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = 4900000000LL;\n     script = CScript() << OP_0;\n-    tx.vout[0].scriptPubKey.SetDestination(script.GetID());\n+    tx.vout[0].scriptPubKey = GetScriptForDestination(script.GetID());\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n     tx.vin[0].prevout.hash = hash;"
      },
      {
        "sha": "1f3991d7b6fd0a455f294f2030e346a443313f96",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 24,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -68,14 +68,14 @@ BOOST_AUTO_TEST_CASE(sign)\n     // different keys, straight/P2SH, pubkey/pubkeyhash\n     CScript standardScripts[4];\n     standardScripts[0] << key[0].GetPubKey() << OP_CHECKSIG;\n-    standardScripts[1].SetDestination(key[1].GetPubKey().GetID());\n+    standardScripts[1] = GetScriptForDestination(key[1].GetPubKey().GetID());\n     standardScripts[2] << key[1].GetPubKey() << OP_CHECKSIG;\n-    standardScripts[3].SetDestination(key[2].GetPubKey().GetID());\n+    standardScripts[3] = GetScriptForDestination(key[2].GetPubKey().GetID());\n     CScript evalScripts[4];\n     for (int i = 0; i < 4; i++)\n     {\n         keystore.AddCScript(standardScripts[i]);\n-        evalScripts[i].SetDestination(standardScripts[i].GetID());\n+        evalScripts[i] = GetScriptForDestination(standardScripts[i].GetID());\n     }\n \n     CMutableTransaction txFrom;  // Funding transaction:\n@@ -129,8 +129,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n     CScript invalidAsScript;\n     invalidAsScript << OP_INVALIDOPCODE << OP_INVALIDOPCODE;\n \n-    CScript p2sh;\n-    p2sh.SetDestination(invalidAsScript.GetID());\n+    CScript p2sh = GetScriptForDestination(invalidAsScript.GetID());\n \n     CScript scriptSig;\n     scriptSig << Serialize(invalidAsScript);\n@@ -140,8 +139,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n \n     // Try to recur, and verification should succeed because\n     // the inner HASH160 <> EQUAL should only check the hash:\n-    CScript p2sh2;\n-    p2sh2.SetDestination(p2sh.GetID());\n+    CScript p2sh2 = GetScriptForDestination(p2sh.GetID());\n     CScript scriptSig2;\n     scriptSig2 << Serialize(invalidAsScript) << Serialize(p2sh);\n \n@@ -163,15 +161,15 @@ BOOST_AUTO_TEST_CASE(set)\n     }\n \n     CScript inner[4];\n-    inner[0].SetDestination(key[0].GetPubKey().GetID());\n-    inner[1].SetMultisig(2, std::vector<CPubKey>(keys.begin(), keys.begin()+2));\n-    inner[2].SetMultisig(1, std::vector<CPubKey>(keys.begin(), keys.begin()+2));\n-    inner[3].SetMultisig(2, std::vector<CPubKey>(keys.begin(), keys.begin()+3));\n+    inner[0] = GetScriptForDestination(key[0].GetPubKey().GetID());\n+    inner[1] = GetScriptForMultisig(2, std::vector<CPubKey>(keys.begin(), keys.begin()+2));\n+    inner[2] = GetScriptForMultisig(1, std::vector<CPubKey>(keys.begin(), keys.begin()+2));\n+    inner[3] = GetScriptForMultisig(2, std::vector<CPubKey>(keys.begin(), keys.begin()+3));\n \n     CScript outer[4];\n     for (int i = 0; i < 4; i++)\n     {\n-        outer[i].SetDestination(inner[i].GetID());\n+        outer[i] = GetScriptForDestination(inner[i].GetID());\n         keystore.AddCScript(inner[i]);\n     }\n \n@@ -244,8 +242,7 @@ BOOST_AUTO_TEST_CASE(switchover)\n     CScript scriptSig;\n     scriptSig << Serialize(notValid);\n \n-    CScript fund;\n-    fund.SetDestination(notValid.GetID());\n+    CScript fund = GetScriptForDestination(notValid.GetID());\n \n \n     // Validation should succeed under old rules (hash is correct):\n@@ -274,11 +271,11 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txFrom.vout.resize(7);\n \n     // First three are standard:\n-    CScript pay1; pay1.SetDestination(key[0].GetPubKey().GetID());\n+    CScript pay1 = GetScriptForDestination(key[0].GetPubKey().GetID());\n     keystore.AddCScript(pay1);\n-    CScript pay1of3; pay1of3.SetMultisig(1, keys);\n+    CScript pay1of3 = GetScriptForMultisig(1, keys);\n \n-    txFrom.vout[0].scriptPubKey.SetDestination(pay1.GetID()); // P2SH (OP_CHECKSIG)\n+    txFrom.vout[0].scriptPubKey = GetScriptForDestination(pay1.GetID()); // P2SH (OP_CHECKSIG)\n     txFrom.vout[0].nValue = 1000;\n     txFrom.vout[1].scriptPubKey = pay1; // ordinary OP_CHECKSIG\n     txFrom.vout[1].nValue = 2000;\n@@ -293,7 +290,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     oneAndTwo << OP_2 << key[3].GetPubKey() << key[4].GetPubKey() << key[5].GetPubKey();\n     oneAndTwo << OP_3 << OP_CHECKMULTISIG;\n     keystore.AddCScript(oneAndTwo);\n-    txFrom.vout[3].scriptPubKey.SetDestination(oneAndTwo.GetID());\n+    txFrom.vout[3].scriptPubKey = GetScriptForDestination(oneAndTwo.GetID());\n     txFrom.vout[3].nValue = 4000;\n \n     // vout[4] is max sigops:\n@@ -302,25 +299,25 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n         fifteenSigops << key[i%3].GetPubKey();\n     fifteenSigops << OP_15 << OP_CHECKMULTISIG;\n     keystore.AddCScript(fifteenSigops);\n-    txFrom.vout[4].scriptPubKey.SetDestination(fifteenSigops.GetID());\n+    txFrom.vout[4].scriptPubKey = GetScriptForDestination(fifteenSigops.GetID());\n     txFrom.vout[4].nValue = 5000;\n \n     // vout[5/6] are non-standard because they exceed MAX_P2SH_SIGOPS\n     CScript sixteenSigops; sixteenSigops << OP_16 << OP_CHECKMULTISIG;\n     keystore.AddCScript(sixteenSigops);\n-    txFrom.vout[5].scriptPubKey.SetDestination(fifteenSigops.GetID());\n+    txFrom.vout[5].scriptPubKey = GetScriptForDestination(fifteenSigops.GetID());\n     txFrom.vout[5].nValue = 5000;\n     CScript twentySigops; twentySigops << OP_CHECKMULTISIG;\n     keystore.AddCScript(twentySigops);\n-    txFrom.vout[6].scriptPubKey.SetDestination(twentySigops.GetID());\n+    txFrom.vout[6].scriptPubKey = GetScriptForDestination(twentySigops.GetID());\n     txFrom.vout[6].nValue = 6000;\n \n \n     coins.SetCoins(txFrom.GetHash(), CCoins(txFrom, 0));\n \n     CMutableTransaction txTo;\n     txTo.vout.resize(1);\n-    txTo.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n+    txTo.vout[0].scriptPubKey = GetScriptForDestination(key[1].GetPubKey().GetID());\n \n     txTo.vin.resize(5);\n     for (int i = 0; i < 5; i++)\n@@ -352,7 +349,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n \n     CMutableTransaction txToNonStd1;\n     txToNonStd1.vout.resize(1);\n-    txToNonStd1.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n+    txToNonStd1.vout[0].scriptPubKey = GetScriptForDestination(key[1].GetPubKey().GetID());\n     txToNonStd1.vout[0].nValue = 1000;\n     txToNonStd1.vin.resize(1);\n     txToNonStd1.vin[0].prevout.n = 5;\n@@ -364,7 +361,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n \n     CMutableTransaction txToNonStd2;\n     txToNonStd2.vout.resize(1);\n-    txToNonStd2.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n+    txToNonStd2.vout[0].scriptPubKey = GetScriptForDestination(key[1].GetPubKey().GetID());\n     txToNonStd2.vout[0].nValue = 1000;\n     txToNonStd2.vin.resize(1);\n     txToNonStd2.vin[0].prevout.n = 6;"
      },
      {
        "sha": "7afe840897748257d79583ac7003adf95424dfbc",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -280,7 +280,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n \n     CMutableTransaction txFrom;\n     txFrom.vout.resize(1);\n-    txFrom.vout[0].scriptPubKey.SetDestination(keys[0].GetPubKey().GetID());\n+    txFrom.vout[0].scriptPubKey = GetScriptForDestination(keys[0].GetPubKey().GetID());\n     CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n     CMutableTransaction txTo;\n     txTo.vin.resize(1);\n@@ -309,7 +309,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     // P2SH, single-signature case:\n     CScript pkSingle; pkSingle << keys[0].GetPubKey() << OP_CHECKSIG;\n     keystore.AddCScript(pkSingle);\n-    scriptPubKey.SetDestination(pkSingle.GetID());\n+    scriptPubKey = GetScriptForDestination(pkSingle.GetID());\n     SignSignature(keystore, txFrom, txTo, 0);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n     BOOST_CHECK(combined == scriptSig);\n@@ -327,7 +327,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     BOOST_CHECK(combined == scriptSig);\n \n     // Hardest case:  Multisig 2-of-3\n-    scriptPubKey.SetMultisig(2, pubkeys);\n+    scriptPubKey = GetScriptForMultisig(2, pubkeys);\n     keystore.AddCScript(scriptPubKey);\n     SignSignature(keystore, txFrom, txTo, 0);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);"
      },
      {
        "sha": "62a6cd63d65a230efb34576a08ec11802527eb74",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"key.h\"\n #include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"uint256.h\"\n \n #include <vector>\n@@ -37,8 +38,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 3U);\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(false), 21U);\n \n-    CScript p2sh;\n-    p2sh.SetDestination(s1.GetID());\n+    CScript p2sh = GetScriptForDestination(s1.GetID());\n     CScript scriptSig;\n     scriptSig << OP_0 << Serialize(s1);\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(scriptSig), 3U);\n@@ -50,12 +50,11 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n         k.MakeNewKey(true);\n         keys.push_back(k.GetPubKey());\n     }\n-    CScript s2;\n-    s2.SetMultisig(1, keys);\n+    CScript s2 = GetScriptForMultisig(1, keys);\n     BOOST_CHECK_EQUAL(s2.GetSigOpCount(true), 3U);\n     BOOST_CHECK_EQUAL(s2.GetSigOpCount(false), 20U);\n \n-    p2sh.SetDestination(s2.GetID());\n+    p2sh = GetScriptForDestination(s2.GetID());\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(true), 0U);\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(false), 0U);\n     CScript scriptSig2;"
      },
      {
        "sha": "221afa342082871ee2ffc7e123d58a832da3fb0b",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -248,9 +248,9 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsView & coinsRet)\n \n     dummyTransactions[1].vout.resize(2);\n     dummyTransactions[1].vout[0].nValue = 21*CENT;\n-    dummyTransactions[1].vout[0].scriptPubKey.SetDestination(key[2].GetPubKey().GetID());\n+    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n     dummyTransactions[1].vout[1].nValue = 22*CENT;\n-    dummyTransactions[1].vout[1].scriptPubKey.SetDestination(key[3].GetPubKey().GetID());\n+    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n     coinsRet.SetCoins(dummyTransactions[1].GetHash(), CCoins(dummyTransactions[1], 0));\n \n     return dummyTransactions;\n@@ -307,7 +307,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].nValue = 90*CENT;\n     CKey key;\n     key.MakeNewKey(true);\n-    t.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n+    t.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n     string reason;\n     BOOST_CHECK(IsStandardTx(t, reason));"
      },
      {
        "sha": "6bfaec3681801c640b9e3668cfcf3c90afd745c1",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -1385,7 +1385,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n \n                     // coin control: send change to custom address\n                     if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n-                        scriptChange.SetDestination(coinControl->destChange);\n+                        scriptChange = GetScriptForDestination(coinControl->destChange);\n \n                     // no coin control: send change to newly generated address\n                     else\n@@ -1403,7 +1403,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                         ret = reservekey.GetReservedKey(vchPubKey);\n                         assert(ret); // should never fail, as we just unlocked\n \n-                        scriptChange.SetDestination(vchPubKey.GetID());\n+                        scriptChange = GetScriptForDestination(vchPubKey.GetID());\n                     }\n \n                     CTxOut newTxOut(nChange, scriptChange);\n@@ -1556,8 +1556,7 @@ string CWallet::SendMoney(const CTxDestination &address, int64_t nValue, CWallet\n     }\n \n     // Parse Bitcoin address\n-    CScript scriptPubKey;\n-    scriptPubKey.SetDestination(address);\n+    CScript scriptPubKey = GetScriptForDestination(address);\n \n     // Create and send the transaction\n     CReserveKey reservekey(this);"
      },
      {
        "sha": "07149ebd0b6cd2a947ded1a13f404a7b79449978",
        "filename": "src/wallet_ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet_ismine.cpp?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -29,8 +29,7 @@ unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n \n isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest)\n {\n-    CScript script;\n-    script.SetDestination(dest);\n+    CScript script = GetScriptForDestination(dest);\n     return IsMine(keystore, script);\n }\n "
      },
      {
        "sha": "f326b86815b34725ffeeec71640ed65e42eda07a",
        "filename": "src/wallet_ismine.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0be990ba34110184c8a5a2c04094311dab5cd84c/src/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0be990ba34110184c8a5a2c04094311dab5cd84c/src/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet_ismine.h?ref=0be990ba34110184c8a5a2c04094311dab5cd84c",
        "patch": "@@ -7,9 +7,10 @@\n #define H_BITCOIN_WALLET_ISMINE\n \n #include \"key.h\"\n-#include \"script/script.h\"\n+#include \"script/standard.h\"\n \n class CKeyStore;\n+class CScript;\n \n /** IsMine() return codes */\n enum isminetype"
      }
    ]
  },
  {
    "sha": "7e3821c097c05a4790abac53ddd26ef28cb7cf4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTM4MjFjMDk3YzA1YTQ3OTBhYmFjNTNkZGQyNmVmMjhjYjdjZjRk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-16T17:25:46Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-16T17:39:25Z"
      },
      "message": "travis: retry tests before giving up",
      "tree": {
        "sha": "fd213567fec5691d0aa0339b27b65a003120a67c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd213567fec5691d0aa0339b27b65a003120a67c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e3821c097c05a4790abac53ddd26ef28cb7cf4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e3821c097c05a4790abac53ddd26ef28cb7cf4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e3821c097c05a4790abac53ddd26ef28cb7cf4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e3821c097c05a4790abac53ddd26ef28cb7cf4d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab3834baae2e48708de2be74217eaf9da9081fc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab3834baae2e48708de2be74217eaf9da9081fc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab3834baae2e48708de2be74217eaf9da9081fc3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "82f3290110bd956b822bc438214769c6f259a8f2",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e3821c097c05a4790abac53ddd26ef28cb7cf4d/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e3821c097c05a4790abac53ddd26ef28cb7cf4d/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=7e3821c097c05a4790abac53ddd26ef28cb7cf4d",
        "patch": "@@ -58,6 +58,6 @@ script:\n     - cd bitcoin-$HOST\n     - ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n-    - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then travis_retry make check; fi\n after_script:\n     - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then (echo \"Upload goes here. Something like: scp -r $BASE_OUTDIR server\" || echo \"upload failed\"); fi"
      }
    ]
  },
  {
    "sha": "cf12c223d093d349822333582bd1899bdfb03bbc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjEyYzIyM2QwOTNkMzQ5ODIyMzMzNTgyYmQxODk5YmRmYjAzYmJj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-16T18:23:39Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-16T18:23:55Z"
      },
      "message": "depends: respect CPPFLAGS when configuring with depends",
      "tree": {
        "sha": "4939a753468f8ec95b30599072605446f5e560a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4939a753468f8ec95b30599072605446f5e560a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf12c223d093d349822333582bd1899bdfb03bbc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf12c223d093d349822333582bd1899bdfb03bbc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf12c223d093d349822333582bd1899bdfb03bbc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf12c223d093d349822333582bd1899bdfb03bbc/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e3821c097c05a4790abac53ddd26ef28cb7cf4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e3821c097c05a4790abac53ddd26ef28cb7cf4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e3821c097c05a4790abac53ddd26ef28cb7cf4d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1df04eec3f2c8bdc2adba623c42c49fe403686bb",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf12c223d093d349822333582bd1899bdfb03bbc/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf12c223d093d349822333582bd1899bdfb03bbc/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=cf12c223d093d349822333582bd1899bdfb03bbc",
        "patch": "@@ -52,7 +52,7 @@ export PATH=$prefix/native/bin:$PATH\n export PKG_CONFIG=\"`which pkg-config` --static\"\n export PKG_CONFIG_LIBDIR=$prefix/lib/pkgconfig\n export PKG_CONFIG_PATH=$prefix/share/pkgconfig\n-export CPPFLAGS=-I$prefix/include/\n+export CPPFLAGS=\"-I$prefix/include/ $CPPFLAGS\"\n \n export CC=\"@CC@\"\n export CXX=\"@CXX@\""
      }
    ]
  },
  {
    "sha": "1b0c981cb69c63f09fef71241ded8a6279e4b993",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjBjOTgxY2I2OWM2M2YwOWZlZjcxMjQxZGVkOGE2Mjc5ZTRiOTkz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-16T17:54:36Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-16T18:23:55Z"
      },
      "message": "travis: use DEBUG_LOCKORDER for our quick/small Linux build",
      "tree": {
        "sha": "396fddfb58da63fbef535ec9e1b1f46258618a13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/396fddfb58da63fbef535ec9e1b1f46258618a13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b0c981cb69c63f09fef71241ded8a6279e4b993",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b0c981cb69c63f09fef71241ded8a6279e4b993",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b0c981cb69c63f09fef71241ded8a6279e4b993",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b0c981cb69c63f09fef71241ded8a6279e4b993/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf12c223d093d349822333582bd1899bdfb03bbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf12c223d093d349822333582bd1899bdfb03bbc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf12c223d093d349822333582bd1899bdfb03bbc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "54799362a23e4bfcd43843b1b1459f638529a570",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b0c981cb69c63f09fef71241ded8a6279e4b993/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b0c981cb69c63f09fef71241ded8a6279e4b993/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=1b0c981cb69c63f09fef71241ded8a6279e4b993",
        "patch": "@@ -27,7 +27,7 @@ matrix:\n     - compiler: \"true 1\"\n       env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n     - compiler: \"true 2\"\n-      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_QT=1 NO_WALLET=1 NO_UPNP=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_QT=1 NO_WALLET=1 NO_UPNP=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \"true 3\"\n       env: HOST=x86_64-unknown-linux-gnu RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n     - compiler: \"true 4\""
      }
    ]
  },
  {
    "sha": "d65ea7efa320cc75d863918fe163831ff2b6d4df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjVlYTdlZmEzMjBjYzc1ZDg2MzkxOGZlMTYzODMxZmYyYjZkNGRm",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-09-16T19:25:00Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-09-16T19:25:00Z"
      },
      "message": "Merge pull request #4932 from theuni/travis\n\nTravis tweaks",
      "tree": {
        "sha": "396fddfb58da63fbef535ec9e1b1f46258618a13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/396fddfb58da63fbef535ec9e1b1f46258618a13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d65ea7efa320cc75d863918fe163831ff2b6d4df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d65ea7efa320cc75d863918fe163831ff2b6d4df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d65ea7efa320cc75d863918fe163831ff2b6d4df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d65ea7efa320cc75d863918fe163831ff2b6d4df/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab3834baae2e48708de2be74217eaf9da9081fc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab3834baae2e48708de2be74217eaf9da9081fc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab3834baae2e48708de2be74217eaf9da9081fc3"
      },
      {
        "sha": "1b0c981cb69c63f09fef71241ded8a6279e4b993",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b0c981cb69c63f09fef71241ded8a6279e4b993",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b0c981cb69c63f09fef71241ded8a6279e4b993"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "54799362a23e4bfcd43843b1b1459f638529a570",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d65ea7efa320cc75d863918fe163831ff2b6d4df/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d65ea7efa320cc75d863918fe163831ff2b6d4df/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=d65ea7efa320cc75d863918fe163831ff2b6d4df",
        "patch": "@@ -27,7 +27,7 @@ matrix:\n     - compiler: \"true 1\"\n       env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n     - compiler: \"true 2\"\n-      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_QT=1 NO_WALLET=1 NO_UPNP=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_QT=1 NO_WALLET=1 NO_UPNP=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \"true 3\"\n       env: HOST=x86_64-unknown-linux-gnu RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n     - compiler: \"true 4\"\n@@ -58,6 +58,6 @@ script:\n     - cd bitcoin-$HOST\n     - ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n-    - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then travis_retry make check; fi\n after_script:\n     - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then (echo \"Upload goes here. Something like: scp -r $BASE_OUTDIR server\" || echo \"upload failed\"); fi"
      },
      {
        "sha": "1df04eec3f2c8bdc2adba623c42c49fe403686bb",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d65ea7efa320cc75d863918fe163831ff2b6d4df/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d65ea7efa320cc75d863918fe163831ff2b6d4df/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=d65ea7efa320cc75d863918fe163831ff2b6d4df",
        "patch": "@@ -52,7 +52,7 @@ export PATH=$prefix/native/bin:$PATH\n export PKG_CONFIG=\"`which pkg-config` --static\"\n export PKG_CONFIG_LIBDIR=$prefix/lib/pkgconfig\n export PKG_CONFIG_PATH=$prefix/share/pkgconfig\n-export CPPFLAGS=-I$prefix/include/\n+export CPPFLAGS=\"-I$prefix/include/ $CPPFLAGS\"\n \n export CC=\"@CC@\"\n export CXX=\"@CXX@\""
      }
    ]
  },
  {
    "sha": "651a1fcf813983e8e5f6f180e062a5111e900dad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTFhMWZjZjgxMzk4M2U4ZTVmNmYxODBlMDYyYTUxMTFlOTAwZGFk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-16T19:25:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-16T19:25:51Z"
      },
      "message": "Merge pull request #4927\n\nee304b6 minor changes for help message of getpeerinfo (Philip Kaufmann)",
      "tree": {
        "sha": "898ab25167869d2bedecd731850aed3648ea057e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/898ab25167869d2bedecd731850aed3648ea057e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/651a1fcf813983e8e5f6f180e062a5111e900dad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUGI6/AAoJEI9lMlXIeZLgZn0L/AxWbqK4dQ/RxUnHtPzbHewm\nTgyetcQUuaXDL96M5TEQ4/iqOvoZPkrniX76PsOMQM+FMrfW3tnO6oc1LDK+3/C0\nkvJbM5sRxvxDKVZrcM4Lb9uisCgTLEwKTbbkNooV9/s3fPGzNAPUXiBAUQ4llaVo\nYcWJTVANyH9JG4oJyK66S0s2k7Z+hFpduGPpVjByrjfpyHGdRyOiw3kAVEMIxJZQ\njJUswGd93t3IQ5dftVQSQXV2mS9Oe7JM0/Qs1AdCA6pSJ6lBP5NclxY0crXGYkM7\nQFug8+WstZ91/IQHmJLNNGq9s5nXlfy51c7Soi1PLH9WtRRFV4BhBs484wbtTG3Z\ndIX9F4Vtcx1UVk42BbzS6n/LN3sSwPZ2T2Q+X0aMPTzK/xnuSVaax8LqBYxQ9Xde\n8VlpiKcBTEadcVqtnEGeeO/5BL9jFVIDeHLokzfwZ88hAKR5suI+rCU+nr0YQrgu\nQzBHHQAXppMeRYomlwlViUVR4O3PcNSSWkPD9N7bBw==\n=YsSe\n-----END PGP SIGNATURE-----",
        "payload": "tree 898ab25167869d2bedecd731850aed3648ea057e\nparent d65ea7efa320cc75d863918fe163831ff2b6d4df\nparent ee304b6e355ac324f4054e7672d5f8e6b8eb44e9\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1410895541 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1410895551 +0200\n\nMerge pull request #4927\n\nee304b6 minor changes for help message of getpeerinfo (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/651a1fcf813983e8e5f6f180e062a5111e900dad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/651a1fcf813983e8e5f6f180e062a5111e900dad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/651a1fcf813983e8e5f6f180e062a5111e900dad/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d65ea7efa320cc75d863918fe163831ff2b6d4df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d65ea7efa320cc75d863918fe163831ff2b6d4df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d65ea7efa320cc75d863918fe163831ff2b6d4df"
      },
      {
        "sha": "ee304b6e355ac324f4054e7672d5f8e6b8eb44e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee304b6e355ac324f4054e7672d5f8e6b8eb44e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ee304b6e355ac324f4054e7672d5f8e6b8eb44e9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "52f98fbf004353b2bba26862cf265799bdfa0fba",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/651a1fcf813983e8e5f6f180e062a5111e900dad/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/651a1fcf813983e8e5f6f180e062a5111e900dad/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=651a1fcf813983e8e5f6f180e062a5111e900dad",
        "patch": "@@ -95,8 +95,8 @@ Value getpeerinfo(const Array& params, bool fHelp)\n             \"    \\\"subver\\\": \\\"/Satoshi:0.8.5/\\\",  (string) The string version\\n\"\n             \"    \\\"inbound\\\": true|false,     (boolean) Inbound (true) or Outbound (false)\\n\"\n             \"    \\\"startingheight\\\": n,       (numeric) The starting height (block) of the peer\\n\"\n-            \"    \\\"banscore\\\": n,              (numeric) The ban score (stats.nMisbehavior)\\n\"\n-            \"    \\\"syncnode\\\" : true|false     (booleamn) if sync node\\n\"\n+            \"    \\\"banscore\\\": n,             (numeric) The ban score\\n\"\n+            \"    \\\"syncnode\\\": true|false     (booleamn) if sync node\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"]\\n\""
      }
    ]
  },
  {
    "sha": "69dd8c919aa3a1b88af34265f828fe0a58a55014",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWRkOGM5MTlhYTNhMWI4OGFmMzQyNjVmODI4ZmUwYTU4YTU1MDE0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-17T10:08:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-17T11:04:54Z"
      },
      "message": "Merge pull request #4899\n\n0be990b Move CTxDestination from script/script to script/standard (Pieter Wuille)",
      "tree": {
        "sha": "672551d1afcb67ad45a24450ac753cfbd31d2e1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/672551d1afcb67ad45a24450ac753cfbd31d2e1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69dd8c919aa3a1b88af34265f828fe0a58a55014",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUGWrWAAoJEHSBCwEjRsmmRUQH/3gdgIYpPox3q9ksKDggJ+zj\nnHbYLBzfrSL5cX/dx0Iw+ERXYNNEFQ1q0b8eJv/W6dLFj97s4hm1gZPtpsBo0fii\nsu+p4BUbhL7wvsSdnwEWNcpRjFfCq1H8EtmWiLwpbarY+DNRMqOiSZy6bHp0j/VV\nUj1uYog0q80OklbSY4Lpm2KDZQWZeSYXzmyeN+SRzzY2MBd6KabflTiJe+iXV+oI\nex8w3ltFQ+mA4FEYYdt6R9liOTuVi5244EXrH2WpZbwJfpS4AgOw9C+M6gJu0rzH\nYmhvjzyv5SxSSVlx8q49ZrE8uAvS/ke87I8OgbTscuXZ5y88nGYUQloZYs+uYZw=\n=HX4j\n-----END PGP SIGNATURE-----",
        "payload": "tree 672551d1afcb67ad45a24450ac753cfbd31d2e1e\nparent 651a1fcf813983e8e5f6f180e062a5111e900dad\nparent 0be990ba34110184c8a5a2c04094311dab5cd84c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1410948533 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1410951894 +0200\n\nMerge pull request #4899\n\n0be990b Move CTxDestination from script/script to script/standard (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69dd8c919aa3a1b88af34265f828fe0a58a55014",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69dd8c919aa3a1b88af34265f828fe0a58a55014",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69dd8c919aa3a1b88af34265f828fe0a58a55014/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "651a1fcf813983e8e5f6f180e062a5111e900dad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/651a1fcf813983e8e5f6f180e062a5111e900dad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/651a1fcf813983e8e5f6f180e062a5111e900dad"
      },
      {
        "sha": "0be990ba34110184c8a5a2c04094311dab5cd84c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0be990ba34110184c8a5a2c04094311dab5cd84c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0be990ba34110184c8a5a2c04094311dab5cd84c"
      }
    ],
    "stats": {
      "total": 244,
      "additions": 122,
      "deletions": 122
    },
    "files": [
      {
        "sha": "c5e230c72ef94133eb5f1749a23246a756015ee9",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -17,6 +17,7 @@\n #include \"chainparams.h\"\n #include \"key.h\"\n #include \"script/script.h\"\n+#include \"script/standard.h\"\n \n #include <string>\n #include <vector>"
      },
      {
        "sha": "6445042f9cba218cfcdc7281e06792fbc9d90283",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -224,9 +224,8 @@ static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n     if (!addr.IsValid())\n         throw runtime_error(\"invalid TX output address\");\n \n-    // build standard output script via SetDestination()\n-    CScript scriptPubKey;\n-    scriptPubKey.SetDestination(addr.Get());\n+    // build standard output script via GetScriptForDestination()\n+    CScript scriptPubKey = GetScriptForDestination(addr.Get());\n \n     // construct TxOut, append to transaction output list\n     CTxOut txout(value, scriptPubKey);"
      },
      {
        "sha": "fc22871a6b042f7b115f66a6826aec212b7909e2",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -13,6 +13,8 @@\n #include \"init.h\"\n #include \"main.h\"\n #include \"protocol.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"util.h\"\n \n #ifdef WIN32\n@@ -222,7 +224,7 @@ QString formatBitcoinURI(const SendCoinsRecipient &info)\n bool isDust(const QString& address, qint64 amount)\n {\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n-    CScript script; script.SetDestination(dest);\n+    CScript script = GetScriptForDestination(dest);\n     CTxOut txOut(amount, script);\n     return txOut.IsDust(::minRelayTxFee);\n }"
      },
      {
        "sha": "cc4478f39f1b4dac2ead0a8d4a924c8931d3fc4b",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -609,7 +609,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     std::string strAccount = account.toStdString();\n     set<CTxDestination> refundAddresses = wallet->GetAccountAddresses(strAccount);\n     if (!refundAddresses.empty()) {\n-        CScript s; s.SetDestination(*refundAddresses.begin());\n+        CScript s = GetScriptForDestination(*refundAddresses.begin());\n         payments::Output* refund_to = payment.add_refund_to();\n         refund_to->set_script(&s[0], s.size());\n     }\n@@ -620,7 +620,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n             CKeyID keyID = newKey.GetID();\n             wallet->SetAddressBook(keyID, strAccount, \"refund\");\n \n-            CScript s; s.SetDestination(keyID);\n+            CScript s = GetScriptForDestination(keyID);\n             payments::Output* refund_to = payment.add_refund_to();\n             refund_to->set_script(&s[0], s.size());\n         }"
      },
      {
        "sha": "ed90914ba7fd53950ac3698b3f36a298a9777ed4",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -241,8 +241,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             setAddress.insert(rcp.address);\n             ++nAddresses;\n \n-            CScript scriptPubKey;\n-            scriptPubKey.SetDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n+            CScript scriptPubKey = GetScriptForDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n             vecSend.push_back(std::pair<CScript, int64_t>(scriptPubKey, rcp.amount));\n \n             total += rcp.amount;"
      },
      {
        "sha": "1ac7024550c6f14f5c082f20636ad1f9dd8a861b",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -6,6 +6,8 @@\n #include \"rpcserver.h\"\n #include \"init.h\"\n #include \"main.h\"\n+#include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"sync.h\"\n #include \"util.h\"\n #include \"utiltime.h\"\n@@ -161,7 +163,7 @@ Value importaddress(const Array& params, bool fHelp)\n \n     CBitcoinAddress address(params[0].get_str());\n     if (address.IsValid()) {\n-        script.SetDestination(address.Get());\n+        script = GetScriptForDestination(address.Get());\n     } else if (IsHex(params[0].get_str())) {\n         std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n         script = CScript(data.begin(), data.end());"
      },
      {
        "sha": "dd45eefd58a9b32cd69e7bef6c7970bd327186ab",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -250,8 +250,7 @@ CScript _createmultisig_redeemScript(const Array& params)\n             throw runtime_error(\" Invalid public key: \"+ks);\n         }\n     }\n-    CScript result;\n-    result.SetMultisig(nRequired, pubkeys);\n+    CScript result = GetScriptForMultisig(nRequired, pubkeys);\n \n     if (result.size() > MAX_SCRIPT_ELEMENT_SIZE)\n         throw runtime_error("
      },
      {
        "sha": "b295be3b515ea185d163d9b8a143729d3074ed9d",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -366,8 +366,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);\n         setAddress.insert(address);\n \n-        CScript scriptPubKey;\n-        scriptPubKey.SetDestination(address.Get());\n+        CScript scriptPubKey = GetScriptForDestination(address.Get());\n         int64_t nAmount = AmountFromValue(s.value_);\n \n         CTxOut out(nAmount, scriptPubKey);"
      },
      {
        "sha": "d9a23b23474b5d97bd241d05af497fee4052c569",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -124,8 +124,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     // Check if the current key has been used\n     if (account.vchPubKey.IsValid())\n     {\n-        CScript scriptPubKey;\n-        scriptPubKey.SetDestination(account.vchPubKey.GetID());\n+        CScript scriptPubKey = GetScriptForDestination(account.vchPubKey.GetID());\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin();\n              it != pwalletMain->mapWallet.end() && account.vchPubKey.IsValid();\n              ++it)\n@@ -472,10 +471,9 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n \n     // Bitcoin address\n     CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n-    CScript scriptPubKey;\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    scriptPubKey.SetDestination(address.Get());\n+    CScript scriptPubKey = GetScriptForDestination(address.Get());\n     if (!IsMine(*pwalletMain,scriptPubKey))\n         return (double)0.0;\n \n@@ -849,8 +847,7 @@ Value sendmany(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated address: \")+s.name_);\n         setAddress.insert(address);\n \n-        CScript scriptPubKey;\n-        scriptPubKey.SetDestination(address.Get());\n+        CScript scriptPubKey = GetScriptForDestination(address.Get());\n         int64_t nAmount = AmountFromValue(s.value_);\n         totalAmount += nAmount;\n "
      },
      {
        "sha": "a5126e7cc26fbb1d0aab710c1879be9e86c84656",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 40,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -253,43 +253,3 @@ bool CScript::HasCanonicalPushes() const\n     }\n     return true;\n }\n-\n-class CScriptVisitor : public boost::static_visitor<bool>\n-{\n-private:\n-    CScript *script;\n-public:\n-    CScriptVisitor(CScript *scriptin) { script = scriptin; }\n-\n-    bool operator()(const CNoDestination &dest) const {\n-        script->clear();\n-        return false;\n-    }\n-\n-    bool operator()(const CKeyID &keyID) const {\n-        script->clear();\n-        *script << OP_DUP << OP_HASH160 << keyID << OP_EQUALVERIFY << OP_CHECKSIG;\n-        return true;\n-    }\n-\n-    bool operator()(const CScriptID &scriptID) const {\n-        script->clear();\n-        *script << OP_HASH160 << scriptID << OP_EQUAL;\n-        return true;\n-    }\n-};\n-\n-void CScript::SetDestination(const CTxDestination& dest)\n-{\n-    boost::apply_visitor(CScriptVisitor(this), dest);\n-}\n-\n-void CScript::SetMultisig(int nRequired, const std::vector<CPubKey>& keys)\n-{\n-    this->clear();\n-\n-    *this << EncodeOP_N(nRequired);\n-    BOOST_FOREACH(const CPubKey& key, keys)\n-        *this << key;\n-    *this << EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n-}"
      },
      {
        "sha": "07a4229f853a3e4577b53550a5ace143d094479b",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -320,20 +320,6 @@ inline std::string ValueString(const std::vector<unsigned char>& vch)\n         return HexStr(vch);\n }\n \n-class CNoDestination {\n-public:\n-    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }\n-    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n-};\n-\n-/** A txout script template with a specific destination. It is either:\n- *  * CNoDestination: no destination set\n- *  * CKeyID: TX_PUBKEYHASH destination\n- *  * CScriptID: TX_SCRIPTHASH destination\n- *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n- */\n-typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n-\n /** Serialized script, used inside transaction inputs and outputs */\n class CScript : public std::vector<unsigned char>\n {\n@@ -604,9 +590,6 @@ class CScript : public std::vector<unsigned char>\n         return (size() > 0 && *begin() == OP_RETURN);\n     }\n \n-    void SetDestination(const CTxDestination& address);\n-    void SetMultisig(int nRequired, const std::vector<CPubKey>& keys);\n-\n     std::string ToString() const\n     {\n         std::string str;"
      },
      {
        "sha": "407baf621d043b8c3e19bd6fd314a79763f82ad7",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -252,3 +252,50 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vecto\n \n     return true;\n }\n+\n+namespace\n+{\n+class CScriptVisitor : public boost::static_visitor<bool>\n+{\n+private:\n+    CScript *script;\n+public:\n+    CScriptVisitor(CScript *scriptin) { script = scriptin; }\n+\n+    bool operator()(const CNoDestination &dest) const {\n+        script->clear();\n+        return false;\n+    }\n+\n+    bool operator()(const CKeyID &keyID) const {\n+        script->clear();\n+        *script << OP_DUP << OP_HASH160 << keyID << OP_EQUALVERIFY << OP_CHECKSIG;\n+        return true;\n+    }\n+\n+    bool operator()(const CScriptID &scriptID) const {\n+        script->clear();\n+        *script << OP_HASH160 << scriptID << OP_EQUAL;\n+        return true;\n+    }\n+};\n+}\n+\n+CScript GetScriptForDestination(const CTxDestination& dest)\n+{\n+    CScript script;\n+\n+    boost::apply_visitor(CScriptVisitor(&script), dest);\n+    return script;\n+}\n+\n+CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n+{\n+    CScript script;\n+\n+    script << CScript::EncodeOP_N(nRequired);\n+    BOOST_FOREACH(const CPubKey& key, keys)\n+        script << key;\n+    script << CScript::EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n+    return script;\n+}"
      },
      {
        "sha": "ead79b82a23d2cba0529b439f0b5c9b18af96571",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -45,6 +45,20 @@ enum txnouttype\n     TX_NULL_DATA,\n };\n \n+class CNoDestination {\n+public:\n+    friend bool operator==(const CNoDestination &a, const CNoDestination &b) { return true; }\n+    friend bool operator<(const CNoDestination &a, const CNoDestination &b) { return true; }\n+};\n+\n+/** A txout script template with a specific destination. It is either:\n+ *  * CNoDestination: no destination set\n+ *  * CKeyID: TX_PUBKEYHASH destination\n+ *  * CScriptID: TX_SCRIPTHASH destination\n+ *  A CTxDestination is the internal data type encoded in a CBitcoinAddress\n+ */\n+typedef boost::variant<CNoDestination, CKeyID, CScriptID> CTxDestination;\n+\n const char* GetTxnOutputType(txnouttype t);\n \n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n@@ -53,4 +67,7 @@ bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n \n+CScript GetScriptForDestination(const CTxDestination& dest);\n+CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys);\n+\n #endif // H_BITCOIN_SCRIPT_STANDARD"
      },
      {
        "sha": "af01e5518cec1bf4abbfc8a638ce74e0a4c65e55",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -173,7 +173,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vin[0].scriptSig << OP_1;\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n+        tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n         AddOrphanTx(tx, i);\n     }\n@@ -189,7 +189,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         tx.vin[0].prevout.hash = txPrev.GetHash();\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n+        tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n         SignSignature(keystore, txPrev, tx, 0);\n \n         AddOrphanTx(tx, i);\n@@ -203,7 +203,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         CMutableTransaction tx;\n         tx.vout.resize(1);\n         tx.vout[0].nValue = 1*CENT;\n-        tx.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n+        tx.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n         tx.vin.resize(500);\n         for (unsigned int j = 0; j < tx.vin.size(); j++)\n         {"
      },
      {
        "sha": "9e4669eba90075c3eae6cc82a6e4e44114322c57",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -170,7 +170,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].scriptSig = CScript() << OP_1;\n     tx.vout[0].nValue = 4900000000LL;\n     script = CScript() << OP_0;\n-    tx.vout[0].scriptPubKey.SetDestination(script.GetID());\n+    tx.vout[0].scriptPubKey = GetScriptForDestination(script.GetID());\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n     tx.vin[0].prevout.hash = hash;"
      },
      {
        "sha": "1f3991d7b6fd0a455f294f2030e346a443313f96",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 24,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -68,14 +68,14 @@ BOOST_AUTO_TEST_CASE(sign)\n     // different keys, straight/P2SH, pubkey/pubkeyhash\n     CScript standardScripts[4];\n     standardScripts[0] << key[0].GetPubKey() << OP_CHECKSIG;\n-    standardScripts[1].SetDestination(key[1].GetPubKey().GetID());\n+    standardScripts[1] = GetScriptForDestination(key[1].GetPubKey().GetID());\n     standardScripts[2] << key[1].GetPubKey() << OP_CHECKSIG;\n-    standardScripts[3].SetDestination(key[2].GetPubKey().GetID());\n+    standardScripts[3] = GetScriptForDestination(key[2].GetPubKey().GetID());\n     CScript evalScripts[4];\n     for (int i = 0; i < 4; i++)\n     {\n         keystore.AddCScript(standardScripts[i]);\n-        evalScripts[i].SetDestination(standardScripts[i].GetID());\n+        evalScripts[i] = GetScriptForDestination(standardScripts[i].GetID());\n     }\n \n     CMutableTransaction txFrom;  // Funding transaction:\n@@ -129,8 +129,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n     CScript invalidAsScript;\n     invalidAsScript << OP_INVALIDOPCODE << OP_INVALIDOPCODE;\n \n-    CScript p2sh;\n-    p2sh.SetDestination(invalidAsScript.GetID());\n+    CScript p2sh = GetScriptForDestination(invalidAsScript.GetID());\n \n     CScript scriptSig;\n     scriptSig << Serialize(invalidAsScript);\n@@ -140,8 +139,7 @@ BOOST_AUTO_TEST_CASE(norecurse)\n \n     // Try to recur, and verification should succeed because\n     // the inner HASH160 <> EQUAL should only check the hash:\n-    CScript p2sh2;\n-    p2sh2.SetDestination(p2sh.GetID());\n+    CScript p2sh2 = GetScriptForDestination(p2sh.GetID());\n     CScript scriptSig2;\n     scriptSig2 << Serialize(invalidAsScript) << Serialize(p2sh);\n \n@@ -163,15 +161,15 @@ BOOST_AUTO_TEST_CASE(set)\n     }\n \n     CScript inner[4];\n-    inner[0].SetDestination(key[0].GetPubKey().GetID());\n-    inner[1].SetMultisig(2, std::vector<CPubKey>(keys.begin(), keys.begin()+2));\n-    inner[2].SetMultisig(1, std::vector<CPubKey>(keys.begin(), keys.begin()+2));\n-    inner[3].SetMultisig(2, std::vector<CPubKey>(keys.begin(), keys.begin()+3));\n+    inner[0] = GetScriptForDestination(key[0].GetPubKey().GetID());\n+    inner[1] = GetScriptForMultisig(2, std::vector<CPubKey>(keys.begin(), keys.begin()+2));\n+    inner[2] = GetScriptForMultisig(1, std::vector<CPubKey>(keys.begin(), keys.begin()+2));\n+    inner[3] = GetScriptForMultisig(2, std::vector<CPubKey>(keys.begin(), keys.begin()+3));\n \n     CScript outer[4];\n     for (int i = 0; i < 4; i++)\n     {\n-        outer[i].SetDestination(inner[i].GetID());\n+        outer[i] = GetScriptForDestination(inner[i].GetID());\n         keystore.AddCScript(inner[i]);\n     }\n \n@@ -244,8 +242,7 @@ BOOST_AUTO_TEST_CASE(switchover)\n     CScript scriptSig;\n     scriptSig << Serialize(notValid);\n \n-    CScript fund;\n-    fund.SetDestination(notValid.GetID());\n+    CScript fund = GetScriptForDestination(notValid.GetID());\n \n \n     // Validation should succeed under old rules (hash is correct):\n@@ -274,11 +271,11 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txFrom.vout.resize(7);\n \n     // First three are standard:\n-    CScript pay1; pay1.SetDestination(key[0].GetPubKey().GetID());\n+    CScript pay1 = GetScriptForDestination(key[0].GetPubKey().GetID());\n     keystore.AddCScript(pay1);\n-    CScript pay1of3; pay1of3.SetMultisig(1, keys);\n+    CScript pay1of3 = GetScriptForMultisig(1, keys);\n \n-    txFrom.vout[0].scriptPubKey.SetDestination(pay1.GetID()); // P2SH (OP_CHECKSIG)\n+    txFrom.vout[0].scriptPubKey = GetScriptForDestination(pay1.GetID()); // P2SH (OP_CHECKSIG)\n     txFrom.vout[0].nValue = 1000;\n     txFrom.vout[1].scriptPubKey = pay1; // ordinary OP_CHECKSIG\n     txFrom.vout[1].nValue = 2000;\n@@ -293,7 +290,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     oneAndTwo << OP_2 << key[3].GetPubKey() << key[4].GetPubKey() << key[5].GetPubKey();\n     oneAndTwo << OP_3 << OP_CHECKMULTISIG;\n     keystore.AddCScript(oneAndTwo);\n-    txFrom.vout[3].scriptPubKey.SetDestination(oneAndTwo.GetID());\n+    txFrom.vout[3].scriptPubKey = GetScriptForDestination(oneAndTwo.GetID());\n     txFrom.vout[3].nValue = 4000;\n \n     // vout[4] is max sigops:\n@@ -302,25 +299,25 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n         fifteenSigops << key[i%3].GetPubKey();\n     fifteenSigops << OP_15 << OP_CHECKMULTISIG;\n     keystore.AddCScript(fifteenSigops);\n-    txFrom.vout[4].scriptPubKey.SetDestination(fifteenSigops.GetID());\n+    txFrom.vout[4].scriptPubKey = GetScriptForDestination(fifteenSigops.GetID());\n     txFrom.vout[4].nValue = 5000;\n \n     // vout[5/6] are non-standard because they exceed MAX_P2SH_SIGOPS\n     CScript sixteenSigops; sixteenSigops << OP_16 << OP_CHECKMULTISIG;\n     keystore.AddCScript(sixteenSigops);\n-    txFrom.vout[5].scriptPubKey.SetDestination(fifteenSigops.GetID());\n+    txFrom.vout[5].scriptPubKey = GetScriptForDestination(fifteenSigops.GetID());\n     txFrom.vout[5].nValue = 5000;\n     CScript twentySigops; twentySigops << OP_CHECKMULTISIG;\n     keystore.AddCScript(twentySigops);\n-    txFrom.vout[6].scriptPubKey.SetDestination(twentySigops.GetID());\n+    txFrom.vout[6].scriptPubKey = GetScriptForDestination(twentySigops.GetID());\n     txFrom.vout[6].nValue = 6000;\n \n \n     coins.SetCoins(txFrom.GetHash(), CCoins(txFrom, 0));\n \n     CMutableTransaction txTo;\n     txTo.vout.resize(1);\n-    txTo.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n+    txTo.vout[0].scriptPubKey = GetScriptForDestination(key[1].GetPubKey().GetID());\n \n     txTo.vin.resize(5);\n     for (int i = 0; i < 5; i++)\n@@ -352,7 +349,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n \n     CMutableTransaction txToNonStd1;\n     txToNonStd1.vout.resize(1);\n-    txToNonStd1.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n+    txToNonStd1.vout[0].scriptPubKey = GetScriptForDestination(key[1].GetPubKey().GetID());\n     txToNonStd1.vout[0].nValue = 1000;\n     txToNonStd1.vin.resize(1);\n     txToNonStd1.vin[0].prevout.n = 5;\n@@ -364,7 +361,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n \n     CMutableTransaction txToNonStd2;\n     txToNonStd2.vout.resize(1);\n-    txToNonStd2.vout[0].scriptPubKey.SetDestination(key[1].GetPubKey().GetID());\n+    txToNonStd2.vout[0].scriptPubKey = GetScriptForDestination(key[1].GetPubKey().GetID());\n     txToNonStd2.vout[0].nValue = 1000;\n     txToNonStd2.vin.resize(1);\n     txToNonStd2.vin[0].prevout.n = 6;"
      },
      {
        "sha": "7afe840897748257d79583ac7003adf95424dfbc",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -280,7 +280,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n \n     CMutableTransaction txFrom;\n     txFrom.vout.resize(1);\n-    txFrom.vout[0].scriptPubKey.SetDestination(keys[0].GetPubKey().GetID());\n+    txFrom.vout[0].scriptPubKey = GetScriptForDestination(keys[0].GetPubKey().GetID());\n     CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n     CMutableTransaction txTo;\n     txTo.vin.resize(1);\n@@ -309,7 +309,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     // P2SH, single-signature case:\n     CScript pkSingle; pkSingle << keys[0].GetPubKey() << OP_CHECKSIG;\n     keystore.AddCScript(pkSingle);\n-    scriptPubKey.SetDestination(pkSingle.GetID());\n+    scriptPubKey = GetScriptForDestination(pkSingle.GetID());\n     SignSignature(keystore, txFrom, txTo, 0);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);\n     BOOST_CHECK(combined == scriptSig);\n@@ -327,7 +327,7 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n     BOOST_CHECK(combined == scriptSig);\n \n     // Hardest case:  Multisig 2-of-3\n-    scriptPubKey.SetMultisig(2, pubkeys);\n+    scriptPubKey = GetScriptForMultisig(2, pubkeys);\n     keystore.AddCScript(scriptPubKey);\n     SignSignature(keystore, txFrom, txTo, 0);\n     combined = CombineSignatures(scriptPubKey, txTo, 0, scriptSig, empty);"
      },
      {
        "sha": "62a6cd63d65a230efb34576a08ec11802527eb74",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"key.h\"\n #include \"script/script.h\"\n+#include \"script/standard.h\"\n #include \"uint256.h\"\n \n #include <vector>\n@@ -37,8 +38,7 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 3U);\n     BOOST_CHECK_EQUAL(s1.GetSigOpCount(false), 21U);\n \n-    CScript p2sh;\n-    p2sh.SetDestination(s1.GetID());\n+    CScript p2sh = GetScriptForDestination(s1.GetID());\n     CScript scriptSig;\n     scriptSig << OP_0 << Serialize(s1);\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(scriptSig), 3U);\n@@ -50,12 +50,11 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n         k.MakeNewKey(true);\n         keys.push_back(k.GetPubKey());\n     }\n-    CScript s2;\n-    s2.SetMultisig(1, keys);\n+    CScript s2 = GetScriptForMultisig(1, keys);\n     BOOST_CHECK_EQUAL(s2.GetSigOpCount(true), 3U);\n     BOOST_CHECK_EQUAL(s2.GetSigOpCount(false), 20U);\n \n-    p2sh.SetDestination(s2.GetID());\n+    p2sh = GetScriptForDestination(s2.GetID());\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(true), 0U);\n     BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(false), 0U);\n     CScript scriptSig2;"
      },
      {
        "sha": "221afa342082871ee2ffc7e123d58a832da3fb0b",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -248,9 +248,9 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsView & coinsRet)\n \n     dummyTransactions[1].vout.resize(2);\n     dummyTransactions[1].vout[0].nValue = 21*CENT;\n-    dummyTransactions[1].vout[0].scriptPubKey.SetDestination(key[2].GetPubKey().GetID());\n+    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n     dummyTransactions[1].vout[1].nValue = 22*CENT;\n-    dummyTransactions[1].vout[1].scriptPubKey.SetDestination(key[3].GetPubKey().GetID());\n+    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n     coinsRet.SetCoins(dummyTransactions[1].GetHash(), CCoins(dummyTransactions[1], 0));\n \n     return dummyTransactions;\n@@ -307,7 +307,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     t.vout[0].nValue = 90*CENT;\n     CKey key;\n     key.MakeNewKey(true);\n-    t.vout[0].scriptPubKey.SetDestination(key.GetPubKey().GetID());\n+    t.vout[0].scriptPubKey = GetScriptForDestination(key.GetPubKey().GetID());\n \n     string reason;\n     BOOST_CHECK(IsStandardTx(t, reason));"
      },
      {
        "sha": "6bfaec3681801c640b9e3668cfcf3c90afd745c1",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -1385,7 +1385,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n \n                     // coin control: send change to custom address\n                     if (coinControl && !boost::get<CNoDestination>(&coinControl->destChange))\n-                        scriptChange.SetDestination(coinControl->destChange);\n+                        scriptChange = GetScriptForDestination(coinControl->destChange);\n \n                     // no coin control: send change to newly generated address\n                     else\n@@ -1403,7 +1403,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                         ret = reservekey.GetReservedKey(vchPubKey);\n                         assert(ret); // should never fail, as we just unlocked\n \n-                        scriptChange.SetDestination(vchPubKey.GetID());\n+                        scriptChange = GetScriptForDestination(vchPubKey.GetID());\n                     }\n \n                     CTxOut newTxOut(nChange, scriptChange);\n@@ -1556,8 +1556,7 @@ string CWallet::SendMoney(const CTxDestination &address, int64_t nValue, CWallet\n     }\n \n     // Parse Bitcoin address\n-    CScript scriptPubKey;\n-    scriptPubKey.SetDestination(address);\n+    CScript scriptPubKey = GetScriptForDestination(address);\n \n     // Create and send the transaction\n     CReserveKey reservekey(this);"
      },
      {
        "sha": "07149ebd0b6cd2a947ded1a13f404a7b79449978",
        "filename": "src/wallet_ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/wallet_ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/wallet_ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet_ismine.cpp?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -29,8 +29,7 @@ unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n \n isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest)\n {\n-    CScript script;\n-    script.SetDestination(dest);\n+    CScript script = GetScriptForDestination(dest);\n     return IsMine(keystore, script);\n }\n "
      },
      {
        "sha": "f326b86815b34725ffeeec71640ed65e42eda07a",
        "filename": "src/wallet_ismine.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/wallet_ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69dd8c919aa3a1b88af34265f828fe0a58a55014/src/wallet_ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet_ismine.h?ref=69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "patch": "@@ -7,9 +7,10 @@\n #define H_BITCOIN_WALLET_ISMINE\n \n #include \"key.h\"\n-#include \"script/script.h\"\n+#include \"script/standard.h\"\n \n class CKeyStore;\n+class CScript;\n \n /** IsMine() return codes */\n enum isminetype"
      }
    ]
  },
  {
    "sha": "5b9d1e10a831b6413b0f6ed54017c9d42139282f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjlkMWUxMGE4MzFiNjQxM2IwZjZlZDU0MDE3YzlkNDIxMzkyODJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-17T11:05:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-17T11:05:41Z"
      },
      "message": "Merge pull request #4863\n\n1a61396 fix missing gettransaction entries in rpcclient (Benedict Chan)\n57e1716 update rpc help message for gettransaction to add includeWatchonly param (Benedict Chan)",
      "tree": {
        "sha": "ecccbd64f24d8231662088c8199583f1508d3520",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecccbd64f24d8231662088c8199583f1508d3520"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b9d1e10a831b6413b0f6ed54017c9d42139282f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUGWsFAAoJEHSBCwEjRsmmMxgH/Aq6aVGCMVIBg0pb8Z8TuGeQ\nmWmmxFE0vTsGodlDcf1APHC1ak/44tfsAqC+nH79cOw8QgUM+iuNpfczWpQl8wXK\nc/R0vzNC3is2InHPDIRzjhpMnQT8wF7e+G6749Nu4/pVwpm1dBV4mIln5tjFV1Mw\nKmJ39+rSKCPXW+JjQZ76K3czfAKUXdcQAUjcY6uS6uqS0Y+MR5qemHPavCkyc3qc\nktJf+UoPwmVpQ44sUWdwT8/R7nR2gRL0J4X4ztxn6OhOeDuPTnhpWnTSxd8iTIst\nfRIx1IV5Ch4quzaShz8zBzZMC0BYIKlc7OYItcFK5pFmOv3L/elEJlLRifY5IjE=\n=Q5mW\n-----END PGP SIGNATURE-----",
        "payload": "tree ecccbd64f24d8231662088c8199583f1508d3520\nparent 69dd8c919aa3a1b88af34265f828fe0a58a55014\nparent 1a613963e1567fd6102e783422cc6cad672dd1a5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1410951911 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1410951941 +0200\n\nMerge pull request #4863\n\n1a61396 fix missing gettransaction entries in rpcclient (Benedict Chan)\n57e1716 update rpc help message for gettransaction to add includeWatchonly param (Benedict Chan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b9d1e10a831b6413b0f6ed54017c9d42139282f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b9d1e10a831b6413b0f6ed54017c9d42139282f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b9d1e10a831b6413b0f6ed54017c9d42139282f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69dd8c919aa3a1b88af34265f828fe0a58a55014",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69dd8c919aa3a1b88af34265f828fe0a58a55014"
      },
      {
        "sha": "1a613963e1567fd6102e783422cc6cad672dd1a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a613963e1567fd6102e783422cc6cad672dd1a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a613963e1567fd6102e783422cc6cad672dd1a5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a9c491cede2a0d68291bdaf8d8b3cb610416de7b",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9d1e10a831b6413b0f6ed54017c9d42139282f/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9d1e10a831b6413b0f6ed54017c9d42139282f/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=5b9d1e10a831b6413b0f6ed54017c9d42139282f",
        "patch": "@@ -66,6 +66,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"listunspent\", 1 },\n     { \"listunspent\", 2 },\n     { \"getblock\", 1 },\n+    { \"gettransaction\", 1 },\n     { \"getrawtransaction\", 1 },\n     { \"createrawtransaction\", 0 },\n     { \"createrawtransaction\", 1 },"
      },
      {
        "sha": "35637362a43e3e040d6efea5469c1f629e318464",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9d1e10a831b6413b0f6ed54017c9d42139282f/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9d1e10a831b6413b0f6ed54017c9d42139282f/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=5b9d1e10a831b6413b0f6ed54017c9d42139282f",
        "patch": "@@ -1487,7 +1487,7 @@ Value gettransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n-            \"gettransaction \\\"txid\\\"\\n\"\n+            \"gettransaction \\\"txid\\\" ( includeWatchonly )\\n\"\n             \"\\nGet detailed information about in-wallet transaction <txid>\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"    (string, required) The transaction id\\n\"\n@@ -1517,6 +1517,7 @@ Value gettransaction(const Array& params, bool fHelp)\n \n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n+            + HelpExampleCli(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\" true\")\n             + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n         );\n "
      }
    ]
  },
  {
    "sha": "438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzhjN2U0Y2QyMTc5MTcwYWVhZGI0YWExYzkwMmNjZDEyNTZkZWU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-17T11:19:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-17T11:44:22Z"
      },
      "message": "Merge pull request #4555\n\n6dcfda2 Don't pass nHashType to EvalScript nor CheckSig (jtimon)\n2b23a87 Don't pass nHashType to VerifyScript (jtimon)\nce3649fb Remove CScriptCheck::nHashType (was always 0) (jtimon)\n358562b Remove unused function main:VerifySignature (jtimon)",
      "tree": {
        "sha": "d040fe5263589ae9718839e17ac5b31c276cc8f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d040fe5263589ae9718839e17ac5b31c276cc8f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUGXQWAAoJEHSBCwEjRsmmhNsH/16j6TNfFrpmouNDxRidJZOi\n6SoGp4FU5O3qWL0Fbs0oIK3umMVPY736Mp7/+hwdg228mtq27RunjVniHBF4tdyf\nPzxD0jZiB8XDORKNPDECUJLIYGrcXFLTPmXInZMA4KZbGDA4TwkWa2iOM3hynKN0\ny/rBMxtXkLbxl3uS0eu7Oay+uUhGZ6evY82orsk+03RSWjyij8/zOx/IETE92bNu\nE7+Si6IEeAVkHgcLH2e5PokbSHkSqpAdeJ77ican3FgpudPbHcB+6CwUQqdBAgk9\nWmgk1+YOs6N9F0XYOyvDX5JAOlZWKGu6LkJRBLc4yrddzXTJek7DDSEi66h/oqs=\n=WEIT\n-----END PGP SIGNATURE-----",
        "payload": "tree d040fe5263589ae9718839e17ac5b31c276cc8f5\nparent 5b9d1e10a831b6413b0f6ed54017c9d42139282f\nparent 6dcfda2dc48bee2148acd571dce7d3f09608d7a2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1410952798 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1410954262 +0200\n\nMerge pull request #4555\n\n6dcfda2 Don't pass nHashType to EvalScript nor CheckSig (jtimon)\n2b23a87 Don't pass nHashType to VerifyScript (jtimon)\nce3649fb Remove CScriptCheck::nHashType (was always 0) (jtimon)\n358562b Remove unused function main:VerifySignature (jtimon)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b9d1e10a831b6413b0f6ed54017c9d42139282f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b9d1e10a831b6413b0f6ed54017c9d42139282f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b9d1e10a831b6413b0f6ed54017c9d42139282f"
      },
      {
        "sha": "6dcfda2dc48bee2148acd571dce7d3f09608d7a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dcfda2dc48bee2148acd571dce7d3f09608d7a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6dcfda2dc48bee2148acd571dce7d3f09608d7a2"
      }
    ],
    "stats": {
      "total": 127,
      "additions": 57,
      "deletions": 70
    },
    "files": [
      {
        "sha": "b6e7a6c540c0631c1b187a853d8ed8dd43f43e4e",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "patch": "@@ -435,7 +435,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, STANDARD_SCRIPT_VERIFY_FLAGS, 0))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, STANDARD_SCRIPT_VERIFY_FLAGS))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "6c1c7166a818bbfdc0b21f491f3db39784f18486",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "patch": "@@ -697,7 +697,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // IsStandard() will have already returned false\n         // and this method isn't called.\n         vector<vector<unsigned char> > stack;\n-        if (!EvalScript(stack, tx.vin[i].scriptSig, tx, i, false, 0))\n+        if (!EvalScript(stack, tx.vin[i].scriptSig, tx, i, false))\n             return false;\n \n         if (whichType == TX_SCRIPTHASH)\n@@ -1367,16 +1367,11 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() const {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, *ptxTo, nIn, nFlags, nHashType))\n+    if (!VerifyScript(scriptSig, scriptPubKey, *ptxTo, nIn, nFlags))\n         return error(\"CScriptCheck() : %s VerifySignature failed\", ptxTo->GetHash().ToString());\n     return true;\n }\n \n-bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType)\n-{\n-    return CScriptCheck(txFrom, txTo, nIn, flags, nHashType)();\n-}\n-\n bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n@@ -1445,7 +1440,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                 assert(coins);\n \n                 // Verify signature\n-                CScriptCheck check(*coins, tx, i, flags, 0);\n+                CScriptCheck check(*coins, tx, i, flags);\n                 if (pvChecks) {\n                     pvChecks->push_back(CScriptCheck());\n                     check.swap(pvChecks->back());\n@@ -1458,7 +1453,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         // avoid splitting the network between upgraded and\n                         // non-upgraded nodes.\n                         CScriptCheck check(*coins, tx, i,\n-                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, 0);\n+                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS);\n                         if (check())\n                             return state.Invalid(false, REJECT_NONSTANDARD, \"non-mandatory-script-verify-flag\");\n                     }"
      },
      {
        "sha": "5acc551793e6fd6aa37900345710219c3626fd4e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "patch": "@@ -176,8 +176,6 @@ int64_t GetBlockValue(int nHeight, int64_t nFees);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n-/** Verify a signature */\n-bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n /** Abort with a message */\n bool AbortNode(const std::string &msg);\n /** Get statistics from node state */\n@@ -344,13 +342,12 @@ class CScriptCheck\n     const CTransaction *ptxTo;\n     unsigned int nIn;\n     unsigned int nFlags;\n-    int nHashType;\n \n public:\n-    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0), nHashType(0) {}\n-    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, int nHashTypeIn) :\n+    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0) {}\n+    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn) :\n         scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey),\n-        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), nHashType(nHashTypeIn) { }\n+        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn) { }\n \n     bool operator()() const;\n \n@@ -359,7 +356,6 @@ class CScriptCheck\n         std::swap(ptxTo, check.ptxTo);\n         std::swap(nIn, check.nIn);\n         std::swap(nFlags, check.nFlags);\n-        std::swap(nHashType, check.nHashType);\n     }\n };\n "
      },
      {
        "sha": "dbb0966ae2c514c7de99e965d5b20a751212e02d",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "patch": "@@ -687,7 +687,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, STANDARD_SCRIPT_VERIFY_FLAGS, 0))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, STANDARD_SCRIPT_VERIFY_FLAGS))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "fd3e4f1ff76a6cbd4fea40185c922c57f16dfb60",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 13,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "patch": "@@ -132,7 +132,7 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n     return true;\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType)\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n {\n     CScript::const_iterator pc = script.begin();\n     CScript::const_iterator pend = script.end();\n@@ -675,7 +675,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n                     bool fSuccess = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                        CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType, flags);\n+                        CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, flags);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -736,7 +736,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n \n                         // Check signature\n                         bool fOk = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                            CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, nHashType, flags);\n+                            CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, flags);\n \n                         if (fOk) {\n                             isig++;\n@@ -975,7 +975,7 @@ class CSignatureCache\n     }\n };\n \n-bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags)\n+bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int flags)\n {\n     static CSignatureCache signatureCache;\n \n@@ -986,10 +986,7 @@ bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubK\n     // Hash type is one byte tacked on to the end of the signature\n     if (vchSig.empty())\n         return false;\n-    if (nHashType == 0)\n-        nHashType = vchSig.back();\n-    else if (nHashType != vchSig.back())\n-        return false;\n+    int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n     uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n@@ -1006,15 +1003,14 @@ bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubK\n     return true;\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                  unsigned int flags, int nHashType)\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n {\n     vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, txTo, nIn, flags, nHashType))\n+    if (!EvalScript(stack, scriptSig, txTo, nIn, flags))\n         return false;\n     if (flags & SCRIPT_VERIFY_P2SH)\n         stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, txTo, nIn, flags, nHashType))\n+    if (!EvalScript(stack, scriptPubKey, txTo, nIn, flags))\n         return false;\n     if (stack.empty())\n         return false;\n@@ -1037,7 +1033,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n         popstack(stackCopy);\n \n-        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, flags, nHashType))\n+        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, flags))\n             return false;\n         if (stackCopy.empty())\n             return false;"
      },
      {
        "sha": "adca2142ac40990507718d814d9550837c2f646e",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "patch": "@@ -38,8 +38,8 @@ bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey, unsigned int\n bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int flags);\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-bool CheckSig(std::vector<unsigned char> vchSig, const std::vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags);\n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n+bool CheckSig(std::vector<unsigned char> vchSig, const std::vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int flags);\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n \n #endif // H_BITCOIN_SCRIPT_INTERPRETER"
      },
      {
        "sha": "8abd8d221d63e3ceb6c1a7a7746552736a43928f",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "patch": "@@ -123,7 +123,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, STANDARD_SCRIPT_VERIFY_FLAGS, 0);\n+    return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, STANDARD_SCRIPT_VERIFY_FLAGS);\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -174,7 +174,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (CheckSig(sig, pubkey, scriptPubKey, txTo, nIn, 0, 0))\n+            if (CheckSig(sig, pubkey, scriptPubKey, txTo, nIn, 0))\n             {\n                 sigs[pubkey] = sig;\n                 break;\n@@ -252,9 +252,9 @@ CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsign\n     Solver(scriptPubKey, txType, vSolutions);\n \n     vector<valtype> stack1;\n-    EvalScript(stack1, scriptSig1, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC, 0);\n+    EvalScript(stack1, scriptSig1, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC);\n     vector<valtype> stack2;\n-    EvalScript(stack2, scriptSig2, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC, 0);\n+    EvalScript(stack2, scriptSig2, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC);\n \n     return CombineSignatures(scriptPubKey, txTo, nIn, txType, vSolutions, stack1, stack2);\n }"
      },
      {
        "sha": "cb37740068e4a55d099dbe700c80e5c27a3bcb62",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "patch": "@@ -82,19 +82,19 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.clear();\n     keys += key[0],key[1]; // magic operator+= from boost.assign\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, flags, 0));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, flags));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.clear();\n         keys += key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags, 0), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags), strprintf(\"a&b 1: %d\", i));\n \n         keys.clear();\n         keys += key[1],key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags, 0), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags), strprintf(\"a&b 2: %d\", i));\n     }\n \n     // Test a OR b:\n@@ -104,16 +104,16 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         keys += key[i];\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, flags, 0), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, flags), strprintf(\"a|b: %d\", i));\n         else\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, flags, 0), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, flags), strprintf(\"a|b: %d\", i));\n     }\n     s.clear();\n     s << OP_0 << OP_0;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags));\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags));\n \n \n     for (int i = 0; i < 4; i++)\n@@ -123,9 +123,9 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             keys += key[i],key[j];\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, flags, 0), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, flags), strprintf(\"escrow 1: %d %d\", i, j));\n             else\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, flags, 0), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, flags), strprintf(\"escrow 2: %d %d\", i, j));\n         }\n }\n "
      },
      {
        "sha": "e6cf00c2d07b618ebfc46aadc1de0c1fc2c83a85",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "patch": "@@ -42,7 +42,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict)\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, txTo, 0, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, 0);\n+    return VerifyScript(scriptSig, scriptPubKey, txTo, 0, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE);\n }\n \n \n@@ -113,7 +113,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         {\n             CScript sigSave = txTo[i].vin[0].scriptSig;\n             txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n-            bool sigOK = VerifySignature(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, 0);\n+            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC)();\n             if (i == j)\n                 BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             else"
      },
      {
        "sha": "cb543a0cf130118a3b99090ef9dffa3cd4e2c1dc",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "patch": "@@ -77,7 +77,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n \n         CTransaction tx;\n-        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, tx, 0, scriptflags, SIGHASH_NONE), strTest);\n+        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, tx, 0, scriptflags), strTest);\n     }\n }\n \n@@ -102,7 +102,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n \n         CTransaction tx;\n-        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, tx, 0, scriptflags, SIGHASH_NONE), strTest);\n+        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, tx, 0, scriptflags), strTest);\n     }\n }\n \n@@ -116,18 +116,18 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n     static const unsigned char pushdata4[] = { OP_PUSHDATA4, 1, 0, 0, 0, 0x5a };\n \n     vector<vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, true, 0));\n+    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, true));\n \n     vector<vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, true, 0));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, true));\n     BOOST_CHECK(pushdata1Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, true, 0));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, true));\n     BOOST_CHECK(pushdata2Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, true, 0));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, true));\n     BOOST_CHECK(pushdata4Stack == directStack);\n }\n \n@@ -185,15 +185,15 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     txTo12.vout[0].nValue = 1;\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags, 0));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, flags, 0));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, flags));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, flags));\n }\n \n BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n@@ -221,46 +221,46 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, flags));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, flags, 0));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, flags));\n }    \n \n BOOST_AUTO_TEST_CASE(script_combineSigs)"
      },
      {
        "sha": "41d8ee9f19d483c6b1461b62dd034f730df5d88a",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/438c7e4cd2179170aeadb4aa1c902ccd1256dee6/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "patch": "@@ -121,7 +121,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 tx, i, verify_flags, 0),\n+                                                 tx, i, verify_flags),\n                                     strTest);\n             }\n         }\n@@ -194,7 +194,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      tx, i, verify_flags, 0);\n+                                      tx, i, verify_flags);\n             }\n \n             BOOST_CHECK_MESSAGE(!fValid, strTest);"
      }
    ]
  },
  {
    "sha": "ab15b2ec71da7a82b1b08d09c0252582668a2a60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjE1YjJlYzcxZGE3YTgyYjFiMDhkMDljMDI1MjU4MjY2OGEyYTYw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-03T13:54:37Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-17T18:38:20Z"
      },
      "message": "Avoid copying undo data",
      "tree": {
        "sha": "673037e498702d22d49ad4b58521b37fb964636f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/673037e498702d22d49ad4b58521b37fb964636f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab15b2ec71da7a82b1b08d09c0252582668a2a60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab15b2ec71da7a82b1b08d09c0252582668a2a60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab15b2ec71da7a82b1b08d09c0252582668a2a60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab15b2ec71da7a82b1b08d09c0252582668a2a60/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/438c7e4cd2179170aeadb4aa1c902ccd1256dee6"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "15c3916a6fb0761857b0c8426775ebbd2c36fe9f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab15b2ec71da7a82b1b08d09c0252582668a2a60/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab15b2ec71da7a82b1b08d09c0252582668a2a60/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ab15b2ec71da7a82b1b08d09c0252582668a2a60",
        "patch": "@@ -1351,12 +1351,13 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n     bool ret;\n     // mark inputs spent\n     if (!tx.IsCoinBase()) {\n-        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        txundo.vprevout.reserve(tx.vin.size());\n+        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+            const CTxIn &txin = tx.vin[i];\n             CCoins &coins = inputs.GetCoins(txin.prevout.hash);\n-            CTxInUndo undo;\n-            ret = coins.Spend(txin.prevout, undo);\n+            txundo.vprevout.push_back(CTxInUndo());\n+            ret = coins.Spend(txin.prevout, txundo.vprevout.back());\n             assert(ret);\n-            txundo.vprevout.push_back(undo);\n         }\n     }\n \n@@ -1663,6 +1664,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n+    blockundo.vtxundo.reserve(block.vtx.size() - 1);\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n         const CTransaction &tx = block.vtx[i];\n@@ -1698,10 +1700,11 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n             control.Add(vChecks);\n         }\n \n-        CTxUndo txundo;\n-        UpdateCoins(tx, state, view, txundo, pindex->nHeight);\n-        if (!tx.IsCoinBase())\n-            blockundo.vtxundo.push_back(txundo);\n+        CTxUndo undoDummy;\n+        if (i > 0) {\n+            blockundo.vtxundo.push_back(CTxUndo());\n+        }\n+        UpdateCoins(tx, state, view, i == 0 ? undoDummy : blockundo.vtxundo.back(), pindex->nHeight);\n \n         vPos.push_back(std::make_pair(tx.GetHash(), pos));\n         pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);"
      }
    ]
  },
  {
    "sha": "c15e483f2394e51163ba2514cd56fdba32bb92a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTVlNDgzZjIzOTRlNTExNjNiYTI1MTRjZDU2ZmRiYTMyYmI5MmE0",
    "commit": {
      "author": {
        "name": "imharrywu",
        "email": "imharrywu@users.noreply.github.com",
        "date": "2014-09-18T00:15:09Z"
      },
      "committer": {
        "name": "imharrywu",
        "email": "imharrywu@users.noreply.github.com",
        "date": "2014-09-18T00:15:09Z"
      },
      "message": "typo fix of booleamn to boolean",
      "tree": {
        "sha": "542e555c5973e26036baca1f90ed903ffbdbac09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/542e555c5973e26036baca1f90ed903ffbdbac09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c15e483f2394e51163ba2514cd56fdba32bb92a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c15e483f2394e51163ba2514cd56fdba32bb92a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c15e483f2394e51163ba2514cd56fdba32bb92a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c15e483f2394e51163ba2514cd56fdba32bb92a4/comments",
    "author": {
      "login": "imharrywu",
      "id": 7483782,
      "node_id": "MDQ6VXNlcjc0ODM3ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7483782?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/imharrywu",
      "html_url": "https://github.com/imharrywu",
      "followers_url": "https://api.github.com/users/imharrywu/followers",
      "following_url": "https://api.github.com/users/imharrywu/following{/other_user}",
      "gists_url": "https://api.github.com/users/imharrywu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/imharrywu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/imharrywu/subscriptions",
      "organizations_url": "https://api.github.com/users/imharrywu/orgs",
      "repos_url": "https://api.github.com/users/imharrywu/repos",
      "events_url": "https://api.github.com/users/imharrywu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/imharrywu/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "imharrywu",
      "id": 7483782,
      "node_id": "MDQ6VXNlcjc0ODM3ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7483782?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/imharrywu",
      "html_url": "https://github.com/imharrywu",
      "followers_url": "https://api.github.com/users/imharrywu/followers",
      "following_url": "https://api.github.com/users/imharrywu/following{/other_user}",
      "gists_url": "https://api.github.com/users/imharrywu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/imharrywu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/imharrywu/subscriptions",
      "organizations_url": "https://api.github.com/users/imharrywu/orgs",
      "repos_url": "https://api.github.com/users/imharrywu/repos",
      "events_url": "https://api.github.com/users/imharrywu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/imharrywu/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/438c7e4cd2179170aeadb4aa1c902ccd1256dee6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "95f42eb47f7337c1346255f311e716386fa5aa0b",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c15e483f2394e51163ba2514cd56fdba32bb92a4/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c15e483f2394e51163ba2514cd56fdba32bb92a4/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=c15e483f2394e51163ba2514cd56fdba32bb92a4",
        "patch": "@@ -96,7 +96,7 @@ Value getpeerinfo(const Array& params, bool fHelp)\n             \"    \\\"inbound\\\": true|false,     (boolean) Inbound (true) or Outbound (false)\\n\"\n             \"    \\\"startingheight\\\": n,       (numeric) The starting height (block) of the peer\\n\"\n             \"    \\\"banscore\\\": n,             (numeric) The ban score\\n\"\n-            \"    \\\"syncnode\\\": true|false     (booleamn) if sync node\\n\"\n+            \"    \\\"syncnode\\\": true|false     (boolean) if sync node\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"]\\n\""
      }
    ]
  },
  {
    "sha": "22d7e7014f2064fb9e52c634f68b3c5e965faec0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmQ3ZTcwMTRmMjA2NGZiOWU1MmM2MzRmNjhiM2M1ZTk2NWZhZWMw",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-16T13:16:29Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-18T05:21:49Z"
      },
      "message": "prefer const string& over char* in CDB and CWalletDB constructor\n\n- also make parameter of CDBEnv::CheckpointLSN a constant reference",
      "tree": {
        "sha": "e958045998cf5cb60b30a3915e4b08f84731e9a9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e958045998cf5cb60b30a3915e4b08f84731e9a9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22d7e7014f2064fb9e52c634f68b3c5e965faec0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22d7e7014f2064fb9e52c634f68b3c5e965faec0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22d7e7014f2064fb9e52c634f68b3c5e965faec0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22d7e7014f2064fb9e52c634f68b3c5e965faec0/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/438c7e4cd2179170aeadb4aa1c902ccd1256dee6"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 16,
      "deletions": 14
    },
    "files": [
      {
        "sha": "24206d34e131fb538c78f74207665ef9ff9a21bc",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22d7e7014f2064fb9e52c634f68b3c5e965faec0/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22d7e7014f2064fb9e52c634f68b3c5e965faec0/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=22d7e7014f2064fb9e52c634f68b3c5e965faec0",
        "patch": "@@ -215,7 +215,7 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive,\n }\n \n \n-void CDBEnv::CheckpointLSN(std::string strFile)\n+void CDBEnv::CheckpointLSN(const std::string& strFile)\n {\n     dbenv.txn_checkpoint(0, 0, 0);\n     if (fMockDb)\n@@ -224,12 +224,12 @@ void CDBEnv::CheckpointLSN(std::string strFile)\n }\n \n \n-CDB::CDB(const char *pszFile, const char* pszMode) :\n+CDB::CDB(const std::string& strFilename, const char* pszMode) :\n     pdb(NULL), activeTxn(NULL)\n {\n     int ret;\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n-    if (pszFile == NULL)\n+    if (strFilename.empty())\n         return;\n \n     bool fCreate = strchr(pszMode, 'c') != NULL;\n@@ -242,7 +242,7 @@ CDB::CDB(const char *pszFile, const char* pszMode) :\n         if (!bitdb.Open(GetDataDir()))\n             throw runtime_error(\"CDB : Failed to open database environment.\");\n \n-        strFile = pszFile;\n+        strFile = strFilename;\n         ++bitdb.mapFileUseCount[strFile];\n         pdb = bitdb.mapDb[strFile];\n         if (pdb == NULL)\n@@ -255,14 +255,14 @@ CDB::CDB(const char *pszFile, const char* pszMode) :\n                 DbMpoolFile*mpf = pdb->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n                 if (ret != 0)\n-                    throw runtime_error(strprintf(\"CDB : Failed to configure for no temp file backing for database %s\", pszFile));\n+                    throw runtime_error(strprintf(\"CDB : Failed to configure for no temp file backing for database %s\", strFile));\n             }\n \n-            ret = pdb->open(NULL,      // Txn pointer\n-                            fMockDb ? NULL : pszFile,   // Filename\n-                            fMockDb ? pszFile : \"main\", // Logical db name\n-                            DB_BTREE,  // Database type\n-                            nFlags,    // Flags\n+            ret = pdb->open(NULL, // Txn pointer\n+                            fMockDb ? NULL : strFile.c_str(), // Filename\n+                            fMockDb ? strFile.c_str() : \"main\", // Logical db name\n+                            DB_BTREE, // Database type\n+                            nFlags, // Flags\n                             0);\n \n             if (ret != 0)\n@@ -271,7 +271,7 @@ CDB::CDB(const char *pszFile, const char* pszMode) :\n                 pdb = NULL;\n                 --bitdb.mapFileUseCount[strFile];\n                 strFile = \"\";\n-                throw runtime_error(strprintf(\"CDB : Error %d, can't open database %s\", ret, pszFile));\n+                throw runtime_error(strprintf(\"CDB : Error %d, can't open database %s\", ret, strFile));\n             }\n \n             if (fCreate && !Exists(string(\"version\")))"
      },
      {
        "sha": "eab27f43af5a8fa45d7ae08b72cfdadf72d940d5",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22d7e7014f2064fb9e52c634f68b3c5e965faec0/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22d7e7014f2064fb9e52c634f68b3c5e965faec0/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=22d7e7014f2064fb9e52c634f68b3c5e965faec0",
        "patch": "@@ -69,7 +69,7 @@ class CDBEnv\n     bool Open(const boost::filesystem::path &path);\n     void Close();\n     void Flush(bool fShutdown);\n-    void CheckpointLSN(std::string strFile);\n+    void CheckpointLSN(const std::string& strFile);\n \n     void CloseDb(const std::string& strFile);\n     bool RemoveDb(const std::string& strFile);\n@@ -96,11 +96,13 @@ class CDB\n     DbTxn *activeTxn;\n     bool fReadOnly;\n \n-    explicit CDB(const char* pszFile, const char* pszMode=\"r+\");\n+    explicit CDB(const std::string& strFilename, const char* pszMode=\"r+\");\n     ~CDB() { Close(); }\n+\n public:\n     void Flush();\n     void Close();\n+\n private:\n     CDB(const CDB&);\n     void operator=(const CDB&);"
      },
      {
        "sha": "475d4fb96dacd57b15c740d7db43a569cb549424",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22d7e7014f2064fb9e52c634f68b3c5e965faec0/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22d7e7014f2064fb9e52c634f68b3c5e965faec0/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=22d7e7014f2064fb9e52c634f68b3c5e965faec0",
        "patch": "@@ -75,7 +75,7 @@ class CKeyMetadata\n class CWalletDB : public CDB\n {\n public:\n-    CWalletDB(std::string strFilename, const char* pszMode=\"r+\") : CDB(strFilename.c_str(), pszMode)\n+    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\") : CDB(strFilename, pszMode)\n     {\n     }\n private:"
      }
    ]
  },
  {
    "sha": "93f84d0417e8e1c590b405bde6e153b413bd43f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2Y4NGQwNDE3ZThlMWM1OTBiNDA1YmRlNmUxNTNiNDEzYmQ0M2Yy",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-16T13:18:33Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-18T05:21:49Z"
      },
      "message": "cleanup class private and public areas in walletdb\n\n- only code movement",
      "tree": {
        "sha": "76845cdeb266c172ed97ddf1d81fcdffc1938cdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76845cdeb266c172ed97ddf1d81fcdffc1938cdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93f84d0417e8e1c590b405bde6e153b413bd43f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93f84d0417e8e1c590b405bde6e153b413bd43f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93f84d0417e8e1c590b405bde6e153b413bd43f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93f84d0417e8e1c590b405bde6e153b413bd43f2/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "22d7e7014f2064fb9e52c634f68b3c5e965faec0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22d7e7014f2064fb9e52c634f68b3c5e965faec0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22d7e7014f2064fb9e52c634f68b3c5e965faec0"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 10,
      "deletions": 11
    },
    "files": [
      {
        "sha": "a84f44db01b35c9f7265d429ffe2fd7f22c19455",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f84d0417e8e1c590b405bde6e153b413bd43f2/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f84d0417e8e1c590b405bde6e153b413bd43f2/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=93f84d0417e8e1c590b405bde6e153b413bd43f2",
        "patch": "@@ -242,9 +242,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n     pcursor->close();\n }\n \n-\n-DBErrors\n-CWalletDB::ReorderTransactions(CWallet* pwallet)\n+DBErrors CWalletDB::ReorderTransactions(CWallet* pwallet)\n {\n     LOCK(pwallet->cs_wallet);\n     // Old wallets didn't have any defined order for transactions"
      },
      {
        "sha": "2c5b608f3db2651bdd62ab694615973c841d17f6",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f84d0417e8e1c590b405bde6e153b413bd43f2/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f84d0417e8e1c590b405bde6e153b413bd43f2/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=93f84d0417e8e1c590b405bde6e153b413bd43f2",
        "patch": "@@ -78,10 +78,7 @@ class CWalletDB : public CDB\n     CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\") : CDB(strFilename, pszMode)\n     {\n     }\n-private:\n-    CWalletDB(const CWalletDB&);\n-    void operator=(const CWalletDB&);\n-public:\n+\n     bool WriteName(const std::string& strAddress, const std::string& strName);\n     bool EraseName(const std::string& strAddress);\n \n@@ -119,19 +116,23 @@ class CWalletDB : public CDB\n     bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);\n     /// Erase destination data tuple from wallet database\n     bool EraseDestData(const std::string &address, const std::string &key);\n-private:\n-    bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n-public:\n+\n     bool WriteAccountingEntry(const CAccountingEntry& acentry);\n     int64_t GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n-    DBErrors ReorderTransactions(CWallet*);\n+    DBErrors ReorderTransactions(CWallet* pwallet);\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n     static bool Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, std::string filename);\n+\n+private:\n+    CWalletDB(const CWalletDB&);\n+    void operator=(const CWalletDB&);\n+\n+    bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n };\n \n bool BackupWallet(const CWallet& wallet, const std::string& strDest);"
      }
    ]
  },
  {
    "sha": "e9870c5ed496526e291a6ee15b28b9750dc6221b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTg3MGM1ZWQ0OTY1MjZlMjkxYTZlZTE1YjI4Yjk3NTBkYzYyMjFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T07:32:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T07:39:11Z"
      },
      "message": "Merge pull request #4931\n\n93f84d0 cleanup class private and public areas in walletdb (Philip Kaufmann)\n22d7e70 prefer const string& over char* in CDB and CWalletDB constructor (Philip Kaufmann)",
      "tree": {
        "sha": "76845cdeb266c172ed97ddf1d81fcdffc1938cdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76845cdeb266c172ed97ddf1d81fcdffc1938cdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9870c5ed496526e291a6ee15b28b9750dc6221b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUGowfAAoJEHSBCwEjRsmmOqUH/RD3fVqYDQ8c/8kZv2Ml1qjI\n0RmI2SukoiWY9HYetb1WNTICZj3uoQlWbrQIJ1Xd3pILqV5foFqy3hVmbt8WEwU4\nYhBS8flIHlJjl9qsz3djKm31dWWEBXotRPRUUAkoI3h3V5N22yoBdrxSIpIB5dX4\nylb7o5lwV0s8HjUlzSA5fNNds+8LPCCKgE2yNuF79GjTNe7rkRMrHRK2d5alxkY4\nR1E1LSk8Gk98T5keusvoeMMAmYCxbjaLI+c8SE1nsrb+uwxqBL20NocC+kAqw+Bn\nZYoQccPxZBaPuhGTvnuKTeulmsGMOx6Q5tqIqQCSfImNMlfZJhmlPO6MgFLmdc0=\n=+hPB\n-----END PGP SIGNATURE-----",
        "payload": "tree 76845cdeb266c172ed97ddf1d81fcdffc1938cdd\nparent 438c7e4cd2179170aeadb4aa1c902ccd1256dee6\nparent 93f84d0417e8e1c590b405bde6e153b413bd43f2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411025572 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411025951 +0200\n\nMerge pull request #4931\n\n93f84d0 cleanup class private and public areas in walletdb (Philip Kaufmann)\n22d7e70 prefer const string& over char* in CDB and CWalletDB constructor (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9870c5ed496526e291a6ee15b28b9750dc6221b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9870c5ed496526e291a6ee15b28b9750dc6221b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9870c5ed496526e291a6ee15b28b9750dc6221b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/438c7e4cd2179170aeadb4aa1c902ccd1256dee6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/438c7e4cd2179170aeadb4aa1c902ccd1256dee6"
      },
      {
        "sha": "93f84d0417e8e1c590b405bde6e153b413bd43f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93f84d0417e8e1c590b405bde6e153b413bd43f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93f84d0417e8e1c590b405bde6e153b413bd43f2"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 26,
      "deletions": 25
    },
    "files": [
      {
        "sha": "24206d34e131fb538c78f74207665ef9ff9a21bc",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9870c5ed496526e291a6ee15b28b9750dc6221b/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9870c5ed496526e291a6ee15b28b9750dc6221b/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=e9870c5ed496526e291a6ee15b28b9750dc6221b",
        "patch": "@@ -215,7 +215,7 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive,\n }\n \n \n-void CDBEnv::CheckpointLSN(std::string strFile)\n+void CDBEnv::CheckpointLSN(const std::string& strFile)\n {\n     dbenv.txn_checkpoint(0, 0, 0);\n     if (fMockDb)\n@@ -224,12 +224,12 @@ void CDBEnv::CheckpointLSN(std::string strFile)\n }\n \n \n-CDB::CDB(const char *pszFile, const char* pszMode) :\n+CDB::CDB(const std::string& strFilename, const char* pszMode) :\n     pdb(NULL), activeTxn(NULL)\n {\n     int ret;\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n-    if (pszFile == NULL)\n+    if (strFilename.empty())\n         return;\n \n     bool fCreate = strchr(pszMode, 'c') != NULL;\n@@ -242,7 +242,7 @@ CDB::CDB(const char *pszFile, const char* pszMode) :\n         if (!bitdb.Open(GetDataDir()))\n             throw runtime_error(\"CDB : Failed to open database environment.\");\n \n-        strFile = pszFile;\n+        strFile = strFilename;\n         ++bitdb.mapFileUseCount[strFile];\n         pdb = bitdb.mapDb[strFile];\n         if (pdb == NULL)\n@@ -255,14 +255,14 @@ CDB::CDB(const char *pszFile, const char* pszMode) :\n                 DbMpoolFile*mpf = pdb->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n                 if (ret != 0)\n-                    throw runtime_error(strprintf(\"CDB : Failed to configure for no temp file backing for database %s\", pszFile));\n+                    throw runtime_error(strprintf(\"CDB : Failed to configure for no temp file backing for database %s\", strFile));\n             }\n \n-            ret = pdb->open(NULL,      // Txn pointer\n-                            fMockDb ? NULL : pszFile,   // Filename\n-                            fMockDb ? pszFile : \"main\", // Logical db name\n-                            DB_BTREE,  // Database type\n-                            nFlags,    // Flags\n+            ret = pdb->open(NULL, // Txn pointer\n+                            fMockDb ? NULL : strFile.c_str(), // Filename\n+                            fMockDb ? strFile.c_str() : \"main\", // Logical db name\n+                            DB_BTREE, // Database type\n+                            nFlags, // Flags\n                             0);\n \n             if (ret != 0)\n@@ -271,7 +271,7 @@ CDB::CDB(const char *pszFile, const char* pszMode) :\n                 pdb = NULL;\n                 --bitdb.mapFileUseCount[strFile];\n                 strFile = \"\";\n-                throw runtime_error(strprintf(\"CDB : Error %d, can't open database %s\", ret, pszFile));\n+                throw runtime_error(strprintf(\"CDB : Error %d, can't open database %s\", ret, strFile));\n             }\n \n             if (fCreate && !Exists(string(\"version\")))"
      },
      {
        "sha": "eab27f43af5a8fa45d7ae08b72cfdadf72d940d5",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9870c5ed496526e291a6ee15b28b9750dc6221b/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9870c5ed496526e291a6ee15b28b9750dc6221b/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=e9870c5ed496526e291a6ee15b28b9750dc6221b",
        "patch": "@@ -69,7 +69,7 @@ class CDBEnv\n     bool Open(const boost::filesystem::path &path);\n     void Close();\n     void Flush(bool fShutdown);\n-    void CheckpointLSN(std::string strFile);\n+    void CheckpointLSN(const std::string& strFile);\n \n     void CloseDb(const std::string& strFile);\n     bool RemoveDb(const std::string& strFile);\n@@ -96,11 +96,13 @@ class CDB\n     DbTxn *activeTxn;\n     bool fReadOnly;\n \n-    explicit CDB(const char* pszFile, const char* pszMode=\"r+\");\n+    explicit CDB(const std::string& strFilename, const char* pszMode=\"r+\");\n     ~CDB() { Close(); }\n+\n public:\n     void Flush();\n     void Close();\n+\n private:\n     CDB(const CDB&);\n     void operator=(const CDB&);"
      },
      {
        "sha": "a84f44db01b35c9f7265d429ffe2fd7f22c19455",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9870c5ed496526e291a6ee15b28b9750dc6221b/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9870c5ed496526e291a6ee15b28b9750dc6221b/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=e9870c5ed496526e291a6ee15b28b9750dc6221b",
        "patch": "@@ -242,9 +242,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n     pcursor->close();\n }\n \n-\n-DBErrors\n-CWalletDB::ReorderTransactions(CWallet* pwallet)\n+DBErrors CWalletDB::ReorderTransactions(CWallet* pwallet)\n {\n     LOCK(pwallet->cs_wallet);\n     // Old wallets didn't have any defined order for transactions"
      },
      {
        "sha": "2c5b608f3db2651bdd62ab694615973c841d17f6",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9870c5ed496526e291a6ee15b28b9750dc6221b/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9870c5ed496526e291a6ee15b28b9750dc6221b/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=e9870c5ed496526e291a6ee15b28b9750dc6221b",
        "patch": "@@ -75,13 +75,10 @@ class CKeyMetadata\n class CWalletDB : public CDB\n {\n public:\n-    CWalletDB(std::string strFilename, const char* pszMode=\"r+\") : CDB(strFilename.c_str(), pszMode)\n+    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\") : CDB(strFilename, pszMode)\n     {\n     }\n-private:\n-    CWalletDB(const CWalletDB&);\n-    void operator=(const CWalletDB&);\n-public:\n+\n     bool WriteName(const std::string& strAddress, const std::string& strName);\n     bool EraseName(const std::string& strAddress);\n \n@@ -119,19 +116,23 @@ class CWalletDB : public CDB\n     bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);\n     /// Erase destination data tuple from wallet database\n     bool EraseDestData(const std::string &address, const std::string &key);\n-private:\n-    bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n-public:\n+\n     bool WriteAccountingEntry(const CAccountingEntry& acentry);\n     int64_t GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n-    DBErrors ReorderTransactions(CWallet*);\n+    DBErrors ReorderTransactions(CWallet* pwallet);\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n     static bool Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys);\n     static bool Recover(CDBEnv& dbenv, std::string filename);\n+\n+private:\n+    CWalletDB(const CWalletDB&);\n+    void operator=(const CWalletDB&);\n+\n+    bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n };\n \n bool BackupWallet(const CWallet& wallet, const std::string& strDest);"
      }
    ]
  },
  {
    "sha": "c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTRiZmVhOGVlZTU0OThmM2M3ZDRmNTgyYjZmYjdhYzE4ZWMxYTYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T07:50:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T07:50:21Z"
      },
      "message": "Merge pull request #4936\n\nc15e483 typo fix of booleamn to boolean (imharrywu)",
      "tree": {
        "sha": "faf51273b74765db24ece7e200a3bb41447d902d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/faf51273b74765db24ece7e200a3bb41447d902d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUGo69AAoJEHSBCwEjRsmmul4IALy2TaAZx65gTE5gDtsyeqm+\nrE60O4XApJ8HpIAykAhC7Ex9Vmidq+ze1q9iDlx+ASyLLD4BBH7CoN9cSALCW+Cf\nqaxzhOgGMF1ZlDpTen4EMJmLk8nzCvJq1fj+mm0u7jWUSY94VfSRFoZZ4z3dzzKg\nYCzOfrvV7KqxcFjUFWs87xXaq37tSQG7GRRd5nP8bqS9uLDt6wuqimmdL2AYLljf\nd8UZgUmaWCDwnWtEaav4lIJNl/bap4lcgZvHjvlRF0Ixnr9T1DEwdEr5tmrUzgBn\nojrtSnybRnwKtMX/U3FRSIc1taUy+JtG+hdbZ+fe5npJINn4gIkXxUw8O1NY2fU=\n=1/X4\n-----END PGP SIGNATURE-----",
        "payload": "tree faf51273b74765db24ece7e200a3bb41447d902d\nparent e9870c5ed496526e291a6ee15b28b9750dc6221b\nparent c15e483f2394e51163ba2514cd56fdba32bb92a4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411026608 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411026621 +0200\n\nMerge pull request #4936\n\nc15e483 typo fix of booleamn to boolean (imharrywu)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9870c5ed496526e291a6ee15b28b9750dc6221b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9870c5ed496526e291a6ee15b28b9750dc6221b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9870c5ed496526e291a6ee15b28b9750dc6221b"
      },
      {
        "sha": "c15e483f2394e51163ba2514cd56fdba32bb92a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c15e483f2394e51163ba2514cd56fdba32bb92a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c15e483f2394e51163ba2514cd56fdba32bb92a4"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "95f42eb47f7337c1346255f311e716386fa5aa0b",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62",
        "patch": "@@ -96,7 +96,7 @@ Value getpeerinfo(const Array& params, bool fHelp)\n             \"    \\\"inbound\\\": true|false,     (boolean) Inbound (true) or Outbound (false)\\n\"\n             \"    \\\"startingheight\\\": n,       (numeric) The starting height (block) of the peer\\n\"\n             \"    \\\"banscore\\\": n,             (numeric) The ban score\\n\"\n-            \"    \\\"syncnode\\\": true|false     (booleamn) if sync node\\n\"\n+            \"    \\\"syncnode\\\": true|false     (boolean) if sync node\\n\"\n             \"  }\\n\"\n             \"  ,...\\n\"\n             \"]\\n\""
      }
    ]
  },
  {
    "sha": "d547ebf56ea1eeffd415ee9529c45f162bccaaf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTQ3ZWJmNTZlYTFlZWZmZDQxNWVlOTUyOWM0NWYxNjJiY2NhYWYz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T08:11:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T08:12:08Z"
      },
      "message": "Remove mention of MacPorts from OSX build docs",
      "tree": {
        "sha": "584dcc6b58231c4c4aeb830c8bb978c8fc84106b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/584dcc6b58231c4c4aeb830c8bb978c8fc84106b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d547ebf56ea1eeffd415ee9529c45f162bccaaf3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d547ebf56ea1eeffd415ee9529c45f162bccaaf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d547ebf56ea1eeffd415ee9529c45f162bccaaf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d547ebf56ea1eeffd415ee9529c45f162bccaaf3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 3,
      "deletions": 45
    },
    "files": [
      {
        "sha": "5eeda5b08ebd6a82d66b8193f96542eafc0120cc",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 3,
        "deletions": 45,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d547ebf56ea1eeffd415ee9529c45f162bccaaf3/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d547ebf56ea1eeffd415ee9529c45f162bccaaf3/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=d547ebf56ea1eeffd415ee9529c45f162bccaaf3",
        "patch": "@@ -26,44 +26,14 @@ There's also an assumption that you already have `git` installed. If\n not, it's the path of least resistance to install [Github for Mac](https://mac.github.com/)\n (OS X 10.7+) or\n [Git for OS X](https://code.google.com/p/git-osx-installer/). It is also\n-available via Homebrew or MacPorts.\n+available via Homebrew.\n \n-You will also need to install [Homebrew](http://brew.sh)\n-or [MacPorts](https://www.macports.org/) in order to install library\n-dependencies. It's largely a religious decision which to choose, however, Homebrew\n-is now used for building release versions.\n+You will also need to install [Homebrew](http://brew.sh) in order to install library\n+dependencies.\n \n The installation of the actual dependencies is covered in the Instructions\n sections below.\n \n-Instructions: MacPorts\n-----------------------\n-\n-### Install dependencies\n-\n-    sudo port install boost db48@+no_java openssl miniupnpc autoconf pkgconfig automake libtool\n-\n-Optional: install Qt4\n-\n-    sudo port install qt4-mac qrencode protobuf-cpp\n-\n-### Building `bitcoind`\n-\n-1. Clone the github tree to get the source code and go into the directory.\n-\n-        git clone git@github.com:bitcoin/bitcoin.git bitcoin\n-        cd bitcoin\n-\n-2.  Build bitcoind (and Bitcoin-Qt, if configured):\n-\n-        ./autogen.sh\n-        ./configure\n-        make\n-\n-3.  It is a good idea to build and run the unit tests, too:\n-\n-        make check\n-\n Instructions: Homebrew\n ----------------------\n \n@@ -126,18 +96,6 @@ All dependencies should be compiled with these flags:\n  -arch x86_64\n  -isysroot $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk\n \n-For MacPorts, that means editing your macports.conf and setting\n-`macosx_deployment_target` and `build_arch`:\n-\n-    macosx_deployment_target=10.6\n-    build_arch=x86_64\n-\n-... and then uninstalling and re-installing, or simply rebuilding, all ports.\n-\n-As of December 2012, the `boost` port does not obey `macosx_deployment_target`.\n-Download `https://gavinandresen-bitcoin.s3.amazonaws.com/boost_macports_fix.zip`\n-for a fix.\n-\n Once dependencies are compiled, see release-process.md for how the Bitcoin-Qt.app\n bundle is packaged and signed to create the .dmg disk image that is distributed.\n "
      }
    ]
  },
  {
    "sha": "62e5f8f96114a872354103ef566b5c74a16154d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmU1ZjhmOTYxMTRhODcyMzU0MTAzZWY1NjZiNWM3NGExNjE1NGQ0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-16T16:13:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T08:15:48Z"
      },
      "message": "CMessageHeader sanity changes\n\n- Remove spurious `pchCommand[1] = 1` in CMessageHeader()\n- Make sure that pchCommand is zero-padded if length is shorter than\n  COMMAND_SIZE\n- Use strnlen to determine length of pcmCommand in GetCommand",
      "tree": {
        "sha": "08c946da5a14b1e98bf83234f625973ae7dd8c30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/08c946da5a14b1e98bf83234f625973ae7dd8c30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62e5f8f96114a872354103ef566b5c74a16154d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62e5f8f96114a872354103ef566b5c74a16154d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62e5f8f96114a872354103ef566b5c74a16154d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62e5f8f96114a872354103ef566b5c74a16154d4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 2,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0e28f3abbd4aaa0ced5ed5f37339af9ea7d9b5ff",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62e5f8f96114a872354103ef566b5c74a16154d4/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62e5f8f96114a872354103ef566b5c74a16154d4/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=62e5f8f96114a872354103ef566b5c74a16154d4",
        "patch": "@@ -24,25 +24,22 @@ CMessageHeader::CMessageHeader()\n {\n     memcpy(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE);\n     memset(pchCommand, 0, sizeof(pchCommand));\n-    pchCommand[1] = 1;\n     nMessageSize = -1;\n     nChecksum = 0;\n }\n \n CMessageHeader::CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn)\n {\n     memcpy(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE);\n+    memset(pchCommand, 0, sizeof(pchCommand));\n     strncpy(pchCommand, pszCommand, COMMAND_SIZE);\n     nMessageSize = nMessageSizeIn;\n     nChecksum = 0;\n }\n \n std::string CMessageHeader::GetCommand() const\n {\n-    if (pchCommand[COMMAND_SIZE-1] == 0)\n-        return std::string(pchCommand, pchCommand + strlen(pchCommand));\n-    else\n-        return std::string(pchCommand, pchCommand + COMMAND_SIZE);\n+    return std::string(pchCommand, pchCommand + strnlen(pchCommand, COMMAND_SIZE));\n }\n \n bool CMessageHeader::IsValid() const"
      }
    ]
  },
  {
    "sha": "0db24bf5c379f0a599c8a43ca8d9486cfb40a60b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGIyNGJmNWMzNzlmMGE1OTljOGE0M2NhOGQ5NDg2Y2ZiNDBhNjBi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T09:50:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T09:50:28Z"
      },
      "message": "Merge pull request #4939\n\nd547ebf Remove mention of MacPorts from OSX build docs (Wladimir J. van der Laan)",
      "tree": {
        "sha": "584dcc6b58231c4c4aeb830c8bb978c8fc84106b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/584dcc6b58231c4c4aeb830c8bb978c8fc84106b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0db24bf5c379f0a599c8a43ca8d9486cfb40a60b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUGqrkAAoJEHSBCwEjRsmmL6MH+wZXEysdHmuLI6SDc3d7iqj6\ns83v6HJX2WnJmBVqKrBdUjLjlgLZ0ZKhOTR78ta53KWuCvDyGVHUOhqG3ElShqZS\nQ33KTzyLEwSbrzTjnfzN1yM/NJ1jaf5L29fA52ddlqXADSmOvW5Yvu495twx7z4q\nts+Ocgpe/U8LysM2pNWd7Pq2B0IbG7bMcFBmDsvYfMpJFSpLeJCmTgkbcu3sVXSj\nGfIPw4C+2r0Y6P9GZ6o/WB78tq+Z3SV1M3tCkjye4JW5/LW1gvBHGZV0tRN0rOmr\n6VTMovmHrcEp2gtU7dMVBaEzSXJoQOqVU+s/TZARubW/0eJ3aftCk+L8xcK/9yI=\n=HZr2\n-----END PGP SIGNATURE-----",
        "payload": "tree 584dcc6b58231c4c4aeb830c8bb978c8fc84106b\nparent c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62\nparent d547ebf56ea1eeffd415ee9529c45f162bccaaf3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411033824 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411033828 +0200\n\nMerge pull request #4939\n\nd547ebf Remove mention of MacPorts from OSX build docs (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0db24bf5c379f0a599c8a43ca8d9486cfb40a60b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0db24bf5c379f0a599c8a43ca8d9486cfb40a60b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0db24bf5c379f0a599c8a43ca8d9486cfb40a60b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c14bfea8eee5498f3c7d4f582b6fb7ac18ec1a62"
      },
      {
        "sha": "d547ebf56ea1eeffd415ee9529c45f162bccaaf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d547ebf56ea1eeffd415ee9529c45f162bccaaf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d547ebf56ea1eeffd415ee9529c45f162bccaaf3"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 3,
      "deletions": 45
    },
    "files": [
      {
        "sha": "5eeda5b08ebd6a82d66b8193f96542eafc0120cc",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 3,
        "deletions": 45,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db24bf5c379f0a599c8a43ca8d9486cfb40a60b/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db24bf5c379f0a599c8a43ca8d9486cfb40a60b/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=0db24bf5c379f0a599c8a43ca8d9486cfb40a60b",
        "patch": "@@ -26,44 +26,14 @@ There's also an assumption that you already have `git` installed. If\n not, it's the path of least resistance to install [Github for Mac](https://mac.github.com/)\n (OS X 10.7+) or\n [Git for OS X](https://code.google.com/p/git-osx-installer/). It is also\n-available via Homebrew or MacPorts.\n+available via Homebrew.\n \n-You will also need to install [Homebrew](http://brew.sh)\n-or [MacPorts](https://www.macports.org/) in order to install library\n-dependencies. It's largely a religious decision which to choose, however, Homebrew\n-is now used for building release versions.\n+You will also need to install [Homebrew](http://brew.sh) in order to install library\n+dependencies.\n \n The installation of the actual dependencies is covered in the Instructions\n sections below.\n \n-Instructions: MacPorts\n-----------------------\n-\n-### Install dependencies\n-\n-    sudo port install boost db48@+no_java openssl miniupnpc autoconf pkgconfig automake libtool\n-\n-Optional: install Qt4\n-\n-    sudo port install qt4-mac qrencode protobuf-cpp\n-\n-### Building `bitcoind`\n-\n-1. Clone the github tree to get the source code and go into the directory.\n-\n-        git clone git@github.com:bitcoin/bitcoin.git bitcoin\n-        cd bitcoin\n-\n-2.  Build bitcoind (and Bitcoin-Qt, if configured):\n-\n-        ./autogen.sh\n-        ./configure\n-        make\n-\n-3.  It is a good idea to build and run the unit tests, too:\n-\n-        make check\n-\n Instructions: Homebrew\n ----------------------\n \n@@ -126,18 +96,6 @@ All dependencies should be compiled with these flags:\n  -arch x86_64\n  -isysroot $(xcode-select --print-path)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk\n \n-For MacPorts, that means editing your macports.conf and setting\n-`macosx_deployment_target` and `build_arch`:\n-\n-    macosx_deployment_target=10.6\n-    build_arch=x86_64\n-\n-... and then uninstalling and re-installing, or simply rebuilding, all ports.\n-\n-As of December 2012, the `boost` port does not obey `macosx_deployment_target`.\n-Download `https://gavinandresen-bitcoin.s3.amazonaws.com/boost_macports_fix.zip`\n-for a fix.\n-\n Once dependencies are compiled, see release-process.md for how the Bitcoin-Qt.app\n bundle is packaged and signed to create the .dmg disk image that is distributed.\n "
      }
    ]
  },
  {
    "sha": "7fd881367544fcc9e70130bf448a181794da26ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZmQ4ODEzNjc1NDRmY2M5ZTcwMTMwYmY0NDhhMTgxNzk0ZGEyNmFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T10:08:15Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T10:08:46Z"
      },
      "message": "Merge pull request #4667\n\nbbad683 [Qt] simplify return code and return values in txtablemodel (Philip Kaufmann)\n21f1516 [Qt] add all used colors in txtablemodel to guiconstants (Philip Kaufmann)",
      "tree": {
        "sha": "6fb77744556eda8bf449ddffedb44d4e0713de4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fb77744556eda8bf449ddffedb44d4e0713de4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7fd881367544fcc9e70130bf448a181794da26ab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUGq8uAAoJEHSBCwEjRsmmPXQH/0xCCNMgubUVERjbP548S+L+\nUeph7bREBlKpe/9LrN332MLPFn7dcMzJ/2FWhn1TqBMPasjA4aqXE23vmOhMSGuy\nfmCXQggba5UCZBV37AfOFTpVQ9Gdx/IIALMBIKSHB2CVrvmmw8pOTKW4LYLqStpZ\nHJoMdZ/BqGJt2oi/N28JR4efZoO5v0vYXD0oc+tdacNf0dO4FSE1DLv9+ILwmYxy\n+BwvfnNnIlOOm9IMyx7big7X6H7CVKF2vmTdnR+L4sCECKv5e7u0UFkXZdsDfiVS\nm5+WfvjMxgTN0llACTl2dMxgbKoEgnYS4waWqDzQb0Weo5LxFRT19I7ZVFBdJBY=\n=0q5J\n-----END PGP SIGNATURE-----",
        "payload": "tree 6fb77744556eda8bf449ddffedb44d4e0713de4f\nparent 0db24bf5c379f0a599c8a43ca8d9486cfb40a60b\nparent bbad683224c77743a9fef5cc2fc64cc43fbec192\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411034895 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411034926 +0200\n\nMerge pull request #4667\n\nbbad683 [Qt] simplify return code and return values in txtablemodel (Philip Kaufmann)\n21f1516 [Qt] add all used colors in txtablemodel to guiconstants (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd881367544fcc9e70130bf448a181794da26ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7fd881367544fcc9e70130bf448a181794da26ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd881367544fcc9e70130bf448a181794da26ab/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0db24bf5c379f0a599c8a43ca8d9486cfb40a60b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0db24bf5c379f0a599c8a43ca8d9486cfb40a60b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0db24bf5c379f0a599c8a43ca8d9486cfb40a60b"
      },
      {
        "sha": "bbad683224c77743a9fef5cc2fc64cc43fbec192",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bbad683224c77743a9fef5cc2fc64cc43fbec192",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bbad683224c77743a9fef5cc2fc64cc43fbec192"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 16,
      "deletions": 19
    },
    "files": [
      {
        "sha": "4c8a67b663e389f4346d08280057d46653745dfc",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd881367544fcc9e70130bf448a181794da26ab/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd881367544fcc9e70130bf448a181794da26ab/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=7fd881367544fcc9e70130bf448a181794da26ab",
        "patch": "@@ -23,6 +23,12 @@ static const int STATUSBAR_ICONSIZE = 16;\n #define COLOR_NEGATIVE QColor(255, 0, 0)\n /* Transaction list -- bare address (without label) */\n #define COLOR_BAREADDRESS QColor(140, 140, 140)\n+/* Transaction list -- TX status decoration - open until date */\n+#define COLOR_TX_STATUS_OPENUNTILDATE QColor(64, 64, 255)\n+/* Transaction list -- TX status decoration - offline */\n+#define COLOR_TX_STATUS_OFFLINE QColor(192, 192, 192)\n+/* Transaction list -- TX status decoration - default color */\n+#define COLOR_BLACK QColor(0, 0, 0)\n \n /* Tooltips longer than this (in characters) are converted into rich text,\n    so that they can be word-wrapped."
      },
      {
        "sha": "2b869b4ea58cdf72af9ba447de2f18ec9706212b",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 19,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7fd881367544fcc9e70130bf448a181794da26ab/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7fd881367544fcc9e70130bf448a181794da26ab/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=7fd881367544fcc9e70130bf448a181794da26ab",
        "patch": "@@ -209,10 +209,7 @@ class TransactionTablePriv\n             }\n             return rec;\n         }\n-        else\n-        {\n-            return 0;\n-        }\n+        return 0;\n     }\n \n     QString describe(TransactionRecord *rec, int unit)\n@@ -225,7 +222,7 @@ class TransactionTablePriv\n                 return TransactionDesc::toHTML(wallet, mi->second, rec, unit);\n             }\n         }\n-        return QString(\"\");\n+        return QString();\n     }\n };\n \n@@ -330,10 +327,7 @@ QString TransactionTableModel::formatTxDate(const TransactionRecord *wtx) const\n     {\n         return GUIUtil::dateTimeStr(wtx->time);\n     }\n-    else\n-    {\n-        return QString();\n-    }\n+    return QString();\n }\n \n /* Look up address in address book, if found return label (address)\n@@ -345,11 +339,11 @@ QString TransactionTableModel::lookupAddress(const std::string &address, bool to\n     QString description;\n     if(!label.isEmpty())\n     {\n-        description += label + QString(\" \");\n+        description += label;\n     }\n     if(label.isEmpty() || tooltip)\n     {\n-        description += QString(\"(\") + QString::fromStdString(address) + QString(\")\");\n+        description += QString(\" (\") + QString::fromStdString(address) + QString(\")\");\n     }\n     return description;\n }\n@@ -389,7 +383,6 @@ QVariant TransactionTableModel::txAddressDecoration(const TransactionRecord *wtx\n     default:\n         return QIcon(\":/icons/tx_inout\");\n     }\n-    return QVariant();\n }\n \n QString TransactionTableModel::formatTxToAddress(const TransactionRecord *wtx, bool tooltip) const\n@@ -456,9 +449,9 @@ QVariant TransactionTableModel::txStatusDecoration(const TransactionRecord *wtx)\n     {\n     case TransactionStatus::OpenUntilBlock:\n     case TransactionStatus::OpenUntilDate:\n-        return QColor(64,64,255);\n+        return COLOR_TX_STATUS_OPENUNTILDATE;\n     case TransactionStatus::Offline:\n-        return QColor(192,192,192);\n+        return COLOR_TX_STATUS_OFFLINE;\n     case TransactionStatus::Unconfirmed:\n         return QIcon(\":/icons/transaction_0\");\n     case TransactionStatus::Confirming:\n@@ -482,8 +475,9 @@ QVariant TransactionTableModel::txStatusDecoration(const TransactionRecord *wtx)\n     case TransactionStatus::MaturesWarning:\n     case TransactionStatus::NotAccepted:\n         return QIcon(\":/icons/transaction_0\");\n+    default:\n+        return COLOR_BLACK;\n     }\n-    return QColor(0,0,0);\n }\n \n QVariant TransactionTableModel::txWatchonlyDecoration(const TransactionRecord *wtx) const\n@@ -646,10 +640,7 @@ QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex\n     {\n         return createIndex(row, column, priv->index(row));\n     }\n-    else\n-    {\n-        return QModelIndex();\n-    }\n+    return QModelIndex();\n }\n \n void TransactionTableModel::updateDisplayUnit()"
      }
    ]
  },
  {
    "sha": "a49f11d9edf2f7dbce154ca370494a8f86e013d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDlmMTFkOWVkZjJmN2RiY2UxNTRjYTM3MDQ5NGE4Zjg2ZTAxM2Qw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T11:14:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T11:21:26Z"
      },
      "message": "qt: Change splash screen to normal window\n\nMakes it possible to move, minimize, unminimize the window while\nBitcoin Core is initializing.",
      "tree": {
        "sha": "906f50b1935438b6d9c8bf5d51b61be8e3d4dc00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/906f50b1935438b6d9c8bf5d51b61be8e3d4dc00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a49f11d9edf2f7dbce154ca370494a8f86e013d0",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49f11d9edf2f7dbce154ca370494a8f86e013d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a49f11d9edf2f7dbce154ca370494a8f86e013d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49f11d9edf2f7dbce154ca370494a8f86e013d0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fd881367544fcc9e70130bf448a181794da26ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd881367544fcc9e70130bf448a181794da26ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fd881367544fcc9e70130bf448a181794da26ab"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 58,
      "deletions": 19
    },
    "files": [
      {
        "sha": "676f218f20b9c67fb9267356b31f90345cd846d6",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49f11d9edf2f7dbce154ca370494a8f86e013d0/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49f11d9edf2f7dbce154ca370494a8f86e013d0/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=a49f11d9edf2f7dbce154ca370494a8f86e013d0",
        "patch": "@@ -338,8 +338,7 @@ void BitcoinApplication::createWindow(bool isaTestNet)\n \n void BitcoinApplication::createSplashScreen(bool isaTestNet)\n {\n-    SplashScreen *splash = new SplashScreen(QPixmap(), 0, isaTestNet);\n-    splash->setAttribute(Qt::WA_DeleteOnClose);\n+    SplashScreen *splash = new SplashScreen(0, isaTestNet);\n     splash->show();\n     connect(this, SIGNAL(splashFinished(QWidget*)), splash, SLOT(slotFinish(QWidget*)));\n }\n@@ -423,8 +422,6 @@ void BitcoinApplication::initializeResult(int retval)\n         }\n #endif\n \n-        emit splashFinished(window);\n-\n         // If -min option passed, start window minimized.\n         if(GetBoolArg(\"-min\", false))\n         {\n@@ -434,6 +431,8 @@ void BitcoinApplication::initializeResult(int retval)\n         {\n             window->show();\n         }\n+        emit splashFinished(window);\n+\n #ifdef ENABLE_WALLET\n         // Now that initialization/startup is done, process any command-line\n         // bitcoin: URIs or payment requests:"
      },
      {
        "sha": "b6443d47ff2277669f2af959adecc86c2b6c061b",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 13,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49f11d9edf2f7dbce154ca370494a8f86e013d0/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49f11d9edf2f7dbce154ca370494a8f86e013d0/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=a49f11d9edf2f7dbce154ca370494a8f86e013d0",
        "patch": "@@ -15,11 +15,12 @@\n \n #include <QApplication>\n #include <QPainter>\n+#include <QDesktopWidget>\n \n-SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTestNet) :\n-    QSplashScreen(pixmap, f)\n+SplashScreen::SplashScreen(Qt::WindowFlags f, bool isTestNet) :\n+    QWidget(0, f), curAlignment(0)\n {\n-    setAutoFillBackground(true);\n+    //setAutoFillBackground(true);\n \n     // set reference point, paddings\n     int paddingRight            = 50;\n@@ -38,15 +39,14 @@ SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTest\n     QString font            = \"Arial\";\n \n     // load the bitmap for writing some text over it\n-    QPixmap newPixmap;\n     if(isTestNet) {\n-        newPixmap     = QPixmap(\":/images/splash_testnet\");\n+        pixmap     = QPixmap(\":/images/splash_testnet\");\n     }\n     else {\n-        newPixmap     = QPixmap(\":/images/splash\");\n+        pixmap     = QPixmap(\":/images/splash\");\n     }\n \n-    QPainter pixPaint(&newPixmap);\n+    QPainter pixPaint(&pixmap);\n     pixPaint.setPen(QColor(100,100,100));\n \n     // check font size and drawing with\n@@ -61,7 +61,7 @@ SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTest\n     pixPaint.setFont(QFont(font, 33*fontFactor));\n     fm = pixPaint.fontMetrics();\n     titleTextWidth  = fm.width(titleText);\n-    pixPaint.drawText(newPixmap.width()-titleTextWidth-paddingRight,paddingTop,titleText);\n+    pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight,paddingTop,titleText);\n \n     pixPaint.setFont(QFont(font, 15*fontFactor));\n \n@@ -72,11 +72,11 @@ SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTest\n         pixPaint.setFont(QFont(font, 10*fontFactor));\n         titleVersionVSpace -= 5;\n     }\n-    pixPaint.drawText(newPixmap.width()-titleTextWidth-paddingRight+2,paddingTop+titleVersionVSpace,versionText);\n+    pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight+2,paddingTop+titleVersionVSpace,versionText);\n \n     // draw copyright stuff\n     pixPaint.setFont(QFont(font, 10*fontFactor));\n-    pixPaint.drawText(newPixmap.width()-titleTextWidth-paddingRight,paddingTop+titleCopyrightVSpace,copyrightText);\n+    pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight,paddingTop+titleCopyrightVSpace,copyrightText);\n \n     // draw testnet string if testnet is on\n     if(isTestNet) {\n@@ -85,12 +85,22 @@ SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTest\n         pixPaint.setFont(boldFont);\n         fm = pixPaint.fontMetrics();\n         int testnetAddTextWidth  = fm.width(testnetAddText);\n-        pixPaint.drawText(newPixmap.width()-testnetAddTextWidth-10,15,testnetAddText);\n+        pixPaint.drawText(pixmap.width()-testnetAddTextWidth-10,15,testnetAddText);\n     }\n \n     pixPaint.end();\n \n-    this->setPixmap(newPixmap);\n+    // Set window title\n+    if(isTestNet)\n+        setWindowTitle(titleText + \" \" + testnetAddText);\n+    else\n+        setWindowTitle(titleText);\n+\n+    // Resize window and move to center of desktop, disallow resizing\n+    QRect r(QPoint(), pixmap.size());\n+    resize(r.size());\n+    setFixedSize(r.size());\n+    move(QApplication::desktop()->screenGeometry().center() - r.center());\n \n     subscribeToCoreSignals();\n }\n@@ -102,7 +112,8 @@ SplashScreen::~SplashScreen()\n \n void SplashScreen::slotFinish(QWidget *mainWin)\n {\n-    finish(mainWin);\n+    hide();\n+    deleteLater();\n }\n \n static void InitMessage(SplashScreen *splash, const std::string &message)\n@@ -146,3 +157,21 @@ void SplashScreen::unsubscribeFromCoreSignals()\n         pwalletMain->ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n #endif\n }\n+\n+void SplashScreen::showMessage(const QString &message, int alignment, const QColor &color)\n+{\n+    curMessage = message;\n+    curAlignment = alignment;\n+    curColor = color;\n+    update();\n+}\n+\n+void SplashScreen::paintEvent(QPaintEvent *event)\n+{\n+    QPainter painter(this);\n+    painter.drawPixmap(0, 0, pixmap);\n+    QRect r = rect().adjusted(5, 5, -5, -5);\n+    painter.setPen(curColor);\n+    painter.drawText(r, curAlignment, curMessage);\n+}\n+"
      },
      {
        "sha": "1151d6c11190f0cae8d1b97bc7ce7f5867140082",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49f11d9edf2f7dbce154ca370494a8f86e013d0/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49f11d9edf2f7dbce154ca370494a8f86e013d0/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=a49f11d9edf2f7dbce154ca370494a8f86e013d0",
        "patch": "@@ -9,23 +9,34 @@\n \n /** class for the splashscreen with information of the running client\n  */\n-class SplashScreen : public QSplashScreen\n+class SplashScreen : public QWidget\n {\n     Q_OBJECT\n \n public:\n-    explicit SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTestNet);\n+    explicit SplashScreen(Qt::WindowFlags f, bool isTestNet);\n     ~SplashScreen();\n \n+protected:\n+     void paintEvent(QPaintEvent *event);\n+\n public slots:\n     /** Slot to call finish() method as it's not defined as slot */\n     void slotFinish(QWidget *mainWin);\n \n+    /** Show message and progress */\n+    void showMessage(const QString &message, int alignment, const QColor &color);\n+\n private:\n     /** Connect core signals to splash screen */\n     void subscribeToCoreSignals();\n     /** Disconnect core signals to splash screen */\n     void unsubscribeFromCoreSignals();\n+\n+    QPixmap pixmap;\n+    QString curMessage;\n+    QColor curColor;\n+    int curAlignment;\n };\n \n #endif // SPLASHSCREEN_H"
      }
    ]
  },
  {
    "sha": "5e83bc404c77d6e70c62152f1f97eb264afcc80d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTgzYmM0MDRjNzdkNmU3MGM2MjE1MmYxZjk3ZWIyNjRhZmNjODBk",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-05T11:18:35Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-18T12:11:44Z"
      },
      "message": "[Qt] include and file header cleanup\n\n- alphabetical ordering\n- correct ordering own headers before normal headers etc.",
      "tree": {
        "sha": "519eecfef852a7ca5e84b57813605b1f4b644c06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/519eecfef852a7ca5e84b57813605b1f4b644c06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e83bc404c77d6e70c62152f1f97eb264afcc80d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e83bc404c77d6e70c62152f1f97eb264afcc80d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e83bc404c77d6e70c62152f1f97eb264afcc80d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e83bc404c77d6e70c62152f1f97eb264afcc80d/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7fd881367544fcc9e70130bf448a181794da26ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd881367544fcc9e70130bf448a181794da26ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fd881367544fcc9e70130bf448a181794da26ab"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 39,
      "deletions": 25
    },
    "files": [
      {
        "sha": "d9ca423015060b701c59c749083a087f2fba7712",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -16,6 +16,7 @@\n #include \"splashscreen.h\"\n #include \"utilitydialog.h\"\n #include \"winshutdownmonitor.h\"\n+\n #ifdef ENABLE_WALLET\n #include \"paymentserver.h\"\n #include \"walletmodel.h\"\n@@ -26,6 +27,7 @@\n #include \"rpcserver.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #endif\n@@ -34,15 +36,16 @@\n \n #include <boost/filesystem/operations.hpp>\n #include <boost/thread.hpp>\n+\n #include <QApplication>\n #include <QDebug>\n #include <QLibraryInfo>\n #include <QLocale>\n #include <QMessageBox>\n #include <QSettings>\n+#include <QThread>\n #include <QTimer>\n #include <QTranslator>\n-#include <QThread>\n \n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>"
      },
      {
        "sha": "84795a7e7a584521029d7f53798d4ff944e29a9a",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -7,12 +7,12 @@\n \n #include <QWidget>\n \n+class AmountSpinBox;\n+\n QT_BEGIN_NAMESPACE\n class QValueComboBox;\n QT_END_NAMESPACE\n \n-class AmountSpinBox;\n-\n /** Widget for entering bitcoin amounts.\n   */\n class BitcoinAmountField: public QWidget"
      },
      {
        "sha": "dd5192982ee2efdfc8fbc3f274f4370571c96560",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -14,6 +14,7 @@\n #include \"optionsmodel.h\"\n #include \"rpcconsole.h\"\n #include \"utilitydialog.h\"\n+\n #ifdef ENABLE_WALLET\n #include \"walletframe.h\"\n #include \"walletmodel.h\"\n@@ -24,8 +25,8 @@\n #endif\n \n #include \"init.h\"\n-#include \"util.h\"\n #include \"ui_interface.h\"\n+#include \"util.h\"\n \n #include <iostream>\n \n@@ -50,8 +51,8 @@\n #include <QVBoxLayout>\n \n #if QT_VERSION < 0x050000\n-#include <QUrl>\n #include <QTextDocument>\n+#include <QUrl>\n #else\n #include <QUrlQuery>\n #endif"
      },
      {
        "sha": "a6f239a89871e75df90236424174ac619d1b5168",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -14,13 +14,15 @@\n #include <QString>\n #include <QTreeWidgetItem>\n \n-namespace Ui {\n-    class CoinControlDialog;\n-}\n class WalletModel;\n+\n class CCoinControl;\n class CTxMemPool;\n \n+namespace Ui {\n+    class CoinControlDialog;\n+}\n+\n class CoinControlDialog : public QDialog\n {\n     Q_OBJECT"
      },
      {
        "sha": "e3e396d3693bef211c6b112f676343d35b496838",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -12,7 +12,7 @@\n class FreespaceChecker;\n \n namespace Ui {\n-class Intro;\n+    class Intro;\n }\n \n /** Introduction screen (pre-GUI startup)."
      },
      {
        "sha": "67a5f167d1532ecc2ecfd7a7bfde504744284726",
        "filename": "src/qt/openuridialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/openuridialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/openuridialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.h?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -8,7 +8,7 @@\n #include <QDialog>\n \n namespace Ui {\n-class OpenURIDialog;\n+    class OpenURIDialog;\n }\n \n class OpenURIDialog : public QDialog"
      },
      {
        "sha": "279467129fc213e290bd62b644a55a246c42fdb9",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -17,11 +17,13 @@\n #include \"main.h\" // for MAX_SCRIPTCHECK_THREADS\n #include \"netbase.h\"\n #include \"txdb.h\" // for -dbcache defaults\n+\n #ifdef ENABLE_WALLET\n #include \"wallet.h\" // for CWallet::minTxFee\n #endif\n \n #include <boost/thread.hpp>\n+\n #include <QDir>\n #include <QIntValidator>\n #include <QLocale>"
      },
      {
        "sha": "bd747faeb68452b40101ca56cca20aa4ba71abc1",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -15,6 +15,7 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"txdb.h\" // for -dbcache defaults\n+\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #include \"walletdb.h\""
      },
      {
        "sha": "7b7de49831e4a8101394c9faa19b86bb00c485dc",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -13,6 +13,7 @@\n \n #include <openssl/x509.h>\n #include <openssl/x509_vfy.h>\n+\n #include <QDateTime>\n #include <QDebug>\n #include <QSslCertificate>"
      },
      {
        "sha": "7a7e38e25e9e35de8daa7850af9560c7a0e6774d",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef RECEIVECOINSDIALOG_H\n #define RECEIVECOINSDIALOG_H\n \n+#include \"guiutil.h\"\n+\n #include <QDialog>\n #include <QHeaderView>\n #include <QItemSelection>\n@@ -13,13 +15,12 @@\n #include <QPoint>\n #include <QVariant>\n \n-#include \"guiutil.h\"\n+class OptionsModel;\n+class WalletModel;\n \n namespace Ui {\n     class ReceiveCoinsDialog;\n }\n-class OptionsModel;\n-class WalletModel;\n \n QT_BEGIN_NAMESPACE\n class QModelIndex;"
      },
      {
        "sha": "8129353d4b0b130b240994292d16796facc4a0f9",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -16,10 +16,12 @@\n #include \"util.h\"\n \n #include \"json/json_spirit_value.h\"\n+\n+#include <openssl/crypto.h>\n+\n #ifdef ENABLE_WALLET\n #include <db_cxx.h>\n #endif\n-#include <openssl/crypto.h>\n \n #include <QKeyEvent>\n #include <QScrollBar>"
      },
      {
        "sha": "1ffff927586a4ccfe14e2d6e9dfedc4654d65b52",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -14,14 +14,14 @@\n \n class ClientModel;\n \n-QT_BEGIN_NAMESPACE\n-class QItemSelection;\n-QT_END_NAMESPACE\n-\n namespace Ui {\n     class RPCConsole;\n }\n \n+QT_BEGIN_NAMESPACE\n+class QItemSelection;\n+QT_END_NAMESPACE\n+\n /** Local Bitcoin RPC console. */\n class RPCConsole: public QDialog\n {"
      },
      {
        "sha": "a090fa42d5c214e7075cbc87c7a62f32aa74ece2",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -14,14 +14,14 @@ class OptionsModel;\n class SendCoinsEntry;\n class SendCoinsRecipient;\n \n-QT_BEGIN_NAMESPACE\n-class QUrl;\n-QT_END_NAMESPACE\n-\n namespace Ui {\n     class SendCoinsDialog;\n }\n \n+QT_BEGIN_NAMESPACE\n+class QUrl;\n+QT_END_NAMESPACE\n+\n /** Dialog for sending bitcoins */\n class SendCoinsDialog : public QDialog\n {"
      },
      {
        "sha": "feb0f3350f4c8ff9c46830d0df14d4b2bd71a5e1",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -4,11 +4,12 @@\n \n #include \"splashscreen.h\"\n \n-#include \"version.h\"\n #include \"clientversion.h\"\n #include \"init.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"version.h\"\n+\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #endif"
      },
      {
        "sha": "49237183412d30206ed3b6e1f0c4b25fc93984f4",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e83bc404c77d6e70c62152f1f97eb264afcc80d/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "patch": "@@ -6,13 +6,13 @@\n \n #include \"bitcoinunits.h\"\n #include \"guiutil.h\"\n+#include \"paymentserver.h\"\n+#include \"transactionrecord.h\"\n \n #include \"base58.h\"\n #include \"db.h\"\n #include \"main.h\"\n-#include \"paymentserver.h\"\n #include \"script/script.h\"\n-#include \"transactionrecord.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"util.h\""
      }
    ]
  },
  {
    "sha": "94064710b9123dfb3df8cfd6c32efae349aec281",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NDA2NDcxMGI5MTIzZGZiM2RmOGNmZDZjMzJlZmFlMzQ5YWVjMjgx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T12:08:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-18T12:20:18Z"
      },
      "message": "Write fee estimate and peers files only when initialized\n\nFixes #4669.\n\nMove the loading of addresses to StartNode() to make it more\nself-contained.",
      "tree": {
        "sha": "84b6105c502fe6edd6115bab292c29b2aaa70f62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84b6105c502fe6edd6115bab292c29b2aaa70f62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94064710b9123dfb3df8cfd6c32efae349aec281",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94064710b9123dfb3df8cfd6c32efae349aec281",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94064710b9123dfb3df8cfd6c32efae349aec281",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94064710b9123dfb3df8cfd6c32efae349aec281/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fd881367544fcc9e70130bf448a181794da26ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd881367544fcc9e70130bf448a181794da26ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fd881367544fcc9e70130bf448a181794da26ab"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 29,
      "deletions": 18
    },
    "files": [
      {
        "sha": "0a6b5abac592b30efc97c63a5a91ad04e61753b8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 17,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94064710b9123dfb3df8cfd6c32efae349aec281/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94064710b9123dfb3df8cfd6c32efae349aec281/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=94064710b9123dfb3df8cfd6c32efae349aec281",
        "patch": "@@ -47,6 +47,7 @@ using namespace std;\n #ifdef ENABLE_WALLET\n CWallet* pwalletMain;\n #endif\n+bool fFeeEstimatesInitialized = false;\n \n #ifdef WIN32\n // Win32 LevelDB doesn't use filedescriptors, and the ones used for\n@@ -119,6 +120,10 @@ void Shutdown()\n     if (!lockShutdown)\n         return;\n \n+    /// Note: Shutdown() must be able to handle cases in which AppInit2() failed part of the way,\n+    /// for example if the data directory was found to be locked.\n+    /// Be sure that anything that writes files or flushes caches only does this if the respective\n+    /// module was initialized.\n     RenameThread(\"bitcoin-shutoff\");\n     mempool.AddTransactionsUpdated(1);\n     StopRPCThreads();\n@@ -130,13 +135,15 @@ void Shutdown()\n     StopNode();\n     UnregisterNodeSignals(GetNodeSignals());\n \n+    if (fFeeEstimatesInitialized)\n     {\n         boost::filesystem::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n         CAutoFile est_fileout(fopen(est_path.string().c_str(), \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (est_fileout)\n             mempool.WriteFeeEstimates(est_fileout);\n         else\n             LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, est_path.string());\n+        fFeeEstimatesInitialized = false;\n     }\n \n     {\n@@ -1056,6 +1063,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     // Allowed to fail as this file IS missing on first startup.\n     if (est_filein)\n         mempool.ReadFeeEstimates(est_filein);\n+    fFeeEstimatesInitialized = true;\n \n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n@@ -1212,22 +1220,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     }\n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n \n-    // ********************************************************* Step 10: load peers\n-\n-    uiInterface.InitMessage(_(\"Loading addresses...\"));\n-\n-    nStart = GetTimeMillis();\n-\n-    {\n-        CAddrDB adb;\n-        if (!adb.Read(addrman))\n-            LogPrintf(\"Invalid or missing peers.dat; recreating\\n\");\n-    }\n-\n-    LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\",\n-           addrman.size(), GetTimeMillis() - nStart);\n-\n-    // ********************************************************* Step 11: start node\n+    // ********************************************************* Step 10: start node\n \n     if (!CheckDiskSpace())\n         return false;\n@@ -1256,7 +1249,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain, GetArg(\"-genproclimit\", -1));\n #endif\n \n-    // ********************************************************* Step 12: finished\n+    // ********************************************************* Step 11: finished\n \n     uiInterface.InitMessage(_(\"Done loading\"));\n "
      },
      {
        "sha": "ebb103b6362d8f07bb064274f0b83edecd90b7d7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94064710b9123dfb3df8cfd6c32efae349aec281/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94064710b9123dfb3df8cfd6c32efae349aec281/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=94064710b9123dfb3df8cfd6c32efae349aec281",
        "patch": "@@ -78,6 +78,7 @@ uint64_t nLocalHostNonce = 0;\n static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = 125;\n+bool fAddressesInitialized = false;\n \n vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n@@ -1739,6 +1740,18 @@ void static Discover(boost::thread_group& threadGroup)\n \n void StartNode(boost::thread_group& threadGroup)\n {\n+    uiInterface.InitMessage(_(\"Loading addresses...\"));\n+    // Load addresses for peers.dat\n+    int64_t nStart = GetTimeMillis();\n+    {\n+        CAddrDB adb;\n+        if (!adb.Read(addrman))\n+            LogPrintf(\"Invalid or missing peers.dat; recreating\\n\");\n+    }\n+    LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\",\n+           addrman.size(), GetTimeMillis() - nStart);\n+    fAddressesInitialized = true;\n+\n     if (semOutbound == NULL) {\n         // initialize semaphore\n         int nMaxOutbound = min(MAX_OUTBOUND_CONNECTIONS, nMaxConnections);\n@@ -1785,7 +1798,12 @@ bool StopNode()\n     if (semOutbound)\n         for (int i=0; i<MAX_OUTBOUND_CONNECTIONS; i++)\n             semOutbound->post();\n-    DumpAddresses();\n+\n+    if (fAddressesInitialized)\n+    {\n+        DumpAddresses();\n+        fAddressesInitialized = false;\n+    }\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "018cec7c41e5fca9cfe80c618444a4d343fc44e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMThjZWM3YzQxZTVmY2E5Y2ZlODBjNjE4NDQ0YTRkMzQzZmM0NGUy",
    "commit": {
      "author": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-18T20:57:01Z"
      },
      "committer": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-18T20:57:01Z"
      },
      "message": "Fixing 'vector out of bounds' issue in base 32 and 64",
      "tree": {
        "sha": "c067241cb3e98133d21017f5994c580a3d43e0d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c067241cb3e98133d21017f5994c580a3d43e0d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/018cec7c41e5fca9cfe80c618444a4d343fc44e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/018cec7c41e5fca9cfe80c618444a4d343fc44e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/018cec7c41e5fca9cfe80c618444a4d343fc44e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/018cec7c41e5fca9cfe80c618444a4d343fc44e2/comments",
    "author": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fd881367544fcc9e70130bf448a181794da26ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd881367544fcc9e70130bf448a181794da26ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fd881367544fcc9e70130bf448a181794da26ab"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2cec3023b53bbc28926f134a3559837b9b399900",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/018cec7c41e5fca9cfe80c618444a4d343fc44e2/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/018cec7c41e5fca9cfe80c618444a4d343fc44e2/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=018cec7c41e5fca9cfe80c618444a4d343fc44e2",
        "patch": "@@ -224,7 +224,7 @@ vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n string DecodeBase64(const string& str)\n {\n     vector<unsigned char> vchRet = DecodeBase64(str.c_str());\n-    return string((const char*)&vchRet[0], vchRet.size());\n+    return (vchRet.size() == 0) ? string() : string((const char*)&vchRet[0], vchRet.size());\n }\n \n string EncodeBase32(const unsigned char* pch, size_t len)\n@@ -411,7 +411,7 @@ vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n string DecodeBase32(const string& str)\n {\n     vector<unsigned char> vchRet = DecodeBase32(str.c_str());\n-    return string((const char*)&vchRet[0], vchRet.size());\n+    return (vchRet.size() == 0) ? string() : string((const char*)&vchRet[0], vchRet.size());\n }\n \n bool ParseInt32(const std::string& str, int32_t *out)"
      }
    ]
  },
  {
    "sha": "2fc6c67400e91846ca1c1c57011e57491013f9bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmM2YzY3NDAwZTkxODQ2Y2ExYzFjNTcwMTFlNTc0OTEwMTNmOWJk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-19T16:37:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-19T16:42:00Z"
      },
      "message": "Merge pull request #4944\n\n018cec7 Fixing 'vector out of bounds' issue in base 32 and 64 (ENikS)",
      "tree": {
        "sha": "c067241cb3e98133d21017f5994c580a3d43e0d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c067241cb3e98133d21017f5994c580a3d43e0d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fc6c67400e91846ca1c1c57011e57491013f9bd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUHFzYAAoJEI9lMlXIeZLgKVIMAL/bV9s8YPJMWSI90Pq2hRmi\nrn35IooT8AfodzaIL72dgWQjMbnwisF9AuhaLPzno6dfGGbYzCLcgjpotkquqNsK\nGXWM+0HMkx6V9G6b0khDH9syBEJ4rRdJ09vUVmnKvrqqS1RMcay4bJBexY57TQrC\nBDnwas041def8ovuOEmo9f10gHDVYKmn/HrEaru+gyryJ3dkLro2QZRAf0Y7W+Ef\n9Uaoq4Fsp64KKSF3e85ddg31phkEqOg+6Qf+HDOtRMZTmh3cHUAPZ7QAq9/IKgQx\nvsBStGdxSiEa4Y/NDmfNZnr3Aul60hnb9e+SZauHdUjGFI+onUX09bNm/f3LWGEc\nkYA8+zbv/CzYJbsuusTkJ/nHSpESF9KX4pmqozq8h0WKQOm+9emE3Tnlrmuws2Vn\nT+PMK95UMAxfLtHrBFkSUNTih2MDPiTbdB2ii99Pd672MMNcrY96Hhbkd/r/aP7o\nXEUgPy6pqNQkjMdNZGTzU1udYJfXr7nlqKxJIOQ0Mw==\n=q6Dy\n-----END PGP SIGNATURE-----",
        "payload": "tree c067241cb3e98133d21017f5994c580a3d43e0d5\nparent 7fd881367544fcc9e70130bf448a181794da26ab\nparent 018cec7c41e5fca9cfe80c618444a4d343fc44e2\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1411144668 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1411144920 +0200\n\nMerge pull request #4944\n\n018cec7 Fixing 'vector out of bounds' issue in base 32 and 64 (ENikS)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc6c67400e91846ca1c1c57011e57491013f9bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fc6c67400e91846ca1c1c57011e57491013f9bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc6c67400e91846ca1c1c57011e57491013f9bd/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7fd881367544fcc9e70130bf448a181794da26ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7fd881367544fcc9e70130bf448a181794da26ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7fd881367544fcc9e70130bf448a181794da26ab"
      },
      {
        "sha": "018cec7c41e5fca9cfe80c618444a4d343fc44e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/018cec7c41e5fca9cfe80c618444a4d343fc44e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/018cec7c41e5fca9cfe80c618444a4d343fc44e2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2cec3023b53bbc28926f134a3559837b9b399900",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fc6c67400e91846ca1c1c57011e57491013f9bd/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fc6c67400e91846ca1c1c57011e57491013f9bd/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=2fc6c67400e91846ca1c1c57011e57491013f9bd",
        "patch": "@@ -224,7 +224,7 @@ vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid)\n string DecodeBase64(const string& str)\n {\n     vector<unsigned char> vchRet = DecodeBase64(str.c_str());\n-    return string((const char*)&vchRet[0], vchRet.size());\n+    return (vchRet.size() == 0) ? string() : string((const char*)&vchRet[0], vchRet.size());\n }\n \n string EncodeBase32(const unsigned char* pch, size_t len)\n@@ -411,7 +411,7 @@ vector<unsigned char> DecodeBase32(const char* p, bool* pfInvalid)\n string DecodeBase32(const string& str)\n {\n     vector<unsigned char> vchRet = DecodeBase32(str.c_str());\n-    return string((const char*)&vchRet[0], vchRet.size());\n+    return (vchRet.size() == 0) ? string() : string((const char*)&vchRet[0], vchRet.size());\n }\n \n bool ParseInt32(const std::string& str, int32_t *out)"
      }
    ]
  },
  {
    "sha": "20e01b1a03819d843a860284033b48a5e3b65ff7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMGUwMWIxYTAzODE5ZDg0M2E4NjAyODQwMzNiNDhhNWUzYjY1ZmY3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-19T17:21:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-19T17:21:46Z"
      },
      "message": "Apply clang-format on some infrequently-updated files",
      "tree": {
        "sha": "5b390722b053ce5b448919bda2695d173980ffb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b390722b053ce5b448919bda2695d173980ffb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20e01b1a03819d843a860284033b48a5e3b65ff7",
      "comment_count": 1,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20e01b1a03819d843a860284033b48a5e3b65ff7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20e01b1a03819d843a860284033b48a5e3b65ff7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20e01b1a03819d843a860284033b48a5e3b65ff7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fc6c67400e91846ca1c1c57011e57491013f9bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc6c67400e91846ca1c1c57011e57491013f9bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fc6c67400e91846ca1c1c57011e57491013f9bd"
      }
    ],
    "stats": {
      "total": 1591,
      "additions": 847,
      "deletions": 744
    },
    "files": [
      {
        "sha": "7b674a66e7cbfc93dd2628aeabc2578d0793e400",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 110,
        "deletions": 115,
        "changes": 225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -9,7 +9,7 @@\n \n using namespace std;\n \n-int CAddrInfo::GetTriedBucket(const std::vector<unsigned char> &nKey) const\n+int CAddrInfo::GetTriedBucket(const std::vector<unsigned char>& nKey) const\n {\n     CDataStream ss1(SER_GETHASH, 0);\n     std::vector<unsigned char> vchKey = GetKey();\n@@ -23,7 +23,7 @@ int CAddrInfo::GetTriedBucket(const std::vector<unsigned char> &nKey) const\n     return hash2 % ADDRMAN_TRIED_BUCKET_COUNT;\n }\n \n-int CAddrInfo::GetNewBucket(const std::vector<unsigned char> &nKey, const CNetAddr& src) const\n+int CAddrInfo::GetNewBucket(const std::vector<unsigned char>& nKey, const CNetAddr& src) const\n {\n     CDataStream ss1(SER_GETHASH, 0);\n     std::vector<unsigned char> vchGroupKey = GetGroup();\n@@ -39,19 +39,19 @@ int CAddrInfo::GetNewBucket(const std::vector<unsigned char> &nKey, const CNetAd\n \n bool CAddrInfo::IsTerrible(int64_t nNow) const\n {\n-    if (nLastTry && nLastTry >= nNow-60) // never remove things tried the last minute\n+    if (nLastTry && nLastTry >= nNow - 60) // never remove things tried the last minute\n         return false;\n \n-    if (nTime > nNow + 10*60) // came in a flying DeLorean\n+    if (nTime > nNow + 10 * 60) // came in a flying DeLorean\n         return true;\n \n-    if (nTime==0 || nNow-nTime > ADDRMAN_HORIZON_DAYS*24*60*60) // not seen in recent history\n+    if (nTime == 0 || nNow - nTime > ADDRMAN_HORIZON_DAYS * 24 * 60 * 60) // not seen in recent history\n         return true;\n \n-    if (nLastSuccess==0 && nAttempts>=ADDRMAN_RETRIES) // tried N times and never a success\n+    if (nLastSuccess == 0 && nAttempts >= ADDRMAN_RETRIES) // tried N times and never a success\n         return true;\n \n-    if (nNow-nLastSuccess > ADDRMAN_MIN_FAIL_DAYS*24*60*60 && nAttempts>=ADDRMAN_MAX_FAILURES) // N successive failures in the last week\n+    if (nNow - nLastSuccess > ADDRMAN_MIN_FAIL_DAYS * 24 * 60 * 60 && nAttempts >= ADDRMAN_MAX_FAILURES) // N successive failures in the last week\n         return true;\n \n     return false;\n@@ -64,23 +64,25 @@ double CAddrInfo::GetChance(int64_t nNow) const\n     int64_t nSinceLastSeen = nNow - nTime;\n     int64_t nSinceLastTry = nNow - nLastTry;\n \n-    if (nSinceLastSeen < 0) nSinceLastSeen = 0;\n-    if (nSinceLastTry < 0) nSinceLastTry = 0;\n+    if (nSinceLastSeen < 0)\n+        nSinceLastSeen = 0;\n+    if (nSinceLastTry < 0)\n+        nSinceLastTry = 0;\n \n     fChance *= 600.0 / (600.0 + nSinceLastSeen);\n \n     // deprioritize very recent attempts away\n-    if (nSinceLastTry < 60*10)\n+    if (nSinceLastTry < 60 * 10)\n         fChance *= 0.01;\n \n     // deprioritize 50% after each failed attempt\n-    for (int n=0; n<nAttempts; n++)\n+    for (int n = 0; n < nAttempts; n++)\n         fChance /= 1.5;\n \n     return fChance;\n }\n \n-CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int *pnId)\n+CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)\n {\n     std::map<CNetAddr, int>::iterator it = mapAddr.find(addr);\n     if (it == mapAddr.end())\n@@ -93,7 +95,7 @@ CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int *pnId)\n     return NULL;\n }\n \n-CAddrInfo* CAddrMan::Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId)\n+CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId)\n {\n     int nId = nIdCount++;\n     mapInfo[nId] = CAddrInfo(addr, addrSource);\n@@ -127,22 +129,21 @@ void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2)\n \n int CAddrMan::SelectTried(int nKBucket)\n {\n-    std::vector<int> &vTried = vvTried[nKBucket];\n+    std::vector<int>& vTried = vvTried[nKBucket];\n \n     // random shuffle the first few elements (using the entire list)\n     // find the least recently tried among them\n     int64_t nOldest = -1;\n     int nOldestPos = -1;\n-    for (unsigned int i = 0; i < ADDRMAN_TRIED_ENTRIES_INSPECT_ON_EVICT && i < vTried.size(); i++)\n-    {\n+    for (unsigned int i = 0; i < ADDRMAN_TRIED_ENTRIES_INSPECT_ON_EVICT && i < vTried.size(); i++) {\n         int nPos = GetRandInt(vTried.size() - i) + i;\n         int nTemp = vTried[nPos];\n         vTried[nPos] = vTried[i];\n         vTried[i] = nTemp;\n         assert(nOldest == -1 || mapInfo.count(nTemp) == 1);\n         if (nOldest == -1 || mapInfo[nTemp].nLastSuccess < mapInfo[nOldest].nLastSuccess) {\n-           nOldest = nTemp;\n-           nOldestPos = nPos;\n+            nOldest = nTemp;\n+            nOldestPos = nPos;\n         }\n     }\n \n@@ -152,18 +153,15 @@ int CAddrMan::SelectTried(int nKBucket)\n int CAddrMan::ShrinkNew(int nUBucket)\n {\n     assert(nUBucket >= 0 && (unsigned int)nUBucket < vvNew.size());\n-    std::set<int> &vNew = vvNew[nUBucket];\n+    std::set<int>& vNew = vvNew[nUBucket];\n \n     // first look for deletable items\n-    for (std::set<int>::iterator it = vNew.begin(); it != vNew.end(); it++)\n-    {\n+    for (std::set<int>::iterator it = vNew.begin(); it != vNew.end(); it++) {\n         assert(mapInfo.count(*it));\n-        CAddrInfo &info = mapInfo[*it];\n-        if (info.IsTerrible())\n-        {\n-            if (--info.nRefCount == 0)\n-            {\n-                SwapRandom(info.nRandomPos, vRandom.size()-1);\n+        CAddrInfo& info = mapInfo[*it];\n+        if (info.IsTerrible()) {\n+            if (--info.nRefCount == 0) {\n+                SwapRandom(info.nRandomPos, vRandom.size() - 1);\n                 vRandom.pop_back();\n                 mapAddr.erase(info);\n                 mapInfo.erase(*it);\n@@ -178,21 +176,18 @@ int CAddrMan::ShrinkNew(int nUBucket)\n     int n[4] = {GetRandInt(vNew.size()), GetRandInt(vNew.size()), GetRandInt(vNew.size()), GetRandInt(vNew.size())};\n     int nI = 0;\n     int nOldest = -1;\n-    for (std::set<int>::iterator it = vNew.begin(); it != vNew.end(); it++)\n-    {\n-        if (nI == n[0] || nI == n[1] || nI == n[2] || nI == n[3])\n-        {\n+    for (std::set<int>::iterator it = vNew.begin(); it != vNew.end(); it++) {\n+        if (nI == n[0] || nI == n[1] || nI == n[2] || nI == n[3]) {\n             assert(nOldest == -1 || mapInfo.count(*it) == 1);\n             if (nOldest == -1 || mapInfo[*it].nTime < mapInfo[nOldest].nTime)\n                 nOldest = *it;\n         }\n         nI++;\n     }\n     assert(mapInfo.count(nOldest) == 1);\n-    CAddrInfo &info = mapInfo[nOldest];\n-    if (--info.nRefCount == 0)\n-    {\n-        SwapRandom(info.nRandomPos, vRandom.size()-1);\n+    CAddrInfo& info = mapInfo[nOldest];\n+    if (--info.nRefCount == 0) {\n+        SwapRandom(info.nRandomPos, vRandom.size() - 1);\n         vRandom.pop_back();\n         mapAddr.erase(info);\n         mapInfo.erase(nOldest);\n@@ -208,8 +203,7 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)\n     assert(vvNew[nOrigin].count(nId) == 1);\n \n     // remove the entry from all new buckets\n-    for (std::vector<std::set<int> >::iterator it = vvNew.begin(); it != vvNew.end(); it++)\n-    {\n+    for (std::vector<std::set<int> >::iterator it = vvNew.begin(); it != vvNew.end(); it++) {\n         if ((*it).erase(nId))\n             info.nRefCount--;\n     }\n@@ -219,11 +213,10 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)\n \n     // what tried bucket to move the entry to\n     int nKBucket = info.GetTriedBucket(nKey);\n-    std::vector<int> &vTried = vvTried[nKBucket];\n+    std::vector<int>& vTried = vvTried[nKBucket];\n \n     // first check whether there is place to just add it\n-    if (vTried.size() < ADDRMAN_TRIED_BUCKET_SIZE)\n-    {\n+    if (vTried.size() < ADDRMAN_TRIED_BUCKET_SIZE) {\n         vTried.push_back(nId);\n         nTried++;\n         info.fInTried = true;\n@@ -236,7 +229,7 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)\n     // find which new bucket it belongs to\n     assert(mapInfo.count(vTried[nPos]) == 1);\n     int nUBucket = mapInfo[vTried[nPos]].GetNewBucket(nKey);\n-    std::set<int> &vNew = vvNew[nUBucket];\n+    std::set<int>& vNew = vvNew[nUBucket];\n \n     // remove the to-be-replaced tried entry from the tried set\n     CAddrInfo& infoOld = mapInfo[vTried[nPos]];\n@@ -245,8 +238,7 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)\n     // do not update nTried, as we are going to move something else there immediately\n \n     // check whether there is place in that one,\n-    if (vNew.size() < ADDRMAN_NEW_BUCKET_SIZE)\n-    {\n+    if (vNew.size() < ADDRMAN_NEW_BUCKET_SIZE) {\n         // if so, move it back there\n         vNew.insert(vTried[nPos]);\n     } else {\n@@ -261,16 +253,16 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)\n     return;\n }\n \n-void CAddrMan::Good_(const CService &addr, int64_t nTime)\n+void CAddrMan::Good_(const CService& addr, int64_t nTime)\n {\n     int nId;\n-    CAddrInfo *pinfo = Find(addr, &nId);\n+    CAddrInfo* pinfo = Find(addr, &nId);\n \n     // if not found, bail out\n     if (!pinfo)\n         return;\n \n-    CAddrInfo &info = *pinfo;\n+    CAddrInfo& info = *pinfo;\n \n     // check whether we are talking about the exact same CService (including same port)\n     if (info != addr)\n@@ -289,38 +281,36 @@ void CAddrMan::Good_(const CService &addr, int64_t nTime)\n     // find a bucket it is in now\n     int nRnd = GetRandInt(vvNew.size());\n     int nUBucket = -1;\n-    for (unsigned int n = 0; n < vvNew.size(); n++)\n-    {\n-        int nB = (n+nRnd) % vvNew.size();\n-        std::set<int> &vNew = vvNew[nB];\n-        if (vNew.count(nId))\n-        {\n+    for (unsigned int n = 0; n < vvNew.size(); n++) {\n+        int nB = (n + nRnd) % vvNew.size();\n+        std::set<int>& vNew = vvNew[nB];\n+        if (vNew.count(nId)) {\n             nUBucket = nB;\n             break;\n         }\n     }\n \n     // if no bucket is found, something bad happened;\n     // TODO: maybe re-add the node, but for now, just bail out\n-    if (nUBucket == -1) return;\n+    if (nUBucket == -1)\n+        return;\n \n     LogPrint(\"addrman\", \"Moving %s to tried\\n\", addr.ToString());\n \n     // move nId to the tried tables\n     MakeTried(info, nId, nUBucket);\n }\n \n-bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty)\n+bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty)\n {\n     if (!addr.IsRoutable())\n         return false;\n \n     bool fNew = false;\n     int nId;\n-    CAddrInfo *pinfo = Find(addr, &nId);\n+    CAddrInfo* pinfo = Find(addr, &nId);\n \n-    if (pinfo)\n-    {\n+    if (pinfo) {\n         // periodically update nTime\n         bool fCurrentlyOnline = (GetAdjustedTime() - addr.nTime < 24 * 60 * 60);\n         int64_t nUpdateInterval = (fCurrentlyOnline ? 60 * 60 : 24 * 60 * 60);\n@@ -344,7 +334,7 @@ bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimeP\n \n         // stochastic test: previous nRefCount == N: 2^N times harder to increase it\n         int nFactor = 1;\n-        for (int n=0; n<pinfo->nRefCount; n++)\n+        for (int n = 0; n < pinfo->nRefCount; n++)\n             nFactor *= 2;\n         if (nFactor > 1 && (GetRandInt(nFactor) != 0))\n             return false;\n@@ -356,9 +346,8 @@ bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimeP\n     }\n \n     int nUBucket = pinfo->GetNewBucket(nKey, source);\n-    std::set<int> &vNew = vvNew[nUBucket];\n-    if (!vNew.count(nId))\n-    {\n+    std::set<int>& vNew = vvNew[nUBucket];\n+    if (!vNew.count(nId)) {\n         pinfo->nRefCount++;\n         if (vNew.size() == ADDRMAN_NEW_BUCKET_SIZE)\n             ShrinkNew(nUBucket);\n@@ -367,15 +356,15 @@ bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimeP\n     return fNew;\n }\n \n-void CAddrMan::Attempt_(const CService &addr, int64_t nTime)\n+void CAddrMan::Attempt_(const CService& addr, int64_t nTime)\n {\n-    CAddrInfo *pinfo = Find(addr);\n+    CAddrInfo* pinfo = Find(addr);\n \n     // if not found, bail out\n     if (!pinfo)\n         return;\n \n-    CAddrInfo &info = *pinfo;\n+    CAddrInfo& info = *pinfo;\n \n     // check whether we are talking about the exact same CService (including same port)\n     if (info != addr)\n@@ -393,37 +382,36 @@ CAddress CAddrMan::Select_(int nUnkBias)\n \n     double nCorTried = sqrt(nTried) * (100.0 - nUnkBias);\n     double nCorNew = sqrt(nNew) * nUnkBias;\n-    if ((nCorTried + nCorNew)*GetRandInt(1<<30)/(1<<30) < nCorTried)\n-    {\n+    if ((nCorTried + nCorNew) * GetRandInt(1 << 30) / (1 << 30) < nCorTried) {\n         // use a tried node\n         double fChanceFactor = 1.0;\n-        while(1)\n-        {\n+        while (1) {\n             int nKBucket = GetRandInt(vvTried.size());\n-            std::vector<int> &vTried = vvTried[nKBucket];\n-            if (vTried.size() == 0) continue;\n+            std::vector<int>& vTried = vvTried[nKBucket];\n+            if (vTried.size() == 0)\n+                continue;\n             int nPos = GetRandInt(vTried.size());\n             assert(mapInfo.count(vTried[nPos]) == 1);\n-            CAddrInfo &info = mapInfo[vTried[nPos]];\n-            if (GetRandInt(1<<30) < fChanceFactor*info.GetChance()*(1<<30))\n+            CAddrInfo& info = mapInfo[vTried[nPos]];\n+            if (GetRandInt(1 << 30) < fChanceFactor * info.GetChance() * (1 << 30))\n                 return info;\n             fChanceFactor *= 1.2;\n         }\n     } else {\n         // use a new node\n         double fChanceFactor = 1.0;\n-        while(1)\n-        {\n+        while (1) {\n             int nUBucket = GetRandInt(vvNew.size());\n-            std::set<int> &vNew = vvNew[nUBucket];\n-            if (vNew.size() == 0) continue;\n+            std::set<int>& vNew = vvNew[nUBucket];\n+            if (vNew.size() == 0)\n+                continue;\n             int nPos = GetRandInt(vNew.size());\n             std::set<int>::iterator it = vNew.begin();\n             while (nPos--)\n                 it++;\n             assert(mapInfo.count(*it) == 1);\n-            CAddrInfo &info = mapInfo[*it];\n-            if (GetRandInt(1<<30) < fChanceFactor*info.GetChance()*(1<<30))\n+            CAddrInfo& info = mapInfo[*it];\n+            if (GetRandInt(1 << 30) < fChanceFactor * info.GetChance() * (1 << 30))\n                 return info;\n             fChanceFactor *= 1.2;\n         }\n@@ -436,69 +424,76 @@ int CAddrMan::Check_()\n     std::set<int> setTried;\n     std::map<int, int> mapNew;\n \n-    if (vRandom.size() != nTried + nNew) return -7;\n+    if (vRandom.size() != nTried + nNew)\n+        return -7;\n \n-    for (std::map<int, CAddrInfo>::iterator it = mapInfo.begin(); it != mapInfo.end(); it++)\n-    {\n+    for (std::map<int, CAddrInfo>::iterator it = mapInfo.begin(); it != mapInfo.end(); it++) {\n         int n = (*it).first;\n-        CAddrInfo &info = (*it).second;\n-        if (info.fInTried)\n-        {\n-\n-            if (!info.nLastSuccess) return -1;\n-            if (info.nRefCount) return -2;\n+        CAddrInfo& info = (*it).second;\n+        if (info.fInTried) {\n+            if (!info.nLastSuccess)\n+                return -1;\n+            if (info.nRefCount)\n+                return -2;\n             setTried.insert(n);\n         } else {\n-            if (info.nRefCount < 0 || info.nRefCount > ADDRMAN_NEW_BUCKETS_PER_ADDRESS) return -3;\n-            if (!info.nRefCount) return -4;\n+            if (info.nRefCount < 0 || info.nRefCount > ADDRMAN_NEW_BUCKETS_PER_ADDRESS)\n+                return -3;\n+            if (!info.nRefCount)\n+                return -4;\n             mapNew[n] = info.nRefCount;\n         }\n-        if (mapAddr[info] != n) return -5;\n-        if (info.nRandomPos<0 || info.nRandomPos>=vRandom.size() || vRandom[info.nRandomPos] != n) return -14;\n-        if (info.nLastTry < 0) return -6;\n-        if (info.nLastSuccess < 0) return -8;\n+        if (mapAddr[info] != n)\n+            return -5;\n+        if (info.nRandomPos < 0 || info.nRandomPos >= vRandom.size() || vRandom[info.nRandomPos] != n)\n+            return -14;\n+        if (info.nLastTry < 0)\n+            return -6;\n+        if (info.nLastSuccess < 0)\n+            return -8;\n     }\n \n-    if (setTried.size() != nTried) return -9;\n-    if (mapNew.size() != nNew) return -10;\n+    if (setTried.size() != nTried)\n+        return -9;\n+    if (mapNew.size() != nNew)\n+        return -10;\n \n-    for (int n=0; n<vvTried.size(); n++)\n-    {\n-        std::vector<int> &vTried = vvTried[n];\n-        for (std::vector<int>::iterator it = vTried.begin(); it != vTried.end(); it++)\n-        {\n-            if (!setTried.count(*it)) return -11;\n+    for (int n = 0; n < vvTried.size(); n++) {\n+        std::vector<int>& vTried = vvTried[n];\n+        for (std::vector<int>::iterator it = vTried.begin(); it != vTried.end(); it++) {\n+            if (!setTried.count(*it))\n+                return -11;\n             setTried.erase(*it);\n         }\n     }\n \n-    for (int n=0; n<vvNew.size(); n++)\n-    {\n-        std::set<int> &vNew = vvNew[n];\n-        for (std::set<int>::iterator it = vNew.begin(); it != vNew.end(); it++)\n-        {\n-            if (!mapNew.count(*it)) return -12;\n+    for (int n = 0; n < vvNew.size(); n++) {\n+        std::set<int>& vNew = vvNew[n];\n+        for (std::set<int>::iterator it = vNew.begin(); it != vNew.end(); it++) {\n+            if (!mapNew.count(*it))\n+                return -12;\n             if (--mapNew[*it] == 0)\n                 mapNew.erase(*it);\n         }\n     }\n \n-    if (setTried.size()) return -13;\n-    if (mapNew.size()) return -15;\n+    if (setTried.size())\n+        return -13;\n+    if (mapNew.size())\n+        return -15;\n \n     return 0;\n }\n #endif\n \n-void CAddrMan::GetAddr_(std::vector<CAddress> &vAddr)\n+void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr)\n {\n     unsigned int nNodes = ADDRMAN_GETADDR_MAX_PCT * vRandom.size() / 100;\n     if (nNodes > ADDRMAN_GETADDR_MAX)\n         nNodes = ADDRMAN_GETADDR_MAX;\n \n     // gather a list of random nodes, skipping those of low quality\n-    for (unsigned int n = 0; n < vRandom.size(); n++)\n-    {\n+    for (unsigned int n = 0; n < vRandom.size(); n++) {\n         if (vAddr.size() >= nNodes)\n             break;\n \n@@ -512,15 +507,15 @@ void CAddrMan::GetAddr_(std::vector<CAddress> &vAddr)\n     }\n }\n \n-void CAddrMan::Connected_(const CService &addr, int64_t nTime)\n+void CAddrMan::Connected_(const CService& addr, int64_t nTime)\n {\n-    CAddrInfo *pinfo = Find(addr);\n+    CAddrInfo* pinfo = Find(addr);\n \n     // if not found, bail out\n     if (!pinfo)\n         return;\n \n-    CAddrInfo &info = *pinfo;\n+    CAddrInfo& info = *pinfo;\n \n     // check whether we are talking about the exact same CService (including same port)\n     if (info != addr)"
      },
      {
        "sha": "dfe26f1b1e222196f6a76391bbb783572a51eabb",
        "filename": "src/allocators.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/allocators.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/allocators.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.cpp?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -37,13 +37,13 @@ static inline size_t GetSystemPageSize()\n     page_size = sSysInfo.dwPageSize;\n #elif defined(PAGESIZE) // defined in limits.h\n     page_size = PAGESIZE;\n-#else // assume some POSIX OS\n+#else                   // assume some POSIX OS\n     page_size = sysconf(_SC_PAGESIZE);\n #endif\n     return page_size;\n }\n \n-bool MemoryPageLocker::Lock(const void *addr, size_t len)\n+bool MemoryPageLocker::Lock(const void* addr, size_t len)\n {\n #ifdef WIN32\n     return VirtualLock(const_cast<void*>(addr), len) != 0;\n@@ -52,7 +52,7 @@ bool MemoryPageLocker::Lock(const void *addr, size_t len)\n #endif\n }\n \n-bool MemoryPageLocker::Unlock(const void *addr, size_t len)\n+bool MemoryPageLocker::Unlock(const void* addr, size_t len)\n {\n #ifdef WIN32\n     return VirtualUnlock(const_cast<void*>(addr), len) != 0;\n@@ -64,4 +64,3 @@ bool MemoryPageLocker::Unlock(const void *addr, size_t len)\n LockedPageManager::LockedPageManager() : LockedPageManagerBase<MemoryPageLocker>(GetSystemPageSize())\n {\n }\n-"
      },
      {
        "sha": "6b69e7ae69cf28f658588ea81011d69ff351d312",
        "filename": "src/allocators.h",
        "status": "modified",
        "additions": 49,
        "deletions": 41,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/allocators.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/allocators.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -26,14 +26,14 @@\n  * small objects that span up to a few pages, mostly smaller than a page. To support large allocations,\n  * something like an interval tree would be the preferred data structure.\n  */\n-template <class Locker> class LockedPageManagerBase\n+template <class Locker>\n+class LockedPageManagerBase\n {\n public:\n-    LockedPageManagerBase(size_t page_size):\n-        page_size(page_size)\n+    LockedPageManagerBase(size_t page_size) : page_size(page_size)\n     {\n         // Determine bitmask for extracting page from address\n-        assert(!(page_size & (page_size-1))); // size must be power of two\n+        assert(!(page_size & (page_size - 1))); // size must be power of two\n         page_mask = ~(page_size - 1);\n     }\n \n@@ -44,43 +44,42 @@ template <class Locker> class LockedPageManagerBase\n \n \n     // For all pages in affected range, increase lock count\n-    void LockRange(void *p, size_t size)\n+    void LockRange(void* p, size_t size)\n     {\n         boost::mutex::scoped_lock lock(mutex);\n-        if(!size) return;\n+        if (!size)\n+            return;\n         const size_t base_addr = reinterpret_cast<size_t>(p);\n         const size_t start_page = base_addr & page_mask;\n         const size_t end_page = (base_addr + size - 1) & page_mask;\n-        for(size_t page = start_page; page <= end_page; page += page_size)\n-        {\n+        for (size_t page = start_page; page <= end_page; page += page_size) {\n             Histogram::iterator it = histogram.find(page);\n-            if(it == histogram.end()) // Newly locked page\n+            if (it == histogram.end()) // Newly locked page\n             {\n                 locker.Lock(reinterpret_cast<void*>(page), page_size);\n                 histogram.insert(std::make_pair(page, 1));\n-            }\n-            else // Page was already locked; increase counter\n+            } else // Page was already locked; increase counter\n             {\n                 it->second += 1;\n             }\n         }\n     }\n \n     // For all pages in affected range, decrease lock count\n-    void UnlockRange(void *p, size_t size)\n+    void UnlockRange(void* p, size_t size)\n     {\n         boost::mutex::scoped_lock lock(mutex);\n-        if(!size) return;\n+        if (!size)\n+            return;\n         const size_t base_addr = reinterpret_cast<size_t>(p);\n         const size_t start_page = base_addr & page_mask;\n         const size_t end_page = (base_addr + size - 1) & page_mask;\n-        for(size_t page = start_page; page <= end_page; page += page_size)\n-        {\n+        for (size_t page = start_page; page <= end_page; page += page_size) {\n             Histogram::iterator it = histogram.find(page);\n             assert(it != histogram.end()); // Cannot unlock an area that was not locked\n             // Decrease counter for page, when it is zero, the page will be unlocked\n             it->second -= 1;\n-            if(it->second == 0) // Nothing on the page anymore that keeps it locked\n+            if (it->second == 0) // Nothing on the page anymore that keeps it locked\n             {\n                 // Unlock page and remove the count from histogram\n                 locker.Unlock(reinterpret_cast<void*>(page), page_size);\n@@ -101,7 +100,7 @@ template <class Locker> class LockedPageManagerBase\n     boost::mutex mutex;\n     size_t page_size, page_mask;\n     // map of page base address to lock count\n-    typedef std::map<size_t,int> Histogram;\n+    typedef std::map<size_t, int> Histogram;\n     Histogram histogram;\n };\n \n@@ -116,11 +115,11 @@ class MemoryPageLocker\n     /** Lock memory pages.\n      * addr and len must be a multiple of the system page size\n      */\n-    bool Lock(const void *addr, size_t len);\n+    bool Lock(const void* addr, size_t len);\n     /** Unlock memory pages.\n      * addr and len must be a multiple of the system page size\n      */\n-    bool Unlock(const void *addr, size_t len);\n+    bool Unlock(const void* addr, size_t len);\n };\n \n /**\n@@ -134,10 +133,10 @@ class MemoryPageLocker\n  * secure_allocator are created. So instead of having LockedPageManager also be\n  * static-initialized, it is created on demand.\n  */\n-class LockedPageManager: public LockedPageManagerBase<MemoryPageLocker>\n+class LockedPageManager : public LockedPageManagerBase<MemoryPageLocker>\n {\n public:\n-    static LockedPageManager& Instance() \n+    static LockedPageManager& Instance()\n     {\n         boost::call_once(LockedPageManager::CreateInstance, LockedPageManager::init_flag);\n         return *LockedPageManager::_instance;\n@@ -165,11 +164,15 @@ class LockedPageManager: public LockedPageManagerBase<MemoryPageLocker>\n // Functions for directly locking/unlocking memory objects.\n // Intended for non-dynamically allocated structures.\n //\n-template<typename T> void LockObject(const T &t) {\n+template <typename T>\n+void LockObject(const T& t)\n+{\n     LockedPageManager::Instance().LockRange((void*)(&t), sizeof(T));\n }\n \n-template<typename T> void UnlockObject(const T &t) {\n+template <typename T>\n+void UnlockObject(const T& t)\n+{\n     OPENSSL_cleanse((void*)(&t), sizeof(T));\n     LockedPageManager::Instance().UnlockRange((void*)(&t), sizeof(T));\n }\n@@ -178,13 +181,12 @@ template<typename T> void UnlockObject(const T &t) {\n // Allocator that locks its contents from being paged\n // out of memory and clears its contents before deletion.\n //\n-template<typename T>\n-struct secure_allocator : public std::allocator<T>\n-{\n+template <typename T>\n+struct secure_allocator : public std::allocator<T> {\n     // MSVC8 default copy constructor is broken\n     typedef std::allocator<T> base;\n     typedef typename base::size_type size_type;\n-    typedef typename base::difference_type  difference_type;\n+    typedef typename base::difference_type difference_type;\n     typedef typename base::pointer pointer;\n     typedef typename base::const_pointer const_pointer;\n     typedef typename base::reference reference;\n@@ -193,14 +195,18 @@ struct secure_allocator : public std::allocator<T>\n     secure_allocator() throw() {}\n     secure_allocator(const secure_allocator& a) throw() : base(a) {}\n     template <typename U>\n-    secure_allocator(const secure_allocator<U>& a) throw() : base(a) {}\n+    secure_allocator(const secure_allocator<U>& a) throw() : base(a)\n+    {\n+    }\n     ~secure_allocator() throw() {}\n-    template<typename _Other> struct rebind\n-    { typedef secure_allocator<_Other> other; };\n+    template <typename _Other>\n+    struct rebind {\n+        typedef secure_allocator<_Other> other;\n+    };\n \n-    T* allocate(std::size_t n, const void *hint = 0)\n+    T* allocate(std::size_t n, const void* hint = 0)\n     {\n-        T *p;\n+        T* p;\n         p = std::allocator<T>::allocate(n, hint);\n         if (p != NULL)\n             LockedPageManager::Instance().LockRange(p, sizeof(T) * n);\n@@ -209,8 +215,7 @@ struct secure_allocator : public std::allocator<T>\n \n     void deallocate(T* p, std::size_t n)\n     {\n-        if (p != NULL)\n-        {\n+        if (p != NULL) {\n             OPENSSL_cleanse(p, sizeof(T) * n);\n             LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n         }\n@@ -222,13 +227,12 @@ struct secure_allocator : public std::allocator<T>\n //\n // Allocator that clears its contents before deletion.\n //\n-template<typename T>\n-struct zero_after_free_allocator : public std::allocator<T>\n-{\n+template <typename T>\n+struct zero_after_free_allocator : public std::allocator<T> {\n     // MSVC8 default copy constructor is broken\n     typedef std::allocator<T> base;\n     typedef typename base::size_type size_type;\n-    typedef typename base::difference_type  difference_type;\n+    typedef typename base::difference_type difference_type;\n     typedef typename base::pointer pointer;\n     typedef typename base::const_pointer const_pointer;\n     typedef typename base::reference reference;\n@@ -237,10 +241,14 @@ struct zero_after_free_allocator : public std::allocator<T>\n     zero_after_free_allocator() throw() {}\n     zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}\n     template <typename U>\n-    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a) {}\n+    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a)\n+    {\n+    }\n     ~zero_after_free_allocator() throw() {}\n-    template<typename _Other> struct rebind\n-    { typedef zero_after_free_allocator<_Other> other; };\n+    template <typename _Other>\n+    struct rebind {\n+        typedef zero_after_free_allocator<_Other> other;\n+    };\n \n     void deallocate(T* p, std::size_t n)\n     {"
      },
      {
        "sha": "9750f0a161d9e4221c7dfd870ea12dd8ee3cf605",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 80,
        "deletions": 49,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -18,7 +18,8 @@\n /* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n \n-bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n+{\n     // Skip leading spaces.\n     while (*psz && isspace(*psz))\n         psz++;\n@@ -33,7 +34,7 @@ bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n     // Process the characters.\n     while (*psz && !isspace(*psz)) {\n         // Decode base58 character\n-        const char *ch = strchr(pszBase58, *psz);\n+        const char* ch = strchr(pszBase58, *psz);\n         if (ch == NULL)\n             return false;\n         // Apply \"b256 = b256 * 58 + ch\".\n@@ -59,11 +60,12 @@ bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n     vch.reserve(zeroes + (b256.end() - it));\n     vch.assign(zeroes, 0x00);\n     while (it != b256.end())\n-      vch.push_back(*(it++));\n+        vch.push_back(*(it++));\n     return true;\n }\n \n-std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend) {\n+std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n+{\n     // Skip & count leading zeroes.\n     int zeroes = 0;\n     while (pbegin != pend && *pbegin == 0) {\n@@ -97,61 +99,68 @@ std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n     return str;\n }\n \n-std::string EncodeBase58(const std::vector<unsigned char>& vch) {\n+std::string EncodeBase58(const std::vector<unsigned char>& vch)\n+{\n     return EncodeBase58(&vch[0], &vch[0] + vch.size());\n }\n \n-bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet) {\n+bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)\n+{\n     return DecodeBase58(str.c_str(), vchRet);\n }\n \n-std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn) {\n+std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n+{\n     // add 4-byte hash check to the end\n     std::vector<unsigned char> vch(vchIn);\n     uint256 hash = Hash(vch.begin(), vch.end());\n     vch.insert(vch.end(), (unsigned char*)&hash, (unsigned char*)&hash + 4);\n     return EncodeBase58(vch);\n }\n \n-bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet) {\n+bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)\n+{\n     if (!DecodeBase58(psz, vchRet) ||\n-        (vchRet.size() < 4))\n-    {\n+        (vchRet.size() < 4)) {\n         vchRet.clear();\n         return false;\n     }\n     // re-calculate the checksum, insure it matches the included 4-byte checksum\n-    uint256 hash = Hash(vchRet.begin(), vchRet.end()-4);\n-    if (memcmp(&hash, &vchRet.end()[-4], 4) != 0)\n-    {\n+    uint256 hash = Hash(vchRet.begin(), vchRet.end() - 4);\n+    if (memcmp(&hash, &vchRet.end()[-4], 4) != 0) {\n         vchRet.clear();\n         return false;\n     }\n-    vchRet.resize(vchRet.size()-4);\n+    vchRet.resize(vchRet.size() - 4);\n     return true;\n }\n \n-bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet) {\n+bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)\n+{\n     return DecodeBase58Check(str.c_str(), vchRet);\n }\n \n-CBase58Data::CBase58Data() {\n+CBase58Data::CBase58Data()\n+{\n     vchVersion.clear();\n     vchData.clear();\n }\n \n-void CBase58Data::SetData(const std::vector<unsigned char> &vchVersionIn, const void* pdata, size_t nSize) {\n+void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const void* pdata, size_t nSize)\n+{\n     vchVersion = vchVersionIn;\n     vchData.resize(nSize);\n     if (!vchData.empty())\n         memcpy(&vchData[0], pdata, nSize);\n }\n \n-void CBase58Data::SetData(const std::vector<unsigned char> &vchVersionIn, const unsigned char *pbegin, const unsigned char *pend) {\n+void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const unsigned char* pbegin, const unsigned char* pend)\n+{\n     SetData(vchVersionIn, (void*)pbegin, pend - pbegin);\n }\n \n-bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes) {\n+bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)\n+{\n     std::vector<unsigned char> vchTemp;\n     bool rc58 = DecodeBase58Check(psz, vchTemp);\n     if ((!rc58) || (vchTemp.size() < nVersionBytes)) {\n@@ -167,65 +176,80 @@ bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes) {\n     return true;\n }\n \n-bool CBase58Data::SetString(const std::string& str) {\n+bool CBase58Data::SetString(const std::string& str)\n+{\n     return SetString(str.c_str());\n }\n \n-std::string CBase58Data::ToString() const {\n+std::string CBase58Data::ToString() const\n+{\n     std::vector<unsigned char> vch = vchVersion;\n     vch.insert(vch.end(), vchData.begin(), vchData.end());\n     return EncodeBase58Check(vch);\n }\n \n-int CBase58Data::CompareTo(const CBase58Data& b58) const {\n-    if (vchVersion < b58.vchVersion) return -1;\n-    if (vchVersion > b58.vchVersion) return  1;\n-    if (vchData < b58.vchData)   return -1;\n-    if (vchData > b58.vchData)   return  1;\n+int CBase58Data::CompareTo(const CBase58Data& b58) const\n+{\n+    if (vchVersion < b58.vchVersion)\n+        return -1;\n+    if (vchVersion > b58.vchVersion)\n+        return 1;\n+    if (vchData < b58.vchData)\n+        return -1;\n+    if (vchData > b58.vchData)\n+        return 1;\n     return 0;\n }\n \n-namespace {\n+namespace\n+{\n+class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+{\n+private:\n+    CBitcoinAddress* addr;\n \n-    class CBitcoinAddressVisitor : public boost::static_visitor<bool> {\n-    private:\n-        CBitcoinAddress *addr;\n-    public:\n-        CBitcoinAddressVisitor(CBitcoinAddress *addrIn) : addr(addrIn) { }\n+public:\n+    CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n \n-        bool operator()(const CKeyID &id) const { return addr->Set(id); }\n-        bool operator()(const CScriptID &id) const { return addr->Set(id); }\n-        bool operator()(const CNoDestination &no) const { return false; }\n-    };\n+    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n+    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n+    bool operator()(const CNoDestination& no) const { return false; }\n+};\n \n } // anon namespace\n \n-bool CBitcoinAddress::Set(const CKeyID &id) {\n+bool CBitcoinAddress::Set(const CKeyID& id)\n+{\n     SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n     return true;\n }\n \n-bool CBitcoinAddress::Set(const CScriptID &id) {\n+bool CBitcoinAddress::Set(const CScriptID& id)\n+{\n     SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n     return true;\n }\n \n-bool CBitcoinAddress::Set(const CTxDestination &dest) {\n+bool CBitcoinAddress::Set(const CTxDestination& dest)\n+{\n     return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n }\n \n-bool CBitcoinAddress::IsValid() const {\n+bool CBitcoinAddress::IsValid() const\n+{\n     return IsValid(Params());\n }\n \n-bool CBitcoinAddress::IsValid(const CChainParams &params) const {\n+bool CBitcoinAddress::IsValid(const CChainParams& params) const\n+{\n     bool fCorrectSize = vchData.size() == 20;\n     bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n                          vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n     return fCorrectSize && fKnownVersion;\n }\n \n-CTxDestination CBitcoinAddress::Get() const {\n+CTxDestination CBitcoinAddress::Get() const\n+{\n     if (!IsValid())\n         return CNoDestination();\n     uint160 id;\n@@ -238,7 +262,8 @@ CTxDestination CBitcoinAddress::Get() const {\n         return CNoDestination();\n }\n \n-bool CBitcoinAddress::GetKeyID(CKeyID &keyID) const {\n+bool CBitcoinAddress::GetKeyID(CKeyID& keyID) const\n+{\n     if (!IsValid() || vchVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n         return false;\n     uint160 id;\n@@ -247,33 +272,39 @@ bool CBitcoinAddress::GetKeyID(CKeyID &keyID) const {\n     return true;\n }\n \n-bool CBitcoinAddress::IsScript() const {\n+bool CBitcoinAddress::IsScript() const\n+{\n     return IsValid() && vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n }\n \n-void CBitcoinSecret::SetKey(const CKey& vchSecret) {\n+void CBitcoinSecret::SetKey(const CKey& vchSecret)\n+{\n     assert(vchSecret.IsValid());\n     SetData(Params().Base58Prefix(CChainParams::SECRET_KEY), vchSecret.begin(), vchSecret.size());\n     if (vchSecret.IsCompressed())\n         vchData.push_back(1);\n }\n \n-CKey CBitcoinSecret::GetKey() {\n+CKey CBitcoinSecret::GetKey()\n+{\n     CKey ret;\n     ret.Set(&vchData[0], &vchData[32], vchData.size() > 32 && vchData[32] == 1);\n     return ret;\n }\n \n-bool CBitcoinSecret::IsValid() const {\n+bool CBitcoinSecret::IsValid() const\n+{\n     bool fExpectedFormat = vchData.size() == 32 || (vchData.size() == 33 && vchData[32] == 1);\n     bool fCorrectVersion = vchVersion == Params().Base58Prefix(CChainParams::SECRET_KEY);\n     return fExpectedFormat && fCorrectVersion;\n }\n \n-bool CBitcoinSecret::SetString(const char* pszSecret) {\n+bool CBitcoinSecret::SetString(const char* pszSecret)\n+{\n     return CBase58Data::SetString(pszSecret) && IsValid();\n }\n \n-bool CBitcoinSecret::SetString(const std::string& strSecret) {\n+bool CBitcoinSecret::SetString(const std::string& strSecret)\n+{\n     return SetString(strSecret.c_str());\n }"
      },
      {
        "sha": "98bb5b855fe3a10ca351dd2a7ab4a30417f81f66",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 23,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -17,9 +17,11 @@ using namespace boost::assign;\n // Main network\n //\n \n-class CBaseMainParams : public CBaseChainParams {\n+class CBaseMainParams : public CBaseChainParams\n+{\n public:\n-    CBaseMainParams() {\n+    CBaseMainParams()\n+    {\n         networkID = CBaseChainParams::MAIN;\n         nRPCPort = 8332;\n     }\n@@ -29,9 +31,11 @@ static CBaseMainParams mainParams;\n //\n // Testnet (v3)\n //\n-class CBaseTestNetParams : public CBaseMainParams {\n+class CBaseTestNetParams : public CBaseMainParams\n+{\n public:\n-    CBaseTestNetParams() {\n+    CBaseTestNetParams()\n+    {\n         networkID = CBaseChainParams::TESTNET;\n         nRPCPort = 18332;\n         strDataDir = \"testnet3\";\n@@ -42,40 +46,45 @@ static CBaseTestNetParams testNetParams;\n //\n // Regression test\n //\n-class CBaseRegTestParams : public CBaseTestNetParams {\n+class CBaseRegTestParams : public CBaseTestNetParams\n+{\n public:\n-    CBaseRegTestParams() {\n+    CBaseRegTestParams()\n+    {\n         networkID = CBaseChainParams::REGTEST;\n         strDataDir = \"regtest\";\n     }\n };\n static CBaseRegTestParams regTestParams;\n \n-static CBaseChainParams *pCurrentBaseParams = 0;\n+static CBaseChainParams* pCurrentBaseParams = 0;\n \n-const CBaseChainParams &BaseParams() {\n+const CBaseChainParams& BaseParams()\n+{\n     assert(pCurrentBaseParams);\n     return *pCurrentBaseParams;\n }\n \n-void SelectBaseParams(CBaseChainParams::Network network) {\n+void SelectBaseParams(CBaseChainParams::Network network)\n+{\n     switch (network) {\n-        case CBaseChainParams::MAIN:\n-            pCurrentBaseParams = &mainParams;\n-            break;\n-        case CBaseChainParams::TESTNET:\n-            pCurrentBaseParams = &testNetParams;\n-            break;\n-        case CBaseChainParams::REGTEST:\n-            pCurrentBaseParams = &regTestParams;\n-            break;\n-        default:\n-            assert(false && \"Unimplemented network\");\n-            return;\n+    case CBaseChainParams::MAIN:\n+        pCurrentBaseParams = &mainParams;\n+        break;\n+    case CBaseChainParams::TESTNET:\n+        pCurrentBaseParams = &testNetParams;\n+        break;\n+    case CBaseChainParams::REGTEST:\n+        pCurrentBaseParams = &regTestParams;\n+        break;\n+    default:\n+        assert(false && \"Unimplemented network\");\n+        return;\n     }\n }\n \n-bool SelectBaseParamsFromCommandLine() {\n+bool SelectBaseParamsFromCommandLine()\n+{\n     bool fRegTest = GetBoolArg(\"-regtest\", false);\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n \n@@ -93,6 +102,7 @@ bool SelectBaseParamsFromCommandLine() {\n     return true;\n }\n \n-bool AreBaseParamsConfigured() {\n+bool AreBaseParamsConfigured()\n+{\n     return pCurrentBaseParams != NULL;\n }"
      },
      {
        "sha": "c054f03f17398e4c8ecf6c69000c7925000b2cef",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -26,6 +26,7 @@ class CBaseChainParams\n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n     Network NetworkID() const { return networkID; }\n+\n protected:\n     CBaseChainParams() {}\n \n@@ -38,7 +39,7 @@ class CBaseChainParams\n  * Return the currently selected parameters. This won't change after app startup\n  * outside of the unit tests.\n  */\n-const CBaseChainParams &BaseParams();\n+const CBaseChainParams& BaseParams();\n \n /** Sets the params returned by Params() to those for the given network. */\n void SelectBaseParams(CBaseChainParams::Network network);"
      },
      {
        "sha": "fca046559ae923b6ada8ff085849edf81f03621d",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -13,20 +13,20 @@ class uint256;\n /** Block-chain checkpoints are compiled-in sanity checks.\n  * They are updated every release or three.\n  */\n-namespace Checkpoints {\n+namespace Checkpoints\n+{\n+// Returns true if block passes checkpoint checks\n+bool CheckBlock(int nHeight, const uint256& hash);\n \n-    // Returns true if block passes checkpoint checks\n-    bool CheckBlock(int nHeight, const uint256& hash);\n+// Return conservative estimate of total number of blocks, 0 if unknown\n+int GetTotalBlocksEstimate();\n \n-    // Return conservative estimate of total number of blocks, 0 if unknown\n-    int GetTotalBlocksEstimate();\n+// Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n+CBlockIndex* GetLastCheckpoint();\n \n-    // Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n-    CBlockIndex* GetLastCheckpoint();\n+double GuessVerificationProgress(CBlockIndex* pindex, bool fSigchecks = true);\n \n-    double GuessVerificationProgress(CBlockIndex *pindex, bool fSigchecks = true);\n-\n-    extern bool fEnabled;\n+extern bool fEnabled;\n \n } //namespace Checkpoints\n "
      },
      {
        "sha": "b2a713e64671dfbbfd787b182dfbc5aee74d274f",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 36,
        "deletions": 23,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -13,7 +13,8 @@\n #include <boost/thread/locks.hpp>\n #include <boost/thread/mutex.hpp>\n \n-template<typename T> class CCheckQueueControl;\n+template <typename T>\n+class CCheckQueueControl;\n \n /** Queue for verifications that have to be performed.\n   * The verifications are represented by a type T, which must provide an\n@@ -24,7 +25,9 @@ template<typename T> class CCheckQueueControl;\n   * the master is done adding work, it temporarily joins the worker pool\n   * as an N'th worker, until all jobs are done.\n   */\n-template<typename T> class CCheckQueue {\n+template <typename T>\n+class CCheckQueue\n+{\n private:\n     // Mutex to protect the inner state\n     boost::mutex mutex;\n@@ -60,8 +63,9 @@ template<typename T> class CCheckQueue {\n     unsigned int nBatchSize;\n \n     // Internal function that does bulk of the verification work.\n-    bool Loop(bool fMaster = false) {\n-        boost::condition_variable &cond = fMaster ? condMaster : condWorker;\n+    bool Loop(bool fMaster = false)\n+    {\n+        boost::condition_variable& cond = fMaster ? condMaster : condWorker;\n         std::vector<T> vChecks;\n         vChecks.reserve(nBatchSize);\n         unsigned int nNow = 0;\n@@ -103,41 +107,43 @@ template<typename T> class CCheckQueue {\n                 nNow = std::max(1U, std::min(nBatchSize, (unsigned int)queue.size() / (nTotal + nIdle + 1)));\n                 vChecks.resize(nNow);\n                 for (unsigned int i = 0; i < nNow; i++) {\n-                     // We want the lock on the mutex to be as short as possible, so swap jobs from the global\n-                     // queue to the local batch vector instead of copying.\n-                     vChecks[i].swap(queue.back());\n-                     queue.pop_back();\n+                    // We want the lock on the mutex to be as short as possible, so swap jobs from the global\n+                    // queue to the local batch vector instead of copying.\n+                    vChecks[i].swap(queue.back());\n+                    queue.pop_back();\n                 }\n                 // Check whether we need to do work at all\n                 fOk = fAllOk;\n             }\n             // execute work\n-            BOOST_FOREACH(T &check, vChecks)\n+            BOOST_FOREACH (T& check, vChecks)\n                 if (fOk)\n                     fOk = check();\n             vChecks.clear();\n-        } while(true);\n+        } while (true);\n     }\n \n public:\n     // Create a new check queue\n-    CCheckQueue(unsigned int nBatchSizeIn) :\n-        nIdle(0), nTotal(0), fAllOk(true), nTodo(0), fQuit(false), nBatchSize(nBatchSizeIn) {}\n+    CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), fQuit(false), nBatchSize(nBatchSizeIn) {}\n \n     // Worker thread\n-    void Thread() {\n+    void Thread()\n+    {\n         Loop();\n     }\n \n     // Wait until execution finishes, and return whether all evaluations where succesful.\n-    bool Wait() {\n+    bool Wait()\n+    {\n         return Loop(true);\n     }\n \n     // Add a batch of checks to the queue\n-    void Add(std::vector<T> &vChecks) {\n+    void Add(std::vector<T>& vChecks)\n+    {\n         boost::unique_lock<boost::mutex> lock(mutex);\n-        BOOST_FOREACH(T &check, vChecks) {\n+        BOOST_FOREACH (T& check, vChecks) {\n             queue.push_back(T());\n             check.swap(queue.back());\n         }\n@@ -148,7 +154,8 @@ template<typename T> class CCheckQueue {\n             condWorker.notify_all();\n     }\n \n-    ~CCheckQueue() {\n+    ~CCheckQueue()\n+    {\n     }\n \n     friend class CCheckQueueControl<T>;\n@@ -157,13 +164,16 @@ template<typename T> class CCheckQueue {\n /** RAII-style controller object for a CCheckQueue that guarantees the passed\n  *  queue is finished before continuing.\n  */\n-template<typename T> class CCheckQueueControl {\n+template <typename T>\n+class CCheckQueueControl\n+{\n private:\n-    CCheckQueue<T> *pqueue;\n+    CCheckQueue<T>* pqueue;\n     bool fDone;\n \n public:\n-    CCheckQueueControl(CCheckQueue<T> *pqueueIn) : pqueue(pqueueIn), fDone(false) {\n+    CCheckQueueControl(CCheckQueue<T>* pqueueIn) : pqueue(pqueueIn), fDone(false)\n+    {\n         // passed queue is supposed to be unused, or NULL\n         if (pqueue != NULL) {\n             assert(pqueue->nTotal == pqueue->nIdle);\n@@ -172,20 +182,23 @@ template<typename T> class CCheckQueueControl {\n         }\n     }\n \n-    bool Wait() {\n+    bool Wait()\n+    {\n         if (pqueue == NULL)\n             return true;\n         bool fRet = pqueue->Wait();\n         fDone = true;\n         return fRet;\n     }\n \n-    void Add(std::vector<T> &vChecks) {\n+    void Add(std::vector<T>& vChecks)\n+    {\n         if (pqueue != NULL)\n             pqueue->Add(vChecks);\n     }\n \n-    ~CCheckQueueControl() {\n+    ~CCheckQueueControl()\n+    {\n         if (!fDone)\n             Wait();\n     }"
      },
      {
        "sha": "cd7ceb78f0eb8c7b3709506bded7e984eb87a56a",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -13,13 +13,13 @@\n //\n \n // These need to be macros, as version.cpp's and bitcoin*-res.rc's voodoo requires it\n-#define CLIENT_VERSION_MAJOR       0\n-#define CLIENT_VERSION_MINOR       9\n-#define CLIENT_VERSION_REVISION    99\n-#define CLIENT_VERSION_BUILD       0\n+#define CLIENT_VERSION_MAJOR 0\n+#define CLIENT_VERSION_MINOR 9\n+#define CLIENT_VERSION_REVISION 99\n+#define CLIENT_VERSION_BUILD 0\n \n // Set to true for release, false for prerelease or test build\n-#define CLIENT_VERSION_IS_RELEASE  false\n+#define CLIENT_VERSION_IS_RELEASE false\n \n // Copyright year (2009-this)\n // Todo: update this when changing our copyright comments in the source\n@@ -33,6 +33,6 @@\n #define DO_STRINGIZE(X) #X\n \n // Copyright string used in Windows .rc files\n-#define COPYRIGHT_STR          \"2009-\" STRINGIZE(COPYRIGHT_YEAR) \" The Bitcoin Core Developers\"\n+#define COPYRIGHT_STR \"2009-\" STRINGIZE(COPYRIGHT_YEAR) \" The Bitcoin Core Developers\"\n \n #endif // CLIENTVERSION_H"
      },
      {
        "sha": "033092c01954ea9a75f9b30deeda1a52055c3926",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -57,7 +57,6 @@ class CCoinControl\n \n private:\n     std::set<COutPoint> setSelected;\n-\n };\n \n #endif // COINCONTROL_H"
      },
      {
        "sha": "12650e459f392bf36f797bbfd6abbf6bc330a68f",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 86,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -30,7 +30,6 @@ using namespace boost;\n unsigned int nWalletDBUpdated;\n \n \n-\n //\n // CDB\n //\n@@ -94,15 +93,15 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     dbenv.set_flags(DB_TXN_WRITE_NOSYNC, 1);\n     dbenv.log_set_config(DB_LOG_AUTO_REMOVE, 1);\n     int ret = dbenv.open(path.string().c_str(),\n-                     DB_CREATE     |\n-                     DB_INIT_LOCK  |\n-                     DB_INIT_LOG   |\n-                     DB_INIT_MPOOL |\n-                     DB_INIT_TXN   |\n-                     DB_THREAD     |\n-                     DB_RECOVER    |\n-                     nEnvFlags,\n-                     S_IRUSR | S_IWUSR);\n+                         DB_CREATE |\n+                             DB_INIT_LOCK |\n+                             DB_INIT_LOG |\n+                             DB_INIT_MPOOL |\n+                             DB_INIT_TXN |\n+                             DB_THREAD |\n+                             DB_RECOVER |\n+                             nEnvFlags,\n+                         S_IRUSR | S_IWUSR);\n     if (ret != 0)\n         return error(\"CDBEnv::Open : Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n \n@@ -121,21 +120,21 @@ void CDBEnv::MakeMock()\n     LogPrint(\"db\", \"CDBEnv::MakeMock\\n\");\n \n     dbenv.set_cachesize(1, 0, 1);\n-    dbenv.set_lg_bsize(10485760*4);\n+    dbenv.set_lg_bsize(10485760 * 4);\n     dbenv.set_lg_max(10485760);\n     dbenv.set_lk_max_locks(10000);\n     dbenv.set_lk_max_objects(10000);\n     dbenv.set_flags(DB_AUTO_COMMIT, 1);\n     dbenv.log_set_config(DB_LOG_IN_MEMORY, 1);\n     int ret = dbenv.open(NULL,\n-                     DB_CREATE     |\n-                     DB_INIT_LOCK  |\n-                     DB_INIT_LOG   |\n-                     DB_INIT_MPOOL |\n-                     DB_INIT_TXN   |\n-                     DB_THREAD     |\n-                     DB_PRIVATE,\n-                     S_IRUSR | S_IWUSR);\n+                         DB_CREATE |\n+                             DB_INIT_LOCK |\n+                             DB_INIT_LOG |\n+                             DB_INIT_MPOOL |\n+                             DB_INIT_TXN |\n+                             DB_THREAD |\n+                             DB_PRIVATE,\n+                         S_IRUSR | S_IWUSR);\n     if (ret > 0)\n         throw runtime_error(strprintf(\"CDBEnv::MakeMock : Error %d opening database environment.\", ret));\n \n@@ -160,30 +159,27 @@ CDBEnv::VerifyResult CDBEnv::Verify(std::string strFile, bool (*recoverFunc)(CDB\n     return (fRecovered ? RECOVER_OK : RECOVER_FAIL);\n }\n \n-bool CDBEnv::Salvage(std::string strFile, bool fAggressive,\n-                     std::vector<CDBEnv::KeyValPair >& vResult)\n+bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::KeyValPair>& vResult)\n {\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n \n     u_int32_t flags = DB_SALVAGE;\n-    if (fAggressive) flags |= DB_AGGRESSIVE;\n+    if (fAggressive)\n+        flags |= DB_AGGRESSIVE;\n \n     stringstream strDump;\n \n     Db db(&dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, &strDump, flags);\n-    if (result == DB_VERIFY_BAD)\n-    {\n+    if (result == DB_VERIFY_BAD) {\n         LogPrintf(\"CDBEnv::Salvage : Database salvage found errors, all data may not be recoverable.\\n\");\n-        if (!fAggressive)\n-        {\n+        if (!fAggressive) {\n             LogPrintf(\"CDBEnv::Salvage : Rerun with aggressive mode to ignore errors and continue.\\n\");\n             return false;\n         }\n     }\n-    if (result != 0 && result != DB_VERIFY_BAD)\n-    {\n+    if (result != 0 && result != DB_VERIFY_BAD) {\n         LogPrintf(\"CDBEnv::Salvage : Database salvage failed with result %d.\\n\", result);\n         return false;\n     }\n@@ -201,13 +197,11 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive,\n         getline(strDump, strLine); // Skip past header\n \n     std::string keyHex, valueHex;\n-    while (!strDump.eof() && keyHex != \"DATA=END\")\n-    {\n+    while (!strDump.eof() && keyHex != \"DATA=END\") {\n         getline(strDump, keyHex);\n-        if (keyHex != \"DATA_END\")\n-        {\n+        if (keyHex != \"DATA_END\") {\n             getline(strDump, valueHex);\n-            vResult.push_back(make_pair(ParseHex(keyHex),ParseHex(valueHex)));\n+            vResult.push_back(make_pair(ParseHex(keyHex), ParseHex(valueHex)));\n         }\n     }\n \n@@ -224,8 +218,7 @@ void CDBEnv::CheckpointLSN(const std::string& strFile)\n }\n \n \n-CDB::CDB(const std::string& strFilename, const char* pszMode) :\n-    pdb(NULL), activeTxn(NULL)\n+CDB::CDB(const std::string& strFilename, const char* pszMode) : pdb(NULL), activeTxn(NULL)\n {\n     int ret;\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n@@ -245,37 +238,33 @@ CDB::CDB(const std::string& strFilename, const char* pszMode) :\n         strFile = strFilename;\n         ++bitdb.mapFileUseCount[strFile];\n         pdb = bitdb.mapDb[strFile];\n-        if (pdb == NULL)\n-        {\n+        if (pdb == NULL) {\n             pdb = new Db(&bitdb.dbenv, 0);\n \n             bool fMockDb = bitdb.IsMock();\n-            if (fMockDb)\n-            {\n-                DbMpoolFile*mpf = pdb->get_mpf();\n+            if (fMockDb) {\n+                DbMpoolFile* mpf = pdb->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n                 if (ret != 0)\n                     throw runtime_error(strprintf(\"CDB : Failed to configure for no temp file backing for database %s\", strFile));\n             }\n \n-            ret = pdb->open(NULL, // Txn pointer\n-                            fMockDb ? NULL : strFile.c_str(), // Filename\n+            ret = pdb->open(NULL,                               // Txn pointer\n+                            fMockDb ? NULL : strFile.c_str(),   // Filename\n                             fMockDb ? strFile.c_str() : \"main\", // Logical db name\n-                            DB_BTREE, // Database type\n-                            nFlags, // Flags\n+                            DB_BTREE,                           // Database type\n+                            nFlags,                             // Flags\n                             0);\n \n-            if (ret != 0)\n-            {\n+            if (ret != 0) {\n                 delete pdb;\n                 pdb = NULL;\n                 --bitdb.mapFileUseCount[strFile];\n                 strFile = \"\";\n                 throw runtime_error(strprintf(\"CDB : Error %d, can't open database %s\", ret, strFile));\n             }\n \n-            if (fCreate && !Exists(string(\"version\")))\n-            {\n+            if (fCreate && !Exists(string(\"version\"))) {\n                 bool fTmp = fReadOnly;\n                 fReadOnly = false;\n                 WriteVersion(CLIENT_VERSION);\n@@ -297,7 +286,7 @@ void CDB::Flush()\n     if (fReadOnly)\n         nMinutes = 1;\n \n-    bitdb.dbenv.txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100)*1024 : 0, nMinutes, 0);\n+    bitdb.dbenv.txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100) * 1024 : 0, nMinutes, 0);\n }\n \n void CDB::Close()\n@@ -321,8 +310,7 @@ void CDBEnv::CloseDb(const string& strFile)\n {\n     {\n         LOCK(cs_db);\n-        if (mapDb[strFile] != NULL)\n-        {\n+        if (mapDb[strFile] != NULL) {\n             // Close the database handle\n             Db* pdb = mapDb[strFile];\n             pdb->close(0);\n@@ -343,12 +331,10 @@ bool CDBEnv::RemoveDb(const string& strFile)\n \n bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n {\n-    while (true)\n-    {\n+    while (true) {\n         {\n             LOCK(bitdb.cs_db);\n-            if (!bitdb.mapFileUseCount.count(strFile) || bitdb.mapFileUseCount[strFile] == 0)\n-            {\n+            if (!bitdb.mapFileUseCount.count(strFile) || bitdb.mapFileUseCount[strFile] == 0) {\n                 // Flush log data to the dat file\n                 bitdb.CloseDb(strFile);\n                 bitdb.CheckpointLSN(strFile);\n@@ -361,41 +347,35 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                     CDB db(strFile.c_str(), \"r\");\n                     Db* pdbCopy = new Db(&bitdb.dbenv, 0);\n \n-                    int ret = pdbCopy->open(NULL,                 // Txn pointer\n-                                            strFileRes.c_str(),   // Filename\n-                                            \"main\",    // Logical db name\n-                                            DB_BTREE,  // Database type\n-                                            DB_CREATE,    // Flags\n+                    int ret = pdbCopy->open(NULL,               // Txn pointer\n+                                            strFileRes.c_str(), // Filename\n+                                            \"main\",             // Logical db name\n+                                            DB_BTREE,           // Database type\n+                                            DB_CREATE,          // Flags\n                                             0);\n-                    if (ret > 0)\n-                    {\n+                    if (ret > 0) {\n                         LogPrintf(\"CDB::Rewrite : Can't create database file %s\\n\", strFileRes);\n                         fSuccess = false;\n                     }\n \n                     Dbc* pcursor = db.GetCursor();\n                     if (pcursor)\n-                        while (fSuccess)\n-                        {\n+                        while (fSuccess) {\n                             CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n                             CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n                             int ret = db.ReadAtCursor(pcursor, ssKey, ssValue, DB_NEXT);\n-                            if (ret == DB_NOTFOUND)\n-                            {\n+                            if (ret == DB_NOTFOUND) {\n                                 pcursor->close();\n                                 break;\n-                            }\n-                            else if (ret != 0)\n-                            {\n+                            } else if (ret != 0) {\n                                 pcursor->close();\n                                 fSuccess = false;\n                                 break;\n                             }\n                             if (pszSkip &&\n                                 strncmp(&ssKey[0], pszSkip, std::min(ssKey.size(), strlen(pszSkip))) == 0)\n                                 continue;\n-                            if (strncmp(&ssKey[0], \"\\x07version\", 8) == 0)\n-                            {\n+                            if (strncmp(&ssKey[0], \"\\x07version\", 8) == 0) {\n                                 // Update version:\n                                 ssValue.clear();\n                                 ssValue << CLIENT_VERSION;\n@@ -406,17 +386,15 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                             if (ret2 > 0)\n                                 fSuccess = false;\n                         }\n-                    if (fSuccess)\n-                    {\n+                    if (fSuccess) {\n                         db.Close();\n                         bitdb.CloseDb(strFile);\n                         if (pdbCopy->close(0))\n                             fSuccess = false;\n                         delete pdbCopy;\n                     }\n                 }\n-                if (fSuccess)\n-                {\n+                if (fSuccess) {\n                     Db dbA(&bitdb.dbenv, 0);\n                     if (dbA.remove(strFile.c_str(), NULL, 0))\n                         fSuccess = false;\n@@ -445,13 +423,11 @@ void CDBEnv::Flush(bool fShutdown)\n     {\n         LOCK(cs_db);\n         map<string, int>::iterator mi = mapFileUseCount.begin();\n-        while (mi != mapFileUseCount.end())\n-        {\n+        while (mi != mapFileUseCount.end()) {\n             string strFile = (*mi).first;\n             int nRefCount = (*mi).second;\n             LogPrint(\"db\", \"CDBEnv::Flush : Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n-            if (nRefCount == 0)\n-            {\n+            if (nRefCount == 0) {\n                 // Move log data to the dat file\n                 CloseDb(strFile);\n                 LogPrint(\"db\", \"CDBEnv::Flush : %s checkpoint\\n\", strFile);\n@@ -461,16 +437,13 @@ void CDBEnv::Flush(bool fShutdown)\n                     dbenv.lsn_reset(strFile.c_str(), 0);\n                 LogPrint(\"db\", \"CDBEnv::Flush : %s closed\\n\", strFile);\n                 mapFileUseCount.erase(mi++);\n-            }\n-            else\n+            } else\n                 mi++;\n         }\n         LogPrint(\"db\", \"CDBEnv::Flush : Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n-        if (fShutdown)\n-        {\n+        if (fShutdown) {\n             char** listp;\n-            if (mapFileUseCount.empty())\n-            {\n+            if (mapFileUseCount.empty()) {\n                 dbenv.log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb)\n@@ -479,4 +452,3 @@ void CDBEnv::Flush(bool fShutdown)\n         }\n     }\n }\n-"
      },
      {
        "sha": "d20239938377864beaf2e307636ff7d5df8d4be2",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 16,
        "deletions": 17,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -54,7 +54,9 @@ class CDBEnv\n      * This must be called BEFORE strFile is opened.\n      * Returns true if strFile is OK.\n      */\n-    enum VerifyResult { VERIFY_OK, RECOVER_OK, RECOVER_FAIL };\n+    enum VerifyResult { VERIFY_OK,\n+                        RECOVER_OK,\n+                        RECOVER_FAIL };\n     VerifyResult Verify(std::string strFile, bool (*recoverFunc)(CDBEnv& dbenv, std::string strFile));\n     /*\n      * Salvage data from a file that Verify says is bad.\n@@ -66,15 +68,15 @@ class CDBEnv\n     typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n     bool Salvage(std::string strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n \n-    bool Open(const boost::filesystem::path &path);\n+    bool Open(const boost::filesystem::path& path);\n     void Close();\n     void Flush(bool fShutdown);\n     void CheckpointLSN(const std::string& strFile);\n \n     void CloseDb(const std::string& strFile);\n     bool RemoveDb(const std::string& strFile);\n \n-    DbTxn *TxnBegin(int flags=DB_TXN_WRITE_NOSYNC)\n+    DbTxn* TxnBegin(int flags = DB_TXN_WRITE_NOSYNC)\n     {\n         DbTxn* ptxn = NULL;\n         int ret = dbenv.txn_begin(NULL, &ptxn, flags);\n@@ -93,10 +95,10 @@ class CDB\n protected:\n     Db* pdb;\n     std::string strFile;\n-    DbTxn *activeTxn;\n+    DbTxn* activeTxn;\n     bool fReadOnly;\n \n-    explicit CDB(const std::string& strFilename, const char* pszMode=\"r+\");\n+    explicit CDB(const std::string& strFilename, const char* pszMode = \"r+\");\n     ~CDB() { Close(); }\n \n public:\n@@ -108,7 +110,7 @@ class CDB\n     void operator=(const CDB&);\n \n protected:\n-    template<typename K, typename T>\n+    template <typename K, typename T>\n     bool Read(const K& key, T& value)\n     {\n         if (!pdb)\n@@ -132,8 +134,7 @@ class CDB\n         try {\n             CDataStream ssValue((char*)datValue.get_data(), (char*)datValue.get_data() + datValue.get_size(), SER_DISK, CLIENT_VERSION);\n             ssValue >> value;\n-        }\n-        catch (const std::exception &) {\n+        } catch (const std::exception&) {\n             return false;\n         }\n \n@@ -143,8 +144,8 @@ class CDB\n         return (ret == 0);\n     }\n \n-    template<typename K, typename T>\n-    bool Write(const K& key, const T& value, bool fOverwrite=true)\n+    template <typename K, typename T>\n+    bool Write(const K& key, const T& value, bool fOverwrite = true)\n     {\n         if (!pdb)\n             return false;\n@@ -172,7 +173,7 @@ class CDB\n         return (ret == 0);\n     }\n \n-    template<typename K>\n+    template <typename K>\n     bool Erase(const K& key)\n     {\n         if (!pdb)\n@@ -194,7 +195,7 @@ class CDB\n         return (ret == 0 || ret == DB_NOTFOUND);\n     }\n \n-    template<typename K>\n+    template <typename K>\n     bool Exists(const K& key)\n     {\n         if (!pdb)\n@@ -225,18 +226,16 @@ class CDB\n         return pcursor;\n     }\n \n-    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue, unsigned int fFlags=DB_NEXT)\n+    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue, unsigned int fFlags = DB_NEXT)\n     {\n         // Read at cursor\n         Dbt datKey;\n-        if (fFlags == DB_SET || fFlags == DB_SET_RANGE || fFlags == DB_GET_BOTH || fFlags == DB_GET_BOTH_RANGE)\n-        {\n+        if (fFlags == DB_SET || fFlags == DB_SET_RANGE || fFlags == DB_GET_BOTH || fFlags == DB_GET_BOTH_RANGE) {\n             datKey.set_data(&ssKey[0]);\n             datKey.set_size(ssKey.size());\n         }\n         Dbt datValue;\n-        if (fFlags == DB_GET_BOTH || fFlags == DB_GET_BOTH_RANGE)\n-        {\n+        if (fFlags == DB_GET_BOTH || fFlags == DB_GET_BOTH_RANGE) {\n             datValue.set_data(&ssValue[0]);\n             datValue.set_size(ssValue.size());\n         }"
      },
      {
        "sha": "4ce4da4c30e1c31ecebad9cbb22a2bc87d369ee8",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 14,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -1,6 +1,6 @@\n #include \"hash.h\"\n \n-inline uint32_t ROTL32 ( uint32_t x, int8_t r )\n+inline uint32_t ROTL32(uint32_t x, int8_t r)\n {\n     return (x << r) | (x >> (32 - r));\n }\n@@ -16,33 +16,37 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n     //----------\n     // body\n-    const uint32_t * blocks = (const uint32_t *)(&vDataToHash[0] + nblocks*4);\n+    const uint32_t* blocks = (const uint32_t*)(&vDataToHash[0] + nblocks * 4);\n \n-    for(int i = -nblocks; i; i++)\n-    {\n+    for (int i = -nblocks; i; i++) {\n         uint32_t k1 = blocks[i];\n \n         k1 *= c1;\n-        k1 = ROTL32(k1,15);\n+        k1 = ROTL32(k1, 15);\n         k1 *= c2;\n \n         h1 ^= k1;\n-        h1 = ROTL32(h1,13); \n-        h1 = h1*5+0xe6546b64;\n+        h1 = ROTL32(h1, 13);\n+        h1 = h1 * 5 + 0xe6546b64;\n     }\n \n     //----------\n     // tail\n-    const uint8_t * tail = (const uint8_t*)(&vDataToHash[0] + nblocks*4);\n+    const uint8_t* tail = (const uint8_t*)(&vDataToHash[0] + nblocks * 4);\n \n     uint32_t k1 = 0;\n \n-    switch(vDataToHash.size() & 3)\n-    {\n-    case 3: k1 ^= tail[2] << 16;\n-    case 2: k1 ^= tail[1] << 8;\n-    case 1: k1 ^= tail[0];\n-            k1 *= c1; k1 = ROTL32(k1,15); k1 *= c2; h1 ^= k1;\n+    switch (vDataToHash.size() & 3) {\n+    case 3:\n+        k1 ^= tail[2] << 16;\n+    case 2:\n+        k1 ^= tail[1] << 8;\n+    case 1:\n+        k1 ^= tail[0];\n+        k1 *= c1;\n+        k1 = ROTL32(k1, 15);\n+        k1 *= c2;\n+        h1 ^= k1;\n     };\n \n     //----------"
      },
      {
        "sha": "aaf8c07e6e86c1b15acf2f1180999996a284b9cb",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -10,8 +10,9 @@\n \n class CWallet;\n \n-namespace boost {\n-    class thread_group;\n+namespace boost\n+{\n+class thread_group;\n } // namespace boost\n \n extern CWallet* pwalletMain;\n@@ -22,8 +23,7 @@ void Shutdown();\n bool AppInit2(boost::thread_group& threadGroup);\n \n /* The help message mode determines what help message to show */\n-enum HelpMessageMode\n-{\n+enum HelpMessageMode {\n     HMM_BITCOIND,\n     HMM_BITCOIN_QT\n };"
      },
      {
        "sha": "3863e95cffb025f84a3d4c4bbb3d4d60eac11e00",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 79,
        "deletions": 52,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -26,27 +26,29 @@\n class CKeyID : public uint160\n {\n public:\n-    CKeyID() : uint160(0) { }\n-    CKeyID(const uint160 &in) : uint160(in) { }\n+    CKeyID() : uint160(0) {}\n+    CKeyID(const uint160& in) : uint160(in) {}\n };\n \n /** A reference to a CScript: the Hash160 of its serialization (see script.h) */\n class CScriptID : public uint160\n {\n public:\n-    CScriptID() : uint160(0) { }\n-    CScriptID(const uint160 &in) : uint160(in) { }\n+    CScriptID() : uint160(0) {}\n+    CScriptID(const uint160& in) : uint160(in) {}\n };\n \n /** An encapsulated public key. */\n-class CPubKey {\n+class CPubKey\n+{\n private:\n     // Just store the serialized data.\n     // Its length can very cheaply be computed from the first byte.\n     unsigned char vch[65];\n \n     // Compute the length of a pubkey with a given first byte.\n-    unsigned int static GetLen(unsigned char chHeader) {\n+    unsigned int static GetLen(unsigned char chHeader)\n+    {\n         if (chHeader == 2 || chHeader == 3)\n             return 33;\n         if (chHeader == 4 || chHeader == 6 || chHeader == 7)\n@@ -55,66 +57,79 @@ class CPubKey {\n     }\n \n     // Set this key data to be invalid\n-    void Invalidate() {\n+    void Invalidate()\n+    {\n         vch[0] = 0xFF;\n     }\n \n public:\n     // Construct an invalid public key.\n-    CPubKey() {\n+    CPubKey()\n+    {\n         Invalidate();\n     }\n \n     // Initialize a public key using begin/end iterators to byte data.\n-    template<typename T>\n-    void Set(const T pbegin, const T pend) {\n+    template <typename T>\n+    void Set(const T pbegin, const T pend)\n+    {\n         int len = pend == pbegin ? 0 : GetLen(pbegin[0]);\n-        if (len && len == (pend-pbegin))\n+        if (len && len == (pend - pbegin))\n             memcpy(vch, (unsigned char*)&pbegin[0], len);\n         else\n             Invalidate();\n     }\n \n     // Construct a public key using begin/end iterators to byte data.\n-    template<typename T>\n-    CPubKey(const T pbegin, const T pend) {\n+    template <typename T>\n+    CPubKey(const T pbegin, const T pend)\n+    {\n         Set(pbegin, pend);\n     }\n \n     // Construct a public key from a byte vector.\n-    CPubKey(const std::vector<unsigned char> &vch) {\n+    CPubKey(const std::vector<unsigned char>& vch)\n+    {\n         Set(vch.begin(), vch.end());\n     }\n \n     // Simple read-only vector-like interface to the pubkey data.\n     unsigned int size() const { return GetLen(vch[0]); }\n-    const unsigned char *begin() const { return vch; }\n-    const unsigned char *end() const { return vch+size(); }\n-    const unsigned char &operator[](unsigned int pos) const { return vch[pos]; }\n+    const unsigned char* begin() const { return vch; }\n+    const unsigned char* end() const { return vch + size(); }\n+    const unsigned char& operator[](unsigned int pos) const { return vch[pos]; }\n \n     // Comparator implementation.\n-    friend bool operator==(const CPubKey &a, const CPubKey &b) {\n+    friend bool operator==(const CPubKey& a, const CPubKey& b)\n+    {\n         return a.vch[0] == b.vch[0] &&\n                memcmp(a.vch, b.vch, a.size()) == 0;\n     }\n-    friend bool operator!=(const CPubKey &a, const CPubKey &b) {\n+    friend bool operator!=(const CPubKey& a, const CPubKey& b)\n+    {\n         return !(a == b);\n     }\n-    friend bool operator<(const CPubKey &a, const CPubKey &b) {\n+    friend bool operator<(const CPubKey& a, const CPubKey& b)\n+    {\n         return a.vch[0] < b.vch[0] ||\n                (a.vch[0] == b.vch[0] && memcmp(a.vch, b.vch, a.size()) < 0);\n     }\n \n     // Implement serialization, as if this was a byte vector.\n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n+    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    {\n         return size() + 1;\n     }\n-    template<typename Stream> void Serialize(Stream &s, int nType, int nVersion) const {\n+    template <typename Stream>\n+    void Serialize(Stream& s, int nType, int nVersion) const\n+    {\n         unsigned int len = size();\n         ::WriteCompactSize(s, len);\n         s.write((char*)vch, len);\n     }\n-    template<typename Stream> void Unserialize(Stream &s, int nType, int nVersion) {\n+    template <typename Stream>\n+    void Unserialize(Stream& s, int nType, int nVersion)\n+    {\n         unsigned int len = ::ReadCompactSize(s);\n         if (len <= 65) {\n             s.read((char*)vch, len);\n@@ -128,36 +143,40 @@ class CPubKey {\n     }\n \n     // Get the KeyID of this public key (hash of its serialization)\n-    CKeyID GetID() const {\n-        return CKeyID(Hash160(vch, vch+size()));\n+    CKeyID GetID() const\n+    {\n+        return CKeyID(Hash160(vch, vch + size()));\n     }\n \n     // Get the 256-bit hash of this public key.\n-    uint256 GetHash() const {\n-        return Hash(vch, vch+size());\n+    uint256 GetHash() const\n+    {\n+        return Hash(vch, vch + size());\n     }\n \n     // Check syntactic correctness.\n     //\n     // Note that this is consensus critical as CheckSig() calls it!\n-    bool IsValid() const {\n+    bool IsValid() const\n+    {\n         return size() > 0;\n     }\n \n     // fully validate whether this is a valid public key (more expensive than IsValid())\n     bool IsFullyValid() const;\n \n     // Check whether this is a compressed public key.\n-    bool IsCompressed() const {\n+    bool IsCompressed() const\n+    {\n         return size() == 33;\n     }\n \n     // Verify a DER signature (~72 bytes).\n     // If this public key is not fully valid, the return value will be false.\n-    bool Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const;\n+    bool Verify(const uint256& hash, const std::vector<unsigned char>& vchSig) const;\n \n     // Recover a public key from a compact signature.\n-    bool RecoverCompact(const uint256 &hash, const std::vector<unsigned char>& vchSig);\n+    bool RecoverCompact(const uint256& hash, const std::vector<unsigned char>& vchSig);\n \n     // Turn this public key into an uncompressed public key.\n     bool Decompress();\n@@ -172,7 +191,8 @@ class CPubKey {\n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;\n \n /** An encapsulated private key. */\n-class CKey {\n+class CKey\n+{\n private:\n     // Whether this private key is valid. We check for correctness when modifying the key\n     // data, so fValid should always correspond to the actual state.\n@@ -185,33 +205,38 @@ class CKey {\n     unsigned char vch[32];\n \n     // Check whether the 32-byte array pointed to be vch is valid keydata.\n-    bool static Check(const unsigned char *vch);\n-public:\n+    bool static Check(const unsigned char* vch);\n \n+public:\n     // Construct an invalid private key.\n-    CKey() : fValid(false), fCompressed(false) {\n+    CKey() : fValid(false), fCompressed(false)\n+    {\n         LockObject(vch);\n     }\n \n     // Copy constructor. This is necessary because of memlocking.\n-    CKey(const CKey &secret) : fValid(secret.fValid), fCompressed(secret.fCompressed) {\n+    CKey(const CKey& secret) : fValid(secret.fValid), fCompressed(secret.fCompressed)\n+    {\n         LockObject(vch);\n         memcpy(vch, secret.vch, sizeof(vch));\n     }\n \n     // Destructor (again necessary because of memlocking).\n-    ~CKey() {\n+    ~CKey()\n+    {\n         UnlockObject(vch);\n     }\n \n-    friend bool operator==(const CKey &a, const CKey &b) {\n+    friend bool operator==(const CKey& a, const CKey& b)\n+    {\n         return a.fCompressed == b.fCompressed && a.size() == b.size() &&\n                memcmp(&a.vch[0], &b.vch[0], a.size()) == 0;\n     }\n \n     // Initialize using begin and end iterators to byte data.\n-    template<typename T>\n-    void Set(const T pbegin, const T pend, bool fCompressedIn) {\n+    template <typename T>\n+    void Set(const T pbegin, const T pend, bool fCompressedIn)\n+    {\n         if (pend - pbegin != 32) {\n             fValid = false;\n             return;\n@@ -227,8 +252,8 @@ class CKey {\n \n     // Simple read-only vector-like interface.\n     unsigned int size() const { return (fValid ? 32 : 0); }\n-    const unsigned char *begin() const { return vch; }\n-    const unsigned char *end() const { return vch + size(); }\n+    const unsigned char* begin() const { return vch; }\n+    const unsigned char* end() const { return vch + size(); }\n \n     // Check whether this private key is valid.\n     bool IsValid() const { return fValid; }\n@@ -237,7 +262,7 @@ class CKey {\n     bool IsCompressed() const { return fCompressed; }\n \n     // Initialize from a CPrivKey (serialized OpenSSL private key data).\n-    bool SetPrivKey(const CPrivKey &vchPrivKey, bool fCompressed);\n+    bool SetPrivKey(const CPrivKey& vchPrivKey, bool fCompressed);\n \n     // Generate a new private key using a cryptographic PRNG.\n     void MakeNewKey(bool fCompressed);\n@@ -251,23 +276,23 @@ class CKey {\n     CPubKey GetPubKey() const;\n \n     // Create a DER-serialized signature.\n-    bool Sign(const uint256 &hash, std::vector<unsigned char>& vchSig) const;\n+    bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig) const;\n \n     // Create a compact signature (65 bytes), which allows reconstructing the used public key.\n     // The format is one header byte, followed by two times 32 bytes for the serialized r and s values.\n     // The header byte: 0x1B = first key with even y, 0x1C = first key with odd y,\n     //                  0x1D = second key with even y, 0x1E = second key with odd y,\n     //                  add 0x04 for compressed keys.\n-    bool SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig) const;\n+    bool SignCompact(const uint256& hash, std::vector<unsigned char>& vchSig) const;\n \n     // Derive BIP32 child key.\n     bool Derive(CKey& keyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const;\n \n     // Load private key and check that public key matches.\n-    bool Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck);\n+    bool Load(CPrivKey& privkey, CPubKey& vchPubKey, bool fSkipCheck);\n \n     // Check whether an element of a signature (r or s) is valid.\n-    static bool CheckSignatureElement(const unsigned char *vch, int len, bool half);\n+    static bool CheckSignatureElement(const unsigned char* vch, int len, bool half);\n };\n \n struct CExtPubKey {\n@@ -277,14 +302,15 @@ struct CExtPubKey {\n     unsigned char vchChainCode[32];\n     CPubKey pubkey;\n \n-    friend bool operator==(const CExtPubKey &a, const CExtPubKey &b) {\n+    friend bool operator==(const CExtPubKey& a, const CExtPubKey& b)\n+    {\n         return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n                memcmp(&a.vchChainCode[0], &b.vchChainCode[0], 32) == 0 && a.pubkey == b.pubkey;\n     }\n \n     void Encode(unsigned char code[74]) const;\n     void Decode(const unsigned char code[74]);\n-    bool Derive(CExtPubKey &out, unsigned int nChild) const;\n+    bool Derive(CExtPubKey& out, unsigned int nChild) const;\n };\n \n struct CExtKey {\n@@ -294,16 +320,17 @@ struct CExtKey {\n     unsigned char vchChainCode[32];\n     CKey key;\n \n-    friend bool operator==(const CExtKey &a, const CExtKey &b) {\n+    friend bool operator==(const CExtKey& a, const CExtKey& b)\n+    {\n         return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n                memcmp(&a.vchChainCode[0], &b.vchChainCode[0], 32) == 0 && a.key == b.key;\n     }\n \n     void Encode(unsigned char code[74]) const;\n     void Decode(const unsigned char code[74]);\n-    bool Derive(CExtKey &out, unsigned int nChild) const;\n+    bool Derive(CExtKey& out, unsigned int nChild) const;\n     CExtPubKey Neuter() const;\n-    void SetMaster(const unsigned char *seed, unsigned int nSeedLen);\n+    void SetMaster(const unsigned char* seed, unsigned int nSeedLen);\n };\n \n /** Check that required EC support is available at runtime */"
      },
      {
        "sha": "8ce3e7b47088df4497029da5636b61881003cd29",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -12,7 +12,8 @@\n #include <leveldb/filter_policy.h>\n #include <memenv.h>\n \n-void HandleError(const leveldb::Status &status) throw(leveldb_error) {\n+void HandleError(const leveldb::Status& status) throw(leveldb_error)\n+{\n     if (status.ok())\n         return;\n     LogPrintf(\"%s\\n\", status.ToString());\n@@ -25,7 +26,8 @@ void HandleError(const leveldb::Status &status) throw(leveldb_error) {\n     throw leveldb_error(\"Unknown database error\");\n }\n \n-static leveldb::Options GetOptions(size_t nCacheSize) {\n+static leveldb::Options GetOptions(size_t nCacheSize)\n+{\n     leveldb::Options options;\n     options.block_cache = leveldb::NewLRUCache(nCacheSize / 2);\n     options.write_buffer_size = nCacheSize / 4; // up to two write buffers may be held in memory simultaneously\n@@ -40,7 +42,8 @@ static leveldb::Options GetOptions(size_t nCacheSize) {\n     return options;\n }\n \n-CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path &path, size_t nCacheSize, bool fMemory, bool fWipe) {\n+CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe)\n+{\n     penv = NULL;\n     readoptions.verify_checksums = true;\n     iteroptions.verify_checksums = true;\n@@ -64,7 +67,8 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path &path, size_t nCa\n     LogPrintf(\"Opened LevelDB successfully\\n\");\n }\n \n-CLevelDBWrapper::~CLevelDBWrapper() {\n+CLevelDBWrapper::~CLevelDBWrapper()\n+{\n     delete pdb;\n     pdb = NULL;\n     delete options.filter_policy;\n@@ -75,7 +79,8 @@ CLevelDBWrapper::~CLevelDBWrapper() {\n     options.env = NULL;\n }\n \n-bool CLevelDBWrapper::WriteBatch(CLevelDBBatch &batch, bool fSync) throw(leveldb_error) {\n+bool CLevelDBWrapper::WriteBatch(CLevelDBBatch& batch, bool fSync) throw(leveldb_error)\n+{\n     leveldb::Status status = pdb->Write(fSync ? syncoptions : writeoptions, &batch.batch);\n     HandleError(status);\n     return true;"
      },
      {
        "sha": "da5ba61c7b04fc35d6643ad5381208a6ecc8d066",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 31,
        "deletions": 16,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -17,10 +17,10 @@\n class leveldb_error : public std::runtime_error\n {\n public:\n-    leveldb_error(const std::string &msg) : std::runtime_error(msg) {}\n+    leveldb_error(const std::string& msg) : std::runtime_error(msg) {}\n };\n \n-void HandleError(const leveldb::Status &status) throw(leveldb_error);\n+void HandleError(const leveldb::Status& status) throw(leveldb_error);\n \n // Batch of changes queued to be written to a CLevelDBWrapper\n class CLevelDBBatch\n@@ -31,7 +31,9 @@ class CLevelDBBatch\n     leveldb::WriteBatch batch;\n \n public:\n-    template<typename K, typename V> void Write(const K& key, const V& value) {\n+    template <typename K, typename V>\n+    void Write(const K& key, const V& value)\n+    {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n@@ -45,7 +47,9 @@ class CLevelDBBatch\n         batch.Put(slKey, slValue);\n     }\n \n-    template<typename K> void Erase(const K& key) {\n+    template <typename K>\n+    void Erase(const K& key)\n+    {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n@@ -59,7 +63,7 @@ class CLevelDBWrapper\n {\n private:\n     // custom environment this database is using (may be NULL in case of default environment)\n-    leveldb::Env *penv;\n+    leveldb::Env* penv;\n \n     // database options used\n     leveldb::Options options;\n@@ -77,13 +81,15 @@ class CLevelDBWrapper\n     leveldb::WriteOptions syncoptions;\n \n     // the database itself\n-    leveldb::DB *pdb;\n+    leveldb::DB* pdb;\n \n public:\n-    CLevelDBWrapper(const boost::filesystem::path &path, size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+    CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n     ~CLevelDBWrapper();\n \n-    template<typename K, typename V> bool Read(const K& key, V& value) const throw(leveldb_error) {\n+    template <typename K, typename V>\n+    bool Read(const K& key, V& value) const throw(leveldb_error)\n+    {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n@@ -100,19 +106,23 @@ class CLevelDBWrapper\n         try {\n             CDataStream ssValue(strValue.data(), strValue.data() + strValue.size(), SER_DISK, CLIENT_VERSION);\n             ssValue >> value;\n-        } catch(const std::exception &) {\n+        } catch (const std::exception&) {\n             return false;\n         }\n         return true;\n     }\n \n-    template<typename K, typename V> bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error) {\n+    template <typename K, typename V>\n+    bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error)\n+    {\n         CLevelDBBatch batch;\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n \n-    template<typename K> bool Exists(const K& key) const throw(leveldb_error) {\n+    template <typename K>\n+    bool Exists(const K& key) const throw(leveldb_error)\n+    {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n@@ -129,26 +139,31 @@ class CLevelDBWrapper\n         return true;\n     }\n \n-    template<typename K> bool Erase(const K& key, bool fSync = false) throw(leveldb_error) {\n+    template <typename K>\n+    bool Erase(const K& key, bool fSync = false) throw(leveldb_error)\n+    {\n         CLevelDBBatch batch;\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n \n-    bool WriteBatch(CLevelDBBatch &batch, bool fSync = false) throw(leveldb_error);\n+    bool WriteBatch(CLevelDBBatch& batch, bool fSync = false) throw(leveldb_error);\n \n     // not available for LevelDB; provide for compatibility with BDB\n-    bool Flush() {\n+    bool Flush()\n+    {\n         return true;\n     }\n \n-    bool Sync() throw(leveldb_error) {\n+    bool Sync() throw(leveldb_error)\n+    {\n         CLevelDBBatch batch;\n         return WriteBatch(batch, true);\n     }\n \n     // not exactly clean encapsulation, but it's easiest for now\n-    leveldb::Iterator *NewIterator() {\n+    leveldb::Iterator* NewIterator()\n+    {\n         return pdb->NewIterator(iteroptions);\n     }\n };"
      },
      {
        "sha": "4bc8d9e5aa514b4039ae7080d1bc60dc269275b8",
        "filename": "src/limitedmap.h",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -9,7 +9,8 @@\n #include <map>\n \n /** STL-like map container that only keeps the N elements with the highest value. */\n-template <typename K, typename V> class limitedmap\n+template <typename K, typename V>\n+class limitedmap\n {\n public:\n     typedef K key_type;\n@@ -36,10 +37,8 @@ template <typename K, typename V> class limitedmap\n     void insert(const value_type& x)\n     {\n         std::pair<iterator, bool> ret = map.insert(x);\n-        if (ret.second)\n-        {\n-            if (nMaxSize && map.size() == nMaxSize)\n-            {\n+        if (ret.second) {\n+            if (nMaxSize && map.size() == nMaxSize) {\n                 map.erase(rmap.begin()->second);\n                 rmap.erase(rmap.begin());\n             }\n@@ -54,8 +53,7 @@ template <typename K, typename V> class limitedmap\n             return;\n         std::pair<rmap_iterator, rmap_iterator> itPair = rmap.equal_range(itTarget->second);\n         for (rmap_iterator it = itPair.first; it != itPair.second; ++it)\n-            if (it->second == itTarget)\n-            {\n+            if (it->second == itTarget) {\n                 rmap.erase(it);\n                 map.erase(itTarget);\n                 return;\n@@ -72,8 +70,7 @@ template <typename K, typename V> class limitedmap\n             return;\n         std::pair<rmap_iterator, rmap_iterator> itPair = rmap.equal_range(itTarget->second);\n         for (rmap_iterator it = itPair.first; it != itPair.second; ++it)\n-            if (it->second == itTarget)\n-            {\n+            if (it->second == itTarget) {\n                 rmap.erase(it);\n                 itTarget->second = v;\n                 rmap.insert(make_pair(v, itTarget));\n@@ -88,8 +85,7 @@ template <typename K, typename V> class limitedmap\n     size_type max_size(size_type s)\n     {\n         if (s)\n-            while (map.size() > s)\n-            {\n+            while (map.size() > s) {\n                 map.erase(rmap.begin()->second);\n                 rmap.erase(rmap.begin());\n             }"
      },
      {
        "sha": "1691875f57bfca781f6d6397bdffe564b84eb5a9",
        "filename": "src/mruset.h",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/mruset.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/mruset.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mruset.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -10,7 +10,8 @@\n #include <utility>\n \n /** STL-like set container that only keeps the most recent N elements. */\n-template <typename T> class mruset\n+template <typename T>\n+class mruset\n {\n public:\n     typedef T key_type;\n@@ -32,17 +33,19 @@ template <typename T> class mruset\n     bool empty() const { return set.empty(); }\n     iterator find(const key_type& k) const { return set.find(k); }\n     size_type count(const key_type& k) const { return set.count(k); }\n-    void clear() { set.clear(); queue.clear(); }\n+    void clear()\n+    {\n+        set.clear();\n+        queue.clear();\n+    }\n     bool inline friend operator==(const mruset<T>& a, const mruset<T>& b) { return a.set == b.set; }\n     bool inline friend operator==(const mruset<T>& a, const std::set<T>& b) { return a.set == b; }\n     bool inline friend operator<(const mruset<T>& a, const mruset<T>& b) { return a.set < b.set; }\n     std::pair<iterator, bool> insert(const key_type& x)\n     {\n         std::pair<iterator, bool> ret = set.insert(x);\n-        if (ret.second)\n-        {\n-            if (nMaxSize && queue.size() == nMaxSize)\n-            {\n+        if (ret.second) {\n+            if (nMaxSize && queue.size() == nMaxSize) {\n                 set.erase(queue.front());\n                 queue.pop_front();\n             }\n@@ -54,8 +57,7 @@ template <typename T> class mruset\n     size_type max_size(size_type s)\n     {\n         if (s)\n-            while (queue.size() > s)\n-            {\n+            while (queue.size() > s) {\n                 set.erase(queue.front());\n                 queue.pop_front();\n             }"
      },
      {
        "sha": "f786a20db5074d1c4fb66078188b0bec8accff75",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -35,7 +35,7 @@ static bool noui_ThreadSafeMessageBox(const std::string& message, const std::str\n     return false;\n }\n \n-static void noui_InitMessage(const std::string &message)\n+static void noui_InitMessage(const std::string& message)\n {\n     LogPrintf(\"init message: %s\\n\", message);\n }"
      },
      {
        "sha": "b73041a9fdc532f582e006aab9241c65b80f67ff",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 76,
        "deletions": 75,
        "changes": 151,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -4,7 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef __cplusplus\n-# error This header can only be compiled as C++.\n+#error This header can only be compiled as C++.\n #endif\n \n #ifndef __INCLUDED_PROTOCOL_H__\n@@ -28,43 +28,43 @@\n  */\n class CMessageHeader\n {\n-    public:\n-        CMessageHeader();\n-        CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn);\n+public:\n+    CMessageHeader();\n+    CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn);\n \n-        std::string GetCommand() const;\n-        bool IsValid() const;\n+    std::string GetCommand() const;\n+    bool IsValid() const;\n \n-        ADD_SERIALIZE_METHODS;\n+    ADD_SERIALIZE_METHODS;\n \n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-            READWRITE(FLATDATA(pchMessageStart));\n-            READWRITE(FLATDATA(pchCommand));\n-            READWRITE(nMessageSize);\n-            READWRITE(nChecksum);\n-        }\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(FLATDATA(pchMessageStart));\n+        READWRITE(FLATDATA(pchCommand));\n+        READWRITE(nMessageSize);\n+        READWRITE(nChecksum);\n+    }\n \n     // TODO: make private (improves encapsulation)\n-    public:\n-        enum {\n-            COMMAND_SIZE=12,\n-            MESSAGE_SIZE_SIZE=sizeof(int),\n-            CHECKSUM_SIZE=sizeof(int),\n-\n-            MESSAGE_SIZE_OFFSET=MESSAGE_START_SIZE+COMMAND_SIZE,\n-            CHECKSUM_OFFSET=MESSAGE_SIZE_OFFSET+MESSAGE_SIZE_SIZE,\n-            HEADER_SIZE=MESSAGE_START_SIZE+COMMAND_SIZE+MESSAGE_SIZE_SIZE+CHECKSUM_SIZE\n-        };\n-        char pchMessageStart[MESSAGE_START_SIZE];\n-        char pchCommand[COMMAND_SIZE];\n-        unsigned int nMessageSize;\n-        unsigned int nChecksum;\n+public:\n+    enum {\n+        COMMAND_SIZE = 12,\n+        MESSAGE_SIZE_SIZE = sizeof(int),\n+        CHECKSUM_SIZE = sizeof(int),\n+\n+        MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE,\n+        CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE,\n+        HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE\n+    };\n+    char pchMessageStart[MESSAGE_START_SIZE];\n+    char pchCommand[COMMAND_SIZE];\n+    unsigned int nMessageSize;\n+    unsigned int nChecksum;\n };\n \n /** nServices flags */\n-enum\n-{\n+enum {\n     NODE_NETWORK = (1 << 0),\n \n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n@@ -79,68 +79,69 @@ enum\n /** A CService with information about it as peer */\n class CAddress : public CService\n {\n-    public:\n-        CAddress();\n-        explicit CAddress(CService ipIn, uint64_t nServicesIn=NODE_NETWORK);\n-\n-        void Init();\n-\n-        ADD_SERIALIZE_METHODS;\n-\n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-            if (ser_action.ForRead())\n-                Init();\n-            if (nType & SER_DISK)\n-                READWRITE(nVersion);\n-            if ((nType & SER_DISK) ||\n-                (nVersion >= CADDR_TIME_VERSION && !(nType & SER_GETHASH)))\n-                READWRITE(nTime);\n-            READWRITE(nServices);\n-            READWRITE(*(CService*)this);\n-        }\n+public:\n+    CAddress();\n+    explicit CAddress(CService ipIn, uint64_t nServicesIn = NODE_NETWORK);\n+\n+    void Init();\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        if (ser_action.ForRead())\n+            Init();\n+        if (nType & SER_DISK)\n+            READWRITE(nVersion);\n+        if ((nType & SER_DISK) ||\n+            (nVersion >= CADDR_TIME_VERSION && !(nType & SER_GETHASH)))\n+            READWRITE(nTime);\n+        READWRITE(nServices);\n+        READWRITE(*(CService*)this);\n+    }\n \n     // TODO: make private (improves encapsulation)\n-    public:\n-        uint64_t nServices;\n+public:\n+    uint64_t nServices;\n \n-        // disk and network only\n-        unsigned int nTime;\n+    // disk and network only\n+    unsigned int nTime;\n \n-        // memory only\n-        int64_t nLastTry;\n+    // memory only\n+    int64_t nLastTry;\n };\n \n /** inv message data */\n class CInv\n {\n-    public:\n-        CInv();\n-        CInv(int typeIn, const uint256& hashIn);\n-        CInv(const std::string& strType, const uint256& hashIn);\n+public:\n+    CInv();\n+    CInv(int typeIn, const uint256& hashIn);\n+    CInv(const std::string& strType, const uint256& hashIn);\n \n-        ADD_SERIALIZE_METHODS;\n+    ADD_SERIALIZE_METHODS;\n \n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-            READWRITE(type);\n-            READWRITE(hash);\n-        }\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(type);\n+        READWRITE(hash);\n+    }\n \n-        friend bool operator<(const CInv& a, const CInv& b);\n+    friend bool operator<(const CInv& a, const CInv& b);\n \n-        bool IsKnownType() const;\n-        const char* GetCommand() const;\n-        std::string ToString() const;\n+    bool IsKnownType() const;\n+    const char* GetCommand() const;\n+    std::string ToString() const;\n \n     // TODO: make private (improves encapsulation)\n-    public:\n-        int type;\n-        uint256 hash;\n+public:\n+    int type;\n+    uint256 hash;\n };\n \n-enum\n-{\n+enum {\n     MSG_TX = 1,\n     MSG_BLOCK,\n     // Nodes may always request a MSG_FILTERED_BLOCK in a getdata, however,"
      },
      {
        "sha": "998e7dfb08a035dc5b70ade9b91b129dbfc996de",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 16,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -8,8 +8,8 @@\n #ifdef WIN32\n #include \"compat.h\" // for Windows API\n #endif\n-#include \"serialize.h\" // for begin_ptr(vec)\n-#include \"util.h\" // for LogPrint()\n+#include \"serialize.h\"        // for begin_ptr(vec)\n+#include \"util.h\"             // for LogPrint()\n #include \"utilstrencodings.h\" // for GetTime()\n \n #include <limits>\n@@ -56,36 +56,33 @@ void RandAddSeedPerfmon()\n #ifdef WIN32\n     // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n     // Seed with the entire set of perfmon data\n-    std::vector <unsigned char> vData(250000,0);\n+    std::vector<unsigned char> vData(250000, 0);\n     long ret = 0;\n     unsigned long nSize = 0;\n     const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n-    while (true)\n-    {\n+    while (true) {\n         nSize = vData.size();\n         ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", NULL, NULL, begin_ptr(vData), &nSize);\n         if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n             break;\n-        vData.resize(std::max((vData.size()*3)/2, nMaxSize)); // Grow size of buffer exponentially\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n     }\n     RegCloseKey(HKEY_PERFORMANCE_DATA);\n-    if (ret == ERROR_SUCCESS)\n-    {\n-        RAND_add(begin_ptr(vData), nSize, nSize/100.0);\n+    if (ret == ERROR_SUCCESS) {\n+        RAND_add(begin_ptr(vData), nSize, nSize / 100.0);\n         OPENSSL_cleanse(begin_ptr(vData), nSize);\n         LogPrint(\"rand\", \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n         static bool warned = false; // Warn only once\n-        if (!warned)\n-        {\n+        if (!warned) {\n             LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n             warned = true;\n         }\n     }\n #endif\n }\n \n-bool GetRandBytes(unsigned char *buf, int num)\n+bool GetRandBytes(unsigned char* buf, int num)\n {\n     if (RAND_bytes(buf, num) != 1) {\n         LogPrintf(\"%s: OpenSSL RAND_bytes() failed with error: %s\\n\", __func__, ERR_error_string(ERR_get_error(), NULL));\n@@ -126,18 +123,17 @@ uint32_t insecure_rand_Rw = 11;\n void seed_insecure_rand(bool fDeterministic)\n {\n     // The seed values have some unlikely fixed points which we avoid.\n-    if(fDeterministic)\n-    {\n+    if (fDeterministic) {\n         insecure_rand_Rz = insecure_rand_Rw = 11;\n     } else {\n         uint32_t tmp;\n         do {\n             GetRandBytes((unsigned char*)&tmp, 4);\n-        } while(tmp == 0 || tmp == 0x9068ffffU);\n+        } while (tmp == 0 || tmp == 0x9068ffffU);\n         insecure_rand_Rz = tmp;\n         do {\n             GetRandBytes((unsigned char*)&tmp, 4);\n-        } while(tmp == 0 || tmp == 0x464fffffU);\n+        } while (tmp == 0 || tmp == 0x464fffffU);\n         insecure_rand_Rw = tmp;\n     }\n }"
      },
      {
        "sha": "161ebe89860aedfe96353cf30f06c159450c68a5",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -19,7 +19,7 @@ void RandAddSeedPerfmon();\n /**\n  * Functions to gather random data via the OpenSSL PRNG\n  */\n-bool GetRandBytes(unsigned char *buf, int num);\n+bool GetRandBytes(unsigned char* buf, int num);\n uint64_t GetRand(uint64_t nMax);\n int GetRandInt(int nMax);\n uint256 GetRandHash();"
      },
      {
        "sha": "307aa2aab8b0c7aa9ee1fae41d19964d7604eff8",
        "filename": "src/rpcclient.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/rpcclient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/rpcclient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -10,6 +10,6 @@\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_writer_template.h\"\n \n-json_spirit::Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams);\n+json_spirit::Array RPCConvertValues(const std::string& strMethod, const std::vector<std::string>& strParams);\n \n #endif // _BITCOINRPC_CLIENT_H_"
      },
      {
        "sha": "ef35c9d646a5edec75af6bfda1597a53a2ad8e34",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -32,8 +32,7 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n // Complain if any thread tries to lock in a different order.\n //\n \n-struct CLockLocation\n-{\n+struct CLockLocation {\n     CLockLocation(const char* pszName, const char* pszFile, int nLine)\n     {\n         mutexName = pszName;\n@@ -43,7 +42,7 @@ struct CLockLocation\n \n     std::string ToString() const\n     {\n-        return mutexName+\"  \"+sourceFile+\":\"+itostr(sourceLine);\n+        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine);\n     }\n \n     std::string MutexName() const { return mutexName; }\n@@ -54,7 +53,7 @@ struct CLockLocation\n     int sourceLine;\n };\n \n-typedef std::vector< std::pair<void*, CLockLocation> > LockStack;\n+typedef std::vector<std::pair<void*, CLockLocation> > LockStack;\n \n static boost::mutex dd_mutex;\n static std::map<std::pair<void*, void*>, LockStack> lockorders;\n@@ -65,17 +64,19 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n {\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n-    BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)& i, s2)\n-    {\n-        if (i.first == mismatch.first) LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second) LogPrintf(\" (2)\");\n+    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n+        if (i.first == mismatch.first)\n+            LogPrintf(\" (1)\");\n+        if (i.first == mismatch.second)\n+            LogPrintf(\" (2)\");\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n     LogPrintf(\"Current lock order is:\\n\");\n-    BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)& i, s1)\n-    {\n-        if (i.first == mismatch.first) LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second) LogPrintf(\" (2)\");\n+    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n+        if (i.first == mismatch.first)\n+            LogPrintf(\" (1)\");\n+        if (i.first == mismatch.second)\n+            LogPrintf(\" (2)\");\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n }\n@@ -91,17 +92,17 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n     (*lockstack).push_back(std::make_pair(c, locklocation));\n \n     if (!fTry) {\n-        BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)& i, (*lockstack)) {\n-            if (i.first == c) break;\n+        BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {\n+            if (i.first == c)\n+                break;\n \n             std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n             if (lockorders.count(p1))\n                 continue;\n             lockorders[p1] = (*lockstack);\n \n             std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            if (lockorders.count(p2))\n-            {\n+            if (lockorders.count(p2)) {\n                 potential_deadlock_detected(p1, lockorders[p2], lockorders[p1]);\n                 break;\n             }\n@@ -112,8 +113,7 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n \n static void pop_lock()\n {\n-    if (fDebug)\n-    {\n+    if (fDebug) {\n         const CLockLocation& locklocation = (*lockstack).rbegin()->second;\n         LogPrint(\"lock\", \"Unlocked: %s\\n\", locklocation.ToString());\n     }\n@@ -135,17 +135,17 @@ void LeaveCritical()\n std::string LocksHeld()\n {\n     std::string result;\n-    BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)&i, *lockstack)\n+    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, *lockstack)\n         result += i.second.ToString() + std::string(\"\\n\");\n     return result;\n }\n \n-void AssertLockHeldInternal(const char *pszName, const char* pszFile, int nLine, void *cs)\n+void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)&i, *lockstack)\n-        if (i.first == cs) return;\n-    fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\",\n-            pszName, pszFile, nLine, LocksHeld().c_str());\n+    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, *lockstack)\n+        if (i.first == cs)\n+            return;\n+    fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n     abort();\n }\n "
      },
      {
        "sha": "cd0aa7b20e7177c25192e67eb342f735a9690cb9",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 40,
        "deletions": 30,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -48,7 +48,6 @@ LEAVE_CRITICAL_SECTION(mutex); // no RAII\n  */\n \n \n-\n ///////////////////////////////\n //                           //\n // THE ACTUAL IMPLEMENTATION //\n@@ -63,17 +62,17 @@ class LOCKABLE AnnotatedMixin : public PARENT\n public:\n     void lock() EXCLUSIVE_LOCK_FUNCTION()\n     {\n-      PARENT::lock();\n+        PARENT::lock();\n     }\n \n     void unlock() UNLOCK_FUNCTION()\n     {\n-      PARENT::unlock();\n+        PARENT::unlock();\n     }\n \n     bool try_lock() EXCLUSIVE_TRYLOCK_FUNCTION(true)\n     {\n-      return PARENT::try_lock();\n+        return PARENT::try_lock();\n     }\n };\n \n@@ -91,11 +90,13 @@ typedef boost::condition_variable CConditionVariable;\n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false);\n void LeaveCritical();\n std::string LocksHeld();\n-void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void *cs);\n+void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs);\n #else\n-void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\n+void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false)\n+{\n+}\n void static inline LeaveCritical() {}\n-void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void *cs) {}\n+void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}\n #endif\n #define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n \n@@ -104,7 +105,7 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine);\n #endif\n \n /** Wrapper around boost::unique_lock<Mutex> */\n-template<typename Mutex>\n+template <typename Mutex>\n class CMutexLock\n {\n private:\n@@ -114,11 +115,10 @@ class CMutexLock\n     {\n         EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()));\n #ifdef DEBUG_LOCKCONTENTION\n-        if (!lock.try_lock())\n-        {\n+        if (!lock.try_lock()) {\n             PrintLockContention(pszName, pszFile, nLine);\n #endif\n-        lock.lock();\n+            lock.lock();\n #ifdef DEBUG_LOCKCONTENTION\n         }\n #endif\n@@ -157,19 +157,19 @@ class CMutexLock\n typedef CMutexLock<CCriticalSection> CCriticalBlock;\n \n #define LOCK(cs) CCriticalBlock criticalblock(cs, #cs, __FILE__, __LINE__)\n-#define LOCK2(cs1,cs2) CCriticalBlock criticalblock1(cs1, #cs1, __FILE__, __LINE__),criticalblock2(cs2, #cs2, __FILE__, __LINE__)\n-#define TRY_LOCK(cs,name) CCriticalBlock name(cs, #cs, __FILE__, __LINE__, true)\n+#define LOCK2(cs1, cs2) CCriticalBlock criticalblock1(cs1, #cs1, __FILE__, __LINE__), criticalblock2(cs2, #cs2, __FILE__, __LINE__)\n+#define TRY_LOCK(cs, name) CCriticalBlock name(cs, #cs, __FILE__, __LINE__, true)\n \n-#define ENTER_CRITICAL_SECTION(cs) \\\n-    { \\\n+#define ENTER_CRITICAL_SECTION(cs)                            \\\n+    {                                                         \\\n         EnterCritical(#cs, __FILE__, __LINE__, (void*)(&cs)); \\\n-        (cs).lock(); \\\n+        (cs).lock();                                          \\\n     }\n \n #define LEAVE_CRITICAL_SECTION(cs) \\\n-    { \\\n-        (cs).unlock(); \\\n-        LeaveCritical(); \\\n+    {                              \\\n+        (cs).unlock();             \\\n+        LeaveCritical();           \\\n     }\n \n class CSemaphore\n@@ -182,23 +182,26 @@ class CSemaphore\n public:\n     CSemaphore(int init) : value(init) {}\n \n-    void wait() {\n+    void wait()\n+    {\n         boost::unique_lock<boost::mutex> lock(mutex);\n         while (value < 1) {\n             condition.wait(lock);\n         }\n         value--;\n     }\n \n-    bool try_wait() {\n+    bool try_wait()\n+    {\n         boost::unique_lock<boost::mutex> lock(mutex);\n         if (value < 1)\n             return false;\n         value--;\n         return true;\n     }\n \n-    void post() {\n+    void post()\n+    {\n         {\n             boost::unique_lock<boost::mutex> lock(mutex);\n             value++;\n@@ -211,31 +214,35 @@ class CSemaphore\n class CSemaphoreGrant\n {\n private:\n-    CSemaphore *sem;\n+    CSemaphore* sem;\n     bool fHaveGrant;\n \n public:\n-    void Acquire() {\n+    void Acquire()\n+    {\n         if (fHaveGrant)\n             return;\n         sem->wait();\n         fHaveGrant = true;\n     }\n \n-    void Release() {\n+    void Release()\n+    {\n         if (!fHaveGrant)\n             return;\n         sem->post();\n         fHaveGrant = false;\n     }\n \n-    bool TryAcquire() {\n+    bool TryAcquire()\n+    {\n         if (!fHaveGrant && sem->try_wait())\n             fHaveGrant = true;\n         return fHaveGrant;\n     }\n \n-    void MoveTo(CSemaphoreGrant &grant) {\n+    void MoveTo(CSemaphoreGrant& grant)\n+    {\n         grant.Release();\n         grant.sem = sem;\n         grant.fHaveGrant = fHaveGrant;\n@@ -245,18 +252,21 @@ class CSemaphoreGrant\n \n     CSemaphoreGrant() : sem(NULL), fHaveGrant(false) {}\n \n-    CSemaphoreGrant(CSemaphore &sema, bool fTry = false) : sem(&sema), fHaveGrant(false) {\n+    CSemaphoreGrant(CSemaphore& sema, bool fTry = false) : sem(&sema), fHaveGrant(false)\n+    {\n         if (fTry)\n             TryAcquire();\n         else\n             Acquire();\n     }\n \n-    ~CSemaphoreGrant() {\n+    ~CSemaphoreGrant()\n+    {\n         Release();\n     }\n \n-    operator bool() {\n+    operator bool()\n+    {\n         return fHaveGrant;\n     }\n };"
      },
      {
        "sha": "7515d050e725c1c7e18b9147477bbf34a3002ae8",
        "filename": "src/threadsafety.h",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/threadsafety.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/threadsafety.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadsafety.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -13,24 +13,24 @@\n // See http://clang.llvm.org/docs/LanguageExtensions.html#threadsafety\n // for documentation.  The clang compiler can do advanced static analysis\n // of locking when given the -Wthread-safety option.\n-#define LOCKABLE                        __attribute__ ((lockable))\n-#define SCOPED_LOCKABLE                 __attribute__ ((scoped_lockable))\n-#define GUARDED_BY(x)                   __attribute__ ((guarded_by(x)))\n-#define GUARDED_VAR                     __attribute__ ((guarded_var))\n-#define PT_GUARDED_BY(x)                __attribute__ ((pt_guarded_by(x)))\n-#define PT_GUARDED_VAR                  __attribute__ ((pt_guarded_var))\n-#define ACQUIRED_AFTER(...)             __attribute__ ((acquired_after(__VA_ARGS__)))\n-#define ACQUIRED_BEFORE(...)            __attribute__ ((acquired_before(__VA_ARGS__)))\n-#define EXCLUSIVE_LOCK_FUNCTION(...)    __attribute__ ((exclusive_lock_function(__VA_ARGS__)))\n-#define SHARED_LOCK_FUNCTION(...)       __attribute__ ((shared_lock_function(__VA_ARGS__)))\n-#define EXCLUSIVE_TRYLOCK_FUNCTION(...) __attribute__ ((exclusive_trylock_function(__VA_ARGS__)))\n-#define SHARED_TRYLOCK_FUNCTION(...)    __attribute__ ((shared_trylock_function(__VA_ARGS__)))\n-#define UNLOCK_FUNCTION(...)            __attribute__ ((unlock_function(__VA_ARGS__)))\n-#define LOCK_RETURNED(x)                __attribute__ ((lock_returned(x)))\n-#define LOCKS_EXCLUDED(...)             __attribute__ ((locks_excluded(__VA_ARGS__)))\n-#define EXCLUSIVE_LOCKS_REQUIRED(...)   __attribute__ ((exclusive_locks_required(__VA_ARGS__)))\n-#define SHARED_LOCKS_REQUIRED(...)      __attribute__ ((shared_locks_required(__VA_ARGS__)))\n-#define NO_THREAD_SAFETY_ANALYSIS       __attribute__ ((no_thread_safety_analysis))\n+#define LOCKABLE __attribute__((lockable))\n+#define SCOPED_LOCKABLE __attribute__((scoped_lockable))\n+#define GUARDED_BY(x) __attribute__((guarded_by(x)))\n+#define GUARDED_VAR __attribute__((guarded_var))\n+#define PT_GUARDED_BY(x) __attribute__((pt_guarded_by(x)))\n+#define PT_GUARDED_VAR __attribute__((pt_guarded_var))\n+#define ACQUIRED_AFTER(...) __attribute__((acquired_after(__VA_ARGS__)))\n+#define ACQUIRED_BEFORE(...) __attribute__((acquired_before(__VA_ARGS__)))\n+#define EXCLUSIVE_LOCK_FUNCTION(...) __attribute__((exclusive_lock_function(__VA_ARGS__)))\n+#define SHARED_LOCK_FUNCTION(...) __attribute__((shared_lock_function(__VA_ARGS__)))\n+#define EXCLUSIVE_TRYLOCK_FUNCTION(...) __attribute__((exclusive_trylock_function(__VA_ARGS__)))\n+#define SHARED_TRYLOCK_FUNCTION(...) __attribute__((shared_trylock_function(__VA_ARGS__)))\n+#define UNLOCK_FUNCTION(...) __attribute__((unlock_function(__VA_ARGS__)))\n+#define LOCK_RETURNED(x) __attribute__((lock_returned(x)))\n+#define LOCKS_EXCLUDED(...) __attribute__((locks_excluded(__VA_ARGS__)))\n+#define EXCLUSIVE_LOCKS_REQUIRED(...) __attribute__((exclusive_locks_required(__VA_ARGS__)))\n+#define SHARED_LOCKS_REQUIRED(...) __attribute__((shared_locks_required(__VA_ARGS__)))\n+#define NO_THREAD_SAFETY_ANALYSIS __attribute__((no_thread_safety_analysis))\n #else\n #define LOCKABLE\n #define SCOPED_LOCKABLE\n@@ -50,6 +50,6 @@\n #define EXCLUSIVE_LOCKS_REQUIRED(...)\n #define SHARED_LOCKS_REQUIRED(...)\n #define NO_THREAD_SAFETY_ANALYSIS\n-#endif  // __GNUC__\n+#endif // __GNUC__\n \n-#endif  // BITCOIN_THREADSAFETY_H\n+#endif // BITCOIN_THREADSAFETY_H"
      },
      {
        "sha": "2c20f4efd5e4bd376f3b302b890ea9768773c9fe",
        "filename": "src/timedata.h",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/timedata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/timedata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.h?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -15,15 +15,16 @@ class CNetAddr;\n /** Median filter over a stream of values.\n  * Returns the median of the last N numbers\n  */\n-template <typename T> class CMedianFilter\n+template <typename T>\n+class CMedianFilter\n {\n private:\n     std::vector<T> vValues;\n     std::vector<T> vSorted;\n     unsigned int nSize;\n+\n public:\n-    CMedianFilter(unsigned int size, T initial_value):\n-        nSize(size)\n+    CMedianFilter(unsigned int size, T initial_value) : nSize(size)\n     {\n         vValues.reserve(size);\n         vValues.push_back(initial_value);\n@@ -32,8 +33,7 @@ template <typename T> class CMedianFilter\n \n     void input(T value)\n     {\n-        if(vValues.size() == nSize)\n-        {\n+        if (vValues.size() == nSize) {\n             vValues.erase(vValues.begin());\n         }\n         vValues.push_back(value);\n@@ -46,14 +46,13 @@ template <typename T> class CMedianFilter\n     T median() const\n     {\n         int size = vSorted.size();\n-        assert(size>0);\n-        if(size & 1) // Odd number of elements\n+        assert(size > 0);\n+        if (size & 1) // Odd number of elements\n         {\n-            return vSorted[size/2];\n-        }\n-        else // Even number of elements\n+            return vSorted[size / 2];\n+        } else // Even number of elements\n         {\n-            return (vSorted[size/2-1] + vSorted[size/2]) / 2;\n+            return (vSorted[size / 2 - 1] + vSorted[size / 2]) / 2;\n         }\n     }\n \n@@ -62,7 +61,7 @@ template <typename T> class CMedianFilter\n         return vValues.size();\n     }\n \n-    std::vector<T> sorted () const\n+    std::vector<T> sorted() const\n     {\n         return vSorted;\n     }"
      },
      {
        "sha": "79406f24757b5ae815c905f17fc9b44f3f5c9f9f",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 56,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -10,21 +10,21 @@\n #include <stdio.h>\n #include <string.h>\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n base_uint<BITS>::base_uint(const std::string& str)\n {\n     SetHex(str);\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n base_uint<BITS>::base_uint(const std::vector<unsigned char>& vch)\n {\n     if (vch.size() != sizeof(pn))\n         throw uint_error(\"Converting vector of wrong size to base_uint\");\n     memcpy(pn, &vch[0], sizeof(pn));\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator<<=(unsigned int shift)\n {\n     base_uint<BITS> a(*this);\n@@ -33,15 +33,15 @@ base_uint<BITS>& base_uint<BITS>::operator<<=(unsigned int shift)\n     int k = shift / 32;\n     shift = shift % 32;\n     for (int i = 0; i < WIDTH; i++) {\n-        if (i+k+1 < WIDTH && shift != 0)\n-            pn[i+k+1] |= (a.pn[i] >> (32-shift));\n-        if (i+k < WIDTH)\n-            pn[i+k] |= (a.pn[i] << shift);\n+        if (i + k + 1 < WIDTH && shift != 0)\n+            pn[i + k + 1] |= (a.pn[i] >> (32 - shift));\n+        if (i + k < WIDTH)\n+            pn[i + k] |= (a.pn[i] << shift);\n     }\n     return *this;\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator>>=(unsigned int shift)\n {\n     base_uint<BITS> a(*this);\n@@ -50,15 +50,15 @@ base_uint<BITS>& base_uint<BITS>::operator>>=(unsigned int shift)\n     int k = shift / 32;\n     shift = shift % 32;\n     for (int i = 0; i < WIDTH; i++) {\n-        if (i-k-1 >= 0 && shift != 0)\n-            pn[i-k-1] |= (a.pn[i] << (32-shift));\n-        if (i-k >= 0)\n-            pn[i-k] |= (a.pn[i] >> shift);\n+        if (i - k - 1 >= 0 && shift != 0)\n+            pn[i - k - 1] |= (a.pn[i] << (32 - shift));\n+        if (i - k >= 0)\n+            pn[i - k] |= (a.pn[i] >> shift);\n     }\n     return *this;\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator*=(uint32_t b32)\n {\n     uint64_t carry = 0;\n@@ -70,7 +70,7 @@ base_uint<BITS>& base_uint<BITS>::operator*=(uint32_t b32)\n     return *this;\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator*=(const base_uint& b)\n {\n     base_uint<BITS> a = *this;\n@@ -86,12 +86,12 @@ base_uint<BITS>& base_uint<BITS>::operator*=(const base_uint& b)\n     return *this;\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator/=(const base_uint& b)\n {\n-    base_uint<BITS> div = b; // make a copy, so we can shift.\n+    base_uint<BITS> div = b;     // make a copy, so we can shift.\n     base_uint<BITS> num = *this; // make a copy, so we can subtract.\n-    *this = 0; // the quotient.\n+    *this = 0;                   // the quotient.\n     int num_bits = num.bits();\n     int div_bits = div.bits();\n     if (div_bits == 0)\n@@ -112,9 +112,10 @@ base_uint<BITS>& base_uint<BITS>::operator/=(const base_uint& b)\n     return *this;\n }\n \n-template<unsigned int BITS>\n-int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const {\n-    for (int i = WIDTH-1; i >= 0; i--) {\n+template <unsigned int BITS>\n+int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const\n+{\n+    for (int i = WIDTH - 1; i >= 0; i--) {\n         if (pn[i] < b.pn[i])\n             return -1;\n         if (pn[i] > b.pn[i])\n@@ -123,9 +124,10 @@ int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const {\n     return 0;\n }\n \n-template<unsigned int BITS>\n-bool base_uint<BITS>::EqualTo(uint64_t b) const {\n-    for (int i = WIDTH-1; i >= 2; i--) {\n+template <unsigned int BITS>\n+bool base_uint<BITS>::EqualTo(uint64_t b) const\n+{\n+    for (int i = WIDTH - 1; i >= 2; i--) {\n         if (pn[i])\n             return false;\n     }\n@@ -136,7 +138,7 @@ bool base_uint<BITS>::EqualTo(uint64_t b) const {\n     return true;\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n double base_uint<BITS>::getdouble() const\n {\n     double ret = 0.0;\n@@ -148,19 +150,19 @@ double base_uint<BITS>::getdouble() const\n     return ret;\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n std::string base_uint<BITS>::GetHex() const\n {\n-    char psz[sizeof(pn)*2 + 1];\n+    char psz[sizeof(pn) * 2 + 1];\n     for (unsigned int i = 0; i < sizeof(pn); i++)\n-        sprintf(psz + i*2, \"%02x\", ((unsigned char*)pn)[sizeof(pn) - i - 1]);\n-    return std::string(psz, psz + sizeof(pn)*2);\n+        sprintf(psz + i * 2, \"%02x\", ((unsigned char*)pn)[sizeof(pn) - i - 1]);\n+    return std::string(psz, psz + sizeof(pn) * 2);\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n void base_uint<BITS>::SetHex(const char* psz)\n {\n-    memset(pn,0,sizeof(pn));\n+    memset(pn, 0, sizeof(pn));\n \n     // skip leading spaces\n     while (isspace(*psz))\n@@ -186,28 +188,28 @@ void base_uint<BITS>::SetHex(const char* psz)\n     }\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n void base_uint<BITS>::SetHex(const std::string& str)\n {\n     SetHex(str.c_str());\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n std::string base_uint<BITS>::ToString() const\n {\n     return (GetHex());\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n unsigned int base_uint<BITS>::bits() const\n {\n-    for (int pos = WIDTH-1; pos >= 0; pos--) {\n+    for (int pos = WIDTH - 1; pos >= 0; pos--) {\n         if (pn[pos]) {\n             for (int bits = 31; bits > 0; bits--) {\n-                if (pn[pos] & 1<<bits)\n-                    return 32*pos + bits + 1;\n+                if (pn[pos] & 1 << bits)\n+                    return 32 * pos + bits + 1;\n             }\n-            return 32*pos + 1;\n+            return 32 * pos + 1;\n         }\n     }\n     return 0;\n@@ -249,16 +251,16 @@ template unsigned int base_uint<256>::bits() const;\n \n // This implementation directly uses shifts instead of going\n // through an intermediate MPI representation.\n-uint256& uint256::SetCompact(uint32_t nCompact, bool *pfNegative, bool *pfOverflow)\n+uint256& uint256::SetCompact(uint32_t nCompact, bool* pfNegative, bool* pfOverflow)\n {\n     int nSize = nCompact >> 24;\n     uint32_t nWord = nCompact & 0x007fffff;\n     if (nSize <= 3) {\n-        nWord >>= 8*(3-nSize);\n+        nWord >>= 8 * (3 - nSize);\n         *this = nWord;\n     } else {\n         *this = nWord;\n-        *this <<= 8*(nSize-3);\n+        *this <<= 8 * (nSize - 3);\n     }\n     if (pfNegative)\n         *pfNegative = nWord != 0 && (nCompact & 0x00800000) != 0;\n@@ -274,9 +276,9 @@ uint32_t uint256::GetCompact(bool fNegative) const\n     int nSize = (bits() + 7) / 8;\n     uint32_t nCompact = 0;\n     if (nSize <= 3) {\n-        nCompact = GetLow64() << 8*(3-nSize);\n+        nCompact = GetLow64() << 8 * (3 - nSize);\n     } else {\n-        uint256 bn = *this >> 8*(nSize-3);\n+        uint256 bn = *this >> 8 * (nSize - 3);\n         nCompact = bn.GetLow64();\n     }\n     // The 0x00800000 bit denotes the sign.\n@@ -295,27 +297,46 @@ uint32_t uint256::GetCompact(bool fNegative) const\n static void inline HashMix(uint32_t& a, uint32_t& b, uint32_t& c)\n {\n     // Taken from lookup3, by Bob Jenkins.\n-    a -= c; a ^= ((c <<  4) | (c >> 28)); c += b;\n-    b -= a; b ^= ((a <<  6) | (a >> 26)); a += c;\n-    c -= b; c ^= ((b <<  8) | (b >> 24)); b += a;\n-    a -= c; a ^= ((c << 16) | (c >> 16)); c += b;\n-    b -= a; b ^= ((a << 19) | (a >> 13)); a += c;\n-    c -= b; c ^= ((b <<  4) | (b >> 28)); b += a;\n+    a -= c;\n+    a ^= ((c << 4) | (c >> 28));\n+    c += b;\n+    b -= a;\n+    b ^= ((a << 6) | (a >> 26));\n+    a += c;\n+    c -= b;\n+    c ^= ((b << 8) | (b >> 24));\n+    b += a;\n+    a -= c;\n+    a ^= ((c << 16) | (c >> 16));\n+    c += b;\n+    b -= a;\n+    b ^= ((a << 19) | (a >> 13));\n+    a += c;\n+    c -= b;\n+    c ^= ((b << 4) | (b >> 28));\n+    b += a;\n }\n \n static void inline HashFinal(uint32_t& a, uint32_t& b, uint32_t& c)\n {\n     // Taken from lookup3, by Bob Jenkins.\n-    c ^= b; c -= ((b << 14) | (b >> 18));\n-    a ^= c; a -= ((c << 11) | (c >> 21));\n-    b ^= a; b -= ((a << 25) | (a >>  7));\n-    c ^= b; c -= ((b << 16) | (b >> 16));\n-    a ^= c; a -= ((c <<  4) | (c >> 28));\n-    b ^= a; b -= ((a << 14) | (a >> 18));\n-    c ^= b; c -= ((b << 24) | (b >>  8));\n+    c ^= b;\n+    c -= ((b << 14) | (b >> 18));\n+    a ^= c;\n+    a -= ((c << 11) | (c >> 21));\n+    b ^= a;\n+    b -= ((a << 25) | (a >> 7));\n+    c ^= b;\n+    c -= ((b << 16) | (b >> 16));\n+    a ^= c;\n+    a -= ((c << 4) | (c >> 28));\n+    b ^= a;\n+    b -= ((a << 14) | (a >> 18));\n+    c ^= b;\n+    c -= ((b << 24) | (b >> 8));\n }\n \n-uint64_t uint256::GetHash(const uint256 &salt) const\n+uint64_t uint256::GetHash(const uint256& salt) const\n {\n     uint32_t a, b, c;\n     a = b = c = 0xdeadbeef + (WIDTH << 2);"
      },
      {
        "sha": "95632fdab7066a3a20bafbef98efdd2425a3dfcf",
        "filename": "src/version.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20e01b1a03819d843a860284033b48a5e3b65ff7/src/version.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20e01b1a03819d843a860284033b48a5e3b65ff7/src/version.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.cpp?ref=20e01b1a03819d843a860284033b48a5e3b65ff7",
        "patch": "@@ -16,7 +16,7 @@\n const std::string CLIENT_NAME(\"Satoshi\");\n \n // Client version number\n-#define CLIENT_VERSION_SUFFIX   \"\"\n+#define CLIENT_VERSION_SUFFIX \"\"\n \n \n // The following part of the code determines the CLIENT_BUILD variable.\n@@ -35,51 +35,51 @@ const std::string CLIENT_NAME(\"Satoshi\");\n \n // First, include build.h if requested\n #ifdef HAVE_BUILD_INFO\n-#    include \"build.h\"\n+#include \"build.h\"\n #endif\n \n // git will put \"#define GIT_ARCHIVE 1\" on the next line inside archives. $Format:%n#define GIT_ARCHIVE 1$\n #ifdef GIT_ARCHIVE\n-#    define GIT_COMMIT_ID \"$Format:%h$\"\n-#    define GIT_COMMIT_DATE \"$Format:%cD$\"\n+#define GIT_COMMIT_ID \"$Format:%h$\"\n+#define GIT_COMMIT_DATE \"$Format:%cD$\"\n #endif\n \n-#define BUILD_DESC_WITH_SUFFIX(maj,min,rev,build,suffix) \\\n+#define BUILD_DESC_WITH_SUFFIX(maj, min, rev, build, suffix) \\\n     \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-\" DO_STRINGIZE(suffix)\n \n-#define BUILD_DESC_FROM_COMMIT(maj,min,rev,build,commit) \\\n+#define BUILD_DESC_FROM_COMMIT(maj, min, rev, build, commit) \\\n     \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-g\" commit\n \n-#define BUILD_DESC_FROM_UNKNOWN(maj,min,rev,build) \\\n+#define BUILD_DESC_FROM_UNKNOWN(maj, min, rev, build) \\\n     \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-unk\"\n \n #ifndef BUILD_DESC\n-#    ifdef BUILD_SUFFIX\n-#        define BUILD_DESC BUILD_DESC_WITH_SUFFIX(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, BUILD_SUFFIX)\n-#    elif defined(GIT_COMMIT_ID)\n-#        define BUILD_DESC BUILD_DESC_FROM_COMMIT(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, GIT_COMMIT_ID)\n-#    else\n-#        define BUILD_DESC BUILD_DESC_FROM_UNKNOWN(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD)\n-#    endif\n+#ifdef BUILD_SUFFIX\n+#define BUILD_DESC BUILD_DESC_WITH_SUFFIX(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, BUILD_SUFFIX)\n+#elif defined(GIT_COMMIT_ID)\n+#define BUILD_DESC BUILD_DESC_FROM_COMMIT(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, GIT_COMMIT_ID)\n+#else\n+#define BUILD_DESC BUILD_DESC_FROM_UNKNOWN(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD)\n+#endif\n #endif\n \n #ifndef BUILD_DATE\n-#    ifdef GIT_COMMIT_DATE\n-#        define BUILD_DATE GIT_COMMIT_DATE\n-#    else\n-#        define BUILD_DATE __DATE__ \", \" __TIME__\n-#    endif\n+#ifdef GIT_COMMIT_DATE\n+#define BUILD_DATE GIT_COMMIT_DATE\n+#else\n+#define BUILD_DATE __DATE__ \", \" __TIME__\n+#endif\n #endif\n \n const std::string CLIENT_BUILD(BUILD_DESC CLIENT_VERSION_SUFFIX);\n const std::string CLIENT_DATE(BUILD_DATE);\n \n static std::string FormatVersion(int nVersion)\n {\n-    if (nVersion%100 == 0)\n-        return strprintf(\"%d.%d.%d\", nVersion/1000000, (nVersion/10000)%100, (nVersion/100)%100);\n+    if (nVersion % 100 == 0)\n+        return strprintf(\"%d.%d.%d\", nVersion / 1000000, (nVersion / 10000) % 100, (nVersion / 100) % 100);\n     else\n-        return strprintf(\"%d.%d.%d.%d\", nVersion/1000000, (nVersion/10000)%100, (nVersion/100)%100, nVersion%100);\n+        return strprintf(\"%d.%d.%d.%d\", nVersion / 1000000, (nVersion / 10000) % 100, (nVersion / 100) % 100, nVersion % 100);\n }\n \n std::string FormatFullVersion()"
      }
    ]
  },
  {
    "sha": "c65cc8cde30dd34a81962fda51a754f1cc0bdde8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNjVjYzhjZGUzMGRkMzRhODE5NjJmZGE1MWE3NTRmMWNjMGJkZGU4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-19T19:22:33Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-19T22:18:42Z"
      },
      "message": "build: fix release name strings for gitian builds\n\nWhen building from a distdir as gitian does, checking for the .git dir\nis not reliable. Instead, ask git if we're in a repo.",
      "tree": {
        "sha": "6f19cdfc6bd3605a14aef2ccc09a49a07ebe0c1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f19cdfc6bd3605a14aef2ccc09a49a07ebe0c1c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c65cc8cde30dd34a81962fda51a754f1cc0bdde8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c65cc8cde30dd34a81962fda51a754f1cc0bdde8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c65cc8cde30dd34a81962fda51a754f1cc0bdde8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c65cc8cde30dd34a81962fda51a754f1cc0bdde8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fc6c67400e91846ca1c1c57011e57491013f9bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc6c67400e91846ca1c1c57011e57491013f9bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fc6c67400e91846ca1c1c57011e57491013f9bd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "679566e5969af651aafa9f2daea0eefee239d80f",
        "filename": "share/genbuild.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c65cc8cde30dd34a81962fda51a754f1cc0bdde8/share/genbuild.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c65cc8cde30dd34a81962fda51a754f1cc0bdde8/share/genbuild.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/genbuild.sh?ref=c65cc8cde30dd34a81962fda51a754f1cc0bdde8",
        "patch": "@@ -16,7 +16,7 @@ fi\n DESC=\"\"\n SUFFIX=\"\"\n LAST_COMMIT_DATE=\"\"\n-if [ -e \"$(which git 2>/dev/null)\" -a -d \".git\" ]; then\n+if [ -e \"$(which git 2>/dev/null)\" -a $(git rev-parse --is-inside-work-tree 2>/dev/null) = \"true\" ]; then\n     # clean 'dirty' status of touched files that haven't been modified\n     git diff >/dev/null 2>/dev/null \n "
      }
    ]
  },
  {
    "sha": "6134b43ba9ffc277a3b0cd8cceb5abe8e5c8bd56",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTM0YjQzYmE5ZmZjMjc3YTNiMGNkOGNjZWI1YWJlOGU1YzhiZDU2",
    "commit": {
      "author": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-19T22:29:58Z"
      },
      "committer": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-19T22:29:58Z"
      },
      "message": "Fixing condition 'sabotaging' MSVC build",
      "tree": {
        "sha": "8a1a7fb42cdfa42eabec70d435412f2da0fdd039",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a1a7fb42cdfa42eabec70d435412f2da0fdd039"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6134b43ba9ffc277a3b0cd8cceb5abe8e5c8bd56",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6134b43ba9ffc277a3b0cd8cceb5abe8e5c8bd56",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6134b43ba9ffc277a3b0cd8cceb5abe8e5c8bd56",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6134b43ba9ffc277a3b0cd8cceb5abe8e5c8bd56/comments",
    "author": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fc6c67400e91846ca1c1c57011e57491013f9bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc6c67400e91846ca1c1c57011e57491013f9bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fc6c67400e91846ca1c1c57011e57491013f9bd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4c9ac74b78b128e7bc7b8c1512fb26e882a978a5",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6134b43ba9ffc277a3b0cd8cceb5abe8e5c8bd56/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6134b43ba9ffc277a3b0cd8cceb5abe8e5c8bd56/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=6134b43ba9ffc277a3b0cd8cceb5abe8e5c8bd56",
        "patch": "@@ -340,9 +340,7 @@ class CScript : public std::vector<unsigned char>\n     CScript() { }\n     CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }\n     CScript(const_iterator pbegin, const_iterator pend) : std::vector<unsigned char>(pbegin, pend) { }\n-#ifndef _MSC_VER\n     CScript(const unsigned char* pbegin, const unsigned char* pend) : std::vector<unsigned char>(pbegin, pend) { }\n-#endif\n \n     CScript& operator+=(const CScript& b)\n     {"
      }
    ]
  },
  {
    "sha": "25308337d659108e3320257fb6c1c16d5fe24aa9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTMwODMzN2Q2NTkxMDhlMzMyMDI1N2ZiNmMxYzE2ZDVmZTI0YWE5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-20T03:08:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-20T03:11:09Z"
      },
      "message": "Merge pull request #4835\n\nab15b2e Avoid copying undo data (Pieter Wuille)",
      "tree": {
        "sha": "9222a35ecf2c5628ccfd010f79c40c9123db5eb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9222a35ecf2c5628ccfd010f79c40c9123db5eb2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25308337d659108e3320257fb6c1c16d5fe24aa9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUHPBOAAoJEI9lMlXIeZLgPXML/AmqoG5X+ctUzH/k0IBkhsXY\nA66ZhLDby57Vb8LRM3TA/30tyjfOFEZVjR5ci9rPlR1SskoS9aNrergU8giDotn/\nhsM36zRpRGWsVW3R7aaPZDJj9XALdd+QTiSUaaL+BmuZv1sC0CUox3E6Jp0Lwdiu\nR8cb9sWlEmThbs4jJWy1oSTIOfL0QPLmkD2TvostvWZcC2F+6DeaX898GV+/HAAE\n/p99XbuW48imxG+g8/X836e+xJ7inX5KZWh0K4TRlDEN+QbsWnoFkxSPglpvfjGV\nTw555oKvX/Rgi9VlClb4qnHhMDzHibzsDU4VV1oWzVGy92x1tTD/h3iioJK0uUYw\nnj7CluzXA22kCffOsVQfjy45e0saPK5kzTRiW6mIVq1FyT6ywwuIiiZjJ5bevX8d\neNQ/UOnEWxWk1T88XEpSITHIti+qmi1tPIvKRHxmfZMvlik1RqOApWFVCd+UFqq/\nLXNLv7wUohkMHu3odPabnOJakbSN8vHud3jkHHF0Dg==\n=o4BO\n-----END PGP SIGNATURE-----",
        "payload": "tree 9222a35ecf2c5628ccfd010f79c40c9123db5eb2\nparent 2fc6c67400e91846ca1c1c57011e57491013f9bd\nparent ab15b2ec71da7a82b1b08d09c0252582668a2a60\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1411182490 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1411182669 +0200\n\nMerge pull request #4835\n\nab15b2e Avoid copying undo data (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25308337d659108e3320257fb6c1c16d5fe24aa9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25308337d659108e3320257fb6c1c16d5fe24aa9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25308337d659108e3320257fb6c1c16d5fe24aa9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fc6c67400e91846ca1c1c57011e57491013f9bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc6c67400e91846ca1c1c57011e57491013f9bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fc6c67400e91846ca1c1c57011e57491013f9bd"
      },
      {
        "sha": "ab15b2ec71da7a82b1b08d09c0252582668a2a60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab15b2ec71da7a82b1b08d09c0252582668a2a60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab15b2ec71da7a82b1b08d09c0252582668a2a60"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 11,
      "deletions": 8
    },
    "files": [
      {
        "sha": "15c3916a6fb0761857b0c8426775ebbd2c36fe9f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25308337d659108e3320257fb6c1c16d5fe24aa9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25308337d659108e3320257fb6c1c16d5fe24aa9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=25308337d659108e3320257fb6c1c16d5fe24aa9",
        "patch": "@@ -1351,12 +1351,13 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n     bool ret;\n     // mark inputs spent\n     if (!tx.IsCoinBase()) {\n-        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n+        txundo.vprevout.reserve(tx.vin.size());\n+        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+            const CTxIn &txin = tx.vin[i];\n             CCoins &coins = inputs.GetCoins(txin.prevout.hash);\n-            CTxInUndo undo;\n-            ret = coins.Spend(txin.prevout, undo);\n+            txundo.vprevout.push_back(CTxInUndo());\n+            ret = coins.Spend(txin.prevout, txundo.vprevout.back());\n             assert(ret);\n-            txundo.vprevout.push_back(undo);\n         }\n     }\n \n@@ -1663,6 +1664,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n+    blockundo.vtxundo.reserve(block.vtx.size() - 1);\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n         const CTransaction &tx = block.vtx[i];\n@@ -1698,10 +1700,11 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n             control.Add(vChecks);\n         }\n \n-        CTxUndo txundo;\n-        UpdateCoins(tx, state, view, txundo, pindex->nHeight);\n-        if (!tx.IsCoinBase())\n-            blockundo.vtxundo.push_back(txundo);\n+        CTxUndo undoDummy;\n+        if (i > 0) {\n+            blockundo.vtxundo.push_back(CTxUndo());\n+        }\n+        UpdateCoins(tx, state, view, i == 0 ? undoDummy : blockundo.vtxundo.back(), pindex->nHeight);\n \n         vPos.push_back(std::make_pair(tx.GetHash(), pos));\n         pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);"
      }
    ]
  },
  {
    "sha": "33a27716fc4389e7acb53708f0e02fc9b4606498",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2EyNzcxNmZjNDM4OWU3YWNiNTM3MDhmMGUwMmZjOWI0NjA2NDk4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-20T07:53:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-20T07:55:14Z"
      },
      "message": "test: Fix DoS tests after c74332c\n\nFix data structure mismatch ... The mind boggles that they were still passing at all.",
      "tree": {
        "sha": "3f1341c73b82c19b0616e348213c4aba16abe91c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f1341c73b82c19b0616e348213c4aba16abe91c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33a27716fc4389e7acb53708f0e02fc9b4606498",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUHTLuAAoJEHSBCwEjRsmmlngIAI1VotWGriA/YI2xMukS7lC/\nYByuTr+Sl3k9l0ee+Nd2AVGJ/xcu+yaF2i6rRKkIgguQ6nr5GoOjquCj0Mme0Agx\nutGITQ7KDn9tZWrIDM1DCKmOofIj/1P3JHKdYehHhiPkriNfa2uPjkG3fPNbW/HA\nBQj67ie8bf7hM9KdDNhrebh/7ILHRijxwcbDKT9uKF+A7i5wRiPh2Us4m8OP/Iih\nC0NRKcx1koEiRlrFxRGdgYU54axbUqVOGNs10K6BqgFEMlNKSa1691QTB20+hz/i\neUx6Y+/rVQBCIomt6M+m6geypMJ0IzOijCj2G5S3qLlzaw0X4idjsMPvPeE7QoI=\n=Nidt\n-----END PGP SIGNATURE-----",
        "payload": "tree 3f1341c73b82c19b0616e348213c4aba16abe91c\nparent 25308337d659108e3320257fb6c1c16d5fe24aa9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411199630 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411199714 +0200\n\ntest: Fix DoS tests after c74332c\n\nFix data structure mismatch ... The mind boggles that they were still passing at all.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33a27716fc4389e7acb53708f0e02fc9b4606498",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33a27716fc4389e7acb53708f0e02fc9b4606498",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33a27716fc4389e7acb53708f0e02fc9b4606498/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25308337d659108e3320257fb6c1c16d5fe24aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25308337d659108e3320257fb6c1c16d5fe24aa9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25308337d659108e3320257fb6c1c16d5fe24aa9"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7bec12b665c258a5d34d44f4f82b82602b76a811",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33a27716fc4389e7acb53708f0e02fc9b4606498/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33a27716fc4389e7acb53708f0e02fc9b4606498/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=33a27716fc4389e7acb53708f0e02fc9b4606498",
        "patch": "@@ -27,7 +27,11 @@\n extern bool AddOrphanTx(const CTransaction& tx, NodeId peer);\n extern void EraseOrphansFor(NodeId peer);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n-extern std::map<uint256, CTransaction> mapOrphanTransactions;\n+struct COrphanTx {\n+    CTransaction tx;\n+    NodeId fromPeer;\n+};\n+extern std::map<uint256, COrphanTx> mapOrphanTransactions;\n extern std::map<uint256, std::set<uint256> > mapOrphanTransactionsByPrev;\n \n CService ip(uint32_t i)\n@@ -149,11 +153,11 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n \n CTransaction RandomOrphan()\n {\n-    std::map<uint256, CTransaction>::iterator it;\n+    std::map<uint256, COrphanTx>::iterator it;\n     it = mapOrphanTransactions.lower_bound(GetRandHash());\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n-    return it->second;\n+    return it->second.tx;\n }\n \n BOOST_AUTO_TEST_CASE(DoS_mapOrphans)"
      }
    ]
  },
  {
    "sha": "d6712db35419e36b2c89191eb730a86d95abf4b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjcxMmRiMzU0MTllMzZiMmM4OTE5MWViNzMwYTg2ZDk1YWJmNGIw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-20T08:56:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-20T09:03:59Z"
      },
      "message": "Also create pid file in non-daemon mode\n\nAlways make a pid file, not only when `-daemon` specified.\n\nThis is useful for troubleshooting, for attaching debuggers and loggers\nand such.\n\n- Write the pid file only after the datadir lock was acquired\n- Don't create or remove a pid file on WIN32, and also don't show the option",
      "tree": {
        "sha": "2f251c16c9b9689aaef24f0012378d410c005591",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f251c16c9b9689aaef24f0012378d410c005591"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6712db35419e36b2c89191eb730a86d95abf4b0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUHUMAAAoJEHSBCwEjRsmmzWIH/iHUXUFj0Vu+ptu6SRXa6IP3\nEPxnQlUEPJ6Va+qP6YaP1RnRRCbhEDcIc6birVF/6Nrgn9cz0tFlCYEIyUJ3js/l\nX7ryCecze3AlPcMmfbcnUVJaqtnvkqxbIUIk328aug2KkuHzyiFAScoYK7yI6h1/\nLJQpbQIMmuZPg25n/dWdYvVQU3N71cSPBLeh/9GFJQAJf+da/XTJ/kj5tYedV6v7\n5qhQLyLzZGttBIoR0KgJA8gLnMpiisTEJCqhKRsFCZFUhrqtC9869ptEhse/3ei/\nYDkx+s5ftolydoMjtRB/NVtpNFz9sGr9sirAZcXrAYamyDOxaGlX22naIfNjYNs=\n=Z7Lw\n-----END PGP SIGNATURE-----",
        "payload": "tree 2f251c16c9b9689aaef24f0012378d410c005591\nparent 25308337d659108e3320257fb6c1c16d5fe24aa9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411203385 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411203839 +0200\n\nAlso create pid file in non-daemon mode\n\nAlways make a pid file, not only when `-daemon` specified.\n\nThis is useful for troubleshooting, for attaching debuggers and loggers\nand such.\n\n- Write the pid file only after the datadir lock was acquired\n- Don't create or remove a pid file on WIN32, and also don't show the option\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6712db35419e36b2c89191eb730a86d95abf4b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6712db35419e36b2c89191eb730a86d95abf4b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6712db35419e36b2c89191eb730a86d95abf4b0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25308337d659108e3320257fb6c1c16d5fe24aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25308337d659108e3320257fb6c1c16d5fe24aa9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25308337d659108e3320257fb6c1c16d5fe24aa9"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0737b5a83dad27dca36e55d32f6c068b26802266",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6712db35419e36b2c89191eb730a86d95abf4b0/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6712db35419e36b2c89191eb730a86d95abf4b0/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=d6712db35419e36b2c89191eb730a86d95abf4b0",
        "patch": "@@ -129,7 +129,6 @@ bool AppInit(int argc, char* argv[])\n             }\n             if (pid > 0) // Parent process, pid is child process id\n             {\n-                CreatePidFile(GetPidFile(), pid);\n                 return true;\n             }\n             // Child process falls through to rest of initialization"
      },
      {
        "sha": "7299bd0f4a732bfbfe1a773648c7929e41b9e07b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6712db35419e36b2c89191eb730a86d95abf4b0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6712db35419e36b2c89191eb730a86d95abf4b0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d6712db35419e36b2c89191eb730a86d95abf4b0",
        "patch": "@@ -160,7 +160,9 @@ void Shutdown()\n     if (pwalletMain)\n         bitdb.Flush(true);\n #endif\n+#ifndef WIN32\n     boost::filesystem::remove(GetPidFile());\n+#endif\n     UnregisterAllWallets();\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n@@ -228,7 +230,9 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -maxorphanblocks=<n>   \" + strprintf(_(\"Keep at most <n> unconnectable blocks in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_BLOCKS) + \"\\n\";\n     strUsage += \"  -maxorphantx=<n>       \" + strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS) + \"\\n\";\n     strUsage += \"  -par=<n>               \" + strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"), -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS) + \"\\n\";\n+#ifndef WIN32\n     strUsage += \"  -pid=<file>            \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\";\n+#endif\n     strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\") + \"\\n\";\n #if !defined(WIN32)\n     strUsage += \"  -sysperms              \" + _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\") + \"\\n\";\n@@ -714,7 +718,9 @@ bool AppInit2(boost::thread_group& threadGroup)\n     static boost::interprocess::file_lock lock(pathLockFile.string().c_str());\n     if (!lock.try_lock())\n         return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. Bitcoin Core is probably already running.\"), strDataDir));\n-\n+#ifndef WIN32\n+    CreatePidFile(GetPidFile(), getpid());\n+#endif\n     if (GetBoolArg(\"-shrinkdebugfile\", !fDebug))\n         ShrinkDebugFile();\n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");"
      },
      {
        "sha": "f387fce8c7b528e729474af45867edffc28555f7",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6712db35419e36b2c89191eb730a86d95abf4b0/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6712db35419e36b2c89191eb730a86d95abf4b0/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d6712db35419e36b2c89191eb730a86d95abf4b0",
        "patch": "@@ -472,14 +472,14 @@ void ReadConfigFile(map<string, string>& mapSettingsRet,\n     ClearDatadirCache();\n }\n \n+#ifndef WIN32\n boost::filesystem::path GetPidFile()\n {\n     boost::filesystem::path pathPidFile(GetArg(\"-pid\", \"bitcoind.pid\"));\n     if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;\n     return pathPidFile;\n }\n \n-#ifndef WIN32\n void CreatePidFile(const boost::filesystem::path &path, pid_t pid)\n {\n     FILE* file = fopen(path.string().c_str(), \"w\");"
      },
      {
        "sha": "4b2415278ba33e361134783d7b50e9245e0d430c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6712db35419e36b2c89191eb730a86d95abf4b0/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6712db35419e36b2c89191eb730a86d95abf4b0/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=d6712db35419e36b2c89191eb730a86d95abf4b0",
        "patch": "@@ -93,8 +93,8 @@ bool TryCreateDirectory(const boost::filesystem::path& p);\n boost::filesystem::path GetDefaultDataDir();\n const boost::filesystem::path &GetDataDir(bool fNetSpecific = true);\n boost::filesystem::path GetConfigFile();\n-boost::filesystem::path GetPidFile();\n #ifndef WIN32\n+boost::filesystem::path GetPidFile();\n void CreatePidFile(const boost::filesystem::path &path, pid_t pid);\n #endif\n void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map<std::string, std::vector<std::string> >& mapMultiSettingsRet);"
      }
    ]
  },
  {
    "sha": "01c28073ba2cae5a53124c7dc7123240b98513ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMWMyODA3M2JhMmNhZTVhNTMxMjRjN2RjNzEyMzI0MGI5ODUxM2Nl",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-09-20T16:32:42Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-09-20T17:23:44Z"
      },
      "message": "Add warning about the merkle-tree algorithm duplicate txid flaw\n\nLots of people read the Bitcoin Core codebase to learn more about\ncrypto; better to warn about flaws explicitly so they don't blindly copy\nthe code for other uses and create broken systems.",
      "tree": {
        "sha": "331e58ff43d1736966e21aca2b08c5d4bdc0c081",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/331e58ff43d1736966e21aca2b08c5d4bdc0c081"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01c28073ba2cae5a53124c7dc7123240b98513ce",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGrBAABCACVBQJUHbghXhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAxMjM2N2QzODVhZDExMzU4YTRhMWVlZTg2Y2Y4ZWJlMDZh\nNzZhZGQzNmRmYjQ2MjIvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkfvgdQf+KYcS4SS0fPlzHCEOU0d95e8b\nTd/aoMNXYvTiZZIZncC2D0PwZEcxmEyM55q9+6YWhPEgLlcfMqOwr4jT0A7Lq+j5\nQZ6rwp+Ya7PjxOeoleH3gXZA3ejO/8WOJHeZNt1TTiB7LhF9wrWZ4ByM7kIMxqLu\nrs/nO8nykouQtN6Jajrt8OqCl3Y1hd41pRjWxEcBJQw2GU+wTewfssXv6ha111LT\nESunMVpWtbmkxrp+YiJ80NHshCNmrcZmTtMQvaCYYlNsFAE7Eh9A60fA4hddANFq\n2RuQc+CfT6F8exbwSZxMftwYchqDA9lv0p+HV5yLIGa8raN4Md16ls3BwM7UCw==\n=xy+C\n-----END PGP SIGNATURE-----",
        "payload": "tree 331e58ff43d1736966e21aca2b08c5d4bdc0c081\nparent 25308337d659108e3320257fb6c1c16d5fe24aa9\nauthor Peter Todd <pete@petertodd.org> 1411230762 -0400\ncommitter Peter Todd <pete@petertodd.org> 1411233824 -0400\n\nAdd warning about the merkle-tree algorithm duplicate txid flaw\n\nLots of people read the Bitcoin Core codebase to learn more about\ncrypto; better to warn about flaws explicitly so they don't blindly copy\nthe code for other uses and create broken systems.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01c28073ba2cae5a53124c7dc7123240b98513ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01c28073ba2cae5a53124c7dc7123240b98513ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01c28073ba2cae5a53124c7dc7123240b98513ce/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25308337d659108e3320257fb6c1c16d5fe24aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25308337d659108e3320257fb6c1c16d5fe24aa9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25308337d659108e3320257fb6c1c16d5fe24aa9"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e52327ba8e7d453b83bc4320ff5bb7cee5af33c5",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01c28073ba2cae5a53124c7dc7123240b98513ce/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01c28073ba2cae5a53124c7dc7123240b98513ce/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=01c28073ba2cae5a53124c7dc7123240b98513ce",
        "patch": "@@ -226,6 +226,13 @@ uint256 CBlockHeader::GetHash() const\n \n uint256 CBlock::BuildMerkleTree() const\n {\n+    // WARNING! If you're reading this because you're learning about crypto\n+    // and/or designing a new system that will use merkle trees, keep in mind\n+    // that the following merkle tree algorithm has a serious flaw related to\n+    // duplicate txids, resulting in a vulnerability. (CVE-2012-2459) Bitcoin\n+    // has since worked around the flaw, but for new applications you should\n+    // use something different; don't just copy-and-paste this code without\n+    // understanding the problem first.\n     vMerkleTree.clear();\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n         vMerkleTree.push_back(tx.GetHash());"
      }
    ]
  },
  {
    "sha": "934b153a2caba4071a614e5b3ef40feeaff631d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzRiMTUzYTJjYWJhNDA3MWE2MTRlNWIzZWY0MGZlZWFmZjYzMWQ0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-20T23:03:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-20T23:10:14Z"
      },
      "message": "Merge pull request #4933\n\n20e01b1 Apply clang-format on some infrequently-updated files (Pieter Wuille)",
      "tree": {
        "sha": "3d95becb8f49ad812227c5f3bfafddec4c72f6d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d95becb8f49ad812227c5f3bfafddec4c72f6d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/934b153a2caba4071a614e5b3ef40feeaff631d4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUHglWAAoJEI9lMlXIeZLg+DwMAKN8Pei1e2vgid9ASa23e9Au\nvCoZxEwLCsDX3tXiugNLy1plwKehPB8pZLCOwT3XUEDhhZ1lGQvYeKH/wjsOVLwG\nn8TVkJn54AadKSXevFxt9tOvvbVo0Ie/xZUiEP6mKhc9OU5WwrVoPJjaHHqmZ9V/\n8ogaxJX+JtaGWAanUO/9tPZRxeLDYZhNcvpmXD5GLHhPyxCnQziL417PzOCOZX7l\n3kHiYZtcw6UKuHgdeFqQfCVPq6R9D7I/AgSWC3j+e4K61inhSgIy/LiJ6Ym1kiZK\nZRgsAZYYaDiCO9+YCejJKI5hm8YBNtcbUZW5Z7xSsxDclCUiluZvIcisRmGrZAZk\nO0VgSSqJhU3GP7ueZDePcrjOIrF30FtpBDHglB0cx8HLuvpubSNKk1Ps+0m5zRzZ\nMXeUCCTSzIbLT4ALbVUgt2PRM8OpPzzKGiOYQa+Dna7TCjTklmCiq1QIi9FQ21WN\nze60YSyjm91E1t96LCE1pOjwLBNTwjQhxDyARkgFig==\n=E9P7\n-----END PGP SIGNATURE-----",
        "payload": "tree 3d95becb8f49ad812227c5f3bfafddec4c72f6d3\nparent 25308337d659108e3320257fb6c1c16d5fe24aa9\nparent 20e01b1a03819d843a860284033b48a5e3b65ff7\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1411254212 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1411254614 +0200\n\nMerge pull request #4933\n\n20e01b1 Apply clang-format on some infrequently-updated files (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/934b153a2caba4071a614e5b3ef40feeaff631d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/934b153a2caba4071a614e5b3ef40feeaff631d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/934b153a2caba4071a614e5b3ef40feeaff631d4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25308337d659108e3320257fb6c1c16d5fe24aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25308337d659108e3320257fb6c1c16d5fe24aa9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25308337d659108e3320257fb6c1c16d5fe24aa9"
      },
      {
        "sha": "20e01b1a03819d843a860284033b48a5e3b65ff7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20e01b1a03819d843a860284033b48a5e3b65ff7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20e01b1a03819d843a860284033b48a5e3b65ff7"
      }
    ],
    "stats": {
      "total": 1591,
      "additions": 847,
      "deletions": 744
    },
    "files": [
      {
        "sha": "7b674a66e7cbfc93dd2628aeabc2578d0793e400",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 110,
        "deletions": 115,
        "changes": 225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -9,7 +9,7 @@\n \n using namespace std;\n \n-int CAddrInfo::GetTriedBucket(const std::vector<unsigned char> &nKey) const\n+int CAddrInfo::GetTriedBucket(const std::vector<unsigned char>& nKey) const\n {\n     CDataStream ss1(SER_GETHASH, 0);\n     std::vector<unsigned char> vchKey = GetKey();\n@@ -23,7 +23,7 @@ int CAddrInfo::GetTriedBucket(const std::vector<unsigned char> &nKey) const\n     return hash2 % ADDRMAN_TRIED_BUCKET_COUNT;\n }\n \n-int CAddrInfo::GetNewBucket(const std::vector<unsigned char> &nKey, const CNetAddr& src) const\n+int CAddrInfo::GetNewBucket(const std::vector<unsigned char>& nKey, const CNetAddr& src) const\n {\n     CDataStream ss1(SER_GETHASH, 0);\n     std::vector<unsigned char> vchGroupKey = GetGroup();\n@@ -39,19 +39,19 @@ int CAddrInfo::GetNewBucket(const std::vector<unsigned char> &nKey, const CNetAd\n \n bool CAddrInfo::IsTerrible(int64_t nNow) const\n {\n-    if (nLastTry && nLastTry >= nNow-60) // never remove things tried the last minute\n+    if (nLastTry && nLastTry >= nNow - 60) // never remove things tried the last minute\n         return false;\n \n-    if (nTime > nNow + 10*60) // came in a flying DeLorean\n+    if (nTime > nNow + 10 * 60) // came in a flying DeLorean\n         return true;\n \n-    if (nTime==0 || nNow-nTime > ADDRMAN_HORIZON_DAYS*24*60*60) // not seen in recent history\n+    if (nTime == 0 || nNow - nTime > ADDRMAN_HORIZON_DAYS * 24 * 60 * 60) // not seen in recent history\n         return true;\n \n-    if (nLastSuccess==0 && nAttempts>=ADDRMAN_RETRIES) // tried N times and never a success\n+    if (nLastSuccess == 0 && nAttempts >= ADDRMAN_RETRIES) // tried N times and never a success\n         return true;\n \n-    if (nNow-nLastSuccess > ADDRMAN_MIN_FAIL_DAYS*24*60*60 && nAttempts>=ADDRMAN_MAX_FAILURES) // N successive failures in the last week\n+    if (nNow - nLastSuccess > ADDRMAN_MIN_FAIL_DAYS * 24 * 60 * 60 && nAttempts >= ADDRMAN_MAX_FAILURES) // N successive failures in the last week\n         return true;\n \n     return false;\n@@ -64,23 +64,25 @@ double CAddrInfo::GetChance(int64_t nNow) const\n     int64_t nSinceLastSeen = nNow - nTime;\n     int64_t nSinceLastTry = nNow - nLastTry;\n \n-    if (nSinceLastSeen < 0) nSinceLastSeen = 0;\n-    if (nSinceLastTry < 0) nSinceLastTry = 0;\n+    if (nSinceLastSeen < 0)\n+        nSinceLastSeen = 0;\n+    if (nSinceLastTry < 0)\n+        nSinceLastTry = 0;\n \n     fChance *= 600.0 / (600.0 + nSinceLastSeen);\n \n     // deprioritize very recent attempts away\n-    if (nSinceLastTry < 60*10)\n+    if (nSinceLastTry < 60 * 10)\n         fChance *= 0.01;\n \n     // deprioritize 50% after each failed attempt\n-    for (int n=0; n<nAttempts; n++)\n+    for (int n = 0; n < nAttempts; n++)\n         fChance /= 1.5;\n \n     return fChance;\n }\n \n-CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int *pnId)\n+CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int* pnId)\n {\n     std::map<CNetAddr, int>::iterator it = mapAddr.find(addr);\n     if (it == mapAddr.end())\n@@ -93,7 +95,7 @@ CAddrInfo* CAddrMan::Find(const CNetAddr& addr, int *pnId)\n     return NULL;\n }\n \n-CAddrInfo* CAddrMan::Create(const CAddress &addr, const CNetAddr &addrSource, int *pnId)\n+CAddrInfo* CAddrMan::Create(const CAddress& addr, const CNetAddr& addrSource, int* pnId)\n {\n     int nId = nIdCount++;\n     mapInfo[nId] = CAddrInfo(addr, addrSource);\n@@ -127,22 +129,21 @@ void CAddrMan::SwapRandom(unsigned int nRndPos1, unsigned int nRndPos2)\n \n int CAddrMan::SelectTried(int nKBucket)\n {\n-    std::vector<int> &vTried = vvTried[nKBucket];\n+    std::vector<int>& vTried = vvTried[nKBucket];\n \n     // random shuffle the first few elements (using the entire list)\n     // find the least recently tried among them\n     int64_t nOldest = -1;\n     int nOldestPos = -1;\n-    for (unsigned int i = 0; i < ADDRMAN_TRIED_ENTRIES_INSPECT_ON_EVICT && i < vTried.size(); i++)\n-    {\n+    for (unsigned int i = 0; i < ADDRMAN_TRIED_ENTRIES_INSPECT_ON_EVICT && i < vTried.size(); i++) {\n         int nPos = GetRandInt(vTried.size() - i) + i;\n         int nTemp = vTried[nPos];\n         vTried[nPos] = vTried[i];\n         vTried[i] = nTemp;\n         assert(nOldest == -1 || mapInfo.count(nTemp) == 1);\n         if (nOldest == -1 || mapInfo[nTemp].nLastSuccess < mapInfo[nOldest].nLastSuccess) {\n-           nOldest = nTemp;\n-           nOldestPos = nPos;\n+            nOldest = nTemp;\n+            nOldestPos = nPos;\n         }\n     }\n \n@@ -152,18 +153,15 @@ int CAddrMan::SelectTried(int nKBucket)\n int CAddrMan::ShrinkNew(int nUBucket)\n {\n     assert(nUBucket >= 0 && (unsigned int)nUBucket < vvNew.size());\n-    std::set<int> &vNew = vvNew[nUBucket];\n+    std::set<int>& vNew = vvNew[nUBucket];\n \n     // first look for deletable items\n-    for (std::set<int>::iterator it = vNew.begin(); it != vNew.end(); it++)\n-    {\n+    for (std::set<int>::iterator it = vNew.begin(); it != vNew.end(); it++) {\n         assert(mapInfo.count(*it));\n-        CAddrInfo &info = mapInfo[*it];\n-        if (info.IsTerrible())\n-        {\n-            if (--info.nRefCount == 0)\n-            {\n-                SwapRandom(info.nRandomPos, vRandom.size()-1);\n+        CAddrInfo& info = mapInfo[*it];\n+        if (info.IsTerrible()) {\n+            if (--info.nRefCount == 0) {\n+                SwapRandom(info.nRandomPos, vRandom.size() - 1);\n                 vRandom.pop_back();\n                 mapAddr.erase(info);\n                 mapInfo.erase(*it);\n@@ -178,21 +176,18 @@ int CAddrMan::ShrinkNew(int nUBucket)\n     int n[4] = {GetRandInt(vNew.size()), GetRandInt(vNew.size()), GetRandInt(vNew.size()), GetRandInt(vNew.size())};\n     int nI = 0;\n     int nOldest = -1;\n-    for (std::set<int>::iterator it = vNew.begin(); it != vNew.end(); it++)\n-    {\n-        if (nI == n[0] || nI == n[1] || nI == n[2] || nI == n[3])\n-        {\n+    for (std::set<int>::iterator it = vNew.begin(); it != vNew.end(); it++) {\n+        if (nI == n[0] || nI == n[1] || nI == n[2] || nI == n[3]) {\n             assert(nOldest == -1 || mapInfo.count(*it) == 1);\n             if (nOldest == -1 || mapInfo[*it].nTime < mapInfo[nOldest].nTime)\n                 nOldest = *it;\n         }\n         nI++;\n     }\n     assert(mapInfo.count(nOldest) == 1);\n-    CAddrInfo &info = mapInfo[nOldest];\n-    if (--info.nRefCount == 0)\n-    {\n-        SwapRandom(info.nRandomPos, vRandom.size()-1);\n+    CAddrInfo& info = mapInfo[nOldest];\n+    if (--info.nRefCount == 0) {\n+        SwapRandom(info.nRandomPos, vRandom.size() - 1);\n         vRandom.pop_back();\n         mapAddr.erase(info);\n         mapInfo.erase(nOldest);\n@@ -208,8 +203,7 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)\n     assert(vvNew[nOrigin].count(nId) == 1);\n \n     // remove the entry from all new buckets\n-    for (std::vector<std::set<int> >::iterator it = vvNew.begin(); it != vvNew.end(); it++)\n-    {\n+    for (std::vector<std::set<int> >::iterator it = vvNew.begin(); it != vvNew.end(); it++) {\n         if ((*it).erase(nId))\n             info.nRefCount--;\n     }\n@@ -219,11 +213,10 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)\n \n     // what tried bucket to move the entry to\n     int nKBucket = info.GetTriedBucket(nKey);\n-    std::vector<int> &vTried = vvTried[nKBucket];\n+    std::vector<int>& vTried = vvTried[nKBucket];\n \n     // first check whether there is place to just add it\n-    if (vTried.size() < ADDRMAN_TRIED_BUCKET_SIZE)\n-    {\n+    if (vTried.size() < ADDRMAN_TRIED_BUCKET_SIZE) {\n         vTried.push_back(nId);\n         nTried++;\n         info.fInTried = true;\n@@ -236,7 +229,7 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)\n     // find which new bucket it belongs to\n     assert(mapInfo.count(vTried[nPos]) == 1);\n     int nUBucket = mapInfo[vTried[nPos]].GetNewBucket(nKey);\n-    std::set<int> &vNew = vvNew[nUBucket];\n+    std::set<int>& vNew = vvNew[nUBucket];\n \n     // remove the to-be-replaced tried entry from the tried set\n     CAddrInfo& infoOld = mapInfo[vTried[nPos]];\n@@ -245,8 +238,7 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)\n     // do not update nTried, as we are going to move something else there immediately\n \n     // check whether there is place in that one,\n-    if (vNew.size() < ADDRMAN_NEW_BUCKET_SIZE)\n-    {\n+    if (vNew.size() < ADDRMAN_NEW_BUCKET_SIZE) {\n         // if so, move it back there\n         vNew.insert(vTried[nPos]);\n     } else {\n@@ -261,16 +253,16 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)\n     return;\n }\n \n-void CAddrMan::Good_(const CService &addr, int64_t nTime)\n+void CAddrMan::Good_(const CService& addr, int64_t nTime)\n {\n     int nId;\n-    CAddrInfo *pinfo = Find(addr, &nId);\n+    CAddrInfo* pinfo = Find(addr, &nId);\n \n     // if not found, bail out\n     if (!pinfo)\n         return;\n \n-    CAddrInfo &info = *pinfo;\n+    CAddrInfo& info = *pinfo;\n \n     // check whether we are talking about the exact same CService (including same port)\n     if (info != addr)\n@@ -289,38 +281,36 @@ void CAddrMan::Good_(const CService &addr, int64_t nTime)\n     // find a bucket it is in now\n     int nRnd = GetRandInt(vvNew.size());\n     int nUBucket = -1;\n-    for (unsigned int n = 0; n < vvNew.size(); n++)\n-    {\n-        int nB = (n+nRnd) % vvNew.size();\n-        std::set<int> &vNew = vvNew[nB];\n-        if (vNew.count(nId))\n-        {\n+    for (unsigned int n = 0; n < vvNew.size(); n++) {\n+        int nB = (n + nRnd) % vvNew.size();\n+        std::set<int>& vNew = vvNew[nB];\n+        if (vNew.count(nId)) {\n             nUBucket = nB;\n             break;\n         }\n     }\n \n     // if no bucket is found, something bad happened;\n     // TODO: maybe re-add the node, but for now, just bail out\n-    if (nUBucket == -1) return;\n+    if (nUBucket == -1)\n+        return;\n \n     LogPrint(\"addrman\", \"Moving %s to tried\\n\", addr.ToString());\n \n     // move nId to the tried tables\n     MakeTried(info, nId, nUBucket);\n }\n \n-bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty)\n+bool CAddrMan::Add_(const CAddress& addr, const CNetAddr& source, int64_t nTimePenalty)\n {\n     if (!addr.IsRoutable())\n         return false;\n \n     bool fNew = false;\n     int nId;\n-    CAddrInfo *pinfo = Find(addr, &nId);\n+    CAddrInfo* pinfo = Find(addr, &nId);\n \n-    if (pinfo)\n-    {\n+    if (pinfo) {\n         // periodically update nTime\n         bool fCurrentlyOnline = (GetAdjustedTime() - addr.nTime < 24 * 60 * 60);\n         int64_t nUpdateInterval = (fCurrentlyOnline ? 60 * 60 : 24 * 60 * 60);\n@@ -344,7 +334,7 @@ bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimeP\n \n         // stochastic test: previous nRefCount == N: 2^N times harder to increase it\n         int nFactor = 1;\n-        for (int n=0; n<pinfo->nRefCount; n++)\n+        for (int n = 0; n < pinfo->nRefCount; n++)\n             nFactor *= 2;\n         if (nFactor > 1 && (GetRandInt(nFactor) != 0))\n             return false;\n@@ -356,9 +346,8 @@ bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimeP\n     }\n \n     int nUBucket = pinfo->GetNewBucket(nKey, source);\n-    std::set<int> &vNew = vvNew[nUBucket];\n-    if (!vNew.count(nId))\n-    {\n+    std::set<int>& vNew = vvNew[nUBucket];\n+    if (!vNew.count(nId)) {\n         pinfo->nRefCount++;\n         if (vNew.size() == ADDRMAN_NEW_BUCKET_SIZE)\n             ShrinkNew(nUBucket);\n@@ -367,15 +356,15 @@ bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimeP\n     return fNew;\n }\n \n-void CAddrMan::Attempt_(const CService &addr, int64_t nTime)\n+void CAddrMan::Attempt_(const CService& addr, int64_t nTime)\n {\n-    CAddrInfo *pinfo = Find(addr);\n+    CAddrInfo* pinfo = Find(addr);\n \n     // if not found, bail out\n     if (!pinfo)\n         return;\n \n-    CAddrInfo &info = *pinfo;\n+    CAddrInfo& info = *pinfo;\n \n     // check whether we are talking about the exact same CService (including same port)\n     if (info != addr)\n@@ -393,37 +382,36 @@ CAddress CAddrMan::Select_(int nUnkBias)\n \n     double nCorTried = sqrt(nTried) * (100.0 - nUnkBias);\n     double nCorNew = sqrt(nNew) * nUnkBias;\n-    if ((nCorTried + nCorNew)*GetRandInt(1<<30)/(1<<30) < nCorTried)\n-    {\n+    if ((nCorTried + nCorNew) * GetRandInt(1 << 30) / (1 << 30) < nCorTried) {\n         // use a tried node\n         double fChanceFactor = 1.0;\n-        while(1)\n-        {\n+        while (1) {\n             int nKBucket = GetRandInt(vvTried.size());\n-            std::vector<int> &vTried = vvTried[nKBucket];\n-            if (vTried.size() == 0) continue;\n+            std::vector<int>& vTried = vvTried[nKBucket];\n+            if (vTried.size() == 0)\n+                continue;\n             int nPos = GetRandInt(vTried.size());\n             assert(mapInfo.count(vTried[nPos]) == 1);\n-            CAddrInfo &info = mapInfo[vTried[nPos]];\n-            if (GetRandInt(1<<30) < fChanceFactor*info.GetChance()*(1<<30))\n+            CAddrInfo& info = mapInfo[vTried[nPos]];\n+            if (GetRandInt(1 << 30) < fChanceFactor * info.GetChance() * (1 << 30))\n                 return info;\n             fChanceFactor *= 1.2;\n         }\n     } else {\n         // use a new node\n         double fChanceFactor = 1.0;\n-        while(1)\n-        {\n+        while (1) {\n             int nUBucket = GetRandInt(vvNew.size());\n-            std::set<int> &vNew = vvNew[nUBucket];\n-            if (vNew.size() == 0) continue;\n+            std::set<int>& vNew = vvNew[nUBucket];\n+            if (vNew.size() == 0)\n+                continue;\n             int nPos = GetRandInt(vNew.size());\n             std::set<int>::iterator it = vNew.begin();\n             while (nPos--)\n                 it++;\n             assert(mapInfo.count(*it) == 1);\n-            CAddrInfo &info = mapInfo[*it];\n-            if (GetRandInt(1<<30) < fChanceFactor*info.GetChance()*(1<<30))\n+            CAddrInfo& info = mapInfo[*it];\n+            if (GetRandInt(1 << 30) < fChanceFactor * info.GetChance() * (1 << 30))\n                 return info;\n             fChanceFactor *= 1.2;\n         }\n@@ -436,69 +424,76 @@ int CAddrMan::Check_()\n     std::set<int> setTried;\n     std::map<int, int> mapNew;\n \n-    if (vRandom.size() != nTried + nNew) return -7;\n+    if (vRandom.size() != nTried + nNew)\n+        return -7;\n \n-    for (std::map<int, CAddrInfo>::iterator it = mapInfo.begin(); it != mapInfo.end(); it++)\n-    {\n+    for (std::map<int, CAddrInfo>::iterator it = mapInfo.begin(); it != mapInfo.end(); it++) {\n         int n = (*it).first;\n-        CAddrInfo &info = (*it).second;\n-        if (info.fInTried)\n-        {\n-\n-            if (!info.nLastSuccess) return -1;\n-            if (info.nRefCount) return -2;\n+        CAddrInfo& info = (*it).second;\n+        if (info.fInTried) {\n+            if (!info.nLastSuccess)\n+                return -1;\n+            if (info.nRefCount)\n+                return -2;\n             setTried.insert(n);\n         } else {\n-            if (info.nRefCount < 0 || info.nRefCount > ADDRMAN_NEW_BUCKETS_PER_ADDRESS) return -3;\n-            if (!info.nRefCount) return -4;\n+            if (info.nRefCount < 0 || info.nRefCount > ADDRMAN_NEW_BUCKETS_PER_ADDRESS)\n+                return -3;\n+            if (!info.nRefCount)\n+                return -4;\n             mapNew[n] = info.nRefCount;\n         }\n-        if (mapAddr[info] != n) return -5;\n-        if (info.nRandomPos<0 || info.nRandomPos>=vRandom.size() || vRandom[info.nRandomPos] != n) return -14;\n-        if (info.nLastTry < 0) return -6;\n-        if (info.nLastSuccess < 0) return -8;\n+        if (mapAddr[info] != n)\n+            return -5;\n+        if (info.nRandomPos < 0 || info.nRandomPos >= vRandom.size() || vRandom[info.nRandomPos] != n)\n+            return -14;\n+        if (info.nLastTry < 0)\n+            return -6;\n+        if (info.nLastSuccess < 0)\n+            return -8;\n     }\n \n-    if (setTried.size() != nTried) return -9;\n-    if (mapNew.size() != nNew) return -10;\n+    if (setTried.size() != nTried)\n+        return -9;\n+    if (mapNew.size() != nNew)\n+        return -10;\n \n-    for (int n=0; n<vvTried.size(); n++)\n-    {\n-        std::vector<int> &vTried = vvTried[n];\n-        for (std::vector<int>::iterator it = vTried.begin(); it != vTried.end(); it++)\n-        {\n-            if (!setTried.count(*it)) return -11;\n+    for (int n = 0; n < vvTried.size(); n++) {\n+        std::vector<int>& vTried = vvTried[n];\n+        for (std::vector<int>::iterator it = vTried.begin(); it != vTried.end(); it++) {\n+            if (!setTried.count(*it))\n+                return -11;\n             setTried.erase(*it);\n         }\n     }\n \n-    for (int n=0; n<vvNew.size(); n++)\n-    {\n-        std::set<int> &vNew = vvNew[n];\n-        for (std::set<int>::iterator it = vNew.begin(); it != vNew.end(); it++)\n-        {\n-            if (!mapNew.count(*it)) return -12;\n+    for (int n = 0; n < vvNew.size(); n++) {\n+        std::set<int>& vNew = vvNew[n];\n+        for (std::set<int>::iterator it = vNew.begin(); it != vNew.end(); it++) {\n+            if (!mapNew.count(*it))\n+                return -12;\n             if (--mapNew[*it] == 0)\n                 mapNew.erase(*it);\n         }\n     }\n \n-    if (setTried.size()) return -13;\n-    if (mapNew.size()) return -15;\n+    if (setTried.size())\n+        return -13;\n+    if (mapNew.size())\n+        return -15;\n \n     return 0;\n }\n #endif\n \n-void CAddrMan::GetAddr_(std::vector<CAddress> &vAddr)\n+void CAddrMan::GetAddr_(std::vector<CAddress>& vAddr)\n {\n     unsigned int nNodes = ADDRMAN_GETADDR_MAX_PCT * vRandom.size() / 100;\n     if (nNodes > ADDRMAN_GETADDR_MAX)\n         nNodes = ADDRMAN_GETADDR_MAX;\n \n     // gather a list of random nodes, skipping those of low quality\n-    for (unsigned int n = 0; n < vRandom.size(); n++)\n-    {\n+    for (unsigned int n = 0; n < vRandom.size(); n++) {\n         if (vAddr.size() >= nNodes)\n             break;\n \n@@ -512,15 +507,15 @@ void CAddrMan::GetAddr_(std::vector<CAddress> &vAddr)\n     }\n }\n \n-void CAddrMan::Connected_(const CService &addr, int64_t nTime)\n+void CAddrMan::Connected_(const CService& addr, int64_t nTime)\n {\n-    CAddrInfo *pinfo = Find(addr);\n+    CAddrInfo* pinfo = Find(addr);\n \n     // if not found, bail out\n     if (!pinfo)\n         return;\n \n-    CAddrInfo &info = *pinfo;\n+    CAddrInfo& info = *pinfo;\n \n     // check whether we are talking about the exact same CService (including same port)\n     if (info != addr)"
      },
      {
        "sha": "dfe26f1b1e222196f6a76391bbb783572a51eabb",
        "filename": "src/allocators.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/allocators.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/allocators.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.cpp?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -37,13 +37,13 @@ static inline size_t GetSystemPageSize()\n     page_size = sSysInfo.dwPageSize;\n #elif defined(PAGESIZE) // defined in limits.h\n     page_size = PAGESIZE;\n-#else // assume some POSIX OS\n+#else                   // assume some POSIX OS\n     page_size = sysconf(_SC_PAGESIZE);\n #endif\n     return page_size;\n }\n \n-bool MemoryPageLocker::Lock(const void *addr, size_t len)\n+bool MemoryPageLocker::Lock(const void* addr, size_t len)\n {\n #ifdef WIN32\n     return VirtualLock(const_cast<void*>(addr), len) != 0;\n@@ -52,7 +52,7 @@ bool MemoryPageLocker::Lock(const void *addr, size_t len)\n #endif\n }\n \n-bool MemoryPageLocker::Unlock(const void *addr, size_t len)\n+bool MemoryPageLocker::Unlock(const void* addr, size_t len)\n {\n #ifdef WIN32\n     return VirtualUnlock(const_cast<void*>(addr), len) != 0;\n@@ -64,4 +64,3 @@ bool MemoryPageLocker::Unlock(const void *addr, size_t len)\n LockedPageManager::LockedPageManager() : LockedPageManagerBase<MemoryPageLocker>(GetSystemPageSize())\n {\n }\n-"
      },
      {
        "sha": "6b69e7ae69cf28f658588ea81011d69ff351d312",
        "filename": "src/allocators.h",
        "status": "modified",
        "additions": 49,
        "deletions": 41,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/allocators.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/allocators.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -26,14 +26,14 @@\n  * small objects that span up to a few pages, mostly smaller than a page. To support large allocations,\n  * something like an interval tree would be the preferred data structure.\n  */\n-template <class Locker> class LockedPageManagerBase\n+template <class Locker>\n+class LockedPageManagerBase\n {\n public:\n-    LockedPageManagerBase(size_t page_size):\n-        page_size(page_size)\n+    LockedPageManagerBase(size_t page_size) : page_size(page_size)\n     {\n         // Determine bitmask for extracting page from address\n-        assert(!(page_size & (page_size-1))); // size must be power of two\n+        assert(!(page_size & (page_size - 1))); // size must be power of two\n         page_mask = ~(page_size - 1);\n     }\n \n@@ -44,43 +44,42 @@ template <class Locker> class LockedPageManagerBase\n \n \n     // For all pages in affected range, increase lock count\n-    void LockRange(void *p, size_t size)\n+    void LockRange(void* p, size_t size)\n     {\n         boost::mutex::scoped_lock lock(mutex);\n-        if(!size) return;\n+        if (!size)\n+            return;\n         const size_t base_addr = reinterpret_cast<size_t>(p);\n         const size_t start_page = base_addr & page_mask;\n         const size_t end_page = (base_addr + size - 1) & page_mask;\n-        for(size_t page = start_page; page <= end_page; page += page_size)\n-        {\n+        for (size_t page = start_page; page <= end_page; page += page_size) {\n             Histogram::iterator it = histogram.find(page);\n-            if(it == histogram.end()) // Newly locked page\n+            if (it == histogram.end()) // Newly locked page\n             {\n                 locker.Lock(reinterpret_cast<void*>(page), page_size);\n                 histogram.insert(std::make_pair(page, 1));\n-            }\n-            else // Page was already locked; increase counter\n+            } else // Page was already locked; increase counter\n             {\n                 it->second += 1;\n             }\n         }\n     }\n \n     // For all pages in affected range, decrease lock count\n-    void UnlockRange(void *p, size_t size)\n+    void UnlockRange(void* p, size_t size)\n     {\n         boost::mutex::scoped_lock lock(mutex);\n-        if(!size) return;\n+        if (!size)\n+            return;\n         const size_t base_addr = reinterpret_cast<size_t>(p);\n         const size_t start_page = base_addr & page_mask;\n         const size_t end_page = (base_addr + size - 1) & page_mask;\n-        for(size_t page = start_page; page <= end_page; page += page_size)\n-        {\n+        for (size_t page = start_page; page <= end_page; page += page_size) {\n             Histogram::iterator it = histogram.find(page);\n             assert(it != histogram.end()); // Cannot unlock an area that was not locked\n             // Decrease counter for page, when it is zero, the page will be unlocked\n             it->second -= 1;\n-            if(it->second == 0) // Nothing on the page anymore that keeps it locked\n+            if (it->second == 0) // Nothing on the page anymore that keeps it locked\n             {\n                 // Unlock page and remove the count from histogram\n                 locker.Unlock(reinterpret_cast<void*>(page), page_size);\n@@ -101,7 +100,7 @@ template <class Locker> class LockedPageManagerBase\n     boost::mutex mutex;\n     size_t page_size, page_mask;\n     // map of page base address to lock count\n-    typedef std::map<size_t,int> Histogram;\n+    typedef std::map<size_t, int> Histogram;\n     Histogram histogram;\n };\n \n@@ -116,11 +115,11 @@ class MemoryPageLocker\n     /** Lock memory pages.\n      * addr and len must be a multiple of the system page size\n      */\n-    bool Lock(const void *addr, size_t len);\n+    bool Lock(const void* addr, size_t len);\n     /** Unlock memory pages.\n      * addr and len must be a multiple of the system page size\n      */\n-    bool Unlock(const void *addr, size_t len);\n+    bool Unlock(const void* addr, size_t len);\n };\n \n /**\n@@ -134,10 +133,10 @@ class MemoryPageLocker\n  * secure_allocator are created. So instead of having LockedPageManager also be\n  * static-initialized, it is created on demand.\n  */\n-class LockedPageManager: public LockedPageManagerBase<MemoryPageLocker>\n+class LockedPageManager : public LockedPageManagerBase<MemoryPageLocker>\n {\n public:\n-    static LockedPageManager& Instance() \n+    static LockedPageManager& Instance()\n     {\n         boost::call_once(LockedPageManager::CreateInstance, LockedPageManager::init_flag);\n         return *LockedPageManager::_instance;\n@@ -165,11 +164,15 @@ class LockedPageManager: public LockedPageManagerBase<MemoryPageLocker>\n // Functions for directly locking/unlocking memory objects.\n // Intended for non-dynamically allocated structures.\n //\n-template<typename T> void LockObject(const T &t) {\n+template <typename T>\n+void LockObject(const T& t)\n+{\n     LockedPageManager::Instance().LockRange((void*)(&t), sizeof(T));\n }\n \n-template<typename T> void UnlockObject(const T &t) {\n+template <typename T>\n+void UnlockObject(const T& t)\n+{\n     OPENSSL_cleanse((void*)(&t), sizeof(T));\n     LockedPageManager::Instance().UnlockRange((void*)(&t), sizeof(T));\n }\n@@ -178,13 +181,12 @@ template<typename T> void UnlockObject(const T &t) {\n // Allocator that locks its contents from being paged\n // out of memory and clears its contents before deletion.\n //\n-template<typename T>\n-struct secure_allocator : public std::allocator<T>\n-{\n+template <typename T>\n+struct secure_allocator : public std::allocator<T> {\n     // MSVC8 default copy constructor is broken\n     typedef std::allocator<T> base;\n     typedef typename base::size_type size_type;\n-    typedef typename base::difference_type  difference_type;\n+    typedef typename base::difference_type difference_type;\n     typedef typename base::pointer pointer;\n     typedef typename base::const_pointer const_pointer;\n     typedef typename base::reference reference;\n@@ -193,14 +195,18 @@ struct secure_allocator : public std::allocator<T>\n     secure_allocator() throw() {}\n     secure_allocator(const secure_allocator& a) throw() : base(a) {}\n     template <typename U>\n-    secure_allocator(const secure_allocator<U>& a) throw() : base(a) {}\n+    secure_allocator(const secure_allocator<U>& a) throw() : base(a)\n+    {\n+    }\n     ~secure_allocator() throw() {}\n-    template<typename _Other> struct rebind\n-    { typedef secure_allocator<_Other> other; };\n+    template <typename _Other>\n+    struct rebind {\n+        typedef secure_allocator<_Other> other;\n+    };\n \n-    T* allocate(std::size_t n, const void *hint = 0)\n+    T* allocate(std::size_t n, const void* hint = 0)\n     {\n-        T *p;\n+        T* p;\n         p = std::allocator<T>::allocate(n, hint);\n         if (p != NULL)\n             LockedPageManager::Instance().LockRange(p, sizeof(T) * n);\n@@ -209,8 +215,7 @@ struct secure_allocator : public std::allocator<T>\n \n     void deallocate(T* p, std::size_t n)\n     {\n-        if (p != NULL)\n-        {\n+        if (p != NULL) {\n             OPENSSL_cleanse(p, sizeof(T) * n);\n             LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n         }\n@@ -222,13 +227,12 @@ struct secure_allocator : public std::allocator<T>\n //\n // Allocator that clears its contents before deletion.\n //\n-template<typename T>\n-struct zero_after_free_allocator : public std::allocator<T>\n-{\n+template <typename T>\n+struct zero_after_free_allocator : public std::allocator<T> {\n     // MSVC8 default copy constructor is broken\n     typedef std::allocator<T> base;\n     typedef typename base::size_type size_type;\n-    typedef typename base::difference_type  difference_type;\n+    typedef typename base::difference_type difference_type;\n     typedef typename base::pointer pointer;\n     typedef typename base::const_pointer const_pointer;\n     typedef typename base::reference reference;\n@@ -237,10 +241,14 @@ struct zero_after_free_allocator : public std::allocator<T>\n     zero_after_free_allocator() throw() {}\n     zero_after_free_allocator(const zero_after_free_allocator& a) throw() : base(a) {}\n     template <typename U>\n-    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a) {}\n+    zero_after_free_allocator(const zero_after_free_allocator<U>& a) throw() : base(a)\n+    {\n+    }\n     ~zero_after_free_allocator() throw() {}\n-    template<typename _Other> struct rebind\n-    { typedef zero_after_free_allocator<_Other> other; };\n+    template <typename _Other>\n+    struct rebind {\n+        typedef zero_after_free_allocator<_Other> other;\n+    };\n \n     void deallocate(T* p, std::size_t n)\n     {"
      },
      {
        "sha": "9750f0a161d9e4221c7dfd870ea12dd8ee3cf605",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 80,
        "deletions": 49,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -18,7 +18,8 @@\n /* All alphanumeric characters except for \"0\", \"I\", \"O\", and \"l\" */\n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n \n-bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n+bool DecodeBase58(const char* psz, std::vector<unsigned char>& vch)\n+{\n     // Skip leading spaces.\n     while (*psz && isspace(*psz))\n         psz++;\n@@ -33,7 +34,7 @@ bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n     // Process the characters.\n     while (*psz && !isspace(*psz)) {\n         // Decode base58 character\n-        const char *ch = strchr(pszBase58, *psz);\n+        const char* ch = strchr(pszBase58, *psz);\n         if (ch == NULL)\n             return false;\n         // Apply \"b256 = b256 * 58 + ch\".\n@@ -59,11 +60,12 @@ bool DecodeBase58(const char *psz, std::vector<unsigned char>& vch) {\n     vch.reserve(zeroes + (b256.end() - it));\n     vch.assign(zeroes, 0x00);\n     while (it != b256.end())\n-      vch.push_back(*(it++));\n+        vch.push_back(*(it++));\n     return true;\n }\n \n-std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend) {\n+std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n+{\n     // Skip & count leading zeroes.\n     int zeroes = 0;\n     while (pbegin != pend && *pbegin == 0) {\n@@ -97,61 +99,68 @@ std::string EncodeBase58(const unsigned char* pbegin, const unsigned char* pend)\n     return str;\n }\n \n-std::string EncodeBase58(const std::vector<unsigned char>& vch) {\n+std::string EncodeBase58(const std::vector<unsigned char>& vch)\n+{\n     return EncodeBase58(&vch[0], &vch[0] + vch.size());\n }\n \n-bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet) {\n+bool DecodeBase58(const std::string& str, std::vector<unsigned char>& vchRet)\n+{\n     return DecodeBase58(str.c_str(), vchRet);\n }\n \n-std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn) {\n+std::string EncodeBase58Check(const std::vector<unsigned char>& vchIn)\n+{\n     // add 4-byte hash check to the end\n     std::vector<unsigned char> vch(vchIn);\n     uint256 hash = Hash(vch.begin(), vch.end());\n     vch.insert(vch.end(), (unsigned char*)&hash, (unsigned char*)&hash + 4);\n     return EncodeBase58(vch);\n }\n \n-bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet) {\n+bool DecodeBase58Check(const char* psz, std::vector<unsigned char>& vchRet)\n+{\n     if (!DecodeBase58(psz, vchRet) ||\n-        (vchRet.size() < 4))\n-    {\n+        (vchRet.size() < 4)) {\n         vchRet.clear();\n         return false;\n     }\n     // re-calculate the checksum, insure it matches the included 4-byte checksum\n-    uint256 hash = Hash(vchRet.begin(), vchRet.end()-4);\n-    if (memcmp(&hash, &vchRet.end()[-4], 4) != 0)\n-    {\n+    uint256 hash = Hash(vchRet.begin(), vchRet.end() - 4);\n+    if (memcmp(&hash, &vchRet.end()[-4], 4) != 0) {\n         vchRet.clear();\n         return false;\n     }\n-    vchRet.resize(vchRet.size()-4);\n+    vchRet.resize(vchRet.size() - 4);\n     return true;\n }\n \n-bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet) {\n+bool DecodeBase58Check(const std::string& str, std::vector<unsigned char>& vchRet)\n+{\n     return DecodeBase58Check(str.c_str(), vchRet);\n }\n \n-CBase58Data::CBase58Data() {\n+CBase58Data::CBase58Data()\n+{\n     vchVersion.clear();\n     vchData.clear();\n }\n \n-void CBase58Data::SetData(const std::vector<unsigned char> &vchVersionIn, const void* pdata, size_t nSize) {\n+void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const void* pdata, size_t nSize)\n+{\n     vchVersion = vchVersionIn;\n     vchData.resize(nSize);\n     if (!vchData.empty())\n         memcpy(&vchData[0], pdata, nSize);\n }\n \n-void CBase58Data::SetData(const std::vector<unsigned char> &vchVersionIn, const unsigned char *pbegin, const unsigned char *pend) {\n+void CBase58Data::SetData(const std::vector<unsigned char>& vchVersionIn, const unsigned char* pbegin, const unsigned char* pend)\n+{\n     SetData(vchVersionIn, (void*)pbegin, pend - pbegin);\n }\n \n-bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes) {\n+bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes)\n+{\n     std::vector<unsigned char> vchTemp;\n     bool rc58 = DecodeBase58Check(psz, vchTemp);\n     if ((!rc58) || (vchTemp.size() < nVersionBytes)) {\n@@ -167,65 +176,80 @@ bool CBase58Data::SetString(const char* psz, unsigned int nVersionBytes) {\n     return true;\n }\n \n-bool CBase58Data::SetString(const std::string& str) {\n+bool CBase58Data::SetString(const std::string& str)\n+{\n     return SetString(str.c_str());\n }\n \n-std::string CBase58Data::ToString() const {\n+std::string CBase58Data::ToString() const\n+{\n     std::vector<unsigned char> vch = vchVersion;\n     vch.insert(vch.end(), vchData.begin(), vchData.end());\n     return EncodeBase58Check(vch);\n }\n \n-int CBase58Data::CompareTo(const CBase58Data& b58) const {\n-    if (vchVersion < b58.vchVersion) return -1;\n-    if (vchVersion > b58.vchVersion) return  1;\n-    if (vchData < b58.vchData)   return -1;\n-    if (vchData > b58.vchData)   return  1;\n+int CBase58Data::CompareTo(const CBase58Data& b58) const\n+{\n+    if (vchVersion < b58.vchVersion)\n+        return -1;\n+    if (vchVersion > b58.vchVersion)\n+        return 1;\n+    if (vchData < b58.vchData)\n+        return -1;\n+    if (vchData > b58.vchData)\n+        return 1;\n     return 0;\n }\n \n-namespace {\n+namespace\n+{\n+class CBitcoinAddressVisitor : public boost::static_visitor<bool>\n+{\n+private:\n+    CBitcoinAddress* addr;\n \n-    class CBitcoinAddressVisitor : public boost::static_visitor<bool> {\n-    private:\n-        CBitcoinAddress *addr;\n-    public:\n-        CBitcoinAddressVisitor(CBitcoinAddress *addrIn) : addr(addrIn) { }\n+public:\n+    CBitcoinAddressVisitor(CBitcoinAddress* addrIn) : addr(addrIn) {}\n \n-        bool operator()(const CKeyID &id) const { return addr->Set(id); }\n-        bool operator()(const CScriptID &id) const { return addr->Set(id); }\n-        bool operator()(const CNoDestination &no) const { return false; }\n-    };\n+    bool operator()(const CKeyID& id) const { return addr->Set(id); }\n+    bool operator()(const CScriptID& id) const { return addr->Set(id); }\n+    bool operator()(const CNoDestination& no) const { return false; }\n+};\n \n } // anon namespace\n \n-bool CBitcoinAddress::Set(const CKeyID &id) {\n+bool CBitcoinAddress::Set(const CKeyID& id)\n+{\n     SetData(Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS), &id, 20);\n     return true;\n }\n \n-bool CBitcoinAddress::Set(const CScriptID &id) {\n+bool CBitcoinAddress::Set(const CScriptID& id)\n+{\n     SetData(Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS), &id, 20);\n     return true;\n }\n \n-bool CBitcoinAddress::Set(const CTxDestination &dest) {\n+bool CBitcoinAddress::Set(const CTxDestination& dest)\n+{\n     return boost::apply_visitor(CBitcoinAddressVisitor(this), dest);\n }\n \n-bool CBitcoinAddress::IsValid() const {\n+bool CBitcoinAddress::IsValid() const\n+{\n     return IsValid(Params());\n }\n \n-bool CBitcoinAddress::IsValid(const CChainParams &params) const {\n+bool CBitcoinAddress::IsValid(const CChainParams& params) const\n+{\n     bool fCorrectSize = vchData.size() == 20;\n     bool fKnownVersion = vchVersion == params.Base58Prefix(CChainParams::PUBKEY_ADDRESS) ||\n                          vchVersion == params.Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n     return fCorrectSize && fKnownVersion;\n }\n \n-CTxDestination CBitcoinAddress::Get() const {\n+CTxDestination CBitcoinAddress::Get() const\n+{\n     if (!IsValid())\n         return CNoDestination();\n     uint160 id;\n@@ -238,7 +262,8 @@ CTxDestination CBitcoinAddress::Get() const {\n         return CNoDestination();\n }\n \n-bool CBitcoinAddress::GetKeyID(CKeyID &keyID) const {\n+bool CBitcoinAddress::GetKeyID(CKeyID& keyID) const\n+{\n     if (!IsValid() || vchVersion != Params().Base58Prefix(CChainParams::PUBKEY_ADDRESS))\n         return false;\n     uint160 id;\n@@ -247,33 +272,39 @@ bool CBitcoinAddress::GetKeyID(CKeyID &keyID) const {\n     return true;\n }\n \n-bool CBitcoinAddress::IsScript() const {\n+bool CBitcoinAddress::IsScript() const\n+{\n     return IsValid() && vchVersion == Params().Base58Prefix(CChainParams::SCRIPT_ADDRESS);\n }\n \n-void CBitcoinSecret::SetKey(const CKey& vchSecret) {\n+void CBitcoinSecret::SetKey(const CKey& vchSecret)\n+{\n     assert(vchSecret.IsValid());\n     SetData(Params().Base58Prefix(CChainParams::SECRET_KEY), vchSecret.begin(), vchSecret.size());\n     if (vchSecret.IsCompressed())\n         vchData.push_back(1);\n }\n \n-CKey CBitcoinSecret::GetKey() {\n+CKey CBitcoinSecret::GetKey()\n+{\n     CKey ret;\n     ret.Set(&vchData[0], &vchData[32], vchData.size() > 32 && vchData[32] == 1);\n     return ret;\n }\n \n-bool CBitcoinSecret::IsValid() const {\n+bool CBitcoinSecret::IsValid() const\n+{\n     bool fExpectedFormat = vchData.size() == 32 || (vchData.size() == 33 && vchData[32] == 1);\n     bool fCorrectVersion = vchVersion == Params().Base58Prefix(CChainParams::SECRET_KEY);\n     return fExpectedFormat && fCorrectVersion;\n }\n \n-bool CBitcoinSecret::SetString(const char* pszSecret) {\n+bool CBitcoinSecret::SetString(const char* pszSecret)\n+{\n     return CBase58Data::SetString(pszSecret) && IsValid();\n }\n \n-bool CBitcoinSecret::SetString(const std::string& strSecret) {\n+bool CBitcoinSecret::SetString(const std::string& strSecret)\n+{\n     return SetString(strSecret.c_str());\n }"
      },
      {
        "sha": "98bb5b855fe3a10ca351dd2a7ab4a30417f81f66",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 23,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -17,9 +17,11 @@ using namespace boost::assign;\n // Main network\n //\n \n-class CBaseMainParams : public CBaseChainParams {\n+class CBaseMainParams : public CBaseChainParams\n+{\n public:\n-    CBaseMainParams() {\n+    CBaseMainParams()\n+    {\n         networkID = CBaseChainParams::MAIN;\n         nRPCPort = 8332;\n     }\n@@ -29,9 +31,11 @@ static CBaseMainParams mainParams;\n //\n // Testnet (v3)\n //\n-class CBaseTestNetParams : public CBaseMainParams {\n+class CBaseTestNetParams : public CBaseMainParams\n+{\n public:\n-    CBaseTestNetParams() {\n+    CBaseTestNetParams()\n+    {\n         networkID = CBaseChainParams::TESTNET;\n         nRPCPort = 18332;\n         strDataDir = \"testnet3\";\n@@ -42,40 +46,45 @@ static CBaseTestNetParams testNetParams;\n //\n // Regression test\n //\n-class CBaseRegTestParams : public CBaseTestNetParams {\n+class CBaseRegTestParams : public CBaseTestNetParams\n+{\n public:\n-    CBaseRegTestParams() {\n+    CBaseRegTestParams()\n+    {\n         networkID = CBaseChainParams::REGTEST;\n         strDataDir = \"regtest\";\n     }\n };\n static CBaseRegTestParams regTestParams;\n \n-static CBaseChainParams *pCurrentBaseParams = 0;\n+static CBaseChainParams* pCurrentBaseParams = 0;\n \n-const CBaseChainParams &BaseParams() {\n+const CBaseChainParams& BaseParams()\n+{\n     assert(pCurrentBaseParams);\n     return *pCurrentBaseParams;\n }\n \n-void SelectBaseParams(CBaseChainParams::Network network) {\n+void SelectBaseParams(CBaseChainParams::Network network)\n+{\n     switch (network) {\n-        case CBaseChainParams::MAIN:\n-            pCurrentBaseParams = &mainParams;\n-            break;\n-        case CBaseChainParams::TESTNET:\n-            pCurrentBaseParams = &testNetParams;\n-            break;\n-        case CBaseChainParams::REGTEST:\n-            pCurrentBaseParams = &regTestParams;\n-            break;\n-        default:\n-            assert(false && \"Unimplemented network\");\n-            return;\n+    case CBaseChainParams::MAIN:\n+        pCurrentBaseParams = &mainParams;\n+        break;\n+    case CBaseChainParams::TESTNET:\n+        pCurrentBaseParams = &testNetParams;\n+        break;\n+    case CBaseChainParams::REGTEST:\n+        pCurrentBaseParams = &regTestParams;\n+        break;\n+    default:\n+        assert(false && \"Unimplemented network\");\n+        return;\n     }\n }\n \n-bool SelectBaseParamsFromCommandLine() {\n+bool SelectBaseParamsFromCommandLine()\n+{\n     bool fRegTest = GetBoolArg(\"-regtest\", false);\n     bool fTestNet = GetBoolArg(\"-testnet\", false);\n \n@@ -93,6 +102,7 @@ bool SelectBaseParamsFromCommandLine() {\n     return true;\n }\n \n-bool AreBaseParamsConfigured() {\n+bool AreBaseParamsConfigured()\n+{\n     return pCurrentBaseParams != NULL;\n }"
      },
      {
        "sha": "c054f03f17398e4c8ecf6c69000c7925000b2cef",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -26,6 +26,7 @@ class CBaseChainParams\n     const std::string& DataDir() const { return strDataDir; }\n     int RPCPort() const { return nRPCPort; }\n     Network NetworkID() const { return networkID; }\n+\n protected:\n     CBaseChainParams() {}\n \n@@ -38,7 +39,7 @@ class CBaseChainParams\n  * Return the currently selected parameters. This won't change after app startup\n  * outside of the unit tests.\n  */\n-const CBaseChainParams &BaseParams();\n+const CBaseChainParams& BaseParams();\n \n /** Sets the params returned by Params() to those for the given network. */\n void SelectBaseParams(CBaseChainParams::Network network);"
      },
      {
        "sha": "fca046559ae923b6ada8ff085849edf81f03621d",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -13,20 +13,20 @@ class uint256;\n /** Block-chain checkpoints are compiled-in sanity checks.\n  * They are updated every release or three.\n  */\n-namespace Checkpoints {\n+namespace Checkpoints\n+{\n+// Returns true if block passes checkpoint checks\n+bool CheckBlock(int nHeight, const uint256& hash);\n \n-    // Returns true if block passes checkpoint checks\n-    bool CheckBlock(int nHeight, const uint256& hash);\n+// Return conservative estimate of total number of blocks, 0 if unknown\n+int GetTotalBlocksEstimate();\n \n-    // Return conservative estimate of total number of blocks, 0 if unknown\n-    int GetTotalBlocksEstimate();\n+// Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n+CBlockIndex* GetLastCheckpoint();\n \n-    // Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n-    CBlockIndex* GetLastCheckpoint();\n+double GuessVerificationProgress(CBlockIndex* pindex, bool fSigchecks = true);\n \n-    double GuessVerificationProgress(CBlockIndex *pindex, bool fSigchecks = true);\n-\n-    extern bool fEnabled;\n+extern bool fEnabled;\n \n } //namespace Checkpoints\n "
      },
      {
        "sha": "b2a713e64671dfbbfd787b182dfbc5aee74d274f",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 36,
        "deletions": 23,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -13,7 +13,8 @@\n #include <boost/thread/locks.hpp>\n #include <boost/thread/mutex.hpp>\n \n-template<typename T> class CCheckQueueControl;\n+template <typename T>\n+class CCheckQueueControl;\n \n /** Queue for verifications that have to be performed.\n   * The verifications are represented by a type T, which must provide an\n@@ -24,7 +25,9 @@ template<typename T> class CCheckQueueControl;\n   * the master is done adding work, it temporarily joins the worker pool\n   * as an N'th worker, until all jobs are done.\n   */\n-template<typename T> class CCheckQueue {\n+template <typename T>\n+class CCheckQueue\n+{\n private:\n     // Mutex to protect the inner state\n     boost::mutex mutex;\n@@ -60,8 +63,9 @@ template<typename T> class CCheckQueue {\n     unsigned int nBatchSize;\n \n     // Internal function that does bulk of the verification work.\n-    bool Loop(bool fMaster = false) {\n-        boost::condition_variable &cond = fMaster ? condMaster : condWorker;\n+    bool Loop(bool fMaster = false)\n+    {\n+        boost::condition_variable& cond = fMaster ? condMaster : condWorker;\n         std::vector<T> vChecks;\n         vChecks.reserve(nBatchSize);\n         unsigned int nNow = 0;\n@@ -103,41 +107,43 @@ template<typename T> class CCheckQueue {\n                 nNow = std::max(1U, std::min(nBatchSize, (unsigned int)queue.size() / (nTotal + nIdle + 1)));\n                 vChecks.resize(nNow);\n                 for (unsigned int i = 0; i < nNow; i++) {\n-                     // We want the lock on the mutex to be as short as possible, so swap jobs from the global\n-                     // queue to the local batch vector instead of copying.\n-                     vChecks[i].swap(queue.back());\n-                     queue.pop_back();\n+                    // We want the lock on the mutex to be as short as possible, so swap jobs from the global\n+                    // queue to the local batch vector instead of copying.\n+                    vChecks[i].swap(queue.back());\n+                    queue.pop_back();\n                 }\n                 // Check whether we need to do work at all\n                 fOk = fAllOk;\n             }\n             // execute work\n-            BOOST_FOREACH(T &check, vChecks)\n+            BOOST_FOREACH (T& check, vChecks)\n                 if (fOk)\n                     fOk = check();\n             vChecks.clear();\n-        } while(true);\n+        } while (true);\n     }\n \n public:\n     // Create a new check queue\n-    CCheckQueue(unsigned int nBatchSizeIn) :\n-        nIdle(0), nTotal(0), fAllOk(true), nTodo(0), fQuit(false), nBatchSize(nBatchSizeIn) {}\n+    CCheckQueue(unsigned int nBatchSizeIn) : nIdle(0), nTotal(0), fAllOk(true), nTodo(0), fQuit(false), nBatchSize(nBatchSizeIn) {}\n \n     // Worker thread\n-    void Thread() {\n+    void Thread()\n+    {\n         Loop();\n     }\n \n     // Wait until execution finishes, and return whether all evaluations where succesful.\n-    bool Wait() {\n+    bool Wait()\n+    {\n         return Loop(true);\n     }\n \n     // Add a batch of checks to the queue\n-    void Add(std::vector<T> &vChecks) {\n+    void Add(std::vector<T>& vChecks)\n+    {\n         boost::unique_lock<boost::mutex> lock(mutex);\n-        BOOST_FOREACH(T &check, vChecks) {\n+        BOOST_FOREACH (T& check, vChecks) {\n             queue.push_back(T());\n             check.swap(queue.back());\n         }\n@@ -148,7 +154,8 @@ template<typename T> class CCheckQueue {\n             condWorker.notify_all();\n     }\n \n-    ~CCheckQueue() {\n+    ~CCheckQueue()\n+    {\n     }\n \n     friend class CCheckQueueControl<T>;\n@@ -157,13 +164,16 @@ template<typename T> class CCheckQueue {\n /** RAII-style controller object for a CCheckQueue that guarantees the passed\n  *  queue is finished before continuing.\n  */\n-template<typename T> class CCheckQueueControl {\n+template <typename T>\n+class CCheckQueueControl\n+{\n private:\n-    CCheckQueue<T> *pqueue;\n+    CCheckQueue<T>* pqueue;\n     bool fDone;\n \n public:\n-    CCheckQueueControl(CCheckQueue<T> *pqueueIn) : pqueue(pqueueIn), fDone(false) {\n+    CCheckQueueControl(CCheckQueue<T>* pqueueIn) : pqueue(pqueueIn), fDone(false)\n+    {\n         // passed queue is supposed to be unused, or NULL\n         if (pqueue != NULL) {\n             assert(pqueue->nTotal == pqueue->nIdle);\n@@ -172,20 +182,23 @@ template<typename T> class CCheckQueueControl {\n         }\n     }\n \n-    bool Wait() {\n+    bool Wait()\n+    {\n         if (pqueue == NULL)\n             return true;\n         bool fRet = pqueue->Wait();\n         fDone = true;\n         return fRet;\n     }\n \n-    void Add(std::vector<T> &vChecks) {\n+    void Add(std::vector<T>& vChecks)\n+    {\n         if (pqueue != NULL)\n             pqueue->Add(vChecks);\n     }\n \n-    ~CCheckQueueControl() {\n+    ~CCheckQueueControl()\n+    {\n         if (!fDone)\n             Wait();\n     }"
      },
      {
        "sha": "cd7ceb78f0eb8c7b3709506bded7e984eb87a56a",
        "filename": "src/clientversion.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/clientversion.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/clientversion.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -13,13 +13,13 @@\n //\n \n // These need to be macros, as version.cpp's and bitcoin*-res.rc's voodoo requires it\n-#define CLIENT_VERSION_MAJOR       0\n-#define CLIENT_VERSION_MINOR       9\n-#define CLIENT_VERSION_REVISION    99\n-#define CLIENT_VERSION_BUILD       0\n+#define CLIENT_VERSION_MAJOR 0\n+#define CLIENT_VERSION_MINOR 9\n+#define CLIENT_VERSION_REVISION 99\n+#define CLIENT_VERSION_BUILD 0\n \n // Set to true for release, false for prerelease or test build\n-#define CLIENT_VERSION_IS_RELEASE  false\n+#define CLIENT_VERSION_IS_RELEASE false\n \n // Copyright year (2009-this)\n // Todo: update this when changing our copyright comments in the source\n@@ -33,6 +33,6 @@\n #define DO_STRINGIZE(X) #X\n \n // Copyright string used in Windows .rc files\n-#define COPYRIGHT_STR          \"2009-\" STRINGIZE(COPYRIGHT_YEAR) \" The Bitcoin Core Developers\"\n+#define COPYRIGHT_STR \"2009-\" STRINGIZE(COPYRIGHT_YEAR) \" The Bitcoin Core Developers\"\n \n #endif // CLIENTVERSION_H"
      },
      {
        "sha": "033092c01954ea9a75f9b30deeda1a52055c3926",
        "filename": "src/coincontrol.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coincontrol.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -57,7 +57,6 @@ class CCoinControl\n \n private:\n     std::set<COutPoint> setSelected;\n-\n };\n \n #endif // COINCONTROL_H"
      },
      {
        "sha": "12650e459f392bf36f797bbfd6abbf6bc330a68f",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 86,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -30,7 +30,6 @@ using namespace boost;\n unsigned int nWalletDBUpdated;\n \n \n-\n //\n // CDB\n //\n@@ -94,15 +93,15 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     dbenv.set_flags(DB_TXN_WRITE_NOSYNC, 1);\n     dbenv.log_set_config(DB_LOG_AUTO_REMOVE, 1);\n     int ret = dbenv.open(path.string().c_str(),\n-                     DB_CREATE     |\n-                     DB_INIT_LOCK  |\n-                     DB_INIT_LOG   |\n-                     DB_INIT_MPOOL |\n-                     DB_INIT_TXN   |\n-                     DB_THREAD     |\n-                     DB_RECOVER    |\n-                     nEnvFlags,\n-                     S_IRUSR | S_IWUSR);\n+                         DB_CREATE |\n+                             DB_INIT_LOCK |\n+                             DB_INIT_LOG |\n+                             DB_INIT_MPOOL |\n+                             DB_INIT_TXN |\n+                             DB_THREAD |\n+                             DB_RECOVER |\n+                             nEnvFlags,\n+                         S_IRUSR | S_IWUSR);\n     if (ret != 0)\n         return error(\"CDBEnv::Open : Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n \n@@ -121,21 +120,21 @@ void CDBEnv::MakeMock()\n     LogPrint(\"db\", \"CDBEnv::MakeMock\\n\");\n \n     dbenv.set_cachesize(1, 0, 1);\n-    dbenv.set_lg_bsize(10485760*4);\n+    dbenv.set_lg_bsize(10485760 * 4);\n     dbenv.set_lg_max(10485760);\n     dbenv.set_lk_max_locks(10000);\n     dbenv.set_lk_max_objects(10000);\n     dbenv.set_flags(DB_AUTO_COMMIT, 1);\n     dbenv.log_set_config(DB_LOG_IN_MEMORY, 1);\n     int ret = dbenv.open(NULL,\n-                     DB_CREATE     |\n-                     DB_INIT_LOCK  |\n-                     DB_INIT_LOG   |\n-                     DB_INIT_MPOOL |\n-                     DB_INIT_TXN   |\n-                     DB_THREAD     |\n-                     DB_PRIVATE,\n-                     S_IRUSR | S_IWUSR);\n+                         DB_CREATE |\n+                             DB_INIT_LOCK |\n+                             DB_INIT_LOG |\n+                             DB_INIT_MPOOL |\n+                             DB_INIT_TXN |\n+                             DB_THREAD |\n+                             DB_PRIVATE,\n+                         S_IRUSR | S_IWUSR);\n     if (ret > 0)\n         throw runtime_error(strprintf(\"CDBEnv::MakeMock : Error %d opening database environment.\", ret));\n \n@@ -160,30 +159,27 @@ CDBEnv::VerifyResult CDBEnv::Verify(std::string strFile, bool (*recoverFunc)(CDB\n     return (fRecovered ? RECOVER_OK : RECOVER_FAIL);\n }\n \n-bool CDBEnv::Salvage(std::string strFile, bool fAggressive,\n-                     std::vector<CDBEnv::KeyValPair >& vResult)\n+bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::KeyValPair>& vResult)\n {\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n \n     u_int32_t flags = DB_SALVAGE;\n-    if (fAggressive) flags |= DB_AGGRESSIVE;\n+    if (fAggressive)\n+        flags |= DB_AGGRESSIVE;\n \n     stringstream strDump;\n \n     Db db(&dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, &strDump, flags);\n-    if (result == DB_VERIFY_BAD)\n-    {\n+    if (result == DB_VERIFY_BAD) {\n         LogPrintf(\"CDBEnv::Salvage : Database salvage found errors, all data may not be recoverable.\\n\");\n-        if (!fAggressive)\n-        {\n+        if (!fAggressive) {\n             LogPrintf(\"CDBEnv::Salvage : Rerun with aggressive mode to ignore errors and continue.\\n\");\n             return false;\n         }\n     }\n-    if (result != 0 && result != DB_VERIFY_BAD)\n-    {\n+    if (result != 0 && result != DB_VERIFY_BAD) {\n         LogPrintf(\"CDBEnv::Salvage : Database salvage failed with result %d.\\n\", result);\n         return false;\n     }\n@@ -201,13 +197,11 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive,\n         getline(strDump, strLine); // Skip past header\n \n     std::string keyHex, valueHex;\n-    while (!strDump.eof() && keyHex != \"DATA=END\")\n-    {\n+    while (!strDump.eof() && keyHex != \"DATA=END\") {\n         getline(strDump, keyHex);\n-        if (keyHex != \"DATA_END\")\n-        {\n+        if (keyHex != \"DATA_END\") {\n             getline(strDump, valueHex);\n-            vResult.push_back(make_pair(ParseHex(keyHex),ParseHex(valueHex)));\n+            vResult.push_back(make_pair(ParseHex(keyHex), ParseHex(valueHex)));\n         }\n     }\n \n@@ -224,8 +218,7 @@ void CDBEnv::CheckpointLSN(const std::string& strFile)\n }\n \n \n-CDB::CDB(const std::string& strFilename, const char* pszMode) :\n-    pdb(NULL), activeTxn(NULL)\n+CDB::CDB(const std::string& strFilename, const char* pszMode) : pdb(NULL), activeTxn(NULL)\n {\n     int ret;\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n@@ -245,37 +238,33 @@ CDB::CDB(const std::string& strFilename, const char* pszMode) :\n         strFile = strFilename;\n         ++bitdb.mapFileUseCount[strFile];\n         pdb = bitdb.mapDb[strFile];\n-        if (pdb == NULL)\n-        {\n+        if (pdb == NULL) {\n             pdb = new Db(&bitdb.dbenv, 0);\n \n             bool fMockDb = bitdb.IsMock();\n-            if (fMockDb)\n-            {\n-                DbMpoolFile*mpf = pdb->get_mpf();\n+            if (fMockDb) {\n+                DbMpoolFile* mpf = pdb->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n                 if (ret != 0)\n                     throw runtime_error(strprintf(\"CDB : Failed to configure for no temp file backing for database %s\", strFile));\n             }\n \n-            ret = pdb->open(NULL, // Txn pointer\n-                            fMockDb ? NULL : strFile.c_str(), // Filename\n+            ret = pdb->open(NULL,                               // Txn pointer\n+                            fMockDb ? NULL : strFile.c_str(),   // Filename\n                             fMockDb ? strFile.c_str() : \"main\", // Logical db name\n-                            DB_BTREE, // Database type\n-                            nFlags, // Flags\n+                            DB_BTREE,                           // Database type\n+                            nFlags,                             // Flags\n                             0);\n \n-            if (ret != 0)\n-            {\n+            if (ret != 0) {\n                 delete pdb;\n                 pdb = NULL;\n                 --bitdb.mapFileUseCount[strFile];\n                 strFile = \"\";\n                 throw runtime_error(strprintf(\"CDB : Error %d, can't open database %s\", ret, strFile));\n             }\n \n-            if (fCreate && !Exists(string(\"version\")))\n-            {\n+            if (fCreate && !Exists(string(\"version\"))) {\n                 bool fTmp = fReadOnly;\n                 fReadOnly = false;\n                 WriteVersion(CLIENT_VERSION);\n@@ -297,7 +286,7 @@ void CDB::Flush()\n     if (fReadOnly)\n         nMinutes = 1;\n \n-    bitdb.dbenv.txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100)*1024 : 0, nMinutes, 0);\n+    bitdb.dbenv.txn_checkpoint(nMinutes ? GetArg(\"-dblogsize\", 100) * 1024 : 0, nMinutes, 0);\n }\n \n void CDB::Close()\n@@ -321,8 +310,7 @@ void CDBEnv::CloseDb(const string& strFile)\n {\n     {\n         LOCK(cs_db);\n-        if (mapDb[strFile] != NULL)\n-        {\n+        if (mapDb[strFile] != NULL) {\n             // Close the database handle\n             Db* pdb = mapDb[strFile];\n             pdb->close(0);\n@@ -343,12 +331,10 @@ bool CDBEnv::RemoveDb(const string& strFile)\n \n bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n {\n-    while (true)\n-    {\n+    while (true) {\n         {\n             LOCK(bitdb.cs_db);\n-            if (!bitdb.mapFileUseCount.count(strFile) || bitdb.mapFileUseCount[strFile] == 0)\n-            {\n+            if (!bitdb.mapFileUseCount.count(strFile) || bitdb.mapFileUseCount[strFile] == 0) {\n                 // Flush log data to the dat file\n                 bitdb.CloseDb(strFile);\n                 bitdb.CheckpointLSN(strFile);\n@@ -361,41 +347,35 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                     CDB db(strFile.c_str(), \"r\");\n                     Db* pdbCopy = new Db(&bitdb.dbenv, 0);\n \n-                    int ret = pdbCopy->open(NULL,                 // Txn pointer\n-                                            strFileRes.c_str(),   // Filename\n-                                            \"main\",    // Logical db name\n-                                            DB_BTREE,  // Database type\n-                                            DB_CREATE,    // Flags\n+                    int ret = pdbCopy->open(NULL,               // Txn pointer\n+                                            strFileRes.c_str(), // Filename\n+                                            \"main\",             // Logical db name\n+                                            DB_BTREE,           // Database type\n+                                            DB_CREATE,          // Flags\n                                             0);\n-                    if (ret > 0)\n-                    {\n+                    if (ret > 0) {\n                         LogPrintf(\"CDB::Rewrite : Can't create database file %s\\n\", strFileRes);\n                         fSuccess = false;\n                     }\n \n                     Dbc* pcursor = db.GetCursor();\n                     if (pcursor)\n-                        while (fSuccess)\n-                        {\n+                        while (fSuccess) {\n                             CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n                             CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n                             int ret = db.ReadAtCursor(pcursor, ssKey, ssValue, DB_NEXT);\n-                            if (ret == DB_NOTFOUND)\n-                            {\n+                            if (ret == DB_NOTFOUND) {\n                                 pcursor->close();\n                                 break;\n-                            }\n-                            else if (ret != 0)\n-                            {\n+                            } else if (ret != 0) {\n                                 pcursor->close();\n                                 fSuccess = false;\n                                 break;\n                             }\n                             if (pszSkip &&\n                                 strncmp(&ssKey[0], pszSkip, std::min(ssKey.size(), strlen(pszSkip))) == 0)\n                                 continue;\n-                            if (strncmp(&ssKey[0], \"\\x07version\", 8) == 0)\n-                            {\n+                            if (strncmp(&ssKey[0], \"\\x07version\", 8) == 0) {\n                                 // Update version:\n                                 ssValue.clear();\n                                 ssValue << CLIENT_VERSION;\n@@ -406,17 +386,15 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                             if (ret2 > 0)\n                                 fSuccess = false;\n                         }\n-                    if (fSuccess)\n-                    {\n+                    if (fSuccess) {\n                         db.Close();\n                         bitdb.CloseDb(strFile);\n                         if (pdbCopy->close(0))\n                             fSuccess = false;\n                         delete pdbCopy;\n                     }\n                 }\n-                if (fSuccess)\n-                {\n+                if (fSuccess) {\n                     Db dbA(&bitdb.dbenv, 0);\n                     if (dbA.remove(strFile.c_str(), NULL, 0))\n                         fSuccess = false;\n@@ -445,13 +423,11 @@ void CDBEnv::Flush(bool fShutdown)\n     {\n         LOCK(cs_db);\n         map<string, int>::iterator mi = mapFileUseCount.begin();\n-        while (mi != mapFileUseCount.end())\n-        {\n+        while (mi != mapFileUseCount.end()) {\n             string strFile = (*mi).first;\n             int nRefCount = (*mi).second;\n             LogPrint(\"db\", \"CDBEnv::Flush : Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n-            if (nRefCount == 0)\n-            {\n+            if (nRefCount == 0) {\n                 // Move log data to the dat file\n                 CloseDb(strFile);\n                 LogPrint(\"db\", \"CDBEnv::Flush : %s checkpoint\\n\", strFile);\n@@ -461,16 +437,13 @@ void CDBEnv::Flush(bool fShutdown)\n                     dbenv.lsn_reset(strFile.c_str(), 0);\n                 LogPrint(\"db\", \"CDBEnv::Flush : %s closed\\n\", strFile);\n                 mapFileUseCount.erase(mi++);\n-            }\n-            else\n+            } else\n                 mi++;\n         }\n         LogPrint(\"db\", \"CDBEnv::Flush : Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n-        if (fShutdown)\n-        {\n+        if (fShutdown) {\n             char** listp;\n-            if (mapFileUseCount.empty())\n-            {\n+            if (mapFileUseCount.empty()) {\n                 dbenv.log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb)\n@@ -479,4 +452,3 @@ void CDBEnv::Flush(bool fShutdown)\n         }\n     }\n }\n-"
      },
      {
        "sha": "d20239938377864beaf2e307636ff7d5df8d4be2",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 16,
        "deletions": 17,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -54,7 +54,9 @@ class CDBEnv\n      * This must be called BEFORE strFile is opened.\n      * Returns true if strFile is OK.\n      */\n-    enum VerifyResult { VERIFY_OK, RECOVER_OK, RECOVER_FAIL };\n+    enum VerifyResult { VERIFY_OK,\n+                        RECOVER_OK,\n+                        RECOVER_FAIL };\n     VerifyResult Verify(std::string strFile, bool (*recoverFunc)(CDBEnv& dbenv, std::string strFile));\n     /*\n      * Salvage data from a file that Verify says is bad.\n@@ -66,15 +68,15 @@ class CDBEnv\n     typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n     bool Salvage(std::string strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n \n-    bool Open(const boost::filesystem::path &path);\n+    bool Open(const boost::filesystem::path& path);\n     void Close();\n     void Flush(bool fShutdown);\n     void CheckpointLSN(const std::string& strFile);\n \n     void CloseDb(const std::string& strFile);\n     bool RemoveDb(const std::string& strFile);\n \n-    DbTxn *TxnBegin(int flags=DB_TXN_WRITE_NOSYNC)\n+    DbTxn* TxnBegin(int flags = DB_TXN_WRITE_NOSYNC)\n     {\n         DbTxn* ptxn = NULL;\n         int ret = dbenv.txn_begin(NULL, &ptxn, flags);\n@@ -93,10 +95,10 @@ class CDB\n protected:\n     Db* pdb;\n     std::string strFile;\n-    DbTxn *activeTxn;\n+    DbTxn* activeTxn;\n     bool fReadOnly;\n \n-    explicit CDB(const std::string& strFilename, const char* pszMode=\"r+\");\n+    explicit CDB(const std::string& strFilename, const char* pszMode = \"r+\");\n     ~CDB() { Close(); }\n \n public:\n@@ -108,7 +110,7 @@ class CDB\n     void operator=(const CDB&);\n \n protected:\n-    template<typename K, typename T>\n+    template <typename K, typename T>\n     bool Read(const K& key, T& value)\n     {\n         if (!pdb)\n@@ -132,8 +134,7 @@ class CDB\n         try {\n             CDataStream ssValue((char*)datValue.get_data(), (char*)datValue.get_data() + datValue.get_size(), SER_DISK, CLIENT_VERSION);\n             ssValue >> value;\n-        }\n-        catch (const std::exception &) {\n+        } catch (const std::exception&) {\n             return false;\n         }\n \n@@ -143,8 +144,8 @@ class CDB\n         return (ret == 0);\n     }\n \n-    template<typename K, typename T>\n-    bool Write(const K& key, const T& value, bool fOverwrite=true)\n+    template <typename K, typename T>\n+    bool Write(const K& key, const T& value, bool fOverwrite = true)\n     {\n         if (!pdb)\n             return false;\n@@ -172,7 +173,7 @@ class CDB\n         return (ret == 0);\n     }\n \n-    template<typename K>\n+    template <typename K>\n     bool Erase(const K& key)\n     {\n         if (!pdb)\n@@ -194,7 +195,7 @@ class CDB\n         return (ret == 0 || ret == DB_NOTFOUND);\n     }\n \n-    template<typename K>\n+    template <typename K>\n     bool Exists(const K& key)\n     {\n         if (!pdb)\n@@ -225,18 +226,16 @@ class CDB\n         return pcursor;\n     }\n \n-    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue, unsigned int fFlags=DB_NEXT)\n+    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue, unsigned int fFlags = DB_NEXT)\n     {\n         // Read at cursor\n         Dbt datKey;\n-        if (fFlags == DB_SET || fFlags == DB_SET_RANGE || fFlags == DB_GET_BOTH || fFlags == DB_GET_BOTH_RANGE)\n-        {\n+        if (fFlags == DB_SET || fFlags == DB_SET_RANGE || fFlags == DB_GET_BOTH || fFlags == DB_GET_BOTH_RANGE) {\n             datKey.set_data(&ssKey[0]);\n             datKey.set_size(ssKey.size());\n         }\n         Dbt datValue;\n-        if (fFlags == DB_GET_BOTH || fFlags == DB_GET_BOTH_RANGE)\n-        {\n+        if (fFlags == DB_GET_BOTH || fFlags == DB_GET_BOTH_RANGE) {\n             datValue.set_data(&ssValue[0]);\n             datValue.set_size(ssValue.size());\n         }"
      },
      {
        "sha": "4ce4da4c30e1c31ecebad9cbb22a2bc87d369ee8",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 14,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -1,6 +1,6 @@\n #include \"hash.h\"\n \n-inline uint32_t ROTL32 ( uint32_t x, int8_t r )\n+inline uint32_t ROTL32(uint32_t x, int8_t r)\n {\n     return (x << r) | (x >> (32 - r));\n }\n@@ -16,33 +16,37 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n     //----------\n     // body\n-    const uint32_t * blocks = (const uint32_t *)(&vDataToHash[0] + nblocks*4);\n+    const uint32_t* blocks = (const uint32_t*)(&vDataToHash[0] + nblocks * 4);\n \n-    for(int i = -nblocks; i; i++)\n-    {\n+    for (int i = -nblocks; i; i++) {\n         uint32_t k1 = blocks[i];\n \n         k1 *= c1;\n-        k1 = ROTL32(k1,15);\n+        k1 = ROTL32(k1, 15);\n         k1 *= c2;\n \n         h1 ^= k1;\n-        h1 = ROTL32(h1,13); \n-        h1 = h1*5+0xe6546b64;\n+        h1 = ROTL32(h1, 13);\n+        h1 = h1 * 5 + 0xe6546b64;\n     }\n \n     //----------\n     // tail\n-    const uint8_t * tail = (const uint8_t*)(&vDataToHash[0] + nblocks*4);\n+    const uint8_t* tail = (const uint8_t*)(&vDataToHash[0] + nblocks * 4);\n \n     uint32_t k1 = 0;\n \n-    switch(vDataToHash.size() & 3)\n-    {\n-    case 3: k1 ^= tail[2] << 16;\n-    case 2: k1 ^= tail[1] << 8;\n-    case 1: k1 ^= tail[0];\n-            k1 *= c1; k1 = ROTL32(k1,15); k1 *= c2; h1 ^= k1;\n+    switch (vDataToHash.size() & 3) {\n+    case 3:\n+        k1 ^= tail[2] << 16;\n+    case 2:\n+        k1 ^= tail[1] << 8;\n+    case 1:\n+        k1 ^= tail[0];\n+        k1 *= c1;\n+        k1 = ROTL32(k1, 15);\n+        k1 *= c2;\n+        h1 ^= k1;\n     };\n \n     //----------"
      },
      {
        "sha": "aaf8c07e6e86c1b15acf2f1180999996a284b9cb",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -10,8 +10,9 @@\n \n class CWallet;\n \n-namespace boost {\n-    class thread_group;\n+namespace boost\n+{\n+class thread_group;\n } // namespace boost\n \n extern CWallet* pwalletMain;\n@@ -22,8 +23,7 @@ void Shutdown();\n bool AppInit2(boost::thread_group& threadGroup);\n \n /* The help message mode determines what help message to show */\n-enum HelpMessageMode\n-{\n+enum HelpMessageMode {\n     HMM_BITCOIND,\n     HMM_BITCOIN_QT\n };"
      },
      {
        "sha": "3863e95cffb025f84a3d4c4bbb3d4d60eac11e00",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 79,
        "deletions": 52,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -26,27 +26,29 @@\n class CKeyID : public uint160\n {\n public:\n-    CKeyID() : uint160(0) { }\n-    CKeyID(const uint160 &in) : uint160(in) { }\n+    CKeyID() : uint160(0) {}\n+    CKeyID(const uint160& in) : uint160(in) {}\n };\n \n /** A reference to a CScript: the Hash160 of its serialization (see script.h) */\n class CScriptID : public uint160\n {\n public:\n-    CScriptID() : uint160(0) { }\n-    CScriptID(const uint160 &in) : uint160(in) { }\n+    CScriptID() : uint160(0) {}\n+    CScriptID(const uint160& in) : uint160(in) {}\n };\n \n /** An encapsulated public key. */\n-class CPubKey {\n+class CPubKey\n+{\n private:\n     // Just store the serialized data.\n     // Its length can very cheaply be computed from the first byte.\n     unsigned char vch[65];\n \n     // Compute the length of a pubkey with a given first byte.\n-    unsigned int static GetLen(unsigned char chHeader) {\n+    unsigned int static GetLen(unsigned char chHeader)\n+    {\n         if (chHeader == 2 || chHeader == 3)\n             return 33;\n         if (chHeader == 4 || chHeader == 6 || chHeader == 7)\n@@ -55,66 +57,79 @@ class CPubKey {\n     }\n \n     // Set this key data to be invalid\n-    void Invalidate() {\n+    void Invalidate()\n+    {\n         vch[0] = 0xFF;\n     }\n \n public:\n     // Construct an invalid public key.\n-    CPubKey() {\n+    CPubKey()\n+    {\n         Invalidate();\n     }\n \n     // Initialize a public key using begin/end iterators to byte data.\n-    template<typename T>\n-    void Set(const T pbegin, const T pend) {\n+    template <typename T>\n+    void Set(const T pbegin, const T pend)\n+    {\n         int len = pend == pbegin ? 0 : GetLen(pbegin[0]);\n-        if (len && len == (pend-pbegin))\n+        if (len && len == (pend - pbegin))\n             memcpy(vch, (unsigned char*)&pbegin[0], len);\n         else\n             Invalidate();\n     }\n \n     // Construct a public key using begin/end iterators to byte data.\n-    template<typename T>\n-    CPubKey(const T pbegin, const T pend) {\n+    template <typename T>\n+    CPubKey(const T pbegin, const T pend)\n+    {\n         Set(pbegin, pend);\n     }\n \n     // Construct a public key from a byte vector.\n-    CPubKey(const std::vector<unsigned char> &vch) {\n+    CPubKey(const std::vector<unsigned char>& vch)\n+    {\n         Set(vch.begin(), vch.end());\n     }\n \n     // Simple read-only vector-like interface to the pubkey data.\n     unsigned int size() const { return GetLen(vch[0]); }\n-    const unsigned char *begin() const { return vch; }\n-    const unsigned char *end() const { return vch+size(); }\n-    const unsigned char &operator[](unsigned int pos) const { return vch[pos]; }\n+    const unsigned char* begin() const { return vch; }\n+    const unsigned char* end() const { return vch + size(); }\n+    const unsigned char& operator[](unsigned int pos) const { return vch[pos]; }\n \n     // Comparator implementation.\n-    friend bool operator==(const CPubKey &a, const CPubKey &b) {\n+    friend bool operator==(const CPubKey& a, const CPubKey& b)\n+    {\n         return a.vch[0] == b.vch[0] &&\n                memcmp(a.vch, b.vch, a.size()) == 0;\n     }\n-    friend bool operator!=(const CPubKey &a, const CPubKey &b) {\n+    friend bool operator!=(const CPubKey& a, const CPubKey& b)\n+    {\n         return !(a == b);\n     }\n-    friend bool operator<(const CPubKey &a, const CPubKey &b) {\n+    friend bool operator<(const CPubKey& a, const CPubKey& b)\n+    {\n         return a.vch[0] < b.vch[0] ||\n                (a.vch[0] == b.vch[0] && memcmp(a.vch, b.vch, a.size()) < 0);\n     }\n \n     // Implement serialization, as if this was a byte vector.\n-    unsigned int GetSerializeSize(int nType, int nVersion) const {\n+    unsigned int GetSerializeSize(int nType, int nVersion) const\n+    {\n         return size() + 1;\n     }\n-    template<typename Stream> void Serialize(Stream &s, int nType, int nVersion) const {\n+    template <typename Stream>\n+    void Serialize(Stream& s, int nType, int nVersion) const\n+    {\n         unsigned int len = size();\n         ::WriteCompactSize(s, len);\n         s.write((char*)vch, len);\n     }\n-    template<typename Stream> void Unserialize(Stream &s, int nType, int nVersion) {\n+    template <typename Stream>\n+    void Unserialize(Stream& s, int nType, int nVersion)\n+    {\n         unsigned int len = ::ReadCompactSize(s);\n         if (len <= 65) {\n             s.read((char*)vch, len);\n@@ -128,36 +143,40 @@ class CPubKey {\n     }\n \n     // Get the KeyID of this public key (hash of its serialization)\n-    CKeyID GetID() const {\n-        return CKeyID(Hash160(vch, vch+size()));\n+    CKeyID GetID() const\n+    {\n+        return CKeyID(Hash160(vch, vch + size()));\n     }\n \n     // Get the 256-bit hash of this public key.\n-    uint256 GetHash() const {\n-        return Hash(vch, vch+size());\n+    uint256 GetHash() const\n+    {\n+        return Hash(vch, vch + size());\n     }\n \n     // Check syntactic correctness.\n     //\n     // Note that this is consensus critical as CheckSig() calls it!\n-    bool IsValid() const {\n+    bool IsValid() const\n+    {\n         return size() > 0;\n     }\n \n     // fully validate whether this is a valid public key (more expensive than IsValid())\n     bool IsFullyValid() const;\n \n     // Check whether this is a compressed public key.\n-    bool IsCompressed() const {\n+    bool IsCompressed() const\n+    {\n         return size() == 33;\n     }\n \n     // Verify a DER signature (~72 bytes).\n     // If this public key is not fully valid, the return value will be false.\n-    bool Verify(const uint256 &hash, const std::vector<unsigned char>& vchSig) const;\n+    bool Verify(const uint256& hash, const std::vector<unsigned char>& vchSig) const;\n \n     // Recover a public key from a compact signature.\n-    bool RecoverCompact(const uint256 &hash, const std::vector<unsigned char>& vchSig);\n+    bool RecoverCompact(const uint256& hash, const std::vector<unsigned char>& vchSig);\n \n     // Turn this public key into an uncompressed public key.\n     bool Decompress();\n@@ -172,7 +191,8 @@ class CPubKey {\n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CPrivKey;\n \n /** An encapsulated private key. */\n-class CKey {\n+class CKey\n+{\n private:\n     // Whether this private key is valid. We check for correctness when modifying the key\n     // data, so fValid should always correspond to the actual state.\n@@ -185,33 +205,38 @@ class CKey {\n     unsigned char vch[32];\n \n     // Check whether the 32-byte array pointed to be vch is valid keydata.\n-    bool static Check(const unsigned char *vch);\n-public:\n+    bool static Check(const unsigned char* vch);\n \n+public:\n     // Construct an invalid private key.\n-    CKey() : fValid(false), fCompressed(false) {\n+    CKey() : fValid(false), fCompressed(false)\n+    {\n         LockObject(vch);\n     }\n \n     // Copy constructor. This is necessary because of memlocking.\n-    CKey(const CKey &secret) : fValid(secret.fValid), fCompressed(secret.fCompressed) {\n+    CKey(const CKey& secret) : fValid(secret.fValid), fCompressed(secret.fCompressed)\n+    {\n         LockObject(vch);\n         memcpy(vch, secret.vch, sizeof(vch));\n     }\n \n     // Destructor (again necessary because of memlocking).\n-    ~CKey() {\n+    ~CKey()\n+    {\n         UnlockObject(vch);\n     }\n \n-    friend bool operator==(const CKey &a, const CKey &b) {\n+    friend bool operator==(const CKey& a, const CKey& b)\n+    {\n         return a.fCompressed == b.fCompressed && a.size() == b.size() &&\n                memcmp(&a.vch[0], &b.vch[0], a.size()) == 0;\n     }\n \n     // Initialize using begin and end iterators to byte data.\n-    template<typename T>\n-    void Set(const T pbegin, const T pend, bool fCompressedIn) {\n+    template <typename T>\n+    void Set(const T pbegin, const T pend, bool fCompressedIn)\n+    {\n         if (pend - pbegin != 32) {\n             fValid = false;\n             return;\n@@ -227,8 +252,8 @@ class CKey {\n \n     // Simple read-only vector-like interface.\n     unsigned int size() const { return (fValid ? 32 : 0); }\n-    const unsigned char *begin() const { return vch; }\n-    const unsigned char *end() const { return vch + size(); }\n+    const unsigned char* begin() const { return vch; }\n+    const unsigned char* end() const { return vch + size(); }\n \n     // Check whether this private key is valid.\n     bool IsValid() const { return fValid; }\n@@ -237,7 +262,7 @@ class CKey {\n     bool IsCompressed() const { return fCompressed; }\n \n     // Initialize from a CPrivKey (serialized OpenSSL private key data).\n-    bool SetPrivKey(const CPrivKey &vchPrivKey, bool fCompressed);\n+    bool SetPrivKey(const CPrivKey& vchPrivKey, bool fCompressed);\n \n     // Generate a new private key using a cryptographic PRNG.\n     void MakeNewKey(bool fCompressed);\n@@ -251,23 +276,23 @@ class CKey {\n     CPubKey GetPubKey() const;\n \n     // Create a DER-serialized signature.\n-    bool Sign(const uint256 &hash, std::vector<unsigned char>& vchSig) const;\n+    bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig) const;\n \n     // Create a compact signature (65 bytes), which allows reconstructing the used public key.\n     // The format is one header byte, followed by two times 32 bytes for the serialized r and s values.\n     // The header byte: 0x1B = first key with even y, 0x1C = first key with odd y,\n     //                  0x1D = second key with even y, 0x1E = second key with odd y,\n     //                  add 0x04 for compressed keys.\n-    bool SignCompact(const uint256 &hash, std::vector<unsigned char>& vchSig) const;\n+    bool SignCompact(const uint256& hash, std::vector<unsigned char>& vchSig) const;\n \n     // Derive BIP32 child key.\n     bool Derive(CKey& keyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const;\n \n     // Load private key and check that public key matches.\n-    bool Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck);\n+    bool Load(CPrivKey& privkey, CPubKey& vchPubKey, bool fSkipCheck);\n \n     // Check whether an element of a signature (r or s) is valid.\n-    static bool CheckSignatureElement(const unsigned char *vch, int len, bool half);\n+    static bool CheckSignatureElement(const unsigned char* vch, int len, bool half);\n };\n \n struct CExtPubKey {\n@@ -277,14 +302,15 @@ struct CExtPubKey {\n     unsigned char vchChainCode[32];\n     CPubKey pubkey;\n \n-    friend bool operator==(const CExtPubKey &a, const CExtPubKey &b) {\n+    friend bool operator==(const CExtPubKey& a, const CExtPubKey& b)\n+    {\n         return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n                memcmp(&a.vchChainCode[0], &b.vchChainCode[0], 32) == 0 && a.pubkey == b.pubkey;\n     }\n \n     void Encode(unsigned char code[74]) const;\n     void Decode(const unsigned char code[74]);\n-    bool Derive(CExtPubKey &out, unsigned int nChild) const;\n+    bool Derive(CExtPubKey& out, unsigned int nChild) const;\n };\n \n struct CExtKey {\n@@ -294,16 +320,17 @@ struct CExtKey {\n     unsigned char vchChainCode[32];\n     CKey key;\n \n-    friend bool operator==(const CExtKey &a, const CExtKey &b) {\n+    friend bool operator==(const CExtKey& a, const CExtKey& b)\n+    {\n         return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n                memcmp(&a.vchChainCode[0], &b.vchChainCode[0], 32) == 0 && a.key == b.key;\n     }\n \n     void Encode(unsigned char code[74]) const;\n     void Decode(const unsigned char code[74]);\n-    bool Derive(CExtKey &out, unsigned int nChild) const;\n+    bool Derive(CExtKey& out, unsigned int nChild) const;\n     CExtPubKey Neuter() const;\n-    void SetMaster(const unsigned char *seed, unsigned int nSeedLen);\n+    void SetMaster(const unsigned char* seed, unsigned int nSeedLen);\n };\n \n /** Check that required EC support is available at runtime */"
      },
      {
        "sha": "8ce3e7b47088df4497029da5636b61881003cd29",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -12,7 +12,8 @@\n #include <leveldb/filter_policy.h>\n #include <memenv.h>\n \n-void HandleError(const leveldb::Status &status) throw(leveldb_error) {\n+void HandleError(const leveldb::Status& status) throw(leveldb_error)\n+{\n     if (status.ok())\n         return;\n     LogPrintf(\"%s\\n\", status.ToString());\n@@ -25,7 +26,8 @@ void HandleError(const leveldb::Status &status) throw(leveldb_error) {\n     throw leveldb_error(\"Unknown database error\");\n }\n \n-static leveldb::Options GetOptions(size_t nCacheSize) {\n+static leveldb::Options GetOptions(size_t nCacheSize)\n+{\n     leveldb::Options options;\n     options.block_cache = leveldb::NewLRUCache(nCacheSize / 2);\n     options.write_buffer_size = nCacheSize / 4; // up to two write buffers may be held in memory simultaneously\n@@ -40,7 +42,8 @@ static leveldb::Options GetOptions(size_t nCacheSize) {\n     return options;\n }\n \n-CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path &path, size_t nCacheSize, bool fMemory, bool fWipe) {\n+CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory, bool fWipe)\n+{\n     penv = NULL;\n     readoptions.verify_checksums = true;\n     iteroptions.verify_checksums = true;\n@@ -64,7 +67,8 @@ CLevelDBWrapper::CLevelDBWrapper(const boost::filesystem::path &path, size_t nCa\n     LogPrintf(\"Opened LevelDB successfully\\n\");\n }\n \n-CLevelDBWrapper::~CLevelDBWrapper() {\n+CLevelDBWrapper::~CLevelDBWrapper()\n+{\n     delete pdb;\n     pdb = NULL;\n     delete options.filter_policy;\n@@ -75,7 +79,8 @@ CLevelDBWrapper::~CLevelDBWrapper() {\n     options.env = NULL;\n }\n \n-bool CLevelDBWrapper::WriteBatch(CLevelDBBatch &batch, bool fSync) throw(leveldb_error) {\n+bool CLevelDBWrapper::WriteBatch(CLevelDBBatch& batch, bool fSync) throw(leveldb_error)\n+{\n     leveldb::Status status = pdb->Write(fSync ? syncoptions : writeoptions, &batch.batch);\n     HandleError(status);\n     return true;"
      },
      {
        "sha": "da5ba61c7b04fc35d6643ad5381208a6ecc8d066",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 31,
        "deletions": 16,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -17,10 +17,10 @@\n class leveldb_error : public std::runtime_error\n {\n public:\n-    leveldb_error(const std::string &msg) : std::runtime_error(msg) {}\n+    leveldb_error(const std::string& msg) : std::runtime_error(msg) {}\n };\n \n-void HandleError(const leveldb::Status &status) throw(leveldb_error);\n+void HandleError(const leveldb::Status& status) throw(leveldb_error);\n \n // Batch of changes queued to be written to a CLevelDBWrapper\n class CLevelDBBatch\n@@ -31,7 +31,9 @@ class CLevelDBBatch\n     leveldb::WriteBatch batch;\n \n public:\n-    template<typename K, typename V> void Write(const K& key, const V& value) {\n+    template <typename K, typename V>\n+    void Write(const K& key, const V& value)\n+    {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n@@ -45,7 +47,9 @@ class CLevelDBBatch\n         batch.Put(slKey, slValue);\n     }\n \n-    template<typename K> void Erase(const K& key) {\n+    template <typename K>\n+    void Erase(const K& key)\n+    {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n@@ -59,7 +63,7 @@ class CLevelDBWrapper\n {\n private:\n     // custom environment this database is using (may be NULL in case of default environment)\n-    leveldb::Env *penv;\n+    leveldb::Env* penv;\n \n     // database options used\n     leveldb::Options options;\n@@ -77,13 +81,15 @@ class CLevelDBWrapper\n     leveldb::WriteOptions syncoptions;\n \n     // the database itself\n-    leveldb::DB *pdb;\n+    leveldb::DB* pdb;\n \n public:\n-    CLevelDBWrapper(const boost::filesystem::path &path, size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n+    CLevelDBWrapper(const boost::filesystem::path& path, size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n     ~CLevelDBWrapper();\n \n-    template<typename K, typename V> bool Read(const K& key, V& value) const throw(leveldb_error) {\n+    template <typename K, typename V>\n+    bool Read(const K& key, V& value) const throw(leveldb_error)\n+    {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n@@ -100,19 +106,23 @@ class CLevelDBWrapper\n         try {\n             CDataStream ssValue(strValue.data(), strValue.data() + strValue.size(), SER_DISK, CLIENT_VERSION);\n             ssValue >> value;\n-        } catch(const std::exception &) {\n+        } catch (const std::exception&) {\n             return false;\n         }\n         return true;\n     }\n \n-    template<typename K, typename V> bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error) {\n+    template <typename K, typename V>\n+    bool Write(const K& key, const V& value, bool fSync = false) throw(leveldb_error)\n+    {\n         CLevelDBBatch batch;\n         batch.Write(key, value);\n         return WriteBatch(batch, fSync);\n     }\n \n-    template<typename K> bool Exists(const K& key) const throw(leveldb_error) {\n+    template <typename K>\n+    bool Exists(const K& key) const throw(leveldb_error)\n+    {\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(ssKey.GetSerializeSize(key));\n         ssKey << key;\n@@ -129,26 +139,31 @@ class CLevelDBWrapper\n         return true;\n     }\n \n-    template<typename K> bool Erase(const K& key, bool fSync = false) throw(leveldb_error) {\n+    template <typename K>\n+    bool Erase(const K& key, bool fSync = false) throw(leveldb_error)\n+    {\n         CLevelDBBatch batch;\n         batch.Erase(key);\n         return WriteBatch(batch, fSync);\n     }\n \n-    bool WriteBatch(CLevelDBBatch &batch, bool fSync = false) throw(leveldb_error);\n+    bool WriteBatch(CLevelDBBatch& batch, bool fSync = false) throw(leveldb_error);\n \n     // not available for LevelDB; provide for compatibility with BDB\n-    bool Flush() {\n+    bool Flush()\n+    {\n         return true;\n     }\n \n-    bool Sync() throw(leveldb_error) {\n+    bool Sync() throw(leveldb_error)\n+    {\n         CLevelDBBatch batch;\n         return WriteBatch(batch, true);\n     }\n \n     // not exactly clean encapsulation, but it's easiest for now\n-    leveldb::Iterator *NewIterator() {\n+    leveldb::Iterator* NewIterator()\n+    {\n         return pdb->NewIterator(iteroptions);\n     }\n };"
      },
      {
        "sha": "4bc8d9e5aa514b4039ae7080d1bc60dc269275b8",
        "filename": "src/limitedmap.h",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -9,7 +9,8 @@\n #include <map>\n \n /** STL-like map container that only keeps the N elements with the highest value. */\n-template <typename K, typename V> class limitedmap\n+template <typename K, typename V>\n+class limitedmap\n {\n public:\n     typedef K key_type;\n@@ -36,10 +37,8 @@ template <typename K, typename V> class limitedmap\n     void insert(const value_type& x)\n     {\n         std::pair<iterator, bool> ret = map.insert(x);\n-        if (ret.second)\n-        {\n-            if (nMaxSize && map.size() == nMaxSize)\n-            {\n+        if (ret.second) {\n+            if (nMaxSize && map.size() == nMaxSize) {\n                 map.erase(rmap.begin()->second);\n                 rmap.erase(rmap.begin());\n             }\n@@ -54,8 +53,7 @@ template <typename K, typename V> class limitedmap\n             return;\n         std::pair<rmap_iterator, rmap_iterator> itPair = rmap.equal_range(itTarget->second);\n         for (rmap_iterator it = itPair.first; it != itPair.second; ++it)\n-            if (it->second == itTarget)\n-            {\n+            if (it->second == itTarget) {\n                 rmap.erase(it);\n                 map.erase(itTarget);\n                 return;\n@@ -72,8 +70,7 @@ template <typename K, typename V> class limitedmap\n             return;\n         std::pair<rmap_iterator, rmap_iterator> itPair = rmap.equal_range(itTarget->second);\n         for (rmap_iterator it = itPair.first; it != itPair.second; ++it)\n-            if (it->second == itTarget)\n-            {\n+            if (it->second == itTarget) {\n                 rmap.erase(it);\n                 itTarget->second = v;\n                 rmap.insert(make_pair(v, itTarget));\n@@ -88,8 +85,7 @@ template <typename K, typename V> class limitedmap\n     size_type max_size(size_type s)\n     {\n         if (s)\n-            while (map.size() > s)\n-            {\n+            while (map.size() > s) {\n                 map.erase(rmap.begin()->second);\n                 rmap.erase(rmap.begin());\n             }"
      },
      {
        "sha": "1691875f57bfca781f6d6397bdffe564b84eb5a9",
        "filename": "src/mruset.h",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/mruset.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/mruset.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mruset.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -10,7 +10,8 @@\n #include <utility>\n \n /** STL-like set container that only keeps the most recent N elements. */\n-template <typename T> class mruset\n+template <typename T>\n+class mruset\n {\n public:\n     typedef T key_type;\n@@ -32,17 +33,19 @@ template <typename T> class mruset\n     bool empty() const { return set.empty(); }\n     iterator find(const key_type& k) const { return set.find(k); }\n     size_type count(const key_type& k) const { return set.count(k); }\n-    void clear() { set.clear(); queue.clear(); }\n+    void clear()\n+    {\n+        set.clear();\n+        queue.clear();\n+    }\n     bool inline friend operator==(const mruset<T>& a, const mruset<T>& b) { return a.set == b.set; }\n     bool inline friend operator==(const mruset<T>& a, const std::set<T>& b) { return a.set == b; }\n     bool inline friend operator<(const mruset<T>& a, const mruset<T>& b) { return a.set < b.set; }\n     std::pair<iterator, bool> insert(const key_type& x)\n     {\n         std::pair<iterator, bool> ret = set.insert(x);\n-        if (ret.second)\n-        {\n-            if (nMaxSize && queue.size() == nMaxSize)\n-            {\n+        if (ret.second) {\n+            if (nMaxSize && queue.size() == nMaxSize) {\n                 set.erase(queue.front());\n                 queue.pop_front();\n             }\n@@ -54,8 +57,7 @@ template <typename T> class mruset\n     size_type max_size(size_type s)\n     {\n         if (s)\n-            while (queue.size() > s)\n-            {\n+            while (queue.size() > s) {\n                 set.erase(queue.front());\n                 queue.pop_front();\n             }"
      },
      {
        "sha": "f786a20db5074d1c4fb66078188b0bec8accff75",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -35,7 +35,7 @@ static bool noui_ThreadSafeMessageBox(const std::string& message, const std::str\n     return false;\n }\n \n-static void noui_InitMessage(const std::string &message)\n+static void noui_InitMessage(const std::string& message)\n {\n     LogPrintf(\"init message: %s\\n\", message);\n }"
      },
      {
        "sha": "b73041a9fdc532f582e006aab9241c65b80f67ff",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 76,
        "deletions": 75,
        "changes": 151,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -4,7 +4,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef __cplusplus\n-# error This header can only be compiled as C++.\n+#error This header can only be compiled as C++.\n #endif\n \n #ifndef __INCLUDED_PROTOCOL_H__\n@@ -28,43 +28,43 @@\n  */\n class CMessageHeader\n {\n-    public:\n-        CMessageHeader();\n-        CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn);\n+public:\n+    CMessageHeader();\n+    CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn);\n \n-        std::string GetCommand() const;\n-        bool IsValid() const;\n+    std::string GetCommand() const;\n+    bool IsValid() const;\n \n-        ADD_SERIALIZE_METHODS;\n+    ADD_SERIALIZE_METHODS;\n \n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-            READWRITE(FLATDATA(pchMessageStart));\n-            READWRITE(FLATDATA(pchCommand));\n-            READWRITE(nMessageSize);\n-            READWRITE(nChecksum);\n-        }\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(FLATDATA(pchMessageStart));\n+        READWRITE(FLATDATA(pchCommand));\n+        READWRITE(nMessageSize);\n+        READWRITE(nChecksum);\n+    }\n \n     // TODO: make private (improves encapsulation)\n-    public:\n-        enum {\n-            COMMAND_SIZE=12,\n-            MESSAGE_SIZE_SIZE=sizeof(int),\n-            CHECKSUM_SIZE=sizeof(int),\n-\n-            MESSAGE_SIZE_OFFSET=MESSAGE_START_SIZE+COMMAND_SIZE,\n-            CHECKSUM_OFFSET=MESSAGE_SIZE_OFFSET+MESSAGE_SIZE_SIZE,\n-            HEADER_SIZE=MESSAGE_START_SIZE+COMMAND_SIZE+MESSAGE_SIZE_SIZE+CHECKSUM_SIZE\n-        };\n-        char pchMessageStart[MESSAGE_START_SIZE];\n-        char pchCommand[COMMAND_SIZE];\n-        unsigned int nMessageSize;\n-        unsigned int nChecksum;\n+public:\n+    enum {\n+        COMMAND_SIZE = 12,\n+        MESSAGE_SIZE_SIZE = sizeof(int),\n+        CHECKSUM_SIZE = sizeof(int),\n+\n+        MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE,\n+        CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE,\n+        HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE\n+    };\n+    char pchMessageStart[MESSAGE_START_SIZE];\n+    char pchCommand[COMMAND_SIZE];\n+    unsigned int nMessageSize;\n+    unsigned int nChecksum;\n };\n \n /** nServices flags */\n-enum\n-{\n+enum {\n     NODE_NETWORK = (1 << 0),\n \n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n@@ -79,68 +79,69 @@ enum\n /** A CService with information about it as peer */\n class CAddress : public CService\n {\n-    public:\n-        CAddress();\n-        explicit CAddress(CService ipIn, uint64_t nServicesIn=NODE_NETWORK);\n-\n-        void Init();\n-\n-        ADD_SERIALIZE_METHODS;\n-\n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-            if (ser_action.ForRead())\n-                Init();\n-            if (nType & SER_DISK)\n-                READWRITE(nVersion);\n-            if ((nType & SER_DISK) ||\n-                (nVersion >= CADDR_TIME_VERSION && !(nType & SER_GETHASH)))\n-                READWRITE(nTime);\n-            READWRITE(nServices);\n-            READWRITE(*(CService*)this);\n-        }\n+public:\n+    CAddress();\n+    explicit CAddress(CService ipIn, uint64_t nServicesIn = NODE_NETWORK);\n+\n+    void Init();\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        if (ser_action.ForRead())\n+            Init();\n+        if (nType & SER_DISK)\n+            READWRITE(nVersion);\n+        if ((nType & SER_DISK) ||\n+            (nVersion >= CADDR_TIME_VERSION && !(nType & SER_GETHASH)))\n+            READWRITE(nTime);\n+        READWRITE(nServices);\n+        READWRITE(*(CService*)this);\n+    }\n \n     // TODO: make private (improves encapsulation)\n-    public:\n-        uint64_t nServices;\n+public:\n+    uint64_t nServices;\n \n-        // disk and network only\n-        unsigned int nTime;\n+    // disk and network only\n+    unsigned int nTime;\n \n-        // memory only\n-        int64_t nLastTry;\n+    // memory only\n+    int64_t nLastTry;\n };\n \n /** inv message data */\n class CInv\n {\n-    public:\n-        CInv();\n-        CInv(int typeIn, const uint256& hashIn);\n-        CInv(const std::string& strType, const uint256& hashIn);\n+public:\n+    CInv();\n+    CInv(int typeIn, const uint256& hashIn);\n+    CInv(const std::string& strType, const uint256& hashIn);\n \n-        ADD_SERIALIZE_METHODS;\n+    ADD_SERIALIZE_METHODS;\n \n-        template <typename Stream, typename Operation>\n-        inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-            READWRITE(type);\n-            READWRITE(hash);\n-        }\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion)\n+    {\n+        READWRITE(type);\n+        READWRITE(hash);\n+    }\n \n-        friend bool operator<(const CInv& a, const CInv& b);\n+    friend bool operator<(const CInv& a, const CInv& b);\n \n-        bool IsKnownType() const;\n-        const char* GetCommand() const;\n-        std::string ToString() const;\n+    bool IsKnownType() const;\n+    const char* GetCommand() const;\n+    std::string ToString() const;\n \n     // TODO: make private (improves encapsulation)\n-    public:\n-        int type;\n-        uint256 hash;\n+public:\n+    int type;\n+    uint256 hash;\n };\n \n-enum\n-{\n+enum {\n     MSG_TX = 1,\n     MSG_BLOCK,\n     // Nodes may always request a MSG_FILTERED_BLOCK in a getdata, however,"
      },
      {
        "sha": "998e7dfb08a035dc5b70ade9b91b129dbfc996de",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 16,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -8,8 +8,8 @@\n #ifdef WIN32\n #include \"compat.h\" // for Windows API\n #endif\n-#include \"serialize.h\" // for begin_ptr(vec)\n-#include \"util.h\" // for LogPrint()\n+#include \"serialize.h\"        // for begin_ptr(vec)\n+#include \"util.h\"             // for LogPrint()\n #include \"utilstrencodings.h\" // for GetTime()\n \n #include <limits>\n@@ -56,36 +56,33 @@ void RandAddSeedPerfmon()\n #ifdef WIN32\n     // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n     // Seed with the entire set of perfmon data\n-    std::vector <unsigned char> vData(250000,0);\n+    std::vector<unsigned char> vData(250000, 0);\n     long ret = 0;\n     unsigned long nSize = 0;\n     const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n-    while (true)\n-    {\n+    while (true) {\n         nSize = vData.size();\n         ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", NULL, NULL, begin_ptr(vData), &nSize);\n         if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n             break;\n-        vData.resize(std::max((vData.size()*3)/2, nMaxSize)); // Grow size of buffer exponentially\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n     }\n     RegCloseKey(HKEY_PERFORMANCE_DATA);\n-    if (ret == ERROR_SUCCESS)\n-    {\n-        RAND_add(begin_ptr(vData), nSize, nSize/100.0);\n+    if (ret == ERROR_SUCCESS) {\n+        RAND_add(begin_ptr(vData), nSize, nSize / 100.0);\n         OPENSSL_cleanse(begin_ptr(vData), nSize);\n         LogPrint(\"rand\", \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n         static bool warned = false; // Warn only once\n-        if (!warned)\n-        {\n+        if (!warned) {\n             LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n             warned = true;\n         }\n     }\n #endif\n }\n \n-bool GetRandBytes(unsigned char *buf, int num)\n+bool GetRandBytes(unsigned char* buf, int num)\n {\n     if (RAND_bytes(buf, num) != 1) {\n         LogPrintf(\"%s: OpenSSL RAND_bytes() failed with error: %s\\n\", __func__, ERR_error_string(ERR_get_error(), NULL));\n@@ -126,18 +123,17 @@ uint32_t insecure_rand_Rw = 11;\n void seed_insecure_rand(bool fDeterministic)\n {\n     // The seed values have some unlikely fixed points which we avoid.\n-    if(fDeterministic)\n-    {\n+    if (fDeterministic) {\n         insecure_rand_Rz = insecure_rand_Rw = 11;\n     } else {\n         uint32_t tmp;\n         do {\n             GetRandBytes((unsigned char*)&tmp, 4);\n-        } while(tmp == 0 || tmp == 0x9068ffffU);\n+        } while (tmp == 0 || tmp == 0x9068ffffU);\n         insecure_rand_Rz = tmp;\n         do {\n             GetRandBytes((unsigned char*)&tmp, 4);\n-        } while(tmp == 0 || tmp == 0x464fffffU);\n+        } while (tmp == 0 || tmp == 0x464fffffU);\n         insecure_rand_Rw = tmp;\n     }\n }"
      },
      {
        "sha": "161ebe89860aedfe96353cf30f06c159450c68a5",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -19,7 +19,7 @@ void RandAddSeedPerfmon();\n /**\n  * Functions to gather random data via the OpenSSL PRNG\n  */\n-bool GetRandBytes(unsigned char *buf, int num);\n+bool GetRandBytes(unsigned char* buf, int num);\n uint64_t GetRand(uint64_t nMax);\n int GetRandInt(int nMax);\n uint256 GetRandHash();"
      },
      {
        "sha": "307aa2aab8b0c7aa9ee1fae41d19964d7604eff8",
        "filename": "src/rpcclient.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/rpcclient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/rpcclient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -10,6 +10,6 @@\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_writer_template.h\"\n \n-json_spirit::Array RPCConvertValues(const std::string &strMethod, const std::vector<std::string> &strParams);\n+json_spirit::Array RPCConvertValues(const std::string& strMethod, const std::vector<std::string>& strParams);\n \n #endif // _BITCOINRPC_CLIENT_H_"
      },
      {
        "sha": "ef35c9d646a5edec75af6bfda1597a53a2ad8e34",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -32,8 +32,7 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine)\n // Complain if any thread tries to lock in a different order.\n //\n \n-struct CLockLocation\n-{\n+struct CLockLocation {\n     CLockLocation(const char* pszName, const char* pszFile, int nLine)\n     {\n         mutexName = pszName;\n@@ -43,7 +42,7 @@ struct CLockLocation\n \n     std::string ToString() const\n     {\n-        return mutexName+\"  \"+sourceFile+\":\"+itostr(sourceLine);\n+        return mutexName + \"  \" + sourceFile + \":\" + itostr(sourceLine);\n     }\n \n     std::string MutexName() const { return mutexName; }\n@@ -54,7 +53,7 @@ struct CLockLocation\n     int sourceLine;\n };\n \n-typedef std::vector< std::pair<void*, CLockLocation> > LockStack;\n+typedef std::vector<std::pair<void*, CLockLocation> > LockStack;\n \n static boost::mutex dd_mutex;\n static std::map<std::pair<void*, void*>, LockStack> lockorders;\n@@ -65,17 +64,19 @@ static void potential_deadlock_detected(const std::pair<void*, void*>& mismatch,\n {\n     LogPrintf(\"POTENTIAL DEADLOCK DETECTED\\n\");\n     LogPrintf(\"Previous lock order was:\\n\");\n-    BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)& i, s2)\n-    {\n-        if (i.first == mismatch.first) LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second) LogPrintf(\" (2)\");\n+    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s2) {\n+        if (i.first == mismatch.first)\n+            LogPrintf(\" (1)\");\n+        if (i.first == mismatch.second)\n+            LogPrintf(\" (2)\");\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n     LogPrintf(\"Current lock order is:\\n\");\n-    BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)& i, s1)\n-    {\n-        if (i.first == mismatch.first) LogPrintf(\" (1)\");\n-        if (i.first == mismatch.second) LogPrintf(\" (2)\");\n+    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, s1) {\n+        if (i.first == mismatch.first)\n+            LogPrintf(\" (1)\");\n+        if (i.first == mismatch.second)\n+            LogPrintf(\" (2)\");\n         LogPrintf(\" %s\\n\", i.second.ToString());\n     }\n }\n@@ -91,17 +92,17 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n     (*lockstack).push_back(std::make_pair(c, locklocation));\n \n     if (!fTry) {\n-        BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)& i, (*lockstack)) {\n-            if (i.first == c) break;\n+        BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, (*lockstack)) {\n+            if (i.first == c)\n+                break;\n \n             std::pair<void*, void*> p1 = std::make_pair(i.first, c);\n             if (lockorders.count(p1))\n                 continue;\n             lockorders[p1] = (*lockstack);\n \n             std::pair<void*, void*> p2 = std::make_pair(c, i.first);\n-            if (lockorders.count(p2))\n-            {\n+            if (lockorders.count(p2)) {\n                 potential_deadlock_detected(p1, lockorders[p2], lockorders[p1]);\n                 break;\n             }\n@@ -112,8 +113,7 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n \n static void pop_lock()\n {\n-    if (fDebug)\n-    {\n+    if (fDebug) {\n         const CLockLocation& locklocation = (*lockstack).rbegin()->second;\n         LogPrint(\"lock\", \"Unlocked: %s\\n\", locklocation.ToString());\n     }\n@@ -135,17 +135,17 @@ void LeaveCritical()\n std::string LocksHeld()\n {\n     std::string result;\n-    BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)&i, *lockstack)\n+    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, *lockstack)\n         result += i.second.ToString() + std::string(\"\\n\");\n     return result;\n }\n \n-void AssertLockHeldInternal(const char *pszName, const char* pszFile, int nLine, void *cs)\n+void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n-    BOOST_FOREACH(const PAIRTYPE(void*, CLockLocation)&i, *lockstack)\n-        if (i.first == cs) return;\n-    fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\",\n-            pszName, pszFile, nLine, LocksHeld().c_str());\n+    BOOST_FOREACH (const PAIRTYPE(void*, CLockLocation) & i, *lockstack)\n+        if (i.first == cs)\n+            return;\n+    fprintf(stderr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n     abort();\n }\n "
      },
      {
        "sha": "cd0aa7b20e7177c25192e67eb342f735a9690cb9",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 40,
        "deletions": 30,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -48,7 +48,6 @@ LEAVE_CRITICAL_SECTION(mutex); // no RAII\n  */\n \n \n-\n ///////////////////////////////\n //                           //\n // THE ACTUAL IMPLEMENTATION //\n@@ -63,17 +62,17 @@ class LOCKABLE AnnotatedMixin : public PARENT\n public:\n     void lock() EXCLUSIVE_LOCK_FUNCTION()\n     {\n-      PARENT::lock();\n+        PARENT::lock();\n     }\n \n     void unlock() UNLOCK_FUNCTION()\n     {\n-      PARENT::unlock();\n+        PARENT::unlock();\n     }\n \n     bool try_lock() EXCLUSIVE_TRYLOCK_FUNCTION(true)\n     {\n-      return PARENT::try_lock();\n+        return PARENT::try_lock();\n     }\n };\n \n@@ -91,11 +90,13 @@ typedef boost::condition_variable CConditionVariable;\n void EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false);\n void LeaveCritical();\n std::string LocksHeld();\n-void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void *cs);\n+void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs);\n #else\n-void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false) {}\n+void static inline EnterCritical(const char* pszName, const char* pszFile, int nLine, void* cs, bool fTry = false)\n+{\n+}\n void static inline LeaveCritical() {}\n-void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void *cs) {}\n+void static inline AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}\n #endif\n #define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)\n \n@@ -104,7 +105,7 @@ void PrintLockContention(const char* pszName, const char* pszFile, int nLine);\n #endif\n \n /** Wrapper around boost::unique_lock<Mutex> */\n-template<typename Mutex>\n+template <typename Mutex>\n class CMutexLock\n {\n private:\n@@ -114,11 +115,10 @@ class CMutexLock\n     {\n         EnterCritical(pszName, pszFile, nLine, (void*)(lock.mutex()));\n #ifdef DEBUG_LOCKCONTENTION\n-        if (!lock.try_lock())\n-        {\n+        if (!lock.try_lock()) {\n             PrintLockContention(pszName, pszFile, nLine);\n #endif\n-        lock.lock();\n+            lock.lock();\n #ifdef DEBUG_LOCKCONTENTION\n         }\n #endif\n@@ -157,19 +157,19 @@ class CMutexLock\n typedef CMutexLock<CCriticalSection> CCriticalBlock;\n \n #define LOCK(cs) CCriticalBlock criticalblock(cs, #cs, __FILE__, __LINE__)\n-#define LOCK2(cs1,cs2) CCriticalBlock criticalblock1(cs1, #cs1, __FILE__, __LINE__),criticalblock2(cs2, #cs2, __FILE__, __LINE__)\n-#define TRY_LOCK(cs,name) CCriticalBlock name(cs, #cs, __FILE__, __LINE__, true)\n+#define LOCK2(cs1, cs2) CCriticalBlock criticalblock1(cs1, #cs1, __FILE__, __LINE__), criticalblock2(cs2, #cs2, __FILE__, __LINE__)\n+#define TRY_LOCK(cs, name) CCriticalBlock name(cs, #cs, __FILE__, __LINE__, true)\n \n-#define ENTER_CRITICAL_SECTION(cs) \\\n-    { \\\n+#define ENTER_CRITICAL_SECTION(cs)                            \\\n+    {                                                         \\\n         EnterCritical(#cs, __FILE__, __LINE__, (void*)(&cs)); \\\n-        (cs).lock(); \\\n+        (cs).lock();                                          \\\n     }\n \n #define LEAVE_CRITICAL_SECTION(cs) \\\n-    { \\\n-        (cs).unlock(); \\\n-        LeaveCritical(); \\\n+    {                              \\\n+        (cs).unlock();             \\\n+        LeaveCritical();           \\\n     }\n \n class CSemaphore\n@@ -182,23 +182,26 @@ class CSemaphore\n public:\n     CSemaphore(int init) : value(init) {}\n \n-    void wait() {\n+    void wait()\n+    {\n         boost::unique_lock<boost::mutex> lock(mutex);\n         while (value < 1) {\n             condition.wait(lock);\n         }\n         value--;\n     }\n \n-    bool try_wait() {\n+    bool try_wait()\n+    {\n         boost::unique_lock<boost::mutex> lock(mutex);\n         if (value < 1)\n             return false;\n         value--;\n         return true;\n     }\n \n-    void post() {\n+    void post()\n+    {\n         {\n             boost::unique_lock<boost::mutex> lock(mutex);\n             value++;\n@@ -211,31 +214,35 @@ class CSemaphore\n class CSemaphoreGrant\n {\n private:\n-    CSemaphore *sem;\n+    CSemaphore* sem;\n     bool fHaveGrant;\n \n public:\n-    void Acquire() {\n+    void Acquire()\n+    {\n         if (fHaveGrant)\n             return;\n         sem->wait();\n         fHaveGrant = true;\n     }\n \n-    void Release() {\n+    void Release()\n+    {\n         if (!fHaveGrant)\n             return;\n         sem->post();\n         fHaveGrant = false;\n     }\n \n-    bool TryAcquire() {\n+    bool TryAcquire()\n+    {\n         if (!fHaveGrant && sem->try_wait())\n             fHaveGrant = true;\n         return fHaveGrant;\n     }\n \n-    void MoveTo(CSemaphoreGrant &grant) {\n+    void MoveTo(CSemaphoreGrant& grant)\n+    {\n         grant.Release();\n         grant.sem = sem;\n         grant.fHaveGrant = fHaveGrant;\n@@ -245,18 +252,21 @@ class CSemaphoreGrant\n \n     CSemaphoreGrant() : sem(NULL), fHaveGrant(false) {}\n \n-    CSemaphoreGrant(CSemaphore &sema, bool fTry = false) : sem(&sema), fHaveGrant(false) {\n+    CSemaphoreGrant(CSemaphore& sema, bool fTry = false) : sem(&sema), fHaveGrant(false)\n+    {\n         if (fTry)\n             TryAcquire();\n         else\n             Acquire();\n     }\n \n-    ~CSemaphoreGrant() {\n+    ~CSemaphoreGrant()\n+    {\n         Release();\n     }\n \n-    operator bool() {\n+    operator bool()\n+    {\n         return fHaveGrant;\n     }\n };"
      },
      {
        "sha": "7515d050e725c1c7e18b9147477bbf34a3002ae8",
        "filename": "src/threadsafety.h",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/threadsafety.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/threadsafety.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadsafety.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -13,24 +13,24 @@\n // See http://clang.llvm.org/docs/LanguageExtensions.html#threadsafety\n // for documentation.  The clang compiler can do advanced static analysis\n // of locking when given the -Wthread-safety option.\n-#define LOCKABLE                        __attribute__ ((lockable))\n-#define SCOPED_LOCKABLE                 __attribute__ ((scoped_lockable))\n-#define GUARDED_BY(x)                   __attribute__ ((guarded_by(x)))\n-#define GUARDED_VAR                     __attribute__ ((guarded_var))\n-#define PT_GUARDED_BY(x)                __attribute__ ((pt_guarded_by(x)))\n-#define PT_GUARDED_VAR                  __attribute__ ((pt_guarded_var))\n-#define ACQUIRED_AFTER(...)             __attribute__ ((acquired_after(__VA_ARGS__)))\n-#define ACQUIRED_BEFORE(...)            __attribute__ ((acquired_before(__VA_ARGS__)))\n-#define EXCLUSIVE_LOCK_FUNCTION(...)    __attribute__ ((exclusive_lock_function(__VA_ARGS__)))\n-#define SHARED_LOCK_FUNCTION(...)       __attribute__ ((shared_lock_function(__VA_ARGS__)))\n-#define EXCLUSIVE_TRYLOCK_FUNCTION(...) __attribute__ ((exclusive_trylock_function(__VA_ARGS__)))\n-#define SHARED_TRYLOCK_FUNCTION(...)    __attribute__ ((shared_trylock_function(__VA_ARGS__)))\n-#define UNLOCK_FUNCTION(...)            __attribute__ ((unlock_function(__VA_ARGS__)))\n-#define LOCK_RETURNED(x)                __attribute__ ((lock_returned(x)))\n-#define LOCKS_EXCLUDED(...)             __attribute__ ((locks_excluded(__VA_ARGS__)))\n-#define EXCLUSIVE_LOCKS_REQUIRED(...)   __attribute__ ((exclusive_locks_required(__VA_ARGS__)))\n-#define SHARED_LOCKS_REQUIRED(...)      __attribute__ ((shared_locks_required(__VA_ARGS__)))\n-#define NO_THREAD_SAFETY_ANALYSIS       __attribute__ ((no_thread_safety_analysis))\n+#define LOCKABLE __attribute__((lockable))\n+#define SCOPED_LOCKABLE __attribute__((scoped_lockable))\n+#define GUARDED_BY(x) __attribute__((guarded_by(x)))\n+#define GUARDED_VAR __attribute__((guarded_var))\n+#define PT_GUARDED_BY(x) __attribute__((pt_guarded_by(x)))\n+#define PT_GUARDED_VAR __attribute__((pt_guarded_var))\n+#define ACQUIRED_AFTER(...) __attribute__((acquired_after(__VA_ARGS__)))\n+#define ACQUIRED_BEFORE(...) __attribute__((acquired_before(__VA_ARGS__)))\n+#define EXCLUSIVE_LOCK_FUNCTION(...) __attribute__((exclusive_lock_function(__VA_ARGS__)))\n+#define SHARED_LOCK_FUNCTION(...) __attribute__((shared_lock_function(__VA_ARGS__)))\n+#define EXCLUSIVE_TRYLOCK_FUNCTION(...) __attribute__((exclusive_trylock_function(__VA_ARGS__)))\n+#define SHARED_TRYLOCK_FUNCTION(...) __attribute__((shared_trylock_function(__VA_ARGS__)))\n+#define UNLOCK_FUNCTION(...) __attribute__((unlock_function(__VA_ARGS__)))\n+#define LOCK_RETURNED(x) __attribute__((lock_returned(x)))\n+#define LOCKS_EXCLUDED(...) __attribute__((locks_excluded(__VA_ARGS__)))\n+#define EXCLUSIVE_LOCKS_REQUIRED(...) __attribute__((exclusive_locks_required(__VA_ARGS__)))\n+#define SHARED_LOCKS_REQUIRED(...) __attribute__((shared_locks_required(__VA_ARGS__)))\n+#define NO_THREAD_SAFETY_ANALYSIS __attribute__((no_thread_safety_analysis))\n #else\n #define LOCKABLE\n #define SCOPED_LOCKABLE\n@@ -50,6 +50,6 @@\n #define EXCLUSIVE_LOCKS_REQUIRED(...)\n #define SHARED_LOCKS_REQUIRED(...)\n #define NO_THREAD_SAFETY_ANALYSIS\n-#endif  // __GNUC__\n+#endif // __GNUC__\n \n-#endif  // BITCOIN_THREADSAFETY_H\n+#endif // BITCOIN_THREADSAFETY_H"
      },
      {
        "sha": "2c20f4efd5e4bd376f3b302b890ea9768773c9fe",
        "filename": "src/timedata.h",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/timedata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/timedata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.h?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -15,15 +15,16 @@ class CNetAddr;\n /** Median filter over a stream of values.\n  * Returns the median of the last N numbers\n  */\n-template <typename T> class CMedianFilter\n+template <typename T>\n+class CMedianFilter\n {\n private:\n     std::vector<T> vValues;\n     std::vector<T> vSorted;\n     unsigned int nSize;\n+\n public:\n-    CMedianFilter(unsigned int size, T initial_value):\n-        nSize(size)\n+    CMedianFilter(unsigned int size, T initial_value) : nSize(size)\n     {\n         vValues.reserve(size);\n         vValues.push_back(initial_value);\n@@ -32,8 +33,7 @@ template <typename T> class CMedianFilter\n \n     void input(T value)\n     {\n-        if(vValues.size() == nSize)\n-        {\n+        if (vValues.size() == nSize) {\n             vValues.erase(vValues.begin());\n         }\n         vValues.push_back(value);\n@@ -46,14 +46,13 @@ template <typename T> class CMedianFilter\n     T median() const\n     {\n         int size = vSorted.size();\n-        assert(size>0);\n-        if(size & 1) // Odd number of elements\n+        assert(size > 0);\n+        if (size & 1) // Odd number of elements\n         {\n-            return vSorted[size/2];\n-        }\n-        else // Even number of elements\n+            return vSorted[size / 2];\n+        } else // Even number of elements\n         {\n-            return (vSorted[size/2-1] + vSorted[size/2]) / 2;\n+            return (vSorted[size / 2 - 1] + vSorted[size / 2]) / 2;\n         }\n     }\n \n@@ -62,7 +61,7 @@ template <typename T> class CMedianFilter\n         return vValues.size();\n     }\n \n-    std::vector<T> sorted () const\n+    std::vector<T> sorted() const\n     {\n         return vSorted;\n     }"
      },
      {
        "sha": "79406f24757b5ae815c905f17fc9b44f3f5c9f9f",
        "filename": "src/uint256.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 56,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.cpp?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -10,21 +10,21 @@\n #include <stdio.h>\n #include <string.h>\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n base_uint<BITS>::base_uint(const std::string& str)\n {\n     SetHex(str);\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n base_uint<BITS>::base_uint(const std::vector<unsigned char>& vch)\n {\n     if (vch.size() != sizeof(pn))\n         throw uint_error(\"Converting vector of wrong size to base_uint\");\n     memcpy(pn, &vch[0], sizeof(pn));\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator<<=(unsigned int shift)\n {\n     base_uint<BITS> a(*this);\n@@ -33,15 +33,15 @@ base_uint<BITS>& base_uint<BITS>::operator<<=(unsigned int shift)\n     int k = shift / 32;\n     shift = shift % 32;\n     for (int i = 0; i < WIDTH; i++) {\n-        if (i+k+1 < WIDTH && shift != 0)\n-            pn[i+k+1] |= (a.pn[i] >> (32-shift));\n-        if (i+k < WIDTH)\n-            pn[i+k] |= (a.pn[i] << shift);\n+        if (i + k + 1 < WIDTH && shift != 0)\n+            pn[i + k + 1] |= (a.pn[i] >> (32 - shift));\n+        if (i + k < WIDTH)\n+            pn[i + k] |= (a.pn[i] << shift);\n     }\n     return *this;\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator>>=(unsigned int shift)\n {\n     base_uint<BITS> a(*this);\n@@ -50,15 +50,15 @@ base_uint<BITS>& base_uint<BITS>::operator>>=(unsigned int shift)\n     int k = shift / 32;\n     shift = shift % 32;\n     for (int i = 0; i < WIDTH; i++) {\n-        if (i-k-1 >= 0 && shift != 0)\n-            pn[i-k-1] |= (a.pn[i] << (32-shift));\n-        if (i-k >= 0)\n-            pn[i-k] |= (a.pn[i] >> shift);\n+        if (i - k - 1 >= 0 && shift != 0)\n+            pn[i - k - 1] |= (a.pn[i] << (32 - shift));\n+        if (i - k >= 0)\n+            pn[i - k] |= (a.pn[i] >> shift);\n     }\n     return *this;\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator*=(uint32_t b32)\n {\n     uint64_t carry = 0;\n@@ -70,7 +70,7 @@ base_uint<BITS>& base_uint<BITS>::operator*=(uint32_t b32)\n     return *this;\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator*=(const base_uint& b)\n {\n     base_uint<BITS> a = *this;\n@@ -86,12 +86,12 @@ base_uint<BITS>& base_uint<BITS>::operator*=(const base_uint& b)\n     return *this;\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n base_uint<BITS>& base_uint<BITS>::operator/=(const base_uint& b)\n {\n-    base_uint<BITS> div = b; // make a copy, so we can shift.\n+    base_uint<BITS> div = b;     // make a copy, so we can shift.\n     base_uint<BITS> num = *this; // make a copy, so we can subtract.\n-    *this = 0; // the quotient.\n+    *this = 0;                   // the quotient.\n     int num_bits = num.bits();\n     int div_bits = div.bits();\n     if (div_bits == 0)\n@@ -112,9 +112,10 @@ base_uint<BITS>& base_uint<BITS>::operator/=(const base_uint& b)\n     return *this;\n }\n \n-template<unsigned int BITS>\n-int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const {\n-    for (int i = WIDTH-1; i >= 0; i--) {\n+template <unsigned int BITS>\n+int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const\n+{\n+    for (int i = WIDTH - 1; i >= 0; i--) {\n         if (pn[i] < b.pn[i])\n             return -1;\n         if (pn[i] > b.pn[i])\n@@ -123,9 +124,10 @@ int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const {\n     return 0;\n }\n \n-template<unsigned int BITS>\n-bool base_uint<BITS>::EqualTo(uint64_t b) const {\n-    for (int i = WIDTH-1; i >= 2; i--) {\n+template <unsigned int BITS>\n+bool base_uint<BITS>::EqualTo(uint64_t b) const\n+{\n+    for (int i = WIDTH - 1; i >= 2; i--) {\n         if (pn[i])\n             return false;\n     }\n@@ -136,7 +138,7 @@ bool base_uint<BITS>::EqualTo(uint64_t b) const {\n     return true;\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n double base_uint<BITS>::getdouble() const\n {\n     double ret = 0.0;\n@@ -148,19 +150,19 @@ double base_uint<BITS>::getdouble() const\n     return ret;\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n std::string base_uint<BITS>::GetHex() const\n {\n-    char psz[sizeof(pn)*2 + 1];\n+    char psz[sizeof(pn) * 2 + 1];\n     for (unsigned int i = 0; i < sizeof(pn); i++)\n-        sprintf(psz + i*2, \"%02x\", ((unsigned char*)pn)[sizeof(pn) - i - 1]);\n-    return std::string(psz, psz + sizeof(pn)*2);\n+        sprintf(psz + i * 2, \"%02x\", ((unsigned char*)pn)[sizeof(pn) - i - 1]);\n+    return std::string(psz, psz + sizeof(pn) * 2);\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n void base_uint<BITS>::SetHex(const char* psz)\n {\n-    memset(pn,0,sizeof(pn));\n+    memset(pn, 0, sizeof(pn));\n \n     // skip leading spaces\n     while (isspace(*psz))\n@@ -186,28 +188,28 @@ void base_uint<BITS>::SetHex(const char* psz)\n     }\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n void base_uint<BITS>::SetHex(const std::string& str)\n {\n     SetHex(str.c_str());\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n std::string base_uint<BITS>::ToString() const\n {\n     return (GetHex());\n }\n \n-template<unsigned int BITS>\n+template <unsigned int BITS>\n unsigned int base_uint<BITS>::bits() const\n {\n-    for (int pos = WIDTH-1; pos >= 0; pos--) {\n+    for (int pos = WIDTH - 1; pos >= 0; pos--) {\n         if (pn[pos]) {\n             for (int bits = 31; bits > 0; bits--) {\n-                if (pn[pos] & 1<<bits)\n-                    return 32*pos + bits + 1;\n+                if (pn[pos] & 1 << bits)\n+                    return 32 * pos + bits + 1;\n             }\n-            return 32*pos + 1;\n+            return 32 * pos + 1;\n         }\n     }\n     return 0;\n@@ -249,16 +251,16 @@ template unsigned int base_uint<256>::bits() const;\n \n // This implementation directly uses shifts instead of going\n // through an intermediate MPI representation.\n-uint256& uint256::SetCompact(uint32_t nCompact, bool *pfNegative, bool *pfOverflow)\n+uint256& uint256::SetCompact(uint32_t nCompact, bool* pfNegative, bool* pfOverflow)\n {\n     int nSize = nCompact >> 24;\n     uint32_t nWord = nCompact & 0x007fffff;\n     if (nSize <= 3) {\n-        nWord >>= 8*(3-nSize);\n+        nWord >>= 8 * (3 - nSize);\n         *this = nWord;\n     } else {\n         *this = nWord;\n-        *this <<= 8*(nSize-3);\n+        *this <<= 8 * (nSize - 3);\n     }\n     if (pfNegative)\n         *pfNegative = nWord != 0 && (nCompact & 0x00800000) != 0;\n@@ -274,9 +276,9 @@ uint32_t uint256::GetCompact(bool fNegative) const\n     int nSize = (bits() + 7) / 8;\n     uint32_t nCompact = 0;\n     if (nSize <= 3) {\n-        nCompact = GetLow64() << 8*(3-nSize);\n+        nCompact = GetLow64() << 8 * (3 - nSize);\n     } else {\n-        uint256 bn = *this >> 8*(nSize-3);\n+        uint256 bn = *this >> 8 * (nSize - 3);\n         nCompact = bn.GetLow64();\n     }\n     // The 0x00800000 bit denotes the sign.\n@@ -295,27 +297,46 @@ uint32_t uint256::GetCompact(bool fNegative) const\n static void inline HashMix(uint32_t& a, uint32_t& b, uint32_t& c)\n {\n     // Taken from lookup3, by Bob Jenkins.\n-    a -= c; a ^= ((c <<  4) | (c >> 28)); c += b;\n-    b -= a; b ^= ((a <<  6) | (a >> 26)); a += c;\n-    c -= b; c ^= ((b <<  8) | (b >> 24)); b += a;\n-    a -= c; a ^= ((c << 16) | (c >> 16)); c += b;\n-    b -= a; b ^= ((a << 19) | (a >> 13)); a += c;\n-    c -= b; c ^= ((b <<  4) | (b >> 28)); b += a;\n+    a -= c;\n+    a ^= ((c << 4) | (c >> 28));\n+    c += b;\n+    b -= a;\n+    b ^= ((a << 6) | (a >> 26));\n+    a += c;\n+    c -= b;\n+    c ^= ((b << 8) | (b >> 24));\n+    b += a;\n+    a -= c;\n+    a ^= ((c << 16) | (c >> 16));\n+    c += b;\n+    b -= a;\n+    b ^= ((a << 19) | (a >> 13));\n+    a += c;\n+    c -= b;\n+    c ^= ((b << 4) | (b >> 28));\n+    b += a;\n }\n \n static void inline HashFinal(uint32_t& a, uint32_t& b, uint32_t& c)\n {\n     // Taken from lookup3, by Bob Jenkins.\n-    c ^= b; c -= ((b << 14) | (b >> 18));\n-    a ^= c; a -= ((c << 11) | (c >> 21));\n-    b ^= a; b -= ((a << 25) | (a >>  7));\n-    c ^= b; c -= ((b << 16) | (b >> 16));\n-    a ^= c; a -= ((c <<  4) | (c >> 28));\n-    b ^= a; b -= ((a << 14) | (a >> 18));\n-    c ^= b; c -= ((b << 24) | (b >>  8));\n+    c ^= b;\n+    c -= ((b << 14) | (b >> 18));\n+    a ^= c;\n+    a -= ((c << 11) | (c >> 21));\n+    b ^= a;\n+    b -= ((a << 25) | (a >> 7));\n+    c ^= b;\n+    c -= ((b << 16) | (b >> 16));\n+    a ^= c;\n+    a -= ((c << 4) | (c >> 28));\n+    b ^= a;\n+    b -= ((a << 14) | (a >> 18));\n+    c ^= b;\n+    c -= ((b << 24) | (b >> 8));\n }\n \n-uint64_t uint256::GetHash(const uint256 &salt) const\n+uint64_t uint256::GetHash(const uint256& salt) const\n {\n     uint32_t a, b, c;\n     a = b = c = 0xdeadbeef + (WIDTH << 2);"
      },
      {
        "sha": "95632fdab7066a3a20bafbef98efdd2425a3dfcf",
        "filename": "src/version.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/934b153a2caba4071a614e5b3ef40feeaff631d4/src/version.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/934b153a2caba4071a614e5b3ef40feeaff631d4/src/version.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.cpp?ref=934b153a2caba4071a614e5b3ef40feeaff631d4",
        "patch": "@@ -16,7 +16,7 @@\n const std::string CLIENT_NAME(\"Satoshi\");\n \n // Client version number\n-#define CLIENT_VERSION_SUFFIX   \"\"\n+#define CLIENT_VERSION_SUFFIX \"\"\n \n \n // The following part of the code determines the CLIENT_BUILD variable.\n@@ -35,51 +35,51 @@ const std::string CLIENT_NAME(\"Satoshi\");\n \n // First, include build.h if requested\n #ifdef HAVE_BUILD_INFO\n-#    include \"build.h\"\n+#include \"build.h\"\n #endif\n \n // git will put \"#define GIT_ARCHIVE 1\" on the next line inside archives. $Format:%n#define GIT_ARCHIVE 1$\n #ifdef GIT_ARCHIVE\n-#    define GIT_COMMIT_ID \"$Format:%h$\"\n-#    define GIT_COMMIT_DATE \"$Format:%cD$\"\n+#define GIT_COMMIT_ID \"$Format:%h$\"\n+#define GIT_COMMIT_DATE \"$Format:%cD$\"\n #endif\n \n-#define BUILD_DESC_WITH_SUFFIX(maj,min,rev,build,suffix) \\\n+#define BUILD_DESC_WITH_SUFFIX(maj, min, rev, build, suffix) \\\n     \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-\" DO_STRINGIZE(suffix)\n \n-#define BUILD_DESC_FROM_COMMIT(maj,min,rev,build,commit) \\\n+#define BUILD_DESC_FROM_COMMIT(maj, min, rev, build, commit) \\\n     \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-g\" commit\n \n-#define BUILD_DESC_FROM_UNKNOWN(maj,min,rev,build) \\\n+#define BUILD_DESC_FROM_UNKNOWN(maj, min, rev, build) \\\n     \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-unk\"\n \n #ifndef BUILD_DESC\n-#    ifdef BUILD_SUFFIX\n-#        define BUILD_DESC BUILD_DESC_WITH_SUFFIX(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, BUILD_SUFFIX)\n-#    elif defined(GIT_COMMIT_ID)\n-#        define BUILD_DESC BUILD_DESC_FROM_COMMIT(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, GIT_COMMIT_ID)\n-#    else\n-#        define BUILD_DESC BUILD_DESC_FROM_UNKNOWN(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD)\n-#    endif\n+#ifdef BUILD_SUFFIX\n+#define BUILD_DESC BUILD_DESC_WITH_SUFFIX(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, BUILD_SUFFIX)\n+#elif defined(GIT_COMMIT_ID)\n+#define BUILD_DESC BUILD_DESC_FROM_COMMIT(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, GIT_COMMIT_ID)\n+#else\n+#define BUILD_DESC BUILD_DESC_FROM_UNKNOWN(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD)\n+#endif\n #endif\n \n #ifndef BUILD_DATE\n-#    ifdef GIT_COMMIT_DATE\n-#        define BUILD_DATE GIT_COMMIT_DATE\n-#    else\n-#        define BUILD_DATE __DATE__ \", \" __TIME__\n-#    endif\n+#ifdef GIT_COMMIT_DATE\n+#define BUILD_DATE GIT_COMMIT_DATE\n+#else\n+#define BUILD_DATE __DATE__ \", \" __TIME__\n+#endif\n #endif\n \n const std::string CLIENT_BUILD(BUILD_DESC CLIENT_VERSION_SUFFIX);\n const std::string CLIENT_DATE(BUILD_DATE);\n \n static std::string FormatVersion(int nVersion)\n {\n-    if (nVersion%100 == 0)\n-        return strprintf(\"%d.%d.%d\", nVersion/1000000, (nVersion/10000)%100, (nVersion/100)%100);\n+    if (nVersion % 100 == 0)\n+        return strprintf(\"%d.%d.%d\", nVersion / 1000000, (nVersion / 10000) % 100, (nVersion / 100) % 100);\n     else\n-        return strprintf(\"%d.%d.%d.%d\", nVersion/1000000, (nVersion/10000)%100, (nVersion/100)%100, nVersion%100);\n+        return strprintf(\"%d.%d.%d.%d\", nVersion / 1000000, (nVersion / 10000) % 100, (nVersion / 100) % 100, nVersion % 100);\n }\n \n std::string FormatFullVersion()"
      }
    ]
  },
  {
    "sha": "ae9966ed854b8b4db50beba0fc325dff5df2a995",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTk5NjZlZDg1NGI4YjRkYjUwYmViYTBmYzMyNWRmZjVkZjJhOTk1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-21T19:25:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-21T19:25:25Z"
      },
      "message": "Merge pull request #4950\n\n33a2771 test: Fix DoS tests after c74332c (Wladimir J. van der Laan)",
      "tree": {
        "sha": "416c0fc20a7c475de60b90ef7b01600ecb6aa97e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/416c0fc20a7c475de60b90ef7b01600ecb6aa97e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae9966ed854b8b4db50beba0fc325dff5df2a995",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUHyYlAAoJEHSBCwEjRsmm8eoH/1P78R0T+5i9b6w3uABl4yAD\nEiKhi4kjlcpm2RrOOtP22kL8YeVNqJZ6bEBNQzaFrWDaoYp8GXokrXUHyJAAwKOe\n7a6wfqlYxApOrZvgPaXYqiyKLLm+S7jJpx/86XXrVniZoS4sQER75ukYyIJ6xrJV\nkiRGyBm6GmnDf576C8nIozh6VL2+Cui6gLTUd0Ax0xCDBga1qeKqQtbHKKVAo5vj\nF1Ffdk/zCBlyOXmD4j8HZZ5/PooJ+rMEpLrBB1uBCW8towWmjLtfmoh/oLBW8Pvj\nbjoJebhM2jrORCV/m74v+ONrWmZr6ddDBo4v4wTeknMQpi9mWUH/lrDx49MEhGE=\n=3NyH\n-----END PGP SIGNATURE-----",
        "payload": "tree 416c0fc20a7c475de60b90ef7b01600ecb6aa97e\nparent 934b153a2caba4071a614e5b3ef40feeaff631d4\nparent 33a27716fc4389e7acb53708f0e02fc9b4606498\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411327519 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411327525 +0200\n\nMerge pull request #4950\n\n33a2771 test: Fix DoS tests after c74332c (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae9966ed854b8b4db50beba0fc325dff5df2a995",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae9966ed854b8b4db50beba0fc325dff5df2a995",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae9966ed854b8b4db50beba0fc325dff5df2a995/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "934b153a2caba4071a614e5b3ef40feeaff631d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/934b153a2caba4071a614e5b3ef40feeaff631d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/934b153a2caba4071a614e5b3ef40feeaff631d4"
      },
      {
        "sha": "33a27716fc4389e7acb53708f0e02fc9b4606498",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33a27716fc4389e7acb53708f0e02fc9b4606498",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33a27716fc4389e7acb53708f0e02fc9b4606498"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7bec12b665c258a5d34d44f4f82b82602b76a811",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9966ed854b8b4db50beba0fc325dff5df2a995/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9966ed854b8b4db50beba0fc325dff5df2a995/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=ae9966ed854b8b4db50beba0fc325dff5df2a995",
        "patch": "@@ -27,7 +27,11 @@\n extern bool AddOrphanTx(const CTransaction& tx, NodeId peer);\n extern void EraseOrphansFor(NodeId peer);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n-extern std::map<uint256, CTransaction> mapOrphanTransactions;\n+struct COrphanTx {\n+    CTransaction tx;\n+    NodeId fromPeer;\n+};\n+extern std::map<uint256, COrphanTx> mapOrphanTransactions;\n extern std::map<uint256, std::set<uint256> > mapOrphanTransactionsByPrev;\n \n CService ip(uint32_t i)\n@@ -149,11 +153,11 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n \n CTransaction RandomOrphan()\n {\n-    std::map<uint256, CTransaction>::iterator it;\n+    std::map<uint256, COrphanTx>::iterator it;\n     it = mapOrphanTransactions.lower_bound(GetRandHash());\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n-    return it->second;\n+    return it->second.tx;\n }\n \n BOOST_AUTO_TEST_CASE(DoS_mapOrphans)"
      }
    ]
  },
  {
    "sha": "87314c1c5e69035fefa638de8e237e4ce09788e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzMxNGMxYzVlNjkwMzVmZWZhNjM4ZGU4ZTIzN2U0Y2UwOTc4OGU5",
    "commit": {
      "author": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-22T01:18:48Z"
      },
      "committer": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-22T01:18:48Z"
      },
      "message": "Fixing improper input syntax and failing bounds check",
      "tree": {
        "sha": "17116059e1e209081b725cc7aa502e6b13e4a16f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17116059e1e209081b725cc7aa502e6b13e4a16f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87314c1c5e69035fefa638de8e237e4ce09788e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87314c1c5e69035fefa638de8e237e4ce09788e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87314c1c5e69035fefa638de8e237e4ce09788e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87314c1c5e69035fefa638de8e237e4ce09788e9/comments",
    "author": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2fc6c67400e91846ca1c1c57011e57491013f9bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fc6c67400e91846ca1c1c57011e57491013f9bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fc6c67400e91846ca1c1c57011e57491013f9bd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "447d808dee0e7b3f1e0e3dcbe5292ebd0121b72b",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87314c1c5e69035fefa638de8e237e4ce09788e9/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87314c1c5e69035fefa638de8e237e4ce09788e9/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=87314c1c5e69035fefa638de8e237e4ce09788e9",
        "patch": "@@ -921,7 +921,7 @@ class CDataStream\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch((char*)&vchIn.begin()[0], (char*)&vchIn.end()[0])\n+    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())\n     {\n         Init(nTypeIn, nVersionIn);\n     }"
      }
    ]
  },
  {
    "sha": "5547f08ec70882340fc0cf76e2a442298c02f326",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTQ3ZjA4ZWM3MDg4MjM0MGZjMGNmNzZlMmE0NDIyOThjMDJmMzI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T07:03:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T07:03:59Z"
      },
      "message": "Merge pull request #4952\n\n01c2807 Add warning about the merkle-tree algorithm duplicate txid flaw (Peter Todd)",
      "tree": {
        "sha": "6844326ce33fb9f45db477c45e693cc4910258df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6844326ce33fb9f45db477c45e693cc4910258df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5547f08ec70882340fc0cf76e2a442298c02f326",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUH8nfAAoJEHSBCwEjRsmm2C8H/jDGYgLRQsIUa4pOEa0JDCxT\nvtjxahd0LYb1v2OFs/0eBScFUHsRK9GXTjF2p7tAeAk/9gFfiLPfTiiKmpJS4CXd\nUUnx56aJHkttn8o5pcadyHP2J76/38u1+ncAgewIZYBS73XB0seJ6S55mXgCJzpD\nUgmG1iD9nV+1NmuacmGlbJXMmv8svxvhW14xoLcVVoKeGb9x0IeqGpPPHc4sJ6aZ\nzjqidydUMKFXUngPlGv8ORRmHTkuTD1zYbf9Zvxtl1hpZoolpryTIS2j1qWLdMsF\nkQt8Uxd62FtFQ0ZceephR5dfSGyvR4mxoWn1Rjewl4SVgWZF0F3fVf6cDTrtdZ0=\n=QXDS\n-----END PGP SIGNATURE-----",
        "payload": "tree 6844326ce33fb9f45db477c45e693cc4910258df\nparent ae9966ed854b8b4db50beba0fc325dff5df2a995\nparent 01c28073ba2cae5a53124c7dc7123240b98513ce\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411369416 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411369439 +0200\n\nMerge pull request #4952\n\n01c2807 Add warning about the merkle-tree algorithm duplicate txid flaw (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5547f08ec70882340fc0cf76e2a442298c02f326",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5547f08ec70882340fc0cf76e2a442298c02f326",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5547f08ec70882340fc0cf76e2a442298c02f326/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae9966ed854b8b4db50beba0fc325dff5df2a995",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae9966ed854b8b4db50beba0fc325dff5df2a995",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae9966ed854b8b4db50beba0fc325dff5df2a995"
      },
      {
        "sha": "01c28073ba2cae5a53124c7dc7123240b98513ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01c28073ba2cae5a53124c7dc7123240b98513ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01c28073ba2cae5a53124c7dc7123240b98513ce"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e52327ba8e7d453b83bc4320ff5bb7cee5af33c5",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5547f08ec70882340fc0cf76e2a442298c02f326/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5547f08ec70882340fc0cf76e2a442298c02f326/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=5547f08ec70882340fc0cf76e2a442298c02f326",
        "patch": "@@ -226,6 +226,13 @@ uint256 CBlockHeader::GetHash() const\n \n uint256 CBlock::BuildMerkleTree() const\n {\n+    // WARNING! If you're reading this because you're learning about crypto\n+    // and/or designing a new system that will use merkle trees, keep in mind\n+    // that the following merkle tree algorithm has a serious flaw related to\n+    // duplicate txids, resulting in a vulnerability. (CVE-2012-2459) Bitcoin\n+    // has since worked around the flaw, but for new applications you should\n+    // use something different; don't just copy-and-paste this code without\n+    // understanding the problem first.\n     vMerkleTree.clear();\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n         vMerkleTree.push_back(tx.GetHash());"
      }
    ]
  },
  {
    "sha": "6b09bc45b12465dc8511f1e84791e3b4db5400b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjA5YmM0NWIxMjQ2NWRjODUxMWYxZTg0NzkxZTNiNGRiNTQwMGI4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T07:33:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T07:33:34Z"
      },
      "message": "Merge pull request #4941\n\na49f11d qt: Change splash screen to normal window (Wladimir J. van der Laan)",
      "tree": {
        "sha": "5fc60b480a30373f96f06513d985a3acf61a973a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fc60b480a30373f96f06513d985a3acf61a973a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b09bc45b12465dc8511f1e84791e3b4db5400b8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUH9DOAAoJEHSBCwEjRsmm4voH/iv7jvBmht6Gq5NaksKETw56\nlG8WjkErK+W/XX6au4jUPYMD4jFkIyUUA6PNYvSPumOSY0U+C9EtLoyxDHmug3Js\nuU9meB+r+xsz/B9WBwixhuMcnZJpfAt+lO31WqbCJCObIVjwifRpVqjc4EPF5m4I\n+LgGzI4mIGeTZbAxYppMBj+oKlFCBDpkaFnFXznPKcRVuK2J0MKOmanYvN0BgF4l\nQ7ikwZiY7bpI26FZ7dWb64gOL7BUBvkIIIbcytKHJPfQ4hzaB2HBqMDeQb90iX27\nXpZsJ+7HI2EcM3zDPdKcHYAPCQgBMT6WIbvNBs71sEhLEK3RbA/QGtygjv840x4=\n=Yj6h\n-----END PGP SIGNATURE-----",
        "payload": "tree 5fc60b480a30373f96f06513d985a3acf61a973a\nparent 5547f08ec70882340fc0cf76e2a442298c02f326\nparent a49f11d9edf2f7dbce154ca370494a8f86e013d0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411371201 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411371214 +0200\n\nMerge pull request #4941\n\na49f11d qt: Change splash screen to normal window (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b09bc45b12465dc8511f1e84791e3b4db5400b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b09bc45b12465dc8511f1e84791e3b4db5400b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b09bc45b12465dc8511f1e84791e3b4db5400b8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5547f08ec70882340fc0cf76e2a442298c02f326",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5547f08ec70882340fc0cf76e2a442298c02f326",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5547f08ec70882340fc0cf76e2a442298c02f326"
      },
      {
        "sha": "a49f11d9edf2f7dbce154ca370494a8f86e013d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49f11d9edf2f7dbce154ca370494a8f86e013d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a49f11d9edf2f7dbce154ca370494a8f86e013d0"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 58,
      "deletions": 19
    },
    "files": [
      {
        "sha": "676f218f20b9c67fb9267356b31f90345cd846d6",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b09bc45b12465dc8511f1e84791e3b4db5400b8/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b09bc45b12465dc8511f1e84791e3b4db5400b8/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=6b09bc45b12465dc8511f1e84791e3b4db5400b8",
        "patch": "@@ -338,8 +338,7 @@ void BitcoinApplication::createWindow(bool isaTestNet)\n \n void BitcoinApplication::createSplashScreen(bool isaTestNet)\n {\n-    SplashScreen *splash = new SplashScreen(QPixmap(), 0, isaTestNet);\n-    splash->setAttribute(Qt::WA_DeleteOnClose);\n+    SplashScreen *splash = new SplashScreen(0, isaTestNet);\n     splash->show();\n     connect(this, SIGNAL(splashFinished(QWidget*)), splash, SLOT(slotFinish(QWidget*)));\n }\n@@ -423,8 +422,6 @@ void BitcoinApplication::initializeResult(int retval)\n         }\n #endif\n \n-        emit splashFinished(window);\n-\n         // If -min option passed, start window minimized.\n         if(GetBoolArg(\"-min\", false))\n         {\n@@ -434,6 +431,8 @@ void BitcoinApplication::initializeResult(int retval)\n         {\n             window->show();\n         }\n+        emit splashFinished(window);\n+\n #ifdef ENABLE_WALLET\n         // Now that initialization/startup is done, process any command-line\n         // bitcoin: URIs or payment requests:"
      },
      {
        "sha": "b6443d47ff2277669f2af959adecc86c2b6c061b",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 13,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b09bc45b12465dc8511f1e84791e3b4db5400b8/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b09bc45b12465dc8511f1e84791e3b4db5400b8/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=6b09bc45b12465dc8511f1e84791e3b4db5400b8",
        "patch": "@@ -15,11 +15,12 @@\n \n #include <QApplication>\n #include <QPainter>\n+#include <QDesktopWidget>\n \n-SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTestNet) :\n-    QSplashScreen(pixmap, f)\n+SplashScreen::SplashScreen(Qt::WindowFlags f, bool isTestNet) :\n+    QWidget(0, f), curAlignment(0)\n {\n-    setAutoFillBackground(true);\n+    //setAutoFillBackground(true);\n \n     // set reference point, paddings\n     int paddingRight            = 50;\n@@ -38,15 +39,14 @@ SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTest\n     QString font            = \"Arial\";\n \n     // load the bitmap for writing some text over it\n-    QPixmap newPixmap;\n     if(isTestNet) {\n-        newPixmap     = QPixmap(\":/images/splash_testnet\");\n+        pixmap     = QPixmap(\":/images/splash_testnet\");\n     }\n     else {\n-        newPixmap     = QPixmap(\":/images/splash\");\n+        pixmap     = QPixmap(\":/images/splash\");\n     }\n \n-    QPainter pixPaint(&newPixmap);\n+    QPainter pixPaint(&pixmap);\n     pixPaint.setPen(QColor(100,100,100));\n \n     // check font size and drawing with\n@@ -61,7 +61,7 @@ SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTest\n     pixPaint.setFont(QFont(font, 33*fontFactor));\n     fm = pixPaint.fontMetrics();\n     titleTextWidth  = fm.width(titleText);\n-    pixPaint.drawText(newPixmap.width()-titleTextWidth-paddingRight,paddingTop,titleText);\n+    pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight,paddingTop,titleText);\n \n     pixPaint.setFont(QFont(font, 15*fontFactor));\n \n@@ -72,11 +72,11 @@ SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTest\n         pixPaint.setFont(QFont(font, 10*fontFactor));\n         titleVersionVSpace -= 5;\n     }\n-    pixPaint.drawText(newPixmap.width()-titleTextWidth-paddingRight+2,paddingTop+titleVersionVSpace,versionText);\n+    pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight+2,paddingTop+titleVersionVSpace,versionText);\n \n     // draw copyright stuff\n     pixPaint.setFont(QFont(font, 10*fontFactor));\n-    pixPaint.drawText(newPixmap.width()-titleTextWidth-paddingRight,paddingTop+titleCopyrightVSpace,copyrightText);\n+    pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight,paddingTop+titleCopyrightVSpace,copyrightText);\n \n     // draw testnet string if testnet is on\n     if(isTestNet) {\n@@ -85,12 +85,22 @@ SplashScreen::SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTest\n         pixPaint.setFont(boldFont);\n         fm = pixPaint.fontMetrics();\n         int testnetAddTextWidth  = fm.width(testnetAddText);\n-        pixPaint.drawText(newPixmap.width()-testnetAddTextWidth-10,15,testnetAddText);\n+        pixPaint.drawText(pixmap.width()-testnetAddTextWidth-10,15,testnetAddText);\n     }\n \n     pixPaint.end();\n \n-    this->setPixmap(newPixmap);\n+    // Set window title\n+    if(isTestNet)\n+        setWindowTitle(titleText + \" \" + testnetAddText);\n+    else\n+        setWindowTitle(titleText);\n+\n+    // Resize window and move to center of desktop, disallow resizing\n+    QRect r(QPoint(), pixmap.size());\n+    resize(r.size());\n+    setFixedSize(r.size());\n+    move(QApplication::desktop()->screenGeometry().center() - r.center());\n \n     subscribeToCoreSignals();\n }\n@@ -102,7 +112,8 @@ SplashScreen::~SplashScreen()\n \n void SplashScreen::slotFinish(QWidget *mainWin)\n {\n-    finish(mainWin);\n+    hide();\n+    deleteLater();\n }\n \n static void InitMessage(SplashScreen *splash, const std::string &message)\n@@ -146,3 +157,21 @@ void SplashScreen::unsubscribeFromCoreSignals()\n         pwalletMain->ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n #endif\n }\n+\n+void SplashScreen::showMessage(const QString &message, int alignment, const QColor &color)\n+{\n+    curMessage = message;\n+    curAlignment = alignment;\n+    curColor = color;\n+    update();\n+}\n+\n+void SplashScreen::paintEvent(QPaintEvent *event)\n+{\n+    QPainter painter(this);\n+    painter.drawPixmap(0, 0, pixmap);\n+    QRect r = rect().adjusted(5, 5, -5, -5);\n+    painter.setPen(curColor);\n+    painter.drawText(r, curAlignment, curMessage);\n+}\n+"
      },
      {
        "sha": "1151d6c11190f0cae8d1b97bc7ce7f5867140082",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b09bc45b12465dc8511f1e84791e3b4db5400b8/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b09bc45b12465dc8511f1e84791e3b4db5400b8/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=6b09bc45b12465dc8511f1e84791e3b4db5400b8",
        "patch": "@@ -9,23 +9,34 @@\n \n /** class for the splashscreen with information of the running client\n  */\n-class SplashScreen : public QSplashScreen\n+class SplashScreen : public QWidget\n {\n     Q_OBJECT\n \n public:\n-    explicit SplashScreen(const QPixmap &pixmap, Qt::WindowFlags f, bool isTestNet);\n+    explicit SplashScreen(Qt::WindowFlags f, bool isTestNet);\n     ~SplashScreen();\n \n+protected:\n+     void paintEvent(QPaintEvent *event);\n+\n public slots:\n     /** Slot to call finish() method as it's not defined as slot */\n     void slotFinish(QWidget *mainWin);\n \n+    /** Show message and progress */\n+    void showMessage(const QString &message, int alignment, const QColor &color);\n+\n private:\n     /** Connect core signals to splash screen */\n     void subscribeToCoreSignals();\n     /** Disconnect core signals to splash screen */\n     void unsubscribeFromCoreSignals();\n+\n+    QPixmap pixmap;\n+    QString curMessage;\n+    QColor curColor;\n+    int curAlignment;\n };\n \n #endif // SPLASHSCREEN_H"
      }
    ]
  },
  {
    "sha": "2e5361b9c20517a22a4d1fdae3077d23800ecba7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTUzNjFiOWMyMDUxN2EyMmE0ZDFmZGFlMzA3N2QyMzgwMGVjYmE3",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-08-28T21:00:55Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-22T07:35:40Z"
      },
      "message": "remove code below asserts in limitedmap.h (fixes a ToDo)",
      "tree": {
        "sha": "ecbdd822139c868ba0eed7c12eeb80d47210c763",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ecbdd822139c868ba0eed7c12eeb80d47210c763"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e5361b9c20517a22a4d1fdae3077d23800ecba7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e5361b9c20517a22a4d1fdae3077d23800ecba7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e5361b9c20517a22a4d1fdae3077d23800ecba7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e5361b9c20517a22a4d1fdae3077d23800ecba7/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "5547f08ec70882340fc0cf76e2a442298c02f326",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5547f08ec70882340fc0cf76e2a442298c02f326",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5547f08ec70882340fc0cf76e2a442298c02f326"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 6,
      "deletions": 9
    },
    "files": [
      {
        "sha": "03727d7c42566cdc00c209b91dd0f17bbaa45a39",
        "filename": "src/limitedmap.h",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e5361b9c20517a22a4d1fdae3077d23800ecba7/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e5361b9c20517a22a4d1fdae3077d23800ecba7/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=2e5361b9c20517a22a4d1fdae3077d23800ecba7",
        "patch": "@@ -1,11 +1,11 @@\n-// Copyright (c) 2012 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2012-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_LIMITEDMAP_H\n #define BITCOIN_LIMITEDMAP_H\n \n-#include <assert.h> // TODO: remove\n+#include <assert.h>\n #include <map>\n \n /** STL-like map container that only keeps the N elements with the highest value. */\n@@ -59,12 +59,11 @@ class limitedmap\n                 return;\n             }\n         // Shouldn't ever get here\n-        assert(0); //TODO remove me\n-        map.erase(itTarget);\n+        assert(0);\n     }\n     void update(const_iterator itIn, const mapped_type& v)\n     {\n-        //TODO: When we switch to C++11, use map.erase(itIn, itIn) to get the non-const iterator\n+        // TODO: When we switch to C++11, use map.erase(itIn, itIn) to get the non-const iterator.\n         iterator itTarget = map.find(itIn->first);\n         if (itTarget == map.end())\n             return;\n@@ -77,9 +76,7 @@ class limitedmap\n                 return;\n             }\n         // Shouldn't ever get here\n-        assert(0); //TODO remove me\n-        itTarget->second = v;\n-        rmap.insert(make_pair(v, itTarget));\n+        assert(0);\n     }\n     size_type max_size() const { return nMaxSize; }\n     size_type max_size(size_type s)"
      }
    ]
  },
  {
    "sha": "cfc5cfb0f0d074774b17adcb88aaed11e6847c92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmM1Y2ZiMGYwZDA3NDc3NGIxN2FkY2I4OGFhZWQxMWU2ODQ3Yzky",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T08:08:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T08:13:52Z"
      },
      "message": "qt: Make splash and shutdown window ignore close events\n\nIt's strange to be able to close these windows while there is work\nin progress.\n\nAlso set Qt::WA_DeleteOnClose on both windows to make sure that they\nare deleted eventually, no matter what happens.",
      "tree": {
        "sha": "e2e45db192bc450888caadb3ab2241f10404f30c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2e45db192bc450888caadb3ab2241f10404f30c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfc5cfb0f0d074774b17adcb88aaed11e6847c92",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUH9pCAAoJEHSBCwEjRsmmIEcH/jr8VezjhsQgnOWGo6mMcxN9\nLs8AfFViVfoRmNxL5qUcLFIC4AY4ElOa4rk+FYjv+mCFwwhtBw52/rM+oKt3h/yp\nww51e8EyzRK2VekgivZxH/lUxuGVZbRvMWkWEUGeQOXR98whQmyooapWEQQP3ymn\nJULeeY9KS8V9GNtrwCvrYtI3HG7wdznAeKtUyCsuJ+icBO6RvjjzKLMFDAnv0dCZ\nT2oROE0+OJd9Dy1eKX7CiOvUy58Yarw1zJ/9MbHurJCebpCNKD0ltrx9WWvne0Xp\n0BCNia4QOlvNcS83Hqegg1kKjueAWM8yq2QLBKHnPVBZcamwE0l/zRie0l9jMas=\n=xyOE\n-----END PGP SIGNATURE-----",
        "payload": "tree e2e45db192bc450888caadb3ab2241f10404f30c\nparent 6b09bc45b12465dc8511f1e84791e3b4db5400b8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411373327 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411373632 +0200\n\nqt: Make splash and shutdown window ignore close events\n\nIt's strange to be able to close these windows while there is work\nin progress.\n\nAlso set Qt::WA_DeleteOnClose on both windows to make sure that they\nare deleted eventually, no matter what happens.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfc5cfb0f0d074774b17adcb88aaed11e6847c92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfc5cfb0f0d074774b17adcb88aaed11e6847c92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfc5cfb0f0d074774b17adcb88aaed11e6847c92/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b09bc45b12465dc8511f1e84791e3b4db5400b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b09bc45b12465dc8511f1e84791e3b4db5400b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b09bc45b12465dc8511f1e84791e3b4db5400b8"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 42,
      "deletions": 11
    },
    "files": [
      {
        "sha": "fd629ccd2cb4a50fcc027dbcd9ec5cd5cea065f3",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc5cfb0f0d074774b17adcb88aaed11e6847c92/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc5cfb0f0d074774b17adcb88aaed11e6847c92/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=cfc5cfb0f0d074774b17adcb88aaed11e6847c92",
        "patch": "@@ -339,6 +339,9 @@ void BitcoinApplication::createWindow(bool isaTestNet)\n void BitcoinApplication::createSplashScreen(bool isaTestNet)\n {\n     SplashScreen *splash = new SplashScreen(0, isaTestNet);\n+    // We don't hold a direct pointer to the splash screen after creation, so use\n+    // Qt::WA_DeleteOnClose to make sure that the window will be deleted eventually.\n+    splash->setAttribute(Qt::WA_DeleteOnClose);\n     splash->show();\n     connect(this, SIGNAL(splashFinished(QWidget*)), splash, SLOT(slotFinish(QWidget*)));\n }"
      },
      {
        "sha": "382f0e67b68a304d82f931e2be2778b7c2701c31",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc5cfb0f0d074774b17adcb88aaed11e6847c92/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc5cfb0f0d074774b17adcb88aaed11e6847c92/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=cfc5cfb0f0d074774b17adcb88aaed11e6847c92",
        "patch": "@@ -14,8 +14,9 @@\n #endif\n \n #include <QApplication>\n-#include <QPainter>\n+#include <QCloseEvent>\n #include <QDesktopWidget>\n+#include <QPainter>\n \n SplashScreen::SplashScreen(Qt::WindowFlags f, bool isTestNet) :\n     QWidget(0, f), curAlignment(0)\n@@ -113,7 +114,6 @@ SplashScreen::~SplashScreen()\n void SplashScreen::slotFinish(QWidget *mainWin)\n {\n     hide();\n-    deleteLater();\n }\n \n static void InitMessage(SplashScreen *splash, const std::string &message)\n@@ -175,3 +175,8 @@ void SplashScreen::paintEvent(QPaintEvent *event)\n     painter.drawText(r, curAlignment, curMessage);\n }\n \n+void SplashScreen::closeEvent(QCloseEvent *event)\n+{\n+    event->ignore();\n+}\n+"
      },
      {
        "sha": "89c21e64579f19be2f6390e7647d75145ed891ba",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc5cfb0f0d074774b17adcb88aaed11e6847c92/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc5cfb0f0d074774b17adcb88aaed11e6847c92/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=cfc5cfb0f0d074774b17adcb88aaed11e6847c92",
        "patch": "@@ -7,7 +7,11 @@\n \n #include <QSplashScreen>\n \n-/** class for the splashscreen with information of the running client\n+/** Class for the splashscreen with information of the running client.\n+ *\n+ * @note this is intentionally not a QSplashScreen. Bitcoin Core initialization\n+ * can take a long time, and in that case a progress window that cannot be\n+ * moved around and minimized has turned out to be frustrating to the user.\n  */\n class SplashScreen : public QWidget\n {\n@@ -18,7 +22,8 @@ class SplashScreen : public QWidget\n     ~SplashScreen();\n \n protected:\n-     void paintEvent(QPaintEvent *event);\n+    void paintEvent(QPaintEvent *event);\n+    void closeEvent(QCloseEvent *event);\n \n public slots:\n     /** Slot to call finish() method as it's not defined as slot */"
      },
      {
        "sha": "84f88dff5af8d335f9334184864ad66b6e870144",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc5cfb0f0d074774b17adcb88aaed11e6847c92/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc5cfb0f0d074774b17adcb88aaed11e6847c92/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=cfc5cfb0f0d074774b17adcb88aaed11e6847c92",
        "patch": "@@ -15,6 +15,7 @@\n \n #include <stdio.h>\n \n+#include <QCloseEvent>\n #include <QLabel>\n #include <QRegExp>\n #include <QVBoxLayout>\n@@ -106,22 +107,35 @@ void HelpMessageDialog::on_okButton_accepted()\n \n \n /** \"Shutdown\" window */\n+ShutdownWindow::ShutdownWindow(QWidget *parent, Qt::WindowFlags f):\n+    QWidget(parent, f)\n+{\n+    QVBoxLayout *layout = new QVBoxLayout();\n+    layout->addWidget(new QLabel(\n+        tr(\"Bitcoin Core is shutting down...\") + \"<br /><br />\" +\n+        tr(\"Do not shut down the computer until this window disappears.\")));\n+    setLayout(layout);\n+}\n+\n void ShutdownWindow::showShutdownWindow(BitcoinGUI *window)\n {\n     if (!window)\n         return;\n \n     // Show a simple window indicating shutdown status\n-    QWidget *shutdownWindow = new QWidget();\n-    QVBoxLayout *layout = new QVBoxLayout();\n-    layout->addWidget(new QLabel(\n-        tr(\"Bitcoin Core is shutting down...\") + \"<br /><br />\" +\n-        tr(\"Do not shut down the computer until this window disappears.\")));\n-    shutdownWindow->setLayout(layout);\n+    QWidget *shutdownWindow = new ShutdownWindow();\n+    // We don't hold a direct pointer to the shutdown window after creation, so use\n+    // Qt::WA_DeleteOnClose to make sure that the window will be deleted eventually.\n+    shutdownWindow->setAttribute(Qt::WA_DeleteOnClose);\n     shutdownWindow->setWindowTitle(window->windowTitle());\n \n     // Center shutdown window at where main window was\n     const QPoint global = window->mapToGlobal(window->rect().center());\n     shutdownWindow->move(global.x() - shutdownWindow->width() / 2, global.y() - shutdownWindow->height() / 2);\n     shutdownWindow->show();\n }\n+\n+void ShutdownWindow::closeEvent(QCloseEvent *event)\n+{\n+    event->ignore();\n+}"
      },
      {
        "sha": "ae5045cca90555846515a8e933390ed637c2c66d",
        "filename": "src/qt/utilitydialog.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfc5cfb0f0d074774b17adcb88aaed11e6847c92/src/qt/utilitydialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfc5cfb0f0d074774b17adcb88aaed11e6847c92/src/qt/utilitydialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.h?ref=cfc5cfb0f0d074774b17adcb88aaed11e6847c92",
        "patch": "@@ -37,12 +37,16 @@ private slots:\n \n \n /** \"Shutdown\" window */\n-class ShutdownWindow : public QObject\n+class ShutdownWindow : public QWidget\n {\n     Q_OBJECT\n \n public:\n+    ShutdownWindow(QWidget *parent=0, Qt::WindowFlags f=0);\n     static void showShutdownWindow(BitcoinGUI *window);\n+\n+protected:\n+    void closeEvent(QCloseEvent *event);\n };\n \n #endif // UTILITYDIALOG_H"
      }
    ]
  },
  {
    "sha": "aa340a8f07062600abc84bc0deb47859bd712792",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTM0MGE4ZjA3MDYyNjAwYWJjODRiYzBkZWI0Nzg1OWJkNzEyNzky",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T08:32:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T08:32:21Z"
      },
      "message": "Merge pull request #4951\n\nd6712db Also create pid file in non-daemon mode (Wladimir J. van der Laan)",
      "tree": {
        "sha": "4bd23bf9daf695a5b56d92f0d2d9851123ae47cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bd23bf9daf695a5b56d92f0d2d9851123ae47cb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa340a8f07062600abc84bc0deb47859bd712792",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUH96VAAoJEHSBCwEjRsmmkzgH/2SOvIaHr5aWvVC4z9Pdr8cS\nbe4p+SM/6mQX8Ay5YBRmOZ0qp41dgb/cV0T4xltkzk6tBcmPmspE9fZyvFR4+lcU\nTRZqjT9xTXu5h/d92LL++KPxyhi9S6YVV8F++BCIc0PFsakCh7Pk/VGtoyEZXJco\nSOfZxCm1Vpxubr/E/iueOhTjd/YOhJKexgGZCpCMJqSLFYTk0uBEh/mH6XC5OKc0\n4F1MRt7y8hIcyzHuiTqdlRaWbRZgn1vHf2nHzSLbZAktBrrguutQnAenTVuwMDXf\nPyz3eul7v9dVjBlH8EtfAjWnGpfaKO+Y4EGJY9gqo+Qh+/VtRQMQZgWYomeidYM=\n=7epT\n-----END PGP SIGNATURE-----",
        "payload": "tree 4bd23bf9daf695a5b56d92f0d2d9851123ae47cb\nparent cfc5cfb0f0d074774b17adcb88aaed11e6847c92\nparent d6712db35419e36b2c89191eb730a86d95abf4b0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411374721 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411374741 +0200\n\nMerge pull request #4951\n\nd6712db Also create pid file in non-daemon mode (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa340a8f07062600abc84bc0deb47859bd712792",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa340a8f07062600abc84bc0deb47859bd712792",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa340a8f07062600abc84bc0deb47859bd712792/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfc5cfb0f0d074774b17adcb88aaed11e6847c92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfc5cfb0f0d074774b17adcb88aaed11e6847c92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfc5cfb0f0d074774b17adcb88aaed11e6847c92"
      },
      {
        "sha": "d6712db35419e36b2c89191eb730a86d95abf4b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6712db35419e36b2c89191eb730a86d95abf4b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6712db35419e36b2c89191eb730a86d95abf4b0"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 9,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0737b5a83dad27dca36e55d32f6c068b26802266",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa340a8f07062600abc84bc0deb47859bd712792/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa340a8f07062600abc84bc0deb47859bd712792/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=aa340a8f07062600abc84bc0deb47859bd712792",
        "patch": "@@ -129,7 +129,6 @@ bool AppInit(int argc, char* argv[])\n             }\n             if (pid > 0) // Parent process, pid is child process id\n             {\n-                CreatePidFile(GetPidFile(), pid);\n                 return true;\n             }\n             // Child process falls through to rest of initialization"
      },
      {
        "sha": "7299bd0f4a732bfbfe1a773648c7929e41b9e07b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa340a8f07062600abc84bc0deb47859bd712792/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa340a8f07062600abc84bc0deb47859bd712792/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=aa340a8f07062600abc84bc0deb47859bd712792",
        "patch": "@@ -160,7 +160,9 @@ void Shutdown()\n     if (pwalletMain)\n         bitdb.Flush(true);\n #endif\n+#ifndef WIN32\n     boost::filesystem::remove(GetPidFile());\n+#endif\n     UnregisterAllWallets();\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n@@ -228,7 +230,9 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -maxorphanblocks=<n>   \" + strprintf(_(\"Keep at most <n> unconnectable blocks in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_BLOCKS) + \"\\n\";\n     strUsage += \"  -maxorphantx=<n>       \" + strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS) + \"\\n\";\n     strUsage += \"  -par=<n>               \" + strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"), -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS) + \"\\n\";\n+#ifndef WIN32\n     strUsage += \"  -pid=<file>            \" + _(\"Specify pid file (default: bitcoind.pid)\") + \"\\n\";\n+#endif\n     strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\") + \"\\n\";\n #if !defined(WIN32)\n     strUsage += \"  -sysperms              \" + _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\") + \"\\n\";\n@@ -714,7 +718,9 @@ bool AppInit2(boost::thread_group& threadGroup)\n     static boost::interprocess::file_lock lock(pathLockFile.string().c_str());\n     if (!lock.try_lock())\n         return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. Bitcoin Core is probably already running.\"), strDataDir));\n-\n+#ifndef WIN32\n+    CreatePidFile(GetPidFile(), getpid());\n+#endif\n     if (GetBoolArg(\"-shrinkdebugfile\", !fDebug))\n         ShrinkDebugFile();\n     LogPrintf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");"
      },
      {
        "sha": "f387fce8c7b528e729474af45867edffc28555f7",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa340a8f07062600abc84bc0deb47859bd712792/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa340a8f07062600abc84bc0deb47859bd712792/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=aa340a8f07062600abc84bc0deb47859bd712792",
        "patch": "@@ -472,14 +472,14 @@ void ReadConfigFile(map<string, string>& mapSettingsRet,\n     ClearDatadirCache();\n }\n \n+#ifndef WIN32\n boost::filesystem::path GetPidFile()\n {\n     boost::filesystem::path pathPidFile(GetArg(\"-pid\", \"bitcoind.pid\"));\n     if (!pathPidFile.is_complete()) pathPidFile = GetDataDir() / pathPidFile;\n     return pathPidFile;\n }\n \n-#ifndef WIN32\n void CreatePidFile(const boost::filesystem::path &path, pid_t pid)\n {\n     FILE* file = fopen(path.string().c_str(), \"w\");"
      },
      {
        "sha": "4b2415278ba33e361134783d7b50e9245e0d430c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa340a8f07062600abc84bc0deb47859bd712792/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa340a8f07062600abc84bc0deb47859bd712792/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=aa340a8f07062600abc84bc0deb47859bd712792",
        "patch": "@@ -93,8 +93,8 @@ bool TryCreateDirectory(const boost::filesystem::path& p);\n boost::filesystem::path GetDefaultDataDir();\n const boost::filesystem::path &GetDataDir(bool fNetSpecific = true);\n boost::filesystem::path GetConfigFile();\n-boost::filesystem::path GetPidFile();\n #ifndef WIN32\n+boost::filesystem::path GetPidFile();\n void CreatePidFile(const boost::filesystem::path &path, pid_t pid);\n #endif\n void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map<std::string, std::vector<std::string> >& mapMultiSettingsRet);"
      }
    ]
  },
  {
    "sha": "321fd7dbee4dc369f26a7a77fbf238aeaf78af94",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjFmZDdkYmVlNGRjMzY5ZjI2YTdhNzdmYmYyMzhhZWFmNzhhZjk0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T08:33:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T08:34:12Z"
      },
      "message": "Merge pull request #4947\n\n6134b43 Fixing condition 'sabotaging' MSVC build (ENikS)",
      "tree": {
        "sha": "9c278a0b1eada6f1e7a3911010bdf6ec890610ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c278a0b1eada6f1e7a3911010bdf6ec890610ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/321fd7dbee4dc369f26a7a77fbf238aeaf78af94",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUH98EAAoJEHSBCwEjRsmmXmgH/jBfE16mz00o4uma9nJjH1KF\ndfqqaum4qP++Pf1jfQQ5jXsrayynnjMNIQU3mb/UMr1uyxA3JuCxXNOy+UtB/xMk\nYK7WC3xCxJ9zVg6k6NPG3RUJrVv0M3J589B9ehi4vHAnjy9nguwqTlDU5GZD8e4R\ni6FGlpOrYnB6DJTbqdhrHH7BRDuqnOeogKtnrXZBhZOEG+CMAcn+YizWqu9kuTU5\nXIx5mic6lSIeDa4TNknfQ/AF4tysDjwmWEfhb0tgOlqGKRhR46Sivhm7uNANM+Bh\nS6C8Z6CGHm4RW9PK5lvDiv3/8Iyy+Ez5I/evu9Sj84Lmj+25nDv1M7r5lmP7fuU=\n=AZaa\n-----END PGP SIGNATURE-----",
        "payload": "tree 9c278a0b1eada6f1e7a3911010bdf6ec890610ff\nparent aa340a8f07062600abc84bc0deb47859bd712792\nparent 6134b43ba9ffc277a3b0cd8cceb5abe8e5c8bd56\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411374816 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411374852 +0200\n\nMerge pull request #4947\n\n6134b43 Fixing condition 'sabotaging' MSVC build (ENikS)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321fd7dbee4dc369f26a7a77fbf238aeaf78af94",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/321fd7dbee4dc369f26a7a77fbf238aeaf78af94",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321fd7dbee4dc369f26a7a77fbf238aeaf78af94/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa340a8f07062600abc84bc0deb47859bd712792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa340a8f07062600abc84bc0deb47859bd712792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa340a8f07062600abc84bc0deb47859bd712792"
      },
      {
        "sha": "6134b43ba9ffc277a3b0cd8cceb5abe8e5c8bd56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6134b43ba9ffc277a3b0cd8cceb5abe8e5c8bd56",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6134b43ba9ffc277a3b0cd8cceb5abe8e5c8bd56"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 0,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4c9ac74b78b128e7bc7b8c1512fb26e882a978a5",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/321fd7dbee4dc369f26a7a77fbf238aeaf78af94/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/321fd7dbee4dc369f26a7a77fbf238aeaf78af94/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=321fd7dbee4dc369f26a7a77fbf238aeaf78af94",
        "patch": "@@ -340,9 +340,7 @@ class CScript : public std::vector<unsigned char>\n     CScript() { }\n     CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }\n     CScript(const_iterator pbegin, const_iterator pend) : std::vector<unsigned char>(pbegin, pend) { }\n-#ifndef _MSC_VER\n     CScript(const unsigned char* pbegin, const unsigned char* pend) : std::vector<unsigned char>(pbegin, pend) { }\n-#endif\n \n     CScript& operator+=(const CScript& b)\n     {"
      }
    ]
  },
  {
    "sha": "565da68ed0362bbb3ab3f70146f0b150528cc393",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NjVkYTY4ZWQwMzYyYmJiM2FiM2Y3MDE0NmYwYjE1MDUyOGNjMzkz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T10:06:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T10:20:36Z"
      },
      "message": "Merge pull request #4852\n\n5e83bc4 [Qt] include and file header cleanup (Philip Kaufmann)",
      "tree": {
        "sha": "8557b8af64ff5f5b5d89696ee5db30fb16927a63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8557b8af64ff5f5b5d89696ee5db30fb16927a63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/565da68ed0362bbb3ab3f70146f0b150528cc393",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUH/f0AAoJEHSBCwEjRsmmjxoIAJjnw+dBqpC7Wk1qAnHpb2IP\nIsKp7GTuZwSW7+93or6jHWBKjQCyZApxv4UsiAqRCajZL+6EVwr66axzaipfDCaq\nXkJiTtORYn3gNU0uab9ZvCqUsnwIc2HkZDvb/rwSFkF2HgcsICIZl17Ovol336WJ\nFdqd/db5zLZqHSYcrYmqBbfH9BJATC38uj44dbin2T1vUNiZW7uTycU+U1Tq011d\nCrF5Q6lSGgjzqDmjh0nPLiSHrBp5frS7aG6Gq6unU7bCuL4YibCYdHHdNdCMxXl4\nhtJ2y1VX1qtUcbptHZY+LmLxfNPqEj3n9nVaKYMbmyOrl8jZFbgG1aRvJNV/r0c=\n=ISNW\n-----END PGP SIGNATURE-----",
        "payload": "tree 8557b8af64ff5f5b5d89696ee5db30fb16927a63\nparent 321fd7dbee4dc369f26a7a77fbf238aeaf78af94\nparent 5e83bc404c77d6e70c62152f1f97eb264afcc80d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411380369 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411381236 +0200\n\nMerge pull request #4852\n\n5e83bc4 [Qt] include and file header cleanup (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/565da68ed0362bbb3ab3f70146f0b150528cc393",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/565da68ed0362bbb3ab3f70146f0b150528cc393",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/565da68ed0362bbb3ab3f70146f0b150528cc393/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "321fd7dbee4dc369f26a7a77fbf238aeaf78af94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/321fd7dbee4dc369f26a7a77fbf238aeaf78af94",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/321fd7dbee4dc369f26a7a77fbf238aeaf78af94"
      },
      {
        "sha": "5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e83bc404c77d6e70c62152f1f97eb264afcc80d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e83bc404c77d6e70c62152f1f97eb264afcc80d"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 39,
      "deletions": 25
    },
    "files": [
      {
        "sha": "bd686041c1b922a49bb07d5ba3ce2641cc3742bf",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -16,6 +16,7 @@\n #include \"splashscreen.h\"\n #include \"utilitydialog.h\"\n #include \"winshutdownmonitor.h\"\n+\n #ifdef ENABLE_WALLET\n #include \"paymentserver.h\"\n #include \"walletmodel.h\"\n@@ -26,6 +27,7 @@\n #include \"rpcserver.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #endif\n@@ -34,15 +36,16 @@\n \n #include <boost/filesystem/operations.hpp>\n #include <boost/thread.hpp>\n+\n #include <QApplication>\n #include <QDebug>\n #include <QLibraryInfo>\n #include <QLocale>\n #include <QMessageBox>\n #include <QSettings>\n+#include <QThread>\n #include <QTimer>\n #include <QTranslator>\n-#include <QThread>\n \n #if defined(QT_STATICPLUGIN)\n #include <QtPlugin>"
      },
      {
        "sha": "84795a7e7a584521029d7f53798d4ff944e29a9a",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -7,12 +7,12 @@\n \n #include <QWidget>\n \n+class AmountSpinBox;\n+\n QT_BEGIN_NAMESPACE\n class QValueComboBox;\n QT_END_NAMESPACE\n \n-class AmountSpinBox;\n-\n /** Widget for entering bitcoin amounts.\n   */\n class BitcoinAmountField: public QWidget"
      },
      {
        "sha": "dd5192982ee2efdfc8fbc3f274f4370571c96560",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -14,6 +14,7 @@\n #include \"optionsmodel.h\"\n #include \"rpcconsole.h\"\n #include \"utilitydialog.h\"\n+\n #ifdef ENABLE_WALLET\n #include \"walletframe.h\"\n #include \"walletmodel.h\"\n@@ -24,8 +25,8 @@\n #endif\n \n #include \"init.h\"\n-#include \"util.h\"\n #include \"ui_interface.h\"\n+#include \"util.h\"\n \n #include <iostream>\n \n@@ -50,8 +51,8 @@\n #include <QVBoxLayout>\n \n #if QT_VERSION < 0x050000\n-#include <QUrl>\n #include <QTextDocument>\n+#include <QUrl>\n #else\n #include <QUrlQuery>\n #endif"
      },
      {
        "sha": "a6f239a89871e75df90236424174ac619d1b5168",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -14,13 +14,15 @@\n #include <QString>\n #include <QTreeWidgetItem>\n \n-namespace Ui {\n-    class CoinControlDialog;\n-}\n class WalletModel;\n+\n class CCoinControl;\n class CTxMemPool;\n \n+namespace Ui {\n+    class CoinControlDialog;\n+}\n+\n class CoinControlDialog : public QDialog\n {\n     Q_OBJECT"
      },
      {
        "sha": "e3e396d3693bef211c6b112f676343d35b496838",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -12,7 +12,7 @@\n class FreespaceChecker;\n \n namespace Ui {\n-class Intro;\n+    class Intro;\n }\n \n /** Introduction screen (pre-GUI startup)."
      },
      {
        "sha": "67a5f167d1532ecc2ecfd7a7bfde504744284726",
        "filename": "src/qt/openuridialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/openuridialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/openuridialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/openuridialog.h?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -8,7 +8,7 @@\n #include <QDialog>\n \n namespace Ui {\n-class OpenURIDialog;\n+    class OpenURIDialog;\n }\n \n class OpenURIDialog : public QDialog"
      },
      {
        "sha": "279467129fc213e290bd62b644a55a246c42fdb9",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -17,11 +17,13 @@\n #include \"main.h\" // for MAX_SCRIPTCHECK_THREADS\n #include \"netbase.h\"\n #include \"txdb.h\" // for -dbcache defaults\n+\n #ifdef ENABLE_WALLET\n #include \"wallet.h\" // for CWallet::minTxFee\n #endif\n \n #include <boost/thread.hpp>\n+\n #include <QDir>\n #include <QIntValidator>\n #include <QLocale>"
      },
      {
        "sha": "bd747faeb68452b40101ca56cca20aa4ba71abc1",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -15,6 +15,7 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"txdb.h\" // for -dbcache defaults\n+\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #include \"walletdb.h\""
      },
      {
        "sha": "7b7de49831e4a8101394c9faa19b86bb00c485dc",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -13,6 +13,7 @@\n \n #include <openssl/x509.h>\n #include <openssl/x509_vfy.h>\n+\n #include <QDateTime>\n #include <QDebug>\n #include <QSslCertificate>"
      },
      {
        "sha": "7a7e38e25e9e35de8daa7850af9560c7a0e6774d",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef RECEIVECOINSDIALOG_H\n #define RECEIVECOINSDIALOG_H\n \n+#include \"guiutil.h\"\n+\n #include <QDialog>\n #include <QHeaderView>\n #include <QItemSelection>\n@@ -13,13 +15,12 @@\n #include <QPoint>\n #include <QVariant>\n \n-#include \"guiutil.h\"\n+class OptionsModel;\n+class WalletModel;\n \n namespace Ui {\n     class ReceiveCoinsDialog;\n }\n-class OptionsModel;\n-class WalletModel;\n \n QT_BEGIN_NAMESPACE\n class QModelIndex;"
      },
      {
        "sha": "8129353d4b0b130b240994292d16796facc4a0f9",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -16,10 +16,12 @@\n #include \"util.h\"\n \n #include \"json/json_spirit_value.h\"\n+\n+#include <openssl/crypto.h>\n+\n #ifdef ENABLE_WALLET\n #include <db_cxx.h>\n #endif\n-#include <openssl/crypto.h>\n \n #include <QKeyEvent>\n #include <QScrollBar>"
      },
      {
        "sha": "1ffff927586a4ccfe14e2d6e9dfedc4654d65b52",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -14,14 +14,14 @@\n \n class ClientModel;\n \n-QT_BEGIN_NAMESPACE\n-class QItemSelection;\n-QT_END_NAMESPACE\n-\n namespace Ui {\n     class RPCConsole;\n }\n \n+QT_BEGIN_NAMESPACE\n+class QItemSelection;\n+QT_END_NAMESPACE\n+\n /** Local Bitcoin RPC console. */\n class RPCConsole: public QDialog\n {"
      },
      {
        "sha": "a090fa42d5c214e7075cbc87c7a62f32aa74ece2",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -14,14 +14,14 @@ class OptionsModel;\n class SendCoinsEntry;\n class SendCoinsRecipient;\n \n-QT_BEGIN_NAMESPACE\n-class QUrl;\n-QT_END_NAMESPACE\n-\n namespace Ui {\n     class SendCoinsDialog;\n }\n \n+QT_BEGIN_NAMESPACE\n+class QUrl;\n+QT_END_NAMESPACE\n+\n /** Dialog for sending bitcoins */\n class SendCoinsDialog : public QDialog\n {"
      },
      {
        "sha": "673e98469194b78492c3a3998bd6f3b46574c221",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -4,11 +4,12 @@\n \n #include \"splashscreen.h\"\n \n-#include \"version.h\"\n #include \"clientversion.h\"\n #include \"init.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"version.h\"\n+\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #endif"
      },
      {
        "sha": "49237183412d30206ed3b6e1f0c4b25fc93984f4",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/565da68ed0362bbb3ab3f70146f0b150528cc393/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=565da68ed0362bbb3ab3f70146f0b150528cc393",
        "patch": "@@ -6,13 +6,13 @@\n \n #include \"bitcoinunits.h\"\n #include \"guiutil.h\"\n+#include \"paymentserver.h\"\n+#include \"transactionrecord.h\"\n \n #include \"base58.h\"\n #include \"db.h\"\n #include \"main.h\"\n-#include \"paymentserver.h\"\n #include \"script/script.h\"\n-#include \"transactionrecord.h\"\n #include \"timedata.h\"\n #include \"ui_interface.h\"\n #include \"util.h\""
      }
    ]
  },
  {
    "sha": "3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2RhZTYxYWEyMmNkNmVjYTQzYWM0ZTI1YzJlYTBjMTk0MWZiZDBk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T12:14:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T12:18:54Z"
      },
      "message": "Merge pull request #4787\n\n4b0deb3 Clean up CMerkleTx::SetMerkleBranch. (Daniel Kraft)",
      "tree": {
        "sha": "d80fb00f5b5a74cabe1e7d27fb6dea7e76a9c28f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d80fb00f5b5a74cabe1e7d27fb6dea7e76a9c28f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d",
      "comment_count": 2,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUIBOuAAoJEHSBCwEjRsmmP6EIAKX3lVRE5lWQTviVnOZlNkR7\nEbxTCA4mimvxksBRap2fL9Gk31qrknTHNClxl3f6uzeV7+svO938s/M8xHqqnUJS\nCJhSZQ9mhX7gQuZLeco2iFVaEoDePdVSQbieYIxi0m0Iolev9C18ff6XvLGSzs6d\nHhJ34k7la4TPYXbFfpkwIfVKZBSPIqYi/Si44sVhG1Gl+loxSR2m1puHQGh0qyj9\ni81Qdttx63IPN53mLmslaB+QtEEw/DJi6EhQhaUFi6+5B4WtaYB/LHZRKiebS/Kr\n7Tc/olAj7RzPYf4KyyFixXmxsvEPlgOJk/KEtPI0pT2IfSifBEPGh//NxE9hqZo=\n=IdPJ\n-----END PGP SIGNATURE-----",
        "payload": "tree d80fb00f5b5a74cabe1e7d27fb6dea7e76a9c28f\nparent 565da68ed0362bbb3ab3f70146f0b150528cc393\nparent 4b0deb3b2df5882061ae6c44947eda831420cd5e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411388066 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411388334 +0200\n\nMerge pull request #4787\n\n4b0deb3 Clean up CMerkleTx::SetMerkleBranch. (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "565da68ed0362bbb3ab3f70146f0b150528cc393",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/565da68ed0362bbb3ab3f70146f0b150528cc393",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/565da68ed0362bbb3ab3f70146f0b150528cc393"
      },
      {
        "sha": "4b0deb3b2df5882061ae6c44947eda831420cd5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b0deb3b2df5882061ae6c44947eda831420cd5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b0deb3b2df5882061ae6c44947eda831420cd5e"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 19,
      "deletions": 33
    },
    "files": [
      {
        "sha": "e69f59aacdb9fb89211eb2e04ee2e439045906b9",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 32,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d",
        "patch": "@@ -646,7 +646,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n             CWalletTx wtx(this,tx);\n             // Get merkle branch if transaction was found in a block\n             if (pblock)\n-                wtx.SetMerkleBranch(pblock);\n+                wtx.SetMerkleBranch(*pblock);\n             return AddToWallet(wtx);\n         }\n     }\n@@ -2229,48 +2229,34 @@ CWalletKey::CWalletKey(int64_t nExpires)\n     nTimeExpires = nExpires;\n }\n \n-int CMerkleTx::SetMerkleBranch(const CBlock* pblock)\n+int CMerkleTx::SetMerkleBranch(const CBlock& block)\n {\n     AssertLockHeld(cs_main);\n     CBlock blockTmp;\n \n-    if (pblock == NULL) {\n-        CCoins coins;\n-        if (pcoinsTip->GetCoins(GetHash(), coins)) {\n-            CBlockIndex *pindex = chainActive[coins.nHeight];\n-            if (pindex) {\n-                if (!ReadBlockFromDisk(blockTmp, pindex))\n-                    return 0;\n-                pblock = &blockTmp;\n-            }\n-        }\n-    }\n-\n-    if (pblock) {\n-        // Update the tx's hashBlock\n-        hashBlock = pblock->GetHash();\n-\n-        // Locate the transaction\n-        for (nIndex = 0; nIndex < (int)pblock->vtx.size(); nIndex++)\n-            if (pblock->vtx[nIndex] == *(CTransaction*)this)\n-                break;\n-        if (nIndex == (int)pblock->vtx.size())\n-        {\n-            vMerkleBranch.clear();\n-            nIndex = -1;\n-            LogPrintf(\"ERROR: SetMerkleBranch() : couldn't find tx in block\\n\");\n-            return 0;\n-        }\n+    // Update the tx's hashBlock\n+    hashBlock = block.GetHash();\n \n-        // Fill in merkle branch\n-        vMerkleBranch = pblock->GetMerkleBranch(nIndex);\n+    // Locate the transaction\n+    for (nIndex = 0; nIndex < (int)block.vtx.size(); nIndex++)\n+        if (block.vtx[nIndex] == *(CTransaction*)this)\n+            break;\n+    if (nIndex == (int)block.vtx.size())\n+    {\n+        vMerkleBranch.clear();\n+        nIndex = -1;\n+        LogPrintf(\"ERROR: SetMerkleBranch() : couldn't find tx in block\\n\");\n+        return 0;\n     }\n \n+    // Fill in merkle branch\n+    vMerkleBranch = block.GetMerkleBranch(nIndex);\n+\n     // Is the tx in a block that's in the main chain\n     BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n     if (mi == mapBlockIndex.end())\n         return 0;\n-    CBlockIndex* pindex = (*mi).second;\n+    const CBlockIndex* pindex = (*mi).second;\n     if (!pindex || !chainActive.Contains(pindex))\n         return 0;\n "
      },
      {
        "sha": "fde87a8a2f82a6c1aacdba1fec06057ef451f1aa",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d",
        "patch": "@@ -504,7 +504,7 @@ class CMerkleTx : public CTransaction\n         READWRITE(nIndex);\n     }\n \n-    int SetMerkleBranch(const CBlock* pblock=NULL);\n+    int SetMerkleBranch(const CBlock& block);\n \n     // Return depth of transaction in blockchain:\n     // -1  : not in blockchain, and not in memory pool (conflicted transaction)"
      }
    ]
  },
  {
    "sha": "27fc5277f73e510c2150dc29308fdf2dc6a96053",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2ZjNTI3N2Y3M2U1MTBjMjE1MGRjMjkzMDhmZGYyZGM2YTk2MDUz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T14:40:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T14:40:49Z"
      },
      "message": "build: change cdrkit location in build-process.md\n\nThe cdrkit.org domain expired.\nThanks to gdm85 on IRC for reporting this.",
      "tree": {
        "sha": "bfb73c947bc2f7626e1f9ec956c338d4319b21d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfb73c947bc2f7626e1f9ec956c338d4319b21d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27fc5277f73e510c2150dc29308fdf2dc6a96053",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUIDUOAAoJEHSBCwEjRsmmszAH/i8f3sLz08Wgg1stOuisT6YQ\nN6DXoa1PycLf82tJ1f/Pd7or1hipKYUazWGStP+QIy5o5ew3Yhw9Ys8HPN6sgPiL\no54zvjprX1Rx7OjiT/wfrGVc73SidEHKzWDhlKkMaYfgLpqN5dex15iSLHyBlk2G\n3kKH8dG9Lg4YAGNseqto65FGsGEtKhn/9kEY8ZCjk7rmjHvBMD71pOdalHBbXwMc\nyTHEFpYMCJxoqx5kBaOkDVm+x3JeHsvv4eo/DAmEKMPC7YxR0Yo42cUJMvmDwaDN\nkZjXEERGHnxwnRg1KTlB3pZgZXG6+hCoV36Rkrfd6RsTOy3jfNovjG90+ZSKBiM=\n=8OyG\n-----END PGP SIGNATURE-----",
        "payload": "tree bfb73c947bc2f7626e1f9ec956c338d4319b21d5\nparent 3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411396849 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411396849 +0200\n\nbuild: change cdrkit location in build-process.md\n\nThe cdrkit.org domain expired.\nThanks to gdm85 on IRC for reporting this.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27fc5277f73e510c2150dc29308fdf2dc6a96053",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27fc5277f73e510c2150dc29308fdf2dc6a96053",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27fc5277f73e510c2150dc29308fdf2dc6a96053/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cdae61aa22cd6eca43ac4e25c2ea0c1941fbd0d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8934be66c4057a4f1858a8e8cb20626992f2a81e",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27fc5277f73e510c2150dc29308fdf2dc6a96053/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27fc5277f73e510c2150dc29308fdf2dc6a96053/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=27fc5277f73e510c2150dc29308fdf2dc6a96053",
        "patch": "@@ -64,7 +64,7 @@ Release Process\n \twget 'http://www.opensource.apple.com/tarballs/cctools/cctools-809.tar.gz'\n \twget 'http://www.opensource.apple.com/tarballs/dyld/dyld-195.5.tar.gz'\n \twget 'http://www.opensource.apple.com/tarballs/ld64/ld64-127.2.tar.gz'\n-\twget 'http://cdrkit.org/releases/cdrkit-1.1.11.tar.gz'\n+\twget 'http://pkgs.fedoraproject.org/repo/pkgs/cdrkit/cdrkit-1.1.11.tar.gz/efe08e2f3ca478486037b053acd512e9/cdrkit-1.1.11.tar.gz'\n \twget 'https://github.com/theuni/libdmg-hfsplus/archive/libdmg-hfsplus-v0.1.tar.gz'\n \twget 'http://llvm.org/releases/3.2/clang+llvm-3.2-x86-linux-ubuntu-12.04.tar.gz' -O clang-llvm-3.2-x86-linux-ubuntu-12.04.tar.gz\n \twget 'https://raw.githubusercontent.com/theuni/osx-cross-depends/master/patches/cdrtools/genisoimage.diff' -O cdrkit-deterministic.patch"
      }
    ]
  },
  {
    "sha": "cb9871194a7fffe8bc0a53ea820b1a395e79e283",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjk4NzExOTRhN2ZmZmU4YmMwYTUzZWE4MjBiMWEzOTVlNzllMjgz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T16:29:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-22T16:31:00Z"
      },
      "message": "Merge pull request #4765\n\ne2a98d2 Update obsolete AC macros. (randy-waterhouse)\ne543811 Add warnings for autogen.sh. Fix AC_CONFIG_SRCDIR. (randy-waterhouse)",
      "tree": {
        "sha": "203d59c14a07927cb96bc8d414012cee7a072fdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/203d59c14a07927cb96bc8d414012cee7a072fdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb9871194a7fffe8bc0a53ea820b1a395e79e283",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUIE7EAAoJEHSBCwEjRsmmQOsH/RByMtxBEggU/exfwcwGB5qy\nmeU9EX6h0ErUYcorFjjJlmYwSCbP7R238eIJG8uMtgpSWTvEac7DXaGlWjRxqUgn\nD1Pv7PnllQI8Kl/TsZI0Y03W4Hj5eWLeTtTUR+1p6HJg6ueK9fqMf0EYapOmTXa4\nWUQCf3KW5p8ZXVHWoOm3/02yRo/aFcBEA9vnGhb3QzIQHw5wEDbIxH6pPNFXPzGO\nCW86ez8VqvQWiJPW9+CjAT82RGXx+vkaoTS8i7KbnssCdfvm9R6MIUx5oZ7iJspQ\nabT7TS13xI44rmql0DmutRe0CKYVQuIHpAdHHxsHxVPXA3cKH1MDE4ToR2W94Rw=\n=KA0V\n-----END PGP SIGNATURE-----",
        "payload": "tree 203d59c14a07927cb96bc8d414012cee7a072fdc\nparent 27fc5277f73e510c2150dc29308fdf2dc6a96053\nparent e2a98d270d511711111a54f350c25733bc15a5b2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411403356 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411403460 +0200\n\nMerge pull request #4765\n\ne2a98d2 Update obsolete AC macros. (randy-waterhouse)\ne543811 Add warnings for autogen.sh. Fix AC_CONFIG_SRCDIR. (randy-waterhouse)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb9871194a7fffe8bc0a53ea820b1a395e79e283",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb9871194a7fffe8bc0a53ea820b1a395e79e283",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb9871194a7fffe8bc0a53ea820b1a395e79e283/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27fc5277f73e510c2150dc29308fdf2dc6a96053",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27fc5277f73e510c2150dc29308fdf2dc6a96053",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27fc5277f73e510c2150dc29308fdf2dc6a96053"
      },
      {
        "sha": "e2a98d270d511711111a54f350c25733bc15a5b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a98d270d511711111a54f350c25733bc15a5b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2a98d270d511711111a54f350c25733bc15a5b2"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 34,
      "deletions": 36
    },
    "files": [
      {
        "sha": "ddfc09607e16c2646398a183c653384138d2f414",
        "filename": "autogen.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9871194a7fffe8bc0a53ea820b1a395e79e283/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9871194a7fffe8bc0a53ea820b1a395e79e283/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/autogen.sh?ref=cb9871194a7fffe8bc0a53ea820b1a395e79e283",
        "patch": "@@ -5,4 +5,4 @@ cd \"$srcdir\"\n if [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"`which glibtoolize 2>/dev/null`\"; then\n   export LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n fi\n-autoreconf --install --force\n+autoreconf --install --force --warnings=all"
      },
      {
        "sha": "f3b14461eb9e8e248235e9592ede0db9bb039313",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9871194a7fffe8bc0a53ea820b1a395e79e283/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9871194a7fffe8bc0a53ea820b1a395e79e283/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=cb9871194a7fffe8bc0a53ea820b1a395e79e283",
        "patch": "@@ -12,29 +12,29 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n   done\n   for searchpath in $bdbdirlist ''; do\n     test -n \"${searchpath}\" && searchpath=\"${searchpath}/\"\n-    AC_TRY_COMPILE([\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n       #include <${searchpath}db_cxx.h>\n-    ],[\n+    ]],[[\n       #if !((DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR >= 8) || DB_VERSION_MAJOR > 4)\n         #error \"failed to find bdb 4.8+\"\n       #endif\n-    ],[\n+    ]])],[\n       if test \"x$bdbpath\" = \"xX\"; then\n         bdbpath=\"${searchpath}\"\n       fi\n     ],[\n       continue\n     ])\n-    AC_TRY_COMPILE([\n+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n       #include <${searchpath}db_cxx.h>\n-    ],[\n+    ]],[[\n       #if !(DB_VERSION_MAJOR == 4 && DB_VERSION_MINOR == 8)\n         #error \"failed to find bdb 4.8\"\n       #endif\n-    ],[\n+    ]])],[\n       bdb48path=\"${searchpath}\"\n       break\n-    ])\n+    ],[])\n   done\n   if test \"x$bdbpath\" = \"xX\"; then\n     AC_MSG_RESULT([no])"
      },
      {
        "sha": "edfde4cd79781fa822c94cff68844acdaaf9f967",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9871194a7fffe8bc0a53ea820b1a395e79e283/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9871194a7fffe8bc0a53ea820b1a395e79e283/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=cb9871194a7fffe8bc0a53ea820b1a395e79e283",
        "patch": "@@ -217,17 +217,17 @@ dnl Requires: INCLUDES must be populated as necessary.\n dnl Output: bitcoin_cv_qt5=yes|no\n AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n   AC_CACHE_CHECK(for Qt 5, bitcoin_cv_qt5,[\n-  AC_TRY_COMPILE(\n-    [#include <QtCore>],\n-    [\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n+    [[#include <QtCore>]],\n+    [[\n       #if QT_VERSION < 0x050000\n       choke me\n       #else\n       return 0;\n       #endif\n-    ],\n-    bitcoin_cv_qt5=yes,\n-    bitcoin_cv_qt5=no)\n+    ]])],\n+    [bitcoin_cv_qt5=yes],\n+    [bitcoin_cv_qt5=no])\n ])])\n \n dnl Internal. Check if the linked version of Qt was built as static libs.\n@@ -237,15 +237,15 @@ dnl Output: bitcoin_cv_static_qt=yes|no\n dnl Output: Defines QT_STATICPLUGIN if plugins are static.\n AC_DEFUN([_BITCOIN_QT_IS_STATIC],[\n   AC_CACHE_CHECK(for static Qt, bitcoin_cv_static_qt,[\n-  AC_TRY_COMPILE(\n-    [#include <QtCore>],\n-    [\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM(\n+    [[#include <QtCore>]],\n+    [[\n       #if defined(QT_STATIC)\n       return 0;\n       #else\n       choke me\n       #endif\n-    ],\n+    ]])],\n     [bitcoin_cv_static_qt=yes],\n     [bitcoin_cv_static_qt=no])\n   ])\n@@ -263,13 +263,13 @@ AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_PLUGINS],[\n   AC_MSG_CHECKING(for static Qt plugins: $2)\n   CHECK_STATIC_PLUGINS_TEMP_LIBS=\"$LIBS\"\n   LIBS=\"$2 $QT_LIBS $LIBS\"\n-  AC_TRY_LINK([\n+  AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n     #define QT_STATICPLUGIN\n     #include <QtPlugin>\n-    $1],\n-    [return 0;],\n+    $1]],\n+    [[return 0;]])],\n     [AC_MSG_RESULT(yes); QT_LIBS=\"$2 $QT_LIBS\"],\n-    [AC_MSG_RESULT(no)]; BITCOIN_QT_FAIL(Could not resolve: $2))\n+    [AC_MSG_RESULT(no); BITCOIN_QT_FAIL(Could not resolve: $2)])\n   LIBS=\"$CHECK_STATIC_PLUGINS_TEMP_LIBS\"\n ])\n "
      },
      {
        "sha": "0f9e78b74fbe38d01a2e3773e74477c1adc6cb22",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 12,
        "deletions": 14,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb9871194a7fffe8bc0a53ea820b1a395e79e283/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb9871194a7fffe8bc0a53ea820b1a395e79e283/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=cb9871194a7fffe8bc0a53ea820b1a395e79e283",
        "patch": "@@ -7,6 +7,8 @@ define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, false)\n define(_COPYRIGHT_YEAR, 2014)\n AC_INIT([Bitcoin Core],[_CLIENT_VERSION_MAJOR._CLIENT_VERSION_MINOR._CLIENT_VERSION_REVISION],[info@bitcoin.org],[bitcoin])\n+AC_CONFIG_SRCDIR([src/main.cpp])\n+AC_CONFIG_HEADERS([src/config/bitcoin-config.h])\n AC_CONFIG_AUX_DIR([build-aux])\n AC_CONFIG_MACRO_DIR([build-aux/m4])\n LT_INIT([disable-shared])\n@@ -140,10 +142,6 @@ AC_ARG_ENABLE([glibc-back-compat],\n \n AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[specify protoc bin path])], [protoc_bin_path=$withval], [])\n \n-\n-AC_CONFIG_SRCDIR([src])\n-AC_CONFIG_HEADERS([src/config/bitcoin-config.h])\n-\n # Enable debug \n AC_ARG_ENABLE([debug],\n     [AS_HELP_STRING([--enable-debug],\n@@ -337,12 +335,12 @@ if test x$use_glibc_compat != xno; then\n   #__fdelt_chk's params and return type have changed from long unsigned int to long int.\n   # See which one is present here.\n   AC_MSG_CHECKING(__fdelt_chk type)\n-  AC_TRY_COMPILE([#ifdef _FORTIFY_SOURCE\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef _FORTIFY_SOURCE\n                     #undef _FORTIFY_SOURCE\n                   #endif\n                   #define _FORTIFY_SOURCE 2\n                   #include <sys/select.h>\n-     extern \"C\" long unsigned int __fdelt_warn(long unsigned int);],[],\n+     extern \"C\" long unsigned int __fdelt_warn(long unsigned int);]],[[]])],\n     [ fdelt_type=\"long unsigned int\"],\n     [ fdelt_type=\"long int\"])\n   AC_MSG_RESULT($fdelt_type)\n@@ -394,8 +392,8 @@ AC_CHECK_DECLS([le32toh, le64toh, htole32, htole64, be32toh, be64toh, htobe32, h\n \n dnl Check for MSG_NOSIGNAL\n AC_MSG_CHECKING(for MSG_NOSIGNAL)\n-AC_TRY_COMPILE([#include <sys/socket.h>],\n- [ int f = MSG_NOSIGNAL; ],\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/socket.h>]],\n+ [[ int f = MSG_NOSIGNAL; ]])],\n  [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MSG_NOSIGNAL, 1,[Define this symbol if you have MSG_NOSIGNAL]) ],\n  [ AC_MSG_RESULT(no)]\n )\n@@ -537,16 +535,16 @@ TEMP_LIBS=\"$LIBS\"\n LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB $LIBS\"\n TEMP_CPPFLAGS=\"$CPPFLAGS\"\n CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-AC_TRY_LINK([\n+AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n   #include <boost/thread/thread.hpp>\n   #include <boost/version.hpp>\n-  ],[\n+  ]],[[\n   #if BOOST_VERSION >= 105000 && (!defined(BOOST_HAS_NANOSLEEP) || BOOST_VERSION >= 105200)\n       boost::this_thread::sleep_for(boost::chrono::milliseconds(0));\n   #else\n    choke me\n   #endif\n-  ],\n+  ]])],\n   [boost_sleep=yes; BOOST_LIBS=\"$BOOST_LIBS $BOOST_CHRONO_LIB\";\n      AC_DEFINE(HAVE_WORKING_BOOST_SLEEP_FOR, 1, [Define this symbol if boost sleep_for works])],\n   [boost_sleep=no])\n@@ -559,17 +557,17 @@ TEMP_LIBS=\"$LIBS\"\n LIBS=\"$BOOST_LIBS $LIBS\"\n TEMP_CPPFLAGS=\"$CPPFLAGS\"\n CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-AC_TRY_LINK([\n+AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n   #include <boost/version.hpp>\n   #include <boost/thread.hpp>\n   #include <boost/date_time/posix_time/posix_time_types.hpp>\n-  ],[\n+  ]],[[\n   #if BOOST_VERSION <= 105600\n       boost::this_thread::sleep(boost::posix_time::milliseconds(0));\n   #else\n    choke me\n   #endif\n-  ],\n+  ]])],\n   [boost_sleep=yes; AC_DEFINE(HAVE_WORKING_BOOST_SLEEP, 1, [Define this symbol if boost sleep works])],\n   [boost_sleep=no])\n LIBS=\"$TEMP_LIBS\""
      }
    ]
  },
  {
    "sha": "76ec8677965570d344ef6f556920a00a47f54248",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmVjODY3Nzk2NTU3MGQzNDRlZjZmNTU2OTIwYTAwYTQ3ZjU0MjQ4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-19T22:20:53Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-22T17:26:17Z"
      },
      "message": "Use actually valid transactions for script tests",
      "tree": {
        "sha": "100dbcc7515477a53bead449f043440e81611ef9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/100dbcc7515477a53bead449f043440e81611ef9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76ec8677965570d344ef6f556920a00a47f54248",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76ec8677965570d344ef6f556920a00a47f54248",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76ec8677965570d344ef6f556920a00a47f54248",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76ec8677965570d344ef6f556920a00a47f54248/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb9871194a7fffe8bc0a53ea820b1a395e79e283",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb9871194a7fffe8bc0a53ea820b1a395e79e283",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb9871194a7fffe8bc0a53ea820b1a395e79e283"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 62,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6c13fdf1754da7ba509c4d90f9cd37f609070a32",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76ec8677965570d344ef6f556920a00a47f54248/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76ec8677965570d344ef6f556920a00a47f54248/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=76ec8677965570d344ef6f556920a00a47f54248",
        "patch": "@@ -1,4 +1,13 @@\n [\n+[\"\n+Format is: [scriptPubKey, scriptSig, flags, ... comments]\n+It is evaluated as if there was a crediting coinbase transaction with two 0\n+pushes as scriptSig, and one output of 0 satoshi and given scriptPubKey,\n+followed by a spending transaction which spends this output as only input (and\n+correct prevout hash), using the given scriptSig. All nLockTimes are 0, all\n+nSequences are max.\n+\"],\n+\n [\"\", \"DEPTH\", \"P2SH,STRICTENC\",   \"Test the test: we should have an empty stack after scriptSig evaluation\"],\n [\"  \", \"DEPTH\", \"P2SH,STRICTENC\", \"and multiple spaces should not change that.\"],\n [\"   \", \"DEPTH\", \"P2SH,STRICTENC\"],"
      },
      {
        "sha": "7fa74c1ca337184728eb36e988d3cb6aa995d142",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76ec8677965570d344ef6f556920a00a47f54248/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76ec8677965570d344ef6f556920a00a47f54248/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=76ec8677965570d344ef6f556920a00a47f54248",
        "patch": "@@ -1,4 +1,13 @@\n [\n+[\"\n+Format is: [scriptPubKey, scriptSig, flags, ... comments]\n+It is evaluated as if there was a crediting coinbase transaction with two 0\n+pushes as scriptSig, and one output of 0 satoshi and given scriptPubKey,\n+followed by a spending transaction which spends this output as only input (and\n+correct prevout hash), using the given scriptSig. All nLockTimes are 0, all\n+nSequences are max.\n+\"],\n+\n [\"\", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"Test the test: we should have an empty stack after scriptSig evaluation\"],\n [\"  \", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"and multiple spaces should not change that.\"],\n [\"   \", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\"],"
      },
      {
        "sha": "178b35fa2d80b829fe342ae26f18c67383641660",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 5,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76ec8677965570d344ef6f556920a00a47f54248/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76ec8677965570d344ef6f556920a00a47f54248/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=76ec8677965570d344ef6f556920a00a47f54248",
        "patch": "@@ -52,6 +52,41 @@ read_json(const std::string& jsondata)\n \n BOOST_AUTO_TEST_SUITE(script_tests)\n \n+CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n+{\n+    CMutableTransaction txCredit;\n+    txCredit.nVersion = 1;\n+    txCredit.nLockTime = 0;\n+    txCredit.vin.resize(1);\n+    txCredit.vout.resize(1);\n+    txCredit.vin[0].prevout.SetNull();\n+    txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n+    txCredit.vin[0].nSequence = std::numeric_limits<unsigned int>::max();\n+    txCredit.vout[0].scriptPubKey = scriptPubKey;\n+    txCredit.vout[0].nValue = 0;\n+\n+    return txCredit;\n+}\n+\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScript& scriptPubKey)\n+{\n+    CMutableTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n+\n+    CMutableTransaction txSpend;\n+    txSpend.nVersion = 1;\n+    txSpend.nLockTime = 0;\n+    txSpend.vin.resize(1);\n+    txSpend.vout.resize(1);\n+    txSpend.vin[0].prevout.hash = txCredit.GetHash();\n+    txSpend.vin[0].prevout.n = 0;\n+    txSpend.vin[0].scriptSig = scriptSig;\n+    txSpend.vin[0].nSequence = std::numeric_limits<unsigned int>::max();\n+    txSpend.vout[0].scriptPubKey = CScript();\n+    txSpend.vout[0].nValue = 0;\n+\n+    return txSpend;\n+}\n+\n BOOST_AUTO_TEST_CASE(script_valid)\n {\n     // Read tests from test/data/script_valid.json\n@@ -67,7 +102,9 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         string strTest = write_string(tv, false);\n         if (test.size() < 3) // Allow size > 3; extra stuff ignored (useful for comments)\n         {\n-            BOOST_ERROR(\"Bad test: \" << strTest);\n+            if (test.size() != 1) {\n+                BOOST_ERROR(\"Bad test: \" << strTest);\n+            }\n             continue;\n         }\n         string scriptSigString = test[0].get_str();\n@@ -77,7 +114,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n \n         CTransaction tx;\n-        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, tx, 0, scriptflags), strTest);\n+        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, BuildSpendingTransaction(scriptSig, scriptPubKey), 0, scriptflags), strTest);\n     }\n }\n \n@@ -90,9 +127,11 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n     {\n         Array test = tv.get_array();\n         string strTest = write_string(tv, false);\n-        if (test.size() < 2) // Allow size > 2; extra stuff ignored (useful for comments)\n+        if (test.size() < 3) // Allow size > 3; extra stuff ignored (useful for comments)\n         {\n-            BOOST_ERROR(\"Bad test: \" << strTest);\n+            if (test.size() != 1) {\n+                BOOST_ERROR(\"Bad test: \" << strTest);\n+            }\n             continue;\n         }\n         string scriptSigString = test[0].get_str();\n@@ -102,7 +141,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n \n         CTransaction tx;\n-        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, tx, 0, scriptflags), strTest);\n+        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, BuildSpendingTransaction(scriptSig, scriptPubKey), 0, scriptflags), strTest);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "c8589bf99e7d4b352763905e56799a03adda25a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODU4OWJmOTllN2Q0YjM1Mjc2MzkwNWU1Njc5OWEwM2FkZGEyNWE3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-20T01:13:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-22T17:26:17Z"
      },
      "message": "Add actual signature tests",
      "tree": {
        "sha": "4469a4b6207977fab2713a2cbc60d8d1eaa6eb03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4469a4b6207977fab2713a2cbc60d8d1eaa6eb03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8589bf99e7d4b352763905e56799a03adda25a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8589bf99e7d4b352763905e56799a03adda25a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8589bf99e7d4b352763905e56799a03adda25a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8589bf99e7d4b352763905e56799a03adda25a7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76ec8677965570d344ef6f556920a00a47f54248",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76ec8677965570d344ef6f556920a00a47f54248",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76ec8677965570d344ef6f556920a00a47f54248"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 33,
      "deletions": 2
    },
    "files": [
      {
        "sha": "401031ad12b3ac04a8e5ba1d5d78107925e46320",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8589bf99e7d4b352763905e56799a03adda25a7/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8589bf99e7d4b352763905e56799a03adda25a7/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=c8589bf99e7d4b352763905e56799a03adda25a7",
        "patch": "@@ -382,5 +382,21 @@ nSequences are max.\n [\"0 0x01 0x50\", \"HASH160 0x14 0xece424a6bb6ddf4db592c0faed60685047a361b1 EQUAL\", \"P2SH,STRICTENC\", \"OP_RESERVED in P2SH should fail\"],\n [\"0 0x01 VER\", \"HASH160 0x14 0x0f4d7845db968f2a81b530b6f3c1d6246d4c7e01 EQUAL\", \"P2SH,STRICTENC\", \"OP_VER in P2SH should fail\"],\n \n-[\"0x00\", \"'00' EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"]\n+[\"0x00\", \"'00' EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"],\n+\n+[\"0x48 0x3045022100ea4d62e1fb351ad977596457bb01dfce58e050541784277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with wrong signature\"],\n+[\"0x47 0x304402207d09de5e34968c3f8b27d8217f173629f1106ee5216aa11d6b1f9813b3a214060220610a6ed25c704f901c6278f4f57fb11eadefdf0b22df298cfb6ce7ea84c86bf401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash using an anyonecanpay sighash\"],\n+[\"0x47 0x3044022028686fb3c8d3e5068cc9924c494fb5026df201d23340896da62fe9bb73fd9d5f02202a239609524959c4ca3651fd0cc48245b0b240862146fc579f3a962a4f46942b01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkey with wrong signature\"],\n+[\"0x47 0x3044022054cb0a3fca8694a0c231848ed9f965078148fd653e49dd4b6981fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"P2SH,STRICTENC\", \"P2SH with a pay to pubkeyhash inside with wrong signature\"],\n+[\"0 0x48 0x3045022100e1c4e8800bd00c9ec3cd3df0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC\", \"Raw multisig with one pubkey with wrong signature\"],\n+[\"0x49 0x304602220000ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with non-DER signature (too much R padding)\"],\n+[\"0x47 0x30440220ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with non-DER signature (too little R padding)\"],\n+[\"0x49 0x3046022100ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a950221003003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with non-DER signature (too much S padding)\"],\n+[\"0x48 0x3045022100e6eda3fd34862078233463cae19f0b47995e3f892102e5b175175e92a9163cc402204bf58445819093638481084322b61a2d49b68c96fd6fea17ed494722d0d67b4f01\", \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"P2SH,STRICTENC\", \"Pay to pubkey with hybrid pubkey encoding\"],\n+[\"0x48 0x304502203b56d65863e0cdb89313043c2402f46f518c31658648151b01ec6b5b6c89206a022100d71efefb4c24fab36abb44ade106963d8114c5af1bda033faa1923f54ec4ea6a01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC,LOW_S\", \"Pay to pubkey with high S\"],\n+[\"0x47 0x3044022054cb0a3fca8694a0c231848fd9f965078148fd653e49dd4b6980fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"P2SH,STRICTENC\", \"P2SH with a pay to pubkeyhash inside with invalid signature\"],\n+[\"1 0x48 0x3045022100e1c4e8800bd00c9ec3cd3de0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC,NULLDUMMY\", \"Raw multisig with one pubkey with non-zero dummy\"],\n+\n+[\"The End\"]\n+\n ]"
      },
      {
        "sha": "e0b527996c135d607ed99055ee3d5dcc8a977330",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8589bf99e7d4b352763905e56799a03adda25a7/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8589bf99e7d4b352763905e56799a03adda25a7/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=c8589bf99e7d4b352763905e56799a03adda25a7",
        "patch": "@@ -527,5 +527,20 @@ nSequences are max.\n \"P2SH,STRICTENC\",\n \"Basic PUSHDATA1 signedness check\"],\n \n-[\"0x00\", \"SIZE 0 EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"]\n+[\"0x00\", \"SIZE 0 EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"],\n+\n+[\"0x48 0x3045022100ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash\"],\n+[\"0x47 0x304402207d09de5e34968c3f8b27d8217f173629f1106ee5216aa11d6b1f9813b3a214060220610a6ed25c704f901c6278f4f57fb11eadefdf0b22df298cfb6ce7ea84c86bf481 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Anyonecanpay pay to pubkeyhash\"],\n+[\"0x47 0x3044022028686fb3c8d3e5069cc9924c494fb5026df201d23340896da62fe9bb73fd9d5f02202a239609524959c4ca3651fd0cc48245b0b240862146fc579f3a962a4f46942b01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkey\"],\n+[\"0x47 0x3044022054cb0a3fca8694a0c231848ed9f965078148fd653e49dd4b6980fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"P2SH,STRICTENC\", \"P2SH with a pay to pubkeyhash inside\"],\n+[\"0 0x48 0x3045022100e1c4e8800bd00c9ec3cd3de0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC\", \"Raw multisig with one pubkey\"],\n+[\"0x49 0x304602220000ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH\", \"Normal pay to pubkeyhash with non-DER signature (too much R padding)\"],\n+[\"0x47 0x30440220ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH\", \"Normal pay to pubkeyhash with non-DER signature (too little R padding)\"],\n+[\"0x49 0x3046022100ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a950221003003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH\", \"Normal pay to pubkeyhash with non-DER signature (too much S padding)\"],\n+[\"0x48 0x3045022100e6eda3fd34862078233463cae19f0b47995e3f892102e5b175175e92a9163cc402204bf58445819093638481084322b61a2d49b68c96fd6fea17ed494722d0d67b4f01\", \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"P2SH\", \"Pay to pubkey with hybrid pubkey encoding\"],\n+[\"0x48 0x304502203b56d65863e0cdb89313043c2402f46f518c31658648151b01ec6b5b6c89206a022100d71efefb4c24fab36abb44ade106963d8114c5af1bda033faa1923f54ec4ea6a01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC\", \"Pay to pubkey with high S\"],\n+[\"0x47 0x3044022054cb0a3fca8694a0c231848fd9f965078148fd653e49dd4b6980fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"STRICTENC\", \"P2SH with a pay to pubkeyhash inside with invalid signature\"],\n+[\"1 0x48 0x3045022100e1c4e8800bd00c9ec3cd3de0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC\", \"Raw multisig with one pubkey with non-zero dummy\"],\n+\n+[\"The End\"]\n ]"
      }
    ]
  },
  {
    "sha": "bb26e2c896a92b7d9376e2a903ebc9a1825b92d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjI2ZTJjODk2YTkyYjdkOTM3NmUyYTkwM2ViYzlhMTgyNWI5MmQ4",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-22T13:48:34Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-23T07:56:46Z"
      },
      "message": "[Qt] minor changes in splashscreen.cpp\n\n- guard an unused variable with Q_UNUSED() macro\n- remove a commented out line of code",
      "tree": {
        "sha": "dda0522f598fa81322bcb9e2183dbb2cda8f028d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dda0522f598fa81322bcb9e2183dbb2cda8f028d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb26e2c896a92b7d9376e2a903ebc9a1825b92d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb26e2c896a92b7d9376e2a903ebc9a1825b92d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb26e2c896a92b7d9376e2a903ebc9a1825b92d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb26e2c896a92b7d9376e2a903ebc9a1825b92d8/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "cb9871194a7fffe8bc0a53ea820b1a395e79e283",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb9871194a7fffe8bc0a53ea820b1a395e79e283",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb9871194a7fffe8bc0a53ea820b1a395e79e283"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4fe610794f79c971620c12f7105271e7d4de7ba9",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb26e2c896a92b7d9376e2a903ebc9a1825b92d8/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb26e2c896a92b7d9376e2a903ebc9a1825b92d8/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=bb26e2c896a92b7d9376e2a903ebc9a1825b92d8",
        "patch": "@@ -22,8 +22,6 @@\n SplashScreen::SplashScreen(Qt::WindowFlags f, bool isTestNet) :\n     QWidget(0, f), curAlignment(0)\n {\n-    //setAutoFillBackground(true);\n-\n     // set reference point, paddings\n     int paddingRight            = 50;\n     int paddingTop              = 50;\n@@ -114,6 +112,7 @@ SplashScreen::~SplashScreen()\n \n void SplashScreen::slotFinish(QWidget *mainWin)\n {\n+    Q_UNUSED(mainWin);\n     hide();\n }\n \n@@ -180,4 +179,3 @@ void SplashScreen::closeEvent(QCloseEvent *event)\n {\n     event->ignore();\n }\n-"
      }
    ]
  },
  {
    "sha": "2027450d4270afdde691f71231f5c81282c2e711",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDI3NDUwZDQyNzBhZmRkZTY5MWY3MTIzMWY1YzgxMjgyYzJlNzEx",
    "commit": {
      "author": {
        "name": "Alexander Jeng",
        "email": "alexanderjeng@gmail.com",
        "date": "2014-09-22T06:13:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-23T08:40:57Z"
      },
      "message": "Grammar fixes in README\n\nGithub-Pull: #4956",
      "tree": {
        "sha": "fdb777b1af60f2fe20a6fec28433d5a8ea713ed2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdb777b1af60f2fe20a6fec28433d5a8ea713ed2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2027450d4270afdde691f71231f5c81282c2e711",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2027450d4270afdde691f71231f5c81282c2e711",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2027450d4270afdde691f71231f5c81282c2e711",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2027450d4270afdde691f71231f5c81282c2e711/comments",
    "author": {
      "login": "AlexJeng",
      "id": 4458931,
      "node_id": "MDQ6VXNlcjQ0NTg5MzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4458931?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AlexJeng",
      "html_url": "https://github.com/AlexJeng",
      "followers_url": "https://api.github.com/users/AlexJeng/followers",
      "following_url": "https://api.github.com/users/AlexJeng/following{/other_user}",
      "gists_url": "https://api.github.com/users/AlexJeng/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AlexJeng/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AlexJeng/subscriptions",
      "organizations_url": "https://api.github.com/users/AlexJeng/orgs",
      "repos_url": "https://api.github.com/users/AlexJeng/repos",
      "events_url": "https://api.github.com/users/AlexJeng/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AlexJeng/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb9871194a7fffe8bc0a53ea820b1a395e79e283",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb9871194a7fffe8bc0a53ea820b1a395e79e283",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb9871194a7fffe8bc0a53ea820b1a395e79e283"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d13011d6dcc6e8ae8ca5f91eb831824d311eff22",
        "filename": "README.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2027450d4270afdde691f71231f5c81282c2e711/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2027450d4270afdde691f71231f5c81282c2e711/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=2027450d4270afdde691f71231f5c81282c2e711",
        "patch": "@@ -97,7 +97,7 @@ CXXFLAGS=\"-g -ggdb -O0\" or whatever debug flags you need.\n **debug.log**\n \n If the code is behaving strangely, take a look in the debug.log file in the data directory;\n-error and debugging message are written there.\n+error and debugging messages are written there.\n \n The -debug=... command-line option controls debugging; running with just -debug will turn\n on all categories (and give you a very large debug.log file).\n@@ -111,12 +111,12 @@ Run with the -testnet option to run with \"play bitcoins\" on the test network, if\n are testing multi-machine code that needs to operate across the internet.\n \n If you are testing something that can run on one machine, run with the -regtest option.\n-In regression test mode blocks can be created on-demand; see qa/rpc-tests/ for tests\n+In regression test mode, blocks can be created on-demand; see qa/rpc-tests/ for tests\n that run in -regest mode.\n \n **DEBUG_LOCKORDER**\n \n Bitcoin Core is a multithreaded application, and deadlocks or other multithreading bugs\n can be very difficult to track down. Compiling with -DDEBUG_LOCKORDER (configure\n-CXXFLAGS=\"-DDEBUG_LOCKORDER -g\") inserts run-time checks to keep track of what locks\n-are held, and adds warning to the debug.log file if inconsistencies are detected.\n+CXXFLAGS=\"-DDEBUG_LOCKORDER -g\") inserts run-time checks to keep track of which locks\n+are held, and adds warnings to the debug.log file if inconsistencies are detected."
      }
    ]
  },
  {
    "sha": "6f3ae9b5df1a65c47aeb221afcf079b0fae566d4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjNhZTliNWRmMWE2NWM0N2FlYjIyMWFmY2YwNzliMGZhZTU2NmQ0",
    "commit": {
      "author": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-22T20:24:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-23T08:45:04Z"
      },
      "message": "Fixing out of bounds error in GetKey()",
      "tree": {
        "sha": "07844c9d834993540b39f42a4f4418260e25dd00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07844c9d834993540b39f42a4f4418260e25dd00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f3ae9b5df1a65c47aeb221afcf079b0fae566d4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3ae9b5df1a65c47aeb221afcf079b0fae566d4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f3ae9b5df1a65c47aeb221afcf079b0fae566d4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3ae9b5df1a65c47aeb221afcf079b0fae566d4/comments",
    "author": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb9871194a7fffe8bc0a53ea820b1a395e79e283",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb9871194a7fffe8bc0a53ea820b1a395e79e283",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb9871194a7fffe8bc0a53ea820b1a395e79e283"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d94db2c51b125a7c8381076822e806e44ced9ba2",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3ae9b5df1a65c47aeb221afcf079b0fae566d4/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3ae9b5df1a65c47aeb221afcf079b0fae566d4/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=6f3ae9b5df1a65c47aeb221afcf079b0fae566d4",
        "patch": "@@ -288,7 +288,8 @@ void CBitcoinSecret::SetKey(const CKey& vchSecret)\n CKey CBitcoinSecret::GetKey()\n {\n     CKey ret;\n-    ret.Set(&vchData[0], &vchData[32], vchData.size() > 32 && vchData[32] == 1);\n+    assert(vchData.size() >= 32);\n+    ret.Set(vchData.begin(), vchData.begin() + 32, vchData.size() > 32 && vchData[32] == 1);\n     return ret;\n }\n "
      }
    ]
  },
  {
    "sha": "bfe527ea86154e99dd1674712d76f39609ba4bf9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmU1MjdlYTg2MTU0ZTk5ZGQxNjc0NzEyZDc2ZjM5NjA5YmE0YmY5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-23T08:52:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-23T08:53:05Z"
      },
      "message": "Merge pull request #4962\n\n6f3ae9b Fixing out of bounds error in GetKey() (ENikS)",
      "tree": {
        "sha": "27c19b24810ec9922f063236b5c270aa1d16bc66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27c19b24810ec9922f063236b5c270aa1d16bc66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfe527ea86154e99dd1674712d76f39609ba4bf9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUITTxAAoJEHSBCwEjRsmmPsEIALpgpx4zqDa4hJIkAojuA/ln\nwx2XX6xc/GBWVaK6e4A8VQHwqaQM2ms7fw2rL3+i5iBta3mnuXWoFPw1rU5mRjQr\npMNbziPCkgZDNdZ7lsqBnilbILAt2JoRz4hNh2i9onLlHYIHg4SV938kxgMGcNuc\nK9mAkOlLyBk0DDRWX8uaRES3nXSTnMR/mqO75bWN1jR15l+NhsiLbcZBFP7Tbydp\n4vQnSptoSuWrF5L7wsSGRzFqeaM/u/fP/Ns2Ms1iuZRY7pxpI06STn0TaxJc3VC2\nDPMEVYdFX3qyD0AdGcCQQkl4d6fJbENnvsVKE4toYLNmL9Nm7ieNUzicZBk9wE8=\n=C14v\n-----END PGP SIGNATURE-----",
        "payload": "tree 27c19b24810ec9922f063236b5c270aa1d16bc66\nparent 2027450d4270afdde691f71231f5c81282c2e711\nparent 6f3ae9b5df1a65c47aeb221afcf079b0fae566d4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411462369 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411462385 +0200\n\nMerge pull request #4962\n\n6f3ae9b Fixing out of bounds error in GetKey() (ENikS)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfe527ea86154e99dd1674712d76f39609ba4bf9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfe527ea86154e99dd1674712d76f39609ba4bf9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfe527ea86154e99dd1674712d76f39609ba4bf9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2027450d4270afdde691f71231f5c81282c2e711",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2027450d4270afdde691f71231f5c81282c2e711",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2027450d4270afdde691f71231f5c81282c2e711"
      },
      {
        "sha": "6f3ae9b5df1a65c47aeb221afcf079b0fae566d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3ae9b5df1a65c47aeb221afcf079b0fae566d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f3ae9b5df1a65c47aeb221afcf079b0fae566d4"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d94db2c51b125a7c8381076822e806e44ced9ba2",
        "filename": "src/base58.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfe527ea86154e99dd1674712d76f39609ba4bf9/src/base58.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfe527ea86154e99dd1674712d76f39609ba4bf9/src/base58.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.cpp?ref=bfe527ea86154e99dd1674712d76f39609ba4bf9",
        "patch": "@@ -288,7 +288,8 @@ void CBitcoinSecret::SetKey(const CKey& vchSecret)\n CKey CBitcoinSecret::GetKey()\n {\n     CKey ret;\n-    ret.Set(&vchData[0], &vchData[32], vchData.size() > 32 && vchData[32] == 1);\n+    assert(vchData.size() >= 32);\n+    ret.Set(vchData.begin(), vchData.begin() + 32, vchData.size() > 32 && vchData[32] == 1);\n     return ret;\n }\n "
      }
    ]
  },
  {
    "sha": "35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNWVlMmRhYzY3MzZlMjNiZTNmZGQ1ODRiYTBlMzIxZTU0ZmY4ZjYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-23T10:50:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-23T11:14:19Z"
      },
      "message": "Merge pull request #4949\n\nc8589bf Add actual signature tests (Pieter Wuille)\n76ec867 Use actually valid transactions for script tests (Pieter Wuille)",
      "tree": {
        "sha": "d0bd5c7433c9999c54c88aff0c450380f6432c64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0bd5c7433c9999c54c88aff0c450380f6432c64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUIVYLAAoJEHSBCwEjRsmmgRoH/3IAi+JahuiYtMQmL4YpTH9Z\n7oOzjhrvvSPR+koWS2VbKTArjJCGP8J7PWoKhCCSpFhTpqGK6v1LTpM4a4oLoSxV\nq84pKkZ1sDJJkaEuPMWKVnb95T9PJatNrjR92KWcLGHYr4LDooP3NClAZNW/JDd/\nRBPqOsj36Nxt3IZX8x1GSWkVFi8khwtBCjANz2dhDYHKZ/VwvTMc5Tf+12t5HxdS\nx0VEYpWxms/0B4SVWDuHCy9yvbJjK6biNrYCTg0+YdYfTr5GeQPlvUV4ItdFKSD/\nyWoYFBdiSwxlqbBW8d9EnCIt3MRHiie+9x5I7CTrSP8KCGHv8mkJYyTFMe9687k=\n=rMog\n-----END PGP SIGNATURE-----",
        "payload": "tree d0bd5c7433c9999c54c88aff0c450380f6432c64\nparent bfe527ea86154e99dd1674712d76f39609ba4bf9\nparent c8589bf99e7d4b352763905e56799a03adda25a7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411469417 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411470859 +0200\n\nMerge pull request #4949\n\nc8589bf Add actual signature tests (Pieter Wuille)\n76ec867 Use actually valid transactions for script tests (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35ee2dac6736e23be3fdd584ba0e321e54ff8f61/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfe527ea86154e99dd1674712d76f39609ba4bf9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfe527ea86154e99dd1674712d76f39609ba4bf9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfe527ea86154e99dd1674712d76f39609ba4bf9"
      },
      {
        "sha": "c8589bf99e7d4b352763905e56799a03adda25a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8589bf99e7d4b352763905e56799a03adda25a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8589bf99e7d4b352763905e56799a03adda25a7"
      }
    ],
    "stats": {
      "total": 102,
      "additions": 95,
      "deletions": 7
    },
    "files": [
      {
        "sha": "401031ad12b3ac04a8e5ba1d5d78107925e46320",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35ee2dac6736e23be3fdd584ba0e321e54ff8f61/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35ee2dac6736e23be3fdd584ba0e321e54ff8f61/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
        "patch": "@@ -1,4 +1,13 @@\n [\n+[\"\n+Format is: [scriptPubKey, scriptSig, flags, ... comments]\n+It is evaluated as if there was a crediting coinbase transaction with two 0\n+pushes as scriptSig, and one output of 0 satoshi and given scriptPubKey,\n+followed by a spending transaction which spends this output as only input (and\n+correct prevout hash), using the given scriptSig. All nLockTimes are 0, all\n+nSequences are max.\n+\"],\n+\n [\"\", \"DEPTH\", \"P2SH,STRICTENC\",   \"Test the test: we should have an empty stack after scriptSig evaluation\"],\n [\"  \", \"DEPTH\", \"P2SH,STRICTENC\", \"and multiple spaces should not change that.\"],\n [\"   \", \"DEPTH\", \"P2SH,STRICTENC\"],\n@@ -373,5 +382,21 @@\n [\"0 0x01 0x50\", \"HASH160 0x14 0xece424a6bb6ddf4db592c0faed60685047a361b1 EQUAL\", \"P2SH,STRICTENC\", \"OP_RESERVED in P2SH should fail\"],\n [\"0 0x01 VER\", \"HASH160 0x14 0x0f4d7845db968f2a81b530b6f3c1d6246d4c7e01 EQUAL\", \"P2SH,STRICTENC\", \"OP_VER in P2SH should fail\"],\n \n-[\"0x00\", \"'00' EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"]\n+[\"0x00\", \"'00' EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"],\n+\n+[\"0x48 0x3045022100ea4d62e1fb351ad977596457bb01dfce58e050541784277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with wrong signature\"],\n+[\"0x47 0x304402207d09de5e34968c3f8b27d8217f173629f1106ee5216aa11d6b1f9813b3a214060220610a6ed25c704f901c6278f4f57fb11eadefdf0b22df298cfb6ce7ea84c86bf401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash using an anyonecanpay sighash\"],\n+[\"0x47 0x3044022028686fb3c8d3e5068cc9924c494fb5026df201d23340896da62fe9bb73fd9d5f02202a239609524959c4ca3651fd0cc48245b0b240862146fc579f3a962a4f46942b01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkey with wrong signature\"],\n+[\"0x47 0x3044022054cb0a3fca8694a0c231848ed9f965078148fd653e49dd4b6981fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"P2SH,STRICTENC\", \"P2SH with a pay to pubkeyhash inside with wrong signature\"],\n+[\"0 0x48 0x3045022100e1c4e8800bd00c9ec3cd3df0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC\", \"Raw multisig with one pubkey with wrong signature\"],\n+[\"0x49 0x304602220000ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with non-DER signature (too much R padding)\"],\n+[\"0x47 0x30440220ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with non-DER signature (too little R padding)\"],\n+[\"0x49 0x3046022100ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a950221003003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with non-DER signature (too much S padding)\"],\n+[\"0x48 0x3045022100e6eda3fd34862078233463cae19f0b47995e3f892102e5b175175e92a9163cc402204bf58445819093638481084322b61a2d49b68c96fd6fea17ed494722d0d67b4f01\", \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"P2SH,STRICTENC\", \"Pay to pubkey with hybrid pubkey encoding\"],\n+[\"0x48 0x304502203b56d65863e0cdb89313043c2402f46f518c31658648151b01ec6b5b6c89206a022100d71efefb4c24fab36abb44ade106963d8114c5af1bda033faa1923f54ec4ea6a01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC,LOW_S\", \"Pay to pubkey with high S\"],\n+[\"0x47 0x3044022054cb0a3fca8694a0c231848fd9f965078148fd653e49dd4b6980fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"P2SH,STRICTENC\", \"P2SH with a pay to pubkeyhash inside with invalid signature\"],\n+[\"1 0x48 0x3045022100e1c4e8800bd00c9ec3cd3de0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC,NULLDUMMY\", \"Raw multisig with one pubkey with non-zero dummy\"],\n+\n+[\"The End\"]\n+\n ]"
      },
      {
        "sha": "e0b527996c135d607ed99055ee3d5dcc8a977330",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 25,
        "deletions": 1,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35ee2dac6736e23be3fdd584ba0e321e54ff8f61/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35ee2dac6736e23be3fdd584ba0e321e54ff8f61/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
        "patch": "@@ -1,4 +1,13 @@\n [\n+[\"\n+Format is: [scriptPubKey, scriptSig, flags, ... comments]\n+It is evaluated as if there was a crediting coinbase transaction with two 0\n+pushes as scriptSig, and one output of 0 satoshi and given scriptPubKey,\n+followed by a spending transaction which spends this output as only input (and\n+correct prevout hash), using the given scriptSig. All nLockTimes are 0, all\n+nSequences are max.\n+\"],\n+\n [\"\", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"Test the test: we should have an empty stack after scriptSig evaluation\"],\n [\"  \", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"and multiple spaces should not change that.\"],\n [\"   \", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\"],\n@@ -518,5 +527,20 @@\n \"P2SH,STRICTENC\",\n \"Basic PUSHDATA1 signedness check\"],\n \n-[\"0x00\", \"SIZE 0 EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"]\n+[\"0x00\", \"SIZE 0 EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"],\n+\n+[\"0x48 0x3045022100ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash\"],\n+[\"0x47 0x304402207d09de5e34968c3f8b27d8217f173629f1106ee5216aa11d6b1f9813b3a214060220610a6ed25c704f901c6278f4f57fb11eadefdf0b22df298cfb6ce7ea84c86bf481 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Anyonecanpay pay to pubkeyhash\"],\n+[\"0x47 0x3044022028686fb3c8d3e5069cc9924c494fb5026df201d23340896da62fe9bb73fd9d5f02202a239609524959c4ca3651fd0cc48245b0b240862146fc579f3a962a4f46942b01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkey\"],\n+[\"0x47 0x3044022054cb0a3fca8694a0c231848ed9f965078148fd653e49dd4b6980fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"P2SH,STRICTENC\", \"P2SH with a pay to pubkeyhash inside\"],\n+[\"0 0x48 0x3045022100e1c4e8800bd00c9ec3cd3de0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC\", \"Raw multisig with one pubkey\"],\n+[\"0x49 0x304602220000ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH\", \"Normal pay to pubkeyhash with non-DER signature (too much R padding)\"],\n+[\"0x47 0x30440220ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH\", \"Normal pay to pubkeyhash with non-DER signature (too little R padding)\"],\n+[\"0x49 0x3046022100ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a950221003003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH\", \"Normal pay to pubkeyhash with non-DER signature (too much S padding)\"],\n+[\"0x48 0x3045022100e6eda3fd34862078233463cae19f0b47995e3f892102e5b175175e92a9163cc402204bf58445819093638481084322b61a2d49b68c96fd6fea17ed494722d0d67b4f01\", \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"P2SH\", \"Pay to pubkey with hybrid pubkey encoding\"],\n+[\"0x48 0x304502203b56d65863e0cdb89313043c2402f46f518c31658648151b01ec6b5b6c89206a022100d71efefb4c24fab36abb44ade106963d8114c5af1bda033faa1923f54ec4ea6a01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC\", \"Pay to pubkey with high S\"],\n+[\"0x47 0x3044022054cb0a3fca8694a0c231848fd9f965078148fd653e49dd4b6980fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"STRICTENC\", \"P2SH with a pay to pubkeyhash inside with invalid signature\"],\n+[\"1 0x48 0x3045022100e1c4e8800bd00c9ec3cd3de0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC\", \"Raw multisig with one pubkey with non-zero dummy\"],\n+\n+[\"The End\"]\n ]"
      },
      {
        "sha": "178b35fa2d80b829fe342ae26f18c67383641660",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 5,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35ee2dac6736e23be3fdd584ba0e321e54ff8f61/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35ee2dac6736e23be3fdd584ba0e321e54ff8f61/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
        "patch": "@@ -52,6 +52,41 @@ read_json(const std::string& jsondata)\n \n BOOST_AUTO_TEST_SUITE(script_tests)\n \n+CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n+{\n+    CMutableTransaction txCredit;\n+    txCredit.nVersion = 1;\n+    txCredit.nLockTime = 0;\n+    txCredit.vin.resize(1);\n+    txCredit.vout.resize(1);\n+    txCredit.vin[0].prevout.SetNull();\n+    txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n+    txCredit.vin[0].nSequence = std::numeric_limits<unsigned int>::max();\n+    txCredit.vout[0].scriptPubKey = scriptPubKey;\n+    txCredit.vout[0].nValue = 0;\n+\n+    return txCredit;\n+}\n+\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScript& scriptPubKey)\n+{\n+    CMutableTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n+\n+    CMutableTransaction txSpend;\n+    txSpend.nVersion = 1;\n+    txSpend.nLockTime = 0;\n+    txSpend.vin.resize(1);\n+    txSpend.vout.resize(1);\n+    txSpend.vin[0].prevout.hash = txCredit.GetHash();\n+    txSpend.vin[0].prevout.n = 0;\n+    txSpend.vin[0].scriptSig = scriptSig;\n+    txSpend.vin[0].nSequence = std::numeric_limits<unsigned int>::max();\n+    txSpend.vout[0].scriptPubKey = CScript();\n+    txSpend.vout[0].nValue = 0;\n+\n+    return txSpend;\n+}\n+\n BOOST_AUTO_TEST_CASE(script_valid)\n {\n     // Read tests from test/data/script_valid.json\n@@ -67,7 +102,9 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         string strTest = write_string(tv, false);\n         if (test.size() < 3) // Allow size > 3; extra stuff ignored (useful for comments)\n         {\n-            BOOST_ERROR(\"Bad test: \" << strTest);\n+            if (test.size() != 1) {\n+                BOOST_ERROR(\"Bad test: \" << strTest);\n+            }\n             continue;\n         }\n         string scriptSigString = test[0].get_str();\n@@ -77,7 +114,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n \n         CTransaction tx;\n-        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, tx, 0, scriptflags), strTest);\n+        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, BuildSpendingTransaction(scriptSig, scriptPubKey), 0, scriptflags), strTest);\n     }\n }\n \n@@ -90,9 +127,11 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n     {\n         Array test = tv.get_array();\n         string strTest = write_string(tv, false);\n-        if (test.size() < 2) // Allow size > 2; extra stuff ignored (useful for comments)\n+        if (test.size() < 3) // Allow size > 3; extra stuff ignored (useful for comments)\n         {\n-            BOOST_ERROR(\"Bad test: \" << strTest);\n+            if (test.size() != 1) {\n+                BOOST_ERROR(\"Bad test: \" << strTest);\n+            }\n             continue;\n         }\n         string scriptSigString = test[0].get_str();\n@@ -102,7 +141,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n \n         CTransaction tx;\n-        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, tx, 0, scriptflags), strTest);\n+        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, BuildSpendingTransaction(scriptSig, scriptPubKey), 0, scriptflags), strTest);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "c8063b57124600ae4e8e2a65eab402d3c47babe2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODA2M2I1NzEyNDYwMGFlNGU4ZTJhNjVlYWI0MDJkM2M0N2JhYmUy",
    "commit": {
      "author": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-23T15:17:43Z"
      },
      "committer": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-23T15:17:43Z"
      },
      "message": "Fixing out of bounds asses error",
      "tree": {
        "sha": "ba58ac08cb4f2526d107d894f09838de81d783bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba58ac08cb4f2526d107d894f09838de81d783bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8063b57124600ae4e8e2a65eab402d3c47babe2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8063b57124600ae4e8e2a65eab402d3c47babe2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8063b57124600ae4e8e2a65eab402d3c47babe2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8063b57124600ae4e8e2a65eab402d3c47babe2/comments",
    "author": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35ee2dac6736e23be3fdd584ba0e321e54ff8f61"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "68232a2ff110f03830530e54a325888c9a6963bb",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8063b57124600ae4e8e2a65eab402d3c47babe2/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8063b57124600ae4e8e2a65eab402d3c47babe2/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=c8063b57124600ae4e8e2a65eab402d3c47babe2",
        "patch": "@@ -32,7 +32,7 @@ void TestVector(const Hasher &h, const In &in, const Out &out) {\n             size_t len = insecure_rand() % ((in.size() - pos + 1) / 2 + 1);\n             hasher.Write((unsigned char*)&in[pos], len);\n             pos += len;\n-            if (pos > 0 && pos + 2 * out.size() > in.size()) {\n+            if (pos > 0 && pos + 2 * out.size() > in.size() && pos < in.size()) {\n                 // Test that writing the rest at once to a copy of a hasher works.\n                 Hasher(hasher).Write((unsigned char*)&in[pos], in.size() - pos).Finalize(&hash[0]);\n                 BOOST_CHECK(hash == out);"
      }
    ]
  },
  {
    "sha": "459a2d25e0c91d1650974900a902285bedb85f39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTlhMmQyNWUwYzkxZDE2NTA5NzQ5MDBhOTAyMjg1YmVkYjg1ZjM5",
    "commit": {
      "author": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-23T15:54:12Z"
      },
      "committer": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-23T15:54:12Z"
      },
      "message": "Avoiding referencing elements of an empty vector",
      "tree": {
        "sha": "11fd99d63476788bc5bedf0b508bd1c126c81df0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11fd99d63476788bc5bedf0b508bd1c126c81df0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/459a2d25e0c91d1650974900a902285bedb85f39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/459a2d25e0c91d1650974900a902285bedb85f39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/459a2d25e0c91d1650974900a902285bedb85f39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/459a2d25e0c91d1650974900a902285bedb85f39/comments",
    "author": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35ee2dac6736e23be3fdd584ba0e321e54ff8f61"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 36,
      "deletions": 33
    },
    "files": [
      {
        "sha": "218607a6fdfc9af9947ea5791edb9ffcf1c7e2c3",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 33,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/459a2d25e0c91d1650974900a902285bedb85f39/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/459a2d25e0c91d1650974900a902285bedb85f39/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=459a2d25e0c91d1650974900a902285bedb85f39",
        "patch": "@@ -9,45 +9,48 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n {\n     // The following is MurmurHash3 (x86_32), see http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\n     uint32_t h1 = nHashSeed;\n-    const uint32_t c1 = 0xcc9e2d51;\n-    const uint32_t c2 = 0x1b873593;\n+    if (vDataToHash.size() > 0)\n+    {\n+        const uint32_t c1 = 0xcc9e2d51;\n+        const uint32_t c2 = 0x1b873593;\n \n-    const int nblocks = vDataToHash.size() / 4;\n+        const int nblocks = vDataToHash.size() / 4;\n \n-    //----------\n-    // body\n-    const uint32_t* blocks = (const uint32_t*)(&vDataToHash[0] + nblocks * 4);\n+        //----------\n+        // body\n+        const uint32_t* blocks = (const uint32_t*)(&vDataToHash[0] + nblocks * 4);\n \n-    for (int i = -nblocks; i; i++) {\n-        uint32_t k1 = blocks[i];\n+        for (int i = -nblocks; i; i++) {\n+            uint32_t k1 = blocks[i];\n \n-        k1 *= c1;\n-        k1 = ROTL32(k1, 15);\n-        k1 *= c2;\n+            k1 *= c1;\n+            k1 = ROTL32(k1, 15);\n+            k1 *= c2;\n \n-        h1 ^= k1;\n-        h1 = ROTL32(h1, 13);\n-        h1 = h1 * 5 + 0xe6546b64;\n-    }\n+            h1 ^= k1;\n+            h1 = ROTL32(h1, 13);\n+            h1 = h1 * 5 + 0xe6546b64;\n+        }\n \n-    //----------\n-    // tail\n-    const uint8_t* tail = (const uint8_t*)(&vDataToHash[0] + nblocks * 4);\n-\n-    uint32_t k1 = 0;\n-\n-    switch (vDataToHash.size() & 3) {\n-    case 3:\n-        k1 ^= tail[2] << 16;\n-    case 2:\n-        k1 ^= tail[1] << 8;\n-    case 1:\n-        k1 ^= tail[0];\n-        k1 *= c1;\n-        k1 = ROTL32(k1, 15);\n-        k1 *= c2;\n-        h1 ^= k1;\n-    };\n+        //----------\n+        // tail\n+        const uint8_t* tail = (const uint8_t*)(&vDataToHash[0] + nblocks * 4);\n+\n+        uint32_t k1 = 0;\n+\n+        switch (vDataToHash.size() & 3) {\n+        case 3:\n+            k1 ^= tail[2] << 16;\n+        case 2:\n+            k1 ^= tail[1] << 8;\n+        case 1:\n+            k1 ^= tail[0];\n+            k1 *= c1;\n+            k1 = ROTL32(k1, 15);\n+            k1 *= c2;\n+            h1 ^= k1;\n+        };\n+    }\n \n     //----------\n     // finalization"
      }
    ]
  },
  {
    "sha": "7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTA0ZjNkNzA4ZmFhYjRhZjFmMWE2YWVkZGM1YTZhNGRiMzg0OWE1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-23T18:20:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-23T18:20:58Z"
      },
      "message": "Merge pull request #4955\n\n87314c1 Fixing improper input syntax and failing bounds check (ENikS)",
      "tree": {
        "sha": "bdc34997a290bed1fd9f36ca4b0bb53f4493e160",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bdc34997a290bed1fd9f36ca4b0bb53f4493e160"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUIboKAAoJEFeJbS/48LZXndUL/0V7RxSxIvIIn2/6ORqzCmEp\n0ir1oF+0BDcLzmtdHSiF4bQ6BQEuZNYgwGNZtV+i+8sslq9lA2LYuJ7A067jLFDe\nWfY6WR+JKzyuXdYZMVizwsI6CpNkXfu+k1XqZcLqPKYflpvfAdlFHYZB8K6LMjEK\ncj/BDCjNGwr6lolctRDASPrMNzD+UtKoB9mJDGNVg8YY3tH3kvgZjNAOb9EJClWX\nohOWelkaRjKX4uMkRBcC+ikWlkA9qHpCD5NtjkBHh7ECCq7QvGYVi2c4VZPaByHk\ncGvnsbN3q8GzKnaIncnDb2ujQ61/uXKpWbiq7OZMpxGyzFr6Ffymrm+DZUfXyeHl\nLcoWQiZu7E5E/ijk5zBG8y5MjI1XdX7RklLh1ixhMbmKTxnkdWP/sxrrXE9oXOvd\n6cOGFJzYROKik+fffGyuOvzieVU0ioND700FL4XHokqHEpay3ydWHW4l3HuP5ESw\nurqPvamLxECbYe2Q47MajXtQ4E34vIZ5NpSa3K3RKQ==\n=6tGY\n-----END PGP SIGNATURE-----",
        "payload": "tree bdc34997a290bed1fd9f36ca4b0bb53f4493e160\nparent 35ee2dac6736e23be3fdd584ba0e321e54ff8f61\nparent 87314c1c5e69035fefa638de8e237e4ce09788e9\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1411496413 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1411496458 +0200\n\nMerge pull request #4955\n\n87314c1 Fixing improper input syntax and failing bounds check (ENikS)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35ee2dac6736e23be3fdd584ba0e321e54ff8f61"
      },
      {
        "sha": "87314c1c5e69035fefa638de8e237e4ce09788e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87314c1c5e69035fefa638de8e237e4ce09788e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87314c1c5e69035fefa638de8e237e4ce09788e9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "447d808dee0e7b3f1e0e3dcbe5292ebd0121b72b",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "patch": "@@ -921,7 +921,7 @@ class CDataStream\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch((char*)&vchIn.begin()[0], (char*)&vchIn.end()[0])\n+    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn, int nVersionIn) : vch(vchIn.begin(), vchIn.end())\n     {\n         Init(nTypeIn, nVersionIn);\n     }"
      }
    ]
  },
  {
    "sha": "f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjhhZWMwMTRlZGQyOWNmYzY2OWNmMWMzZjc5NWMwZjFlMmFlN2Uy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-03T07:01:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-23T20:29:12Z"
      },
      "message": "Use ModifyCoins instead of mutable GetCoins.\n\nReplace the mutable non-copying GetCoins method with a ModifyCoins, which\nreturns an encapsulated iterator, so we can keep track of concurrent\nmodifications (as iterators can be invalidated by those) and run cleanup\ncode after a modification is finished.\n\nThis also removes the overloading of the 'GetCoins' name.",
      "tree": {
        "sha": "92c7e9e24f52b4294249b7eeee6e6e3525d1618a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92c7e9e24f52b4294249b7eeee6e6e3525d1618a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5"
      }
    ],
    "stats": {
      "total": 170,
      "additions": 108,
      "deletions": 62
    },
    "files": [
      {
        "sha": "4d6dbc1dfcf205169d8e8080855717a75d1840bd",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
        "patch": "@@ -384,21 +384,19 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n             vector<unsigned char> pkData(ParseHexUV(prevOut, \"scriptPubKey\"));\n             CScript scriptPubKey(pkData.begin(), pkData.end());\n \n-            CCoins coins;\n-            if (view.GetCoins(txid, coins)) {\n-                if (coins.IsAvailable(nOut) && coins.vout[nOut].scriptPubKey != scriptPubKey) {\n+            {\n+                CCoinsModifier coins = view.ModifyCoins(txid);\n+                if (coins->IsAvailable(nOut) && coins->vout[nOut].scriptPubKey != scriptPubKey) {\n                     string err(\"Previous output scriptPubKey mismatch:\\n\");\n-                    err = err + coins.vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n+                    err = err + coins->vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n                         scriptPubKey.ToString();\n                     throw runtime_error(err);\n                 }\n-                // what todo if txid is known, but the actual output isn't?\n+                if ((unsigned int)nOut >= coins->vout.size())\n+                    coins->vout.resize(nOut+1);\n+                coins->vout[nOut].scriptPubKey = scriptPubKey;\n+                coins->vout[nOut].nValue = 0; // we don't know the actual output value\n             }\n-            if ((unsigned int)nOut >= coins.vout.size())\n-                coins.vout.resize(nOut+1);\n-            coins.vout[nOut].scriptPubKey = scriptPubKey;\n-            coins.vout[nOut].nValue = 0; // we don't know the actual output value\n-            view.SetCoins(txid, coins);\n \n             // if redeemScript given and private keys given,\n             // add redeemScript to the tempKeystore so it can be signed:"
      },
      {
        "sha": "2b93c74c3a34e23c40ad055959bfbd527951ff30",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 11,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
        "patch": "@@ -73,7 +73,7 @@ bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStat\n \n CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hashBlock(0) { }\n+CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hasModifier(false), hashBlock(0) { }\n \n bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n     if (cacheCoins.count(txid)) {\n@@ -87,7 +87,12 @@ bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n     return false;\n }\n \n-CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n+CCoinsViewCache::~CCoinsViewCache()\n+{\n+    assert(!hasModifier);\n+}\n+\n+CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n     CCoinsMap::iterator it = cacheCoins.find(txid);\n     if (it != cacheCoins.end())\n         return it;\n@@ -99,15 +104,15 @@ CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n     return ret;\n }\n \n-CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n-    /* Avoid redundant implementation with the const-cast.  */\n-    return const_cast<CCoinsViewCache*>(this)->FetchCoins(txid);\n-}\n-\n-CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n-    CCoinsMap::iterator it = FetchCoins(txid);\n-    assert(it != cacheCoins.end());\n-    return it->second;\n+CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n+    assert(!hasModifier);\n+    hasModifier = true;\n+    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoins()));\n+    if (ret.second) {\n+        if (!base->GetCoins(txid, ret.first->second))\n+            ret.first->second.Clear();\n+    }\n+    return CCoinsModifier(*this, ret.first);\n }\n \n const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n@@ -145,6 +150,7 @@ bool CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n }\n \n bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n+    assert(!hasModifier);\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n         cacheCoins[it->first].swap(it->second);\n         CCoinsMap::iterator itOld = it++;\n@@ -213,3 +219,11 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n     }\n     return tx.ComputePriority(dResult);\n }\n+\n+CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_) : cache(cache_), it(it_) {}\n+\n+CCoinsModifier::~CCoinsModifier() {\n+    assert(cache.hasModifier);\n+    cache.hasModifier = false;\n+    it->second.Cleanup();\n+}"
      },
      {
        "sha": "62beea3c23c21e97333312191dbd8e2ba84854cb",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 45,
        "deletions": 4,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
        "patch": "@@ -83,11 +83,26 @@ class CCoins\n     // as new tx version will probably only be introduced at certain heights\n     int nVersion;\n \n-    // construct a CCoins from a CTransaction, at a given height\n-    CCoins(const CTransaction &tx, int nHeightIn) : fCoinBase(tx.IsCoinBase()), vout(tx.vout), nHeight(nHeightIn), nVersion(tx.nVersion) {\n+    void FromTx(const CTransaction &tx, int nHeightIn) {\n+        fCoinBase = tx.IsCoinBase();\n+        vout = tx.vout;\n+        nHeight = nHeightIn;\n+        nVersion = tx.nVersion;\n         ClearUnspendable();\n     }\n \n+    // construct a CCoins from a CTransaction, at a given height\n+    CCoins(const CTransaction &tx, int nHeightIn) {\n+        FromTx(tx, nHeightIn);\n+    }\n+\n+    void Clear() {\n+        fCoinBase = false;\n+        std::vector<CTxOut>().swap(vout);\n+        nHeight = 0;\n+        nVersion = 0;\n+    }\n+\n     // empty constructor\n     CCoins() : fCoinBase(false), vout(0), nHeight(0), nVersion(0) { }\n \n@@ -323,10 +338,31 @@ class CCoinsViewBacked : public CCoinsView\n };\n \n \n+class CCoinsViewCache;\n+\n+/** A reference to a mutable cache entry. Encapsulating it allows us to run\n+ *  cleanup code after the modification is finished, and keeping track of\n+ *  concurrent modifications. */\n+class CCoinsModifier\n+{\n+private:\n+    CCoinsViewCache& cache;\n+    CCoinsMap::iterator it;\n+    CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_);\n+\n+public:\n+    CCoins* operator->() { return &it->second; }\n+    CCoins& operator*() { return it->second; }\n+    ~CCoinsModifier();\n+    friend class CCoinsViewCache;\n+};\n+\n /** CCoinsView that adds a memory cache for transactions to another CCoinsView */\n class CCoinsViewCache : public CCoinsViewBacked\n {\n protected:\n+    /* Whether this cache has an active modifier. */\n+    bool hasModifier;\n \n     /* Make mutable so that we can \"fill the cache\" even from Get-methods\n        declared as \"const\".  */\n@@ -335,6 +371,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n public:\n     CCoinsViewCache(CCoinsView &baseIn, bool fDummy = false);\n+    ~CCoinsViewCache();\n \n     // Standard CCoinsView methods\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n@@ -349,8 +386,10 @@ class CCoinsViewCache : public CCoinsViewBacked\n     // allowed while accessing the returned pointer.\n     const CCoins* AccessCoins(const uint256 &txid) const;\n \n-    // Return a modifiable reference to a CCoins. Check HaveCoins first.\n-    CCoins &GetCoins(const uint256 &txid);\n+    // Return a modifiable reference to a CCoins. If no entry with the given\n+    // txid exists, a new one is created. Simultaneous modifications are not\n+    // allowed.\n+    CCoinsModifier ModifyCoins(const uint256 &txid);\n \n     // Push the modifications applied to this cache to its base.\n     // Failure to call this method before destruction will cause the changes to be forgotten.\n@@ -377,6 +416,8 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n     const CTxOut &GetOutputFor(const CTxIn& input) const;\n \n+    friend class CCoinsModifier;\n+\n private:\n     CCoinsMap::iterator FetchCoins(const uint256 &txid);\n     CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;"
      },
      {
        "sha": "5aed3a2528cbf9ceda23951de7068da85289d296",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 27,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
        "patch": "@@ -1348,22 +1348,18 @@ void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state\n \n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight)\n {\n-    bool ret;\n     // mark inputs spent\n     if (!tx.IsCoinBase()) {\n         txundo.vprevout.reserve(tx.vin.size());\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            const CTxIn &txin = tx.vin[i];\n-            CCoins &coins = inputs.GetCoins(txin.prevout.hash);\n+        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             txundo.vprevout.push_back(CTxInUndo());\n-            ret = coins.Spend(txin.prevout, txundo.vprevout.back());\n+            bool ret = inputs.ModifyCoins(txin.prevout.hash)->Spend(txin.prevout, txundo.vprevout.back());\n             assert(ret);\n         }\n     }\n \n     // add outputs\n-    ret = inputs.SetCoins(tx.GetHash(), CCoins(tx, nHeight));\n-    assert(ret);\n+    inputs.ModifyCoins(tx.GetHash())->FromTx(tx, nHeight);\n }\n \n bool CScriptCheck::operator()() const {\n@@ -1504,21 +1500,23 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         // exactly. Note that transactions with only provably unspendable outputs won't\n         // have outputs available even in the block itself, so we handle that case\n         // specially with outsEmpty.\n+        {\n         CCoins outsEmpty;\n-        CCoins &outs = view.HaveCoins(hash) ? view.GetCoins(hash) : outsEmpty;\n-        outs.ClearUnspendable();\n+        CCoinsModifier outs = view.ModifyCoins(hash);\n+        outs->ClearUnspendable();\n \n-        CCoins outsBlock = CCoins(tx, pindex->nHeight);\n+        CCoins outsBlock(tx, pindex->nHeight);\n         // The CCoins serialization does not serialize negative numbers.\n         // No network rules currently depend on the version here, so an inconsistency is harmless\n         // but it must be corrected before txout nversion ever influences a network rule.\n         if (outsBlock.nVersion < 0)\n-            outs.nVersion = outsBlock.nVersion;\n-        if (outs != outsBlock)\n+            outs->nVersion = outsBlock.nVersion;\n+        if (*outs != outsBlock)\n             fClean = fClean && error(\"DisconnectBlock() : added transaction mismatch? database corrupted\");\n \n         // remove outputs\n-        outs = CCoins();\n+        outs->Clear();\n+        }\n \n         // restore inputs\n         if (i > 0) { // not coinbases\n@@ -1528,27 +1526,24 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 const CTxInUndo &undo = txundo.vprevout[j];\n-                CCoins coins;\n-                view.GetCoins(out.hash, coins); // this can fail if the prevout was already entirely spent\n+                CCoinsModifier coins = view.ModifyCoins(out.hash);\n                 if (undo.nHeight != 0) {\n                     // undo data contains height: this is the last output of the prevout tx being spent\n-                    if (!coins.IsPruned())\n+                    if (!coins->IsPruned())\n                         fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing transaction\");\n-                    coins = CCoins();\n-                    coins.fCoinBase = undo.fCoinBase;\n-                    coins.nHeight = undo.nHeight;\n-                    coins.nVersion = undo.nVersion;\n+                    coins->Clear();\n+                    coins->fCoinBase = undo.fCoinBase;\n+                    coins->nHeight = undo.nHeight;\n+                    coins->nVersion = undo.nVersion;\n                 } else {\n-                    if (coins.IsPruned())\n+                    if (coins->IsPruned())\n                         fClean = fClean && error(\"DisconnectBlock() : undo data adding output to missing transaction\");\n                 }\n-                if (coins.IsAvailable(out.n))\n+                if (coins->IsAvailable(out.n))\n                     fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing output\");\n-                if (coins.vout.size() < out.n+1)\n-                    coins.vout.resize(out.n+1);\n-                coins.vout[out.n] = undo.txout;\n-                if (!view.SetCoins(out.hash, coins))\n-                    return error(\"DisconnectBlock() : cannot restore coin inputs\");\n+                if (coins->vout.size() < out.n+1)\n+                    coins->vout.resize(out.n+1);\n+                coins->vout[out.n] = undo.txout;\n             }\n         }\n     }"
      },
      {
        "sha": "da2421f38e281b581fd7b26d5c7b6f8ae0cc4742",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
        "patch": "@@ -612,21 +612,19 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             vector<unsigned char> pkData(ParseHexO(prevOut, \"scriptPubKey\"));\n             CScript scriptPubKey(pkData.begin(), pkData.end());\n \n-            CCoins coins;\n-            if (view.GetCoins(txid, coins)) {\n-                if (coins.IsAvailable(nOut) && coins.vout[nOut].scriptPubKey != scriptPubKey) {\n+            {\n+                CCoinsModifier coins = view.ModifyCoins(txid);\n+                if (coins->IsAvailable(nOut) && coins->vout[nOut].scriptPubKey != scriptPubKey) {\n                     string err(\"Previous output scriptPubKey mismatch:\\n\");\n-                    err = err + coins.vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n+                    err = err + coins->vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n                         scriptPubKey.ToString();\n                     throw JSONRPCError(RPC_DESERIALIZATION_ERROR, err);\n                 }\n-                // what todo if txid is known, but the actual output isn't?\n+                if ((unsigned int)nOut >= coins->vout.size())\n+                    coins->vout.resize(nOut+1);\n+                coins->vout[nOut].scriptPubKey = scriptPubKey;\n+                coins->vout[nOut].nValue = 0; // we don't know the actual output value\n             }\n-            if ((unsigned int)nOut >= coins.vout.size())\n-                coins.vout.resize(nOut+1);\n-            coins.vout[nOut].scriptPubKey = scriptPubKey;\n-            coins.vout[nOut].nValue = 0; // we don't know the actual output value\n-            view.SetCoins(txid, coins);\n \n             // if redeemScript given and not using the local wallet (private keys\n             // given), add redeemScript to the tempKeystore so it can be signed:"
      }
    ]
  },
  {
    "sha": "c9d1a81ce76737a73c9706e074a4fe8440c8277e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWQxYTgxY2U3NjczN2E3M2M5NzA2ZTA3NGE0ZmU4NDQwYzgyNzdl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-03T07:25:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-23T20:29:21Z"
      },
      "message": "Get rid of CCoinsView's SetCoins and SetBestBlock.\n\nAll direct modifications are now done through ModifyCoins, and BatchWrite is\nused for pushing batches of queued modifications up, so we don't need the\nlow-level SetCoins and SetBestBlock anymore in the top-level CCoinsView class.",
      "tree": {
        "sha": "e0632f5b7e27ff788ecfef97e0bfd7d31ef12b21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0632f5b7e27ff788ecfef97e0bfd7d31ef12b21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9d1a81ce76737a73c9706e074a4fe8440c8277e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9d1a81ce76737a73c9706e074a4fe8440c8277e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9d1a81ce76737a73c9706e074a4fe8440c8277e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9d1a81ce76737a73c9706e074a4fe8440c8277e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f28aec014edd29cfc669cf1c3f795c0f1e2ae7e2"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 8,
      "deletions": 44
    },
    "files": [
      {
        "sha": "9632e67f207f21426d8eb7a93c1dfdb4e4eb0301",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "patch": "@@ -53,20 +53,16 @@ bool CCoins::Spend(int nPos) {\n \n \n bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }\n-bool CCoinsView::SetCoins(const uint256 &txid, const CCoins &coins) { return false; }\n bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(0); }\n-bool CCoinsView::SetBestBlock(const uint256 &hashBlock) { return false; }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n bool CCoinsView::GetStats(CCoinsStats &stats) const { return false; }\n \n \n CCoinsViewBacked::CCoinsViewBacked(CCoinsView &viewIn) : base(&viewIn) { }\n bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }\n-bool CCoinsViewBacked::SetCoins(const uint256 &txid, const CCoins &coins) { return base->SetCoins(txid, coins); }\n bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n-bool CCoinsViewBacked::SetBestBlock(const uint256 &hashBlock) { return base->SetBestBlock(hashBlock); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStats(stats); }\n@@ -124,11 +120,6 @@ const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n     }\n }\n \n-bool CCoinsViewCache::SetCoins(const uint256 &txid, const CCoins &coins) {\n-    cacheCoins[txid] = coins;\n-    return true;\n-}\n-\n bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n     CCoinsMap::const_iterator it = FetchCoins(txid);\n     // We're using vtx.empty() instead of IsPruned here for performance reasons,\n@@ -144,9 +135,8 @@ uint256 CCoinsViewCache::GetBestBlock() const {\n     return hashBlock;\n }\n \n-bool CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n+void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n     hashBlock = hashBlockIn;\n-    return true;\n }\n \n bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {"
      },
      {
        "sha": "ce7a79740b583d9292d5963e5e496ed4eb4e1751",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "patch": "@@ -294,20 +294,14 @@ class CCoinsView\n     // Retrieve the CCoins (unspent transaction outputs) for a given txid\n     virtual bool GetCoins(const uint256 &txid, CCoins &coins) const;\n \n-    // Modify the CCoins for a given txid\n-    virtual bool SetCoins(const uint256 &txid, const CCoins &coins);\n-\n     // Just check whether we have data for a given txid.\n     // This may (but cannot always) return true for fully spent transactions\n     virtual bool HaveCoins(const uint256 &txid) const;\n \n     // Retrieve the block hash whose state this CCoinsView currently represents\n     virtual uint256 GetBestBlock() const;\n \n-    // Modify the currently active block hash\n-    virtual bool SetBestBlock(const uint256 &hashBlock);\n-\n-    // Do a bulk modification (multiple SetCoins + one SetBestBlock).\n+    // Do a bulk modification (multiple CCoins changes + BestBlock change).\n     // The passed mapCoins can be modified.\n     virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n@@ -328,10 +322,8 @@ class CCoinsViewBacked : public CCoinsView\n public:\n     CCoinsViewBacked(CCoinsView &viewIn);\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool SetCoins(const uint256 &txid, const CCoins &coins);\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n-    bool SetBestBlock(const uint256 &hashBlock);\n     void SetBackend(CCoinsView &viewIn);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n     bool GetStats(CCoinsStats &stats) const;\n@@ -375,10 +367,9 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n     // Standard CCoinsView methods\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool SetCoins(const uint256 &txid, const CCoins &coins);\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n-    bool SetBestBlock(const uint256 &hashBlock);\n+    void SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n     // Return a pointer to CCoins in the cache, or NULL if not found. This is"
      },
      {
        "sha": "af8810ebd6fa048b1da8e819336c5b49d3b98810",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "patch": "@@ -1753,9 +1753,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n             return state.Abort(_(\"Failed to write transaction index\"));\n \n     // add this block to the view's block chain\n-    bool ret;\n-    ret = view.SetBestBlock(pindex->GetBlockHash());\n-    assert(ret);\n+    view.SetBestBlock(pindex->GetBlockHash());\n \n     int64_t nTime3 = GetTimeMicros(); nTimeIndex += nTime3 - nTime2;\n     LogPrint(\"bench\", \"    - Index writing: %.2fms [%.2fs]\\n\", 0.001 * (nTime3 - nTime2), nTimeIndex * 0.000001);"
      },
      {
        "sha": "645d3c691856002287119db940e139397e990872",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "patch": "@@ -312,8 +312,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txFrom.vout[6].scriptPubKey = GetScriptForDestination(twentySigops.GetID());\n     txFrom.vout[6].nValue = 6000;\n \n-\n-    coins.SetCoins(txFrom.GetHash(), CCoins(txFrom, 0));\n+    coins.ModifyCoins(txFrom.GetHash())->FromTx(txFrom, 0);\n \n     CMutableTransaction txTo;\n     txTo.vout.resize(1);"
      },
      {
        "sha": "15c0034bfb3a9d4e96ed28fc0adc52a321eca0be",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "patch": "@@ -225,7 +225,7 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n // paid to a TX_PUBKEYHASH.\n //\n static std::vector<CMutableTransaction>\n-SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsView & coinsRet)\n+SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n {\n     std::vector<CMutableTransaction> dummyTransactions;\n     dummyTransactions.resize(2);\n@@ -244,14 +244,14 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsView & coinsRet)\n     dummyTransactions[0].vout[0].scriptPubKey << key[0].GetPubKey() << OP_CHECKSIG;\n     dummyTransactions[0].vout[1].nValue = 50*CENT;\n     dummyTransactions[0].vout[1].scriptPubKey << key[1].GetPubKey() << OP_CHECKSIG;\n-    coinsRet.SetCoins(dummyTransactions[0].GetHash(), CCoins(dummyTransactions[0], 0));\n+    coinsRet.ModifyCoins(dummyTransactions[0].GetHash())->FromTx(dummyTransactions[0], 0);\n \n     dummyTransactions[1].vout.resize(2);\n     dummyTransactions[1].vout[0].nValue = 21*CENT;\n     dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n     dummyTransactions[1].vout[1].nValue = 22*CENT;\n     dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n-    coinsRet.SetCoins(dummyTransactions[1].GetHash(), CCoins(dummyTransactions[1], 0));\n+    coinsRet.ModifyCoins(dummyTransactions[1].GetHash())->FromTx(dummyTransactions[1], 0);\n \n     return dummyTransactions;\n }"
      },
      {
        "sha": "3b353ab6249a0fe32732ada348bf41182741990e",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "patch": "@@ -33,12 +33,6 @@ bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n     return db.Read(make_pair('c', txid), coins);\n }\n \n-bool CCoinsViewDB::SetCoins(const uint256 &txid, const CCoins &coins) {\n-    CLevelDBBatch batch;\n-    BatchWriteCoins(batch, txid, coins);\n-    return db.WriteBatch(batch);\n-}\n-\n bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n     return db.Exists(make_pair('c', txid));\n }\n@@ -50,12 +44,6 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n     return hashBestChain;\n }\n \n-bool CCoinsViewDB::SetBestBlock(const uint256 &hashBlock) {\n-    CLevelDBBatch batch;\n-    BatchWriteHashBestChain(batch, hashBlock);\n-    return db.WriteBatch(batch);\n-}\n-\n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n     LogPrint(\"coindb\", \"Committing %u changed transactions to coin database...\\n\", (unsigned int)mapCoins.size());\n "
      },
      {
        "sha": "8f2bd9af4d15f2e1b5cb7590d52d0c8db32af903",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9d1a81ce76737a73c9706e074a4fe8440c8277e/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "patch": "@@ -33,10 +33,8 @@ class CCoinsViewDB : public CCoinsView\n     CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool SetCoins(const uint256 &txid, const CCoins &coins);\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n-    bool SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n     bool GetStats(CCoinsStats &stats) const;\n };"
      }
    ]
  },
  {
    "sha": "058b08c147a6d56b57221faa5b6fcdb83b4140b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNThiMDhjMTQ3YTZkNTZiNTcyMjFmYWE1YjZmY2RiODNiNDE0MGIy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-03T07:37:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-23T20:29:43Z"
      },
      "message": "Do not keep fully spent but unwritten CCoins entries cached.\n\nInstead of storing CCoins entries directly in CCoinsMap, store a CCoinsCacheEntry\nwhich additionally keeps track of whether a particular entry is:\n* dirty: potentially different from its parent view.\n* fresh: the parent view is known to not have a non-pruned version.\n\nThis allows us to skip non-dirty cache entries when pushing batches of changes up,\nand to remove CCoins entries about transactions that are fully spent before the\nparent cache learns about them.",
      "tree": {
        "sha": "c8a44779f36d1c2b7a0fe41287eeddecb4aa4e77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8a44779f36d1c2b7a0fe41287eeddecb4aa4e77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/058b08c147a6d56b57221faa5b6fcdb83b4140b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/058b08c147a6d56b57221faa5b6fcdb83b4140b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/058b08c147a6d56b57221faa5b6fcdb83b4140b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/058b08c147a6d56b57221faa5b6fcdb83b4140b2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9d1a81ce76737a73c9706e074a4fe8440c8277e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9d1a81ce76737a73c9706e074a4fe8440c8277e"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 88,
      "deletions": 31
    },
    "files": [
      {
        "sha": "9d60089bf5e57a0483212c58bfa22f9ac756a4e2",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 23,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=058b08c147a6d56b57221faa5b6fcdb83b4140b2",
        "patch": "@@ -71,18 +71,6 @@ CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hasModifier(false), hashBlock(0) { }\n \n-bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    if (cacheCoins.count(txid)) {\n-        coins = cacheCoins[txid];\n-        return true;\n-    }\n-    if (base->GetCoins(txid, coins)) {\n-        cacheCoins[txid] = coins;\n-        return true;\n-    }\n-    return false;\n-}\n-\n CCoinsViewCache::~CCoinsViewCache()\n {\n     assert(!hasModifier);\n@@ -93,21 +81,43 @@ CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const\n     if (it != cacheCoins.end())\n         return it;\n     CCoins tmp;\n-    if (!base->GetCoins(txid,tmp))\n+    if (!base->GetCoins(txid, tmp))\n         return cacheCoins.end();\n-    CCoinsMap::iterator ret = cacheCoins.insert(it, std::make_pair(txid, CCoins()));\n-    tmp.swap(ret->second);\n+    CCoinsMap::iterator ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry())).first;\n+    tmp.swap(ret->second.coins);\n+    if (ret->second.coins.IsPruned()) {\n+        // The parent only has an empty entry for this txid; we can consider our\n+        // version as fresh.\n+        ret->second.flags = CCoinsCacheEntry::FRESH;\n+    }\n     return ret;\n }\n \n+bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n+    CCoinsMap::const_iterator it = FetchCoins(txid);\n+    if (it != cacheCoins.end()) {\n+        coins = it->second.coins;\n+        return true;\n+    }\n+    return false;\n+}\n+\n CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n     assert(!hasModifier);\n     hasModifier = true;\n-    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoins()));\n+    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n     if (ret.second) {\n-        if (!base->GetCoins(txid, ret.first->second))\n-            ret.first->second.Clear();\n+        if (!base->GetCoins(txid, ret.first->second.coins)) {\n+            // The parent view does not have this entry; mark it as fresh.\n+            ret.first->second.coins.Clear();\n+            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+        } else if (ret.first->second.coins.IsPruned()) {\n+            // The parent view only has a pruned entry for this; mark it as fresh.\n+            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+        }\n     }\n+    // Assume that whenever ModifyCoins is called, the entry will be modified.\n+    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n     return CCoinsModifier(*this, ret.first);\n }\n \n@@ -116,7 +126,7 @@ const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n     if (it == cacheCoins.end()) {\n         return NULL;\n     } else {\n-        return &it->second;\n+        return &it->second.coins;\n     }\n }\n \n@@ -126,7 +136,7 @@ bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n     // as we only care about the case where an transaction was replaced entirely\n     // in a reorganization (which wipes vout entirely, as opposed to spending\n     // which just cleans individual outputs).\n-    return (it != cacheCoins.end() && !it->second.vout.empty());\n+    return (it != cacheCoins.end() && !it->second.coins.vout.empty());\n }\n \n uint256 CCoinsViewCache::GetBestBlock() const {\n@@ -142,7 +152,32 @@ void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n     assert(!hasModifier);\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n-        cacheCoins[it->first].swap(it->second);\n+        if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization).\n+            CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n+            if (itUs == cacheCoins.end()) {\n+                if (!it->second.coins.IsPruned()) {\n+                    // The parent cache does not have an entry, while the child\n+                    // cache does have (a non-pruned) one. Move the data up, and\n+                    // mark it as fresh (if the grandparent did have it, we\n+                    // would have pulled it in at first GetCoins).\n+                    assert(it->second.flags & CCoinsCacheEntry::FRESH);\n+                    CCoinsCacheEntry& entry = cacheCoins[it->first];\n+                    entry.coins.swap(it->second.coins);\n+                    entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n+                }\n+            } else {\n+                if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n+                    // The grandparent does not have an entry, and the child is\n+                    // modified and being pruned. This means we can just delete\n+                    // it from the parent.\n+                    cacheCoins.erase(itUs);\n+                } else {\n+                    // A normal modification.\n+                    itUs->second.coins.swap(it->second.coins);\n+                    itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n+                }\n+            }\n+        }\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n     }\n@@ -212,8 +247,12 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n \n CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_) : cache(cache_), it(it_) {}\n \n-CCoinsModifier::~CCoinsModifier() {\n+CCoinsModifier::~CCoinsModifier()\n+{\n     assert(cache.hasModifier);\n     cache.hasModifier = false;\n-    it->second.Cleanup();\n+    it->second.coins.Cleanup();\n+    if ((it->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n+        cache.cacheCoins.erase(it);\n+    }\n }"
      },
      {
        "sha": "71aea79adcf9f67061cecf4426400dfb6e2b81cb",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 16,
        "deletions": 3,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=058b08c147a6d56b57221faa5b6fcdb83b4140b2",
        "patch": "@@ -271,7 +271,20 @@ class CCoinsKeyHasher\n     }\n };\n \n-typedef boost::unordered_map<uint256, CCoins, CCoinsKeyHasher> CCoinsMap;\n+struct CCoinsCacheEntry\n+{\n+    CCoins coins; // The actual cached data.\n+    unsigned char flags;\n+\n+    enum Flags {\n+        DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n+        FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n+    };\n+\n+    CCoinsCacheEntry() : coins(), flags(0) {}\n+};\n+\n+typedef boost::unordered_map<uint256, CCoinsCacheEntry, CCoinsKeyHasher> CCoinsMap;\n \n struct CCoinsStats\n {\n@@ -343,8 +356,8 @@ class CCoinsModifier\n     CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_);\n \n public:\n-    CCoins* operator->() { return &it->second; }\n-    CCoins& operator*() { return it->second; }\n+    CCoins* operator->() { return &it->second.coins; }\n+    CCoins& operator*() { return it->second.coins; }\n     ~CCoinsModifier();\n     friend class CCoinsViewCache;\n };"
      },
      {
        "sha": "fbe63411d767588639f0bdb6ce82858cb995be1c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=058b08c147a6d56b57221faa5b6fcdb83b4140b2",
        "patch": "@@ -1797,10 +1797,10 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     nTimeBestReceived = GetTime();\n     mempool.AddTransactionsUpdated(1);\n \n-    LogPrintf(\"UpdateTip: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f\\n\",\n+    LogPrintf(\"UpdateTip: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f  cache=%u\\n\",\n       chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n-      Checkpoints::GuessVerificationProgress(chainActive.Tip()));\n+      Checkpoints::GuessVerificationProgress(chainActive.Tip()), (unsigned int)pcoinsTip->GetCacheSize());\n \n     cvBlockChange.notify_all();\n "
      },
      {
        "sha": "89830ced736dfbaea69443cffd7fc7abd76cf2d8",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/058b08c147a6d56b57221faa5b6fcdb83b4140b2/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=058b08c147a6d56b57221faa5b6fcdb83b4140b2",
        "patch": "@@ -45,17 +45,22 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n }\n \n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    LogPrint(\"coindb\", \"Committing %u changed transactions to coin database...\\n\", (unsigned int)mapCoins.size());\n-\n     CLevelDBBatch batch;\n+    size_t count = 0;\n+    size_t changed = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n-        BatchWriteCoins(batch, it->first, it->second);\n+        if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n+            BatchWriteCoins(batch, it->first, it->second.coins);\n+            changed++;\n+        }\n+        count++;\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n     }\n     if (hashBlock != uint256(0))\n         BatchWriteHashBestChain(batch, hashBlock);\n \n+    LogPrint(\"coindb\", \"Committing %u changed transactions (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n     return db.WriteBatch(batch);\n }\n "
      }
    ]
  },
  {
    "sha": "ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDI3ZTUzYzliZTNjMmUxOTRiM2U3Y2ZmODU5MzM1MzFhZWY0Y2M4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-16T23:27:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-23T20:29:45Z"
      },
      "message": "Add coins_tests with a large randomized CCoinViewCache test.",
      "tree": {
        "sha": "11ca83b1f338d38c5e4f91102d1edc5e40c988fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11ca83b1f338d38c5e4f91102d1edc5e40c988fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed27e53c9be3c2e194b3e7cff85933531aef4cc8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "058b08c147a6d56b57221faa5b6fcdb83b4140b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/058b08c147a6d56b57221faa5b6fcdb83b4140b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/058b08c147a6d56b57221faa5b6fcdb83b4140b2"
      }
    ],
    "stats": {
      "total": 179,
      "additions": 179,
      "deletions": 0
    },
    "files": [
      {
        "sha": "99ac09e1a4741dbc36d0d30f8a7bcf71802e76a0",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed27e53c9be3c2e194b3e7cff85933531aef4cc8/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed27e53c9be3c2e194b3e7cff85933531aef4cc8/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
        "patch": "@@ -44,6 +44,7 @@ BITCOIN_TESTS =\\\n   test/checkblock_tests.cpp \\\n   test/Checkpoints_tests.cpp \\\n   test/compress_tests.cpp \\\n+  test/coins_tests.cpp \\\n   test/crypto_tests.cpp \\\n   test/DoS_tests.cpp \\\n   test/getarg_tests.cpp \\"
      },
      {
        "sha": "214aaff900d5081b5eb84c5467b02dbb7b391b32",
        "filename": "src/test/coins_tests.cpp",
        "status": "added",
        "additions": 178,
        "deletions": 0,
        "changes": 178,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed27e53c9be3c2e194b3e7cff85933531aef4cc8/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed27e53c9be3c2e194b3e7cff85933531aef4cc8/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
        "patch": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coins.h\"\n+#include \"random.h\"\n+#include \"uint256.h\"\n+\n+#include <vector>\n+#include <map>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+namespace\n+{\n+class CCoinsViewTest : public CCoinsView\n+{\n+    uint256 hashBestBlock_;\n+    std::map<uint256, CCoins> map_;\n+\n+public:\n+    bool GetCoins(const uint256& txid, CCoins& coins) const\n+    {\n+        std::map<uint256, CCoins>::const_iterator it = map_.find(txid);\n+        if (it == map_.end()) {\n+            return false;\n+        }\n+        coins = it->second;\n+        if (coins.IsPruned() && insecure_rand() % 2 == 0) {\n+            // Randomly return false in case of an empty entry.\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    bool HaveCoins(const uint256& txid) const\n+    {\n+        CCoins coins;\n+        return GetCoins(txid, coins);\n+    }\n+\n+    uint256 GetBestBlock() const { return hashBestBlock_; }\n+\n+    bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock)\n+    {\n+        for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); ) {\n+            map_[it->first] = it->second.coins;\n+            if (it->second.coins.IsPruned() && insecure_rand() % 3 == 0) {\n+                // Randomly delete empty entries on write.\n+                map_.erase(it->first);\n+            }\n+            mapCoins.erase(it++);\n+        }\n+        mapCoins.clear();\n+        hashBestBlock_ = hashBlock;\n+        return true;\n+    }\n+\n+    bool GetStats(CCoinsStats& stats) const { return false; }\n+};\n+}\n+\n+BOOST_AUTO_TEST_SUITE(coins_tests)\n+\n+static const unsigned int NUM_SIMULATION_ITERATIONS = 40000;\n+\n+// This is a large randomized insert/remove simulation test on a variable-size\n+// stack of caches on top of CCoinsViewTest.\n+//\n+// It will randomly create/update/delete CCoins entries to a tip of caches, with\n+// txids picked from a limited list of random 256-bit hashes. Occasionally, a\n+// new tip is added to the stack of caches, or the tip is flushed and removed.\n+//\n+// During the process, booleans are kept to make sure that the randomized\n+// operation hits all branches.\n+BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n+{\n+    // Various coverage trackers.\n+    bool removed_all_caches = false;\n+    bool reached_4_caches = false;\n+    bool added_an_entry = false;\n+    bool removed_an_entry = false;\n+    bool updated_an_entry = false;\n+    bool found_an_entry = false;\n+    bool missed_an_entry = false;\n+\n+    // A simple map to track what we expect the cache stack to represent.\n+    std::map<uint256, CCoins> result;\n+\n+    // The cache stack.\n+    CCoinsViewTest base; // A CCoinsViewTest at the bottom.\n+    std::vector<CCoinsViewCache*> stack; // A stack of CCoinsViewCaches on top.\n+    stack.push_back(new CCoinsViewCache(base, false)); // Start with one cache.\n+\n+    // Use a limited set of random transaction ids, so we do test overwriting entries.\n+    std::vector<uint256> txids;\n+    txids.resize(NUM_SIMULATION_ITERATIONS / 8);\n+    for (unsigned int i = 0; i < txids.size(); i++) {\n+        txids[i] = GetRandHash();\n+    }\n+\n+    for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n+        // Do a random modification.\n+        {\n+            uint256 txid = txids[insecure_rand() % txids.size()]; // txid we're going to modify in this iteration.\n+            CCoins& coins = result[txid];\n+            CCoinsModifier entry = stack.back()->ModifyCoins(txid);\n+            BOOST_CHECK(coins == *entry);\n+            if (insecure_rand() % 5 == 0 || coins.IsPruned()) {\n+                if (coins.IsPruned()) {\n+                    added_an_entry = true;\n+                } else {\n+                    updated_an_entry = true;\n+                }\n+                coins.nVersion = insecure_rand();\n+                coins.vout.resize(1);\n+                coins.vout[0].nValue = insecure_rand();\n+                *entry = coins;\n+            } else {\n+                coins.Clear();\n+                entry->Clear();\n+                removed_an_entry = true;\n+            }\n+        }\n+\n+        // Once every 1000 iterations and at the end, verify the full cache.\n+        if (insecure_rand() % 1000 == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n+            for (std::map<uint256, CCoins>::iterator it = result.begin(); it != result.end(); it++) {\n+                const CCoins* coins = stack.back()->AccessCoins(it->first);\n+                if (coins) {\n+                    BOOST_CHECK(*coins == it->second);\n+                    found_an_entry = true;\n+                } else {\n+                    BOOST_CHECK(it->second.IsPruned());\n+                    missed_an_entry = true;\n+                }\n+            }\n+        }\n+\n+        if (insecure_rand() % 100 == 0) {\n+            // Every 100 iterations, change the cache stack.\n+            if (stack.size() > 0 && insecure_rand() % 2 == 0) {\n+                stack.back()->Flush();\n+                delete stack.back();\n+                stack.pop_back();\n+            }\n+            if (stack.size() == 0 || (stack.size() < 4 && insecure_rand() % 2)) {\n+                CCoinsView* tip = &base;\n+                if (stack.size() > 0) {\n+                    tip = stack.back();\n+                } else {\n+                    removed_all_caches = true;\n+                }\n+                stack.push_back(new CCoinsViewCache(*tip, false));\n+                if (stack.size() == 4) {\n+                    reached_4_caches = true;\n+                }\n+            }\n+        }\n+    }\n+\n+    // Clean up the stack.\n+    while (stack.size() > 0) {\n+        delete stack.back();\n+        stack.pop_back();\n+    }\n+\n+    // Verify coverage.\n+    BOOST_CHECK(removed_all_caches);\n+    BOOST_CHECK(reached_4_caches);\n+    BOOST_CHECK(added_an_entry);\n+    BOOST_CHECK(removed_an_entry);\n+    BOOST_CHECK(updated_an_entry);\n+    BOOST_CHECK(found_an_entry);\n+    BOOST_CHECK(missed_an_entry);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "cda45b5131c3546b870d8cea3191fb29df182b27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGE0NWI1MTMxYzM1NDZiODcwZDhjZWEzMTkxZmIyOWRmMTgyYjI3",
    "commit": {
      "author": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-23T22:33:16Z"
      },
      "committer": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-23T22:33:16Z"
      },
      "message": "Reinitializing list's begin iterator after few elements were erased from the head",
      "tree": {
        "sha": "5989123f3da969dca80f1e2ab271f9a9a6f27dbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5989123f3da969dca80f1e2ab271f9a9a6f27dbe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cda45b5131c3546b870d8cea3191fb29df182b27",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda45b5131c3546b870d8cea3191fb29df182b27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cda45b5131c3546b870d8cea3191fb29df182b27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda45b5131c3546b870d8cea3191fb29df182b27/comments",
    "author": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b5336eb9977f400128b027da00e8e9605b09923b",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cda45b5131c3546b870d8cea3191fb29df182b27/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cda45b5131c3546b870d8cea3191fb29df182b27/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=cda45b5131c3546b870d8cea3191fb29df182b27",
        "patch": "@@ -544,7 +544,7 @@ class CScript : public std::vector<unsigned char>\n         {\n             while (end() - pc >= (long)b.size() && memcmp(&pc[0], &b[0], b.size()) == 0)\n             {\n-                erase(pc, pc + b.size());\n+                pc = erase(pc, pc + b.size());\n                 ++nFound;\n             }\n         }"
      }
    ]
  },
  {
    "sha": "7c70438dc67547e83953ba0343a071fae304ce65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzcwNDM4ZGM2NzU0N2U4Mzk1M2JhMDM0M2EwNzFmYWUzMDRjZTY1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-24T01:19:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-24T01:19:04Z"
      },
      "message": "Get rid of the dummy CCoinsViewCache constructor arg",
      "tree": {
        "sha": "88683dd773ad889a630e5262b5051e85262c6bdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88683dd773ad889a630e5262b5051e85262c6bdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c70438dc67547e83953ba0343a071fae304ce65",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c70438dc67547e83953ba0343a071fae304ce65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c70438dc67547e83953ba0343a071fae304ce65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c70438dc67547e83953ba0343a071fae304ce65/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed27e53c9be3c2e194b3e7cff85933531aef4cc8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed27e53c9be3c2e194b3e7cff85933531aef4cc8"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 24,
      "deletions": 24
    },
    "files": [
      {
        "sha": "7ce80a04cbca89b091ce58916863ca778637cbdd",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -340,7 +340,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n     CMutableTransaction mergedTx(txVariants[0]);\n     bool fComplete = true;\n     CCoinsView viewDummy;\n-    CCoinsViewCache view(viewDummy);\n+    CCoinsViewCache view(&viewDummy);\n \n     if (!registers.count(\"privatekeys\"))\n         throw runtime_error(\"privatekeys register variable must be set.\");"
      },
      {
        "sha": "6b7ebf60783b9c237ef8863ad0685eead1919738",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -59,7 +59,7 @@ bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { ret\n bool CCoinsView::GetStats(CCoinsStats &stats) const { return false; }\n \n \n-CCoinsViewBacked::CCoinsViewBacked(CCoinsView &viewIn) : base(&viewIn) { }\n+CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }\n bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n@@ -69,7 +69,7 @@ bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStat\n \n CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hasModifier(false), hashBlock(0) { }\n+CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), hashBlock(0) { }\n \n CCoinsViewCache::~CCoinsViewCache()\n {"
      },
      {
        "sha": "4cb28e40c4f016d15422e7dc4cbfb83a4663b551",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -333,7 +333,7 @@ class CCoinsViewBacked : public CCoinsView\n     CCoinsView *base;\n \n public:\n-    CCoinsViewBacked(CCoinsView &viewIn);\n+    CCoinsViewBacked(CCoinsView *viewIn);\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n@@ -375,7 +375,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     mutable CCoinsMap cacheCoins;\n \n public:\n-    CCoinsViewCache(CCoinsView &baseIn, bool fDummy = false);\n+    CCoinsViewCache(CCoinsView *baseIn);\n     ~CCoinsViewCache();\n \n     // Standard CCoinsView methods"
      },
      {
        "sha": "787b850e74667da83b4277227c15df562bd0a3be",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -958,7 +958,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n                 pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n                 pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex);\n-                pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n+                pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n \n                 if (fReindex)\n                     pblocktree->WriteReindexing(true);"
      },
      {
        "sha": "0b3eaafcb1abcaca98e9dea05d63407d2aa58e66",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -896,12 +896,12 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n     {\n         CCoinsView dummy;\n-        CCoinsViewCache view(dummy);\n+        CCoinsViewCache view(&dummy);\n \n         int64_t nValueIn = 0;\n         {\n         LOCK(pool.cs);\n-        CCoinsViewMemPool viewMemPool(*pcoinsTip, pool);\n+        CCoinsViewMemPool viewMemPool(pcoinsTip, pool);\n         view.SetBackend(viewMemPool);\n \n         // do we already have it?\n@@ -1835,7 +1835,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n-        CCoinsViewCache view(*pcoinsTip, true);\n+        CCoinsViewCache view(pcoinsTip);\n         if (!DisconnectBlock(block, state, pindexDelete, view))\n             return error(\"DisconnectTip() : DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n         assert(view.Flush());\n@@ -1888,7 +1888,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     int64_t nTime3;\n     LogPrint(\"bench\", \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n     {\n-        CCoinsViewCache view(*pcoinsTip, true);\n+        CCoinsViewCache view(pcoinsTip);\n         CInv inv(MSG_BLOCK, pindexNew->GetBlockHash());\n         if (!ConnectBlock(*pblock, state, pindexNew, view)) {\n             if (state.IsInvalid())\n@@ -2936,7 +2936,7 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n         nCheckDepth = chainActive.Height();\n     nCheckLevel = std::max(0, std::min(4, nCheckLevel));\n     LogPrintf(\"Verifying last %i blocks at level %i\\n\", nCheckDepth, nCheckLevel);\n-    CCoinsViewCache coins(*coinsview, true);\n+    CCoinsViewCache coins(coinsview);\n     CBlockIndex* pindexState = chainActive.Tip();\n     CBlockIndex* pindexFailure = NULL;\n     int nGoodTransactions = 0;"
      },
      {
        "sha": "010ee844aff136a0f9d2043332bb6f7520096958",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -116,7 +116,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     {\n         LOCK2(cs_main, mempool.cs);\n         CBlockIndex* pindexPrev = chainActive.Tip();\n-        CCoinsViewCache view(*pcoinsTip, true);\n+        CCoinsViewCache view(pcoinsTip);\n \n         // Priority order to process transactions\n         list<COrphan> vOrphan; // list memory doesn't move\n@@ -316,7 +316,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         CBlockIndex indexDummy(*pblock);\n         indexDummy.pprev = pindexPrev;\n         indexDummy.nHeight = pindexPrev->nHeight + 1;\n-        CCoinsViewCache viewNew(*pcoinsTip, true);\n+        CCoinsViewCache viewNew(pcoinsTip);\n         CValidationState state;\n         if (!ConnectBlock(*pblock, state, &indexDummy, viewNew, true))\n             throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");"
      },
      {
        "sha": "24175215bf71e8e6cdb54b5a66d864c95f8945d5",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -381,7 +381,7 @@ Value gettxout(const Array& params, bool fHelp)\n     CCoins coins;\n     if (fMempool) {\n         LOCK(mempool.cs);\n-        CCoinsViewMemPool view(*pcoinsTip, mempool);\n+        CCoinsViewMemPool view(pcoinsTip, mempool);\n         if (!view.GetCoins(hash, coins))\n             return Value::null;\n         mempool.pruneSpent(hash, coins); // TODO: this should be done by the CCoinsViewMemPool"
      },
      {
        "sha": "a85a6e0ad0aa41d91b2c5f86506c3e937fdf626c",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -557,11 +557,11 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n-    CCoinsViewCache view(viewDummy);\n+    CCoinsViewCache view(&viewDummy);\n     {\n         LOCK(mempool.cs);\n         CCoinsViewCache &viewChain = *pcoinsTip;\n-        CCoinsViewMemPool viewMempool(viewChain, mempool);\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n         BOOST_FOREACH(const CTxIn& txin, mergedTx.vin) {"
      },
      {
        "sha": "3ecd301bc749c40f213543ab620c98e7eb89eba0",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -90,7 +90,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n     // The cache stack.\n     CCoinsViewTest base; // A CCoinsViewTest at the bottom.\n     std::vector<CCoinsViewCache*> stack; // A stack of CCoinsViewCaches on top.\n-    stack.push_back(new CCoinsViewCache(base, false)); // Start with one cache.\n+    stack.push_back(new CCoinsViewCache(&base)); // Start with one cache.\n \n     // Use a limited set of random transaction ids, so we do test overwriting entries.\n     std::vector<uint256> txids;\n@@ -151,7 +151,7 @@ BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n                 } else {\n                     removed_all_caches = true;\n                 }\n-                stack.push_back(new CCoinsViewCache(*tip, false));\n+                stack.push_back(new CCoinsViewCache(tip));\n                 if (stack.size() == 4) {\n                     reached_4_caches = true;\n                 }"
      },
      {
        "sha": "5d962ca3c116fd3fbcd7aaf9b8285bcd53c3256d",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -255,7 +255,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n {\n     LOCK(cs_main);\n     CCoinsView coinsDummy;\n-    CCoinsViewCache coins(coinsDummy);\n+    CCoinsViewCache coins(&coinsDummy);\n     CBasicKeyStore keystore;\n     CKey key[6];\n     vector<CPubKey> keys;"
      },
      {
        "sha": "04f9c708cb0ac17927ec2859dcba19c10d7c8665",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -41,7 +41,7 @@ struct TestingSetup {\n         mapArgs[\"-datadir\"] = pathTemp.string();\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n-        pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n+        pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n         InitBlockIndex();\n #ifdef ENABLE_WALLET\n         bool fFirstRun;"
      },
      {
        "sha": "68f3ebf342af970bb5c0a8aaf2402cd292c05fcb",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -260,7 +260,7 @@ BOOST_AUTO_TEST_CASE(test_Get)\n {\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n-    CCoinsViewCache coins(coinsDummy);\n+    CCoinsViewCache coins(&coinsDummy);\n     std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n \n     CMutableTransaction t1;\n@@ -295,7 +295,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     LOCK(cs_main);\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n-    CCoinsViewCache coins(coinsDummy);\n+    CCoinsViewCache coins(&coinsDummy);\n     std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n \n     CMutableTransaction t;"
      },
      {
        "sha": "bfa8dbb4653020a30c9466205379f85977e1d7ca",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -630,7 +630,7 @@ void CTxMemPool::ClearPrioritisation(const uint256 hash)\n }\n \n \n-CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView &baseIn, CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n+CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView *baseIn, CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never"
      },
      {
        "sha": "9e91e6d48ce93d43e09dec0b71d8c5d5eb980ad6",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c70438dc67547e83953ba0343a071fae304ce65/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c70438dc67547e83953ba0343a071fae304ce65/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=7c70438dc67547e83953ba0343a071fae304ce65",
        "patch": "@@ -144,7 +144,7 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n     CTxMemPool &mempool;\n \n public:\n-    CCoinsViewMemPool(CCoinsView &baseIn, CTxMemPool &mempoolIn);\n+    CCoinsViewMemPool(CCoinsView *baseIn, CTxMemPool &mempoolIn);\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n     bool HaveCoins(const uint256 &txid) const;\n };"
      }
    ]
  },
  {
    "sha": "584a358997e52a87e8c5402269c7fb3784ed2065",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODRhMzU4OTk3ZTUyYTg3ZThjNTQwMjI2OWM3ZmIzNzg0ZWQyMDY1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-15T22:30:05Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-24T17:17:02Z"
      },
      "message": "Do merkle root and txid duplicates check simultaneously\n\nMove the txid duplicates check into BuildMerkleTree, where it can be done\nmuch more efficiently (without needing to build a full txid set to detect\nduplicates).\n\nThe previous version (using the std::set<uint256> to detect duplicates) was\nalso slightly too weak. A block mined with actual duplicate transactions\n(which is invalid, due to the inputs of the duplicated transactions being\nseen as double spends) would trigger the duplicates logic, resulting in the\nblock not being stored on disk, and rerequested. This change fixes that by\nonly triggering in the case of duplicated transactions that can actually\nresult in an identical merkle root.",
      "tree": {
        "sha": "72cb1589072c23bded2737f1fdf9b9fb0c3e0680",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72cb1589072c23bded2737f1fdf9b9fb0c3e0680"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/584a358997e52a87e8c5402269c7fb3784ed2065",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/584a358997e52a87e8c5402269c7fb3784ed2065",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/584a358997e52a87e8c5402269c7fb3784ed2065",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/584a358997e52a87e8c5402269c7fb3784ed2065/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 57,
      "deletions": 17
    },
    "files": [
      {
        "sha": "85cca1ebf0aa0ad4f405f5be333f9c37550b39bf",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 8,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/584a358997e52a87e8c5402269c7fb3784ed2065/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/584a358997e52a87e8c5402269c7fb3784ed2065/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=584a358997e52a87e8c5402269c7fb3784ed2065",
        "patch": "@@ -224,29 +224,66 @@ uint256 CBlockHeader::GetHash() const\n     return Hash(BEGIN(nVersion), END(nNonce));\n }\n \n-uint256 CBlock::BuildMerkleTree() const\n+uint256 CBlock::BuildMerkleTree(bool* fMutated) const\n {\n-    // WARNING! If you're reading this because you're learning about crypto\n-    // and/or designing a new system that will use merkle trees, keep in mind\n-    // that the following merkle tree algorithm has a serious flaw related to\n-    // duplicate txids, resulting in a vulnerability. (CVE-2012-2459) Bitcoin\n-    // has since worked around the flaw, but for new applications you should\n-    // use something different; don't just copy-and-paste this code without\n-    // understanding the problem first.\n+    /* WARNING! If you're reading this because you're learning about crypto\n+       and/or designing a new system that will use merkle trees, keep in mind\n+       that the following merkle tree algorithm has a serious flaw related to\n+       duplicate txids, resulting in a vulnerability (CVE-2012-2459).\n+\n+       The reason is that if the number of hashes in the list at a given time\n+       is odd, the last one is duplicated before computing the next level (which\n+       is unusual in Merkle trees). This results in certain sequences of\n+       transactions leading to the same merkle root. For example, these two\n+       trees:\n+\n+                    A               A\n+                  /  \\            /   \\\n+                B     C         B       C\n+               / \\    |        / \\     / \\\n+              D   E   F       D   E   F   F\n+             / \\ / \\ / \\     / \\ / \\ / \\ / \\\n+             1 2 3 4 5 6     1 2 3 4 5 6 5 6\n+\n+       for transaction lists [1,2,3,4,5,6] and [1,2,3,4,5,6,5,6] (where 5 and\n+       6 are repeated) result in the same root hash A (because the hash of both\n+       of (F) and (F,F) is C).\n+\n+       The vulnerability results from being able to send a block with such a\n+       transaction list, with the same merkle root, and the same block hash as\n+       the original without duplication, resulting in failed validation. If the\n+       receiving node proceeds to mark that block as permanently invalid\n+       however, it will fail to accept further unmodified (and thus potentially\n+       valid) versions of the same block. We defend against this by detecting\n+       the case where we would hash two identical hashes at the end of the list\n+       together, and treating that identically to the block having an invalid\n+       merkle root. Assuming no double-SHA256 collisions, this will detect all\n+       known ways of changing the transactions without affecting the merkle\n+       root.\n+    */\n     vMerkleTree.clear();\n+    vMerkleTree.reserve(vtx.size() * 2 + 16); // Safe upper bound for the number of total nodes.\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n         vMerkleTree.push_back(tx.GetHash());\n     int j = 0;\n+    bool mutated = false;\n     for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n     {\n         for (int i = 0; i < nSize; i += 2)\n         {\n             int i2 = std::min(i+1, nSize-1);\n+            if (i2 == i + 1 && i2 + 1 == nSize && vMerkleTree[j+i] == vMerkleTree[j+i2]) {\n+                // Two identical hashes at the end of the list at a particular level.\n+                mutated = true;\n+            }\n             vMerkleTree.push_back(Hash(BEGIN(vMerkleTree[j+i]),  END(vMerkleTree[j+i]),\n                                        BEGIN(vMerkleTree[j+i2]), END(vMerkleTree[j+i2])));\n         }\n         j += nSize;\n     }\n+    if (fMutated) {\n+        *fMutated = mutated;\n+    }\n     return (vMerkleTree.empty() ? 0 : vMerkleTree.back());\n }\n "
      },
      {
        "sha": "de41b8621b78998f71cc69b822881456306ae0f5",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/584a358997e52a87e8c5402269c7fb3784ed2065/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/584a358997e52a87e8c5402269c7fb3784ed2065/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=584a358997e52a87e8c5402269c7fb3784ed2065",
        "patch": "@@ -528,7 +528,11 @@ class CBlock : public CBlockHeader\n         return block;\n     }\n \n-    uint256 BuildMerkleTree() const;\n+    // Build the in-memory merkle tree for this block and return the merkle root.\n+    // If non-NULL, *mutated is set to whether mutation was detected in the merkle\n+    // tree (a duplication of transactions in the block leading to an identical\n+    // merkle root).\n+    uint256 BuildMerkleTree(bool* mutated = NULL) const;\n \n     std::vector<uint256> GetMerkleBranch(int nIndex) const;\n     static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex);"
      },
      {
        "sha": "d79644e638f14dc0c7bca8b02b26beb781c73552",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/584a358997e52a87e8c5402269c7fb3784ed2065/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/584a358997e52a87e8c5402269c7fb3784ed2065/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=584a358997e52a87e8c5402269c7fb3784ed2065",
        "patch": "@@ -2289,13 +2289,12 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n         if (!CheckTransaction(tx, state))\n             return error(\"CheckBlock() : CheckTransaction failed\");\n \n-    // Check for duplicate txids. This is caught by ConnectInputs(),\n-    // but catching it earlier avoids a potential DoS attack:\n-    set<uint256> uniqueTx;\n-    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        uniqueTx.insert(tx.GetHash());\n-    }\n-    if (uniqueTx.size() != block.vtx.size())\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    bool mutated;\n+    uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n+    if (mutated)\n         return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"),\n                          REJECT_INVALID, \"bad-txns-duplicate\", true);\n \n@@ -2309,7 +2308,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n                          REJECT_INVALID, \"bad-blk-sigops\", true);\n \n     // Check merkle root\n-    if (fCheckMerkleRoot && block.hashMerkleRoot != block.BuildMerkleTree())\n+    if (fCheckMerkleRoot && block.hashMerkleRoot != hashMerkleRoot2)\n         return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"),\n                          REJECT_INVALID, \"bad-txnmrklroot\", true);\n "
      }
    ]
  },
  {
    "sha": "b498a9493ce55d790307543685d8acc4676a4be6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDk4YTk0OTNjZTU1ZDc5MDMwNzU0MzY4NWQ4YWNjNDY3NmE0YmU2",
    "commit": {
      "author": {
        "name": "Eric Shaw",
        "email": "ericshaw.linux@gmail.com",
        "date": "2014-09-24T19:13:59Z"
      },
      "committer": {
        "name": "Eric Shaw",
        "email": "ericshaw.linux@gmail.com",
        "date": "2014-09-24T19:13:59Z"
      },
      "message": "Fixed typo in README.md file. \"-regest\" \"-regtest\"\n\nThere was a typo in the README.md file. It previously read \"-regest\" instead of the proper \"-regtest\" and it has been updated to the proper reading.",
      "tree": {
        "sha": "feb93cbed8a0220ba118f3f009acc40ba29eac85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/feb93cbed8a0220ba118f3f009acc40ba29eac85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b498a9493ce55d790307543685d8acc4676a4be6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b498a9493ce55d790307543685d8acc4676a4be6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b498a9493ce55d790307543685d8acc4676a4be6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b498a9493ce55d790307543685d8acc4676a4be6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cf650fe5433349829ef59748b1c42ced241a5327",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b498a9493ce55d790307543685d8acc4676a4be6/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b498a9493ce55d790307543685d8acc4676a4be6/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=b498a9493ce55d790307543685d8acc4676a4be6",
        "patch": "@@ -112,7 +112,7 @@ are testing multi-machine code that needs to operate across the internet.\n \n If you are testing something that can run on one machine, run with the -regtest option.\n In regression test mode, blocks can be created on-demand; see qa/rpc-tests/ for tests\n-that run in -regest mode.\n+that run in -regtest mode.\n \n **DEBUG_LOCKORDER**\n "
      }
    ]
  },
  {
    "sha": "ea69592a2f261dba37d551c0ac77e93ce00b37c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTY5NTkyYTJmMjYxZGJhMzdkNTUxYzBhYzc3ZTkzY2UwMGIzN2Mz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-24T19:15:53Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-24T19:15:58Z"
      },
      "message": "Merge pull request #4974\n\nb498a94 Fixed typo in README.md file. \"-regest\" \"-regtest\" (Eric Shaw)",
      "tree": {
        "sha": "feb93cbed8a0220ba118f3f009acc40ba29eac85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/feb93cbed8a0220ba118f3f009acc40ba29eac85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea69592a2f261dba37d551c0ac77e93ce00b37c3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUIxhuAAoJEFeJbS/48LZXgPcMAJ1TqdkvE948es+z551tQ2r5\nJylu7sbYFJlXUXVk33jkq6TDl6jpC8TBD4ryxQG7ynmvOrpE2mXAXuRw31f8vlcn\nYMyFrlddqXNI2ORloz+gYMXXjUc0a6woVTgJj3UUeJx3qF+qmjXJ+vEi7tT2L2ik\nb4gBdSOwQFPro32GAEbiEhbNbKaOrNXW9id0vrMN5qGOKWLUI+h8F00fphFecj4T\nThKOQ6/JpjKTZXIf16CvgE+63ekbNFl4mJgM7B28l6Skdn1ZAuMGf+j6v9dkuBKR\nUu+gjwmwP9eD5vM3p7WsHCqiuuXFaGp/rza39pdci2BOG4AU5g69pjj2IR6rr9Td\nzqWKl/60adJHD8K53PC+51uJZw/yQYQbFs4tUtTSYcWSTmztcslRCO4kXaw9KOXV\nYjU8I6RjIEjA3MZcLYak3qUQ2MCdj6jQ9So+pk6V5Lil+1SLcIImd+VbbvlacMpY\nfNfp4gonem7NJy4lGW4WtyxH7emj6cvJ16znYVQImQ==\n=IY+H\n-----END PGP SIGNATURE-----",
        "payload": "tree feb93cbed8a0220ba118f3f009acc40ba29eac85\nparent 7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5\nparent b498a9493ce55d790307543685d8acc4676a4be6\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1411586153 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1411586158 +0200\n\nMerge pull request #4974\n\nb498a94 Fixed typo in README.md file. \"-regest\" \"-regtest\" (Eric Shaw)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea69592a2f261dba37d551c0ac77e93ce00b37c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea69592a2f261dba37d551c0ac77e93ce00b37c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea69592a2f261dba37d551c0ac77e93ce00b37c3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5"
      },
      {
        "sha": "b498a9493ce55d790307543685d8acc4676a4be6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b498a9493ce55d790307543685d8acc4676a4be6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b498a9493ce55d790307543685d8acc4676a4be6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cf650fe5433349829ef59748b1c42ced241a5327",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea69592a2f261dba37d551c0ac77e93ce00b37c3/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea69592a2f261dba37d551c0ac77e93ce00b37c3/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=ea69592a2f261dba37d551c0ac77e93ce00b37c3",
        "patch": "@@ -112,7 +112,7 @@ are testing multi-machine code that needs to operate across the internet.\n \n If you are testing something that can run on one machine, run with the -regtest option.\n In regression test mode, blocks can be created on-demand; see qa/rpc-tests/ for tests\n-that run in -regest mode.\n+that run in -regtest mode.\n \n **DEBUG_LOCKORDER**\n "
      }
    ]
  },
  {
    "sha": "cf42c36e9963f9cf13704d8d74a9546f0db33d40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjQyYzM2ZTk5NjNmOWNmMTM3MDRkOGQ3NGE5NTQ2ZjBkYjMzZDQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-25T06:23:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-25T06:23:32Z"
      },
      "message": "Apply clang-format on crypto/* and compat/*",
      "tree": {
        "sha": "858c8076671647abe299b1ef0125b7476006f726",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/858c8076671647abe299b1ef0125b7476006f726"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf42c36e9963f9cf13704d8d74a9546f0db33d40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf42c36e9963f9cf13704d8d74a9546f0db33d40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf42c36e9963f9cf13704d8d74a9546f0db33d40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf42c36e9963f9cf13704d8d74a9546f0db33d40/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea69592a2f261dba37d551c0ac77e93ce00b37c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea69592a2f261dba37d551c0ac77e93ce00b37c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea69592a2f261dba37d551c0ac77e93ce00b37c3"
      }
    ],
    "stats": {
      "total": 1047,
      "additions": 589,
      "deletions": 458
    },
    "files": [
      {
        "sha": "94c79e4b9713c0014654dff91256977a2e1c7344",
        "filename": "src/compat/glibc_compat.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibc_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibc_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_compat.cpp?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -18,11 +18,11 @@ extern \"C\" void* memcpy(void* a, const void* b, size_t c)\n     return memmove(a, b, c);\n }\n \n-extern \"C\" void __chk_fail (void) __attribute__((__noreturn__));\n+extern \"C\" void __chk_fail(void) __attribute__((__noreturn__));\n extern \"C\" FDELT_TYPE __fdelt_warn(FDELT_TYPE a)\n {\n     if (a >= FD_SETSIZE)\n-        __chk_fail ();\n+        __chk_fail();\n     return a / __NFDBITS;\n }\n extern \"C\" FDELT_TYPE __fdelt_chk(FDELT_TYPE) __attribute__((weak, alias(\"__fdelt_warn\")));"
      },
      {
        "sha": "acc7809d773d3702e2894ebaded2022255832627",
        "filename": "src/compat/glibc_sanity.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibc_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibc_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity.cpp?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -14,10 +14,11 @@\n extern \"C\" void* memcpy(void* a, const void* b, size_t c);\n void* memcpy_int(void* a, const void* b, size_t c)\n {\n-    return memcpy(a,b,c);\n+    return memcpy(a, b, c);\n }\n \n-namespace {\n+namespace\n+{\n // trigger: Use the memcpy_int wrapper which calls our internal memcpy.\n //   A direct call to memcpy may be optimized away by the compiler.\n // test: Fill an array with a sequence of integers. memcpy to a new empty array.\n@@ -31,11 +32,10 @@ bool sanity_test_memcpy()\n     for (unsigned int i = 0; i != T; ++i)\n         memcpy_test[i] = i;\n \n-    memcpy_int(memcpy_verify,memcpy_test,sizeof(memcpy_test));\n+    memcpy_int(memcpy_verify, memcpy_test, sizeof(memcpy_test));\n \n-    for (unsigned int i = 0; i != T; ++i)\n-    {\n-        if(memcpy_verify[i] != i)\n+    for (unsigned int i = 0; i != T; ++i) {\n+        if (memcpy_verify[i] != i)\n             return false;\n     }\n     return true;\n@@ -51,7 +51,7 @@ bool sanity_test_fdelt()\n     fd_set fds;\n     FD_ZERO(&fds);\n     FD_SET(0, &fds);\n-    return FD_ISSET(0,&fds);\n+    return FD_ISSET(0, &fds);\n }\n #endif\n "
      },
      {
        "sha": "41d8458cb272892343f5a9caba50e79b23641d6c",
        "filename": "src/compat/glibcxx_compat.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibcxx_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibcxx_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_compat.cpp?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -11,8 +11,8 @@\n #define _GLIBCXX_USE_NOEXCEPT throw()\n #endif\n \n-namespace std {\n-\n+namespace std\n+{\n const char* bad_exception::what() const throw()\n {\n     return \"std::bad_exception\";\n@@ -30,9 +30,8 @@ const char* bad_alloc::what() const throw()\n \n namespace __detail\n {\n-struct _List_node_base\n-{\n-    void _M_hook(std::__detail::_List_node_base* const __position) throw () __attribute__((used))\n+struct _List_node_base {\n+    void _M_hook(std::__detail::_List_node_base* const __position) throw() __attribute__((used))\n     {\n         _M_next = __position;\n         _M_prev = __position->_M_prev;\n@@ -62,9 +61,9 @@ template ostream& __ostream_insert(ostream&, const char*, streamsize);\n template istream& istream::_M_extract(long&);\n template istream& istream::_M_extract(unsigned short&);\n \n-out_of_range::~out_of_range() _GLIBCXX_USE_NOEXCEPT { }\n+out_of_range::~out_of_range() _GLIBCXX_USE_NOEXCEPT {}\n \n-length_error::~length_error() _GLIBCXX_USE_NOEXCEPT { }\n+length_error::~length_error() _GLIBCXX_USE_NOEXCEPT {}\n \n // Used with permission.\n // See: https://github.com/madlib/madlib/commit/c3db418c0d34d6813608f2137fef1012ce03043d\n@@ -85,11 +84,11 @@ void ctype<char>::_M_widen_init() const\n         }\n }\n \n-void  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__));\n-void  __throw_out_of_range_fmt(const char* err, ...)\n+void __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__));\n+void __throw_out_of_range_fmt(const char* err, ...)\n {\n     // Safe and over-simplified version. Ignore the format and print it as-is.\n     __throw_out_of_range(err);\n }\n \n-}// namespace std\n+} // namespace std"
      },
      {
        "sha": "9b1fefd448188b20519321c4dc63373abdc78f02",
        "filename": "src/compat/glibcxx_sanity.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 14,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibcxx_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/compat/glibcxx_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_sanity.cpp?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -6,15 +6,15 @@\n #include <locale>\n #include <stdexcept>\n \n-namespace{\n-\n+namespace\n+{\n // trigger: use ctype<char>::widen to trigger ctype<char>::_M_widen_init().\n // test: convert a char from narrow to wide and back. Verify that the result\n //   matches the original.\n bool sanity_test_widen(char testchar)\n {\n-    const std::ctype<char>& test(std::use_facet< std::ctype<char> >(std::locale()));\n-    return test.narrow(test.widen(testchar),'b') == testchar;\n+    const std::ctype<char>& test(std::use_facet<std::ctype<char> >(std::locale()));\n+    return test.narrow(test.widen(testchar), 'b') == testchar;\n }\n \n // trigger: use list::push_back and list::pop_back to trigger _M_hook and\n@@ -25,14 +25,13 @@ bool sanity_test_list(unsigned int size)\n {\n     std::list<unsigned int> test;\n     for (unsigned int i = 0; i != size; ++i)\n-        test.push_back(i+1);\n+        test.push_back(i + 1);\n \n     if (test.size() != size)\n         return false;\n \n-    while (!test.empty())\n-    {\n-        if(test.back() != test.size())\n+    while (!test.empty()) {\n+        if (test.back() != test.size())\n             return false;\n         test.pop_back();\n     }\n@@ -47,15 +46,12 @@ bool sanity_test_list(unsigned int size)\n bool sanity_test_range_fmt()\n {\n     std::string test;\n-    try\n-    {\n+    try {\n         test.at(1);\n-    }\n-    catch (const std::out_of_range&)\n-    {\n+    } catch (const std::out_of_range&) {\n         return true;\n+    } catch (...) {\n     }\n-    catch (...){}\n     return false;\n }\n "
      },
      {
        "sha": "7c3d0a135b19a60cc4f96717c8ab1fe475f1270e",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 40,
        "deletions": 15,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -13,7 +13,8 @@\n #include <endian.h>\n #endif\n \n-uint32_t static inline ReadLE32(const unsigned char *ptr) {\n+uint32_t static inline ReadLE32(const unsigned char* ptr)\n+{\n #if HAVE_DECL_LE32TOH == 1\n     return le32toh(*((uint32_t*)ptr));\n #elif !defined(WORDS_BIGENDIAN)\n@@ -23,8 +24,8 @@ uint32_t static inline ReadLE32(const unsigned char *ptr) {\n #endif\n }\n \n-uint64_t static inline ReadLE64(const unsigned char *ptr) {\n-\n+uint64_t static inline ReadLE64(const unsigned char* ptr)\n+{\n #if HAVE_DECL_LE64TOH == 1\n     return le64toh(*((uint64_t*)ptr));\n #elif !defined(WORDS_BIGENDIAN)\n@@ -35,36 +36,49 @@ uint64_t static inline ReadLE64(const unsigned char *ptr) {\n #endif\n }\n \n-void static inline WriteLE32(unsigned char *ptr, uint32_t x) {\n+void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n+{\n #if HAVE_DECL_HTOLE32 == 1\n     *((uint32_t*)ptr) = htole32(x);\n #elif !defined(WORDS_BIGENDIAN)\n     *((uint32_t*)ptr) = x;\n #else\n-    ptr[3] = x >> 24; ptr[2] = x >> 16; ptr[1] = x >> 8; ptr[0] = x;\n+    ptr[3] = x >> 24;\n+    ptr[2] = x >> 16;\n+    ptr[1] = x >> 8;\n+    ptr[0] = x;\n #endif\n }\n \n-void static inline WriteLE64(unsigned char *ptr, uint64_t x) {\n+void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n+{\n #if HAVE_DECL_HTOLE64 == 1\n     *((uint64_t*)ptr) = htole64(x);\n #elif !defined(WORDS_BIGENDIAN)\n     *((uint64_t*)ptr) = x;\n #else\n-    ptr[7] = x >> 56; ptr[6] = x >> 48; ptr[5] = x >> 40; ptr[4] = x >> 32;\n-    ptr[3] = x >> 24; ptr[2] = x >> 16; ptr[1] = x >> 8; ptr[0] = x;\n+    ptr[7] = x >> 56;\n+    ptr[6] = x >> 48;\n+    ptr[5] = x >> 40;\n+    ptr[4] = x >> 32;\n+    ptr[3] = x >> 24;\n+    ptr[2] = x >> 16;\n+    ptr[1] = x >> 8;\n+    ptr[0] = x;\n #endif\n }\n \n-uint32_t static inline ReadBE32(const unsigned char *ptr) {\n+uint32_t static inline ReadBE32(const unsigned char* ptr)\n+{\n #if HAVE_DECL_BE32TOH == 1\n     return be32toh(*((uint32_t*)ptr));\n #else\n     return ((uint32_t)ptr[0] << 24 | (uint32_t)ptr[1] << 16 | (uint32_t)ptr[2] << 8 | (uint32_t)ptr[3]);\n #endif\n }\n \n-uint64_t static inline ReadBE64(const unsigned char *ptr) {\n+uint64_t static inline ReadBE64(const unsigned char* ptr)\n+{\n #if HAVE_DECL_BE64TOH == 1\n     return be64toh(*((uint64_t*)ptr));\n #else\n@@ -73,20 +87,31 @@ uint64_t static inline ReadBE64(const unsigned char *ptr) {\n #endif\n }\n \n-void static inline WriteBE32(unsigned char *ptr, uint32_t x) {\n+void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n+{\n #if HAVE_DECL_HTOBE32 == 1\n     *((uint32_t*)ptr) = htobe32(x);\n #else\n-    ptr[0] = x >> 24; ptr[1] = x >> 16; ptr[2] = x >> 8; ptr[3] = x;\n+    ptr[0] = x >> 24;\n+    ptr[1] = x >> 16;\n+    ptr[2] = x >> 8;\n+    ptr[3] = x;\n #endif\n }\n \n-void static inline WriteBE64(unsigned char *ptr, uint64_t x) {\n+void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n+{\n #if HAVE_DECL_HTOBE64 == 1\n     *((uint64_t*)ptr) = htobe64(x);\n #else\n-    ptr[0] = x >> 56; ptr[1] = x >> 48; ptr[2] = x >> 40; ptr[3] = x >> 32;\n-    ptr[4] = x >> 24; ptr[5] = x >> 16; ptr[6] = x >> 8; ptr[7] = x;\n+    ptr[0] = x >> 56;\n+    ptr[1] = x >> 48;\n+    ptr[2] = x >> 40;\n+    ptr[3] = x >> 32;\n+    ptr[4] = x >> 24;\n+    ptr[5] = x >> 16;\n+    ptr[6] = x >> 8;\n+    ptr[7] = x;\n #endif\n }\n "
      },
      {
        "sha": "90b196ba32c76f9cd3f561ef8c72ea23fcff434f",
        "filename": "src/crypto/ripemd160.cpp",
        "status": "modified",
        "additions": 205,
        "deletions": 118,
        "changes": 323,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/ripemd160.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/ripemd160.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.cpp?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -9,159 +9,244 @@\n #include <string.h>\n \n // Internal implementation code.\n-namespace {\n-\n+namespace\n+{\n /// Internal RIPEMD-160 implementation.\n-namespace ripemd160 {\n-\n+namespace ripemd160\n+{\n uint32_t inline f1(uint32_t x, uint32_t y, uint32_t z) { return x ^ y ^ z; }\n uint32_t inline f2(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (~x & z); }\n uint32_t inline f3(uint32_t x, uint32_t y, uint32_t z) { return (x | ~y) ^ z; }\n uint32_t inline f4(uint32_t x, uint32_t y, uint32_t z) { return (x & z) | (y & ~z); }\n uint32_t inline f5(uint32_t x, uint32_t y, uint32_t z) { return x ^ (y | ~z); }\n \n /** Initialize RIPEMD-160 state. */\n-void inline Initialize(uint32_t *s) {\n+void inline Initialize(uint32_t* s)\n+{\n     s[0] = 0x67452301ul;\n     s[1] = 0xEFCDAB89ul;\n     s[2] = 0x98BADCFEul;\n     s[3] = 0x10325476ul;\n     s[4] = 0xC3D2E1F0ul;\n }\n \n-uint32_t inline rol(uint32_t x, int i) { return (x << i) | (x >> (32-i)); }\n+uint32_t inline rol(uint32_t x, int i) { return (x << i) | (x >> (32 - i)); }\n \n-void inline Round(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t f, uint32_t x, uint32_t k, int r) {\n+void inline Round(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t f, uint32_t x, uint32_t k, int r)\n+{\n     a = rol(a + f + x + k, r) + e;\n     c = rol(c, 10);\n }\n \n-void inline R11(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x,            0, r); }\n-void inline R21(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x5A827999ul, r); }\n-void inline R31(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6ED9EBA1ul, r); }\n-void inline R41(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x8F1BBCDCul, r); }\n-void inline R51(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0xA953FD4Eul, r); }\n+void inline R11(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }\n+void inline R21(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x5A827999ul, r); }\n+void inline R31(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6ED9EBA1ul, r); }\n+void inline R41(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x8F1BBCDCul, r); }\n+void inline R51(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0xA953FD4Eul, r); }\n \n-void inline R12(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0x50A28BE6ul, r); }\n-void inline R22(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x5C4DD124ul, r); }\n-void inline R32(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6D703EF3ul, r); }\n-void inline R42(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x7A6D76E9ul, r); }\n-void inline R52(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x,            0, r); }\n+void inline R12(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0x50A28BE6ul, r); }\n+void inline R22(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x5C4DD124ul, r); }\n+void inline R32(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6D703EF3ul, r); }\n+void inline R42(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x7A6D76E9ul, r); }\n+void inline R52(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }\n \n /** Perform a RIPEMD-160 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t *s, const unsigned char *chunk) {\n+void Transform(uint32_t* s, const unsigned char* chunk)\n+{\n     uint32_t a1 = s[0], b1 = s[1], c1 = s[2], d1 = s[3], e1 = s[4];\n-    uint32_t a2 = a1  , b2 = b1  , c2 = c1  , d2 = d1  , e2 = e1  ;\n-    uint32_t w0  = ReadLE32(chunk +  0), w1  = ReadLE32(chunk +  4), w2  = ReadLE32(chunk +  8), w3  = ReadLE32(chunk + 12);\n-    uint32_t w4  = ReadLE32(chunk + 16), w5  = ReadLE32(chunk + 20), w6  = ReadLE32(chunk + 24), w7  = ReadLE32(chunk + 28);\n-    uint32_t w8  = ReadLE32(chunk + 32), w9  = ReadLE32(chunk + 36), w10 = ReadLE32(chunk + 40), w11 = ReadLE32(chunk + 44);\n+    uint32_t a2 = a1, b2 = b1, c2 = c1, d2 = d1, e2 = e1;\n+    uint32_t w0 = ReadLE32(chunk + 0), w1 = ReadLE32(chunk + 4), w2 = ReadLE32(chunk + 8), w3 = ReadLE32(chunk + 12);\n+    uint32_t w4 = ReadLE32(chunk + 16), w5 = ReadLE32(chunk + 20), w6 = ReadLE32(chunk + 24), w7 = ReadLE32(chunk + 28);\n+    uint32_t w8 = ReadLE32(chunk + 32), w9 = ReadLE32(chunk + 36), w10 = ReadLE32(chunk + 40), w11 = ReadLE32(chunk + 44);\n     uint32_t w12 = ReadLE32(chunk + 48), w13 = ReadLE32(chunk + 52), w14 = ReadLE32(chunk + 56), w15 = ReadLE32(chunk + 60);\n \n-    R11(a1, b1, c1, d1, e1, w0 , 11); R12(a2, b2, c2, d2, e2, w5 ,  8);\n-    R11(e1, a1, b1, c1, d1, w1 , 14); R12(e2, a2, b2, c2, d2, w14,  9);\n-    R11(d1, e1, a1, b1, c1, w2 , 15); R12(d2, e2, a2, b2, c2, w7 ,  9);\n-    R11(c1, d1, e1, a1, b1, w3 , 12); R12(c2, d2, e2, a2, b2, w0 , 11);\n-    R11(b1, c1, d1, e1, a1, w4 ,  5); R12(b2, c2, d2, e2, a2, w9 , 13);\n-    R11(a1, b1, c1, d1, e1, w5 ,  8); R12(a2, b2, c2, d2, e2, w2 , 15);\n-    R11(e1, a1, b1, c1, d1, w6 ,  7); R12(e2, a2, b2, c2, d2, w11, 15);\n-    R11(d1, e1, a1, b1, c1, w7 ,  9); R12(d2, e2, a2, b2, c2, w4 ,  5);\n-    R11(c1, d1, e1, a1, b1, w8 , 11); R12(c2, d2, e2, a2, b2, w13,  7);\n-    R11(b1, c1, d1, e1, a1, w9 , 13); R12(b2, c2, d2, e2, a2, w6 ,  7);\n-    R11(a1, b1, c1, d1, e1, w10, 14); R12(a2, b2, c2, d2, e2, w15,  8);\n-    R11(e1, a1, b1, c1, d1, w11, 15); R12(e2, a2, b2, c2, d2, w8 , 11);\n-    R11(d1, e1, a1, b1, c1, w12,  6); R12(d2, e2, a2, b2, c2, w1 , 14);\n-    R11(c1, d1, e1, a1, b1, w13,  7); R12(c2, d2, e2, a2, b2, w10, 14);\n-    R11(b1, c1, d1, e1, a1, w14,  9); R12(b2, c2, d2, e2, a2, w3 , 12);\n-    R11(a1, b1, c1, d1, e1, w15,  8); R12(a2, b2, c2, d2, e2, w12,  6);\n-\n-    R21(e1, a1, b1, c1, d1, w7 ,  7); R22(e2, a2, b2, c2, d2, w6 ,  9);\n-    R21(d1, e1, a1, b1, c1, w4 ,  6); R22(d2, e2, a2, b2, c2, w11, 13);\n-    R21(c1, d1, e1, a1, b1, w13,  8); R22(c2, d2, e2, a2, b2, w3 , 15);\n-    R21(b1, c1, d1, e1, a1, w1 , 13); R22(b2, c2, d2, e2, a2, w7 ,  7);\n-    R21(a1, b1, c1, d1, e1, w10, 11); R22(a2, b2, c2, d2, e2, w0 , 12);\n-    R21(e1, a1, b1, c1, d1, w6 ,  9); R22(e2, a2, b2, c2, d2, w13,  8);\n-    R21(d1, e1, a1, b1, c1, w15,  7); R22(d2, e2, a2, b2, c2, w5 ,  9);\n-    R21(c1, d1, e1, a1, b1, w3 , 15); R22(c2, d2, e2, a2, b2, w10, 11);\n-    R21(b1, c1, d1, e1, a1, w12,  7); R22(b2, c2, d2, e2, a2, w14,  7);\n-    R21(a1, b1, c1, d1, e1, w0 , 12); R22(a2, b2, c2, d2, e2, w15,  7);\n-    R21(e1, a1, b1, c1, d1, w9 , 15); R22(e2, a2, b2, c2, d2, w8 , 12);\n-    R21(d1, e1, a1, b1, c1, w5 ,  9); R22(d2, e2, a2, b2, c2, w12,  7);\n-    R21(c1, d1, e1, a1, b1, w2 , 11); R22(c2, d2, e2, a2, b2, w4 ,  6);\n-    R21(b1, c1, d1, e1, a1, w14,  7); R22(b2, c2, d2, e2, a2, w9 , 15);\n-    R21(a1, b1, c1, d1, e1, w11, 13); R22(a2, b2, c2, d2, e2, w1 , 13);\n-    R21(e1, a1, b1, c1, d1, w8 , 12); R22(e2, a2, b2, c2, d2, w2 , 11);\n-\n-    R31(d1, e1, a1, b1, c1, w3 , 11); R32(d2, e2, a2, b2, c2, w15,  9);\n-    R31(c1, d1, e1, a1, b1, w10, 13); R32(c2, d2, e2, a2, b2, w5 ,  7);\n-    R31(b1, c1, d1, e1, a1, w14,  6); R32(b2, c2, d2, e2, a2, w1 , 15);\n-    R31(a1, b1, c1, d1, e1, w4 ,  7); R32(a2, b2, c2, d2, e2, w3 , 11);\n-    R31(e1, a1, b1, c1, d1, w9 , 14); R32(e2, a2, b2, c2, d2, w7 ,  8);\n-    R31(d1, e1, a1, b1, c1, w15,  9); R32(d2, e2, a2, b2, c2, w14,  6);\n-    R31(c1, d1, e1, a1, b1, w8 , 13); R32(c2, d2, e2, a2, b2, w6 ,  6);\n-    R31(b1, c1, d1, e1, a1, w1 , 15); R32(b2, c2, d2, e2, a2, w9 , 14);\n-    R31(a1, b1, c1, d1, e1, w2 , 14); R32(a2, b2, c2, d2, e2, w11, 12);\n-    R31(e1, a1, b1, c1, d1, w7 ,  8); R32(e2, a2, b2, c2, d2, w8 , 13);\n-    R31(d1, e1, a1, b1, c1, w0 , 13); R32(d2, e2, a2, b2, c2, w12,  5);\n-    R31(c1, d1, e1, a1, b1, w6 ,  6); R32(c2, d2, e2, a2, b2, w2 , 14);\n-    R31(b1, c1, d1, e1, a1, w13,  5); R32(b2, c2, d2, e2, a2, w10, 13);\n-    R31(a1, b1, c1, d1, e1, w11, 12); R32(a2, b2, c2, d2, e2, w0 , 13);\n-    R31(e1, a1, b1, c1, d1, w5 ,  7); R32(e2, a2, b2, c2, d2, w4 ,  7);\n-    R31(d1, e1, a1, b1, c1, w12,  5); R32(d2, e2, a2, b2, c2, w13,  5);\n-\n-    R41(c1, d1, e1, a1, b1, w1 , 11); R42(c2, d2, e2, a2, b2, w8 , 15);\n-    R41(b1, c1, d1, e1, a1, w9 , 12); R42(b2, c2, d2, e2, a2, w6 ,  5);\n-    R41(a1, b1, c1, d1, e1, w11, 14); R42(a2, b2, c2, d2, e2, w4 ,  8);\n-    R41(e1, a1, b1, c1, d1, w10, 15); R42(e2, a2, b2, c2, d2, w1 , 11);\n-    R41(d1, e1, a1, b1, c1, w0 , 14); R42(d2, e2, a2, b2, c2, w3 , 14);\n-    R41(c1, d1, e1, a1, b1, w8 , 15); R42(c2, d2, e2, a2, b2, w11, 14);\n-    R41(b1, c1, d1, e1, a1, w12,  9); R42(b2, c2, d2, e2, a2, w15,  6);\n-    R41(a1, b1, c1, d1, e1, w4 ,  8); R42(a2, b2, c2, d2, e2, w0 , 14);\n-    R41(e1, a1, b1, c1, d1, w13,  9); R42(e2, a2, b2, c2, d2, w5 ,  6);\n-    R41(d1, e1, a1, b1, c1, w3 , 14); R42(d2, e2, a2, b2, c2, w12,  9);\n-    R41(c1, d1, e1, a1, b1, w7 ,  5); R42(c2, d2, e2, a2, b2, w2 , 12);\n-    R41(b1, c1, d1, e1, a1, w15,  6); R42(b2, c2, d2, e2, a2, w13,  9);\n-    R41(a1, b1, c1, d1, e1, w14,  8); R42(a2, b2, c2, d2, e2, w9 , 12);\n-    R41(e1, a1, b1, c1, d1, w5 ,  6); R42(e2, a2, b2, c2, d2, w7 ,  5);\n-    R41(d1, e1, a1, b1, c1, w6 ,  5); R42(d2, e2, a2, b2, c2, w10, 15);\n-    R41(c1, d1, e1, a1, b1, w2 , 12); R42(c2, d2, e2, a2, b2, w14,  8);\n-\n-    R51(b1, c1, d1, e1, a1, w4 ,  9); R52(b2, c2, d2, e2, a2, w12,  8);\n-    R51(a1, b1, c1, d1, e1, w0 , 15); R52(a2, b2, c2, d2, e2, w15,  5);\n-    R51(e1, a1, b1, c1, d1, w5 ,  5); R52(e2, a2, b2, c2, d2, w10, 12);\n-    R51(d1, e1, a1, b1, c1, w9 , 11); R52(d2, e2, a2, b2, c2, w4 ,  9);\n-    R51(c1, d1, e1, a1, b1, w7 ,  6); R52(c2, d2, e2, a2, b2, w1 , 12);\n-    R51(b1, c1, d1, e1, a1, w12,  8); R52(b2, c2, d2, e2, a2, w5 ,  5);\n-    R51(a1, b1, c1, d1, e1, w2 , 13); R52(a2, b2, c2, d2, e2, w8 , 14);\n-    R51(e1, a1, b1, c1, d1, w10, 12); R52(e2, a2, b2, c2, d2, w7 ,  6);\n-    R51(d1, e1, a1, b1, c1, w14,  5); R52(d2, e2, a2, b2, c2, w6 ,  8);\n-    R51(c1, d1, e1, a1, b1, w1 , 12); R52(c2, d2, e2, a2, b2, w2 , 13);\n-    R51(b1, c1, d1, e1, a1, w3 , 13); R52(b2, c2, d2, e2, a2, w13,  6);\n-    R51(a1, b1, c1, d1, e1, w8 , 14); R52(a2, b2, c2, d2, e2, w14,  5);\n-    R51(e1, a1, b1, c1, d1, w11, 11); R52(e2, a2, b2, c2, d2, w0 , 15);\n-    R51(d1, e1, a1, b1, c1, w6 ,  8); R52(d2, e2, a2, b2, c2, w3 , 13);\n-    R51(c1, d1, e1, a1, b1, w15,  5); R52(c2, d2, e2, a2, b2, w9 , 11);\n-    R51(b1, c1, d1, e1, a1, w13,  6); R52(b2, c2, d2, e2, a2, w11, 11);\n+    R11(a1, b1, c1, d1, e1, w0, 11);\n+    R12(a2, b2, c2, d2, e2, w5, 8);\n+    R11(e1, a1, b1, c1, d1, w1, 14);\n+    R12(e2, a2, b2, c2, d2, w14, 9);\n+    R11(d1, e1, a1, b1, c1, w2, 15);\n+    R12(d2, e2, a2, b2, c2, w7, 9);\n+    R11(c1, d1, e1, a1, b1, w3, 12);\n+    R12(c2, d2, e2, a2, b2, w0, 11);\n+    R11(b1, c1, d1, e1, a1, w4, 5);\n+    R12(b2, c2, d2, e2, a2, w9, 13);\n+    R11(a1, b1, c1, d1, e1, w5, 8);\n+    R12(a2, b2, c2, d2, e2, w2, 15);\n+    R11(e1, a1, b1, c1, d1, w6, 7);\n+    R12(e2, a2, b2, c2, d2, w11, 15);\n+    R11(d1, e1, a1, b1, c1, w7, 9);\n+    R12(d2, e2, a2, b2, c2, w4, 5);\n+    R11(c1, d1, e1, a1, b1, w8, 11);\n+    R12(c2, d2, e2, a2, b2, w13, 7);\n+    R11(b1, c1, d1, e1, a1, w9, 13);\n+    R12(b2, c2, d2, e2, a2, w6, 7);\n+    R11(a1, b1, c1, d1, e1, w10, 14);\n+    R12(a2, b2, c2, d2, e2, w15, 8);\n+    R11(e1, a1, b1, c1, d1, w11, 15);\n+    R12(e2, a2, b2, c2, d2, w8, 11);\n+    R11(d1, e1, a1, b1, c1, w12, 6);\n+    R12(d2, e2, a2, b2, c2, w1, 14);\n+    R11(c1, d1, e1, a1, b1, w13, 7);\n+    R12(c2, d2, e2, a2, b2, w10, 14);\n+    R11(b1, c1, d1, e1, a1, w14, 9);\n+    R12(b2, c2, d2, e2, a2, w3, 12);\n+    R11(a1, b1, c1, d1, e1, w15, 8);\n+    R12(a2, b2, c2, d2, e2, w12, 6);\n+\n+    R21(e1, a1, b1, c1, d1, w7, 7);\n+    R22(e2, a2, b2, c2, d2, w6, 9);\n+    R21(d1, e1, a1, b1, c1, w4, 6);\n+    R22(d2, e2, a2, b2, c2, w11, 13);\n+    R21(c1, d1, e1, a1, b1, w13, 8);\n+    R22(c2, d2, e2, a2, b2, w3, 15);\n+    R21(b1, c1, d1, e1, a1, w1, 13);\n+    R22(b2, c2, d2, e2, a2, w7, 7);\n+    R21(a1, b1, c1, d1, e1, w10, 11);\n+    R22(a2, b2, c2, d2, e2, w0, 12);\n+    R21(e1, a1, b1, c1, d1, w6, 9);\n+    R22(e2, a2, b2, c2, d2, w13, 8);\n+    R21(d1, e1, a1, b1, c1, w15, 7);\n+    R22(d2, e2, a2, b2, c2, w5, 9);\n+    R21(c1, d1, e1, a1, b1, w3, 15);\n+    R22(c2, d2, e2, a2, b2, w10, 11);\n+    R21(b1, c1, d1, e1, a1, w12, 7);\n+    R22(b2, c2, d2, e2, a2, w14, 7);\n+    R21(a1, b1, c1, d1, e1, w0, 12);\n+    R22(a2, b2, c2, d2, e2, w15, 7);\n+    R21(e1, a1, b1, c1, d1, w9, 15);\n+    R22(e2, a2, b2, c2, d2, w8, 12);\n+    R21(d1, e1, a1, b1, c1, w5, 9);\n+    R22(d2, e2, a2, b2, c2, w12, 7);\n+    R21(c1, d1, e1, a1, b1, w2, 11);\n+    R22(c2, d2, e2, a2, b2, w4, 6);\n+    R21(b1, c1, d1, e1, a1, w14, 7);\n+    R22(b2, c2, d2, e2, a2, w9, 15);\n+    R21(a1, b1, c1, d1, e1, w11, 13);\n+    R22(a2, b2, c2, d2, e2, w1, 13);\n+    R21(e1, a1, b1, c1, d1, w8, 12);\n+    R22(e2, a2, b2, c2, d2, w2, 11);\n+\n+    R31(d1, e1, a1, b1, c1, w3, 11);\n+    R32(d2, e2, a2, b2, c2, w15, 9);\n+    R31(c1, d1, e1, a1, b1, w10, 13);\n+    R32(c2, d2, e2, a2, b2, w5, 7);\n+    R31(b1, c1, d1, e1, a1, w14, 6);\n+    R32(b2, c2, d2, e2, a2, w1, 15);\n+    R31(a1, b1, c1, d1, e1, w4, 7);\n+    R32(a2, b2, c2, d2, e2, w3, 11);\n+    R31(e1, a1, b1, c1, d1, w9, 14);\n+    R32(e2, a2, b2, c2, d2, w7, 8);\n+    R31(d1, e1, a1, b1, c1, w15, 9);\n+    R32(d2, e2, a2, b2, c2, w14, 6);\n+    R31(c1, d1, e1, a1, b1, w8, 13);\n+    R32(c2, d2, e2, a2, b2, w6, 6);\n+    R31(b1, c1, d1, e1, a1, w1, 15);\n+    R32(b2, c2, d2, e2, a2, w9, 14);\n+    R31(a1, b1, c1, d1, e1, w2, 14);\n+    R32(a2, b2, c2, d2, e2, w11, 12);\n+    R31(e1, a1, b1, c1, d1, w7, 8);\n+    R32(e2, a2, b2, c2, d2, w8, 13);\n+    R31(d1, e1, a1, b1, c1, w0, 13);\n+    R32(d2, e2, a2, b2, c2, w12, 5);\n+    R31(c1, d1, e1, a1, b1, w6, 6);\n+    R32(c2, d2, e2, a2, b2, w2, 14);\n+    R31(b1, c1, d1, e1, a1, w13, 5);\n+    R32(b2, c2, d2, e2, a2, w10, 13);\n+    R31(a1, b1, c1, d1, e1, w11, 12);\n+    R32(a2, b2, c2, d2, e2, w0, 13);\n+    R31(e1, a1, b1, c1, d1, w5, 7);\n+    R32(e2, a2, b2, c2, d2, w4, 7);\n+    R31(d1, e1, a1, b1, c1, w12, 5);\n+    R32(d2, e2, a2, b2, c2, w13, 5);\n+\n+    R41(c1, d1, e1, a1, b1, w1, 11);\n+    R42(c2, d2, e2, a2, b2, w8, 15);\n+    R41(b1, c1, d1, e1, a1, w9, 12);\n+    R42(b2, c2, d2, e2, a2, w6, 5);\n+    R41(a1, b1, c1, d1, e1, w11, 14);\n+    R42(a2, b2, c2, d2, e2, w4, 8);\n+    R41(e1, a1, b1, c1, d1, w10, 15);\n+    R42(e2, a2, b2, c2, d2, w1, 11);\n+    R41(d1, e1, a1, b1, c1, w0, 14);\n+    R42(d2, e2, a2, b2, c2, w3, 14);\n+    R41(c1, d1, e1, a1, b1, w8, 15);\n+    R42(c2, d2, e2, a2, b2, w11, 14);\n+    R41(b1, c1, d1, e1, a1, w12, 9);\n+    R42(b2, c2, d2, e2, a2, w15, 6);\n+    R41(a1, b1, c1, d1, e1, w4, 8);\n+    R42(a2, b2, c2, d2, e2, w0, 14);\n+    R41(e1, a1, b1, c1, d1, w13, 9);\n+    R42(e2, a2, b2, c2, d2, w5, 6);\n+    R41(d1, e1, a1, b1, c1, w3, 14);\n+    R42(d2, e2, a2, b2, c2, w12, 9);\n+    R41(c1, d1, e1, a1, b1, w7, 5);\n+    R42(c2, d2, e2, a2, b2, w2, 12);\n+    R41(b1, c1, d1, e1, a1, w15, 6);\n+    R42(b2, c2, d2, e2, a2, w13, 9);\n+    R41(a1, b1, c1, d1, e1, w14, 8);\n+    R42(a2, b2, c2, d2, e2, w9, 12);\n+    R41(e1, a1, b1, c1, d1, w5, 6);\n+    R42(e2, a2, b2, c2, d2, w7, 5);\n+    R41(d1, e1, a1, b1, c1, w6, 5);\n+    R42(d2, e2, a2, b2, c2, w10, 15);\n+    R41(c1, d1, e1, a1, b1, w2, 12);\n+    R42(c2, d2, e2, a2, b2, w14, 8);\n+\n+    R51(b1, c1, d1, e1, a1, w4, 9);\n+    R52(b2, c2, d2, e2, a2, w12, 8);\n+    R51(a1, b1, c1, d1, e1, w0, 15);\n+    R52(a2, b2, c2, d2, e2, w15, 5);\n+    R51(e1, a1, b1, c1, d1, w5, 5);\n+    R52(e2, a2, b2, c2, d2, w10, 12);\n+    R51(d1, e1, a1, b1, c1, w9, 11);\n+    R52(d2, e2, a2, b2, c2, w4, 9);\n+    R51(c1, d1, e1, a1, b1, w7, 6);\n+    R52(c2, d2, e2, a2, b2, w1, 12);\n+    R51(b1, c1, d1, e1, a1, w12, 8);\n+    R52(b2, c2, d2, e2, a2, w5, 5);\n+    R51(a1, b1, c1, d1, e1, w2, 13);\n+    R52(a2, b2, c2, d2, e2, w8, 14);\n+    R51(e1, a1, b1, c1, d1, w10, 12);\n+    R52(e2, a2, b2, c2, d2, w7, 6);\n+    R51(d1, e1, a1, b1, c1, w14, 5);\n+    R52(d2, e2, a2, b2, c2, w6, 8);\n+    R51(c1, d1, e1, a1, b1, w1, 12);\n+    R52(c2, d2, e2, a2, b2, w2, 13);\n+    R51(b1, c1, d1, e1, a1, w3, 13);\n+    R52(b2, c2, d2, e2, a2, w13, 6);\n+    R51(a1, b1, c1, d1, e1, w8, 14);\n+    R52(a2, b2, c2, d2, e2, w14, 5);\n+    R51(e1, a1, b1, c1, d1, w11, 11);\n+    R52(e2, a2, b2, c2, d2, w0, 15);\n+    R51(d1, e1, a1, b1, c1, w6, 8);\n+    R52(d2, e2, a2, b2, c2, w3, 13);\n+    R51(c1, d1, e1, a1, b1, w15, 5);\n+    R52(c2, d2, e2, a2, b2, w9, 11);\n+    R51(b1, c1, d1, e1, a1, w13, 6);\n+    R52(b2, c2, d2, e2, a2, w11, 11);\n \n     uint32_t t = s[0];\n     s[0] = s[1] + c1 + d2;\n     s[1] = s[2] + d1 + e2;\n     s[2] = s[3] + e1 + a2;\n     s[3] = s[4] + a1 + b2;\n-    s[4] = t    + b1 + c2;\n+    s[4] = t + b1 + c2;\n }\n \n-}  // namespace ripemd160\n+} // namespace ripemd160\n \n-}  // namespace\n+} // namespace\n \n ////// RIPEMD160\n \n-CRIPEMD160::CRIPEMD160() : bytes(0) {\n+CRIPEMD160::CRIPEMD160() : bytes(0)\n+{\n     ripemd160::Initialize(s);\n }\n \n-CRIPEMD160& CRIPEMD160::Write(const unsigned char *data, size_t len) {\n-    const unsigned char *end = data + len;\n+CRIPEMD160& CRIPEMD160::Write(const unsigned char* data, size_t len)\n+{\n+    const unsigned char* end = data + len;\n     size_t bufsize = bytes % 64;\n     if (bufsize && bufsize + len >= 64) {\n         // Fill the buffer, and process it.\n@@ -185,20 +270,22 @@ CRIPEMD160& CRIPEMD160::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CRIPEMD160::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CRIPEMD160::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     static const unsigned char pad[64] = {0x80};\n     unsigned char sizedesc[8];\n     WriteLE64(sizedesc, bytes << 3);\n     Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n     Write(sizedesc, 8);\n     WriteLE32(hash, s[0]);\n-    WriteLE32(hash+4, s[1]);\n-    WriteLE32(hash+8, s[2]);\n-    WriteLE32(hash+12, s[3]);\n-    WriteLE32(hash+16, s[4]);\n+    WriteLE32(hash + 4, s[1]);\n+    WriteLE32(hash + 8, s[2]);\n+    WriteLE32(hash + 12, s[3]);\n+    WriteLE32(hash + 16, s[4]);\n }\n \n-CRIPEMD160& CRIPEMD160::Reset() {\n+CRIPEMD160& CRIPEMD160::Reset()\n+{\n     bytes = 0;\n     ripemd160::Initialize(s);\n     return *this;"
      },
      {
        "sha": "76197543beeae21f1623349ceeef082e73c74ef1",
        "filename": "src/crypto/ripemd160.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/ripemd160.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/ripemd160.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.h?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -9,7 +9,8 @@\n #include <stdlib.h>\n \n /** A hasher class for RIPEMD-160. */\n-class CRIPEMD160 {\n+class CRIPEMD160\n+{\n private:\n     uint32_t s[5];\n     unsigned char buf[64];\n@@ -19,7 +20,7 @@ class CRIPEMD160 {\n     static const size_t OUTPUT_SIZE = 20;\n \n     CRIPEMD160();\n-    CRIPEMD160& Write(const unsigned char *data, size_t len);\n+    CRIPEMD160& Write(const unsigned char* data, size_t len);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CRIPEMD160& Reset();\n };"
      },
      {
        "sha": "5fbea002d652b9eaa4b54ae64acdfe0fc1e1b51e",
        "filename": "src/crypto/sha1.cpp",
        "status": "modified",
        "additions": 102,
        "deletions": 96,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha1.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha1.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.cpp?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -9,14 +9,14 @@\n #include <string.h>\n \n // Internal implementation code.\n-namespace {\n-\n+namespace\n+{\n /// Internal SHA-1 implementation.\n-namespace sha1 {\n-\n+namespace sha1\n+{\n /** One round of SHA-1. */\n-void inline Round(uint32_t a, uint32_t &b, uint32_t c, uint32_t d, uint32_t &e,\n-                  uint32_t f, uint32_t k, uint32_t w) {\n+void inline Round(uint32_t a, uint32_t& b, uint32_t c, uint32_t d, uint32_t& e, uint32_t f, uint32_t k, uint32_t w)\n+{\n     e += ((a << 5) | (a >> 27)) + f + k + w;\n     b = (b << 30) | (b >> 2);\n }\n@@ -28,7 +28,8 @@ uint32_t inline f3(uint32_t b, uint32_t c, uint32_t d) { return (b & c) | (d & (\n uint32_t inline left(uint32_t x) { return (x << 1) | (x >> 31); }\n \n /** Initialize SHA-1 state. */\n-void inline Initialize(uint32_t *s) {\n+void inline Initialize(uint32_t* s)\n+{\n     s[0] = 0x67452301ul;\n     s[1] = 0xEFCDAB89ul;\n     s[2] = 0x98BADCFEul;\n@@ -42,94 +43,95 @@ const uint32_t k3 = 0x8F1BBCDCul;\n const uint32_t k4 = 0xCA62C1D6ul;\n \n /** Perform a SHA-1 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t *s, const unsigned char *chunk) {\n+void Transform(uint32_t* s, const unsigned char* chunk)\n+{\n     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4];\n     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n \n-    Round(a, b, c, d, e, f1(b, c, d), k1, w0  = ReadBE32(chunk +  0));\n-    Round(e, a, b, c, d, f1(a, b, c), k1, w1  = ReadBE32(chunk +  4));\n-    Round(d, e, a, b, c, f1(e, a, b), k1, w2  = ReadBE32(chunk +  8));\n-    Round(c, d, e, a, b, f1(d, e, a), k1, w3  = ReadBE32(chunk + 12));\n-    Round(b, c, d, e, a, f1(c, d, e), k1, w4  = ReadBE32(chunk + 16));\n-    Round(a, b, c, d, e, f1(b, c, d), k1, w5  = ReadBE32(chunk + 20));\n-    Round(e, a, b, c, d, f1(a, b, c), k1, w6  = ReadBE32(chunk + 24));\n-    Round(d, e, a, b, c, f1(e, a, b), k1, w7  = ReadBE32(chunk + 28));\n-    Round(c, d, e, a, b, f1(d, e, a), k1, w8  = ReadBE32(chunk + 32));\n-    Round(b, c, d, e, a, f1(c, d, e), k1, w9  = ReadBE32(chunk + 36));\n+    Round(a, b, c, d, e, f1(b, c, d), k1, w0 = ReadBE32(chunk + 0));\n+    Round(e, a, b, c, d, f1(a, b, c), k1, w1 = ReadBE32(chunk + 4));\n+    Round(d, e, a, b, c, f1(e, a, b), k1, w2 = ReadBE32(chunk + 8));\n+    Round(c, d, e, a, b, f1(d, e, a), k1, w3 = ReadBE32(chunk + 12));\n+    Round(b, c, d, e, a, f1(c, d, e), k1, w4 = ReadBE32(chunk + 16));\n+    Round(a, b, c, d, e, f1(b, c, d), k1, w5 = ReadBE32(chunk + 20));\n+    Round(e, a, b, c, d, f1(a, b, c), k1, w6 = ReadBE32(chunk + 24));\n+    Round(d, e, a, b, c, f1(e, a, b), k1, w7 = ReadBE32(chunk + 28));\n+    Round(c, d, e, a, b, f1(d, e, a), k1, w8 = ReadBE32(chunk + 32));\n+    Round(b, c, d, e, a, f1(c, d, e), k1, w9 = ReadBE32(chunk + 36));\n     Round(a, b, c, d, e, f1(b, c, d), k1, w10 = ReadBE32(chunk + 40));\n     Round(e, a, b, c, d, f1(a, b, c), k1, w11 = ReadBE32(chunk + 44));\n     Round(d, e, a, b, c, f1(e, a, b), k1, w12 = ReadBE32(chunk + 48));\n     Round(c, d, e, a, b, f1(d, e, a), k1, w13 = ReadBE32(chunk + 52));\n     Round(b, c, d, e, a, f1(c, d, e), k1, w14 = ReadBE32(chunk + 56));\n     Round(a, b, c, d, e, f1(b, c, d), k1, w15 = ReadBE32(chunk + 60));\n \n-    Round(e, a, b, c, d, f1(a, b, c), k1, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n-    Round(d, e, a, b, c, f1(e, a, b), k1, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n-    Round(c, d, e, a, b, f1(d, e, a), k1, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n-    Round(b, c, d, e, a, f1(c, d, e), k1, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n-    Round(a, b, c, d, e, f2(b, c, d), k2, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k2, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n-    Round(d, e, a, b, c, f2(e, a, b), k2, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k2, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k2, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n-    Round(a, b, c, d, e, f2(b, c, d), k2, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n-    Round(e, a, b, c, d, f2(a, b, c), k2, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n-    Round(d, e, a, b, c, f2(e, a, b), k2, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n-    Round(c, d, e, a, b, f2(d, e, a), k2, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n-    Round(b, c, d, e, a, f2(c, d, e), k2, w13 = left(w13 ^ w10 ^ w5  ^ w15));\n-    Round(a, b, c, d, e, f2(b, c, d), k2, w14 = left(w14 ^ w11 ^ w6  ^ w0 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k2, w15 = left(w15 ^ w12 ^ w7  ^ w1 ));\n-\n-    Round(d, e, a, b, c, f2(e, a, b), k2, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k2, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k2, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n-    Round(a, b, c, d, e, f2(b, c, d), k2, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k2, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n-    Round(d, e, a, b, c, f2(e, a, b), k2, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k2, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k2, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n-    Round(a, b, c, d, e, f3(b, c, d), k3, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n-    Round(e, a, b, c, d, f3(a, b, c), k3, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n-    Round(d, e, a, b, c, f3(e, a, b), k3, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n-    Round(c, d, e, a, b, f3(d, e, a), k3, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n-    Round(b, c, d, e, a, f3(c, d, e), k3, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n-    Round(a, b, c, d, e, f3(b, c, d), k3, w13 = left(w13 ^ w10 ^ w5  ^ w15));\n-    Round(e, a, b, c, d, f3(a, b, c), k3, w14 = left(w14 ^ w11 ^ w6  ^ w0 ));\n-    Round(d, e, a, b, c, f3(e, a, b), k3, w15 = left(w15 ^ w12 ^ w7  ^ w1 ));\n-\n-    Round(c, d, e, a, b, f3(d, e, a), k3, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n-    Round(b, c, d, e, a, f3(c, d, e), k3, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n-    Round(a, b, c, d, e, f3(b, c, d), k3, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n-    Round(e, a, b, c, d, f3(a, b, c), k3, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n-    Round(d, e, a, b, c, f3(e, a, b), k3, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n-    Round(c, d, e, a, b, f3(d, e, a), k3, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n-    Round(b, c, d, e, a, f3(c, d, e), k3, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n-    Round(a, b, c, d, e, f3(b, c, d), k3, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n-    Round(e, a, b, c, d, f3(a, b, c), k3, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n-    Round(d, e, a, b, c, f3(e, a, b), k3, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n-    Round(c, d, e, a, b, f3(d, e, a), k3, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n-    Round(b, c, d, e, a, f3(c, d, e), k3, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n-    Round(a, b, c, d, e, f2(b, c, d), k4, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n-    Round(e, a, b, c, d, f2(a, b, c), k4, w13 = left(w13 ^ w10 ^ w5  ^ w15));\n-    Round(d, e, a, b, c, f2(e, a, b), k4, w14 = left(w14 ^ w11 ^ w6  ^ w0 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k4, w15 = left(w15 ^ w12 ^ w7  ^ w1 ));\n-\n-    Round(b, c, d, e, a, f2(c, d, e), k4, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n-    Round(a, b, c, d, e, f2(b, c, d), k4, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k4, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n-    Round(d, e, a, b, c, f2(e, a, b), k4, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k4, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k4, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n-    Round(a, b, c, d, e, f2(b, c, d), k4, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k4, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n-    Round(d, e, a, b, c, f2(e, a, b), k4, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n-    Round(c, d, e, a, b, f2(d, e, a), k4, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n-    Round(b, c, d, e, a, f2(c, d, e), k4, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n-    Round(a, b, c, d, e, f2(b, c, d), k4, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n-    Round(e, a, b, c, d, f2(a, b, c), k4, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n-    Round(d, e, a, b, c, f2(e, a, b), k4,       left(w13 ^ w10 ^ w5  ^ w15));\n-    Round(c, d, e, a, b, f2(d, e, a), k4,       left(w14 ^ w11 ^ w6  ^ w0 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k4,       left(w15 ^ w12 ^ w7  ^ w1 ));\n+    Round(e, a, b, c, d, f1(a, b, c), k1, w0 = left(w0 ^ w13 ^ w8 ^ w2));\n+    Round(d, e, a, b, c, f1(e, a, b), k1, w1 = left(w1 ^ w14 ^ w9 ^ w3));\n+    Round(c, d, e, a, b, f1(d, e, a), k1, w2 = left(w2 ^ w15 ^ w10 ^ w4));\n+    Round(b, c, d, e, a, f1(c, d, e), k1, w3 = left(w3 ^ w0 ^ w11 ^ w5));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w4 = left(w4 ^ w1 ^ w12 ^ w6));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w5 = left(w5 ^ w2 ^ w13 ^ w7));\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w6 = left(w6 ^ w3 ^ w14 ^ w8));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w7 = left(w7 ^ w4 ^ w15 ^ w9));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w8 = left(w8 ^ w5 ^ w0 ^ w10));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w9 = left(w9 ^ w6 ^ w1 ^ w11));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w10 = left(w10 ^ w7 ^ w2 ^ w12));\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w11 = left(w11 ^ w8 ^ w3 ^ w13));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w12 = left(w12 ^ w9 ^ w4 ^ w14));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w13 = left(w13 ^ w10 ^ w5 ^ w15));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w14 = left(w14 ^ w11 ^ w6 ^ w0));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w15 = left(w15 ^ w12 ^ w7 ^ w1));\n+\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w0 = left(w0 ^ w13 ^ w8 ^ w2));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w1 = left(w1 ^ w14 ^ w9 ^ w3));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w2 = left(w2 ^ w15 ^ w10 ^ w4));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w3 = left(w3 ^ w0 ^ w11 ^ w5));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w4 = left(w4 ^ w1 ^ w12 ^ w6));\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w5 = left(w5 ^ w2 ^ w13 ^ w7));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w6 = left(w6 ^ w3 ^ w14 ^ w8));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w7 = left(w7 ^ w4 ^ w15 ^ w9));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w8 = left(w8 ^ w5 ^ w0 ^ w10));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w9 = left(w9 ^ w6 ^ w1 ^ w11));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w10 = left(w10 ^ w7 ^ w2 ^ w12));\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w11 = left(w11 ^ w8 ^ w3 ^ w13));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w12 = left(w12 ^ w9 ^ w4 ^ w14));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w13 = left(w13 ^ w10 ^ w5 ^ w15));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w14 = left(w14 ^ w11 ^ w6 ^ w0));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w15 = left(w15 ^ w12 ^ w7 ^ w1));\n+\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w0 = left(w0 ^ w13 ^ w8 ^ w2));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w1 = left(w1 ^ w14 ^ w9 ^ w3));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w2 = left(w2 ^ w15 ^ w10 ^ w4));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w3 = left(w3 ^ w0 ^ w11 ^ w5));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w4 = left(w4 ^ w1 ^ w12 ^ w6));\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w5 = left(w5 ^ w2 ^ w13 ^ w7));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w6 = left(w6 ^ w3 ^ w14 ^ w8));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w7 = left(w7 ^ w4 ^ w15 ^ w9));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w8 = left(w8 ^ w5 ^ w0 ^ w10));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w9 = left(w9 ^ w6 ^ w1 ^ w11));\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w10 = left(w10 ^ w7 ^ w2 ^ w12));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w11 = left(w11 ^ w8 ^ w3 ^ w13));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w12 = left(w12 ^ w9 ^ w4 ^ w14));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w13 = left(w13 ^ w10 ^ w5 ^ w15));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, w14 = left(w14 ^ w11 ^ w6 ^ w0));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, w15 = left(w15 ^ w12 ^ w7 ^ w1));\n+\n+    Round(b, c, d, e, a, f2(c, d, e), k4, w0 = left(w0 ^ w13 ^ w8 ^ w2));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w1 = left(w1 ^ w14 ^ w9 ^ w3));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w2 = left(w2 ^ w15 ^ w10 ^ w4));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, w3 = left(w3 ^ w0 ^ w11 ^ w5));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, w4 = left(w4 ^ w1 ^ w12 ^ w6));\n+    Round(b, c, d, e, a, f2(c, d, e), k4, w5 = left(w5 ^ w2 ^ w13 ^ w7));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w6 = left(w6 ^ w3 ^ w14 ^ w8));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w7 = left(w7 ^ w4 ^ w15 ^ w9));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, w8 = left(w8 ^ w5 ^ w0 ^ w10));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, w9 = left(w9 ^ w6 ^ w1 ^ w11));\n+    Round(b, c, d, e, a, f2(c, d, e), k4, w10 = left(w10 ^ w7 ^ w2 ^ w12));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w11 = left(w11 ^ w8 ^ w3 ^ w13));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w12 = left(w12 ^ w9 ^ w4 ^ w14));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, left(w13 ^ w10 ^ w5 ^ w15));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, left(w14 ^ w11 ^ w6 ^ w0));\n+    Round(b, c, d, e, a, f2(c, d, e), k4, left(w15 ^ w12 ^ w7 ^ w1));\n \n     s[0] += a;\n     s[1] += b;\n@@ -138,18 +140,20 @@ void Transform(uint32_t *s, const unsigned char *chunk) {\n     s[4] += e;\n }\n \n-}  // namespace sha1\n+} // namespace sha1\n \n-}  // namespace\n+} // namespace\n \n ////// SHA1\n \n-CSHA1::CSHA1() : bytes(0) {\n+CSHA1::CSHA1() : bytes(0)\n+{\n     sha1::Initialize(s);\n }\n \n-CSHA1& CSHA1::Write(const unsigned char *data, size_t len) {\n-    const unsigned char *end = data + len;\n+CSHA1& CSHA1::Write(const unsigned char* data, size_t len)\n+{\n+    const unsigned char* end = data + len;\n     size_t bufsize = bytes % 64;\n     if (bufsize && bufsize + len >= 64) {\n         // Fill the buffer, and process it.\n@@ -173,20 +177,22 @@ CSHA1& CSHA1::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CSHA1::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CSHA1::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     static const unsigned char pad[64] = {0x80};\n     unsigned char sizedesc[8];\n     WriteBE64(sizedesc, bytes << 3);\n     Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n     Write(sizedesc, 8);\n     WriteBE32(hash, s[0]);\n-    WriteBE32(hash+4, s[1]);\n-    WriteBE32(hash+8, s[2]);\n-    WriteBE32(hash+12, s[3]);\n-    WriteBE32(hash+16, s[4]);\n+    WriteBE32(hash + 4, s[1]);\n+    WriteBE32(hash + 8, s[2]);\n+    WriteBE32(hash + 12, s[3]);\n+    WriteBE32(hash + 16, s[4]);\n }\n \n-CSHA1& CSHA1::Reset() {\n+CSHA1& CSHA1::Reset()\n+{\n     bytes = 0;\n     sha1::Initialize(s);\n     return *this;"
      },
      {
        "sha": "4fa2b333babd3f803e7dfb55e42f031610d06169",
        "filename": "src/crypto/sha1.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.h?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -9,7 +9,8 @@\n #include <stdlib.h>\n \n /** A hasher class for SHA1. */\n-class CSHA1 {\n+class CSHA1\n+{\n private:\n     uint32_t s[5];\n     unsigned char buf[64];\n@@ -19,7 +20,7 @@ class CSHA1 {\n     static const size_t OUTPUT_SIZE = 20;\n \n     CSHA1();\n-    CSHA1& Write(const unsigned char *data, size_t len);\n+    CSHA1& Write(const unsigned char* data, size_t len);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA1& Reset();\n };"
      },
      {
        "sha": "9a96c5125a7df80844079319a5586d70ef9e3cc5",
        "filename": "src/crypto/sha2.cpp",
        "status": "modified",
        "additions": 197,
        "deletions": 185,
        "changes": 382,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha2.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha2.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.cpp?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -9,11 +9,11 @@\n #include <string.h>\n \n // Internal implementation code.\n-namespace {\n-\n+namespace\n+{\n /// Internal SHA-256 implementation.\n-namespace sha256 {\n-\n+namespace sha256\n+{\n uint32_t inline Ch(uint32_t x, uint32_t y, uint32_t z) { return z ^ (x & (y ^ z)); }\n uint32_t inline Maj(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (z & (x | y)); }\n uint32_t inline Sigma0(uint32_t x) { return (x >> 2 | x << 30) ^ (x >> 13 | x << 19) ^ (x >> 22 | x << 10); }\n@@ -22,17 +22,17 @@ uint32_t inline sigma0(uint32_t x) { return (x >> 7 | x << 25) ^ (x >> 18 | x <<\n uint32_t inline sigma1(uint32_t x) { return (x >> 17 | x << 15) ^ (x >> 19 | x << 13) ^ (x >> 10); }\n \n /** One round of SHA-256. */\n-void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t &d,\n-                  uint32_t e, uint32_t f, uint32_t g, uint32_t &h,\n-                  uint32_t k, uint32_t w) {\n+void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t& d, uint32_t e, uint32_t f, uint32_t g, uint32_t& h, uint32_t k, uint32_t w)\n+{\n     uint32_t t1 = h + Sigma1(e) + Ch(e, f, g) + k + w;\n     uint32_t t2 = Sigma0(a) + Maj(a, b, c);\n     d += t1;\n     h = t1 + t2;\n }\n \n /** Initialize SHA-256 state. */\n-void inline Initialize(uint32_t *s) {\n+void inline Initialize(uint32_t* s)\n+{\n     s[0] = 0x6a09e667ul;\n     s[1] = 0xbb67ae85ul;\n     s[2] = 0x3c6ef372ul;\n@@ -44,77 +44,78 @@ void inline Initialize(uint32_t *s) {\n }\n \n /** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t *s, const unsigned char *chunk) {\n+void Transform(uint32_t* s, const unsigned char* chunk)\n+{\n     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n \n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98,  w0 = ReadBE32(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x71374491,  w1 = ReadBE32(chunk + 4));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf,  w2 = ReadBE32(chunk + 8));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5,  w3 = ReadBE32(chunk + 12));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25b,  w4 = ReadBE32(chunk + 16));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1,  w5 = ReadBE32(chunk + 20));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4,  w6 = ReadBE32(chunk + 24));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5,  w7 = ReadBE32(chunk + 28));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98,  w8 = ReadBE32(chunk + 32));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b01,  w9 = ReadBE32(chunk + 36));\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n     Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n     Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n     Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n     Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n     Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n     Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n \n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c1,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a85,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b2138,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d13,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a7354,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c85,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664b,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c08,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774c,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14  + sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15  + sigma1(w13) +  w8 + sigma0( w0));\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n \n     s[0] += a;\n     s[1] += b;\n@@ -126,11 +127,11 @@ void Transform(uint32_t *s, const unsigned char *chunk) {\n     s[7] += h;\n }\n \n-}  // namespace sha256\n+} // namespace sha256\n \n /// Internal SHA-512 implementation.\n-namespace sha512 {\n-\n+namespace sha512\n+{\n uint64_t inline Ch(uint64_t x, uint64_t y, uint64_t z) { return z ^ (x & (y ^ z)); }\n uint64_t inline Maj(uint64_t x, uint64_t y, uint64_t z) { return (x & y) | (z & (x | y)); }\n uint64_t inline Sigma0(uint64_t x) { return (x >> 28 | x << 36) ^ (x >> 34 | x << 30) ^ (x >> 39 | x << 25); }\n@@ -139,17 +140,17 @@ uint64_t inline sigma0(uint64_t x) { return (x >> 1 | x << 63) ^ (x >> 8 | x <<\n uint64_t inline sigma1(uint64_t x) { return (x >> 19 | x << 45) ^ (x >> 61 | x << 3) ^ (x >> 6); }\n \n /** One round of SHA-512. */\n-void inline Round(uint64_t a, uint64_t b, uint64_t c, uint64_t &d,\n-                  uint64_t e, uint64_t f, uint64_t g, uint64_t &h,\n-                  uint64_t k, uint64_t w) {\n+void inline Round(uint64_t a, uint64_t b, uint64_t c, uint64_t& d, uint64_t e, uint64_t f, uint64_t g, uint64_t& h, uint64_t k, uint64_t w)\n+{\n     uint64_t t1 = h + Sigma1(e) + Ch(e, f, g) + k + w;\n     uint64_t t2 = Sigma0(a) + Maj(a, b, c);\n     d += t1;\n     h = t1 + t2;\n }\n \n /** Initialize SHA-256 state. */\n-void inline Initialize(uint64_t *s) {\n+void inline Initialize(uint64_t* s)\n+{\n     s[0] = 0x6a09e667f3bcc908ull;\n     s[1] = 0xbb67ae8584caa73bull;\n     s[2] = 0x3c6ef372fe94f82bull;\n@@ -161,94 +162,95 @@ void inline Initialize(uint64_t *s) {\n }\n \n /** Perform one SHA-512 transformation, processing a 128-byte chunk. */\n-void Transform(uint64_t *s, const unsigned char *chunk) {\n+void Transform(uint64_t* s, const unsigned char* chunk)\n+{\n     uint64_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n     uint64_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n \n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98d728ae22ull,  w0 = ReadBE64(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x7137449123ef65cdull,  w1 = ReadBE64(chunk + 8));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcfec4d3b2full,  w2 = ReadBE64(chunk + 16));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba58189dbbcull,  w3 = ReadBE64(chunk + 24));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25bf348b538ull,  w4 = ReadBE64(chunk + 32));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1b605d019ull,  w5 = ReadBE64(chunk + 40));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4af194f9bull,  w6 = ReadBE64(chunk + 48));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5da6d8118ull,  w7 = ReadBE64(chunk + 56));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98a3030242ull,  w8 = ReadBE64(chunk + 64));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b0145706fbeull,  w9 = ReadBE64(chunk + 72));\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98d728ae22ull, w0 = ReadBE64(chunk + 0));\n+    Round(h, a, b, c, d, e, f, g, 0x7137449123ef65cdull, w1 = ReadBE64(chunk + 8));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcfec4d3b2full, w2 = ReadBE64(chunk + 16));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba58189dbbcull, w3 = ReadBE64(chunk + 24));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25bf348b538ull, w4 = ReadBE64(chunk + 32));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1b605d019ull, w5 = ReadBE64(chunk + 40));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4af194f9bull, w6 = ReadBE64(chunk + 48));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5da6d8118ull, w7 = ReadBE64(chunk + 56));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98a3030242ull, w8 = ReadBE64(chunk + 64));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b0145706fbeull, w9 = ReadBE64(chunk + 72));\n     Round(g, h, a, b, c, d, e, f, 0x243185be4ee4b28cull, w10 = ReadBE64(chunk + 80));\n     Round(f, g, h, a, b, c, d, e, 0x550c7dc3d5ffb4e2ull, w11 = ReadBE64(chunk + 88));\n     Round(e, f, g, h, a, b, c, d, 0x72be5d74f27b896full, w12 = ReadBE64(chunk + 96));\n     Round(d, e, f, g, h, a, b, c, 0x80deb1fe3b1696b1ull, w13 = ReadBE64(chunk + 104));\n     Round(c, d, e, f, g, h, a, b, 0x9bdc06a725c71235ull, w14 = ReadBE64(chunk + 112));\n     Round(b, c, d, e, f, g, h, a, 0xc19bf174cf692694ull, w15 = ReadBE64(chunk + 120));\n \n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c19ef14ad2ull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786384f25e3ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc68b8cd5b5ull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc77ac9c65ull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f592b0275ull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa6ea6e483ull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dcbd41fbd4ull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da831153b5ull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152ee66dfabull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d2db43210ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c898fb213full, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7beef0ee4ull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf33da88fc2ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147930aa725ull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351e003826full, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x142929670a0e6e70ull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a8546d22ffcull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b21385c26c926ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc5ac42aedull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d139d95b3dfull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a73548baf63deull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb3c77b2a8ull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e47edaee6ull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c851482353bull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a14cf10364ull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664bbc423001ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70d0f89791ull, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a30654be30ull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819d6ef5218ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd69906245565a910ull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e35855771202aull, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa07032bbd1b8ull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116b8d2d0c8ull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c085141ab53ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774cdf8eeb99ull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5e19b48a8ull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3c5c95a63ull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4ae3418acbull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f7763e373ull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3d6b2b8a3ull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee5defb2fcull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f43172f60ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814a1f0ab72ull, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc702081a6439ecull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa23631e28ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506cebde82bde9ull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7b2c67915ull, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2e372532bull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0xca273eceea26619cull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0xd186b8c721c0c207ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0xeada7dd6cde0eb1eull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0xf57d4f7fee6ed178ull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x06f067aa72176fbaull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x0a637dc5a2c898a6ull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x113f9804bef90daeull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x1b710b35131c471bull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x28db77f523047d84ull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0x32caab7b40c72493ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x3c9ebe0a15c9bebcull, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x431d67c49c100d4cull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x4cc5d4becb3e42b6ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0x597f299cfc657e2aull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x5fcb6fab3ad6faecull, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x6c44198c4a475817ull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c19ef14ad2ull, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786384f25e3ull, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc68b8cd5b5ull, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1cc77ac9c65ull, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6f592b0275ull, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aa6ea6e483ull, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dcbd41fbd4ull, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988da831153b5ull, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152ee66dfabull, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66d2db43210ull, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c898fb213full, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7beef0ee4ull, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf33da88fc2ull, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147930aa725ull, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351e003826full, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x142929670a0e6e70ull, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a8546d22ffcull, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b21385c26c926ull, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc5ac42aedull, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d139d95b3dfull, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x650a73548baf63deull, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abb3c77b2a8ull, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92e47edaee6ull, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c851482353bull, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a14cf10364ull, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664bbc423001ull, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70d0f89791ull, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a30654be30ull, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819d6ef5218ull, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd69906245565a910ull, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e35855771202aull, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa07032bbd1b8ull, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116b8d2d0c8ull, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c085141ab53ull, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774cdf8eeb99ull, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5e19b48a8ull, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3c5c95a63ull, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4ae3418acbull, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f7763e373ull, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3d6b2b8a3ull, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82ee5defb2fcull, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636f43172f60ull, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814a1f0ab72ull, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc702081a6439ecull, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffa23631e28ull, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506cebde82bde9ull, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7b2c67915ull, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2e372532bull, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0xca273eceea26619cull, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0xd186b8c721c0c207ull, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0xeada7dd6cde0eb1eull, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0xf57d4f7fee6ed178ull, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x06f067aa72176fbaull, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x0a637dc5a2c898a6ull, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x113f9804bef90daeull, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x1b710b35131c471bull, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x28db77f523047d84ull, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0x32caab7b40c72493ull, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x3c9ebe0a15c9bebcull, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x431d67c49c100d4cull, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x4cc5d4becb3e42b6ull, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0x597f299cfc657e2aull, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x5fcb6fab3ad6faecull, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x6c44198c4a475817ull, w15 += sigma1(w13) + w8 + sigma0(w0));\n \n     s[0] += a;\n     s[1] += b;\n@@ -260,19 +262,21 @@ void Transform(uint64_t *s, const unsigned char *chunk) {\n     s[7] += h;\n }\n \n-}  // namespace sha512\n+} // namespace sha512\n \n-}  // namespace\n+} // namespace\n \n \n ////// SHA-256\n \n-CSHA256::CSHA256() : bytes(0) {\n+CSHA256::CSHA256() : bytes(0)\n+{\n     sha256::Initialize(s);\n }\n \n-CSHA256& CSHA256::Write(const unsigned char *data, size_t len) {\n-    const unsigned char *end = data + len;\n+CSHA256& CSHA256::Write(const unsigned char* data, size_t len)\n+{\n+    const unsigned char* end = data + len;\n     size_t bufsize = bytes % 64;\n     if (bufsize && bufsize + len >= 64) {\n         // Fill the buffer, and process it.\n@@ -296,36 +300,40 @@ CSHA256& CSHA256::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CSHA256::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CSHA256::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     static const unsigned char pad[64] = {0x80};\n     unsigned char sizedesc[8];\n     WriteBE64(sizedesc, bytes << 3);\n     Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n     Write(sizedesc, 8);\n     WriteBE32(hash, s[0]);\n-    WriteBE32(hash+4, s[1]);\n-    WriteBE32(hash+8, s[2]);\n-    WriteBE32(hash+12, s[3]);\n-    WriteBE32(hash+16, s[4]);\n-    WriteBE32(hash+20, s[5]);\n-    WriteBE32(hash+24, s[6]);\n-    WriteBE32(hash+28, s[7]);\n+    WriteBE32(hash + 4, s[1]);\n+    WriteBE32(hash + 8, s[2]);\n+    WriteBE32(hash + 12, s[3]);\n+    WriteBE32(hash + 16, s[4]);\n+    WriteBE32(hash + 20, s[5]);\n+    WriteBE32(hash + 24, s[6]);\n+    WriteBE32(hash + 28, s[7]);\n }\n \n-CSHA256& CSHA256::Reset() {\n+CSHA256& CSHA256::Reset()\n+{\n     bytes = 0;\n     sha256::Initialize(s);\n     return *this;\n }\n \n ////// SHA-512\n \n-CSHA512::CSHA512() : bytes(0) {\n+CSHA512::CSHA512() : bytes(0)\n+{\n     sha512::Initialize(s);\n }\n \n-CSHA512& CSHA512::Write(const unsigned char *data, size_t len) {\n-    const unsigned char *end = data + len;\n+CSHA512& CSHA512::Write(const unsigned char* data, size_t len)\n+{\n+    const unsigned char* end = data + len;\n     size_t bufsize = bytes % 128;\n     if (bufsize && bufsize + len >= 128) {\n         // Fill the buffer, and process it.\n@@ -349,31 +357,34 @@ CSHA512& CSHA512::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CSHA512::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CSHA512::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     static const unsigned char pad[128] = {0x80};\n     unsigned char sizedesc[16] = {0x00};\n-    WriteBE64(sizedesc+8, bytes << 3);\n+    WriteBE64(sizedesc + 8, bytes << 3);\n     Write(pad, 1 + ((239 - (bytes % 128)) % 128));\n     Write(sizedesc, 16);\n     WriteBE64(hash, s[0]);\n-    WriteBE64(hash+8, s[1]);\n-    WriteBE64(hash+16, s[2]);\n-    WriteBE64(hash+24, s[3]);\n-    WriteBE64(hash+32, s[4]);\n-    WriteBE64(hash+40, s[5]);\n-    WriteBE64(hash+48, s[6]);\n-    WriteBE64(hash+56, s[7]);\n+    WriteBE64(hash + 8, s[1]);\n+    WriteBE64(hash + 16, s[2]);\n+    WriteBE64(hash + 24, s[3]);\n+    WriteBE64(hash + 32, s[4]);\n+    WriteBE64(hash + 40, s[5]);\n+    WriteBE64(hash + 48, s[6]);\n+    WriteBE64(hash + 56, s[7]);\n }\n \n-CSHA512& CSHA512::Reset() {\n+CSHA512& CSHA512::Reset()\n+{\n     bytes = 0;\n     sha512::Initialize(s);\n     return *this;\n }\n \n ////// HMAC-SHA-512\n \n-CHMAC_SHA512::CHMAC_SHA512(const unsigned char *key, size_t keylen) {\n+CHMAC_SHA512::CHMAC_SHA512(const unsigned char* key, size_t keylen)\n+{\n     unsigned char rkey[128];\n     if (keylen <= 128) {\n         memcpy(rkey, key, keylen);\n@@ -383,16 +394,17 @@ CHMAC_SHA512::CHMAC_SHA512(const unsigned char *key, size_t keylen) {\n         memset(rkey + 64, 0, 64);\n     }\n \n-    for (int n=0; n<128; n++)\n+    for (int n = 0; n < 128; n++)\n         rkey[n] ^= 0x5c;\n     outer.Write(rkey, 128);\n \n-    for (int n=0; n<128; n++)\n+    for (int n = 0; n < 128; n++)\n         rkey[n] ^= 0x5c ^ 0x36;\n     inner.Write(rkey, 128);\n }\n \n-void CHMAC_SHA512::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CHMAC_SHA512::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     unsigned char temp[64];\n     inner.Finalize(temp);\n     outer.Write(temp, 64).Finalize(hash);"
      },
      {
        "sha": "15ad5ac3830fe83ddbfc42a697623f59d9381c7c",
        "filename": "src/crypto/sha2.h",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha2.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf42c36e9963f9cf13704d8d74a9546f0db33d40/src/crypto/sha2.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.h?ref=cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "patch": "@@ -9,7 +9,8 @@\n #include <stdlib.h>\n \n /** A hasher class for SHA-256. */\n-class CSHA256 {\n+class CSHA256\n+{\n private:\n     uint32_t s[8];\n     unsigned char buf[64];\n@@ -19,13 +20,14 @@ class CSHA256 {\n     static const size_t OUTPUT_SIZE = 32;\n \n     CSHA256();\n-    CSHA256& Write(const unsigned char *data, size_t len);\n+    CSHA256& Write(const unsigned char* data, size_t len);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA256& Reset();\n };\n \n /** A hasher class for SHA-512. */\n-class CSHA512 {\n+class CSHA512\n+{\n private:\n     uint64_t s[8];\n     unsigned char buf[128];\n@@ -35,22 +37,24 @@ class CSHA512 {\n     static const size_t OUTPUT_SIZE = 64;\n \n     CSHA512();\n-    CSHA512& Write(const unsigned char *data, size_t len);\n+    CSHA512& Write(const unsigned char* data, size_t len);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA512& Reset();\n };\n \n /** A hasher class for HMAC-SHA-512. */\n-class CHMAC_SHA512 {\n+class CHMAC_SHA512\n+{\n private:\n     CSHA512 outer;\n     CSHA512 inner;\n \n public:\n     static const size_t OUTPUT_SIZE = 64;\n \n-    CHMAC_SHA512(const unsigned char *key, size_t keylen);\n-    CHMAC_SHA512& Write(const unsigned char *data, size_t len) {\n+    CHMAC_SHA512(const unsigned char* key, size_t keylen);\n+    CHMAC_SHA512& Write(const unsigned char* data, size_t len)\n+    {\n         inner.Write(data, len);\n         return *this;\n     }"
      }
    ]
  },
  {
    "sha": "e6beedc496093d98ba40500fd12bcb191c87bf6e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmJlZWRjNDk2MDkzZDk4YmE0MDUwMGZkMTJiY2IxOTFjODdiZjZl",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-22T12:41:54Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-25T07:16:45Z"
      },
      "message": "[Qt] add more NULL pointer checks in bitcoingui\n\n- add missing checks for clientModel and optionsModel\n- small cleanups for an #ifdef on Mac\n- remove an unneeded else",
      "tree": {
        "sha": "d6728f311c0823d9a209bdb0ee3d1e9d6153fc29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6728f311c0823d9a209bdb0ee3d1e9d6153fc29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6beedc496093d98ba40500fd12bcb191c87bf6e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6beedc496093d98ba40500fd12bcb191c87bf6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6beedc496093d98ba40500fd12bcb191c87bf6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6beedc496093d98ba40500fd12bcb191c87bf6e/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ea69592a2f261dba37d551c0ac77e93ce00b37c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea69592a2f261dba37d551c0ac77e93ce00b37c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea69592a2f261dba37d551c0ac77e93ce00b37c3"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "443bed14d706343632fe784d63fd433758fd4f0b",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6beedc496093d98ba40500fd12bcb191c87bf6e/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6beedc496093d98ba40500fd12bcb191c87bf6e/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=e6beedc496093d98ba40500fd12bcb191c87bf6e",
        "patch": "@@ -662,6 +662,9 @@ void BitcoinGUI::setNumConnections(int count)\n \n void BitcoinGUI::setNumBlocks(int count)\n {\n+    if(!clientModel)\n+        return;\n+\n     // Prevent orphan statusbar messages (e.g. hover Quit in main menu, wait until chain-sync starts -> garbelled text)\n     statusBar()->clearMessage();\n \n@@ -832,7 +835,7 @@ void BitcoinGUI::changeEvent(QEvent *e)\n #ifndef Q_OS_MAC // Ignored on Mac\n     if(e->type() == QEvent::WindowStateChange)\n     {\n-        if(clientModel && clientModel->getOptionsModel()->getMinimizeToTray())\n+        if(clientModel && clientModel->getOptionsModel() && clientModel->getOptionsModel()->getMinimizeToTray())\n         {\n             QWindowStateChangeEvent *wsevt = static_cast<QWindowStateChangeEvent*>(e);\n             if(!(wsevt->oldState() & Qt::WindowMinimized) && isMinimized())\n@@ -847,16 +850,16 @@ void BitcoinGUI::changeEvent(QEvent *e)\n \n void BitcoinGUI::closeEvent(QCloseEvent *event)\n {\n-    if(clientModel)\n-    {\n #ifndef Q_OS_MAC // Ignored on Mac\n+    if(clientModel && clientModel->getOptionsModel())\n+    {\n         if(!clientModel->getOptionsModel()->getMinimizeToTray() &&\n            !clientModel->getOptionsModel()->getMinimizeOnClose())\n         {\n             QApplication::quit();\n         }\n-#endif\n     }\n+#endif\n     QMainWindow::closeEvent(event);\n }\n \n@@ -917,8 +920,7 @@ bool BitcoinGUI::handlePaymentRequest(const SendCoinsRecipient& recipient)\n         gotoSendCoinsPage();\n         return true;\n     }\n-    else\n-        return false;\n+    return false;\n }\n \n void BitcoinGUI::setEncryptionStatus(int status)"
      }
    ]
  },
  {
    "sha": "c4998661e4e4365e079b51a872f2d555a5a7837c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDk5ODY2MWU0ZTQzNjVlMDc5YjUxYTg3MmYyZDU1NWE1YTc4Mzdj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T07:44:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T07:47:01Z"
      },
      "message": "Merge pull request #4958\n\ne6beedc [Qt] add more NULL pointer checks in bitcoingui (Philip Kaufmann)",
      "tree": {
        "sha": "d6728f311c0823d9a209bdb0ee3d1e9d6153fc29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6728f311c0823d9a209bdb0ee3d1e9d6153fc29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c4998661e4e4365e079b51a872f2d555a5a7837c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUI8h1AAoJEHSBCwEjRsmmsaYIAIcTIfCS7mY4jKo59Et3fga1\nQE80QHV2PiEx69Lpu/eOQcFkVmMmP/QdngGphUuI/OZKSWQ5To4DYDBAJsMfsn3k\npyy8d6D3AnSJlUJFgPBWd6s9hZLqH7Lbf8qkN53h9IARMO0c01rTBQSmmXEUMA+q\nDmgl51tO04yve5vVUa2+jTQ+/D9CQzlM2FGzmZlfivZ2Or5PM5Uy2jHQ4b9c8VlD\nBGdeNGDHh3ZaBc0Wt9Ta+ph9oAKcoAgTj8RJP+zi6pAOM2Fz5W6kJ2CYQNe8XBei\niwVYpgja/t1G/FRMEfwEr5ZWIYDP6TrAY2yJ7GkcU9NRkLCWiIfxsjYAAl5k3mc=\n=li2G\n-----END PGP SIGNATURE-----",
        "payload": "tree d6728f311c0823d9a209bdb0ee3d1e9d6153fc29\nparent ea69592a2f261dba37d551c0ac77e93ce00b37c3\nparent e6beedc496093d98ba40500fd12bcb191c87bf6e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411631090 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411631221 +0200\n\nMerge pull request #4958\n\ne6beedc [Qt] add more NULL pointer checks in bitcoingui (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4998661e4e4365e079b51a872f2d555a5a7837c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c4998661e4e4365e079b51a872f2d555a5a7837c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4998661e4e4365e079b51a872f2d555a5a7837c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea69592a2f261dba37d551c0ac77e93ce00b37c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea69592a2f261dba37d551c0ac77e93ce00b37c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea69592a2f261dba37d551c0ac77e93ce00b37c3"
      },
      {
        "sha": "e6beedc496093d98ba40500fd12bcb191c87bf6e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6beedc496093d98ba40500fd12bcb191c87bf6e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6beedc496093d98ba40500fd12bcb191c87bf6e"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "443bed14d706343632fe784d63fd433758fd4f0b",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c4998661e4e4365e079b51a872f2d555a5a7837c/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c4998661e4e4365e079b51a872f2d555a5a7837c/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=c4998661e4e4365e079b51a872f2d555a5a7837c",
        "patch": "@@ -662,6 +662,9 @@ void BitcoinGUI::setNumConnections(int count)\n \n void BitcoinGUI::setNumBlocks(int count)\n {\n+    if(!clientModel)\n+        return;\n+\n     // Prevent orphan statusbar messages (e.g. hover Quit in main menu, wait until chain-sync starts -> garbelled text)\n     statusBar()->clearMessage();\n \n@@ -832,7 +835,7 @@ void BitcoinGUI::changeEvent(QEvent *e)\n #ifndef Q_OS_MAC // Ignored on Mac\n     if(e->type() == QEvent::WindowStateChange)\n     {\n-        if(clientModel && clientModel->getOptionsModel()->getMinimizeToTray())\n+        if(clientModel && clientModel->getOptionsModel() && clientModel->getOptionsModel()->getMinimizeToTray())\n         {\n             QWindowStateChangeEvent *wsevt = static_cast<QWindowStateChangeEvent*>(e);\n             if(!(wsevt->oldState() & Qt::WindowMinimized) && isMinimized())\n@@ -847,16 +850,16 @@ void BitcoinGUI::changeEvent(QEvent *e)\n \n void BitcoinGUI::closeEvent(QCloseEvent *event)\n {\n-    if(clientModel)\n-    {\n #ifndef Q_OS_MAC // Ignored on Mac\n+    if(clientModel && clientModel->getOptionsModel())\n+    {\n         if(!clientModel->getOptionsModel()->getMinimizeToTray() &&\n            !clientModel->getOptionsModel()->getMinimizeOnClose())\n         {\n             QApplication::quit();\n         }\n-#endif\n     }\n+#endif\n     QMainWindow::closeEvent(event);\n }\n \n@@ -917,8 +920,7 @@ bool BitcoinGUI::handlePaymentRequest(const SendCoinsRecipient& recipient)\n         gotoSendCoinsPage();\n         return true;\n     }\n-    else\n-        return false;\n+    return false;\n }\n \n void BitcoinGUI::setEncryptionStatus(int status)"
      }
    ]
  },
  {
    "sha": "ff36cbe8d010bd17d7d8fe2ba9293864833884e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZjM2Y2JlOGQwMTBiZDE3ZDdkOGZlMmJhOTI5Mzg2NDgzMzg4NGUy",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jgarzik@bitpay.com",
        "date": "2014-09-15T01:54:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T08:09:21Z"
      },
      "message": "RPC getnetworkinfo: export local node's client sub-version string",
      "tree": {
        "sha": "919878e3de37a8f915d2f3b9d3076430d4223e1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/919878e3de37a8f915d2f3b9d3076430d4223e1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ff36cbe8d010bd17d7d8fe2ba9293864833884e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff36cbe8d010bd17d7d8fe2ba9293864833884e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ff36cbe8d010bd17d7d8fe2ba9293864833884e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff36cbe8d010bd17d7d8fe2ba9293864833884e2/comments",
    "author": null,
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4998661e4e4365e079b51a872f2d555a5a7837c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4998661e4e4365e079b51a872f2d555a5a7837c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4998661e4e4365e079b51a872f2d555a5a7837c"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fb159d96f6afe1992f15aa18dcff5a0348e70df4",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ff36cbe8d010bd17d7d8fe2ba9293864833884e2/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ff36cbe8d010bd17d7d8fe2ba9293864833884e2/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=ff36cbe8d010bd17d7d8fe2ba9293864833884e2",
        "patch": "@@ -11,6 +11,7 @@\n #include \"sync.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n+#include \"version.h\"\n \n #include <boost/foreach.hpp>\n \n@@ -393,6 +394,8 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n \n     Object obj;\n     obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n+    obj.push_back(Pair(\"subversion\",\n+        FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>())));\n     obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n     obj.push_back(Pair(\"localservices\",       strprintf(\"%016x\", nLocalServices)));\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));"
      }
    ]
  },
  {
    "sha": "58d4b232840ee52e67f73eda6c6bd3cc22355b37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGQ0YjIzMjg0MGVlNTJlNjdmNzNlZGE2YzZiZDNjYzIyMzU1YjM3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T08:17:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T08:17:29Z"
      },
      "message": "Merge pull request #4914\n\nff36cbe RPC getnetworkinfo: export local node's client sub-version string (Jeff Garzik)",
      "tree": {
        "sha": "919878e3de37a8f915d2f3b9d3076430d4223e1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/919878e3de37a8f915d2f3b9d3076430d4223e1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58d4b232840ee52e67f73eda6c6bd3cc22355b37",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUI8+ZAAoJEHSBCwEjRsmmqTsH/3hfR8DF40sB1An5g3AsZq+I\n9b9SQV78PtQVklZ8whv1SDTXcHuzn8PPiodBjV4nUCkeGHgg2B2fzhGhxEmiSOVs\nvL5meTh12RmHF0pIRPVttjAiRWPlnw8dIrG9oFjBu0Je9ZZHILFCFYrOQK+kWisr\nuDPwCE8WiRpJouDxAKkfm5vTJDQJ4zHvjsBORtraWByuXtYEOIJDYnTFGBbU3Gjw\nQd3sKGIYYl9YaDA022Q0SjhE/0cYKC4Z/EzS1YdUsXqlJAlgICRjOFVigkMu4SIO\ngvddV8qzCd+zmAsOWLItzTQr3Mkpzad6E8BCNkr4QnIWwY4rqPJscmCDCfKW6hQ=\n=Kq9G\n-----END PGP SIGNATURE-----",
        "payload": "tree 919878e3de37a8f915d2f3b9d3076430d4223e1a\nparent c4998661e4e4365e079b51a872f2d555a5a7837c\nparent ff36cbe8d010bd17d7d8fe2ba9293864833884e2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411633048 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411633049 +0200\n\nMerge pull request #4914\n\nff36cbe RPC getnetworkinfo: export local node's client sub-version string (Jeff Garzik)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58d4b232840ee52e67f73eda6c6bd3cc22355b37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58d4b232840ee52e67f73eda6c6bd3cc22355b37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58d4b232840ee52e67f73eda6c6bd3cc22355b37/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c4998661e4e4365e079b51a872f2d555a5a7837c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c4998661e4e4365e079b51a872f2d555a5a7837c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c4998661e4e4365e079b51a872f2d555a5a7837c"
      },
      {
        "sha": "ff36cbe8d010bd17d7d8fe2ba9293864833884e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff36cbe8d010bd17d7d8fe2ba9293864833884e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff36cbe8d010bd17d7d8fe2ba9293864833884e2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fb159d96f6afe1992f15aa18dcff5a0348e70df4",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58d4b232840ee52e67f73eda6c6bd3cc22355b37/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58d4b232840ee52e67f73eda6c6bd3cc22355b37/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=58d4b232840ee52e67f73eda6c6bd3cc22355b37",
        "patch": "@@ -11,6 +11,7 @@\n #include \"sync.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n+#include \"version.h\"\n \n #include <boost/foreach.hpp>\n \n@@ -393,6 +394,8 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n \n     Object obj;\n     obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n+    obj.push_back(Pair(\"subversion\",\n+        FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>())));\n     obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n     obj.push_back(Pair(\"localservices\",       strprintf(\"%016x\", nLocalServices)));\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));"
      }
    ]
  },
  {
    "sha": "29a9d4483e294205561905e207719666d3ccf309",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWE5ZDQ0ODNlMjk0MjA1NTYxOTA1ZTIwNzcxOTY2NmQzY2NmMzA5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T08:20:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T08:21:01Z"
      },
      "message": "Merge pull request #4966\n\nc8063b5 Fixing out of bounds asses error (ENikS)",
      "tree": {
        "sha": "c86e301b80909f8e56d8d7806da95c8ff1ccf42a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c86e301b80909f8e56d8d7806da95c8ff1ccf42a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29a9d4483e294205561905e207719666d3ccf309",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUI9BtAAoJEHSBCwEjRsmmDDcH/1XsVxsA9+Y31LnR+KwMAkCi\n9y1CKQfAfQ/FsH7zO0siWqYW0omerVgXTOXWD7N+XVVa9N/3kyZSoZ8v36Nu6j9B\nWT5auGuo33qEhj5qpvx4Nc5kXAZmDmiTOcv5XOKiScXOYYMD8EhrylZQCuiRClWo\n9w36DqJE8Bz5qqqo2NLLnXYG4p9BfSVH5rj70jjD1O3T52C/TZgGOsovGf0ze5Et\nyDmIRU1w/us9FHoyCp0Eu3x9gqrnLicftYgs7GpaT47jUv5flMZI1cLCmx1A/Q5T\nmCzGYZddAdRCRLLoR3SK68G0qXsa66qQ1sQVAfy9t/KIVgSdpfg+oPDOnuKzzZ0=\n=3ZxR\n-----END PGP SIGNATURE-----",
        "payload": "tree c86e301b80909f8e56d8d7806da95c8ff1ccf42a\nparent 58d4b232840ee52e67f73eda6c6bd3cc22355b37\nparent c8063b57124600ae4e8e2a65eab402d3c47babe2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411633217 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411633261 +0200\n\nMerge pull request #4966\n\nc8063b5 Fixing out of bounds asses error (ENikS)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a9d4483e294205561905e207719666d3ccf309",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29a9d4483e294205561905e207719666d3ccf309",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a9d4483e294205561905e207719666d3ccf309/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58d4b232840ee52e67f73eda6c6bd3cc22355b37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58d4b232840ee52e67f73eda6c6bd3cc22355b37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58d4b232840ee52e67f73eda6c6bd3cc22355b37"
      },
      {
        "sha": "c8063b57124600ae4e8e2a65eab402d3c47babe2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8063b57124600ae4e8e2a65eab402d3c47babe2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8063b57124600ae4e8e2a65eab402d3c47babe2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "68232a2ff110f03830530e54a325888c9a6963bb",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a9d4483e294205561905e207719666d3ccf309/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a9d4483e294205561905e207719666d3ccf309/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=29a9d4483e294205561905e207719666d3ccf309",
        "patch": "@@ -32,7 +32,7 @@ void TestVector(const Hasher &h, const In &in, const Out &out) {\n             size_t len = insecure_rand() % ((in.size() - pos + 1) / 2 + 1);\n             hasher.Write((unsigned char*)&in[pos], len);\n             pos += len;\n-            if (pos > 0 && pos + 2 * out.size() > in.size()) {\n+            if (pos > 0 && pos + 2 * out.size() > in.size() && pos < in.size()) {\n                 // Test that writing the rest at once to a copy of a hasher works.\n                 Hasher(hasher).Write((unsigned char*)&in[pos], in.size() - pos).Finalize(&hash[0]);\n                 BOOST_CHECK(hash == out);"
      }
    ]
  },
  {
    "sha": "35e5b5329aea82286ec1a53388a89dae1c835d2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNWU1YjUzMjlhZWE4MjI4NmVjMWE1MzM4OGE4OWRhZTFjODM1ZDJl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T08:52:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T08:54:54Z"
      },
      "message": "Merge pull request #4946\n\nc65cc8c build: fix release name strings for gitian builds (Cory Fields)",
      "tree": {
        "sha": "4be224806cfddd5864cdc8888ee9204e6cbd8e15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4be224806cfddd5864cdc8888ee9204e6cbd8e15"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35e5b5329aea82286ec1a53388a89dae1c835d2e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUI9heAAoJEHSBCwEjRsmmIs0IAI7FSZtxRtM6Y9M2WujhQOks\ne2E8GgXyGmD+BMcBprwYjO7TGbgCOPOwOzDJnb4xjFoM71ZG/sZlMaGut6EFfIKS\nBRqxflBu6GPVVtvs0g5cGIkFwfvQpwijQcMOYRVubpf6DLicU7A+Mkv27kk7bxOE\nxjVscQk+b1gFRqxfvwTA0TGdQJx1G1oIIWGVxjgsDs/eD8l6Cp+sEeLc3hTWkj3X\nzTGcmTa/bMPtTSZepb81ya1xQKNExuZmIrHfZk1rL4bHHLlSbtgvpozu5KR0tejV\nloGWd7xUOIJGWbATjn9d6ta0JTPIfy1wJaJzHJ6BXgAE5hhzFB1mXdOFtF0p/ms=\n=tNRU\n-----END PGP SIGNATURE-----",
        "payload": "tree 4be224806cfddd5864cdc8888ee9204e6cbd8e15\nparent 29a9d4483e294205561905e207719666d3ccf309\nparent c65cc8cde30dd34a81962fda51a754f1cc0bdde8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411635177 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411635294 +0200\n\nMerge pull request #4946\n\nc65cc8c build: fix release name strings for gitian builds (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35e5b5329aea82286ec1a53388a89dae1c835d2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35e5b5329aea82286ec1a53388a89dae1c835d2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35e5b5329aea82286ec1a53388a89dae1c835d2e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29a9d4483e294205561905e207719666d3ccf309",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a9d4483e294205561905e207719666d3ccf309",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29a9d4483e294205561905e207719666d3ccf309"
      },
      {
        "sha": "c65cc8cde30dd34a81962fda51a754f1cc0bdde8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c65cc8cde30dd34a81962fda51a754f1cc0bdde8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c65cc8cde30dd34a81962fda51a754f1cc0bdde8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "679566e5969af651aafa9f2daea0eefee239d80f",
        "filename": "share/genbuild.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35e5b5329aea82286ec1a53388a89dae1c835d2e/share/genbuild.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35e5b5329aea82286ec1a53388a89dae1c835d2e/share/genbuild.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/genbuild.sh?ref=35e5b5329aea82286ec1a53388a89dae1c835d2e",
        "patch": "@@ -16,7 +16,7 @@ fi\n DESC=\"\"\n SUFFIX=\"\"\n LAST_COMMIT_DATE=\"\"\n-if [ -e \"$(which git 2>/dev/null)\" -a -d \".git\" ]; then\n+if [ -e \"$(which git 2>/dev/null)\" -a $(git rev-parse --is-inside-work-tree 2>/dev/null) = \"true\" ]; then\n     # clean 'dirty' status of touched files that haven't been modified\n     git diff >/dev/null 2>/dev/null \n "
      }
    ]
  },
  {
    "sha": "346d5443f1b12a14fca90cc3ccbfa6ce94798aae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDZkNTQ0M2YxYjEyYTE0ZmNhOTBjYzNjY2JmYTZjZTk0Nzk4YWFl",
    "commit": {
      "author": {
        "name": "Janusz Lenar",
        "email": "malleor@users.noreply.github.com",
        "date": "2014-09-14T12:09:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T09:04:27Z"
      },
      "message": "Fixed the broken `brew` shell command",
      "tree": {
        "sha": "041a3bdea8653f5f5cc32fe01cb8703a16f74fd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/041a3bdea8653f5f5cc32fe01cb8703a16f74fd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/346d5443f1b12a14fca90cc3ccbfa6ce94798aae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUI9qdAAoJEHSBCwEjRsmmWcQH/3W2+vYlm8vIx8tZrLIVdcRK\nZK5zdnmWwqXphxNT4Jl9eXKCrzMswLvsAnPA2NMAaA7UqosLnxcZP6SOY+gt6Ua2\n3Gev9ScYinjEsjKLtnduO+dHFsmbDPKR0hkVGU/PEf7sktfxjoU4/NHiR00lOp/J\ngzNzv8cykNAQRAtx1dwPJ91GQ3vR2hZbnGLvg+t0WZSqpOY9nD/wYPwAPHMDZroM\nVDg0OSjAAH58xyyhC2m6QDfmwPL+E3ysNjfJE7QBt17jJ8jgs6LNM+zzC6LGkApz\nUaFFwpcVmBRXWE/lMLKVst26kBay/lFJu8LMD5w6TyA+7OA1bw2qnORZBqurfvs=\n=DE7c\n-----END PGP SIGNATURE-----",
        "payload": "tree 041a3bdea8653f5f5cc32fe01cb8703a16f74fd9\nparent 35e5b5329aea82286ec1a53388a89dae1c835d2e\nauthor Janusz Lenar <malleor@users.noreply.github.com> 1410696553 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411635867 +0200\n\nFixed the broken `brew` shell command\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/346d5443f1b12a14fca90cc3ccbfa6ce94798aae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/346d5443f1b12a14fca90cc3ccbfa6ce94798aae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/346d5443f1b12a14fca90cc3ccbfa6ce94798aae/comments",
    "author": {
      "login": "malleor",
      "id": 979643,
      "node_id": "MDQ6VXNlcjk3OTY0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/979643?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/malleor",
      "html_url": "https://github.com/malleor",
      "followers_url": "https://api.github.com/users/malleor/followers",
      "following_url": "https://api.github.com/users/malleor/following{/other_user}",
      "gists_url": "https://api.github.com/users/malleor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/malleor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/malleor/subscriptions",
      "organizations_url": "https://api.github.com/users/malleor/orgs",
      "repos_url": "https://api.github.com/users/malleor/repos",
      "events_url": "https://api.github.com/users/malleor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/malleor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35e5b5329aea82286ec1a53388a89dae1c835d2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35e5b5329aea82286ec1a53388a89dae1c835d2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35e5b5329aea82286ec1a53388a89dae1c835d2e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0364d3a01b507dccacd322d71c24b5f24810af2c",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/346d5443f1b12a14fca90cc3ccbfa6ce94798aae/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/346d5443f1b12a14fca90cc3ccbfa6ce94798aae/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=346d5443f1b12a14fca90cc3ccbfa6ce94798aae",
        "patch": "@@ -50,7 +50,7 @@ Running this command takes you into brew's interactive mode, which allows you to\n $ brew install https://raw.github.com/mxcl/homebrew/master/Library/Formula/berkeley-db4.rb -\u2013without-java \n ```\n \n-These rest of these commands are run inside brew interactive mode:\n+The rest of these commands are run inside brew interactive mode:\n ```\n /private/tmp/berkeley-db4-UGpd0O/db-4.8.30 $ cd ..\n /private/tmp/berkeley-db4-UGpd0O $ db-4.8.30/dist/configure --prefix=/usr/local/Cellar/berkeley-db4/4.8.30 --mandir=/usr/local/Cellar/berkeley-db4/4.8.30/share/man --enable-cxx\n@@ -61,7 +61,7 @@ These rest of these commands are run inside brew interactive mode:\n \n After exiting, you'll get a warning that the install is keg-only, which means it wasn't symlinked to `/usr/local`.  You don't need it to link it to build bitcoin, but if you want to, here's how:\n \n-    $ brew --force link berkeley-db4\n+    $ brew link --force berkeley-db4\n \n \n ### Building `bitcoind`"
      }
    ]
  },
  {
    "sha": "82e370b4b0d3ddd31f7c108f4f718b291bce870a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmUzNzBiNGIwZDNkZGQzMWY3YzEwOGY0ZjcxOGIyOTFiY2U4NzBh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T09:09:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T09:21:43Z"
      },
      "message": "Merge pull request #4782\n\n2e5361b remove code below asserts in limitedmap.h (fixes a ToDo) (Philip Kaufmann)",
      "tree": {
        "sha": "6c97d0d2d567e3bfa0210492bb4ee97bf0851f24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c97d0d2d567e3bfa0210492bb4ee97bf0851f24"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82e370b4b0d3ddd31f7c108f4f718b291bce870a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUI96nAAoJEHSBCwEjRsmmCI0IAMdAF9p6ynNOjXjDLtffOFeE\nfxw0FqqN9CVbaP2JWTH92O8RvVzbtgwLYQLjY5AG0bGnS9pI9bWNcnUqaXxtusFv\nZqk2ApTqEbQg2izSkTpGWRC6TjppQP5eeRLrZPqUtMLlGRTArjvRH1yL0PR3tm7E\nI8YOubJRubvZUVAGIT69GcD0qQvYYlFRK3SkZJ66f3IFPzMMxLAWOLcDHH9X2e7S\nLwz3oywP1nmxb1f5SyhSTbEKM1s/E6wYioGyMlLmGcrJQWy6oOMSdVp6lZ9O625b\n+hjIUOlN4dbUz07R8ZmoCuKYOBLmpIqQ5GcDwuOoASN+WzKWF/ciYJZdCpZEMIQ=\n=reMO\n-----END PGP SIGNATURE-----",
        "payload": "tree 6c97d0d2d567e3bfa0210492bb4ee97bf0851f24\nparent 346d5443f1b12a14fca90cc3ccbfa6ce94798aae\nparent 2e5361b9c20517a22a4d1fdae3077d23800ecba7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411636196 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411636903 +0200\n\nMerge pull request #4782\n\n2e5361b remove code below asserts in limitedmap.h (fixes a ToDo) (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e370b4b0d3ddd31f7c108f4f718b291bce870a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82e370b4b0d3ddd31f7c108f4f718b291bce870a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e370b4b0d3ddd31f7c108f4f718b291bce870a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "346d5443f1b12a14fca90cc3ccbfa6ce94798aae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/346d5443f1b12a14fca90cc3ccbfa6ce94798aae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/346d5443f1b12a14fca90cc3ccbfa6ce94798aae"
      },
      {
        "sha": "2e5361b9c20517a22a4d1fdae3077d23800ecba7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e5361b9c20517a22a4d1fdae3077d23800ecba7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e5361b9c20517a22a4d1fdae3077d23800ecba7"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 6,
      "deletions": 9
    },
    "files": [
      {
        "sha": "03727d7c42566cdc00c209b91dd0f17bbaa45a39",
        "filename": "src/limitedmap.h",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82e370b4b0d3ddd31f7c108f4f718b291bce870a/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82e370b4b0d3ddd31f7c108f4f718b291bce870a/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=82e370b4b0d3ddd31f7c108f4f718b291bce870a",
        "patch": "@@ -1,11 +1,11 @@\n-// Copyright (c) 2012 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2012-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_LIMITEDMAP_H\n #define BITCOIN_LIMITEDMAP_H\n \n-#include <assert.h> // TODO: remove\n+#include <assert.h>\n #include <map>\n \n /** STL-like map container that only keeps the N elements with the highest value. */\n@@ -59,12 +59,11 @@ class limitedmap\n                 return;\n             }\n         // Shouldn't ever get here\n-        assert(0); //TODO remove me\n-        map.erase(itTarget);\n+        assert(0);\n     }\n     void update(const_iterator itIn, const mapped_type& v)\n     {\n-        //TODO: When we switch to C++11, use map.erase(itIn, itIn) to get the non-const iterator\n+        // TODO: When we switch to C++11, use map.erase(itIn, itIn) to get the non-const iterator.\n         iterator itTarget = map.find(itIn->first);\n         if (itTarget == map.end())\n             return;\n@@ -77,9 +76,7 @@ class limitedmap\n                 return;\n             }\n         // Shouldn't ever get here\n-        assert(0); //TODO remove me\n-        itTarget->second = v;\n-        rmap.insert(make_pair(v, itTarget));\n+        assert(0);\n     }\n     size_type max_size() const { return nMaxSize; }\n     size_type max_size(size_type s)"
      }
    ]
  },
  {
    "sha": "8152f4efd8d2048adec55e82ddeddc5054407a6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTUyZjRlZmQ4ZDIwNDhhZGVjNTVlODJkZGVkZGM1MDU0NDA3YTZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T09:28:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T09:31:10Z"
      },
      "message": "Merge pull request #4967\n\n459a2d2 Avoiding referencing elements of an empty vector (ENikS)",
      "tree": {
        "sha": "cb9f52a0d064fee1dd0165323b85fb7288204bc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb9f52a0d064fee1dd0165323b85fb7288204bc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8152f4efd8d2048adec55e82ddeddc5054407a6f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUI+DeAAoJEHSBCwEjRsmmQUQIAIPabmrq/mTcKqONIbx3mUu+\nznHaABgtYCuX7A2Mc25EWtVGIPRSt6DvI1VQLdETjQ9MNybWBby+dqhxIk6w1znM\nXgM7XHBue2qOB9n/CYluSpR2R+dWgNZ49qlTSWphjN4ba76TZXKkNy8rMbS/BGNL\n9NLMWJo5Nh3zmN8OEJ+qJRNBysoduU8CcJROqBju9SsSSyXt/+LNMNxz9eQSh3nT\nGSXOjp+74gfZXyzmQrDcm8TccPvJ4li/deo4ZwdT6hZdQNAMOzcPpwnEeCAk+m/h\nzontrZ3xayao3EiP3xmbN26nCobCsaxvs+ixHtNBsvC27N4oBGXD9UY6ntyCN5Y=\n=+aX9\n-----END PGP SIGNATURE-----",
        "payload": "tree cb9f52a0d064fee1dd0165323b85fb7288204bc5\nparent 82e370b4b0d3ddd31f7c108f4f718b291bce870a\nparent 459a2d25e0c91d1650974900a902285bedb85f39\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411637334 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411637470 +0200\n\nMerge pull request #4967\n\n459a2d2 Avoiding referencing elements of an empty vector (ENikS)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8152f4efd8d2048adec55e82ddeddc5054407a6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8152f4efd8d2048adec55e82ddeddc5054407a6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8152f4efd8d2048adec55e82ddeddc5054407a6f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82e370b4b0d3ddd31f7c108f4f718b291bce870a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82e370b4b0d3ddd31f7c108f4f718b291bce870a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82e370b4b0d3ddd31f7c108f4f718b291bce870a"
      },
      {
        "sha": "459a2d25e0c91d1650974900a902285bedb85f39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/459a2d25e0c91d1650974900a902285bedb85f39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/459a2d25e0c91d1650974900a902285bedb85f39"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 36,
      "deletions": 33
    },
    "files": [
      {
        "sha": "218607a6fdfc9af9947ea5791edb9ffcf1c7e2c3",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 33,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8152f4efd8d2048adec55e82ddeddc5054407a6f/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8152f4efd8d2048adec55e82ddeddc5054407a6f/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=8152f4efd8d2048adec55e82ddeddc5054407a6f",
        "patch": "@@ -9,45 +9,48 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n {\n     // The following is MurmurHash3 (x86_32), see http://code.google.com/p/smhasher/source/browse/trunk/MurmurHash3.cpp\n     uint32_t h1 = nHashSeed;\n-    const uint32_t c1 = 0xcc9e2d51;\n-    const uint32_t c2 = 0x1b873593;\n+    if (vDataToHash.size() > 0)\n+    {\n+        const uint32_t c1 = 0xcc9e2d51;\n+        const uint32_t c2 = 0x1b873593;\n \n-    const int nblocks = vDataToHash.size() / 4;\n+        const int nblocks = vDataToHash.size() / 4;\n \n-    //----------\n-    // body\n-    const uint32_t* blocks = (const uint32_t*)(&vDataToHash[0] + nblocks * 4);\n+        //----------\n+        // body\n+        const uint32_t* blocks = (const uint32_t*)(&vDataToHash[0] + nblocks * 4);\n \n-    for (int i = -nblocks; i; i++) {\n-        uint32_t k1 = blocks[i];\n+        for (int i = -nblocks; i; i++) {\n+            uint32_t k1 = blocks[i];\n \n-        k1 *= c1;\n-        k1 = ROTL32(k1, 15);\n-        k1 *= c2;\n+            k1 *= c1;\n+            k1 = ROTL32(k1, 15);\n+            k1 *= c2;\n \n-        h1 ^= k1;\n-        h1 = ROTL32(h1, 13);\n-        h1 = h1 * 5 + 0xe6546b64;\n-    }\n+            h1 ^= k1;\n+            h1 = ROTL32(h1, 13);\n+            h1 = h1 * 5 + 0xe6546b64;\n+        }\n \n-    //----------\n-    // tail\n-    const uint8_t* tail = (const uint8_t*)(&vDataToHash[0] + nblocks * 4);\n-\n-    uint32_t k1 = 0;\n-\n-    switch (vDataToHash.size() & 3) {\n-    case 3:\n-        k1 ^= tail[2] << 16;\n-    case 2:\n-        k1 ^= tail[1] << 8;\n-    case 1:\n-        k1 ^= tail[0];\n-        k1 *= c1;\n-        k1 = ROTL32(k1, 15);\n-        k1 *= c2;\n-        h1 ^= k1;\n-    };\n+        //----------\n+        // tail\n+        const uint8_t* tail = (const uint8_t*)(&vDataToHash[0] + nblocks * 4);\n+\n+        uint32_t k1 = 0;\n+\n+        switch (vDataToHash.size() & 3) {\n+        case 3:\n+            k1 ^= tail[2] << 16;\n+        case 2:\n+            k1 ^= tail[1] << 8;\n+        case 1:\n+            k1 ^= tail[0];\n+            k1 *= c1;\n+            k1 = ROTL32(k1, 15);\n+            k1 *= c2;\n+            h1 ^= k1;\n+        };\n+    }\n \n     //----------\n     // finalization"
      }
    ]
  },
  {
    "sha": "375cb4c253091edea03d9df66b66a93c1040bd9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzVjYjRjMjUzMDkxZWRlYTAzZDlkZjY2YjY2YTkzYzEwNDBiZDlj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T09:31:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T09:31:53Z"
      },
      "message": "Merge pull request #4959\n\nbb26e2c [Qt] minor changes in splashscreen.cpp (Philip Kaufmann)",
      "tree": {
        "sha": "cf0e1cfe326cdb9d78d62b3db3c2b6cf62b77087",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf0e1cfe326cdb9d78d62b3db3c2b6cf62b77087"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/375cb4c253091edea03d9df66b66a93c1040bd9c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUI+EJAAoJEHSBCwEjRsmm4dEH/2jy92DcDw6TqUvKvr1+Viy9\n/BtYPTSFPY58Ktc7n+DHKr8ivGYbCq1rUv4kOrNNJ7Xf7XPATnUERVLfYfZOtE7r\nMWcU0Kybg7Ws3FUMRRwnZBKx+aWQDsSeRKCQh6XaKWe9L0pIxWyDuXlD5J1L3xBd\n9HH6OewZgvA0yVrouRI/QriMDc7mikkXJrl2NBRVd9QJSvTfzzWDQ6frjpI+gygZ\nHMyy+v64vqshQR9DmXxb6ADCMOlTBgnukqR6qBG0iUNc8KPuqBX0Wls9Q4TfF134\nCSu/y1Cww2bWoS7W8h4KriubHVJTSo/zbkBQtTwcUZ3+GRwBpFYi6wiol6eKBT4=\n=B+Th\n-----END PGP SIGNATURE-----",
        "payload": "tree cf0e1cfe326cdb9d78d62b3db3c2b6cf62b77087\nparent 8152f4efd8d2048adec55e82ddeddc5054407a6f\nparent bb26e2c896a92b7d9376e2a903ebc9a1825b92d8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411637506 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411637513 +0200\n\nMerge pull request #4959\n\nbb26e2c [Qt] minor changes in splashscreen.cpp (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/375cb4c253091edea03d9df66b66a93c1040bd9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/375cb4c253091edea03d9df66b66a93c1040bd9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/375cb4c253091edea03d9df66b66a93c1040bd9c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8152f4efd8d2048adec55e82ddeddc5054407a6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8152f4efd8d2048adec55e82ddeddc5054407a6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8152f4efd8d2048adec55e82ddeddc5054407a6f"
      },
      {
        "sha": "bb26e2c896a92b7d9376e2a903ebc9a1825b92d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb26e2c896a92b7d9376e2a903ebc9a1825b92d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb26e2c896a92b7d9376e2a903ebc9a1825b92d8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4fe610794f79c971620c12f7105271e7d4de7ba9",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/375cb4c253091edea03d9df66b66a93c1040bd9c/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/375cb4c253091edea03d9df66b66a93c1040bd9c/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=375cb4c253091edea03d9df66b66a93c1040bd9c",
        "patch": "@@ -22,8 +22,6 @@\n SplashScreen::SplashScreen(Qt::WindowFlags f, bool isTestNet) :\n     QWidget(0, f), curAlignment(0)\n {\n-    //setAutoFillBackground(true);\n-\n     // set reference point, paddings\n     int paddingRight            = 50;\n     int paddingTop              = 50;\n@@ -114,6 +112,7 @@ SplashScreen::~SplashScreen()\n \n void SplashScreen::slotFinish(QWidget *mainWin)\n {\n+    Q_UNUSED(mainWin);\n     hide();\n }\n \n@@ -180,4 +179,3 @@ void SplashScreen::closeEvent(QCloseEvent *event)\n {\n     event->ignore();\n }\n-"
      }
    ]
  },
  {
    "sha": "219372f1dd504b0e187da88e3c0adf25a7e6b8d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTkzNzJmMWRkNTA0YjBlMTg3ZGE4OGUzYzBhZGYyNWE3ZTZiOGQy",
    "commit": {
      "author": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-23T17:30:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T09:46:52Z"
      },
      "message": "script: Fix reference into empty vector run time exception\n\nEdit by laanwj: `begin_ptr(sourcedata) + sourcedata.size()` -> `end_ptr(sourcedata)`",
      "tree": {
        "sha": "c221e25eb0dffeebbf4bbdb81bf9ee85099843c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c221e25eb0dffeebbf4bbdb81bf9ee85099843c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/219372f1dd504b0e187da88e3c0adf25a7e6b8d2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUI+TWAAoJEHSBCwEjRsmmANsH/0sSdJFXxxRr7aBoj0LIUj4g\nBUSW9OhBICY8Bpx8gpEp6aYJVLA5uYHunNTmOuCcDfao/poFtIKRXpmmV7uZDTgi\nleUTm13kpRVD7mAUxAroigk9KLdY4p/02bPEmTVZW6S/FPiWRCaDJHTNaNrJJ3gx\nuizdfzuNWkwWsvRRVkBEHLJoRgIGBfkhL5vGH4yT8xMQ8sfVH+jsV9ag+TausaNJ\n4Ulm1X/MEv2RGSH0/0nD7H8AyM/Sd0DAPod0W528sCGsD8l7Bz7Uix2F113kMzVy\n7W3MAkp4+dltn+lDWg9AOo6owNYEJc+PLV7dZCGlaTukqpPoy9eSe3DWMeVZaWk=\n=aPXe\n-----END PGP SIGNATURE-----",
        "payload": "tree c221e25eb0dffeebbf4bbdb81bf9ee85099843c4\nparent 35ee2dac6736e23be3fdd584ba0e321e54ff8f61\nauthor ENikS <evgeni@eniks.com> 1411493427 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411638412 +0200\n\nscript: Fix reference into empty vector run time exception\n\nEdit by laanwj: `begin_ptr(sourcedata) + sourcedata.size()` -> `end_ptr(sourcedata)`\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/219372f1dd504b0e187da88e3c0adf25a7e6b8d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/219372f1dd504b0e187da88e3c0adf25a7e6b8d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/219372f1dd504b0e187da88e3c0adf25a7e6b8d2/comments",
    "author": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35ee2dac6736e23be3fdd584ba0e321e54ff8f61"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d742fb9eb9e5ca07ed2e54dd5e9cc4bf37764c52",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/219372f1dd504b0e187da88e3c0adf25a7e6b8d2/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/219372f1dd504b0e187da88e3c0adf25a7e6b8d2/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=219372f1dd504b0e187da88e3c0adf25a7e6b8d2",
        "patch": "@@ -637,19 +637,19 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     valtype& vch = stacktop(-1);\n                     valtype vchHash((opcode == OP_RIPEMD160 || opcode == OP_SHA1 || opcode == OP_HASH160) ? 20 : 32);\n                     if (opcode == OP_RIPEMD160)\n-                        CRIPEMD160().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                        CRIPEMD160().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n                     else if (opcode == OP_SHA1)\n-                        CSHA1().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                        CSHA1().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n                     else if (opcode == OP_SHA256)\n-                        CSHA256().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                        CSHA256().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n                     else if (opcode == OP_HASH160)\n-                        CHash160().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                        CHash160().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n                     else if (opcode == OP_HASH256)\n-                        CHash256().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                        CHash256().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n                     popstack(stack);\n                     stack.push_back(vchHash);\n                 }\n-                break;\n+                break;                                   \n \n                 case OP_CODESEPARATOR:\n                 {"
      },
      {
        "sha": "58fffb6df40c4650f958750a6321a7dc3ed06f84",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/219372f1dd504b0e187da88e3c0adf25a7e6b8d2/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/219372f1dd504b0e187da88e3c0adf25a7e6b8d2/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=219372f1dd504b0e187da88e3c0adf25a7e6b8d2",
        "patch": "@@ -40,7 +40,7 @@ BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n         std::vector<unsigned char> sourcedata = ParseHex(test[0].get_str());\n         std::string base58string = test[1].get_str();\n         BOOST_CHECK_MESSAGE(\n-                    EncodeBase58(&sourcedata[0], &sourcedata[sourcedata.size()]) == base58string,\n+                    EncodeBase58(begin_ptr(sourcedata), end_ptr(sourcedata)) == base58string,\n                     strTest);\n     }\n }"
      }
    ]
  },
  {
    "sha": "b50e5fe099b3e9d8ece46b239ce930750df2120e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTBlNWZlMDk5YjNlOWQ4ZWNlNDZiMjM5Y2U5MzA3NTBkZjIxMjBl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T09:48:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T09:48:33Z"
      },
      "message": "Merge pull request #4968\n\n219372f script: Fix reference into empty vector run time exception (ENikS)",
      "tree": {
        "sha": "d50310f107c8edf2668d0d7fc48a5bddad77c37f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d50310f107c8edf2668d0d7fc48a5bddad77c37f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b50e5fe099b3e9d8ece46b239ce930750df2120e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUI+TxAAoJEHSBCwEjRsmmkPoH/iwQGTUaATw76Yt9g1yz0D36\n5+tL3+RRvGcmQ8oDtFLK6TIm9J60i8x5MYj6/35VKpKKbp1VihnU159PT3CGESdY\nsIu718+7IEZ3Lha2HA53g2lL7ezSqIE4ODJE4ogaxbhidhA6TPSGzR1VMBweuGrY\nt4ZsrXmDZh9ibQ8N021OcA19DBF+JVKf+yRvFfqTMlCFYg77yWtPoA4XenmSOFl2\nW3fSijVDvVM9dGdWSk/w0slQ6Z53bTf2NRlF5bsuapsAUtNHUvWmnaO3zJbItcTP\n2j35WhRr2TfsnKuoasDwAQgsxSBO2kYlM3CV60Z5nEmoY/M/03/WpJ9nPsxpe6E=\n=xHOD\n-----END PGP SIGNATURE-----",
        "payload": "tree d50310f107c8edf2668d0d7fc48a5bddad77c37f\nparent 375cb4c253091edea03d9df66b66a93c1040bd9c\nparent 219372f1dd504b0e187da88e3c0adf25a7e6b8d2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411638512 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411638513 +0200\n\nMerge pull request #4968\n\n219372f script: Fix reference into empty vector run time exception (ENikS)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b50e5fe099b3e9d8ece46b239ce930750df2120e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b50e5fe099b3e9d8ece46b239ce930750df2120e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b50e5fe099b3e9d8ece46b239ce930750df2120e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "375cb4c253091edea03d9df66b66a93c1040bd9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/375cb4c253091edea03d9df66b66a93c1040bd9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/375cb4c253091edea03d9df66b66a93c1040bd9c"
      },
      {
        "sha": "219372f1dd504b0e187da88e3c0adf25a7e6b8d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/219372f1dd504b0e187da88e3c0adf25a7e6b8d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/219372f1dd504b0e187da88e3c0adf25a7e6b8d2"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d742fb9eb9e5ca07ed2e54dd5e9cc4bf37764c52",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b50e5fe099b3e9d8ece46b239ce930750df2120e/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b50e5fe099b3e9d8ece46b239ce930750df2120e/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=b50e5fe099b3e9d8ece46b239ce930750df2120e",
        "patch": "@@ -637,19 +637,19 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     valtype& vch = stacktop(-1);\n                     valtype vchHash((opcode == OP_RIPEMD160 || opcode == OP_SHA1 || opcode == OP_HASH160) ? 20 : 32);\n                     if (opcode == OP_RIPEMD160)\n-                        CRIPEMD160().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                        CRIPEMD160().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n                     else if (opcode == OP_SHA1)\n-                        CSHA1().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                        CSHA1().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n                     else if (opcode == OP_SHA256)\n-                        CSHA256().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                        CSHA256().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n                     else if (opcode == OP_HASH160)\n-                        CHash160().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                        CHash160().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n                     else if (opcode == OP_HASH256)\n-                        CHash256().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n+                        CHash256().Write(begin_ptr(vch), vch.size()).Finalize(begin_ptr(vchHash));\n                     popstack(stack);\n                     stack.push_back(vchHash);\n                 }\n-                break;\n+                break;                                   \n \n                 case OP_CODESEPARATOR:\n                 {"
      },
      {
        "sha": "58fffb6df40c4650f958750a6321a7dc3ed06f84",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b50e5fe099b3e9d8ece46b239ce930750df2120e/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b50e5fe099b3e9d8ece46b239ce930750df2120e/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=b50e5fe099b3e9d8ece46b239ce930750df2120e",
        "patch": "@@ -40,7 +40,7 @@ BOOST_AUTO_TEST_CASE(base58_EncodeBase58)\n         std::vector<unsigned char> sourcedata = ParseHex(test[0].get_str());\n         std::string base58string = test[1].get_str();\n         BOOST_CHECK_MESSAGE(\n-                    EncodeBase58(&sourcedata[0], &sourcedata[sourcedata.size()]) == base58string,\n+                    EncodeBase58(begin_ptr(sourcedata), end_ptr(sourcedata)) == base58string,\n                     strTest);\n     }\n }"
      }
    ]
  },
  {
    "sha": "d14d7deff0a93d81946abec671dc47c967c9b027",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTRkN2RlZmYwYTkzZDgxOTQ2YWJlYzY3MWRjNDdjOTY3YzliMDI3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T10:42:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T10:45:46Z"
      },
      "message": "SanitizeString: allow '(' and ')'\n\n'(' and ')' are valid in user agent strings, so should be reported\nas such in RPC `getpeerinfo`.\n\nFixes #4537.",
      "tree": {
        "sha": "cfb23112fcc8d212516fe8e159d337b9ef46b221",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfb23112fcc8d212516fe8e159d337b9ef46b221"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d14d7deff0a93d81946abec671dc47c967c9b027",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d14d7deff0a93d81946abec671dc47c967c9b027",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d14d7deff0a93d81946abec671dc47c967c9b027",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d14d7deff0a93d81946abec671dc47c967c9b027/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b50e5fe099b3e9d8ece46b239ce930750df2120e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b50e5fe099b3e9d8ece46b239ce930750df2120e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b50e5fe099b3e9d8ece46b239ce930750df2120e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b9e64c5fe10caed49751325d8eefde0284629360",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d14d7deff0a93d81946abec671dc47c967c9b027/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d14d7deff0a93d81946abec671dc47c967c9b027/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=d14d7deff0a93d81946abec671dc47c967c9b027",
        "patch": "@@ -16,7 +16,7 @@ using namespace std;\n \n // safeChars chosen to allow simple messages/URLs/email addresses, but avoid anything\n // even possibly remotely dangerous like & or >\n-static string safeChars(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 .,;_/:?@\");\n+static string safeChars(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 .,;_/:?@()\");\n string SanitizeString(const string& str)\n {\n     string strResult;"
      }
    ]
  },
  {
    "sha": "20a11ffabf0c6936ab2dbb7cfda676996318650a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMGExMWZmYWJmMGM2OTM2YWIyZGJiN2NmZGE2NzY5OTYzMTg2NTBh",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-25T07:03:30Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-25T11:49:49Z"
      },
      "message": "minor variable init changes in init.cpp\n\n- explicit init of pcoinsdbview and pwalletMain (even if not needed, as\n  globals are init to NULL, it seems cleaner)\n- remove check if (pwalletMain) in Shutdown() as delete is valid even if\n  pwalletMain is NULL",
      "tree": {
        "sha": "a660cad30bf1e7f1044bc4f5e09e59bffe56c634",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a660cad30bf1e7f1044bc4f5e09e59bffe56c634"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20a11ffabf0c6936ab2dbb7cfda676996318650a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20a11ffabf0c6936ab2dbb7cfda676996318650a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20a11ffabf0c6936ab2dbb7cfda676996318650a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20a11ffabf0c6936ab2dbb7cfda676996318650a/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "b50e5fe099b3e9d8ece46b239ce930750df2120e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b50e5fe099b3e9d8ece46b239ce930750df2120e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b50e5fe099b3e9d8ece46b239ce930750df2120e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "87b5ae7a44d8ea039c7e17c5f6b578bb11cb041a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20a11ffabf0c6936ab2dbb7cfda676996318650a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20a11ffabf0c6936ab2dbb7cfda676996318650a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=20a11ffabf0c6936ab2dbb7cfda676996318650a",
        "patch": "@@ -45,7 +45,7 @@ using namespace boost;\n using namespace std;\n \n #ifdef ENABLE_WALLET\n-CWallet* pwalletMain;\n+CWallet* pwalletMain = NULL;\n #endif\n \n #ifdef WIN32\n@@ -109,7 +109,7 @@ bool ShutdownRequested()\n     return fRequestShutdown;\n }\n \n-static CCoinsViewDB *pcoinsdbview;\n+static CCoinsViewDB *pcoinsdbview = NULL;\n \n void Shutdown()\n {\n@@ -165,8 +165,8 @@ void Shutdown()\n #endif\n     UnregisterAllWallets();\n #ifdef ENABLE_WALLET\n-    if (pwalletMain)\n-        delete pwalletMain;\n+    delete pwalletMain;\n+    pwalletMain = NULL;\n #endif\n     LogPrintf(\"%s: done\\n\", __func__);\n }\n@@ -701,6 +701,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     fIsBareMultisigStd = GetArg(\"-permitbaremultisig\", true) != 0;\n \n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n+\n     // Sanity check\n     if (!InitSanityCheck())\n         return InitError(_(\"Initialization sanity check failed. Bitcoin Core is shutting down.\"));"
      }
    ]
  },
  {
    "sha": "1e7350486582fafc651d07a43d209d30eaaef1d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTczNTA0ODY1ODJmYWZjNjUxZDA3YTQzZDIwOWQzMGVhYWVmMWQ3",
    "commit": {
      "author": {
        "name": "ENikS",
        "email": "evgeni@eniks.com",
        "date": "2014-09-02T21:36:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T13:24:36Z"
      },
      "message": "Fixing C4146 warning\n\nRebased-By: Wladimir J. van der Laan <laanwj@gmail.com>",
      "tree": {
        "sha": "8d1107667889fb581280045b7da1c64618798246",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d1107667889fb581280045b7da1c64618798246"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e7350486582fafc651d07a43d209d30eaaef1d7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUJBeVAAoJEHSBCwEjRsmmNpYIAI93qSC8qb3boJhlCXFcURA7\n2BR8HbqzOd2IrrrFiGtaeiRBKWh6KBTjKp5LBHAfBoDjvgy+HEP5jh5dGxuw5Ehu\nrWl2egfC8fNNFzdjCC7wC9Mxqa60VOQjd1ZiHG0uY2MOozSWHXLoIbyWW0xuAKip\n5mYJFy/bSBTRuHfnS/2x/RVBqBaKPDS29gGuVLV2TujtqlPA1aEXRWMmdaMNTPZ5\nUuHMoEZF3oyt+4aNBm3H1rEdGC3whh9n7Bs790DdfJh3w2T3iI9vE66Uh4M8fCeI\nTaOsHPO3y7YON6EEIyWBqcPtifcHN/Jdl+Ht1GZuvYA0LDTRwB+e9IKRhOG9wnY=\n=GsMW\n-----END PGP SIGNATURE-----",
        "payload": "tree 8d1107667889fb581280045b7da1c64618798246\nparent b50e5fe099b3e9d8ece46b239ce930750df2120e\nauthor ENikS <evgeni@eniks.com> 1409693805 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411651476 +0200\n\nFixing C4146 warning\n\nRebased-By: Wladimir J. van der Laan <laanwj@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e7350486582fafc651d07a43d209d30eaaef1d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e7350486582fafc651d07a43d209d30eaaef1d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e7350486582fafc651d07a43d209d30eaaef1d7/comments",
    "author": {
      "login": "ENikS",
      "id": 1750155,
      "node_id": "MDQ6VXNlcjE3NTAxNTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1750155?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ENikS",
      "html_url": "https://github.com/ENikS",
      "followers_url": "https://api.github.com/users/ENikS/followers",
      "following_url": "https://api.github.com/users/ENikS/following{/other_user}",
      "gists_url": "https://api.github.com/users/ENikS/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ENikS/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ENikS/subscriptions",
      "organizations_url": "https://api.github.com/users/ENikS/orgs",
      "repos_url": "https://api.github.com/users/ENikS/repos",
      "events_url": "https://api.github.com/users/ENikS/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ENikS/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b50e5fe099b3e9d8ece46b239ce930750df2120e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b50e5fe099b3e9d8ece46b239ce930750df2120e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b50e5fe099b3e9d8ece46b239ce930750df2120e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4aea439e0143f702383a8a310a6e2410c404682d",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e7350486582fafc651d07a43d209d30eaaef1d7/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e7350486582fafc651d07a43d209d30eaaef1d7/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=1e7350486582fafc651d07a43d209d30eaaef1d7",
        "patch": "@@ -304,7 +304,7 @@ class CScriptNum\n       // If the input vector's most significant byte is 0x80, remove it from\n       // the result's msb and return a negative.\n       if (vch.back() & 0x80)\n-          return -(result & ~(0x80ULL << (8 * (vch.size() - 1))));\n+          return -((int64_t)(result & ~(0x80ULL << (8 * (vch.size() - 1)))));\n \n       return result;\n     }"
      },
      {
        "sha": "632d0965bf4e7b910f13ef3bac24ce4792b8e1fb",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e7350486582fafc651d07a43d209d30eaaef1d7/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e7350486582fafc651d07a43d209d30eaaef1d7/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=1e7350486582fafc651d07a43d209d30eaaef1d7",
        "patch": "@@ -618,7 +618,7 @@ void ShrinkDebugFile()\n     {\n         // Restart the file with some of the end\n         std::vector <char> vch(200000,0);\n-        fseek(file, -vch.size(), SEEK_END);\n+        fseek(file, -((long)vch.size()), SEEK_END);\n         int nBytes = fread(begin_ptr(vch), 1, vch.size(), file);\n         fclose(file);\n "
      }
    ]
  },
  {
    "sha": "f66f986a25e1949d78a3b4991434465bc9d7eba3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjZmOTg2YTI1ZTE5NDlkNzhhM2I0OTkxNDM0NDY1YmM5ZDdlYmEz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T13:25:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T13:25:32Z"
      },
      "message": "Merge pull request #4823\n\n1e73504 Fixing C4146 warning (ENikS)",
      "tree": {
        "sha": "8d1107667889fb581280045b7da1c64618798246",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d1107667889fb581280045b7da1c64618798246"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f66f986a25e1949d78a3b4991434465bc9d7eba3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUJBfMAAoJEHSBCwEjRsmm3zcH/2mmWIQKay7tzQXFwDpGyQP0\nKA7xFGNwB/CPZWYQKaZVNnQBFu8IUxynP/su7QCQMr52649pi4MyIMU6agkGXIf5\n4XnXSHX1O3uwqaVLrTuUgi6Y6wuQorik03lBF+El863EoeDWoDAH818th3eLZy1t\n+UcyAthS2Ymx+bo/Fwh80IYvZts3hlB582sXx8kXAInLdKzEATGAeVFRgb43rh7r\n0x3hOyxDUyWX5gDW4M5Gn7Rztr9Pv4QJY8aW8MIOte2Y4znKiI5xUDxFAOYD6Iwc\nTySM61SKYtpSTuyyVRIHdTfRETWR5Nhrpp74KSKSZqePv8WxgU30QT+wxlNhS2Q=\n=C6p6\n-----END PGP SIGNATURE-----",
        "payload": "tree 8d1107667889fb581280045b7da1c64618798246\nparent b50e5fe099b3e9d8ece46b239ce930750df2120e\nparent 1e7350486582fafc651d07a43d209d30eaaef1d7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411651530 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411651532 +0200\n\nMerge pull request #4823\n\n1e73504 Fixing C4146 warning (ENikS)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f66f986a25e1949d78a3b4991434465bc9d7eba3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f66f986a25e1949d78a3b4991434465bc9d7eba3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f66f986a25e1949d78a3b4991434465bc9d7eba3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b50e5fe099b3e9d8ece46b239ce930750df2120e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b50e5fe099b3e9d8ece46b239ce930750df2120e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b50e5fe099b3e9d8ece46b239ce930750df2120e"
      },
      {
        "sha": "1e7350486582fafc651d07a43d209d30eaaef1d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e7350486582fafc651d07a43d209d30eaaef1d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e7350486582fafc651d07a43d209d30eaaef1d7"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4aea439e0143f702383a8a310a6e2410c404682d",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f66f986a25e1949d78a3b4991434465bc9d7eba3/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f66f986a25e1949d78a3b4991434465bc9d7eba3/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=f66f986a25e1949d78a3b4991434465bc9d7eba3",
        "patch": "@@ -304,7 +304,7 @@ class CScriptNum\n       // If the input vector's most significant byte is 0x80, remove it from\n       // the result's msb and return a negative.\n       if (vch.back() & 0x80)\n-          return -(result & ~(0x80ULL << (8 * (vch.size() - 1))));\n+          return -((int64_t)(result & ~(0x80ULL << (8 * (vch.size() - 1)))));\n \n       return result;\n     }"
      },
      {
        "sha": "632d0965bf4e7b910f13ef3bac24ce4792b8e1fb",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f66f986a25e1949d78a3b4991434465bc9d7eba3/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f66f986a25e1949d78a3b4991434465bc9d7eba3/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f66f986a25e1949d78a3b4991434465bc9d7eba3",
        "patch": "@@ -618,7 +618,7 @@ void ShrinkDebugFile()\n     {\n         // Restart the file with some of the end\n         std::vector <char> vch(200000,0);\n-        fseek(file, -vch.size(), SEEK_END);\n+        fseek(file, -((long)vch.size()), SEEK_END);\n         int nBytes = fread(begin_ptr(vch), 1, vch.size(), file);\n         fclose(file);\n "
      }
    ]
  },
  {
    "sha": "4b2b78b9f2bd339cc4505996258e00c186e91792",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjJiNzhiOWYyYmQzMzljYzQ1MDU5OTYyNThlMDBjMTg2ZTkxNzky",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T13:52:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-25T13:58:56Z"
      },
      "message": "Merge pull request #4969\n\ncda45b5 Reinitializing list's begin iterator after few elements were erased from the head (ENikS)",
      "tree": {
        "sha": "7c102803468f72ac778b293f13139519ea7a179b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c102803468f72ac778b293f13139519ea7a179b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b2b78b9f2bd339cc4505996258e00c186e91792",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUJB+gAAoJEHSBCwEjRsmmtK8IAL5HQ0PVLiSCc3/gpMegjtG5\nfy1R7gQ7uU7hk9np/ZHh3wk+uyC+GbGxjVV1Iu1ZuD1vxb06Rm1jG5VPooOJuVJR\n8jljix4TNsHq832oPIulIn5aRpUUSiJMKQ2vNXHW+y5ON3DkuMuHBRnG8gfcZ+BV\nHj1tlZb10tY+8VFKzpUlyHrwiOpq3WyEBqnxM7j6zzJo6gsojM2vBulGWhK9xrfM\nPzDr5OO7Kj3yNQwBx7r0Qcrz4Oa7nyvcpCI4DYUr5XEORUx/X3qXZi1bGvoaANbx\n8wj530emp021CV8WFZcFENT7mvycwOSuxMp9Sv+TdbNE0XlGzCbT5JX+jUkK6HQ=\n=YXvq\n-----END PGP SIGNATURE-----",
        "payload": "tree 7c102803468f72ac778b293f13139519ea7a179b\nparent f66f986a25e1949d78a3b4991434465bc9d7eba3\nparent cda45b5131c3546b870d8cea3191fb29df182b27\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411653151 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411653536 +0200\n\nMerge pull request #4969\n\ncda45b5 Reinitializing list's begin iterator after few elements were erased from the head (ENikS)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b2b78b9f2bd339cc4505996258e00c186e91792",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b2b78b9f2bd339cc4505996258e00c186e91792",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b2b78b9f2bd339cc4505996258e00c186e91792/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f66f986a25e1949d78a3b4991434465bc9d7eba3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f66f986a25e1949d78a3b4991434465bc9d7eba3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f66f986a25e1949d78a3b4991434465bc9d7eba3"
      },
      {
        "sha": "cda45b5131c3546b870d8cea3191fb29df182b27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cda45b5131c3546b870d8cea3191fb29df182b27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cda45b5131c3546b870d8cea3191fb29df182b27"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "caf176476f180a4e33f477f78cc171c2bfbc3c82",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b2b78b9f2bd339cc4505996258e00c186e91792/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b2b78b9f2bd339cc4505996258e00c186e91792/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=4b2b78b9f2bd339cc4505996258e00c186e91792",
        "patch": "@@ -544,7 +544,7 @@ class CScript : public std::vector<unsigned char>\n         {\n             while (end() - pc >= (long)b.size() && memcmp(&pc[0], &b[0], b.size()) == 0)\n             {\n-                erase(pc, pc + b.size());\n+                pc = erase(pc, pc + b.size());\n                 ++nFound;\n             }\n         }"
      }
    ]
  },
  {
    "sha": "2027ad30e7b436b1341a0013398732c10f880bb9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDI3YWQzMGU3YjQzNmIxMzQxYTAwMTMzOTg3MzJjMTBmODgwYmI5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-23T20:59:03Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T18:56:25Z"
      },
      "message": "depends: add the debug/release concept to depends",
      "tree": {
        "sha": "8095431769fe922c18e162d214bcff27e7ac9fe1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8095431769fe922c18e162d214bcff27e7ac9fe1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2027ad30e7b436b1341a0013398732c10f880bb9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2027ad30e7b436b1341a0013398732c10f880bb9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2027ad30e7b436b1341a0013398732c10f880bb9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2027ad30e7b436b1341a0013398732c10f880bb9/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b2b78b9f2bd339cc4505996258e00c186e91792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b2b78b9f2bd339cc4505996258e00c186e91792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b2b78b9f2bd339cc4505996258e00c186e91792"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 57,
      "deletions": 36
    },
    "files": [
      {
        "sha": "fc763bedeb5f24258efff5a8dbdea9f59a962ff1",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2027ad30e7b436b1341a0013398732c10f880bb9/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2027ad30e7b436b1341a0013398732c10f880bb9/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=2027ad30e7b436b1341a0013398732c10f880bb9",
        "patch": "@@ -22,6 +22,12 @@ host:=$(HOST)\n host_toolchain:=$(HOST)-\n endif\n \n+ifneq ($(DEBUG),)\n+release_type=debug\n+else\n+release_type=release\n+endif\n+\n base_build_dir=$(BASEDIR)/work/build\n base_staging_dir=$(BASEDIR)/work/staging\n canonical_host:=$(shell ./config.sub $(HOST))\n@@ -103,12 +109,14 @@ $(host_prefix)/share/config.site : config.site.in $(host_prefix)/.stamp_$(final_\n             -e 's|@STRIP@|$(toolchain_path)$(host_STRIP)|' \\\n             -e 's|@build_os@|$(build_os)|' \\\n             -e 's|@host_os@|$(host_os)|' \\\n-            -e 's|@CFLAGS@|$(host_CFLAGS)|' \\\n-            -e 's|@CXXFLAGS@|$(host_CXXFLAGS)|' \\\n-            -e 's|@LDFLAGS@|$(host_LDFLAGS)|' \\\n+            -e 's|@CFLAGS@|$(strip $(host_CFLAGS) $(host_$(release_type)_CFLAGS))|' \\\n+            -e 's|@CXXFLAGS@|$(strip $(host_CXXFLAGS) $(host_$(release_type)_CXXFLAGS))|' \\\n+            -e 's|@CPPFLAGS@|$(strip $(host_CPPFLAGS) $(host_$(release_type)_CPPFLAGS))|' \\\n+            -e 's|@LDFLAGS@|$(strip $(host_LDFLAGS) $(host_$(release_type)_LDFLAGS))|' \\\n             -e 's|@no_qt@|$(NO_QT)|' \\\n             -e 's|@no_wallet@|$(NO_WALLET)|' \\\n             -e 's|@no_upnp@|$(NO_UPNP)|' \\\n+            -e 's|@debug@|$(DEBUG)|' \\\n             $< > $@\n \t$(AT)touch $@\n "
      },
      {
        "sha": "abd814ea6539755777be1a85a9922fc2c24c2475",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2027ad30e7b436b1341a0013398732c10f880bb9/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2027ad30e7b436b1341a0013398732c10f880bb9/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=2027ad30e7b436b1341a0013398732c10f880bb9",
        "patch": "@@ -81,4 +81,7 @@ fi\n if test -n \"@CXXFLAGS@\"; then\n   export CXXFLAGS=\"@CXXFLAGS@ $CXXFLAGS\"\n fi\n+if test -n \"@CPPFLAGS@\"; then\n+  export CPPFLAGS=\"@CPPFLAGS@ $CPPFLAGS\"\n+fi\n export LDFLAGS=\"-L$prefix/lib @LDFLAGS@ $LDFLAGS\""
      },
      {
        "sha": "c1fc0a0e33169a34e9f25f59b673d1405470193c",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 39,
        "deletions": 32,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2027ad30e7b436b1341a0013398732c10f880bb9/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2027ad30e7b436b1341a0013398732c10f880bb9/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=2027ad30e7b436b1341a0013398732c10f880bb9",
        "patch": "@@ -8,10 +8,10 @@ $(1)_ar=$($($(1)_type)_AR)\n $(1)_ranlib=$($($(1)_type)_RANLIB)\n $(1)_libtool=$($($(1)_type)_LIBTOOL)\n $(1)_nm=$($($(1)_type)_NM)\n-$(1)_cflags=$($($(1)_type)_CFLAGS)\n-$(1)_cxxflags=$($($(1)_type)_CXXFLAGS)\n-$(1)_ldflags=$($($(1)_type)_LDFLAGS) -L$($($(1)_type)_prefix)/lib\n-$(1)_cppflags:=-I$($($(1)_type)_prefix)/include\n+$(1)_cflags=$($($(1)_type)_CFLAGS) $($($(1)_type)_$(release_type)_CFLAGS)\n+$(1)_cxxflags=$($($(1)_type)_CXXFLAGS) $($($(1)_type)_$(release_type)_CXXFLAGS)\n+$(1)_ldflags=$($($(1)_type)_LDFLAGS) $($($(1)_type)_$(release_type)_LDFLAGS) -L$($($(1)_type)_prefix)/lib\n+$(1)_cppflags=$($($(1)_type)_CPPFLAGS) $($($(1)_type)_$(release_type)_CPPFLAGS) -I$($($(1)_type)_prefix)/include\n $(1)_recipe_hash:=\n endef\n \n@@ -38,7 +38,7 @@ define int_get_build_id\n $(eval $(1)_dependencies += $($(1)_$(host_arch)_$(host_os)_dependencies) $($(1)_$(host_os)_dependencies))\n $(eval $(1)_all_dependencies:=$(call int_get_all_dependencies,$(1),$($($(1)_type)_native_toolchain) $($(1)_dependencies)))\n $(foreach dep,$($(1)_all_dependencies),$(eval $(1)_build_id_deps+=$(dep)-$($(dep)_version)-$($(dep)_recipe_hash)))\n-$(eval $(1)_build_id_long:=$(1)-$($(1)_version)-$($(1)_recipe_hash) $($(1)_build_id_deps))\n+$(eval $(1)_build_id_long:=$(1)-$($(1)_version)-$($(1)_recipe_hash)-$(release_type) $($(1)_build_id_deps))\n $(eval $(1)_build_id:=$(shell echo -n \"$($(1)_build_id_long)\" | $(build_SHA256SUM) | cut -c-$(HASH_LENGTH)))\n final_build_id_long+=$($(package)_build_id_long)\n \n@@ -83,33 +83,40 @@ endef\n \n define int_config_attach_build_config\n $(eval $(call $(1)_set_vars,$(1)))\n-$(1)_cflags+=$($(1)_cflags_$(host_arch))\n-$(1)_cflags+=$($(1)_cflags_$(host_os))\n-$(1)_cflags+=$($(1)_cflags_$(host_arch)_$(host_os))\n-\n-$(1)_cxxflags+=$($(1)_cxxflags_$(host_arch))\n-$(1)_cxxflags+=$($(1)_cxxflags_$(host_os))\n-$(1)_cxxflags+=$($(1)_cxxflags_$(host_arch)_$(host_os))\n-\n-$(1)_cppflags+=$($(1)_cppflags_$(host_arch))\n-$(1)_cppflags+=$($(1)_cppflags_$(host_os))\n-$(1)_cppflags+=$($(1)_cppflags_$(host_arch)_$(host_os))\n-\n-$(1)_ldflags+=$($(1)_ldflags_$(host_arch))\n-$(1)_ldflags+=$($(1)_ldflags_$(host_os))\n-$(1)_ldflags+=$($(1)_ldflags_$(host_arch)_$(host_os))\n-\n-$(1)_build_opts+=$$($(1)_build_opts_$(host_arch))\n-$(1)_build_opts+=$$($(1)_build_opts_$(host_os))\n-$(1)_build_opts+=$$($(1)_build_opts_$(host_arch)_$(host_os))\n-\n-$(1)_config_opts+=$$($(1)_config_opts_$(host_arch))\n-$(1)_config_opts+=$$($(1)_config_opts_$(host_os))\n-$(1)_config_opts+=$$($(1)_config_opts_$(host_arch)_$(host_os))\n-\n-$(1)_config_env+=$($(1)_config_env_$(host_arch))\n-$(1)_config_env+=$($(1)_config_env_$(host_os))\n-$(1)_config_env+=$($(1)_config_env_$(host_arch)_$(host_os))\n+$(1)_cflags+=$($(1)_cflags_$(release_type))\n+$(1)_cflags+=$($(1)_cflags_$(host_arch)) $($(1)_cflags_$(host_arch)_$(release_type))\n+$(1)_cflags+=$($(1)_cflags_$(host_os)) $($(1)_cflags_$(host_os)_$(release_type))\n+$(1)_cflags+=$($(1)_cflags_$(host_arch)_$(host_os)) $($(1)_cflags_$(host_arch)_$(host_os)_$(release_type))\n+\n+$(1)_cxxflags+=$($(1)_cxxflags_$(release_type))\n+$(1)_cxxflags+=$($(1)_cxxflags_$(host_arch)) $($(1)_cxxflags_$(host_arch)_$(release_type))\n+$(1)_cxxflags+=$($(1)_cxxflags_$(host_os)) $($(1)_cxxflags_$(host_os)_$(release_type))\n+$(1)_cxxflags+=$($(1)_cxxflags_$(host_arch)_$(host_os)) $($(1)_cxxflags_$(host_arch)_$(host_os)_$(release_type))\n+\n+$(1)_cppflags+=$($(1)_cppflags_$(release_type))\n+$(1)_cppflags+=$($(1)_cppflags_$(host_arch)) $($(1)_cppflags_$(host_arch)_$(release_type))\n+$(1)_cppflags+=$($(1)_cppflags_$(host_os)) $($(1)_cppflags_$(host_os)_$(release_type))\n+$(1)_cppflags+=$($(1)_cppflags_$(host_arch)_$(host_os)) $($(1)_cppflags_$(host_arch)_$(host_os)_$(release_type))\n+\n+$(1)_ldflags+=$($(1)_ldflags_$(release_type))\n+$(1)_ldflags+=$($(1)_ldflags_$(host_arch)) $($(1)_ldflags_$(host_arch)_$(release_type))\n+$(1)_ldflags+=$($(1)_ldflags_$(host_os)) $($(1)_ldflags_$(host_os)_$(release_type))\n+$(1)_ldflags+=$($(1)_ldflags_$(host_arch)_$(host_os)) $($(1)_ldflags_$(host_arch)_$(host_os)_$(release_type))\n+\n+$(1)_build_opts+=$$($(1)_build_opts_$(release_type))\n+$(1)_build_opts+=$$($(1)_build_opts_$(host_arch)) $$($(1)_build_opts_$(host_arch)_$(release_type))\n+$(1)_build_opts+=$$($(1)_build_opts_$(host_os)) $$($(1)_build_opts_$(host_os)_$(release_type))\n+$(1)_build_opts+=$$($(1)_build_opts_$(host_arch)_$(host_os)) $$($(1)_build_opts_$(host_arch)_$(host_os)_$(release_type))\n+\n+$(1)_config_opts+=$$($(1)_config_opts_$(release_type))\n+$(1)_config_opts+=$$($(1)_config_opts_$(host_arch)) $$($(1)_config_opts_$(host_arch)_$(release_type))\n+$(1)_config_opts+=$$($(1)_config_opts_$(host_os)) $$($(1)_config_opts_$(host_os)_$(release_type))\n+$(1)_config_opts+=$$($(1)_config_opts_$(host_arch)_$(host_os)) $$($(1)_config_opts_$(host_arch)_$(host_os)_$(release_type))\n+\n+$(1)_config_env+=$$($(1)_config_env_$(release_type))\n+$(1)_config_env+=$($(1)_config_env_$(host_arch)) $($(1)_config_env_$(host_arch)_$(release_type))\n+$(1)_config_env+=$($(1)_config_env_$(host_os)) $($(1)_config_env_$(host_os)_$(release_type))\n+$(1)_config_env+=$($(1)_config_env_$(host_arch)_$(host_os)) $($(1)_config_env_$(host_arch)_$(host_os)_$(release_type))\n \n $(1)_config_env+=PKG_CONFIG_LIBDIR=$($($(1)_type)_prefix)/lib/pkgconfig\n $(1)_config_env+=PKG_CONFIG_PATH=$($($(1)_type)_prefix)/share/pkgconfig"
      },
      {
        "sha": "6f60d6b3fd004e9317db4717bf7dcb68b9dd43eb",
        "filename": "depends/hosts/default.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2027ad30e7b436b1341a0013398732c10f880bb9/depends/hosts/default.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2027ad30e7b436b1341a0013398732c10f880bb9/depends/hosts/default.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/default.mk?ref=2027ad30e7b436b1341a0013398732c10f880bb9",
        "patch": "@@ -11,13 +11,16 @@ default_host_NM = $(host_toolchain)nm\n define add_host_tool_func\n $(host_os)_$1?=$$(default_host_$1)\n $(host_arch)_$(host_os)_$1?=$$($(host_os)_$1)\n+$(host_arch)_$(host_os)_$(release_type)_$1?=$$($(host_os)_$1)\n host_$1=$$($(host_arch)_$(host_os)_$1)\n endef\n \n define add_host_flags_func\n $(host_arch)_$(host_os)_$1 += $($(host_os)_$1)\n+$(host_arch)_$(host_os)_$(release_type)_$1 += $($(host_os)_$(release_type)_$1)\n host_$1 = $$($(host_arch)_$(host_os)_$1)\n+host_$(release_type)_$1 = $$($(host_arch)_$(host_os)_$(release_type)_$1)\n endef\n \n $(foreach tool,CC CXX AR RANLIB STRIP NM LIBTOOL OTOOL INSTALL_NAME_TOOL,$(eval $(call add_host_tool_func,$(tool))))\n-$(foreach flags,CFLAGS CXXFLAGS LDFLAGS, $(eval $(call add_host_flags_func,$(flags))))\n+$(foreach flags,CFLAGS CXXFLAGS CPPFLAGS LDFLAGS, $(eval $(call add_host_flags_func,$(flags))))"
      }
    ]
  },
  {
    "sha": "f3973040028d6a7335a3265fa0e13b599b2fac3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzk3MzA0MDAyOGQ2YTczMzVhMzI2NWZhMGUxM2I1OTliMmZhYzNk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-23T21:00:31Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T18:56:26Z"
      },
      "message": "depends: add debug/release flags for linux/osx/win\n\nLinux and mingw enable libstdc++ debugging for extra runtime checks. OSX\ndoesn't play nice, so don't enable it there.",
      "tree": {
        "sha": "0a90f1d0ef63fbc73f75eee7c79f872d2869bc65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a90f1d0ef63fbc73f75eee7c79f872d2869bc65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3973040028d6a7335a3265fa0e13b599b2fac3d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3973040028d6a7335a3265fa0e13b599b2fac3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3973040028d6a7335a3265fa0e13b599b2fac3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3973040028d6a7335a3265fa0e13b599b2fac3d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2027ad30e7b436b1341a0013398732c10f880bb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2027ad30e7b436b1341a0013398732c10f880bb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2027ad30e7b436b1341a0013398732c10f880bb9"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 27,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8d718eba17be837c91e492ad5b911933e5a69774",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3973040028d6a7335a3265fa0e13b599b2fac3d/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3973040028d6a7335a3265fa0e13b599b2fac3d/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=f3973040028d6a7335a3265fa0e13b599b2fac3d",
        "patch": "@@ -3,6 +3,14 @@ OSX_SDK_VERSION=10.7\n OSX_SDK=$(SDK_PATH)/MacOSX$(OSX_SDK_VERSION).sdk\n darwin_CC=clang -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK)\n darwin_CXX=clang++ -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK)\n-darwin_CFLAGS=-pipe -O2\n+\n+darwin_CFLAGS=-pipe\n darwin_CXXFLAGS=$(darwin_CFLAGS)\n+\n+darwin_release_CFLAGS=-O2\n+darwin_release_CXXFLAGS=$(darwin_release_CFLAGS)\n+\n+darwin_debug_CFLAGS=-O1\n+darwin_debug_CXXFLAGS=$(darwin_debug_CFLAGS)\n+\n darwin_native_toolchain=native_cctools"
      },
      {
        "sha": "b13a0f1ad714ae19ec7fc4b68d162095b9c62255",
        "filename": "depends/hosts/linux.mk",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3973040028d6a7335a3265fa0e13b599b2fac3d/depends/hosts/linux.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3973040028d6a7335a3265fa0e13b599b2fac3d/depends/hosts/linux.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/linux.mk?ref=f3973040028d6a7335a3265fa0e13b599b2fac3d",
        "patch": "@@ -1,6 +1,14 @@\n-linux_CFLAGS=-pipe -O2\n+linux_CFLAGS=-pipe\n linux_CXXFLAGS=$(linux_CFLAGS)\n \n+linux_release_CFLAGS=-O2\n+linux_release_CXXFLAGS=$(linux_release_CFLAGS)\n+\n+linux_debug_CFLAGS=-O1\n+linux_debug_CXXFLAGS=$(linux_debug_CFLAGS)\n+\n+linux_debug_CPPFLAGS=-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC\n+\n ifeq (86,$(findstring 86,$(build_arch)))\n i686_linux_CC=gcc -m32\n i686_linux_CXX=g++ -m32"
      },
      {
        "sha": "dbfb62fdcf98695d515e56897ee488703e002054",
        "filename": "depends/hosts/mingw32.mk",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3973040028d6a7335a3265fa0e13b599b2fac3d/depends/hosts/mingw32.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3973040028d6a7335a3265fa0e13b599b2fac3d/depends/hosts/mingw32.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/mingw32.mk?ref=f3973040028d6a7335a3265fa0e13b599b2fac3d",
        "patch": "@@ -1,2 +1,10 @@\n-mingw32_CFLAGS=-pipe -O2\n+mingw32_CFLAGS=-pipe\n mingw32_CXXFLAGS=$(mingw32_CFLAGS)\n+\n+mingw32_release_CFLAGS=-O2\n+mingw32_release_CXXFLAGS=$(mingw32_release_CFLAGS)\n+\n+mingw32_debug_CFLAGS=-O1\n+mingw32_debug_CXXFLAGS=$(mingw32_debug_CFLAGS)\n+\n+mingw32_debug_CPPFLAGS=-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC"
      }
    ]
  },
  {
    "sha": "7e99df78c4e9f93f2f31298c00bb5568bfd42a43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTk5ZGY3OGM0ZTlmOTNmMmYzMTI5OGMwMGJiNTU2OGJmZDQyYTQz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-23T21:02:22Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T18:56:26Z"
      },
      "message": "depends: make sure openssl sees cppflags",
      "tree": {
        "sha": "5af1fae3b2acdedbe2308b163712d1508fa403fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5af1fae3b2acdedbe2308b163712d1508fa403fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e99df78c4e9f93f2f31298c00bb5568bfd42a43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e99df78c4e9f93f2f31298c00bb5568bfd42a43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e99df78c4e9f93f2f31298c00bb5568bfd42a43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e99df78c4e9f93f2f31298c00bb5568bfd42a43/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3973040028d6a7335a3265fa0e13b599b2fac3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3973040028d6a7335a3265fa0e13b599b2fac3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3973040028d6a7335a3265fa0e13b599b2fac3d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3ccdaf6f2fb432ad047d1fb644fa43e0cb4294ca",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e99df78c4e9f93f2f31298c00bb5568bfd42a43/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e99df78c4e9f93f2f31298c00bb5568bfd42a43/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=7e99df78c4e9f93f2f31298c00bb5568bfd42a43",
        "patch": "@@ -9,7 +9,7 @@ $(package)_config_env=AR=\"$($(package)_ar)\" RANLIB=\"$($(package)_ranlib)\" CC=\"$(\n $(package)_config_opts=--prefix=$(host_prefix) --openssldir=$(host_prefix)/etc/openssl no-zlib no-shared no-dso\n $(package)_config_opts+=no-krb5 no-camellia no-capieng no-cast no-cms no-dtls1 no-gost no-gmp no-heartbeats no-idea no-jpake no-md2\n $(package)_config_opts+=no-mdc2 no-rc5 no-rdrand no-rfc3779 no-rsax no-sctp no-seed no-sha0 no-static_engine no-whirlpool no-rc2 no-rc4 no-ssl3\n-$(package)_config_opts+=$($(package)_cflags)\n+$(package)_config_opts+=$($(package)_cflags) $($(package)_cppflags)\n $(package)_config_opts_x86_64_linux=-fPIC linux-x86_64\n $(package)_config_opts_arm_linux=-fPIC linux-generic32\n $(package)_config_opts_x86_64_darwin=darwin64-x86_64-cc"
      }
    ]
  },
  {
    "sha": "3b63df5fac7c65c87036aec2bdf8130b74873577",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjYzZGY1ZmFjN2M2NWM4NzAzNmFlYzJiZGY4MTMwYjc0ODczNTc3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-23T21:03:09Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T18:56:26Z"
      },
      "message": "depends: boost: build for debug or release as requested\n\nAlso hook up cppflags there, which was missing before.",
      "tree": {
        "sha": "e909de6e2969a28e947d7948fdcf0d2e9876ad5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e909de6e2969a28e947d7948fdcf0d2e9876ad5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b63df5fac7c65c87036aec2bdf8130b74873577",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b63df5fac7c65c87036aec2bdf8130b74873577",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b63df5fac7c65c87036aec2bdf8130b74873577",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b63df5fac7c65c87036aec2bdf8130b74873577/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e99df78c4e9f93f2f31298c00bb5568bfd42a43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e99df78c4e9f93f2f31298c00bb5568bfd42a43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e99df78c4e9f93f2f31298c00bb5568bfd42a43"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "98ed3de77270383851139d650bef4e6e9288be08",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b63df5fac7c65c87036aec2bdf8130b74873577/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b63df5fac7c65c87036aec2bdf8130b74873577/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=3b63df5fac7c65c87036aec2bdf8130b74873577",
        "patch": "@@ -6,8 +6,10 @@ $(package)_sha256_hash=fff00023dd79486d444c8e29922f4072e1d451fc5a4d2b6075852ead7\n $(package)_patches=darwin_boost_atomic-1.patch darwin_boost_atomic-2.patch\n \n define $(package)_set_vars\n+$(package)_config_opts_release=variant=release\n+$(package)_config_opts_debug=variant=debug\n $(package)_config_opts=--layout=tagged --build-type=complete --user-config=user-config.jam\n-$(package)_config_opts+=variant=release threading=multi link=static -sNO_BZIP2=1 -sNO_ZLIB=1\n+$(package)_config_opts+=threading=multi link=static -sNO_BZIP2=1 -sNO_ZLIB=1\n $(package)_config_opts_linux=threadapi=pthread runtime-link=shared\n $(package)_config_opts_darwin=--toolset=darwin-4.2.1 runtime-link=shared\n $(package)_config_opts_mingw32=binary-format=pe target-os=windows threadapi=win32 runtime-link=static\n@@ -26,7 +28,7 @@ endef\n define $(package)_preprocess_cmds\n   patch -p2 < $($(package)_patch_dir)/darwin_boost_atomic-1.patch && \\\n   patch -p2 < $($(package)_patch_dir)/darwin_boost_atomic-2.patch && \\\n-  echo \"using $(boost_toolset_$(host_os)) : : $($(package)_cxx) : <cxxflags>\\\"$($(package)_cxxflags)\\\" <linkflags>\\\"$($(package)_ldflags)\\\" <archiver>\\\"$(boost_archiver_$(host_os))\\\" <striper>\\\"$(host_STRIP)\\\"  <ranlib>\\\"$(host_RANLIB)\\\" <rc>\\\"$(host_WINDRES)\\\" : ;\" > user-config.jam\n+  echo \"using $(boost_toolset_$(host_os)) : : $($(package)_cxx) : <cxxflags>\\\"$($(package)_cxxflags) $($(package)_cppflags)\\\" <linkflags>\\\"$($(package)_ldflags)\\\" <archiver>\\\"$(boost_archiver_$(host_os))\\\" <striper>\\\"$(host_STRIP)\\\"  <ranlib>\\\"$(host_RANLIB)\\\" <rc>\\\"$(host_WINDRES)\\\" : ;\" > user-config.jam\n endef\n \n define $(package)_config_cmds"
      }
    ]
  },
  {
    "sha": "1d154db4570a523362366ba5698b9692edc998a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDE1NGRiNDU3MGE1MjMzNjIzNjZiYTU2OThiOTY5MmVkYzk5OGEy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-23T21:41:42Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T18:56:26Z"
      },
      "message": "depends: teach qt to honor debug/release\n\nThis means it also needs to honor our flags, so patch them in as necessary.",
      "tree": {
        "sha": "f52a5df7dca026fa3c9af04cba2b3b6d10a39f4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f52a5df7dca026fa3c9af04cba2b3b6d10a39f4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d154db4570a523362366ba5698b9692edc998a2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d154db4570a523362366ba5698b9692edc998a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d154db4570a523362366ba5698b9692edc998a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d154db4570a523362366ba5698b9692edc998a2/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b63df5fac7c65c87036aec2bdf8130b74873577",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b63df5fac7c65c87036aec2bdf8130b74873577",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b63df5fac7c65c87036aec2bdf8130b74873577"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "5fbab57dd422554017fb424f855c326b86e63a85",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d154db4570a523362366ba5698b9692edc998a2/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d154db4570a523362366ba5698b9692edc998a2/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=1d154db4570a523362366ba5698b9692edc998a2",
        "patch": "@@ -10,8 +10,9 @@ $(package)_qt_libs=corelib network widgets gui plugins testlib\n $(package)_patches=mac-qmake.conf fix-xcb-include-order.patch qt5-tablet-osx.patch\n \n define $(package)_set_vars\n-$(package)_config_opts  = -release -opensource -confirm-license\n-$(package)_config_opts += -no-audio-backend -no-sql-tds -no-glib -no-icu\n+$(package)_config_opts_release = -release\n+$(package)_config_opts_debug   = -debug\n+$(package)_config_opts += -opensource -confirm-license -no-audio-backend -no-sql-tds -no-glib -no-icu\n $(package)_config_opts += -no-cups -no-iconv -no-gif -no-audio-backend -no-freetype\n $(package)_config_opts += -no-sql-sqlite -no-nis -no-cups -no-iconv -no-pch\n $(package)_config_opts += -no-gif -no-feature-style-plastique\n@@ -53,7 +54,13 @@ define $(package)_preprocess_cmds\n   cp -f qtbase/mkspecs/macx-clang/qplatformdefs.h qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f $($(package)_patch_dir)/mac-qmake.conf qtbase/mkspecs/macx-clang-linux/qmake.conf && \\\n   patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n-  patch -p1 < $($(package)_patch_dir)/qt5-tablet-osx.patch\n+  patch -p1 < $($(package)_patch_dir)/qt5-tablet-osx.patch && \\\n+  echo \"QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  echo \"QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  echo \"QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  sed -i.old \"s|QMAKE_CFLAGS            = |QMAKE_CFLAGS            = $($(package)_cflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n+  sed -i.old \"s|QMAKE_LFLAGS            = |QMAKE_LFLAGS            = $($(package)_ldflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n+  sed -i.old \"s|QMAKE_CXXFLAGS          = |QMAKE_CXXFLAGS            = $($(package)_cxxflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf\n endef\n \n define $(package)_config_cmds"
      }
    ]
  },
  {
    "sha": "b1efba82982ea9e120ced226bdbff6402bc99f64",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWVmYmE4Mjk4MmVhOWUxMjBjZWQyMjZiZGJmZjY0MDJiYzk5ZjY0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-23T23:27:57Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T18:56:26Z"
      },
      "message": "depends: give miniupnpc cppflags",
      "tree": {
        "sha": "c996cd59ed2d8eeb73aa17390bd14893c0e1fb0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c996cd59ed2d8eeb73aa17390bd14893c0e1fb0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1efba82982ea9e120ced226bdbff6402bc99f64",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1efba82982ea9e120ced226bdbff6402bc99f64",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1efba82982ea9e120ced226bdbff6402bc99f64",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1efba82982ea9e120ced226bdbff6402bc99f64/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d154db4570a523362366ba5698b9692edc998a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d154db4570a523362366ba5698b9692edc998a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d154db4570a523362366ba5698b9692edc998a2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "00101f1b91af4ed074dc8dfd9179afeb53689bb1",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1efba82982ea9e120ced226bdbff6402bc99f64/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1efba82982ea9e120ced226bdbff6402bc99f64/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=b1efba82982ea9e120ced226bdbff6402bc99f64",
        "patch": "@@ -8,7 +8,7 @@ define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\"\n $(package)_build_opts_darwin=OS=Darwin\n $(package)_build_opts_mingw32=-f Makefile.mingw\n-$(package)_build_env+=CFLAGS=\"$($(package)_cflags)\" AR=\"$($(package)_ar)\"\n+$(package)_build_env+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags)\" AR=\"$($(package)_ar)\"\n endef\n \n define $(package)_preprocess_cmds"
      }
    ]
  },
  {
    "sha": "dc66ff53b4b4d31fda4ec4ee500a6a8f98bae6ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzY2ZmY1M2I0YjRkMzFmZGE0ZWM0ZWU1MDBhNmE4Zjk4YmFlNmFj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-23T21:52:43Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T18:56:26Z"
      },
      "message": "depends: make LDFLAGS act like the other flags",
      "tree": {
        "sha": "216e93cda09c6470e501a61f113240cb271913b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/216e93cda09c6470e501a61f113240cb271913b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc66ff53b4b4d31fda4ec4ee500a6a8f98bae6ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc66ff53b4b4d31fda4ec4ee500a6a8f98bae6ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc66ff53b4b4d31fda4ec4ee500a6a8f98bae6ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc66ff53b4b4d31fda4ec4ee500a6a8f98bae6ac/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1efba82982ea9e120ced226bdbff6402bc99f64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1efba82982ea9e120ced226bdbff6402bc99f64",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1efba82982ea9e120ced226bdbff6402bc99f64"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c80c3e8f20a10731ab7ee15917f43d474ae00180",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc66ff53b4b4d31fda4ec4ee500a6a8f98bae6ac/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc66ff53b4b4d31fda4ec4ee500a6a8f98bae6ac/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=dc66ff53b4b4d31fda4ec4ee500a6a8f98bae6ac",
        "patch": "@@ -52,7 +52,9 @@ export PATH=$prefix/native/bin:$PATH\n export PKG_CONFIG=\"`which pkg-config` --static\"\n export PKG_CONFIG_LIBDIR=$prefix/lib/pkgconfig\n export PKG_CONFIG_PATH=$prefix/share/pkgconfig\n+\n export CPPFLAGS=\"-I$prefix/include/ $CPPFLAGS\"\n+export LDFLAGS=\"-L$prefix/lib $LDFLAGS\"\n \n export CC=\"@CC@\"\n export CXX=\"@CXX@\"\n@@ -84,4 +86,6 @@ fi\n if test -n \"@CPPFLAGS@\"; then\n   export CPPFLAGS=\"@CPPFLAGS@ $CPPFLAGS\"\n fi\n-export LDFLAGS=\"-L$prefix/lib @LDFLAGS@ $LDFLAGS\"\n+if test -n \"@LDFLAGS@\"; then\n+  export LDFLAGS=\"@LDFLAGS@ $LDFLAGS\"\n+fi"
      }
    ]
  },
  {
    "sha": "1f7fff2beea20c3f1bf5a4496f81cb9be9e0e07e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjdmZmYyYmVlYTIwYzNmMWJmNWE0NDk2ZjgxY2I5YmU5ZTBlMDdl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-23T21:51:10Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T18:56:26Z"
      },
      "message": "depends: add docs for debug",
      "tree": {
        "sha": "f12e3304126b3b2ceadc1f72dba211375e915a3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f12e3304126b3b2ceadc1f72dba211375e915a3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f7fff2beea20c3f1bf5a4496f81cb9be9e0e07e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f7fff2beea20c3f1bf5a4496f81cb9be9e0e07e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f7fff2beea20c3f1bf5a4496f81cb9be9e0e07e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f7fff2beea20c3f1bf5a4496f81cb9be9e0e07e/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc66ff53b4b4d31fda4ec4ee500a6a8f98bae6ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc66ff53b4b4d31fda4ec4ee500a6a8f98bae6ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc66ff53b4b4d31fda4ec4ee500a6a8f98bae6ac"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5ab7ed7dee0063888e4c042dc5946e363178b030",
        "filename": "depends/README.packages",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f7fff2beea20c3f1bf5a4496f81cb9be9e0e07e/depends/README.packages",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f7fff2beea20c3f1bf5a4496f81cb9be9e0e07e/depends/README.packages",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.packages?ref=1f7fff2beea20c3f1bf5a4496f81cb9be9e0e07e",
        "patch": "@@ -65,10 +65,22 @@ These variables may be set to override or append their default values.\n   $(package)_config_env\n   $(package)_build_env\n   $(package)_stage_env\n+  $(package)_build_opts\n+  $(package)_config_opts\n \n The *_env variables are used to add environment variables to the respective\n commands.\n \n+Many variables respect a debug/release suffix as well, in order to use them for\n+only the appropriate build config. For example:\n+  $(package)_cflags_release = -O3\n+  $(package)_cflags_i686_debug = -g\n+  $(package)_config_opts_release = --disable-debug\n+\n+These will be used in addition to the options that do not specify\n+debug/release. All builds are considered to be release unless DEBUG=1 is set by\n+the user.\n+\n Other variables may be defined as needed.\n \n Build commands:"
      },
      {
        "sha": "d3c57956f19e8ccc0dca629bb62a3ea4128f27d6",
        "filename": "depends/README.usage",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f7fff2beea20c3f1bf5a4496f81cb9be9e0e07e/depends/README.usage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f7fff2beea20c3f1bf5a4496f81cb9be9e0e07e/depends/README.usage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.usage?ref=1f7fff2beea20c3f1bf5a4496f81cb9be9e0e07e",
        "patch": "@@ -22,6 +22,7 @@ FALLBACK_DOWNLOAD_PATH: If a source file can't be fetched, try here before givin\n NO_QT: Don't download/build/cache qt and its dependencies\n NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n+DEBUG: disable some optimizations and enable more runtime checking\n \n If some packages are not built, for example 'make NO_WALLET=1', the appropriate\n options will be passed to bitcoin's configure. In this case, --disable-wallet."
      }
    ]
  },
  {
    "sha": "00522cd45b7c093975a7684876b26abeced58da9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDUyMmNkNDViN2MwOTM5NzVhNzY4NDg3NmIyNmFiZWNlZDU4ZGE5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-23T22:18:03Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T18:56:26Z"
      },
      "message": "depends: disable reduced exports for debug builds\n\nSome debug options may not be compatible.",
      "tree": {
        "sha": "55aee5979b4c2eb75a470c8b03f5a074f45864dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55aee5979b4c2eb75a470c8b03f5a074f45864dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00522cd45b7c093975a7684876b26abeced58da9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00522cd45b7c093975a7684876b26abeced58da9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00522cd45b7c093975a7684876b26abeced58da9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00522cd45b7c093975a7684876b26abeced58da9/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f7fff2beea20c3f1bf5a4496f81cb9be9e0e07e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f7fff2beea20c3f1bf5a4496f81cb9be9e0e07e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f7fff2beea20c3f1bf5a4496f81cb9be9e0e07e"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3426050cd3e847ad6c5bafb5622e767b1cca6f59",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00522cd45b7c093975a7684876b26abeced58da9/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00522cd45b7c093975a7684876b26abeced58da9/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=00522cd45b7c093975a7684876b26abeced58da9",
        "patch": "@@ -77,6 +77,10 @@ if test -n \"@NM@\"; then\n   ac_cv_path_ac_pt_NM=${NM}\n fi\n \n+if test -n \"@debug@\"; then\n+  enable_reduce_exports=no\n+fi\n+\n if test -n \"@CFLAGS@\"; then\n   export CFLAGS=\"@CFLAGS@ $CFLAGS\"\n fi"
      }
    ]
  },
  {
    "sha": "a94496fbb672fce43b66f56ed0bbd69a560d5654",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTQ0OTZmYmI2NzJmY2U0M2I2NmY1NmVkMGJiZDY5YTU2MGQ1NjU0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-23T20:53:34Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T18:56:26Z"
      },
      "message": "tests: don't split an empty string",
      "tree": {
        "sha": "956d4dad0795f14e89c4c03f2fd59fd1a5ffdf06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/956d4dad0795f14e89c4c03f2fd59fd1a5ffdf06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a94496fbb672fce43b66f56ed0bbd69a560d5654",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a94496fbb672fce43b66f56ed0bbd69a560d5654",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a94496fbb672fce43b66f56ed0bbd69a560d5654",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a94496fbb672fce43b66f56ed0bbd69a560d5654/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00522cd45b7c093975a7684876b26abeced58da9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00522cd45b7c093975a7684876b26abeced58da9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00522cd45b7c093975a7684876b26abeced58da9"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8a984304f4e66a6d63f75019b4225556bf467474",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a94496fbb672fce43b66f56ed0bbd69a560d5654/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a94496fbb672fce43b66f56ed0bbd69a560d5654/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=a94496fbb672fce43b66f56ed0bbd69a560d5654",
        "patch": "@@ -16,7 +16,8 @@ BOOST_AUTO_TEST_SUITE(getarg_tests)\n static void ResetArgs(const std::string& strArg)\n {\n     std::vector<std::string> vecArg;\n-    boost::split(vecArg, strArg, boost::is_space(), boost::token_compress_on);\n+    if (strArg.size())\n+      boost::split(vecArg, strArg, boost::is_space(), boost::token_compress_on);\n \n     // Insert dummy executable name:\n     vecArg.insert(vecArg.begin(), \"testbitcoin\");"
      }
    ]
  },
  {
    "sha": "be6d87aa60c1aca886b557901a493119c2aac024",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTZkODdhYTYwYzFhY2E4ODZiNTU3OTAxYTQ5MzExOWMyYWFjMDI0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-23T20:53:58Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T18:56:26Z"
      },
      "message": "script: don't read past the end",
      "tree": {
        "sha": "080a4fde2b9b3755807c620ecc67e1c7a31f1b0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/080a4fde2b9b3755807c620ecc67e1c7a31f1b0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be6d87aa60c1aca886b557901a493119c2aac024",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be6d87aa60c1aca886b557901a493119c2aac024",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be6d87aa60c1aca886b557901a493119c2aac024",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be6d87aa60c1aca886b557901a493119c2aac024/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a94496fbb672fce43b66f56ed0bbd69a560d5654",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a94496fbb672fce43b66f56ed0bbd69a560d5654",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a94496fbb672fce43b66f56ed0bbd69a560d5654"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a71f55dd2684251e3e3b0916f48e0562b96eab5d",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be6d87aa60c1aca886b557901a493119c2aac024/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be6d87aa60c1aca886b557901a493119c2aac024/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=be6d87aa60c1aca886b557901a493119c2aac024",
        "patch": "@@ -839,7 +839,8 @@ class CTransactionSignatureSerializer {\n                 itBegin = it;\n             }\n         }\n-        s.write((char*)&itBegin[0], it-itBegin);\n+        if (itBegin != scriptCode.end())\n+            s.write((char*)&itBegin[0], it-itBegin);\n     }\n \n     /** Serialize an input of txTo */"
      }
    ]
  },
  {
    "sha": "93e24dddf3b7063a157b414c07e08ac7f31eaf03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2UyNGRkZGYzYjcwNjNhMTU3YjQxNGMwN2UwOGFjN2YzMWVhZjAz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-23T22:19:09Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T18:56:26Z"
      },
      "message": "travis: use debug for one build\n\nFor the all-off build, enable the wallet and debug. This ensures that debug\noptions will catch wallet problems as well.\n\nIn order to make sure the no-wallet path is still tested, disable the wallet\nin the other x86_64 build.",
      "tree": {
        "sha": "0926e9f499a840291982765687f50541dc94634f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0926e9f499a840291982765687f50541dc94634f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93e24dddf3b7063a157b414c07e08ac7f31eaf03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e24dddf3b7063a157b414c07e08ac7f31eaf03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93e24dddf3b7063a157b414c07e08ac7f31eaf03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e24dddf3b7063a157b414c07e08ac7f31eaf03/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be6d87aa60c1aca886b557901a493119c2aac024",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be6d87aa60c1aca886b557901a493119c2aac024",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be6d87aa60c1aca886b557901a493119c2aac024"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "155ac012d89dfc8f79c876c9dac450489b1e82d8",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93e24dddf3b7063a157b414c07e08ac7f31eaf03/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93e24dddf3b7063a157b414c07e08ac7f31eaf03/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=93e24dddf3b7063a157b414c07e08ac7f31eaf03",
        "patch": "@@ -27,9 +27,9 @@ matrix:\n     - compiler: \"true 1\"\n       env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n     - compiler: \"true 2\"\n-      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_QT=1 NO_WALLET=1 NO_UPNP=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat CPPFLAGS=-DDEBUG_LOCKORDER\"\n+      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \"true 3\"\n-      env: HOST=x86_64-unknown-linux-gnu RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n     - compiler: \"true 4\"\n       env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n     - compiler: \"true 5\""
      }
    ]
  },
  {
    "sha": "27c3e91014d65091b096b97680b95d1b130a284d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2MzZTkxMDE0ZDY1MDkxYjA5NmI5NzY4MGI5NWQxYjEzMGEyODRk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T01:53:19Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T21:47:32Z"
      },
      "message": "qt: add proxy to options overridden if necessary.\n\nIf proxy is disabled in the gui but enabled via the command line, it needs to\nbe added to the override list.",
      "tree": {
        "sha": "1fa4e0927a9d59e1662395434db61e723687763c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1fa4e0927a9d59e1662395434db61e723687763c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27c3e91014d65091b096b97680b95d1b130a284d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c3e91014d65091b096b97680b95d1b130a284d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27c3e91014d65091b096b97680b95d1b130a284d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c3e91014d65091b096b97680b95d1b130a284d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a04f3d708faab4af1f1a6aeddc5a6a4db3849a5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "21e390eb6dc35c1d0732b72c49319009a734bdea",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27c3e91014d65091b096b97680b95d1b130a284d/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27c3e91014d65091b096b97680b95d1b130a284d/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=27c3e91014d65091b096b97680b95d1b130a284d",
        "patch": "@@ -119,6 +119,8 @@ void OptionsModel::Init()\n     // Only try to set -proxy, if user has enabled fUseProxy\n     if (settings.value(\"fUseProxy\").toBool() && !SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n         addOverriddenOption(\"-proxy\");\n+    else if(!settings.value(\"fUseProxy\").toBool() && !GetArg(\"-proxy\", \"\").empty())\n+        addOverriddenOption(\"-proxy\");\n \n     // Display\n     if (!settings.contains(\"language\"))"
      }
    ]
  },
  {
    "sha": "eee030f6bc62117b4d3c27aa78818964d95a7063",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWUwMzBmNmJjNjIxMTdiNGQzYzI3YWE3ODgxODk2NGQ5NWE3MDYz",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T23:25:19Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T23:25:19Z"
      },
      "message": "autofile: don't copy CAutoFile by value",
      "tree": {
        "sha": "53dcf29fdc8db825b84544fb692db2d16a362e9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53dcf29fdc8db825b84544fb692db2d16a362e9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eee030f6bc62117b4d3c27aa78818964d95a7063",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eee030f6bc62117b4d3c27aa78818964d95a7063",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eee030f6bc62117b4d3c27aa78818964d95a7063",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eee030f6bc62117b4d3c27aa78818964d95a7063/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b2b78b9f2bd339cc4505996258e00c186e91792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b2b78b9f2bd339cc4505996258e00c186e91792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b2b78b9f2bd339cc4505996258e00c186e91792"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "27594ecbe31568e7508dfc1ead342d98f7606461",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eee030f6bc62117b4d3c27aa78818964d95a7063/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eee030f6bc62117b4d3c27aa78818964d95a7063/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=eee030f6bc62117b4d3c27aa78818964d95a7063",
        "patch": "@@ -1058,7 +1058,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     }\n \n     boost::filesystem::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n-    CAutoFile est_filein = CAutoFile(fopen(est_path.string().c_str(), \"rb\"), SER_DISK, CLIENT_VERSION);\n+    CAutoFile est_filein(fopen(est_path.string().c_str(), \"rb\"), SER_DISK, CLIENT_VERSION);\n     // Allowed to fail as this file IS missing on first startup.\n     if (est_filein)\n         mempool.ReadFeeEstimates(est_filein);"
      },
      {
        "sha": "60e2a56795e074d4b488a278436c48c488d2e1c2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eee030f6bc62117b4d3c27aa78818964d95a7063/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eee030f6bc62117b4d3c27aa78818964d95a7063/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=eee030f6bc62117b4d3c27aa78818964d95a7063",
        "patch": "@@ -1082,7 +1082,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n {\n     // Open history file to append\n-    CAutoFile fileout = CAutoFile(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n+    CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n     if (!fileout)\n         return error(\"WriteBlockToDisk : OpenBlockFile failed\");\n \n@@ -1110,7 +1110,7 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     block.SetNull();\n \n     // Open history file to read\n-    CAutoFile filein = CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (!filein)\n         return error(\"ReadBlockFromDisk : OpenBlockFile failed\");\n \n@@ -4503,7 +4503,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n bool CBlockUndo::WriteToDisk(CDiskBlockPos &pos, const uint256 &hashBlock)\n {\n     // Open history file to append\n-    CAutoFile fileout = CAutoFile(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n+    CAutoFile fileout(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n     if (!fileout)\n         return error(\"CBlockUndo::WriteToDisk : OpenUndoFile failed\");\n \n@@ -4535,7 +4535,7 @@ bool CBlockUndo::WriteToDisk(CDiskBlockPos &pos, const uint256 &hashBlock)\n bool CBlockUndo::ReadFromDisk(const CDiskBlockPos &pos, const uint256 &hashBlock)\n {\n     // Open history file to read\n-    CAutoFile filein = CAutoFile(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    CAutoFile filein(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (!filein)\n         return error(\"CBlockUndo::ReadFromDisk : OpenBlockFile failed\");\n "
      },
      {
        "sha": "866bac2c0e864a03283cfa9d1d4cfb6f0fa8f171",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eee030f6bc62117b4d3c27aa78818964d95a7063/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eee030f6bc62117b4d3c27aa78818964d95a7063/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=eee030f6bc62117b4d3c27aa78818964d95a7063",
        "patch": "@@ -1957,7 +1957,7 @@ bool CAddrDB::Write(const CAddrMan& addr)\n     // open temp output file, and associate with CAutoFile\n     boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n     FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n-    CAutoFile fileout = CAutoFile(file, SER_DISK, CLIENT_VERSION);\n+    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (!fileout)\n         return error(\"%s : Failed to open file %s\", __func__, pathTmp.string());\n \n@@ -1982,7 +1982,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n {\n     // open input file, and associate with CAutoFile\n     FILE *file = fopen(pathAddr.string().c_str(), \"rb\");\n-    CAutoFile filein = CAutoFile(file, SER_DISK, CLIENT_VERSION);\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (!filein)\n         return error(\"%s : Failed to open file %s\", __func__, pathAddr.string());\n "
      },
      {
        "sha": "67d40a45c72a7b6430052f41fbe6f1c65f366fec",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eee030f6bc62117b4d3c27aa78818964d95a7063/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eee030f6bc62117b4d3c27aa78818964d95a7063/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=eee030f6bc62117b4d3c27aa78818964d95a7063",
        "patch": "@@ -35,7 +35,7 @@ bool read_block(const std::string& filename, CBlock& block)\n \n     fseek(fp, 8, SEEK_SET); // skip msgheader/size\n \n-    CAutoFile filein = CAutoFile(fp, SER_DISK, CLIENT_VERSION);\n+    CAutoFile filein(fp, SER_DISK, CLIENT_VERSION);\n     if (!filein) return false;\n \n     filein >> block;"
      }
    ]
  },
  {
    "sha": "6eb67b0ed2b350b772f7edb67aee1bcf09c91b0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZWI2N2IwZWQyYjM1MGI3NzJmN2VkYjY3YWVlMWJjZjA5YzkxYjBi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-25T23:25:47Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-26T17:27:40Z"
      },
      "message": "autofile: Disallow by-value copies of CAutoFile\n\nOne might assume that CAutoFile would be ref-counted so that a copied object\nwould delay closing the underlying file until all copies have gone out of\nscope. Since that's not the case with CAutoFile, explicitly disable copying.",
      "tree": {
        "sha": "f0e5a6c11a01cbfc861ed86fcd122ff7253a5948",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f0e5a6c11a01cbfc861ed86fcd122ff7253a5948"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6eb67b0ed2b350b772f7edb67aee1bcf09c91b0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6eb67b0ed2b350b772f7edb67aee1bcf09c91b0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6eb67b0ed2b350b772f7edb67aee1bcf09c91b0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6eb67b0ed2b350b772f7edb67aee1bcf09c91b0b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eee030f6bc62117b4d3c27aa78818964d95a7063",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eee030f6bc62117b4d3c27aa78818964d95a7063",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eee030f6bc62117b4d3c27aa78818964d95a7063"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7f8f93328434400443a5875ec15fc878705625e4",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6eb67b0ed2b350b772f7edb67aee1bcf09c91b0b/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6eb67b0ed2b350b772f7edb67aee1bcf09c91b0b/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=6eb67b0ed2b350b772f7edb67aee1bcf09c91b0b",
        "patch": "@@ -1154,14 +1154,18 @@ class CDataStream\n \n \n \n-/** RAII wrapper for FILE*.\n+/** Non-refcounted RAII wrapper for FILE*.\n  *\n  * Will automatically close the file when it goes out of scope if not null.\n  * If you're returning the file pointer, return file.release().\n  * If you need to close the file early, use file.fclose() instead of fclose(file).\n  */\n class CAutoFile\n {\n+private:\n+    // Disallow copies\n+    CAutoFile(const CAutoFile&);\n+    CAutoFile& operator=(const CAutoFile&);\n protected:\n     FILE* file;\n public:"
      }
    ]
  },
  {
    "sha": "c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmRiNTk5YzFmMWFkMmQ2MWI4MTc2YTIyNTZhODAxMDliMGFjOGI5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-26T17:26:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-26T17:31:18Z"
      },
      "message": "Merge pull request #4977\n\ncf42c36 Apply clang-format on crypto/* and compat/* (Pieter Wuille)",
      "tree": {
        "sha": "74bfd745a7b148f1fe76c4a77e024be409412fb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74bfd745a7b148f1fe76c4a77e024be409412fb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUJaLmAAoJEFeJbS/48LZX/UMMAJ2Yn5UoHJPkUsYkW04b+uL1\nPiVkZgAXixKp5TsMyO8YAVtKJRomtYW2bCXGCspgi5vv7R+LFHcLyzthrgq9Q6H4\n7R5ev3D3/JeGNhBRZRTogqmGcN4+V99MwRi3JVw2fmAV+CN17eZURWKg7MF605F/\nrK5IaHJJgn0GmaAbE+JqwiUXQiQbPZUn8pByYOXI+Bxzi1mHmyriCfR5/6O/Bq84\n5/94jMgFhbETg0t5JhPm4HrkDwEXVtKPbEN4HfTMOdyXAhqzSGyZSSeX2K/3mmDU\nNPTZAONtvtmQvusdEbjofm3/MeBZ7EQIXpfz/QmFb/7XwHjnDtTgxe6anwJOtw19\noC7lGP2rGhQb60ktW8XyXGo9jgiBr1i5sNoBdDwVEAfr2gIdTEGZLNCPvrNAioaZ\nxeKpr5Q0Nb0WVow09GYzyrXXtHxTvy17GONBcAVMMHbEHrFiJNttdo+V75YetLub\nerrC5yCsGVLdQpTgWqlnw+d5++I57tHL31X+gB9cMA==\n=NZjC\n-----END PGP SIGNATURE-----",
        "payload": "tree 74bfd745a7b148f1fe76c4a77e024be409412fb7\nparent 4b2b78b9f2bd339cc4505996258e00c186e91792\nparent cf42c36e9963f9cf13704d8d74a9546f0db33d40\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1411752369 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1411752678 +0200\n\nMerge pull request #4977\n\ncf42c36 Apply clang-format on crypto/* and compat/* (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b2b78b9f2bd339cc4505996258e00c186e91792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b2b78b9f2bd339cc4505996258e00c186e91792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b2b78b9f2bd339cc4505996258e00c186e91792"
      },
      {
        "sha": "cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf42c36e9963f9cf13704d8d74a9546f0db33d40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf42c36e9963f9cf13704d8d74a9546f0db33d40"
      }
    ],
    "stats": {
      "total": 1047,
      "additions": 589,
      "deletions": 458
    },
    "files": [
      {
        "sha": "94c79e4b9713c0014654dff91256977a2e1c7344",
        "filename": "src/compat/glibc_compat.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/compat/glibc_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/compat/glibc_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_compat.cpp?ref=c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
        "patch": "@@ -18,11 +18,11 @@ extern \"C\" void* memcpy(void* a, const void* b, size_t c)\n     return memmove(a, b, c);\n }\n \n-extern \"C\" void __chk_fail (void) __attribute__((__noreturn__));\n+extern \"C\" void __chk_fail(void) __attribute__((__noreturn__));\n extern \"C\" FDELT_TYPE __fdelt_warn(FDELT_TYPE a)\n {\n     if (a >= FD_SETSIZE)\n-        __chk_fail ();\n+        __chk_fail();\n     return a / __NFDBITS;\n }\n extern \"C\" FDELT_TYPE __fdelt_chk(FDELT_TYPE) __attribute__((weak, alias(\"__fdelt_warn\")));"
      },
      {
        "sha": "acc7809d773d3702e2894ebaded2022255832627",
        "filename": "src/compat/glibc_sanity.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/compat/glibc_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/compat/glibc_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity.cpp?ref=c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
        "patch": "@@ -14,10 +14,11 @@\n extern \"C\" void* memcpy(void* a, const void* b, size_t c);\n void* memcpy_int(void* a, const void* b, size_t c)\n {\n-    return memcpy(a,b,c);\n+    return memcpy(a, b, c);\n }\n \n-namespace {\n+namespace\n+{\n // trigger: Use the memcpy_int wrapper which calls our internal memcpy.\n //   A direct call to memcpy may be optimized away by the compiler.\n // test: Fill an array with a sequence of integers. memcpy to a new empty array.\n@@ -31,11 +32,10 @@ bool sanity_test_memcpy()\n     for (unsigned int i = 0; i != T; ++i)\n         memcpy_test[i] = i;\n \n-    memcpy_int(memcpy_verify,memcpy_test,sizeof(memcpy_test));\n+    memcpy_int(memcpy_verify, memcpy_test, sizeof(memcpy_test));\n \n-    for (unsigned int i = 0; i != T; ++i)\n-    {\n-        if(memcpy_verify[i] != i)\n+    for (unsigned int i = 0; i != T; ++i) {\n+        if (memcpy_verify[i] != i)\n             return false;\n     }\n     return true;\n@@ -51,7 +51,7 @@ bool sanity_test_fdelt()\n     fd_set fds;\n     FD_ZERO(&fds);\n     FD_SET(0, &fds);\n-    return FD_ISSET(0,&fds);\n+    return FD_ISSET(0, &fds);\n }\n #endif\n "
      },
      {
        "sha": "41d8458cb272892343f5a9caba50e79b23641d6c",
        "filename": "src/compat/glibcxx_compat.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 10,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/compat/glibcxx_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/compat/glibcxx_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_compat.cpp?ref=c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
        "patch": "@@ -11,8 +11,8 @@\n #define _GLIBCXX_USE_NOEXCEPT throw()\n #endif\n \n-namespace std {\n-\n+namespace std\n+{\n const char* bad_exception::what() const throw()\n {\n     return \"std::bad_exception\";\n@@ -30,9 +30,8 @@ const char* bad_alloc::what() const throw()\n \n namespace __detail\n {\n-struct _List_node_base\n-{\n-    void _M_hook(std::__detail::_List_node_base* const __position) throw () __attribute__((used))\n+struct _List_node_base {\n+    void _M_hook(std::__detail::_List_node_base* const __position) throw() __attribute__((used))\n     {\n         _M_next = __position;\n         _M_prev = __position->_M_prev;\n@@ -62,9 +61,9 @@ template ostream& __ostream_insert(ostream&, const char*, streamsize);\n template istream& istream::_M_extract(long&);\n template istream& istream::_M_extract(unsigned short&);\n \n-out_of_range::~out_of_range() _GLIBCXX_USE_NOEXCEPT { }\n+out_of_range::~out_of_range() _GLIBCXX_USE_NOEXCEPT {}\n \n-length_error::~length_error() _GLIBCXX_USE_NOEXCEPT { }\n+length_error::~length_error() _GLIBCXX_USE_NOEXCEPT {}\n \n // Used with permission.\n // See: https://github.com/madlib/madlib/commit/c3db418c0d34d6813608f2137fef1012ce03043d\n@@ -85,11 +84,11 @@ void ctype<char>::_M_widen_init() const\n         }\n }\n \n-void  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__));\n-void  __throw_out_of_range_fmt(const char* err, ...)\n+void __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__));\n+void __throw_out_of_range_fmt(const char* err, ...)\n {\n     // Safe and over-simplified version. Ignore the format and print it as-is.\n     __throw_out_of_range(err);\n }\n \n-}// namespace std\n+} // namespace std"
      },
      {
        "sha": "9b1fefd448188b20519321c4dc63373abdc78f02",
        "filename": "src/compat/glibcxx_sanity.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 14,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/compat/glibcxx_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/compat/glibcxx_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_sanity.cpp?ref=c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
        "patch": "@@ -6,15 +6,15 @@\n #include <locale>\n #include <stdexcept>\n \n-namespace{\n-\n+namespace\n+{\n // trigger: use ctype<char>::widen to trigger ctype<char>::_M_widen_init().\n // test: convert a char from narrow to wide and back. Verify that the result\n //   matches the original.\n bool sanity_test_widen(char testchar)\n {\n-    const std::ctype<char>& test(std::use_facet< std::ctype<char> >(std::locale()));\n-    return test.narrow(test.widen(testchar),'b') == testchar;\n+    const std::ctype<char>& test(std::use_facet<std::ctype<char> >(std::locale()));\n+    return test.narrow(test.widen(testchar), 'b') == testchar;\n }\n \n // trigger: use list::push_back and list::pop_back to trigger _M_hook and\n@@ -25,14 +25,13 @@ bool sanity_test_list(unsigned int size)\n {\n     std::list<unsigned int> test;\n     for (unsigned int i = 0; i != size; ++i)\n-        test.push_back(i+1);\n+        test.push_back(i + 1);\n \n     if (test.size() != size)\n         return false;\n \n-    while (!test.empty())\n-    {\n-        if(test.back() != test.size())\n+    while (!test.empty()) {\n+        if (test.back() != test.size())\n             return false;\n         test.pop_back();\n     }\n@@ -47,15 +46,12 @@ bool sanity_test_list(unsigned int size)\n bool sanity_test_range_fmt()\n {\n     std::string test;\n-    try\n-    {\n+    try {\n         test.at(1);\n-    }\n-    catch (const std::out_of_range&)\n-    {\n+    } catch (const std::out_of_range&) {\n         return true;\n+    } catch (...) {\n     }\n-    catch (...){}\n     return false;\n }\n "
      },
      {
        "sha": "7c3d0a135b19a60cc4f96717c8ab1fe475f1270e",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 40,
        "deletions": 15,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
        "patch": "@@ -13,7 +13,8 @@\n #include <endian.h>\n #endif\n \n-uint32_t static inline ReadLE32(const unsigned char *ptr) {\n+uint32_t static inline ReadLE32(const unsigned char* ptr)\n+{\n #if HAVE_DECL_LE32TOH == 1\n     return le32toh(*((uint32_t*)ptr));\n #elif !defined(WORDS_BIGENDIAN)\n@@ -23,8 +24,8 @@ uint32_t static inline ReadLE32(const unsigned char *ptr) {\n #endif\n }\n \n-uint64_t static inline ReadLE64(const unsigned char *ptr) {\n-\n+uint64_t static inline ReadLE64(const unsigned char* ptr)\n+{\n #if HAVE_DECL_LE64TOH == 1\n     return le64toh(*((uint64_t*)ptr));\n #elif !defined(WORDS_BIGENDIAN)\n@@ -35,36 +36,49 @@ uint64_t static inline ReadLE64(const unsigned char *ptr) {\n #endif\n }\n \n-void static inline WriteLE32(unsigned char *ptr, uint32_t x) {\n+void static inline WriteLE32(unsigned char* ptr, uint32_t x)\n+{\n #if HAVE_DECL_HTOLE32 == 1\n     *((uint32_t*)ptr) = htole32(x);\n #elif !defined(WORDS_BIGENDIAN)\n     *((uint32_t*)ptr) = x;\n #else\n-    ptr[3] = x >> 24; ptr[2] = x >> 16; ptr[1] = x >> 8; ptr[0] = x;\n+    ptr[3] = x >> 24;\n+    ptr[2] = x >> 16;\n+    ptr[1] = x >> 8;\n+    ptr[0] = x;\n #endif\n }\n \n-void static inline WriteLE64(unsigned char *ptr, uint64_t x) {\n+void static inline WriteLE64(unsigned char* ptr, uint64_t x)\n+{\n #if HAVE_DECL_HTOLE64 == 1\n     *((uint64_t*)ptr) = htole64(x);\n #elif !defined(WORDS_BIGENDIAN)\n     *((uint64_t*)ptr) = x;\n #else\n-    ptr[7] = x >> 56; ptr[6] = x >> 48; ptr[5] = x >> 40; ptr[4] = x >> 32;\n-    ptr[3] = x >> 24; ptr[2] = x >> 16; ptr[1] = x >> 8; ptr[0] = x;\n+    ptr[7] = x >> 56;\n+    ptr[6] = x >> 48;\n+    ptr[5] = x >> 40;\n+    ptr[4] = x >> 32;\n+    ptr[3] = x >> 24;\n+    ptr[2] = x >> 16;\n+    ptr[1] = x >> 8;\n+    ptr[0] = x;\n #endif\n }\n \n-uint32_t static inline ReadBE32(const unsigned char *ptr) {\n+uint32_t static inline ReadBE32(const unsigned char* ptr)\n+{\n #if HAVE_DECL_BE32TOH == 1\n     return be32toh(*((uint32_t*)ptr));\n #else\n     return ((uint32_t)ptr[0] << 24 | (uint32_t)ptr[1] << 16 | (uint32_t)ptr[2] << 8 | (uint32_t)ptr[3]);\n #endif\n }\n \n-uint64_t static inline ReadBE64(const unsigned char *ptr) {\n+uint64_t static inline ReadBE64(const unsigned char* ptr)\n+{\n #if HAVE_DECL_BE64TOH == 1\n     return be64toh(*((uint64_t*)ptr));\n #else\n@@ -73,20 +87,31 @@ uint64_t static inline ReadBE64(const unsigned char *ptr) {\n #endif\n }\n \n-void static inline WriteBE32(unsigned char *ptr, uint32_t x) {\n+void static inline WriteBE32(unsigned char* ptr, uint32_t x)\n+{\n #if HAVE_DECL_HTOBE32 == 1\n     *((uint32_t*)ptr) = htobe32(x);\n #else\n-    ptr[0] = x >> 24; ptr[1] = x >> 16; ptr[2] = x >> 8; ptr[3] = x;\n+    ptr[0] = x >> 24;\n+    ptr[1] = x >> 16;\n+    ptr[2] = x >> 8;\n+    ptr[3] = x;\n #endif\n }\n \n-void static inline WriteBE64(unsigned char *ptr, uint64_t x) {\n+void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n+{\n #if HAVE_DECL_HTOBE64 == 1\n     *((uint64_t*)ptr) = htobe64(x);\n #else\n-    ptr[0] = x >> 56; ptr[1] = x >> 48; ptr[2] = x >> 40; ptr[3] = x >> 32;\n-    ptr[4] = x >> 24; ptr[5] = x >> 16; ptr[6] = x >> 8; ptr[7] = x;\n+    ptr[0] = x >> 56;\n+    ptr[1] = x >> 48;\n+    ptr[2] = x >> 40;\n+    ptr[3] = x >> 32;\n+    ptr[4] = x >> 24;\n+    ptr[5] = x >> 16;\n+    ptr[6] = x >> 8;\n+    ptr[7] = x;\n #endif\n }\n "
      },
      {
        "sha": "90b196ba32c76f9cd3f561ef8c72ea23fcff434f",
        "filename": "src/crypto/ripemd160.cpp",
        "status": "modified",
        "additions": 205,
        "deletions": 118,
        "changes": 323,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/crypto/ripemd160.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/crypto/ripemd160.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.cpp?ref=c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
        "patch": "@@ -9,159 +9,244 @@\n #include <string.h>\n \n // Internal implementation code.\n-namespace {\n-\n+namespace\n+{\n /// Internal RIPEMD-160 implementation.\n-namespace ripemd160 {\n-\n+namespace ripemd160\n+{\n uint32_t inline f1(uint32_t x, uint32_t y, uint32_t z) { return x ^ y ^ z; }\n uint32_t inline f2(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (~x & z); }\n uint32_t inline f3(uint32_t x, uint32_t y, uint32_t z) { return (x | ~y) ^ z; }\n uint32_t inline f4(uint32_t x, uint32_t y, uint32_t z) { return (x & z) | (y & ~z); }\n uint32_t inline f5(uint32_t x, uint32_t y, uint32_t z) { return x ^ (y | ~z); }\n \n /** Initialize RIPEMD-160 state. */\n-void inline Initialize(uint32_t *s) {\n+void inline Initialize(uint32_t* s)\n+{\n     s[0] = 0x67452301ul;\n     s[1] = 0xEFCDAB89ul;\n     s[2] = 0x98BADCFEul;\n     s[3] = 0x10325476ul;\n     s[4] = 0xC3D2E1F0ul;\n }\n \n-uint32_t inline rol(uint32_t x, int i) { return (x << i) | (x >> (32-i)); }\n+uint32_t inline rol(uint32_t x, int i) { return (x << i) | (x >> (32 - i)); }\n \n-void inline Round(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t f, uint32_t x, uint32_t k, int r) {\n+void inline Round(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t f, uint32_t x, uint32_t k, int r)\n+{\n     a = rol(a + f + x + k, r) + e;\n     c = rol(c, 10);\n }\n \n-void inline R11(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x,            0, r); }\n-void inline R21(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x5A827999ul, r); }\n-void inline R31(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6ED9EBA1ul, r); }\n-void inline R41(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x8F1BBCDCul, r); }\n-void inline R51(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0xA953FD4Eul, r); }\n+void inline R11(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }\n+void inline R21(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x5A827999ul, r); }\n+void inline R31(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6ED9EBA1ul, r); }\n+void inline R41(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x8F1BBCDCul, r); }\n+void inline R51(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0xA953FD4Eul, r); }\n \n-void inline R12(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0x50A28BE6ul, r); }\n-void inline R22(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x5C4DD124ul, r); }\n-void inline R32(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6D703EF3ul, r); }\n-void inline R42(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x7A6D76E9ul, r); }\n-void inline R52(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x,            0, r); }\n+void inline R12(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0x50A28BE6ul, r); }\n+void inline R22(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x5C4DD124ul, r); }\n+void inline R32(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6D703EF3ul, r); }\n+void inline R42(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x7A6D76E9ul, r); }\n+void inline R52(uint32_t& a, uint32_t b, uint32_t& c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x, 0, r); }\n \n /** Perform a RIPEMD-160 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t *s, const unsigned char *chunk) {\n+void Transform(uint32_t* s, const unsigned char* chunk)\n+{\n     uint32_t a1 = s[0], b1 = s[1], c1 = s[2], d1 = s[3], e1 = s[4];\n-    uint32_t a2 = a1  , b2 = b1  , c2 = c1  , d2 = d1  , e2 = e1  ;\n-    uint32_t w0  = ReadLE32(chunk +  0), w1  = ReadLE32(chunk +  4), w2  = ReadLE32(chunk +  8), w3  = ReadLE32(chunk + 12);\n-    uint32_t w4  = ReadLE32(chunk + 16), w5  = ReadLE32(chunk + 20), w6  = ReadLE32(chunk + 24), w7  = ReadLE32(chunk + 28);\n-    uint32_t w8  = ReadLE32(chunk + 32), w9  = ReadLE32(chunk + 36), w10 = ReadLE32(chunk + 40), w11 = ReadLE32(chunk + 44);\n+    uint32_t a2 = a1, b2 = b1, c2 = c1, d2 = d1, e2 = e1;\n+    uint32_t w0 = ReadLE32(chunk + 0), w1 = ReadLE32(chunk + 4), w2 = ReadLE32(chunk + 8), w3 = ReadLE32(chunk + 12);\n+    uint32_t w4 = ReadLE32(chunk + 16), w5 = ReadLE32(chunk + 20), w6 = ReadLE32(chunk + 24), w7 = ReadLE32(chunk + 28);\n+    uint32_t w8 = ReadLE32(chunk + 32), w9 = ReadLE32(chunk + 36), w10 = ReadLE32(chunk + 40), w11 = ReadLE32(chunk + 44);\n     uint32_t w12 = ReadLE32(chunk + 48), w13 = ReadLE32(chunk + 52), w14 = ReadLE32(chunk + 56), w15 = ReadLE32(chunk + 60);\n \n-    R11(a1, b1, c1, d1, e1, w0 , 11); R12(a2, b2, c2, d2, e2, w5 ,  8);\n-    R11(e1, a1, b1, c1, d1, w1 , 14); R12(e2, a2, b2, c2, d2, w14,  9);\n-    R11(d1, e1, a1, b1, c1, w2 , 15); R12(d2, e2, a2, b2, c2, w7 ,  9);\n-    R11(c1, d1, e1, a1, b1, w3 , 12); R12(c2, d2, e2, a2, b2, w0 , 11);\n-    R11(b1, c1, d1, e1, a1, w4 ,  5); R12(b2, c2, d2, e2, a2, w9 , 13);\n-    R11(a1, b1, c1, d1, e1, w5 ,  8); R12(a2, b2, c2, d2, e2, w2 , 15);\n-    R11(e1, a1, b1, c1, d1, w6 ,  7); R12(e2, a2, b2, c2, d2, w11, 15);\n-    R11(d1, e1, a1, b1, c1, w7 ,  9); R12(d2, e2, a2, b2, c2, w4 ,  5);\n-    R11(c1, d1, e1, a1, b1, w8 , 11); R12(c2, d2, e2, a2, b2, w13,  7);\n-    R11(b1, c1, d1, e1, a1, w9 , 13); R12(b2, c2, d2, e2, a2, w6 ,  7);\n-    R11(a1, b1, c1, d1, e1, w10, 14); R12(a2, b2, c2, d2, e2, w15,  8);\n-    R11(e1, a1, b1, c1, d1, w11, 15); R12(e2, a2, b2, c2, d2, w8 , 11);\n-    R11(d1, e1, a1, b1, c1, w12,  6); R12(d2, e2, a2, b2, c2, w1 , 14);\n-    R11(c1, d1, e1, a1, b1, w13,  7); R12(c2, d2, e2, a2, b2, w10, 14);\n-    R11(b1, c1, d1, e1, a1, w14,  9); R12(b2, c2, d2, e2, a2, w3 , 12);\n-    R11(a1, b1, c1, d1, e1, w15,  8); R12(a2, b2, c2, d2, e2, w12,  6);\n-\n-    R21(e1, a1, b1, c1, d1, w7 ,  7); R22(e2, a2, b2, c2, d2, w6 ,  9);\n-    R21(d1, e1, a1, b1, c1, w4 ,  6); R22(d2, e2, a2, b2, c2, w11, 13);\n-    R21(c1, d1, e1, a1, b1, w13,  8); R22(c2, d2, e2, a2, b2, w3 , 15);\n-    R21(b1, c1, d1, e1, a1, w1 , 13); R22(b2, c2, d2, e2, a2, w7 ,  7);\n-    R21(a1, b1, c1, d1, e1, w10, 11); R22(a2, b2, c2, d2, e2, w0 , 12);\n-    R21(e1, a1, b1, c1, d1, w6 ,  9); R22(e2, a2, b2, c2, d2, w13,  8);\n-    R21(d1, e1, a1, b1, c1, w15,  7); R22(d2, e2, a2, b2, c2, w5 ,  9);\n-    R21(c1, d1, e1, a1, b1, w3 , 15); R22(c2, d2, e2, a2, b2, w10, 11);\n-    R21(b1, c1, d1, e1, a1, w12,  7); R22(b2, c2, d2, e2, a2, w14,  7);\n-    R21(a1, b1, c1, d1, e1, w0 , 12); R22(a2, b2, c2, d2, e2, w15,  7);\n-    R21(e1, a1, b1, c1, d1, w9 , 15); R22(e2, a2, b2, c2, d2, w8 , 12);\n-    R21(d1, e1, a1, b1, c1, w5 ,  9); R22(d2, e2, a2, b2, c2, w12,  7);\n-    R21(c1, d1, e1, a1, b1, w2 , 11); R22(c2, d2, e2, a2, b2, w4 ,  6);\n-    R21(b1, c1, d1, e1, a1, w14,  7); R22(b2, c2, d2, e2, a2, w9 , 15);\n-    R21(a1, b1, c1, d1, e1, w11, 13); R22(a2, b2, c2, d2, e2, w1 , 13);\n-    R21(e1, a1, b1, c1, d1, w8 , 12); R22(e2, a2, b2, c2, d2, w2 , 11);\n-\n-    R31(d1, e1, a1, b1, c1, w3 , 11); R32(d2, e2, a2, b2, c2, w15,  9);\n-    R31(c1, d1, e1, a1, b1, w10, 13); R32(c2, d2, e2, a2, b2, w5 ,  7);\n-    R31(b1, c1, d1, e1, a1, w14,  6); R32(b2, c2, d2, e2, a2, w1 , 15);\n-    R31(a1, b1, c1, d1, e1, w4 ,  7); R32(a2, b2, c2, d2, e2, w3 , 11);\n-    R31(e1, a1, b1, c1, d1, w9 , 14); R32(e2, a2, b2, c2, d2, w7 ,  8);\n-    R31(d1, e1, a1, b1, c1, w15,  9); R32(d2, e2, a2, b2, c2, w14,  6);\n-    R31(c1, d1, e1, a1, b1, w8 , 13); R32(c2, d2, e2, a2, b2, w6 ,  6);\n-    R31(b1, c1, d1, e1, a1, w1 , 15); R32(b2, c2, d2, e2, a2, w9 , 14);\n-    R31(a1, b1, c1, d1, e1, w2 , 14); R32(a2, b2, c2, d2, e2, w11, 12);\n-    R31(e1, a1, b1, c1, d1, w7 ,  8); R32(e2, a2, b2, c2, d2, w8 , 13);\n-    R31(d1, e1, a1, b1, c1, w0 , 13); R32(d2, e2, a2, b2, c2, w12,  5);\n-    R31(c1, d1, e1, a1, b1, w6 ,  6); R32(c2, d2, e2, a2, b2, w2 , 14);\n-    R31(b1, c1, d1, e1, a1, w13,  5); R32(b2, c2, d2, e2, a2, w10, 13);\n-    R31(a1, b1, c1, d1, e1, w11, 12); R32(a2, b2, c2, d2, e2, w0 , 13);\n-    R31(e1, a1, b1, c1, d1, w5 ,  7); R32(e2, a2, b2, c2, d2, w4 ,  7);\n-    R31(d1, e1, a1, b1, c1, w12,  5); R32(d2, e2, a2, b2, c2, w13,  5);\n-\n-    R41(c1, d1, e1, a1, b1, w1 , 11); R42(c2, d2, e2, a2, b2, w8 , 15);\n-    R41(b1, c1, d1, e1, a1, w9 , 12); R42(b2, c2, d2, e2, a2, w6 ,  5);\n-    R41(a1, b1, c1, d1, e1, w11, 14); R42(a2, b2, c2, d2, e2, w4 ,  8);\n-    R41(e1, a1, b1, c1, d1, w10, 15); R42(e2, a2, b2, c2, d2, w1 , 11);\n-    R41(d1, e1, a1, b1, c1, w0 , 14); R42(d2, e2, a2, b2, c2, w3 , 14);\n-    R41(c1, d1, e1, a1, b1, w8 , 15); R42(c2, d2, e2, a2, b2, w11, 14);\n-    R41(b1, c1, d1, e1, a1, w12,  9); R42(b2, c2, d2, e2, a2, w15,  6);\n-    R41(a1, b1, c1, d1, e1, w4 ,  8); R42(a2, b2, c2, d2, e2, w0 , 14);\n-    R41(e1, a1, b1, c1, d1, w13,  9); R42(e2, a2, b2, c2, d2, w5 ,  6);\n-    R41(d1, e1, a1, b1, c1, w3 , 14); R42(d2, e2, a2, b2, c2, w12,  9);\n-    R41(c1, d1, e1, a1, b1, w7 ,  5); R42(c2, d2, e2, a2, b2, w2 , 12);\n-    R41(b1, c1, d1, e1, a1, w15,  6); R42(b2, c2, d2, e2, a2, w13,  9);\n-    R41(a1, b1, c1, d1, e1, w14,  8); R42(a2, b2, c2, d2, e2, w9 , 12);\n-    R41(e1, a1, b1, c1, d1, w5 ,  6); R42(e2, a2, b2, c2, d2, w7 ,  5);\n-    R41(d1, e1, a1, b1, c1, w6 ,  5); R42(d2, e2, a2, b2, c2, w10, 15);\n-    R41(c1, d1, e1, a1, b1, w2 , 12); R42(c2, d2, e2, a2, b2, w14,  8);\n-\n-    R51(b1, c1, d1, e1, a1, w4 ,  9); R52(b2, c2, d2, e2, a2, w12,  8);\n-    R51(a1, b1, c1, d1, e1, w0 , 15); R52(a2, b2, c2, d2, e2, w15,  5);\n-    R51(e1, a1, b1, c1, d1, w5 ,  5); R52(e2, a2, b2, c2, d2, w10, 12);\n-    R51(d1, e1, a1, b1, c1, w9 , 11); R52(d2, e2, a2, b2, c2, w4 ,  9);\n-    R51(c1, d1, e1, a1, b1, w7 ,  6); R52(c2, d2, e2, a2, b2, w1 , 12);\n-    R51(b1, c1, d1, e1, a1, w12,  8); R52(b2, c2, d2, e2, a2, w5 ,  5);\n-    R51(a1, b1, c1, d1, e1, w2 , 13); R52(a2, b2, c2, d2, e2, w8 , 14);\n-    R51(e1, a1, b1, c1, d1, w10, 12); R52(e2, a2, b2, c2, d2, w7 ,  6);\n-    R51(d1, e1, a1, b1, c1, w14,  5); R52(d2, e2, a2, b2, c2, w6 ,  8);\n-    R51(c1, d1, e1, a1, b1, w1 , 12); R52(c2, d2, e2, a2, b2, w2 , 13);\n-    R51(b1, c1, d1, e1, a1, w3 , 13); R52(b2, c2, d2, e2, a2, w13,  6);\n-    R51(a1, b1, c1, d1, e1, w8 , 14); R52(a2, b2, c2, d2, e2, w14,  5);\n-    R51(e1, a1, b1, c1, d1, w11, 11); R52(e2, a2, b2, c2, d2, w0 , 15);\n-    R51(d1, e1, a1, b1, c1, w6 ,  8); R52(d2, e2, a2, b2, c2, w3 , 13);\n-    R51(c1, d1, e1, a1, b1, w15,  5); R52(c2, d2, e2, a2, b2, w9 , 11);\n-    R51(b1, c1, d1, e1, a1, w13,  6); R52(b2, c2, d2, e2, a2, w11, 11);\n+    R11(a1, b1, c1, d1, e1, w0, 11);\n+    R12(a2, b2, c2, d2, e2, w5, 8);\n+    R11(e1, a1, b1, c1, d1, w1, 14);\n+    R12(e2, a2, b2, c2, d2, w14, 9);\n+    R11(d1, e1, a1, b1, c1, w2, 15);\n+    R12(d2, e2, a2, b2, c2, w7, 9);\n+    R11(c1, d1, e1, a1, b1, w3, 12);\n+    R12(c2, d2, e2, a2, b2, w0, 11);\n+    R11(b1, c1, d1, e1, a1, w4, 5);\n+    R12(b2, c2, d2, e2, a2, w9, 13);\n+    R11(a1, b1, c1, d1, e1, w5, 8);\n+    R12(a2, b2, c2, d2, e2, w2, 15);\n+    R11(e1, a1, b1, c1, d1, w6, 7);\n+    R12(e2, a2, b2, c2, d2, w11, 15);\n+    R11(d1, e1, a1, b1, c1, w7, 9);\n+    R12(d2, e2, a2, b2, c2, w4, 5);\n+    R11(c1, d1, e1, a1, b1, w8, 11);\n+    R12(c2, d2, e2, a2, b2, w13, 7);\n+    R11(b1, c1, d1, e1, a1, w9, 13);\n+    R12(b2, c2, d2, e2, a2, w6, 7);\n+    R11(a1, b1, c1, d1, e1, w10, 14);\n+    R12(a2, b2, c2, d2, e2, w15, 8);\n+    R11(e1, a1, b1, c1, d1, w11, 15);\n+    R12(e2, a2, b2, c2, d2, w8, 11);\n+    R11(d1, e1, a1, b1, c1, w12, 6);\n+    R12(d2, e2, a2, b2, c2, w1, 14);\n+    R11(c1, d1, e1, a1, b1, w13, 7);\n+    R12(c2, d2, e2, a2, b2, w10, 14);\n+    R11(b1, c1, d1, e1, a1, w14, 9);\n+    R12(b2, c2, d2, e2, a2, w3, 12);\n+    R11(a1, b1, c1, d1, e1, w15, 8);\n+    R12(a2, b2, c2, d2, e2, w12, 6);\n+\n+    R21(e1, a1, b1, c1, d1, w7, 7);\n+    R22(e2, a2, b2, c2, d2, w6, 9);\n+    R21(d1, e1, a1, b1, c1, w4, 6);\n+    R22(d2, e2, a2, b2, c2, w11, 13);\n+    R21(c1, d1, e1, a1, b1, w13, 8);\n+    R22(c2, d2, e2, a2, b2, w3, 15);\n+    R21(b1, c1, d1, e1, a1, w1, 13);\n+    R22(b2, c2, d2, e2, a2, w7, 7);\n+    R21(a1, b1, c1, d1, e1, w10, 11);\n+    R22(a2, b2, c2, d2, e2, w0, 12);\n+    R21(e1, a1, b1, c1, d1, w6, 9);\n+    R22(e2, a2, b2, c2, d2, w13, 8);\n+    R21(d1, e1, a1, b1, c1, w15, 7);\n+    R22(d2, e2, a2, b2, c2, w5, 9);\n+    R21(c1, d1, e1, a1, b1, w3, 15);\n+    R22(c2, d2, e2, a2, b2, w10, 11);\n+    R21(b1, c1, d1, e1, a1, w12, 7);\n+    R22(b2, c2, d2, e2, a2, w14, 7);\n+    R21(a1, b1, c1, d1, e1, w0, 12);\n+    R22(a2, b2, c2, d2, e2, w15, 7);\n+    R21(e1, a1, b1, c1, d1, w9, 15);\n+    R22(e2, a2, b2, c2, d2, w8, 12);\n+    R21(d1, e1, a1, b1, c1, w5, 9);\n+    R22(d2, e2, a2, b2, c2, w12, 7);\n+    R21(c1, d1, e1, a1, b1, w2, 11);\n+    R22(c2, d2, e2, a2, b2, w4, 6);\n+    R21(b1, c1, d1, e1, a1, w14, 7);\n+    R22(b2, c2, d2, e2, a2, w9, 15);\n+    R21(a1, b1, c1, d1, e1, w11, 13);\n+    R22(a2, b2, c2, d2, e2, w1, 13);\n+    R21(e1, a1, b1, c1, d1, w8, 12);\n+    R22(e2, a2, b2, c2, d2, w2, 11);\n+\n+    R31(d1, e1, a1, b1, c1, w3, 11);\n+    R32(d2, e2, a2, b2, c2, w15, 9);\n+    R31(c1, d1, e1, a1, b1, w10, 13);\n+    R32(c2, d2, e2, a2, b2, w5, 7);\n+    R31(b1, c1, d1, e1, a1, w14, 6);\n+    R32(b2, c2, d2, e2, a2, w1, 15);\n+    R31(a1, b1, c1, d1, e1, w4, 7);\n+    R32(a2, b2, c2, d2, e2, w3, 11);\n+    R31(e1, a1, b1, c1, d1, w9, 14);\n+    R32(e2, a2, b2, c2, d2, w7, 8);\n+    R31(d1, e1, a1, b1, c1, w15, 9);\n+    R32(d2, e2, a2, b2, c2, w14, 6);\n+    R31(c1, d1, e1, a1, b1, w8, 13);\n+    R32(c2, d2, e2, a2, b2, w6, 6);\n+    R31(b1, c1, d1, e1, a1, w1, 15);\n+    R32(b2, c2, d2, e2, a2, w9, 14);\n+    R31(a1, b1, c1, d1, e1, w2, 14);\n+    R32(a2, b2, c2, d2, e2, w11, 12);\n+    R31(e1, a1, b1, c1, d1, w7, 8);\n+    R32(e2, a2, b2, c2, d2, w8, 13);\n+    R31(d1, e1, a1, b1, c1, w0, 13);\n+    R32(d2, e2, a2, b2, c2, w12, 5);\n+    R31(c1, d1, e1, a1, b1, w6, 6);\n+    R32(c2, d2, e2, a2, b2, w2, 14);\n+    R31(b1, c1, d1, e1, a1, w13, 5);\n+    R32(b2, c2, d2, e2, a2, w10, 13);\n+    R31(a1, b1, c1, d1, e1, w11, 12);\n+    R32(a2, b2, c2, d2, e2, w0, 13);\n+    R31(e1, a1, b1, c1, d1, w5, 7);\n+    R32(e2, a2, b2, c2, d2, w4, 7);\n+    R31(d1, e1, a1, b1, c1, w12, 5);\n+    R32(d2, e2, a2, b2, c2, w13, 5);\n+\n+    R41(c1, d1, e1, a1, b1, w1, 11);\n+    R42(c2, d2, e2, a2, b2, w8, 15);\n+    R41(b1, c1, d1, e1, a1, w9, 12);\n+    R42(b2, c2, d2, e2, a2, w6, 5);\n+    R41(a1, b1, c1, d1, e1, w11, 14);\n+    R42(a2, b2, c2, d2, e2, w4, 8);\n+    R41(e1, a1, b1, c1, d1, w10, 15);\n+    R42(e2, a2, b2, c2, d2, w1, 11);\n+    R41(d1, e1, a1, b1, c1, w0, 14);\n+    R42(d2, e2, a2, b2, c2, w3, 14);\n+    R41(c1, d1, e1, a1, b1, w8, 15);\n+    R42(c2, d2, e2, a2, b2, w11, 14);\n+    R41(b1, c1, d1, e1, a1, w12, 9);\n+    R42(b2, c2, d2, e2, a2, w15, 6);\n+    R41(a1, b1, c1, d1, e1, w4, 8);\n+    R42(a2, b2, c2, d2, e2, w0, 14);\n+    R41(e1, a1, b1, c1, d1, w13, 9);\n+    R42(e2, a2, b2, c2, d2, w5, 6);\n+    R41(d1, e1, a1, b1, c1, w3, 14);\n+    R42(d2, e2, a2, b2, c2, w12, 9);\n+    R41(c1, d1, e1, a1, b1, w7, 5);\n+    R42(c2, d2, e2, a2, b2, w2, 12);\n+    R41(b1, c1, d1, e1, a1, w15, 6);\n+    R42(b2, c2, d2, e2, a2, w13, 9);\n+    R41(a1, b1, c1, d1, e1, w14, 8);\n+    R42(a2, b2, c2, d2, e2, w9, 12);\n+    R41(e1, a1, b1, c1, d1, w5, 6);\n+    R42(e2, a2, b2, c2, d2, w7, 5);\n+    R41(d1, e1, a1, b1, c1, w6, 5);\n+    R42(d2, e2, a2, b2, c2, w10, 15);\n+    R41(c1, d1, e1, a1, b1, w2, 12);\n+    R42(c2, d2, e2, a2, b2, w14, 8);\n+\n+    R51(b1, c1, d1, e1, a1, w4, 9);\n+    R52(b2, c2, d2, e2, a2, w12, 8);\n+    R51(a1, b1, c1, d1, e1, w0, 15);\n+    R52(a2, b2, c2, d2, e2, w15, 5);\n+    R51(e1, a1, b1, c1, d1, w5, 5);\n+    R52(e2, a2, b2, c2, d2, w10, 12);\n+    R51(d1, e1, a1, b1, c1, w9, 11);\n+    R52(d2, e2, a2, b2, c2, w4, 9);\n+    R51(c1, d1, e1, a1, b1, w7, 6);\n+    R52(c2, d2, e2, a2, b2, w1, 12);\n+    R51(b1, c1, d1, e1, a1, w12, 8);\n+    R52(b2, c2, d2, e2, a2, w5, 5);\n+    R51(a1, b1, c1, d1, e1, w2, 13);\n+    R52(a2, b2, c2, d2, e2, w8, 14);\n+    R51(e1, a1, b1, c1, d1, w10, 12);\n+    R52(e2, a2, b2, c2, d2, w7, 6);\n+    R51(d1, e1, a1, b1, c1, w14, 5);\n+    R52(d2, e2, a2, b2, c2, w6, 8);\n+    R51(c1, d1, e1, a1, b1, w1, 12);\n+    R52(c2, d2, e2, a2, b2, w2, 13);\n+    R51(b1, c1, d1, e1, a1, w3, 13);\n+    R52(b2, c2, d2, e2, a2, w13, 6);\n+    R51(a1, b1, c1, d1, e1, w8, 14);\n+    R52(a2, b2, c2, d2, e2, w14, 5);\n+    R51(e1, a1, b1, c1, d1, w11, 11);\n+    R52(e2, a2, b2, c2, d2, w0, 15);\n+    R51(d1, e1, a1, b1, c1, w6, 8);\n+    R52(d2, e2, a2, b2, c2, w3, 13);\n+    R51(c1, d1, e1, a1, b1, w15, 5);\n+    R52(c2, d2, e2, a2, b2, w9, 11);\n+    R51(b1, c1, d1, e1, a1, w13, 6);\n+    R52(b2, c2, d2, e2, a2, w11, 11);\n \n     uint32_t t = s[0];\n     s[0] = s[1] + c1 + d2;\n     s[1] = s[2] + d1 + e2;\n     s[2] = s[3] + e1 + a2;\n     s[3] = s[4] + a1 + b2;\n-    s[4] = t    + b1 + c2;\n+    s[4] = t + b1 + c2;\n }\n \n-}  // namespace ripemd160\n+} // namespace ripemd160\n \n-}  // namespace\n+} // namespace\n \n ////// RIPEMD160\n \n-CRIPEMD160::CRIPEMD160() : bytes(0) {\n+CRIPEMD160::CRIPEMD160() : bytes(0)\n+{\n     ripemd160::Initialize(s);\n }\n \n-CRIPEMD160& CRIPEMD160::Write(const unsigned char *data, size_t len) {\n-    const unsigned char *end = data + len;\n+CRIPEMD160& CRIPEMD160::Write(const unsigned char* data, size_t len)\n+{\n+    const unsigned char* end = data + len;\n     size_t bufsize = bytes % 64;\n     if (bufsize && bufsize + len >= 64) {\n         // Fill the buffer, and process it.\n@@ -185,20 +270,22 @@ CRIPEMD160& CRIPEMD160::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CRIPEMD160::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CRIPEMD160::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     static const unsigned char pad[64] = {0x80};\n     unsigned char sizedesc[8];\n     WriteLE64(sizedesc, bytes << 3);\n     Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n     Write(sizedesc, 8);\n     WriteLE32(hash, s[0]);\n-    WriteLE32(hash+4, s[1]);\n-    WriteLE32(hash+8, s[2]);\n-    WriteLE32(hash+12, s[3]);\n-    WriteLE32(hash+16, s[4]);\n+    WriteLE32(hash + 4, s[1]);\n+    WriteLE32(hash + 8, s[2]);\n+    WriteLE32(hash + 12, s[3]);\n+    WriteLE32(hash + 16, s[4]);\n }\n \n-CRIPEMD160& CRIPEMD160::Reset() {\n+CRIPEMD160& CRIPEMD160::Reset()\n+{\n     bytes = 0;\n     ripemd160::Initialize(s);\n     return *this;"
      },
      {
        "sha": "76197543beeae21f1623349ceeef082e73c74ef1",
        "filename": "src/crypto/ripemd160.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/crypto/ripemd160.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/crypto/ripemd160.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.h?ref=c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
        "patch": "@@ -9,7 +9,8 @@\n #include <stdlib.h>\n \n /** A hasher class for RIPEMD-160. */\n-class CRIPEMD160 {\n+class CRIPEMD160\n+{\n private:\n     uint32_t s[5];\n     unsigned char buf[64];\n@@ -19,7 +20,7 @@ class CRIPEMD160 {\n     static const size_t OUTPUT_SIZE = 20;\n \n     CRIPEMD160();\n-    CRIPEMD160& Write(const unsigned char *data, size_t len);\n+    CRIPEMD160& Write(const unsigned char* data, size_t len);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CRIPEMD160& Reset();\n };"
      },
      {
        "sha": "5fbea002d652b9eaa4b54ae64acdfe0fc1e1b51e",
        "filename": "src/crypto/sha1.cpp",
        "status": "modified",
        "additions": 102,
        "deletions": 96,
        "changes": 198,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/crypto/sha1.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/crypto/sha1.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.cpp?ref=c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
        "patch": "@@ -9,14 +9,14 @@\n #include <string.h>\n \n // Internal implementation code.\n-namespace {\n-\n+namespace\n+{\n /// Internal SHA-1 implementation.\n-namespace sha1 {\n-\n+namespace sha1\n+{\n /** One round of SHA-1. */\n-void inline Round(uint32_t a, uint32_t &b, uint32_t c, uint32_t d, uint32_t &e,\n-                  uint32_t f, uint32_t k, uint32_t w) {\n+void inline Round(uint32_t a, uint32_t& b, uint32_t c, uint32_t d, uint32_t& e, uint32_t f, uint32_t k, uint32_t w)\n+{\n     e += ((a << 5) | (a >> 27)) + f + k + w;\n     b = (b << 30) | (b >> 2);\n }\n@@ -28,7 +28,8 @@ uint32_t inline f3(uint32_t b, uint32_t c, uint32_t d) { return (b & c) | (d & (\n uint32_t inline left(uint32_t x) { return (x << 1) | (x >> 31); }\n \n /** Initialize SHA-1 state. */\n-void inline Initialize(uint32_t *s) {\n+void inline Initialize(uint32_t* s)\n+{\n     s[0] = 0x67452301ul;\n     s[1] = 0xEFCDAB89ul;\n     s[2] = 0x98BADCFEul;\n@@ -42,94 +43,95 @@ const uint32_t k3 = 0x8F1BBCDCul;\n const uint32_t k4 = 0xCA62C1D6ul;\n \n /** Perform a SHA-1 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t *s, const unsigned char *chunk) {\n+void Transform(uint32_t* s, const unsigned char* chunk)\n+{\n     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4];\n     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n \n-    Round(a, b, c, d, e, f1(b, c, d), k1, w0  = ReadBE32(chunk +  0));\n-    Round(e, a, b, c, d, f1(a, b, c), k1, w1  = ReadBE32(chunk +  4));\n-    Round(d, e, a, b, c, f1(e, a, b), k1, w2  = ReadBE32(chunk +  8));\n-    Round(c, d, e, a, b, f1(d, e, a), k1, w3  = ReadBE32(chunk + 12));\n-    Round(b, c, d, e, a, f1(c, d, e), k1, w4  = ReadBE32(chunk + 16));\n-    Round(a, b, c, d, e, f1(b, c, d), k1, w5  = ReadBE32(chunk + 20));\n-    Round(e, a, b, c, d, f1(a, b, c), k1, w6  = ReadBE32(chunk + 24));\n-    Round(d, e, a, b, c, f1(e, a, b), k1, w7  = ReadBE32(chunk + 28));\n-    Round(c, d, e, a, b, f1(d, e, a), k1, w8  = ReadBE32(chunk + 32));\n-    Round(b, c, d, e, a, f1(c, d, e), k1, w9  = ReadBE32(chunk + 36));\n+    Round(a, b, c, d, e, f1(b, c, d), k1, w0 = ReadBE32(chunk + 0));\n+    Round(e, a, b, c, d, f1(a, b, c), k1, w1 = ReadBE32(chunk + 4));\n+    Round(d, e, a, b, c, f1(e, a, b), k1, w2 = ReadBE32(chunk + 8));\n+    Round(c, d, e, a, b, f1(d, e, a), k1, w3 = ReadBE32(chunk + 12));\n+    Round(b, c, d, e, a, f1(c, d, e), k1, w4 = ReadBE32(chunk + 16));\n+    Round(a, b, c, d, e, f1(b, c, d), k1, w5 = ReadBE32(chunk + 20));\n+    Round(e, a, b, c, d, f1(a, b, c), k1, w6 = ReadBE32(chunk + 24));\n+    Round(d, e, a, b, c, f1(e, a, b), k1, w7 = ReadBE32(chunk + 28));\n+    Round(c, d, e, a, b, f1(d, e, a), k1, w8 = ReadBE32(chunk + 32));\n+    Round(b, c, d, e, a, f1(c, d, e), k1, w9 = ReadBE32(chunk + 36));\n     Round(a, b, c, d, e, f1(b, c, d), k1, w10 = ReadBE32(chunk + 40));\n     Round(e, a, b, c, d, f1(a, b, c), k1, w11 = ReadBE32(chunk + 44));\n     Round(d, e, a, b, c, f1(e, a, b), k1, w12 = ReadBE32(chunk + 48));\n     Round(c, d, e, a, b, f1(d, e, a), k1, w13 = ReadBE32(chunk + 52));\n     Round(b, c, d, e, a, f1(c, d, e), k1, w14 = ReadBE32(chunk + 56));\n     Round(a, b, c, d, e, f1(b, c, d), k1, w15 = ReadBE32(chunk + 60));\n \n-    Round(e, a, b, c, d, f1(a, b, c), k1, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n-    Round(d, e, a, b, c, f1(e, a, b), k1, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n-    Round(c, d, e, a, b, f1(d, e, a), k1, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n-    Round(b, c, d, e, a, f1(c, d, e), k1, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n-    Round(a, b, c, d, e, f2(b, c, d), k2, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k2, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n-    Round(d, e, a, b, c, f2(e, a, b), k2, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k2, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k2, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n-    Round(a, b, c, d, e, f2(b, c, d), k2, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n-    Round(e, a, b, c, d, f2(a, b, c), k2, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n-    Round(d, e, a, b, c, f2(e, a, b), k2, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n-    Round(c, d, e, a, b, f2(d, e, a), k2, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n-    Round(b, c, d, e, a, f2(c, d, e), k2, w13 = left(w13 ^ w10 ^ w5  ^ w15));\n-    Round(a, b, c, d, e, f2(b, c, d), k2, w14 = left(w14 ^ w11 ^ w6  ^ w0 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k2, w15 = left(w15 ^ w12 ^ w7  ^ w1 ));\n-\n-    Round(d, e, a, b, c, f2(e, a, b), k2, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k2, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k2, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n-    Round(a, b, c, d, e, f2(b, c, d), k2, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k2, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n-    Round(d, e, a, b, c, f2(e, a, b), k2, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k2, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k2, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n-    Round(a, b, c, d, e, f3(b, c, d), k3, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n-    Round(e, a, b, c, d, f3(a, b, c), k3, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n-    Round(d, e, a, b, c, f3(e, a, b), k3, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n-    Round(c, d, e, a, b, f3(d, e, a), k3, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n-    Round(b, c, d, e, a, f3(c, d, e), k3, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n-    Round(a, b, c, d, e, f3(b, c, d), k3, w13 = left(w13 ^ w10 ^ w5  ^ w15));\n-    Round(e, a, b, c, d, f3(a, b, c), k3, w14 = left(w14 ^ w11 ^ w6  ^ w0 ));\n-    Round(d, e, a, b, c, f3(e, a, b), k3, w15 = left(w15 ^ w12 ^ w7  ^ w1 ));\n-\n-    Round(c, d, e, a, b, f3(d, e, a), k3, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n-    Round(b, c, d, e, a, f3(c, d, e), k3, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n-    Round(a, b, c, d, e, f3(b, c, d), k3, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n-    Round(e, a, b, c, d, f3(a, b, c), k3, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n-    Round(d, e, a, b, c, f3(e, a, b), k3, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n-    Round(c, d, e, a, b, f3(d, e, a), k3, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n-    Round(b, c, d, e, a, f3(c, d, e), k3, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n-    Round(a, b, c, d, e, f3(b, c, d), k3, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n-    Round(e, a, b, c, d, f3(a, b, c), k3, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n-    Round(d, e, a, b, c, f3(e, a, b), k3, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n-    Round(c, d, e, a, b, f3(d, e, a), k3, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n-    Round(b, c, d, e, a, f3(c, d, e), k3, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n-    Round(a, b, c, d, e, f2(b, c, d), k4, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n-    Round(e, a, b, c, d, f2(a, b, c), k4, w13 = left(w13 ^ w10 ^ w5  ^ w15));\n-    Round(d, e, a, b, c, f2(e, a, b), k4, w14 = left(w14 ^ w11 ^ w6  ^ w0 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k4, w15 = left(w15 ^ w12 ^ w7  ^ w1 ));\n-\n-    Round(b, c, d, e, a, f2(c, d, e), k4, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n-    Round(a, b, c, d, e, f2(b, c, d), k4, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k4, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n-    Round(d, e, a, b, c, f2(e, a, b), k4, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n-    Round(c, d, e, a, b, f2(d, e, a), k4, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k4, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n-    Round(a, b, c, d, e, f2(b, c, d), k4, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n-    Round(e, a, b, c, d, f2(a, b, c), k4, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n-    Round(d, e, a, b, c, f2(e, a, b), k4, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n-    Round(c, d, e, a, b, f2(d, e, a), k4, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n-    Round(b, c, d, e, a, f2(c, d, e), k4, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n-    Round(a, b, c, d, e, f2(b, c, d), k4, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n-    Round(e, a, b, c, d, f2(a, b, c), k4, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n-    Round(d, e, a, b, c, f2(e, a, b), k4,       left(w13 ^ w10 ^ w5  ^ w15));\n-    Round(c, d, e, a, b, f2(d, e, a), k4,       left(w14 ^ w11 ^ w6  ^ w0 ));\n-    Round(b, c, d, e, a, f2(c, d, e), k4,       left(w15 ^ w12 ^ w7  ^ w1 ));\n+    Round(e, a, b, c, d, f1(a, b, c), k1, w0 = left(w0 ^ w13 ^ w8 ^ w2));\n+    Round(d, e, a, b, c, f1(e, a, b), k1, w1 = left(w1 ^ w14 ^ w9 ^ w3));\n+    Round(c, d, e, a, b, f1(d, e, a), k1, w2 = left(w2 ^ w15 ^ w10 ^ w4));\n+    Round(b, c, d, e, a, f1(c, d, e), k1, w3 = left(w3 ^ w0 ^ w11 ^ w5));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w4 = left(w4 ^ w1 ^ w12 ^ w6));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w5 = left(w5 ^ w2 ^ w13 ^ w7));\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w6 = left(w6 ^ w3 ^ w14 ^ w8));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w7 = left(w7 ^ w4 ^ w15 ^ w9));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w8 = left(w8 ^ w5 ^ w0 ^ w10));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w9 = left(w9 ^ w6 ^ w1 ^ w11));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w10 = left(w10 ^ w7 ^ w2 ^ w12));\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w11 = left(w11 ^ w8 ^ w3 ^ w13));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w12 = left(w12 ^ w9 ^ w4 ^ w14));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w13 = left(w13 ^ w10 ^ w5 ^ w15));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w14 = left(w14 ^ w11 ^ w6 ^ w0));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w15 = left(w15 ^ w12 ^ w7 ^ w1));\n+\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w0 = left(w0 ^ w13 ^ w8 ^ w2));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w1 = left(w1 ^ w14 ^ w9 ^ w3));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w2 = left(w2 ^ w15 ^ w10 ^ w4));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w3 = left(w3 ^ w0 ^ w11 ^ w5));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w4 = left(w4 ^ w1 ^ w12 ^ w6));\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w5 = left(w5 ^ w2 ^ w13 ^ w7));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w6 = left(w6 ^ w3 ^ w14 ^ w8));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w7 = left(w7 ^ w4 ^ w15 ^ w9));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w8 = left(w8 ^ w5 ^ w0 ^ w10));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w9 = left(w9 ^ w6 ^ w1 ^ w11));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w10 = left(w10 ^ w7 ^ w2 ^ w12));\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w11 = left(w11 ^ w8 ^ w3 ^ w13));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w12 = left(w12 ^ w9 ^ w4 ^ w14));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w13 = left(w13 ^ w10 ^ w5 ^ w15));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w14 = left(w14 ^ w11 ^ w6 ^ w0));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w15 = left(w15 ^ w12 ^ w7 ^ w1));\n+\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w0 = left(w0 ^ w13 ^ w8 ^ w2));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w1 = left(w1 ^ w14 ^ w9 ^ w3));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w2 = left(w2 ^ w15 ^ w10 ^ w4));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w3 = left(w3 ^ w0 ^ w11 ^ w5));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w4 = left(w4 ^ w1 ^ w12 ^ w6));\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w5 = left(w5 ^ w2 ^ w13 ^ w7));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w6 = left(w6 ^ w3 ^ w14 ^ w8));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w7 = left(w7 ^ w4 ^ w15 ^ w9));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w8 = left(w8 ^ w5 ^ w0 ^ w10));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w9 = left(w9 ^ w6 ^ w1 ^ w11));\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w10 = left(w10 ^ w7 ^ w2 ^ w12));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w11 = left(w11 ^ w8 ^ w3 ^ w13));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w12 = left(w12 ^ w9 ^ w4 ^ w14));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w13 = left(w13 ^ w10 ^ w5 ^ w15));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, w14 = left(w14 ^ w11 ^ w6 ^ w0));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, w15 = left(w15 ^ w12 ^ w7 ^ w1));\n+\n+    Round(b, c, d, e, a, f2(c, d, e), k4, w0 = left(w0 ^ w13 ^ w8 ^ w2));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w1 = left(w1 ^ w14 ^ w9 ^ w3));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w2 = left(w2 ^ w15 ^ w10 ^ w4));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, w3 = left(w3 ^ w0 ^ w11 ^ w5));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, w4 = left(w4 ^ w1 ^ w12 ^ w6));\n+    Round(b, c, d, e, a, f2(c, d, e), k4, w5 = left(w5 ^ w2 ^ w13 ^ w7));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w6 = left(w6 ^ w3 ^ w14 ^ w8));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w7 = left(w7 ^ w4 ^ w15 ^ w9));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, w8 = left(w8 ^ w5 ^ w0 ^ w10));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, w9 = left(w9 ^ w6 ^ w1 ^ w11));\n+    Round(b, c, d, e, a, f2(c, d, e), k4, w10 = left(w10 ^ w7 ^ w2 ^ w12));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w11 = left(w11 ^ w8 ^ w3 ^ w13));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w12 = left(w12 ^ w9 ^ w4 ^ w14));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, left(w13 ^ w10 ^ w5 ^ w15));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, left(w14 ^ w11 ^ w6 ^ w0));\n+    Round(b, c, d, e, a, f2(c, d, e), k4, left(w15 ^ w12 ^ w7 ^ w1));\n \n     s[0] += a;\n     s[1] += b;\n@@ -138,18 +140,20 @@ void Transform(uint32_t *s, const unsigned char *chunk) {\n     s[4] += e;\n }\n \n-}  // namespace sha1\n+} // namespace sha1\n \n-}  // namespace\n+} // namespace\n \n ////// SHA1\n \n-CSHA1::CSHA1() : bytes(0) {\n+CSHA1::CSHA1() : bytes(0)\n+{\n     sha1::Initialize(s);\n }\n \n-CSHA1& CSHA1::Write(const unsigned char *data, size_t len) {\n-    const unsigned char *end = data + len;\n+CSHA1& CSHA1::Write(const unsigned char* data, size_t len)\n+{\n+    const unsigned char* end = data + len;\n     size_t bufsize = bytes % 64;\n     if (bufsize && bufsize + len >= 64) {\n         // Fill the buffer, and process it.\n@@ -173,20 +177,22 @@ CSHA1& CSHA1::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CSHA1::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CSHA1::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     static const unsigned char pad[64] = {0x80};\n     unsigned char sizedesc[8];\n     WriteBE64(sizedesc, bytes << 3);\n     Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n     Write(sizedesc, 8);\n     WriteBE32(hash, s[0]);\n-    WriteBE32(hash+4, s[1]);\n-    WriteBE32(hash+8, s[2]);\n-    WriteBE32(hash+12, s[3]);\n-    WriteBE32(hash+16, s[4]);\n+    WriteBE32(hash + 4, s[1]);\n+    WriteBE32(hash + 8, s[2]);\n+    WriteBE32(hash + 12, s[3]);\n+    WriteBE32(hash + 16, s[4]);\n }\n \n-CSHA1& CSHA1::Reset() {\n+CSHA1& CSHA1::Reset()\n+{\n     bytes = 0;\n     sha1::Initialize(s);\n     return *this;"
      },
      {
        "sha": "4fa2b333babd3f803e7dfb55e42f031610d06169",
        "filename": "src/crypto/sha1.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/crypto/sha1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/crypto/sha1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.h?ref=c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
        "patch": "@@ -9,7 +9,8 @@\n #include <stdlib.h>\n \n /** A hasher class for SHA1. */\n-class CSHA1 {\n+class CSHA1\n+{\n private:\n     uint32_t s[5];\n     unsigned char buf[64];\n@@ -19,7 +20,7 @@ class CSHA1 {\n     static const size_t OUTPUT_SIZE = 20;\n \n     CSHA1();\n-    CSHA1& Write(const unsigned char *data, size_t len);\n+    CSHA1& Write(const unsigned char* data, size_t len);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA1& Reset();\n };"
      },
      {
        "sha": "9a96c5125a7df80844079319a5586d70ef9e3cc5",
        "filename": "src/crypto/sha2.cpp",
        "status": "modified",
        "additions": 197,
        "deletions": 185,
        "changes": 382,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/crypto/sha2.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/crypto/sha2.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.cpp?ref=c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
        "patch": "@@ -9,11 +9,11 @@\n #include <string.h>\n \n // Internal implementation code.\n-namespace {\n-\n+namespace\n+{\n /// Internal SHA-256 implementation.\n-namespace sha256 {\n-\n+namespace sha256\n+{\n uint32_t inline Ch(uint32_t x, uint32_t y, uint32_t z) { return z ^ (x & (y ^ z)); }\n uint32_t inline Maj(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (z & (x | y)); }\n uint32_t inline Sigma0(uint32_t x) { return (x >> 2 | x << 30) ^ (x >> 13 | x << 19) ^ (x >> 22 | x << 10); }\n@@ -22,17 +22,17 @@ uint32_t inline sigma0(uint32_t x) { return (x >> 7 | x << 25) ^ (x >> 18 | x <<\n uint32_t inline sigma1(uint32_t x) { return (x >> 17 | x << 15) ^ (x >> 19 | x << 13) ^ (x >> 10); }\n \n /** One round of SHA-256. */\n-void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t &d,\n-                  uint32_t e, uint32_t f, uint32_t g, uint32_t &h,\n-                  uint32_t k, uint32_t w) {\n+void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t& d, uint32_t e, uint32_t f, uint32_t g, uint32_t& h, uint32_t k, uint32_t w)\n+{\n     uint32_t t1 = h + Sigma1(e) + Ch(e, f, g) + k + w;\n     uint32_t t2 = Sigma0(a) + Maj(a, b, c);\n     d += t1;\n     h = t1 + t2;\n }\n \n /** Initialize SHA-256 state. */\n-void inline Initialize(uint32_t *s) {\n+void inline Initialize(uint32_t* s)\n+{\n     s[0] = 0x6a09e667ul;\n     s[1] = 0xbb67ae85ul;\n     s[2] = 0x3c6ef372ul;\n@@ -44,77 +44,78 @@ void inline Initialize(uint32_t *s) {\n }\n \n /** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n-void Transform(uint32_t *s, const unsigned char *chunk) {\n+void Transform(uint32_t* s, const unsigned char* chunk)\n+{\n     uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n     uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n \n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98,  w0 = ReadBE32(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x71374491,  w1 = ReadBE32(chunk + 4));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf,  w2 = ReadBE32(chunk + 8));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5,  w3 = ReadBE32(chunk + 12));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25b,  w4 = ReadBE32(chunk + 16));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1,  w5 = ReadBE32(chunk + 20));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4,  w6 = ReadBE32(chunk + 24));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5,  w7 = ReadBE32(chunk + 28));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98,  w8 = ReadBE32(chunk + 32));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b01,  w9 = ReadBE32(chunk + 36));\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98, w0 = ReadBE32(chunk + 0));\n+    Round(h, a, b, c, d, e, f, g, 0x71374491, w1 = ReadBE32(chunk + 4));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf, w2 = ReadBE32(chunk + 8));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5, w3 = ReadBE32(chunk + 12));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25b, w4 = ReadBE32(chunk + 16));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1, w5 = ReadBE32(chunk + 20));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4, w6 = ReadBE32(chunk + 24));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5, w7 = ReadBE32(chunk + 28));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98, w8 = ReadBE32(chunk + 32));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b01, w9 = ReadBE32(chunk + 36));\n     Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n     Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n     Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n     Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n     Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n     Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n \n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c1,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a85,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b2138,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d13,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a7354,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c85,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664b,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c08,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774c,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14  + sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15  + sigma1(w13) +  w8 + sigma0( w0));\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c1, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1cc, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6f, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aa, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988da, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66d, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a85, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b2138, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d13, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x650a7354, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abb, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92e, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c85, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664b, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c08, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774c, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82ee, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636f, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14 + sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15 + sigma1(w13) + w8 + sigma0(w0));\n \n     s[0] += a;\n     s[1] += b;\n@@ -126,11 +127,11 @@ void Transform(uint32_t *s, const unsigned char *chunk) {\n     s[7] += h;\n }\n \n-}  // namespace sha256\n+} // namespace sha256\n \n /// Internal SHA-512 implementation.\n-namespace sha512 {\n-\n+namespace sha512\n+{\n uint64_t inline Ch(uint64_t x, uint64_t y, uint64_t z) { return z ^ (x & (y ^ z)); }\n uint64_t inline Maj(uint64_t x, uint64_t y, uint64_t z) { return (x & y) | (z & (x | y)); }\n uint64_t inline Sigma0(uint64_t x) { return (x >> 28 | x << 36) ^ (x >> 34 | x << 30) ^ (x >> 39 | x << 25); }\n@@ -139,17 +140,17 @@ uint64_t inline sigma0(uint64_t x) { return (x >> 1 | x << 63) ^ (x >> 8 | x <<\n uint64_t inline sigma1(uint64_t x) { return (x >> 19 | x << 45) ^ (x >> 61 | x << 3) ^ (x >> 6); }\n \n /** One round of SHA-512. */\n-void inline Round(uint64_t a, uint64_t b, uint64_t c, uint64_t &d,\n-                  uint64_t e, uint64_t f, uint64_t g, uint64_t &h,\n-                  uint64_t k, uint64_t w) {\n+void inline Round(uint64_t a, uint64_t b, uint64_t c, uint64_t& d, uint64_t e, uint64_t f, uint64_t g, uint64_t& h, uint64_t k, uint64_t w)\n+{\n     uint64_t t1 = h + Sigma1(e) + Ch(e, f, g) + k + w;\n     uint64_t t2 = Sigma0(a) + Maj(a, b, c);\n     d += t1;\n     h = t1 + t2;\n }\n \n /** Initialize SHA-256 state. */\n-void inline Initialize(uint64_t *s) {\n+void inline Initialize(uint64_t* s)\n+{\n     s[0] = 0x6a09e667f3bcc908ull;\n     s[1] = 0xbb67ae8584caa73bull;\n     s[2] = 0x3c6ef372fe94f82bull;\n@@ -161,94 +162,95 @@ void inline Initialize(uint64_t *s) {\n }\n \n /** Perform one SHA-512 transformation, processing a 128-byte chunk. */\n-void Transform(uint64_t *s, const unsigned char *chunk) {\n+void Transform(uint64_t* s, const unsigned char* chunk)\n+{\n     uint64_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n     uint64_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n \n-    Round(a, b, c, d, e, f, g, h, 0x428a2f98d728ae22ull,  w0 = ReadBE64(chunk + 0));\n-    Round(h, a, b, c, d, e, f, g, 0x7137449123ef65cdull,  w1 = ReadBE64(chunk + 8));\n-    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcfec4d3b2full,  w2 = ReadBE64(chunk + 16));\n-    Round(f, g, h, a, b, c, d, e, 0xe9b5dba58189dbbcull,  w3 = ReadBE64(chunk + 24));\n-    Round(e, f, g, h, a, b, c, d, 0x3956c25bf348b538ull,  w4 = ReadBE64(chunk + 32));\n-    Round(d, e, f, g, h, a, b, c, 0x59f111f1b605d019ull,  w5 = ReadBE64(chunk + 40));\n-    Round(c, d, e, f, g, h, a, b, 0x923f82a4af194f9bull,  w6 = ReadBE64(chunk + 48));\n-    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5da6d8118ull,  w7 = ReadBE64(chunk + 56));\n-    Round(a, b, c, d, e, f, g, h, 0xd807aa98a3030242ull,  w8 = ReadBE64(chunk + 64));\n-    Round(h, a, b, c, d, e, f, g, 0x12835b0145706fbeull,  w9 = ReadBE64(chunk + 72));\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98d728ae22ull, w0 = ReadBE64(chunk + 0));\n+    Round(h, a, b, c, d, e, f, g, 0x7137449123ef65cdull, w1 = ReadBE64(chunk + 8));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcfec4d3b2full, w2 = ReadBE64(chunk + 16));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba58189dbbcull, w3 = ReadBE64(chunk + 24));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25bf348b538ull, w4 = ReadBE64(chunk + 32));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1b605d019ull, w5 = ReadBE64(chunk + 40));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4af194f9bull, w6 = ReadBE64(chunk + 48));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5da6d8118ull, w7 = ReadBE64(chunk + 56));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98a3030242ull, w8 = ReadBE64(chunk + 64));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b0145706fbeull, w9 = ReadBE64(chunk + 72));\n     Round(g, h, a, b, c, d, e, f, 0x243185be4ee4b28cull, w10 = ReadBE64(chunk + 80));\n     Round(f, g, h, a, b, c, d, e, 0x550c7dc3d5ffb4e2ull, w11 = ReadBE64(chunk + 88));\n     Round(e, f, g, h, a, b, c, d, 0x72be5d74f27b896full, w12 = ReadBE64(chunk + 96));\n     Round(d, e, f, g, h, a, b, c, 0x80deb1fe3b1696b1ull, w13 = ReadBE64(chunk + 104));\n     Round(c, d, e, f, g, h, a, b, 0x9bdc06a725c71235ull, w14 = ReadBE64(chunk + 112));\n     Round(b, c, d, e, f, g, h, a, 0xc19bf174cf692694ull, w15 = ReadBE64(chunk + 120));\n \n-    Round(a, b, c, d, e, f, g, h, 0xe49b69c19ef14ad2ull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0xefbe4786384f25e3ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x0fc19dc68b8cd5b5ull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x240ca1cc77ac9c65ull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x2de92c6f592b0275ull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4a7484aa6ea6e483ull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dcbd41fbd4ull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x76f988da831153b5ull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x983e5152ee66dfabull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa831c66d2db43210ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xb00327c898fb213full, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xbf597fc7beef0ee4ull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xc6e00bf33da88fc2ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd5a79147930aa725ull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x06ca6351e003826full, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x142929670a0e6e70ull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x27b70a8546d22ffcull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0x2e1b21385c26c926ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc5ac42aedull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x53380d139d95b3dfull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x650a73548baf63deull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x766a0abb3c77b2a8ull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x81c2c92e47edaee6ull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x92722c851482353bull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a14cf10364ull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0xa81a664bbc423001ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0xc24b8b70d0f89791ull, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0xc76c51a30654be30ull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0xd192e819d6ef5218ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xd69906245565a910ull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xf40e35855771202aull, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x106aa07032bbd1b8ull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0x19a4c116b8d2d0c8ull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0x1e376c085141ab53ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0x2748774cdf8eeb99ull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5e19b48a8ull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x391c0cb3c5c95a63ull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4ae3418acbull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f7763e373ull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x682e6ff3d6b2b8a3ull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x748f82ee5defb2fcull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0x78a5636f43172f60ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x84c87814a1f0ab72ull, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x8cc702081a6439ecull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x90befffa23631e28ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0xa4506cebde82bde9ull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7b2c67915ull, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0xc67178f2e372532bull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n-\n-    Round(a, b, c, d, e, f, g, h, 0xca273eceea26619cull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n-    Round(h, a, b, c, d, e, f, g, 0xd186b8c721c0c207ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n-    Round(g, h, a, b, c, d, e, f, 0xeada7dd6cde0eb1eull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n-    Round(f, g, h, a, b, c, d, e, 0xf57d4f7fee6ed178ull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n-    Round(e, f, g, h, a, b, c, d, 0x06f067aa72176fbaull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n-    Round(d, e, f, g, h, a, b, c, 0x0a637dc5a2c898a6ull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n-    Round(c, d, e, f, g, h, a, b, 0x113f9804bef90daeull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n-    Round(b, c, d, e, f, g, h, a, 0x1b710b35131c471bull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n-    Round(a, b, c, d, e, f, g, h, 0x28db77f523047d84ull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n-    Round(h, a, b, c, d, e, f, g, 0x32caab7b40c72493ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n-    Round(g, h, a, b, c, d, e, f, 0x3c9ebe0a15c9bebcull, w10 += sigma1( w8) +  w3 + sigma0(w11));\n-    Round(f, g, h, a, b, c, d, e, 0x431d67c49c100d4cull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n-    Round(e, f, g, h, a, b, c, d, 0x4cc5d4becb3e42b6ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n-    Round(d, e, f, g, h, a, b, c, 0x597f299cfc657e2aull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n-    Round(c, d, e, f, g, h, a, b, 0x5fcb6fab3ad6faecull, w14 += sigma1(w12) +  w7 + sigma0(w15));\n-    Round(b, c, d, e, f, g, h, a, 0x6c44198c4a475817ull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c19ef14ad2ull, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786384f25e3ull, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc68b8cd5b5ull, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1cc77ac9c65ull, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6f592b0275ull, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aa6ea6e483ull, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dcbd41fbd4ull, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988da831153b5ull, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152ee66dfabull, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66d2db43210ull, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c898fb213full, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7beef0ee4ull, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf33da88fc2ull, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147930aa725ull, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351e003826full, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x142929670a0e6e70ull, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a8546d22ffcull, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b21385c26c926ull, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc5ac42aedull, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d139d95b3dfull, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x650a73548baf63deull, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abb3c77b2a8ull, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92e47edaee6ull, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c851482353bull, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a14cf10364ull, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664bbc423001ull, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70d0f89791ull, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a30654be30ull, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819d6ef5218ull, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd69906245565a910ull, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e35855771202aull, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa07032bbd1b8ull, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116b8d2d0c8ull, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c085141ab53ull, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774cdf8eeb99ull, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5e19b48a8ull, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3c5c95a63ull, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4ae3418acbull, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f7763e373ull, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3d6b2b8a3ull, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82ee5defb2fcull, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636f43172f60ull, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814a1f0ab72ull, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc702081a6439ecull, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffa23631e28ull, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506cebde82bde9ull, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7b2c67915ull, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2e372532bull, w15 += sigma1(w13) + w8 + sigma0(w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0xca273eceea26619cull, w0 += sigma1(w14) + w9 + sigma0(w1));\n+    Round(h, a, b, c, d, e, f, g, 0xd186b8c721c0c207ull, w1 += sigma1(w15) + w10 + sigma0(w2));\n+    Round(g, h, a, b, c, d, e, f, 0xeada7dd6cde0eb1eull, w2 += sigma1(w0) + w11 + sigma0(w3));\n+    Round(f, g, h, a, b, c, d, e, 0xf57d4f7fee6ed178ull, w3 += sigma1(w1) + w12 + sigma0(w4));\n+    Round(e, f, g, h, a, b, c, d, 0x06f067aa72176fbaull, w4 += sigma1(w2) + w13 + sigma0(w5));\n+    Round(d, e, f, g, h, a, b, c, 0x0a637dc5a2c898a6ull, w5 += sigma1(w3) + w14 + sigma0(w6));\n+    Round(c, d, e, f, g, h, a, b, 0x113f9804bef90daeull, w6 += sigma1(w4) + w15 + sigma0(w7));\n+    Round(b, c, d, e, f, g, h, a, 0x1b710b35131c471bull, w7 += sigma1(w5) + w0 + sigma0(w8));\n+    Round(a, b, c, d, e, f, g, h, 0x28db77f523047d84ull, w8 += sigma1(w6) + w1 + sigma0(w9));\n+    Round(h, a, b, c, d, e, f, g, 0x32caab7b40c72493ull, w9 += sigma1(w7) + w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x3c9ebe0a15c9bebcull, w10 += sigma1(w8) + w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x431d67c49c100d4cull, w11 += sigma1(w9) + w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x4cc5d4becb3e42b6ull, w12 += sigma1(w10) + w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0x597f299cfc657e2aull, w13 += sigma1(w11) + w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x5fcb6fab3ad6faecull, w14 += sigma1(w12) + w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x6c44198c4a475817ull, w15 += sigma1(w13) + w8 + sigma0(w0));\n \n     s[0] += a;\n     s[1] += b;\n@@ -260,19 +262,21 @@ void Transform(uint64_t *s, const unsigned char *chunk) {\n     s[7] += h;\n }\n \n-}  // namespace sha512\n+} // namespace sha512\n \n-}  // namespace\n+} // namespace\n \n \n ////// SHA-256\n \n-CSHA256::CSHA256() : bytes(0) {\n+CSHA256::CSHA256() : bytes(0)\n+{\n     sha256::Initialize(s);\n }\n \n-CSHA256& CSHA256::Write(const unsigned char *data, size_t len) {\n-    const unsigned char *end = data + len;\n+CSHA256& CSHA256::Write(const unsigned char* data, size_t len)\n+{\n+    const unsigned char* end = data + len;\n     size_t bufsize = bytes % 64;\n     if (bufsize && bufsize + len >= 64) {\n         // Fill the buffer, and process it.\n@@ -296,36 +300,40 @@ CSHA256& CSHA256::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CSHA256::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CSHA256::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     static const unsigned char pad[64] = {0x80};\n     unsigned char sizedesc[8];\n     WriteBE64(sizedesc, bytes << 3);\n     Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n     Write(sizedesc, 8);\n     WriteBE32(hash, s[0]);\n-    WriteBE32(hash+4, s[1]);\n-    WriteBE32(hash+8, s[2]);\n-    WriteBE32(hash+12, s[3]);\n-    WriteBE32(hash+16, s[4]);\n-    WriteBE32(hash+20, s[5]);\n-    WriteBE32(hash+24, s[6]);\n-    WriteBE32(hash+28, s[7]);\n+    WriteBE32(hash + 4, s[1]);\n+    WriteBE32(hash + 8, s[2]);\n+    WriteBE32(hash + 12, s[3]);\n+    WriteBE32(hash + 16, s[4]);\n+    WriteBE32(hash + 20, s[5]);\n+    WriteBE32(hash + 24, s[6]);\n+    WriteBE32(hash + 28, s[7]);\n }\n \n-CSHA256& CSHA256::Reset() {\n+CSHA256& CSHA256::Reset()\n+{\n     bytes = 0;\n     sha256::Initialize(s);\n     return *this;\n }\n \n ////// SHA-512\n \n-CSHA512::CSHA512() : bytes(0) {\n+CSHA512::CSHA512() : bytes(0)\n+{\n     sha512::Initialize(s);\n }\n \n-CSHA512& CSHA512::Write(const unsigned char *data, size_t len) {\n-    const unsigned char *end = data + len;\n+CSHA512& CSHA512::Write(const unsigned char* data, size_t len)\n+{\n+    const unsigned char* end = data + len;\n     size_t bufsize = bytes % 128;\n     if (bufsize && bufsize + len >= 128) {\n         // Fill the buffer, and process it.\n@@ -349,31 +357,34 @@ CSHA512& CSHA512::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CSHA512::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CSHA512::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     static const unsigned char pad[128] = {0x80};\n     unsigned char sizedesc[16] = {0x00};\n-    WriteBE64(sizedesc+8, bytes << 3);\n+    WriteBE64(sizedesc + 8, bytes << 3);\n     Write(pad, 1 + ((239 - (bytes % 128)) % 128));\n     Write(sizedesc, 16);\n     WriteBE64(hash, s[0]);\n-    WriteBE64(hash+8, s[1]);\n-    WriteBE64(hash+16, s[2]);\n-    WriteBE64(hash+24, s[3]);\n-    WriteBE64(hash+32, s[4]);\n-    WriteBE64(hash+40, s[5]);\n-    WriteBE64(hash+48, s[6]);\n-    WriteBE64(hash+56, s[7]);\n+    WriteBE64(hash + 8, s[1]);\n+    WriteBE64(hash + 16, s[2]);\n+    WriteBE64(hash + 24, s[3]);\n+    WriteBE64(hash + 32, s[4]);\n+    WriteBE64(hash + 40, s[5]);\n+    WriteBE64(hash + 48, s[6]);\n+    WriteBE64(hash + 56, s[7]);\n }\n \n-CSHA512& CSHA512::Reset() {\n+CSHA512& CSHA512::Reset()\n+{\n     bytes = 0;\n     sha512::Initialize(s);\n     return *this;\n }\n \n ////// HMAC-SHA-512\n \n-CHMAC_SHA512::CHMAC_SHA512(const unsigned char *key, size_t keylen) {\n+CHMAC_SHA512::CHMAC_SHA512(const unsigned char* key, size_t keylen)\n+{\n     unsigned char rkey[128];\n     if (keylen <= 128) {\n         memcpy(rkey, key, keylen);\n@@ -383,16 +394,17 @@ CHMAC_SHA512::CHMAC_SHA512(const unsigned char *key, size_t keylen) {\n         memset(rkey + 64, 0, 64);\n     }\n \n-    for (int n=0; n<128; n++)\n+    for (int n = 0; n < 128; n++)\n         rkey[n] ^= 0x5c;\n     outer.Write(rkey, 128);\n \n-    for (int n=0; n<128; n++)\n+    for (int n = 0; n < 128; n++)\n         rkey[n] ^= 0x5c ^ 0x36;\n     inner.Write(rkey, 128);\n }\n \n-void CHMAC_SHA512::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+void CHMAC_SHA512::Finalize(unsigned char hash[OUTPUT_SIZE])\n+{\n     unsigned char temp[64];\n     inner.Finalize(temp);\n     outer.Write(temp, 64).Finalize(hash);"
      },
      {
        "sha": "15ad5ac3830fe83ddbfc42a697623f59d9381c7c",
        "filename": "src/crypto/sha2.h",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/crypto/sha2.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9/src/crypto/sha2.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.h?ref=c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
        "patch": "@@ -9,7 +9,8 @@\n #include <stdlib.h>\n \n /** A hasher class for SHA-256. */\n-class CSHA256 {\n+class CSHA256\n+{\n private:\n     uint32_t s[8];\n     unsigned char buf[64];\n@@ -19,13 +20,14 @@ class CSHA256 {\n     static const size_t OUTPUT_SIZE = 32;\n \n     CSHA256();\n-    CSHA256& Write(const unsigned char *data, size_t len);\n+    CSHA256& Write(const unsigned char* data, size_t len);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA256& Reset();\n };\n \n /** A hasher class for SHA-512. */\n-class CSHA512 {\n+class CSHA512\n+{\n private:\n     uint64_t s[8];\n     unsigned char buf[128];\n@@ -35,22 +37,24 @@ class CSHA512 {\n     static const size_t OUTPUT_SIZE = 64;\n \n     CSHA512();\n-    CSHA512& Write(const unsigned char *data, size_t len);\n+    CSHA512& Write(const unsigned char* data, size_t len);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA512& Reset();\n };\n \n /** A hasher class for HMAC-SHA-512. */\n-class CHMAC_SHA512 {\n+class CHMAC_SHA512\n+{\n private:\n     CSHA512 outer;\n     CSHA512 inner;\n \n public:\n     static const size_t OUTPUT_SIZE = 64;\n \n-    CHMAC_SHA512(const unsigned char *key, size_t keylen);\n-    CHMAC_SHA512& Write(const unsigned char *data, size_t len) {\n+    CHMAC_SHA512(const unsigned char* key, size_t keylen);\n+    CHMAC_SHA512& Write(const unsigned char* data, size_t len)\n+    {\n         inner.Write(data, len);\n         return *this;\n     }"
      }
    ]
  },
  {
    "sha": "610a3d3a1bd171b963600c55fab715ca2aa30da3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTBhM2QzYTFiZDE3MWI5NjM2MDBjNTVmYWI3MTVjYTJhYTMwZGEz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-26T17:35:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-26T17:36:08Z"
      },
      "message": "Merge pull request #4983\n\nd14d7de SanitizeString: allow '(' and ')' (Wladimir J. van der Laan)",
      "tree": {
        "sha": "498b91f1abe02e7dd0864733133c5aabd3b6e71a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/498b91f1abe02e7dd0864733133c5aabd3b6e71a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/610a3d3a1bd171b963600c55fab715ca2aa30da3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUJaQIAAoJEFeJbS/48LZX6VML/RrxN7EwATY8J/41oVmnp6Rm\nUUo329mWLwI9NSvV1JoJJ86Y4ONYOnylCTGvk80yW9574U5/k+ys4/8WSeRAF0sU\nwNNnY+5s0Q6Omdx1jhZf449i8rIwkIwg9WZKRd/eEjCy0mbMjMImgwQROxsi71rR\n2TjiVxzC7i/VfEYaPkjeriBkLNbJbPVUXtbhC3HgxG4+Yoedf2cmCyJ4N1zsYtun\ntU8EQ+R69BGKWUA6tHL7Q65ePnpodS+IrkO2oI9iFG8FeI0B6RmE6PaX9y5/7w7M\n0yFORnaK2K1TBIdGMlI8Q+QN7LCnJAgX5YwEdX1dUOU2OtImD9OcAHYICSX9/Q4c\nCl64F1iw4SdkNcQLKp9nQbgwX4J71RP+cfZAM1h1zjcszJVgfcqW4mcvDzCP5mlj\nePY7Z8tH7RGE90ubP5tjpTW+ggIV9Jf7uXeBfCX/MM0nNHSzXCM1Xdyefif7DYNJ\nf3sLaiL8Jz2tEUxLsy1fmDqyueXrppHx5DO4Gel4+Q==\n=VcfG\n-----END PGP SIGNATURE-----",
        "payload": "tree 498b91f1abe02e7dd0864733133c5aabd3b6e71a\nparent c2db599c1f1ad2d61b8176a2256a80109b0ac8b9\nparent d14d7deff0a93d81946abec671dc47c967c9b027\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1411752921 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1411752968 +0200\n\nMerge pull request #4983\n\nd14d7de SanitizeString: allow '(' and ')' (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610a3d3a1bd171b963600c55fab715ca2aa30da3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/610a3d3a1bd171b963600c55fab715ca2aa30da3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610a3d3a1bd171b963600c55fab715ca2aa30da3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2db599c1f1ad2d61b8176a2256a80109b0ac8b9"
      },
      {
        "sha": "d14d7deff0a93d81946abec671dc47c967c9b027",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d14d7deff0a93d81946abec671dc47c967c9b027",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d14d7deff0a93d81946abec671dc47c967c9b027"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b9e64c5fe10caed49751325d8eefde0284629360",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/610a3d3a1bd171b963600c55fab715ca2aa30da3/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/610a3d3a1bd171b963600c55fab715ca2aa30da3/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=610a3d3a1bd171b963600c55fab715ca2aa30da3",
        "patch": "@@ -16,7 +16,7 @@ using namespace std;\n \n // safeChars chosen to allow simple messages/URLs/email addresses, but avoid anything\n // even possibly remotely dangerous like & or >\n-static string safeChars(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 .,;_/:?@\");\n+static string safeChars(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890 .,;_/:?@()\");\n string SanitizeString(const string& str)\n {\n     string strResult;"
      }
    ]
  },
  {
    "sha": "64cfaf891fe539b36f6be37dac6c28a712d70b96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGNmYWY4OTFmZTUzOWIzNmY2YmUzN2RhYzZjMjhhNzEyZDcwYjk2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-26T18:30:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-26T18:31:18Z"
      },
      "message": "Merge pull request #4986\n\n6eb67b0 autofile: Disallow by-value copies of CAutoFile (Cory Fields)\neee030f autofile: don't copy CAutoFile by value (Cory Fields)",
      "tree": {
        "sha": "520c1e99eb70e7fd0ea85305b357d107f021a2a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/520c1e99eb70e7fd0ea85305b357d107f021a2a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64cfaf891fe539b36f6be37dac6c28a712d70b96",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUJbD2AAoJEFeJbS/48LZXTqwMAJIYjYLN/QRkxkxg0WjP7k1e\nW51h9qeXPHBE4X1ns3TllYTAclIBCVR1fVjhUODwdr1QlfFnUft1fvR3VhlT1Ep8\nRwIVM+j+rXIrDXFQKwmItb+Kks6+xtc1dibn0k9ythV53P7OFqlbI/DQrDjBjX0m\nQzMnEp4/UycoqkwD02amIX6Oiclp1PWooCTYN3Yztk+uKrFJeNsvoOgJck/6s5p/\nH8sFDxjFIR/I154KvYUHNX3Xl8Dk9UU8nnPMwsRD0FyYF9jBpLfaamNMY8wSDF/y\nT7hGijD7Vnl/g8wXE4vaLP97dp6qCJjHd/mUGaVqtyaq5Wu6dtxv8XfhB0c6niEj\nWw81kaJsKPdfsbb0fxQQhKcUIPT5ESna3oxt3M3TpgxT8aMmViz796YGCcKlWFGA\nzIChg8pOptldqL9eWX4Xr9JwetCHUwgvH6EZMrW/nm9dZ469b1c6762ppRrp7ayV\nJ/QgNXKsJDYF9PzFBSQNMYA2/WUd01qbh8yxCL3FhA==\n=8yb8\n-----END PGP SIGNATURE-----",
        "payload": "tree 520c1e99eb70e7fd0ea85305b357d107f021a2a8\nparent 610a3d3a1bd171b963600c55fab715ca2aa30da3\nparent 6eb67b0ed2b350b772f7edb67aee1bcf09c91b0b\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1411756257 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1411756278 +0200\n\nMerge pull request #4986\n\n6eb67b0 autofile: Disallow by-value copies of CAutoFile (Cory Fields)\neee030f autofile: don't copy CAutoFile by value (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64cfaf891fe539b36f6be37dac6c28a712d70b96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64cfaf891fe539b36f6be37dac6c28a712d70b96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64cfaf891fe539b36f6be37dac6c28a712d70b96/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "610a3d3a1bd171b963600c55fab715ca2aa30da3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/610a3d3a1bd171b963600c55fab715ca2aa30da3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/610a3d3a1bd171b963600c55fab715ca2aa30da3"
      },
      {
        "sha": "6eb67b0ed2b350b772f7edb67aee1bcf09c91b0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6eb67b0ed2b350b772f7edb67aee1bcf09c91b0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6eb67b0ed2b350b772f7edb67aee1bcf09c91b0b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 13,
      "deletions": 9
    },
    "files": [
      {
        "sha": "27594ecbe31568e7508dfc1ead342d98f7606461",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64cfaf891fe539b36f6be37dac6c28a712d70b96/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64cfaf891fe539b36f6be37dac6c28a712d70b96/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=64cfaf891fe539b36f6be37dac6c28a712d70b96",
        "patch": "@@ -1058,7 +1058,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     }\n \n     boost::filesystem::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n-    CAutoFile est_filein = CAutoFile(fopen(est_path.string().c_str(), \"rb\"), SER_DISK, CLIENT_VERSION);\n+    CAutoFile est_filein(fopen(est_path.string().c_str(), \"rb\"), SER_DISK, CLIENT_VERSION);\n     // Allowed to fail as this file IS missing on first startup.\n     if (est_filein)\n         mempool.ReadFeeEstimates(est_filein);"
      },
      {
        "sha": "60e2a56795e074d4b488a278436c48c488d2e1c2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64cfaf891fe539b36f6be37dac6c28a712d70b96/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64cfaf891fe539b36f6be37dac6c28a712d70b96/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=64cfaf891fe539b36f6be37dac6c28a712d70b96",
        "patch": "@@ -1082,7 +1082,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n {\n     // Open history file to append\n-    CAutoFile fileout = CAutoFile(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n+    CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n     if (!fileout)\n         return error(\"WriteBlockToDisk : OpenBlockFile failed\");\n \n@@ -1110,7 +1110,7 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     block.SetNull();\n \n     // Open history file to read\n-    CAutoFile filein = CAutoFile(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (!filein)\n         return error(\"ReadBlockFromDisk : OpenBlockFile failed\");\n \n@@ -4503,7 +4503,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n bool CBlockUndo::WriteToDisk(CDiskBlockPos &pos, const uint256 &hashBlock)\n {\n     // Open history file to append\n-    CAutoFile fileout = CAutoFile(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n+    CAutoFile fileout(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n     if (!fileout)\n         return error(\"CBlockUndo::WriteToDisk : OpenUndoFile failed\");\n \n@@ -4535,7 +4535,7 @@ bool CBlockUndo::WriteToDisk(CDiskBlockPos &pos, const uint256 &hashBlock)\n bool CBlockUndo::ReadFromDisk(const CDiskBlockPos &pos, const uint256 &hashBlock)\n {\n     // Open history file to read\n-    CAutoFile filein = CAutoFile(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    CAutoFile filein(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (!filein)\n         return error(\"CBlockUndo::ReadFromDisk : OpenBlockFile failed\");\n "
      },
      {
        "sha": "866bac2c0e864a03283cfa9d1d4cfb6f0fa8f171",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64cfaf891fe539b36f6be37dac6c28a712d70b96/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64cfaf891fe539b36f6be37dac6c28a712d70b96/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=64cfaf891fe539b36f6be37dac6c28a712d70b96",
        "patch": "@@ -1957,7 +1957,7 @@ bool CAddrDB::Write(const CAddrMan& addr)\n     // open temp output file, and associate with CAutoFile\n     boost::filesystem::path pathTmp = GetDataDir() / tmpfn;\n     FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n-    CAutoFile fileout = CAutoFile(file, SER_DISK, CLIENT_VERSION);\n+    CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (!fileout)\n         return error(\"%s : Failed to open file %s\", __func__, pathTmp.string());\n \n@@ -1982,7 +1982,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n {\n     // open input file, and associate with CAutoFile\n     FILE *file = fopen(pathAddr.string().c_str(), \"rb\");\n-    CAutoFile filein = CAutoFile(file, SER_DISK, CLIENT_VERSION);\n+    CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (!filein)\n         return error(\"%s : Failed to open file %s\", __func__, pathAddr.string());\n "
      },
      {
        "sha": "7f8f93328434400443a5875ec15fc878705625e4",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64cfaf891fe539b36f6be37dac6c28a712d70b96/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64cfaf891fe539b36f6be37dac6c28a712d70b96/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=64cfaf891fe539b36f6be37dac6c28a712d70b96",
        "patch": "@@ -1154,14 +1154,18 @@ class CDataStream\n \n \n \n-/** RAII wrapper for FILE*.\n+/** Non-refcounted RAII wrapper for FILE*.\n  *\n  * Will automatically close the file when it goes out of scope if not null.\n  * If you're returning the file pointer, return file.release().\n  * If you need to close the file early, use file.fclose() instead of fclose(file).\n  */\n class CAutoFile\n {\n+private:\n+    // Disallow copies\n+    CAutoFile(const CAutoFile&);\n+    CAutoFile& operator=(const CAutoFile&);\n protected:\n     FILE* file;\n public:"
      },
      {
        "sha": "67d40a45c72a7b6430052f41fbe6f1c65f366fec",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64cfaf891fe539b36f6be37dac6c28a712d70b96/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64cfaf891fe539b36f6be37dac6c28a712d70b96/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=64cfaf891fe539b36f6be37dac6c28a712d70b96",
        "patch": "@@ -35,7 +35,7 @@ bool read_block(const std::string& filename, CBlock& block)\n \n     fseek(fp, 8, SEEK_SET); // skip msgheader/size\n \n-    CAutoFile filein = CAutoFile(fp, SER_DISK, CLIENT_VERSION);\n+    CAutoFile filein(fp, SER_DISK, CLIENT_VERSION);\n     if (!filein) return false;\n \n     filein >> block;"
      }
    ]
  },
  {
    "sha": "8138cbea3c405e142d70b43b6c452e1738de3332",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTM4Y2JlYTNjNDA1ZTE0MmQ3MGI0M2I2YzQ1MmUxNzM4ZGUzMzMy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-20T01:13:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-26T19:58:48Z"
      },
      "message": "Add automatic script test generation, and actual checksig tests",
      "tree": {
        "sha": "0e472b02e62a705b34954d2f8a8eff61cf4c21a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e472b02e62a705b34954d2f8a8eff61cf4c21a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8138cbea3c405e142d70b43b6c452e1738de3332",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8138cbea3c405e142d70b43b6c452e1738de3332",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8138cbea3c405e142d70b43b6c452e1738de3332",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8138cbea3c405e142d70b43b6c452e1738de3332/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64cfaf891fe539b36f6be37dac6c28a712d70b96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64cfaf891fe539b36f6be37dac6c28a712d70b96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64cfaf891fe539b36f6be37dac6c28a712d70b96"
      }
    ],
    "stats": {
      "total": 462,
      "additions": 413,
      "deletions": 49
    },
    "files": [
      {
        "sha": "94848f1c3da1db0a81f5c10b72ffadbe93992359",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8138cbea3c405e142d70b43b6c452e1738de3332/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8138cbea3c405e142d70b43b6c452e1738de3332/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=8138cbea3c405e142d70b43b6c452e1738de3332",
        "patch": "@@ -20,6 +20,7 @@ extern uint256 ParseHashUV(const UniValue& v, const std::string& strName);\n extern std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n \n // core_write.cpp\n+extern std::string FormatScript(const CScript& script);\n extern std::string EncodeHexTx(const CTransaction& tx);\n extern void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n                         UniValue& out, bool fIncludeHex);"
      },
      {
        "sha": "40d547fb33e61d84069b6b2ecfc273537d06ac6b",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8138cbea3c405e142d70b43b6c452e1738de3332/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8138cbea3c405e142d70b43b6c452e1738de3332/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=8138cbea3c405e142d70b43b6c452e1738de3332",
        "patch": "@@ -17,6 +17,41 @@\n \n using namespace std;\n \n+string FormatScript(const CScript& script)\n+{\n+    string ret;\n+    CScript::const_iterator it = script.begin();\n+    opcodetype op;\n+    while (it != script.end()) {\n+        CScript::const_iterator it2 = it;\n+        vector<unsigned char> vch;\n+        if (script.GetOp2(it, op, &vch)) {\n+            if (op == OP_0) {\n+                ret += \"0 \";\n+                continue;\n+            } else if ((op >= OP_1 && op <= OP_16) || op == OP_1NEGATE) {\n+                ret += strprintf(\"%i \", op - OP_1NEGATE - 1);\n+                continue;\n+            } else if (op >= OP_NOP && op <= OP_CHECKMULTISIGVERIFY) {\n+                string str(GetOpName(op));\n+                if (str.substr(0, 3) == string(\"OP_\")) {\n+                    ret += str.substr(3, string::npos) + \" \";\n+                    continue;\n+                }\n+            }\n+            if (vch.size() > 0) {\n+                ret += strprintf(\"0x%x 0x%x \", HexStr(it2, it - vch.size()), HexStr(it - vch.size(), it));\n+            } else {\n+                ret += strprintf(\"0x%x\", HexStr(it2, it));\n+            }\n+            continue;\n+        }\n+        ret += strprintf(\"0x%x \", HexStr(it2, script.end()));\n+        break;\n+    }\n+    return ret.substr(0, ret.size() - 1);\n+}\n+\n string EncodeHexTx(const CTransaction& tx)\n {\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "c2251b4f2adc36ebf069530086b03d9505f85669",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8138cbea3c405e142d70b43b6c452e1738de3332/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8138cbea3c405e142d70b43b6c452e1738de3332/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=8138cbea3c405e142d70b43b6c452e1738de3332",
        "patch": "@@ -220,7 +220,7 @@ class CECKey {\n         return o2i_ECPublicKey(&pkey, &pbegin, pubkey.size()) != NULL;\n     }\n \n-    bool Sign(const uint256 &hash, std::vector<unsigned char>& vchSig) {\n+    bool Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, bool lowS) {\n         vchSig.clear();\n         ECDSA_SIG *sig = ECDSA_do_sign((unsigned char*)&hash, sizeof(hash), pkey);\n         if (sig == NULL)\n@@ -232,7 +232,7 @@ class CECKey {\n         BIGNUM *halforder = BN_CTX_get(ctx);\n         EC_GROUP_get_order(group, order, ctx);\n         BN_rshift1(halforder, order);\n-        if (BN_cmp(sig->s, halforder) > 0) {\n+        if (lowS && BN_cmp(sig->s, halforder) > 0) {\n             // enforce low S values, by negating the value (modulo the order) if above order/2.\n             BN_sub(sig->s, order, sig->s);\n         }\n@@ -467,7 +467,7 @@ CPubKey CKey::GetPubKey() const {\n     return pubkey;\n }\n \n-bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig) const {\n+bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, bool lowS) const {\n     if (!fValid)\n         return false;\n #ifdef USE_SECP256K1\n@@ -484,7 +484,7 @@ bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig) const {\n #else\n     CECKey key;\n     key.SetSecretBytes(vch);\n-    return key.Sign(hash, vchSig);\n+    return key.Sign(hash, vchSig, lowS);\n #endif\n }\n "
      },
      {
        "sha": "f6f6d35d34194b4d68e31b669ac254a656127c13",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8138cbea3c405e142d70b43b6c452e1738de3332/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8138cbea3c405e142d70b43b6c452e1738de3332/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=8138cbea3c405e142d70b43b6c452e1738de3332",
        "patch": "@@ -276,7 +276,7 @@ class CKey\n     CPubKey GetPubKey() const;\n \n     // Create a DER-serialized signature.\n-    bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig) const;\n+    bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig, bool lowS = true) const;\n \n     // Create a compact signature (65 bytes), which allows reconstructing the used public key.\n     // The format is one header byte, followed by two times 32 bytes for the serialized r and s values."
      },
      {
        "sha": "35a6794b010bd05c68dbbbb32c0bacfd73c36f70",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8138cbea3c405e142d70b43b6c452e1738de3332/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8138cbea3c405e142d70b43b6c452e1738de3332/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=8138cbea3c405e142d70b43b6c452e1738de3332",
        "patch": "@@ -384,18 +384,18 @@ nSequences are max.\n \n [\"0x00\", \"'00' EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"],\n \n-[\"0x48 0x3045022100ea4d62e1fb351ad977596457bb01dfce58e050541784277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with wrong signature\"],\n-[\"0x47 0x304402207d09de5e34968c3f8b27d8217f173629f1106ee5216aa11d6b1f9813b3a214060220610a6ed25c704f901c6278f4f57fb11eadefdf0b22df298cfb6ce7ea84c86bf401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash using an anyonecanpay sighash\"],\n-[\"0x47 0x3044022028686fb3c8d3e5068cc9924c494fb5026df201d23340896da62fe9bb73fd9d5f02202a239609524959c4ca3651fd0cc48245b0b240862146fc579f3a962a4f46942b01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkey with wrong signature\"],\n-[\"0x47 0x3044022054cb0a3fca8694a0c231848ed9f965078148fd653e49dd4b6981fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"P2SH,STRICTENC\", \"P2SH with a pay to pubkeyhash inside with wrong signature\"],\n-[\"0 0x48 0x3045022100e1c4e8800bd00c9ec3cd3df0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC\", \"Raw multisig with one pubkey with wrong signature\"],\n-[\"0x49 0x304602220000ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with non-DER signature (too much R padding)\"],\n-[\"0x47 0x30440220ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with non-DER signature (too little R padding)\"],\n-[\"0x49 0x3046022100ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a950221003003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with non-DER signature (too much S padding)\"],\n-[\"0x48 0x3045022100e6eda3fd34862078233463cae19f0b47995e3f892102e5b175175e92a9163cc402204bf58445819093638481084322b61a2d49b68c96fd6fea17ed494722d0d67b4f01\", \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"P2SH,STRICTENC\", \"Pay to pubkey with hybrid pubkey encoding\"],\n-[\"0x48 0x304502203b56d65863e0cdb89313043c2402f46f518c31658648151b01ec6b5b6c89206a022100d71efefb4c24fab36abb44ade106963d8114c5af1bda033faa1923f54ec4ea6a01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC,LOW_S\", \"Pay to pubkey with high S\"],\n-[\"0x47 0x3044022054cb0a3fca8694a0c231848fd9f965078148fd653e49dd4b6980fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"P2SH,STRICTENC\", \"P2SH with a pay to pubkeyhash inside with invalid signature\"],\n-[\"1 0x48 0x3045022100e1c4e8800bd00c9ec3cd3de0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC,NULLDUMMY\", \"Raw multisig with one pubkey with non-zero dummy\"],\n+[\"0x47 0x30440220304eff7556bba9560df47873275e64db45f3cd735998ce3f00d2e57b1bb5f31302205c0c9d14b8b80d43e2ac9b87532f1af6d8a3271262bc694ec4e14068392bb0a001\", \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"\", \"P2PK, bad sig\"],\n+[\"0x47 0x3044022037fcdb8e08f41e27588de8bc036d2c4b16eb3d09c1ba53b8f47a0a9c27722a39022058664b7a53b507e71dfafb77193e3786c3f0c119d78ce9104480ee7ece04f09301 0x21 0x03363d90d446b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\", \"DUP HASH160 0x14 0xc0834c0c158f53be706d234c38fd52de7eece656 EQUALVERIFY CHECKSIG\", \"\", \"P2PKH, bad pubkey\"],\n+[\"0x47 0x3044022035e5b6742d299861c84cebaf2ea64145ee427a95facab39e2594d6deebb0c1d602200acb16778faa2e467a59006f342f2535b1418d55ba63a8605b387b7f9ac86d9a01\", \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\", \"\", \"P2PK anyonecanpay marked with normal hashtype\"],\n+[\"0x47 0x3044022029b2b8765ca950cf75a69e80b73b7ddfcaa8b27080c2db4c23b36aae60688e790220598ff368e17872ee065aa54d7d3a590682ca5204325b23b31d7da3c4a21ae67901 0x23 0x210279be667ef9dcbbac54a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\", \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\", \"P2SH\", \"P2SH(P2PK), bad redeemscript\"],\n+[\"0x47 0x30440220647f906e63890df5ef1d3fed47ba892b31976c634281079e2bd38504fb54a1fb022021e8811f38fbe90efb6b74cb78da01d9badbac3bafdf70a861d7538a220d0b2601 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\", \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\", \"P2SH\", \"P2SH(P2PKH), bad sig\"],\n+[\"0 0x47 0x304402203ef170402f8887f2ac183f31b1f503b0bc60bfc968dd469b097ea6124aefac5002200612febadc4e4cacc086982cb85830a17af3680c1b6a3cf77c1708af7621cf1301 0 0x47 0x304402207821838251a24a2234844f68e7169e6d11945cdf052ea12bd3e4e37457aceb4402200b6b46c81361e314c740ae5133c072af5fa5c209d65d2db1679e1716f19a538101\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"\", \"3-of-3, 2 sigs\"],\n+[\"0 0 0x47 0x304402204661f7795e8db7be3132e8974e9a76d1d24b31f23df94c6fbcea07d1c205789102203f5e45a1c0b085279b58d11b36d5fea5449c3cf16f844ad10124e9b65e8777d201 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\", \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\", \"P2SH\", \"P2SH(2-of-3), 1 sig\"],\n+[\"0x47 0x304402200052bc1600ca45c71f3538720fe62a5e8548dffd137af04467598c98466e9c0a0220789318ddbc9991ee477974089220a2feb6a6298a7c93d5ff6c25a92a2f4b48d501\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"STRICTENC\", \"P2PK with too much R padding\"],\n+[\"0x48 0x304502206eb7b92628bfb3c4d2a04b65b986987bcbb1af4fceedb144d5a0437b7ee410590221005f57a52df4aa26366742eed0db182fce51fbcd7159011b0644a7c05943eb228901\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"STRICTENC\", \"P2PK with too much S padding\"],\n+[\"0x47 0x30440220d8ad1efd55a3d2b8896495c38aba72056e1b3ca4a6ca15760e843eb1a9b9907602203eb0e8f3d6bec998262dfd03eaeb0f31c4e5105965436dec77550724b3771f3201\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"STRICTENC\", \"P2PK with too little R padding\"],\n+[\"0x48 0x304502206c43e065c8a8db3bbe69015afb86a51fb2fc8870defd41d436da2a197d9d6c12022100fcec35816ee2d84ec271ad159fcabf5dd712157051169e48ac328a7818cdb51e01\", \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\", \"LOW_S,STRICTENC\", \"P2PK with high S\"],\n+[\"0x01 0x01 0x47 0x304402200e48ba1cf4d7182db94ffb57bd72ea31b5545dc0d1c512e665779b4fb2badc52022054b8388dfc074c708a75b62359b7be46402751ee40c0a111aef38a837b6ed09801 0x47 0x304402201c9820f59c49107bb30e6175cfc9ec95f897b03beb628b4bc854d2b80392aa0602200235d986ae418bcd111b8814f4c26a0ab5f475fb542a44884fc14912a97a252301 0x47 0x304402204cd7894c6f10a871f5b0c1f9c13228f8cdd4050248f0d0f498ee86be69ee3080022051bd2932c7d585eb600c7194235c74da820935f0d67972fd9545673aa1fd023301\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"NULLDUMMY\", \"3-of-3 with nonzero dummy\"],\n \n [\"The End\"]\n "
      },
      {
        "sha": "653f60d98280b2823c2ebd6db14c72957c718977",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8138cbea3c405e142d70b43b6c452e1738de3332/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8138cbea3c405e142d70b43b6c452e1738de3332/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=8138cbea3c405e142d70b43b6c452e1738de3332",
        "patch": "@@ -529,18 +529,19 @@ nSequences are max.\n \n [\"0x00\", \"SIZE 0 EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"],\n \n-[\"0x48 0x3045022100ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash\"],\n-[\"0x47 0x304402207d09de5e34968c3f8b27d8217f173629f1106ee5216aa11d6b1f9813b3a214060220610a6ed25c704f901c6278f4f57fb11eadefdf0b22df298cfb6ce7ea84c86bf481 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Anyonecanpay pay to pubkeyhash\"],\n-[\"0x47 0x3044022028686fb3c8d3e5069cc9924c494fb5026df201d23340896da62fe9bb73fd9d5f02202a239609524959c4ca3651fd0cc48245b0b240862146fc579f3a962a4f46942b01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkey\"],\n-[\"0x47 0x3044022054cb0a3fca8694a0c231848ed9f965078148fd653e49dd4b6980fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"P2SH,STRICTENC\", \"P2SH with a pay to pubkeyhash inside\"],\n-[\"0 0x48 0x3045022100e1c4e8800bd00c9ec3cd3de0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC\", \"Raw multisig with one pubkey\"],\n-[\"0x49 0x304602220000ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH\", \"Normal pay to pubkeyhash with non-DER signature (too much R padding)\"],\n-[\"0x47 0x30440220ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH\", \"Normal pay to pubkeyhash with non-DER signature (too little R padding)\"],\n-[\"0x49 0x3046022100ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a950221003003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH\", \"Normal pay to pubkeyhash with non-DER signature (too much S padding)\"],\n-[\"0x48 0x3045022100e6eda3fd34862078233463cae19f0b47995e3f892102e5b175175e92a9163cc402204bf58445819093638481084322b61a2d49b68c96fd6fea17ed494722d0d67b4f01\", \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"P2SH\", \"Pay to pubkey with hybrid pubkey encoding\"],\n-[\"0x48 0x304502203b56d65863e0cdb89313043c2402f46f518c31658648151b01ec6b5b6c89206a022100d71efefb4c24fab36abb44ade106963d8114c5af1bda033faa1923f54ec4ea6a01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC\", \"Pay to pubkey with high S\"],\n-[\"0x47 0x3044022054cb0a3fca8694a0c231848fd9f965078148fd653e49dd4b6980fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"STRICTENC\", \"P2SH with a pay to pubkeyhash inside with invalid signature\"],\n-[\"1 0x48 0x3045022100e1c4e8800bd00c9ec3cd3de0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC\", \"Raw multisig with one pubkey with non-zero dummy\"],\n+[\"0x47 0x3044022007415aa37ce7eaa6146001ac8bdefca0ddcba0e37c5dc08c4ac99392124ebac802207d382307fd53f65778b07b9c63b6e196edeadf0be719130c5db21ff1e700d67501\", \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"\", \"P2PK\"],\n+[\"0x47 0x3044022069d40999786aeb2fd874f9eb2636461a062dc963471627ed8390a3a5f9556f640220350132a52415ce622f2aadd07f791c591500917ec1f8c5edbc5381ef7942534d01 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508\", \"DUP HASH160 0x14 0x1018853670f9f3b0582c5b9ee8ce93764ac32b93 EQUALVERIFY CHECKSIG\", \"\", \"P2PKH\"],\n+[\"0x47 0x30440220519f2a6632ffa134c7811ea2819e9dcc951f0c7baf461f2dffdd09133f3b080a02203ec6bab5eb6619ed7f41b8701d7c6d70cfc83bb26c5c97f54b2ca6e304fc2bb581\", \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\", \"\", \"P2PK anyonecanpay\"],\n+[\"0x47 0x30440220279dad2170ffb5639f0a1ea71fc462ee37d75d420d86f84c978bac523c09b7f20220683b2789f5c5528a9e0a0d78f6e40db3f616cf1adb5a5fdef117d5974795cfe201 0x23 0x210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\", \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\", \"P2SH\", \"P2SH(P2PK)\"],\n+[\"0x47 0x3044022066acbfb5ac96b7cbf3f05a2aaf358c32438c45d1d7359dee9fc1ee636940735f02205606a03fd8cbf6a6fcbcba60c8abb1e385c0b5753cb57a97538159106fd3684e01 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\", \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\", \"\", \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\"],\n+[\"0 0x47 0x3044022004e791dd30a64c70e55e84e150c002af9feb3ce0ab1f20e86c53d1209003927502205a60453987fcd72aebaaacebc8ce4b15449cdd79e54cc82cefb83e69dbcfeabf01 0x47 0x304402201d021808ce93dd8574cc4f99ae4f11b44305528b0aecbd9f156f08315173643802200944a0ea5c884bd86180aef76d8b1e444860776b251e47d2d6c651a1c6f9930801 0x47 0x30440220446336d7b7de05ebb5683b82b05248ec7d78e88ae8d6125985f5776c887a4cf90220674ab2b2c2f954ba1cf35457d273c90d0c0c1c224d0ae128628740e81129486801\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"\", \"3-of-3\"],\n+[\"0 0x47 0x30440220288b06d057cf0eac434ed0c3be9257cc0ca144dd99c11cc8f1a49467a37d8e8002203c496c72253c528e6bc81c42e683aba974d46041a96ef7b00915c863eb2a702901 0x47 0x304402207ffb4da33f40cac839a43000a187bd76a1ee5bf95e46dc1534b38bb7bd0321db022038c078f29d1831f8eb68ffdc2634c654fb01c3467b6457b98ad220653bb2478501 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\", \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\", \"P2SH\", \"P2SH(2-of-3)\"],\n+[\"0x47 0x304402200001cae94b795baaafb05db38cf24cd75560cab2c36c91e29fac7d0fd2a723a3022058e2e56e568ce7c4b2b106210d114e1faa079407a6ed4154f230667c7d3583bc01\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"\", \"P2PK with too much R padding but no STRICTENC\"],\n+[\"0x48 0x304502206d01de7c2a40ac2bb1231ed97f3890a1782f421d4c28b97166deff317990288f0221005e720213b089355be2cf785d81a82c59307d30e1624f450ed9ca1ebbc11cca6d01\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"\", \"P2PK with too much S padding but no STRICTENC\"],\n+[\"0x47 0x30440220f3d8889602147d60d26c1d3b21b8db183eac02bf6d2fec1424c0ef377ca6fd7b02202bae8bfe39d00a432d4538a592e338b0ffc44c17d4b7056043d55063cf91f5ef01\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"\", \"P2PK with too little R padding but no STRICTENC\"],\n+[\"0x48 0x3045022021bf9184d94f208ac9f4757ebca9b1cbebf008cfc244fe5be1360b1b9aba0e92022100e55074f72f3a1bfddf2ea4ea7ba984f78822e136fe04c8f9c1363238e0233bd801\", \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\", \"STRICTENC\", \"P2PK with high S but no LOW_S\"],\n+[\"0x48 0x304502205c3e81aaf2aad0673f349035b180eba783eba7797af91c979920dea6b17a16d6022100d1d46825c68da1b325f320a3503dad27bb818227f64a38d153554bfd360c0e5301\", \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\", \"LOW_S\", \"P2PK with high S but no STRICTENC\"],\n+[\"0x01 0x01 0x47 0x3044022046ce33d1771b0127dd4c4cef8fdc3218ebdfa60e3793ed700292d8ebd93fb1f402201029d47a414db83e96e31443c2d8b552f971469c4800f5eff7df2f0648521aed01 0x47 0x304402205c53911ad55b054920043962bbda98cf6e57e2db1cd5611138251490baabaa8702201dc80dfceae6007e7772dc13ff6e7ca66a983cb017fe5d46d30118462d83bcf801 0x47 0x304402201937e44a4ec12364f9d32f9d25e7ecbc68aee9ef90069af80efef4c05f6ace9602206c515101c00c75710b32ff7ff8dbaf7c9a0be6e86ed14a0755b47626604f31fd01\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"\", \"3-of-3 with nonzero dummy but no NULLDUMMY\"],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "f9086b6a64667cedb7a79c135290fb067a1d8255",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 317,
        "deletions": 8,
        "changes": 325,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8138cbea3c405e142d70b43b6c452e1738de3332/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8138cbea3c405e142d70b43b6c452e1738de3332/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=8138cbea3c405e142d70b43b6c452e1738de3332",
        "patch": "@@ -5,12 +5,13 @@\n #include \"data/script_invalid.json.h\"\n #include \"data/script_valid.json.h\"\n \n+#include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n-#include \"core_io.h\"\n+#include \"util.h\"\n \n #include <fstream>\n #include <stdint.h>\n@@ -36,6 +37,7 @@ using namespace boost::algorithm;\n static const unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;\n \n unsigned int ParseScriptFlags(string strFlags);\n+string FormatScriptFlags(unsigned int flags);\n \n Array\n read_json(const std::string& jsondata)\n@@ -68,10 +70,8 @@ CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n     return txCredit;\n }\n \n-CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScript& scriptPubKey)\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CTransaction& txCredit)\n {\n-    CMutableTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n-\n     CMutableTransaction txSpend;\n     txSpend.nVersion = 1;\n     txSpend.nLockTime = 0;\n@@ -87,6 +87,317 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CSc\n     return txSpend;\n }\n \n+void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message)\n+{\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey)), 0, flags) == expect, message);\n+}\n+\n+namespace\n+{\n+const unsigned char vchKey0[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};\n+const unsigned char vchKey1[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0};\n+const unsigned char vchKey2[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0};\n+\n+struct KeyData\n+{\n+    CKey key0, key0C, key1, key1C, key2, key2C;\n+    CPubKey pubkey0, pubkey0C, pubkey0H;\n+    CPubKey pubkey1, pubkey1C;\n+    CPubKey pubkey2, pubkey2C;\n+\n+    KeyData()\n+    {\n+\n+        key0.Set(&vchKey0[0], &vchKey0[32], false);\n+        key0C.Set(&vchKey0[0], &vchKey0[32], true);\n+        pubkey0 = key0.GetPubKey();\n+        pubkey0H = key0.GetPubKey();\n+        pubkey0C = key0C.GetPubKey();\n+        *const_cast<unsigned char*>(&pubkey0H[0]) = 0x06 | (pubkey0H[64] & 1);\n+\n+        key1.Set(&vchKey1[0], &vchKey1[32], false);\n+        key1C.Set(&vchKey1[0], &vchKey1[32], true);\n+        pubkey1 = key1.GetPubKey();\n+        pubkey1C = key1C.GetPubKey();\n+\n+        key2.Set(&vchKey2[0], &vchKey2[32], false);\n+        key2C.Set(&vchKey2[0], &vchKey2[32], true);\n+        pubkey2 = key2.GetPubKey();\n+        pubkey2C = key2C.GetPubKey();\n+    }\n+};\n+\n+const KeyData keys;\n+\n+class TestBuilder\n+{\n+private:\n+    CScript scriptPubKey;\n+    CTransaction creditTx;\n+    CMutableTransaction spendTx;\n+    bool havePush;\n+    std::vector<unsigned char> push;\n+    std::string comment;\n+    int flags;\n+\n+    void DoPush()\n+    {\n+        if (havePush) {\n+            spendTx.vin[0].scriptSig << push;\n+            havePush = false;\n+        }\n+    }\n+\n+    void DoPush(const std::vector<unsigned char>& data)\n+    {\n+         DoPush();\n+         push = data;\n+         havePush = true;\n+    }\n+\n+public:\n+    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_)\n+    {\n+        if (P2SH) {\n+            creditTx = BuildCreditingTransaction(CScript() << OP_HASH160 << redeemScript.GetID() << OP_EQUAL);\n+        } else {\n+            creditTx = BuildCreditingTransaction(redeemScript);\n+        }\n+        spendTx = BuildSpendingTransaction(CScript(), creditTx);\n+    }\n+\n+    TestBuilder& Add(const CScript& script)\n+    {\n+        spendTx.vin[0].scriptSig += script;\n+        return *this;\n+    }\n+\n+    TestBuilder& Num(int num)\n+    {\n+        spendTx.vin[0].scriptSig << CScriptNum(num);\n+        return *this;\n+    }\n+\n+    TestBuilder& Push(const std::string& hex)\n+    {\n+        DoPush(ParseHex(hex));\n+        return *this;\n+    }\n+\n+    TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32)\n+    {\n+        uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType);\n+        std::vector<unsigned char> vchSig, r, s;\n+        do {\n+            key.Sign(hash, vchSig, lenS <= 32);\n+            r = std::vector<unsigned char>(&vchSig[4], &vchSig[4 + vchSig[3]]);\n+            s = std::vector<unsigned char>(&vchSig[6 + vchSig[3]], &vchSig[6 + vchSig[3] + vchSig[5 + vchSig[3]]]);\n+        } while (lenR != r.size() || lenS != s.size());\n+        vchSig.push_back(static_cast<unsigned char>(nHashType));\n+        DoPush(vchSig);\n+        return *this;\n+    }\n+\n+    TestBuilder& Push(const CPubKey& pubkey)\n+    {\n+        DoPush(std::vector<unsigned char>(pubkey.begin(), pubkey.end()));\n+        return *this;\n+    }\n+\n+    TestBuilder& PushRedeem()\n+    {\n+        DoPush(static_cast<std::vector<unsigned char> >(scriptPubKey));\n+        return *this;\n+    }\n+\n+    TestBuilder& EditPush(unsigned int pos, const std::string& hexin, const std::string& hexout)\n+    {\n+        assert(havePush);\n+        std::vector<unsigned char> datain = ParseHex(hexin);\n+        std::vector<unsigned char> dataout = ParseHex(hexout);\n+        assert(pos + datain.size() <= push.size());\n+        BOOST_CHECK_MESSAGE(std::vector<unsigned char>(push.begin() + pos, push.begin() + pos + datain.size()) == datain, comment);\n+        push.erase(push.begin() + pos, push.begin() + pos + datain.size());\n+        push.insert(push.begin() + pos, dataout.begin(), dataout.end());\n+        return *this;\n+    }\n+\n+    TestBuilder& DamagePush(unsigned int pos)\n+    {\n+        assert(havePush);\n+        assert(pos < push.size());\n+        push[pos] ^= 1;\n+        return *this;\n+    }\n+\n+    TestBuilder& Test(bool expect)\n+    {\n+        TestBuilder copy = *this; // Make a copy so we can rollback the push.\n+        DoPush();\n+        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, flags, expect, comment);\n+        *this = copy;\n+        return *this;\n+    }\n+\n+    operator std::string()\n+    {\n+        DoPush();\n+        return \"[\\\"\" +\n+               FormatScript(spendTx.vin[0].scriptSig) + \"\\\", \\\"\" +\n+               FormatScript(creditTx.vout[0].scriptPubKey) + \"\\\", \\\"\" +\n+               FormatScriptFlags(flags) + \"\\\", \\\"\" +\n+               comment + \"\\\"],\\n\";\n+    }\n+\n+    std::string GetComment()\n+    {\n+        return comment;\n+    }\n+\n+    const CScript& GetScriptPubKey()\n+    {\n+        return creditTx.vout[0].scriptPubKey;\n+    }\n+};\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_build)\n+{\n+    std::vector<TestBuilder> good;\n+    std::vector<TestBuilder> bad;\n+\n+    good.push_back(TestBuilder(CScript() << keys.pubkey0 << OP_CHECKSIG,\n+                               \"P2PK\", 0\n+                              ).PushSig(keys.key0));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey0 << OP_CHECKSIG,\n+                              \"P2PK, bad sig\", 0\n+                             ).PushSig(keys.key0).DamagePush(10));\n+\n+    good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << keys.pubkey1C.GetID() << OP_EQUALVERIFY << OP_CHECKSIG,\n+                               \"P2PKH\", 0\n+                              ).PushSig(keys.key1).Push(keys.pubkey1C));\n+    bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << keys.pubkey2C.GetID() << OP_EQUALVERIFY << OP_CHECKSIG,\n+                              \"P2PKH, bad pubkey\", 0\n+                             ).PushSig(keys.key2).Push(keys.pubkey2C).DamagePush(5));\n+\n+    good.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG,\n+                               \"P2PK anyonecanpay\", 0\n+                              ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG,\n+                              \"P2PK anyonecanpay marked with normal hashtype\", 0\n+                             ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY).EditPush(70, \"81\", \"01\"));\n+\n+    good.push_back(TestBuilder(CScript() << keys.pubkey0C << OP_CHECKSIG,\n+                               \"P2SH(P2PK)\", SCRIPT_VERIFY_P2SH, true\n+                              ).PushSig(keys.key0).PushRedeem());\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey0C << OP_CHECKSIG,\n+                              \"P2SH(P2PK), bad redeemscript\", SCRIPT_VERIFY_P2SH, true\n+                             ).PushSig(keys.key0).PushRedeem().DamagePush(10));\n+\n+    good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << keys.pubkey1.GetID() << OP_EQUALVERIFY << OP_CHECKSIG,\n+                               \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\", 0, true\n+                              ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n+    bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << keys.pubkey1.GetID() << OP_EQUALVERIFY << OP_CHECKSIG,\n+                              \"P2SH(P2PKH), bad sig\", SCRIPT_VERIFY_P2SH, true\n+                             ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n+\n+    good.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+                               \"3-of-3\", 0\n+                              ).Num(0).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+                              \"3-of-3, 2 sigs\", 0\n+                             ).Num(0).PushSig(keys.key0).PushSig(keys.key1).Num(0));\n+\n+    good.push_back(TestBuilder(CScript() << OP_2 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+                               \"P2SH(2-of-3)\", SCRIPT_VERIFY_P2SH, true\n+                              ).Num(0).PushSig(keys.key1).PushSig(keys.key2).PushRedeem());\n+    bad.push_back(TestBuilder(CScript() << OP_2 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+                              \"P2SH(2-of-3), 1 sig\", SCRIPT_VERIFY_P2SH, true\n+                             ).Num(0).PushSig(keys.key1).Num(0).PushRedeem());\n+\n+    good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+                               \"P2PK with too much R padding but no STRICTENC\", 0\n+                              ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+                              \"P2PK with too much R padding\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+                               \"P2PK with too much S padding but no STRICTENC\", 0\n+                              ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+                              \"P2PK with too much S padding\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+                               \"P2PK with too little R padding but no STRICTENC\", 0\n+                              ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+                              \"P2PK with too little R padding\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+\n+    good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n+                               \"P2PK with high S but no LOW_S\", SCRIPT_VERIFY_STRICTENC\n+                              ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n+                               \"P2PK with high S but no STRICTENC\", SCRIPT_VERIFY_LOW_S\n+                              ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n+                              \"P2PK with high S\", SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n+\n+    good.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+                               \"3-of-3 with nonzero dummy but no NULLDUMMY\", 0\n+                              ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+                              \"3-of-3 with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n+                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+\n+    std::map<std::string, Array> tests_good;\n+    std::map<std::string, Array> tests_bad;\n+\n+    {\n+        Array json_good = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n+        Array json_bad = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n+\n+        BOOST_FOREACH(Value& tv, json_good) {\n+            Array test = tv.get_array();\n+            if (test.size() >= 4) {\n+                tests_good[test[3].get_str()] = test;\n+            }\n+        }\n+        BOOST_FOREACH(Value& tv, json_bad) {\n+            Array test = tv.get_array();\n+            if (test.size() >= 4) {\n+                tests_bad[test[3].get_str()] = test;\n+            }\n+        }\n+    }\n+\n+    std::string strGood;\n+    std::string strBad;\n+\n+    BOOST_FOREACH(TestBuilder& test, good) {\n+        test.Test(true);\n+        BOOST_CHECK_MESSAGE(tests_good.count(test.GetComment()) > 0, \"Missing auto script_valid test: \" + test.GetComment());\n+        BOOST_CHECK_MESSAGE(ParseScript(tests_good[test.GetComment()][1].get_str()) == test.GetScriptPubKey(), \"ScriptPubKey mismatch in auto script_valid test: \" + test.GetComment());\n+        strGood += test;\n+    }\n+    BOOST_FOREACH(TestBuilder& test, bad) {\n+        test.Test(false);\n+        BOOST_CHECK_MESSAGE(tests_bad.count(test.GetComment()) > 0, \"Missing auto script_invalid test: \" + test.GetComment());\n+        BOOST_CHECK_MESSAGE(ParseScript(tests_bad[test.GetComment()][1].get_str()) == test.GetScriptPubKey(), \"ScriptPubKey mismatch in auto script_invalid test: \" + test.GetComment());\n+        strBad += test;\n+    }\n+\n+#if 0\n+    FILE* valid = fopen(\"script_valid.json.gen\", \"w\");\n+    fputs(strGood.c_str(), valid);\n+    fclose(valid);\n+    FILE* invalid = fopen(\"script_invalid.json.gen\", \"w\");\n+    fputs(strBad.c_str(), invalid);\n+    fclose(invalid);\n+#endif\n+}\n+\n BOOST_AUTO_TEST_CASE(script_valid)\n {\n     // Read tests from test/data/script_valid.json\n@@ -113,8 +424,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n \n-        CTransaction tx;\n-        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, BuildSpendingTransaction(scriptSig, scriptPubKey), 0, scriptflags), strTest);\n+        DoTest(scriptPubKey, scriptSig, scriptflags, true, strTest);\n     }\n }\n \n@@ -140,8 +450,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n \n-        CTransaction tx;\n-        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, BuildSpendingTransaction(scriptSig, scriptPubKey), 0, scriptflags), strTest);\n+        DoTest(scriptPubKey, scriptSig, scriptflags, false, strTest);\n     }\n }\n "
      },
      {
        "sha": "83116b51e5c4a930ab27f76ead08597078c7ae4c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 12,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8138cbea3c405e142d70b43b6c452e1738de3332/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8138cbea3c405e142d70b43b6c452e1738de3332/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=8138cbea3c405e142d70b43b6c452e1738de3332",
        "patch": "@@ -17,6 +17,7 @@\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/test/unit_test.hpp>\n+#include <boost/assign/list_of.hpp>\n #include \"json/json_spirit_writer_template.h\"\n \n using namespace std;\n@@ -26,22 +27,23 @@ using namespace boost::algorithm;\n // In script_tests.cpp\n extern Array read_json(const std::string& jsondata);\n \n-unsigned int ParseScriptFlags(string strFlags){\n+// Note how NOCACHE is not included as it is a runtime-only flag.\n+static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n+    (string(\"NONE\"), (unsigned int)SCRIPT_VERIFY_NONE)\n+    (string(\"P2SH\"), (unsigned int)SCRIPT_VERIFY_P2SH)\n+    (string(\"STRICTENC\"), (unsigned int)SCRIPT_VERIFY_STRICTENC)\n+    (string(\"LOW_S\"), (unsigned int)SCRIPT_VERIFY_LOW_S)\n+    (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY);\n+\n+unsigned int ParseScriptFlags(string strFlags)\n+{\n+    if (strFlags.empty()) {\n+        return 0;\n+    }\n     unsigned int flags = 0;\n     vector<string> words;\n     split(words, strFlags, is_any_of(\",\"));\n \n-    // Note how NOCACHE is not included as it is a runtime-only flag.\n-    static map<string, unsigned int> mapFlagNames;\n-    if (mapFlagNames.size() == 0)\n-    {\n-        mapFlagNames[\"NONE\"] = SCRIPT_VERIFY_NONE;\n-        mapFlagNames[\"P2SH\"] = SCRIPT_VERIFY_P2SH;\n-        mapFlagNames[\"STRICTENC\"] = SCRIPT_VERIFY_STRICTENC;\n-        mapFlagNames[\"LOW_S\"] = SCRIPT_VERIFY_LOW_S;\n-        mapFlagNames[\"NULLDUMMY\"] = SCRIPT_VERIFY_NULLDUMMY;\n-    }\n-\n     BOOST_FOREACH(string word, words)\n     {\n         if (!mapFlagNames.count(word))\n@@ -52,6 +54,22 @@ unsigned int ParseScriptFlags(string strFlags){\n     return flags;\n }\n \n+string FormatScriptFlags(unsigned int flags)\n+{\n+    if (flags == 0) {\n+        return \"\";\n+    }\n+    string ret;\n+    std::map<string, unsigned int>::const_iterator it = mapFlagNames.begin();\n+    while (it != mapFlagNames.end()) {\n+        if (flags & it->second) {\n+            ret += it->first + \",\";\n+        }\n+        it++;\n+    }\n+    return ret.substr(0, ret.size() - 1);\n+}\n+\n BOOST_AUTO_TEST_SUITE(transaction_tests)\n \n BOOST_AUTO_TEST_CASE(tx_valid)"
      }
    ]
  },
  {
    "sha": "a372168e77a8a195613a02983f2589252698bf0f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzcyMTY4ZTc3YThhMTk1NjEzYTAyOTgzZjI1ODkyNTI2OThiZjBm",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2014-04-22T22:46:19Z"
      },
      "committer": {
        "name": "Mark Friedenbach",
        "email": "mark@blockstream.io",
        "date": "2014-09-26T22:42:04Z"
      },
      "message": "Use a typedef for monetary values",
      "tree": {
        "sha": "b300a5f7aa007645c6ba2bd708e7a962fab2894b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b300a5f7aa007645c6ba2bd708e7a962fab2894b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a372168e77a8a195613a02983f2589252698bf0f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a372168e77a8a195613a02983f2589252698bf0f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a372168e77a8a195613a02983f2589252698bf0f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a372168e77a8a195613a02983f2589252698bf0f/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": null,
    "parents": [
      {
        "sha": "64cfaf891fe539b36f6be37dac6c28a712d70b96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64cfaf891fe539b36f6be37dac6c28a712d70b96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64cfaf891fe539b36f6be37dac6c28a712d70b96"
      }
    ],
    "stats": {
      "total": 753,
      "additions": 397,
      "deletions": 356
    },
    "files": [
      {
        "sha": "48e4fc5d8f5247297e2cd972ec0226a609041639",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -65,6 +65,7 @@ BITCOIN_CORE_H = \\\n   addrman.h \\\n   alert.h \\\n   allocators.h \\\n+  amount.h \\\n   base58.h \\\n   bloom.h \\\n   chainparams.h \\"
      },
      {
        "sha": "42006a0388ebc38541fab988efffeef522d0f836",
        "filename": "src/amount.h",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_AMOUNT_H\n+#define BITCOIN_AMOUNT_H\n+\n+#include <stdint.h>\n+\n+typedef int64_t CAmount;\n+\n+#endif"
      },
      {
        "sha": "a61b4fe29db29c27773e2d73ba67f74e297dd44e",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -214,7 +214,7 @@ static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n \n     // extract and validate VALUE\n     string strValue = strInput.substr(0, pos);\n-    int64_t value;\n+    CAmount value;\n     if (!ParseMoney(strValue, value))\n         throw runtime_error(\"invalid TX output value\");\n \n@@ -242,7 +242,7 @@ static void MutateTxAddOutScript(CMutableTransaction& tx, const string& strInput\n \n     // extract and validate VALUE\n     string strValue = strInput.substr(0, pos);\n-    int64_t value;\n+    CAmount value;\n     if (!ParseMoney(strValue, value))\n         throw runtime_error(\"invalid TX output value\");\n "
      },
      {
        "sha": "9b8d63d4e449eae819d86b31f65fe7da66746cb5",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -171,12 +171,12 @@ const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input) const\n     return coins->vout[input.prevout.n];\n }\n \n-int64_t CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n+CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n {\n     if (tx.IsCoinBase())\n         return 0;\n \n-    int64_t nResult = 0;\n+    CAmount nResult = 0;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n         nResult += GetOutputFor(tx.vin[i]).nValue;\n "
      },
      {
        "sha": "2583475323304c20091b8b27e19607b24dc814d4",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -266,7 +266,7 @@ struct CCoinsStats\n     uint64_t nTransactionOutputs;\n     uint64_t nSerializedSize;\n     uint256 hashSerialized;\n-    int64_t nTotalAmount;\n+    CAmount nTotalAmount;\n \n     CCoinsStats() : nHeight(0), hashBlock(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), hashSerialized(0), nTotalAmount(0) {}\n };\n@@ -367,7 +367,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n         @param[in] tx\ttransaction for which we are checking input total\n         @return\tSum of value of all inputs (scriptSigs)\n      */\n-    int64_t GetValueIn(const CTransaction& tx) const;\n+    CAmount GetValueIn(const CTransaction& tx) const;\n \n     // Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;"
      },
      {
        "sha": "1489d77bb35699218556795c58babf43806fb0d2",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -43,7 +43,7 @@ std::string CTxIn::ToString() const\n     return str;\n }\n \n-CTxOut::CTxOut(int64_t nValueIn, CScript scriptPubKeyIn)\n+CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)\n {\n     nValue = nValueIn;\n     scriptPubKey = scriptPubKeyIn;\n@@ -59,17 +59,17 @@ std::string CTxOut::ToString() const\n     return strprintf(\"CTxOut(nValue=%d.%08d, scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30));\n }\n \n-CFeeRate::CFeeRate(int64_t nFeePaid, size_t nSize)\n+CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nSize)\n {\n     if (nSize > 0)\n         nSatoshisPerK = nFeePaid*1000/nSize;\n     else\n         nSatoshisPerK = 0;\n }\n \n-int64_t CFeeRate::GetFee(size_t nSize) const\n+CAmount CFeeRate::GetFee(size_t nSize) const\n {\n-    int64_t nFee = nSatoshisPerK*nSize / 1000;\n+    CAmount nFee = nSatoshisPerK*nSize / 1000;\n \n     if (nFee == 0 && nSatoshisPerK > 0)\n         nFee = nSatoshisPerK;\n@@ -110,9 +110,9 @@ CTransaction& CTransaction::operator=(const CTransaction &tx) {\n     return *this;\n }\n \n-int64_t CTransaction::GetValueOut() const\n+CAmount CTransaction::GetValueOut() const\n {\n-    int64_t nValueOut = 0;\n+    CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n         nValueOut += txout.nValue;"
      },
      {
        "sha": "e8435c8b0db698a48bbc0b2c13c61e603e38261e",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_CORE_H\n #define BITCOIN_CORE_H\n \n+#include \"amount.h\"\n #include \"script/compressor.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n@@ -19,8 +20,8 @@ static const int64_t COIN = 100000000;\n static const int64_t CENT = 1000000;\n \n /** No amount larger than this (in satoshi) is valid */\n-static const int64_t MAX_MONEY = 21000000 * COIN;\n-inline bool MoneyRange(int64_t nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n+static const CAmount MAX_MONEY = 21000000 * COIN;\n+inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n \n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n@@ -129,15 +130,15 @@ class CTxIn\n class CFeeRate\n {\n private:\n-    int64_t nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n+    CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n public:\n     CFeeRate() : nSatoshisPerK(0) { }\n-    explicit CFeeRate(int64_t _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n-    CFeeRate(int64_t nFeePaid, size_t nSize);\n+    explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n+    CFeeRate(const CAmount& nFeePaid, size_t nSize);\n     CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }\n \n-    int64_t GetFee(size_t size) const; // unit returned is satoshis\n-    int64_t GetFeePerK() const { return GetFee(1000); } // satoshis-per-1000-bytes\n+    CAmount GetFee(size_t size) const; // unit returned is satoshis\n+    CAmount GetFeePerK() const { return GetFee(1000); } // satoshis-per-1000-bytes\n \n     friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n     friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n@@ -161,15 +162,15 @@ class CFeeRate\n class CTxOut\n {\n public:\n-    int64_t nValue;\n+    CAmount nValue;\n     CScript scriptPubKey;\n \n     CTxOut()\n     {\n         SetNull();\n     }\n \n-    CTxOut(int64_t nValueIn, CScript scriptPubKeyIn);\n+    CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn);\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -276,7 +277,7 @@ class CTransaction\n     }\n \n     // Return sum of txouts.\n-    int64_t GetValueOut() const;\n+    CAmount GetValueOut() const;\n     // GetValueIn() is a method on CCoinsViewCache, because\n     // inputs must be known to compute value in.\n "
      },
      {
        "sha": "dfb984cb0d728164a30c6598eb66ac6a33390c37",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -662,7 +662,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     // cost to you of processing a transaction.\n     if (mapArgs.count(\"-minrelaytxfee\"))\n     {\n-        int64_t n = 0;\n+        CAmount n = 0;\n         if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0)\n             ::minRelayTxFee = CFeeRate(n);\n         else\n@@ -672,15 +672,15 @@ bool AppInit2(boost::thread_group& threadGroup)\n #ifdef ENABLE_WALLET\n     if (mapArgs.count(\"-mintxfee\"))\n     {\n-        int64_t n = 0;\n+        CAmount n = 0;\n         if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n             CWallet::minTxFee = CFeeRate(n);\n         else\n             return InitError(strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"]));\n     }\n     if (mapArgs.count(\"-paytxfee\"))\n     {\n-        int64_t nFeePerK = 0;\n+        CAmount nFeePerK = 0;\n         if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n             return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s'\"), mapArgs[\"-paytxfee\"]));\n         if (nFeePerK > nHighTransactionFeeWarning)"
      },
      {
        "sha": "234b343983e2f498d1e01f9cc63a760cc94cd762",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -781,7 +781,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n                          REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n-    int64_t nValueOut = 0;\n+    CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n@@ -823,19 +823,19 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n-int64_t GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n+CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n {\n     {\n         LOCK(mempool.cs);\n         uint256 hash = tx.GetHash();\n         double dPriorityDelta = 0;\n-        int64_t nFeeDelta = 0;\n+        CAmount nFeeDelta = 0;\n         mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n         if (dPriorityDelta > 0 || nFeeDelta > 0)\n             return 0;\n     }\n \n-    int64_t nMinFee = ::minRelayTxFee.GetFee(nBytes);\n+    CAmount nMinFee = ::minRelayTxFee.GetFee(nBytes);\n \n     if (fAllowFree)\n     {\n@@ -898,7 +898,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CCoinsView dummy;\n         CCoinsViewCache view(dummy);\n \n-        int64_t nValueIn = 0;\n+        CAmount nValueIn = 0;\n         {\n         LOCK(pool.cs);\n         CCoinsViewMemPool viewMemPool(*pcoinsTip, pool);\n@@ -950,15 +950,15 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                                    hash.ToString(), nSigOps, MAX_TX_SIGOPS),\n                              REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n \n-        int64_t nValueOut = tx.GetValueOut();\n-        int64_t nFees = nValueIn-nValueOut;\n+        CAmount nValueOut = tx.GetValueOut();\n+        CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block\n-        int64_t txMinFee = GetMinRelayFee(tx, nSize, true);\n+        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),\n@@ -1178,7 +1178,7 @@ void static PruneOrphanBlocks()\n     mapOrphanBlocks.erase(hash);\n }\n \n-int64_t GetBlockValue(int nHeight, int64_t nFees)\n+CAmount GetBlockValue(int nHeight, const CAmount& nFees)\n {\n     int64_t nSubsidy = 50 * COIN;\n     int halvings = nHeight / Params().SubsidyHalvingInterval();\n@@ -1389,8 +1389,8 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // This is also true for mempool checks.\n         CBlockIndex *pindexPrev = mapBlockIndex.find(inputs.GetBestBlock())->second;\n         int nSpendHeight = pindexPrev->nHeight + 1;\n-        int64_t nValueIn = 0;\n-        int64_t nFees = 0;\n+        CAmount nValueIn = 0;\n+        CAmount nFees = 0;\n         for (unsigned int i = 0; i < tx.vin.size(); i++)\n         {\n             const COutPoint &prevout = tx.vin[i].prevout;\n@@ -1418,7 +1418,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                              REJECT_INVALID, \"bad-txns-in-belowout\");\n \n         // Tally transaction fees\n-        int64_t nTxFee = nValueIn - tx.GetValueOut();\n+        CAmount nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n             return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString()),\n                              REJECT_INVALID, \"bad-txns-fee-negative\");\n@@ -1658,7 +1658,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n     int64_t nTimeStart = GetTimeMicros();\n-    int64_t nFees = 0;\n+    CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));"
      },
      {
        "sha": "93915db519ee9203cb1d7e990a081fc650649150",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -172,7 +172,7 @@ std::string GetWarnings(std::string strFor);\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState &state, CBlock *pblock = NULL);\n-int64_t GetBlockValue(int nHeight, int64_t nFees);\n+CAmount GetBlockValue(int nHeight, const CAmount& nFees);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n@@ -260,7 +260,7 @@ struct CDiskTxPos : public CDiskBlockPos\n };\n \n \n-int64_t GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n+CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n \n //\n // Check transaction inputs, and make sure any\n@@ -970,7 +970,7 @@ extern CBlockTreeDB *pblocktree;\n struct CBlockTemplate\n {\n     CBlock block;\n-    std::vector<int64_t> vTxFees;\n+    std::vector<CAmount> vTxFees;\n     std::vector<int64_t> vTxSigOps;\n };\n "
      },
      {
        "sha": "361a2bea41231652838c811423e46ada6b9a4772",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -111,7 +111,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n \n     // Collect memory pool transactions into the block\n-    int64_t nFees = 0;\n+    CAmount nFees = 0;\n \n     {\n         LOCK2(cs_main, mempool.cs);\n@@ -135,7 +135,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n             COrphan* porphan = NULL;\n             double dPriority = 0;\n-            int64_t nTotalIn = 0;\n+            CAmount nTotalIn = 0;\n             bool fMissingInputs = false;\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             {\n@@ -170,7 +170,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                 const CCoins* coins = view.AccessCoins(txin.prevout.hash);\n                 assert(coins);\n \n-                int64_t nValueIn = coins->vout[txin.prevout.n].nValue;\n+                CAmount nValueIn = coins->vout[txin.prevout.n].nValue;\n                 nTotalIn += nValueIn;\n \n                 int nConf = pindexPrev->nHeight - coins->nHeight + 1;\n@@ -229,7 +229,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             // Skip free transactions if we're past the minimum block size:\n             const uint256& hash = tx.GetHash();\n             double dPriorityDelta = 0;\n-            int64_t nFeeDelta = 0;\n+            CAmount nFeeDelta = 0;\n             mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n             if (fSortedByFee && (dPriorityDelta <= 0) && (nFeeDelta <= 0) && (feeRate < ::minRelayTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n                 continue;\n@@ -247,7 +247,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             if (!view.HaveInputs(tx))\n                 continue;\n \n-            int64_t nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n+            CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n \n             nTxSigOps += GetP2SHSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)"
      },
      {
        "sha": "6e35bf17b3d5fa85718853123734db096f5acd7a",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -44,20 +44,20 @@ class AmountSpinBox: public QAbstractSpinBox\n     void fixup(QString &input) const\n     {\n         bool valid = false;\n-        qint64 val = parse(input, &valid);\n+        CAmount val = parse(input, &valid);\n         if(valid)\n         {\n             input = BitcoinUnits::format(currentUnit, val, false, BitcoinUnits::separatorAlways);\n             lineEdit()->setText(input);\n         }\n     }\n \n-    qint64 value(bool *valid_out=0) const\n+    CAmount value(bool *valid_out=0) const\n     {\n         return parse(text(), valid_out);\n     }\n \n-    void setValue(qint64 value)\n+    void setValue(const CAmount& value)\n     {\n         lineEdit()->setText(BitcoinUnits::format(currentUnit, value, false, BitcoinUnits::separatorAlways));\n         emit valueChanged();\n@@ -66,9 +66,9 @@ class AmountSpinBox: public QAbstractSpinBox\n     void stepBy(int steps)\n     {\n         bool valid = false;\n-        qint64 val = value(&valid);\n+        CAmount val = value(&valid);\n         val = val + steps * singleStep;\n-        val = qMin(qMax(val, Q_INT64_C(0)), BitcoinUnits::maxMoney());\n+        val = qMin(qMax(val, CAmount(0)), BitcoinUnits::maxMoney());\n         setValue(val);\n     }\n \n@@ -78,7 +78,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         if(text().isEmpty()) // Allow step-up with empty field\n             return StepUpEnabled;\n         bool valid = false;\n-        qint64 val = value(&valid);\n+        CAmount val = value(&valid);\n         if(valid)\n         {\n             if(val > 0)\n@@ -92,7 +92,7 @@ class AmountSpinBox: public QAbstractSpinBox\n     void setDisplayUnit(int unit)\n     {\n         bool valid = false;\n-        qint64 val = value(&valid);\n+        CAmount val = value(&valid);\n \n         currentUnit = unit;\n \n@@ -102,7 +102,7 @@ class AmountSpinBox: public QAbstractSpinBox\n             clear();\n     }\n \n-    void setSingleStep(qint64 step)\n+    void setSingleStep(const CAmount& step)\n     {\n         singleStep = step;\n     }\n@@ -140,17 +140,17 @@ class AmountSpinBox: public QAbstractSpinBox\n     }\n private:\n     int currentUnit;\n-    qint64 singleStep;\n+    CAmount singleStep;\n     mutable QSize cachedMinimumSizeHint;\n \n     /**\n      * Parse a string into a number of base monetary units and\n      * return validity.\n      * @note Must return 0 if !valid.\n      */\n-    qint64 parse(const QString &text, bool *valid_out=0) const\n+    CAmount parse(const QString &text, bool *valid_out=0) const\n     {\n-        qint64 val = 0;\n+        CAmount val = 0;\n         bool valid = BitcoinUnits::parse(currentUnit, text, &val);\n         if(valid)\n         {\n@@ -253,12 +253,12 @@ QWidget *BitcoinAmountField::setupTabChain(QWidget *prev)\n     return unit;\n }\n \n-qint64 BitcoinAmountField::value(bool *valid_out) const\n+CAmount BitcoinAmountField::value(bool *valid_out) const\n {\n     return amount->value(valid_out);\n }\n \n-void BitcoinAmountField::setValue(qint64 value)\n+void BitcoinAmountField::setValue(const CAmount& value)\n {\n     amount->setValue(value);\n }\n@@ -285,7 +285,7 @@ void BitcoinAmountField::setDisplayUnit(int newUnit)\n     unit->setValue(newUnit);\n }\n \n-void BitcoinAmountField::setSingleStep(qint64 step)\n+void BitcoinAmountField::setSingleStep(const CAmount& step)\n {\n     amount->setSingleStep(step);\n }"
      },
      {
        "sha": "e52feeb46e8833134486491db6b52180aa2c7be4",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOINAMOUNTFIELD_H\n #define BITCOINAMOUNTFIELD_H\n \n+#include \"amount.h\"\n+\n #include <QWidget>\n \n class AmountSpinBox;\n@@ -19,16 +21,16 @@ class BitcoinAmountField: public QWidget\n {\n     Q_OBJECT\n \n-    Q_PROPERTY(qint64 value READ value WRITE setValue NOTIFY valueChanged USER true)\n+    Q_PROPERTY(CAmount value READ value WRITE setValue NOTIFY valueChanged USER true)\n \n public:\n     explicit BitcoinAmountField(QWidget *parent = 0);\n \n-    qint64 value(bool *valid=0) const;\n-    void setValue(qint64 value);\n+    CAmount value(bool *value=0) const;\n+    void setValue(const CAmount& value);\n \n     /** Set single step in satoshis **/\n-    void setSingleStep(qint64 step);\n+    void setSingleStep(const CAmount& step);\n \n     /** Make read-only **/\n     void setReadOnly(bool fReadOnly);"
      },
      {
        "sha": "7380fbd240f2377ad83b25ce961974a5350d87d3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -864,7 +864,7 @@ void BitcoinGUI::closeEvent(QCloseEvent *event)\n }\n \n #ifdef ENABLE_WALLET\n-void BitcoinGUI::incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address)\n+void BitcoinGUI::incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address)\n {\n     // On new transaction, make an info balloon\n     message((amount)<0 ? tr(\"Sent transaction\") : tr(\"Incoming transaction\"),"
      },
      {
        "sha": "8af6eda867a27c588464a012835bf93e2d912e02",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -9,6 +9,8 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"amount.h\"\n+\n #include <QLabel>\n #include <QMainWindow>\n #include <QMap>\n@@ -159,7 +161,7 @@ public slots:\n     bool handlePaymentRequest(const SendCoinsRecipient& recipient);\n \n     /** Show incoming transaction notification for new transactions. */\n-    void incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address);\n+    void incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address);\n #endif\n \n private slots:"
      },
      {
        "sha": "423b559bf7d962033973aa1b97a45b7022d569cf",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -91,12 +91,13 @@ int BitcoinUnits::decimals(int unit)\n     }\n }\n \n-QString BitcoinUnits::format(int unit, qint64 n, bool fPlus, SeparatorStyle separators)\n+QString BitcoinUnits::format(int unit, const CAmount& nIn, bool fPlus, SeparatorStyle separators)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n     if(!valid(unit))\n         return QString(); // Refuse to format invalid unit\n+    qint64 n = (qint64)nIn;\n     qint64 coin = factor(unit);\n     int num_decimals = decimals(unit);\n     qint64 n_abs = (n > 0 ? n : -n);\n@@ -138,20 +139,20 @@ QString BitcoinUnits::format(int unit, qint64 n, bool fPlus, SeparatorStyle sepa\n // Please take care to use formatHtmlWithUnit instead, when\n // appropriate.\n \n-QString BitcoinUnits::formatWithUnit(int unit, qint64 amount, bool plussign, SeparatorStyle separators)\n+QString BitcoinUnits::formatWithUnit(int unit, const CAmount& amount, bool plussign, SeparatorStyle separators)\n {\n     return format(unit, amount, plussign, separators) + QString(\" \") + name(unit);\n }\n \n-QString BitcoinUnits::formatHtmlWithUnit(int unit, qint64 amount, bool plussign, SeparatorStyle separators)\n+QString BitcoinUnits::formatHtmlWithUnit(int unit, const CAmount& amount, bool plussign, SeparatorStyle separators)\n {\n     QString str(formatWithUnit(unit, amount, plussign, separators));\n     str.replace(QChar(THIN_SP_CP), QString(THIN_SP_HTML));\n     return QString(\"<span style='white-space: nowrap;'>%1</span>\").arg(str);\n }\n \n \n-bool BitcoinUnits::parse(int unit, const QString &value, qint64 *val_out)\n+bool BitcoinUnits::parse(int unit, const QString &value, CAmount *val_out)\n {\n     if(!valid(unit) || value.isEmpty())\n         return false; // Refuse to parse invalid unit or empty string\n@@ -182,7 +183,7 @@ bool BitcoinUnits::parse(int unit, const QString &value, qint64 *val_out)\n     {\n         return false; // Longer numbers will exceed 63 bits\n     }\n-    qint64 retvalue = str.toLongLong(&ok);\n+    CAmount retvalue(str.toLongLong(&ok));\n     if(val_out)\n     {\n         *val_out = retvalue;\n@@ -226,7 +227,7 @@ QVariant BitcoinUnits::data(const QModelIndex &index, int role) const\n     return QVariant();\n }\n \n-qint64 BitcoinUnits::maxMoney()\n+CAmount BitcoinUnits::maxMoney()\n {\n     return MAX_MONEY;\n }"
      },
      {
        "sha": "a392c42b9b56a94d08c4c7b6174e293784ca02cc",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOINUNITS_H\n #define BITCOINUNITS_H\n \n+#include \"amount.h\"\n+\n #include <QAbstractListModel>\n #include <QString>\n \n@@ -85,12 +87,12 @@ class BitcoinUnits: public QAbstractListModel\n     //! Number of decimals left\n     static int decimals(int unit);\n     //! Format as string\n-    static QString format(int unit, qint64 amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n+    static QString format(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n     //! Format as string (with unit)\n-    static QString formatWithUnit(int unit, qint64 amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n-    static QString formatHtmlWithUnit(int unit, qint64 amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n+    static QString formatWithUnit(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n+    static QString formatHtmlWithUnit(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n     //! Parse string to coin amount\n-    static bool parse(int unit, const QString &value, qint64 *val_out);\n+    static bool parse(int unit, const QString &value, CAmount *val_out);\n     //! Gets title for amount column including current display unit if optionsModel reference available */\n     static QString getAmountColumnTitle(int unit);\n     ///@}\n@@ -117,7 +119,7 @@ class BitcoinUnits: public QAbstractListModel\n     }\n \n     //! Return maximum number of base units (Satoshis)\n-    static qint64 maxMoney();\n+    static CAmount maxMoney();\n \n private:\n     QList<BitcoinUnits::Unit> unitlist;"
      },
      {
        "sha": "ba0febe546d9c35ce8a7a050b16679931561cd0c",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -29,7 +29,7 @@\n #include <QTreeWidgetItem>\n \n using namespace std;\n-QList<qint64> CoinControlDialog::payAmounts;\n+QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n \n CoinControlDialog::CoinControlDialog(QWidget *parent) :\n@@ -443,10 +443,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         return;\n \n     // nPayAmount\n-    qint64 nPayAmount = 0;\n+    CAmount nPayAmount = 0;\n     bool fDust = false;\n     CMutableTransaction txDummy;\n-    foreach(const qint64 &amount, CoinControlDialog::payAmounts)\n+    foreach(const CAmount &amount, CoinControlDialog::payAmounts)\n     {\n         nPayAmount += amount;\n \n@@ -460,10 +460,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     }\n \n     QString sPriorityLabel      = tr(\"none\");\n-    int64_t nAmount             = 0;\n-    int64_t nPayFee             = 0;\n-    int64_t nAfterFee           = 0;\n-    int64_t nChange             = 0;\n+    CAmount nAmount             = 0;\n+    CAmount nPayFee             = 0;\n+    CAmount nAfterFee           = 0;\n+    CAmount nChange             = 0;\n     unsigned int nBytes         = 0;\n     unsigned int nBytesInputs   = 0;\n     double dPriority            = 0;\n@@ -684,7 +684,7 @@ void CoinControlDialog::updateView()\n             itemWalletAddress->setText(COLUMN_ADDRESS, sWalletAddress);\n         }\n \n-        int64_t nSum = 0;\n+        CAmount nSum = 0;\n         double dPrioritySum = 0;\n         int nChildren = 0;\n         int nInputSum = 0;"
      },
      {
        "sha": "9eaa8eb41d556376d7059906147edf4fed138898",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef COINCONTROLDIALOG_H\n #define COINCONTROLDIALOG_H\n \n+#include \"amount.h\"\n+\n #include <QAbstractButton>\n #include <QAction>\n #include <QDialog>\n@@ -37,7 +39,7 @@ class CoinControlDialog : public QDialog\n     static void updateLabels(WalletModel*, QDialog*);\n     static QString getPriorityLabel(const CTxMemPool& pool, double);\n \n-    static QList<qint64> payAmounts;\n+    static QList<CAmount> payAmounts;\n     static CCoinControl *coinControl;\n \n private:"
      },
      {
        "sha": "91bb10755aa713b8b7a6962b8215a80e44cba48a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -221,7 +221,7 @@ QString formatBitcoinURI(const SendCoinsRecipient &info)\n     return ret;\n }\n \n-bool isDust(const QString& address, qint64 amount)\n+bool isDust(const QString& address, const CAmount& amount)\n {\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n     CScript script = GetScriptForDestination(dest);"
      },
      {
        "sha": "0939c78f647f1f953e706344f0bbaf31e523e43d",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef GUIUTIL_H\n #define GUIUTIL_H\n \n+#include \"amount.h\"\n+\n #include <QHeaderView>\n #include <QMessageBox>\n #include <QObject>\n@@ -46,7 +48,7 @@ namespace GUIUtil\n     QString formatBitcoinURI(const SendCoinsRecipient &info);\n \n     // Returns true if given address+amount meets \"dust\" definition\n-    bool isDust(const QString& address, qint64 amount);\n+    bool isDust(const QString& address, const CAmount& amount);\n \n     // HTML escaping for rich text controls\n     QString HtmlEscape(const QString& str, bool fMultiLine=false);"
      },
      {
        "sha": "cb80bd0e3defa5e5c50eb126f47675bd40864b56",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -275,9 +275,9 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n #ifdef ENABLE_WALLET\n         case Fee: { // core option - can be changed on-the-fly\n             // Todo: Add is valid check  and warn via message, if not\n-            qint64 nTransactionFee = value.toLongLong();\n+            CAmount nTransactionFee(value.toLongLong());\n             payTxFee = CFeeRate(nTransactionFee, 1000);\n-            settings.setValue(\"nTransactionFee\", nTransactionFee);\n+            settings.setValue(\"nTransactionFee\", qint64(nTransactionFee));\n             emit transactionFeeChanged(nTransactionFee);\n             break;\n         }"
      },
      {
        "sha": "42ea3bf8e5b3dbaa8fabee3d000cedf60b765fcf",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef OPTIONSMODEL_H\n #define OPTIONSMODEL_H\n \n+#include \"amount.h\"\n+\n #include <QAbstractListModel>\n \n QT_BEGIN_NAMESPACE\n@@ -82,7 +84,7 @@ class OptionsModel : public QAbstractListModel\n \n signals:\n     void displayUnitChanged(int unit);\n-    void transactionFeeChanged(qint64);\n+    void transactionFeeChanged(const CAmount&);\n     void coinControlFeaturesChanged(bool);\n };\n "
      },
      {
        "sha": "1d6c23f8a0f7758eaac02936afbe1031af41cad4",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -146,7 +146,7 @@ OverviewPage::~OverviewPage()\n     delete ui;\n }\n \n-void OverviewPage::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance, qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance)\n+void OverviewPage::setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance, const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance)\n {\n     int unit = walletModel->getOptionsModel()->getDisplayUnit();\n     currentBalance = balance;\n@@ -220,7 +220,7 @@ void OverviewPage::setWalletModel(WalletModel *model)\n         // Keep up to date with wallet\n         setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance(),\n                    model->getWatchBalance(), model->getWatchUnconfirmedBalance(), model->getWatchImmatureBalance());\n-        connect(model, SIGNAL(balanceChanged(qint64, qint64, qint64, qint64, qint64, qint64)), this, SLOT(setBalance(qint64, qint64, qint64, qint64, qint64, qint64)));\n+        connect(model, SIGNAL(balanceChanged(const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&)), this, SLOT(setBalance(const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&)));\n \n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n "
      },
      {
        "sha": "03f239008f3625909fb9ce255f11e7f6dc21f4c1",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef OVERVIEWPAGE_H\n #define OVERVIEWPAGE_H\n \n+#include \"amount.h\"\n+\n #include <QWidget>\n \n class ClientModel;\n@@ -34,8 +36,8 @@ class OverviewPage : public QWidget\n     void showOutOfSyncWarning(bool fShow);\n \n public slots:\n-    void setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance,\n-                    qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance);\n+    void setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n+                    const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n signals:\n     void transactionClicked(const QModelIndex &index);\n@@ -44,12 +46,12 @@ public slots:\n     Ui::OverviewPage *ui;\n     ClientModel *clientModel;\n     WalletModel *walletModel;\n-    qint64 currentBalance;\n-    qint64 currentUnconfirmedBalance;\n-    qint64 currentImmatureBalance;\n-    qint64 currentWatchOnlyBalance;\n-    qint64 currentWatchUnconfBalance;\n-    qint64 currentWatchImmatureBalance;\n+    CAmount currentBalance;\n+    CAmount currentUnconfirmedBalance;\n+    CAmount currentImmatureBalance;\n+    CAmount currentWatchOnlyBalance;\n+    CAmount currentWatchUnconfBalance;\n+    CAmount currentWatchImmatureBalance;\n \n     TxViewDelegate *txdelegate;\n     TransactionFilterProxy *filter;"
      },
      {
        "sha": "7aefffe24afb4c33106bcafd988abe00f9dfbfa9",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -196,9 +196,9 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     return fResult;\n }\n \n-QList<std::pair<CScript,qint64> > PaymentRequestPlus::getPayTo() const\n+QList<std::pair<CScript,CAmount> > PaymentRequestPlus::getPayTo() const\n {\n-    QList<std::pair<CScript,qint64> > result;\n+    QList<std::pair<CScript,CAmount> > result;\n     for (int i = 0; i < details.outputs_size(); i++)\n     {\n         const unsigned char* scriptStr = (const unsigned char*)details.outputs(i).script().data();"
      },
      {
        "sha": "3d94d93269d0e8db9c5aeda1b4603a576ad396ab",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -33,7 +33,7 @@ class PaymentRequestPlus\n     bool getMerchant(X509_STORE* certStore, QString& merchant) const;\n \n     // Returns list of outputs, amount\n-    QList<std::pair<CScript,qint64> > getPayTo() const;\n+    QList<std::pair<CScript,CAmount> > getPayTo() const;\n \n     const payments::PaymentDetails& getDetails() const { return details; }\n "
      },
      {
        "sha": "707de55290acf9cead90a5cd906594baeeb6832b",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -532,10 +532,10 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n \n     request.getMerchant(PaymentServer::certStore, recipient.authenticatedMerchant);\n \n-    QList<std::pair<CScript, qint64> > sendingTos = request.getPayTo();\n+    QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    foreach(const PAIRTYPE(CScript, qint64)& sendingTo, sendingTos) {\n+    foreach(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {"
      },
      {
        "sha": "d67cac57b462cc21a54c5f83aba475bd520d3663",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -92,7 +92,7 @@ void SendCoinsDialog::setModel(WalletModel *model)\n \n         setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance(),\n                    model->getWatchBalance(), model->getWatchUnconfirmedBalance(), model->getWatchImmatureBalance());\n-        connect(model, SIGNAL(balanceChanged(qint64, qint64, qint64, qint64, qint64, qint64)), this, SLOT(setBalance(qint64, qint64, qint64, qint64, qint64, qint64)));\n+        connect(model, SIGNAL(balanceChanged(const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&)), this, SLOT(setBalance(const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&)));\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n \n         // Coin Control\n@@ -203,7 +203,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         return;\n     }\n \n-    qint64 txFee = currentTransaction.getTransactionFee();\n+    CAmount txFee = currentTransaction.getTransactionFee();\n     QString questionString = tr(\"Are you sure you want to send?\");\n     questionString.append(\"<br /><br />%1\");\n \n@@ -218,7 +218,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     // add total amount in all subdivision units\n     questionString.append(\"<hr />\");\n-    qint64 totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n+    CAmount totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n     QStringList alternativeUnits;\n     foreach(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n     {\n@@ -384,8 +384,8 @@ bool SendCoinsDialog::handlePaymentRequest(const SendCoinsRecipient &rv)\n     return true;\n }\n \n-void SendCoinsDialog::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance, \n-                                 qint64 watchBalance, qint64 watchUnconfirmedBalance, qint64 watchImmatureBalance)\n+void SendCoinsDialog::setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance, \n+                                 const CAmount& watchBalance, const CAmount& watchUnconfirmedBalance, const CAmount& watchImmatureBalance)\n {\n     Q_UNUSED(unconfirmedBalance);\n     Q_UNUSED(immatureBalance);"
      },
      {
        "sha": "74cc4bde56e2fc87bff1eec041a44b9e2b390eac",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -47,8 +47,8 @@ public slots:\n     void accept();\n     SendCoinsEntry *addEntry();\n     void updateTabsAndLabels();\n-    void setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance,\n-                    qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance);\n+    void setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n+                    const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n private:\n     Ui::SendCoinsDialog *ui;"
      },
      {
        "sha": "1efad8259bb6dd74d659861dd9cd3785b57e43ad",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -56,9 +56,9 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<html><font face='verdana, arial, helvetica, sans-serif'>\";\n \n     int64_t nTime = wtx.GetTxTime();\n-    int64_t nCredit = wtx.GetCredit(ISMINE_ALL);\n-    int64_t nDebit = wtx.GetDebit(ISMINE_ALL);\n-    int64_t nNet = nCredit - nDebit;\n+    CAmount nCredit = wtx.GetCredit(ISMINE_ALL);\n+    CAmount nDebit = wtx.GetDebit(ISMINE_ALL);\n+    CAmount nNet = nCredit - nDebit;\n \n     strHTML += \"<b>\" + tr(\"Status\") + \":</b> \" + FormatTxStatus(wtx);\n     int nRequests = wtx.GetRequestCount();\n@@ -132,7 +132,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         //\n         // Coinbase\n         //\n-        int64_t nUnmatured = 0;\n+        CAmount nUnmatured = 0;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n             nUnmatured += wallet->GetCredit(txout, ISMINE_ALL);\n         strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n@@ -206,13 +206,13 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             if (fAllToMe)\n             {\n                 // Payment to self\n-                int64_t nChange = wtx.GetChange();\n-                int64_t nValue = nCredit - nChange;\n+                CAmount nChange = wtx.GetChange();\n+                CAmount nValue = nCredit - nChange;\n                 strHTML += \"<b>\" + tr(\"Total debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -nValue) + \"<br>\";\n                 strHTML += \"<b>\" + tr(\"Total credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, nValue) + \"<br>\";\n             }\n \n-            int64_t nTxFee = nDebit - wtx.GetValueOut();\n+            CAmount nTxFee = nDebit - wtx.GetValueOut();\n             if (nTxFee > 0)\n                 strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -nTxFee) + \"<br>\";\n         }"
      },
      {
        "sha": "2a0f621d1e3a8646a2a566c598f3c4172d0f5cbf",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -78,7 +78,7 @@ void TransactionFilterProxy::setTypeFilter(quint32 modes)\n     invalidateFilter();\n }\n \n-void TransactionFilterProxy::setMinAmount(qint64 minimum)\n+void TransactionFilterProxy::setMinAmount(const CAmount& minimum)\n {\n     this->minAmount = minimum;\n     invalidateFilter();"
      },
      {
        "sha": "ca31ee8f87202ea3cef45daf85354a0a86d13c30",
        "filename": "src/qt/transactionfilterproxy.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionfilterproxy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionfilterproxy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef TRANSACTIONFILTERPROXY_H\n #define TRANSACTIONFILTERPROXY_H\n \n+#include \"amount.h\"\n+\n #include <QDateTime>\n #include <QSortFilterProxyModel>\n \n@@ -38,7 +40,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n       @note Type filter takes a bit field created with TYPE() or ALL_TYPES\n      */\n     void setTypeFilter(quint32 modes);\n-    void setMinAmount(qint64 minimum);\n+    void setMinAmount(const CAmount& minimum);\n     void setWatchOnlyFilter(WatchOnlyFilter filter);\n \n     /** Set maximum number of rows returned, -1 if unlimited. */\n@@ -58,7 +60,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n     QString addrPrefix;\n     quint32 typeFilter;\n     WatchOnlyFilter watchOnlyFilter;\n-    qint64 minAmount;\n+    CAmount minAmount;\n     int limitRows;\n     bool showInactive;\n };"
      },
      {
        "sha": "afb343f349ea33bc7e89de3361e43001b88f2658",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -32,9 +32,9 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n {\n     QList<TransactionRecord> parts;\n     int64_t nTime = wtx.GetTxTime();\n-    int64_t nCredit = wtx.GetCredit(true);\n-    int64_t nDebit = wtx.GetDebit(ISMINE_ALL);\n-    int64_t nNet = nCredit - nDebit;\n+    CAmount nCredit = wtx.GetCredit(true);\n+    CAmount nDebit = wtx.GetDebit(ISMINE_ALL);\n+    CAmount nNet = nCredit - nDebit;\n     uint256 hash = wtx.GetHash();\n     std::map<std::string, std::string> mapValue = wtx.mapValue;\n \n@@ -97,7 +97,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         if (fAllFromMe && fAllToMe)\n         {\n             // Payment to self\n-            int64_t nChange = wtx.GetChange();\n+            CAmount nChange = wtx.GetChange();\n \n             parts.append(TransactionRecord(hash, nTime, TransactionRecord::SendToSelf, \"\",\n                             -(nDebit - nChange), nCredit - nChange));\n@@ -108,7 +108,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             //\n             // Debit\n             //\n-            int64_t nTxFee = nDebit - wtx.GetValueOut();\n+            CAmount nTxFee = nDebit - wtx.GetValueOut();\n \n             for (unsigned int nOut = 0; nOut < wtx.vout.size(); nOut++)\n             {\n@@ -138,7 +138,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                     sub.address = mapValue[\"to\"];\n                 }\n \n-                int64_t nValue = txout.nValue;\n+                CAmount nValue = txout.nValue;\n                 /* Add fee to first output */\n                 if (nTxFee > 0)\n                 {"
      },
      {
        "sha": "9276c9f0afcf35677c9a5efb9da958ebec7391d2",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef TRANSACTIONRECORD_H\n #define TRANSACTIONRECORD_H\n \n+#include \"amount.h\"\n #include \"uint256.h\"\n \n #include <QList>\n@@ -94,7 +95,7 @@ class TransactionRecord\n \n     TransactionRecord(uint256 hash, qint64 time,\n                 Type type, const std::string &address,\n-                qint64 debit, qint64 credit):\n+                const CAmount& debit, const CAmount& credit):\n             hash(hash), time(time), type(type), address(address), debit(debit), credit(credit),\n             idx(0)\n     {\n@@ -111,8 +112,8 @@ class TransactionRecord\n     qint64 time;\n     Type type;\n     std::string address;\n-    qint64 debit;\n-    qint64 credit;\n+    CAmount debit;\n+    CAmount credit;\n     /**@}*/\n \n     /** Subtransaction index, for sort key */"
      },
      {
        "sha": "e34d776818680170636e017337084b4d8fe0208c",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -546,7 +546,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n         case ToAddress:\n             return formatTxToAddress(rec, true);\n         case Amount:\n-            return rec->credit + rec->debit;\n+            return qint64(rec->credit + rec->debit);\n         }\n         break;\n     case Qt::ToolTipRole:\n@@ -583,7 +583,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case LabelRole:\n         return walletModel->getAddressTableModel()->labelForAddress(QString::fromStdString(rec->address));\n     case AmountRole:\n-        return rec->credit + rec->debit;\n+        return qint64(rec->credit + rec->debit);\n     case TxIDRole:\n         return rec->getTxID();\n     case TxHashRole:"
      },
      {
        "sha": "d15397387218f98ed0385b2789afca95b73bbed5",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -304,7 +304,7 @@ void TransactionView::changedAmount(const QString &amount)\n {\n     if(!transactionProxyModel)\n         return;\n-    qint64 amount_parsed = 0;\n+    CAmount amount_parsed = 0;\n     if(BitcoinUnits::parse(model->getOptionsModel()->getDisplayUnit(), amount, &amount_parsed))\n     {\n         transactionProxyModel->setMinAmount(amount_parsed);"
      },
      {
        "sha": "b8701a23a651d4156e610ce287d421d111991edd",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -55,11 +55,11 @@ WalletModel::~WalletModel()\n     unsubscribeFromCoreSignals();\n }\n \n-qint64 WalletModel::getBalance(const CCoinControl *coinControl) const\n+CAmount WalletModel::getBalance(const CCoinControl *coinControl) const\n {\n     if (coinControl)\n     {\n-        qint64 nBalance = 0;\n+        CAmount nBalance = 0;\n         std::vector<COutput> vCoins;\n         wallet->AvailableCoins(vCoins, true, coinControl);\n         BOOST_FOREACH(const COutput& out, vCoins)\n@@ -72,12 +72,12 @@ qint64 WalletModel::getBalance(const CCoinControl *coinControl) const\n     return wallet->GetBalance();\n }\n \n-qint64 WalletModel::getUnconfirmedBalance() const\n+CAmount WalletModel::getUnconfirmedBalance() const\n {\n     return wallet->GetUnconfirmedBalance();\n }\n \n-qint64 WalletModel::getImmatureBalance() const\n+CAmount WalletModel::getImmatureBalance() const\n {\n     return wallet->GetImmatureBalance();\n }\n@@ -87,17 +87,17 @@ bool WalletModel::haveWatchOnly() const\n     return fHaveWatchOnly;\n }\n \n-qint64 WalletModel::getWatchBalance() const\n+CAmount WalletModel::getWatchBalance() const\n {\n     return wallet->GetWatchOnlyBalance();\n }\n \n-qint64 WalletModel::getWatchUnconfirmedBalance() const\n+CAmount WalletModel::getWatchUnconfirmedBalance() const\n {\n     return wallet->GetUnconfirmedWatchOnlyBalance();\n }\n \n-qint64 WalletModel::getWatchImmatureBalance() const\n+CAmount WalletModel::getWatchImmatureBalance() const\n {\n     return wallet->GetImmatureWatchOnlyBalance();\n }\n@@ -137,12 +137,12 @@ void WalletModel::pollBalanceChanged()\n \n void WalletModel::checkBalanceChanged()\n {\n-    qint64 newBalance = getBalance();\n-    qint64 newUnconfirmedBalance = getUnconfirmedBalance();\n-    qint64 newImmatureBalance = getImmatureBalance();\n-    qint64 newWatchOnlyBalance = 0;\n-    qint64 newWatchUnconfBalance = 0;\n-    qint64 newWatchImmatureBalance = 0;\n+    CAmount newBalance = getBalance();\n+    CAmount newUnconfirmedBalance = getUnconfirmedBalance();\n+    CAmount newImmatureBalance = getImmatureBalance();\n+    CAmount newWatchOnlyBalance = 0;\n+    CAmount newWatchUnconfBalance = 0;\n+    CAmount newWatchImmatureBalance = 0;\n     if (haveWatchOnly())\n     {\n         newWatchOnlyBalance = getWatchBalance();\n@@ -194,9 +194,9 @@ bool WalletModel::validateAddress(const QString &address)\n \n WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl *coinControl)\n {\n-    qint64 total = 0;\n+    CAmount total = 0;\n     QList<SendCoinsRecipient> recipients = transaction.getRecipients();\n-    std::vector<std::pair<CScript, int64_t> > vecSend;\n+    std::vector<std::pair<CScript, CAmount> > vecSend;\n \n     if(recipients.empty())\n     {\n@@ -211,7 +211,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     {\n         if (rcp.paymentRequest.IsInitialized())\n         {   // PaymentRequest...\n-            int64_t subtotal = 0;\n+            CAmount subtotal = 0;\n             const payments::PaymentDetails& details = rcp.paymentRequest.getDetails();\n             for (int i = 0; i < details.outputs_size(); i++)\n             {\n@@ -220,7 +220,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n                 subtotal += out.amount();\n                 const unsigned char* scriptStr = (const unsigned char*)out.script().data();\n                 CScript scriptPubKey(scriptStr, scriptStr+out.script().size());\n-                vecSend.push_back(std::pair<CScript, int64_t>(scriptPubKey, out.amount()));\n+                vecSend.push_back(std::pair<CScript, CAmount>(scriptPubKey, out.amount()));\n             }\n             if (subtotal <= 0)\n             {\n@@ -242,7 +242,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             ++nAddresses;\n \n             CScript scriptPubKey = GetScriptForDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n-            vecSend.push_back(std::pair<CScript, int64_t>(scriptPubKey, rcp.amount));\n+            vecSend.push_back(std::pair<CScript, CAmount>(scriptPubKey, rcp.amount));\n \n             total += rcp.amount;\n         }\n@@ -252,7 +252,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         return DuplicateAddress;\n     }\n \n-    qint64 nBalance = getBalance(coinControl);\n+    CAmount nBalance = getBalance(coinControl);\n \n     if(total > nBalance)\n     {\n@@ -263,7 +263,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         LOCK2(cs_main, wallet->cs_wallet);\n \n         transaction.newPossibleKeyChange(wallet);\n-        int64_t nFeeRequired = 0;\n+        CAmount nFeeRequired = 0;\n         std::string strFailReason;\n \n         CWalletTx *newTx = transaction.getTransaction();"
      },
      {
        "sha": "b1d0f28f127f97696fddd42f499314c7bce21f01",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -37,7 +37,7 @@ class SendCoinsRecipient\n {\n public:\n     explicit SendCoinsRecipient() : amount(0), nVersion(SendCoinsRecipient::CURRENT_VERSION) { }\n-    explicit SendCoinsRecipient(const QString &addr, const QString &label, quint64 amount, const QString &message):\n+    explicit SendCoinsRecipient(const QString &addr, const QString &label, const CAmount& amount, const QString &message):\n         address(addr), label(label), amount(amount), message(message), nVersion(SendCoinsRecipient::CURRENT_VERSION) {}\n \n     // If from an insecure payment request, this is used for storing\n@@ -47,7 +47,7 @@ class SendCoinsRecipient\n     // Todo: This is a hack, should be replaced with a cleaner solution!\n     QString address;\n     QString label;\n-    qint64 amount;\n+    CAmount amount;\n     // If from a payment request, this is used for storing the memo\n     QString message;\n \n@@ -125,13 +125,13 @@ class WalletModel : public QObject\n     TransactionTableModel *getTransactionTableModel();\n     RecentRequestsTableModel *getRecentRequestsTableModel();\n \n-    qint64 getBalance(const CCoinControl *coinControl = NULL) const;\n-    qint64 getUnconfirmedBalance() const;\n-    qint64 getImmatureBalance() const;\n+    CAmount getBalance(const CCoinControl *coinControl = NULL) const;\n+    CAmount getUnconfirmedBalance() const;\n+    CAmount getImmatureBalance() const;\n     bool haveWatchOnly() const;\n-    qint64 getWatchBalance() const;\n-    qint64 getWatchUnconfirmedBalance() const;\n-    qint64 getWatchImmatureBalance() const;\n+    CAmount getWatchBalance() const;\n+    CAmount getWatchUnconfirmedBalance() const;\n+    CAmount getWatchImmatureBalance() const;\n     EncryptionStatus getEncryptionStatus() const;\n     bool processingQueuedTransactions() { return fProcessingQueuedTransactions; }\n \n@@ -210,12 +210,12 @@ class WalletModel : public QObject\n     RecentRequestsTableModel *recentRequestsTableModel;\n \n     // Cache some values to be able to detect changes\n-    qint64 cachedBalance;\n-    qint64 cachedUnconfirmedBalance;\n-    qint64 cachedImmatureBalance;\n-    qint64 cachedWatchOnlyBalance;\n-    qint64 cachedWatchUnconfBalance;\n-    qint64 cachedWatchImmatureBalance;\n+    CAmount cachedBalance;\n+    CAmount cachedUnconfirmedBalance;\n+    CAmount cachedImmatureBalance;\n+    CAmount cachedWatchOnlyBalance;\n+    CAmount cachedWatchUnconfBalance;\n+    CAmount cachedWatchImmatureBalance;\n     EncryptionStatus cachedEncryptionStatus;\n     int cachedNumBlocks;\n \n@@ -227,8 +227,8 @@ class WalletModel : public QObject\n \n signals:\n     // Signal that balance in wallet changed\n-    void balanceChanged(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance,\n-                        qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance);\n+    void balanceChanged(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n+                        const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n     // Encryption status of wallet changed\n     void encryptionStatusChanged(int status);"
      },
      {
        "sha": "ddd2d09bb53498bd43ed515b155a2e16cd31559f",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -31,19 +31,19 @@ CWalletTx *WalletModelTransaction::getTransaction()\n     return walletTransaction;\n }\n \n-qint64 WalletModelTransaction::getTransactionFee()\n+CAmount WalletModelTransaction::getTransactionFee()\n {\n     return fee;\n }\n \n-void WalletModelTransaction::setTransactionFee(qint64 newFee)\n+void WalletModelTransaction::setTransactionFee(const CAmount& newFee)\n {\n     fee = newFee;\n }\n \n-qint64 WalletModelTransaction::getTotalTransactionAmount()\n+CAmount WalletModelTransaction::getTotalTransactionAmount()\n {\n-    qint64 totalTransactionAmount = 0;\n+    CAmount totalTransactionAmount = 0;\n     foreach(const SendCoinsRecipient &rcp, recipients)\n     {\n         totalTransactionAmount += rcp.amount;"
      },
      {
        "sha": "4eadfbe4d19ffeabe1754e7b23da0b7874c6e356",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -26,10 +26,10 @@ class WalletModelTransaction\n \n     CWalletTx *getTransaction();\n \n-    void setTransactionFee(qint64 newFee);\n-    qint64 getTransactionFee();\n+    void setTransactionFee(const CAmount& newFee);\n+    CAmount getTransactionFee();\n \n-    qint64 getTotalTransactionAmount();\n+    CAmount getTotalTransactionAmount();\n \n     void newPossibleKeyChange(CWallet *wallet);\n     CReserveKey *getPossibleKeyChange();\n@@ -38,7 +38,7 @@ class WalletModelTransaction\n     const QList<SendCoinsRecipient> recipients;\n     CWalletTx *walletTransaction;\n     CReserveKey *keyChange;\n-    qint64 fee;\n+    CAmount fee;\n };\n \n #endif // WALLETMODELTRANSACTION_H"
      },
      {
        "sha": "322d0a6ee60676273de8547c8dd1fbd0c52e429c",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -92,7 +92,7 @@ void WalletView::setBitcoinGUI(BitcoinGUI *gui)\n         connect(this, SIGNAL(encryptionStatusChanged(int)), gui, SLOT(setEncryptionStatus(int)));\n \n         // Pass through transaction notifications\n-        connect(this, SIGNAL(incomingTransaction(QString,int,qint64,QString,QString)), gui, SLOT(incomingTransaction(QString,int,qint64,QString,QString)));\n+        connect(this, SIGNAL(incomingTransaction(QString,int,const CAmount&,QString,QString)), gui, SLOT(incomingTransaction(QString,int,const CAmount&,QString,QString)));\n     }\n }\n "
      },
      {
        "sha": "cafba517fdf937832b4d82e922420591ecfd84ae",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef WALLETVIEW_H\n #define WALLETVIEW_H\n \n+#include \"amount.h\"\n+\n #include <QStackedWidget>\n \n class BitcoinGUI;\n@@ -111,7 +113,7 @@ public slots:\n     /** Encryption status of wallet changed */\n     void encryptionStatusChanged(int status);\n     /** Notify that a new transaction appeared */\n-    void incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address);\n+    void incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address);\n };\n \n #endif // WALLETVIEW_H"
      },
      {
        "sha": "e794bf69e0028bee2e94d9fe380167d7d903dd19",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -273,7 +273,7 @@ Value prioritisetransaction(const Array& params, bool fHelp)\n     uint256 hash;\n     hash.SetHex(params[0].get_str());\n \n-    int64_t nAmount = 0;\n+    CAmount nAmount = 0;\n     if (params[2].get_real() != 0.0)\n         nAmount = AmountFromValue(params[2]);\n "
      },
      {
        "sha": "bd87d77704ca547049b5465abf8f44b931efdbc8",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -269,7 +269,7 @@ Value listunspent(const Array& params, bool fHelp)\n                 continue;\n         }\n \n-        int64_t nValue = out.tx->vout[out.i].nValue;\n+        CAmount nValue = out.tx->vout[out.i].nValue;\n         const CScript& pk = out.tx->vout[out.i].scriptPubKey;\n         Object entry;\n         entry.push_back(Pair(\"txid\", out.tx->GetHash().GetHex()));\n@@ -367,7 +367,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n         setAddress.insert(address);\n \n         CScript scriptPubKey = GetScriptForDestination(address.Get());\n-        int64_t nAmount = AmountFromValue(s.value_);\n+        CAmount nAmount = AmountFromValue(s.value_);\n \n         CTxOut out(nAmount, scriptPubKey);\n         rawTx.vout.push_back(out);"
      },
      {
        "sha": "1a41344da53acf14d4c3d980d15ba71e57ec87ff",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -88,18 +88,18 @@ static inline int64_t roundint64(double d)\n     return (int64_t)(d > 0 ? d + 0.5 : d - 0.5);\n }\n \n-int64_t AmountFromValue(const Value& value)\n+CAmount AmountFromValue(const Value& value)\n {\n     double dAmount = value.get_real();\n     if (dAmount <= 0.0 || dAmount > 21000000.0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n-    int64_t nAmount = roundint64(dAmount * COIN);\n+    CAmount nAmount = roundint64(dAmount * COIN);\n     if (!MoneyRange(nAmount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n     return nAmount;\n }\n \n-Value ValueFromAmount(int64_t amount)\n+Value ValueFromAmount(const CAmount& amount)\n {\n     return (double)amount / (double)COIN;\n }"
      },
      {
        "sha": "d440035f151da6e8f90047714890d7a2f8cd95c2",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef _BITCOINRPC_SERVER_H_\n #define _BITCOINRPC_SERVER_H_\n \n+#include \"amount.h\"\n #include \"uint256.h\"\n #include \"rpcprotocol.h\"\n \n@@ -116,8 +117,8 @@ extern void InitRPCMining();\n extern void ShutdownRPCMining();\n \n extern int64_t nWalletUnlockTime;\n-extern int64_t AmountFromValue(const json_spirit::Value& value);\n-extern json_spirit::Value ValueFromAmount(int64_t amount);\n+extern CAmount AmountFromValue(const json_spirit::Value& value);\n+extern json_spirit::Value ValueFromAmount(const CAmount& amount);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);\n extern std::string HelpRequiringPassphrase();\n extern std::string HelpExampleCli(std::string methodname, std::string args);"
      },
      {
        "sha": "632c46acd591d2f6d1fb5790b20bd8b94c858ae4",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 31,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -331,7 +331,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     // Amount\n-    int64_t nAmount = AmountFromValue(params[1]);\n+    CAmount nAmount = AmountFromValue(params[1]);\n \n     // Wallet comments\n     CWalletTx wtx;\n@@ -375,7 +375,7 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n         );\n \n     Array jsonGroupings;\n-    map<CTxDestination, int64_t> balances = pwalletMain->GetAddressBalances();\n+    map<CTxDestination, CAmount> balances = pwalletMain->GetAddressBalances();\n     BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n     {\n         Array jsonGrouping;\n@@ -483,7 +483,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n         nMinDepth = params[1].get_int();\n \n     // Tally\n-    int64_t nAmount = 0;\n+    CAmount nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n@@ -532,7 +532,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n \n     // Tally\n-    int64_t nAmount = 0;\n+    CAmount nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n@@ -552,9 +552,9 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n }\n \n \n-int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth, const isminefilter& filter)\n+CAmount GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth, const isminefilter& filter)\n {\n-    int64_t nBalance = 0;\n+    CAmount nBalance = 0;\n \n     // Tally wallet transactions\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n@@ -563,7 +563,7 @@ int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n         if (!IsFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n             continue;\n \n-        int64_t nReceived, nSent, nFee;\n+        CAmount nReceived, nSent, nFee;\n         wtx.GetAccountAmounts(strAccount, nReceived, nSent, nFee, filter);\n \n         if (nReceived != 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n@@ -577,7 +577,7 @@ int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n     return nBalance;\n }\n \n-int64_t GetAccountBalance(const string& strAccount, int nMinDepth, const isminefilter& filter)\n+CAmount GetAccountBalance(const string& strAccount, int nMinDepth, const isminefilter& filter)\n {\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n     return GetAccountBalance(walletdb, strAccount, nMinDepth, filter);\n@@ -627,14 +627,14 @@ Value getbalance(const Array& params, bool fHelp)\n         // Calculate total balance a different way from GetBalance()\n         // (GetBalance() sums up all unspent TxOuts)\n         // getbalance and getbalance '*' 0 should return the same number\n-        int64_t nBalance = 0;\n+        CAmount nBalance = 0;\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n             if (!wtx.IsTrusted() || wtx.GetBlocksToMaturity() > 0)\n                 continue;\n \n-            int64_t allFee;\n+            CAmount allFee;\n             string strSentAccount;\n             list<COutputEntry> listReceived;\n             list<COutputEntry> listSent;\n@@ -653,7 +653,7 @@ Value getbalance(const Array& params, bool fHelp)\n \n     string strAccount = AccountFromValue(params[0]);\n \n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, filter);\n+    CAmount nBalance = GetAccountBalance(strAccount, nMinDepth, filter);\n \n     return ValueFromAmount(nBalance);\n }\n@@ -692,7 +692,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     string strFrom = AccountFromValue(params[0]);\n     string strTo = AccountFromValue(params[1]);\n-    int64_t nAmount = AmountFromValue(params[2]);\n+    CAmount nAmount = AmountFromValue(params[2]);\n     if (params.size() > 3)\n         // unused parameter, used to be nMinDepth, keep type-checking it though\n         (void)params[3].get_int();\n@@ -766,7 +766,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    int64_t nAmount = AmountFromValue(params[2]);\n+    CAmount nAmount = AmountFromValue(params[2]);\n     int nMinDepth = 1;\n     if (params.size() > 3)\n         nMinDepth = params[3].get_int();\n@@ -781,7 +781,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n+    CAmount nBalance = GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n@@ -834,9 +834,9 @@ Value sendmany(const Array& params, bool fHelp)\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n     set<CBitcoinAddress> setAddress;\n-    vector<pair<CScript, int64_t> > vecSend;\n+    vector<pair<CScript, CAmount> > vecSend;\n \n-    int64_t totalAmount = 0;\n+    CAmount totalAmount = 0;\n     BOOST_FOREACH(const Pair& s, sendTo)\n     {\n         CBitcoinAddress address(s.name_);\n@@ -848,7 +848,7 @@ Value sendmany(const Array& params, bool fHelp)\n         setAddress.insert(address);\n \n         CScript scriptPubKey = GetScriptForDestination(address.Get());\n-        int64_t nAmount = AmountFromValue(s.value_);\n+        CAmount nAmount = AmountFromValue(s.value_);\n         totalAmount += nAmount;\n \n         vecSend.push_back(make_pair(scriptPubKey, nAmount));\n@@ -857,13 +857,13 @@ Value sendmany(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n+    CAmount nBalance = GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n     CReserveKey keyChange(pwalletMain);\n-    int64_t nFeeRequired = 0;\n+    CAmount nFeeRequired = 0;\n     string strFailReason;\n     bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, strFailReason);\n     if (!fCreated)\n@@ -923,7 +923,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n \n struct tallyitem\n {\n-    int64_t nAmount;\n+    CAmount nAmount;\n     int nConf;\n     vector<uint256> txids;\n     bool fIsWatchonly;\n@@ -995,7 +995,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         if (it == mapTally.end() && !fIncludeEmpty)\n             continue;\n \n-        int64_t nAmount = 0;\n+        CAmount nAmount = 0;\n         int nConf = std::numeric_limits<int>::max();\n         bool fIsWatchonly = false;\n         if (it != mapTally.end())\n@@ -1038,7 +1038,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     {\n         for (map<string, tallyitem>::iterator it = mapAccountTally.begin(); it != mapAccountTally.end(); ++it)\n         {\n-            int64_t nAmount = (*it).second.nAmount;\n+            CAmount nAmount = (*it).second.nAmount;\n             int nConf = (*it).second.nConf;\n             Object obj;\n             if((*it).second.fIsWatchonly)\n@@ -1125,7 +1125,7 @@ static void MaybePushAddress(Object & entry, const CTxDestination &dest)\n \n void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret, const isminefilter& filter)\n {\n-    int64_t nFee;\n+    CAmount nFee;\n     string strSentAccount;\n     list<COutputEntry> listReceived;\n     list<COutputEntry> listSent;\n@@ -1355,7 +1355,7 @@ Value listaccounts(const Array& params, bool fHelp)\n         if(params[1].get_bool())\n             includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n \n-    map<string, int64_t> mapAccountBalances;\n+    map<string, CAmount> mapAccountBalances;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n         if (IsMine(*pwalletMain, entry.first) & includeWatchonly) // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n@@ -1364,7 +1364,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        int64_t nFee;\n+        CAmount nFee;\n         string strSentAccount;\n         list<COutputEntry> listReceived;\n         list<COutputEntry> listSent;\n@@ -1391,7 +1391,7 @@ Value listaccounts(const Array& params, bool fHelp)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     Object ret;\n-    BOOST_FOREACH(const PAIRTYPE(string, int64_t)& accountBalance, mapAccountBalances) {\n+    BOOST_FOREACH(const PAIRTYPE(string, CAmount)& accountBalance, mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n     return ret;\n@@ -1534,10 +1534,10 @@ Value gettransaction(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n-    int64_t nCredit = wtx.GetCredit(filter != 0);\n-    int64_t nDebit = wtx.GetDebit(filter);\n-    int64_t nNet = nCredit - nDebit;\n-    int64_t nFee = (wtx.IsFromMe(filter) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nCredit = wtx.GetCredit(filter != 0);\n+    CAmount nDebit = wtx.GetDebit(filter);\n+    CAmount nNet = nCredit - nDebit;\n+    CAmount nFee = (wtx.IsFromMe(filter) ? wtx.GetValueOut() - nDebit : 0);\n \n     entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n     if (wtx.IsFromMe(filter))\n@@ -1937,7 +1937,7 @@ Value settxfee(const Array& params, bool fHelp)\n         );\n \n     // Amount\n-    int64_t nAmount = 0;\n+    CAmount nAmount = 0;\n     if (params[0].get_real() != 0.0)\n         nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n "
      },
      {
        "sha": "af2a9a214f0cef37d3db7bf59bf36638ec13a788",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -15,7 +15,7 @@ extern CWallet* pwalletMain;\n BOOST_AUTO_TEST_SUITE(accounting_tests)\n \n static void\n-GetResults(CWalletDB& walletdb, std::map<int64_t, CAccountingEntry>& results)\n+GetResults(CWalletDB& walletdb, std::map<CAmount, CAccountingEntry>& results)\n {\n     std::list<CAccountingEntry> aes;\n \n@@ -34,7 +34,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     std::vector<CWalletTx*> vpwtx;\n     CWalletTx wtx;\n     CAccountingEntry ae;\n-    std::map<int64_t, CAccountingEntry> results;\n+    std::map<CAmount, CAccountingEntry> results;\n \n     LOCK(pwalletMain->cs_wallet);\n "
      },
      {
        "sha": "70a800af51b70ba57ac4f9ecab3a1764be29e9d0",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -11,9 +11,9 @@ BOOST_AUTO_TEST_SUITE(main_tests)\n \n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n-    uint64_t nSum = 0;\n+    CAmount nSum = 0;\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n-        uint64_t nSubsidy = GetBlockValue(nHeight, 0);\n+        CAmount nSubsidy = GetBlockValue(nHeight, 0);\n         BOOST_CHECK(nSubsidy <= 50 * COIN);\n         nSum += nSubsidy * 1000;\n         BOOST_CHECK(MoneyRange(nSum));"
      },
      {
        "sha": "6378bd09418e61f284a12dd92894edaa8af37f40",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -171,7 +171,7 @@ BOOST_AUTO_TEST_CASE(util_FormatMoney)\n \n BOOST_AUTO_TEST_CASE(util_ParseMoney)\n {\n-    int64_t ret = 0;\n+    CAmount ret = 0;\n     BOOST_CHECK(ParseMoney(\"0.0\", ret));\n     BOOST_CHECK_EQUAL(ret, 0);\n "
      },
      {
        "sha": "90fc470e0645f653432bd5defe46c24116df6de0",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -28,7 +28,7 @@ BOOST_AUTO_TEST_SUITE(wallet_tests)\n static CWallet wallet;\n static vector<COutput> vCoins;\n \n-static void add_coin(int64_t nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n {\n     static int nextLockTime = 0;\n     CMutableTransaction tx;\n@@ -66,7 +66,7 @@ static bool equal_sets(CoinSet a, CoinSet b)\n BOOST_AUTO_TEST_CASE(coin_selection_tests)\n {\n     CoinSet setCoinsRet, setCoinsRet2;\n-    int64_t nValueRet;\n+    CAmount nValueRet;\n \n     LOCK(wallet.cs_wallet);\n "
      },
      {
        "sha": "d5f424fabddec0599041ff8dc33031e38840a787",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -117,7 +117,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n     stats.hashBlock = GetBestBlock();\n     ss << stats.hashBlock;\n-    int64_t nTotalAmount = 0;\n+    CAmount nTotalAmount = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         try {"
      },
      {
        "sha": "d923c2204a5450ced3eb8aaefc714de4f70d26bf",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"core.h\"\n #include \"util.h\"\n+#include \"utilmoneystr.h\"\n \n #include <boost/circular_buffer.hpp>\n \n@@ -18,7 +19,7 @@ CTxMemPoolEntry::CTxMemPoolEntry():\n     nHeight = MEMPOOL_HEIGHT;\n }\n \n-CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, int64_t _nFee,\n+CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _dPriority,\n                                  unsigned int _nHeight):\n     tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority), nHeight(_nHeight)\n@@ -36,7 +37,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n double\n CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n {\n-    int64_t nValueIn = tx.GetValueOut()+nFee;\n+    CAmount nValueIn = tx.GetValueOut()+nFee;\n     double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn)/nModSize;\n     double dResult = dPriority + deltaPriority;\n     return dResult;\n@@ -601,24 +602,24 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n     return true;\n }\n \n-void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, int64_t nFeeDelta)\n+void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n {\n     {\n         LOCK(cs);\n-        std::pair<double, int64_t> &deltas = mapDeltas[hash];\n+        std::pair<double, CAmount> &deltas = mapDeltas[hash];\n         deltas.first += dPriorityDelta;\n         deltas.second += nFeeDelta;\n     }\n-    LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, nFeeDelta);\n+    LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n }\n \n-void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, int64_t &nFeeDelta)\n+void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta)\n {\n     LOCK(cs);\n-    std::map<uint256, std::pair<double, int64_t> >::iterator pos = mapDeltas.find(hash);\n+    std::map<uint256, std::pair<double, CAmount> >::iterator pos = mapDeltas.find(hash);\n     if (pos == mapDeltas.end())\n         return;\n-    const std::pair<double, int64_t> &deltas = pos->second;\n+    const std::pair<double, CAmount> &deltas = pos->second;\n     dPriorityDelta += deltas.first;\n     nFeeDelta += deltas.second;\n }"
      },
      {
        "sha": "c35ea52d4e0020a7b88618d57e78c49f60acaa83",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -29,22 +29,22 @@ class CTxMemPoolEntry\n {\n private:\n     CTransaction tx;\n-    int64_t nFee; // Cached to avoid expensive parent-transaction lookups\n+    CAmount nFee; // Cached to avoid expensive parent-transaction lookups\n     size_t nTxSize; // ... and avoid recomputing tx size\n     size_t nModSize; // ... and modified size for priority\n     int64_t nTime; // Local time when entering the mempool\n     double dPriority; // Priority when entering the mempool\n     unsigned int nHeight; // Chain height when entering the mempool\n \n public:\n-    CTxMemPoolEntry(const CTransaction& _tx, int64_t _nFee,\n+    CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _dPriority, unsigned int _nHeight);\n     CTxMemPoolEntry();\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n     double GetPriority(unsigned int currentHeight) const;\n-    int64_t GetFee() const { return nFee; }\n+    CAmount GetFee() const { return nFee; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n@@ -76,7 +76,7 @@ class CTxMemPool\n     mutable CCriticalSection cs;\n     std::map<uint256, CTxMemPoolEntry> mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n-    std::map<uint256, std::pair<double, int64_t> > mapDeltas;\n+    std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n \n     CTxMemPool(const CFeeRate& _minRelayFee);\n     ~CTxMemPool();\n@@ -102,8 +102,8 @@ class CTxMemPool\n     void AddTransactionsUpdated(unsigned int n);\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n-    void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, int64_t nFeeDelta);\n-    void ApplyDeltas(const uint256 hash, double &dPriorityDelta, int64_t &nFeeDelta);\n+    void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta);\n+    void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n     void ClearPrioritisation(const uint256 hash);\n \n     unsigned long size()"
      },
      {
        "sha": "fb1d3eacb575f97c4c8ad667b8c902d2bdb10cc1",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -14,6 +14,7 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"amount.h\"\n #include \"compat.h\"\n #include \"tinyformat.h\"\n #include \"utiltime.h\""
      },
      {
        "sha": "1a5635bfb8d089939d667113f58360b2f0831ff0",
        "filename": "src/utilmoneystr.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/utilmoneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/utilmoneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -10,7 +10,7 @@\n \n using namespace std;\n \n-string FormatMoney(int64_t n, bool fPlus)\n+string FormatMoney(const CAmount& n, bool fPlus)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n@@ -34,12 +34,12 @@ string FormatMoney(int64_t n, bool fPlus)\n }\n \n \n-bool ParseMoney(const string& str, int64_t& nRet)\n+bool ParseMoney(const string& str, CAmount& nRet)\n {\n     return ParseMoney(str.c_str(), nRet);\n }\n \n-bool ParseMoney(const char* pszIn, int64_t& nRet)\n+bool ParseMoney(const char* pszIn, CAmount& nRet)\n {\n     string strWhole;\n     int64_t nUnits = 0;\n@@ -73,7 +73,7 @@ bool ParseMoney(const char* pszIn, int64_t& nRet)\n     if (nUnits < 0 || nUnits > COIN)\n         return false;\n     int64_t nWhole = atoi64(strWhole);\n-    int64_t nValue = nWhole*COIN + nUnits;\n+    CAmount nValue = nWhole*COIN + nUnits;\n \n     nRet = nValue;\n     return true;"
      },
      {
        "sha": "65415afd3f3121dd1550eba5ad6e2032eab97b5b",
        "filename": "src/utilmoneystr.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/utilmoneystr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/utilmoneystr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -12,8 +12,10 @@\n #include <stdint.h>\n #include <string>\n \n-std::string FormatMoney(int64_t n, bool fPlus=false);\n-bool ParseMoney(const std::string& str, int64_t& nRet);\n-bool ParseMoney(const char* pszIn, int64_t& nRet);\n+#include \"amount.h\"\n+\n+std::string FormatMoney(const CAmount& n, bool fPlus=false);\n+bool ParseMoney(const std::string& str, CAmount& nRet);\n+bool ParseMoney(const char* pszIn, CAmount& nRet);\n \n #endif // BITCOIN_UTILMONEYSTR_H"
      },
      {
        "sha": "b20b0007ce28379f6c5ff2ae1bc463ddc0200571",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 54,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -35,8 +35,8 @@ CFeeRate CWallet::minTxFee = CFeeRate(10000);  // Override with -mintxfee\n \n struct CompareValueOnly\n {\n-    bool operator()(const pair<int64_t, pair<const CWalletTx*, unsigned int> >& t1,\n-                    const pair<int64_t, pair<const CWalletTx*, unsigned int> >& t2) const\n+    bool operator()(const pair<CAmount, pair<const CWalletTx*, unsigned int> >& t1,\n+                    const pair<CAmount, pair<const CWalletTx*, unsigned int> >& t2) const\n     {\n         return t1.first < t2.first;\n     }\n@@ -697,7 +697,7 @@ isminetype CWallet::IsMine(const CTxIn &txin) const\n     return ISMINE_NO;\n }\n \n-int64_t CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n+CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n {\n     {\n         LOCK(cs_wallet);\n@@ -781,18 +781,18 @@ int CWalletTx::GetRequestCount() const\n }\n \n void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,\n-                           list<COutputEntry>& listSent, int64_t& nFee, string& strSentAccount, const isminefilter& filter) const\n+                           list<COutputEntry>& listSent, CAmount& nFee, string& strSentAccount, const isminefilter& filter) const\n {\n     nFee = 0;\n     listReceived.clear();\n     listSent.clear();\n     strSentAccount = strFromAccount;\n \n     // Compute fee:\n-    int64_t nDebit = GetDebit(filter);\n+    CAmount nDebit = GetDebit(filter);\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n     {\n-        int64_t nValueOut = GetValueOut();\n+        CAmount nValueOut = GetValueOut();\n         nFee = nDebit - nValueOut;\n     }\n \n@@ -835,12 +835,12 @@ void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,\n \n }\n \n-void CWalletTx::GetAccountAmounts(const string& strAccount, int64_t& nReceived,\n-                                  int64_t& nSent, int64_t& nFee, const isminefilter& filter) const\n+void CWalletTx::GetAccountAmounts(const string& strAccount, CAmount& nReceived,\n+                                  CAmount& nSent, CAmount& nFee, const isminefilter& filter) const\n {\n     nReceived = nSent = nFee = 0;\n \n-    int64_t allFee;\n+    CAmount allFee;\n     string strSentAccount;\n     list<COutputEntry> listReceived;\n     list<COutputEntry> listSent;\n@@ -1011,9 +1011,9 @@ void CWallet::ResendWalletTransactions()\n //\n \n \n-int64_t CWallet::GetBalance() const\n+CAmount CWallet::GetBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1027,9 +1027,9 @@ int64_t CWallet::GetBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetUnconfirmedBalance() const\n+CAmount CWallet::GetUnconfirmedBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1042,9 +1042,9 @@ int64_t CWallet::GetUnconfirmedBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetImmatureBalance() const\n+CAmount CWallet::GetImmatureBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1056,9 +1056,9 @@ int64_t CWallet::GetImmatureBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetWatchOnlyBalance() const\n+CAmount CWallet::GetWatchOnlyBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1072,9 +1072,9 @@ int64_t CWallet::GetWatchOnlyBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetUnconfirmedWatchOnlyBalance() const\n+CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1087,9 +1087,9 @@ int64_t CWallet::GetUnconfirmedWatchOnlyBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetImmatureWatchOnlyBalance() const\n+CAmount CWallet::GetImmatureWatchOnlyBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1137,8 +1137,8 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n     }\n }\n \n-static void ApproximateBestSubset(vector<pair<int64_t, pair<const CWalletTx*,unsigned int> > >vValue, int64_t nTotalLower, int64_t nTargetValue,\n-                                  vector<char>& vfBest, int64_t& nBest, int iterations = 1000)\n+static void ApproximateBestSubset(vector<pair<CAmount, pair<const CWalletTx*,unsigned int> > >vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n+                                  vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n {\n     vector<char> vfIncluded;\n \n@@ -1150,7 +1150,7 @@ static void ApproximateBestSubset(vector<pair<int64_t, pair<const CWalletTx*,uns\n     for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n     {\n         vfIncluded.assign(vValue.size(), false);\n-        int64_t nTotal = 0;\n+        CAmount nTotal = 0;\n         bool fReachedTarget = false;\n         for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n         {\n@@ -1183,18 +1183,18 @@ static void ApproximateBestSubset(vector<pair<int64_t, pair<const CWalletTx*,uns\n     }\n }\n \n-bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,\n-                                 set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,\n+                                 set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n     // List of values less than target\n-    pair<int64_t, pair<const CWalletTx*,unsigned int> > coinLowestLarger;\n-    coinLowestLarger.first = std::numeric_limits<int64_t>::max();\n+    pair<CAmount, pair<const CWalletTx*,unsigned int> > coinLowestLarger;\n+    coinLowestLarger.first = std::numeric_limits<CAmount>::max();\n     coinLowestLarger.second.first = NULL;\n-    vector<pair<int64_t, pair<const CWalletTx*,unsigned int> > > vValue;\n-    int64_t nTotalLower = 0;\n+    vector<pair<CAmount, pair<const CWalletTx*,unsigned int> > > vValue;\n+    CAmount nTotalLower = 0;\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n \n@@ -1209,9 +1209,9 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n             continue;\n \n         int i = output.i;\n-        int64_t n = pcoin->vout[i].nValue;\n+        CAmount n = pcoin->vout[i].nValue;\n \n-        pair<int64_t,pair<const CWalletTx*,unsigned int> > coin = make_pair(n,make_pair(pcoin, i));\n+        pair<CAmount,pair<const CWalletTx*,unsigned int> > coin = make_pair(n,make_pair(pcoin, i));\n \n         if (n == nTargetValue)\n         {\n@@ -1252,7 +1252,7 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n     // Solve subset sum by stochastic approximation\n     sort(vValue.rbegin(), vValue.rend(), CompareValueOnly());\n     vector<char> vfBest;\n-    int64_t nBest;\n+    CAmount nBest;\n \n     ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest, 1000);\n     if (nBest != nTargetValue && nTotalLower >= nTargetValue + CENT)\n@@ -1284,7 +1284,7 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n     return true;\n }\n \n-bool CWallet::SelectCoins(int64_t nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n {\n     vector<COutput> vCoins;\n     AvailableCoins(vCoins, true, coinControl);\n@@ -1310,11 +1310,11 @@ bool CWallet::SelectCoins(int64_t nTargetValue, set<pair<const CWalletTx*,unsign\n \n \n \n-bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n+bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n {\n-    int64_t nValue = 0;\n-    BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n+    CAmount nValue = 0;\n+    BOOST_FOREACH (const PAIRTYPE(CScript, CAmount)& s, vecSend)\n     {\n         if (nValue < 0)\n         {\n@@ -1343,10 +1343,10 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                 txNew.vout.clear();\n                 wtxNew.fFromMe = true;\n \n-                int64_t nTotalValue = nValue + nFeeRet;\n+                CAmount nTotalValue = nValue + nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n-                BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n+                BOOST_FOREACH (const PAIRTYPE(CScript, CAmount)& s, vecSend)\n                 {\n                     CTxOut txout(s.second, s.first);\n                     if (txout.IsDust(::minRelayTxFee))\n@@ -1359,22 +1359,22 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n \n                 // Choose coins to use\n                 set<pair<const CWalletTx*,unsigned int> > setCoins;\n-                int64_t nValueIn = 0;\n+                CAmount nValueIn = 0;\n                 if (!SelectCoins(nTotalValue, setCoins, nValueIn, coinControl))\n                 {\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n                 }\n                 BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n                 {\n-                    int64_t nCredit = pcoin.first->vout[pcoin.second].nValue;\n+                    CAmount nCredit = pcoin.first->vout[pcoin.second].nValue;\n                     //The priority after the next block (depth+1) is used instead of the current,\n                     //reflecting an assumption the user would accept a bit more delay for\n                     //a chance at a free transaction.\n                     dPriority += (double)nCredit * (pcoin.first->GetDepthInMainChain()+1);\n                 }\n \n-                int64_t nChange = nValueIn - nValue - nFeeRet;\n+                CAmount nChange = nValueIn - nValue - nFeeRet;\n \n                 if (nChange > 0)\n                 {\n@@ -1450,7 +1450,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                 }\n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n-                int64_t nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n \n                 if (nFeeRet >= nFeeNeeded)\n                     break; // Done, enough fee included.\n@@ -1481,10 +1481,10 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n     return true;\n }\n \n-bool CWallet::CreateTransaction(CScript scriptPubKey, int64_t nValue,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n+bool CWallet::CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n {\n-    vector< pair<CScript, int64_t> > vecSend;\n+    vector< pair<CScript, CAmount> > vecSend;\n     vecSend.push_back(make_pair(scriptPubKey, nValue));\n     return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, strFailReason, coinControl);\n }\n@@ -1539,7 +1539,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n \n \n-string CWallet::SendMoney(const CTxDestination &address, int64_t nValue, CWalletTx& wtxNew)\n+string CWallet::SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n {\n     // Check amount\n     if (nValue <= 0)\n@@ -1560,7 +1560,7 @@ string CWallet::SendMoney(const CTxDestination &address, int64_t nValue, CWallet\n \n     // Create and send the transaction\n     CReserveKey reservekey(this);\n-    int64_t nFeeRequired;\n+    CAmount nFeeRequired;\n     if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError))\n     {\n         if (nValue + nFeeRequired > GetBalance())\n@@ -1576,10 +1576,10 @@ string CWallet::SendMoney(const CTxDestination &address, int64_t nValue, CWallet\n \n \n \n-int64_t CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)\n {\n     // payTxFee is user-set \"I want to pay this much\"\n-    int64_t nFeeNeeded = payTxFee.GetFee(nTxBytes);\n+    CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0)\n         nFeeNeeded = pool.estimateFee(nConfirmTarget).GetFee(nTxBytes);\n@@ -1838,9 +1838,9 @@ int64_t CWallet::GetOldestKeyPoolTime()\n     return keypool.nTime;\n }\n \n-std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n+std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n {\n-    map<CTxDestination, int64_t> balances;\n+    map<CTxDestination, CAmount> balances;\n \n     {\n         LOCK(cs_wallet);\n@@ -1866,7 +1866,7 @@ std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n                 if(!ExtractDestination(pcoin->vout[i].scriptPubKey, addr))\n                     continue;\n \n-                int64_t n = IsSpent(walletEntry.first, i) ? 0 : pcoin->vout[i].nValue;\n+                CAmount n = IsSpent(walletEntry.first, i) ? 0 : pcoin->vout[i].nValue;\n \n                 if (!balances.count(addr))\n                     balances[addr] = 0;"
      },
      {
        "sha": "f3fffb22532fd479eca29c30e350982e43d604a2",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -30,9 +30,9 @@ extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n \n // -paytxfee default\n-static const int64_t DEFAULT_TRANSACTION_FEE = 0;\n+static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n // -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n-static const int nHighTransactionFeeWarning = 0.01 * COIN;\n+static const CAmount nHighTransactionFeeWarning = 0.01 * COIN;\n // Largest (in bytes) free transaction we're willing to create\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n \n@@ -98,7 +98,7 @@ class CAddressBookData\n class CWallet : public CCryptoKeyStore, public CWalletInterface\n {\n private:\n-    bool SelectCoins(int64_t nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -182,7 +182,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n-    bool SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const;\n+    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n \n@@ -253,21 +253,21 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions();\n-    int64_t GetBalance() const;\n-    int64_t GetUnconfirmedBalance() const;\n-    int64_t GetImmatureBalance() const;\n-    int64_t GetWatchOnlyBalance() const;\n-    int64_t GetUnconfirmedWatchOnlyBalance() const;\n-    int64_t GetImmatureWatchOnlyBalance() const;\n-    bool CreateTransaction(const std::vector<std::pair<CScript, int64_t> >& vecSend,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n-    bool CreateTransaction(CScript scriptPubKey, int64_t nValue,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    CAmount GetBalance() const;\n+    CAmount GetUnconfirmedBalance() const;\n+    CAmount GetImmatureBalance() const;\n+    CAmount GetWatchOnlyBalance() const;\n+    CAmount GetUnconfirmedWatchOnlyBalance() const;\n+    CAmount GetImmatureWatchOnlyBalance() const;\n+    bool CreateTransaction(const std::vector<std::pair<CScript, CAmount> >& vecSend,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    bool CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n-    std::string SendMoney(const CTxDestination &address, int64_t nValue, CWalletTx& wtxNew);\n+    std::string SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew);\n \n     static CFeeRate minTxFee;\n-    static int64_t GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n \n     bool NewKeyPool();\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n@@ -279,24 +279,24 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n \n     std::set< std::set<CTxDestination> > GetAddressGroupings();\n-    std::map<CTxDestination, int64_t> GetAddressBalances();\n+    std::map<CTxDestination, CAmount> GetAddressBalances();\n \n     std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n \n     isminetype IsMine(const CTxIn& txin) const;\n-    int64_t GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n+    CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n     isminetype IsMine(const CTxOut& txout) const\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n-    int64_t GetCredit(const CTxOut& txout, const isminefilter& filter) const\n+    CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n         return ((IsMine(txout) & filter) ? txout.nValue : 0);\n     }\n     bool IsChange(const CTxOut& txout) const;\n-    int64_t GetChange(const CTxOut& txout) const\n+    CAmount GetChange(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n@@ -313,9 +313,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     {\n         return (GetDebit(tx, ISMINE_ALL) > 0);\n     }\n-    int64_t GetDebit(const CTransaction& tx, const isminefilter& filter) const\n+    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const\n     {\n-        int64_t nDebit = 0;\n+        CAmount nDebit = 0;\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         {\n             nDebit += GetDebit(txin, filter);\n@@ -324,9 +324,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         }\n         return nDebit;\n     }\n-    int64_t GetCredit(const CTransaction& tx, const isminefilter& filter) const\n+    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const\n     {\n-        int64_t nCredit = 0;\n+        CAmount nCredit = 0;\n         BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n             nCredit += GetCredit(txout, filter);\n@@ -335,9 +335,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         }\n         return nCredit;\n     }\n-    int64_t GetChange(const CTransaction& tx) const\n+    CAmount GetChange(const CTransaction& tx) const\n     {\n-        int64_t nChange = 0;\n+        CAmount nChange = 0;\n         BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n             nChange += GetChange(txout);\n@@ -457,7 +457,7 @@ static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n struct COutputEntry\n {\n     CTxDestination destination;\n-    int64_t amount;\n+    CAmount amount;\n     int vout;\n };\n \n@@ -545,15 +545,15 @@ class CWalletTx : public CMerkleTx\n     mutable bool fImmatureWatchCreditCached;\n     mutable bool fAvailableWatchCreditCached;\n     mutable bool fChangeCached;\n-    mutable int64_t nDebitCached;\n-    mutable int64_t nCreditCached;\n-    mutable int64_t nImmatureCreditCached;\n-    mutable int64_t nAvailableCreditCached;\n-    mutable int64_t nWatchDebitCached;\n-    mutable int64_t nWatchCreditCached;\n-    mutable int64_t nImmatureWatchCreditCached;\n-    mutable int64_t nAvailableWatchCreditCached;\n-    mutable int64_t nChangeCached;\n+    mutable CAmount nDebitCached;\n+    mutable CAmount nCreditCached;\n+    mutable CAmount nImmatureCreditCached;\n+    mutable CAmount nAvailableCreditCached;\n+    mutable CAmount nWatchDebitCached;\n+    mutable CAmount nWatchCreditCached;\n+    mutable CAmount nImmatureWatchCreditCached;\n+    mutable CAmount nAvailableWatchCreditCached;\n+    mutable CAmount nChangeCached;\n \n     CWalletTx()\n     {\n@@ -670,12 +670,12 @@ class CWalletTx : public CMerkleTx\n     }\n \n     // filter decides which addresses will count towards the debit\n-    int64_t GetDebit(const isminefilter& filter) const\n+    CAmount GetDebit(const isminefilter& filter) const\n     {\n         if (vin.empty())\n             return 0;\n \n-        int64_t debit = 0;\n+        CAmount debit = 0;\n         if(filter & ISMINE_SPENDABLE)\n         {\n             if (fDebitCached)\n@@ -701,7 +701,7 @@ class CWalletTx : public CMerkleTx\n         return debit;\n     }\n \n-    int64_t GetCredit(bool fUseCache=true) const\n+    CAmount GetCredit(bool fUseCache=true) const\n     {\n         // Must wait until coinbase is safely deep enough in the chain before valuing it\n         if (IsCoinBase() && GetBlocksToMaturity() > 0)\n@@ -715,7 +715,7 @@ class CWalletTx : public CMerkleTx\n         return nCreditCached;\n     }\n \n-    int64_t GetImmatureCredit(bool fUseCache=true) const\n+    CAmount GetImmatureCredit(bool fUseCache=true) const\n     {\n         if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n         {\n@@ -729,7 +729,7 @@ class CWalletTx : public CMerkleTx\n         return 0;\n     }\n \n-    int64_t GetAvailableCredit(bool fUseCache=true) const\n+    CAmount GetAvailableCredit(bool fUseCache=true) const\n     {\n         if (pwallet == 0)\n             return 0;\n@@ -741,7 +741,7 @@ class CWalletTx : public CMerkleTx\n         if (fUseCache && fAvailableCreditCached)\n             return nAvailableCreditCached;\n \n-        int64_t nCredit = 0;\n+        CAmount nCredit = 0;\n         uint256 hashTx = GetHash();\n         for (unsigned int i = 0; i < vout.size(); i++)\n         {\n@@ -759,7 +759,7 @@ class CWalletTx : public CMerkleTx\n         return nCredit;\n     }\n \n-    int64_t GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const\n+    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const\n     {\n         if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n         {\n@@ -773,7 +773,7 @@ class CWalletTx : public CMerkleTx\n         return 0;\n     }\n \n-    int64_t GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const\n+    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const\n     {\n         if (pwallet == 0)\n             return 0;\n@@ -785,7 +785,7 @@ class CWalletTx : public CMerkleTx\n         if (fUseCache && fAvailableWatchCreditCached)\n             return nAvailableWatchCreditCached;\n \n-        int64_t nCredit = 0;\n+        CAmount nCredit = 0;\n         for (unsigned int i = 0; i < vout.size(); i++)\n         {\n             if (!pwallet->IsSpent(GetHash(), i))\n@@ -802,7 +802,7 @@ class CWalletTx : public CMerkleTx\n         return nCredit;\n     }\n \n-    int64_t GetChange() const\n+    CAmount GetChange() const\n     {\n         if (fChangeCached)\n             return nChangeCached;\n@@ -812,10 +812,10 @@ class CWalletTx : public CMerkleTx\n     }\n \n     void GetAmounts(std::list<COutputEntry>& listReceived,\n-                    std::list<COutputEntry>& listSent, int64_t& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n+                    std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n \n-    void GetAccountAmounts(const std::string& strAccount, int64_t& nReceived,\n-                           int64_t& nSent, int64_t& nFee, const isminefilter& filter) const;\n+    void GetAccountAmounts(const std::string& strAccount, CAmount& nReceived,\n+                           CAmount& nSent, CAmount& nFee, const isminefilter& filter) const;\n \n     bool IsFromMe(const isminefilter& filter) const\n     {\n@@ -949,7 +949,7 @@ class CAccountingEntry\n {\n public:\n     std::string strAccount;\n-    int64_t nCreditDebit;\n+    CAmount nCreditDebit;\n     int64_t nTime;\n     std::string strOtherAccount;\n     std::string strComment;"
      },
      {
        "sha": "67218bf2c851fdb266f363bc5fe01cf1d4ad7459",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -187,12 +187,12 @@ bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n     return WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n }\n \n-int64_t CWalletDB::GetAccountCreditDebit(const string& strAccount)\n+CAmount CWalletDB::GetAccountCreditDebit(const string& strAccount)\n {\n     list<CAccountingEntry> entries;\n     ListAccountCreditDebit(strAccount, entries);\n \n-    int64_t nCreditDebit = 0;\n+    CAmount nCreditDebit = 0;\n     BOOST_FOREACH (const CAccountingEntry& entry, entries)\n         nCreditDebit += entry.nCreditDebit;\n "
      },
      {
        "sha": "f3d6e61f8bc7031b32ed9b5ce324264feb6e6373",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a372168e77a8a195613a02983f2589252698bf0f/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a372168e77a8a195613a02983f2589252698bf0f/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=a372168e77a8a195613a02983f2589252698bf0f",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_WALLETDB_H\n #define BITCOIN_WALLETDB_H\n \n+#include \"amount.h\"\n #include \"db.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n@@ -118,7 +119,7 @@ class CWalletDB : public CDB\n     bool EraseDestData(const std::string &address, const std::string &key);\n \n     bool WriteAccountingEntry(const CAccountingEntry& acentry);\n-    int64_t GetAccountCreditDebit(const std::string& strAccount);\n+    CAmount GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n     DBErrors ReorderTransactions(CWallet* pwallet);"
      }
    ]
  },
  {
    "sha": "0866948e18cb65d2afbc49e4103f3cce05875999",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODY2OTQ4ZTE4Y2I2NWQyYWZiYzQ5ZTQxMDNmM2NjZTA1ODc1OTk5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-09-27T03:50:52Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-09-27T03:51:24Z"
      },
      "message": "Add 0.9.3 and fix control",
      "tree": {
        "sha": "2fd71af1610c33c3ab296b9a46ce5d283384dbbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fd71af1610c33c3ab296b9a46ce5d283384dbbf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0866948e18cb65d2afbc49e4103f3cce05875999",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0866948e18cb65d2afbc49e4103f3cce05875999",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0866948e18cb65d2afbc49e4103f3cce05875999",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0866948e18cb65d2afbc49e4103f3cce05875999/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b2b78b9f2bd339cc4505996258e00c186e91792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b2b78b9f2bd339cc4505996258e00c186e91792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b2b78b9f2bd339cc4505996258e00c186e91792"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fe910b65a5578f33d21d34941f8eddd29b3b6910",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0866948e18cb65d2afbc49e4103f3cce05875999/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0866948e18cb65d2afbc49e4103f3cce05875999/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=0866948e18cb65d2afbc49e4103f3cce05875999",
        "patch": "@@ -1,3 +1,9 @@\n+bitcoin (0.9.3-precise1) precise; urgency=medium\n+\n+  * New upstream releases.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Fri, 26 Sep 2014 12:01:00 -0700\n+\n bitcoin (0.9.1-precise1) precise; urgency=medium\n \n   * New upstream release."
      },
      {
        "sha": "a653260ad30ee1f8db5632fc362fcdc1bf7293ff",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0866948e18cb65d2afbc49e4103f3cce05875999/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0866948e18cb65d2afbc49e4103f3cce05875999/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=0866948e18cb65d2afbc49e4103f3cce05875999",
        "patch": "@@ -39,7 +39,6 @@ Description: peer-to-peer network based digital currency - daemon\n  Full transaction history is stored locally at each client.  This\n  requires 20+ GB of space, slowly growing.\n  .\n-\n  This package provides the daemon, bitcoind, and the CLI tool\n  bitcoin-cli to interact with the daemon.\n "
      }
    ]
  },
  {
    "sha": "2c45f49cde5c033daa17340c32a960e32f737a08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzQ1ZjQ5Y2RlNWMwMzNkYWExNzM0MGMzMmE5NjBlMzJmNzM3YTA4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-27T13:47:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-27T13:47:24Z"
      },
      "message": "Merge pull request #4987\n\n0866948 Add 0.9.3 and fix control (Matt Corallo)",
      "tree": {
        "sha": "8e40d64184395b1096fb1b1f906692294758254a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e40d64184395b1096fb1b1f906692294758254a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c45f49cde5c033daa17340c32a960e32f737a08",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUJr/sAAoJEHSBCwEjRsmmwp0IAK6pFnDk9x2ISs43EVSoz/e3\ncbozQAsFTgOY7LDjqbmteiQLhY3xQ53Ml1dLHXkv5GELuoamQjaxKI0b27OguQAJ\nCMEsNzg4kIl3Grjm8adkGLtbac02apmX4GqJSEWWY9GfpW51fVWZkGRdfyV8LkW8\nQlqxS6P7FDcCd6QcNqPv7TeShXygccBcSGTzY5RUP5pvL+MOLIfdPapMylNIVaqW\nSTfhG4VERZ/9YNBNIH21c2XH70JMnE1x0Y6HMbaApmIGv9glp8spkCSFOMHaxz+t\n/3STB8cpfUfxNPrdTAtlmfF5GeZA6qUez+Cq0PUeKt+TnA2P1p3h7oseegkIEX0=\n=8gHT\n-----END PGP SIGNATURE-----",
        "payload": "tree 8e40d64184395b1096fb1b1f906692294758254a\nparent 64cfaf891fe539b36f6be37dac6c28a712d70b96\nparent 0866948e18cb65d2afbc49e4103f3cce05875999\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411825631 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411825644 +0200\n\nMerge pull request #4987\n\n0866948 Add 0.9.3 and fix control (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c45f49cde5c033daa17340c32a960e32f737a08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c45f49cde5c033daa17340c32a960e32f737a08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c45f49cde5c033daa17340c32a960e32f737a08/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64cfaf891fe539b36f6be37dac6c28a712d70b96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64cfaf891fe539b36f6be37dac6c28a712d70b96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64cfaf891fe539b36f6be37dac6c28a712d70b96"
      },
      {
        "sha": "0866948e18cb65d2afbc49e4103f3cce05875999",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0866948e18cb65d2afbc49e4103f3cce05875999",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0866948e18cb65d2afbc49e4103f3cce05875999"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fe910b65a5578f33d21d34941f8eddd29b3b6910",
        "filename": "contrib/debian/changelog",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c45f49cde5c033daa17340c32a960e32f737a08/contrib/debian/changelog",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c45f49cde5c033daa17340c32a960e32f737a08/contrib/debian/changelog",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/changelog?ref=2c45f49cde5c033daa17340c32a960e32f737a08",
        "patch": "@@ -1,3 +1,9 @@\n+bitcoin (0.9.3-precise1) precise; urgency=medium\n+\n+  * New upstream releases.\n+\n+ -- Matt Corallo (BlueMatt) <matt@mattcorallo.com>  Fri, 26 Sep 2014 12:01:00 -0700\n+\n bitcoin (0.9.1-precise1) precise; urgency=medium\n \n   * New upstream release."
      },
      {
        "sha": "a653260ad30ee1f8db5632fc362fcdc1bf7293ff",
        "filename": "contrib/debian/control",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c45f49cde5c033daa17340c32a960e32f737a08/contrib/debian/control",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c45f49cde5c033daa17340c32a960e32f737a08/contrib/debian/control",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/control?ref=2c45f49cde5c033daa17340c32a960e32f737a08",
        "patch": "@@ -39,7 +39,6 @@ Description: peer-to-peer network based digital currency - daemon\n  Full transaction history is stored locally at each client.  This\n  requires 20+ GB of space, slowly growing.\n  .\n-\n  This package provides the daemon, bitcoind, and the CLI tool\n  bitcoin-cli to interact with the daemon.\n "
      }
    ]
  },
  {
    "sha": "a38eaea082692d0dac6996dcace2084cd7f29179",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzhlYWVhMDgyNjkyZDBkYWM2OTk2ZGNhY2UyMDg0Y2Q3ZjI5MTc5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-27T13:58:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-27T13:58:55Z"
      },
      "message": "doc: Update SHA256SUMS.asc step in release-process.md\n\n- The Hash: header is prepended by gpg, and states the hashing used by\n  gpg, not what is used to hash the files\n\n- Add more detailed steps",
      "tree": {
        "sha": "f1ade0c7c9c4c35711d899b8891f3b9259c7780c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f1ade0c7c9c4c35711d899b8891f3b9259c7780c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a38eaea082692d0dac6996dcace2084cd7f29179",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUJsLxAAoJEHSBCwEjRsmmCdEIAKFALa2KtjXhh6ANr6dc08Vn\nyj0pmZ02FU6NAAD+z5C4Ehf2zlTr9SrI6tZX38100S9A2yC7iB4KH0RlX/yocBH+\nESC+KgYrhIsxVh2blXHSGquMNuOx4KRHj/IvZcIdUdaLXr1umquF9qN32EfPfeVL\nS3epsfg5x2LefKudJo+v3t3M3hxw3YQ9NWRH36+MOvqhoWh0GX+s4m3IyxBNAq/7\nRfBg6APPK/XlGI0ZA58RQJenG40hR+SncHsV2gufLCEOHLvS1jXsuGYyBXgfbwq3\nZ+0Ze8RkO7E4tRmf1mmJeqa312o/d9oCpSgqUe534T6kUEvKCphvEFYo8SRp098=\n=bmQR\n-----END PGP SIGNATURE-----",
        "payload": "tree f1ade0c7c9c4c35711d899b8891f3b9259c7780c\nparent 2c45f49cde5c033daa17340c32a960e32f737a08\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411826327 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411826335 +0200\n\ndoc: Update SHA256SUMS.asc step in release-process.md\n\n- The Hash: header is prepended by gpg, and states the hashing used by\n  gpg, not what is used to hash the files\n\n- Add more detailed steps\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a38eaea082692d0dac6996dcace2084cd7f29179",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a38eaea082692d0dac6996dcace2084cd7f29179",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a38eaea082692d0dac6996dcace2084cd7f29179/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c45f49cde5c033daa17340c32a960e32f737a08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c45f49cde5c033daa17340c32a960e32f737a08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c45f49cde5c033daa17340c32a960e32f737a08"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 5,
      "deletions": 9
    },
    "files": [
      {
        "sha": "5b8029955d9bd50f9e15b4d00f45582f353ed290",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a38eaea082692d0dac6996dcace2084cd7f29179/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a38eaea082692d0dac6996dcace2084cd7f29179/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=a38eaea082692d0dac6996dcace2084cd7f29179",
        "patch": "@@ -178,15 +178,11 @@ Commit your signature to gitian.sigs:\n \n   Note: only Gavin has the code-signing keys currently.\n \n-- Create `SHA256SUMS.asc` for builds, and PGP-sign it. This is done manually.\n-  Include all the files to be uploaded. The file has `sha256sum` format with a\n-  simple header at the top:\n-\n-```\n-Hash: SHA256\n-\n-0060f7d38b98113ab912d4c184000291d7f026eaf77ca5830deec15059678f54  bitcoin-x.y.z-linux.tar.gz\n-...\n+- Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n+```bash\n+sha256sum * > SHA256SUMS\n+gpg --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n+rm SHA256SUMS\n ```\n \n - Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoin.org server"
      }
    ]
  },
  {
    "sha": "0dcb0a55782d676798013f20d7e2ab826ad4d96d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGNiMGE1NTc4MmQ2NzY3OTgwMTNmMjBkN2UyYWI4MjZhZDRkOTZk",
    "commit": {
      "author": {
        "name": "Saivann",
        "email": "saivann@gmail.com",
        "date": "2014-09-27T18:47:12Z"
      },
      "committer": {
        "name": "Saivann",
        "email": "saivann@gmail.com",
        "date": "2014-09-27T18:51:24Z"
      },
      "message": "doc: Add instructions for consistent Mac OS X build names",
      "tree": {
        "sha": "36b9d8f05af07aa55f79e3745bc89ff95c172012",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36b9d8f05af07aa55f79e3745bc89ff95c172012"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dcb0a55782d676798013f20d7e2ab826ad4d96d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJUJwcuAAoJEFeA9dMbVXewhD8H/iX2ylmLelscpyTYKNzgtavm\n+acT+tu+nuxYizd2jPPtn9c/3ilGMGVBNXLghUfLJpYsdBw7yZTB60cpTdtShMgI\nYJV+7XHmpYa4MvGIShDd5WhrwinZNOccaeaZ+DQ5/8LL/+KjSVlPAcsfs/NQWrnw\nsWuME8qLB6MctQDXWW+/ZYAgUCUusUAFIYodxOc2Nf+e+aFh4RSdzrsqID8IU+GD\nNy1JPOb5j1M5C14ON4xwppdlcK1ALXZet/2wTEBgvECpPEvDUoxrpwd2UTI2ih85\nzt89bvpk+f/ffFGI2b9dYodJISmseb5udqy1ztm09N2sTZCXsmTTVX/9FYNJZP8=\n=WjKT\n-----END PGP SIGNATURE-----",
        "payload": "tree 36b9d8f05af07aa55f79e3745bc89ff95c172012\nparent a38eaea082692d0dac6996dcace2084cd7f29179\nauthor Saivann <saivann@gmail.com> 1411843632 -0400\ncommitter Saivann <saivann@gmail.com> 1411843884 -0400\n\ndoc: Add instructions for consistent Mac OS X build names\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dcb0a55782d676798013f20d7e2ab826ad4d96d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0dcb0a55782d676798013f20d7e2ab826ad4d96d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dcb0a55782d676798013f20d7e2ab826ad4d96d/comments",
    "author": {
      "login": "saivann",
      "id": 3578089,
      "node_id": "MDQ6VXNlcjM1NzgwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3578089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saivann",
      "html_url": "https://github.com/saivann",
      "followers_url": "https://api.github.com/users/saivann/followers",
      "following_url": "https://api.github.com/users/saivann/following{/other_user}",
      "gists_url": "https://api.github.com/users/saivann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saivann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saivann/subscriptions",
      "organizations_url": "https://api.github.com/users/saivann/orgs",
      "repos_url": "https://api.github.com/users/saivann/repos",
      "events_url": "https://api.github.com/users/saivann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saivann/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "saivann",
      "id": 3578089,
      "node_id": "MDQ6VXNlcjM1NzgwODk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3578089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/saivann",
      "html_url": "https://github.com/saivann",
      "followers_url": "https://api.github.com/users/saivann/followers",
      "following_url": "https://api.github.com/users/saivann/following{/other_user}",
      "gists_url": "https://api.github.com/users/saivann/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/saivann/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/saivann/subscriptions",
      "organizations_url": "https://api.github.com/users/saivann/orgs",
      "repos_url": "https://api.github.com/users/saivann/repos",
      "events_url": "https://api.github.com/users/saivann/events{/privacy}",
      "received_events_url": "https://api.github.com/users/saivann/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a38eaea082692d0dac6996dcace2084cd7f29179",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a38eaea082692d0dac6996dcace2084cd7f29179",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a38eaea082692d0dac6996dcace2084cd7f29179"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7d9dd5edb45fadaa33887bdbc3fd29412899350e",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dcb0a55782d676798013f20d7e2ab826ad4d96d/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dcb0a55782d676798013f20d7e2ab826ad4d96d/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=0dcb0a55782d676798013f20d7e2ab826ad4d96d",
        "patch": "@@ -154,6 +154,10 @@ repackage gitian builds for release as stand-alone zip/tar/installer exe\n \tzip -r bitcoin-${VERSION}-win.zip bitcoin-${VERSION}-win\n \trm -rf bitcoin-${VERSION}-win\n \n+**Mac OS X .dmg:**\n+\n+\tmv Bitcoin-Qt.dmg bitcoin-${VERSION}-osx.dmg\n+\n ###Next steps:\n \n Commit your signature to gitian.sigs:"
      }
    ]
  },
  {
    "sha": "775b7b8d70da34029d3f29cbd67e82fbfcd30481",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzViN2I4ZDcwZGEzNDAyOWQzZjI5Y2JkNjdlODJmYmZjZDMwNDgx",
    "commit": {
      "author": {
        "name": "sinetek",
        "email": "pitwuu@gmail.com",
        "date": "2014-09-28T22:22:44Z"
      },
      "committer": {
        "name": "sinetek",
        "email": "pitwuu@gmail.com",
        "date": "2014-09-28T22:22:44Z"
      },
      "message": "LLu is standard, but not portable. use ULL",
      "tree": {
        "sha": "cb5465253ca54dae9be283a0c2ad54277717b854",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb5465253ca54dae9be283a0c2ad54277717b854"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/775b7b8d70da34029d3f29cbd67e82fbfcd30481",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/775b7b8d70da34029d3f29cbd67e82fbfcd30481",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/775b7b8d70da34029d3f29cbd67e82fbfcd30481",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/775b7b8d70da34029d3f29cbd67e82fbfcd30481/comments",
    "author": {
      "login": "sinetek",
      "id": 5908875,
      "node_id": "MDQ6VXNlcjU5MDg4NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5908875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinetek",
      "html_url": "https://github.com/sinetek",
      "followers_url": "https://api.github.com/users/sinetek/followers",
      "following_url": "https://api.github.com/users/sinetek/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinetek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinetek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinetek/subscriptions",
      "organizations_url": "https://api.github.com/users/sinetek/orgs",
      "repos_url": "https://api.github.com/users/sinetek/repos",
      "events_url": "https://api.github.com/users/sinetek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinetek/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sinetek",
      "id": 5908875,
      "node_id": "MDQ6VXNlcjU5MDg4NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5908875?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sinetek",
      "html_url": "https://github.com/sinetek",
      "followers_url": "https://api.github.com/users/sinetek/followers",
      "following_url": "https://api.github.com/users/sinetek/following{/other_user}",
      "gists_url": "https://api.github.com/users/sinetek/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sinetek/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sinetek/subscriptions",
      "organizations_url": "https://api.github.com/users/sinetek/orgs",
      "repos_url": "https://api.github.com/users/sinetek/repos",
      "events_url": "https://api.github.com/users/sinetek/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sinetek/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a38eaea082692d0dac6996dcace2084cd7f29179",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a38eaea082692d0dac6996dcace2084cd7f29179",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a38eaea082692d0dac6996dcace2084cd7f29179"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "68501facf20aee025511ae6bf7b5773836446f54",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/775b7b8d70da34029d3f29cbd67e82fbfcd30481/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/775b7b8d70da34029d3f29cbd67e82fbfcd30481/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=775b7b8d70da34029d3f29cbd67e82fbfcd30481",
        "patch": "@@ -245,7 +245,7 @@ uint64_t ReadCompactSize(Stream& is)\n         uint64_t xSize;\n         READDATA(is, xSize);\n         nSizeRet = xSize;\n-        if (nSizeRet < 0x100000000LLu)\n+        if (nSizeRet < 0x100000000ULL)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     if (nSizeRet > (uint64_t)MAX_SIZE)"
      }
    ]
  },
  {
    "sha": "bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjNhNWRkN2YwYzlkYTE0ZGExZWJjZWY0OWQ0ZWVmZjVmZTE0NDE5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-29T03:56:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-29T04:06:57Z"
      },
      "message": "Merge pull request #4796\n\ne8b5f0d Move CBlockIndex, CChain and related code out of main (jtimon)\n6db83db Decouple CChain from mapBlockIndex (jtimon)",
      "tree": {
        "sha": "4012442be778f55be17e7807399e7e00a8a8837a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4012442be778f55be17e7807399e7e00a8a8837a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUKNriAAoJEFeJbS/48LZXtTIL/1Tx524DSGgvZscYpLLwZLoz\ne2rsXyzdCdUGqfG/yrMXMn4mkOIxwpGvMKIzB2Q1pWAOoBq0PvOPJ1wfshzGWyYU\n7EJ3hMWuIabyEuRfOlVn7v9Wx7BoUJO0AHVdXvU5U3EqqDhfu34HoLzIfJpgbd2+\nal07wa6KYr+zfPsqH4KicMTZymffUoQzfo/3hlonBVbcFTw9W6RuY8RfbFkQxJcV\n6wrz6SPQVlxgrIwBnE5pEYyZx6Dq9c/vn/fAPPg7vrdSPY+3NUtKIqUdH0d3/PqA\nkJCSiBQFv0AQipGj70JqNMKtV1MbjHpnBdgigGIiXzdk1i+mBufhxyt6RbMR8c32\ndMoBqP8RKoDcCJRIR3/8VxEdhIIwo5dQvK7Rbb3xRLOtMc1bJmvNiWqHM/rf6NTo\n1u36M7+GKC0wgaEjCpJ2NJITuWq4iMvZaGPExIYhm638bqrCz+N1hAJgUhuweC6a\ntr2lqWUh5H9iL+Uf096a432gczOEsVG04c9d1LRRtA==\n=NwJX\n-----END PGP SIGNATURE-----",
        "payload": "tree 4012442be778f55be17e7807399e7e00a8a8837a\nparent a38eaea082692d0dac6996dcace2084cd7f29179\nparent e8b5f0d549b1b76611c7374bed9ceec7d09fa847\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1411963017 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1411963617 +0200\n\nMerge pull request #4796\n\ne8b5f0d Move CBlockIndex, CChain and related code out of main (jtimon)\n6db83db Decouple CChain from mapBlockIndex (jtimon)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a38eaea082692d0dac6996dcace2084cd7f29179",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a38eaea082692d0dac6996dcace2084cd7f29179",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a38eaea082692d0dac6996dcace2084cd7f29179"
      },
      {
        "sha": "e8b5f0d549b1b76611c7374bed9ceec7d09fa847",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8b5f0d549b1b76611c7374bed9ceec7d09fa847",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8b5f0d549b1b76611c7374bed9ceec7d09fa847"
      }
    ],
    "stats": {
      "total": 903,
      "additions": 461,
      "deletions": 442
    },
    "files": [
      {
        "sha": "2c64cb74a0545202ea28ff7f7359d25d4b2479b8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419",
        "patch": "@@ -67,6 +67,7 @@ BITCOIN_CORE_H = \\\n   allocators.h \\\n   base58.h \\\n   bloom.h \\\n+  chain.h \\\n   chainparams.h \\\n   chainparamsbase.h \\\n   chainparamsseeds.h \\\n@@ -145,6 +146,7 @@ libbitcoin_server_a_SOURCES = \\\n   addrman.cpp \\\n   alert.cpp \\\n   bloom.cpp \\\n+  chain.cpp \\\n   checkpoints.cpp \\\n   init.cpp \\\n   leveldbwrapper.cpp \\"
      },
      {
        "sha": "bcb497b2d491bac851493f325fa09a5659fa4d66",
        "filename": "src/chain.cpp",
        "status": "added",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419",
        "patch": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"chain.h\"\n+\n+using namespace std;\n+\n+// CChain implementation\n+\n+CBlockIndex *CChain::SetTip(CBlockIndex *pindex) {\n+    if (pindex == NULL) {\n+        vChain.clear();\n+        return NULL;\n+    }\n+    vChain.resize(pindex->nHeight + 1);\n+    while (pindex && vChain[pindex->nHeight] != pindex) {\n+        vChain[pindex->nHeight] = pindex;\n+        pindex = pindex->pprev;\n+    }\n+    return pindex;\n+}\n+\n+CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {\n+    int nStep = 1;\n+    std::vector<uint256> vHave;\n+    vHave.reserve(32);\n+\n+    if (!pindex)\n+        pindex = Tip();\n+    while (pindex) {\n+        vHave.push_back(pindex->GetBlockHash());\n+        // Stop when we have added the genesis block.\n+        if (pindex->nHeight == 0)\n+            break;\n+        // Exponentially larger steps back, plus the genesis block.\n+        int nHeight = std::max(pindex->nHeight - nStep, 0);\n+        if (Contains(pindex)) {\n+            // Use O(1) CChain index if possible.\n+            pindex = (*this)[nHeight];\n+        } else {\n+            // Otherwise, use O(log n) skiplist.\n+            pindex = pindex->GetAncestor(nHeight);\n+        }\n+        if (vHave.size() > 10)\n+            nStep *= 2;\n+    }\n+\n+    return CBlockLocator(vHave);\n+}\n+\n+const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n+    if (pindex->nHeight > Height())\n+        pindex = pindex->GetAncestor(Height());\n+    while (pindex && !Contains(pindex))\n+        pindex = pindex->pprev;\n+    return pindex;\n+}"
      },
      {
        "sha": "91bdf383475f1e69284ae1dd0216efbf41971386",
        "filename": "src/chain.h",
        "status": "added",
        "additions": 390,
        "deletions": 0,
        "changes": 390,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419",
        "patch": "@@ -0,0 +1,390 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_BITCOIN_CHAIN\n+#define H_BITCOIN_CHAIN\n+\n+#include \"core.h\"\n+#include \"pow.h\"\n+#include \"uint256.h\"\n+\n+#include <vector>\n+\n+#include <boost/foreach.hpp>\n+\n+struct CDiskBlockPos\n+{\n+    int nFile;\n+    unsigned int nPos;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(VARINT(nFile));\n+        READWRITE(VARINT(nPos));\n+    }\n+\n+    CDiskBlockPos() {\n+        SetNull();\n+    }\n+\n+    CDiskBlockPos(int nFileIn, unsigned int nPosIn) {\n+        nFile = nFileIn;\n+        nPos = nPosIn;\n+    }\n+\n+    friend bool operator==(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n+        return (a.nFile == b.nFile && a.nPos == b.nPos);\n+    }\n+\n+    friend bool operator!=(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n+        return !(a == b);\n+    }\n+\n+    void SetNull() { nFile = -1; nPos = 0; }\n+    bool IsNull() const { return (nFile == -1); }\n+};\n+\n+enum BlockStatus {\n+    BLOCK_VALID_UNKNOWN      =    0,\n+    BLOCK_VALID_HEADER       =    1, // parsed, version ok, hash satisfies claimed PoW, 1 <= vtx count <= max, timestamp not in future\n+    BLOCK_VALID_TREE         =    2, // parent found, difficulty matches, timestamp >= median previous, checkpoint\n+    BLOCK_VALID_TRANSACTIONS =    3, // only first tx is coinbase, 2 <= coinbase input script length <= 100, transactions valid, no duplicate txids, sigops, size, merkle root\n+    BLOCK_VALID_CHAIN        =    4, // outputs do not overspend inputs, no double spends, coinbase output ok, immature coinbase spends, BIP30\n+    BLOCK_VALID_SCRIPTS      =    5, // scripts/signatures ok\n+    BLOCK_VALID_MASK         =   BLOCK_VALID_HEADER | BLOCK_VALID_TREE | BLOCK_VALID_TRANSACTIONS |\n+                                 BLOCK_VALID_CHAIN | BLOCK_VALID_SCRIPTS,\n+\n+    BLOCK_HAVE_DATA          =    8, // full block available in blk*.dat\n+    BLOCK_HAVE_UNDO          =   16, // undo data available in rev*.dat\n+    BLOCK_HAVE_MASK          =   BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO,\n+\n+    BLOCK_FAILED_VALID       =   32, // stage after last reached validness failed\n+    BLOCK_FAILED_CHILD       =   64, // descends from failed block\n+    BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,\n+};\n+\n+/** The block chain is a tree shaped structure starting with the\n+ * genesis block at the root, with each block potentially having multiple\n+ * candidates to be the next block. A blockindex may have multiple pprev pointing\n+ * to it, but at most one of them can be part of the currently active branch.\n+ */\n+class CBlockIndex\n+{\n+public:\n+    // pointer to the hash of the block, if any. memory is owned by this CBlockIndex\n+    const uint256* phashBlock;\n+\n+    // pointer to the index of the predecessor of this block\n+    CBlockIndex* pprev;\n+\n+    // pointer to the index of some further predecessor of this block\n+    CBlockIndex* pskip;\n+\n+    // height of the entry in the chain. The genesis block has height 0\n+    int nHeight;\n+\n+    // Which # file this block is stored in (blk?????.dat)\n+    int nFile;\n+\n+    // Byte offset within blk?????.dat where this block's data is stored\n+    unsigned int nDataPos;\n+\n+    // Byte offset within rev?????.dat where this block's undo data is stored\n+    unsigned int nUndoPos;\n+\n+    // (memory only) Total amount of work (expected number of hashes) in the chain up to and including this block\n+    uint256 nChainWork;\n+\n+    // Number of transactions in this block.\n+    // Note: in a potential headers-first mode, this number cannot be relied upon\n+    unsigned int nTx;\n+\n+    // (memory only) Number of transactions in the chain up to and including this block\n+    unsigned int nChainTx; // change to 64-bit type when necessary; won't happen before 2030\n+\n+    // Verification status of this block. See enum BlockStatus\n+    unsigned int nStatus;\n+\n+    // block header\n+    int nVersion;\n+    uint256 hashMerkleRoot;\n+    unsigned int nTime;\n+    unsigned int nBits;\n+    unsigned int nNonce;\n+\n+    // (memory only) Sequencial id assigned to distinguish order in which blocks are received.\n+    uint32_t nSequenceId;\n+\n+    void SetNull()\n+    {\n+        phashBlock = NULL;\n+        pprev = NULL;\n+        pskip = NULL;\n+        nHeight = 0;\n+        nFile = 0;\n+        nDataPos = 0;\n+        nUndoPos = 0;\n+        nChainWork = 0;\n+        nTx = 0;\n+        nChainTx = 0;\n+        nStatus = 0;\n+        nSequenceId = 0;\n+\n+        nVersion       = 0;\n+        hashMerkleRoot = 0;\n+        nTime          = 0;\n+        nBits          = 0;\n+        nNonce         = 0;\n+    }\n+\n+    CBlockIndex()\n+    {\n+        SetNull();\n+    }\n+\n+    CBlockIndex(CBlockHeader& block)\n+    {\n+        SetNull();\n+\n+        nVersion       = block.nVersion;\n+        hashMerkleRoot = block.hashMerkleRoot;\n+        nTime          = block.nTime;\n+        nBits          = block.nBits;\n+        nNonce         = block.nNonce;\n+    }\n+\n+    CDiskBlockPos GetBlockPos() const {\n+        CDiskBlockPos ret;\n+        if (nStatus & BLOCK_HAVE_DATA) {\n+            ret.nFile = nFile;\n+            ret.nPos  = nDataPos;\n+        }\n+        return ret;\n+    }\n+\n+    CDiskBlockPos GetUndoPos() const {\n+        CDiskBlockPos ret;\n+        if (nStatus & BLOCK_HAVE_UNDO) {\n+            ret.nFile = nFile;\n+            ret.nPos  = nUndoPos;\n+        }\n+        return ret;\n+    }\n+\n+    CBlockHeader GetBlockHeader() const\n+    {\n+        CBlockHeader block;\n+        block.nVersion       = nVersion;\n+        if (pprev)\n+            block.hashPrevBlock = pprev->GetBlockHash();\n+        block.hashMerkleRoot = hashMerkleRoot;\n+        block.nTime          = nTime;\n+        block.nBits          = nBits;\n+        block.nNonce         = nNonce;\n+        return block;\n+    }\n+\n+    uint256 GetBlockHash() const\n+    {\n+        return *phashBlock;\n+    }\n+\n+    int64_t GetBlockTime() const\n+    {\n+        return (int64_t)nTime;\n+    }\n+\n+    uint256 GetBlockWork() const\n+    {\n+        return GetProofIncrement(nBits);\n+    }\n+\n+    enum { nMedianTimeSpan=11 };\n+\n+    int64_t GetMedianTimePast() const\n+    {\n+        int64_t pmedian[nMedianTimeSpan];\n+        int64_t* pbegin = &pmedian[nMedianTimeSpan];\n+        int64_t* pend = &pmedian[nMedianTimeSpan];\n+\n+        const CBlockIndex* pindex = this;\n+        for (int i = 0; i < nMedianTimeSpan && pindex; i++, pindex = pindex->pprev)\n+            *(--pbegin) = pindex->GetBlockTime();\n+\n+        std::sort(pbegin, pend);\n+        return pbegin[(pend - pbegin)/2];\n+    }\n+\n+    /**\n+     * Returns true if there are nRequired or more blocks of minVersion or above\n+     * in the last Params().ToCheckBlockUpgradeMajority() blocks, starting at pstart \n+     * and going backwards.\n+     */\n+    static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart,\n+                                unsigned int nRequired);\n+\n+    std::string ToString() const\n+    {\n+        return strprintf(\"CBlockIndex(pprev=%p, nHeight=%d, merkle=%s, hashBlock=%s)\",\n+            pprev, nHeight,\n+            hashMerkleRoot.ToString(),\n+            GetBlockHash().ToString());\n+    }\n+\n+    // Check whether this block index entry is valid up to the passed validity level.\n+    bool IsValid(enum BlockStatus nUpTo = BLOCK_VALID_TRANSACTIONS) const\n+    {\n+        assert(!(nUpTo & ~BLOCK_VALID_MASK)); // Only validity flags allowed.\n+        if (nStatus & BLOCK_FAILED_MASK)\n+            return false;\n+        return ((nStatus & BLOCK_VALID_MASK) >= nUpTo);\n+    }\n+\n+    // Raise the validity level of this block index entry.\n+    // Returns true if the validity was changed.\n+    bool RaiseValidity(enum BlockStatus nUpTo)\n+    {\n+        assert(!(nUpTo & ~BLOCK_VALID_MASK)); // Only validity flags allowed.\n+        if (nStatus & BLOCK_FAILED_MASK)\n+            return false;\n+        if ((nStatus & BLOCK_VALID_MASK) < nUpTo) {\n+            nStatus = (nStatus & ~BLOCK_VALID_MASK) | nUpTo;\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    // Build the skiplist pointer for this entry.\n+    void BuildSkip();\n+\n+    // Efficiently find an ancestor of this block.\n+    CBlockIndex* GetAncestor(int height);\n+    const CBlockIndex* GetAncestor(int height) const;\n+};\n+\n+/** Used to marshal pointers into hashes for db storage. */\n+class CDiskBlockIndex : public CBlockIndex\n+{\n+public:\n+    uint256 hashPrev;\n+\n+    CDiskBlockIndex() {\n+        hashPrev = 0;\n+    }\n+\n+    explicit CDiskBlockIndex(CBlockIndex* pindex) : CBlockIndex(*pindex) {\n+        hashPrev = (pprev ? pprev->GetBlockHash() : 0);\n+    }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        if (!(nType & SER_GETHASH))\n+            READWRITE(VARINT(nVersion));\n+\n+        READWRITE(VARINT(nHeight));\n+        READWRITE(VARINT(nStatus));\n+        READWRITE(VARINT(nTx));\n+        if (nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO))\n+            READWRITE(VARINT(nFile));\n+        if (nStatus & BLOCK_HAVE_DATA)\n+            READWRITE(VARINT(nDataPos));\n+        if (nStatus & BLOCK_HAVE_UNDO)\n+            READWRITE(VARINT(nUndoPos));\n+\n+        // block header\n+        READWRITE(this->nVersion);\n+        READWRITE(hashPrev);\n+        READWRITE(hashMerkleRoot);\n+        READWRITE(nTime);\n+        READWRITE(nBits);\n+        READWRITE(nNonce);\n+    }\n+\n+    uint256 GetBlockHash() const\n+    {\n+        CBlockHeader block;\n+        block.nVersion        = nVersion;\n+        block.hashPrevBlock   = hashPrev;\n+        block.hashMerkleRoot  = hashMerkleRoot;\n+        block.nTime           = nTime;\n+        block.nBits           = nBits;\n+        block.nNonce          = nNonce;\n+        return block.GetHash();\n+    }\n+\n+\n+    std::string ToString() const\n+    {\n+        std::string str = \"CDiskBlockIndex(\";\n+        str += CBlockIndex::ToString();\n+        str += strprintf(\"\\n                hashBlock=%s, hashPrev=%s)\",\n+            GetBlockHash().ToString(),\n+            hashPrev.ToString());\n+        return str;\n+    }\n+};\n+\n+/** An in-memory indexed chain of blocks. */\n+class CChain {\n+private:\n+    std::vector<CBlockIndex*> vChain;\n+\n+public:\n+    /** Returns the index entry for the genesis block of this chain, or NULL if none. */\n+    CBlockIndex *Genesis() const {\n+        return vChain.size() > 0 ? vChain[0] : NULL;\n+    }\n+\n+    /** Returns the index entry for the tip of this chain, or NULL if none. */\n+    CBlockIndex *Tip() const {\n+        return vChain.size() > 0 ? vChain[vChain.size() - 1] : NULL;\n+    }\n+\n+    /** Returns the index entry at a particular height in this chain, or NULL if no such height exists. */\n+    CBlockIndex *operator[](int nHeight) const {\n+        if (nHeight < 0 || nHeight >= (int)vChain.size())\n+            return NULL;\n+        return vChain[nHeight];\n+    }\n+\n+    /** Compare two chains efficiently. */\n+    friend bool operator==(const CChain &a, const CChain &b) {\n+        return a.vChain.size() == b.vChain.size() &&\n+               a.vChain[a.vChain.size() - 1] == b.vChain[b.vChain.size() - 1];\n+    }\n+\n+    /** Efficiently check whether a block is present in this chain. */\n+    bool Contains(const CBlockIndex *pindex) const {\n+        return (*this)[pindex->nHeight] == pindex;\n+    }\n+\n+    /** Find the successor of a block in this chain, or NULL if the given index is not found or is the tip. */\n+    CBlockIndex *Next(const CBlockIndex *pindex) const {\n+        if (Contains(pindex))\n+            return (*this)[pindex->nHeight + 1];\n+        else\n+            return NULL;\n+    }\n+\n+    /** Return the maximal height in the chain. Is equal to chain.Tip() ? chain.Tip()->nHeight : -1. */\n+    int Height() const {\n+        return vChain.size() - 1;\n+    }\n+\n+    /** Set/initialize a chain with a given tip. Returns the forking point. */\n+    CBlockIndex *SetTip(CBlockIndex *pindex);\n+\n+    /** Return a CBlockLocator that refers to a block in this chain (by default the tip). */\n+    CBlockLocator GetLocator(const CBlockIndex *pindex = NULL) const;\n+\n+    /** Find the last common block between this chain and a block index entry. */\n+    const CBlockIndex *FindFork(const CBlockIndex *pindex) const;\n+};\n+\n+#endif "
      },
      {
        "sha": "85f4d360d263c5c401d2ec9cb37042ea4716415f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419",
        "patch": "@@ -1159,7 +1159,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n             CWalletDB walletdb(strWalletFile);\n             CBlockLocator locator;\n             if (walletdb.ReadBestBlock(locator))\n-                pindexRescan = chainActive.FindFork(locator);\n+                pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n             else\n                 pindexRescan = chainActive.Genesis();\n         }"
      },
      {
        "sha": "9a4271eda2fd47db0b231168b92cef2ad0da338e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 59,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419",
        "patch": "@@ -391,72 +391,19 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n     nodeSignals.FinalizeNode.disconnect(&FinalizeNode);\n }\n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// CChain implementation\n-//\n-\n-CBlockIndex *CChain::SetTip(CBlockIndex *pindex) {\n-    if (pindex == NULL) {\n-        vChain.clear();\n-        return NULL;\n-    }\n-    vChain.resize(pindex->nHeight + 1);\n-    while (pindex && vChain[pindex->nHeight] != pindex) {\n-        vChain[pindex->nHeight] = pindex;\n-        pindex = pindex->pprev;\n-    }\n-    return pindex;\n-}\n-\n-CBlockLocator CChain::GetLocator(const CBlockIndex *pindex) const {\n-    int nStep = 1;\n-    std::vector<uint256> vHave;\n-    vHave.reserve(32);\n-\n-    if (!pindex)\n-        pindex = Tip();\n-    while (pindex) {\n-        vHave.push_back(pindex->GetBlockHash());\n-        // Stop when we have added the genesis block.\n-        if (pindex->nHeight == 0)\n-            break;\n-        // Exponentially larger steps back, plus the genesis block.\n-        int nHeight = std::max(pindex->nHeight - nStep, 0);\n-        if (Contains(pindex)) {\n-            // Use O(1) CChain index if possible.\n-            pindex = (*this)[nHeight];\n-        } else {\n-            // Otherwise, use O(log n) skiplist.\n-            pindex = pindex->GetAncestor(nHeight);\n-        }\n-        if (vHave.size() > 10)\n-            nStep *= 2;\n-    }\n-\n-    return CBlockLocator(vHave);\n-}\n-\n-CBlockIndex *CChain::FindFork(const CBlockLocator &locator) const {\n+CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n+{\n     // Find the first block the caller has in the main chain\n     BOOST_FOREACH(const uint256& hash, locator.vHave) {\n         BlockMap::iterator mi = mapBlockIndex.find(hash);\n         if (mi != mapBlockIndex.end())\n         {\n             CBlockIndex* pindex = (*mi).second;\n-            if (Contains(pindex))\n+            if (chain.Contains(pindex))\n                 return pindex;\n         }\n     }\n-    return Genesis();\n-}\n-\n-const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n-    if (pindex->nHeight > Height())\n-        pindex = pindex->GetAncestor(Height());\n-    while (pindex && !Contains(pindex))\n-        pindex = pindex->pprev;\n-    return pindex;\n+    return chain.Genesis();\n }\n \n CCoinsViewCache *pcoinsTip = NULL;\n@@ -3709,7 +3656,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         LOCK(cs_main);\n \n         // Find the last block the caller has in the main chain\n-        CBlockIndex* pindex = chainActive.FindFork(locator);\n+        CBlockIndex* pindex = FindForkInGlobalIndex(chainActive, locator);\n \n         // Send the rest of the chain\n         if (pindex)\n@@ -3756,7 +3703,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         else\n         {\n             // Find the last block the caller has in the main chain\n-            pindex = chainActive.FindFork(locator);\n+            pindex = FindForkInGlobalIndex(chainActive, locator);\n             if (pindex)\n                 pindex = chainActive.Next(pindex);\n         }"
      },
      {
        "sha": "c75841538ffb7712d185f94f34608ed762426162",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 382,
        "changes": 385,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419",
        "patch": "@@ -10,6 +10,7 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"coins.h\"\n #include \"core.h\"\n@@ -113,7 +114,6 @@ static const uint64_t nMinDiskSpace = 52428800;\n \n \n class CBlockTreeDB;\n-struct CDiskBlockPos;\n class CTxUndo;\n class CScriptCheck;\n class CValidationState;\n@@ -189,51 +189,11 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                         bool* pfMissingInputs, bool fRejectInsaneFee=false);\n \n \n-\n-\n-\n-\n-\n-\n struct CNodeStateStats {\n     int nMisbehavior;\n     int nSyncHeight;\n };\n \n-struct CDiskBlockPos\n-{\n-    int nFile;\n-    unsigned int nPos;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(VARINT(nFile));\n-        READWRITE(VARINT(nPos));\n-    }\n-\n-    CDiskBlockPos() {\n-        SetNull();\n-    }\n-\n-    CDiskBlockPos(int nFileIn, unsigned int nPosIn) {\n-        nFile = nFileIn;\n-        nPos = nPosIn;\n-    }\n-\n-    friend bool operator==(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n-        return (a.nFile == b.nFile && a.nPos == b.nPos);\n-    }\n-\n-    friend bool operator!=(const CDiskBlockPos &a, const CDiskBlockPos &b) {\n-        return !(a == b);\n-    }\n-\n-    void SetNull() { nFile = -1; nPos = 0; }\n-    bool IsNull() const { return (nFile == -1); }\n-};\n-\n struct CDiskTxPos : public CDiskBlockPos\n {\n     unsigned int nTxOffset; // after header\n@@ -545,288 +505,6 @@ class CBlockFileInfo\n      }\n };\n \n-enum BlockStatus {\n-    BLOCK_VALID_UNKNOWN      =    0,\n-    BLOCK_VALID_HEADER       =    1, // parsed, version ok, hash satisfies claimed PoW, 1 <= vtx count <= max, timestamp not in future\n-    BLOCK_VALID_TREE         =    2, // parent found, difficulty matches, timestamp >= median previous, checkpoint\n-    BLOCK_VALID_TRANSACTIONS =    3, // only first tx is coinbase, 2 <= coinbase input script length <= 100, transactions valid, no duplicate txids, sigops, size, merkle root\n-    BLOCK_VALID_CHAIN        =    4, // outputs do not overspend inputs, no double spends, coinbase output ok, immature coinbase spends, BIP30\n-    BLOCK_VALID_SCRIPTS      =    5, // scripts/signatures ok\n-    BLOCK_VALID_MASK         =   BLOCK_VALID_HEADER | BLOCK_VALID_TREE | BLOCK_VALID_TRANSACTIONS |\n-                                 BLOCK_VALID_CHAIN | BLOCK_VALID_SCRIPTS,\n-\n-    BLOCK_HAVE_DATA          =    8, // full block available in blk*.dat\n-    BLOCK_HAVE_UNDO          =   16, // undo data available in rev*.dat\n-    BLOCK_HAVE_MASK          =   BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO,\n-\n-    BLOCK_FAILED_VALID       =   32, // stage after last reached validness failed\n-    BLOCK_FAILED_CHILD       =   64, // descends from failed block\n-    BLOCK_FAILED_MASK        =   BLOCK_FAILED_VALID | BLOCK_FAILED_CHILD,\n-};\n-\n-/** The block chain is a tree shaped structure starting with the\n- * genesis block at the root, with each block potentially having multiple\n- * candidates to be the next block. A blockindex may have multiple pprev pointing\n- * to it, but at most one of them can be part of the currently active branch.\n- */\n-class CBlockIndex\n-{\n-public:\n-    // pointer to the hash of the block, if any. memory is owned by this CBlockIndex\n-    const uint256* phashBlock;\n-\n-    // pointer to the index of the predecessor of this block\n-    CBlockIndex* pprev;\n-\n-    // pointer to the index of some further predecessor of this block\n-    CBlockIndex* pskip;\n-\n-    // height of the entry in the chain. The genesis block has height 0\n-    int nHeight;\n-\n-    // Which # file this block is stored in (blk?????.dat)\n-    int nFile;\n-\n-    // Byte offset within blk?????.dat where this block's data is stored\n-    unsigned int nDataPos;\n-\n-    // Byte offset within rev?????.dat where this block's undo data is stored\n-    unsigned int nUndoPos;\n-\n-    // (memory only) Total amount of work (expected number of hashes) in the chain up to and including this block\n-    uint256 nChainWork;\n-\n-    // Number of transactions in this block.\n-    // Note: in a potential headers-first mode, this number cannot be relied upon\n-    unsigned int nTx;\n-\n-    // (memory only) Number of transactions in the chain up to and including this block\n-    unsigned int nChainTx; // change to 64-bit type when necessary; won't happen before 2030\n-\n-    // Verification status of this block. See enum BlockStatus\n-    unsigned int nStatus;\n-\n-    // block header\n-    int nVersion;\n-    uint256 hashMerkleRoot;\n-    unsigned int nTime;\n-    unsigned int nBits;\n-    unsigned int nNonce;\n-\n-    // (memory only) Sequencial id assigned to distinguish order in which blocks are received.\n-    uint32_t nSequenceId;\n-\n-    void SetNull()\n-    {\n-        phashBlock = NULL;\n-        pprev = NULL;\n-        pskip = NULL;\n-        nHeight = 0;\n-        nFile = 0;\n-        nDataPos = 0;\n-        nUndoPos = 0;\n-        nChainWork = 0;\n-        nTx = 0;\n-        nChainTx = 0;\n-        nStatus = 0;\n-        nSequenceId = 0;\n-\n-        nVersion       = 0;\n-        hashMerkleRoot = 0;\n-        nTime          = 0;\n-        nBits          = 0;\n-        nNonce         = 0;\n-    }\n-\n-    CBlockIndex()\n-    {\n-        SetNull();\n-    }\n-\n-    CBlockIndex(CBlockHeader& block)\n-    {\n-        SetNull();\n-\n-        nVersion       = block.nVersion;\n-        hashMerkleRoot = block.hashMerkleRoot;\n-        nTime          = block.nTime;\n-        nBits          = block.nBits;\n-        nNonce         = block.nNonce;\n-    }\n-\n-    CDiskBlockPos GetBlockPos() const {\n-        CDiskBlockPos ret;\n-        if (nStatus & BLOCK_HAVE_DATA) {\n-            ret.nFile = nFile;\n-            ret.nPos  = nDataPos;\n-        }\n-        return ret;\n-    }\n-\n-    CDiskBlockPos GetUndoPos() const {\n-        CDiskBlockPos ret;\n-        if (nStatus & BLOCK_HAVE_UNDO) {\n-            ret.nFile = nFile;\n-            ret.nPos  = nUndoPos;\n-        }\n-        return ret;\n-    }\n-\n-    CBlockHeader GetBlockHeader() const\n-    {\n-        CBlockHeader block;\n-        block.nVersion       = nVersion;\n-        if (pprev)\n-            block.hashPrevBlock = pprev->GetBlockHash();\n-        block.hashMerkleRoot = hashMerkleRoot;\n-        block.nTime          = nTime;\n-        block.nBits          = nBits;\n-        block.nNonce         = nNonce;\n-        return block;\n-    }\n-\n-    uint256 GetBlockHash() const\n-    {\n-        return *phashBlock;\n-    }\n-\n-    int64_t GetBlockTime() const\n-    {\n-        return (int64_t)nTime;\n-    }\n-\n-    uint256 GetBlockWork() const\n-    {\n-        return GetProofIncrement(nBits);\n-    }\n-\n-    enum { nMedianTimeSpan=11 };\n-\n-    int64_t GetMedianTimePast() const\n-    {\n-        int64_t pmedian[nMedianTimeSpan];\n-        int64_t* pbegin = &pmedian[nMedianTimeSpan];\n-        int64_t* pend = &pmedian[nMedianTimeSpan];\n-\n-        const CBlockIndex* pindex = this;\n-        for (int i = 0; i < nMedianTimeSpan && pindex; i++, pindex = pindex->pprev)\n-            *(--pbegin) = pindex->GetBlockTime();\n-\n-        std::sort(pbegin, pend);\n-        return pbegin[(pend - pbegin)/2];\n-    }\n-\n-    /**\n-     * Returns true if there are nRequired or more blocks of minVersion or above\n-     * in the last Params().ToCheckBlockUpgradeMajority() blocks, starting at pstart \n-     * and going backwards.\n-     */\n-    static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart,\n-                                unsigned int nRequired);\n-\n-    std::string ToString() const\n-    {\n-        return strprintf(\"CBlockIndex(pprev=%p, nHeight=%d, merkle=%s, hashBlock=%s)\",\n-            pprev, nHeight,\n-            hashMerkleRoot.ToString(),\n-            GetBlockHash().ToString());\n-    }\n-\n-    // Check whether this block index entry is valid up to the passed validity level.\n-    bool IsValid(enum BlockStatus nUpTo = BLOCK_VALID_TRANSACTIONS) const\n-    {\n-        assert(!(nUpTo & ~BLOCK_VALID_MASK)); // Only validity flags allowed.\n-        if (nStatus & BLOCK_FAILED_MASK)\n-            return false;\n-        return ((nStatus & BLOCK_VALID_MASK) >= nUpTo);\n-    }\n-\n-    // Raise the validity level of this block index entry.\n-    // Returns true if the validity was changed.\n-    bool RaiseValidity(enum BlockStatus nUpTo)\n-    {\n-        assert(!(nUpTo & ~BLOCK_VALID_MASK)); // Only validity flags allowed.\n-        if (nStatus & BLOCK_FAILED_MASK)\n-            return false;\n-        if ((nStatus & BLOCK_VALID_MASK) < nUpTo) {\n-            nStatus = (nStatus & ~BLOCK_VALID_MASK) | nUpTo;\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    // Build the skiplist pointer for this entry.\n-    void BuildSkip();\n-\n-    // Efficiently find an ancestor of this block.\n-    CBlockIndex* GetAncestor(int height);\n-    const CBlockIndex* GetAncestor(int height) const;\n-};\n-\n-/** Used to marshal pointers into hashes for db storage. */\n-class CDiskBlockIndex : public CBlockIndex\n-{\n-public:\n-    uint256 hashPrev;\n-\n-    CDiskBlockIndex() {\n-        hashPrev = 0;\n-    }\n-\n-    explicit CDiskBlockIndex(CBlockIndex* pindex) : CBlockIndex(*pindex) {\n-        hashPrev = (pprev ? pprev->GetBlockHash() : 0);\n-    }\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        if (!(nType & SER_GETHASH))\n-            READWRITE(VARINT(nVersion));\n-\n-        READWRITE(VARINT(nHeight));\n-        READWRITE(VARINT(nStatus));\n-        READWRITE(VARINT(nTx));\n-        if (nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO))\n-            READWRITE(VARINT(nFile));\n-        if (nStatus & BLOCK_HAVE_DATA)\n-            READWRITE(VARINT(nDataPos));\n-        if (nStatus & BLOCK_HAVE_UNDO)\n-            READWRITE(VARINT(nUndoPos));\n-\n-        // block header\n-        READWRITE(this->nVersion);\n-        READWRITE(hashPrev);\n-        READWRITE(hashMerkleRoot);\n-        READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n-    }\n-\n-    uint256 GetBlockHash() const\n-    {\n-        CBlockHeader block;\n-        block.nVersion        = nVersion;\n-        block.hashPrevBlock   = hashPrev;\n-        block.hashMerkleRoot  = hashMerkleRoot;\n-        block.nTime           = nTime;\n-        block.nBits           = nBits;\n-        block.nNonce          = nNonce;\n-        return block.GetHash();\n-    }\n-\n-\n-    std::string ToString() const\n-    {\n-        std::string str = \"CDiskBlockIndex(\";\n-        str += CBlockIndex::ToString();\n-        str += strprintf(\"\\n                hashBlock=%s, hashPrev=%s)\",\n-            GetBlockHash().ToString(),\n-            hashPrev.ToString());\n-        return str;\n-    }\n-};\n-\n /** Capture information about block/transaction validation */\n class CValidationState {\n private:\n@@ -898,65 +576,8 @@ class CVerifyDB {\n     bool VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n };\n \n-/** An in-memory indexed chain of blocks. */\n-class CChain {\n-private:\n-    std::vector<CBlockIndex*> vChain;\n-\n-public:\n-    /** Returns the index entry for the genesis block of this chain, or NULL if none. */\n-    CBlockIndex *Genesis() const {\n-        return vChain.size() > 0 ? vChain[0] : NULL;\n-    }\n-\n-    /** Returns the index entry for the tip of this chain, or NULL if none. */\n-    CBlockIndex *Tip() const {\n-        return vChain.size() > 0 ? vChain[vChain.size() - 1] : NULL;\n-    }\n-\n-    /** Returns the index entry at a particular height in this chain, or NULL if no such height exists. */\n-    CBlockIndex *operator[](int nHeight) const {\n-        if (nHeight < 0 || nHeight >= (int)vChain.size())\n-            return NULL;\n-        return vChain[nHeight];\n-    }\n-\n-    /** Compare two chains efficiently. */\n-    friend bool operator==(const CChain &a, const CChain &b) {\n-        return a.vChain.size() == b.vChain.size() &&\n-               a.vChain[a.vChain.size() - 1] == b.vChain[b.vChain.size() - 1];\n-    }\n-\n-    /** Efficiently check whether a block is present in this chain. */\n-    bool Contains(const CBlockIndex *pindex) const {\n-        return (*this)[pindex->nHeight] == pindex;\n-    }\n-\n-    /** Find the successor of a block in this chain, or NULL if the given index is not found or is the tip. */\n-    CBlockIndex *Next(const CBlockIndex *pindex) const {\n-        if (Contains(pindex))\n-            return (*this)[pindex->nHeight + 1];\n-        else\n-            return NULL;\n-    }\n-\n-    /** Return the maximal height in the chain. Is equal to chain.Tip() ? chain.Tip()->nHeight : -1. */\n-    int Height() const {\n-        return vChain.size() - 1;\n-    }\n-\n-    /** Set/initialize a chain with a given tip. Returns the forking point. */\n-    CBlockIndex *SetTip(CBlockIndex *pindex);\n-\n-    /** Return a CBlockLocator that refers to a block in this chain (by default the tip). */\n-    CBlockLocator GetLocator(const CBlockIndex *pindex = NULL) const;\n-\n-    /** Find the last common block between this chain and a locator. */\n-    CBlockIndex *FindFork(const CBlockLocator &locator) const;\n-\n-    /** Find the last common block between this chain and a block index entry. */\n-    const CBlockIndex *FindFork(const CBlockIndex *pindex) const;\n-};\n+/** Find the last common block between the parameter chain and a locator. */\n+CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n \n /** The currently-connected chain of blocks. */\n extern CChain chainActive;"
      }
    ]
  },
  {
    "sha": "0db65d8798193cf9615f5693c66cafcd5af4be5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGI2NWQ4Nzk4MTkzY2Y5NjE1ZjU2OTNjNjZjYWZjZDVhZjRiZTVj",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-27T11:49:21Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-29T06:21:11Z"
      },
      "message": "update license of compat and crypto\n\n- change license to be just MIT for all files in compat and crypto\n- also add missing header end comments\n- ensure default header include style",
      "tree": {
        "sha": "5c1b9c9fc741a319ded9b3f86009664b8fea3130",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c1b9c9fc741a319ded9b3f86009664b8fea3130"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0db65d8798193cf9615f5693c66cafcd5af4be5c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0db65d8798193cf9615f5693c66cafcd5af4be5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0db65d8798193cf9615f5693c66cafcd5af4be5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0db65d8798193cf9615f5693c66cafcd5af4be5c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 20,
      "deletions": 16
    },
    "files": [
      {
        "sha": "f149a08cd59aa01a84b5ad5fcc9a557b36dc2c77",
        "filename": "src/compat/glibc_compat.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/compat/glibc_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/compat/glibc_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_compat.cpp?ref=0db65d8798193cf9615f5693c66cafcd5af4be5c",
        "patch": "@@ -1,12 +1,13 @@\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n #include \"config/bitcoin-config.h\"\n #endif\n \n #include <cstddef>\n+\n #if defined(HAVE_SYS_SELECT_H)\n #include <sys/select.h>\n #endif"
      },
      {
        "sha": "607e23b5682291c3beccd878485af4d6be148a72",
        "filename": "src/compat/glibc_sanity.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/compat/glibc_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/compat/glibc_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity.cpp?ref=0db65d8798193cf9615f5693c66cafcd5af4be5c",
        "patch": "@@ -1,12 +1,13 @@\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n #include \"config/bitcoin-config.h\"\n #endif\n \n #include <cstddef>\n+\n #if defined(HAVE_SYS_SELECT_H)\n #include <sys/select.h>\n #endif"
      },
      {
        "sha": "e0b4ac51f59add1f4cbbe725f965e4daae0de2fe",
        "filename": "src/compat/glibcxx_compat.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/compat/glibcxx_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/compat/glibcxx_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_compat.cpp?ref=0db65d8798193cf9615f5693c66cafcd5af4be5c",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <cstddef>"
      },
      {
        "sha": "aafa4a6aef867b4f418e4dd72aad13367a291b6b",
        "filename": "src/compat/glibcxx_sanity.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/compat/glibcxx_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/compat/glibcxx_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_sanity.cpp?ref=0db65d8798193cf9615f5693c66cafcd5af4be5c",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <list>"
      },
      {
        "sha": "7016ac0ab745fe4108391676570f4a7ad1767aea",
        "filename": "src/compat/sanity.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/compat/sanity.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/compat/sanity.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/sanity.h?ref=0db65d8798193cf9615f5693c66cafcd5af4be5c",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCON_COMPAT_SANITY_H"
      },
      {
        "sha": "67c30023c3c537bbd5f346e5d4f011ae06490192",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=0db65d8798193cf9615f5693c66cafcd5af4be5c",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_CRYPTO_COMMON_H\n@@ -8,7 +8,9 @@\n #if defined(HAVE_CONFIG_H)\n #include \"bitcoin-config.h\"\n #endif\n+\n #include <stdint.h>\n+\n #if defined(HAVE_ENDIAN_H)\n #include <endian.h>\n #endif\n@@ -115,4 +117,4 @@ void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n #endif\n }\n \n-#endif\n+#endif // BITCOIN_CRYPTO_COMMON_H"
      },
      {
        "sha": "cb4a94a44da9d45fb0b3e4cda46202263868b87f",
        "filename": "src/crypto/ripemd160.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/crypto/ripemd160.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/crypto/ripemd160.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.cpp?ref=0db65d8798193cf9615f5693c66cafcd5af4be5c",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"crypto/ripemd160.h\""
      },
      {
        "sha": "902e7ca83fc25138aa73ac651e1dfdd0cab536cb",
        "filename": "src/crypto/ripemd160.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/crypto/ripemd160.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/crypto/ripemd160.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.h?ref=0db65d8798193cf9615f5693c66cafcd5af4be5c",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_RIPEMD160_H\n@@ -25,4 +25,4 @@ class CRIPEMD160\n     CRIPEMD160& Reset();\n };\n \n-#endif\n+#endif // BITCOIN_RIPEMD160_H"
      },
      {
        "sha": "7f78fdfc6d27c21c3e2dc3cfc81b217d16b836ab",
        "filename": "src/crypto/sha1.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/crypto/sha1.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/crypto/sha1.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.cpp?ref=0db65d8798193cf9615f5693c66cafcd5af4be5c",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"crypto/sha1.h\""
      },
      {
        "sha": "68bd7ced9f059e90a920f67393dd5bd4dd63c7c6",
        "filename": "src/crypto/sha1.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/crypto/sha1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/crypto/sha1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.h?ref=0db65d8798193cf9615f5693c66cafcd5af4be5c",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_SHA1_H\n@@ -25,4 +25,4 @@ class CSHA1\n     CSHA1& Reset();\n };\n \n-#endif\n+#endif // BITCOIN_SHA1_H"
      },
      {
        "sha": "613aac2d710c76c945d1743720b4708de0ee6468",
        "filename": "src/crypto/sha2.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/crypto/sha2.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/crypto/sha2.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.cpp?ref=0db65d8798193cf9615f5693c66cafcd5af4be5c",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"crypto/sha2.h\""
      },
      {
        "sha": "a6cbe58554a847e544158efdb7ee4d08730f77ae",
        "filename": "src/crypto/sha2.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/crypto/sha2.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0db65d8798193cf9615f5693c66cafcd5af4be5c/src/crypto/sha2.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.h?ref=0db65d8798193cf9615f5693c66cafcd5af4be5c",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_SHA2_H\n@@ -61,4 +61,4 @@ class CHMAC_SHA512\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n };\n \n-#endif\n+#endif // BITCOIN_SHA2_H"
      }
    ]
  },
  {
    "sha": "7bec6dd2305281255efc510c16297556b26268e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YmVjNmRkMjMwNTI4MTI1NWVmYzUxMGMxNjI5NzU1NmIyNjI2OGUy",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-29T06:22:03Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-29T06:22:03Z"
      },
      "message": "cleanup license and header end comment in chain.cpp/.h",
      "tree": {
        "sha": "495fe26eb0fd17c5e1e81aaa2c3c2e9f201ece2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/495fe26eb0fd17c5e1e81aaa2c3c2e9f201ece2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7bec6dd2305281255efc510c16297556b26268e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bec6dd2305281255efc510c16297556b26268e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7bec6dd2305281255efc510c16297556b26268e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bec6dd2305281255efc510c16297556b26268e2/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "0db65d8798193cf9615f5693c66cafcd5af4be5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0db65d8798193cf9615f5693c66cafcd5af4be5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0db65d8798193cf9615f5693c66cafcd5af4be5c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "05427a4569934c511e9adb8a46c22261765bf4cc",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bec6dd2305281255efc510c16297556b26268e2/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bec6dd2305281255efc510c16297556b26268e2/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=7bec6dd2305281255efc510c16297556b26268e2",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chain.h\""
      },
      {
        "sha": "0aafb40b986923acbca758c37025ff5d44d35d91",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7bec6dd2305281255efc510c16297556b26268e2/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7bec6dd2305281255efc510c16297556b26268e2/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=7bec6dd2305281255efc510c16297556b26268e2",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef H_BITCOIN_CHAIN\n@@ -387,4 +387,4 @@ class CChain {\n     const CBlockIndex *FindFork(const CBlockIndex *pindex) const;\n };\n \n-#endif \n+#endif // H_BITCOIN_CHAIN"
      }
    ]
  },
  {
    "sha": "76182e7cb62caa93ef24aa657b2b18921f6fc0b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjE4MmU3Y2I2MmNhYTkzZWYyNGFhNjU3YjJiMTg5MjFmNmZjMGI3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-29T07:35:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-29T07:35:47Z"
      },
      "message": "Merge pull request #4999\n\n775b7b8 LLu is standard, but not portable. use ULL (sinetek)",
      "tree": {
        "sha": "05e6df4bd243ab3af606cc1d6c09c5c3e4c80a3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05e6df4bd243ab3af606cc1d6c09c5c3e4c80a3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76182e7cb62caa93ef24aa657b2b18921f6fc0b7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUKQvTAAoJEHSBCwEjRsmmUywH/RNrSKn/Y/7VrLKM9g3owsLz\n3h+DjYnr7OWiT6eJ0VWd6eZM0qWLRQrN2O4M1ke0gkFzlXo6sNBsY3Oh65zxOiHy\nNISzw1ChXW8n4krIL5txymm8OxrhqgaTTAW9iEaBgoc4aCEoNhm8cVBjKaQQFZPv\n4PXY8J7/yDJFQX9Fh+uMFhGOcce/CdGfMPBMd9WViZ0YpgCax2S05uCNs689mRtC\ny28GtmdfaGJ+c0YQNxGYW1bGL/7TXkrjJ1dTbGzqKHHiu28MtiC2om1zBzmnteAj\nKuMK01VaSb3WGE+4HyQTegHeQT1VBRsANpro2tACH4lyZwBpTZh/kHBJAbtNtq4=\n=gRun\n-----END PGP SIGNATURE-----",
        "payload": "tree 05e6df4bd243ab3af606cc1d6c09c5c3e4c80a3d\nparent bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419\nparent 775b7b8d70da34029d3f29cbd67e82fbfcd30481\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411976128 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411976147 +0200\n\nMerge pull request #4999\n\n775b7b8 LLu is standard, but not portable. use ULL (sinetek)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76182e7cb62caa93ef24aa657b2b18921f6fc0b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76182e7cb62caa93ef24aa657b2b18921f6fc0b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76182e7cb62caa93ef24aa657b2b18921f6fc0b7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf3a5dd7f0c9da14da1ebcef49d4eeff5fe14419"
      },
      {
        "sha": "775b7b8d70da34029d3f29cbd67e82fbfcd30481",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/775b7b8d70da34029d3f29cbd67e82fbfcd30481",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/775b7b8d70da34029d3f29cbd67e82fbfcd30481"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "68501facf20aee025511ae6bf7b5773836446f54",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76182e7cb62caa93ef24aa657b2b18921f6fc0b7/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76182e7cb62caa93ef24aa657b2b18921f6fc0b7/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=76182e7cb62caa93ef24aa657b2b18921f6fc0b7",
        "patch": "@@ -245,7 +245,7 @@ uint64_t ReadCompactSize(Stream& is)\n         uint64_t xSize;\n         READDATA(is, xSize);\n         nSizeRet = xSize;\n-        if (nSizeRet < 0x100000000LLu)\n+        if (nSizeRet < 0x100000000ULL)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     if (nSizeRet > (uint64_t)MAX_SIZE)"
      }
    ]
  },
  {
    "sha": "41150d601df8bbbec9e6f0b7fb4d3fc569692522",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTE1MGQ2MDFkZjhiYmJlYzllNmYwYjdmYjRkM2ZjNTY5NjkyNTIy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-29T07:36:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-29T07:36:54Z"
      },
      "message": "Merge pull request #4970\n\n93e24dd travis: use debug for one build (Cory Fields)\nbe6d87a script: don't read past the end (Cory Fields)\na94496f tests: don't split an empty string (Cory Fields)\n00522cd depends: disable reduced exports for debug builds (Cory Fields)\n1f7fff2 depends: add docs for debug (Cory Fields)\ndc66ff5 depends: make LDFLAGS act like the other flags (Cory Fields)\nb1efba8 depends: give miniupnpc cppflags (Cory Fields)\n1d154db depends: teach qt to honor debug/release (Cory Fields)\n3b63df5 depends: boost: build for debug or release as requested (Cory Fields)\n7e99df7 depends: make sure openssl sees cppflags (Cory Fields)\nf397304 depends: add debug/release flags for linux/osx/win (Cory Fields)\n2027ad3 depends: add the debug/release concept to depends (Cory Fields)",
      "tree": {
        "sha": "9ceddf9231e185e263548d43ee6eab92139076a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ceddf9231e185e263548d43ee6eab92139076a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41150d601df8bbbec9e6f0b7fb4d3fc569692522",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUKQwWAAoJEHSBCwEjRsmmSRQIALdj+STTE6dIhyngbm4hwSb2\nS9Dr397jSsvvAu6JuE99UWshxdfrjxjI4R7/+GcOLFxCtC/BvH0KNjyNllT4IjjY\nB4g27xdjyMnVT3AG2vs5dxV4e3mKBIJCJwG1HRJqJ7DVwBDI7ENOZX7OJlZ30MFF\nxdAxVxxrveM7IwNU0R3X2rafJ4C0iG3hpyxL9k9j0b+y1ayAn/jgwyg4a3jca3gW\n3CsIsjNrmK9gRdZ3zj9E4mmd4kjNxLHdtgEZUx5OfQcW+CCIW3NmTXTqWDGXYcHK\nLzOqUJdRDoC1yyqVlXhGxu0YXdyLyLZdx+qWmHHwLiVxstOIbUwVlbJc4yZPzSw=\n=mvxb\n-----END PGP SIGNATURE-----",
        "payload": "tree 9ceddf9231e185e263548d43ee6eab92139076a3\nparent 76182e7cb62caa93ef24aa657b2b18921f6fc0b7\nparent 93e24dddf3b7063a157b414c07e08ac7f31eaf03\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411976186 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1411976214 +0200\n\nMerge pull request #4970\n\n93e24dd travis: use debug for one build (Cory Fields)\nbe6d87a script: don't read past the end (Cory Fields)\na94496f tests: don't split an empty string (Cory Fields)\n00522cd depends: disable reduced exports for debug builds (Cory Fields)\n1f7fff2 depends: add docs for debug (Cory Fields)\ndc66ff5 depends: make LDFLAGS act like the other flags (Cory Fields)\nb1efba8 depends: give miniupnpc cppflags (Cory Fields)\n1d154db depends: teach qt to honor debug/release (Cory Fields)\n3b63df5 depends: boost: build for debug or release as requested (Cory Fields)\n7e99df7 depends: make sure openssl sees cppflags (Cory Fields)\nf397304 depends: add debug/release flags for linux/osx/win (Cory Fields)\n2027ad3 depends: add the debug/release concept to depends (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41150d601df8bbbec9e6f0b7fb4d3fc569692522",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41150d601df8bbbec9e6f0b7fb4d3fc569692522",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41150d601df8bbbec9e6f0b7fb4d3fc569692522/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76182e7cb62caa93ef24aa657b2b18921f6fc0b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76182e7cb62caa93ef24aa657b2b18921f6fc0b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76182e7cb62caa93ef24aa657b2b18921f6fc0b7"
      },
      {
        "sha": "93e24dddf3b7063a157b414c07e08ac7f31eaf03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93e24dddf3b7063a157b414c07e08ac7f31eaf03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93e24dddf3b7063a157b414c07e08ac7f31eaf03"
      }
    ],
    "stats": {
      "total": 179,
      "additions": 128,
      "deletions": 51
    },
    "files": [
      {
        "sha": "155ac012d89dfc8f79c876c9dac450489b1e82d8",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -27,9 +27,9 @@ matrix:\n     - compiler: \"true 1\"\n       env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n     - compiler: \"true 2\"\n-      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_QT=1 NO_WALLET=1 NO_UPNP=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat CPPFLAGS=-DDEBUG_LOCKORDER\"\n+      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat CPPFLAGS=-DDEBUG_LOCKORDER\"\n     - compiler: \"true 3\"\n-      env: HOST=x86_64-unknown-linux-gnu RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n     - compiler: \"true 4\"\n       env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n     - compiler: \"true 5\""
      },
      {
        "sha": "fc763bedeb5f24258efff5a8dbdea9f59a962ff1",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -22,6 +22,12 @@ host:=$(HOST)\n host_toolchain:=$(HOST)-\n endif\n \n+ifneq ($(DEBUG),)\n+release_type=debug\n+else\n+release_type=release\n+endif\n+\n base_build_dir=$(BASEDIR)/work/build\n base_staging_dir=$(BASEDIR)/work/staging\n canonical_host:=$(shell ./config.sub $(HOST))\n@@ -103,12 +109,14 @@ $(host_prefix)/share/config.site : config.site.in $(host_prefix)/.stamp_$(final_\n             -e 's|@STRIP@|$(toolchain_path)$(host_STRIP)|' \\\n             -e 's|@build_os@|$(build_os)|' \\\n             -e 's|@host_os@|$(host_os)|' \\\n-            -e 's|@CFLAGS@|$(host_CFLAGS)|' \\\n-            -e 's|@CXXFLAGS@|$(host_CXXFLAGS)|' \\\n-            -e 's|@LDFLAGS@|$(host_LDFLAGS)|' \\\n+            -e 's|@CFLAGS@|$(strip $(host_CFLAGS) $(host_$(release_type)_CFLAGS))|' \\\n+            -e 's|@CXXFLAGS@|$(strip $(host_CXXFLAGS) $(host_$(release_type)_CXXFLAGS))|' \\\n+            -e 's|@CPPFLAGS@|$(strip $(host_CPPFLAGS) $(host_$(release_type)_CPPFLAGS))|' \\\n+            -e 's|@LDFLAGS@|$(strip $(host_LDFLAGS) $(host_$(release_type)_LDFLAGS))|' \\\n             -e 's|@no_qt@|$(NO_QT)|' \\\n             -e 's|@no_wallet@|$(NO_WALLET)|' \\\n             -e 's|@no_upnp@|$(NO_UPNP)|' \\\n+            -e 's|@debug@|$(DEBUG)|' \\\n             $< > $@\n \t$(AT)touch $@\n "
      },
      {
        "sha": "5ab7ed7dee0063888e4c042dc5946e363178b030",
        "filename": "depends/README.packages",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/README.packages",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/README.packages",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.packages?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -65,10 +65,22 @@ These variables may be set to override or append their default values.\n   $(package)_config_env\n   $(package)_build_env\n   $(package)_stage_env\n+  $(package)_build_opts\n+  $(package)_config_opts\n \n The *_env variables are used to add environment variables to the respective\n commands.\n \n+Many variables respect a debug/release suffix as well, in order to use them for\n+only the appropriate build config. For example:\n+  $(package)_cflags_release = -O3\n+  $(package)_cflags_i686_debug = -g\n+  $(package)_config_opts_release = --disable-debug\n+\n+These will be used in addition to the options that do not specify\n+debug/release. All builds are considered to be release unless DEBUG=1 is set by\n+the user.\n+\n Other variables may be defined as needed.\n \n Build commands:"
      },
      {
        "sha": "d3c57956f19e8ccc0dca629bb62a3ea4128f27d6",
        "filename": "depends/README.usage",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/README.usage",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/README.usage",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.usage?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -22,6 +22,7 @@ FALLBACK_DOWNLOAD_PATH: If a source file can't be fetched, try here before givin\n NO_QT: Don't download/build/cache qt and its dependencies\n NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n+DEBUG: disable some optimizations and enable more runtime checking\n \n If some packages are not built, for example 'make NO_WALLET=1', the appropriate\n options will be passed to bitcoin's configure. In this case, --disable-wallet."
      },
      {
        "sha": "3426050cd3e847ad6c5bafb5622e767b1cca6f59",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -52,7 +52,9 @@ export PATH=$prefix/native/bin:$PATH\n export PKG_CONFIG=\"`which pkg-config` --static\"\n export PKG_CONFIG_LIBDIR=$prefix/lib/pkgconfig\n export PKG_CONFIG_PATH=$prefix/share/pkgconfig\n+\n export CPPFLAGS=\"-I$prefix/include/ $CPPFLAGS\"\n+export LDFLAGS=\"-L$prefix/lib $LDFLAGS\"\n \n export CC=\"@CC@\"\n export CXX=\"@CXX@\"\n@@ -75,10 +77,19 @@ if test -n \"@NM@\"; then\n   ac_cv_path_ac_pt_NM=${NM}\n fi\n \n+if test -n \"@debug@\"; then\n+  enable_reduce_exports=no\n+fi\n+\n if test -n \"@CFLAGS@\"; then\n   export CFLAGS=\"@CFLAGS@ $CFLAGS\"\n fi\n if test -n \"@CXXFLAGS@\"; then\n   export CXXFLAGS=\"@CXXFLAGS@ $CXXFLAGS\"\n fi\n-export LDFLAGS=\"-L$prefix/lib @LDFLAGS@ $LDFLAGS\"\n+if test -n \"@CPPFLAGS@\"; then\n+  export CPPFLAGS=\"@CPPFLAGS@ $CPPFLAGS\"\n+fi\n+if test -n \"@LDFLAGS@\"; then\n+  export LDFLAGS=\"@LDFLAGS@ $LDFLAGS\"\n+fi"
      },
      {
        "sha": "c1fc0a0e33169a34e9f25f59b673d1405470193c",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 39,
        "deletions": 32,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -8,10 +8,10 @@ $(1)_ar=$($($(1)_type)_AR)\n $(1)_ranlib=$($($(1)_type)_RANLIB)\n $(1)_libtool=$($($(1)_type)_LIBTOOL)\n $(1)_nm=$($($(1)_type)_NM)\n-$(1)_cflags=$($($(1)_type)_CFLAGS)\n-$(1)_cxxflags=$($($(1)_type)_CXXFLAGS)\n-$(1)_ldflags=$($($(1)_type)_LDFLAGS) -L$($($(1)_type)_prefix)/lib\n-$(1)_cppflags:=-I$($($(1)_type)_prefix)/include\n+$(1)_cflags=$($($(1)_type)_CFLAGS) $($($(1)_type)_$(release_type)_CFLAGS)\n+$(1)_cxxflags=$($($(1)_type)_CXXFLAGS) $($($(1)_type)_$(release_type)_CXXFLAGS)\n+$(1)_ldflags=$($($(1)_type)_LDFLAGS) $($($(1)_type)_$(release_type)_LDFLAGS) -L$($($(1)_type)_prefix)/lib\n+$(1)_cppflags=$($($(1)_type)_CPPFLAGS) $($($(1)_type)_$(release_type)_CPPFLAGS) -I$($($(1)_type)_prefix)/include\n $(1)_recipe_hash:=\n endef\n \n@@ -38,7 +38,7 @@ define int_get_build_id\n $(eval $(1)_dependencies += $($(1)_$(host_arch)_$(host_os)_dependencies) $($(1)_$(host_os)_dependencies))\n $(eval $(1)_all_dependencies:=$(call int_get_all_dependencies,$(1),$($($(1)_type)_native_toolchain) $($(1)_dependencies)))\n $(foreach dep,$($(1)_all_dependencies),$(eval $(1)_build_id_deps+=$(dep)-$($(dep)_version)-$($(dep)_recipe_hash)))\n-$(eval $(1)_build_id_long:=$(1)-$($(1)_version)-$($(1)_recipe_hash) $($(1)_build_id_deps))\n+$(eval $(1)_build_id_long:=$(1)-$($(1)_version)-$($(1)_recipe_hash)-$(release_type) $($(1)_build_id_deps))\n $(eval $(1)_build_id:=$(shell echo -n \"$($(1)_build_id_long)\" | $(build_SHA256SUM) | cut -c-$(HASH_LENGTH)))\n final_build_id_long+=$($(package)_build_id_long)\n \n@@ -83,33 +83,40 @@ endef\n \n define int_config_attach_build_config\n $(eval $(call $(1)_set_vars,$(1)))\n-$(1)_cflags+=$($(1)_cflags_$(host_arch))\n-$(1)_cflags+=$($(1)_cflags_$(host_os))\n-$(1)_cflags+=$($(1)_cflags_$(host_arch)_$(host_os))\n-\n-$(1)_cxxflags+=$($(1)_cxxflags_$(host_arch))\n-$(1)_cxxflags+=$($(1)_cxxflags_$(host_os))\n-$(1)_cxxflags+=$($(1)_cxxflags_$(host_arch)_$(host_os))\n-\n-$(1)_cppflags+=$($(1)_cppflags_$(host_arch))\n-$(1)_cppflags+=$($(1)_cppflags_$(host_os))\n-$(1)_cppflags+=$($(1)_cppflags_$(host_arch)_$(host_os))\n-\n-$(1)_ldflags+=$($(1)_ldflags_$(host_arch))\n-$(1)_ldflags+=$($(1)_ldflags_$(host_os))\n-$(1)_ldflags+=$($(1)_ldflags_$(host_arch)_$(host_os))\n-\n-$(1)_build_opts+=$$($(1)_build_opts_$(host_arch))\n-$(1)_build_opts+=$$($(1)_build_opts_$(host_os))\n-$(1)_build_opts+=$$($(1)_build_opts_$(host_arch)_$(host_os))\n-\n-$(1)_config_opts+=$$($(1)_config_opts_$(host_arch))\n-$(1)_config_opts+=$$($(1)_config_opts_$(host_os))\n-$(1)_config_opts+=$$($(1)_config_opts_$(host_arch)_$(host_os))\n-\n-$(1)_config_env+=$($(1)_config_env_$(host_arch))\n-$(1)_config_env+=$($(1)_config_env_$(host_os))\n-$(1)_config_env+=$($(1)_config_env_$(host_arch)_$(host_os))\n+$(1)_cflags+=$($(1)_cflags_$(release_type))\n+$(1)_cflags+=$($(1)_cflags_$(host_arch)) $($(1)_cflags_$(host_arch)_$(release_type))\n+$(1)_cflags+=$($(1)_cflags_$(host_os)) $($(1)_cflags_$(host_os)_$(release_type))\n+$(1)_cflags+=$($(1)_cflags_$(host_arch)_$(host_os)) $($(1)_cflags_$(host_arch)_$(host_os)_$(release_type))\n+\n+$(1)_cxxflags+=$($(1)_cxxflags_$(release_type))\n+$(1)_cxxflags+=$($(1)_cxxflags_$(host_arch)) $($(1)_cxxflags_$(host_arch)_$(release_type))\n+$(1)_cxxflags+=$($(1)_cxxflags_$(host_os)) $($(1)_cxxflags_$(host_os)_$(release_type))\n+$(1)_cxxflags+=$($(1)_cxxflags_$(host_arch)_$(host_os)) $($(1)_cxxflags_$(host_arch)_$(host_os)_$(release_type))\n+\n+$(1)_cppflags+=$($(1)_cppflags_$(release_type))\n+$(1)_cppflags+=$($(1)_cppflags_$(host_arch)) $($(1)_cppflags_$(host_arch)_$(release_type))\n+$(1)_cppflags+=$($(1)_cppflags_$(host_os)) $($(1)_cppflags_$(host_os)_$(release_type))\n+$(1)_cppflags+=$($(1)_cppflags_$(host_arch)_$(host_os)) $($(1)_cppflags_$(host_arch)_$(host_os)_$(release_type))\n+\n+$(1)_ldflags+=$($(1)_ldflags_$(release_type))\n+$(1)_ldflags+=$($(1)_ldflags_$(host_arch)) $($(1)_ldflags_$(host_arch)_$(release_type))\n+$(1)_ldflags+=$($(1)_ldflags_$(host_os)) $($(1)_ldflags_$(host_os)_$(release_type))\n+$(1)_ldflags+=$($(1)_ldflags_$(host_arch)_$(host_os)) $($(1)_ldflags_$(host_arch)_$(host_os)_$(release_type))\n+\n+$(1)_build_opts+=$$($(1)_build_opts_$(release_type))\n+$(1)_build_opts+=$$($(1)_build_opts_$(host_arch)) $$($(1)_build_opts_$(host_arch)_$(release_type))\n+$(1)_build_opts+=$$($(1)_build_opts_$(host_os)) $$($(1)_build_opts_$(host_os)_$(release_type))\n+$(1)_build_opts+=$$($(1)_build_opts_$(host_arch)_$(host_os)) $$($(1)_build_opts_$(host_arch)_$(host_os)_$(release_type))\n+\n+$(1)_config_opts+=$$($(1)_config_opts_$(release_type))\n+$(1)_config_opts+=$$($(1)_config_opts_$(host_arch)) $$($(1)_config_opts_$(host_arch)_$(release_type))\n+$(1)_config_opts+=$$($(1)_config_opts_$(host_os)) $$($(1)_config_opts_$(host_os)_$(release_type))\n+$(1)_config_opts+=$$($(1)_config_opts_$(host_arch)_$(host_os)) $$($(1)_config_opts_$(host_arch)_$(host_os)_$(release_type))\n+\n+$(1)_config_env+=$$($(1)_config_env_$(release_type))\n+$(1)_config_env+=$($(1)_config_env_$(host_arch)) $($(1)_config_env_$(host_arch)_$(release_type))\n+$(1)_config_env+=$($(1)_config_env_$(host_os)) $($(1)_config_env_$(host_os)_$(release_type))\n+$(1)_config_env+=$($(1)_config_env_$(host_arch)_$(host_os)) $($(1)_config_env_$(host_arch)_$(host_os)_$(release_type))\n \n $(1)_config_env+=PKG_CONFIG_LIBDIR=$($($(1)_type)_prefix)/lib/pkgconfig\n $(1)_config_env+=PKG_CONFIG_PATH=$($($(1)_type)_prefix)/share/pkgconfig"
      },
      {
        "sha": "8d718eba17be837c91e492ad5b911933e5a69774",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -3,6 +3,14 @@ OSX_SDK_VERSION=10.7\n OSX_SDK=$(SDK_PATH)/MacOSX$(OSX_SDK_VERSION).sdk\n darwin_CC=clang -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK)\n darwin_CXX=clang++ -target $(host) -mmacosx-version-min=$(OSX_MIN_VERSION) --sysroot $(OSX_SDK)\n-darwin_CFLAGS=-pipe -O2\n+\n+darwin_CFLAGS=-pipe\n darwin_CXXFLAGS=$(darwin_CFLAGS)\n+\n+darwin_release_CFLAGS=-O2\n+darwin_release_CXXFLAGS=$(darwin_release_CFLAGS)\n+\n+darwin_debug_CFLAGS=-O1\n+darwin_debug_CXXFLAGS=$(darwin_debug_CFLAGS)\n+\n darwin_native_toolchain=native_cctools"
      },
      {
        "sha": "6f60d6b3fd004e9317db4717bf7dcb68b9dd43eb",
        "filename": "depends/hosts/default.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/hosts/default.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/hosts/default.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/default.mk?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -11,13 +11,16 @@ default_host_NM = $(host_toolchain)nm\n define add_host_tool_func\n $(host_os)_$1?=$$(default_host_$1)\n $(host_arch)_$(host_os)_$1?=$$($(host_os)_$1)\n+$(host_arch)_$(host_os)_$(release_type)_$1?=$$($(host_os)_$1)\n host_$1=$$($(host_arch)_$(host_os)_$1)\n endef\n \n define add_host_flags_func\n $(host_arch)_$(host_os)_$1 += $($(host_os)_$1)\n+$(host_arch)_$(host_os)_$(release_type)_$1 += $($(host_os)_$(release_type)_$1)\n host_$1 = $$($(host_arch)_$(host_os)_$1)\n+host_$(release_type)_$1 = $$($(host_arch)_$(host_os)_$(release_type)_$1)\n endef\n \n $(foreach tool,CC CXX AR RANLIB STRIP NM LIBTOOL OTOOL INSTALL_NAME_TOOL,$(eval $(call add_host_tool_func,$(tool))))\n-$(foreach flags,CFLAGS CXXFLAGS LDFLAGS, $(eval $(call add_host_flags_func,$(flags))))\n+$(foreach flags,CFLAGS CXXFLAGS CPPFLAGS LDFLAGS, $(eval $(call add_host_flags_func,$(flags))))"
      },
      {
        "sha": "b13a0f1ad714ae19ec7fc4b68d162095b9c62255",
        "filename": "depends/hosts/linux.mk",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/hosts/linux.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/hosts/linux.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/linux.mk?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -1,6 +1,14 @@\n-linux_CFLAGS=-pipe -O2\n+linux_CFLAGS=-pipe\n linux_CXXFLAGS=$(linux_CFLAGS)\n \n+linux_release_CFLAGS=-O2\n+linux_release_CXXFLAGS=$(linux_release_CFLAGS)\n+\n+linux_debug_CFLAGS=-O1\n+linux_debug_CXXFLAGS=$(linux_debug_CFLAGS)\n+\n+linux_debug_CPPFLAGS=-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC\n+\n ifeq (86,$(findstring 86,$(build_arch)))\n i686_linux_CC=gcc -m32\n i686_linux_CXX=g++ -m32"
      },
      {
        "sha": "dbfb62fdcf98695d515e56897ee488703e002054",
        "filename": "depends/hosts/mingw32.mk",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/hosts/mingw32.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/hosts/mingw32.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/mingw32.mk?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -1,2 +1,10 @@\n-mingw32_CFLAGS=-pipe -O2\n+mingw32_CFLAGS=-pipe\n mingw32_CXXFLAGS=$(mingw32_CFLAGS)\n+\n+mingw32_release_CFLAGS=-O2\n+mingw32_release_CXXFLAGS=$(mingw32_release_CFLAGS)\n+\n+mingw32_debug_CFLAGS=-O1\n+mingw32_debug_CXXFLAGS=$(mingw32_debug_CFLAGS)\n+\n+mingw32_debug_CPPFLAGS=-D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC"
      },
      {
        "sha": "98ed3de77270383851139d650bef4e6e9288be08",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -6,8 +6,10 @@ $(package)_sha256_hash=fff00023dd79486d444c8e29922f4072e1d451fc5a4d2b6075852ead7\n $(package)_patches=darwin_boost_atomic-1.patch darwin_boost_atomic-2.patch\n \n define $(package)_set_vars\n+$(package)_config_opts_release=variant=release\n+$(package)_config_opts_debug=variant=debug\n $(package)_config_opts=--layout=tagged --build-type=complete --user-config=user-config.jam\n-$(package)_config_opts+=variant=release threading=multi link=static -sNO_BZIP2=1 -sNO_ZLIB=1\n+$(package)_config_opts+=threading=multi link=static -sNO_BZIP2=1 -sNO_ZLIB=1\n $(package)_config_opts_linux=threadapi=pthread runtime-link=shared\n $(package)_config_opts_darwin=--toolset=darwin-4.2.1 runtime-link=shared\n $(package)_config_opts_mingw32=binary-format=pe target-os=windows threadapi=win32 runtime-link=static\n@@ -26,7 +28,7 @@ endef\n define $(package)_preprocess_cmds\n   patch -p2 < $($(package)_patch_dir)/darwin_boost_atomic-1.patch && \\\n   patch -p2 < $($(package)_patch_dir)/darwin_boost_atomic-2.patch && \\\n-  echo \"using $(boost_toolset_$(host_os)) : : $($(package)_cxx) : <cxxflags>\\\"$($(package)_cxxflags)\\\" <linkflags>\\\"$($(package)_ldflags)\\\" <archiver>\\\"$(boost_archiver_$(host_os))\\\" <striper>\\\"$(host_STRIP)\\\"  <ranlib>\\\"$(host_RANLIB)\\\" <rc>\\\"$(host_WINDRES)\\\" : ;\" > user-config.jam\n+  echo \"using $(boost_toolset_$(host_os)) : : $($(package)_cxx) : <cxxflags>\\\"$($(package)_cxxflags) $($(package)_cppflags)\\\" <linkflags>\\\"$($(package)_ldflags)\\\" <archiver>\\\"$(boost_archiver_$(host_os))\\\" <striper>\\\"$(host_STRIP)\\\"  <ranlib>\\\"$(host_RANLIB)\\\" <rc>\\\"$(host_WINDRES)\\\" : ;\" > user-config.jam\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "00101f1b91af4ed074dc8dfd9179afeb53689bb1",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -8,7 +8,7 @@ define $(package)_set_vars\n $(package)_build_opts=CC=\"$($(package)_cc)\"\n $(package)_build_opts_darwin=OS=Darwin\n $(package)_build_opts_mingw32=-f Makefile.mingw\n-$(package)_build_env+=CFLAGS=\"$($(package)_cflags)\" AR=\"$($(package)_ar)\"\n+$(package)_build_env+=CFLAGS=\"$($(package)_cflags) $($(package)_cppflags)\" AR=\"$($(package)_ar)\"\n endef\n \n define $(package)_preprocess_cmds"
      },
      {
        "sha": "3ccdaf6f2fb432ad047d1fb644fa43e0cb4294ca",
        "filename": "depends/packages/openssl.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -9,7 +9,7 @@ $(package)_config_env=AR=\"$($(package)_ar)\" RANLIB=\"$($(package)_ranlib)\" CC=\"$(\n $(package)_config_opts=--prefix=$(host_prefix) --openssldir=$(host_prefix)/etc/openssl no-zlib no-shared no-dso\n $(package)_config_opts+=no-krb5 no-camellia no-capieng no-cast no-cms no-dtls1 no-gost no-gmp no-heartbeats no-idea no-jpake no-md2\n $(package)_config_opts+=no-mdc2 no-rc5 no-rdrand no-rfc3779 no-rsax no-sctp no-seed no-sha0 no-static_engine no-whirlpool no-rc2 no-rc4 no-ssl3\n-$(package)_config_opts+=$($(package)_cflags)\n+$(package)_config_opts+=$($(package)_cflags) $($(package)_cppflags)\n $(package)_config_opts_x86_64_linux=-fPIC linux-x86_64\n $(package)_config_opts_arm_linux=-fPIC linux-generic32\n $(package)_config_opts_x86_64_darwin=darwin64-x86_64-cc"
      },
      {
        "sha": "5fbab57dd422554017fb424f855c326b86e63a85",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -10,8 +10,9 @@ $(package)_qt_libs=corelib network widgets gui plugins testlib\n $(package)_patches=mac-qmake.conf fix-xcb-include-order.patch qt5-tablet-osx.patch\n \n define $(package)_set_vars\n-$(package)_config_opts  = -release -opensource -confirm-license\n-$(package)_config_opts += -no-audio-backend -no-sql-tds -no-glib -no-icu\n+$(package)_config_opts_release = -release\n+$(package)_config_opts_debug   = -debug\n+$(package)_config_opts += -opensource -confirm-license -no-audio-backend -no-sql-tds -no-glib -no-icu\n $(package)_config_opts += -no-cups -no-iconv -no-gif -no-audio-backend -no-freetype\n $(package)_config_opts += -no-sql-sqlite -no-nis -no-cups -no-iconv -no-pch\n $(package)_config_opts += -no-gif -no-feature-style-plastique\n@@ -53,7 +54,13 @@ define $(package)_preprocess_cmds\n   cp -f qtbase/mkspecs/macx-clang/qplatformdefs.h qtbase/mkspecs/macx-clang-linux/ &&\\\n   cp -f $($(package)_patch_dir)/mac-qmake.conf qtbase/mkspecs/macx-clang-linux/qmake.conf && \\\n   patch -p1 < $($(package)_patch_dir)/fix-xcb-include-order.patch && \\\n-  patch -p1 < $($(package)_patch_dir)/qt5-tablet-osx.patch\n+  patch -p1 < $($(package)_patch_dir)/qt5-tablet-osx.patch && \\\n+  echo \"QMAKE_CFLAGS     += $($(package)_cflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  echo \"QMAKE_CXXFLAGS   += $($(package)_cxxflags) $($(package)_cppflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  echo \"QMAKE_LFLAGS     += $($(package)_ldflags)\" >> qtbase/mkspecs/common/gcc-base.conf && \\\n+  sed -i.old \"s|QMAKE_CFLAGS            = |QMAKE_CFLAGS            = $($(package)_cflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n+  sed -i.old \"s|QMAKE_LFLAGS            = |QMAKE_LFLAGS            = $($(package)_ldflags) |\" qtbase/mkspecs/win32-g++/qmake.conf && \\\n+  sed -i.old \"s|QMAKE_CXXFLAGS          = |QMAKE_CXXFLAGS            = $($(package)_cxxflags) $($(package)_cppflags) |\" qtbase/mkspecs/win32-g++/qmake.conf\n endef\n \n define $(package)_config_cmds"
      },
      {
        "sha": "a71f55dd2684251e3e3b0916f48e0562b96eab5d",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -839,7 +839,8 @@ class CTransactionSignatureSerializer {\n                 itBegin = it;\n             }\n         }\n-        s.write((char*)&itBegin[0], it-itBegin);\n+        if (itBegin != scriptCode.end())\n+            s.write((char*)&itBegin[0], it-itBegin);\n     }\n \n     /** Serialize an input of txTo */"
      },
      {
        "sha": "8a984304f4e66a6d63f75019b4225556bf467474",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41150d601df8bbbec9e6f0b7fb4d3fc569692522/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41150d601df8bbbec9e6f0b7fb4d3fc569692522/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "patch": "@@ -16,7 +16,8 @@ BOOST_AUTO_TEST_SUITE(getarg_tests)\n static void ResetArgs(const std::string& strArg)\n {\n     std::vector<std::string> vecArg;\n-    boost::split(vecArg, strArg, boost::is_space(), boost::token_compress_on);\n+    if (strArg.size())\n+      boost::split(vecArg, strArg, boost::is_space(), boost::token_compress_on);\n \n     // Insert dummy executable name:\n     vecArg.insert(vecArg.begin(), \"testbitcoin\");"
      }
    ]
  },
  {
    "sha": "a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjVmZDZiZTEzOGZmMmJmZjdlMmFkNmExYTc4OWRiNTIzYzAxOTNm",
    "commit": {
      "author": {
        "name": "SergioDemianLerner",
        "email": "Sergio.d.Lerner@gmail.com",
        "date": "2014-09-04T19:23:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-29T11:03:22Z"
      },
      "message": "Switch testing framework from MAIN to new UNITTEST network\n\nUNITTEST inherites from MAIN but allows synamically changing its parameters using the ModifiableParams() interface",
      "tree": {
        "sha": "331eae7469995c3a8318df70f1654c7116fd1bd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/331eae7469995c3a8318df70f1654c7116fd1bd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/comments",
    "author": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41150d601df8bbbec9e6f0b7fb4d3fc569692522"
      }
    ],
    "stats": {
      "total": 332,
      "additions": 329,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d376961996d0da1ec5f265c6d60470dba0ce69cf",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
        "patch": "@@ -51,6 +51,7 @@ BITCOIN_TESTS =\\\n   test/key_tests.cpp \\\n   test/main_tests.cpp \\\n   test/miner_tests.cpp \\\n+  test/blockv2_tests.cpp \\\n   test/mruset_tests.cpp \\\n   test/multisig_tests.cpp \\\n   test/netbase_tests.cpp \\"
      },
      {
        "sha": "d924a6a2b05c5165743000d30f0a27665478446a",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
        "patch": "@@ -214,8 +214,50 @@ class CRegTestParams : public CTestNetParams {\n };\n static CRegTestParams regTestParams;\n \n+//\n+// Regression test\n+//\n+class CUnitTestParams : public CMainParams, public CModifiableParams {\n+public:\n+    CUnitTestParams() {\n+        networkID = CBaseChainParams::UNITTEST;\n+        strNetworkID = \"unittest\";\n+        nDefaultPort = 18445;\n+        vFixedSeeds.clear();\n+        vSeeds.clear();  // Regtest mode doesn't have any DNS seeds.\n+\n+        fRequireRPCPassword = false;\n+        fMiningRequiresPeers = false;\n+        fDefaultCheckMemPool = true;\n+        fAllowMinDifficultyBlocks = false;\n+        fMineBlocksOnDemand = true;\n+        fSkipProofOfWorkCheck = false;\n+    }\n+    virtual bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n+protected:\n+    bool fSkipProofOfWorkCheck;\n+public:\n+    // Published setters to allow changing values in unit test cases\n+    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }\n+    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }\n+    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)  { nRejectBlockOutdatedMajority=anRejectBlockOutdatedMajority; }\n+    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)  { nToCheckBlockUpgradeMajority=anToCheckBlockUpgradeMajority; }\n+    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)  { fDefaultCheckMemPool=aDefaultCheckMemPool; }\n+    virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks) {  fAllowMinDifficultyBlocks=aAllowMinDifficultyBlocks; }\n+    virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck) { fSkipProofOfWorkCheck = aSkipProofOfWorkCheck; }\n+};\n+static CUnitTestParams unitTestParams;\n+\n+\n static CChainParams *pCurrentParams = 0;\n \n+CModifiableParams *ModifiableParams()\n+{\n+   assert(pCurrentParams);\n+   assert(pCurrentParams==&unitTestParams);\n+   return (CModifiableParams*)&unitTestParams;\n+}\n+\n const CChainParams &Params() {\n     assert(pCurrentParams);\n     return *pCurrentParams;\n@@ -229,6 +271,8 @@ CChainParams &Params(CBaseChainParams::Network network) {\n             return testNetParams;\n         case CBaseChainParams::REGTEST:\n             return regTestParams;\n+        case CBaseChainParams::UNITTEST:\n+            return unitTestParams;\n         default:\n             assert(false && \"Unimplemented network\");\n             return mainParams;"
      },
      {
        "sha": "171a590a5f37cae1718b4871196077e766c08200",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
        "patch": "@@ -61,6 +61,8 @@ class CChainParams\n     bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n     /* Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n+    /* Skip proof-of-work check: allow mining of any difficulty block */\n+    virtual bool SkipProofOfWorkCheck() const { return false; }\n     /* Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n@@ -105,6 +107,24 @@ class CChainParams\n     bool fMineBlocksOnDemand;\n };\n \n+/** Modifiable parameters interface is used by test cases to adapt the parameters in order\n+*** to test specific features more easily. Test cases should always restore the previous\n+*** values after finalization.\n+**/\n+\n+class CModifiableParams {\n+public:\n+    // Published setters to allow changing values in unit test cases\n+    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval) =0;\n+    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)=0;\n+    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)=0;\n+    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)=0;\n+    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)=0;\n+    virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks)=0;\n+    virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck)=0;\n+};\n+\n+\n /**\n  * Return the currently selected parameters. This won't change after app startup\n  * outside of the unit tests.\n@@ -114,6 +134,9 @@ const CChainParams &Params();\n /** Return parameters for the given network. */\n CChainParams &Params(CBaseChainParams::Network network);\n \n+/** Get modifyable network parameters (UNITTEST only) */\n+CModifiableParams *ModifiableParams();\n+\n /** Sets the params returned by Params() to those for the given network. */\n void SelectParams(CBaseChainParams::Network network);\n "
      },
      {
        "sha": "e9d63197bd398cff251b3f34eb8297640e53eca5",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
        "patch": "@@ -57,6 +57,20 @@ class CBaseRegTestParams : public CBaseTestNetParams\n };\n static CBaseRegTestParams regTestParams;\n \n+//\n+// Unit test\n+//\n+class CBaseUnitTestParams : public CBaseMainParams\n+{\n+public:\n+    CBaseUnitTestParams()\n+    {\n+        networkID = CBaseChainParams::UNITTEST;\n+        strDataDir = \"unittest\";\n+    }\n+};\n+static CBaseUnitTestParams unitTestParams;\n+\n static CBaseChainParams* pCurrentBaseParams = 0;\n \n const CBaseChainParams& BaseParams()\n@@ -77,6 +91,9 @@ void SelectBaseParams(CBaseChainParams::Network network)\n     case CBaseChainParams::REGTEST:\n         pCurrentBaseParams = &regTestParams;\n         break;\n+    case CBaseChainParams::UNITTEST:\n+        pCurrentBaseParams = &unitTestParams;\n+        break;\n     default:\n         assert(false && \"Unimplemented network\");\n         return;"
      },
      {
        "sha": "cc154cf5012f1147c0c4351aefe0b166ee2f82de",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
        "patch": "@@ -19,6 +19,7 @@ class CBaseChainParams\n         MAIN,\n         TESTNET,\n         REGTEST,\n+        UNITTEST,\n \n         MAX_NETWORK_TYPES\n     };"
      },
      {
        "sha": "9a6bc05e63d916ece811fbbe90ebe2b2ab58bfb3",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
        "patch": "@@ -88,6 +88,8 @@ namespace Checkpoints {\n             return dataTestnet;\n         else if (Params().NetworkID() == CBaseChainParams::MAIN)\n             return data;\n+        else if (Params().NetworkID() == CBaseChainParams::UNITTEST) // UnitTest share the same checkpoints as MAIN\n+            return data;\n         else\n             return dataRegtest;\n     }"
      },
      {
        "sha": "4bd8fd6e3621114c2e5e62bc6caf481289d12ed0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
        "patch": "@@ -2304,6 +2304,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n+        if (!Params().SkipProofOfWorkCheck())\n         if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n             return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n                              REJECT_INVALID, \"bad-diffbits\");"
      },
      {
        "sha": "d50222849cc0c0bc4acfce88a93ecb737b66a462",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
        "patch": "@@ -81,6 +81,10 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bool fNegative;\n     bool fOverflow;\n     uint256 bnTarget;\n+\n+    if (Params().SkipProofOfWorkCheck())\n+       return true;\n+\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range"
      },
      {
        "sha": "c298c805dae375a5c4e0c2edb35374cbaae7706b",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
        "patch": "@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that generated keys match test vectors\n@@ -243,7 +243,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     CTxDestination nodest = CNoDestination();\n     BOOST_CHECK(!dummyAddr.Set(nodest));\n \n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that base58 parsing code is robust against a variety of corrupted data"
      },
      {
        "sha": "0d59c8761b5025fa141213a3f0706b3e78f72c4c",
        "filename": "src/test/blockv2_tests.cpp",
        "status": "added",
        "additions": 232,
        "deletions": 0,
        "changes": 232,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/test/blockv2_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/test/blockv2_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockv2_tests.cpp?ref=a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
        "patch": "@@ -0,0 +1,232 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+        pblock->nVersion = 2;\n+        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+        pblock->nNonce = 0;\n+}\n+\n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+{\n+        SetEmptyBlock(pblock);\n+\n+        // Add the coinbase\n+        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+\n+        if (addHeight)\n+            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n+            else\n+            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+\n+        txCoinbase.vout[0].scriptPubKey = CScript();\n+        pblock->vtx[0] = CTransaction(txCoinbase);\n+        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so\n+            // we must recompute the coinbase subsidy if we reach the boundary.\n+\n+            // preserve parent hash\n+            uint256 prevParent = pblock->hashPrevBlock;\n+            delete pblocktemplate;\n+            pblocktemplate = CreateNewBlock(scriptPubKey);\n+            pblock = &pblocktemplate->block; // pointer for convenience\n+            pblock->hashPrevBlock = prevParent;\n+        }\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::UNITTEST);\n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+\n+    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+    // for each testcase that requires it.\n+\n+    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\n+\n+    LogPrintf(\"Blockv2test testcase starts\\n\");\n+\n+    CBlockTemplate *pblocktemplate;\n+    CScript script;\n+    uint256 hash;\n+    int PreviousHeight;\n+\n+\n+    LOCK(cs_main);\n+\n+\n+    // Simple block creation, nothing special yet.\n+    pblocktemplate = CreateNewBlock(scriptPubKey);\n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+\n+    LogPrintf(\"Blockv2test block v1 add begin\\n\");\n+    // First create a block v1, check that it is accepted. The block has an invalid height\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n+    pblock->nVersion = 1;\n+    CValidationState state1;\n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state1, NULL, pblock));\n+    BOOST_CHECK(state1.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+    pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+\n+\n+    // Now create exactly 1000 blocks v2\n+\n+    // First check that the supermajority threshold is exactly 1000 blocks\n+    BOOST_CHECK(Params().ToCheckBlockUpgradeMajority()==1000);  //\n+    BOOST_CHECK(Params().EnforceBlockUpgradeMajority()==750);\n+    BOOST_CHECK(Params().RejectBlockOutdatedMajority()==950);\n+\n+    // Over the last 1000 blocks, 750 blocks must be v2 to switch to v2-only mode.\n+    // Here we're testing only the last 750, not any subset.\n+\n+    LogPrintf(\"Blockv2test BIP30 repetition begin\\n\");\n+\n+    // First, if we try to add a block v2 with the same coinbase tx, we should get\n+    // \"bad-txns-BIP30\" because the coinbase tx has the same hash as the previous.\n+    // Unluckily, even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n+    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost.\n+    // We verify instead that the chain height has not been incremented.\n+\n+    CValidationState state7;\n+    PreviousHeight = chainActive.Height();\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000); //\n+    pblock->nVersion = 2;\n+    BOOST_CHECK(ProcessBlock(state7, NULL, pblock)); // should we care about the return value?\n+    BOOST_CHECK(state7.IsValid());\n+    BOOST_CHECK(PreviousHeight == chainActive.Height()); // we check the block has not been added.\n+\n+    LogPrintf(\"Blockv2test 750 v2 blocks  begin\\n\");\n+    for (int i=0;i<750;i++)\n+    {\n+\n+        LogPrintf(\"Blockv2test block %d begin\\n\",i);\n+\n+        CheckSubsidyHalving(pblocktemplate,pblock);\n+\n+        // We add a value to the height to make is NOT equal to the actual height.\n+        SetBlockDefaultAttributesAndHeight(pblock,true,1000); // blocks version 2 without height are allowed! for only 750 blocks\n+        pblock->nVersion = 2;\n+        CValidationState state;\n+\n+        PreviousHeight = chainActive.Height();\n+        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+        BOOST_CHECK(state.IsValid());\n+        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+    LogPrintf(\"Blockv2test v2 without height rejected begin\\n\");\n+\n+    // Now we try to add a block v2, with an invalid height and it should be rejected. We use 2000 because is not in the range [1000..1750].\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    SetBlockDefaultAttributesAndHeight(pblock,true,2000); //\n+    pblock->nVersion = 2;\n+    CValidationState state0;\n+    BOOST_CHECK(ProcessBlock(state0, NULL, pblock)==false);\n+    BOOST_CHECK(!state0.IsValid());\n+    BOOST_CHECK(state0.GetRejectReason()==\"bad-cb-height\");\n+    // Do not update parent since block has failed\n+\n+    LogPrintf(\"Blockv2test v2 with height accepted begin\\n\");\n+\n+\n+    // Now we add a block with height, must be ok.\n+    for (int i=0;i<200;i++)\n+    {\n+\n+        LogPrintf(\"Blockv2test v2block %d begin\\n\",i);\n+        CheckSubsidyHalving(pblocktemplate,pblock);\n+        SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+        pblock->nVersion = 2;\n+        CValidationState state;\n+        PreviousHeight = chainActive.Height();\n+        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+        BOOST_CHECK(state.IsValid());\n+        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+\n+    LogPrintf(\"Blockv2test block v1 rejected\\n\");\n+    // Now we add 200 additional blocks, until we get 950 (the threshold were v1 blocks are not accepted anymore)\n+    // Now we try to add a block v1, it should be rejected, even if it hash the height field\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+    pblock->nVersion = 1;\n+    CValidationState state2;\n+    BOOST_CHECK(ProcessBlock(state2, NULL, pblock)==false);\n+    BOOST_CHECK(!state2.IsValid());\n+    BOOST_CHECK(state2.GetRejectReason()==\"bad-version\");\n+    // Do not update parent since block has failed\n+\n+\n+\n+    // Some other missing tests, added here as bonus...\n+\n+    // Block time too old check\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+    pblock->nVersion = 2;\n+    pblock->nTime = chainActive.Tip()->GetMedianTimePast()-1;\n+    CValidationState state4;\n+    BOOST_CHECK(ProcessBlock(state4, NULL, pblock)==false);\n+    BOOST_CHECK(!state4.IsValid());\n+    BOOST_CHECK(state4.GetRejectReason()==\"time-too-old\");\n+    // Do not update parent since block has failed\n+\n+    // Adding a non-final coinbase, must modify coinbase\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    SetEmptyBlock(pblock);\n+    // Use a mutable coinbase to change nLockTime and  nSequence\n+    CMutableTransaction txCoinbase(pblock->vtx[0]);\n+    txCoinbase.vin[0].scriptSig = (CScript() << chainActive.Height() << 0);\n+    txCoinbase.nLockTime = LOCKTIME_THRESHOLD-1; // refers to height\n+    txCoinbase.vin[0].nSequence = 1; // non-zero sequence\n+    pblock->vtx[0] = CTransaction(txCoinbase);\n+    pblock->nVersion = 2;\n+    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+    CValidationState state5;\n+    BOOST_CHECK(ProcessBlock(state5, NULL, pblock)==false);\n+    BOOST_CHECK(!state5.IsValid());\n+    BOOST_CHECK(state5.GetRejectReason()==\"bad-txns-nonfinal\");\n+    // Do not update parent since block has failed\n+\n+\n+    delete pblocktemplate;\n+\n+    ModifiableParams()->setSkipProofOfWorkCheck(false);\n+    LogPrintf(\"Blockv2test testcase ends\\n\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(Blockv2testcase)\n+{\n+    Blockv2test();\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "bad5c13ac2b67541fddfd0d602d00317b404a2bb",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
        "patch": "@@ -253,6 +253,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);\n+    mempool.clear();\n \n     BOOST_FOREACH(CTransaction *tx, txFirst)\n         delete tx;"
      },
      {
        "sha": "6e5f0e3facc90bbfbfd8eb76cbbaf6db3dc807a1",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a25fd6be138ff2bff7e2ad6a1a789db523c0193f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
        "patch": "@@ -31,7 +31,7 @@ struct TestingSetup {\n \n     TestingSetup() {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n-        SelectParams(CBaseChainParams::MAIN);\n+        SelectParams(CBaseChainParams::UNITTEST);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();"
      }
    ]
  },
  {
    "sha": "5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTJlN2ZjYjk5NzM4ZDkyNTRkNDAzMGQ1M2U0ZjcxMWIyZmM1ZWUw",
    "commit": {
      "author": {
        "name": "SergioDemianLerner",
        "email": "Sergio.d.Lerner@gmail.com",
        "date": "2014-09-09T16:29:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-29T11:03:23Z"
      },
      "message": "Suggested corrections on comments, variable names.\nAlso new test case testing the PoW skip in UNITTEST.",
      "tree": {
        "sha": "29771cbc64ca959ec8446dbed7436ac44a86475f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29771cbc64ca959ec8446dbed7436ac44a86475f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0/comments",
    "author": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a25fd6be138ff2bff7e2ad6a1a789db523c0193f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a25fd6be138ff2bff7e2ad6a1a789db523c0193f"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 91,
      "deletions": 48
    },
    "files": [
      {
        "sha": "8a00da0bb51fad9055cb4994b85a87e0d84b16dd",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0",
        "patch": "@@ -215,7 +215,7 @@ class CRegTestParams : public CTestNetParams {\n static CRegTestParams regTestParams;\n \n //\n-// Regression test\n+// Unit test\n //\n class CUnitTestParams : public CMainParams, public CModifiableParams {\n public:\n@@ -242,9 +242,9 @@ class CUnitTestParams : public CMainParams, public CModifiableParams {\n     virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }\n     virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)  { nRejectBlockOutdatedMajority=anRejectBlockOutdatedMajority; }\n     virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)  { nToCheckBlockUpgradeMajority=anToCheckBlockUpgradeMajority; }\n-    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)  { fDefaultCheckMemPool=aDefaultCheckMemPool; }\n-    virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks) {  fAllowMinDifficultyBlocks=aAllowMinDifficultyBlocks; }\n-    virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck) { fSkipProofOfWorkCheck = aSkipProofOfWorkCheck; }\n+    virtual void setDefaultCheckMemPool(bool afDefaultCheckMemPool)  { fDefaultCheckMemPool=afDefaultCheckMemPool; }\n+    virtual void setAllowMinDifficultyBlocks(bool afAllowMinDifficultyBlocks) {  fAllowMinDifficultyBlocks=afAllowMinDifficultyBlocks; }\n+    virtual void setSkipProofOfWorkCheck(bool afSkipProofOfWorkCheck) { fSkipProofOfWorkCheck = afSkipProofOfWorkCheck; }\n };\n static CUnitTestParams unitTestParams;\n "
      },
      {
        "sha": "7e60fd4ff9ec8baadc4e0ae37735836be0d3c36a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0",
        "patch": "@@ -2304,8 +2304,8 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n-        if (!Params().SkipProofOfWorkCheck())\n-        if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        if ((!Params().SkipProofOfWorkCheck()) &&\n+           (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n             return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n                              REJECT_INVALID, \"bad-diffbits\");\n "
      },
      {
        "sha": "96c0df5e6b6fbc5cbcd4a3464709e079a90de7a2",
        "filename": "src/test/blockv2_tests.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 42,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0/src/test/blockv2_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0/src/test/blockv2_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockv2_tests.cpp?ref=5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0",
        "patch": "@@ -9,33 +9,34 @@\n \n #include <boost/test/unit_test.hpp>\n \n-// Tests the majority rule which states that after 1000 v2 blocks no v1 block can go\n+// This test cheecks the majority rule which states that after 1000 v2 blocks no new v1 block can be part of that branch.\n+\n BOOST_AUTO_TEST_SUITE(blockv2_tests)\n \n static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n \n static void SetEmptyBlock(CBlock * pblock)\n {\n-        pblock->nVersion = 2;\n-        pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n-        pblock->nNonce = 0;\n+    pblock->nVersion = 2;\n+    pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+    pblock->nNonce = 0;\n }\n \n-static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int difValue)\n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int heightDifference)\n {\n-        SetEmptyBlock(pblock);\n+    SetEmptyBlock(pblock);\n \n-        // Add the coinbase\n-        CMutableTransaction txCoinbase(pblock->vtx[0]);\n+    // Add the coinbase\n+    CMutableTransaction txCoinbase(pblock->vtx[0]);\n \n-        if (addHeight)\n-            txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+difValue) << 0);\n-            else\n-            txCoinbase.vin[0].scriptSig = (CScript() << difValue << 0); // At least size 2, this is a protocol spec\n+    if (addHeight)\n+        txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+heightDifference) << 0);\n+        else\n+        txCoinbase.vin[0].scriptSig = (CScript() << heightDifference << 0); // At least size 2, this is a protocol spec\n \n-        txCoinbase.vout[0].scriptPubKey = CScript();\n-        pblock->vtx[0] = CTransaction(txCoinbase);\n-        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+    txCoinbase.vout[0].scriptPubKey = CScript();\n+    pblock->vtx[0] = CTransaction(txCoinbase);\n+    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n }\n \n void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n@@ -44,6 +45,8 @@ void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n         {\n             // The RegTest network has a low subsidy halving interval (150) so\n             // we must recompute the coinbase subsidy if we reach the boundary.\n+            // The unittest network allows modifying this interval. We check it so this\n+            // test can work in any network.\n \n             // preserve parent hash\n             uint256 prevParent = pblock->hashPrevBlock;\n@@ -54,6 +57,22 @@ void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n         }\n }\n \n+void CheckBlockAddedToBestChainSuccessfully(CBlock *pblock)\n+{\n+    int PreviousHeight;\n+    CValidationState state;\n+\n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+    BOOST_CHECK(state.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+\n+    // Previous checks do not assure the current best chain has pblock as tip. It could be the case that a because\n+    // of a malfunction in the chain reorganization code, a reorganization causes an increase of the chain length, but with another tip.\n+    // So we also check that.\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash()==pblock->GetHash());\n+}\n+\n void Blockv2test()\n {\n     assert(Params().NetworkID() == CBaseChainParams::UNITTEST);\n@@ -73,16 +92,17 @@ void Blockv2test()\n     uint256 hash;\n     int PreviousHeight;\n \n-\n     LOCK(cs_main);\n \n-\n     // Simple block creation, nothing special yet.\n     pblocktemplate = CreateNewBlock(scriptPubKey);\n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n \n     LogPrintf(\"Blockv2test block v1 add begin\\n\");\n-    // First create a block v1, check that it is accepted. The block has an invalid height\n+\n+    ////////////////////////////////////////////////////////////////////////////////////////\n+    // First create a block v1, check that it is accepted. The block has an invalid height.\n+    ////////////////////////////////////////////////////////////////////////////////////////\n     SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n     pblock->nVersion = 1;\n     CValidationState state1;\n@@ -93,7 +113,6 @@ void Blockv2test()\n     pblock->hashPrevBlock = pblock->GetHash(); // update parent\n \n \n-    // Now create exactly 1000 blocks v2\n \n     // First check that the supermajority threshold is exactly 1000 blocks\n     BOOST_CHECK(Params().ToCheckBlockUpgradeMajority()==1000);  //\n@@ -105,11 +124,19 @@ void Blockv2test()\n \n     LogPrintf(\"Blockv2test BIP30 repetition begin\\n\");\n \n+    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n     // First, if we try to add a block v2 with the same coinbase tx, we should get\n     // \"bad-txns-BIP30\" because the coinbase tx has the same hash as the previous.\n-    // Unluckily, even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n-    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost.\n-    // We verify instead that the chain height has not been incremented.\n+    // Even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n+    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost. But this\n+    // is the intended behaviour: Receiving a single block can cause zero or multiple blocks to be\n+    // connected, and ActivateBestChain's responsibility is just switching the best block whatsoever.\n+    // Feedback about failures causes a reject message to be sent to the peer from which we received\n+    // the actual block (not necessarily the same as from whom we got the block that caused the reorg),\n+    // for which we remember the peerid.\n+    // Because we cannot access the failure reason here, we just verify instead that the chain\n+    // height has not been incremented.\n+    //////////////////////////////////////////////////////////////////////////////////////////////////////\n \n     CValidationState state7;\n     PreviousHeight = chainActive.Height();\n@@ -121,6 +148,11 @@ void Blockv2test()\n     BOOST_CHECK(PreviousHeight == chainActive.Height()); // we check the block has not been added.\n \n     LogPrintf(\"Blockv2test 750 v2 blocks  begin\\n\");\n+\n+    ////////////////////////////\n+    // Now create 750 v2 blocks\n+    ////////////////////////////\n+\n     for (int i=0;i<750;i++)\n     {\n \n@@ -131,18 +163,17 @@ void Blockv2test()\n         // We add a value to the height to make is NOT equal to the actual height.\n         SetBlockDefaultAttributesAndHeight(pblock,true,1000); // blocks version 2 without height are allowed! for only 750 blocks\n         pblock->nVersion = 2;\n-        CValidationState state;\n \n-        PreviousHeight = chainActive.Height();\n-        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n-        BOOST_CHECK(state.IsValid());\n-        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+        CheckBlockAddedToBestChainSuccessfully(pblock);\n         pblock->hashPrevBlock = pblock->GetHash(); // update parent\n     }\n \n     LogPrintf(\"Blockv2test v2 without height rejected begin\\n\");\n \n-    // Now we try to add a block v2, with an invalid height and it should be rejected. We use 2000 because is not in the range [1000..1750].\n+    /////////////////////////////////////////////////////////////////////////////////////\n+    // Now we try to add a block v2, with an invalid height and it should be rejected.\n+    // We use 2000 as argument heightDifference because is not in the range [1000..1750].\n+    /////////////////////////////////////////////////////////////////////////////////////\n     CheckSubsidyHalving(pblocktemplate,pblock);\n     SetBlockDefaultAttributesAndHeight(pblock,true,2000); //\n     pblock->nVersion = 2;\n@@ -154,28 +185,27 @@ void Blockv2test()\n \n     LogPrintf(\"Blockv2test v2 with height accepted begin\\n\");\n \n-\n-    // Now we add a block with height, must be ok.\n+    /////////////////////////////////////////////////////////////\n+    // Now we add 200 additional blocks, until we get 950\n+    // (the threshold where v1 blocks are not accepted anymore)\n+    /////////////////////////////////////////////////////////////\n     for (int i=0;i<200;i++)\n     {\n \n         LogPrintf(\"Blockv2test v2block %d begin\\n\",i);\n         CheckSubsidyHalving(pblocktemplate,pblock);\n         SetBlockDefaultAttributesAndHeight(pblock,true,0);\n         pblock->nVersion = 2;\n-        CValidationState state;\n-        PreviousHeight = chainActive.Height();\n-        BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n-        BOOST_CHECK(state.IsValid());\n-        BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n-\n+        CheckBlockAddedToBestChainSuccessfully(pblock);\n         pblock->hashPrevBlock = pblock->GetHash(); // update parent\n     }\n \n \n     LogPrintf(\"Blockv2test block v1 rejected\\n\");\n-    // Now we add 200 additional blocks, until we get 950 (the threshold were v1 blocks are not accepted anymore)\n+\n+    /////////////////////////////////////////////////////////////////////////////////////////\n     // Now we try to add a block v1, it should be rejected, even if it hash the height field\n+    /////////////////////////////////////////////////////////////////////////////////////////\n     CheckSubsidyHalving(pblocktemplate,pblock);\n     SetBlockDefaultAttributesAndHeight(pblock,true,0);\n     pblock->nVersion = 1;\n@@ -185,11 +215,9 @@ void Blockv2test()\n     BOOST_CHECK(state2.GetRejectReason()==\"bad-version\");\n     // Do not update parent since block has failed\n \n-\n-\n-    // Some other missing tests, added here as bonus...\n-\n+    ////////////////////////////////////////////////////////\n     // Block time too old check\n+    ////////////////////////////////////////////////////////\n     CheckSubsidyHalving(pblocktemplate,pblock);\n     SetBlockDefaultAttributesAndHeight(pblock,true,0);\n     pblock->nVersion = 2;\n@@ -200,7 +228,9 @@ void Blockv2test()\n     BOOST_CHECK(state4.GetRejectReason()==\"time-too-old\");\n     // Do not update parent since block has failed\n \n+    ////////////////////////////////////////////////////////\n     // Adding a non-final coinbase, must modify coinbase\n+    ////////////////////////////////////////////////////////\n     CheckSubsidyHalving(pblocktemplate,pblock);\n     SetEmptyBlock(pblock);\n     // Use a mutable coinbase to change nLockTime and  nSequence\n@@ -217,10 +247,23 @@ void Blockv2test()\n     BOOST_CHECK(state5.GetRejectReason()==\"bad-txns-nonfinal\");\n     // Do not update parent since block has failed\n \n+    ModifiableParams()->setSkipProofOfWorkCheck(false);\n+\n+    ////////////////////////////////////////////////////////////////////////////////\n+    // Just to be sure that proof-of-work skipping is working ok, we submit a block\n+    // without enought proof of work and it must be rejected.\n+    ////////////////////////////////////////////////////////////////////////////////\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+    pblock->nVersion = 2;\n+    CValidationState state6;\n+    BOOST_CHECK(ProcessBlock(state6, NULL, pblock)==false);\n+    BOOST_CHECK(!state6.IsValid());\n+    BOOST_CHECK(state6.GetRejectReason()==\"high-hash\");\n \n     delete pblocktemplate;\n \n-    ModifiableParams()->setSkipProofOfWorkCheck(false);\n+\n     LogPrintf(\"Blockv2test testcase ends\\n\");\n }\n "
      }
    ]
  },
  {
    "sha": "470590277782cce2fe73275c74523aef59a51eab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzA1OTAyNzc3ODJjY2UyZmU3MzI3NWM3NDUyM2FlZjU5YTUxZWFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-29T11:13:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-29T11:13:47Z"
      },
      "message": "Avoid introducing a virtual into CChainParams\n\nTreat fSkipProofOfWorkCheck the same as other parameters.",
      "tree": {
        "sha": "36da096d823ffde7aab323ff269b3dbe74fff080",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36da096d823ffde7aab323ff269b3dbe74fff080"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/470590277782cce2fe73275c74523aef59a51eab",
      "comment_count": 4,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470590277782cce2fe73275c74523aef59a51eab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/470590277782cce2fe73275c74523aef59a51eab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470590277782cce2fe73275c74523aef59a51eab/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "31c67715c87fd3c04828299e7fa0a7eae7e0a41b",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/470590277782cce2fe73275c74523aef59a51eab/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/470590277782cce2fe73275c74523aef59a51eab/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=470590277782cce2fe73275c74523aef59a51eab",
        "patch": "@@ -115,6 +115,7 @@ class CMainParams : public CChainParams {\n         fAllowMinDifficultyBlocks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n+        fSkipProofOfWorkCheck = false;\n     }\n };\n static CMainParams mainParams;\n@@ -231,11 +232,7 @@ class CUnitTestParams : public CMainParams, public CModifiableParams {\n         fDefaultCheckMemPool = true;\n         fAllowMinDifficultyBlocks = false;\n         fMineBlocksOnDemand = true;\n-        fSkipProofOfWorkCheck = false;\n     }\n-    virtual bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n-protected:\n-    bool fSkipProofOfWorkCheck;\n public:\n     // Published setters to allow changing values in unit test cases\n     virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }"
      },
      {
        "sha": "50441a89f3de1868e1657da836e8ad550819e9e1",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/470590277782cce2fe73275c74523aef59a51eab/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/470590277782cce2fe73275c74523aef59a51eab/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=470590277782cce2fe73275c74523aef59a51eab",
        "patch": "@@ -62,7 +62,7 @@ class CChainParams\n     /* Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n     /* Skip proof-of-work check: allow mining of any difficulty block */\n-    virtual bool SkipProofOfWorkCheck() const { return false; }\n+    bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n     /* Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n@@ -105,6 +105,7 @@ class CChainParams\n     bool fAllowMinDifficultyBlocks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n+    bool fSkipProofOfWorkCheck;\n };\n \n /** Modifiable parameters interface is used by test cases to adapt the parameters in order"
      }
    ]
  },
  {
    "sha": "28fb5f388da2243386c26ab8793383db40715ea5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGZiNWYzODhkYTIyNDMzODZjMjZhYjg3OTMzODNkYjQwNzE1ZWE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-29T14:58:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-29T14:58:49Z"
      },
      "message": "doc: update gpg command line for SHA256SUMS.asc in release process",
      "tree": {
        "sha": "655dc49f5c5ba9ba11fed76e4fbb494d56966a3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/655dc49f5c5ba9ba11fed76e4fbb494d56966a3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28fb5f388da2243386c26ab8793383db40715ea5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUKXOqAAoJEHSBCwEjRsmmUdsIALkUIHY/bplamzC9FHjx14Eo\n6qeSPl8xDTjsqhXIiepxi4Ezw7Gcnm7UfIEA/EYkeqi1CD+A+RIMztq49XYLtYhv\n+T35jEyB/Clv7poUTgCbcRHSno0fpz5IRk00AKPpK7NEw+w+UJo5PGVU+4bBRcBO\nU5unE/lfCUfEMZ067X8rgbAuBnu+1mPYg2LYQk3PQdTc4EhpqyeL6ZObuJpYlyyN\n/nIFma+4TrMfxWlj9g5KhfQ4M7spKx7euOx79Q2THQ/I1ozU1BIA0npGKRNWndpe\nDZXidk4MQeybp2SQIORe7qHbc4JSfkjA7gpL2CCA5tSxVhvlC3iWZc82ylyAOiM=\n=Hzgr\n-----END PGP SIGNATURE-----",
        "payload": "tree 655dc49f5c5ba9ba11fed76e4fbb494d56966a3c\nparent 41150d601df8bbbec9e6f0b7fb4d3fc569692522\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412002710 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412002729 +0200\n\ndoc: update gpg command line for SHA256SUMS.asc in release process\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28fb5f388da2243386c26ab8793383db40715ea5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28fb5f388da2243386c26ab8793383db40715ea5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28fb5f388da2243386c26ab8793383db40715ea5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41150d601df8bbbec9e6f0b7fb4d3fc569692522",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41150d601df8bbbec9e6f0b7fb4d3fc569692522"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "940f934baff374e81467b254ed7a5b40e2fe9a61",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28fb5f388da2243386c26ab8793383db40715ea5/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28fb5f388da2243386c26ab8793383db40715ea5/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=28fb5f388da2243386c26ab8793383db40715ea5",
        "patch": "@@ -181,9 +181,10 @@ Commit your signature to gitian.sigs:\n - Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n ```bash\n sha256sum * > SHA256SUMS\n-gpg --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n+gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n rm SHA256SUMS\n ```\n+(the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n \n - Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoin.org server\n "
      }
    ]
  },
  {
    "sha": "2884b9a4aef53245798e4f50793eb3e70aa73a6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODg0YjlhNGFlZjUzMjQ1Nzk4ZTRmNTA3OTNlYjNlNzBhYTczYTZk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-29T16:00:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-29T16:36:04Z"
      },
      "message": "Merge pull request #4960\n\n8138cbe Add automatic script test generation, and actual checksig tests (Pieter Wuille)",
      "tree": {
        "sha": "a158e359f766ece2fe8b567830ed90d64efd91ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a158e359f766ece2fe8b567830ed90d64efd91ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2884b9a4aef53245798e4f50793eb3e70aa73a6d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUKYp0AAoJEFeJbS/48LZXs9kL/33ByRxNUgQPwShnplMeI/Xk\nwOo/PxFIPncuAQs5en9RksB+qtg3xiflNdUIha61jgvptmS8UtGoV4D6eOzb8qEJ\nLMJ/piQjgVKjukV9PrOIvlhqR97p+GE02uSeCjLyBAhUz/d2ojBf+qeEmTPT/iOI\n3D8juaBZPXrA/v6NC+S0K5LELNiQ0/sS0Tss+PXbDtd61SNFgOGN1+Ul3tbFpakh\noVC7ynrmJkMLX//6gSwL2/ncRTL6Gp2v3fIL6Lip4/jlQ5jRYb4n0tdB2F2IED2H\nXJ0s45yFCkgYOTcmQzUmSdRiU7BOviCK+X8EzImW6wrF3yUASqzjAlfgq5RkkyKU\nukrSBFzJjR4NQhgzLI3HpzpvNLZmsqiP3VfQNqg0fX875tWh3Kx8kDM/Sy5nqI1l\n1q2knY6tEXTwgl6TUXQ6y4f7qe5O6iQQICoC1hc80bJFs/PJXRLAYEoQ2K7/cMT5\nnmonNoYW+Tj1ybGJxF1w6BYkU2t0l/ZB4fvzuDZt9Q==\n=B8lA\n-----END PGP SIGNATURE-----",
        "payload": "tree a158e359f766ece2fe8b567830ed90d64efd91ae\nparent 28fb5f388da2243386c26ab8793383db40715ea5\nparent 8138cbea3c405e142d70b43b6c452e1738de3332\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1412006410 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1412008564 +0200\n\nMerge pull request #4960\n\n8138cbe Add automatic script test generation, and actual checksig tests (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2884b9a4aef53245798e4f50793eb3e70aa73a6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2884b9a4aef53245798e4f50793eb3e70aa73a6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2884b9a4aef53245798e4f50793eb3e70aa73a6d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28fb5f388da2243386c26ab8793383db40715ea5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28fb5f388da2243386c26ab8793383db40715ea5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28fb5f388da2243386c26ab8793383db40715ea5"
      },
      {
        "sha": "8138cbea3c405e142d70b43b6c452e1738de3332",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8138cbea3c405e142d70b43b6c452e1738de3332",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8138cbea3c405e142d70b43b6c452e1738de3332"
      }
    ],
    "stats": {
      "total": 462,
      "additions": 413,
      "deletions": 49
    },
    "files": [
      {
        "sha": "94848f1c3da1db0a81f5c10b72ffadbe93992359",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=2884b9a4aef53245798e4f50793eb3e70aa73a6d",
        "patch": "@@ -20,6 +20,7 @@ extern uint256 ParseHashUV(const UniValue& v, const std::string& strName);\n extern std::vector<unsigned char> ParseHexUV(const UniValue& v, const std::string& strName);\n \n // core_write.cpp\n+extern std::string FormatScript(const CScript& script);\n extern std::string EncodeHexTx(const CTransaction& tx);\n extern void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n                         UniValue& out, bool fIncludeHex);"
      },
      {
        "sha": "40d547fb33e61d84069b6b2ecfc273537d06ac6b",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=2884b9a4aef53245798e4f50793eb3e70aa73a6d",
        "patch": "@@ -17,6 +17,41 @@\n \n using namespace std;\n \n+string FormatScript(const CScript& script)\n+{\n+    string ret;\n+    CScript::const_iterator it = script.begin();\n+    opcodetype op;\n+    while (it != script.end()) {\n+        CScript::const_iterator it2 = it;\n+        vector<unsigned char> vch;\n+        if (script.GetOp2(it, op, &vch)) {\n+            if (op == OP_0) {\n+                ret += \"0 \";\n+                continue;\n+            } else if ((op >= OP_1 && op <= OP_16) || op == OP_1NEGATE) {\n+                ret += strprintf(\"%i \", op - OP_1NEGATE - 1);\n+                continue;\n+            } else if (op >= OP_NOP && op <= OP_CHECKMULTISIGVERIFY) {\n+                string str(GetOpName(op));\n+                if (str.substr(0, 3) == string(\"OP_\")) {\n+                    ret += str.substr(3, string::npos) + \" \";\n+                    continue;\n+                }\n+            }\n+            if (vch.size() > 0) {\n+                ret += strprintf(\"0x%x 0x%x \", HexStr(it2, it - vch.size()), HexStr(it - vch.size(), it));\n+            } else {\n+                ret += strprintf(\"0x%x\", HexStr(it2, it));\n+            }\n+            continue;\n+        }\n+        ret += strprintf(\"0x%x \", HexStr(it2, script.end()));\n+        break;\n+    }\n+    return ret.substr(0, ret.size() - 1);\n+}\n+\n string EncodeHexTx(const CTransaction& tx)\n {\n     CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "c2251b4f2adc36ebf069530086b03d9505f85669",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=2884b9a4aef53245798e4f50793eb3e70aa73a6d",
        "patch": "@@ -220,7 +220,7 @@ class CECKey {\n         return o2i_ECPublicKey(&pkey, &pbegin, pubkey.size()) != NULL;\n     }\n \n-    bool Sign(const uint256 &hash, std::vector<unsigned char>& vchSig) {\n+    bool Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, bool lowS) {\n         vchSig.clear();\n         ECDSA_SIG *sig = ECDSA_do_sign((unsigned char*)&hash, sizeof(hash), pkey);\n         if (sig == NULL)\n@@ -232,7 +232,7 @@ class CECKey {\n         BIGNUM *halforder = BN_CTX_get(ctx);\n         EC_GROUP_get_order(group, order, ctx);\n         BN_rshift1(halforder, order);\n-        if (BN_cmp(sig->s, halforder) > 0) {\n+        if (lowS && BN_cmp(sig->s, halforder) > 0) {\n             // enforce low S values, by negating the value (modulo the order) if above order/2.\n             BN_sub(sig->s, order, sig->s);\n         }\n@@ -467,7 +467,7 @@ CPubKey CKey::GetPubKey() const {\n     return pubkey;\n }\n \n-bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig) const {\n+bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, bool lowS) const {\n     if (!fValid)\n         return false;\n #ifdef USE_SECP256K1\n@@ -484,7 +484,7 @@ bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig) const {\n #else\n     CECKey key;\n     key.SetSecretBytes(vch);\n-    return key.Sign(hash, vchSig);\n+    return key.Sign(hash, vchSig, lowS);\n #endif\n }\n "
      },
      {
        "sha": "f6f6d35d34194b4d68e31b669ac254a656127c13",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=2884b9a4aef53245798e4f50793eb3e70aa73a6d",
        "patch": "@@ -276,7 +276,7 @@ class CKey\n     CPubKey GetPubKey() const;\n \n     // Create a DER-serialized signature.\n-    bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig) const;\n+    bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig, bool lowS = true) const;\n \n     // Create a compact signature (65 bytes), which allows reconstructing the used public key.\n     // The format is one header byte, followed by two times 32 bytes for the serialized r and s values."
      },
      {
        "sha": "35a6794b010bd05c68dbbbb32c0bacfd73c36f70",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=2884b9a4aef53245798e4f50793eb3e70aa73a6d",
        "patch": "@@ -384,18 +384,18 @@ nSequences are max.\n \n [\"0x00\", \"'00' EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"],\n \n-[\"0x48 0x3045022100ea4d62e1fb351ad977596457bb01dfce58e050541784277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with wrong signature\"],\n-[\"0x47 0x304402207d09de5e34968c3f8b27d8217f173629f1106ee5216aa11d6b1f9813b3a214060220610a6ed25c704f901c6278f4f57fb11eadefdf0b22df298cfb6ce7ea84c86bf401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash using an anyonecanpay sighash\"],\n-[\"0x47 0x3044022028686fb3c8d3e5068cc9924c494fb5026df201d23340896da62fe9bb73fd9d5f02202a239609524959c4ca3651fd0cc48245b0b240862146fc579f3a962a4f46942b01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkey with wrong signature\"],\n-[\"0x47 0x3044022054cb0a3fca8694a0c231848ed9f965078148fd653e49dd4b6981fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"P2SH,STRICTENC\", \"P2SH with a pay to pubkeyhash inside with wrong signature\"],\n-[\"0 0x48 0x3045022100e1c4e8800bd00c9ec3cd3df0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC\", \"Raw multisig with one pubkey with wrong signature\"],\n-[\"0x49 0x304602220000ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with non-DER signature (too much R padding)\"],\n-[\"0x47 0x30440220ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with non-DER signature (too little R padding)\"],\n-[\"0x49 0x3046022100ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a950221003003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash with non-DER signature (too much S padding)\"],\n-[\"0x48 0x3045022100e6eda3fd34862078233463cae19f0b47995e3f892102e5b175175e92a9163cc402204bf58445819093638481084322b61a2d49b68c96fd6fea17ed494722d0d67b4f01\", \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"P2SH,STRICTENC\", \"Pay to pubkey with hybrid pubkey encoding\"],\n-[\"0x48 0x304502203b56d65863e0cdb89313043c2402f46f518c31658648151b01ec6b5b6c89206a022100d71efefb4c24fab36abb44ade106963d8114c5af1bda033faa1923f54ec4ea6a01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC,LOW_S\", \"Pay to pubkey with high S\"],\n-[\"0x47 0x3044022054cb0a3fca8694a0c231848fd9f965078148fd653e49dd4b6980fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"P2SH,STRICTENC\", \"P2SH with a pay to pubkeyhash inside with invalid signature\"],\n-[\"1 0x48 0x3045022100e1c4e8800bd00c9ec3cd3de0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC,NULLDUMMY\", \"Raw multisig with one pubkey with non-zero dummy\"],\n+[\"0x47 0x30440220304eff7556bba9560df47873275e64db45f3cd735998ce3f00d2e57b1bb5f31302205c0c9d14b8b80d43e2ac9b87532f1af6d8a3271262bc694ec4e14068392bb0a001\", \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"\", \"P2PK, bad sig\"],\n+[\"0x47 0x3044022037fcdb8e08f41e27588de8bc036d2c4b16eb3d09c1ba53b8f47a0a9c27722a39022058664b7a53b507e71dfafb77193e3786c3f0c119d78ce9104480ee7ece04f09301 0x21 0x03363d90d446b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\", \"DUP HASH160 0x14 0xc0834c0c158f53be706d234c38fd52de7eece656 EQUALVERIFY CHECKSIG\", \"\", \"P2PKH, bad pubkey\"],\n+[\"0x47 0x3044022035e5b6742d299861c84cebaf2ea64145ee427a95facab39e2594d6deebb0c1d602200acb16778faa2e467a59006f342f2535b1418d55ba63a8605b387b7f9ac86d9a01\", \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\", \"\", \"P2PK anyonecanpay marked with normal hashtype\"],\n+[\"0x47 0x3044022029b2b8765ca950cf75a69e80b73b7ddfcaa8b27080c2db4c23b36aae60688e790220598ff368e17872ee065aa54d7d3a590682ca5204325b23b31d7da3c4a21ae67901 0x23 0x210279be667ef9dcbbac54a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\", \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\", \"P2SH\", \"P2SH(P2PK), bad redeemscript\"],\n+[\"0x47 0x30440220647f906e63890df5ef1d3fed47ba892b31976c634281079e2bd38504fb54a1fb022021e8811f38fbe90efb6b74cb78da01d9badbac3bafdf70a861d7538a220d0b2601 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\", \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\", \"P2SH\", \"P2SH(P2PKH), bad sig\"],\n+[\"0 0x47 0x304402203ef170402f8887f2ac183f31b1f503b0bc60bfc968dd469b097ea6124aefac5002200612febadc4e4cacc086982cb85830a17af3680c1b6a3cf77c1708af7621cf1301 0 0x47 0x304402207821838251a24a2234844f68e7169e6d11945cdf052ea12bd3e4e37457aceb4402200b6b46c81361e314c740ae5133c072af5fa5c209d65d2db1679e1716f19a538101\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"\", \"3-of-3, 2 sigs\"],\n+[\"0 0 0x47 0x304402204661f7795e8db7be3132e8974e9a76d1d24b31f23df94c6fbcea07d1c205789102203f5e45a1c0b085279b58d11b36d5fea5449c3cf16f844ad10124e9b65e8777d201 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\", \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\", \"P2SH\", \"P2SH(2-of-3), 1 sig\"],\n+[\"0x47 0x304402200052bc1600ca45c71f3538720fe62a5e8548dffd137af04467598c98466e9c0a0220789318ddbc9991ee477974089220a2feb6a6298a7c93d5ff6c25a92a2f4b48d501\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"STRICTENC\", \"P2PK with too much R padding\"],\n+[\"0x48 0x304502206eb7b92628bfb3c4d2a04b65b986987bcbb1af4fceedb144d5a0437b7ee410590221005f57a52df4aa26366742eed0db182fce51fbcd7159011b0644a7c05943eb228901\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"STRICTENC\", \"P2PK with too much S padding\"],\n+[\"0x47 0x30440220d8ad1efd55a3d2b8896495c38aba72056e1b3ca4a6ca15760e843eb1a9b9907602203eb0e8f3d6bec998262dfd03eaeb0f31c4e5105965436dec77550724b3771f3201\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"STRICTENC\", \"P2PK with too little R padding\"],\n+[\"0x48 0x304502206c43e065c8a8db3bbe69015afb86a51fb2fc8870defd41d436da2a197d9d6c12022100fcec35816ee2d84ec271ad159fcabf5dd712157051169e48ac328a7818cdb51e01\", \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\", \"LOW_S,STRICTENC\", \"P2PK with high S\"],\n+[\"0x01 0x01 0x47 0x304402200e48ba1cf4d7182db94ffb57bd72ea31b5545dc0d1c512e665779b4fb2badc52022054b8388dfc074c708a75b62359b7be46402751ee40c0a111aef38a837b6ed09801 0x47 0x304402201c9820f59c49107bb30e6175cfc9ec95f897b03beb628b4bc854d2b80392aa0602200235d986ae418bcd111b8814f4c26a0ab5f475fb542a44884fc14912a97a252301 0x47 0x304402204cd7894c6f10a871f5b0c1f9c13228f8cdd4050248f0d0f498ee86be69ee3080022051bd2932c7d585eb600c7194235c74da820935f0d67972fd9545673aa1fd023301\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"NULLDUMMY\", \"3-of-3 with nonzero dummy\"],\n \n [\"The End\"]\n "
      },
      {
        "sha": "653f60d98280b2823c2ebd6db14c72957c718977",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=2884b9a4aef53245798e4f50793eb3e70aa73a6d",
        "patch": "@@ -529,18 +529,19 @@ nSequences are max.\n \n [\"0x00\", \"SIZE 0 EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"],\n \n-[\"0x48 0x3045022100ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkeyhash\"],\n-[\"0x47 0x304402207d09de5e34968c3f8b27d8217f173629f1106ee5216aa11d6b1f9813b3a214060220610a6ed25c704f901c6278f4f57fb11eadefdf0b22df298cfb6ce7ea84c86bf481 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH,STRICTENC\", \"Anyonecanpay pay to pubkeyhash\"],\n-[\"0x47 0x3044022028686fb3c8d3e5069cc9924c494fb5026df201d23340896da62fe9bb73fd9d5f02202a239609524959c4ca3651fd0cc48245b0b240862146fc579f3a962a4f46942b01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC\", \"Normal pay to pubkey\"],\n-[\"0x47 0x3044022054cb0a3fca8694a0c231848ed9f965078148fd653e49dd4b6980fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"P2SH,STRICTENC\", \"P2SH with a pay to pubkeyhash inside\"],\n-[\"0 0x48 0x3045022100e1c4e8800bd00c9ec3cd3de0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC\", \"Raw multisig with one pubkey\"],\n-[\"0x49 0x304602220000ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH\", \"Normal pay to pubkeyhash with non-DER signature (too much R padding)\"],\n-[\"0x47 0x30440220ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a9502203003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH\", \"Normal pay to pubkeyhash with non-DER signature (too little R padding)\"],\n-[\"0x49 0x3046022100ea4d62e1fb351ad977596457bb01dfce58e050541774277bd825c33bd98c2a950221003003347cf04573be4dc786c3fc5e7db09821565bf45c7d60160709b962f0398401 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\", \"DUP HASH160 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6 EQUALVERIFY CHECKSIG\", \"P2SH\", \"Normal pay to pubkeyhash with non-DER signature (too much S padding)\"],\n-[\"0x48 0x3045022100e6eda3fd34862078233463cae19f0b47995e3f892102e5b175175e92a9163cc402204bf58445819093638481084322b61a2d49b68c96fd6fea17ed494722d0d67b4f01\", \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"P2SH\", \"Pay to pubkey with hybrid pubkey encoding\"],\n-[\"0x48 0x304502203b56d65863e0cdb89313043c2402f46f518c31658648151b01ec6b5b6c89206a022100d71efefb4c24fab36abb44ade106963d8114c5af1bda033faa1923f54ec4ea6a01\", \"0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 CHECKSIG\", \"P2SH,STRICTENC\", \"Pay to pubkey with high S\"],\n-[\"0x47 0x3044022054cb0a3fca8694a0c231848fd9f965078148fd653e49dd4b6980fadac0f5ba0702204085be5af427d4561f13a07fd5a1c5ab0ff02126e9ba191448f5a9dae0da585301 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x19 0x76a914751e76e8199196d454941c45d1b3a323f1433bd688ac\", \"HASH160 0x14 0xcd7b44d0b03f2d026d1e586d7ae18903b0d385f6 EQUAL\", \"STRICTENC\", \"P2SH with a pay to pubkeyhash inside with invalid signature\"],\n-[\"1 0x48 0x3045022100e1c4e8800bd00c9ec3cd3de0e53e63bc5e8c018d0b68099a652f0b121f1a7e020220108dab275be7d1358530d3451d48aed747af77cc54e0423cbae5c572b2e1abb801\", \"1 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 1 CHECKMULTISIG\", \"P2SH,STRICTENC\", \"Raw multisig with one pubkey with non-zero dummy\"],\n+[\"0x47 0x3044022007415aa37ce7eaa6146001ac8bdefca0ddcba0e37c5dc08c4ac99392124ebac802207d382307fd53f65778b07b9c63b6e196edeadf0be719130c5db21ff1e700d67501\", \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"\", \"P2PK\"],\n+[\"0x47 0x3044022069d40999786aeb2fd874f9eb2636461a062dc963471627ed8390a3a5f9556f640220350132a52415ce622f2aadd07f791c591500917ec1f8c5edbc5381ef7942534d01 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508\", \"DUP HASH160 0x14 0x1018853670f9f3b0582c5b9ee8ce93764ac32b93 EQUALVERIFY CHECKSIG\", \"\", \"P2PKH\"],\n+[\"0x47 0x30440220519f2a6632ffa134c7811ea2819e9dcc951f0c7baf461f2dffdd09133f3b080a02203ec6bab5eb6619ed7f41b8701d7c6d70cfc83bb26c5c97f54b2ca6e304fc2bb581\", \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\", \"\", \"P2PK anyonecanpay\"],\n+[\"0x47 0x30440220279dad2170ffb5639f0a1ea71fc462ee37d75d420d86f84c978bac523c09b7f20220683b2789f5c5528a9e0a0d78f6e40db3f616cf1adb5a5fdef117d5974795cfe201 0x23 0x210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\", \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\", \"P2SH\", \"P2SH(P2PK)\"],\n+[\"0x47 0x3044022066acbfb5ac96b7cbf3f05a2aaf358c32438c45d1d7359dee9fc1ee636940735f02205606a03fd8cbf6a6fcbcba60c8abb1e385c0b5753cb57a97538159106fd3684e01 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\", \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\", \"\", \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\"],\n+[\"0 0x47 0x3044022004e791dd30a64c70e55e84e150c002af9feb3ce0ab1f20e86c53d1209003927502205a60453987fcd72aebaaacebc8ce4b15449cdd79e54cc82cefb83e69dbcfeabf01 0x47 0x304402201d021808ce93dd8574cc4f99ae4f11b44305528b0aecbd9f156f08315173643802200944a0ea5c884bd86180aef76d8b1e444860776b251e47d2d6c651a1c6f9930801 0x47 0x30440220446336d7b7de05ebb5683b82b05248ec7d78e88ae8d6125985f5776c887a4cf90220674ab2b2c2f954ba1cf35457d273c90d0c0c1c224d0ae128628740e81129486801\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"\", \"3-of-3\"],\n+[\"0 0x47 0x30440220288b06d057cf0eac434ed0c3be9257cc0ca144dd99c11cc8f1a49467a37d8e8002203c496c72253c528e6bc81c42e683aba974d46041a96ef7b00915c863eb2a702901 0x47 0x304402207ffb4da33f40cac839a43000a187bd76a1ee5bf95e46dc1534b38bb7bd0321db022038c078f29d1831f8eb68ffdc2634c654fb01c3467b6457b98ad220653bb2478501 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\", \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\", \"P2SH\", \"P2SH(2-of-3)\"],\n+[\"0x47 0x304402200001cae94b795baaafb05db38cf24cd75560cab2c36c91e29fac7d0fd2a723a3022058e2e56e568ce7c4b2b106210d114e1faa079407a6ed4154f230667c7d3583bc01\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"\", \"P2PK with too much R padding but no STRICTENC\"],\n+[\"0x48 0x304502206d01de7c2a40ac2bb1231ed97f3890a1782f421d4c28b97166deff317990288f0221005e720213b089355be2cf785d81a82c59307d30e1624f450ed9ca1ebbc11cca6d01\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"\", \"P2PK with too much S padding but no STRICTENC\"],\n+[\"0x47 0x30440220f3d8889602147d60d26c1d3b21b8db183eac02bf6d2fec1424c0ef377ca6fd7b02202bae8bfe39d00a432d4538a592e338b0ffc44c17d4b7056043d55063cf91f5ef01\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"\", \"P2PK with too little R padding but no STRICTENC\"],\n+[\"0x48 0x3045022021bf9184d94f208ac9f4757ebca9b1cbebf008cfc244fe5be1360b1b9aba0e92022100e55074f72f3a1bfddf2ea4ea7ba984f78822e136fe04c8f9c1363238e0233bd801\", \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\", \"STRICTENC\", \"P2PK with high S but no LOW_S\"],\n+[\"0x48 0x304502205c3e81aaf2aad0673f349035b180eba783eba7797af91c979920dea6b17a16d6022100d1d46825c68da1b325f320a3503dad27bb818227f64a38d153554bfd360c0e5301\", \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\", \"LOW_S\", \"P2PK with high S but no STRICTENC\"],\n+[\"0x01 0x01 0x47 0x3044022046ce33d1771b0127dd4c4cef8fdc3218ebdfa60e3793ed700292d8ebd93fb1f402201029d47a414db83e96e31443c2d8b552f971469c4800f5eff7df2f0648521aed01 0x47 0x304402205c53911ad55b054920043962bbda98cf6e57e2db1cd5611138251490baabaa8702201dc80dfceae6007e7772dc13ff6e7ca66a983cb017fe5d46d30118462d83bcf801 0x47 0x304402201937e44a4ec12364f9d32f9d25e7ecbc68aee9ef90069af80efef4c05f6ace9602206c515101c00c75710b32ff7ff8dbaf7c9a0be6e86ed14a0755b47626604f31fd01\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"\", \"3-of-3 with nonzero dummy but no NULLDUMMY\"],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "f9086b6a64667cedb7a79c135290fb067a1d8255",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 317,
        "deletions": 8,
        "changes": 325,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=2884b9a4aef53245798e4f50793eb3e70aa73a6d",
        "patch": "@@ -5,12 +5,13 @@\n #include \"data/script_invalid.json.h\"\n #include \"data/script_valid.json.h\"\n \n+#include \"core_io.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n-#include \"core_io.h\"\n+#include \"util.h\"\n \n #include <fstream>\n #include <stdint.h>\n@@ -36,6 +37,7 @@ using namespace boost::algorithm;\n static const unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;\n \n unsigned int ParseScriptFlags(string strFlags);\n+string FormatScriptFlags(unsigned int flags);\n \n Array\n read_json(const std::string& jsondata)\n@@ -68,10 +70,8 @@ CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n     return txCredit;\n }\n \n-CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CScript& scriptPubKey)\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CTransaction& txCredit)\n {\n-    CMutableTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n-\n     CMutableTransaction txSpend;\n     txSpend.nVersion = 1;\n     txSpend.nLockTime = 0;\n@@ -87,6 +87,317 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CSc\n     return txSpend;\n }\n \n+void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message)\n+{\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey)), 0, flags) == expect, message);\n+}\n+\n+namespace\n+{\n+const unsigned char vchKey0[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};\n+const unsigned char vchKey1[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0};\n+const unsigned char vchKey2[32] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0};\n+\n+struct KeyData\n+{\n+    CKey key0, key0C, key1, key1C, key2, key2C;\n+    CPubKey pubkey0, pubkey0C, pubkey0H;\n+    CPubKey pubkey1, pubkey1C;\n+    CPubKey pubkey2, pubkey2C;\n+\n+    KeyData()\n+    {\n+\n+        key0.Set(&vchKey0[0], &vchKey0[32], false);\n+        key0C.Set(&vchKey0[0], &vchKey0[32], true);\n+        pubkey0 = key0.GetPubKey();\n+        pubkey0H = key0.GetPubKey();\n+        pubkey0C = key0C.GetPubKey();\n+        *const_cast<unsigned char*>(&pubkey0H[0]) = 0x06 | (pubkey0H[64] & 1);\n+\n+        key1.Set(&vchKey1[0], &vchKey1[32], false);\n+        key1C.Set(&vchKey1[0], &vchKey1[32], true);\n+        pubkey1 = key1.GetPubKey();\n+        pubkey1C = key1C.GetPubKey();\n+\n+        key2.Set(&vchKey2[0], &vchKey2[32], false);\n+        key2C.Set(&vchKey2[0], &vchKey2[32], true);\n+        pubkey2 = key2.GetPubKey();\n+        pubkey2C = key2C.GetPubKey();\n+    }\n+};\n+\n+const KeyData keys;\n+\n+class TestBuilder\n+{\n+private:\n+    CScript scriptPubKey;\n+    CTransaction creditTx;\n+    CMutableTransaction spendTx;\n+    bool havePush;\n+    std::vector<unsigned char> push;\n+    std::string comment;\n+    int flags;\n+\n+    void DoPush()\n+    {\n+        if (havePush) {\n+            spendTx.vin[0].scriptSig << push;\n+            havePush = false;\n+        }\n+    }\n+\n+    void DoPush(const std::vector<unsigned char>& data)\n+    {\n+         DoPush();\n+         push = data;\n+         havePush = true;\n+    }\n+\n+public:\n+    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_)\n+    {\n+        if (P2SH) {\n+            creditTx = BuildCreditingTransaction(CScript() << OP_HASH160 << redeemScript.GetID() << OP_EQUAL);\n+        } else {\n+            creditTx = BuildCreditingTransaction(redeemScript);\n+        }\n+        spendTx = BuildSpendingTransaction(CScript(), creditTx);\n+    }\n+\n+    TestBuilder& Add(const CScript& script)\n+    {\n+        spendTx.vin[0].scriptSig += script;\n+        return *this;\n+    }\n+\n+    TestBuilder& Num(int num)\n+    {\n+        spendTx.vin[0].scriptSig << CScriptNum(num);\n+        return *this;\n+    }\n+\n+    TestBuilder& Push(const std::string& hex)\n+    {\n+        DoPush(ParseHex(hex));\n+        return *this;\n+    }\n+\n+    TestBuilder& PushSig(const CKey& key, int nHashType = SIGHASH_ALL, unsigned int lenR = 32, unsigned int lenS = 32)\n+    {\n+        uint256 hash = SignatureHash(scriptPubKey, spendTx, 0, nHashType);\n+        std::vector<unsigned char> vchSig, r, s;\n+        do {\n+            key.Sign(hash, vchSig, lenS <= 32);\n+            r = std::vector<unsigned char>(&vchSig[4], &vchSig[4 + vchSig[3]]);\n+            s = std::vector<unsigned char>(&vchSig[6 + vchSig[3]], &vchSig[6 + vchSig[3] + vchSig[5 + vchSig[3]]]);\n+        } while (lenR != r.size() || lenS != s.size());\n+        vchSig.push_back(static_cast<unsigned char>(nHashType));\n+        DoPush(vchSig);\n+        return *this;\n+    }\n+\n+    TestBuilder& Push(const CPubKey& pubkey)\n+    {\n+        DoPush(std::vector<unsigned char>(pubkey.begin(), pubkey.end()));\n+        return *this;\n+    }\n+\n+    TestBuilder& PushRedeem()\n+    {\n+        DoPush(static_cast<std::vector<unsigned char> >(scriptPubKey));\n+        return *this;\n+    }\n+\n+    TestBuilder& EditPush(unsigned int pos, const std::string& hexin, const std::string& hexout)\n+    {\n+        assert(havePush);\n+        std::vector<unsigned char> datain = ParseHex(hexin);\n+        std::vector<unsigned char> dataout = ParseHex(hexout);\n+        assert(pos + datain.size() <= push.size());\n+        BOOST_CHECK_MESSAGE(std::vector<unsigned char>(push.begin() + pos, push.begin() + pos + datain.size()) == datain, comment);\n+        push.erase(push.begin() + pos, push.begin() + pos + datain.size());\n+        push.insert(push.begin() + pos, dataout.begin(), dataout.end());\n+        return *this;\n+    }\n+\n+    TestBuilder& DamagePush(unsigned int pos)\n+    {\n+        assert(havePush);\n+        assert(pos < push.size());\n+        push[pos] ^= 1;\n+        return *this;\n+    }\n+\n+    TestBuilder& Test(bool expect)\n+    {\n+        TestBuilder copy = *this; // Make a copy so we can rollback the push.\n+        DoPush();\n+        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, flags, expect, comment);\n+        *this = copy;\n+        return *this;\n+    }\n+\n+    operator std::string()\n+    {\n+        DoPush();\n+        return \"[\\\"\" +\n+               FormatScript(spendTx.vin[0].scriptSig) + \"\\\", \\\"\" +\n+               FormatScript(creditTx.vout[0].scriptPubKey) + \"\\\", \\\"\" +\n+               FormatScriptFlags(flags) + \"\\\", \\\"\" +\n+               comment + \"\\\"],\\n\";\n+    }\n+\n+    std::string GetComment()\n+    {\n+        return comment;\n+    }\n+\n+    const CScript& GetScriptPubKey()\n+    {\n+        return creditTx.vout[0].scriptPubKey;\n+    }\n+};\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_build)\n+{\n+    std::vector<TestBuilder> good;\n+    std::vector<TestBuilder> bad;\n+\n+    good.push_back(TestBuilder(CScript() << keys.pubkey0 << OP_CHECKSIG,\n+                               \"P2PK\", 0\n+                              ).PushSig(keys.key0));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey0 << OP_CHECKSIG,\n+                              \"P2PK, bad sig\", 0\n+                             ).PushSig(keys.key0).DamagePush(10));\n+\n+    good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << keys.pubkey1C.GetID() << OP_EQUALVERIFY << OP_CHECKSIG,\n+                               \"P2PKH\", 0\n+                              ).PushSig(keys.key1).Push(keys.pubkey1C));\n+    bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << keys.pubkey2C.GetID() << OP_EQUALVERIFY << OP_CHECKSIG,\n+                              \"P2PKH, bad pubkey\", 0\n+                             ).PushSig(keys.key2).Push(keys.pubkey2C).DamagePush(5));\n+\n+    good.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG,\n+                               \"P2PK anyonecanpay\", 0\n+                              ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG,\n+                              \"P2PK anyonecanpay marked with normal hashtype\", 0\n+                             ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY).EditPush(70, \"81\", \"01\"));\n+\n+    good.push_back(TestBuilder(CScript() << keys.pubkey0C << OP_CHECKSIG,\n+                               \"P2SH(P2PK)\", SCRIPT_VERIFY_P2SH, true\n+                              ).PushSig(keys.key0).PushRedeem());\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey0C << OP_CHECKSIG,\n+                              \"P2SH(P2PK), bad redeemscript\", SCRIPT_VERIFY_P2SH, true\n+                             ).PushSig(keys.key0).PushRedeem().DamagePush(10));\n+\n+    good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << keys.pubkey1.GetID() << OP_EQUALVERIFY << OP_CHECKSIG,\n+                               \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\", 0, true\n+                              ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n+    bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << keys.pubkey1.GetID() << OP_EQUALVERIFY << OP_CHECKSIG,\n+                              \"P2SH(P2PKH), bad sig\", SCRIPT_VERIFY_P2SH, true\n+                             ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n+\n+    good.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+                               \"3-of-3\", 0\n+                              ).Num(0).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+                              \"3-of-3, 2 sigs\", 0\n+                             ).Num(0).PushSig(keys.key0).PushSig(keys.key1).Num(0));\n+\n+    good.push_back(TestBuilder(CScript() << OP_2 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+                               \"P2SH(2-of-3)\", SCRIPT_VERIFY_P2SH, true\n+                              ).Num(0).PushSig(keys.key1).PushSig(keys.key2).PushRedeem());\n+    bad.push_back(TestBuilder(CScript() << OP_2 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+                              \"P2SH(2-of-3), 1 sig\", SCRIPT_VERIFY_P2SH, true\n+                             ).Num(0).PushSig(keys.key1).Num(0).PushRedeem());\n+\n+    good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+                               \"P2PK with too much R padding but no STRICTENC\", 0\n+                              ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+                              \"P2PK with too much R padding\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+                               \"P2PK with too much S padding but no STRICTENC\", 0\n+                              ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+                              \"P2PK with too much S padding\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+                               \"P2PK with too little R padding but no STRICTENC\", 0\n+                              ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n+                              \"P2PK with too little R padding\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+\n+    good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n+                               \"P2PK with high S but no LOW_S\", SCRIPT_VERIFY_STRICTENC\n+                              ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n+                               \"P2PK with high S but no STRICTENC\", SCRIPT_VERIFY_LOW_S\n+                              ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n+                              \"P2PK with high S\", SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n+\n+    good.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+                               \"3-of-3 with nonzero dummy but no NULLDUMMY\", 0\n+                              ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+    bad.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n+                              \"3-of-3 with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n+                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+\n+    std::map<std::string, Array> tests_good;\n+    std::map<std::string, Array> tests_bad;\n+\n+    {\n+        Array json_good = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n+        Array json_bad = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n+\n+        BOOST_FOREACH(Value& tv, json_good) {\n+            Array test = tv.get_array();\n+            if (test.size() >= 4) {\n+                tests_good[test[3].get_str()] = test;\n+            }\n+        }\n+        BOOST_FOREACH(Value& tv, json_bad) {\n+            Array test = tv.get_array();\n+            if (test.size() >= 4) {\n+                tests_bad[test[3].get_str()] = test;\n+            }\n+        }\n+    }\n+\n+    std::string strGood;\n+    std::string strBad;\n+\n+    BOOST_FOREACH(TestBuilder& test, good) {\n+        test.Test(true);\n+        BOOST_CHECK_MESSAGE(tests_good.count(test.GetComment()) > 0, \"Missing auto script_valid test: \" + test.GetComment());\n+        BOOST_CHECK_MESSAGE(ParseScript(tests_good[test.GetComment()][1].get_str()) == test.GetScriptPubKey(), \"ScriptPubKey mismatch in auto script_valid test: \" + test.GetComment());\n+        strGood += test;\n+    }\n+    BOOST_FOREACH(TestBuilder& test, bad) {\n+        test.Test(false);\n+        BOOST_CHECK_MESSAGE(tests_bad.count(test.GetComment()) > 0, \"Missing auto script_invalid test: \" + test.GetComment());\n+        BOOST_CHECK_MESSAGE(ParseScript(tests_bad[test.GetComment()][1].get_str()) == test.GetScriptPubKey(), \"ScriptPubKey mismatch in auto script_invalid test: \" + test.GetComment());\n+        strBad += test;\n+    }\n+\n+#if 0\n+    FILE* valid = fopen(\"script_valid.json.gen\", \"w\");\n+    fputs(strGood.c_str(), valid);\n+    fclose(valid);\n+    FILE* invalid = fopen(\"script_invalid.json.gen\", \"w\");\n+    fputs(strBad.c_str(), invalid);\n+    fclose(invalid);\n+#endif\n+}\n+\n BOOST_AUTO_TEST_CASE(script_valid)\n {\n     // Read tests from test/data/script_valid.json\n@@ -113,8 +424,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n \n-        CTransaction tx;\n-        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, BuildSpendingTransaction(scriptSig, scriptPubKey), 0, scriptflags), strTest);\n+        DoTest(scriptPubKey, scriptSig, scriptflags, true, strTest);\n     }\n }\n \n@@ -140,8 +450,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n \n-        CTransaction tx;\n-        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, BuildSpendingTransaction(scriptSig, scriptPubKey), 0, scriptflags), strTest);\n+        DoTest(scriptPubKey, scriptSig, scriptflags, false, strTest);\n     }\n }\n "
      },
      {
        "sha": "83116b51e5c4a930ab27f76ead08597078c7ae4c",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 12,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2884b9a4aef53245798e4f50793eb3e70aa73a6d/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=2884b9a4aef53245798e4f50793eb3e70aa73a6d",
        "patch": "@@ -17,6 +17,7 @@\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/test/unit_test.hpp>\n+#include <boost/assign/list_of.hpp>\n #include \"json/json_spirit_writer_template.h\"\n \n using namespace std;\n@@ -26,22 +27,23 @@ using namespace boost::algorithm;\n // In script_tests.cpp\n extern Array read_json(const std::string& jsondata);\n \n-unsigned int ParseScriptFlags(string strFlags){\n+// Note how NOCACHE is not included as it is a runtime-only flag.\n+static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n+    (string(\"NONE\"), (unsigned int)SCRIPT_VERIFY_NONE)\n+    (string(\"P2SH\"), (unsigned int)SCRIPT_VERIFY_P2SH)\n+    (string(\"STRICTENC\"), (unsigned int)SCRIPT_VERIFY_STRICTENC)\n+    (string(\"LOW_S\"), (unsigned int)SCRIPT_VERIFY_LOW_S)\n+    (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY);\n+\n+unsigned int ParseScriptFlags(string strFlags)\n+{\n+    if (strFlags.empty()) {\n+        return 0;\n+    }\n     unsigned int flags = 0;\n     vector<string> words;\n     split(words, strFlags, is_any_of(\",\"));\n \n-    // Note how NOCACHE is not included as it is a runtime-only flag.\n-    static map<string, unsigned int> mapFlagNames;\n-    if (mapFlagNames.size() == 0)\n-    {\n-        mapFlagNames[\"NONE\"] = SCRIPT_VERIFY_NONE;\n-        mapFlagNames[\"P2SH\"] = SCRIPT_VERIFY_P2SH;\n-        mapFlagNames[\"STRICTENC\"] = SCRIPT_VERIFY_STRICTENC;\n-        mapFlagNames[\"LOW_S\"] = SCRIPT_VERIFY_LOW_S;\n-        mapFlagNames[\"NULLDUMMY\"] = SCRIPT_VERIFY_NULLDUMMY;\n-    }\n-\n     BOOST_FOREACH(string word, words)\n     {\n         if (!mapFlagNames.count(word))\n@@ -52,6 +54,22 @@ unsigned int ParseScriptFlags(string strFlags){\n     return flags;\n }\n \n+string FormatScriptFlags(unsigned int flags)\n+{\n+    if (flags == 0) {\n+        return \"\";\n+    }\n+    string ret;\n+    std::map<string, unsigned int>::const_iterator it = mapFlagNames.begin();\n+    while (it != mapFlagNames.end()) {\n+        if (flags & it->second) {\n+            ret += it->first + \",\";\n+        }\n+        it++;\n+    }\n+    return ret.substr(0, ret.size() - 1);\n+}\n+\n BOOST_AUTO_TEST_SUITE(transaction_tests)\n \n BOOST_AUTO_TEST_CASE(tx_valid)"
      }
    ]
  },
  {
    "sha": "68af7d02cf63eb3d2ed015013d245fe5d3aadbd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OGFmN2QwMmNmNjNlYjNkMmVkMDE1MDEzZDI0NWZlNWQzYWFkYmQx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-29T17:16:24Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-29T17:26:23Z"
      },
      "message": "Fix vector out of bounds in script tests",
      "tree": {
        "sha": "0939f70a0dfdf19f2e958ab9d579da476db9b18f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0939f70a0dfdf19f2e958ab9d579da476db9b18f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68af7d02cf63eb3d2ed015013d245fe5d3aadbd1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68af7d02cf63eb3d2ed015013d245fe5d3aadbd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68af7d02cf63eb3d2ed015013d245fe5d3aadbd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68af7d02cf63eb3d2ed015013d245fe5d3aadbd1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2884b9a4aef53245798e4f50793eb3e70aa73a6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2884b9a4aef53245798e4f50793eb3e70aa73a6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2884b9a4aef53245798e4f50793eb3e70aa73a6d"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "7f09b3daa1b7145f1818cce3c6b08bf56f122812",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68af7d02cf63eb3d2ed015013d245fe5d3aadbd1/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68af7d02cf63eb3d2ed015013d245fe5d3aadbd1/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=68af7d02cf63eb3d2ed015013d245fe5d3aadbd1",
        "patch": "@@ -108,20 +108,20 @@ struct KeyData\n     KeyData()\n     {\n \n-        key0.Set(&vchKey0[0], &vchKey0[32], false);\n-        key0C.Set(&vchKey0[0], &vchKey0[32], true);\n+        key0.Set(vchKey0, vchKey0 + 32, false);\n+        key0C.Set(vchKey0, vchKey0 + 32, true);\n         pubkey0 = key0.GetPubKey();\n         pubkey0H = key0.GetPubKey();\n         pubkey0C = key0C.GetPubKey();\n         *const_cast<unsigned char*>(&pubkey0H[0]) = 0x06 | (pubkey0H[64] & 1);\n \n-        key1.Set(&vchKey1[0], &vchKey1[32], false);\n-        key1C.Set(&vchKey1[0], &vchKey1[32], true);\n+        key1.Set(vchKey1, vchKey1 + 32, false);\n+        key1C.Set(vchKey1, vchKey1 + 32, true);\n         pubkey1 = key1.GetPubKey();\n         pubkey1C = key1C.GetPubKey();\n \n-        key2.Set(&vchKey2[0], &vchKey2[32], false);\n-        key2C.Set(&vchKey2[0], &vchKey2[32], true);\n+        key2.Set(vchKey2, vchKey2 + 32, false);\n+        key2C.Set(vchKey2, vchKey2 + 32, true);\n         pubkey2 = key2.GetPubKey();\n         pubkey2C = key2C.GetPubKey();\n     }\n@@ -190,8 +190,8 @@ class TestBuilder\n         std::vector<unsigned char> vchSig, r, s;\n         do {\n             key.Sign(hash, vchSig, lenS <= 32);\n-            r = std::vector<unsigned char>(&vchSig[4], &vchSig[4 + vchSig[3]]);\n-            s = std::vector<unsigned char>(&vchSig[6 + vchSig[3]], &vchSig[6 + vchSig[3] + vchSig[5 + vchSig[3]]]);\n+            r = std::vector<unsigned char>(vchSig.begin() + 4, vchSig.begin() + 4 + vchSig[3]);\n+            s = std::vector<unsigned char>(vchSig.begin() + 6 + vchSig[3], vchSig.begin() + 6 + vchSig[3] + vchSig[5 + vchSig[3]]);\n         } while (lenR != r.size() || lenS != s.size());\n         vchSig.push_back(static_cast<unsigned char>(nHashType));\n         DoPush(vchSig);"
      }
    ]
  },
  {
    "sha": "838e2e193ba5a9b2a17e6d92279449321f710b5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzhlMmUxOTNiYTVhOWIyYTE3ZTZkOTIyNzk0NDkzMjFmNzEwYjVk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-29T17:39:02Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-29T17:40:40Z"
      },
      "message": "Merge pull request #5003\n\n68af7d0 Fix vector out of bounds in script tests (Pieter Wuille)",
      "tree": {
        "sha": "0939f70a0dfdf19f2e958ab9d579da476db9b18f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0939f70a0dfdf19f2e958ab9d579da476db9b18f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/838e2e193ba5a9b2a17e6d92279449321f710b5d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUKZmYAAoJEFeJbS/48LZXRt0L/RcnAmh62V+jNtTJ66/TLeQA\nD/p/d99tH04OEA0j66PTOQj1NGMa/alz1HKaNFDfJpR1Ke2FYBbRhumaQx3q3lL/\nVCuA11IZV3GR03BjBcBjKU72YNwBY/p4WHBXleb+jC/ix/LFR4Z5VWSU2i96MZMK\n0jvQcj+v0mepxmeEwDu/8BtV7GsESDVp1F3oAZmAial6DjRThfF19QEm4bdnWapu\nvBpSLqZqQkwPVHVnl0M5jHt5sKT4732IhWtLIh1XbVcvDowUIw8IyvIDc8/e403m\nNiVaCvou3keGPVpD34DBV3exdCssx2s1SB5IDwFhWK71CBl4HimkyPt8jq3sgMVi\nCvdYXF27m+bnC2AkbONxQH8jI4vkiWp0OUfV/J7zWGQvBlsauzoPKAjZf+0Ovpeg\nXXBm0WdGCwwAlm6dUpkdKUcoGzUIgff1tKTVHPIpMkVut4TMe0zCkrKN9mPrfzfT\nTiH3k166VN/PTv6GT0rXH0eoAA4NwEiJDAqbejsyFQ==\n=6ZIk\n-----END PGP SIGNATURE-----",
        "payload": "tree 0939f70a0dfdf19f2e958ab9d579da476db9b18f\nparent 2884b9a4aef53245798e4f50793eb3e70aa73a6d\nparent 68af7d02cf63eb3d2ed015013d245fe5d3aadbd1\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1412012342 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1412012440 +0200\n\nMerge pull request #5003\n\n68af7d0 Fix vector out of bounds in script tests (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/838e2e193ba5a9b2a17e6d92279449321f710b5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/838e2e193ba5a9b2a17e6d92279449321f710b5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/838e2e193ba5a9b2a17e6d92279449321f710b5d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2884b9a4aef53245798e4f50793eb3e70aa73a6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2884b9a4aef53245798e4f50793eb3e70aa73a6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2884b9a4aef53245798e4f50793eb3e70aa73a6d"
      },
      {
        "sha": "68af7d02cf63eb3d2ed015013d245fe5d3aadbd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68af7d02cf63eb3d2ed015013d245fe5d3aadbd1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68af7d02cf63eb3d2ed015013d245fe5d3aadbd1"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "7f09b3daa1b7145f1818cce3c6b08bf56f122812",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/838e2e193ba5a9b2a17e6d92279449321f710b5d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/838e2e193ba5a9b2a17e6d92279449321f710b5d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=838e2e193ba5a9b2a17e6d92279449321f710b5d",
        "patch": "@@ -108,20 +108,20 @@ struct KeyData\n     KeyData()\n     {\n \n-        key0.Set(&vchKey0[0], &vchKey0[32], false);\n-        key0C.Set(&vchKey0[0], &vchKey0[32], true);\n+        key0.Set(vchKey0, vchKey0 + 32, false);\n+        key0C.Set(vchKey0, vchKey0 + 32, true);\n         pubkey0 = key0.GetPubKey();\n         pubkey0H = key0.GetPubKey();\n         pubkey0C = key0C.GetPubKey();\n         *const_cast<unsigned char*>(&pubkey0H[0]) = 0x06 | (pubkey0H[64] & 1);\n \n-        key1.Set(&vchKey1[0], &vchKey1[32], false);\n-        key1C.Set(&vchKey1[0], &vchKey1[32], true);\n+        key1.Set(vchKey1, vchKey1 + 32, false);\n+        key1C.Set(vchKey1, vchKey1 + 32, true);\n         pubkey1 = key1.GetPubKey();\n         pubkey1C = key1C.GetPubKey();\n \n-        key2.Set(&vchKey2[0], &vchKey2[32], false);\n-        key2C.Set(&vchKey2[0], &vchKey2[32], true);\n+        key2.Set(vchKey2, vchKey2 + 32, false);\n+        key2C.Set(vchKey2, vchKey2 + 32, true);\n         pubkey2 = key2.GetPubKey();\n         pubkey2C = key2C.GetPubKey();\n     }\n@@ -190,8 +190,8 @@ class TestBuilder\n         std::vector<unsigned char> vchSig, r, s;\n         do {\n             key.Sign(hash, vchSig, lenS <= 32);\n-            r = std::vector<unsigned char>(&vchSig[4], &vchSig[4 + vchSig[3]]);\n-            s = std::vector<unsigned char>(&vchSig[6 + vchSig[3]], &vchSig[6 + vchSig[3] + vchSig[5 + vchSig[3]]]);\n+            r = std::vector<unsigned char>(vchSig.begin() + 4, vchSig.begin() + 4 + vchSig[3]);\n+            s = std::vector<unsigned char>(vchSig.begin() + 6 + vchSig[3], vchSig.begin() + 6 + vchSig[3] + vchSig[5 + vchSig[3]]);\n         } while (lenR != r.size() || lenS != s.size());\n         vchSig.push_back(static_cast<unsigned char>(nHashType));\n         DoPush(vchSig);"
      }
    ]
  },
  {
    "sha": "a329097f925ef20a724fa7e5241b0e9d75d42bb9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzI5MDk3ZjkyNWVmMjBhNzI0ZmE3ZTUyNDFiMGU5ZDc1ZDQyYmI5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-29T23:34:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-29T23:35:11Z"
      },
      "message": "Merge pull request #4990\n\n7bec6dd cleanup license and header end comment in chain.cpp/.h (Philip Kaufmann)\n0db65d8 update license of compat and crypto (Philip Kaufmann)",
      "tree": {
        "sha": "d7ac4fb7036d8ea6473b64f4e2bb90cc095411bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7ac4fb7036d8ea6473b64f4e2bb90cc095411bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a329097f925ef20a724fa7e5241b0e9d75d42bb9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUKeyvAAoJEFeJbS/48LZXz9IL/1UU/x/t1KDPPwEo3T1SXDSm\n/YkP7ZhFyHoOcR/6c3YQ+JyH4WMUbRRjmXr6umpw3FIfyXLaRJrjekG6VxQXtQlH\ng8V1UrI4sXY60SwA5P9QLcUDSMM7VkmCrKQgWK99Y17KkvQnuOU/g+edbZi3W8/K\nkyg1JTRqjzD6TJGpO+STYWhseR+GCnT6rywr5Yg8GB7LZvKE8ic4MDV1S7ezvlVv\n9x/j5gZRvz6FxwnfEx/Djn1maNhVQ6NM0hugbDtBZsZwxelGAqLs4TgBgk5+fy5R\n4rQPb7Bt4mvcU84XS+xgZrgLv1MkEcH4UreF8Fku91vqjyFpbgQQiQXIv7PoLf4i\nFyhBV/XXX15x9Jii+z/rByCUZJpls+DgzRxvrygGj5Abq1fN7BGZZOCQQy/EGIsU\ndlI58d2yqivkAfDyy68JQegqc5jJ/UmOFc0rnuOPxp4HIwop4Xshwn86HXgqqOev\nq/KQz27Cx78qh2zhavAcxD1Jagu3gTLaXCSSd0/cNQ==\n=0eU6\n-----END PGP SIGNATURE-----",
        "payload": "tree d7ac4fb7036d8ea6473b64f4e2bb90cc095411bf\nparent 838e2e193ba5a9b2a17e6d92279449321f710b5d\nparent 7bec6dd2305281255efc510c16297556b26268e2\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1412033698 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1412033711 +0200\n\nMerge pull request #4990\n\n7bec6dd cleanup license and header end comment in chain.cpp/.h (Philip Kaufmann)\n0db65d8 update license of compat and crypto (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a329097f925ef20a724fa7e5241b0e9d75d42bb9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a329097f925ef20a724fa7e5241b0e9d75d42bb9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a329097f925ef20a724fa7e5241b0e9d75d42bb9/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "838e2e193ba5a9b2a17e6d92279449321f710b5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/838e2e193ba5a9b2a17e6d92279449321f710b5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/838e2e193ba5a9b2a17e6d92279449321f710b5d"
      },
      {
        "sha": "7bec6dd2305281255efc510c16297556b26268e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7bec6dd2305281255efc510c16297556b26268e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7bec6dd2305281255efc510c16297556b26268e2"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 23,
      "deletions": 19
    },
    "files": [
      {
        "sha": "05427a4569934c511e9adb8a46c22261765bf4cc",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chain.h\""
      },
      {
        "sha": "0aafb40b986923acbca758c37025ff5d44d35d91",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef H_BITCOIN_CHAIN\n@@ -387,4 +387,4 @@ class CChain {\n     const CBlockIndex *FindFork(const CBlockIndex *pindex) const;\n };\n \n-#endif \n+#endif // H_BITCOIN_CHAIN"
      },
      {
        "sha": "f149a08cd59aa01a84b5ad5fcc9a557b36dc2c77",
        "filename": "src/compat/glibc_compat.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/compat/glibc_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/compat/glibc_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_compat.cpp?ref=a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "patch": "@@ -1,12 +1,13 @@\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n #include \"config/bitcoin-config.h\"\n #endif\n \n #include <cstddef>\n+\n #if defined(HAVE_SYS_SELECT_H)\n #include <sys/select.h>\n #endif"
      },
      {
        "sha": "607e23b5682291c3beccd878485af4d6be148a72",
        "filename": "src/compat/glibc_sanity.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/compat/glibc_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/compat/glibc_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity.cpp?ref=a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "patch": "@@ -1,12 +1,13 @@\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #if defined(HAVE_CONFIG_H)\n #include \"config/bitcoin-config.h\"\n #endif\n \n #include <cstddef>\n+\n #if defined(HAVE_SYS_SELECT_H)\n #include <sys/select.h>\n #endif"
      },
      {
        "sha": "e0b4ac51f59add1f4cbbe725f965e4daae0de2fe",
        "filename": "src/compat/glibcxx_compat.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/compat/glibcxx_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/compat/glibcxx_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_compat.cpp?ref=a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <cstddef>"
      },
      {
        "sha": "aafa4a6aef867b4f418e4dd72aad13367a291b6b",
        "filename": "src/compat/glibcxx_sanity.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/compat/glibcxx_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/compat/glibcxx_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibcxx_sanity.cpp?ref=a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <list>"
      },
      {
        "sha": "7016ac0ab745fe4108391676570f4a7ad1767aea",
        "filename": "src/compat/sanity.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/compat/sanity.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/compat/sanity.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/sanity.h?ref=a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCON_COMPAT_SANITY_H"
      },
      {
        "sha": "67c30023c3c537bbd5f346e5d4f011ae06490192",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_CRYPTO_COMMON_H\n@@ -8,7 +8,9 @@\n #if defined(HAVE_CONFIG_H)\n #include \"bitcoin-config.h\"\n #endif\n+\n #include <stdint.h>\n+\n #if defined(HAVE_ENDIAN_H)\n #include <endian.h>\n #endif\n@@ -115,4 +117,4 @@ void static inline WriteBE64(unsigned char* ptr, uint64_t x)\n #endif\n }\n \n-#endif\n+#endif // BITCOIN_CRYPTO_COMMON_H"
      },
      {
        "sha": "cb4a94a44da9d45fb0b3e4cda46202263868b87f",
        "filename": "src/crypto/ripemd160.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/crypto/ripemd160.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/crypto/ripemd160.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.cpp?ref=a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"crypto/ripemd160.h\""
      },
      {
        "sha": "902e7ca83fc25138aa73ac651e1dfdd0cab536cb",
        "filename": "src/crypto/ripemd160.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/crypto/ripemd160.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/crypto/ripemd160.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.h?ref=a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_RIPEMD160_H\n@@ -25,4 +25,4 @@ class CRIPEMD160\n     CRIPEMD160& Reset();\n };\n \n-#endif\n+#endif // BITCOIN_RIPEMD160_H"
      },
      {
        "sha": "7f78fdfc6d27c21c3e2dc3cfc81b217d16b836ab",
        "filename": "src/crypto/sha1.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/crypto/sha1.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/crypto/sha1.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.cpp?ref=a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"crypto/sha1.h\""
      },
      {
        "sha": "68bd7ced9f059e90a920f67393dd5bd4dd63c7c6",
        "filename": "src/crypto/sha1.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/crypto/sha1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/crypto/sha1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.h?ref=a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_SHA1_H\n@@ -25,4 +25,4 @@ class CSHA1\n     CSHA1& Reset();\n };\n \n-#endif\n+#endif // BITCOIN_SHA1_H"
      },
      {
        "sha": "613aac2d710c76c945d1743720b4708de0ee6468",
        "filename": "src/crypto/sha2.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/crypto/sha2.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/crypto/sha2.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.cpp?ref=a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"crypto/sha2.h\""
      },
      {
        "sha": "a6cbe58554a847e544158efdb7ee4d08730f77ae",
        "filename": "src/crypto/sha2.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/crypto/sha2.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a329097f925ef20a724fa7e5241b0e9d75d42bb9/src/crypto/sha2.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.h?ref=a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_SHA2_H\n@@ -61,4 +61,4 @@ class CHMAC_SHA512\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n };\n \n-#endif\n+#endif // BITCOIN_SHA2_H"
      }
    ]
  },
  {
    "sha": "af0bd5ee7f8ad241830436e932af2486715327e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZjBiZDVlZTdmOGFkMjQxODMwNDM2ZTkzMmFmMjQ4NjcxNTMyN2U5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-30T02:03:11Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-30T02:03:24Z"
      },
      "message": "osx: fix signing to make Gatekeeper happy (again)\n\nThe approach from 65f3fa8d1 worked for signing on 10.9.4, but not newer\nversions. 10.9.5 (and up) want each framework to stand alone.\n\nNow in addition to copying the plist's from Qt for each framework, we put them\nin per-version dirs and only symlink to the latest, rather than using symlinks\nfor any contents.",
      "tree": {
        "sha": "ff5b7deec783fbb36935762af3138f924bf06def",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff5b7deec783fbb36935762af3138f924bf06def"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/af0bd5ee7f8ad241830436e932af2486715327e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af0bd5ee7f8ad241830436e932af2486715327e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/af0bd5ee7f8ad241830436e932af2486715327e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af0bd5ee7f8ad241830436e932af2486715327e9/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b2b78b9f2bd339cc4505996258e00c186e91792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b2b78b9f2bd339cc4505996258e00c186e91792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b2b78b9f2bd339cc4505996258e00c186e91792"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 2,
      "deletions": 7
    },
    "files": [
      {
        "sha": "1b50981f0a75c5e6b7cd194311ccea243155b0d0",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/af0bd5ee7f8ad241830436e932af2486715327e9/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/af0bd5ee7f8ad241830436e932af2486715327e9/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=af0bd5ee7f8ad241830436e932af2486715327e9",
        "patch": "@@ -283,8 +283,8 @@ def copyFramework(framework, path, verbose):\n \n     if not framework.isDylib(): # Copy resources for real frameworks\n \n-        linkfrom = os.path.join(path, \"Contents/Frameworks/\", framework.frameworkName, framework.binaryName)\n-        linkto = os.path.join(framework.binaryPath)\n+        linkfrom = os.path.join(path, \"Contents\",\"Frameworks\", framework.frameworkName, \"Versions\", \"Current\")\n+        linkto = framework.version\n         if not os.path.exists(linkfrom):\n             os.symlink(linkto, linkfrom)\n             if verbose >= 2:\n@@ -303,11 +303,6 @@ def copyFramework(framework, path, verbose):\n             toContentsDir = os.path.join(path, framework.destinationVersionContentsDirectory)\n             shutil.copytree(fromContentsDir, toContentsDir)\n             contentslinkfrom = os.path.join(path, framework.destinationContentsDirectory)\n-            if not os.path.exists(contentslinkfrom):\n-                contentslinkto = os.path.join(\"Versions/\", framework.version, \"Contents\")\n-                os.symlink(contentslinkto, contentslinkfrom)\n-                if verbose >= 3:\n-                    print \"Linked:\", contentslinkfrom, \"->\", contentslinkto\n             if verbose >= 3:\n                 print \"Copied Contents:\", fromContentsDir\n                 print \" to:\", toContentsDir"
      }
    ]
  },
  {
    "sha": "41020ebe862416931b009256020a4e7a8191c8ae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTAyMGViZTg2MjQxNjkzMWIwMDkyNTYwMjBhNGU3YTgxOTFjOGFl",
    "commit": {
      "author": {
        "name": "Whit J",
        "email": "whitj00@users.noreply.github.com",
        "date": "2014-09-30T17:41:31Z"
      },
      "committer": {
        "name": "Whit J",
        "email": "whitj00@users.noreply.github.com",
        "date": "2014-09-30T17:41:31Z"
      },
      "message": "Fix formatting in  init.md",
      "tree": {
        "sha": "2290674b912a84268729efff502db70a6f441b86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2290674b912a84268729efff502db70a6f441b86"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41020ebe862416931b009256020a4e7a8191c8ae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41020ebe862416931b009256020a4e7a8191c8ae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41020ebe862416931b009256020a4e7a8191c8ae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41020ebe862416931b009256020a4e7a8191c8ae/comments",
    "author": {
      "login": "whitj00",
      "id": 6721742,
      "node_id": "MDQ6VXNlcjY3MjE3NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6721742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/whitj00",
      "html_url": "https://github.com/whitj00",
      "followers_url": "https://api.github.com/users/whitj00/followers",
      "following_url": "https://api.github.com/users/whitj00/following{/other_user}",
      "gists_url": "https://api.github.com/users/whitj00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/whitj00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/whitj00/subscriptions",
      "organizations_url": "https://api.github.com/users/whitj00/orgs",
      "repos_url": "https://api.github.com/users/whitj00/repos",
      "events_url": "https://api.github.com/users/whitj00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/whitj00/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "whitj00",
      "id": 6721742,
      "node_id": "MDQ6VXNlcjY3MjE3NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6721742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/whitj00",
      "html_url": "https://github.com/whitj00",
      "followers_url": "https://api.github.com/users/whitj00/followers",
      "following_url": "https://api.github.com/users/whitj00/following{/other_user}",
      "gists_url": "https://api.github.com/users/whitj00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/whitj00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/whitj00/subscriptions",
      "organizations_url": "https://api.github.com/users/whitj00/orgs",
      "repos_url": "https://api.github.com/users/whitj00/repos",
      "events_url": "https://api.github.com/users/whitj00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/whitj00/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a329097f925ef20a724fa7e5241b0e9d75d42bb9"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1f0559d80643ccb209654567b9ca13eb9473cb47",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41020ebe862416931b009256020a4e7a8191c8ae/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41020ebe862416931b009256020a4e7a8191c8ae/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=41020ebe862416931b009256020a4e7a8191c8ae",
        "patch": "@@ -4,10 +4,10 @@ Sample init scripts and service configuration for bitcoind\n Sample scripts and configuration files for systemd, Upstart and OpenRC\n can be found in the contrib/init folder.\n \n-contrib/init/bitcoind.service:    systemd service unit configuration\n-contrib/init/bitcoind.openrc:     OpenRC compatible SysV style init script\n-contrib/init/bitcoind.openrcconf: OpenRC conf.d file\n-contrib/init/bitcoind.conf:       Upstart service configuration file\n+    contrib/init/bitcoind.service:    systemd service unit configuration\n+    contrib/init/bitcoind.openrc:     OpenRC compatible SysV style init script\n+    contrib/init/bitcoind.openrcconf: OpenRC conf.d file\n+    contrib/init/bitcoind.conf:       Upstart service configuration file\n \n 1. Service User\n ---------------------------------"
      }
    ]
  },
  {
    "sha": "6d7a0fa4e5a691764dc532d64af40b2dd3dc9e8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDdhMGZhNGU1YTY5MTc2NGRjNTMyZDY0YWY0MGIyZGQzZGM5ZThi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-03T20:36:06Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-09-30T19:14:22Z"
      },
      "message": "depends: update the comparison tool to a more recent version",
      "tree": {
        "sha": "e15eb81e016a84a3dcf135d6003683ed83e65c4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e15eb81e016a84a3dcf135d6003683ed83e65c4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d7a0fa4e5a691764dc532d64af40b2dd3dc9e8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d7a0fa4e5a691764dc532d64af40b2dd3dc9e8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d7a0fa4e5a691764dc532d64af40b2dd3dc9e8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d7a0fa4e5a691764dc532d64af40b2dd3dc9e8b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a329097f925ef20a724fa7e5241b0e9d75d42bb9"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 8,
      "deletions": 31
    },
    "files": [
      {
        "sha": "d9f77221902db9ab87bf9ad1ace68c800278dd7e",
        "filename": "depends/packages/native_comparisontool.mk",
        "status": "modified",
        "additions": 8,
        "deletions": 31,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d7a0fa4e5a691764dc532d64af40b2dd3dc9e8b/depends/packages/native_comparisontool.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d7a0fa4e5a691764dc532d64af40b2dd3dc9e8b/depends/packages/native_comparisontool.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_comparisontool.mk?ref=6d7a0fa4e5a691764dc532d64af40b2dd3dc9e8b",
        "patch": "@@ -1,30 +1,12 @@\n package=native_comparisontool\n-$(package)_version=1\n-$(package)_download_path=https://github.com/TheBlueMatt/test-scripts/raw/master/BitcoindComparisonTool_jar\n-$(package)_file_name=BitcoindComparisonTool.jar\n-$(package)_sha256_hash=a08b1a55523e7f57768cb66c35f47a926710e5b6c82822e1ccfbe38fcce37db2\n-$(package)_guava_file_name=guava-13.0.1.jar\n-$(package)_guava_sha256_hash=feb4b5b2e79a63b72ec47a693b1cf35cf1cea1f60a2bb2615bf21f74c7a60bb0\n-$(package)_h2_file_name=h2-1.3.167.jar\n-$(package)_h2_sha256_hash=fa97521a2e72174485a96276bcf6f573d5e44ca6aba2f62de87b33b5bb0d4b91\n-$(package)_sc-light-jdk15on_file_name=sc-light-jdk15on-1.47.0.2.jar\n-$(package)_sc-light-jdk15on_sha256_hash=931f39d351429fb96c2f749e7ecb1a256a8ebbf5edca7995c9cc085b94d1841d\n-$(package)_slf4j-api_file_name=slf4j-api-1.6.4.jar\n-$(package)_slf4j-api_sha256_hash=367b909030f714ee1176ab096b681e06348f03385e98d1bce0ed801b5452357e\n-$(package)_slf4j-jdk14_file_name=slf4j-jdk14-1.6.4.jar\n-$(package)_slf4j-jdk14_sha256_hash=064bd81796710f713f9f4a2309c0e032309934c2d2b4f7d3b6958325e584e13f\n-\n-define $(package)_fetch_cmds\n-$(call fetch_file,$(package),$($(package)_download_path),$($(package)_file_name),$($(package)_file_name),$($(package)_sha256_hash)) && \\\n-$(call fetch_file,$(package),$($(package)_download_path),$($(package)_guava_file_name),$($(package)_guava_file_name),$($(package)_guava_sha256_hash)) && \\\n-$(call fetch_file,$(package),$($(package)_download_path),$($(package)_h2_file_name),$($(package)_h2_file_name),$($(package)_h2_sha256_hash)) && \\\n-$(call fetch_file,$(package),$($(package)_download_path),$($(package)_sc-light-jdk15on_file_name),$($(package)_sc-light-jdk15on_file_name),$($(package)_sc-light-jdk15on_sha256_hash)) && \\\n-$(call fetch_file,$(package),$($(package)_download_path),$($(package)_slf4j-api_file_name),$($(package)_slf4j-api_file_name),$($(package)_slf4j-api_sha256_hash)) && \\\n-$(call fetch_file,$(package),$($(package)_download_path),$($(package)_slf4j-jdk14_file_name),$($(package)_slf4j-jdk14_file_name),$($(package)_slf4j-jdk14_sha256_hash))\n-endef\n+$(package)_version=adfd3de7\n+$(package)_download_path=https://github.com/TheBlueMatt/test-scripts/raw/10222bfdace65a0c5f3bd4a766eeb6b3a8b869fb/\n+$(package)_file_name=pull-tests-$($(package)_version).jar\n+$(package)_sha256_hash=fd2282b112e35f339dbe3729b08a04834ad719f8c9c10eeec1178465e6d36a18\n+$(package)_install_dirname=BitcoindComparisonTool_jar\n+$(package)_install_filename=BitcoindComparisonTool.jar\n \n define $(package)_extract_cmds\n-echo none\n endef\n \n define $(package)_configure_cmds\n@@ -34,11 +16,6 @@ define $(package)_build_cmds\n endef\n \n define $(package)_stage_cmds\n-  mkdir -p $($(package)_staging_prefix_dir)/share/BitcoindComparisonTool_jar && \\\n-  cp $(SOURCES_PATH)/$($(package)_file_name) $($(package)_staging_prefix_dir)/share/BitcoindComparisonTool_jar/  && \\\n-  cp $(SOURCES_PATH)/$($(package)_guava_file_name) $($(package)_staging_prefix_dir)/share/BitcoindComparisonTool_jar/  && \\\n-  cp $(SOURCES_PATH)/$($(package)_h2_file_name) $($(package)_staging_prefix_dir)/share/BitcoindComparisonTool_jar/  && \\\n-  cp $(SOURCES_PATH)/$($(package)_sc-light-jdk15on_file_name) $($(package)_staging_prefix_dir)/share/BitcoindComparisonTool_jar/  && \\\n-  cp $(SOURCES_PATH)/$($(package)_slf4j-api_file_name) $($(package)_staging_prefix_dir)/share/BitcoindComparisonTool_jar/  && \\\n-  cp $(SOURCES_PATH)/$($(package)_slf4j-jdk14_file_name) $($(package)_staging_prefix_dir)/share/BitcoindComparisonTool_jar/\n+  mkdir -p $($(package)_staging_prefix_dir)/share/$($(package)_install_dirname) && \\\n+  mv $(SOURCES_PATH)/$($(package)_file_name) $($(package)_staging_prefix_dir)/share/$($(package)_install_dirname)/$($(package)_install_filename)\n endef"
      }
    ]
  },
  {
    "sha": "e166c177bccdaf5b3c1b2238e8e04d53554d138e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTY2YzE3N2JjY2RhZjViM2MxYjIyMzhlOGUwNGQ1MzU1NGQxMzhl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-09-30T05:51:47Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-09-30T19:14:22Z"
      },
      "message": "Revert \"travis: retry tests before giving up\"\n\nThis reverts commit 7e3821c097c05a4790abac53ddd26ef28cb7cf4d.",
      "tree": {
        "sha": "d60ae082b3613c53ad90dac0d9ca0bcbc71d02e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d60ae082b3613c53ad90dac0d9ca0bcbc71d02e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e166c177bccdaf5b3c1b2238e8e04d53554d138e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e166c177bccdaf5b3c1b2238e8e04d53554d138e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e166c177bccdaf5b3c1b2238e8e04d53554d138e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e166c177bccdaf5b3c1b2238e8e04d53554d138e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d7a0fa4e5a691764dc532d64af40b2dd3dc9e8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d7a0fa4e5a691764dc532d64af40b2dd3dc9e8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d7a0fa4e5a691764dc532d64af40b2dd3dc9e8b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f7d94df64687a0dbc756b9d3d0f341cd3396caff",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e166c177bccdaf5b3c1b2238e8e04d53554d138e/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e166c177bccdaf5b3c1b2238e8e04d53554d138e/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=e166c177bccdaf5b3c1b2238e8e04d53554d138e",
        "patch": "@@ -58,6 +58,6 @@ script:\n     - cd bitcoin-$HOST\n     - ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n-    - if [ \"$RUN_TESTS\" = \"true\" ]; then travis_retry make check; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n after_script:\n     - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then (echo \"Upload goes here. Something like: scp -r $BASE_OUTDIR server\" || echo \"upload failed\"); fi"
      }
    ]
  },
  {
    "sha": "41d67c78bf66c8c171947148e18b9ec01768ba65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MWQ2N2M3OGJmNjZjOGMxNzE5NDcxNDhlMThiOWVjMDE3NjhiYTY1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-30T20:05:27Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-30T20:26:22Z"
      },
      "message": "tests: fix python test-runner for windows\n\nWindows needed a few fixups to get the tests running:\n1. bitcoin-tx needs a file extension in Windows. Take this opportunity to\n   add an env file, which pulls variables out of our build config. This can\n   be extended as needed, for now it's very simple.\n2. After #1, split the args out of the exec key in the test data.\n3. Correct the line-endings from windows stdout",
      "tree": {
        "sha": "24f9b9fa21f92eb8df80c6343498016cc3688589",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24f9b9fa21f92eb8df80c6343498016cc3688589"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41d67c78bf66c8c171947148e18b9ec01768ba65",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41d67c78bf66c8c171947148e18b9ec01768ba65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41d67c78bf66c8c171947148e18b9ec01768ba65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41d67c78bf66c8c171947148e18b9ec01768ba65/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b2b78b9f2bd339cc4505996258e00c186e91792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b2b78b9f2bd339cc4505996258e00c186e91792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b2b78b9f2bd339cc4505996258e00c186e91792"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 32,
      "deletions": 19
    },
    "files": [
      {
        "sha": "7025249abab061b0621f4ef714654a64816e7877",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41d67c78bf66c8c171947148e18b9ec01768ba65/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41d67c78bf66c8c171947148e18b9ec01768ba65/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=41d67c78bf66c8c171947148e18b9ec01768ba65",
        "patch": "@@ -793,7 +793,7 @@ AC_SUBST(BUILD_TEST)\n AC_SUBST(BUILD_QT)\n AC_SUBST(BUILD_TEST_QT)\n AC_SUBST(MINIUPNPC_CPPFLAGS)\n-AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist])\n+AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n AC_CONFIG_FILES([qa/pull-tester/build-tests.sh],[chmod +x qa/pull-tester/build-tests.sh])\n AC_OUTPUT"
      },
      {
        "sha": "ef461014eab1c342ee006ebfb4fb5599a762a0ec",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41d67c78bf66c8c171947148e18b9ec01768ba65/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41d67c78bf66c8c171947148e18b9ec01768ba65/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=41d67c78bf66c8c171947148e18b9ec01768ba65",
        "patch": "@@ -7,9 +7,11 @@\n import json\n import sys\n \n-def bctest(testDir, testObj):\n-\texecargs = testObj['exec']\n+def bctest(testDir, testObj, exeext):\n \n+\texecprog = testObj['exec'] + exeext\n+\texecargs = testObj['args']\n+\texecrun = [execprog] + execargs\n \tstdinCfg = None\n \tinputData = None\n \tif \"input\" in testObj:\n@@ -22,12 +24,11 @@ def bctest(testDir, testObj):\n \tif \"output_cmp\" in testObj:\n \t\toutputFn = testObj['output_cmp']\n \t\toutputData = open(testDir + \"/\" + outputFn).read()\n-\n-\tproc = subprocess.Popen(execargs, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+\tproc = subprocess.Popen(execrun, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE,universal_newlines=True)\n \ttry:\n \t\touts = proc.communicate(input=inputData)\n \texcept OSError:\n-\t\tprint(\"OSError, Failed to execute \" + execargs[0])\n+\t\tprint(\"OSError, Failed to execute \" + execprog)\n \t\tsys.exit(1)\n \n \tif outputData and (outs[0] != outputData):\n@@ -41,13 +42,13 @@ def bctest(testDir, testObj):\n \t\tprint(\"Return code mismatch for \" + outputFn)\n \t\tsys.exit(1)\n \n-def bctester(testDir, input_basename):\n+def bctester(testDir, input_basename, buildenv):\n \tinput_filename = testDir + \"/\" + input_basename\n \traw_data = open(input_filename).read()\n \tinput_data = json.loads(raw_data)\n \n \tfor testObj in input_data:\n-\t\tbctest(testDir, testObj)\n+\t\tbctest(testDir, testObj, buildenv.exeext)\n \n \tsys.exit(0)\n "
      },
      {
        "sha": "0eece14cfe3a3e57ef2085dbe93b01494bf3ac74",
        "filename": "src/test/bitcoin-util-test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41d67c78bf66c8c171947148e18b9ec01768ba65/src/test/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41d67c78bf66c8c171947148e18b9ec01768ba65/src/test/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bitcoin-util-test.py?ref=41d67c78bf66c8c171947148e18b9ec01768ba65",
        "patch": "@@ -5,8 +5,9 @@\n \n import os\n import bctest\n+import buildenv\n \n if __name__ == '__main__':\n \tbctest.bctester(os.environ[\"srcdir\"] + \"/test/data\",\n-\t\t\t\"bitcoin-util-test.json\")\n+\t\t\t\"bitcoin-util-test.json\",buildenv)\n "
      },
      {
        "sha": "1618bdeb764b8513fa64d1eefe3f41dcf728c5b5",
        "filename": "src/test/buildenv.py.in",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41d67c78bf66c8c171947148e18b9ec01768ba65/src/test/buildenv.py.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41d67c78bf66c8c171947148e18b9ec01768ba65/src/test/buildenv.py.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/buildenv.py.in?ref=41d67c78bf66c8c171947148e18b9ec01768ba65",
        "patch": "@@ -0,0 +1,2 @@\n+#!/usr/bin/python\n+exeext=\"@EXEEXT@\""
      },
      {
        "sha": "f8424b72a34c03c8f3eb50a4d888de9949bf9db8",
        "filename": "src/test/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 19,
        "deletions": 10,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41d67c78bf66c8c171947148e18b9ec01768ba65/src/test/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41d67c78bf66c8c171947148e18b9ec01768ba65/src/test/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/bitcoin-util-test.json?ref=41d67c78bf66c8c171947148e18b9ec01768ba65",
        "patch": "@@ -1,41 +1,50 @@\n [\n-  { \"exec\": [\"./bitcoin-tx\", \"-create\"],\n+  { \"exec\": \"././bitcoin-tx\",\n+    \"args\": [\"-create\"],\n     \"output_cmp\": \"blanktx.hex\"\n   },\n-  { \"exec\": [\"./bitcoin-tx\", \"-\"],\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-\"],\n     \"input\": \"blanktx.hex\",\n     \"output_cmp\": \"blanktx.hex\"\n   },\n-  { \"exec\": [\"./bitcoin-tx\", \"-\", \"delin=1\"],\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-\", \"delin=1\"],\n     \"input\": \"tx394b54bb.hex\",\n     \"output_cmp\": \"tt-delin1-out.hex\"\n   },\n-  { \"exec\": [\"./bitcoin-tx\", \"-\", \"delin=31\"],\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-\", \"delin=31\"],\n     \"input\": \"tx394b54bb.hex\",\n     \"return_code\": 1\n   },\n-  { \"exec\": [\"./bitcoin-tx\", \"-\", \"delout=1\"],\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-\", \"delout=1\"],\n     \"input\": \"tx394b54bb.hex\",\n     \"output_cmp\": \"tt-delout1-out.hex\"\n   },\n-  { \"exec\": [\"./bitcoin-tx\", \"-\", \"delout=2\"],\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-\", \"delout=2\"],\n     \"input\": \"tx394b54bb.hex\",\n     \"return_code\": 1\n   },\n-  { \"exec\": [\"./bitcoin-tx\", \"-\", \"locktime=317000\"],\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-\", \"locktime=317000\"],\n     \"input\": \"tx394b54bb.hex\",\n     \"output_cmp\": \"tt-locktime317000-out.hex\"\n   },\n-  { \"exec\":\n-    [\"./bitcoin-tx\", \"-create\",\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n      \"in=bf829c6bcf84579331337659d31f89dfd138f7f7785802d5501c92333145ca7c:18\",\n      \"in=22a6f904655d53ae2ff70e701a0bbd90aa3975c0f40bfc6cc996a9049e31cdfc:1\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n      \"outaddr=4:1P8yWvZW8jVihP1bzHeqfE4aoXNX8AVa46\"],\n     \"output_cmp\": \"txcreate1.hex\"\n   },\n-  { \"exec\": [\"./bitcoin-tx\", \"-create\", \"outscript=0:\"],\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-create\", \"outscript=0:\"],\n     \"output_cmp\": \"txcreate2.hex\"\n   }\n ]"
      }
    ]
  },
  {
    "sha": "63c17613ab808208c8a760fc750e0429c8e53a39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2M2MxNzYxM2FiODA4MjA4YzhhNzYwZmM3NTBlMDQyOWM4ZTUzYTM5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-30T20:29:01Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-30T22:16:14Z"
      },
      "message": "tests: fix false-positive under win64\n\nBN_ULONG isn't necessarily an unsigned long, as is the case on win64.",
      "tree": {
        "sha": "a45850c1d7ddac7c0d8d49f2c04ea34ecffe73ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a45850c1d7ddac7c0d8d49f2c04ea34ecffe73ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63c17613ab808208c8a760fc750e0429c8e53a39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63c17613ab808208c8a760fc750e0429c8e53a39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63c17613ab808208c8a760fc750e0429c8e53a39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63c17613ab808208c8a760fc750e0429c8e53a39/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b2b78b9f2bd339cc4505996258e00c186e91792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b2b78b9f2bd339cc4505996258e00c186e91792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b2b78b9f2bd339cc4505996258e00c186e91792"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "86980b2af62f6c681fb999824b0da094856160eb",
        "filename": "src/test/bignum.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63c17613ab808208c8a760fc750e0429c8e53a39/src/test/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63c17613ab808208c8a760fc750e0429c8e53a39/src/test/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum.h?ref=63c17613ab808208c8a760fc750e0429c8e53a39",
        "patch": "@@ -63,11 +63,11 @@ class CBigNum : public BIGNUM\n \n     int getint() const\n     {\n-        unsigned long n = BN_get_word(this);\n+        BN_ULONG n = BN_get_word(this);\n         if (!BN_is_negative(this))\n-            return (n > (unsigned long)std::numeric_limits<int>::max() ? std::numeric_limits<int>::max() : n);\n+            return (n > (BN_ULONG)std::numeric_limits<int>::max() ? std::numeric_limits<int>::max() : n);\n         else\n-            return (n > (unsigned long)std::numeric_limits<int>::max() ? std::numeric_limits<int>::min() : -(int)n);\n+            return (n > (BN_ULONG)std::numeric_limits<int>::max() ? std::numeric_limits<int>::min() : -(int)n);\n     }\n \n     void setint64(int64_t sn)"
      }
    ]
  },
  {
    "sha": "7def85e1b58101ee293ba4ec00646d9409441717",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGVmODVlMWI1ODEwMWVlMjkzYmE0ZWMwMDY0NmQ5NDA5NDQxNzE3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-09-30T23:53:35Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-09-30T23:53:35Z"
      },
      "message": "Merge pull request #5006 from TheBlueMatt/travis-new-comparisontool\n\ndepends: update the comparison tool to a more recent version",
      "tree": {
        "sha": "d60ae082b3613c53ad90dac0d9ca0bcbc71d02e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d60ae082b3613c53ad90dac0d9ca0bcbc71d02e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7def85e1b58101ee293ba4ec00646d9409441717",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7def85e1b58101ee293ba4ec00646d9409441717",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7def85e1b58101ee293ba4ec00646d9409441717",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7def85e1b58101ee293ba4ec00646d9409441717/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a329097f925ef20a724fa7e5241b0e9d75d42bb9"
      },
      {
        "sha": "e166c177bccdaf5b3c1b2238e8e04d53554d138e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e166c177bccdaf5b3c1b2238e8e04d53554d138e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e166c177bccdaf5b3c1b2238e8e04d53554d138e"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 9,
      "deletions": 32
    },
    "files": [
      {
        "sha": "f7d94df64687a0dbc756b9d3d0f341cd3396caff",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7def85e1b58101ee293ba4ec00646d9409441717/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7def85e1b58101ee293ba4ec00646d9409441717/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=7def85e1b58101ee293ba4ec00646d9409441717",
        "patch": "@@ -58,6 +58,6 @@ script:\n     - cd bitcoin-$HOST\n     - ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n-    - if [ \"$RUN_TESTS\" = \"true\" ]; then travis_retry make check; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n after_script:\n     - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then (echo \"Upload goes here. Something like: scp -r $BASE_OUTDIR server\" || echo \"upload failed\"); fi"
      },
      {
        "sha": "d9f77221902db9ab87bf9ad1ace68c800278dd7e",
        "filename": "depends/packages/native_comparisontool.mk",
        "status": "modified",
        "additions": 8,
        "deletions": 31,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7def85e1b58101ee293ba4ec00646d9409441717/depends/packages/native_comparisontool.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7def85e1b58101ee293ba4ec00646d9409441717/depends/packages/native_comparisontool.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_comparisontool.mk?ref=7def85e1b58101ee293ba4ec00646d9409441717",
        "patch": "@@ -1,30 +1,12 @@\n package=native_comparisontool\n-$(package)_version=1\n-$(package)_download_path=https://github.com/TheBlueMatt/test-scripts/raw/master/BitcoindComparisonTool_jar\n-$(package)_file_name=BitcoindComparisonTool.jar\n-$(package)_sha256_hash=a08b1a55523e7f57768cb66c35f47a926710e5b6c82822e1ccfbe38fcce37db2\n-$(package)_guava_file_name=guava-13.0.1.jar\n-$(package)_guava_sha256_hash=feb4b5b2e79a63b72ec47a693b1cf35cf1cea1f60a2bb2615bf21f74c7a60bb0\n-$(package)_h2_file_name=h2-1.3.167.jar\n-$(package)_h2_sha256_hash=fa97521a2e72174485a96276bcf6f573d5e44ca6aba2f62de87b33b5bb0d4b91\n-$(package)_sc-light-jdk15on_file_name=sc-light-jdk15on-1.47.0.2.jar\n-$(package)_sc-light-jdk15on_sha256_hash=931f39d351429fb96c2f749e7ecb1a256a8ebbf5edca7995c9cc085b94d1841d\n-$(package)_slf4j-api_file_name=slf4j-api-1.6.4.jar\n-$(package)_slf4j-api_sha256_hash=367b909030f714ee1176ab096b681e06348f03385e98d1bce0ed801b5452357e\n-$(package)_slf4j-jdk14_file_name=slf4j-jdk14-1.6.4.jar\n-$(package)_slf4j-jdk14_sha256_hash=064bd81796710f713f9f4a2309c0e032309934c2d2b4f7d3b6958325e584e13f\n-\n-define $(package)_fetch_cmds\n-$(call fetch_file,$(package),$($(package)_download_path),$($(package)_file_name),$($(package)_file_name),$($(package)_sha256_hash)) && \\\n-$(call fetch_file,$(package),$($(package)_download_path),$($(package)_guava_file_name),$($(package)_guava_file_name),$($(package)_guava_sha256_hash)) && \\\n-$(call fetch_file,$(package),$($(package)_download_path),$($(package)_h2_file_name),$($(package)_h2_file_name),$($(package)_h2_sha256_hash)) && \\\n-$(call fetch_file,$(package),$($(package)_download_path),$($(package)_sc-light-jdk15on_file_name),$($(package)_sc-light-jdk15on_file_name),$($(package)_sc-light-jdk15on_sha256_hash)) && \\\n-$(call fetch_file,$(package),$($(package)_download_path),$($(package)_slf4j-api_file_name),$($(package)_slf4j-api_file_name),$($(package)_slf4j-api_sha256_hash)) && \\\n-$(call fetch_file,$(package),$($(package)_download_path),$($(package)_slf4j-jdk14_file_name),$($(package)_slf4j-jdk14_file_name),$($(package)_slf4j-jdk14_sha256_hash))\n-endef\n+$(package)_version=adfd3de7\n+$(package)_download_path=https://github.com/TheBlueMatt/test-scripts/raw/10222bfdace65a0c5f3bd4a766eeb6b3a8b869fb/\n+$(package)_file_name=pull-tests-$($(package)_version).jar\n+$(package)_sha256_hash=fd2282b112e35f339dbe3729b08a04834ad719f8c9c10eeec1178465e6d36a18\n+$(package)_install_dirname=BitcoindComparisonTool_jar\n+$(package)_install_filename=BitcoindComparisonTool.jar\n \n define $(package)_extract_cmds\n-echo none\n endef\n \n define $(package)_configure_cmds\n@@ -34,11 +16,6 @@ define $(package)_build_cmds\n endef\n \n define $(package)_stage_cmds\n-  mkdir -p $($(package)_staging_prefix_dir)/share/BitcoindComparisonTool_jar && \\\n-  cp $(SOURCES_PATH)/$($(package)_file_name) $($(package)_staging_prefix_dir)/share/BitcoindComparisonTool_jar/  && \\\n-  cp $(SOURCES_PATH)/$($(package)_guava_file_name) $($(package)_staging_prefix_dir)/share/BitcoindComparisonTool_jar/  && \\\n-  cp $(SOURCES_PATH)/$($(package)_h2_file_name) $($(package)_staging_prefix_dir)/share/BitcoindComparisonTool_jar/  && \\\n-  cp $(SOURCES_PATH)/$($(package)_sc-light-jdk15on_file_name) $($(package)_staging_prefix_dir)/share/BitcoindComparisonTool_jar/  && \\\n-  cp $(SOURCES_PATH)/$($(package)_slf4j-api_file_name) $($(package)_staging_prefix_dir)/share/BitcoindComparisonTool_jar/  && \\\n-  cp $(SOURCES_PATH)/$($(package)_slf4j-jdk14_file_name) $($(package)_staging_prefix_dir)/share/BitcoindComparisonTool_jar/\n+  mkdir -p $($(package)_staging_prefix_dir)/share/$($(package)_install_dirname) && \\\n+  mv $(SOURCES_PATH)/$($(package)_file_name) $($(package)_staging_prefix_dir)/share/$($(package)_install_dirname)/$($(package)_install_filename)\n endef"
      }
    ]
  },
  {
    "sha": "347a3a3eaad4096af668b67b2ae236258d63287c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDdhM2EzZWFhZDQwOTZhZjY2OGI2N2IyYWUyMzYyNThkNjMyODdj",
    "commit": {
      "author": {
        "name": "JL2035",
        "email": "jl2035@users.noreply.github.com",
        "date": "2014-09-30T23:53:46Z"
      },
      "committer": {
        "name": "JL2035",
        "email": "jl2035@users.noreply.github.com",
        "date": "2014-09-30T23:53:46Z"
      },
      "message": "Update build-unix.md\n\nDebian also need libboost-all-dev installed.",
      "tree": {
        "sha": "84b7aa1954a929985d431fc707ac48b45c00848e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84b7aa1954a929985d431fc707ac48b45c00848e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/347a3a3eaad4096af668b67b2ae236258d63287c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/347a3a3eaad4096af668b67b2ae236258d63287c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/347a3a3eaad4096af668b67b2ae236258d63287c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/347a3a3eaad4096af668b67b2ae236258d63287c/comments",
    "author": {
      "login": "jl2035",
      "id": 1638010,
      "node_id": "MDQ6VXNlcjE2MzgwMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1638010?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2035",
      "html_url": "https://github.com/jl2035",
      "followers_url": "https://api.github.com/users/jl2035/followers",
      "following_url": "https://api.github.com/users/jl2035/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2035/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2035/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2035/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2035/orgs",
      "repos_url": "https://api.github.com/users/jl2035/repos",
      "events_url": "https://api.github.com/users/jl2035/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2035/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2035",
      "id": 1638010,
      "node_id": "MDQ6VXNlcjE2MzgwMTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1638010?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2035",
      "html_url": "https://github.com/jl2035",
      "followers_url": "https://api.github.com/users/jl2035/followers",
      "following_url": "https://api.github.com/users/jl2035/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2035/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2035/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2035/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2035/orgs",
      "repos_url": "https://api.github.com/users/jl2035/repos",
      "events_url": "https://api.github.com/users/jl2035/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2035/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a329097f925ef20a724fa7e5241b0e9d75d42bb9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0c3376df4b036350914863c1c354c39e8f9aa81e",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/347a3a3eaad4096af668b67b2ae236258d63287c/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/347a3a3eaad4096af668b67b2ae236258d63287c/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=347a3a3eaad4096af668b67b2ae236258d63287c",
        "patch": "@@ -63,7 +63,7 @@ Build requirements:\n \n \tsudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev\n \t\n-for Ubuntu 12.04 and later:\n+for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed:\n \n \tsudo apt-get install libboost-all-dev\n "
      }
    ]
  },
  {
    "sha": "e5836eb6923b8142003915fc02f2f0b4dc7731c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTgzNmViNjkyM2I4MTQyMDAzOTE1ZmMwMmYyZjBiNGRjNzczMWMx",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-09-30T23:54:08Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-09-30T23:54:08Z"
      },
      "message": "Merge pull request #5015 from theuni/win64test\n\ntests: fix false-positive under win64",
      "tree": {
        "sha": "e8a112db0b3fe12c545bc0fb96c5b01396923443",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8a112db0b3fe12c545bc0fb96c5b01396923443"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5836eb6923b8142003915fc02f2f0b4dc7731c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5836eb6923b8142003915fc02f2f0b4dc7731c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5836eb6923b8142003915fc02f2f0b4dc7731c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5836eb6923b8142003915fc02f2f0b4dc7731c1/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7def85e1b58101ee293ba4ec00646d9409441717",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7def85e1b58101ee293ba4ec00646d9409441717",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7def85e1b58101ee293ba4ec00646d9409441717"
      },
      {
        "sha": "63c17613ab808208c8a760fc750e0429c8e53a39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63c17613ab808208c8a760fc750e0429c8e53a39",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63c17613ab808208c8a760fc750e0429c8e53a39"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "86980b2af62f6c681fb999824b0da094856160eb",
        "filename": "src/test/bignum.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5836eb6923b8142003915fc02f2f0b4dc7731c1/src/test/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5836eb6923b8142003915fc02f2f0b4dc7731c1/src/test/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum.h?ref=e5836eb6923b8142003915fc02f2f0b4dc7731c1",
        "patch": "@@ -63,11 +63,11 @@ class CBigNum : public BIGNUM\n \n     int getint() const\n     {\n-        unsigned long n = BN_get_word(this);\n+        BN_ULONG n = BN_get_word(this);\n         if (!BN_is_negative(this))\n-            return (n > (unsigned long)std::numeric_limits<int>::max() ? std::numeric_limits<int>::max() : n);\n+            return (n > (BN_ULONG)std::numeric_limits<int>::max() ? std::numeric_limits<int>::max() : n);\n         else\n-            return (n > (unsigned long)std::numeric_limits<int>::max() ? std::numeric_limits<int>::min() : -(int)n);\n+            return (n > (BN_ULONG)std::numeric_limits<int>::max() ? std::numeric_limits<int>::min() : -(int)n);\n     }\n \n     void setint64(int64_t sn)"
      }
    ]
  },
  {
    "sha": "f606bb9bafafb12bcf9bc0834125c884da97f9e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjA2YmI5YmFmYWZiMTJiY2Y5YmMwODM0MTI1Yzg4NGRhOTdmOWUx",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-28T14:09:19Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-01T06:48:22Z"
      },
      "message": "fix a possible memory leak in CWalletDB::Recover\n\n- convert pdbCopy into a boost::scoped_ptr to ensure memory gets freed\n  in all cases (e.g. after \"ret > 0\")",
      "tree": {
        "sha": "b1152359cd226b215eacbec8575f624648c8b66f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1152359cd226b215eacbec8575f624648c8b66f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f606bb9bafafb12bcf9bc0834125c884da97f9e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f606bb9bafafb12bcf9bc0834125c884da97f9e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f606bb9bafafb12bcf9bc0834125c884da97f9e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f606bb9bafafb12bcf9bc0834125c884da97f9e1/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e5836eb6923b8142003915fc02f2f0b4dc7731c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5836eb6923b8142003915fc02f2f0b4dc7731c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5836eb6923b8142003915fc02f2f0b4dc7731c1"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e13830a8f450d1e2c483b3273017f1ba15397f71",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f606bb9bafafb12bcf9bc0834125c884da97f9e1/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f606bb9bafafb12bcf9bc0834125c884da97f9e1/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=f606bb9bafafb12bcf9bc0834125c884da97f9e1",
        "patch": "@@ -15,11 +15,11 @@\n \n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n+#include <boost/scoped_ptr.hpp>\n #include <boost/thread.hpp>\n \n-using namespace std;\n using namespace boost;\n-\n+using namespace std;\n \n static uint64_t nAccountingEntryNumber = 0;\n \n@@ -926,7 +926,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n \n     bool fSuccess = allOK;\n-    Db* pdbCopy = new Db(&dbenv.dbenv, 0);\n+    boost::scoped_ptr<Db> pdbCopy(new Db(&dbenv.dbenv, 0));\n     int ret = pdbCopy->open(NULL,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name\n@@ -967,7 +967,6 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     }\n     ptxn->commit(0);\n     pdbCopy->close(0);\n-    delete pdbCopy;\n \n     return fSuccess;\n }"
      }
    ]
  },
  {
    "sha": "870da77da632501e8eec58ed73e8f30549cc41e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NzBkYTc3ZGE2MzI1MDFlOGVlYzU4ZWQ3M2U4ZjMwNTQ5Y2M0MWU5",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-28T14:11:17Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-01T06:48:23Z"
      },
      "message": "fix possible memory leaks in CWallet::EncryptWallet\n\n- add missing deletes for pwalletdbEncryption\n- add an assert before trying to reserve memory for pwalletdbEncryption\n- add a destructor to CWallet, which ensures deletion of\n  pwalletdbEncryption on object destruction",
      "tree": {
        "sha": "405722d8204e9d212c98d08ed49dff99cefc8103",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/405722d8204e9d212c98d08ed49dff99cefc8103"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/870da77da632501e8eec58ed73e8f30549cc41e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/870da77da632501e8eec58ed73e8f30549cc41e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/870da77da632501e8eec58ed73e8f30549cc41e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/870da77da632501e8eec58ed73e8f30549cc41e9/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "f606bb9bafafb12bcf9bc0834125c884da97f9e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f606bb9bafafb12bcf9bc0834125c884da97f9e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f606bb9bafafb12bcf9bc0834125c884da97f9e1"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 26,
      "deletions": 6
    },
    "files": [
      {
        "sha": "897f53b8b7d5e7f90eac90a91ab5a2f418a6a64b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/870da77da632501e8eec58ed73e8f30549cc41e9/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/870da77da632501e8eec58ed73e8f30549cc41e9/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=870da77da632501e8eec58ed73e8f30549cc41e9",
        "patch": "@@ -426,26 +426,38 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         mapMasterKeys[++nMasterKeyMaxID] = kMasterKey;\n         if (fFileBacked)\n         {\n+            assert(!pwalletdbEncryption);\n             pwalletdbEncryption = new CWalletDB(strWalletFile);\n-            if (!pwalletdbEncryption->TxnBegin())\n+            if (!pwalletdbEncryption->TxnBegin()) {\n+                delete pwalletdbEncryption;\n+                pwalletdbEncryption = NULL;\n                 return false;\n+            }\n             pwalletdbEncryption->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n         }\n \n         if (!EncryptKeys(vMasterKey))\n         {\n-            if (fFileBacked)\n+            if (fFileBacked) {\n                 pwalletdbEncryption->TxnAbort();\n-            exit(1); //We now probably have half of our keys encrypted in memory, and half not...die and let the user reload their unencrypted wallet.\n+                delete pwalletdbEncryption;\n+            }\n+            // We now probably have half of our keys encrypted in memory, and half not...\n+            // die and let the user reload their unencrypted wallet.\n+            exit(1);\n         }\n \n         // Encryption was introduced in version 0.4.0\n         SetMinVersion(FEATURE_WALLETCRYPT, pwalletdbEncryption, true);\n \n         if (fFileBacked)\n         {\n-            if (!pwalletdbEncryption->TxnCommit())\n-                exit(1); //We now have keys encrypted in memory, but no on disk...die to avoid confusion and let the user reload their unencrypted wallet.\n+            if (!pwalletdbEncryption->TxnCommit()) {\n+                delete pwalletdbEncryption;\n+                // We now have keys encrypted in memory, but no on disk...\n+                // die to avoid confusion and let the user reload their unencrypted wallet.\n+                exit(1);\n+            }\n \n             delete pwalletdbEncryption;\n             pwalletdbEncryption = NULL;\n@@ -1068,7 +1080,7 @@ int64_t CWallet::GetWatchOnlyBalance() const\n                 nTotal += pcoin->GetAvailableWatchOnlyCredit();\n         }\n     }\n-    \n+\n     return nTotal;\n }\n "
      },
      {
        "sha": "344f9c0e040240045cc591df63a1615ecac39636",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/870da77da632501e8eec58ed73e8f30549cc41e9/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/870da77da632501e8eec58ed73e8f30549cc41e9/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=870da77da632501e8eec58ed73e8f30549cc41e9",
        "patch": "@@ -143,13 +143,21 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     {\n         SetNull();\n     }\n+\n     CWallet(std::string strWalletFileIn)\n     {\n         SetNull();\n \n         strWalletFile = strWalletFileIn;\n         fFileBacked = true;\n     }\n+\n+    ~CWallet()\n+    {\n+        delete pwalletdbEncryption;\n+        pwalletdbEncryption = NULL;\n+    }\n+\n     void SetNull()\n     {\n         nWalletVersion = FEATURE_BASE;"
      }
    ]
  },
  {
    "sha": "d0c4197ef6ecfdaff792579810107e2f1b8b319e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGM0MTk3ZWY2ZWNmZGFmZjc5MjU3OTgxMDEwN2UyZjFiOGIzMTll",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-01T06:50:24Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-01T06:50:24Z"
      },
      "message": "change exit(1) to an assert in CWallet::EncryptWallet",
      "tree": {
        "sha": "6cedef65a5c754fcafe5b577d91b5fd70ff9e226",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cedef65a5c754fcafe5b577d91b5fd70ff9e226"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0c4197ef6ecfdaff792579810107e2f1b8b319e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c4197ef6ecfdaff792579810107e2f1b8b319e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c4197ef6ecfdaff792579810107e2f1b8b319e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c4197ef6ecfdaff792579810107e2f1b8b319e/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "870da77da632501e8eec58ed73e8f30549cc41e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/870da77da632501e8eec58ed73e8f30549cc41e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/870da77da632501e8eec58ed73e8f30549cc41e9"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "be063ccb42a645fe47f968a05ab3576fb1fdaa54",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0c4197ef6ecfdaff792579810107e2f1b8b319e/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0c4197ef6ecfdaff792579810107e2f1b8b319e/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=d0c4197ef6ecfdaff792579810107e2f1b8b319e",
        "patch": "@@ -15,6 +15,8 @@\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n \n+#include <assert.h>\n+\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/thread.hpp>\n \n@@ -444,7 +446,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n             }\n             // We now probably have half of our keys encrypted in memory, and half not...\n             // die and let the user reload their unencrypted wallet.\n-            exit(1);\n+            assert(false);\n         }\n \n         // Encryption was introduced in version 0.4.0\n@@ -456,7 +458,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n                 delete pwalletdbEncryption;\n                 // We now have keys encrypted in memory, but no on disk...\n                 // die to avoid confusion and let the user reload their unencrypted wallet.\n-                exit(1);\n+                assert(false);\n             }\n \n             delete pwalletdbEncryption;"
      }
    ]
  },
  {
    "sha": "a6f3e9d843d6fbcaf6dfbcd91171763b23d32632",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNmYzZTlkODQzZDZmYmNhZjZkZmJjZDkxMTcxNzYzYjIzZDMyNjMy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T06:50:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T06:55:34Z"
      },
      "message": "Merge pull request #5014\n\n41d67c7 tests: fix python test-runner for windows (Cory Fields)",
      "tree": {
        "sha": "24fccae44cfb787e91fc355f35705f38cd4cc59e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24fccae44cfb787e91fc355f35705f38cd4cc59e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUK6VmAAoJEHSBCwEjRsmmC7YH/1xEccdk0fy/56lgHTUq97PL\nSOU3tQOO4+/1UbZ+g+qaOklHJ44lKQopFcvB6gSxDurRPk3xotR3vPKuWgmSMr0m\nULW3/IaNwIKp1Bh2BcvQuyHGOxOv9E36IZmatAukcFvppuNpr+G21hDEVGOUErW9\nRYmMAQjxjfu9ipOc9OnhfiWOoMcTIAq5ERLvPTcNJETrXcqfO460RIq7CUNn2x+t\nrgjeZ7ZwTPNlK5p3phOFR9Nbx8Lf6ijnHsvJ9DwD6fRfhrqT4ud1XZZgxslavRpH\nJWglCknA6PQSp0kCMTJqyNfOfBwpwPYX61o8InO9LEfOrgS+FnFZQN9fmTeWs8I=\n=ra1U\n-----END PGP SIGNATURE-----",
        "payload": "tree 24fccae44cfb787e91fc355f35705f38cd4cc59e\nparent e5836eb6923b8142003915fc02f2f0b4dc7731c1\nparent 41d67c78bf66c8c171947148e18b9ec01768ba65\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412146217 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412146534 +0200\n\nMerge pull request #5014\n\n41d67c7 tests: fix python test-runner for windows (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5836eb6923b8142003915fc02f2f0b4dc7731c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5836eb6923b8142003915fc02f2f0b4dc7731c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5836eb6923b8142003915fc02f2f0b4dc7731c1"
      },
      {
        "sha": "41d67c78bf66c8c171947148e18b9ec01768ba65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41d67c78bf66c8c171947148e18b9ec01768ba65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41d67c78bf66c8c171947148e18b9ec01768ba65"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 32,
      "deletions": 19
    },
    "files": [
      {
        "sha": "7025249abab061b0621f4ef714654a64816e7877",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a6f3e9d843d6fbcaf6dfbcd91171763b23d32632",
        "patch": "@@ -793,7 +793,7 @@ AC_SUBST(BUILD_TEST)\n AC_SUBST(BUILD_QT)\n AC_SUBST(BUILD_TEST_QT)\n AC_SUBST(MINIUPNPC_CPPFLAGS)\n-AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist])\n+AC_CONFIG_FILES([Makefile src/Makefile share/setup.nsi share/qt/Info.plist src/test/buildenv.py])\n AC_CONFIG_FILES([qa/pull-tester/run-bitcoind-for-test.sh],[chmod +x qa/pull-tester/run-bitcoind-for-test.sh])\n AC_CONFIG_FILES([qa/pull-tester/build-tests.sh],[chmod +x qa/pull-tester/build-tests.sh])\n AC_OUTPUT"
      },
      {
        "sha": "ef461014eab1c342ee006ebfb4fb5599a762a0ec",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=a6f3e9d843d6fbcaf6dfbcd91171763b23d32632",
        "patch": "@@ -7,9 +7,11 @@\n import json\n import sys\n \n-def bctest(testDir, testObj):\n-\texecargs = testObj['exec']\n+def bctest(testDir, testObj, exeext):\n \n+\texecprog = testObj['exec'] + exeext\n+\texecargs = testObj['args']\n+\texecrun = [execprog] + execargs\n \tstdinCfg = None\n \tinputData = None\n \tif \"input\" in testObj:\n@@ -22,12 +24,11 @@ def bctest(testDir, testObj):\n \tif \"output_cmp\" in testObj:\n \t\toutputFn = testObj['output_cmp']\n \t\toutputData = open(testDir + \"/\" + outputFn).read()\n-\n-\tproc = subprocess.Popen(execargs, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n+\tproc = subprocess.Popen(execrun, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE,universal_newlines=True)\n \ttry:\n \t\touts = proc.communicate(input=inputData)\n \texcept OSError:\n-\t\tprint(\"OSError, Failed to execute \" + execargs[0])\n+\t\tprint(\"OSError, Failed to execute \" + execprog)\n \t\tsys.exit(1)\n \n \tif outputData and (outs[0] != outputData):\n@@ -41,13 +42,13 @@ def bctest(testDir, testObj):\n \t\tprint(\"Return code mismatch for \" + outputFn)\n \t\tsys.exit(1)\n \n-def bctester(testDir, input_basename):\n+def bctester(testDir, input_basename, buildenv):\n \tinput_filename = testDir + \"/\" + input_basename\n \traw_data = open(input_filename).read()\n \tinput_data = json.loads(raw_data)\n \n \tfor testObj in input_data:\n-\t\tbctest(testDir, testObj)\n+\t\tbctest(testDir, testObj, buildenv.exeext)\n \n \tsys.exit(0)\n "
      },
      {
        "sha": "0eece14cfe3a3e57ef2085dbe93b01494bf3ac74",
        "filename": "src/test/bitcoin-util-test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632/src/test/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632/src/test/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bitcoin-util-test.py?ref=a6f3e9d843d6fbcaf6dfbcd91171763b23d32632",
        "patch": "@@ -5,8 +5,9 @@\n \n import os\n import bctest\n+import buildenv\n \n if __name__ == '__main__':\n \tbctest.bctester(os.environ[\"srcdir\"] + \"/test/data\",\n-\t\t\t\"bitcoin-util-test.json\")\n+\t\t\t\"bitcoin-util-test.json\",buildenv)\n "
      },
      {
        "sha": "1618bdeb764b8513fa64d1eefe3f41dcf728c5b5",
        "filename": "src/test/buildenv.py.in",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632/src/test/buildenv.py.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632/src/test/buildenv.py.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/buildenv.py.in?ref=a6f3e9d843d6fbcaf6dfbcd91171763b23d32632",
        "patch": "@@ -0,0 +1,2 @@\n+#!/usr/bin/python\n+exeext=\"@EXEEXT@\""
      },
      {
        "sha": "f8424b72a34c03c8f3eb50a4d888de9949bf9db8",
        "filename": "src/test/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 19,
        "deletions": 10,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632/src/test/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632/src/test/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/bitcoin-util-test.json?ref=a6f3e9d843d6fbcaf6dfbcd91171763b23d32632",
        "patch": "@@ -1,41 +1,50 @@\n [\n-  { \"exec\": [\"./bitcoin-tx\", \"-create\"],\n+  { \"exec\": \"././bitcoin-tx\",\n+    \"args\": [\"-create\"],\n     \"output_cmp\": \"blanktx.hex\"\n   },\n-  { \"exec\": [\"./bitcoin-tx\", \"-\"],\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-\"],\n     \"input\": \"blanktx.hex\",\n     \"output_cmp\": \"blanktx.hex\"\n   },\n-  { \"exec\": [\"./bitcoin-tx\", \"-\", \"delin=1\"],\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-\", \"delin=1\"],\n     \"input\": \"tx394b54bb.hex\",\n     \"output_cmp\": \"tt-delin1-out.hex\"\n   },\n-  { \"exec\": [\"./bitcoin-tx\", \"-\", \"delin=31\"],\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-\", \"delin=31\"],\n     \"input\": \"tx394b54bb.hex\",\n     \"return_code\": 1\n   },\n-  { \"exec\": [\"./bitcoin-tx\", \"-\", \"delout=1\"],\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-\", \"delout=1\"],\n     \"input\": \"tx394b54bb.hex\",\n     \"output_cmp\": \"tt-delout1-out.hex\"\n   },\n-  { \"exec\": [\"./bitcoin-tx\", \"-\", \"delout=2\"],\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-\", \"delout=2\"],\n     \"input\": \"tx394b54bb.hex\",\n     \"return_code\": 1\n   },\n-  { \"exec\": [\"./bitcoin-tx\", \"-\", \"locktime=317000\"],\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-\", \"locktime=317000\"],\n     \"input\": \"tx394b54bb.hex\",\n     \"output_cmp\": \"tt-locktime317000-out.hex\"\n   },\n-  { \"exec\":\n-    [\"./bitcoin-tx\", \"-create\",\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-create\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n      \"in=bf829c6bcf84579331337659d31f89dfd138f7f7785802d5501c92333145ca7c:18\",\n      \"in=22a6f904655d53ae2ff70e701a0bbd90aa3975c0f40bfc6cc996a9049e31cdfc:1\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n      \"outaddr=4:1P8yWvZW8jVihP1bzHeqfE4aoXNX8AVa46\"],\n     \"output_cmp\": \"txcreate1.hex\"\n   },\n-  { \"exec\": [\"./bitcoin-tx\", \"-create\", \"outscript=0:\"],\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-create\", \"outscript=0:\"],\n     \"output_cmp\": \"txcreate2.hex\"\n   }\n ]"
      }
    ]
  },
  {
    "sha": "211d2939fd41c81fb67603060f94e5a2d6382f6b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTFkMjkzOWZkNDFjODFmYjY3NjAzMDYwZjk0ZTVhMmQ2MzgyZjZi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T06:55:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T06:56:53Z"
      },
      "message": "Merge pull request #5018\n\n347a3a3 Update build-unix.md (JL2035)",
      "tree": {
        "sha": "7d5fe0026699639234cdf7fca8adfc42126a5187",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d5fe0026699639234cdf7fca8adfc42126a5187"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/211d2939fd41c81fb67603060f94e5a2d6382f6b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUK6W1AAoJEHSBCwEjRsmmqr8IAIr+jcReV+zqdrTrHFPQY7LM\n0xQ+XXjP0NGDjF4VZfZEzM/cNeJ9O/Kp9GaWz2OKmxyVSvlzipY/ZD+/HTR+Jwbv\nR2hnxZtOvaQABsf4qaPcfLfxcDbQhryuJx21NB/yL/OoVJg/wDkCI4tqR662qgFE\nKO1LHWK1yorjrUDDwxP9yQ/9lp8YMSYFLrJYrSJ3sPjIZJb+xYyuD7/ZVuPEtWgU\ncWqA0gYX2OucM48uEXLuKGsR9IkzN09uWim45HzkviSsrXTHaZGHEF9YM39P2sXb\nFDoODubK7Ec8hDOS4plU1gFNX93A+YlWvfzer2buzlUGqRfoesvHhpRUT/ybwvU=\n=/cY/\n-----END PGP SIGNATURE-----",
        "payload": "tree 7d5fe0026699639234cdf7fca8adfc42126a5187\nparent a6f3e9d843d6fbcaf6dfbcd91171763b23d32632\nparent 347a3a3eaad4096af668b67b2ae236258d63287c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412146547 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412146613 +0200\n\nMerge pull request #5018\n\n347a3a3 Update build-unix.md (JL2035)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/211d2939fd41c81fb67603060f94e5a2d6382f6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/211d2939fd41c81fb67603060f94e5a2d6382f6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/211d2939fd41c81fb67603060f94e5a2d6382f6b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a6f3e9d843d6fbcaf6dfbcd91171763b23d32632",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a6f3e9d843d6fbcaf6dfbcd91171763b23d32632"
      },
      {
        "sha": "347a3a3eaad4096af668b67b2ae236258d63287c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/347a3a3eaad4096af668b67b2ae236258d63287c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/347a3a3eaad4096af668b67b2ae236258d63287c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0c3376df4b036350914863c1c354c39e8f9aa81e",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/211d2939fd41c81fb67603060f94e5a2d6382f6b/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/211d2939fd41c81fb67603060f94e5a2d6382f6b/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=211d2939fd41c81fb67603060f94e5a2d6382f6b",
        "patch": "@@ -63,7 +63,7 @@ Build requirements:\n \n \tsudo apt-get install build-essential libtool autotools-dev autoconf pkg-config libssl-dev\n \t\n-for Ubuntu 12.04 and later:\n+for Ubuntu 12.04 and later or Debian 7 and later libboost-all-dev has to be installed:\n \n \tsudo apt-get install libboost-all-dev\n "
      }
    ]
  },
  {
    "sha": "437634a79eda03dc46bd1c637733a6cdab71a6c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Mzc2MzRhNzllZGEwM2RjNDZiZDFjNjM3NzMzYTZjZGFiNzFhNmM1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T07:00:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T07:00:45Z"
      },
      "message": "Merge pull request #5005\n\naf0bd5e osx: fix signing to make Gatekeeper happy (again) (Cory Fields)",
      "tree": {
        "sha": "d086ae754745c74d36d61dce57a22e008a2210dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d086ae754745c74d36d61dce57a22e008a2210dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/437634a79eda03dc46bd1c637733a6cdab71a6c5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUK6adAAoJEHSBCwEjRsmmDTEH/1mh0eKq3ZyvfnLGiKKx/oqX\nEFg2DOdj3JdgGTOckK9dzkj7Q1lHy+atly3c2/lSmc7Z/No6DDn4WSRe6cZ52Nui\n5n0Ztvq7m9IRCChs7A2AEp1zoM4OJ9/Wku/fDT6xrcLKt0OpMra9gECY6l7RWbUy\ntpkGczru7jQcRpKXz4mn1neSHkoTUg9cl6RN7CqJ3CMtYYjUY0Kn1NY9qj+reLa3\nx82f5NXvx6GksvT6BpEuY3qp5ksi+4IbXF/1AmHtHmLCGrQHpXxXB3neHWJ7w9dq\noYD+zurOBakDt7uUoI2G+vBtQnHNv9Xfc2S2+ohXlqsSf4zeJysCnIVLErftogg=\n=B5rA\n-----END PGP SIGNATURE-----",
        "payload": "tree d086ae754745c74d36d61dce57a22e008a2210dd\nparent 211d2939fd41c81fb67603060f94e5a2d6382f6b\nparent af0bd5ee7f8ad241830436e932af2486715327e9\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412146837 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412146845 +0200\n\nMerge pull request #5005\n\naf0bd5e osx: fix signing to make Gatekeeper happy (again) (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/437634a79eda03dc46bd1c637733a6cdab71a6c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/437634a79eda03dc46bd1c637733a6cdab71a6c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/437634a79eda03dc46bd1c637733a6cdab71a6c5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "211d2939fd41c81fb67603060f94e5a2d6382f6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/211d2939fd41c81fb67603060f94e5a2d6382f6b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/211d2939fd41c81fb67603060f94e5a2d6382f6b"
      },
      {
        "sha": "af0bd5ee7f8ad241830436e932af2486715327e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af0bd5ee7f8ad241830436e932af2486715327e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af0bd5ee7f8ad241830436e932af2486715327e9"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 2,
      "deletions": 7
    },
    "files": [
      {
        "sha": "1b50981f0a75c5e6b7cd194311ccea243155b0d0",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/437634a79eda03dc46bd1c637733a6cdab71a6c5/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/437634a79eda03dc46bd1c637733a6cdab71a6c5/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=437634a79eda03dc46bd1c637733a6cdab71a6c5",
        "patch": "@@ -283,8 +283,8 @@ def copyFramework(framework, path, verbose):\n \n     if not framework.isDylib(): # Copy resources for real frameworks\n \n-        linkfrom = os.path.join(path, \"Contents/Frameworks/\", framework.frameworkName, framework.binaryName)\n-        linkto = os.path.join(framework.binaryPath)\n+        linkfrom = os.path.join(path, \"Contents\",\"Frameworks\", framework.frameworkName, \"Versions\", \"Current\")\n+        linkto = framework.version\n         if not os.path.exists(linkfrom):\n             os.symlink(linkto, linkfrom)\n             if verbose >= 2:\n@@ -303,11 +303,6 @@ def copyFramework(framework, path, verbose):\n             toContentsDir = os.path.join(path, framework.destinationVersionContentsDirectory)\n             shutil.copytree(fromContentsDir, toContentsDir)\n             contentslinkfrom = os.path.join(path, framework.destinationContentsDirectory)\n-            if not os.path.exists(contentslinkfrom):\n-                contentslinkto = os.path.join(\"Versions/\", framework.version, \"Contents\")\n-                os.symlink(contentslinkto, contentslinkfrom)\n-                if verbose >= 3:\n-                    print \"Linked:\", contentslinkfrom, \"->\", contentslinkto\n             if verbose >= 3:\n                 print \"Copied Contents:\", fromContentsDir\n                 print \" to:\", toContentsDir"
      }
    ]
  },
  {
    "sha": "b25551101c7ceff8af862131c30c08527ff60160",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjU1NTExMDFjN2NlZmY4YWY4NjIxMzFjMzBjMDg1MjdmZjYwMTYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T07:07:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T07:07:42Z"
      },
      "message": "Merge pull request #5008\n\n41020eb Fix formatting in  init.md (Whit J)",
      "tree": {
        "sha": "95bc144ee42dad447039ceada105235bdcdded0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95bc144ee42dad447039ceada105235bdcdded0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b25551101c7ceff8af862131c30c08527ff60160",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUK6g+AAoJEHSBCwEjRsmmw1oH/1sBB214DLcvX40r+Xh/uBET\nLrTiswmQlBgoYPFi0Rtb07DCP28rk94LJWqmPwwt6hiP7dEigY5jlmMWetp9xLtc\n8ZFjZy9oVqGGMcfthncVHJ7CZsaJho0sXwFNg1aR19UOzGjt1rxF26rWE5ZGaSxz\noY24/IfX+cSCjAGfyt272LcGpbp2xclRetOcQtXB6K/aYWYOKuV+Afybt15rh74q\nq2t7T95q9li3M2WGL3ePriiFm5Xyz8qjmOe3b76iEV0xofbYZww9jaWr0hrxCk+u\nmwo8l4v/SwTLuvQ8jIO1VYhNoSyp/KHO5mWp+uubwOO5IcPFr1AvMvXwSP58Yvo=\n=F98M\n-----END PGP SIGNATURE-----",
        "payload": "tree 95bc144ee42dad447039ceada105235bdcdded0e\nparent 437634a79eda03dc46bd1c637733a6cdab71a6c5\nparent 41020ebe862416931b009256020a4e7a8191c8ae\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412147255 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412147262 +0200\n\nMerge pull request #5008\n\n41020eb Fix formatting in  init.md (Whit J)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b25551101c7ceff8af862131c30c08527ff60160",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b25551101c7ceff8af862131c30c08527ff60160",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b25551101c7ceff8af862131c30c08527ff60160/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "437634a79eda03dc46bd1c637733a6cdab71a6c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/437634a79eda03dc46bd1c637733a6cdab71a6c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/437634a79eda03dc46bd1c637733a6cdab71a6c5"
      },
      {
        "sha": "41020ebe862416931b009256020a4e7a8191c8ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41020ebe862416931b009256020a4e7a8191c8ae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41020ebe862416931b009256020a4e7a8191c8ae"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1f0559d80643ccb209654567b9ca13eb9473cb47",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b25551101c7ceff8af862131c30c08527ff60160/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b25551101c7ceff8af862131c30c08527ff60160/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=b25551101c7ceff8af862131c30c08527ff60160",
        "patch": "@@ -4,10 +4,10 @@ Sample init scripts and service configuration for bitcoind\n Sample scripts and configuration files for systemd, Upstart and OpenRC\n can be found in the contrib/init folder.\n \n-contrib/init/bitcoind.service:    systemd service unit configuration\n-contrib/init/bitcoind.openrc:     OpenRC compatible SysV style init script\n-contrib/init/bitcoind.openrcconf: OpenRC conf.d file\n-contrib/init/bitcoind.conf:       Upstart service configuration file\n+    contrib/init/bitcoind.service:    systemd service unit configuration\n+    contrib/init/bitcoind.openrc:     OpenRC compatible SysV style init script\n+    contrib/init/bitcoind.openrcconf: OpenRC conf.d file\n+    contrib/init/bitcoind.conf:       Upstart service configuration file\n \n 1. Service User\n ---------------------------------"
      }
    ]
  },
  {
    "sha": "b5ec5fe0cb0a85cb626167b66fdda3bed8c5ba19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWVjNWZlMGNiMGE4NWNiNjI2MTY3YjY2ZmRkYTNiZWQ4YzViYTE5",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-25T09:56:05Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-01T08:23:00Z"
      },
      "message": "update getnetworkinfo help with subversion\n\n- add missing subversion field to getnetworkinfo help\n- fix style and format errors in help string\n- remove unneeded int casts",
      "tree": {
        "sha": "79f9113b8a89dd017d562e0fb8857aa74ce4aff9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79f9113b8a89dd017d562e0fb8857aa74ce4aff9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5ec5fe0cb0a85cb626167b66fdda3bed8c5ba19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5ec5fe0cb0a85cb626167b66fdda3bed8c5ba19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5ec5fe0cb0a85cb626167b66fdda3bed8c5ba19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5ec5fe0cb0a85cb626167b66fdda3bed8c5ba19/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e5836eb6923b8142003915fc02f2f0b4dc7731c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5836eb6923b8142003915fc02f2f0b4dc7731c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5836eb6923b8142003915fc02f2f0b4dc7731c1"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 24,
      "deletions": 18
    },
    "files": [
      {
        "sha": "bc19d1372a7539a86abdc112351ed908352f68ee",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 18,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5ec5fe0cb0a85cb626167b66fdda3bed8c5ba19/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5ec5fe0cb0a85cb626167b66fdda3bed8c5ba19/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=b5ec5fe0cb0a85cb626167b66fdda3bed8c5ba19",
        "patch": "@@ -368,23 +368,29 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n             \"Returns an object containing various state info regarding P2P networking.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"version\\\": xxxxx,           (numeric) the server version\\n\"\n-            \"  \\\"protocolversion\\\": xxxxx,   (numeric) the protocol version\\n\"\n-            \"  \\\"localservices\\\": \\\"xxxxxxxxxxxxxxxx\\\",   (string) the services we offer to the network\\n\"\n-            \"  \\\"timeoffset\\\": xxxxx,        (numeric) the time offset\\n\"\n-            \"  \\\"connections\\\": xxxxx,       (numeric) the number of connections\\n\"\n-            \"  \\\"networks\\\": [               (array) information per network\\n\"\n-            \"      \\\"name\\\": \\\"xxx\\\",        (string) network (ipv4, ipv6 or onion)\\n\"\n-            \"      \\\"limited\\\": xxx,         (boolean) is the network limited using -onlynet?\\n\"\n-            \"      \\\"reachable\\\": xxx,       (boolean) is the network reachable?\\n\"\n-            \"      \\\"proxy\\\": \\\"host:port\\\"  (string) the proxy that is used for this network, or empty if none\\n\"\n-            \"    },\\n\"\n+            \"  \\\"version\\\": xxxxx,                      (numeric) the server version\\n\"\n+            \"  \\\"subversion\\\": \\\"/Satoshi:x.x.x/\\\",     (string) the server subversion string\\n\"\n+            \"  \\\"protocolversion\\\": xxxxx,              (numeric) the protocol version\\n\"\n+            \"  \\\"localservices\\\": \\\"xxxxxxxxxxxxxxxx\\\", (string) the services we offer to the network\\n\"\n+            \"  \\\"timeoffset\\\": xxxxx,                   (numeric) the time offset\\n\"\n+            \"  \\\"connections\\\": xxxxx,                  (numeric) the number of connections\\n\"\n+            \"  \\\"networks\\\": [                          (array) information per network\\n\"\n+            \"  {\\n\"\n+            \"    \\\"name\\\": \\\"xxx\\\",                     (string) network (ipv4, ipv6 or onion)\\n\"\n+            \"    \\\"limited\\\": true|false,               (boolean) is the network limited using -onlynet?\\n\"\n+            \"    \\\"reachable\\\": true|false,             (boolean) is the network reachable?\\n\"\n+            \"    \\\"proxy\\\": \\\"host:port\\\"               (string) the proxy that is used for this network, or empty if none\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"relayfee\\\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in btc/kb\\n\"\n-            \"  \\\"localaddresses\\\": [,        (array) list of local addresses\\n\"\n-            \"    \\\"address\\\": \\\"xxxx\\\",      (string) network address\\n\"\n-            \"    \\\"port\\\": xxx,              (numeric) network port\\n\"\n-            \"    \\\"score\\\": xxx              (numeric) relative score\\n\"\n+            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in btc/kb\\n\"\n+            \"  \\\"localaddresses\\\": [                    (array) list of local addresses\\n\"\n+            \"  {\\n\"\n+            \"    \\\"address\\\": \\\"xxxx\\\",                 (string) network address\\n\"\n+            \"    \\\"port\\\": xxx,                         (numeric) network port\\n\"\n+            \"    \\\"score\\\": xxx                         (numeric) relative score\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n             \"  ]\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n@@ -393,10 +399,10 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n         );\n \n     Object obj;\n-    obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n+    obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n     obj.push_back(Pair(\"subversion\",\n         FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>())));\n-    obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n+    obj.push_back(Pair(\"protocolversion\",PROTOCOL_VERSION));\n     obj.push_back(Pair(\"localservices\",       strprintf(\"%016x\", nLocalServices)));\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));"
      }
    ]
  },
  {
    "sha": "c375b5c102971abfefaaf07776b5b65f1cca54f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzc1YjVjMTAyOTcxYWJmZWZhYWYwNzc3NmI1YjY1ZjFjY2E1NGYx",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-01T09:00:29Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-01T09:00:29Z"
      },
      "message": "remove dead/unused code in walletdb.cpp\n\n- closes #5021",
      "tree": {
        "sha": "fe1fb246f54c22738e50e2c116cf4c2912368a90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe1fb246f54c22738e50e2c116cf4c2912368a90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c375b5c102971abfefaaf07776b5b65f1cca54f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c375b5c102971abfefaaf07776b5b65f1cca54f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c375b5c102971abfefaaf07776b5b65f1cca54f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c375b5c102971abfefaaf07776b5b65f1cca54f1/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "b25551101c7ceff8af862131c30c08527ff60160",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b25551101c7ceff8af862131c30c08527ff60160",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b25551101c7ceff8af862131c30c08527ff60160"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b21cb4eabde4332368efd021d0e9f37e4bdbbceb",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c375b5c102971abfefaaf07776b5b65f1cca54f1/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c375b5c102971abfefaaf07776b5b65f1cca54f1/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=c375b5c102971abfefaaf07776b5b65f1cca54f1",
        "patch": "@@ -391,13 +391,6 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 wss.fAnyUnordered = true;\n \n             pwallet->AddToWallet(wtx, true);\n-            //// debug print\n-            //LogPrintf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString());\n-            //LogPrintf(\" %12d  %s  %s  %s\\n\",\n-            //    wtx.vout[0].nValue,\n-            //    DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", wtx.GetBlockTime()),\n-            //    wtx.hashBlock.ToString(),\n-            //    wtx.mapValue[\"message\"]);\n         }\n         else if (strType == \"acentry\")\n         {\n@@ -708,7 +701,6 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash, vector<CWalletTx>& vWtx)\n {\n     pwallet->vchDefaultKey = CPubKey();\n-    CWalletScanState wss;\n     bool fNoncriticalErrors = false;\n     DBErrors result = DB_LOAD_OK;\n "
      }
    ]
  },
  {
    "sha": "c122f5528c882efc8aebe31fd4d84612175f66aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMTIyZjU1MjhjODgyZWZjOGFlYmUzMWZkNGQ4NDYxMjE3NWY2NmFh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T08:09:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T09:06:41Z"
      },
      "message": "qt: Register CAmount metatype\n\nThis allows sending the type over queued connections.\nAlso normalize signal/slot names.",
      "tree": {
        "sha": "133fc575e79ef53d232d49b46abb18566267f0a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/133fc575e79ef53d232d49b46abb18566267f0a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c122f5528c882efc8aebe31fd4d84612175f66aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c122f5528c882efc8aebe31fd4d84612175f66aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c122f5528c882efc8aebe31fd4d84612175f66aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c122f5528c882efc8aebe31fd4d84612175f66aa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a372168e77a8a195613a02983f2589252698bf0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a372168e77a8a195613a02983f2589252698bf0f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a372168e77a8a195613a02983f2589252698bf0f"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "5e2fdc6c30e85d2c6766777ec8e228afa957b875",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c122f5528c882efc8aebe31fd4d84612175f66aa/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c122f5528c882efc8aebe31fd4d84612175f66aa/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=c122f5528c882efc8aebe31fd4d84612175f66aa",
        "patch": "@@ -73,6 +73,7 @@ Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);\n \n // Declare meta types used for QMetaObject::invokeMethod\n Q_DECLARE_METATYPE(bool*)\n+Q_DECLARE_METATYPE(CAmount)\n \n static void InitMessage(const std::string &message)\n {\n@@ -509,6 +510,9 @@ int main(int argc, char *argv[])\n \n     // Register meta types used for QMetaObject::invokeMethod\n     qRegisterMetaType< bool* >();\n+    //   Need to pass name here as CAmount is a typedef (see http://qt-project.org/doc/qt-5/qmetatype.html#qRegisterMetaType)\n+    //   IMPORTANT if it is no longer a typedef use the normal variant above\n+    qRegisterMetaType< CAmount >(\"CAmount\");\n \n     /// 3. Application identification\n     // must be set before OptionsModel is initialized or translations are loaded,"
      },
      {
        "sha": "669d5474fd695e7d1295eeb6b81f004b13766d6d",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c122f5528c882efc8aebe31fd4d84612175f66aa/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c122f5528c882efc8aebe31fd4d84612175f66aa/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=c122f5528c882efc8aebe31fd4d84612175f66aa",
        "patch": "@@ -220,7 +220,7 @@ void OverviewPage::setWalletModel(WalletModel *model)\n         // Keep up to date with wallet\n         setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance(),\n                    model->getWatchBalance(), model->getWatchUnconfirmedBalance(), model->getWatchImmatureBalance());\n-        connect(model, SIGNAL(balanceChanged(const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&)), this, SLOT(setBalance(const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&)));\n+        connect(model, SIGNAL(balanceChanged(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)), this, SLOT(setBalance(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)));\n \n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n "
      },
      {
        "sha": "ce94131cce012e79b997ae6322277b23f1f40f37",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c122f5528c882efc8aebe31fd4d84612175f66aa/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c122f5528c882efc8aebe31fd4d84612175f66aa/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=c122f5528c882efc8aebe31fd4d84612175f66aa",
        "patch": "@@ -92,13 +92,13 @@ void SendCoinsDialog::setModel(WalletModel *model)\n \n         setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance(),\n                    model->getWatchBalance(), model->getWatchUnconfirmedBalance(), model->getWatchImmatureBalance());\n-        connect(model, SIGNAL(balanceChanged(const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&)), this, SLOT(setBalance(const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&, const CAmount&)));\n+        connect(model, SIGNAL(balanceChanged(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)), this, SLOT(setBalance(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)));\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n \n         // Coin Control\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(model->getOptionsModel(), SIGNAL(coinControlFeaturesChanged(bool)), this, SLOT(coinControlFeatureChanged(bool)));\n-        connect(model->getOptionsModel(), SIGNAL(transactionFeeChanged(qint64)), this, SLOT(coinControlUpdateLabels()));\n+        connect(model->getOptionsModel(), SIGNAL(transactionFeeChanged(CAmount)), this, SLOT(coinControlUpdateLabels()));\n         ui->frameCoinControl->setVisible(model->getOptionsModel()->getCoinControlFeatures());\n         coinControlUpdateLabels();\n     }"
      },
      {
        "sha": "eff50593bd4c1edd06044de5e416a69b9c371217",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c122f5528c882efc8aebe31fd4d84612175f66aa/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c122f5528c882efc8aebe31fd4d84612175f66aa/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=c122f5528c882efc8aebe31fd4d84612175f66aa",
        "patch": "@@ -92,7 +92,7 @@ void WalletView::setBitcoinGUI(BitcoinGUI *gui)\n         connect(this, SIGNAL(encryptionStatusChanged(int)), gui, SLOT(setEncryptionStatus(int)));\n \n         // Pass through transaction notifications\n-        connect(this, SIGNAL(incomingTransaction(QString,int,const CAmount&,QString,QString)), gui, SLOT(incomingTransaction(QString,int,const CAmount&,QString,QString)));\n+        connect(this, SIGNAL(incomingTransaction(QString,int,CAmount,QString,QString)), gui, SLOT(incomingTransaction(QString,int,CAmount,QString,QString)));\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "3fd192f8b4d6db386354dfe635a8a6a105b55de8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmQxOTJmOGI0ZDZkYjM4NjM1NGRmZTYzNWE4YTZhMTA1YjU1ZGU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T09:28:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T09:28:55Z"
      },
      "message": "Merge pull request #4234\n\nc122f55 qt: Register CAmount metatype (Wladimir J. van der Laan)\na372168 Use a typedef for monetary values (Mark Friedenbach)",
      "tree": {
        "sha": "39f8a9caf006a6fe38d89b98a57fb94c56f3cd28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39f8a9caf006a6fe38d89b98a57fb94c56f3cd28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fd192f8b4d6db386354dfe635a8a6a105b55de8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUK8lXAAoJEHSBCwEjRsmmeJ8H/iQar5CUaEJA5r7WQdLI07zF\nlIsOCFbL5y7YsJ01/f+zzwOMiK7ymAJKb/hXVsar0oAt1u2MJTBFKhWKEfWiLkiu\nACv/kOaIP3cGXcdqw5W7Pc03W7eYbPA2qepm8yYTEmn7c0ALkFI8V1eXFOngUVII\nO5ey7MJUyEwawzErHsOEsPcATlRXHyEPGzCHGkSC9uCkZqdVxlU3zv4neTh2zlzu\nXstW0z+4H2u7oy0vhPOr5Bzz4SgCh/31/oRIy6vk5Xjqlzy9P796qoSGRh5JZwZk\n0Ddt1StpfkWf9b6wGdTkQzxEyrumThi/foL7VhD9/TYwVJsN9q5yg7psIOn/rhA=\n=UM+4\n-----END PGP SIGNATURE-----",
        "payload": "tree 39f8a9caf006a6fe38d89b98a57fb94c56f3cd28\nparent b25551101c7ceff8af862131c30c08527ff60160\nparent c122f5528c882efc8aebe31fd4d84612175f66aa\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412155731 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412155735 +0200\n\nMerge pull request #4234\n\nc122f55 qt: Register CAmount metatype (Wladimir J. van der Laan)\na372168 Use a typedef for monetary values (Mark Friedenbach)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fd192f8b4d6db386354dfe635a8a6a105b55de8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fd192f8b4d6db386354dfe635a8a6a105b55de8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fd192f8b4d6db386354dfe635a8a6a105b55de8/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b25551101c7ceff8af862131c30c08527ff60160",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b25551101c7ceff8af862131c30c08527ff60160",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b25551101c7ceff8af862131c30c08527ff60160"
      },
      {
        "sha": "c122f5528c882efc8aebe31fd4d84612175f66aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c122f5528c882efc8aebe31fd4d84612175f66aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c122f5528c882efc8aebe31fd4d84612175f66aa"
      }
    ],
    "stats": {
      "total": 759,
      "additions": 402,
      "deletions": 357
    },
    "files": [
      {
        "sha": "bd6f1ba0d5decad1ffffc1ead07222a6ea4090cd",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -65,6 +65,7 @@ BITCOIN_CORE_H = \\\n   addrman.h \\\n   alert.h \\\n   allocators.h \\\n+  amount.h \\\n   base58.h \\\n   bloom.h \\\n   chain.h \\"
      },
      {
        "sha": "42006a0388ebc38541fab988efffeef522d0f836",
        "filename": "src/amount.h",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_AMOUNT_H\n+#define BITCOIN_AMOUNT_H\n+\n+#include <stdint.h>\n+\n+typedef int64_t CAmount;\n+\n+#endif"
      },
      {
        "sha": "a61b4fe29db29c27773e2d73ba67f74e297dd44e",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -214,7 +214,7 @@ static void MutateTxAddOutAddr(CMutableTransaction& tx, const string& strInput)\n \n     // extract and validate VALUE\n     string strValue = strInput.substr(0, pos);\n-    int64_t value;\n+    CAmount value;\n     if (!ParseMoney(strValue, value))\n         throw runtime_error(\"invalid TX output value\");\n \n@@ -242,7 +242,7 @@ static void MutateTxAddOutScript(CMutableTransaction& tx, const string& strInput\n \n     // extract and validate VALUE\n     string strValue = strInput.substr(0, pos);\n-    int64_t value;\n+    CAmount value;\n     if (!ParseMoney(strValue, value))\n         throw runtime_error(\"invalid TX output value\");\n "
      },
      {
        "sha": "9b8d63d4e449eae819d86b31f65fe7da66746cb5",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -171,12 +171,12 @@ const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input) const\n     return coins->vout[input.prevout.n];\n }\n \n-int64_t CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n+CAmount CCoinsViewCache::GetValueIn(const CTransaction& tx) const\n {\n     if (tx.IsCoinBase())\n         return 0;\n \n-    int64_t nResult = 0;\n+    CAmount nResult = 0;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n         nResult += GetOutputFor(tx.vin[i]).nValue;\n "
      },
      {
        "sha": "2583475323304c20091b8b27e19607b24dc814d4",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -266,7 +266,7 @@ struct CCoinsStats\n     uint64_t nTransactionOutputs;\n     uint64_t nSerializedSize;\n     uint256 hashSerialized;\n-    int64_t nTotalAmount;\n+    CAmount nTotalAmount;\n \n     CCoinsStats() : nHeight(0), hashBlock(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), hashSerialized(0), nTotalAmount(0) {}\n };\n@@ -367,7 +367,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n         @param[in] tx\ttransaction for which we are checking input total\n         @return\tSum of value of all inputs (scriptSigs)\n      */\n-    int64_t GetValueIn(const CTransaction& tx) const;\n+    CAmount GetValueIn(const CTransaction& tx) const;\n \n     // Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx) const;"
      },
      {
        "sha": "1489d77bb35699218556795c58babf43806fb0d2",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -43,7 +43,7 @@ std::string CTxIn::ToString() const\n     return str;\n }\n \n-CTxOut::CTxOut(int64_t nValueIn, CScript scriptPubKeyIn)\n+CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)\n {\n     nValue = nValueIn;\n     scriptPubKey = scriptPubKeyIn;\n@@ -59,17 +59,17 @@ std::string CTxOut::ToString() const\n     return strprintf(\"CTxOut(nValue=%d.%08d, scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30));\n }\n \n-CFeeRate::CFeeRate(int64_t nFeePaid, size_t nSize)\n+CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nSize)\n {\n     if (nSize > 0)\n         nSatoshisPerK = nFeePaid*1000/nSize;\n     else\n         nSatoshisPerK = 0;\n }\n \n-int64_t CFeeRate::GetFee(size_t nSize) const\n+CAmount CFeeRate::GetFee(size_t nSize) const\n {\n-    int64_t nFee = nSatoshisPerK*nSize / 1000;\n+    CAmount nFee = nSatoshisPerK*nSize / 1000;\n \n     if (nFee == 0 && nSatoshisPerK > 0)\n         nFee = nSatoshisPerK;\n@@ -110,9 +110,9 @@ CTransaction& CTransaction::operator=(const CTransaction &tx) {\n     return *this;\n }\n \n-int64_t CTransaction::GetValueOut() const\n+CAmount CTransaction::GetValueOut() const\n {\n-    int64_t nValueOut = 0;\n+    CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, vout)\n     {\n         nValueOut += txout.nValue;"
      },
      {
        "sha": "e8435c8b0db698a48bbc0b2c13c61e603e38261e",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_CORE_H\n #define BITCOIN_CORE_H\n \n+#include \"amount.h\"\n #include \"script/compressor.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n@@ -19,8 +20,8 @@ static const int64_t COIN = 100000000;\n static const int64_t CENT = 1000000;\n \n /** No amount larger than this (in satoshi) is valid */\n-static const int64_t MAX_MONEY = 21000000 * COIN;\n-inline bool MoneyRange(int64_t nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n+static const CAmount MAX_MONEY = 21000000 * COIN;\n+inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n \n /** An outpoint - a combination of a transaction hash and an index n into its vout */\n class COutPoint\n@@ -129,15 +130,15 @@ class CTxIn\n class CFeeRate\n {\n private:\n-    int64_t nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n+    CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n public:\n     CFeeRate() : nSatoshisPerK(0) { }\n-    explicit CFeeRate(int64_t _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n-    CFeeRate(int64_t nFeePaid, size_t nSize);\n+    explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n+    CFeeRate(const CAmount& nFeePaid, size_t nSize);\n     CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }\n \n-    int64_t GetFee(size_t size) const; // unit returned is satoshis\n-    int64_t GetFeePerK() const { return GetFee(1000); } // satoshis-per-1000-bytes\n+    CAmount GetFee(size_t size) const; // unit returned is satoshis\n+    CAmount GetFeePerK() const { return GetFee(1000); } // satoshis-per-1000-bytes\n \n     friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n     friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n@@ -161,15 +162,15 @@ class CFeeRate\n class CTxOut\n {\n public:\n-    int64_t nValue;\n+    CAmount nValue;\n     CScript scriptPubKey;\n \n     CTxOut()\n     {\n         SetNull();\n     }\n \n-    CTxOut(int64_t nValueIn, CScript scriptPubKeyIn);\n+    CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn);\n \n     ADD_SERIALIZE_METHODS;\n \n@@ -276,7 +277,7 @@ class CTransaction\n     }\n \n     // Return sum of txouts.\n-    int64_t GetValueOut() const;\n+    CAmount GetValueOut() const;\n     // GetValueIn() is a method on CCoinsViewCache, because\n     // inputs must be known to compute value in.\n "
      },
      {
        "sha": "503df7ad3fbb6b1ffd9711ad9cfcb48f15595521",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -662,7 +662,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     // cost to you of processing a transaction.\n     if (mapArgs.count(\"-minrelaytxfee\"))\n     {\n-        int64_t n = 0;\n+        CAmount n = 0;\n         if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0)\n             ::minRelayTxFee = CFeeRate(n);\n         else\n@@ -672,15 +672,15 @@ bool AppInit2(boost::thread_group& threadGroup)\n #ifdef ENABLE_WALLET\n     if (mapArgs.count(\"-mintxfee\"))\n     {\n-        int64_t n = 0;\n+        CAmount n = 0;\n         if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n             CWallet::minTxFee = CFeeRate(n);\n         else\n             return InitError(strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"]));\n     }\n     if (mapArgs.count(\"-paytxfee\"))\n     {\n-        int64_t nFeePerK = 0;\n+        CAmount nFeePerK = 0;\n         if (!ParseMoney(mapArgs[\"-paytxfee\"], nFeePerK))\n             return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s'\"), mapArgs[\"-paytxfee\"]));\n         if (nFeePerK > nHighTransactionFeeWarning)"
      },
      {
        "sha": "5a5c700574e870e7d17f1d1da2db245c1d3e29d3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -728,7 +728,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n                          REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n-    int64_t nValueOut = 0;\n+    CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n@@ -770,19 +770,19 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n-int64_t GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n+CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree)\n {\n     {\n         LOCK(mempool.cs);\n         uint256 hash = tx.GetHash();\n         double dPriorityDelta = 0;\n-        int64_t nFeeDelta = 0;\n+        CAmount nFeeDelta = 0;\n         mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n         if (dPriorityDelta > 0 || nFeeDelta > 0)\n             return 0;\n     }\n \n-    int64_t nMinFee = ::minRelayTxFee.GetFee(nBytes);\n+    CAmount nMinFee = ::minRelayTxFee.GetFee(nBytes);\n \n     if (fAllowFree)\n     {\n@@ -845,7 +845,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CCoinsView dummy;\n         CCoinsViewCache view(dummy);\n \n-        int64_t nValueIn = 0;\n+        CAmount nValueIn = 0;\n         {\n         LOCK(pool.cs);\n         CCoinsViewMemPool viewMemPool(*pcoinsTip, pool);\n@@ -897,15 +897,15 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n                                    hash.ToString(), nSigOps, MAX_TX_SIGOPS),\n                              REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n \n-        int64_t nValueOut = tx.GetValueOut();\n-        int64_t nFees = nValueIn-nValueOut;\n+        CAmount nValueOut = tx.GetValueOut();\n+        CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n         CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block\n-        int64_t txMinFee = GetMinRelayFee(tx, nSize, true);\n+        CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n             return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),\n@@ -1125,7 +1125,7 @@ void static PruneOrphanBlocks()\n     mapOrphanBlocks.erase(hash);\n }\n \n-int64_t GetBlockValue(int nHeight, int64_t nFees)\n+CAmount GetBlockValue(int nHeight, const CAmount& nFees)\n {\n     int64_t nSubsidy = 50 * COIN;\n     int halvings = nHeight / Params().SubsidyHalvingInterval();\n@@ -1336,8 +1336,8 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // This is also true for mempool checks.\n         CBlockIndex *pindexPrev = mapBlockIndex.find(inputs.GetBestBlock())->second;\n         int nSpendHeight = pindexPrev->nHeight + 1;\n-        int64_t nValueIn = 0;\n-        int64_t nFees = 0;\n+        CAmount nValueIn = 0;\n+        CAmount nFees = 0;\n         for (unsigned int i = 0; i < tx.vin.size(); i++)\n         {\n             const COutPoint &prevout = tx.vin[i].prevout;\n@@ -1365,7 +1365,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                              REJECT_INVALID, \"bad-txns-in-belowout\");\n \n         // Tally transaction fees\n-        int64_t nTxFee = nValueIn - tx.GetValueOut();\n+        CAmount nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n             return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString()),\n                              REJECT_INVALID, \"bad-txns-fee-negative\");\n@@ -1605,7 +1605,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n     int64_t nTimeStart = GetTimeMicros();\n-    int64_t nFees = 0;\n+    CAmount nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));"
      },
      {
        "sha": "7e849505dd68a3ebd9d0bafa56d7af4aaa7a707b",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -172,7 +172,7 @@ std::string GetWarnings(std::string strFor);\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState &state, CBlock *pblock = NULL);\n-int64_t GetBlockValue(int nHeight, int64_t nFees);\n+CAmount GetBlockValue(int nHeight, const CAmount& nFees);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n@@ -220,7 +220,7 @@ struct CDiskTxPos : public CDiskBlockPos\n };\n \n \n-int64_t GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n+CAmount GetMinRelayFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree);\n \n //\n // Check transaction inputs, and make sure any\n@@ -591,7 +591,7 @@ extern CBlockTreeDB *pblocktree;\n struct CBlockTemplate\n {\n     CBlock block;\n-    std::vector<int64_t> vTxFees;\n+    std::vector<CAmount> vTxFees;\n     std::vector<int64_t> vTxSigOps;\n };\n "
      },
      {
        "sha": "361a2bea41231652838c811423e46ada6b9a4772",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -111,7 +111,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n \n     // Collect memory pool transactions into the block\n-    int64_t nFees = 0;\n+    CAmount nFees = 0;\n \n     {\n         LOCK2(cs_main, mempool.cs);\n@@ -135,7 +135,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n             COrphan* porphan = NULL;\n             double dPriority = 0;\n-            int64_t nTotalIn = 0;\n+            CAmount nTotalIn = 0;\n             bool fMissingInputs = false;\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             {\n@@ -170,7 +170,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                 const CCoins* coins = view.AccessCoins(txin.prevout.hash);\n                 assert(coins);\n \n-                int64_t nValueIn = coins->vout[txin.prevout.n].nValue;\n+                CAmount nValueIn = coins->vout[txin.prevout.n].nValue;\n                 nTotalIn += nValueIn;\n \n                 int nConf = pindexPrev->nHeight - coins->nHeight + 1;\n@@ -229,7 +229,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             // Skip free transactions if we're past the minimum block size:\n             const uint256& hash = tx.GetHash();\n             double dPriorityDelta = 0;\n-            int64_t nFeeDelta = 0;\n+            CAmount nFeeDelta = 0;\n             mempool.ApplyDeltas(hash, dPriorityDelta, nFeeDelta);\n             if (fSortedByFee && (dPriorityDelta <= 0) && (nFeeDelta <= 0) && (feeRate < ::minRelayTxFee) && (nBlockSize + nTxSize >= nBlockMinSize))\n                 continue;\n@@ -247,7 +247,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             if (!view.HaveInputs(tx))\n                 continue;\n \n-            int64_t nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n+            CAmount nTxFees = view.GetValueIn(tx)-tx.GetValueOut();\n \n             nTxSigOps += GetP2SHSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)"
      },
      {
        "sha": "5e2fdc6c30e85d2c6766777ec8e228afa957b875",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -73,6 +73,7 @@ Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);\n \n // Declare meta types used for QMetaObject::invokeMethod\n Q_DECLARE_METATYPE(bool*)\n+Q_DECLARE_METATYPE(CAmount)\n \n static void InitMessage(const std::string &message)\n {\n@@ -509,6 +510,9 @@ int main(int argc, char *argv[])\n \n     // Register meta types used for QMetaObject::invokeMethod\n     qRegisterMetaType< bool* >();\n+    //   Need to pass name here as CAmount is a typedef (see http://qt-project.org/doc/qt-5/qmetatype.html#qRegisterMetaType)\n+    //   IMPORTANT if it is no longer a typedef use the normal variant above\n+    qRegisterMetaType< CAmount >(\"CAmount\");\n \n     /// 3. Application identification\n     // must be set before OptionsModel is initialized or translations are loaded,"
      },
      {
        "sha": "6e35bf17b3d5fa85718853123734db096f5acd7a",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -44,20 +44,20 @@ class AmountSpinBox: public QAbstractSpinBox\n     void fixup(QString &input) const\n     {\n         bool valid = false;\n-        qint64 val = parse(input, &valid);\n+        CAmount val = parse(input, &valid);\n         if(valid)\n         {\n             input = BitcoinUnits::format(currentUnit, val, false, BitcoinUnits::separatorAlways);\n             lineEdit()->setText(input);\n         }\n     }\n \n-    qint64 value(bool *valid_out=0) const\n+    CAmount value(bool *valid_out=0) const\n     {\n         return parse(text(), valid_out);\n     }\n \n-    void setValue(qint64 value)\n+    void setValue(const CAmount& value)\n     {\n         lineEdit()->setText(BitcoinUnits::format(currentUnit, value, false, BitcoinUnits::separatorAlways));\n         emit valueChanged();\n@@ -66,9 +66,9 @@ class AmountSpinBox: public QAbstractSpinBox\n     void stepBy(int steps)\n     {\n         bool valid = false;\n-        qint64 val = value(&valid);\n+        CAmount val = value(&valid);\n         val = val + steps * singleStep;\n-        val = qMin(qMax(val, Q_INT64_C(0)), BitcoinUnits::maxMoney());\n+        val = qMin(qMax(val, CAmount(0)), BitcoinUnits::maxMoney());\n         setValue(val);\n     }\n \n@@ -78,7 +78,7 @@ class AmountSpinBox: public QAbstractSpinBox\n         if(text().isEmpty()) // Allow step-up with empty field\n             return StepUpEnabled;\n         bool valid = false;\n-        qint64 val = value(&valid);\n+        CAmount val = value(&valid);\n         if(valid)\n         {\n             if(val > 0)\n@@ -92,7 +92,7 @@ class AmountSpinBox: public QAbstractSpinBox\n     void setDisplayUnit(int unit)\n     {\n         bool valid = false;\n-        qint64 val = value(&valid);\n+        CAmount val = value(&valid);\n \n         currentUnit = unit;\n \n@@ -102,7 +102,7 @@ class AmountSpinBox: public QAbstractSpinBox\n             clear();\n     }\n \n-    void setSingleStep(qint64 step)\n+    void setSingleStep(const CAmount& step)\n     {\n         singleStep = step;\n     }\n@@ -140,17 +140,17 @@ class AmountSpinBox: public QAbstractSpinBox\n     }\n private:\n     int currentUnit;\n-    qint64 singleStep;\n+    CAmount singleStep;\n     mutable QSize cachedMinimumSizeHint;\n \n     /**\n      * Parse a string into a number of base monetary units and\n      * return validity.\n      * @note Must return 0 if !valid.\n      */\n-    qint64 parse(const QString &text, bool *valid_out=0) const\n+    CAmount parse(const QString &text, bool *valid_out=0) const\n     {\n-        qint64 val = 0;\n+        CAmount val = 0;\n         bool valid = BitcoinUnits::parse(currentUnit, text, &val);\n         if(valid)\n         {\n@@ -253,12 +253,12 @@ QWidget *BitcoinAmountField::setupTabChain(QWidget *prev)\n     return unit;\n }\n \n-qint64 BitcoinAmountField::value(bool *valid_out) const\n+CAmount BitcoinAmountField::value(bool *valid_out) const\n {\n     return amount->value(valid_out);\n }\n \n-void BitcoinAmountField::setValue(qint64 value)\n+void BitcoinAmountField::setValue(const CAmount& value)\n {\n     amount->setValue(value);\n }\n@@ -285,7 +285,7 @@ void BitcoinAmountField::setDisplayUnit(int newUnit)\n     unit->setValue(newUnit);\n }\n \n-void BitcoinAmountField::setSingleStep(qint64 step)\n+void BitcoinAmountField::setSingleStep(const CAmount& step)\n {\n     amount->setSingleStep(step);\n }"
      },
      {
        "sha": "e52feeb46e8833134486491db6b52180aa2c7be4",
        "filename": "src/qt/bitcoinamountfield.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/bitcoinamountfield.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/bitcoinamountfield.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOINAMOUNTFIELD_H\n #define BITCOINAMOUNTFIELD_H\n \n+#include \"amount.h\"\n+\n #include <QWidget>\n \n class AmountSpinBox;\n@@ -19,16 +21,16 @@ class BitcoinAmountField: public QWidget\n {\n     Q_OBJECT\n \n-    Q_PROPERTY(qint64 value READ value WRITE setValue NOTIFY valueChanged USER true)\n+    Q_PROPERTY(CAmount value READ value WRITE setValue NOTIFY valueChanged USER true)\n \n public:\n     explicit BitcoinAmountField(QWidget *parent = 0);\n \n-    qint64 value(bool *valid=0) const;\n-    void setValue(qint64 value);\n+    CAmount value(bool *value=0) const;\n+    void setValue(const CAmount& value);\n \n     /** Set single step in satoshis **/\n-    void setSingleStep(qint64 step);\n+    void setSingleStep(const CAmount& step);\n \n     /** Make read-only **/\n     void setReadOnly(bool fReadOnly);"
      },
      {
        "sha": "7380fbd240f2377ad83b25ce961974a5350d87d3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -864,7 +864,7 @@ void BitcoinGUI::closeEvent(QCloseEvent *event)\n }\n \n #ifdef ENABLE_WALLET\n-void BitcoinGUI::incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address)\n+void BitcoinGUI::incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address)\n {\n     // On new transaction, make an info balloon\n     message((amount)<0 ? tr(\"Sent transaction\") : tr(\"Incoming transaction\"),"
      },
      {
        "sha": "8af6eda867a27c588464a012835bf93e2d912e02",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -9,6 +9,8 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"amount.h\"\n+\n #include <QLabel>\n #include <QMainWindow>\n #include <QMap>\n@@ -159,7 +161,7 @@ public slots:\n     bool handlePaymentRequest(const SendCoinsRecipient& recipient);\n \n     /** Show incoming transaction notification for new transactions. */\n-    void incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address);\n+    void incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address);\n #endif\n \n private slots:"
      },
      {
        "sha": "423b559bf7d962033973aa1b97a45b7022d569cf",
        "filename": "src/qt/bitcoinunits.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/bitcoinunits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/bitcoinunits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -91,12 +91,13 @@ int BitcoinUnits::decimals(int unit)\n     }\n }\n \n-QString BitcoinUnits::format(int unit, qint64 n, bool fPlus, SeparatorStyle separators)\n+QString BitcoinUnits::format(int unit, const CAmount& nIn, bool fPlus, SeparatorStyle separators)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n     if(!valid(unit))\n         return QString(); // Refuse to format invalid unit\n+    qint64 n = (qint64)nIn;\n     qint64 coin = factor(unit);\n     int num_decimals = decimals(unit);\n     qint64 n_abs = (n > 0 ? n : -n);\n@@ -138,20 +139,20 @@ QString BitcoinUnits::format(int unit, qint64 n, bool fPlus, SeparatorStyle sepa\n // Please take care to use formatHtmlWithUnit instead, when\n // appropriate.\n \n-QString BitcoinUnits::formatWithUnit(int unit, qint64 amount, bool plussign, SeparatorStyle separators)\n+QString BitcoinUnits::formatWithUnit(int unit, const CAmount& amount, bool plussign, SeparatorStyle separators)\n {\n     return format(unit, amount, plussign, separators) + QString(\" \") + name(unit);\n }\n \n-QString BitcoinUnits::formatHtmlWithUnit(int unit, qint64 amount, bool plussign, SeparatorStyle separators)\n+QString BitcoinUnits::formatHtmlWithUnit(int unit, const CAmount& amount, bool plussign, SeparatorStyle separators)\n {\n     QString str(formatWithUnit(unit, amount, plussign, separators));\n     str.replace(QChar(THIN_SP_CP), QString(THIN_SP_HTML));\n     return QString(\"<span style='white-space: nowrap;'>%1</span>\").arg(str);\n }\n \n \n-bool BitcoinUnits::parse(int unit, const QString &value, qint64 *val_out)\n+bool BitcoinUnits::parse(int unit, const QString &value, CAmount *val_out)\n {\n     if(!valid(unit) || value.isEmpty())\n         return false; // Refuse to parse invalid unit or empty string\n@@ -182,7 +183,7 @@ bool BitcoinUnits::parse(int unit, const QString &value, qint64 *val_out)\n     {\n         return false; // Longer numbers will exceed 63 bits\n     }\n-    qint64 retvalue = str.toLongLong(&ok);\n+    CAmount retvalue(str.toLongLong(&ok));\n     if(val_out)\n     {\n         *val_out = retvalue;\n@@ -226,7 +227,7 @@ QVariant BitcoinUnits::data(const QModelIndex &index, int role) const\n     return QVariant();\n }\n \n-qint64 BitcoinUnits::maxMoney()\n+CAmount BitcoinUnits::maxMoney()\n {\n     return MAX_MONEY;\n }"
      },
      {
        "sha": "a392c42b9b56a94d08c4c7b6174e293784ca02cc",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOINUNITS_H\n #define BITCOINUNITS_H\n \n+#include \"amount.h\"\n+\n #include <QAbstractListModel>\n #include <QString>\n \n@@ -85,12 +87,12 @@ class BitcoinUnits: public QAbstractListModel\n     //! Number of decimals left\n     static int decimals(int unit);\n     //! Format as string\n-    static QString format(int unit, qint64 amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n+    static QString format(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n     //! Format as string (with unit)\n-    static QString formatWithUnit(int unit, qint64 amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n-    static QString formatHtmlWithUnit(int unit, qint64 amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n+    static QString formatWithUnit(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n+    static QString formatHtmlWithUnit(int unit, const CAmount& amount, bool plussign=false, SeparatorStyle separators=separatorStandard);\n     //! Parse string to coin amount\n-    static bool parse(int unit, const QString &value, qint64 *val_out);\n+    static bool parse(int unit, const QString &value, CAmount *val_out);\n     //! Gets title for amount column including current display unit if optionsModel reference available */\n     static QString getAmountColumnTitle(int unit);\n     ///@}\n@@ -117,7 +119,7 @@ class BitcoinUnits: public QAbstractListModel\n     }\n \n     //! Return maximum number of base units (Satoshis)\n-    static qint64 maxMoney();\n+    static CAmount maxMoney();\n \n private:\n     QList<BitcoinUnits::Unit> unitlist;"
      },
      {
        "sha": "ba0febe546d9c35ce8a7a050b16679931561cd0c",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -29,7 +29,7 @@\n #include <QTreeWidgetItem>\n \n using namespace std;\n-QList<qint64> CoinControlDialog::payAmounts;\n+QList<CAmount> CoinControlDialog::payAmounts;\n CCoinControl* CoinControlDialog::coinControl = new CCoinControl();\n \n CoinControlDialog::CoinControlDialog(QWidget *parent) :\n@@ -443,10 +443,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         return;\n \n     // nPayAmount\n-    qint64 nPayAmount = 0;\n+    CAmount nPayAmount = 0;\n     bool fDust = false;\n     CMutableTransaction txDummy;\n-    foreach(const qint64 &amount, CoinControlDialog::payAmounts)\n+    foreach(const CAmount &amount, CoinControlDialog::payAmounts)\n     {\n         nPayAmount += amount;\n \n@@ -460,10 +460,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     }\n \n     QString sPriorityLabel      = tr(\"none\");\n-    int64_t nAmount             = 0;\n-    int64_t nPayFee             = 0;\n-    int64_t nAfterFee           = 0;\n-    int64_t nChange             = 0;\n+    CAmount nAmount             = 0;\n+    CAmount nPayFee             = 0;\n+    CAmount nAfterFee           = 0;\n+    CAmount nChange             = 0;\n     unsigned int nBytes         = 0;\n     unsigned int nBytesInputs   = 0;\n     double dPriority            = 0;\n@@ -684,7 +684,7 @@ void CoinControlDialog::updateView()\n             itemWalletAddress->setText(COLUMN_ADDRESS, sWalletAddress);\n         }\n \n-        int64_t nSum = 0;\n+        CAmount nSum = 0;\n         double dPrioritySum = 0;\n         int nChildren = 0;\n         int nInputSum = 0;"
      },
      {
        "sha": "9eaa8eb41d556376d7059906147edf4fed138898",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef COINCONTROLDIALOG_H\n #define COINCONTROLDIALOG_H\n \n+#include \"amount.h\"\n+\n #include <QAbstractButton>\n #include <QAction>\n #include <QDialog>\n@@ -37,7 +39,7 @@ class CoinControlDialog : public QDialog\n     static void updateLabels(WalletModel*, QDialog*);\n     static QString getPriorityLabel(const CTxMemPool& pool, double);\n \n-    static QList<qint64> payAmounts;\n+    static QList<CAmount> payAmounts;\n     static CCoinControl *coinControl;\n \n private:"
      },
      {
        "sha": "91bb10755aa713b8b7a6962b8215a80e44cba48a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -221,7 +221,7 @@ QString formatBitcoinURI(const SendCoinsRecipient &info)\n     return ret;\n }\n \n-bool isDust(const QString& address, qint64 amount)\n+bool isDust(const QString& address, const CAmount& amount)\n {\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n     CScript script = GetScriptForDestination(dest);"
      },
      {
        "sha": "0939c78f647f1f953e706344f0bbaf31e523e43d",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef GUIUTIL_H\n #define GUIUTIL_H\n \n+#include \"amount.h\"\n+\n #include <QHeaderView>\n #include <QMessageBox>\n #include <QObject>\n@@ -46,7 +48,7 @@ namespace GUIUtil\n     QString formatBitcoinURI(const SendCoinsRecipient &info);\n \n     // Returns true if given address+amount meets \"dust\" definition\n-    bool isDust(const QString& address, qint64 amount);\n+    bool isDust(const QString& address, const CAmount& amount);\n \n     // HTML escaping for rich text controls\n     QString HtmlEscape(const QString& str, bool fMultiLine=false);"
      },
      {
        "sha": "cb80bd0e3defa5e5c50eb126f47675bd40864b56",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -275,9 +275,9 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n #ifdef ENABLE_WALLET\n         case Fee: { // core option - can be changed on-the-fly\n             // Todo: Add is valid check  and warn via message, if not\n-            qint64 nTransactionFee = value.toLongLong();\n+            CAmount nTransactionFee(value.toLongLong());\n             payTxFee = CFeeRate(nTransactionFee, 1000);\n-            settings.setValue(\"nTransactionFee\", nTransactionFee);\n+            settings.setValue(\"nTransactionFee\", qint64(nTransactionFee));\n             emit transactionFeeChanged(nTransactionFee);\n             break;\n         }"
      },
      {
        "sha": "42ea3bf8e5b3dbaa8fabee3d000cedf60b765fcf",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef OPTIONSMODEL_H\n #define OPTIONSMODEL_H\n \n+#include \"amount.h\"\n+\n #include <QAbstractListModel>\n \n QT_BEGIN_NAMESPACE\n@@ -82,7 +84,7 @@ class OptionsModel : public QAbstractListModel\n \n signals:\n     void displayUnitChanged(int unit);\n-    void transactionFeeChanged(qint64);\n+    void transactionFeeChanged(const CAmount&);\n     void coinControlFeaturesChanged(bool);\n };\n "
      },
      {
        "sha": "669d5474fd695e7d1295eeb6b81f004b13766d6d",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -146,7 +146,7 @@ OverviewPage::~OverviewPage()\n     delete ui;\n }\n \n-void OverviewPage::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance, qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance)\n+void OverviewPage::setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance, const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance)\n {\n     int unit = walletModel->getOptionsModel()->getDisplayUnit();\n     currentBalance = balance;\n@@ -220,7 +220,7 @@ void OverviewPage::setWalletModel(WalletModel *model)\n         // Keep up to date with wallet\n         setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance(),\n                    model->getWatchBalance(), model->getWatchUnconfirmedBalance(), model->getWatchImmatureBalance());\n-        connect(model, SIGNAL(balanceChanged(qint64, qint64, qint64, qint64, qint64, qint64)), this, SLOT(setBalance(qint64, qint64, qint64, qint64, qint64, qint64)));\n+        connect(model, SIGNAL(balanceChanged(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)), this, SLOT(setBalance(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)));\n \n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n "
      },
      {
        "sha": "03f239008f3625909fb9ce255f11e7f6dc21f4c1",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef OVERVIEWPAGE_H\n #define OVERVIEWPAGE_H\n \n+#include \"amount.h\"\n+\n #include <QWidget>\n \n class ClientModel;\n@@ -34,8 +36,8 @@ class OverviewPage : public QWidget\n     void showOutOfSyncWarning(bool fShow);\n \n public slots:\n-    void setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance,\n-                    qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance);\n+    void setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n+                    const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n signals:\n     void transactionClicked(const QModelIndex &index);\n@@ -44,12 +46,12 @@ public slots:\n     Ui::OverviewPage *ui;\n     ClientModel *clientModel;\n     WalletModel *walletModel;\n-    qint64 currentBalance;\n-    qint64 currentUnconfirmedBalance;\n-    qint64 currentImmatureBalance;\n-    qint64 currentWatchOnlyBalance;\n-    qint64 currentWatchUnconfBalance;\n-    qint64 currentWatchImmatureBalance;\n+    CAmount currentBalance;\n+    CAmount currentUnconfirmedBalance;\n+    CAmount currentImmatureBalance;\n+    CAmount currentWatchOnlyBalance;\n+    CAmount currentWatchUnconfBalance;\n+    CAmount currentWatchImmatureBalance;\n \n     TxViewDelegate *txdelegate;\n     TransactionFilterProxy *filter;"
      },
      {
        "sha": "7aefffe24afb4c33106bcafd988abe00f9dfbfa9",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -196,9 +196,9 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     return fResult;\n }\n \n-QList<std::pair<CScript,qint64> > PaymentRequestPlus::getPayTo() const\n+QList<std::pair<CScript,CAmount> > PaymentRequestPlus::getPayTo() const\n {\n-    QList<std::pair<CScript,qint64> > result;\n+    QList<std::pair<CScript,CAmount> > result;\n     for (int i = 0; i < details.outputs_size(); i++)\n     {\n         const unsigned char* scriptStr = (const unsigned char*)details.outputs(i).script().data();"
      },
      {
        "sha": "3d94d93269d0e8db9c5aeda1b4603a576ad396ab",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -33,7 +33,7 @@ class PaymentRequestPlus\n     bool getMerchant(X509_STORE* certStore, QString& merchant) const;\n \n     // Returns list of outputs, amount\n-    QList<std::pair<CScript,qint64> > getPayTo() const;\n+    QList<std::pair<CScript,CAmount> > getPayTo() const;\n \n     const payments::PaymentDetails& getDetails() const { return details; }\n "
      },
      {
        "sha": "707de55290acf9cead90a5cd906594baeeb6832b",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -532,10 +532,10 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n \n     request.getMerchant(PaymentServer::certStore, recipient.authenticatedMerchant);\n \n-    QList<std::pair<CScript, qint64> > sendingTos = request.getPayTo();\n+    QList<std::pair<CScript, CAmount> > sendingTos = request.getPayTo();\n     QStringList addresses;\n \n-    foreach(const PAIRTYPE(CScript, qint64)& sendingTo, sendingTos) {\n+    foreach(const PAIRTYPE(CScript, CAmount)& sendingTo, sendingTos) {\n         // Extract and check destination addresses\n         CTxDestination dest;\n         if (ExtractDestination(sendingTo.first, dest)) {"
      },
      {
        "sha": "ce94131cce012e79b997ae6322277b23f1f40f37",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -92,13 +92,13 @@ void SendCoinsDialog::setModel(WalletModel *model)\n \n         setBalance(model->getBalance(), model->getUnconfirmedBalance(), model->getImmatureBalance(),\n                    model->getWatchBalance(), model->getWatchUnconfirmedBalance(), model->getWatchImmatureBalance());\n-        connect(model, SIGNAL(balanceChanged(qint64, qint64, qint64, qint64, qint64, qint64)), this, SLOT(setBalance(qint64, qint64, qint64, qint64, qint64, qint64)));\n+        connect(model, SIGNAL(balanceChanged(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)), this, SLOT(setBalance(CAmount,CAmount,CAmount,CAmount,CAmount,CAmount)));\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n \n         // Coin Control\n         connect(model->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(model->getOptionsModel(), SIGNAL(coinControlFeaturesChanged(bool)), this, SLOT(coinControlFeatureChanged(bool)));\n-        connect(model->getOptionsModel(), SIGNAL(transactionFeeChanged(qint64)), this, SLOT(coinControlUpdateLabels()));\n+        connect(model->getOptionsModel(), SIGNAL(transactionFeeChanged(CAmount)), this, SLOT(coinControlUpdateLabels()));\n         ui->frameCoinControl->setVisible(model->getOptionsModel()->getCoinControlFeatures());\n         coinControlUpdateLabels();\n     }\n@@ -203,7 +203,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n         return;\n     }\n \n-    qint64 txFee = currentTransaction.getTransactionFee();\n+    CAmount txFee = currentTransaction.getTransactionFee();\n     QString questionString = tr(\"Are you sure you want to send?\");\n     questionString.append(\"<br /><br />%1\");\n \n@@ -218,7 +218,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n \n     // add total amount in all subdivision units\n     questionString.append(\"<hr />\");\n-    qint64 totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n+    CAmount totalAmount = currentTransaction.getTotalTransactionAmount() + txFee;\n     QStringList alternativeUnits;\n     foreach(BitcoinUnits::Unit u, BitcoinUnits::availableUnits())\n     {\n@@ -384,8 +384,8 @@ bool SendCoinsDialog::handlePaymentRequest(const SendCoinsRecipient &rv)\n     return true;\n }\n \n-void SendCoinsDialog::setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance, \n-                                 qint64 watchBalance, qint64 watchUnconfirmedBalance, qint64 watchImmatureBalance)\n+void SendCoinsDialog::setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance, \n+                                 const CAmount& watchBalance, const CAmount& watchUnconfirmedBalance, const CAmount& watchImmatureBalance)\n {\n     Q_UNUSED(unconfirmedBalance);\n     Q_UNUSED(immatureBalance);"
      },
      {
        "sha": "74cc4bde56e2fc87bff1eec041a44b9e2b390eac",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -47,8 +47,8 @@ public slots:\n     void accept();\n     SendCoinsEntry *addEntry();\n     void updateTabsAndLabels();\n-    void setBalance(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance,\n-                    qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance);\n+    void setBalance(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n+                    const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n private:\n     Ui::SendCoinsDialog *ui;"
      },
      {
        "sha": "1efad8259bb6dd74d659861dd9cd3785b57e43ad",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -56,9 +56,9 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     strHTML += \"<html><font face='verdana, arial, helvetica, sans-serif'>\";\n \n     int64_t nTime = wtx.GetTxTime();\n-    int64_t nCredit = wtx.GetCredit(ISMINE_ALL);\n-    int64_t nDebit = wtx.GetDebit(ISMINE_ALL);\n-    int64_t nNet = nCredit - nDebit;\n+    CAmount nCredit = wtx.GetCredit(ISMINE_ALL);\n+    CAmount nDebit = wtx.GetDebit(ISMINE_ALL);\n+    CAmount nNet = nCredit - nDebit;\n \n     strHTML += \"<b>\" + tr(\"Status\") + \":</b> \" + FormatTxStatus(wtx);\n     int nRequests = wtx.GetRequestCount();\n@@ -132,7 +132,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         //\n         // Coinbase\n         //\n-        int64_t nUnmatured = 0;\n+        CAmount nUnmatured = 0;\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n             nUnmatured += wallet->GetCredit(txout, ISMINE_ALL);\n         strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n@@ -206,13 +206,13 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n             if (fAllToMe)\n             {\n                 // Payment to self\n-                int64_t nChange = wtx.GetChange();\n-                int64_t nValue = nCredit - nChange;\n+                CAmount nChange = wtx.GetChange();\n+                CAmount nValue = nCredit - nChange;\n                 strHTML += \"<b>\" + tr(\"Total debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -nValue) + \"<br>\";\n                 strHTML += \"<b>\" + tr(\"Total credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, nValue) + \"<br>\";\n             }\n \n-            int64_t nTxFee = nDebit - wtx.GetValueOut();\n+            CAmount nTxFee = nDebit - wtx.GetValueOut();\n             if (nTxFee > 0)\n                 strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -nTxFee) + \"<br>\";\n         }"
      },
      {
        "sha": "2a0f621d1e3a8646a2a566c598f3c4172d0f5cbf",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -78,7 +78,7 @@ void TransactionFilterProxy::setTypeFilter(quint32 modes)\n     invalidateFilter();\n }\n \n-void TransactionFilterProxy::setMinAmount(qint64 minimum)\n+void TransactionFilterProxy::setMinAmount(const CAmount& minimum)\n {\n     this->minAmount = minimum;\n     invalidateFilter();"
      },
      {
        "sha": "ca31ee8f87202ea3cef45daf85354a0a86d13c30",
        "filename": "src/qt/transactionfilterproxy.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/transactionfilterproxy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/transactionfilterproxy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef TRANSACTIONFILTERPROXY_H\n #define TRANSACTIONFILTERPROXY_H\n \n+#include \"amount.h\"\n+\n #include <QDateTime>\n #include <QSortFilterProxyModel>\n \n@@ -38,7 +40,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n       @note Type filter takes a bit field created with TYPE() or ALL_TYPES\n      */\n     void setTypeFilter(quint32 modes);\n-    void setMinAmount(qint64 minimum);\n+    void setMinAmount(const CAmount& minimum);\n     void setWatchOnlyFilter(WatchOnlyFilter filter);\n \n     /** Set maximum number of rows returned, -1 if unlimited. */\n@@ -58,7 +60,7 @@ class TransactionFilterProxy : public QSortFilterProxyModel\n     QString addrPrefix;\n     quint32 typeFilter;\n     WatchOnlyFilter watchOnlyFilter;\n-    qint64 minAmount;\n+    CAmount minAmount;\n     int limitRows;\n     bool showInactive;\n };"
      },
      {
        "sha": "afb343f349ea33bc7e89de3361e43001b88f2658",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -32,9 +32,9 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n {\n     QList<TransactionRecord> parts;\n     int64_t nTime = wtx.GetTxTime();\n-    int64_t nCredit = wtx.GetCredit(true);\n-    int64_t nDebit = wtx.GetDebit(ISMINE_ALL);\n-    int64_t nNet = nCredit - nDebit;\n+    CAmount nCredit = wtx.GetCredit(true);\n+    CAmount nDebit = wtx.GetDebit(ISMINE_ALL);\n+    CAmount nNet = nCredit - nDebit;\n     uint256 hash = wtx.GetHash();\n     std::map<std::string, std::string> mapValue = wtx.mapValue;\n \n@@ -97,7 +97,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         if (fAllFromMe && fAllToMe)\n         {\n             // Payment to self\n-            int64_t nChange = wtx.GetChange();\n+            CAmount nChange = wtx.GetChange();\n \n             parts.append(TransactionRecord(hash, nTime, TransactionRecord::SendToSelf, \"\",\n                             -(nDebit - nChange), nCredit - nChange));\n@@ -108,7 +108,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             //\n             // Debit\n             //\n-            int64_t nTxFee = nDebit - wtx.GetValueOut();\n+            CAmount nTxFee = nDebit - wtx.GetValueOut();\n \n             for (unsigned int nOut = 0; nOut < wtx.vout.size(); nOut++)\n             {\n@@ -138,7 +138,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                     sub.address = mapValue[\"to\"];\n                 }\n \n-                int64_t nValue = txout.nValue;\n+                CAmount nValue = txout.nValue;\n                 /* Add fee to first output */\n                 if (nTxFee > 0)\n                 {"
      },
      {
        "sha": "9276c9f0afcf35677c9a5efb9da958ebec7391d2",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef TRANSACTIONRECORD_H\n #define TRANSACTIONRECORD_H\n \n+#include \"amount.h\"\n #include \"uint256.h\"\n \n #include <QList>\n@@ -94,7 +95,7 @@ class TransactionRecord\n \n     TransactionRecord(uint256 hash, qint64 time,\n                 Type type, const std::string &address,\n-                qint64 debit, qint64 credit):\n+                const CAmount& debit, const CAmount& credit):\n             hash(hash), time(time), type(type), address(address), debit(debit), credit(credit),\n             idx(0)\n     {\n@@ -111,8 +112,8 @@ class TransactionRecord\n     qint64 time;\n     Type type;\n     std::string address;\n-    qint64 debit;\n-    qint64 credit;\n+    CAmount debit;\n+    CAmount credit;\n     /**@}*/\n \n     /** Subtransaction index, for sort key */"
      },
      {
        "sha": "e34d776818680170636e017337084b4d8fe0208c",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -546,7 +546,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n         case ToAddress:\n             return formatTxToAddress(rec, true);\n         case Amount:\n-            return rec->credit + rec->debit;\n+            return qint64(rec->credit + rec->debit);\n         }\n         break;\n     case Qt::ToolTipRole:\n@@ -583,7 +583,7 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case LabelRole:\n         return walletModel->getAddressTableModel()->labelForAddress(QString::fromStdString(rec->address));\n     case AmountRole:\n-        return rec->credit + rec->debit;\n+        return qint64(rec->credit + rec->debit);\n     case TxIDRole:\n         return rec->getTxID();\n     case TxHashRole:"
      },
      {
        "sha": "d15397387218f98ed0385b2789afca95b73bbed5",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -304,7 +304,7 @@ void TransactionView::changedAmount(const QString &amount)\n {\n     if(!transactionProxyModel)\n         return;\n-    qint64 amount_parsed = 0;\n+    CAmount amount_parsed = 0;\n     if(BitcoinUnits::parse(model->getOptionsModel()->getDisplayUnit(), amount, &amount_parsed))\n     {\n         transactionProxyModel->setMinAmount(amount_parsed);"
      },
      {
        "sha": "b8701a23a651d4156e610ce287d421d111991edd",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -55,11 +55,11 @@ WalletModel::~WalletModel()\n     unsubscribeFromCoreSignals();\n }\n \n-qint64 WalletModel::getBalance(const CCoinControl *coinControl) const\n+CAmount WalletModel::getBalance(const CCoinControl *coinControl) const\n {\n     if (coinControl)\n     {\n-        qint64 nBalance = 0;\n+        CAmount nBalance = 0;\n         std::vector<COutput> vCoins;\n         wallet->AvailableCoins(vCoins, true, coinControl);\n         BOOST_FOREACH(const COutput& out, vCoins)\n@@ -72,12 +72,12 @@ qint64 WalletModel::getBalance(const CCoinControl *coinControl) const\n     return wallet->GetBalance();\n }\n \n-qint64 WalletModel::getUnconfirmedBalance() const\n+CAmount WalletModel::getUnconfirmedBalance() const\n {\n     return wallet->GetUnconfirmedBalance();\n }\n \n-qint64 WalletModel::getImmatureBalance() const\n+CAmount WalletModel::getImmatureBalance() const\n {\n     return wallet->GetImmatureBalance();\n }\n@@ -87,17 +87,17 @@ bool WalletModel::haveWatchOnly() const\n     return fHaveWatchOnly;\n }\n \n-qint64 WalletModel::getWatchBalance() const\n+CAmount WalletModel::getWatchBalance() const\n {\n     return wallet->GetWatchOnlyBalance();\n }\n \n-qint64 WalletModel::getWatchUnconfirmedBalance() const\n+CAmount WalletModel::getWatchUnconfirmedBalance() const\n {\n     return wallet->GetUnconfirmedWatchOnlyBalance();\n }\n \n-qint64 WalletModel::getWatchImmatureBalance() const\n+CAmount WalletModel::getWatchImmatureBalance() const\n {\n     return wallet->GetImmatureWatchOnlyBalance();\n }\n@@ -137,12 +137,12 @@ void WalletModel::pollBalanceChanged()\n \n void WalletModel::checkBalanceChanged()\n {\n-    qint64 newBalance = getBalance();\n-    qint64 newUnconfirmedBalance = getUnconfirmedBalance();\n-    qint64 newImmatureBalance = getImmatureBalance();\n-    qint64 newWatchOnlyBalance = 0;\n-    qint64 newWatchUnconfBalance = 0;\n-    qint64 newWatchImmatureBalance = 0;\n+    CAmount newBalance = getBalance();\n+    CAmount newUnconfirmedBalance = getUnconfirmedBalance();\n+    CAmount newImmatureBalance = getImmatureBalance();\n+    CAmount newWatchOnlyBalance = 0;\n+    CAmount newWatchUnconfBalance = 0;\n+    CAmount newWatchImmatureBalance = 0;\n     if (haveWatchOnly())\n     {\n         newWatchOnlyBalance = getWatchBalance();\n@@ -194,9 +194,9 @@ bool WalletModel::validateAddress(const QString &address)\n \n WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransaction &transaction, const CCoinControl *coinControl)\n {\n-    qint64 total = 0;\n+    CAmount total = 0;\n     QList<SendCoinsRecipient> recipients = transaction.getRecipients();\n-    std::vector<std::pair<CScript, int64_t> > vecSend;\n+    std::vector<std::pair<CScript, CAmount> > vecSend;\n \n     if(recipients.empty())\n     {\n@@ -211,7 +211,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     {\n         if (rcp.paymentRequest.IsInitialized())\n         {   // PaymentRequest...\n-            int64_t subtotal = 0;\n+            CAmount subtotal = 0;\n             const payments::PaymentDetails& details = rcp.paymentRequest.getDetails();\n             for (int i = 0; i < details.outputs_size(); i++)\n             {\n@@ -220,7 +220,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n                 subtotal += out.amount();\n                 const unsigned char* scriptStr = (const unsigned char*)out.script().data();\n                 CScript scriptPubKey(scriptStr, scriptStr+out.script().size());\n-                vecSend.push_back(std::pair<CScript, int64_t>(scriptPubKey, out.amount()));\n+                vecSend.push_back(std::pair<CScript, CAmount>(scriptPubKey, out.amount()));\n             }\n             if (subtotal <= 0)\n             {\n@@ -242,7 +242,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             ++nAddresses;\n \n             CScript scriptPubKey = GetScriptForDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n-            vecSend.push_back(std::pair<CScript, int64_t>(scriptPubKey, rcp.amount));\n+            vecSend.push_back(std::pair<CScript, CAmount>(scriptPubKey, rcp.amount));\n \n             total += rcp.amount;\n         }\n@@ -252,7 +252,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         return DuplicateAddress;\n     }\n \n-    qint64 nBalance = getBalance(coinControl);\n+    CAmount nBalance = getBalance(coinControl);\n \n     if(total > nBalance)\n     {\n@@ -263,7 +263,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         LOCK2(cs_main, wallet->cs_wallet);\n \n         transaction.newPossibleKeyChange(wallet);\n-        int64_t nFeeRequired = 0;\n+        CAmount nFeeRequired = 0;\n         std::string strFailReason;\n \n         CWalletTx *newTx = transaction.getTransaction();"
      },
      {
        "sha": "b1d0f28f127f97696fddd42f499314c7bce21f01",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -37,7 +37,7 @@ class SendCoinsRecipient\n {\n public:\n     explicit SendCoinsRecipient() : amount(0), nVersion(SendCoinsRecipient::CURRENT_VERSION) { }\n-    explicit SendCoinsRecipient(const QString &addr, const QString &label, quint64 amount, const QString &message):\n+    explicit SendCoinsRecipient(const QString &addr, const QString &label, const CAmount& amount, const QString &message):\n         address(addr), label(label), amount(amount), message(message), nVersion(SendCoinsRecipient::CURRENT_VERSION) {}\n \n     // If from an insecure payment request, this is used for storing\n@@ -47,7 +47,7 @@ class SendCoinsRecipient\n     // Todo: This is a hack, should be replaced with a cleaner solution!\n     QString address;\n     QString label;\n-    qint64 amount;\n+    CAmount amount;\n     // If from a payment request, this is used for storing the memo\n     QString message;\n \n@@ -125,13 +125,13 @@ class WalletModel : public QObject\n     TransactionTableModel *getTransactionTableModel();\n     RecentRequestsTableModel *getRecentRequestsTableModel();\n \n-    qint64 getBalance(const CCoinControl *coinControl = NULL) const;\n-    qint64 getUnconfirmedBalance() const;\n-    qint64 getImmatureBalance() const;\n+    CAmount getBalance(const CCoinControl *coinControl = NULL) const;\n+    CAmount getUnconfirmedBalance() const;\n+    CAmount getImmatureBalance() const;\n     bool haveWatchOnly() const;\n-    qint64 getWatchBalance() const;\n-    qint64 getWatchUnconfirmedBalance() const;\n-    qint64 getWatchImmatureBalance() const;\n+    CAmount getWatchBalance() const;\n+    CAmount getWatchUnconfirmedBalance() const;\n+    CAmount getWatchImmatureBalance() const;\n     EncryptionStatus getEncryptionStatus() const;\n     bool processingQueuedTransactions() { return fProcessingQueuedTransactions; }\n \n@@ -210,12 +210,12 @@ class WalletModel : public QObject\n     RecentRequestsTableModel *recentRequestsTableModel;\n \n     // Cache some values to be able to detect changes\n-    qint64 cachedBalance;\n-    qint64 cachedUnconfirmedBalance;\n-    qint64 cachedImmatureBalance;\n-    qint64 cachedWatchOnlyBalance;\n-    qint64 cachedWatchUnconfBalance;\n-    qint64 cachedWatchImmatureBalance;\n+    CAmount cachedBalance;\n+    CAmount cachedUnconfirmedBalance;\n+    CAmount cachedImmatureBalance;\n+    CAmount cachedWatchOnlyBalance;\n+    CAmount cachedWatchUnconfBalance;\n+    CAmount cachedWatchImmatureBalance;\n     EncryptionStatus cachedEncryptionStatus;\n     int cachedNumBlocks;\n \n@@ -227,8 +227,8 @@ class WalletModel : public QObject\n \n signals:\n     // Signal that balance in wallet changed\n-    void balanceChanged(qint64 balance, qint64 unconfirmedBalance, qint64 immatureBalance,\n-                        qint64 watchOnlyBalance, qint64 watchUnconfBalance, qint64 watchImmatureBalance);\n+    void balanceChanged(const CAmount& balance, const CAmount& unconfirmedBalance, const CAmount& immatureBalance,\n+                        const CAmount& watchOnlyBalance, const CAmount& watchUnconfBalance, const CAmount& watchImmatureBalance);\n \n     // Encryption status of wallet changed\n     void encryptionStatusChanged(int status);"
      },
      {
        "sha": "ddd2d09bb53498bd43ed515b155a2e16cd31559f",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -31,19 +31,19 @@ CWalletTx *WalletModelTransaction::getTransaction()\n     return walletTransaction;\n }\n \n-qint64 WalletModelTransaction::getTransactionFee()\n+CAmount WalletModelTransaction::getTransactionFee()\n {\n     return fee;\n }\n \n-void WalletModelTransaction::setTransactionFee(qint64 newFee)\n+void WalletModelTransaction::setTransactionFee(const CAmount& newFee)\n {\n     fee = newFee;\n }\n \n-qint64 WalletModelTransaction::getTotalTransactionAmount()\n+CAmount WalletModelTransaction::getTotalTransactionAmount()\n {\n-    qint64 totalTransactionAmount = 0;\n+    CAmount totalTransactionAmount = 0;\n     foreach(const SendCoinsRecipient &rcp, recipients)\n     {\n         totalTransactionAmount += rcp.amount;"
      },
      {
        "sha": "4eadfbe4d19ffeabe1754e7b23da0b7874c6e356",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -26,10 +26,10 @@ class WalletModelTransaction\n \n     CWalletTx *getTransaction();\n \n-    void setTransactionFee(qint64 newFee);\n-    qint64 getTransactionFee();\n+    void setTransactionFee(const CAmount& newFee);\n+    CAmount getTransactionFee();\n \n-    qint64 getTotalTransactionAmount();\n+    CAmount getTotalTransactionAmount();\n \n     void newPossibleKeyChange(CWallet *wallet);\n     CReserveKey *getPossibleKeyChange();\n@@ -38,7 +38,7 @@ class WalletModelTransaction\n     const QList<SendCoinsRecipient> recipients;\n     CWalletTx *walletTransaction;\n     CReserveKey *keyChange;\n-    qint64 fee;\n+    CAmount fee;\n };\n \n #endif // WALLETMODELTRANSACTION_H"
      },
      {
        "sha": "eff50593bd4c1edd06044de5e416a69b9c371217",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -92,7 +92,7 @@ void WalletView::setBitcoinGUI(BitcoinGUI *gui)\n         connect(this, SIGNAL(encryptionStatusChanged(int)), gui, SLOT(setEncryptionStatus(int)));\n \n         // Pass through transaction notifications\n-        connect(this, SIGNAL(incomingTransaction(QString,int,qint64,QString,QString)), gui, SLOT(incomingTransaction(QString,int,qint64,QString,QString)));\n+        connect(this, SIGNAL(incomingTransaction(QString,int,CAmount,QString,QString)), gui, SLOT(incomingTransaction(QString,int,CAmount,QString,QString)));\n     }\n }\n "
      },
      {
        "sha": "cafba517fdf937832b4d82e922420591ecfd84ae",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef WALLETVIEW_H\n #define WALLETVIEW_H\n \n+#include \"amount.h\"\n+\n #include <QStackedWidget>\n \n class BitcoinGUI;\n@@ -111,7 +113,7 @@ public slots:\n     /** Encryption status of wallet changed */\n     void encryptionStatusChanged(int status);\n     /** Notify that a new transaction appeared */\n-    void incomingTransaction(const QString& date, int unit, qint64 amount, const QString& type, const QString& address);\n+    void incomingTransaction(const QString& date, int unit, const CAmount& amount, const QString& type, const QString& address);\n };\n \n #endif // WALLETVIEW_H"
      },
      {
        "sha": "e794bf69e0028bee2e94d9fe380167d7d903dd19",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -273,7 +273,7 @@ Value prioritisetransaction(const Array& params, bool fHelp)\n     uint256 hash;\n     hash.SetHex(params[0].get_str());\n \n-    int64_t nAmount = 0;\n+    CAmount nAmount = 0;\n     if (params[2].get_real() != 0.0)\n         nAmount = AmountFromValue(params[2]);\n "
      },
      {
        "sha": "bd87d77704ca547049b5465abf8f44b931efdbc8",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -269,7 +269,7 @@ Value listunspent(const Array& params, bool fHelp)\n                 continue;\n         }\n \n-        int64_t nValue = out.tx->vout[out.i].nValue;\n+        CAmount nValue = out.tx->vout[out.i].nValue;\n         const CScript& pk = out.tx->vout[out.i].scriptPubKey;\n         Object entry;\n         entry.push_back(Pair(\"txid\", out.tx->GetHash().GetHex()));\n@@ -367,7 +367,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n         setAddress.insert(address);\n \n         CScript scriptPubKey = GetScriptForDestination(address.Get());\n-        int64_t nAmount = AmountFromValue(s.value_);\n+        CAmount nAmount = AmountFromValue(s.value_);\n \n         CTxOut out(nAmount, scriptPubKey);\n         rawTx.vout.push_back(out);"
      },
      {
        "sha": "1a41344da53acf14d4c3d980d15ba71e57ec87ff",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -88,18 +88,18 @@ static inline int64_t roundint64(double d)\n     return (int64_t)(d > 0 ? d + 0.5 : d - 0.5);\n }\n \n-int64_t AmountFromValue(const Value& value)\n+CAmount AmountFromValue(const Value& value)\n {\n     double dAmount = value.get_real();\n     if (dAmount <= 0.0 || dAmount > 21000000.0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n-    int64_t nAmount = roundint64(dAmount * COIN);\n+    CAmount nAmount = roundint64(dAmount * COIN);\n     if (!MoneyRange(nAmount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n     return nAmount;\n }\n \n-Value ValueFromAmount(int64_t amount)\n+Value ValueFromAmount(const CAmount& amount)\n {\n     return (double)amount / (double)COIN;\n }"
      },
      {
        "sha": "d440035f151da6e8f90047714890d7a2f8cd95c2",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef _BITCOINRPC_SERVER_H_\n #define _BITCOINRPC_SERVER_H_\n \n+#include \"amount.h\"\n #include \"uint256.h\"\n #include \"rpcprotocol.h\"\n \n@@ -116,8 +117,8 @@ extern void InitRPCMining();\n extern void ShutdownRPCMining();\n \n extern int64_t nWalletUnlockTime;\n-extern int64_t AmountFromValue(const json_spirit::Value& value);\n-extern json_spirit::Value ValueFromAmount(int64_t amount);\n+extern CAmount AmountFromValue(const json_spirit::Value& value);\n+extern json_spirit::Value ValueFromAmount(const CAmount& amount);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);\n extern std::string HelpRequiringPassphrase();\n extern std::string HelpExampleCli(std::string methodname, std::string args);"
      },
      {
        "sha": "632c46acd591d2f6d1fb5790b20bd8b94c858ae4",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 31,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -331,7 +331,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     // Amount\n-    int64_t nAmount = AmountFromValue(params[1]);\n+    CAmount nAmount = AmountFromValue(params[1]);\n \n     // Wallet comments\n     CWalletTx wtx;\n@@ -375,7 +375,7 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n         );\n \n     Array jsonGroupings;\n-    map<CTxDestination, int64_t> balances = pwalletMain->GetAddressBalances();\n+    map<CTxDestination, CAmount> balances = pwalletMain->GetAddressBalances();\n     BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n     {\n         Array jsonGrouping;\n@@ -483,7 +483,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n         nMinDepth = params[1].get_int();\n \n     // Tally\n-    int64_t nAmount = 0;\n+    CAmount nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n@@ -532,7 +532,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n \n     // Tally\n-    int64_t nAmount = 0;\n+    CAmount nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n@@ -552,9 +552,9 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n }\n \n \n-int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth, const isminefilter& filter)\n+CAmount GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth, const isminefilter& filter)\n {\n-    int64_t nBalance = 0;\n+    CAmount nBalance = 0;\n \n     // Tally wallet transactions\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n@@ -563,7 +563,7 @@ int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n         if (!IsFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n             continue;\n \n-        int64_t nReceived, nSent, nFee;\n+        CAmount nReceived, nSent, nFee;\n         wtx.GetAccountAmounts(strAccount, nReceived, nSent, nFee, filter);\n \n         if (nReceived != 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n@@ -577,7 +577,7 @@ int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMi\n     return nBalance;\n }\n \n-int64_t GetAccountBalance(const string& strAccount, int nMinDepth, const isminefilter& filter)\n+CAmount GetAccountBalance(const string& strAccount, int nMinDepth, const isminefilter& filter)\n {\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n     return GetAccountBalance(walletdb, strAccount, nMinDepth, filter);\n@@ -627,14 +627,14 @@ Value getbalance(const Array& params, bool fHelp)\n         // Calculate total balance a different way from GetBalance()\n         // (GetBalance() sums up all unspent TxOuts)\n         // getbalance and getbalance '*' 0 should return the same number\n-        int64_t nBalance = 0;\n+        CAmount nBalance = 0;\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n             if (!wtx.IsTrusted() || wtx.GetBlocksToMaturity() > 0)\n                 continue;\n \n-            int64_t allFee;\n+            CAmount allFee;\n             string strSentAccount;\n             list<COutputEntry> listReceived;\n             list<COutputEntry> listSent;\n@@ -653,7 +653,7 @@ Value getbalance(const Array& params, bool fHelp)\n \n     string strAccount = AccountFromValue(params[0]);\n \n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, filter);\n+    CAmount nBalance = GetAccountBalance(strAccount, nMinDepth, filter);\n \n     return ValueFromAmount(nBalance);\n }\n@@ -692,7 +692,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     string strFrom = AccountFromValue(params[0]);\n     string strTo = AccountFromValue(params[1]);\n-    int64_t nAmount = AmountFromValue(params[2]);\n+    CAmount nAmount = AmountFromValue(params[2]);\n     if (params.size() > 3)\n         // unused parameter, used to be nMinDepth, keep type-checking it though\n         (void)params[3].get_int();\n@@ -766,7 +766,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    int64_t nAmount = AmountFromValue(params[2]);\n+    CAmount nAmount = AmountFromValue(params[2]);\n     int nMinDepth = 1;\n     if (params.size() > 3)\n         nMinDepth = params[3].get_int();\n@@ -781,7 +781,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n+    CAmount nBalance = GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n@@ -834,9 +834,9 @@ Value sendmany(const Array& params, bool fHelp)\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n     set<CBitcoinAddress> setAddress;\n-    vector<pair<CScript, int64_t> > vecSend;\n+    vector<pair<CScript, CAmount> > vecSend;\n \n-    int64_t totalAmount = 0;\n+    CAmount totalAmount = 0;\n     BOOST_FOREACH(const Pair& s, sendTo)\n     {\n         CBitcoinAddress address(s.name_);\n@@ -848,7 +848,7 @@ Value sendmany(const Array& params, bool fHelp)\n         setAddress.insert(address);\n \n         CScript scriptPubKey = GetScriptForDestination(address.Get());\n-        int64_t nAmount = AmountFromValue(s.value_);\n+        CAmount nAmount = AmountFromValue(s.value_);\n         totalAmount += nAmount;\n \n         vecSend.push_back(make_pair(scriptPubKey, nAmount));\n@@ -857,13 +857,13 @@ Value sendmany(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n+    CAmount nBalance = GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n     CReserveKey keyChange(pwalletMain);\n-    int64_t nFeeRequired = 0;\n+    CAmount nFeeRequired = 0;\n     string strFailReason;\n     bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, strFailReason);\n     if (!fCreated)\n@@ -923,7 +923,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n \n struct tallyitem\n {\n-    int64_t nAmount;\n+    CAmount nAmount;\n     int nConf;\n     vector<uint256> txids;\n     bool fIsWatchonly;\n@@ -995,7 +995,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         if (it == mapTally.end() && !fIncludeEmpty)\n             continue;\n \n-        int64_t nAmount = 0;\n+        CAmount nAmount = 0;\n         int nConf = std::numeric_limits<int>::max();\n         bool fIsWatchonly = false;\n         if (it != mapTally.end())\n@@ -1038,7 +1038,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     {\n         for (map<string, tallyitem>::iterator it = mapAccountTally.begin(); it != mapAccountTally.end(); ++it)\n         {\n-            int64_t nAmount = (*it).second.nAmount;\n+            CAmount nAmount = (*it).second.nAmount;\n             int nConf = (*it).second.nConf;\n             Object obj;\n             if((*it).second.fIsWatchonly)\n@@ -1125,7 +1125,7 @@ static void MaybePushAddress(Object & entry, const CTxDestination &dest)\n \n void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret, const isminefilter& filter)\n {\n-    int64_t nFee;\n+    CAmount nFee;\n     string strSentAccount;\n     list<COutputEntry> listReceived;\n     list<COutputEntry> listSent;\n@@ -1355,7 +1355,7 @@ Value listaccounts(const Array& params, bool fHelp)\n         if(params[1].get_bool())\n             includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n \n-    map<string, int64_t> mapAccountBalances;\n+    map<string, CAmount> mapAccountBalances;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n         if (IsMine(*pwalletMain, entry.first) & includeWatchonly) // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n@@ -1364,7 +1364,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        int64_t nFee;\n+        CAmount nFee;\n         string strSentAccount;\n         list<COutputEntry> listReceived;\n         list<COutputEntry> listSent;\n@@ -1391,7 +1391,7 @@ Value listaccounts(const Array& params, bool fHelp)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     Object ret;\n-    BOOST_FOREACH(const PAIRTYPE(string, int64_t)& accountBalance, mapAccountBalances) {\n+    BOOST_FOREACH(const PAIRTYPE(string, CAmount)& accountBalance, mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n     return ret;\n@@ -1534,10 +1534,10 @@ Value gettransaction(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n-    int64_t nCredit = wtx.GetCredit(filter != 0);\n-    int64_t nDebit = wtx.GetDebit(filter);\n-    int64_t nNet = nCredit - nDebit;\n-    int64_t nFee = (wtx.IsFromMe(filter) ? wtx.GetValueOut() - nDebit : 0);\n+    CAmount nCredit = wtx.GetCredit(filter != 0);\n+    CAmount nDebit = wtx.GetDebit(filter);\n+    CAmount nNet = nCredit - nDebit;\n+    CAmount nFee = (wtx.IsFromMe(filter) ? wtx.GetValueOut() - nDebit : 0);\n \n     entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n     if (wtx.IsFromMe(filter))\n@@ -1937,7 +1937,7 @@ Value settxfee(const Array& params, bool fHelp)\n         );\n \n     // Amount\n-    int64_t nAmount = 0;\n+    CAmount nAmount = 0;\n     if (params[0].get_real() != 0.0)\n         nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n "
      },
      {
        "sha": "af2a9a214f0cef37d3db7bf59bf36638ec13a788",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -15,7 +15,7 @@ extern CWallet* pwalletMain;\n BOOST_AUTO_TEST_SUITE(accounting_tests)\n \n static void\n-GetResults(CWalletDB& walletdb, std::map<int64_t, CAccountingEntry>& results)\n+GetResults(CWalletDB& walletdb, std::map<CAmount, CAccountingEntry>& results)\n {\n     std::list<CAccountingEntry> aes;\n \n@@ -34,7 +34,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     std::vector<CWalletTx*> vpwtx;\n     CWalletTx wtx;\n     CAccountingEntry ae;\n-    std::map<int64_t, CAccountingEntry> results;\n+    std::map<CAmount, CAccountingEntry> results;\n \n     LOCK(pwalletMain->cs_wallet);\n "
      },
      {
        "sha": "70a800af51b70ba57ac4f9ecab3a1764be29e9d0",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -11,9 +11,9 @@ BOOST_AUTO_TEST_SUITE(main_tests)\n \n BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n {\n-    uint64_t nSum = 0;\n+    CAmount nSum = 0;\n     for (int nHeight = 0; nHeight < 14000000; nHeight += 1000) {\n-        uint64_t nSubsidy = GetBlockValue(nHeight, 0);\n+        CAmount nSubsidy = GetBlockValue(nHeight, 0);\n         BOOST_CHECK(nSubsidy <= 50 * COIN);\n         nSum += nSubsidy * 1000;\n         BOOST_CHECK(MoneyRange(nSum));"
      },
      {
        "sha": "6378bd09418e61f284a12dd92894edaa8af37f40",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -171,7 +171,7 @@ BOOST_AUTO_TEST_CASE(util_FormatMoney)\n \n BOOST_AUTO_TEST_CASE(util_ParseMoney)\n {\n-    int64_t ret = 0;\n+    CAmount ret = 0;\n     BOOST_CHECK(ParseMoney(\"0.0\", ret));\n     BOOST_CHECK_EQUAL(ret, 0);\n "
      },
      {
        "sha": "90fc470e0645f653432bd5defe46c24116df6de0",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -28,7 +28,7 @@ BOOST_AUTO_TEST_SUITE(wallet_tests)\n static CWallet wallet;\n static vector<COutput> vCoins;\n \n-static void add_coin(int64_t nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+static void add_coin(const CAmount& nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n {\n     static int nextLockTime = 0;\n     CMutableTransaction tx;\n@@ -66,7 +66,7 @@ static bool equal_sets(CoinSet a, CoinSet b)\n BOOST_AUTO_TEST_CASE(coin_selection_tests)\n {\n     CoinSet setCoinsRet, setCoinsRet2;\n-    int64_t nValueRet;\n+    CAmount nValueRet;\n \n     LOCK(wallet.cs_wallet);\n "
      },
      {
        "sha": "d5f424fabddec0599041ff8dc33031e38840a787",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -117,7 +117,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n     stats.hashBlock = GetBestBlock();\n     ss << stats.hashBlock;\n-    int64_t nTotalAmount = 0;\n+    CAmount nTotalAmount = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         try {"
      },
      {
        "sha": "d923c2204a5450ced3eb8aaefc714de4f70d26bf",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"core.h\"\n #include \"util.h\"\n+#include \"utilmoneystr.h\"\n \n #include <boost/circular_buffer.hpp>\n \n@@ -18,7 +19,7 @@ CTxMemPoolEntry::CTxMemPoolEntry():\n     nHeight = MEMPOOL_HEIGHT;\n }\n \n-CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, int64_t _nFee,\n+CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _dPriority,\n                                  unsigned int _nHeight):\n     tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority), nHeight(_nHeight)\n@@ -36,7 +37,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTxMemPoolEntry& other)\n double\n CTxMemPoolEntry::GetPriority(unsigned int currentHeight) const\n {\n-    int64_t nValueIn = tx.GetValueOut()+nFee;\n+    CAmount nValueIn = tx.GetValueOut()+nFee;\n     double deltaPriority = ((double)(currentHeight-nHeight)*nValueIn)/nModSize;\n     double dResult = dPriority + deltaPriority;\n     return dResult;\n@@ -601,24 +602,24 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n     return true;\n }\n \n-void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, int64_t nFeeDelta)\n+void CTxMemPool::PrioritiseTransaction(const uint256 hash, const string strHash, double dPriorityDelta, const CAmount& nFeeDelta)\n {\n     {\n         LOCK(cs);\n-        std::pair<double, int64_t> &deltas = mapDeltas[hash];\n+        std::pair<double, CAmount> &deltas = mapDeltas[hash];\n         deltas.first += dPriorityDelta;\n         deltas.second += nFeeDelta;\n     }\n-    LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, nFeeDelta);\n+    LogPrintf(\"PrioritiseTransaction: %s priority += %f, fee += %d\\n\", strHash, dPriorityDelta, FormatMoney(nFeeDelta));\n }\n \n-void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, int64_t &nFeeDelta)\n+void CTxMemPool::ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta)\n {\n     LOCK(cs);\n-    std::map<uint256, std::pair<double, int64_t> >::iterator pos = mapDeltas.find(hash);\n+    std::map<uint256, std::pair<double, CAmount> >::iterator pos = mapDeltas.find(hash);\n     if (pos == mapDeltas.end())\n         return;\n-    const std::pair<double, int64_t> &deltas = pos->second;\n+    const std::pair<double, CAmount> &deltas = pos->second;\n     dPriorityDelta += deltas.first;\n     nFeeDelta += deltas.second;\n }"
      },
      {
        "sha": "c35ea52d4e0020a7b88618d57e78c49f60acaa83",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -29,22 +29,22 @@ class CTxMemPoolEntry\n {\n private:\n     CTransaction tx;\n-    int64_t nFee; // Cached to avoid expensive parent-transaction lookups\n+    CAmount nFee; // Cached to avoid expensive parent-transaction lookups\n     size_t nTxSize; // ... and avoid recomputing tx size\n     size_t nModSize; // ... and modified size for priority\n     int64_t nTime; // Local time when entering the mempool\n     double dPriority; // Priority when entering the mempool\n     unsigned int nHeight; // Chain height when entering the mempool\n \n public:\n-    CTxMemPoolEntry(const CTransaction& _tx, int64_t _nFee,\n+    CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                     int64_t _nTime, double _dPriority, unsigned int _nHeight);\n     CTxMemPoolEntry();\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n     const CTransaction& GetTx() const { return this->tx; }\n     double GetPriority(unsigned int currentHeight) const;\n-    int64_t GetFee() const { return nFee; }\n+    CAmount GetFee() const { return nFee; }\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n@@ -76,7 +76,7 @@ class CTxMemPool\n     mutable CCriticalSection cs;\n     std::map<uint256, CTxMemPoolEntry> mapTx;\n     std::map<COutPoint, CInPoint> mapNextTx;\n-    std::map<uint256, std::pair<double, int64_t> > mapDeltas;\n+    std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n \n     CTxMemPool(const CFeeRate& _minRelayFee);\n     ~CTxMemPool();\n@@ -102,8 +102,8 @@ class CTxMemPool\n     void AddTransactionsUpdated(unsigned int n);\n \n     /** Affect CreateNewBlock prioritisation of transactions */\n-    void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, int64_t nFeeDelta);\n-    void ApplyDeltas(const uint256 hash, double &dPriorityDelta, int64_t &nFeeDelta);\n+    void PrioritiseTransaction(const uint256 hash, const std::string strHash, double dPriorityDelta, const CAmount& nFeeDelta);\n+    void ApplyDeltas(const uint256 hash, double &dPriorityDelta, CAmount &nFeeDelta);\n     void ClearPrioritisation(const uint256 hash);\n \n     unsigned long size()"
      },
      {
        "sha": "fb1d3eacb575f97c4c8ad667b8c902d2bdb10cc1",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -14,6 +14,7 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"amount.h\"\n #include \"compat.h\"\n #include \"tinyformat.h\"\n #include \"utiltime.h\""
      },
      {
        "sha": "1a5635bfb8d089939d667113f58360b2f0831ff0",
        "filename": "src/utilmoneystr.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/utilmoneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/utilmoneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -10,7 +10,7 @@\n \n using namespace std;\n \n-string FormatMoney(int64_t n, bool fPlus)\n+string FormatMoney(const CAmount& n, bool fPlus)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n@@ -34,12 +34,12 @@ string FormatMoney(int64_t n, bool fPlus)\n }\n \n \n-bool ParseMoney(const string& str, int64_t& nRet)\n+bool ParseMoney(const string& str, CAmount& nRet)\n {\n     return ParseMoney(str.c_str(), nRet);\n }\n \n-bool ParseMoney(const char* pszIn, int64_t& nRet)\n+bool ParseMoney(const char* pszIn, CAmount& nRet)\n {\n     string strWhole;\n     int64_t nUnits = 0;\n@@ -73,7 +73,7 @@ bool ParseMoney(const char* pszIn, int64_t& nRet)\n     if (nUnits < 0 || nUnits > COIN)\n         return false;\n     int64_t nWhole = atoi64(strWhole);\n-    int64_t nValue = nWhole*COIN + nUnits;\n+    CAmount nValue = nWhole*COIN + nUnits;\n \n     nRet = nValue;\n     return true;"
      },
      {
        "sha": "65415afd3f3121dd1550eba5ad6e2032eab97b5b",
        "filename": "src/utilmoneystr.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/utilmoneystr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/utilmoneystr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilmoneystr.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -12,8 +12,10 @@\n #include <stdint.h>\n #include <string>\n \n-std::string FormatMoney(int64_t n, bool fPlus=false);\n-bool ParseMoney(const std::string& str, int64_t& nRet);\n-bool ParseMoney(const char* pszIn, int64_t& nRet);\n+#include \"amount.h\"\n+\n+std::string FormatMoney(const CAmount& n, bool fPlus=false);\n+bool ParseMoney(const std::string& str, CAmount& nRet);\n+bool ParseMoney(const char* pszIn, CAmount& nRet);\n \n #endif // BITCOIN_UTILMONEYSTR_H"
      },
      {
        "sha": "b20b0007ce28379f6c5ff2ae1bc463ddc0200571",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 54,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -35,8 +35,8 @@ CFeeRate CWallet::minTxFee = CFeeRate(10000);  // Override with -mintxfee\n \n struct CompareValueOnly\n {\n-    bool operator()(const pair<int64_t, pair<const CWalletTx*, unsigned int> >& t1,\n-                    const pair<int64_t, pair<const CWalletTx*, unsigned int> >& t2) const\n+    bool operator()(const pair<CAmount, pair<const CWalletTx*, unsigned int> >& t1,\n+                    const pair<CAmount, pair<const CWalletTx*, unsigned int> >& t2) const\n     {\n         return t1.first < t2.first;\n     }\n@@ -697,7 +697,7 @@ isminetype CWallet::IsMine(const CTxIn &txin) const\n     return ISMINE_NO;\n }\n \n-int64_t CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n+CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n {\n     {\n         LOCK(cs_wallet);\n@@ -781,18 +781,18 @@ int CWalletTx::GetRequestCount() const\n }\n \n void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,\n-                           list<COutputEntry>& listSent, int64_t& nFee, string& strSentAccount, const isminefilter& filter) const\n+                           list<COutputEntry>& listSent, CAmount& nFee, string& strSentAccount, const isminefilter& filter) const\n {\n     nFee = 0;\n     listReceived.clear();\n     listSent.clear();\n     strSentAccount = strFromAccount;\n \n     // Compute fee:\n-    int64_t nDebit = GetDebit(filter);\n+    CAmount nDebit = GetDebit(filter);\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n     {\n-        int64_t nValueOut = GetValueOut();\n+        CAmount nValueOut = GetValueOut();\n         nFee = nDebit - nValueOut;\n     }\n \n@@ -835,12 +835,12 @@ void CWalletTx::GetAmounts(list<COutputEntry>& listReceived,\n \n }\n \n-void CWalletTx::GetAccountAmounts(const string& strAccount, int64_t& nReceived,\n-                                  int64_t& nSent, int64_t& nFee, const isminefilter& filter) const\n+void CWalletTx::GetAccountAmounts(const string& strAccount, CAmount& nReceived,\n+                                  CAmount& nSent, CAmount& nFee, const isminefilter& filter) const\n {\n     nReceived = nSent = nFee = 0;\n \n-    int64_t allFee;\n+    CAmount allFee;\n     string strSentAccount;\n     list<COutputEntry> listReceived;\n     list<COutputEntry> listSent;\n@@ -1011,9 +1011,9 @@ void CWallet::ResendWalletTransactions()\n //\n \n \n-int64_t CWallet::GetBalance() const\n+CAmount CWallet::GetBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1027,9 +1027,9 @@ int64_t CWallet::GetBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetUnconfirmedBalance() const\n+CAmount CWallet::GetUnconfirmedBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1042,9 +1042,9 @@ int64_t CWallet::GetUnconfirmedBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetImmatureBalance() const\n+CAmount CWallet::GetImmatureBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1056,9 +1056,9 @@ int64_t CWallet::GetImmatureBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetWatchOnlyBalance() const\n+CAmount CWallet::GetWatchOnlyBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1072,9 +1072,9 @@ int64_t CWallet::GetWatchOnlyBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetUnconfirmedWatchOnlyBalance() const\n+CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1087,9 +1087,9 @@ int64_t CWallet::GetUnconfirmedWatchOnlyBalance() const\n     return nTotal;\n }\n \n-int64_t CWallet::GetImmatureWatchOnlyBalance() const\n+CAmount CWallet::GetImmatureWatchOnlyBalance() const\n {\n-    int64_t nTotal = 0;\n+    CAmount nTotal = 0;\n     {\n         LOCK2(cs_main, cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1137,8 +1137,8 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const\n     }\n }\n \n-static void ApproximateBestSubset(vector<pair<int64_t, pair<const CWalletTx*,unsigned int> > >vValue, int64_t nTotalLower, int64_t nTargetValue,\n-                                  vector<char>& vfBest, int64_t& nBest, int iterations = 1000)\n+static void ApproximateBestSubset(vector<pair<CAmount, pair<const CWalletTx*,unsigned int> > >vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n+                                  vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n {\n     vector<char> vfIncluded;\n \n@@ -1150,7 +1150,7 @@ static void ApproximateBestSubset(vector<pair<int64_t, pair<const CWalletTx*,uns\n     for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n     {\n         vfIncluded.assign(vValue.size(), false);\n-        int64_t nTotal = 0;\n+        CAmount nTotal = 0;\n         bool fReachedTarget = false;\n         for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n         {\n@@ -1183,18 +1183,18 @@ static void ApproximateBestSubset(vector<pair<int64_t, pair<const CWalletTx*,uns\n     }\n }\n \n-bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,\n-                                 set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,\n+                                 set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n     // List of values less than target\n-    pair<int64_t, pair<const CWalletTx*,unsigned int> > coinLowestLarger;\n-    coinLowestLarger.first = std::numeric_limits<int64_t>::max();\n+    pair<CAmount, pair<const CWalletTx*,unsigned int> > coinLowestLarger;\n+    coinLowestLarger.first = std::numeric_limits<CAmount>::max();\n     coinLowestLarger.second.first = NULL;\n-    vector<pair<int64_t, pair<const CWalletTx*,unsigned int> > > vValue;\n-    int64_t nTotalLower = 0;\n+    vector<pair<CAmount, pair<const CWalletTx*,unsigned int> > > vValue;\n+    CAmount nTotalLower = 0;\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n \n@@ -1209,9 +1209,9 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n             continue;\n \n         int i = output.i;\n-        int64_t n = pcoin->vout[i].nValue;\n+        CAmount n = pcoin->vout[i].nValue;\n \n-        pair<int64_t,pair<const CWalletTx*,unsigned int> > coin = make_pair(n,make_pair(pcoin, i));\n+        pair<CAmount,pair<const CWalletTx*,unsigned int> > coin = make_pair(n,make_pair(pcoin, i));\n \n         if (n == nTargetValue)\n         {\n@@ -1252,7 +1252,7 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n     // Solve subset sum by stochastic approximation\n     sort(vValue.rbegin(), vValue.rend(), CompareValueOnly());\n     vector<char> vfBest;\n-    int64_t nBest;\n+    CAmount nBest;\n \n     ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest, 1000);\n     if (nBest != nTargetValue && nTotalLower >= nTargetValue + CENT)\n@@ -1284,7 +1284,7 @@ bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfT\n     return true;\n }\n \n-bool CWallet::SelectCoins(int64_t nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet, const CCoinControl* coinControl) const\n+bool CWallet::SelectCoins(const CAmount& nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl* coinControl) const\n {\n     vector<COutput> vCoins;\n     AvailableCoins(vCoins, true, coinControl);\n@@ -1310,11 +1310,11 @@ bool CWallet::SelectCoins(int64_t nTargetValue, set<pair<const CWalletTx*,unsign\n \n \n \n-bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n+bool CWallet::CreateTransaction(const vector<pair<CScript, CAmount> >& vecSend,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n {\n-    int64_t nValue = 0;\n-    BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n+    CAmount nValue = 0;\n+    BOOST_FOREACH (const PAIRTYPE(CScript, CAmount)& s, vecSend)\n     {\n         if (nValue < 0)\n         {\n@@ -1343,10 +1343,10 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                 txNew.vout.clear();\n                 wtxNew.fFromMe = true;\n \n-                int64_t nTotalValue = nValue + nFeeRet;\n+                CAmount nTotalValue = nValue + nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n-                BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n+                BOOST_FOREACH (const PAIRTYPE(CScript, CAmount)& s, vecSend)\n                 {\n                     CTxOut txout(s.second, s.first);\n                     if (txout.IsDust(::minRelayTxFee))\n@@ -1359,22 +1359,22 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n \n                 // Choose coins to use\n                 set<pair<const CWalletTx*,unsigned int> > setCoins;\n-                int64_t nValueIn = 0;\n+                CAmount nValueIn = 0;\n                 if (!SelectCoins(nTotalValue, setCoins, nValueIn, coinControl))\n                 {\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n                 }\n                 BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n                 {\n-                    int64_t nCredit = pcoin.first->vout[pcoin.second].nValue;\n+                    CAmount nCredit = pcoin.first->vout[pcoin.second].nValue;\n                     //The priority after the next block (depth+1) is used instead of the current,\n                     //reflecting an assumption the user would accept a bit more delay for\n                     //a chance at a free transaction.\n                     dPriority += (double)nCredit * (pcoin.first->GetDepthInMainChain()+1);\n                 }\n \n-                int64_t nChange = nValueIn - nValue - nFeeRet;\n+                CAmount nChange = nValueIn - nValue - nFeeRet;\n \n                 if (nChange > 0)\n                 {\n@@ -1450,7 +1450,7 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n                 }\n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n-                int64_t nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n \n                 if (nFeeRet >= nFeeNeeded)\n                     break; // Done, enough fee included.\n@@ -1481,10 +1481,10 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n     return true;\n }\n \n-bool CWallet::CreateTransaction(CScript scriptPubKey, int64_t nValue,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n+bool CWallet::CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl* coinControl)\n {\n-    vector< pair<CScript, int64_t> > vecSend;\n+    vector< pair<CScript, CAmount> > vecSend;\n     vecSend.push_back(make_pair(scriptPubKey, nValue));\n     return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, strFailReason, coinControl);\n }\n@@ -1539,7 +1539,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n \n \n-string CWallet::SendMoney(const CTxDestination &address, int64_t nValue, CWalletTx& wtxNew)\n+string CWallet::SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n {\n     // Check amount\n     if (nValue <= 0)\n@@ -1560,7 +1560,7 @@ string CWallet::SendMoney(const CTxDestination &address, int64_t nValue, CWallet\n \n     // Create and send the transaction\n     CReserveKey reservekey(this);\n-    int64_t nFeeRequired;\n+    CAmount nFeeRequired;\n     if (!CreateTransaction(scriptPubKey, nValue, wtxNew, reservekey, nFeeRequired, strError))\n     {\n         if (nValue + nFeeRequired > GetBalance())\n@@ -1576,10 +1576,10 @@ string CWallet::SendMoney(const CTxDestination &address, int64_t nValue, CWallet\n \n \n \n-int64_t CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)\n+CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)\n {\n     // payTxFee is user-set \"I want to pay this much\"\n-    int64_t nFeeNeeded = payTxFee.GetFee(nTxBytes);\n+    CAmount nFeeNeeded = payTxFee.GetFee(nTxBytes);\n     // User didn't set: use -txconfirmtarget to estimate...\n     if (nFeeNeeded == 0)\n         nFeeNeeded = pool.estimateFee(nConfirmTarget).GetFee(nTxBytes);\n@@ -1838,9 +1838,9 @@ int64_t CWallet::GetOldestKeyPoolTime()\n     return keypool.nTime;\n }\n \n-std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n+std::map<CTxDestination, CAmount> CWallet::GetAddressBalances()\n {\n-    map<CTxDestination, int64_t> balances;\n+    map<CTxDestination, CAmount> balances;\n \n     {\n         LOCK(cs_wallet);\n@@ -1866,7 +1866,7 @@ std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n                 if(!ExtractDestination(pcoin->vout[i].scriptPubKey, addr))\n                     continue;\n \n-                int64_t n = IsSpent(walletEntry.first, i) ? 0 : pcoin->vout[i].nValue;\n+                CAmount n = IsSpent(walletEntry.first, i) ? 0 : pcoin->vout[i].nValue;\n \n                 if (!balances.count(addr))\n                     balances[addr] = 0;"
      },
      {
        "sha": "f3fffb22532fd479eca29c30e350982e43d604a2",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -30,9 +30,9 @@ extern unsigned int nTxConfirmTarget;\n extern bool bSpendZeroConfChange;\n \n // -paytxfee default\n-static const int64_t DEFAULT_TRANSACTION_FEE = 0;\n+static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n // -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n-static const int nHighTransactionFeeWarning = 0.01 * COIN;\n+static const CAmount nHighTransactionFeeWarning = 0.01 * COIN;\n // Largest (in bytes) free transaction we're willing to create\n static const unsigned int MAX_FREE_TRANSACTION_CREATE_SIZE = 1000;\n \n@@ -98,7 +98,7 @@ class CAddressBookData\n class CWallet : public CCryptoKeyStore, public CWalletInterface\n {\n private:\n-    bool SelectCoins(int64_t nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet, const CCoinControl *coinControl = NULL) const;\n+    bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -182,7 +182,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL) const;\n-    bool SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const;\n+    bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;\n \n@@ -253,21 +253,21 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions();\n-    int64_t GetBalance() const;\n-    int64_t GetUnconfirmedBalance() const;\n-    int64_t GetImmatureBalance() const;\n-    int64_t GetWatchOnlyBalance() const;\n-    int64_t GetUnconfirmedWatchOnlyBalance() const;\n-    int64_t GetImmatureWatchOnlyBalance() const;\n-    bool CreateTransaction(const std::vector<std::pair<CScript, int64_t> >& vecSend,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n-    bool CreateTransaction(CScript scriptPubKey, int64_t nValue,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    CAmount GetBalance() const;\n+    CAmount GetUnconfirmedBalance() const;\n+    CAmount GetImmatureBalance() const;\n+    CAmount GetWatchOnlyBalance() const;\n+    CAmount GetUnconfirmedWatchOnlyBalance() const;\n+    CAmount GetImmatureWatchOnlyBalance() const;\n+    bool CreateTransaction(const std::vector<std::pair<CScript, CAmount> >& vecSend,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n+    bool CreateTransaction(CScript scriptPubKey, const CAmount& nValue,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, std::string& strFailReason, const CCoinControl *coinControl = NULL);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n-    std::string SendMoney(const CTxDestination &address, int64_t nValue, CWalletTx& wtxNew);\n+    std::string SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew);\n \n     static CFeeRate minTxFee;\n-    static int64_t GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n+    static CAmount GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool);\n \n     bool NewKeyPool();\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n@@ -279,24 +279,24 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n \n     std::set< std::set<CTxDestination> > GetAddressGroupings();\n-    std::map<CTxDestination, int64_t> GetAddressBalances();\n+    std::map<CTxDestination, CAmount> GetAddressBalances();\n \n     std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n \n     isminetype IsMine(const CTxIn& txin) const;\n-    int64_t GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n+    CAmount GetDebit(const CTxIn& txin, const isminefilter& filter) const;\n     isminetype IsMine(const CTxOut& txout) const\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n-    int64_t GetCredit(const CTxOut& txout, const isminefilter& filter) const\n+    CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n         return ((IsMine(txout) & filter) ? txout.nValue : 0);\n     }\n     bool IsChange(const CTxOut& txout) const;\n-    int64_t GetChange(const CTxOut& txout) const\n+    CAmount GetChange(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n@@ -313,9 +313,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     {\n         return (GetDebit(tx, ISMINE_ALL) > 0);\n     }\n-    int64_t GetDebit(const CTransaction& tx, const isminefilter& filter) const\n+    CAmount GetDebit(const CTransaction& tx, const isminefilter& filter) const\n     {\n-        int64_t nDebit = 0;\n+        CAmount nDebit = 0;\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         {\n             nDebit += GetDebit(txin, filter);\n@@ -324,9 +324,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         }\n         return nDebit;\n     }\n-    int64_t GetCredit(const CTransaction& tx, const isminefilter& filter) const\n+    CAmount GetCredit(const CTransaction& tx, const isminefilter& filter) const\n     {\n-        int64_t nCredit = 0;\n+        CAmount nCredit = 0;\n         BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n             nCredit += GetCredit(txout, filter);\n@@ -335,9 +335,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         }\n         return nCredit;\n     }\n-    int64_t GetChange(const CTransaction& tx) const\n+    CAmount GetChange(const CTransaction& tx) const\n     {\n-        int64_t nChange = 0;\n+        CAmount nChange = 0;\n         BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n             nChange += GetChange(txout);\n@@ -457,7 +457,7 @@ static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n struct COutputEntry\n {\n     CTxDestination destination;\n-    int64_t amount;\n+    CAmount amount;\n     int vout;\n };\n \n@@ -545,15 +545,15 @@ class CWalletTx : public CMerkleTx\n     mutable bool fImmatureWatchCreditCached;\n     mutable bool fAvailableWatchCreditCached;\n     mutable bool fChangeCached;\n-    mutable int64_t nDebitCached;\n-    mutable int64_t nCreditCached;\n-    mutable int64_t nImmatureCreditCached;\n-    mutable int64_t nAvailableCreditCached;\n-    mutable int64_t nWatchDebitCached;\n-    mutable int64_t nWatchCreditCached;\n-    mutable int64_t nImmatureWatchCreditCached;\n-    mutable int64_t nAvailableWatchCreditCached;\n-    mutable int64_t nChangeCached;\n+    mutable CAmount nDebitCached;\n+    mutable CAmount nCreditCached;\n+    mutable CAmount nImmatureCreditCached;\n+    mutable CAmount nAvailableCreditCached;\n+    mutable CAmount nWatchDebitCached;\n+    mutable CAmount nWatchCreditCached;\n+    mutable CAmount nImmatureWatchCreditCached;\n+    mutable CAmount nAvailableWatchCreditCached;\n+    mutable CAmount nChangeCached;\n \n     CWalletTx()\n     {\n@@ -670,12 +670,12 @@ class CWalletTx : public CMerkleTx\n     }\n \n     // filter decides which addresses will count towards the debit\n-    int64_t GetDebit(const isminefilter& filter) const\n+    CAmount GetDebit(const isminefilter& filter) const\n     {\n         if (vin.empty())\n             return 0;\n \n-        int64_t debit = 0;\n+        CAmount debit = 0;\n         if(filter & ISMINE_SPENDABLE)\n         {\n             if (fDebitCached)\n@@ -701,7 +701,7 @@ class CWalletTx : public CMerkleTx\n         return debit;\n     }\n \n-    int64_t GetCredit(bool fUseCache=true) const\n+    CAmount GetCredit(bool fUseCache=true) const\n     {\n         // Must wait until coinbase is safely deep enough in the chain before valuing it\n         if (IsCoinBase() && GetBlocksToMaturity() > 0)\n@@ -715,7 +715,7 @@ class CWalletTx : public CMerkleTx\n         return nCreditCached;\n     }\n \n-    int64_t GetImmatureCredit(bool fUseCache=true) const\n+    CAmount GetImmatureCredit(bool fUseCache=true) const\n     {\n         if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n         {\n@@ -729,7 +729,7 @@ class CWalletTx : public CMerkleTx\n         return 0;\n     }\n \n-    int64_t GetAvailableCredit(bool fUseCache=true) const\n+    CAmount GetAvailableCredit(bool fUseCache=true) const\n     {\n         if (pwallet == 0)\n             return 0;\n@@ -741,7 +741,7 @@ class CWalletTx : public CMerkleTx\n         if (fUseCache && fAvailableCreditCached)\n             return nAvailableCreditCached;\n \n-        int64_t nCredit = 0;\n+        CAmount nCredit = 0;\n         uint256 hashTx = GetHash();\n         for (unsigned int i = 0; i < vout.size(); i++)\n         {\n@@ -759,7 +759,7 @@ class CWalletTx : public CMerkleTx\n         return nCredit;\n     }\n \n-    int64_t GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const\n+    CAmount GetImmatureWatchOnlyCredit(const bool& fUseCache=true) const\n     {\n         if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n         {\n@@ -773,7 +773,7 @@ class CWalletTx : public CMerkleTx\n         return 0;\n     }\n \n-    int64_t GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const\n+    CAmount GetAvailableWatchOnlyCredit(const bool& fUseCache=true) const\n     {\n         if (pwallet == 0)\n             return 0;\n@@ -785,7 +785,7 @@ class CWalletTx : public CMerkleTx\n         if (fUseCache && fAvailableWatchCreditCached)\n             return nAvailableWatchCreditCached;\n \n-        int64_t nCredit = 0;\n+        CAmount nCredit = 0;\n         for (unsigned int i = 0; i < vout.size(); i++)\n         {\n             if (!pwallet->IsSpent(GetHash(), i))\n@@ -802,7 +802,7 @@ class CWalletTx : public CMerkleTx\n         return nCredit;\n     }\n \n-    int64_t GetChange() const\n+    CAmount GetChange() const\n     {\n         if (fChangeCached)\n             return nChangeCached;\n@@ -812,10 +812,10 @@ class CWalletTx : public CMerkleTx\n     }\n \n     void GetAmounts(std::list<COutputEntry>& listReceived,\n-                    std::list<COutputEntry>& listSent, int64_t& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n+                    std::list<COutputEntry>& listSent, CAmount& nFee, std::string& strSentAccount, const isminefilter& filter) const;\n \n-    void GetAccountAmounts(const std::string& strAccount, int64_t& nReceived,\n-                           int64_t& nSent, int64_t& nFee, const isminefilter& filter) const;\n+    void GetAccountAmounts(const std::string& strAccount, CAmount& nReceived,\n+                           CAmount& nSent, CAmount& nFee, const isminefilter& filter) const;\n \n     bool IsFromMe(const isminefilter& filter) const\n     {\n@@ -949,7 +949,7 @@ class CAccountingEntry\n {\n public:\n     std::string strAccount;\n-    int64_t nCreditDebit;\n+    CAmount nCreditDebit;\n     int64_t nTime;\n     std::string strOtherAccount;\n     std::string strComment;"
      },
      {
        "sha": "67218bf2c851fdb266f363bc5fe01cf1d4ad7459",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -187,12 +187,12 @@ bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n     return WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n }\n \n-int64_t CWalletDB::GetAccountCreditDebit(const string& strAccount)\n+CAmount CWalletDB::GetAccountCreditDebit(const string& strAccount)\n {\n     list<CAccountingEntry> entries;\n     ListAccountCreditDebit(strAccount, entries);\n \n-    int64_t nCreditDebit = 0;\n+    CAmount nCreditDebit = 0;\n     BOOST_FOREACH (const CAccountingEntry& entry, entries)\n         nCreditDebit += entry.nCreditDebit;\n "
      },
      {
        "sha": "f3d6e61f8bc7031b32ed9b5ce324264feb6e6373",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd192f8b4d6db386354dfe635a8a6a105b55de8/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_WALLETDB_H\n #define BITCOIN_WALLETDB_H\n \n+#include \"amount.h\"\n #include \"db.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n@@ -118,7 +119,7 @@ class CWalletDB : public CDB\n     bool EraseDestData(const std::string &address, const std::string &key);\n \n     bool WriteAccountingEntry(const CAccountingEntry& acentry);\n-    int64_t GetAccountCreditDebit(const std::string& strAccount);\n+    CAmount GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n     DBErrors ReorderTransactions(CWallet* pwallet);"
      }
    ]
  },
  {
    "sha": "f60dc15c50e8fad52f8ee3e313041e2d224be667",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjBkYzE1YzUwZThmYWQ1MmY4ZWUzZTMxMzA0MWUyZDIyNGJlNjY3",
    "commit": {
      "author": {
        "name": "Whit J",
        "email": "whitj00@users.noreply.github.com",
        "date": "2014-09-30T17:48:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T10:52:32Z"
      },
      "message": "doc: add make install to build-osx.md and build-unix.md",
      "tree": {
        "sha": "3e1a25014d391e437ae3ba4163ae028a4185cf49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e1a25014d391e437ae3ba4163ae028a4185cf49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f60dc15c50e8fad52f8ee3e313041e2d224be667",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUK9zyAAoJEHSBCwEjRsmmy3IIAKgJ4FdEyLo22b99xnZ5BuYK\nbWk0gXu69D6hVojypIWNdUKJmhNPB7CpSg/shY8N8krm7w+2DlWywwpgneX8EFqY\nl5Xy89FvbwUb989TWugIg1vThQnzMvx79uAyWJ7fSQcKx9n0c9tDqbr5SbPe3HD2\noxWjyrNlXeKFnCBJ7+/Cx3cnry+HIUSKI7KRgu/E5oGdD84MaUjQ+fBWOT0OAZOs\naDmlU1SyspIMhm9NG1CcF77AOhDnFa6+/m0MDbIkL9Fax1AcTuAtAhGsNpdNqC6o\nPSlA4hjOOiAgRvp8CucT0HCt7jw69VZKCDE2thzB/wwRahSXwO4Oe0u0QnstGSo=\n=/pRX\n-----END PGP SIGNATURE-----",
        "payload": "tree 3e1a25014d391e437ae3ba4163ae028a4185cf49\nparent 3fd192f8b4d6db386354dfe635a8a6a105b55de8\nauthor Whit J <whitj00@users.noreply.github.com> 1412099320 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412160752 +0200\n\ndoc: add make install to build-osx.md and build-unix.md\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60dc15c50e8fad52f8ee3e313041e2d224be667",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f60dc15c50e8fad52f8ee3e313041e2d224be667",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60dc15c50e8fad52f8ee3e313041e2d224be667/comments",
    "author": {
      "login": "whitj00",
      "id": 6721742,
      "node_id": "MDQ6VXNlcjY3MjE3NDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6721742?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/whitj00",
      "html_url": "https://github.com/whitj00",
      "followers_url": "https://api.github.com/users/whitj00/followers",
      "following_url": "https://api.github.com/users/whitj00/following{/other_user}",
      "gists_url": "https://api.github.com/users/whitj00/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/whitj00/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/whitj00/subscriptions",
      "organizations_url": "https://api.github.com/users/whitj00/orgs",
      "repos_url": "https://api.github.com/users/whitj00/repos",
      "events_url": "https://api.github.com/users/whitj00/events{/privacy}",
      "received_events_url": "https://api.github.com/users/whitj00/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fd192f8b4d6db386354dfe635a8a6a105b55de8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fd192f8b4d6db386354dfe635a8a6a105b55de8"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "dc55f8259e073103159201c59091e4963485ac4f",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60dc15c50e8fad52f8ee3e313041e2d224be667/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60dc15c50e8fad52f8ee3e313041e2d224be667/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=f60dc15c50e8fad52f8ee3e313041e2d224be667",
        "patch": "@@ -81,6 +81,10 @@ After exiting, you'll get a warning that the install is keg-only, which means it\n \n         make check\n \n+4.  (Optional) You can also install bitcoind to your path:\n+\n+        make install\n+\n Creating a release build\n ------------------------\n You can ignore this section if you are building `bitcoind` for your own use."
      },
      {
        "sha": "fb5eaec431363afa6ec12850a799344fb7875232",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f60dc15c50e8fad52f8ee3e313041e2d224be667/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f60dc15c50e8fad52f8ee3e313041e2d224be667/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=f60dc15c50e8fad52f8ee3e313041e2d224be667",
        "patch": "@@ -15,9 +15,12 @@ the usage of the absolute path.\n To Build\n ---------------------\n \n-\t./autogen.sh\n-\t./configure\n-\tmake\n+```bash\n+./autogen.sh\n+./configure\n+make\n+make install # optional\n+```\n \n This will build bitcoin-qt as well if the dependencies are met.\n "
      }
    ]
  },
  {
    "sha": "a419f82670ea3b94e46d92ab2642d5fdf4d88674",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDE5ZjgyNjcwZWEzYjk0ZTQ2ZDkyYWIyNjQyZDVmZGY0ZDg4Njc0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T10:56:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T10:56:11Z"
      },
      "message": "Merge pull request #5022\n\nc375b5c remove dead/unused code in walletdb.cpp (Philip Kaufmann)",
      "tree": {
        "sha": "cd8bf69737abc43d7ea56e23b44e03ef8d14d310",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd8bf69737abc43d7ea56e23b44e03ef8d14d310"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a419f82670ea3b94e46d92ab2642d5fdf4d88674",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUK93LAAoJEHSBCwEjRsmmfQ4IALa/GX8ZxVwfAkM0LpjG3uh2\n2cEHMy58GgSoWf267L5up1f8zAv2cvolA5Ct+4lQ61jAxEn/ni7HcNcfLu/8tXmp\nCA+fKlwSkyW/Oyu45nC2F6cmI5qNFYtftA8B0M/FV/FvItVtERF5vl4ww5rGB3ex\nZ4Nr3GTyj+1PuqjoMWUJanMS29kIJWTDUUy0XG/TvRpmMgp4d98tiD0tVlApbQKH\nyUniAHG9Xa4YhVDxrPjzkBKfztbnDbB6AAj7VYYd6hzDiSUg9Cco64lT+lvykfJq\nIW6/6xS885Eb3Aypq5SVwNdgXzyqbTeB5dTtLRUe83AAdQ5/HouNYW5STudnbR8=\n=QaRa\n-----END PGP SIGNATURE-----",
        "payload": "tree cd8bf69737abc43d7ea56e23b44e03ef8d14d310\nparent f60dc15c50e8fad52f8ee3e313041e2d224be667\nparent c375b5c102971abfefaaf07776b5b65f1cca54f1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412160965 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412160971 +0200\n\nMerge pull request #5022\n\nc375b5c remove dead/unused code in walletdb.cpp (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a419f82670ea3b94e46d92ab2642d5fdf4d88674",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a419f82670ea3b94e46d92ab2642d5fdf4d88674",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a419f82670ea3b94e46d92ab2642d5fdf4d88674/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f60dc15c50e8fad52f8ee3e313041e2d224be667",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60dc15c50e8fad52f8ee3e313041e2d224be667",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f60dc15c50e8fad52f8ee3e313041e2d224be667"
      },
      {
        "sha": "c375b5c102971abfefaaf07776b5b65f1cca54f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c375b5c102971abfefaaf07776b5b65f1cca54f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c375b5c102971abfefaaf07776b5b65f1cca54f1"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 0,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3e5a664a5d8e09c56257260c0da8172a8ab85f8f",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a419f82670ea3b94e46d92ab2642d5fdf4d88674/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a419f82670ea3b94e46d92ab2642d5fdf4d88674/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=a419f82670ea3b94e46d92ab2642d5fdf4d88674",
        "patch": "@@ -391,13 +391,6 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 wss.fAnyUnordered = true;\n \n             pwallet->AddToWallet(wtx, true);\n-            //// debug print\n-            //LogPrintf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString());\n-            //LogPrintf(\" %12d  %s  %s  %s\\n\",\n-            //    wtx.vout[0].nValue,\n-            //    DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", wtx.GetBlockTime()),\n-            //    wtx.hashBlock.ToString(),\n-            //    wtx.mapValue[\"message\"]);\n         }\n         else if (strType == \"acentry\")\n         {\n@@ -708,7 +701,6 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n DBErrors CWalletDB::FindWalletTx(CWallet* pwallet, vector<uint256>& vTxHash, vector<CWalletTx>& vWtx)\n {\n     pwallet->vchDefaultKey = CPubKey();\n-    CWalletScanState wss;\n     bool fNoncriticalErrors = false;\n     DBErrors result = DB_LOAD_OK;\n "
      }
    ]
  },
  {
    "sha": "e9f3fa7c0b2c605f2ecd9733ca11979bad75d3e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWYzZmE3YzBiMmM2MDVmMmVjZDk3MzNjYTExOTc5YmFkNzVkM2U4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-01T01:52:19Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-01T10:59:59Z"
      },
      "message": "travis: enable windows tests",
      "tree": {
        "sha": "eafee28c1a943c5bd57cac043243823c185fb5a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eafee28c1a943c5bd57cac043243823c185fb5a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9f3fa7c0b2c605f2ecd9733ca11979bad75d3e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9f3fa7c0b2c605f2ecd9733ca11979bad75d3e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9f3fa7c0b2c605f2ecd9733ca11979bad75d3e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9f3fa7c0b2c605f2ecd9733ca11979bad75d3e8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f60dc15c50e8fad52f8ee3e313041e2d224be667",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f60dc15c50e8fad52f8ee3e313041e2d224be667",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f60dc15c50e8fad52f8ee3e313041e2d224be667"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "eae07ead8e567b37bee143c609dae8b63071e71b",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9f3fa7c0b2c605f2ecd9733ca11979bad75d3e8/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9f3fa7c0b2c605f2ecd9733ca11979bad75d3e8/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=e9f3fa7c0b2c605f2ecd9733ca11979bad75d3e8",
        "patch": "@@ -35,9 +35,9 @@ matrix:\n     - compiler: \"true 5\"\n       env: HOST=x86_64-apple-darwin11 PACKAGES=\"gcc-multilib g++-multilib cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.7 GOAL=\"deploy\"\n     - compiler: \"true 6\"\n-      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev\" GOAL=\"deploy\"\n+      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine\" RUN_TESTS=true GOAL=\"deploy\"\n     - compiler: \"true 7\"\n-      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev\" GOAL=\"deploy\"\n+      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine\" RUN_TESTS=true GOAL=\"deploy\"\n install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-upgrade -qq $PACKAGES; fi"
      }
    ]
  },
  {
    "sha": "a41943df586136e774a68cd381fedffa38980e78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDE5NDNkZjU4NjEzNmU3NzRhNjhjZDM4MWZlZGZmYTM4OTgwZTc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T11:21:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T11:21:32Z"
      },
      "message": "Merge pull request #5023\n\ne9f3fa7 travis: enable windows tests (Cory Fields)",
      "tree": {
        "sha": "778c5a723cd6b4f62c74146492f3ea4e882508df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/778c5a723cd6b4f62c74146492f3ea4e882508df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a41943df586136e774a68cd381fedffa38980e78",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUK+O8AAoJEHSBCwEjRsmmCp8H/issZJnqHpA5g0EztFn2EfQR\nOBn/oEprHUXeYjntolMIlzkgCYioi0bxNo0pdYGN6sNmKFDKqEThCNfGfkYN7lNr\nXCklCml5RIUTLQRkPqTibHWCwmJ4cmPU/lFd+HMftThRSNUzcVblTVhy+Voe4KJu\n+UoxxGqJJNwUjNfETHkQpRMPotdIBimfD+fY0Jy2R28ViLub1vT+M3KCQYaUr+I0\nX6btzx2WNfRbNd2BvOpL8ErU/nAuYnr4KBwAyTrwM+LCJl8RL7kQyuK7kUnZtRpQ\nZpH7hQ8u7q7gD9v/ecknW+L93d0lAa8LgIxk5KaF07IXRO3dU2jOco0VoZTdxR4=\n=VxcC\n-----END PGP SIGNATURE-----",
        "payload": "tree 778c5a723cd6b4f62c74146492f3ea4e882508df\nparent a419f82670ea3b94e46d92ab2642d5fdf4d88674\nparent e9f3fa7c0b2c605f2ecd9733ca11979bad75d3e8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412162484 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412162492 +0200\n\nMerge pull request #5023\n\ne9f3fa7 travis: enable windows tests (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a41943df586136e774a68cd381fedffa38980e78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a41943df586136e774a68cd381fedffa38980e78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a41943df586136e774a68cd381fedffa38980e78/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a419f82670ea3b94e46d92ab2642d5fdf4d88674",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a419f82670ea3b94e46d92ab2642d5fdf4d88674",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a419f82670ea3b94e46d92ab2642d5fdf4d88674"
      },
      {
        "sha": "e9f3fa7c0b2c605f2ecd9733ca11979bad75d3e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9f3fa7c0b2c605f2ecd9733ca11979bad75d3e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9f3fa7c0b2c605f2ecd9733ca11979bad75d3e8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "eae07ead8e567b37bee143c609dae8b63071e71b",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a41943df586136e774a68cd381fedffa38980e78/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a41943df586136e774a68cd381fedffa38980e78/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=a41943df586136e774a68cd381fedffa38980e78",
        "patch": "@@ -35,9 +35,9 @@ matrix:\n     - compiler: \"true 5\"\n       env: HOST=x86_64-apple-darwin11 PACKAGES=\"gcc-multilib g++-multilib cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.7 GOAL=\"deploy\"\n     - compiler: \"true 6\"\n-      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev\" GOAL=\"deploy\"\n+      env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine\" RUN_TESTS=true GOAL=\"deploy\"\n     - compiler: \"true 7\"\n-      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev\" GOAL=\"deploy\"\n+      env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine\" RUN_TESTS=true GOAL=\"deploy\"\n install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get install --no-upgrade -qq $PACKAGES; fi"
      }
    ]
  },
  {
    "sha": "1fbccda8d0d5ccfeef46e10253315c5c6977817c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmJjY2RhOGQwZDVjY2ZlZWY0NmUxMDI1MzMxNWM1YzY5Nzc4MTdj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T11:26:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-01T11:28:16Z"
      },
      "message": "Merge pull request #4940\n\n62e5f8f CMessageHeader sanity changes (Wladimir J. van der Laan)",
      "tree": {
        "sha": "86f13328c0eff12d3e3b42ff9be39e078ae11b83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86f13328c0eff12d3e3b42ff9be39e078ae11b83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fbccda8d0d5ccfeef46e10253315c5c6977817c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUK+VQAAoJEHSBCwEjRsmmpuIIAKbpYQPjvvMhgNj2eCXS+XYA\nuThBqd55lUhDW8lx0ELoZnB6Y+NfBwVH0EyLCP6FQ7YTltzx/sa5PeVlo4M4gwu0\nYF9YkXqG0DnZ5NPX1iQBQ/bCH8WcEDFDi69o7nfsg0frv5OeeIO0ojQ8wlm/mjzi\nrMNOdOJsLo248/qqUEzcxSgTvio0LkcAYz3hdNVH3YqjKWNB6D3weQ1+EjGWtnAQ\n3ZUtnH2GYtNsw4w2jpW/R1+djew3XJ0yh4beyzmdfgCliWDPvOD8tcN5mE9kezwm\nC+hBkhni4fD7zOvADZhgnGD35goIrauXrBZOUAp3FuSUthX1+mUk6YTF6a9DBy8=\n=i/78\n-----END PGP SIGNATURE-----",
        "payload": "tree 86f13328c0eff12d3e3b42ff9be39e078ae11b83\nparent a41943df586136e774a68cd381fedffa38980e78\nparent 62e5f8f96114a872354103ef566b5c74a16154d4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412162813 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412162896 +0200\n\nMerge pull request #4940\n\n62e5f8f CMessageHeader sanity changes (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fbccda8d0d5ccfeef46e10253315c5c6977817c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fbccda8d0d5ccfeef46e10253315c5c6977817c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fbccda8d0d5ccfeef46e10253315c5c6977817c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a41943df586136e774a68cd381fedffa38980e78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a41943df586136e774a68cd381fedffa38980e78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a41943df586136e774a68cd381fedffa38980e78"
      },
      {
        "sha": "62e5f8f96114a872354103ef566b5c74a16154d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62e5f8f96114a872354103ef566b5c74a16154d4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62e5f8f96114a872354103ef566b5c74a16154d4"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 2,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0e28f3abbd4aaa0ced5ed5f37339af9ea7d9b5ff",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fbccda8d0d5ccfeef46e10253315c5c6977817c/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fbccda8d0d5ccfeef46e10253315c5c6977817c/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=1fbccda8d0d5ccfeef46e10253315c5c6977817c",
        "patch": "@@ -24,25 +24,22 @@ CMessageHeader::CMessageHeader()\n {\n     memcpy(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE);\n     memset(pchCommand, 0, sizeof(pchCommand));\n-    pchCommand[1] = 1;\n     nMessageSize = -1;\n     nChecksum = 0;\n }\n \n CMessageHeader::CMessageHeader(const char* pszCommand, unsigned int nMessageSizeIn)\n {\n     memcpy(pchMessageStart, Params().MessageStart(), MESSAGE_START_SIZE);\n+    memset(pchCommand, 0, sizeof(pchCommand));\n     strncpy(pchCommand, pszCommand, COMMAND_SIZE);\n     nMessageSize = nMessageSizeIn;\n     nChecksum = 0;\n }\n \n std::string CMessageHeader::GetCommand() const\n {\n-    if (pchCommand[COMMAND_SIZE-1] == 0)\n-        return std::string(pchCommand, pchCommand + strlen(pchCommand));\n-    else\n-        return std::string(pchCommand, pchCommand + COMMAND_SIZE);\n+    return std::string(pchCommand, pchCommand + strnlen(pchCommand, COMMAND_SIZE));\n }\n \n bool CMessageHeader::IsValid() const"
      }
    ]
  },
  {
    "sha": "965c306d6d6ee3695dc50615a87e25c248c41a89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjVjMzA2ZDZkNmVlMzY5NWRjNTA2MTVhODdlMjVjMjQ4YzQxYTg5",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-09-29T16:09:46Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-10-01T13:58:00Z"
      },
      "message": "Keep symlinks when copying into .app bundle\n\nCode signing failed for me on OSX 10.9.5 because the\nVersions/Current symbolic links were being replaced\nwith a duplicate copy of the frameworks' code.\n\nReleases were bigger than they needed to be, for the\nsame reason.",
      "tree": {
        "sha": "63445b219371e4d41948a609484755ea027c5872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63445b219371e4d41948a609484755ea027c5872"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/965c306d6d6ee3695dc50615a87e25c248c41a89",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlQsCGgACgkQdYgkL74406iq1ACg2I+GaqmVotw52i13TCop4Uh6\n9wAAn09AkV8o5BHNM+0N5A9q32GCu8kF\n=nOLO\n-----END PGP SIGNATURE-----",
        "payload": "tree 63445b219371e4d41948a609484755ea027c5872\nparent 1fbccda8d0d5ccfeef46e10253315c5c6977817c\nauthor Gavin Andresen <gavinandresen@gmail.com> 1412006986 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1412171880 -0400\n\nKeep symlinks when copying into .app bundle\n\nCode signing failed for me on OSX 10.9.5 because the\nVersions/Current symbolic links were being replaced\nwith a duplicate copy of the frameworks' code.\n\nReleases were bigger than they needed to be, for the\nsame reason.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965c306d6d6ee3695dc50615a87e25c248c41a89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/965c306d6d6ee3695dc50615a87e25c248c41a89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965c306d6d6ee3695dc50615a87e25c248c41a89/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fbccda8d0d5ccfeef46e10253315c5c6977817c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fbccda8d0d5ccfeef46e10253315c5c6977817c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fbccda8d0d5ccfeef46e10253315c5c6977817c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8f826ace09b5f48aa4ba5f78a107434dc53f78a1",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/965c306d6d6ee3695dc50615a87e25c248c41a89/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/965c306d6d6ee3695dc50615a87e25c248c41a89/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=965c306d6d6ee3695dc50615a87e25c248c41a89",
        "patch": "@@ -292,7 +292,7 @@ def copyFramework(framework, path, verbose):\n         fromResourcesDir = framework.sourceResourcesDirectory\n         if os.path.exists(fromResourcesDir):\n             toResourcesDir = os.path.join(path, framework.destinationResourcesDirectory)\n-            shutil.copytree(fromResourcesDir, toResourcesDir)\n+            shutil.copytree(fromResourcesDir, toResourcesDir, symlinks=True)\n             if verbose >= 3:\n                 print \"Copied resources:\", fromResourcesDir\n                 print \" to:\", toResourcesDir\n@@ -301,7 +301,7 @@ def copyFramework(framework, path, verbose):\n             fromContentsDir = framework.sourceContentsDirectory\n         if os.path.exists(fromContentsDir):\n             toContentsDir = os.path.join(path, framework.destinationVersionContentsDirectory)\n-            shutil.copytree(fromContentsDir, toContentsDir)\n+            shutil.copytree(fromContentsDir, toContentsDir, symlinks=True)\n             contentslinkfrom = os.path.join(path, framework.destinationContentsDirectory)\n             if verbose >= 3:\n                 print \"Copied Contents:\", fromContentsDir\n@@ -310,7 +310,7 @@ def copyFramework(framework, path, verbose):\n         qtMenuNibSourcePath = os.path.join(framework.frameworkDirectory, \"Resources\", \"qt_menu.nib\")\n         qtMenuNibDestinationPath = os.path.join(path, \"Contents\", \"Resources\", \"qt_menu.nib\")\n         if os.path.exists(qtMenuNibSourcePath) and not os.path.exists(qtMenuNibDestinationPath):\n-            shutil.copytree(qtMenuNibSourcePath, qtMenuNibDestinationPath)\n+            shutil.copytree(qtMenuNibSourcePath, qtMenuNibDestinationPath, symlinks=True)\n             if verbose >= 3:\n                 print \"Copied for libQtGui:\", qtMenuNibSourcePath\n                 print \" to:\", qtMenuNibDestinationPath\n@@ -584,7 +584,7 @@ if verbose >= 3:\n     print app_bundle, \"->\", target\n \n os.mkdir(\"dist\")\n-shutil.copytree(app_bundle, target)\n+shutil.copytree(app_bundle, target, symlinks=True)\n \n applicationBundle = ApplicationBundleInfo(target)\n \n@@ -671,7 +671,7 @@ for p in config.add_resources:\n     if verbose >= 3:\n         print p, \"->\", t\n     if os.path.isdir(p):\n-        shutil.copytree(p, t)\n+        shutil.copytree(p, t, symlinks=True)\n     else:\n         shutil.copy2(p, t)\n "
      }
    ]
  },
  {
    "sha": "217a5c92380173ac43d303b1ba9548544121eefd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTdhNWM5MjM4MDE3M2FjNDNkMzAzYjFiYTk1NDg1NDQxMjFlZWZk",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@monetize.io",
        "date": "2013-08-06T01:27:09Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-01T17:14:38Z"
      },
      "message": "When transaction outputs exceed inputs, show the offending amounts so as to aid debugging.",
      "tree": {
        "sha": "d03f8ce3883476f369f20d819fa3e0ef17014e8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d03f8ce3883476f369f20d819fa3e0ef17014e8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/217a5c92380173ac43d303b1ba9548544121eefd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/217a5c92380173ac43d303b1ba9548544121eefd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/217a5c92380173ac43d303b1ba9548544121eefd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/217a5c92380173ac43d303b1ba9548544121eefd/comments",
    "author": null,
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a329097f925ef20a724fa7e5241b0e9d75d42bb9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a329097f925ef20a724fa7e5241b0e9d75d42bb9"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c1fabdd55e555c2aded79e038dceb02a4ef03d37",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/217a5c92380173ac43d303b1ba9548544121eefd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/217a5c92380173ac43d303b1ba9548544121eefd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=217a5c92380173ac43d303b1ba9548544121eefd",
        "patch": "@@ -17,6 +17,7 @@\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"utilmoneystr.h\"\n \n #include <sstream>\n \n@@ -1361,7 +1362,8 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         }\n \n         if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs() : %s value in < value out\", tx.GetHash().ToString()),\n+            return state.DoS(100, error(\"CheckInputs() : %s value in (%s) < value out (%s)\",\n+                                        tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n                              REJECT_INVALID, \"bad-txns-in-belowout\");\n \n         // Tally transaction fees"
      }
    ]
  },
  {
    "sha": "f74fc9b22d7f39e36d0cbf80f5c06958c516c8ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzRmYzliMjJkN2YzOWUzNmQwY2JmODBmNWMwNjk1OGM1MTZjOGVj",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@monetize.io",
        "date": "2014-03-21T19:27:44Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-01T17:14:38Z"
      },
      "message": "Print input index when signature validation fails, to aid debugging.",
      "tree": {
        "sha": "c06904958ab512254cf9d6a83baaf87e57f9c962",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c06904958ab512254cf9d6a83baaf87e57f9c962"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f74fc9b22d7f39e36d0cbf80f5c06958c516c8ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f74fc9b22d7f39e36d0cbf80f5c06958c516c8ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f74fc9b22d7f39e36d0cbf80f5c06958c516c8ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f74fc9b22d7f39e36d0cbf80f5c06958c516c8ec/comments",
    "author": null,
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "217a5c92380173ac43d303b1ba9548544121eefd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/217a5c92380173ac43d303b1ba9548544121eefd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/217a5c92380173ac43d303b1ba9548544121eefd"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7bb61f251cf32fa43109eeeb84c5cb73f9c02ecc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f74fc9b22d7f39e36d0cbf80f5c06958c516c8ec/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f74fc9b22d7f39e36d0cbf80f5c06958c516c8ec/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f74fc9b22d7f39e36d0cbf80f5c06958c516c8ec",
        "patch": "@@ -1317,7 +1317,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n bool CScriptCheck::operator()() const {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     if (!VerifyScript(scriptSig, scriptPubKey, *ptxTo, nIn, nFlags))\n-        return error(\"CScriptCheck() : %s VerifySignature failed\", ptxTo->GetHash().ToString());\n+        return error(\"CScriptCheck() : %s:%d VerifySignature failed\", ptxTo->GetHash().ToString(), nIn);\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "5ad450a65ad2b0e7760d77816800bd51826ed175",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWQ0NTBhNjVhZDJiMGU3NzYwZDc3ODE2ODAwYmQ1MTgyNmVkMTc1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-01T20:47:33Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-01T20:47:33Z"
      },
      "message": "travis: If the comparison-tool fails, dump the tail of the debug log\n\nThe entire debug log would be huge, and could cause issues for automated tools\nlike travis. Printing 200 lines is an initial guess at a reasonable number,\nmore may be required.",
      "tree": {
        "sha": "d66ecc6dfa821a2e5186832d14d9d6b62e766440",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d66ecc6dfa821a2e5186832d14d9d6b62e766440"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ad450a65ad2b0e7760d77816800bd51826ed175",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ad450a65ad2b0e7760d77816800bd51826ed175",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ad450a65ad2b0e7760d77816800bd51826ed175",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ad450a65ad2b0e7760d77816800bd51826ed175/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fbccda8d0d5ccfeef46e10253315c5c6977817c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fbccda8d0d5ccfeef46e10253315c5c6977817c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fbccda8d0d5ccfeef46e10253315c5c6977817c"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "210fc3c42f7b29f687164598d40f4d05085a7951",
        "filename": "qa/pull-tester/run-bitcoind-for-test.sh.in",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ad450a65ad2b0e7760d77816800bd51826ed175/qa/pull-tester/run-bitcoind-for-test.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ad450a65ad2b0e7760d77816800bd51826ed175/qa/pull-tester/run-bitcoind-for-test.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/run-bitcoind-for-test.sh.in?ref=5ad450a65ad2b0e7760d77816800bd51826ed175",
        "patch": "@@ -29,4 +29,8 @@ fi\n kill $BITCOIND && wait $BITCOIND\n \n # timeout returns 124 on timeout, otherwise the return value of the child\n+\n+# If $RETURN is not 0, the test failed. Dump the tail of the debug log.\n+if [ $RETURN -ne 0 ]; then tail -n 200 $DATADIR/regtest/debug.log; fi\n+\n exit $RETURN"
      }
    ]
  },
  {
    "sha": "35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNWVhYTZiNDU3M2UwNmFjOGNjNzU3ZDZmZTdlMmVmM2ViYjg0NzNm",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-10-01T22:15:18Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-10-01T22:15:18Z"
      },
      "message": "Merge pull request #5024 from gavinandresen/osx_sign_fix\n\nKeep symlinks when copying into .app bundle",
      "tree": {
        "sha": "63445b219371e4d41948a609484755ea027c5872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/63445b219371e4d41948a609484755ea027c5872"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fbccda8d0d5ccfeef46e10253315c5c6977817c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fbccda8d0d5ccfeef46e10253315c5c6977817c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fbccda8d0d5ccfeef46e10253315c5c6977817c"
      },
      {
        "sha": "965c306d6d6ee3695dc50615a87e25c248c41a89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/965c306d6d6ee3695dc50615a87e25c248c41a89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/965c306d6d6ee3695dc50615a87e25c248c41a89"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "8f826ace09b5f48aa4ba5f78a107434dc53f78a1",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f",
        "patch": "@@ -292,7 +292,7 @@ def copyFramework(framework, path, verbose):\n         fromResourcesDir = framework.sourceResourcesDirectory\n         if os.path.exists(fromResourcesDir):\n             toResourcesDir = os.path.join(path, framework.destinationResourcesDirectory)\n-            shutil.copytree(fromResourcesDir, toResourcesDir)\n+            shutil.copytree(fromResourcesDir, toResourcesDir, symlinks=True)\n             if verbose >= 3:\n                 print \"Copied resources:\", fromResourcesDir\n                 print \" to:\", toResourcesDir\n@@ -301,7 +301,7 @@ def copyFramework(framework, path, verbose):\n             fromContentsDir = framework.sourceContentsDirectory\n         if os.path.exists(fromContentsDir):\n             toContentsDir = os.path.join(path, framework.destinationVersionContentsDirectory)\n-            shutil.copytree(fromContentsDir, toContentsDir)\n+            shutil.copytree(fromContentsDir, toContentsDir, symlinks=True)\n             contentslinkfrom = os.path.join(path, framework.destinationContentsDirectory)\n             if verbose >= 3:\n                 print \"Copied Contents:\", fromContentsDir\n@@ -310,7 +310,7 @@ def copyFramework(framework, path, verbose):\n         qtMenuNibSourcePath = os.path.join(framework.frameworkDirectory, \"Resources\", \"qt_menu.nib\")\n         qtMenuNibDestinationPath = os.path.join(path, \"Contents\", \"Resources\", \"qt_menu.nib\")\n         if os.path.exists(qtMenuNibSourcePath) and not os.path.exists(qtMenuNibDestinationPath):\n-            shutil.copytree(qtMenuNibSourcePath, qtMenuNibDestinationPath)\n+            shutil.copytree(qtMenuNibSourcePath, qtMenuNibDestinationPath, symlinks=True)\n             if verbose >= 3:\n                 print \"Copied for libQtGui:\", qtMenuNibSourcePath\n                 print \" to:\", qtMenuNibDestinationPath\n@@ -584,7 +584,7 @@ if verbose >= 3:\n     print app_bundle, \"->\", target\n \n os.mkdir(\"dist\")\n-shutil.copytree(app_bundle, target)\n+shutil.copytree(app_bundle, target, symlinks=True)\n \n applicationBundle = ApplicationBundleInfo(target)\n \n@@ -671,7 +671,7 @@ for p in config.add_resources:\n     if verbose >= 3:\n         print p, \"->\", t\n     if os.path.isdir(p):\n-        shutil.copytree(p, t)\n+        shutil.copytree(p, t, symlinks=True)\n     else:\n         shutil.copy2(p, t)\n "
      }
    ]
  },
  {
    "sha": "9fedafba4b903d7f3af044eb86dc313856e40b08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmVkYWZiYTRiOTAzZDdmM2FmMDQ0ZWI4NmRjMzEzODU2ZTQwYjA4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-09-29T19:26:31Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-01T23:26:29Z"
      },
      "message": "build: Fix OSX build when using Homebrew and qt5\n\nQt5 is bottled, so configure won't find it without some help. Use\nbrew to find out its prefix.\n\nAlso, qt5 added the host_bins variable to pkg-config, use it.",
      "tree": {
        "sha": "0418434db355a9318ce66234a13ddb14f510f6c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0418434db355a9318ce66234a13ddb14f510f6c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fedafba4b903d7f3af044eb86dc313856e40b08",
      "comment_count": 3,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fedafba4b903d7f3af044eb86dc313856e40b08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fedafba4b903d7f3af044eb86dc313856e40b08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fedafba4b903d7f3af044eb86dc313856e40b08/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 26,
      "deletions": 6
    },
    "files": [
      {
        "sha": "71b1484894ca1236c2c3282c99a1ee268d3b4f4e",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fedafba4b903d7f3af044eb86dc313856e40b08/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fedafba4b903d7f3af044eb86dc313856e40b08/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=9fedafba4b903d7f3af044eb86dc313856e40b08",
        "patch": "@@ -152,6 +152,13 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   fi\n   CPPFLAGS=$TEMP_CPPFLAGS\n   ])\n+\n+  if test x$use_pkgconfig$qt_bin_path = xyes; then\n+    if test x$bitcoin_qt_got_major_vers = x5; then\n+      qt_bin_path=\"`$PKG_CONFIG --variable=host_bins Qt5Core 2>/dev/null`\"\n+    fi\n+  fi\n+\n   BITCOIN_QT_PATH_PROGS([MOC], [moc-qt${bitcoin_qt_got_major_vers} moc${bitcoin_qt_got_major_vers} moc], $qt_bin_path)\n   BITCOIN_QT_PATH_PROGS([UIC], [uic-qt${bitcoin_qt_got_major_vers} uic${bitcoin_qt_got_major_vers} uic], $qt_bin_path)\n   BITCOIN_QT_PATH_PROGS([RCC], [rcc-qt${bitcoin_qt_got_major_vers} rcc${bitcoin_qt_got_major_vers} rcc], $qt_bin_path)"
      },
      {
        "sha": "abf9f39e65f015e928f328040b3a00cc585bdff1",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 19,
        "deletions": 6,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fedafba4b903d7f3af044eb86dc313856e40b08/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fedafba4b903d7f3af044eb86dc313856e40b08/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=9fedafba4b903d7f3af044eb86dc313856e40b08",
        "patch": "@@ -240,12 +240,25 @@ case $host in\n \n        AC_CHECK_PROG([BREW],brew, brew)\n        if test x$BREW = xbrew; then\n-         dnl add default homebrew paths\n-         openssl_prefix=`$BREW --prefix openssl`\n-         bdb_prefix=`$BREW --prefix berkeley-db4`\n-         export PKG_CONFIG_PATH=\"$openssl_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n-         CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"\n-         LIBS=\"$LIBS -L$bdb_prefix/lib\"\n+         dnl These Homebrew packages may be bottled, meaning that they won't be found\n+         dnl in expected paths because they may conflict with system files. Ask\n+         dnl Homebrew where each one is located, then adjust paths accordingly.\n+         dnl It's safe to add these paths even if the functionality is disabled by\n+         dnl the user (--without-wallet or --without-gui for example).\n+\n+         openssl_prefix=`$BREW --prefix openssl 2>/dev/null`\n+         bdb_prefix=`$BREW --prefix berkeley-db4 2>/dev/null`\n+         qt5_prefix=`$BREW --prefix qt5 2>/dev/null`\n+         if test x$openssl_prefix != x; then\n+           export PKG_CONFIG_PATH=\"$openssl_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+         fi\n+         if test x$bdb_prefix != x; then\n+           CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"\n+           LIBS=\"$LIBS -L$bdb_prefix/lib\"\n+         fi\n+         if test x$qt5_prefix != x; then\n+           export PKG_CONFIG_PATH=\"$qt5_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+         fi\n        fi\n      else\n        case $build_os in"
      }
    ]
  },
  {
    "sha": "dd367ff8c93c2f9e112a324f5cd737c7fa7a2ffa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDM2N2ZmOGM5M2MyZjllMTEyYTMyNGY1Y2Q3MzdjN2ZhN2EyZmZh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-01T23:22:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-01T23:26:29Z"
      },
      "message": "build: macdeploy: filter out irrelevant qt5 frameworks and dylibs",
      "tree": {
        "sha": "96fcbbeb24ac667d24c414efcc77c880f98278b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/96fcbbeb24ac667d24c414efcc77c880f98278b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd367ff8c93c2f9e112a324f5cd737c7fa7a2ffa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd367ff8c93c2f9e112a324f5cd737c7fa7a2ffa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd367ff8c93c2f9e112a324f5cd737c7fa7a2ffa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd367ff8c93c2f9e112a324f5cd737c7fa7a2ffa/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fedafba4b903d7f3af044eb86dc313856e40b08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fedafba4b903d7f3af044eb86dc313856e40b08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fedafba4b903d7f3af044eb86dc313856e40b08"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 23,
      "deletions": 3
    },
    "files": [
      {
        "sha": "541136001fceec61ab47277979332e620468ac74",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 23,
        "deletions": 3,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd367ff8c93c2f9e112a324f5cd737c7fa7a2ffa/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd367ff8c93c2f9e112a324f5cd737c7fa7a2ffa/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=dd367ff8c93c2f9e112a324f5cd737c7fa7a2ffa",
        "patch": "@@ -393,15 +393,31 @@ def deployPlugins(appBundleInfo, deploymentInfo, strip, verbose):\n             # Deploy the script plugins only if QtScript is in use\n             if not deploymentInfo.usesFramework(\"QtScript\"):\n                 continue\n-        elif pluginDirectory == \"qmltooling\":\n+        elif pluginDirectory == \"qmltooling\" or pluginDirectory == \"qml1tooling\":\n             # Deploy the qml plugins only if QtDeclarative is in use\n             if not deploymentInfo.usesFramework(\"QtDeclarative\"):\n                 continue\n         elif pluginDirectory == \"bearer\":\n             # Deploy the bearer plugins only if QtNetwork is in use\n             if not deploymentInfo.usesFramework(\"QtNetwork\"):\n                 continue\n-        \n+        elif pluginDirectory == \"position\":\n+            # Deploy the position plugins only if QtPositioning is in use\n+            if not deploymentInfo.usesFramework(\"QtPositioning\"):\n+                continue\n+        elif pluginDirectory == \"sensors\" or pluginDirectory == \"sensorgestures\":\n+            # Deploy the sensor plugins only if QtSensors is in use\n+            if not deploymentInfo.usesFramework(\"QtSensors\"):\n+                continue\n+        elif pluginDirectory == \"audio\" or pluginDirectory == \"playlistformats\":\n+            # Deploy the audio plugins only if QtMultimedia is in use\n+            if not deploymentInfo.usesFramework(\"QtMultimedia\"):\n+                continue\n+        elif pluginDirectory == \"mediaservice\":\n+            # Deploy the mediaservice plugins only if QtMultimediaWidgets is in use\n+            if not deploymentInfo.usesFramework(\"QtMultimediaWidgets\"):\n+                continue\n+\n         for pluginName in filenames:\n             pluginPath = os.path.join(pluginDirectory, pluginName)\n             if pluginName.endswith(\"_debug.dylib\"):\n@@ -419,7 +435,11 @@ def deployPlugins(appBundleInfo, deploymentInfo, strip, verbose):\n                 # Deploy the opengl graphicssystem plugin only if QtOpenGL is in use\n                 if not deploymentInfo.usesFramework(\"QtOpenGL\"):\n                     continue\n-            \n+            elif pluginPath == \"accessible/libqtaccessiblequick.dylib\":\n+                # Deploy the accessible qtquick plugin only if QtQuick is in use\n+                if not deploymentInfo.usesFramework(\"QtQuick\"):\n+                    continue\n+\n             plugins.append((pluginDirectory, pluginName))\n     \n     for pluginDirectory, pluginName in plugins:"
      }
    ]
  },
  {
    "sha": "0f78a0a2eb2e19e0d41b8f913f15358886cd6238",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjc4YTBhMmViMmUxOWUwZDQxYjhmOTEzZjE1MzU4ODg2Y2Q2MjM4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-02T01:19:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-02T01:55:33Z"
      },
      "message": "Upgrade comparison tool further",
      "tree": {
        "sha": "ef7052c21a30fd17b202f63c4383e3065abb7c45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef7052c21a30fd17b202f63c4383e3065abb7c45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f78a0a2eb2e19e0d41b8f913f15358886cd6238",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f78a0a2eb2e19e0d41b8f913f15358886cd6238",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f78a0a2eb2e19e0d41b8f913f15358886cd6238",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f78a0a2eb2e19e0d41b8f913f15358886cd6238/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fbccda8d0d5ccfeef46e10253315c5c6977817c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fbccda8d0d5ccfeef46e10253315c5c6977817c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fbccda8d0d5ccfeef46e10253315c5c6977817c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4c40f8b12302980a7a4ea14d14fdcb5451e20fac",
        "filename": "depends/packages/native_comparisontool.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f78a0a2eb2e19e0d41b8f913f15358886cd6238/depends/packages/native_comparisontool.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f78a0a2eb2e19e0d41b8f913f15358886cd6238/depends/packages/native_comparisontool.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_comparisontool.mk?ref=0f78a0a2eb2e19e0d41b8f913f15358886cd6238",
        "patch": "@@ -1,8 +1,8 @@\n package=native_comparisontool\n-$(package)_version=adfd3de7\n-$(package)_download_path=https://github.com/TheBlueMatt/test-scripts/raw/10222bfdace65a0c5f3bd4a766eeb6b3a8b869fb/\n+$(package)_version=5caed78\n+$(package)_download_path=https://github.com/TheBlueMatt/test-scripts/raw/2d76ce92d68e6746988adde731318605a70e252c\n $(package)_file_name=pull-tests-$($(package)_version).jar\n-$(package)_sha256_hash=fd2282b112e35f339dbe3729b08a04834ad719f8c9c10eeec1178465e6d36a18\n+$(package)_sha256_hash=b55a98828b17060e327c5dabe5e4631898f422c0cba07c46170930a9eaf5e7c0\n $(package)_install_dirname=BitcoindComparisonTool_jar\n $(package)_install_filename=BitcoindComparisonTool.jar\n "
      }
    ]
  },
  {
    "sha": "471d38b01534dd786d7d3dc7a62809755c3418ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzFkMzhiMDE1MzRkZDc4NmQ3ZDNkYzdhNjI4MDk3NTVjMzQxOGVk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-02T02:28:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-02T02:29:01Z"
      },
      "message": "Merge pull request #4980\n\n20a11ff minor variable init changes in init.cpp (Philip Kaufmann)",
      "tree": {
        "sha": "49449b3489acb24e660eaf162493e94e574e8f3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49449b3489acb24e660eaf162493e94e574e8f3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/471d38b01534dd786d7d3dc7a62809755c3418ed",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJULLhtAAoJEFeJbS/48LZX6d0MAIYA/pRVTeavzYHk9sWGE6Pl\nItW2jUU3w2z2I3cuoqjPXJdQaKCErFIvr4sJyJtgyF8ISeiYwgIFK0XXOvy1baPU\ndKcaBcuL8fO87YY6vRwWfDAALSHykr+649s9K3ja2YpF/5AirEoQAz63mv41Gs6L\n+8mqAJFBhsTVOf8fo4Ugj3egeN4mucF8w+zAjcSE8RIANps/hfPanIw7MkcFOLB1\nBpA6NNNfFIb8bBj4DUeM0ks8y2yXEAFPWyaxxklPb3slYRMbpU/Is/nph3bVH1fx\nNvA+ttl4xx19W9VZOkI8ecxjJPPaXwY5P8aRQff8tQVjxxCPhemIsbrmvcpWozwE\nMM3Ien79J8m5nuF1wYZZRu4s1A+Q/yg6FhdjsvEDXgKW9zxDr+9dFZFUF94oG5MH\njr3nmejqtmaWOjXJ6de6+2n9Dczl22me16YLfw1u2d3VuXqpGIh2PJ8U8zfjvj3a\nL5y8t7HlSC+clngLE4rNTMwx7f75Sm1qamQ9jKCQmg==\n=im+W\n-----END PGP SIGNATURE-----",
        "payload": "tree 49449b3489acb24e660eaf162493e94e574e8f3f\nparent 35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f\nparent 20a11ffabf0c6936ab2dbb7cfda676996318650a\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1412216915 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1412216941 +0200\n\nMerge pull request #4980\n\n20a11ff minor variable init changes in init.cpp (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/471d38b01534dd786d7d3dc7a62809755c3418ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/471d38b01534dd786d7d3dc7a62809755c3418ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/471d38b01534dd786d7d3dc7a62809755c3418ed/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35eaa6b4573e06ac8cc757d6fe7e2ef3ebb8473f"
      },
      {
        "sha": "20a11ffabf0c6936ab2dbb7cfda676996318650a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20a11ffabf0c6936ab2dbb7cfda676996318650a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20a11ffabf0c6936ab2dbb7cfda676996318650a"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "980c589b293e580e0c4415f14a5b22a69dbb26da",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/471d38b01534dd786d7d3dc7a62809755c3418ed/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/471d38b01534dd786d7d3dc7a62809755c3418ed/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=471d38b01534dd786d7d3dc7a62809755c3418ed",
        "patch": "@@ -45,7 +45,7 @@ using namespace boost;\n using namespace std;\n \n #ifdef ENABLE_WALLET\n-CWallet* pwalletMain;\n+CWallet* pwalletMain = NULL;\n #endif\n \n #ifdef WIN32\n@@ -109,7 +109,7 @@ bool ShutdownRequested()\n     return fRequestShutdown;\n }\n \n-static CCoinsViewDB *pcoinsdbview;\n+static CCoinsViewDB *pcoinsdbview = NULL;\n \n void Shutdown()\n {\n@@ -165,8 +165,8 @@ void Shutdown()\n #endif\n     UnregisterAllWallets();\n #ifdef ENABLE_WALLET\n-    if (pwalletMain)\n-        delete pwalletMain;\n+    delete pwalletMain;\n+    pwalletMain = NULL;\n #endif\n     LogPrintf(\"%s: done\\n\", __func__);\n }\n@@ -701,6 +701,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     fIsBareMultisigStd = GetArg(\"-permitbaremultisig\", true) != 0;\n \n     // ********************************************************* Step 4: application initialization: dir lock, daemonize, pidfile, debug log\n+\n     // Sanity check\n     if (!InitSanityCheck())\n         return InitError(_(\"Initialization sanity check failed. Bitcoin Core is shutting down.\"));"
      }
    ]
  },
  {
    "sha": "76c171033ccca628d3e563d898b38d74f3e51f5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmMxNzEwMzNjY2NhNjI4ZDNlNTYzZDg5OGIzOGQ3NGYzZTUxZjVj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-02T04:05:02Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-02T04:10:19Z"
      },
      "message": "Merge pull request #4926\n\n584a358 Do merkle root and txid duplicates check simultaneously (Pieter Wuille)",
      "tree": {
        "sha": "10d2b0c4bf4cacdfadd13cbd46e1112c75ed78d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10d2b0c4bf4cacdfadd13cbd46e1112c75ed78d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76c171033ccca628d3e563d898b38d74f3e51f5c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJULNArAAoJEFeJbS/48LZXvTAL/3ogyvvPpr8cUG+wcF1+X5ot\nxIZoF87PMGmK3gThH7rFYu2otzUnP1C/dtMXIZMzuloLSgOFX5If5aBC14R5Exs4\nWCmAu8RNOJ0akCx6UYaprTvHX5+6bOKB1TGjH9aKbrFL9L0NUA0pWui2ItxWuNYC\nfawEBiDb6S7gEFydPsyuqZotRdZRPyll8JoNOJUDgehc2/2v7ZdNuDmQXYsLQaVR\nJLwVZxZfkqXfjeiQ90E4GQXjkoWrkVkbT71H9U+n1w3vF2kCGDrZlo6PpQtK1Kjs\nJ2Ms6F7HNT5VhbaKkWKsUzXulV2zZ88TVprHWfhbH/oKT+hNIF4eX56m6Ckz6Vux\nZimh/PSsUVLQ1gvafkdQ8dRDEWNNn+dT+/RrLj10EogEg7LkVYOYR3fKqiz4+1qT\nXSdHcSgEQu/DfHZChfWf9Ir+sRB5EgP5wyW+iZERZ8U7HwE2tfbxiLv44ZnbXPyK\n/y38gnJ/Ho9Z8IAwSXw/txkk2ErTPxq24Xca5yR+fQ==\n=Fwa4\n-----END PGP SIGNATURE-----",
        "payload": "tree 10d2b0c4bf4cacdfadd13cbd46e1112c75ed78d2\nparent 471d38b01534dd786d7d3dc7a62809755c3418ed\nparent 584a358997e52a87e8c5402269c7fb3784ed2065\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1412222702 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1412223019 +0200\n\nMerge pull request #4926\n\n584a358 Do merkle root and txid duplicates check simultaneously (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76c171033ccca628d3e563d898b38d74f3e51f5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76c171033ccca628d3e563d898b38d74f3e51f5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76c171033ccca628d3e563d898b38d74f3e51f5c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "471d38b01534dd786d7d3dc7a62809755c3418ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/471d38b01534dd786d7d3dc7a62809755c3418ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/471d38b01534dd786d7d3dc7a62809755c3418ed"
      },
      {
        "sha": "584a358997e52a87e8c5402269c7fb3784ed2065",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/584a358997e52a87e8c5402269c7fb3784ed2065",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/584a358997e52a87e8c5402269c7fb3784ed2065"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 57,
      "deletions": 17
    },
    "files": [
      {
        "sha": "380b1c38e01768ea31dab44eeffb05990349f1c1",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 8,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c171033ccca628d3e563d898b38d74f3e51f5c/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c171033ccca628d3e563d898b38d74f3e51f5c/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=76c171033ccca628d3e563d898b38d74f3e51f5c",
        "patch": "@@ -224,29 +224,66 @@ uint256 CBlockHeader::GetHash() const\n     return Hash(BEGIN(nVersion), END(nNonce));\n }\n \n-uint256 CBlock::BuildMerkleTree() const\n+uint256 CBlock::BuildMerkleTree(bool* fMutated) const\n {\n-    // WARNING! If you're reading this because you're learning about crypto\n-    // and/or designing a new system that will use merkle trees, keep in mind\n-    // that the following merkle tree algorithm has a serious flaw related to\n-    // duplicate txids, resulting in a vulnerability. (CVE-2012-2459) Bitcoin\n-    // has since worked around the flaw, but for new applications you should\n-    // use something different; don't just copy-and-paste this code without\n-    // understanding the problem first.\n+    /* WARNING! If you're reading this because you're learning about crypto\n+       and/or designing a new system that will use merkle trees, keep in mind\n+       that the following merkle tree algorithm has a serious flaw related to\n+       duplicate txids, resulting in a vulnerability (CVE-2012-2459).\n+\n+       The reason is that if the number of hashes in the list at a given time\n+       is odd, the last one is duplicated before computing the next level (which\n+       is unusual in Merkle trees). This results in certain sequences of\n+       transactions leading to the same merkle root. For example, these two\n+       trees:\n+\n+                    A               A\n+                  /  \\            /   \\\n+                B     C         B       C\n+               / \\    |        / \\     / \\\n+              D   E   F       D   E   F   F\n+             / \\ / \\ / \\     / \\ / \\ / \\ / \\\n+             1 2 3 4 5 6     1 2 3 4 5 6 5 6\n+\n+       for transaction lists [1,2,3,4,5,6] and [1,2,3,4,5,6,5,6] (where 5 and\n+       6 are repeated) result in the same root hash A (because the hash of both\n+       of (F) and (F,F) is C).\n+\n+       The vulnerability results from being able to send a block with such a\n+       transaction list, with the same merkle root, and the same block hash as\n+       the original without duplication, resulting in failed validation. If the\n+       receiving node proceeds to mark that block as permanently invalid\n+       however, it will fail to accept further unmodified (and thus potentially\n+       valid) versions of the same block. We defend against this by detecting\n+       the case where we would hash two identical hashes at the end of the list\n+       together, and treating that identically to the block having an invalid\n+       merkle root. Assuming no double-SHA256 collisions, this will detect all\n+       known ways of changing the transactions without affecting the merkle\n+       root.\n+    */\n     vMerkleTree.clear();\n+    vMerkleTree.reserve(vtx.size() * 2 + 16); // Safe upper bound for the number of total nodes.\n     BOOST_FOREACH(const CTransaction& tx, vtx)\n         vMerkleTree.push_back(tx.GetHash());\n     int j = 0;\n+    bool mutated = false;\n     for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n     {\n         for (int i = 0; i < nSize; i += 2)\n         {\n             int i2 = std::min(i+1, nSize-1);\n+            if (i2 == i + 1 && i2 + 1 == nSize && vMerkleTree[j+i] == vMerkleTree[j+i2]) {\n+                // Two identical hashes at the end of the list at a particular level.\n+                mutated = true;\n+            }\n             vMerkleTree.push_back(Hash(BEGIN(vMerkleTree[j+i]),  END(vMerkleTree[j+i]),\n                                        BEGIN(vMerkleTree[j+i2]), END(vMerkleTree[j+i2])));\n         }\n         j += nSize;\n     }\n+    if (fMutated) {\n+        *fMutated = mutated;\n+    }\n     return (vMerkleTree.empty() ? 0 : vMerkleTree.back());\n }\n "
      },
      {
        "sha": "a348293578b5195838da042604467e32e51de380",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c171033ccca628d3e563d898b38d74f3e51f5c/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c171033ccca628d3e563d898b38d74f3e51f5c/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=76c171033ccca628d3e563d898b38d74f3e51f5c",
        "patch": "@@ -529,7 +529,11 @@ class CBlock : public CBlockHeader\n         return block;\n     }\n \n-    uint256 BuildMerkleTree() const;\n+    // Build the in-memory merkle tree for this block and return the merkle root.\n+    // If non-NULL, *mutated is set to whether mutation was detected in the merkle\n+    // tree (a duplication of transactions in the block leading to an identical\n+    // merkle root).\n+    uint256 BuildMerkleTree(bool* mutated = NULL) const;\n \n     std::vector<uint256> GetMerkleBranch(int nIndex) const;\n     static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex);"
      },
      {
        "sha": "32393e5e036f3b56b5cc6a6e9a24e13709a50466",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76c171033ccca628d3e563d898b38d74f3e51f5c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76c171033ccca628d3e563d898b38d74f3e51f5c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=76c171033ccca628d3e563d898b38d74f3e51f5c",
        "patch": "@@ -2236,13 +2236,12 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n         if (!CheckTransaction(tx, state))\n             return error(\"CheckBlock() : CheckTransaction failed\");\n \n-    // Check for duplicate txids. This is caught by ConnectInputs(),\n-    // but catching it earlier avoids a potential DoS attack:\n-    set<uint256> uniqueTx;\n-    BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        uniqueTx.insert(tx.GetHash());\n-    }\n-    if (uniqueTx.size() != block.vtx.size())\n+    // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n+    // of transactions in a block without affecting the merkle root of a block,\n+    // while still invalidating it.\n+    bool mutated;\n+    uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n+    if (mutated)\n         return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"),\n                          REJECT_INVALID, \"bad-txns-duplicate\", true);\n \n@@ -2256,7 +2255,7 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n                          REJECT_INVALID, \"bad-blk-sigops\", true);\n \n     // Check merkle root\n-    if (fCheckMerkleRoot && block.hashMerkleRoot != block.BuildMerkleTree())\n+    if (fCheckMerkleRoot && block.hashMerkleRoot != hashMerkleRoot2)\n         return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"),\n                          REJECT_INVALID, \"bad-txnmrklroot\", true);\n "
      }
    ]
  },
  {
    "sha": "90aa73e900e3ca944cf2373d4e0504d3a9efb697",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGFhNzNlOTAwZTNjYTk0NGNmMjM3M2Q0ZTA1MDRkM2E5ZWZiNjk3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T06:29:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T06:29:23Z"
      },
      "message": "Merge pull request #5027\n\n0f78a0a Upgrade comparison tool further (Pieter Wuille)",
      "tree": {
        "sha": "cf5f9632860437131022a80492d879da42dd47b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf5f9632860437131022a80492d879da42dd47b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90aa73e900e3ca944cf2373d4e0504d3a9efb697",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULPDDAAoJEHSBCwEjRsmm0gAH/3iJoFBbYMhaXHgc6r+WYpzU\n2TCeVXSOrgEbkpIume5suAY0clKerSiROJEJhNCFArMVbtpGmJrbyuhICJ5WIU5S\nWt4HbiO6s1b2HDJIAqI6gemziDSH5sdjLkTX357dqkfHce0f0M6yTOL93eedvKNq\nYJiAEzYvLc40wJyPc/9d4u2hnR1UaE0INIxcg9X6+thz0NOX5YFqPHxkmLjZCM6h\n75LzTlcBiG0+sLwHSZ2WlYvaNdpE2L4hyMwRzr4QwE7dhauUeeafONeUDx5kG/k6\np4JSHZvl4nhcATZlHfHx23hsovQ9Xv3xElkhLts3J9qgwRrbonp0/PoQWtUW3Vg=\n=NVb3\n-----END PGP SIGNATURE-----",
        "payload": "tree cf5f9632860437131022a80492d879da42dd47b4\nparent 76c171033ccca628d3e563d898b38d74f3e51f5c\nparent 0f78a0a2eb2e19e0d41b8f913f15358886cd6238\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412231354 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412231363 +0200\n\nMerge pull request #5027\n\n0f78a0a Upgrade comparison tool further (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90aa73e900e3ca944cf2373d4e0504d3a9efb697",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90aa73e900e3ca944cf2373d4e0504d3a9efb697",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90aa73e900e3ca944cf2373d4e0504d3a9efb697/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76c171033ccca628d3e563d898b38d74f3e51f5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76c171033ccca628d3e563d898b38d74f3e51f5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76c171033ccca628d3e563d898b38d74f3e51f5c"
      },
      {
        "sha": "0f78a0a2eb2e19e0d41b8f913f15358886cd6238",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f78a0a2eb2e19e0d41b8f913f15358886cd6238",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f78a0a2eb2e19e0d41b8f913f15358886cd6238"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4c40f8b12302980a7a4ea14d14fdcb5451e20fac",
        "filename": "depends/packages/native_comparisontool.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90aa73e900e3ca944cf2373d4e0504d3a9efb697/depends/packages/native_comparisontool.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90aa73e900e3ca944cf2373d4e0504d3a9efb697/depends/packages/native_comparisontool.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_comparisontool.mk?ref=90aa73e900e3ca944cf2373d4e0504d3a9efb697",
        "patch": "@@ -1,8 +1,8 @@\n package=native_comparisontool\n-$(package)_version=adfd3de7\n-$(package)_download_path=https://github.com/TheBlueMatt/test-scripts/raw/10222bfdace65a0c5f3bd4a766eeb6b3a8b869fb/\n+$(package)_version=5caed78\n+$(package)_download_path=https://github.com/TheBlueMatt/test-scripts/raw/2d76ce92d68e6746988adde731318605a70e252c\n $(package)_file_name=pull-tests-$($(package)_version).jar\n-$(package)_sha256_hash=fd2282b112e35f339dbe3729b08a04834ad719f8c9c10eeec1178465e6d36a18\n+$(package)_sha256_hash=b55a98828b17060e327c5dabe5e4631898f422c0cba07c46170930a9eaf5e7c0\n $(package)_install_dirname=BitcoindComparisonTool_jar\n $(package)_install_filename=BitcoindComparisonTool.jar\n "
      }
    ]
  },
  {
    "sha": "00eef5d6e9b08b173492599ec41c7feb445e2139",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMGVlZjVkNmU5YjA4YjE3MzQ5MjU5OWVjNDFjN2ZlYjQ0NWUyMTM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T06:35:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T06:44:08Z"
      },
      "message": "Merge pull request #5017\n\nf74fc9b Print input index when signature validation fails, to aid debugging. (Mark Friedenbach)\n217a5c9 When transaction outputs exceed inputs, show the offending amounts so as to aid debugging. (Mark Friedenbach)",
      "tree": {
        "sha": "28fd5f16cb04d75045f784288d4d64683f4393a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28fd5f16cb04d75045f784288d4d64683f4393a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00eef5d6e9b08b173492599ec41c7feb445e2139",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULPQ4AAoJEHSBCwEjRsmmxOYH/0xrOyZCOqRLZZ+PHfqySdH3\n3EyENVFSxuQMMz9ItBo0qirGKiHzvARWIc9tSdjsbcBzeyEu4iZwUVEJFilG/2a4\ne5Nbg0MZ0sjeF6cS2tKPobQlbeEC8n3ZLcvsxVIBxW6PE/0U5EmC5I6qEd1ajMXU\nhQuLla8jBmCWhV3ZiheIl7yJFugBRlL9by+r+rEKAg/6OwLVx6R4vSE4uWktT39d\nSEwvg/mQJk9hTKHT3H+lkOeIyH7GfUFeY87NH2NgD4rHhZyhejj+yF5tMW7dxyfW\ngIIhWRluAk7upszSDmns/+NLonaI7qmWuJjKMGMBE3jIlPCG/veS1lgpwpK/tV4=\n=5TVG\n-----END PGP SIGNATURE-----",
        "payload": "tree 28fd5f16cb04d75045f784288d4d64683f4393a5\nparent 90aa73e900e3ca944cf2373d4e0504d3a9efb697\nparent f74fc9b22d7f39e36d0cbf80f5c06958c516c8ec\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412231712 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412232248 +0200\n\nMerge pull request #5017\n\nf74fc9b Print input index when signature validation fails, to aid debugging. (Mark Friedenbach)\n217a5c9 When transaction outputs exceed inputs, show the offending amounts so as to aid debugging. (Mark Friedenbach)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00eef5d6e9b08b173492599ec41c7feb445e2139",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00eef5d6e9b08b173492599ec41c7feb445e2139",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00eef5d6e9b08b173492599ec41c7feb445e2139/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90aa73e900e3ca944cf2373d4e0504d3a9efb697",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90aa73e900e3ca944cf2373d4e0504d3a9efb697",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90aa73e900e3ca944cf2373d4e0504d3a9efb697"
      },
      {
        "sha": "f74fc9b22d7f39e36d0cbf80f5c06958c516c8ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f74fc9b22d7f39e36d0cbf80f5c06958c516c8ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f74fc9b22d7f39e36d0cbf80f5c06958c516c8ec"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a3e36ff872041c613ecf93ddd700ea0b51b8dfb3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00eef5d6e9b08b173492599ec41c7feb445e2139/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00eef5d6e9b08b173492599ec41c7feb445e2139/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=00eef5d6e9b08b173492599ec41c7feb445e2139",
        "patch": "@@ -17,6 +17,7 @@\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"utilmoneystr.h\"\n \n #include <sstream>\n \n@@ -1316,7 +1317,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n bool CScriptCheck::operator()() const {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     if (!VerifyScript(scriptSig, scriptPubKey, *ptxTo, nIn, nFlags))\n-        return error(\"CScriptCheck() : %s VerifySignature failed\", ptxTo->GetHash().ToString());\n+        return error(\"CScriptCheck() : %s:%d VerifySignature failed\", ptxTo->GetHash().ToString(), nIn);\n     return true;\n }\n \n@@ -1361,7 +1362,8 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         }\n \n         if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs() : %s value in < value out\", tx.GetHash().ToString()),\n+            return state.DoS(100, error(\"CheckInputs() : %s value in (%s) < value out (%s)\",\n+                                        tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n                              REJECT_INVALID, \"bad-txns-in-belowout\");\n \n         // Tally transaction fees"
      }
    ]
  },
  {
    "sha": "3b390723c16d13271ee2675aff013fdd95d39c18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYjM5MDcyM2MxNmQxMzI3MWVlMjY3NWFmZjAxM2ZkZDk1ZDM5YzE4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T07:08:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T07:08:33Z"
      },
      "message": "Merge pull request #5025\n\n5ad450a travis: If the comparison-tool fails, dump the tail of the debug log (Cory Fields)",
      "tree": {
        "sha": "c3d7a2dbb2868954748761161896cc8f02b940b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3d7a2dbb2868954748761161896cc8f02b940b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3b390723c16d13271ee2675aff013fdd95d39c18",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULPnxAAoJEHSBCwEjRsmmMEEH/1gEKASPzczD+7uv37GHPqjz\ndMXpAy4i2oWnWLTeNUVG678CwwZt1Cpgk4ntVFIl6VLFizIU/w4v0kvuknatcEro\nXOGzduD3TQy/HUptNisil7md4tJFRmc/PILZHuPA7CjBwCWl26QUYsN8OM/ga4fd\nHprE2VNIrmdR70BVx3Zepq1RvWaIAmQfwSjLSAaGwuXgWiDWXVvB8fdBj0WWuEoR\nYCV9QH7H2cmDK8z1Gsc51O1EPq/Imy+ZpjrwUgAB2MX3n6SxH/bhon101+YpD9U7\nbZQ8WfPbXpevElLfJF/N7G9ivgc9VwHJqHXRyZG6E8Jl0lS8enKhCrg2M0kpffc=\n=vEa6\n-----END PGP SIGNATURE-----",
        "payload": "tree c3d7a2dbb2868954748761161896cc8f02b940b1\nparent 00eef5d6e9b08b173492599ec41c7feb445e2139\nparent 5ad450a65ad2b0e7760d77816800bd51826ed175\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412233698 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412233713 +0200\n\nMerge pull request #5025\n\n5ad450a travis: If the comparison-tool fails, dump the tail of the debug log (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b390723c16d13271ee2675aff013fdd95d39c18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3b390723c16d13271ee2675aff013fdd95d39c18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b390723c16d13271ee2675aff013fdd95d39c18/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00eef5d6e9b08b173492599ec41c7feb445e2139",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00eef5d6e9b08b173492599ec41c7feb445e2139",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00eef5d6e9b08b173492599ec41c7feb445e2139"
      },
      {
        "sha": "5ad450a65ad2b0e7760d77816800bd51826ed175",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ad450a65ad2b0e7760d77816800bd51826ed175",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ad450a65ad2b0e7760d77816800bd51826ed175"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "210fc3c42f7b29f687164598d40f4d05085a7951",
        "filename": "qa/pull-tester/run-bitcoind-for-test.sh.in",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3b390723c16d13271ee2675aff013fdd95d39c18/qa/pull-tester/run-bitcoind-for-test.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3b390723c16d13271ee2675aff013fdd95d39c18/qa/pull-tester/run-bitcoind-for-test.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/run-bitcoind-for-test.sh.in?ref=3b390723c16d13271ee2675aff013fdd95d39c18",
        "patch": "@@ -29,4 +29,8 @@ fi\n kill $BITCOIND && wait $BITCOIND\n \n # timeout returns 124 on timeout, otherwise the return value of the child\n+\n+# If $RETURN is not 0, the test failed. Dump the tail of the debug log.\n+if [ $RETURN -ne 0 ]; then tail -n 200 $DATADIR/regtest/debug.log; fi\n+\n exit $RETURN"
      }
    ]
  },
  {
    "sha": "ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDUxZTE0NTgzZmJmNmQ1M2Q1YTJiMjJhMGEwZGJlNGE1MWE5YTdk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T07:47:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T07:47:54Z"
      },
      "message": "Merge pull request #4845\n\n4705902 Avoid introducing a virtual into CChainParams (Wladimir J. van der Laan)\n5e2e7fc Suggested corrections on comments, variable names. Also new test case testing the PoW skip in UNITTEST. (SergioDemianLerner)\na25fd6b Switch testing framework from MAIN to new UNITTEST network (SergioDemianLerner)",
      "tree": {
        "sha": "5371fd7c8eaaf0260db119f4d334bf8aab256087",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5371fd7c8eaaf0260db119f4d334bf8aab256087"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULQMqAAoJEHSBCwEjRsmmg2oIAIPYbNoALJx+od2GWWK69D3a\n4GXgb6VBqbZE6EQHSqlidgREbMj3LUjhx/iUUsuQAss4xClLj//eyhFt5TX6Y8to\njxvnjynlrJiu5GTwdsZT9LSZYBpgFSz+oqWeJX4C/p+RQXFB99QKXSvTxnaoiO8D\nLzDn/qFHZjHn1th4B2D2KiVOeEOc+34ZUEr0a8PvYmS2NQ4cgNZDp7GWB1gSrWgC\nrhSZL1bpaAh2k4FxZ0BMLvR6jAKaUykMw9LL5Q9kBUuvcY36dcdw7zBqgxIMPP5Q\nkLVhyhabWxB7+W6UElvFtPROCCYHTB999mENq51VaFrD71yH81DlfH4BxVKwngw=\n=uEi3\n-----END PGP SIGNATURE-----",
        "payload": "tree 5371fd7c8eaaf0260db119f4d334bf8aab256087\nparent 3b390723c16d13271ee2675aff013fdd95d39c18\nparent 470590277782cce2fe73275c74523aef59a51eab\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412236073 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412236074 +0200\n\nMerge pull request #4845\n\n4705902 Avoid introducing a virtual into CChainParams (Wladimir J. van der Laan)\n5e2e7fc Suggested corrections on comments, variable names. Also new test case testing the PoW skip in UNITTEST. (SergioDemianLerner)\na25fd6b Switch testing framework from MAIN to new UNITTEST network (SergioDemianLerner)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3b390723c16d13271ee2675aff013fdd95d39c18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3b390723c16d13271ee2675aff013fdd95d39c18",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3b390723c16d13271ee2675aff013fdd95d39c18"
      },
      {
        "sha": "470590277782cce2fe73275c74523aef59a51eab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/470590277782cce2fe73275c74523aef59a51eab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/470590277782cce2fe73275c74523aef59a51eab"
      }
    ],
    "stats": {
      "total": 375,
      "additions": 371,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d376961996d0da1ec5f265c6d60470dba0ce69cf",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "patch": "@@ -51,6 +51,7 @@ BITCOIN_TESTS =\\\n   test/key_tests.cpp \\\n   test/main_tests.cpp \\\n   test/miner_tests.cpp \\\n+  test/blockv2_tests.cpp \\\n   test/mruset_tests.cpp \\\n   test/multisig_tests.cpp \\\n   test/netbase_tests.cpp \\"
      },
      {
        "sha": "31c67715c87fd3c04828299e7fa0a7eae7e0a41b",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "patch": "@@ -115,6 +115,7 @@ class CMainParams : public CChainParams {\n         fAllowMinDifficultyBlocks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n+        fSkipProofOfWorkCheck = false;\n     }\n };\n static CMainParams mainParams;\n@@ -214,8 +215,46 @@ class CRegTestParams : public CTestNetParams {\n };\n static CRegTestParams regTestParams;\n \n+//\n+// Unit test\n+//\n+class CUnitTestParams : public CMainParams, public CModifiableParams {\n+public:\n+    CUnitTestParams() {\n+        networkID = CBaseChainParams::UNITTEST;\n+        strNetworkID = \"unittest\";\n+        nDefaultPort = 18445;\n+        vFixedSeeds.clear();\n+        vSeeds.clear();  // Regtest mode doesn't have any DNS seeds.\n+\n+        fRequireRPCPassword = false;\n+        fMiningRequiresPeers = false;\n+        fDefaultCheckMemPool = true;\n+        fAllowMinDifficultyBlocks = false;\n+        fMineBlocksOnDemand = true;\n+    }\n+public:\n+    // Published setters to allow changing values in unit test cases\n+    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }\n+    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }\n+    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)  { nRejectBlockOutdatedMajority=anRejectBlockOutdatedMajority; }\n+    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)  { nToCheckBlockUpgradeMajority=anToCheckBlockUpgradeMajority; }\n+    virtual void setDefaultCheckMemPool(bool afDefaultCheckMemPool)  { fDefaultCheckMemPool=afDefaultCheckMemPool; }\n+    virtual void setAllowMinDifficultyBlocks(bool afAllowMinDifficultyBlocks) {  fAllowMinDifficultyBlocks=afAllowMinDifficultyBlocks; }\n+    virtual void setSkipProofOfWorkCheck(bool afSkipProofOfWorkCheck) { fSkipProofOfWorkCheck = afSkipProofOfWorkCheck; }\n+};\n+static CUnitTestParams unitTestParams;\n+\n+\n static CChainParams *pCurrentParams = 0;\n \n+CModifiableParams *ModifiableParams()\n+{\n+   assert(pCurrentParams);\n+   assert(pCurrentParams==&unitTestParams);\n+   return (CModifiableParams*)&unitTestParams;\n+}\n+\n const CChainParams &Params() {\n     assert(pCurrentParams);\n     return *pCurrentParams;\n@@ -229,6 +268,8 @@ CChainParams &Params(CBaseChainParams::Network network) {\n             return testNetParams;\n         case CBaseChainParams::REGTEST:\n             return regTestParams;\n+        case CBaseChainParams::UNITTEST:\n+            return unitTestParams;\n         default:\n             assert(false && \"Unimplemented network\");\n             return mainParams;"
      },
      {
        "sha": "50441a89f3de1868e1657da836e8ad550819e9e1",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "patch": "@@ -61,6 +61,8 @@ class CChainParams\n     bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n     /* Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n+    /* Skip proof-of-work check: allow mining of any difficulty block */\n+    bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n     /* Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n@@ -103,8 +105,27 @@ class CChainParams\n     bool fAllowMinDifficultyBlocks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n+    bool fSkipProofOfWorkCheck;\n };\n \n+/** Modifiable parameters interface is used by test cases to adapt the parameters in order\n+*** to test specific features more easily. Test cases should always restore the previous\n+*** values after finalization.\n+**/\n+\n+class CModifiableParams {\n+public:\n+    // Published setters to allow changing values in unit test cases\n+    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval) =0;\n+    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)=0;\n+    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)=0;\n+    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)=0;\n+    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)=0;\n+    virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks)=0;\n+    virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck)=0;\n+};\n+\n+\n /**\n  * Return the currently selected parameters. This won't change after app startup\n  * outside of the unit tests.\n@@ -114,6 +135,9 @@ const CChainParams &Params();\n /** Return parameters for the given network. */\n CChainParams &Params(CBaseChainParams::Network network);\n \n+/** Get modifyable network parameters (UNITTEST only) */\n+CModifiableParams *ModifiableParams();\n+\n /** Sets the params returned by Params() to those for the given network. */\n void SelectParams(CBaseChainParams::Network network);\n "
      },
      {
        "sha": "e9d63197bd398cff251b3f34eb8297640e53eca5",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "patch": "@@ -57,6 +57,20 @@ class CBaseRegTestParams : public CBaseTestNetParams\n };\n static CBaseRegTestParams regTestParams;\n \n+//\n+// Unit test\n+//\n+class CBaseUnitTestParams : public CBaseMainParams\n+{\n+public:\n+    CBaseUnitTestParams()\n+    {\n+        networkID = CBaseChainParams::UNITTEST;\n+        strDataDir = \"unittest\";\n+    }\n+};\n+static CBaseUnitTestParams unitTestParams;\n+\n static CBaseChainParams* pCurrentBaseParams = 0;\n \n const CBaseChainParams& BaseParams()\n@@ -77,6 +91,9 @@ void SelectBaseParams(CBaseChainParams::Network network)\n     case CBaseChainParams::REGTEST:\n         pCurrentBaseParams = &regTestParams;\n         break;\n+    case CBaseChainParams::UNITTEST:\n+        pCurrentBaseParams = &unitTestParams;\n+        break;\n     default:\n         assert(false && \"Unimplemented network\");\n         return;"
      },
      {
        "sha": "cc154cf5012f1147c0c4351aefe0b166ee2f82de",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "patch": "@@ -19,6 +19,7 @@ class CBaseChainParams\n         MAIN,\n         TESTNET,\n         REGTEST,\n+        UNITTEST,\n \n         MAX_NETWORK_TYPES\n     };"
      },
      {
        "sha": "9a6bc05e63d916ece811fbbe90ebe2b2ab58bfb3",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "patch": "@@ -88,6 +88,8 @@ namespace Checkpoints {\n             return dataTestnet;\n         else if (Params().NetworkID() == CBaseChainParams::MAIN)\n             return data;\n+        else if (Params().NetworkID() == CBaseChainParams::UNITTEST) // UnitTest share the same checkpoints as MAIN\n+            return data;\n         else\n             return dataRegtest;\n     }"
      },
      {
        "sha": "55485c86ff557f0e54bfe1e2691ec90d0979bd96",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "patch": "@@ -2305,7 +2305,8 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n-        if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        if ((!Params().SkipProofOfWorkCheck()) &&\n+           (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n             return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n                              REJECT_INVALID, \"bad-diffbits\");\n "
      },
      {
        "sha": "d50222849cc0c0bc4acfce88a93ecb737b66a462",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "patch": "@@ -81,6 +81,10 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bool fNegative;\n     bool fOverflow;\n     uint256 bnTarget;\n+\n+    if (Params().SkipProofOfWorkCheck())\n+       return true;\n+\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range"
      },
      {
        "sha": "c298c805dae375a5c4e0c2edb35374cbaae7706b",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "patch": "@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that generated keys match test vectors\n@@ -243,7 +243,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     CTxDestination nodest = CNoDestination();\n     BOOST_CHECK(!dummyAddr.Set(nodest));\n \n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that base58 parsing code is robust against a variety of corrupted data"
      },
      {
        "sha": "96c0df5e6b6fbc5cbcd4a3464709e079a90de7a2",
        "filename": "src/test/blockv2_tests.cpp",
        "status": "added",
        "additions": 275,
        "deletions": 0,
        "changes": 275,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/test/blockv2_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/test/blockv2_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockv2_tests.cpp?ref=ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "patch": "@@ -0,0 +1,275 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+// This test cheecks the majority rule which states that after 1000 v2 blocks no new v1 block can be part of that branch.\n+\n+BOOST_AUTO_TEST_SUITE(blockv2_tests)\n+\n+static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n+\n+static void SetEmptyBlock(CBlock * pblock)\n+{\n+    pblock->nVersion = 2;\n+    pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n+    pblock->nNonce = 0;\n+}\n+\n+static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int heightDifference)\n+{\n+    SetEmptyBlock(pblock);\n+\n+    // Add the coinbase\n+    CMutableTransaction txCoinbase(pblock->vtx[0]);\n+\n+    if (addHeight)\n+        txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+heightDifference) << 0);\n+        else\n+        txCoinbase.vin[0].scriptSig = (CScript() << heightDifference << 0); // At least size 2, this is a protocol spec\n+\n+    txCoinbase.vout[0].scriptPubKey = CScript();\n+    pblock->vtx[0] = CTransaction(txCoinbase);\n+    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+}\n+\n+void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n+{\n+    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n+        {\n+            // The RegTest network has a low subsidy halving interval (150) so\n+            // we must recompute the coinbase subsidy if we reach the boundary.\n+            // The unittest network allows modifying this interval. We check it so this\n+            // test can work in any network.\n+\n+            // preserve parent hash\n+            uint256 prevParent = pblock->hashPrevBlock;\n+            delete pblocktemplate;\n+            pblocktemplate = CreateNewBlock(scriptPubKey);\n+            pblock = &pblocktemplate->block; // pointer for convenience\n+            pblock->hashPrevBlock = prevParent;\n+        }\n+}\n+\n+void CheckBlockAddedToBestChainSuccessfully(CBlock *pblock)\n+{\n+    int PreviousHeight;\n+    CValidationState state;\n+\n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n+    BOOST_CHECK(state.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+\n+    // Previous checks do not assure the current best chain has pblock as tip. It could be the case that a because\n+    // of a malfunction in the chain reorganization code, a reorganization causes an increase of the chain length, but with another tip.\n+    // So we also check that.\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash()==pblock->GetHash());\n+}\n+\n+void Blockv2test()\n+{\n+    assert(Params().NetworkID() == CBaseChainParams::UNITTEST);\n+    ModifiableParams()->setSkipProofOfWorkCheck(true);\n+\n+    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n+    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n+    // for each testcase that requires it.\n+\n+    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n+\n+\n+    LogPrintf(\"Blockv2test testcase starts\\n\");\n+\n+    CBlockTemplate *pblocktemplate;\n+    CScript script;\n+    uint256 hash;\n+    int PreviousHeight;\n+\n+    LOCK(cs_main);\n+\n+    // Simple block creation, nothing special yet.\n+    pblocktemplate = CreateNewBlock(scriptPubKey);\n+    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n+\n+    LogPrintf(\"Blockv2test block v1 add begin\\n\");\n+\n+    ////////////////////////////////////////////////////////////////////////////////////////\n+    // First create a block v1, check that it is accepted. The block has an invalid height.\n+    ////////////////////////////////////////////////////////////////////////////////////////\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n+    pblock->nVersion = 1;\n+    CValidationState state1;\n+    PreviousHeight = chainActive.Height();\n+    BOOST_CHECK(ProcessBlock(state1, NULL, pblock));\n+    BOOST_CHECK(state1.IsValid());\n+    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n+    pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+\n+\n+\n+    // First check that the supermajority threshold is exactly 1000 blocks\n+    BOOST_CHECK(Params().ToCheckBlockUpgradeMajority()==1000);  //\n+    BOOST_CHECK(Params().EnforceBlockUpgradeMajority()==750);\n+    BOOST_CHECK(Params().RejectBlockOutdatedMajority()==950);\n+\n+    // Over the last 1000 blocks, 750 blocks must be v2 to switch to v2-only mode.\n+    // Here we're testing only the last 750, not any subset.\n+\n+    LogPrintf(\"Blockv2test BIP30 repetition begin\\n\");\n+\n+    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n+    // First, if we try to add a block v2 with the same coinbase tx, we should get\n+    // \"bad-txns-BIP30\" because the coinbase tx has the same hash as the previous.\n+    // Even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n+    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost. But this\n+    // is the intended behaviour: Receiving a single block can cause zero or multiple blocks to be\n+    // connected, and ActivateBestChain's responsibility is just switching the best block whatsoever.\n+    // Feedback about failures causes a reject message to be sent to the peer from which we received\n+    // the actual block (not necessarily the same as from whom we got the block that caused the reorg),\n+    // for which we remember the peerid.\n+    // Because we cannot access the failure reason here, we just verify instead that the chain\n+    // height has not been incremented.\n+    //////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+    CValidationState state7;\n+    PreviousHeight = chainActive.Height();\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    SetBlockDefaultAttributesAndHeight(pblock,false,5000); //\n+    pblock->nVersion = 2;\n+    BOOST_CHECK(ProcessBlock(state7, NULL, pblock)); // should we care about the return value?\n+    BOOST_CHECK(state7.IsValid());\n+    BOOST_CHECK(PreviousHeight == chainActive.Height()); // we check the block has not been added.\n+\n+    LogPrintf(\"Blockv2test 750 v2 blocks  begin\\n\");\n+\n+    ////////////////////////////\n+    // Now create 750 v2 blocks\n+    ////////////////////////////\n+\n+    for (int i=0;i<750;i++)\n+    {\n+\n+        LogPrintf(\"Blockv2test block %d begin\\n\",i);\n+\n+        CheckSubsidyHalving(pblocktemplate,pblock);\n+\n+        // We add a value to the height to make is NOT equal to the actual height.\n+        SetBlockDefaultAttributesAndHeight(pblock,true,1000); // blocks version 2 without height are allowed! for only 750 blocks\n+        pblock->nVersion = 2;\n+\n+        CheckBlockAddedToBestChainSuccessfully(pblock);\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+    LogPrintf(\"Blockv2test v2 without height rejected begin\\n\");\n+\n+    /////////////////////////////////////////////////////////////////////////////////////\n+    // Now we try to add a block v2, with an invalid height and it should be rejected.\n+    // We use 2000 as argument heightDifference because is not in the range [1000..1750].\n+    /////////////////////////////////////////////////////////////////////////////////////\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    SetBlockDefaultAttributesAndHeight(pblock,true,2000); //\n+    pblock->nVersion = 2;\n+    CValidationState state0;\n+    BOOST_CHECK(ProcessBlock(state0, NULL, pblock)==false);\n+    BOOST_CHECK(!state0.IsValid());\n+    BOOST_CHECK(state0.GetRejectReason()==\"bad-cb-height\");\n+    // Do not update parent since block has failed\n+\n+    LogPrintf(\"Blockv2test v2 with height accepted begin\\n\");\n+\n+    /////////////////////////////////////////////////////////////\n+    // Now we add 200 additional blocks, until we get 950\n+    // (the threshold where v1 blocks are not accepted anymore)\n+    /////////////////////////////////////////////////////////////\n+    for (int i=0;i<200;i++)\n+    {\n+\n+        LogPrintf(\"Blockv2test v2block %d begin\\n\",i);\n+        CheckSubsidyHalving(pblocktemplate,pblock);\n+        SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+        pblock->nVersion = 2;\n+        CheckBlockAddedToBestChainSuccessfully(pblock);\n+        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n+    }\n+\n+\n+    LogPrintf(\"Blockv2test block v1 rejected\\n\");\n+\n+    /////////////////////////////////////////////////////////////////////////////////////////\n+    // Now we try to add a block v1, it should be rejected, even if it hash the height field\n+    /////////////////////////////////////////////////////////////////////////////////////////\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+    pblock->nVersion = 1;\n+    CValidationState state2;\n+    BOOST_CHECK(ProcessBlock(state2, NULL, pblock)==false);\n+    BOOST_CHECK(!state2.IsValid());\n+    BOOST_CHECK(state2.GetRejectReason()==\"bad-version\");\n+    // Do not update parent since block has failed\n+\n+    ////////////////////////////////////////////////////////\n+    // Block time too old check\n+    ////////////////////////////////////////////////////////\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+    pblock->nVersion = 2;\n+    pblock->nTime = chainActive.Tip()->GetMedianTimePast()-1;\n+    CValidationState state4;\n+    BOOST_CHECK(ProcessBlock(state4, NULL, pblock)==false);\n+    BOOST_CHECK(!state4.IsValid());\n+    BOOST_CHECK(state4.GetRejectReason()==\"time-too-old\");\n+    // Do not update parent since block has failed\n+\n+    ////////////////////////////////////////////////////////\n+    // Adding a non-final coinbase, must modify coinbase\n+    ////////////////////////////////////////////////////////\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    SetEmptyBlock(pblock);\n+    // Use a mutable coinbase to change nLockTime and  nSequence\n+    CMutableTransaction txCoinbase(pblock->vtx[0]);\n+    txCoinbase.vin[0].scriptSig = (CScript() << chainActive.Height() << 0);\n+    txCoinbase.nLockTime = LOCKTIME_THRESHOLD-1; // refers to height\n+    txCoinbase.vin[0].nSequence = 1; // non-zero sequence\n+    pblock->vtx[0] = CTransaction(txCoinbase);\n+    pblock->nVersion = 2;\n+    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n+    CValidationState state5;\n+    BOOST_CHECK(ProcessBlock(state5, NULL, pblock)==false);\n+    BOOST_CHECK(!state5.IsValid());\n+    BOOST_CHECK(state5.GetRejectReason()==\"bad-txns-nonfinal\");\n+    // Do not update parent since block has failed\n+\n+    ModifiableParams()->setSkipProofOfWorkCheck(false);\n+\n+    ////////////////////////////////////////////////////////////////////////////////\n+    // Just to be sure that proof-of-work skipping is working ok, we submit a block\n+    // without enought proof of work and it must be rejected.\n+    ////////////////////////////////////////////////////////////////////////////////\n+    CheckSubsidyHalving(pblocktemplate,pblock);\n+    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n+    pblock->nVersion = 2;\n+    CValidationState state6;\n+    BOOST_CHECK(ProcessBlock(state6, NULL, pblock)==false);\n+    BOOST_CHECK(!state6.IsValid());\n+    BOOST_CHECK(state6.GetRejectReason()==\"high-hash\");\n+\n+    delete pblocktemplate;\n+\n+\n+    LogPrintf(\"Blockv2test testcase ends\\n\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(Blockv2testcase)\n+{\n+    Blockv2test();\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "bad5c13ac2b67541fddfd0d602d00317b404a2bb",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "patch": "@@ -253,6 +253,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);\n+    mempool.clear();\n \n     BOOST_FOREACH(CTransaction *tx, txFirst)\n         delete tx;"
      },
      {
        "sha": "6e5f0e3facc90bbfbfd8eb76cbbaf6db3dc807a1",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "patch": "@@ -31,7 +31,7 @@ struct TestingSetup {\n \n     TestingSetup() {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n-        SelectParams(CBaseChainParams::MAIN);\n+        SelectParams(CBaseChainParams::UNITTEST);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();"
      }
    ]
  },
  {
    "sha": "8d132431b4f6a7676482815231cd923d9047d541",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDEzMjQzMWI0ZjZhNzY3NjQ4MjgxNTIzMWNkOTIzZDkwNDdkNTQx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T08:27:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T08:39:55Z"
      },
      "message": "Revert merge of pull #4845\n\nIt breaks the new mingw tests!\n\nSee\n\n- https://travis-ci.org/bitcoin/bitcoin/jobs/36845581\n- https://travis-ci.org/bitcoin/bitcoin/jobs/36845582\n\nThis reverts commit 470590277782cce2fe73275c74523aef59a51eab, 5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0, a25fd6be138ff2bff7e2ad6a1a789db523c0193f.",
      "tree": {
        "sha": "c3d7a2dbb2868954748761161896cc8f02b940b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3d7a2dbb2868954748761161896cc8f02b940b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d132431b4f6a7676482815231cd923d9047d541",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULQ9cAAoJEHSBCwEjRsmm7CoH/0bNW9hOSlF52WFYhATD7acL\nUgo3iajsF4iE/y14Kx9U1AKEN/iehAphOaVnD9ufvldloxyQq6Ri3i5GhkNmGGpX\n6k6+s+h3ldSF/b+91J+24MZnv32wDsdDmDVTC3VOInkrRxbhCR0vuVb4nrsVC7DV\nIlkIa6WsW+YqVw7zycuD0kTPhM9j8ol+WU+2IZpgd4kU85bFuYPyZjH76GNC63jA\nujhyhZct4xls8fh3w5kDjruieqlUu4xugFnk2kiNZ7p47+o/n+1X58LMU9p6T6jz\n7HerDlYdNBLh3vx9I5GSgqj9NORhknjtes4HpJy3ww0MMVFZSLeLRr8gd4byibo=\n=hu57\n-----END PGP SIGNATURE-----",
        "payload": "tree c3d7a2dbb2868954748761161896cc8f02b940b1\nparent ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412238456 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412239195 +0200\n\nRevert merge of pull #4845\n\nIt breaks the new mingw tests!\n\nSee\n\n- https://travis-ci.org/bitcoin/bitcoin/jobs/36845581\n- https://travis-ci.org/bitcoin/bitcoin/jobs/36845582\n\nThis reverts commit 470590277782cce2fe73275c74523aef59a51eab, 5e2e7fcb99738d9254d4030d53e4f711b2fc5ee0, a25fd6be138ff2bff7e2ad6a1a789db523c0193f.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d132431b4f6a7676482815231cd923d9047d541",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d132431b4f6a7676482815231cd923d9047d541",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d132431b4f6a7676482815231cd923d9047d541/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d"
      }
    ],
    "stats": {
      "total": 375,
      "additions": 4,
      "deletions": 371
    },
    "files": [
      {
        "sha": "ab449f3e711c06cb29368a55d3eacd3256a90365",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d132431b4f6a7676482815231cd923d9047d541/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d132431b4f6a7676482815231cd923d9047d541/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=8d132431b4f6a7676482815231cd923d9047d541",
        "patch": "@@ -51,7 +51,6 @@ BITCOIN_TESTS =\\\n   test/key_tests.cpp \\\n   test/main_tests.cpp \\\n   test/miner_tests.cpp \\\n-  test/blockv2_tests.cpp \\\n   test/mruset_tests.cpp \\\n   test/multisig_tests.cpp \\\n   test/netbase_tests.cpp \\"
      },
      {
        "sha": "179db5a818f38c42ea628fb470be89f5d8b36dee",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 41,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d132431b4f6a7676482815231cd923d9047d541/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d132431b4f6a7676482815231cd923d9047d541/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=8d132431b4f6a7676482815231cd923d9047d541",
        "patch": "@@ -115,7 +115,6 @@ class CMainParams : public CChainParams {\n         fAllowMinDifficultyBlocks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n-        fSkipProofOfWorkCheck = false;\n     }\n };\n static CMainParams mainParams;\n@@ -215,46 +214,8 @@ class CRegTestParams : public CTestNetParams {\n };\n static CRegTestParams regTestParams;\n \n-//\n-// Unit test\n-//\n-class CUnitTestParams : public CMainParams, public CModifiableParams {\n-public:\n-    CUnitTestParams() {\n-        networkID = CBaseChainParams::UNITTEST;\n-        strNetworkID = \"unittest\";\n-        nDefaultPort = 18445;\n-        vFixedSeeds.clear();\n-        vSeeds.clear();  // Regtest mode doesn't have any DNS seeds.\n-\n-        fRequireRPCPassword = false;\n-        fMiningRequiresPeers = false;\n-        fDefaultCheckMemPool = true;\n-        fAllowMinDifficultyBlocks = false;\n-        fMineBlocksOnDemand = true;\n-    }\n-public:\n-    // Published setters to allow changing values in unit test cases\n-    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }\n-    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }\n-    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)  { nRejectBlockOutdatedMajority=anRejectBlockOutdatedMajority; }\n-    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)  { nToCheckBlockUpgradeMajority=anToCheckBlockUpgradeMajority; }\n-    virtual void setDefaultCheckMemPool(bool afDefaultCheckMemPool)  { fDefaultCheckMemPool=afDefaultCheckMemPool; }\n-    virtual void setAllowMinDifficultyBlocks(bool afAllowMinDifficultyBlocks) {  fAllowMinDifficultyBlocks=afAllowMinDifficultyBlocks; }\n-    virtual void setSkipProofOfWorkCheck(bool afSkipProofOfWorkCheck) { fSkipProofOfWorkCheck = afSkipProofOfWorkCheck; }\n-};\n-static CUnitTestParams unitTestParams;\n-\n-\n static CChainParams *pCurrentParams = 0;\n \n-CModifiableParams *ModifiableParams()\n-{\n-   assert(pCurrentParams);\n-   assert(pCurrentParams==&unitTestParams);\n-   return (CModifiableParams*)&unitTestParams;\n-}\n-\n const CChainParams &Params() {\n     assert(pCurrentParams);\n     return *pCurrentParams;\n@@ -268,8 +229,6 @@ CChainParams &Params(CBaseChainParams::Network network) {\n             return testNetParams;\n         case CBaseChainParams::REGTEST:\n             return regTestParams;\n-        case CBaseChainParams::UNITTEST:\n-            return unitTestParams;\n         default:\n             assert(false && \"Unimplemented network\");\n             return mainParams;"
      },
      {
        "sha": "e5dfc87c6dad51ab061a29835dc675c0ff88b914",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 24,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d132431b4f6a7676482815231cd923d9047d541/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d132431b4f6a7676482815231cd923d9047d541/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=8d132431b4f6a7676482815231cd923d9047d541",
        "patch": "@@ -61,8 +61,6 @@ class CChainParams\n     bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n     /* Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n-    /* Skip proof-of-work check: allow mining of any difficulty block */\n-    bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n     /* Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n@@ -105,27 +103,8 @@ class CChainParams\n     bool fAllowMinDifficultyBlocks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n-    bool fSkipProofOfWorkCheck;\n };\n \n-/** Modifiable parameters interface is used by test cases to adapt the parameters in order\n-*** to test specific features more easily. Test cases should always restore the previous\n-*** values after finalization.\n-**/\n-\n-class CModifiableParams {\n-public:\n-    // Published setters to allow changing values in unit test cases\n-    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval) =0;\n-    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)=0;\n-    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)=0;\n-    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)=0;\n-    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)=0;\n-    virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks)=0;\n-    virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck)=0;\n-};\n-\n-\n /**\n  * Return the currently selected parameters. This won't change after app startup\n  * outside of the unit tests.\n@@ -135,9 +114,6 @@ const CChainParams &Params();\n /** Return parameters for the given network. */\n CChainParams &Params(CBaseChainParams::Network network);\n \n-/** Get modifyable network parameters (UNITTEST only) */\n-CModifiableParams *ModifiableParams();\n-\n /** Sets the params returned by Params() to those for the given network. */\n void SelectParams(CBaseChainParams::Network network);\n "
      },
      {
        "sha": "98bb5b855fe3a10ca351dd2a7ab4a30417f81f66",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d132431b4f6a7676482815231cd923d9047d541/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d132431b4f6a7676482815231cd923d9047d541/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=8d132431b4f6a7676482815231cd923d9047d541",
        "patch": "@@ -57,20 +57,6 @@ class CBaseRegTestParams : public CBaseTestNetParams\n };\n static CBaseRegTestParams regTestParams;\n \n-//\n-// Unit test\n-//\n-class CBaseUnitTestParams : public CBaseMainParams\n-{\n-public:\n-    CBaseUnitTestParams()\n-    {\n-        networkID = CBaseChainParams::UNITTEST;\n-        strDataDir = \"unittest\";\n-    }\n-};\n-static CBaseUnitTestParams unitTestParams;\n-\n static CBaseChainParams* pCurrentBaseParams = 0;\n \n const CBaseChainParams& BaseParams()\n@@ -91,9 +77,6 @@ void SelectBaseParams(CBaseChainParams::Network network)\n     case CBaseChainParams::REGTEST:\n         pCurrentBaseParams = &regTestParams;\n         break;\n-    case CBaseChainParams::UNITTEST:\n-        pCurrentBaseParams = &unitTestParams;\n-        break;\n     default:\n         assert(false && \"Unimplemented network\");\n         return;"
      },
      {
        "sha": "c054f03f17398e4c8ecf6c69000c7925000b2cef",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d132431b4f6a7676482815231cd923d9047d541/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d132431b4f6a7676482815231cd923d9047d541/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=8d132431b4f6a7676482815231cd923d9047d541",
        "patch": "@@ -19,7 +19,6 @@ class CBaseChainParams\n         MAIN,\n         TESTNET,\n         REGTEST,\n-        UNITTEST,\n \n         MAX_NETWORK_TYPES\n     };"
      },
      {
        "sha": "c41deea7ce64718950437f2d41f5e4ec3d96c72b",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d132431b4f6a7676482815231cd923d9047d541/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d132431b4f6a7676482815231cd923d9047d541/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=8d132431b4f6a7676482815231cd923d9047d541",
        "patch": "@@ -88,8 +88,6 @@ namespace Checkpoints {\n             return dataTestnet;\n         else if (Params().NetworkID() == CBaseChainParams::MAIN)\n             return data;\n-        else if (Params().NetworkID() == CBaseChainParams::UNITTEST) // UnitTest share the same checkpoints as MAIN\n-            return data;\n         else\n             return dataRegtest;\n     }"
      },
      {
        "sha": "a3e36ff872041c613ecf93ddd700ea0b51b8dfb3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d132431b4f6a7676482815231cd923d9047d541/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d132431b4f6a7676482815231cd923d9047d541/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=8d132431b4f6a7676482815231cd923d9047d541",
        "patch": "@@ -2305,8 +2305,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n-        if ((!Params().SkipProofOfWorkCheck()) &&\n-           (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n+        if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n             return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n                              REJECT_INVALID, \"bad-diffbits\");\n "
      },
      {
        "sha": "893f6c18be657a927d8993ae5bf7b075b5954a88",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d132431b4f6a7676482815231cd923d9047d541/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d132431b4f6a7676482815231cd923d9047d541/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=8d132431b4f6a7676482815231cd923d9047d541",
        "patch": "@@ -81,10 +81,6 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bool fNegative;\n     bool fOverflow;\n     uint256 bnTarget;\n-\n-    if (Params().SkipProofOfWorkCheck())\n-       return true;\n-\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range"
      },
      {
        "sha": "58fffb6df40c4650f958750a6321a7dc3ed06f84",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d132431b4f6a7676482815231cd923d9047d541/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d132431b4f6a7676482815231cd923d9047d541/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=8d132431b4f6a7676482815231cd923d9047d541",
        "patch": "@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n-    SelectParams(CBaseChainParams::UNITTEST);\n+    SelectParams(CBaseChainParams::MAIN);\n }\n \n // Goal: check that generated keys match test vectors\n@@ -243,7 +243,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     CTxDestination nodest = CNoDestination();\n     BOOST_CHECK(!dummyAddr.Set(nodest));\n \n-    SelectParams(CBaseChainParams::UNITTEST);\n+    SelectParams(CBaseChainParams::MAIN);\n }\n \n // Goal: check that base58 parsing code is robust against a variety of corrupted data"
      },
      {
        "sha": "96c0df5e6b6fbc5cbcd4a3464709e079a90de7a2",
        "filename": "src/test/blockv2_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 275,
        "changes": 275,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/test/blockv2_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d/src/test/blockv2_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockv2_tests.cpp?ref=ad51e14583fbf6d53d5a2b22a0a0dbe4a51a9a7d",
        "patch": "@@ -1,275 +0,0 @@\n-// Copyright (c) 2011-2014 The Bitcoin Core developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"main.h\"\n-#include \"miner.h\"\n-#include \"uint256.h\"\n-#include \"util.h\"\n-\n-#include <boost/test/unit_test.hpp>\n-\n-// This test cheecks the majority rule which states that after 1000 v2 blocks no new v1 block can be part of that branch.\n-\n-BOOST_AUTO_TEST_SUITE(blockv2_tests)\n-\n-static CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-\n-static void SetEmptyBlock(CBlock * pblock)\n-{\n-    pblock->nVersion = 2;\n-    pblock->nTime = chainActive.Tip()->GetMedianTimePast()+1;\n-    pblock->nNonce = 0;\n-}\n-\n-static void SetBlockDefaultAttributesAndHeight(CBlock * pblock,bool addHeight,int heightDifference)\n-{\n-    SetEmptyBlock(pblock);\n-\n-    // Add the coinbase\n-    CMutableTransaction txCoinbase(pblock->vtx[0]);\n-\n-    if (addHeight)\n-        txCoinbase.vin[0].scriptSig = (CScript() << (chainActive.Height()+1+heightDifference) << 0);\n-        else\n-        txCoinbase.vin[0].scriptSig = (CScript() << heightDifference << 0); // At least size 2, this is a protocol spec\n-\n-    txCoinbase.vout[0].scriptPubKey = CScript();\n-    pblock->vtx[0] = CTransaction(txCoinbase);\n-    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n-}\n-\n-void CheckSubsidyHalving(CBlockTemplate * &pblocktemplate, CBlock * &pblock)\n-{\n-    if ((chainActive.Height()+1) % Params().SubsidyHalvingInterval() == 0)\n-        {\n-            // The RegTest network has a low subsidy halving interval (150) so\n-            // we must recompute the coinbase subsidy if we reach the boundary.\n-            // The unittest network allows modifying this interval. We check it so this\n-            // test can work in any network.\n-\n-            // preserve parent hash\n-            uint256 prevParent = pblock->hashPrevBlock;\n-            delete pblocktemplate;\n-            pblocktemplate = CreateNewBlock(scriptPubKey);\n-            pblock = &pblocktemplate->block; // pointer for convenience\n-            pblock->hashPrevBlock = prevParent;\n-        }\n-}\n-\n-void CheckBlockAddedToBestChainSuccessfully(CBlock *pblock)\n-{\n-    int PreviousHeight;\n-    CValidationState state;\n-\n-    PreviousHeight = chainActive.Height();\n-    BOOST_CHECK(ProcessBlock(state, NULL, pblock));\n-    BOOST_CHECK(state.IsValid());\n-    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n-\n-    // Previous checks do not assure the current best chain has pblock as tip. It could be the case that a because\n-    // of a malfunction in the chain reorganization code, a reorganization causes an increase of the chain length, but with another tip.\n-    // So we also check that.\n-    BOOST_CHECK(chainActive.Tip()->GetBlockHash()==pblock->GetHash());\n-}\n-\n-void Blockv2test()\n-{\n-    assert(Params().NetworkID() == CBaseChainParams::UNITTEST);\n-    ModifiableParams()->setSkipProofOfWorkCheck(true);\n-\n-    // We don't know the state of the block-chain here: it depends on which other tests are run before this test.\n-    // See https://github.com/bitcoin/bitcoin/pull/4688 for a patch that allows the re-creation of the block-chain\n-    // for each testcase that requires it.\n-\n-    // If miner_tests.cpp is run before, the chain will be 100 blocks long, and all of them will be v1\n-\n-\n-    LogPrintf(\"Blockv2test testcase starts\\n\");\n-\n-    CBlockTemplate *pblocktemplate;\n-    CScript script;\n-    uint256 hash;\n-    int PreviousHeight;\n-\n-    LOCK(cs_main);\n-\n-    // Simple block creation, nothing special yet.\n-    pblocktemplate = CreateNewBlock(scriptPubKey);\n-    CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n-\n-    LogPrintf(\"Blockv2test block v1 add begin\\n\");\n-\n-    ////////////////////////////////////////////////////////////////////////////////////////\n-    // First create a block v1, check that it is accepted. The block has an invalid height.\n-    ////////////////////////////////////////////////////////////////////////////////////////\n-    SetBlockDefaultAttributesAndHeight(pblock,false,5000);\n-    pblock->nVersion = 1;\n-    CValidationState state1;\n-    PreviousHeight = chainActive.Height();\n-    BOOST_CHECK(ProcessBlock(state1, NULL, pblock));\n-    BOOST_CHECK(state1.IsValid());\n-    BOOST_CHECK((PreviousHeight+1) == chainActive.Height()); // to differentiate from orphan blocks, which also get accepted in ProcessBlock()\n-    pblock->hashPrevBlock = pblock->GetHash(); // update parent\n-\n-\n-\n-    // First check that the supermajority threshold is exactly 1000 blocks\n-    BOOST_CHECK(Params().ToCheckBlockUpgradeMajority()==1000);  //\n-    BOOST_CHECK(Params().EnforceBlockUpgradeMajority()==750);\n-    BOOST_CHECK(Params().RejectBlockOutdatedMajority()==950);\n-\n-    // Over the last 1000 blocks, 750 blocks must be v2 to switch to v2-only mode.\n-    // Here we're testing only the last 750, not any subset.\n-\n-    LogPrintf(\"Blockv2test BIP30 repetition begin\\n\");\n-\n-    ///////////////////////////////////////////////////////////////////////////////////////////////////////\n-    // First, if we try to add a block v2 with the same coinbase tx, we should get\n-    // \"bad-txns-BIP30\" because the coinbase tx has the same hash as the previous.\n-    // Even if ConnectBlock returns a \"bad-txns-BIP30\", ActivateBestChainStep clears\n-    // the state, so we get true here and the \"bad-txns-BIP30\" reason is lost. But this\n-    // is the intended behaviour: Receiving a single block can cause zero or multiple blocks to be\n-    // connected, and ActivateBestChain's responsibility is just switching the best block whatsoever.\n-    // Feedback about failures causes a reject message to be sent to the peer from which we received\n-    // the actual block (not necessarily the same as from whom we got the block that caused the reorg),\n-    // for which we remember the peerid.\n-    // Because we cannot access the failure reason here, we just verify instead that the chain\n-    // height has not been incremented.\n-    //////////////////////////////////////////////////////////////////////////////////////////////////////\n-\n-    CValidationState state7;\n-    PreviousHeight = chainActive.Height();\n-    CheckSubsidyHalving(pblocktemplate,pblock);\n-    SetBlockDefaultAttributesAndHeight(pblock,false,5000); //\n-    pblock->nVersion = 2;\n-    BOOST_CHECK(ProcessBlock(state7, NULL, pblock)); // should we care about the return value?\n-    BOOST_CHECK(state7.IsValid());\n-    BOOST_CHECK(PreviousHeight == chainActive.Height()); // we check the block has not been added.\n-\n-    LogPrintf(\"Blockv2test 750 v2 blocks  begin\\n\");\n-\n-    ////////////////////////////\n-    // Now create 750 v2 blocks\n-    ////////////////////////////\n-\n-    for (int i=0;i<750;i++)\n-    {\n-\n-        LogPrintf(\"Blockv2test block %d begin\\n\",i);\n-\n-        CheckSubsidyHalving(pblocktemplate,pblock);\n-\n-        // We add a value to the height to make is NOT equal to the actual height.\n-        SetBlockDefaultAttributesAndHeight(pblock,true,1000); // blocks version 2 without height are allowed! for only 750 blocks\n-        pblock->nVersion = 2;\n-\n-        CheckBlockAddedToBestChainSuccessfully(pblock);\n-        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n-    }\n-\n-    LogPrintf(\"Blockv2test v2 without height rejected begin\\n\");\n-\n-    /////////////////////////////////////////////////////////////////////////////////////\n-    // Now we try to add a block v2, with an invalid height and it should be rejected.\n-    // We use 2000 as argument heightDifference because is not in the range [1000..1750].\n-    /////////////////////////////////////////////////////////////////////////////////////\n-    CheckSubsidyHalving(pblocktemplate,pblock);\n-    SetBlockDefaultAttributesAndHeight(pblock,true,2000); //\n-    pblock->nVersion = 2;\n-    CValidationState state0;\n-    BOOST_CHECK(ProcessBlock(state0, NULL, pblock)==false);\n-    BOOST_CHECK(!state0.IsValid());\n-    BOOST_CHECK(state0.GetRejectReason()==\"bad-cb-height\");\n-    // Do not update parent since block has failed\n-\n-    LogPrintf(\"Blockv2test v2 with height accepted begin\\n\");\n-\n-    /////////////////////////////////////////////////////////////\n-    // Now we add 200 additional blocks, until we get 950\n-    // (the threshold where v1 blocks are not accepted anymore)\n-    /////////////////////////////////////////////////////////////\n-    for (int i=0;i<200;i++)\n-    {\n-\n-        LogPrintf(\"Blockv2test v2block %d begin\\n\",i);\n-        CheckSubsidyHalving(pblocktemplate,pblock);\n-        SetBlockDefaultAttributesAndHeight(pblock,true,0);\n-        pblock->nVersion = 2;\n-        CheckBlockAddedToBestChainSuccessfully(pblock);\n-        pblock->hashPrevBlock = pblock->GetHash(); // update parent\n-    }\n-\n-\n-    LogPrintf(\"Blockv2test block v1 rejected\\n\");\n-\n-    /////////////////////////////////////////////////////////////////////////////////////////\n-    // Now we try to add a block v1, it should be rejected, even if it hash the height field\n-    /////////////////////////////////////////////////////////////////////////////////////////\n-    CheckSubsidyHalving(pblocktemplate,pblock);\n-    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n-    pblock->nVersion = 1;\n-    CValidationState state2;\n-    BOOST_CHECK(ProcessBlock(state2, NULL, pblock)==false);\n-    BOOST_CHECK(!state2.IsValid());\n-    BOOST_CHECK(state2.GetRejectReason()==\"bad-version\");\n-    // Do not update parent since block has failed\n-\n-    ////////////////////////////////////////////////////////\n-    // Block time too old check\n-    ////////////////////////////////////////////////////////\n-    CheckSubsidyHalving(pblocktemplate,pblock);\n-    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n-    pblock->nVersion = 2;\n-    pblock->nTime = chainActive.Tip()->GetMedianTimePast()-1;\n-    CValidationState state4;\n-    BOOST_CHECK(ProcessBlock(state4, NULL, pblock)==false);\n-    BOOST_CHECK(!state4.IsValid());\n-    BOOST_CHECK(state4.GetRejectReason()==\"time-too-old\");\n-    // Do not update parent since block has failed\n-\n-    ////////////////////////////////////////////////////////\n-    // Adding a non-final coinbase, must modify coinbase\n-    ////////////////////////////////////////////////////////\n-    CheckSubsidyHalving(pblocktemplate,pblock);\n-    SetEmptyBlock(pblock);\n-    // Use a mutable coinbase to change nLockTime and  nSequence\n-    CMutableTransaction txCoinbase(pblock->vtx[0]);\n-    txCoinbase.vin[0].scriptSig = (CScript() << chainActive.Height() << 0);\n-    txCoinbase.nLockTime = LOCKTIME_THRESHOLD-1; // refers to height\n-    txCoinbase.vin[0].nSequence = 1; // non-zero sequence\n-    pblock->vtx[0] = CTransaction(txCoinbase);\n-    pblock->nVersion = 2;\n-    pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n-    CValidationState state5;\n-    BOOST_CHECK(ProcessBlock(state5, NULL, pblock)==false);\n-    BOOST_CHECK(!state5.IsValid());\n-    BOOST_CHECK(state5.GetRejectReason()==\"bad-txns-nonfinal\");\n-    // Do not update parent since block has failed\n-\n-    ModifiableParams()->setSkipProofOfWorkCheck(false);\n-\n-    ////////////////////////////////////////////////////////////////////////////////\n-    // Just to be sure that proof-of-work skipping is working ok, we submit a block\n-    // without enought proof of work and it must be rejected.\n-    ////////////////////////////////////////////////////////////////////////////////\n-    CheckSubsidyHalving(pblocktemplate,pblock);\n-    SetBlockDefaultAttributesAndHeight(pblock,true,0);\n-    pblock->nVersion = 2;\n-    CValidationState state6;\n-    BOOST_CHECK(ProcessBlock(state6, NULL, pblock)==false);\n-    BOOST_CHECK(!state6.IsValid());\n-    BOOST_CHECK(state6.GetRejectReason()==\"high-hash\");\n-\n-    delete pblocktemplate;\n-\n-\n-    LogPrintf(\"Blockv2test testcase ends\\n\");\n-}\n-\n-BOOST_AUTO_TEST_CASE(Blockv2testcase)\n-{\n-    Blockv2test();\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "9e4669eba90075c3eae6cc82a6e4e44114322c57",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d132431b4f6a7676482815231cd923d9047d541/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d132431b4f6a7676482815231cd923d9047d541/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=8d132431b4f6a7676482815231cd923d9047d541",
        "patch": "@@ -253,7 +253,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);\n-    mempool.clear();\n \n     BOOST_FOREACH(CTransaction *tx, txFirst)\n         delete tx;"
      },
      {
        "sha": "68fad8d038e80381695efa08a4da8ab88ae4f662",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d132431b4f6a7676482815231cd923d9047d541/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d132431b4f6a7676482815231cd923d9047d541/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=8d132431b4f6a7676482815231cd923d9047d541",
        "patch": "@@ -31,7 +31,7 @@ struct TestingSetup {\n \n     TestingSetup() {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n-        SelectParams(CBaseChainParams::UNITTEST);\n+        SelectParams(CBaseChainParams::MAIN);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();"
      }
    ]
  },
  {
    "sha": "c9fb27da0a72135417956dca8dafa959ebb67c10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWZiMjdkYTBhNzIxMzU0MTc5NTZkY2E4ZGFmYTk1OWViYjY3YzEw",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-25T06:53:43Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-02T08:46:31Z"
      },
      "message": "CBufferedFile: convert into a non-refcounted RAII wrapper\n\n- it now takes over the passed file descriptor and closes it in the\n  destructor\n- this fixes a leak in LoadExternalBlockFile(), where an exception could\n  cause the file to not getting closed\n\n- disallow copies (like recently added for CAutoFile)\n- make nType and nVersion private",
      "tree": {
        "sha": "7676f91bda9f87762ff5cdd2cbee18eba50dd854",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7676f91bda9f87762ff5cdd2cbee18eba50dd854"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9fb27da0a72135417956dca8dafa959ebb67c10",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9fb27da0a72135417956dca8dafa959ebb67c10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9fb27da0a72135417956dca8dafa959ebb67c10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9fb27da0a72135417956dca8dafa959ebb67c10/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "00eef5d6e9b08b173492599ec41c7feb445e2139",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00eef5d6e9b08b173492599ec41c7feb445e2139",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00eef5d6e9b08b173492599ec41c7feb445e2139"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 22,
      "deletions": 10
    },
    "files": [
      {
        "sha": "033373888798f549256d80d0c4a3c5f6ed226f20",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9fb27da0a72135417956dca8dafa959ebb67c10/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9fb27da0a72135417956dca8dafa959ebb67c10/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c9fb27da0a72135417956dca8dafa959ebb67c10",
        "patch": "@@ -3084,6 +3084,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n \n     int nLoaded = 0;\n     try {\n+        // This takes over fileIn and calls fclose() on it in the CBufferedFile destructor\n         CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION);\n         uint64_t nStartByte = 0;\n         if (dbp) {\n@@ -3140,7 +3141,6 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                 LogPrintf(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n             }\n         }\n-        fclose(fileIn);\n     } catch(std::runtime_error &e) {\n         AbortNode(_(\"Error: system error: \") + e.what());\n     }"
      },
      {
        "sha": "f56dce1481e7ee449a560a7450e97672097e1f7b",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 21,
        "deletions": 9,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9fb27da0a72135417956dca8dafa959ebb67c10/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9fb27da0a72135417956dca8dafa959ebb67c10/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=c9fb27da0a72135417956dca8dafa959ebb67c10",
        "patch": "@@ -1256,13 +1256,19 @@ class CAutoFile\n     }\n };\n \n-/** Wrapper around a FILE* that implements a ring buffer to\n- *  deserialize from. It guarantees the ability to rewind\n- *  a given number of bytes. */\n+/** Non-refcounted RAII wrapper around a FILE* that implements a ring buffer to\n+ *  deserialize from. It guarantees the ability to rewind a given number of bytes. */\n class CBufferedFile\n {\n private:\n-    FILE *src;          // source file\n+    // Disallow copies\n+    CBufferedFile(const CBufferedFile&);\n+    CBufferedFile& operator=(const CBufferedFile&);\n+\n+    int nType;\n+    int nVersion;\n+\n+    FILE *src;            // source file\n     uint64_t nSrcPos;     // how many bytes have been read from source\n     uint64_t nReadPos;    // how many bytes have been read from this\n     uint64_t nReadLimit;  // up to which position we're allowed to read\n@@ -1289,12 +1295,18 @@ class CBufferedFile\n     }\n \n public:\n-    int nType;\n-    int nVersion;\n-\n     CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :\n-        src(fileIn), nSrcPos(0), nReadPos(0), nReadLimit((uint64_t)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0),\n-        nType(nTypeIn), nVersion(nVersionIn) {\n+        nSrcPos(0), nReadPos(0), nReadLimit((uint64_t)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0)\n+    {\n+        src = fileIn;\n+        nType = nTypeIn;\n+        nVersion = nVersionIn;\n+    }\n+\n+    ~CBufferedFile()\n+    {\n+        if (src)\n+            fclose(src);\n     }\n \n     // check whether we're at the end of the source file"
      }
    ]
  },
  {
    "sha": "0c35486dc97909cea67b24e8758bd0f40ac33a9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYzM1NDg2ZGM5NzkwOWNlYTY3YjI0ZTg3NThiZDBmNDBhYzMzYTlh",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-29T14:10:29Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-02T08:56:10Z"
      },
      "message": "CBufferedFile: add explicit close function\n\n- also use identical close function for CAutoFile (avoids setting file to\n  NULL under wrong conditions)",
      "tree": {
        "sha": "779e3ec48784f959197a230d0bd6c198f79acdfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/779e3ec48784f959197a230d0bd6c198f79acdfb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0c35486dc97909cea67b24e8758bd0f40ac33a9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c35486dc97909cea67b24e8758bd0f40ac33a9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0c35486dc97909cea67b24e8758bd0f40ac33a9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c35486dc97909cea67b24e8758bd0f40ac33a9a/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c9fb27da0a72135417956dca8dafa959ebb67c10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9fb27da0a72135417956dca8dafa959ebb67c10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9fb27da0a72135417956dca8dafa959ebb67c10"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 18,
      "deletions": 6
    },
    "files": [
      {
        "sha": "63c72cb8e86f26dc8c0a740d7c5e7b82987a4f12",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0c35486dc97909cea67b24e8758bd0f40ac33a9a/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0c35486dc97909cea67b24e8758bd0f40ac33a9a/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=0c35486dc97909cea67b24e8758bd0f40ac33a9a",
        "patch": "@@ -1154,7 +1154,7 @@ class CDataStream\n \n \n \n-/** Non-refcounted RAII wrapper for FILE*.\n+/** Non-refcounted RAII wrapper for FILE*\n  *\n  * Will automatically close the file when it goes out of scope if not null.\n  * If you're returning the file pointer, return file.release().\n@@ -1186,9 +1186,10 @@ class CAutoFile\n \n     void fclose()\n     {\n-        if (file != NULL && file != stdin && file != stdout && file != stderr)\n+        if (file) {\n             ::fclose(file);\n-        file = NULL;\n+            file = NULL;\n+        }\n     }\n \n     FILE* release()             { FILE* ret = file; file = NULL; return ret; }\n@@ -1257,7 +1258,11 @@ class CAutoFile\n };\n \n /** Non-refcounted RAII wrapper around a FILE* that implements a ring buffer to\n- *  deserialize from. It guarantees the ability to rewind a given number of bytes. */\n+ *  deserialize from. It guarantees the ability to rewind a given number of bytes.\n+ *\n+ *  Will automatically close the file when it goes out of scope if not null.\n+ *  If you need to close the file early, use file.fclose() instead of fclose(file).\n+ */\n class CBufferedFile\n {\n private:\n@@ -1305,8 +1310,15 @@ class CBufferedFile\n \n     ~CBufferedFile()\n     {\n-        if (src)\n-            fclose(src);\n+        fclose();\n+    }\n+\n+    void fclose()\n+    {\n+        if (src) {\n+            ::fclose(src);\n+            src = NULL;\n+        }\n     }\n \n     // check whether we're at the end of the source file"
      }
    ]
  },
  {
    "sha": "938bccebf1cb3ed6c7b8bfb8236a5172433bf890",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzhiY2NlYmYxY2IzZWQ2YzdiOGJmYjgyMzZhNTE3MjQzM2JmODkw",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-02T08:59:28Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-02T08:59:28Z"
      },
      "message": "CAutoFile: make file private",
      "tree": {
        "sha": "dbdc27b328cd7806ce7b07adc4dda2a3c8872869",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbdc27b328cd7806ce7b07adc4dda2a3c8872869"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/938bccebf1cb3ed6c7b8bfb8236a5172433bf890",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/938bccebf1cb3ed6c7b8bfb8236a5172433bf890",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/938bccebf1cb3ed6c7b8bfb8236a5172433bf890",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/938bccebf1cb3ed6c7b8bfb8236a5172433bf890/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "0c35486dc97909cea67b24e8758bd0f40ac33a9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0c35486dc97909cea67b24e8758bd0f40ac33a9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0c35486dc97909cea67b24e8758bd0f40ac33a9a"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "ff11edc06c761492b8d83e54ca2d8730cda26e37",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/938bccebf1cb3ed6c7b8bfb8236a5172433bf890/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/938bccebf1cb3ed6c7b8bfb8236a5172433bf890/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=938bccebf1cb3ed6c7b8bfb8236a5172433bf890",
        "patch": "@@ -1166,12 +1166,13 @@ class CAutoFile\n     // Disallow copies\n     CAutoFile(const CAutoFile&);\n     CAutoFile& operator=(const CAutoFile&);\n-protected:\n-    FILE* file;\n-public:\n+\n     int nType;\n     int nVersion;\n+\t\n+    FILE* file;\t\n \n+public:\n     CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn)\n     {\n         file = filenew;"
      }
    ]
  },
  {
    "sha": "e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmVmZGYzOTM3ZTcxYzBhZTkxYjdhMWU1ZDM4MWQwNGJjODE0YmI2",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-02T09:25:21Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-02T09:25:21Z"
      },
      "message": "amount.h: update license, add header end comment + rem from util.h",
      "tree": {
        "sha": "1bb462a9bc1ada51ab88516d756b3e0dfec41ff4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bb462a9bc1ada51ab88516d756b3e0dfec41ff4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8d132431b4f6a7676482815231cd923d9047d541",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d132431b4f6a7676482815231cd923d9047d541",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d132431b4f6a7676482815231cd923d9047d541"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "831fa1f6cad61727c91cf36dffa2544b6316ef08",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_AMOUNT_H\n@@ -10,4 +10,4 @@\n \n typedef int64_t CAmount;\n \n-#endif\n+#endif //  BITCOIN_AMOUNT_H"
      },
      {
        "sha": "4b2415278ba33e361134783d7b50e9245e0d430c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6",
        "patch": "@@ -14,7 +14,6 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n-#include \"amount.h\"\n #include \"compat.h\"\n #include \"tinyformat.h\"\n #include \"utiltime.h\""
      }
    ]
  },
  {
    "sha": "4bd11852802f3ed11e17e8d66660ce2e60f02287",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmQxMTg1MjgwMmYzZWQxMWUxN2U4ZDY2NjYwY2UyZTYwZjAyMjg3",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-02T09:26:36Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-02T09:26:36Z"
      },
      "message": "Qt: allow \"emergency\" shutdown during startup\n\n- allows closing our splash screen to abort startup",
      "tree": {
        "sha": "9225a34a403125a512df3275685f5b0fb81f2375",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9225a34a403125a512df3275685f5b0fb81f2375"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bd11852802f3ed11e17e8d66660ce2e60f02287",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bd11852802f3ed11e17e8d66660ce2e60f02287",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4bd11852802f3ed11e17e8d66660ce2e60f02287",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bd11852802f3ed11e17e8d66660ce2e60f02287/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8d132431b4f6a7676482815231cd923d9047d541",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d132431b4f6a7676482815231cd923d9047d541",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d132431b4f6a7676482815231cd923d9047d541"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "74512e62aab213d7b66d7d737d3cda432c21a79b",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bd11852802f3ed11e17e8d66660ce2e60f02287/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bd11852802f3ed11e17e8d66660ce2e60f02287/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=4bd11852802f3ed11e17e8d66660ce2e60f02287",
        "patch": "@@ -177,5 +177,6 @@ void SplashScreen::paintEvent(QPaintEvent *event)\n \n void SplashScreen::closeEvent(QCloseEvent *event)\n {\n+    StartShutdown(); // allows an \"emergency\" shutdown during startup\n     event->ignore();\n }"
      }
    ]
  },
  {
    "sha": "b76a767906976f21520fff3a1bbee8698c9eb5e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzZhNzY3OTA2OTc2ZjIxNTIwZmZmM2ExYmJlZTg2OThjOWViNWU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T09:47:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T09:48:38Z"
      },
      "message": "Merge pull request #5031\n\ne2efdf3 amount.h: update license, add header end comment + rem from util.h (Philip Kaufmann)",
      "tree": {
        "sha": "1bb462a9bc1ada51ab88516d756b3e0dfec41ff4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1bb462a9bc1ada51ab88516d756b3e0dfec41ff4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b76a767906976f21520fff3a1bbee8698c9eb5e4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULR92AAoJEHSBCwEjRsmmmUQH/jBa00FtksRI4R9EOhHA9UKd\nBCwxcksvd73OEIIa7B3V9oRmvxV6/UL41g7wBi6Fgz6OojD9FgziK4Uoo79e2IhX\noYTGAz+E8NFujn7CjaKkY+xviVO2IiT6DU/d9bk44nmqp9H53tB21VUTY76RNxBH\nFuAWxY0hpI8DaYYDglf6xc8sQTKccsoVopJsjzIIN7SQH/cvNVbm7S7ILLi3IQu2\nQzCOKxj6IKY6mixaoAatBvIeUzWee89Y6XakpCpNp3+t4dxoZZxgxz0K/rOW7EE4\naemkU15eNVPPzsaDFFZcvxyPYFRh31ZTKsO9vwoufx8x/yik3Y3VHc3aUA29xm8=\n=ipWG\n-----END PGP SIGNATURE-----",
        "payload": "tree 1bb462a9bc1ada51ab88516d756b3e0dfec41ff4\nparent 8d132431b4f6a7676482815231cd923d9047d541\nparent e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412243238 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412243318 +0200\n\nMerge pull request #5031\n\ne2efdf3 amount.h: update license, add header end comment + rem from util.h (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b76a767906976f21520fff3a1bbee8698c9eb5e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b76a767906976f21520fff3a1bbee8698c9eb5e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b76a767906976f21520fff3a1bbee8698c9eb5e4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d132431b4f6a7676482815231cd923d9047d541",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d132431b4f6a7676482815231cd923d9047d541",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d132431b4f6a7676482815231cd923d9047d541"
      },
      {
        "sha": "e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2efdf3937e71c0ae91b7a1e5d381d04bc814bb6"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "831fa1f6cad61727c91cf36dffa2544b6316ef08",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b76a767906976f21520fff3a1bbee8698c9eb5e4/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b76a767906976f21520fff3a1bbee8698c9eb5e4/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=b76a767906976f21520fff3a1bbee8698c9eb5e4",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n // Copyright (c) 2009-2014 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_AMOUNT_H\n@@ -10,4 +10,4 @@\n \n typedef int64_t CAmount;\n \n-#endif\n+#endif //  BITCOIN_AMOUNT_H"
      },
      {
        "sha": "4b2415278ba33e361134783d7b50e9245e0d430c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b76a767906976f21520fff3a1bbee8698c9eb5e4/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b76a767906976f21520fff3a1bbee8698c9eb5e4/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=b76a767906976f21520fff3a1bbee8698c9eb5e4",
        "patch": "@@ -14,7 +14,6 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n-#include \"amount.h\"\n #include \"compat.h\"\n #include \"tinyformat.h\"\n #include \"utiltime.h\""
      }
    ]
  },
  {
    "sha": "2dc37e7a49a3b1ed61869331561d46016e2b88e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZGMzN2U3YTQ5YTNiMWVkNjE4NjkzMzE1NjFkNDYwMTZlMmI4OGU0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T10:06:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T10:07:13Z"
      },
      "message": "Merge pull request #4991\n\n0dcb0a5 doc: Add instructions for consistent Mac OS X build names (Saivann)",
      "tree": {
        "sha": "627c5ab2bb7244573f2cfd061aa89a657ac92206",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/627c5ab2bb7244573f2cfd061aa89a657ac92206"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2dc37e7a49a3b1ed61869331561d46016e2b88e4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULSPRAAoJEHSBCwEjRsmmHG4H/1rcI8F2uFglE/yJql1rM8B/\nE1/BnQoDTR6FdArcz8LT9yd5SGeFCDiAoRKTBsI+A1SzyJmG7ManV3BKsudZ7MY/\n+hu3o9w4hvvg/kgfcGIG6wLkA5z5ux1YzugyFbMH0iZS5ZPeiiMLB5C1r4wLUM8/\nl2dULE+7Vdtg5TmXUfacgb23mooTO+5eNPH5xLjoAoyX9p85/+qO+65w0a60we18\nvuMMST9mpULkEp5U/vHYKAFSyr3qMO5efXCR8EsI/SQGOHm03a+M6iyWujRIrsAs\nJjo+stZ6/J28p+NRkmJeYCRg19pruW47zPPBjGmPpeRiLOB3WnFgwv8ZJq4KUrE=\n=3bHA\n-----END PGP SIGNATURE-----",
        "payload": "tree 627c5ab2bb7244573f2cfd061aa89a657ac92206\nparent b76a767906976f21520fff3a1bbee8698c9eb5e4\nparent 0dcb0a55782d676798013f20d7e2ab826ad4d96d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412244380 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412244433 +0200\n\nMerge pull request #4991\n\n0dcb0a5 doc: Add instructions for consistent Mac OS X build names (Saivann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dc37e7a49a3b1ed61869331561d46016e2b88e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2dc37e7a49a3b1ed61869331561d46016e2b88e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dc37e7a49a3b1ed61869331561d46016e2b88e4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b76a767906976f21520fff3a1bbee8698c9eb5e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b76a767906976f21520fff3a1bbee8698c9eb5e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b76a767906976f21520fff3a1bbee8698c9eb5e4"
      },
      {
        "sha": "0dcb0a55782d676798013f20d7e2ab826ad4d96d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dcb0a55782d676798013f20d7e2ab826ad4d96d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0dcb0a55782d676798013f20d7e2ab826ad4d96d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7699af90bdd87b5dd9cc5311cce60d0a893d21d8",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2dc37e7a49a3b1ed61869331561d46016e2b88e4/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2dc37e7a49a3b1ed61869331561d46016e2b88e4/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=2dc37e7a49a3b1ed61869331561d46016e2b88e4",
        "patch": "@@ -154,6 +154,10 @@ repackage gitian builds for release as stand-alone zip/tar/installer exe\n \tzip -r bitcoin-${VERSION}-win.zip bitcoin-${VERSION}-win\n \trm -rf bitcoin-${VERSION}-win\n \n+**Mac OS X .dmg:**\n+\n+\tmv Bitcoin-Qt.dmg bitcoin-${VERSION}-osx.dmg\n+\n ###Next steps:\n \n Commit your signature to gitian.sigs:"
      }
    ]
  },
  {
    "sha": "f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGZkMDBjYjc3ZDkxZWM5YWM3MjliYzRjZjM1ZmY3ZDlmNjc2ZDhm",
    "commit": {
      "author": {
        "name": "SergioDemianLerner",
        "email": "Sergio.d.Lerner@gmail.com",
        "date": "2014-09-04T19:23:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T11:51:39Z"
      },
      "message": "Switch testing framework from MAIN to new UNITTEST network\n\nUNITTEST inherites from MAIN but allows synamically changing its parameters using the ModifiableParams() interface",
      "tree": {
        "sha": "a7c6249b856c74dd8600c8244ea9e8331d74eb6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7c6249b856c74dd8600c8244ea9e8331d74eb6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/comments",
    "author": {
      "login": "SergioDemianLerner",
      "id": 1752347,
      "node_id": "MDQ6VXNlcjE3NTIzNDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1752347?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SergioDemianLerner",
      "html_url": "https://github.com/SergioDemianLerner",
      "followers_url": "https://api.github.com/users/SergioDemianLerner/followers",
      "following_url": "https://api.github.com/users/SergioDemianLerner/following{/other_user}",
      "gists_url": "https://api.github.com/users/SergioDemianLerner/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SergioDemianLerner/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SergioDemianLerner/subscriptions",
      "organizations_url": "https://api.github.com/users/SergioDemianLerner/orgs",
      "repos_url": "https://api.github.com/users/SergioDemianLerner/repos",
      "events_url": "https://api.github.com/users/SergioDemianLerner/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SergioDemianLerner/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d132431b4f6a7676482815231cd923d9047d541",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d132431b4f6a7676482815231cd923d9047d541",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d132431b4f6a7676482815231cd923d9047d541"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 97,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8a00da0bb51fad9055cb4994b85a87e0d84b16dd",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -214,8 +214,50 @@ class CRegTestParams : public CTestNetParams {\n };\n static CRegTestParams regTestParams;\n \n+//\n+// Unit test\n+//\n+class CUnitTestParams : public CMainParams, public CModifiableParams {\n+public:\n+    CUnitTestParams() {\n+        networkID = CBaseChainParams::UNITTEST;\n+        strNetworkID = \"unittest\";\n+        nDefaultPort = 18445;\n+        vFixedSeeds.clear();\n+        vSeeds.clear();  // Regtest mode doesn't have any DNS seeds.\n+\n+        fRequireRPCPassword = false;\n+        fMiningRequiresPeers = false;\n+        fDefaultCheckMemPool = true;\n+        fAllowMinDifficultyBlocks = false;\n+        fMineBlocksOnDemand = true;\n+        fSkipProofOfWorkCheck = false;\n+    }\n+    virtual bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n+protected:\n+    bool fSkipProofOfWorkCheck;\n+public:\n+    // Published setters to allow changing values in unit test cases\n+    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }\n+    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }\n+    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)  { nRejectBlockOutdatedMajority=anRejectBlockOutdatedMajority; }\n+    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)  { nToCheckBlockUpgradeMajority=anToCheckBlockUpgradeMajority; }\n+    virtual void setDefaultCheckMemPool(bool afDefaultCheckMemPool)  { fDefaultCheckMemPool=afDefaultCheckMemPool; }\n+    virtual void setAllowMinDifficultyBlocks(bool afAllowMinDifficultyBlocks) {  fAllowMinDifficultyBlocks=afAllowMinDifficultyBlocks; }\n+    virtual void setSkipProofOfWorkCheck(bool afSkipProofOfWorkCheck) { fSkipProofOfWorkCheck = afSkipProofOfWorkCheck; }\n+};\n+static CUnitTestParams unitTestParams;\n+\n+\n static CChainParams *pCurrentParams = 0;\n \n+CModifiableParams *ModifiableParams()\n+{\n+   assert(pCurrentParams);\n+   assert(pCurrentParams==&unitTestParams);\n+   return (CModifiableParams*)&unitTestParams;\n+}\n+\n const CChainParams &Params() {\n     assert(pCurrentParams);\n     return *pCurrentParams;\n@@ -229,6 +271,8 @@ CChainParams &Params(CBaseChainParams::Network network) {\n             return testNetParams;\n         case CBaseChainParams::REGTEST:\n             return regTestParams;\n+        case CBaseChainParams::UNITTEST:\n+            return unitTestParams;\n         default:\n             assert(false && \"Unimplemented network\");\n             return mainParams;"
      },
      {
        "sha": "171a590a5f37cae1718b4871196077e766c08200",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -61,6 +61,8 @@ class CChainParams\n     bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n     /* Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n+    /* Skip proof-of-work check: allow mining of any difficulty block */\n+    virtual bool SkipProofOfWorkCheck() const { return false; }\n     /* Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n@@ -105,6 +107,24 @@ class CChainParams\n     bool fMineBlocksOnDemand;\n };\n \n+/** Modifiable parameters interface is used by test cases to adapt the parameters in order\n+*** to test specific features more easily. Test cases should always restore the previous\n+*** values after finalization.\n+**/\n+\n+class CModifiableParams {\n+public:\n+    // Published setters to allow changing values in unit test cases\n+    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval) =0;\n+    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)=0;\n+    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)=0;\n+    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)=0;\n+    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)=0;\n+    virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks)=0;\n+    virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck)=0;\n+};\n+\n+\n /**\n  * Return the currently selected parameters. This won't change after app startup\n  * outside of the unit tests.\n@@ -114,6 +134,9 @@ const CChainParams &Params();\n /** Return parameters for the given network. */\n CChainParams &Params(CBaseChainParams::Network network);\n \n+/** Get modifyable network parameters (UNITTEST only) */\n+CModifiableParams *ModifiableParams();\n+\n /** Sets the params returned by Params() to those for the given network. */\n void SelectParams(CBaseChainParams::Network network);\n "
      },
      {
        "sha": "e9d63197bd398cff251b3f34eb8297640e53eca5",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -57,6 +57,20 @@ class CBaseRegTestParams : public CBaseTestNetParams\n };\n static CBaseRegTestParams regTestParams;\n \n+//\n+// Unit test\n+//\n+class CBaseUnitTestParams : public CBaseMainParams\n+{\n+public:\n+    CBaseUnitTestParams()\n+    {\n+        networkID = CBaseChainParams::UNITTEST;\n+        strDataDir = \"unittest\";\n+    }\n+};\n+static CBaseUnitTestParams unitTestParams;\n+\n static CBaseChainParams* pCurrentBaseParams = 0;\n \n const CBaseChainParams& BaseParams()\n@@ -77,6 +91,9 @@ void SelectBaseParams(CBaseChainParams::Network network)\n     case CBaseChainParams::REGTEST:\n         pCurrentBaseParams = &regTestParams;\n         break;\n+    case CBaseChainParams::UNITTEST:\n+        pCurrentBaseParams = &unitTestParams;\n+        break;\n     default:\n         assert(false && \"Unimplemented network\");\n         return;"
      },
      {
        "sha": "cc154cf5012f1147c0c4351aefe0b166ee2f82de",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -19,6 +19,7 @@ class CBaseChainParams\n         MAIN,\n         TESTNET,\n         REGTEST,\n+        UNITTEST,\n \n         MAX_NETWORK_TYPES\n     };"
      },
      {
        "sha": "9a6bc05e63d916ece811fbbe90ebe2b2ab58bfb3",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -88,6 +88,8 @@ namespace Checkpoints {\n             return dataTestnet;\n         else if (Params().NetworkID() == CBaseChainParams::MAIN)\n             return data;\n+        else if (Params().NetworkID() == CBaseChainParams::UNITTEST) // UnitTest share the same checkpoints as MAIN\n+            return data;\n         else\n             return dataRegtest;\n     }"
      },
      {
        "sha": "55485c86ff557f0e54bfe1e2691ec90d0979bd96",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -2305,7 +2305,8 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n-        if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        if ((!Params().SkipProofOfWorkCheck()) &&\n+           (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n             return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n                              REJECT_INVALID, \"bad-diffbits\");\n "
      },
      {
        "sha": "d50222849cc0c0bc4acfce88a93ecb737b66a462",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -81,6 +81,10 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bool fNegative;\n     bool fOverflow;\n     uint256 bnTarget;\n+\n+    if (Params().SkipProofOfWorkCheck())\n+       return true;\n+\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range"
      },
      {
        "sha": "c298c805dae375a5c4e0c2edb35374cbaae7706b",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that generated keys match test vectors\n@@ -243,7 +243,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     CTxDestination nodest = CNoDestination();\n     BOOST_CHECK(!dummyAddr.Set(nodest));\n \n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that base58 parsing code is robust against a variety of corrupted data"
      },
      {
        "sha": "bad5c13ac2b67541fddfd0d602d00317b404a2bb",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -253,6 +253,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);\n+    mempool.clear();\n \n     BOOST_FOREACH(CTransaction *tx, txFirst)\n         delete tx;"
      },
      {
        "sha": "6e5f0e3facc90bbfbfd8eb76cbbaf6db3dc807a1",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "patch": "@@ -31,7 +31,7 @@ struct TestingSetup {\n \n     TestingSetup() {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n-        SelectParams(CBaseChainParams::MAIN);\n+        SelectParams(CBaseChainParams::UNITTEST);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();"
      }
    ]
  },
  {
    "sha": "fbd36d8fb5245a5511b2db7a35270fb1250e21d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYmQzNmQ4ZmI1MjQ1YTU1MTFiMmRiN2EzNTI3MGZiMTI1MGUyMWQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-09-29T11:13:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T11:54:26Z"
      },
      "message": "Avoid introducing a virtual into CChainParams\n\nTreat fSkipProofOfWorkCheck the same as other parameters.",
      "tree": {
        "sha": "dc789112db6935d255a88fd457bd2cb77e65f488",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc789112db6935d255a88fd457bd2cb77e65f488"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fbd36d8fb5245a5511b2db7a35270fb1250e21d5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULTzzAAoJEHSBCwEjRsmmjDYH/2i0c7Jv9YAXRv4htelWpS4X\ntglC82YPSJrhYx+MtioTR5bZjboffRlK0a4YI1UaHTy/8/7CcjvQ4HWhOERqcprk\nRYU24SaMFa9bDfJ6PTWZIXtwDCn9Lhgm1N9qtkXWvW5p2axMFvKTLK6DSmSYR4Lc\n7PP+E/PmZiPrXeyZduzS9/SbulxEc9TgFYMf2Lk6uV8Ql2LgUTUcV5HuX5XaGCbX\namZTGsM44Ys6lzRtXRw5UUFsASyHzy4erLCVUSUOO0LsS41oHUJLAh9jsQ8+m4na\nx8m16pUiqTuz1Y3J3IgEmLH2ncorm7YqLF1ouJ9LGj7TcWmggBgwsHGRwB03Vuc=\n=C127\n-----END PGP SIGNATURE-----",
        "payload": "tree dc789112db6935d255a88fd457bd2cb77e65f488\nparent f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1411989227 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412250866 +0200\n\nAvoid introducing a virtual into CChainParams\n\nTreat fSkipProofOfWorkCheck the same as other parameters.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbd36d8fb5245a5511b2db7a35270fb1250e21d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fbd36d8fb5245a5511b2db7a35270fb1250e21d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbd36d8fb5245a5511b2db7a35270fb1250e21d5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0fd00cb77d91ec9ac729bc4cf35ff7d9f676d8f"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "31c67715c87fd3c04828299e7fa0a7eae7e0a41b",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbd36d8fb5245a5511b2db7a35270fb1250e21d5/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbd36d8fb5245a5511b2db7a35270fb1250e21d5/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=fbd36d8fb5245a5511b2db7a35270fb1250e21d5",
        "patch": "@@ -115,6 +115,7 @@ class CMainParams : public CChainParams {\n         fAllowMinDifficultyBlocks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n+        fSkipProofOfWorkCheck = false;\n     }\n };\n static CMainParams mainParams;\n@@ -231,11 +232,7 @@ class CUnitTestParams : public CMainParams, public CModifiableParams {\n         fDefaultCheckMemPool = true;\n         fAllowMinDifficultyBlocks = false;\n         fMineBlocksOnDemand = true;\n-        fSkipProofOfWorkCheck = false;\n     }\n-    virtual bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n-protected:\n-    bool fSkipProofOfWorkCheck;\n public:\n     // Published setters to allow changing values in unit test cases\n     virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }"
      },
      {
        "sha": "50441a89f3de1868e1657da836e8ad550819e9e1",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fbd36d8fb5245a5511b2db7a35270fb1250e21d5/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fbd36d8fb5245a5511b2db7a35270fb1250e21d5/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=fbd36d8fb5245a5511b2db7a35270fb1250e21d5",
        "patch": "@@ -62,7 +62,7 @@ class CChainParams\n     /* Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n     /* Skip proof-of-work check: allow mining of any difficulty block */\n-    virtual bool SkipProofOfWorkCheck() const { return false; }\n+    bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n     /* Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n@@ -105,6 +105,7 @@ class CChainParams\n     bool fAllowMinDifficultyBlocks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n+    bool fSkipProofOfWorkCheck;\n };\n \n /** Modifiable parameters interface is used by test cases to adapt the parameters in order"
      }
    ]
  },
  {
    "sha": "45c41c05a0d6f173f50045eac90a3008fcba8033",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWM0MWMwNWEwZDZmMTczZjUwMDQ1ZWFjOTBhMzAwOGZjYmE4MDMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T13:27:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T13:28:27Z"
      },
      "message": "Merge pull request #5030\n\nfbd36d8 Avoid introducing a virtual into CChainParams (Wladimir J. van der Laan)\nf0fd00c Switch testing framework from MAIN to new UNITTEST network (SergioDemianLerner)",
      "tree": {
        "sha": "09b962d33a59e925b6fdb1d4df173f616af26e1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09b962d33a59e925b6fdb1d4df173f616af26e1e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45c41c05a0d6f173f50045eac90a3008fcba8033",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULVL7AAoJEHSBCwEjRsmmc9UH/jecu8VjudieNlfTMuX8AAsm\ndthPIEs0xoi5q6CQGwpsZHopXyoIQkGRA3+w54RkKgKuqfv4Wv2fmEfIM5kWS/3d\nyfZDo87/hhPxV46gYYWsqgT5gelLuj9aIRbcZbH8defKlty4c11d1i/+sufM7Saz\ngYh2UFafX5lt0nH2LISAb3cWIRTYioF5ZuljS4ExdbH3nBJYszM2hrsv29Yf8uvh\ntAAAOYZU9kjcBCWTNZ48wglZLmINqi+n2uCbcqapGhkw+SzKMxKVRqzFMTTALe8N\nQ1grGBrlgbzd2NdKGTOQhynugxuc8TSvVGvz71fukQUtsWXNhETIpKAbUjE59q8=\n=eFDu\n-----END PGP SIGNATURE-----",
        "payload": "tree 09b962d33a59e925b6fdb1d4df173f616af26e1e\nparent 2dc37e7a49a3b1ed61869331561d46016e2b88e4\nparent fbd36d8fb5245a5511b2db7a35270fb1250e21d5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412256474 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412256507 +0200\n\nMerge pull request #5030\n\nfbd36d8 Avoid introducing a virtual into CChainParams (Wladimir J. van der Laan)\nf0fd00c Switch testing framework from MAIN to new UNITTEST network (SergioDemianLerner)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45c41c05a0d6f173f50045eac90a3008fcba8033",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45c41c05a0d6f173f50045eac90a3008fcba8033",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45c41c05a0d6f173f50045eac90a3008fcba8033/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2dc37e7a49a3b1ed61869331561d46016e2b88e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2dc37e7a49a3b1ed61869331561d46016e2b88e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2dc37e7a49a3b1ed61869331561d46016e2b88e4"
      },
      {
        "sha": "fbd36d8fb5245a5511b2db7a35270fb1250e21d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbd36d8fb5245a5511b2db7a35270fb1250e21d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbd36d8fb5245a5511b2db7a35270fb1250e21d5"
      }
    ],
    "stats": {
      "total": 99,
      "additions": 95,
      "deletions": 4
    },
    "files": [
      {
        "sha": "31c67715c87fd3c04828299e7fa0a7eae7e0a41b",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c41c05a0d6f173f50045eac90a3008fcba8033/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c41c05a0d6f173f50045eac90a3008fcba8033/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=45c41c05a0d6f173f50045eac90a3008fcba8033",
        "patch": "@@ -115,6 +115,7 @@ class CMainParams : public CChainParams {\n         fAllowMinDifficultyBlocks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n+        fSkipProofOfWorkCheck = false;\n     }\n };\n static CMainParams mainParams;\n@@ -214,8 +215,46 @@ class CRegTestParams : public CTestNetParams {\n };\n static CRegTestParams regTestParams;\n \n+//\n+// Unit test\n+//\n+class CUnitTestParams : public CMainParams, public CModifiableParams {\n+public:\n+    CUnitTestParams() {\n+        networkID = CBaseChainParams::UNITTEST;\n+        strNetworkID = \"unittest\";\n+        nDefaultPort = 18445;\n+        vFixedSeeds.clear();\n+        vSeeds.clear();  // Regtest mode doesn't have any DNS seeds.\n+\n+        fRequireRPCPassword = false;\n+        fMiningRequiresPeers = false;\n+        fDefaultCheckMemPool = true;\n+        fAllowMinDifficultyBlocks = false;\n+        fMineBlocksOnDemand = true;\n+    }\n+public:\n+    // Published setters to allow changing values in unit test cases\n+    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }\n+    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }\n+    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)  { nRejectBlockOutdatedMajority=anRejectBlockOutdatedMajority; }\n+    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)  { nToCheckBlockUpgradeMajority=anToCheckBlockUpgradeMajority; }\n+    virtual void setDefaultCheckMemPool(bool afDefaultCheckMemPool)  { fDefaultCheckMemPool=afDefaultCheckMemPool; }\n+    virtual void setAllowMinDifficultyBlocks(bool afAllowMinDifficultyBlocks) {  fAllowMinDifficultyBlocks=afAllowMinDifficultyBlocks; }\n+    virtual void setSkipProofOfWorkCheck(bool afSkipProofOfWorkCheck) { fSkipProofOfWorkCheck = afSkipProofOfWorkCheck; }\n+};\n+static CUnitTestParams unitTestParams;\n+\n+\n static CChainParams *pCurrentParams = 0;\n \n+CModifiableParams *ModifiableParams()\n+{\n+   assert(pCurrentParams);\n+   assert(pCurrentParams==&unitTestParams);\n+   return (CModifiableParams*)&unitTestParams;\n+}\n+\n const CChainParams &Params() {\n     assert(pCurrentParams);\n     return *pCurrentParams;\n@@ -229,6 +268,8 @@ CChainParams &Params(CBaseChainParams::Network network) {\n             return testNetParams;\n         case CBaseChainParams::REGTEST:\n             return regTestParams;\n+        case CBaseChainParams::UNITTEST:\n+            return unitTestParams;\n         default:\n             assert(false && \"Unimplemented network\");\n             return mainParams;"
      },
      {
        "sha": "50441a89f3de1868e1657da836e8ad550819e9e1",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c41c05a0d6f173f50045eac90a3008fcba8033/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c41c05a0d6f173f50045eac90a3008fcba8033/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=45c41c05a0d6f173f50045eac90a3008fcba8033",
        "patch": "@@ -61,6 +61,8 @@ class CChainParams\n     bool DefaultCheckMemPool() const { return fDefaultCheckMemPool; }\n     /* Allow mining of a min-difficulty block */\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n+    /* Skip proof-of-work check: allow mining of any difficulty block */\n+    bool SkipProofOfWorkCheck() const { return fSkipProofOfWorkCheck; }\n     /* Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t TargetTimespan() const { return nTargetTimespan; }\n@@ -103,8 +105,27 @@ class CChainParams\n     bool fAllowMinDifficultyBlocks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n+    bool fSkipProofOfWorkCheck;\n };\n \n+/** Modifiable parameters interface is used by test cases to adapt the parameters in order\n+*** to test specific features more easily. Test cases should always restore the previous\n+*** values after finalization.\n+**/\n+\n+class CModifiableParams {\n+public:\n+    // Published setters to allow changing values in unit test cases\n+    virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval) =0;\n+    virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)=0;\n+    virtual void setRejectBlockOutdatedMajority(int anRejectBlockOutdatedMajority)=0;\n+    virtual void setToCheckBlockUpgradeMajority(int anToCheckBlockUpgradeMajority)=0;\n+    virtual void setDefaultCheckMemPool(bool aDefaultCheckMemPool)=0;\n+    virtual void setAllowMinDifficultyBlocks(bool aAllowMinDifficultyBlocks)=0;\n+    virtual void setSkipProofOfWorkCheck(bool aSkipProofOfWorkCheck)=0;\n+};\n+\n+\n /**\n  * Return the currently selected parameters. This won't change after app startup\n  * outside of the unit tests.\n@@ -114,6 +135,9 @@ const CChainParams &Params();\n /** Return parameters for the given network. */\n CChainParams &Params(CBaseChainParams::Network network);\n \n+/** Get modifyable network parameters (UNITTEST only) */\n+CModifiableParams *ModifiableParams();\n+\n /** Sets the params returned by Params() to those for the given network. */\n void SelectParams(CBaseChainParams::Network network);\n "
      },
      {
        "sha": "e9d63197bd398cff251b3f34eb8297640e53eca5",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c41c05a0d6f173f50045eac90a3008fcba8033/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c41c05a0d6f173f50045eac90a3008fcba8033/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=45c41c05a0d6f173f50045eac90a3008fcba8033",
        "patch": "@@ -57,6 +57,20 @@ class CBaseRegTestParams : public CBaseTestNetParams\n };\n static CBaseRegTestParams regTestParams;\n \n+//\n+// Unit test\n+//\n+class CBaseUnitTestParams : public CBaseMainParams\n+{\n+public:\n+    CBaseUnitTestParams()\n+    {\n+        networkID = CBaseChainParams::UNITTEST;\n+        strDataDir = \"unittest\";\n+    }\n+};\n+static CBaseUnitTestParams unitTestParams;\n+\n static CBaseChainParams* pCurrentBaseParams = 0;\n \n const CBaseChainParams& BaseParams()\n@@ -77,6 +91,9 @@ void SelectBaseParams(CBaseChainParams::Network network)\n     case CBaseChainParams::REGTEST:\n         pCurrentBaseParams = &regTestParams;\n         break;\n+    case CBaseChainParams::UNITTEST:\n+        pCurrentBaseParams = &unitTestParams;\n+        break;\n     default:\n         assert(false && \"Unimplemented network\");\n         return;"
      },
      {
        "sha": "cc154cf5012f1147c0c4351aefe0b166ee2f82de",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c41c05a0d6f173f50045eac90a3008fcba8033/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c41c05a0d6f173f50045eac90a3008fcba8033/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=45c41c05a0d6f173f50045eac90a3008fcba8033",
        "patch": "@@ -19,6 +19,7 @@ class CBaseChainParams\n         MAIN,\n         TESTNET,\n         REGTEST,\n+        UNITTEST,\n \n         MAX_NETWORK_TYPES\n     };"
      },
      {
        "sha": "9a6bc05e63d916ece811fbbe90ebe2b2ab58bfb3",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c41c05a0d6f173f50045eac90a3008fcba8033/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c41c05a0d6f173f50045eac90a3008fcba8033/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=45c41c05a0d6f173f50045eac90a3008fcba8033",
        "patch": "@@ -88,6 +88,8 @@ namespace Checkpoints {\n             return dataTestnet;\n         else if (Params().NetworkID() == CBaseChainParams::MAIN)\n             return data;\n+        else if (Params().NetworkID() == CBaseChainParams::UNITTEST) // UnitTest share the same checkpoints as MAIN\n+            return data;\n         else\n             return dataRegtest;\n     }"
      },
      {
        "sha": "55485c86ff557f0e54bfe1e2691ec90d0979bd96",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c41c05a0d6f173f50045eac90a3008fcba8033/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c41c05a0d6f173f50045eac90a3008fcba8033/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=45c41c05a0d6f173f50045eac90a3008fcba8033",
        "patch": "@@ -2305,7 +2305,8 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n-        if (block.nBits != GetNextWorkRequired(pindexPrev, &block))\n+        if ((!Params().SkipProofOfWorkCheck()) &&\n+           (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n             return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n                              REJECT_INVALID, \"bad-diffbits\");\n "
      },
      {
        "sha": "d50222849cc0c0bc4acfce88a93ecb737b66a462",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c41c05a0d6f173f50045eac90a3008fcba8033/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c41c05a0d6f173f50045eac90a3008fcba8033/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=45c41c05a0d6f173f50045eac90a3008fcba8033",
        "patch": "@@ -81,6 +81,10 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     bool fNegative;\n     bool fOverflow;\n     uint256 bnTarget;\n+\n+    if (Params().SkipProofOfWorkCheck())\n+       return true;\n+\n     bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n \n     // Check range"
      },
      {
        "sha": "c298c805dae375a5c4e0c2edb35374cbaae7706b",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c41c05a0d6f173f50045eac90a3008fcba8033/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c41c05a0d6f173f50045eac90a3008fcba8033/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=45c41c05a0d6f173f50045eac90a3008fcba8033",
        "patch": "@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_parse)\n             BOOST_CHECK_MESSAGE(!secret.IsValid(), \"IsValid pubkey as privkey:\" + strTest);\n         }\n     }\n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that generated keys match test vectors\n@@ -243,7 +243,7 @@ BOOST_AUTO_TEST_CASE(base58_keys_valid_gen)\n     CTxDestination nodest = CNoDestination();\n     BOOST_CHECK(!dummyAddr.Set(nodest));\n \n-    SelectParams(CBaseChainParams::MAIN);\n+    SelectParams(CBaseChainParams::UNITTEST);\n }\n \n // Goal: check that base58 parsing code is robust against a variety of corrupted data"
      },
      {
        "sha": "bad5c13ac2b67541fddfd0d602d00317b404a2bb",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c41c05a0d6f173f50045eac90a3008fcba8033/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c41c05a0d6f173f50045eac90a3008fcba8033/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=45c41c05a0d6f173f50045eac90a3008fcba8033",
        "patch": "@@ -253,6 +253,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);\n+    mempool.clear();\n \n     BOOST_FOREACH(CTransaction *tx, txFirst)\n         delete tx;"
      },
      {
        "sha": "6e5f0e3facc90bbfbfd8eb76cbbaf6db3dc807a1",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45c41c05a0d6f173f50045eac90a3008fcba8033/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45c41c05a0d6f173f50045eac90a3008fcba8033/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=45c41c05a0d6f173f50045eac90a3008fcba8033",
        "patch": "@@ -31,7 +31,7 @@ struct TestingSetup {\n \n     TestingSetup() {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n-        SelectParams(CBaseChainParams::MAIN);\n+        SelectParams(CBaseChainParams::UNITTEST);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();"
      }
    ]
  },
  {
    "sha": "4b73b758a388dae63aa68a5aabaa7ff493d64bc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjczYjc1OGEzODhkYWU2M2FhNjhhNWFhYmFhN2ZmNDkzZDY0YmMy",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-10-02T15:48:21Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-10-02T15:49:13Z"
      },
      "message": "Merge pull request #5026\n\ndd367ff build: macdeploy: filter out irrelevant qt5 frameworks and dylibs (Cory Fields)\n9fedafb build: Fix OSX build when using Homebrew and qt5 (Cory Fields)\n\nSigned-off-by: Gavin Andresen <gavinandresen@gmail.com>",
      "tree": {
        "sha": "1dc7e53637c08f847846b45d132252a1001e4b33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1dc7e53637c08f847846b45d132252a1001e4b33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b73b758a388dae63aa68a5aabaa7ff493d64bc2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlQtc/kACgkQdYgkL74406gPJQCeI+10bAsN4UpfM5Uv3fqJpjAr\nJRYAoJ2zKyLNLmhRlF6bVSMhYNRVY7xc\n=bWlD\n-----END PGP SIGNATURE-----",
        "payload": "tree 1dc7e53637c08f847846b45d132252a1001e4b33\nparent 45c41c05a0d6f173f50045eac90a3008fcba8033\nparent dd367ff8c93c2f9e112a324f5cd737c7fa7a2ffa\nauthor Gavin Andresen <gavinandresen@gmail.com> 1412264901 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1412264953 -0400\n\nMerge pull request #5026\n\ndd367ff build: macdeploy: filter out irrelevant qt5 frameworks and dylibs (Cory Fields)\n9fedafb build: Fix OSX build when using Homebrew and qt5 (Cory Fields)\n\nSigned-off-by: Gavin Andresen <gavinandresen@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b73b758a388dae63aa68a5aabaa7ff493d64bc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b73b758a388dae63aa68a5aabaa7ff493d64bc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b73b758a388dae63aa68a5aabaa7ff493d64bc2/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45c41c05a0d6f173f50045eac90a3008fcba8033",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45c41c05a0d6f173f50045eac90a3008fcba8033",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45c41c05a0d6f173f50045eac90a3008fcba8033"
      },
      {
        "sha": "dd367ff8c93c2f9e112a324f5cd737c7fa7a2ffa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd367ff8c93c2f9e112a324f5cd737c7fa7a2ffa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd367ff8c93c2f9e112a324f5cd737c7fa7a2ffa"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 49,
      "deletions": 9
    },
    "files": [
      {
        "sha": "71b1484894ca1236c2c3282c99a1ee268d3b4f4e",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b73b758a388dae63aa68a5aabaa7ff493d64bc2/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b73b758a388dae63aa68a5aabaa7ff493d64bc2/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=4b73b758a388dae63aa68a5aabaa7ff493d64bc2",
        "patch": "@@ -152,6 +152,13 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   fi\n   CPPFLAGS=$TEMP_CPPFLAGS\n   ])\n+\n+  if test x$use_pkgconfig$qt_bin_path = xyes; then\n+    if test x$bitcoin_qt_got_major_vers = x5; then\n+      qt_bin_path=\"`$PKG_CONFIG --variable=host_bins Qt5Core 2>/dev/null`\"\n+    fi\n+  fi\n+\n   BITCOIN_QT_PATH_PROGS([MOC], [moc-qt${bitcoin_qt_got_major_vers} moc${bitcoin_qt_got_major_vers} moc], $qt_bin_path)\n   BITCOIN_QT_PATH_PROGS([UIC], [uic-qt${bitcoin_qt_got_major_vers} uic${bitcoin_qt_got_major_vers} uic], $qt_bin_path)\n   BITCOIN_QT_PATH_PROGS([RCC], [rcc-qt${bitcoin_qt_got_major_vers} rcc${bitcoin_qt_got_major_vers} rcc], $qt_bin_path)"
      },
      {
        "sha": "abf9f39e65f015e928f328040b3a00cc585bdff1",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 19,
        "deletions": 6,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b73b758a388dae63aa68a5aabaa7ff493d64bc2/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b73b758a388dae63aa68a5aabaa7ff493d64bc2/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=4b73b758a388dae63aa68a5aabaa7ff493d64bc2",
        "patch": "@@ -240,12 +240,25 @@ case $host in\n \n        AC_CHECK_PROG([BREW],brew, brew)\n        if test x$BREW = xbrew; then\n-         dnl add default homebrew paths\n-         openssl_prefix=`$BREW --prefix openssl`\n-         bdb_prefix=`$BREW --prefix berkeley-db4`\n-         export PKG_CONFIG_PATH=\"$openssl_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n-         CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"\n-         LIBS=\"$LIBS -L$bdb_prefix/lib\"\n+         dnl These Homebrew packages may be bottled, meaning that they won't be found\n+         dnl in expected paths because they may conflict with system files. Ask\n+         dnl Homebrew where each one is located, then adjust paths accordingly.\n+         dnl It's safe to add these paths even if the functionality is disabled by\n+         dnl the user (--without-wallet or --without-gui for example).\n+\n+         openssl_prefix=`$BREW --prefix openssl 2>/dev/null`\n+         bdb_prefix=`$BREW --prefix berkeley-db4 2>/dev/null`\n+         qt5_prefix=`$BREW --prefix qt5 2>/dev/null`\n+         if test x$openssl_prefix != x; then\n+           export PKG_CONFIG_PATH=\"$openssl_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+         fi\n+         if test x$bdb_prefix != x; then\n+           CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"\n+           LIBS=\"$LIBS -L$bdb_prefix/lib\"\n+         fi\n+         if test x$qt5_prefix != x; then\n+           export PKG_CONFIG_PATH=\"$qt5_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+         fi\n        fi\n      else\n        case $build_os in"
      },
      {
        "sha": "541136001fceec61ab47277979332e620468ac74",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 23,
        "deletions": 3,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b73b758a388dae63aa68a5aabaa7ff493d64bc2/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b73b758a388dae63aa68a5aabaa7ff493d64bc2/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=4b73b758a388dae63aa68a5aabaa7ff493d64bc2",
        "patch": "@@ -393,15 +393,31 @@ def deployPlugins(appBundleInfo, deploymentInfo, strip, verbose):\n             # Deploy the script plugins only if QtScript is in use\n             if not deploymentInfo.usesFramework(\"QtScript\"):\n                 continue\n-        elif pluginDirectory == \"qmltooling\":\n+        elif pluginDirectory == \"qmltooling\" or pluginDirectory == \"qml1tooling\":\n             # Deploy the qml plugins only if QtDeclarative is in use\n             if not deploymentInfo.usesFramework(\"QtDeclarative\"):\n                 continue\n         elif pluginDirectory == \"bearer\":\n             # Deploy the bearer plugins only if QtNetwork is in use\n             if not deploymentInfo.usesFramework(\"QtNetwork\"):\n                 continue\n-        \n+        elif pluginDirectory == \"position\":\n+            # Deploy the position plugins only if QtPositioning is in use\n+            if not deploymentInfo.usesFramework(\"QtPositioning\"):\n+                continue\n+        elif pluginDirectory == \"sensors\" or pluginDirectory == \"sensorgestures\":\n+            # Deploy the sensor plugins only if QtSensors is in use\n+            if not deploymentInfo.usesFramework(\"QtSensors\"):\n+                continue\n+        elif pluginDirectory == \"audio\" or pluginDirectory == \"playlistformats\":\n+            # Deploy the audio plugins only if QtMultimedia is in use\n+            if not deploymentInfo.usesFramework(\"QtMultimedia\"):\n+                continue\n+        elif pluginDirectory == \"mediaservice\":\n+            # Deploy the mediaservice plugins only if QtMultimediaWidgets is in use\n+            if not deploymentInfo.usesFramework(\"QtMultimediaWidgets\"):\n+                continue\n+\n         for pluginName in filenames:\n             pluginPath = os.path.join(pluginDirectory, pluginName)\n             if pluginName.endswith(\"_debug.dylib\"):\n@@ -419,7 +435,11 @@ def deployPlugins(appBundleInfo, deploymentInfo, strip, verbose):\n                 # Deploy the opengl graphicssystem plugin only if QtOpenGL is in use\n                 if not deploymentInfo.usesFramework(\"QtOpenGL\"):\n                     continue\n-            \n+            elif pluginPath == \"accessible/libqtaccessiblequick.dylib\":\n+                # Deploy the accessible qtquick plugin only if QtQuick is in use\n+                if not deploymentInfo.usesFramework(\"QtQuick\"):\n+                    continue\n+\n             plugins.append((pluginDirectory, pluginName))\n     \n     for pluginDirectory, pluginName in plugins:"
      }
    ]
  },
  {
    "sha": "31d6390fd17803ab9870e239a0c0c4d0a6be5c68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWQ2MzkwZmQxNzgwM2FiOTg3MGUyMzlhMGMwYzRkMGE2YmU1YzY4",
    "commit": {
      "author": {
        "name": "Eric Shaw",
        "email": "ericshaw.linux@gmail.com",
        "date": "2014-09-25T22:39:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T17:21:46Z"
      },
      "message": "Fixed setaccount accepting foreign address\n\nFixed issue #4209 where using setaccount with a foreign\naddress causes the address to be added to your receiving addresses.",
      "tree": {
        "sha": "1c07e8e8639e5dc9f6a0d7eb48fe7f3ac510700b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c07e8e8639e5dc9f6a0d7eb48fe7f3ac510700b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31d6390fd17803ab9870e239a0c0c4d0a6be5c68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d6390fd17803ab9870e239a0c0c4d0a6be5c68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31d6390fd17803ab9870e239a0c0c4d0a6be5c68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d6390fd17803ab9870e239a0c0c4d0a6be5c68/comments",
    "author": null,
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b2b78b9f2bd339cc4505996258e00c186e91792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b2b78b9f2bd339cc4505996258e00c186e91792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b2b78b9f2bd339cc4505996258e00c186e91792"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 18,
      "deletions": 9
    },
    "files": [
      {
        "sha": "b361e67911e49c833509b1a782d087b1886a35b5",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d6390fd17803ab9870e239a0c0c4d0a6be5c68/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d6390fd17803ab9870e239a0c0c4d0a6be5c68/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=31d6390fd17803ab9870e239a0c0c4d0a6be5c68",
        "patch": "@@ -230,15 +230,20 @@ Value setaccount(const Array& params, bool fHelp)\n     if (params.size() > 1)\n         strAccount = AccountFromValue(params[1]);\n \n-    // Detect when changing the account of an address that is the 'unused current key' of another account:\n-    if (pwalletMain->mapAddressBook.count(address.Get()))\n+    // Only add the account if the address is yours.\n+    if (IsMine(*pwalletMain, address.Get()))\n     {\n-        string strOldAccount = pwalletMain->mapAddressBook[address.Get()].name;\n-        if (address == GetAccountAddress(strOldAccount))\n-            GetAccountAddress(strOldAccount, true);\n+        // Detect when changing the account of an address that is the 'unused current key' of another account:\n+        if (pwalletMain->mapAddressBook.count(address.Get()))\n+        {\n+            string strOldAccount = pwalletMain->mapAddressBook[address.Get()].name;\n+            if (address == GetAccountAddress(strOldAccount))\n+                GetAccountAddress(strOldAccount, true);\n+        }\n+        pwalletMain->SetAddressBook(address.Get(), strAccount, \"receive\");\n     }\n-\n-    pwalletMain->SetAddressBook(address.Get(), strAccount, \"receive\");\n+    else\n+        throw JSONRPCError(RPC_MISC_ERROR, \"setaccount can only be used with own address\");\n \n     return Value::null;\n }"
      },
      {
        "sha": "8c1d2900bcc7eb221a746d9c46deaf0343140d57",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d6390fd17803ab9870e239a0c0c4d0a6be5c68/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d6390fd17803ab9870e239a0c0c4d0a6be5c68/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=31d6390fd17803ab9870e239a0c0c4d0a6be5c68",
        "patch": "@@ -80,11 +80,15 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n \t\twalletdb.WriteAccount(strAccount, account);\n \t});\n \n-\n+    CPubKey setaccountDemoPubkey = pwalletMain->GenerateNewKey();\n+        CBitcoinAddress setaccountDemoAddress = CBitcoinAddress(CTxDestination(setaccountDemoPubkey.GetID()));\n+        \n \t/*********************************\n \t * \t\t\tsetaccount\n \t *********************************/\n-\tBOOST_CHECK_NO_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ nullaccount\"));\n+\tBOOST_CHECK_NO_THROW(CallRPC(\"setaccount \" + setaccountDemoAddress.ToString() + \" nullaccount\"));\n+\t/* 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ is not owned by the test wallet. */\n+\tBOOST_CHECK_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ nullaccount\"), runtime_error);\n \tBOOST_CHECK_THROW(CallRPC(\"setaccount\"), runtime_error);\n \t/* 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X (33 chars) is an illegal address (should be 34 chars) */\n \tBOOST_CHECK_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X nullaccount\"), runtime_error);"
      }
    ]
  },
  {
    "sha": "bc470c43eecd40057a54fbfe4f34eb6fbda7134d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzQ3MGM0M2VlY2Q0MDA1N2E1NGZiZmU0ZjM0ZWI2ZmJkYTcxMzRk",
    "commit": {
      "author": {
        "name": "Eric Shaw",
        "email": "ericshawlinux@users.noreply.github.com",
        "date": "2014-10-02T16:19:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T17:23:30Z"
      },
      "message": "Changed mixed indentation to four spaces\n\nPut `test/rpc_wallet_tests.cpp` through clang-format.",
      "tree": {
        "sha": "afbea3aff53c90f0992579b0873d50732f73457e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afbea3aff53c90f0992579b0873d50732f73457e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc470c43eecd40057a54fbfe4f34eb6fbda7134d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc470c43eecd40057a54fbfe4f34eb6fbda7134d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc470c43eecd40057a54fbfe4f34eb6fbda7134d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc470c43eecd40057a54fbfe4f34eb6fbda7134d/comments",
    "author": null,
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31d6390fd17803ab9870e239a0c0c4d0a6be5c68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d6390fd17803ab9870e239a0c0c4d0a6be5c68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31d6390fd17803ab9870e239a0c0c4d0a6be5c68"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 73,
      "deletions": 74
    },
    "files": [
      {
        "sha": "91da0c4420d509c3dcac2c645418151736d02c7c",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 74,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc470c43eecd40057a54fbfe4f34eb6fbda7134d/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc470c43eecd40057a54fbfe4f34eb6fbda7134d/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=bc470c43eecd40057a54fbfe4f34eb6fbda7134d",
        "patch": "@@ -14,7 +14,7 @@\n using namespace std;\n using namespace json_spirit;\n \n-extern Array createArgs(int nRequired, const char* address1=NULL, const char* address2=NULL);\n+extern Array createArgs(int nRequired, const char* address1 = NULL, const char* address2 = NULL);\n extern Value CallRPC(string args);\n \n extern CWallet* pwalletMain;\n@@ -53,10 +53,10 @@ BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n     BOOST_CHECK_THROW(addmultisig(createArgs(1, \"\"), false), runtime_error);\n     BOOST_CHECK_THROW(addmultisig(createArgs(1, \"NotAValidPubkey\"), false), runtime_error);\n \n-    string short1(address1Hex, address1Hex+sizeof(address1Hex)-2); // last byte missing\n+    string short1(address1Hex, address1Hex + sizeof(address1Hex) - 2); // last byte missing\n     BOOST_CHECK_THROW(addmultisig(createArgs(2, short1.c_str()), false), runtime_error);\n \n-    string short2(address1Hex+1, address1Hex+sizeof(address1Hex)); // first byte missing\n+    string short2(address1Hex + 1, address1Hex + sizeof(address1Hex)); // first byte missing\n     BOOST_CHECK_THROW(addmultisig(createArgs(2, short2.c_str()), false), runtime_error);\n }\n \n@@ -68,30 +68,30 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     CPubKey demoPubkey = pwalletMain->GenerateNewKey();\n-\tCBitcoinAddress demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n-\tValue retValue;\n-\tstring strAccount = \"walletDemoAccount\";\n-\tstring strPurpose = \"receive\";\n-\tBOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n-\t\tCWalletDB walletdb(pwalletMain->strWalletFile);\n-\t\tCAccount account;\n-\t\taccount.vchPubKey = demoPubkey;\n-\t\tpwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n-\t\twalletdb.WriteAccount(strAccount, account);\n-\t});\n+    CBitcoinAddress demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n+    Value retValue;\n+    string strAccount = \"walletDemoAccount\";\n+    string strPurpose = \"receive\";\n+    BOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n+        CWalletDB walletdb(pwalletMain->strWalletFile);\n+        CAccount account;\n+        account.vchPubKey = demoPubkey;\n+        pwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n+        walletdb.WriteAccount(strAccount, account);\n+    });\n \n     CPubKey setaccountDemoPubkey = pwalletMain->GenerateNewKey();\n-        CBitcoinAddress setaccountDemoAddress = CBitcoinAddress(CTxDestination(setaccountDemoPubkey.GetID()));\n-        \n-\t/*********************************\n-\t * \t\t\tsetaccount\n-\t *********************************/\n-\tBOOST_CHECK_NO_THROW(CallRPC(\"setaccount \" + setaccountDemoAddress.ToString() + \" nullaccount\"));\n-\t/* 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ is not owned by the test wallet. */\n-\tBOOST_CHECK_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ nullaccount\"), runtime_error);\n-\tBOOST_CHECK_THROW(CallRPC(\"setaccount\"), runtime_error);\n-\t/* 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X (33 chars) is an illegal address (should be 34 chars) */\n-\tBOOST_CHECK_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X nullaccount\"), runtime_error);\n+    CBitcoinAddress setaccountDemoAddress = CBitcoinAddress(CTxDestination(setaccountDemoPubkey.GetID()));\n+\n+    /*********************************\n+     * \t\t\tsetaccount\n+     *********************************/\n+    BOOST_CHECK_NO_THROW(CallRPC(\"setaccount \" + setaccountDemoAddress.ToString() + \" nullaccount\"));\n+    /* 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ is not owned by the test wallet. */\n+    BOOST_CHECK_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ nullaccount\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"setaccount\"), runtime_error);\n+    /* 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X (33 chars) is an illegal address (should be 34 chars) */\n+    BOOST_CHECK_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X nullaccount\"), runtime_error);\n \n     /*********************************\n      * \t\t\tlistunspent\n@@ -101,12 +101,12 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     BOOST_CHECK_THROW(CallRPC(\"listunspent 0 string\"), runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"listunspent 0 1 not_array\"), runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"listunspent 0 1 [] extra\"), runtime_error);\n-    BOOST_CHECK_NO_THROW(r=CallRPC(\"listunspent 0 1 []\"));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(\"listunspent 0 1 []\"));\n     BOOST_CHECK(r.get_array().empty());\n \n     /*********************************\n-\t * \t\tlistreceivedbyaddress\n-\t *********************************/\n+     * \t\tlistreceivedbyaddress\n+     *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress\"));\n     BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress 0\"));\n     BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress not_int\"), runtime_error);\n@@ -115,8 +115,8 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress 0 true extra\"), runtime_error);\n \n     /*********************************\n-\t * \t\tlistreceivedbyaccount\n-\t *********************************/\n+     * \t\tlistreceivedbyaccount\n+     *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount\"));\n     BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount 0\"));\n     BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount not_int\"), runtime_error);\n@@ -125,59 +125,58 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount 0 true extra\"), runtime_error);\n \n     /*********************************\n-\t * \t\tgetrawchangeaddress\n-\t *********************************/\n+     * \t\tgetrawchangeaddress\n+     *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"getrawchangeaddress\"));\n \n     /*********************************\n-\t * \t\tgetnewaddress\n-\t *********************************/\n+     * \t\tgetnewaddress\n+     *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"getnewaddress\"));\n     BOOST_CHECK_NO_THROW(CallRPC(\"getnewaddress getnewaddress_demoaccount\"));\n \n     /*********************************\n-\t * \t\tgetaccountaddress\n-\t *********************************/\n+     * \t\tgetaccountaddress\n+     *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"getaccountaddress \\\"\\\"\"));\n-\tBOOST_CHECK_NO_THROW(CallRPC(\"getaccountaddress accountThatDoesntExists\")); // Should generate a new account\n-\tBOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaccountaddress \" + strAccount));\n-\tBOOST_CHECK(CBitcoinAddress(retValue.get_str()).Get() == demoAddress.Get());\n-\n-\t/*********************************\n-\t * \t\t\tgetaccount\n-\t *********************************/\n-\tBOOST_CHECK_THROW(CallRPC(\"getaccount\"), runtime_error);\n-\tBOOST_CHECK_NO_THROW(CallRPC(\"getaccount \" + demoAddress.ToString()));\n-\n-\t/*********************************\n-\t * \tsignmessage + verifymessage\n-\t *********************************/\n-\tBOOST_CHECK_NO_THROW(retValue = CallRPC(\"signmessage \" + demoAddress.ToString() + \" mymessage\"));\n-\tBOOST_CHECK_THROW(CallRPC(\"signmessage\"), runtime_error);\n-\t/* Should throw error because this address is not loaded in the wallet */\n-\tBOOST_CHECK_THROW(CallRPC(\"signmessage 1QFqqMUD55ZV3PJEJZtaKCsQmjLT6JkjvJ mymessage\"), runtime_error);\n-\n-\t/* missing arguments */\n-\tBOOST_CHECK_THROW(CallRPC(\"verifymessage \"+ demoAddress.ToString()), runtime_error);\n-\tBOOST_CHECK_THROW(CallRPC(\"verifymessage \"+ demoAddress.ToString() + \" \" + retValue.get_str()), runtime_error);\n-\t/* Illegal address */\n-\tBOOST_CHECK_THROW(CallRPC(\"verifymessage 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X \" + retValue.get_str() + \" mymessage\"), runtime_error);\n-\t/* wrong address */\n-\tBOOST_CHECK(CallRPC(\"verifymessage 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ \" + retValue.get_str() + \" mymessage\").get_bool() == false);\n-\t/* Correct address and signature but wrong message */\n-\tBOOST_CHECK(CallRPC(\"verifymessage \"+ demoAddress.ToString() + \" \" + retValue.get_str() + \" wrongmessage\").get_bool() == false);\n-\t/* Correct address, message and signature*/\n-\tBOOST_CHECK(CallRPC(\"verifymessage \"+ demoAddress.ToString() + \" \" + retValue.get_str() + \" mymessage\").get_bool() == true);\n-\n-\t/*********************************\n-\t * \t\tgetaddressesbyaccount\n-\t *********************************/\n-\tBOOST_CHECK_THROW(CallRPC(\"getaddressesbyaccount\"), runtime_error);\n-\tBOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaddressesbyaccount \" + strAccount));\n-\tArray arr = retValue.get_array();\n-\tBOOST_CHECK(arr.size() > 0);\n-\tBOOST_CHECK(CBitcoinAddress(arr[0].get_str()).Get() == demoAddress.Get());\n+    BOOST_CHECK_NO_THROW(CallRPC(\"getaccountaddress accountThatDoesntExists\")); // Should generate a new account\n+    BOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaccountaddress \" + strAccount));\n+    BOOST_CHECK(CBitcoinAddress(retValue.get_str()).Get() == demoAddress.Get());\n \n+    /*********************************\n+     * \t\t\tgetaccount\n+     *********************************/\n+    BOOST_CHECK_THROW(CallRPC(\"getaccount\"), runtime_error);\n+    BOOST_CHECK_NO_THROW(CallRPC(\"getaccount \" + demoAddress.ToString()));\n+\n+    /*********************************\n+     * \tsignmessage + verifymessage\n+     *********************************/\n+    BOOST_CHECK_NO_THROW(retValue = CallRPC(\"signmessage \" + demoAddress.ToString() + \" mymessage\"));\n+    BOOST_CHECK_THROW(CallRPC(\"signmessage\"), runtime_error);\n+    /* Should throw error because this address is not loaded in the wallet */\n+    BOOST_CHECK_THROW(CallRPC(\"signmessage 1QFqqMUD55ZV3PJEJZtaKCsQmjLT6JkjvJ mymessage\"), runtime_error);\n+\n+    /* missing arguments */\n+    BOOST_CHECK_THROW(CallRPC(\"verifymessage \" + demoAddress.ToString()), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"verifymessage \" + demoAddress.ToString() + \" \" + retValue.get_str()), runtime_error);\n+    /* Illegal address */\n+    BOOST_CHECK_THROW(CallRPC(\"verifymessage 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X \" + retValue.get_str() + \" mymessage\"), runtime_error);\n+    /* wrong address */\n+    BOOST_CHECK(CallRPC(\"verifymessage 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ \" + retValue.get_str() + \" mymessage\").get_bool() == false);\n+    /* Correct address and signature but wrong message */\n+    BOOST_CHECK(CallRPC(\"verifymessage \" + demoAddress.ToString() + \" \" + retValue.get_str() + \" wrongmessage\").get_bool() == false);\n+    /* Correct address, message and signature*/\n+    BOOST_CHECK(CallRPC(\"verifymessage \" + demoAddress.ToString() + \" \" + retValue.get_str() + \" mymessage\").get_bool() == true);\n+\n+    /*********************************\n+     * \t\tgetaddressesbyaccount\n+     *********************************/\n+    BOOST_CHECK_THROW(CallRPC(\"getaddressesbyaccount\"), runtime_error);\n+    BOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaddressesbyaccount \" + strAccount));\n+    Array arr = retValue.get_array();\n+    BOOST_CHECK(arr.size() > 0);\n+    BOOST_CHECK(CBitcoinAddress(arr[0].get_str()).Get() == demoAddress.Get());\n }\n \n "
      }
    ]
  },
  {
    "sha": "20a4b69360246c85700cab90df4de99b83eb368a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMGE0YjY5MzYwMjQ2Yzg1NzAwY2FiOTBkZjRkZTk5YjgzZWIzNjhh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T17:31:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T17:31:50Z"
      },
      "message": "Merge pull request #4985\n\nbc470c4 Changed mixed indentation to four spaces (Eric Shaw)\n31d6390 Fixed setaccount accepting foreign address (Eric Shaw)",
      "tree": {
        "sha": "70504f1055da53acc5166a54585db8377789384b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70504f1055da53acc5166a54585db8377789384b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20a4b69360246c85700cab90df4de99b83eb368a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULYwGAAoJEHSBCwEjRsmmTe4IAL2oCg0CegLHFY3B5uNMHeUl\nCvmXEqQzc24UOQUVJw9PPeQN482n7IQBgPOSJrT3PAPTvNBl0embclrE1AaepdAp\nprGIv2t9mMp8UiC6mlaSEBYzn1N08UDgzY6na12jMe9qVn+JoOn03XYK7YpRwF2Q\nsr3f9cj9FRxwCSee7l1pn7TBJNtqk+YvFUZAmkuK3PdsUbsGPi6ouiwrXGLDlPTq\nyB3IbM4lof2fqQo04ug6ySJkGhJ0zVmM387b4pK+F/T0nObAfi/KP6VceuU9hLso\nxvg7TMsBWaVPHZVdaAjWonmwuGJSP4/zDyb+jm+LcglvWmGqdXuFHMSW79p/k3k=\n=BLDA\n-----END PGP SIGNATURE-----",
        "payload": "tree 70504f1055da53acc5166a54585db8377789384b\nparent 4b73b758a388dae63aa68a5aabaa7ff493d64bc2\nparent bc470c43eecd40057a54fbfe4f34eb6fbda7134d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412271108 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412271110 +0200\n\nMerge pull request #4985\n\nbc470c4 Changed mixed indentation to four spaces (Eric Shaw)\n31d6390 Fixed setaccount accepting foreign address (Eric Shaw)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20a4b69360246c85700cab90df4de99b83eb368a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20a4b69360246c85700cab90df4de99b83eb368a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20a4b69360246c85700cab90df4de99b83eb368a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b73b758a388dae63aa68a5aabaa7ff493d64bc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b73b758a388dae63aa68a5aabaa7ff493d64bc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b73b758a388dae63aa68a5aabaa7ff493d64bc2"
      },
      {
        "sha": "bc470c43eecd40057a54fbfe4f34eb6fbda7134d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc470c43eecd40057a54fbfe4f34eb6fbda7134d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc470c43eecd40057a54fbfe4f34eb6fbda7134d"
      }
    ],
    "stats": {
      "total": 166,
      "additions": 87,
      "deletions": 79
    },
    "files": [
      {
        "sha": "d7c0c0ef5c85e672cb4f1cd335435b7da1cc61a5",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20a4b69360246c85700cab90df4de99b83eb368a/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20a4b69360246c85700cab90df4de99b83eb368a/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=20a4b69360246c85700cab90df4de99b83eb368a",
        "patch": "@@ -230,15 +230,20 @@ Value setaccount(const Array& params, bool fHelp)\n     if (params.size() > 1)\n         strAccount = AccountFromValue(params[1]);\n \n-    // Detect when changing the account of an address that is the 'unused current key' of another account:\n-    if (pwalletMain->mapAddressBook.count(address.Get()))\n+    // Only add the account if the address is yours.\n+    if (IsMine(*pwalletMain, address.Get()))\n     {\n-        string strOldAccount = pwalletMain->mapAddressBook[address.Get()].name;\n-        if (address == GetAccountAddress(strOldAccount))\n-            GetAccountAddress(strOldAccount, true);\n+        // Detect when changing the account of an address that is the 'unused current key' of another account:\n+        if (pwalletMain->mapAddressBook.count(address.Get()))\n+        {\n+            string strOldAccount = pwalletMain->mapAddressBook[address.Get()].name;\n+            if (address == GetAccountAddress(strOldAccount))\n+                GetAccountAddress(strOldAccount, true);\n+        }\n+        pwalletMain->SetAddressBook(address.Get(), strAccount, \"receive\");\n     }\n-\n-    pwalletMain->SetAddressBook(address.Get(), strAccount, \"receive\");\n+    else\n+        throw JSONRPCError(RPC_MISC_ERROR, \"setaccount can only be used with own address\");\n \n     return Value::null;\n }"
      },
      {
        "sha": "91da0c4420d509c3dcac2c645418151736d02c7c",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 72,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20a4b69360246c85700cab90df4de99b83eb368a/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20a4b69360246c85700cab90df4de99b83eb368a/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=20a4b69360246c85700cab90df4de99b83eb368a",
        "patch": "@@ -14,7 +14,7 @@\n using namespace std;\n using namespace json_spirit;\n \n-extern Array createArgs(int nRequired, const char* address1=NULL, const char* address2=NULL);\n+extern Array createArgs(int nRequired, const char* address1 = NULL, const char* address2 = NULL);\n extern Value CallRPC(string args);\n \n extern CWallet* pwalletMain;\n@@ -53,10 +53,10 @@ BOOST_AUTO_TEST_CASE(rpc_addmultisig)\n     BOOST_CHECK_THROW(addmultisig(createArgs(1, \"\"), false), runtime_error);\n     BOOST_CHECK_THROW(addmultisig(createArgs(1, \"NotAValidPubkey\"), false), runtime_error);\n \n-    string short1(address1Hex, address1Hex+sizeof(address1Hex)-2); // last byte missing\n+    string short1(address1Hex, address1Hex + sizeof(address1Hex) - 2); // last byte missing\n     BOOST_CHECK_THROW(addmultisig(createArgs(2, short1.c_str()), false), runtime_error);\n \n-    string short2(address1Hex+1, address1Hex+sizeof(address1Hex)); // first byte missing\n+    string short2(address1Hex + 1, address1Hex + sizeof(address1Hex)); // first byte missing\n     BOOST_CHECK_THROW(addmultisig(createArgs(2, short2.c_str()), false), runtime_error);\n }\n \n@@ -68,26 +68,30 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     CPubKey demoPubkey = pwalletMain->GenerateNewKey();\n-\tCBitcoinAddress demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n-\tValue retValue;\n-\tstring strAccount = \"walletDemoAccount\";\n-\tstring strPurpose = \"receive\";\n-\tBOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n-\t\tCWalletDB walletdb(pwalletMain->strWalletFile);\n-\t\tCAccount account;\n-\t\taccount.vchPubKey = demoPubkey;\n-\t\tpwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n-\t\twalletdb.WriteAccount(strAccount, account);\n-\t});\n-\n-\n-\t/*********************************\n-\t * \t\t\tsetaccount\n-\t *********************************/\n-\tBOOST_CHECK_NO_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ nullaccount\"));\n-\tBOOST_CHECK_THROW(CallRPC(\"setaccount\"), runtime_error);\n-\t/* 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X (33 chars) is an illegal address (should be 34 chars) */\n-\tBOOST_CHECK_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X nullaccount\"), runtime_error);\n+    CBitcoinAddress demoAddress = CBitcoinAddress(CTxDestination(demoPubkey.GetID()));\n+    Value retValue;\n+    string strAccount = \"walletDemoAccount\";\n+    string strPurpose = \"receive\";\n+    BOOST_CHECK_NO_THROW({ /*Initialize Wallet with an account */\n+        CWalletDB walletdb(pwalletMain->strWalletFile);\n+        CAccount account;\n+        account.vchPubKey = demoPubkey;\n+        pwalletMain->SetAddressBook(account.vchPubKey.GetID(), strAccount, strPurpose);\n+        walletdb.WriteAccount(strAccount, account);\n+    });\n+\n+    CPubKey setaccountDemoPubkey = pwalletMain->GenerateNewKey();\n+    CBitcoinAddress setaccountDemoAddress = CBitcoinAddress(CTxDestination(setaccountDemoPubkey.GetID()));\n+\n+    /*********************************\n+     * \t\t\tsetaccount\n+     *********************************/\n+    BOOST_CHECK_NO_THROW(CallRPC(\"setaccount \" + setaccountDemoAddress.ToString() + \" nullaccount\"));\n+    /* 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ is not owned by the test wallet. */\n+    BOOST_CHECK_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ nullaccount\"), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"setaccount\"), runtime_error);\n+    /* 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X (33 chars) is an illegal address (should be 34 chars) */\n+    BOOST_CHECK_THROW(CallRPC(\"setaccount 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X nullaccount\"), runtime_error);\n \n     /*********************************\n      * \t\t\tlistunspent\n@@ -97,12 +101,12 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     BOOST_CHECK_THROW(CallRPC(\"listunspent 0 string\"), runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"listunspent 0 1 not_array\"), runtime_error);\n     BOOST_CHECK_THROW(CallRPC(\"listunspent 0 1 [] extra\"), runtime_error);\n-    BOOST_CHECK_NO_THROW(r=CallRPC(\"listunspent 0 1 []\"));\n+    BOOST_CHECK_NO_THROW(r = CallRPC(\"listunspent 0 1 []\"));\n     BOOST_CHECK(r.get_array().empty());\n \n     /*********************************\n-\t * \t\tlistreceivedbyaddress\n-\t *********************************/\n+     * \t\tlistreceivedbyaddress\n+     *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress\"));\n     BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaddress 0\"));\n     BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress not_int\"), runtime_error);\n@@ -111,8 +115,8 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaddress 0 true extra\"), runtime_error);\n \n     /*********************************\n-\t * \t\tlistreceivedbyaccount\n-\t *********************************/\n+     * \t\tlistreceivedbyaccount\n+     *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount\"));\n     BOOST_CHECK_NO_THROW(CallRPC(\"listreceivedbyaccount 0\"));\n     BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount not_int\"), runtime_error);\n@@ -121,59 +125,58 @@ BOOST_AUTO_TEST_CASE(rpc_wallet)\n     BOOST_CHECK_THROW(CallRPC(\"listreceivedbyaccount 0 true extra\"), runtime_error);\n \n     /*********************************\n-\t * \t\tgetrawchangeaddress\n-\t *********************************/\n+     * \t\tgetrawchangeaddress\n+     *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"getrawchangeaddress\"));\n \n     /*********************************\n-\t * \t\tgetnewaddress\n-\t *********************************/\n+     * \t\tgetnewaddress\n+     *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"getnewaddress\"));\n     BOOST_CHECK_NO_THROW(CallRPC(\"getnewaddress getnewaddress_demoaccount\"));\n \n     /*********************************\n-\t * \t\tgetaccountaddress\n-\t *********************************/\n+     * \t\tgetaccountaddress\n+     *********************************/\n     BOOST_CHECK_NO_THROW(CallRPC(\"getaccountaddress \\\"\\\"\"));\n-\tBOOST_CHECK_NO_THROW(CallRPC(\"getaccountaddress accountThatDoesntExists\")); // Should generate a new account\n-\tBOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaccountaddress \" + strAccount));\n-\tBOOST_CHECK(CBitcoinAddress(retValue.get_str()).Get() == demoAddress.Get());\n-\n-\t/*********************************\n-\t * \t\t\tgetaccount\n-\t *********************************/\n-\tBOOST_CHECK_THROW(CallRPC(\"getaccount\"), runtime_error);\n-\tBOOST_CHECK_NO_THROW(CallRPC(\"getaccount \" + demoAddress.ToString()));\n-\n-\t/*********************************\n-\t * \tsignmessage + verifymessage\n-\t *********************************/\n-\tBOOST_CHECK_NO_THROW(retValue = CallRPC(\"signmessage \" + demoAddress.ToString() + \" mymessage\"));\n-\tBOOST_CHECK_THROW(CallRPC(\"signmessage\"), runtime_error);\n-\t/* Should throw error because this address is not loaded in the wallet */\n-\tBOOST_CHECK_THROW(CallRPC(\"signmessage 1QFqqMUD55ZV3PJEJZtaKCsQmjLT6JkjvJ mymessage\"), runtime_error);\n-\n-\t/* missing arguments */\n-\tBOOST_CHECK_THROW(CallRPC(\"verifymessage \"+ demoAddress.ToString()), runtime_error);\n-\tBOOST_CHECK_THROW(CallRPC(\"verifymessage \"+ demoAddress.ToString() + \" \" + retValue.get_str()), runtime_error);\n-\t/* Illegal address */\n-\tBOOST_CHECK_THROW(CallRPC(\"verifymessage 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X \" + retValue.get_str() + \" mymessage\"), runtime_error);\n-\t/* wrong address */\n-\tBOOST_CHECK(CallRPC(\"verifymessage 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ \" + retValue.get_str() + \" mymessage\").get_bool() == false);\n-\t/* Correct address and signature but wrong message */\n-\tBOOST_CHECK(CallRPC(\"verifymessage \"+ demoAddress.ToString() + \" \" + retValue.get_str() + \" wrongmessage\").get_bool() == false);\n-\t/* Correct address, message and signature*/\n-\tBOOST_CHECK(CallRPC(\"verifymessage \"+ demoAddress.ToString() + \" \" + retValue.get_str() + \" mymessage\").get_bool() == true);\n-\n-\t/*********************************\n-\t * \t\tgetaddressesbyaccount\n-\t *********************************/\n-\tBOOST_CHECK_THROW(CallRPC(\"getaddressesbyaccount\"), runtime_error);\n-\tBOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaddressesbyaccount \" + strAccount));\n-\tArray arr = retValue.get_array();\n-\tBOOST_CHECK(arr.size() > 0);\n-\tBOOST_CHECK(CBitcoinAddress(arr[0].get_str()).Get() == demoAddress.Get());\n+    BOOST_CHECK_NO_THROW(CallRPC(\"getaccountaddress accountThatDoesntExists\")); // Should generate a new account\n+    BOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaccountaddress \" + strAccount));\n+    BOOST_CHECK(CBitcoinAddress(retValue.get_str()).Get() == demoAddress.Get());\n \n+    /*********************************\n+     * \t\t\tgetaccount\n+     *********************************/\n+    BOOST_CHECK_THROW(CallRPC(\"getaccount\"), runtime_error);\n+    BOOST_CHECK_NO_THROW(CallRPC(\"getaccount \" + demoAddress.ToString()));\n+\n+    /*********************************\n+     * \tsignmessage + verifymessage\n+     *********************************/\n+    BOOST_CHECK_NO_THROW(retValue = CallRPC(\"signmessage \" + demoAddress.ToString() + \" mymessage\"));\n+    BOOST_CHECK_THROW(CallRPC(\"signmessage\"), runtime_error);\n+    /* Should throw error because this address is not loaded in the wallet */\n+    BOOST_CHECK_THROW(CallRPC(\"signmessage 1QFqqMUD55ZV3PJEJZtaKCsQmjLT6JkjvJ mymessage\"), runtime_error);\n+\n+    /* missing arguments */\n+    BOOST_CHECK_THROW(CallRPC(\"verifymessage \" + demoAddress.ToString()), runtime_error);\n+    BOOST_CHECK_THROW(CallRPC(\"verifymessage \" + demoAddress.ToString() + \" \" + retValue.get_str()), runtime_error);\n+    /* Illegal address */\n+    BOOST_CHECK_THROW(CallRPC(\"verifymessage 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4X \" + retValue.get_str() + \" mymessage\"), runtime_error);\n+    /* wrong address */\n+    BOOST_CHECK(CallRPC(\"verifymessage 1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ \" + retValue.get_str() + \" mymessage\").get_bool() == false);\n+    /* Correct address and signature but wrong message */\n+    BOOST_CHECK(CallRPC(\"verifymessage \" + demoAddress.ToString() + \" \" + retValue.get_str() + \" wrongmessage\").get_bool() == false);\n+    /* Correct address, message and signature*/\n+    BOOST_CHECK(CallRPC(\"verifymessage \" + demoAddress.ToString() + \" \" + retValue.get_str() + \" mymessage\").get_bool() == true);\n+\n+    /*********************************\n+     * \t\tgetaddressesbyaccount\n+     *********************************/\n+    BOOST_CHECK_THROW(CallRPC(\"getaddressesbyaccount\"), runtime_error);\n+    BOOST_CHECK_NO_THROW(retValue = CallRPC(\"getaddressesbyaccount \" + strAccount));\n+    Array arr = retValue.get_array();\n+    BOOST_CHECK(arr.size() > 0);\n+    BOOST_CHECK(CBitcoinAddress(arr[0].get_str()).Get() == demoAddress.Get());\n }\n \n "
      }
    ]
  },
  {
    "sha": "4bb30a1eb81009cf75b75c8371e361ef149e3744",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmIzMGExZWI4MTAwOWNmNzViNzVjODM3MWUzNjFlZjE0OWUzNzQ0",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-09-10T04:06:34Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-10-02T17:35:51Z"
      },
      "message": "Correct logging AcceptBlock()->AcceptBlockHeader()",
      "tree": {
        "sha": "b2f4bba71d363a3d2f883751f88e739cc6092b92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2f4bba71d363a3d2f883751f88e739cc6092b92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bb30a1eb81009cf75b75c8371e361ef149e3744",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bb30a1eb81009cf75b75c8371e361ef149e3744",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4bb30a1eb81009cf75b75c8371e361ef149e3744",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bb30a1eb81009cf75b75c8371e361ef149e3744/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20a4b69360246c85700cab90df4de99b83eb368a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20a4b69360246c85700cab90df4de99b83eb368a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20a4b69360246c85700cab90df4de99b83eb368a"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "f49c4dcedebea4613c51fcfcec3dadf5c1a1dfd3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bb30a1eb81009cf75b75c8371e361ef149e3744/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bb30a1eb81009cf75b75c8371e361ef149e3744/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4bb30a1eb81009cf75b75c8371e361ef149e3744",
        "patch": "@@ -2274,7 +2274,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n     if (miSelf != mapBlockIndex.end()) {\n         pindex = miSelf->second;\n         if (pindex->nStatus & BLOCK_FAILED_MASK)\n-            return state.Invalid(error(\"AcceptBlock() : block is marked invalid\"), 0, \"duplicate\");\n+            return state.Invalid(error(\"%s : block is marked invalid\", __func__), 0, \"duplicate\");\n     }\n \n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n@@ -2284,12 +2284,12 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         int64_t deltaTime = block.GetBlockTime() - pcheckpoint->GetBlockTime();\n         if (deltaTime < 0)\n         {\n-            return state.DoS(100, error(\"CheckBlockHeader() : block with timestamp before last checkpoint\"),\n+            return state.DoS(100, error(\"%s : block with timestamp before last checkpoint\", __func__),\n                              REJECT_CHECKPOINT, \"time-too-old\");\n         }\n         if (!CheckMinWork(block.nBits, pcheckpoint->nBits, deltaTime))\n         {\n-            return state.DoS(100, error(\"CheckBlockHeader() : block with too little proof-of-work\"),\n+            return state.DoS(100, error(\"%s : block with too little proof-of-work\", __func__),\n                              REJECT_INVALID, \"bad-diffbits\");\n         }\n     }\n@@ -2300,36 +2300,36 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n     if (hash != Params().HashGenesisBlock()) {\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n-            return state.DoS(10, error(\"AcceptBlock() : prev block not found\"), 0, \"bad-prevblk\");\n+            return state.DoS(10, error(\"%s : prev block not found\", __func__), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n         if ((!Params().SkipProofOfWorkCheck()) &&\n            (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n-            return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n+            return state.DoS(100, error(\"%s : incorrect proof of work\", __func__),\n                              REJECT_INVALID, \"bad-diffbits\");\n \n         // Check timestamp against prev\n         if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-            return state.Invalid(error(\"AcceptBlock() : block's timestamp is too early\"),\n+            return state.Invalid(error(\"%s : block's timestamp is too early\", __func__),\n                                  REJECT_INVALID, \"time-too-old\");\n \n         // Check that the block chain matches the known block chain up to a checkpoint\n         if (!Checkpoints::CheckBlock(nHeight, hash))\n-            return state.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lock-in at %d\", nHeight),\n+            return state.DoS(100, error(\"%s : rejected by checkpoint lock-in at %d\", __func__, nHeight),\n                              REJECT_CHECKPOINT, \"checkpoint mismatch\");\n \n         // Don't accept any forks from the main chain prior to last checkpoint\n         CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-            return state.DoS(100, error(\"AcceptBlock() : forked chain older than last checkpoint (height %d)\", nHeight));\n+            return state.DoS(100, error(\"%s : forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n \n         // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n         if (block.nVersion < 2 && \n             CBlockIndex::IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n         {\n-            return state.Invalid(error(\"AcceptBlock() : rejected nVersion=1 block\"),\n+            return state.Invalid(error(\"%s : rejected nVersion=1 block\", __func__),\n                                  REJECT_OBSOLETE, \"bad-version\");\n         }\n     }"
      }
    ]
  },
  {
    "sha": "609adc7660dd94bd683e65268c27716beed2de89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDlhZGM3NjYwZGQ5NGJkNjgzZTY1MjY4YzI3NzE2YmVlZDJkZTg5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-02T17:39:32Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-02T17:41:31Z"
      },
      "message": "depends: disable unused bdb replication manager. Fixes new mingw builds\n\nNewer mingw supports the features necessary to enable this api, whereas older\nversions didn't. However once enabled (automatically by configure), it triggers\nan unrelated build bug.\n\nSince it was not enabled previously anyway, and we don't depend on the\nfunctionality, just disable it across the board.",
      "tree": {
        "sha": "24b2dae40afbdc2e514614de4b79e2d01d1b4593",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24b2dae40afbdc2e514614de4b79e2d01d1b4593"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/609adc7660dd94bd683e65268c27716beed2de89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/609adc7660dd94bd683e65268c27716beed2de89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/609adc7660dd94bd683e65268c27716beed2de89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/609adc7660dd94bd683e65268c27716beed2de89/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b73b758a388dae63aa68a5aabaa7ff493d64bc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b73b758a388dae63aa68a5aabaa7ff493d64bc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b73b758a388dae63aa68a5aabaa7ff493d64bc2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f39925723b5aa2bd9ce4a88362ad7457d9e5d22d",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/609adc7660dd94bd683e65268c27716beed2de89/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/609adc7660dd94bd683e65268c27716beed2de89/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=609adc7660dd94bd683e65268c27716beed2de89",
        "patch": "@@ -6,7 +6,7 @@ $(package)_sha256_hash=12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b857327\n $(package)_build_subdir=build_unix\n \n define $(package)_set_vars\n-$(package)_config_opts=--disable-shared --enable-cxx\n+$(package)_config_opts=--disable-shared --enable-cxx --disable-replication\n $(package)_config_opts_mingw32=--enable-mingw\n $(package)_config_opts_x86_64_linux=--with-pic\n $(package)_config_opts_arm_linux=--with-pic"
      }
    ]
  },
  {
    "sha": "6faee7942671141649b74e50908cb99cabc840e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmFlZTc5NDI2NzExNDE2NDliNzRlNTA5MDhjYjk5Y2FiYzg0MGU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T18:00:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T18:00:59Z"
      },
      "message": "Merge pull request #5034\n\n609adc7 depends: disable unused bdb replication manager. Fixes new mingw builds (Cory Fields)",
      "tree": {
        "sha": "d84f2ff15bd5031011783773b33d06c36098506b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d84f2ff15bd5031011783773b33d06c36098506b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6faee7942671141649b74e50908cb99cabc840e5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULZLbAAoJEHSBCwEjRsmm2S4H/2InVpy4zq7oWP5TDIAN7hBo\nfeB5gHq9/gypF0SjydFZILabOciC8gS71oGazrrYQ20vPhXls7wbQJEm0bu/hM8j\nJlHTFaZiu+JO0p2XTDp+AdC4zsegA1Ch1Z31oKt6JBXe8lwSvQ9lpCPot0l14o+a\nDx5RebvFSTzD76JtSlAkOBRYcMe0CfmCV6s2oTI3mBnGiNECG1J87LZSAbywh1ya\nI97jfzTqimMoQH9jNSMEHZ7fyTUa4U4XXrL80bKMOrVAjK6KjwDg8s6CArHdxEYM\nbLgO+8lnr3TSj/BwKIN9GiMMqnuZMhtAWpTlKiTlRkGdcwFWO2FEZIFaXRXrj1I=\n=aFfn\n-----END PGP SIGNATURE-----",
        "payload": "tree d84f2ff15bd5031011783773b33d06c36098506b\nparent 20a4b69360246c85700cab90df4de99b83eb368a\nparent 609adc7660dd94bd683e65268c27716beed2de89\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412272852 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412272859 +0200\n\nMerge pull request #5034\n\n609adc7 depends: disable unused bdb replication manager. Fixes new mingw builds (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6faee7942671141649b74e50908cb99cabc840e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6faee7942671141649b74e50908cb99cabc840e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6faee7942671141649b74e50908cb99cabc840e5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "20a4b69360246c85700cab90df4de99b83eb368a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20a4b69360246c85700cab90df4de99b83eb368a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20a4b69360246c85700cab90df4de99b83eb368a"
      },
      {
        "sha": "609adc7660dd94bd683e65268c27716beed2de89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/609adc7660dd94bd683e65268c27716beed2de89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/609adc7660dd94bd683e65268c27716beed2de89"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f39925723b5aa2bd9ce4a88362ad7457d9e5d22d",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6faee7942671141649b74e50908cb99cabc840e5/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6faee7942671141649b74e50908cb99cabc840e5/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=6faee7942671141649b74e50908cb99cabc840e5",
        "patch": "@@ -6,7 +6,7 @@ $(package)_sha256_hash=12edc0df75bf9abd7f82f821795bcee50f42cb2e5f76a6a281b857327\n $(package)_build_subdir=build_unix\n \n define $(package)_set_vars\n-$(package)_config_opts=--disable-shared --enable-cxx\n+$(package)_config_opts=--disable-shared --enable-cxx --disable-replication\n $(package)_config_opts_mingw32=--enable-mingw\n $(package)_config_opts_x86_64_linux=--with-pic\n $(package)_config_opts_arm_linux=--with-pic"
      }
    ]
  },
  {
    "sha": "c7829ea797c840dda7888ee860a50b7a3308069d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzgyOWVhNzk3Yzg0MGRkYTc4ODhlZTg2MGE1MGI3YTMzMDgwNjlk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-10T12:42:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-02T18:26:16Z"
      },
      "message": "Abstract out SignatureChecker",
      "tree": {
        "sha": "55eafd1b6fef2ba1a5d3aa1aec9e0c6165091893",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/55eafd1b6fef2ba1a5d3aa1aec9e0c6165091893"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c7829ea797c840dda7888ee860a50b7a3308069d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7829ea797c840dda7888ee860a50b7a3308069d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c7829ea797c840dda7888ee860a50b7a3308069d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7829ea797c840dda7888ee860a50b7a3308069d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6faee7942671141649b74e50908cb99cabc840e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6faee7942671141649b74e50908cb99cabc840e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6faee7942671141649b74e50908cb99cabc840e5"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 37,
      "deletions": 14
    },
    "files": [
      {
        "sha": "048d298f0bd9ba581266175d4bb7eda2319c8fee",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7829ea797c840dda7888ee860a50b7a3308069d/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7829ea797c840dda7888ee860a50b7a3308069d/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=c7829ea797c840dda7888ee860a50b7a3308069d",
        "patch": "@@ -132,7 +132,7 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n     return true;\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const SignatureChecker& checker)\n {\n     CScript::const_iterator pc = script.begin();\n     CScript::const_iterator pend = script.end();\n@@ -675,7 +675,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n                     bool fSuccess = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                        CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, flags);\n+                        checker.CheckSig(vchSig, vchPubKey, scriptCode, flags);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -736,7 +736,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n \n                         // Check signature\n                         bool fOk = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                            CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, flags);\n+                            checker.CheckSig(vchSig, vchPubKey, scriptCode, flags);\n \n                         if (fOk) {\n                             isig++;\n@@ -897,7 +897,7 @@ class CTransactionSignatureSerializer {\n \n } // anon namespace\n \n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n     if (nIn >= txTo.vin.size()) {\n         LogPrintf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n@@ -976,7 +976,7 @@ class CSignatureCache\n     }\n };\n \n-bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int flags)\n+bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, int flags) const\n {\n     static CSignatureCache signatureCache;\n \n@@ -985,6 +985,7 @@ bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char>& vchPubK\n         return false;\n \n     // Hash type is one byte tacked on to the end of the signature\n+    vector<unsigned char> vchSig(vchSigIn);\n     if (vchSig.empty())\n         return false;\n     int nHashType = vchSig.back();\n@@ -1004,14 +1005,14 @@ bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char>& vchPubK\n     return true;\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const SignatureChecker& checker)\n {\n     vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, txTo, nIn, flags))\n+    if (!EvalScript(stack, scriptSig, flags, checker))\n         return false;\n     if (flags & SCRIPT_VERIFY_P2SH)\n         stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, txTo, nIn, flags))\n+    if (!EvalScript(stack, scriptPubKey, flags, checker))\n         return false;\n     if (stack.empty())\n         return false;\n@@ -1034,7 +1035,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n         popstack(stackCopy);\n \n-        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, flags))\n+        if (!EvalScript(stackCopy, pubKey2, flags, checker))\n             return false;\n         if (stackCopy.empty())\n             return false;"
      },
      {
        "sha": "f3fd49a3b6bc7a27b2a3e9b23ec7c8794d7ffd8e",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 25,
        "deletions": 3,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7829ea797c840dda7888ee860a50b7a3308069d/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7829ea797c840dda7888ee860a50b7a3308069d/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=c7829ea797c840dda7888ee860a50b7a3308069d",
        "patch": "@@ -38,8 +38,30 @@ bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey, unsigned int\n bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int flags);\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-bool CheckSig(std::vector<unsigned char> vchSig, const std::vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int flags);\n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n+\n+class SignatureChecker\n+{\n+private:\n+    const CTransaction& txTo;\n+    unsigned int nIn;\n+\n+public:\n+    SignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int nFlags) const;\n+};\n+\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const SignatureChecker& checker);\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const SignatureChecker& checker);\n+\n+// Wrappers using a default SignatureChecker.\n+bool inline EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+{\n+    return EvalScript(stack, script, flags, SignatureChecker(txTo, nIn));\n+}\n+\n+bool inline VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+{\n+    return VerifyScript(scriptSig, scriptPubKey, flags, SignatureChecker(txTo, nIn));\n+}\n \n #endif // H_BITCOIN_SCRIPT_INTERPRETER"
      },
      {
        "sha": "a17fb58787a14d6e930abbe0c1d206f0f52e4a6a",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7829ea797c840dda7888ee860a50b7a3308069d/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7829ea797c840dda7888ee860a50b7a3308069d/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=c7829ea797c840dda7888ee860a50b7a3308069d",
        "patch": "@@ -174,7 +174,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (CheckSig(sig, pubkey, scriptPubKey, txTo, nIn, 0))\n+            if (SignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey, 0))\n             {\n                 sigs[pubkey] = sig;\n                 break;"
      },
      {
        "sha": "992f32cc4c1e6c0bd1ffd02447eac408940a1e28",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c7829ea797c840dda7888ee860a50b7a3308069d/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c7829ea797c840dda7888ee860a50b7a3308069d/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=c7829ea797c840dda7888ee860a50b7a3308069d",
        "patch": "@@ -89,7 +89,7 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CTr\n \n void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message)\n {\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey)), 0, flags) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, SignatureChecker(BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey)), 0)) == expect, message);\n }\n \n namespace"
      }
    ]
  },
  {
    "sha": "5c1e798a8e9df15f8fbd120e57fc67e585f13843",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YzFlNzk4YThlOWRmMTVmOGZiZDEyMGU1N2ZjNjdlNTg1ZjEzODQz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-10T14:16:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-02T18:26:17Z"
      },
      "message": "Make signature cache optional",
      "tree": {
        "sha": "2b9cd1acc9565a7946683b50b237c332484de5e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b9cd1acc9565a7946683b50b237c332484de5e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5c1e798a8e9df15f8fbd120e57fc67e585f13843",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c1e798a8e9df15f8fbd120e57fc67e585f13843",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5c1e798a8e9df15f8fbd120e57fc67e585f13843",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c1e798a8e9df15f8fbd120e57fc67e585f13843/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7829ea797c840dda7888ee860a50b7a3308069d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7829ea797c840dda7888ee860a50b7a3308069d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7829ea797c840dda7888ee860a50b7a3308069d"
      }
    ],
    "stats": {
      "total": 243,
      "additions": 155,
      "deletions": 88
    },
    "files": [
      {
        "sha": "155adfef7d34c3de6f0165e999b56ce4cc5f09b1",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -103,6 +103,7 @@ BITCOIN_CORE_H = \\\n   script/compressor.h \\\n   script/interpreter.h \\\n   script/script.h \\\n+  script/sigcache.h \\\n   script/sign.h \\\n   script/standard.h \\\n   serialize.h \\\n@@ -218,6 +219,7 @@ libbitcoin_common_a_SOURCES = \\\n   script/compressor.cpp \\\n   script/interpreter.cpp \\\n   script/script.cpp \\\n+  script/sigcache.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n   $(BITCOIN_CORE_H)"
      },
      {
        "sha": "a198eb586eed18eab97d319ed86a791dcb770a12",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -435,7 +435,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, STANDARD_SCRIPT_VERIFY_FLAGS))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "5faa0086f5a5dd795b1f1cb4b8ccee03e0e122df",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -645,7 +645,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // IsStandard() will have already returned false\n         // and this method isn't called.\n         vector<vector<unsigned char> > stack;\n-        if (!EvalScript(stack, tx.vin[i].scriptSig, tx, i, false))\n+        if (!EvalScript(stack, tx.vin[i].scriptSig, false, BaseSignatureChecker()))\n             return false;\n \n         if (whichType == TX_SCRIPTHASH)"
      },
      {
        "sha": "ded6c155308f47bfdc3423d90df1d0a2e9e2f839",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -17,6 +17,7 @@\n #include \"net.h\"\n #include \"pow.h\"\n #include \"script/script.h\"\n+#include \"script/sigcache.h\"\n #include \"script/standard.h\"\n #include \"sync.h\"\n #include \"txmempool.h\""
      },
      {
        "sha": "f0b426839042a10722cb1d6a42e5b3c5855c98af",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 68,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -9,14 +9,10 @@\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha2.h\"\n-#include \"random.h\"\n #include \"script/script.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n-#include <boost/thread.hpp>\n-#include <boost/tuple/tuple_comparison.hpp>\n-\n using namespace std;\n \n typedef vector<unsigned char> valtype;\n@@ -132,7 +128,7 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n     return true;\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const SignatureChecker& checker)\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker)\n {\n     CScript::const_iterator pc = script.begin();\n     CScript::const_iterator pend = script.end();\n@@ -921,65 +917,13 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n     return ss.GetHash();\n }\n \n-// Valid signature cache, to avoid doing expensive ECDSA signature checking\n-// twice for every transaction (once when accepted into memory pool, and\n-// again when accepted into the block chain)\n-class CSignatureCache\n+bool SignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash, int flags) const\n {\n-private:\n-     // sigdata_type is (signature hash, signature, public key):\n-    typedef boost::tuple<uint256, std::vector<unsigned char>, CPubKey> sigdata_type;\n-    std::set< sigdata_type> setValid;\n-    boost::shared_mutex cs_sigcache;\n-\n-public:\n-    bool\n-    Get(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n-    {\n-        boost::shared_lock<boost::shared_mutex> lock(cs_sigcache);\n-\n-        sigdata_type k(hash, vchSig, pubKey);\n-        std::set<sigdata_type>::iterator mi = setValid.find(k);\n-        if (mi != setValid.end())\n-            return true;\n-        return false;\n-    }\n-\n-    void Set(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n-    {\n-        // DoS prevention: limit cache size to less than 10MB\n-        // (~200 bytes per cache entry times 50,000 entries)\n-        // Since there are a maximum of 20,000 signature operations per block\n-        // 50,000 is a reasonable default.\n-        int64_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", 50000);\n-        if (nMaxCacheSize <= 0) return;\n-\n-        boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n-\n-        while (static_cast<int64_t>(setValid.size()) > nMaxCacheSize)\n-        {\n-            // Evict a random entry. Random because that helps\n-            // foil would-be DoS attackers who might try to pre-generate\n-            // and re-use a set of valid signatures just-slightly-greater\n-            // than our cache size.\n-            uint256 randomHash = GetRandHash();\n-            std::vector<unsigned char> unused;\n-            std::set<sigdata_type>::iterator it =\n-                setValid.lower_bound(sigdata_type(randomHash, unused, unused));\n-            if (it == setValid.end())\n-                it = setValid.begin();\n-            setValid.erase(*it);\n-        }\n-\n-        sigdata_type k(hash, vchSig, pubKey);\n-        setValid.insert(k);\n-    }\n-};\n+    return pubkey.Verify(sighash, vchSig);\n+}\n \n bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, int flags) const\n {\n-    static CSignatureCache signatureCache;\n-\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())\n         return false;\n@@ -993,19 +937,13 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n \n     uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n \n-    if (signatureCache.Get(sighash, vchSig, pubkey))\n-        return true;\n-\n-    if (!pubkey.Verify(sighash, vchSig))\n+    if (!VerifySignature(vchSig, pubkey, sighash, flags))\n         return false;\n \n-    if (!(flags & SCRIPT_VERIFY_NOCACHE))\n-        signatureCache.Set(sighash, vchSig, pubkey);\n-\n     return true;\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const SignatureChecker& checker)\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker)\n {\n     vector<vector<unsigned char> > stack, stackCopy;\n     if (!EvalScript(stack, scriptSig, flags, checker))"
      },
      {
        "sha": "801f7e0ce15a77caf8743e39412508f472e8ceeb",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 19,
        "deletions": 15,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -10,9 +10,10 @@\n #include <stdint.h>\n #include <string>\n \n+class uint256;\n+class CPubKey;\n class CScript;\n class CTransaction;\n-class uint256;\n \n /** Signature hash types/flags */\n enum\n@@ -39,29 +40,32 @@ bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n \n-class SignatureChecker\n+class BaseSignatureChecker\n+{\n+public:\n+    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int nFlags) const\n+    {\n+        return false;\n+    }\n+\n+    virtual ~BaseSignatureChecker() {}\n+};\n+\n+class SignatureChecker : public BaseSignatureChecker\n {\n private:\n     const CTransaction& txTo;\n     unsigned int nIn;\n \n+protected:\n+    virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash, int flags) const;\n+\n public:\n     SignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n     bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int nFlags) const;\n };\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const SignatureChecker& checker);\n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const SignatureChecker& checker);\n-\n-// Wrappers using a default SignatureChecker.\n-bool inline EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n-{\n-    return EvalScript(stack, script, flags, SignatureChecker(txTo, nIn));\n-}\n-\n-bool inline VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n-{\n-    return VerifyScript(scriptSig, scriptPubKey, flags, SignatureChecker(txTo, nIn));\n-}\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker);\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker);\n \n #endif // H_BITCOIN_SCRIPT_INTERPRETER"
      },
      {
        "sha": "a1dec64dbc33ea2a27be032e6f4242c300d59675",
        "filename": "src/script/sigcache.cpp",
        "status": "added",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"sigcache.h\"\n+\n+#include \"key.h\"\n+#include \"random.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/thread.hpp>\n+#include <boost/tuple/tuple_comparison.hpp>\n+\n+namespace {\n+\n+// Valid signature cache, to avoid doing expensive ECDSA signature checking\n+// twice for every transaction (once when accepted into memory pool, and\n+// again when accepted into the block chain)\n+class CSignatureCache\n+{\n+private:\n+     // sigdata_type is (signature hash, signature, public key):\n+    typedef boost::tuple<uint256, std::vector<unsigned char>, CPubKey> sigdata_type;\n+    std::set< sigdata_type> setValid;\n+    boost::shared_mutex cs_sigcache;\n+\n+public:\n+    bool\n+    Get(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n+    {\n+        boost::shared_lock<boost::shared_mutex> lock(cs_sigcache);\n+\n+        sigdata_type k(hash, vchSig, pubKey);\n+        std::set<sigdata_type>::iterator mi = setValid.find(k);\n+        if (mi != setValid.end())\n+            return true;\n+        return false;\n+    }\n+\n+    void Set(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n+    {\n+        // DoS prevention: limit cache size to less than 10MB\n+        // (~200 bytes per cache entry times 50,000 entries)\n+        // Since there are a maximum of 20,000 signature operations per block\n+        // 50,000 is a reasonable default.\n+        int64_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", 50000);\n+        if (nMaxCacheSize <= 0) return;\n+\n+        boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n+\n+        while (static_cast<int64_t>(setValid.size()) > nMaxCacheSize)\n+        {\n+            // Evict a random entry. Random because that helps\n+            // foil would-be DoS attackers who might try to pre-generate\n+            // and re-use a set of valid signatures just-slightly-greater\n+            // than our cache size.\n+            uint256 randomHash = GetRandHash();\n+            std::vector<unsigned char> unused;\n+            std::set<sigdata_type>::iterator it =\n+                setValid.lower_bound(sigdata_type(randomHash, unused, unused));\n+            if (it == setValid.end())\n+                it = setValid.begin();\n+            setValid.erase(*it);\n+        }\n+\n+        sigdata_type k(hash, vchSig, pubKey);\n+        setValid.insert(k);\n+    }\n+};\n+\n+}\n+\n+bool CachingSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash, int flags) const\n+{\n+    static CSignatureCache signatureCache;\n+\n+    if (signatureCache.Get(sighash, vchSig, pubkey))\n+        return true;\n+\n+    if (!SignatureChecker::VerifySignature(vchSig, pubkey, sighash, flags))\n+        return false;\n+\n+    if (!(flags & SCRIPT_VERIFY_NOCACHE))\n+        signatureCache.Set(sighash, vchSig, pubkey);\n+    return true;\n+}"
      },
      {
        "sha": "8faa7ae01f5e31c3a4cd5e962b326ff929799a4d",
        "filename": "src/script/sigcache.h",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_BITCOIN_SCRIPT_SIGCACHE\n+#define H_BITCOIN_SCRIPT_SIGCACHE\n+\n+#include \"script/interpreter.h\"\n+\n+#include <vector>\n+\n+class CPubKey;\n+\n+class CachingSignatureChecker : public SignatureChecker\n+{\n+public:\n+    CachingSignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : SignatureChecker(txToIn, nInIn) {}\n+\n+    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash, int flags) const;\n+};\n+\n+// Wrappers using a default SignatureChecker.\n+bool inline EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+{\n+    return EvalScript(stack, script, flags, CachingSignatureChecker(txTo, nIn));\n+}\n+\n+bool inline VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+{\n+    return VerifyScript(scriptSig, scriptPubKey, flags, CachingSignatureChecker(txTo, nIn));\n+}\n+\n+#endif"
      },
      {
        "sha": "a524ac8e5e9cfb3f607ae1e50ff034ab803e904b",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5c1e798a8e9df15f8fbd120e57fc67e585f13843/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "patch": "@@ -123,7 +123,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, STANDARD_SCRIPT_VERIFY_FLAGS);\n+    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(txTo, nIn));\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -252,9 +252,9 @@ CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsign\n     Solver(scriptPubKey, txType, vSolutions);\n \n     vector<valtype> stack1;\n-    EvalScript(stack1, scriptSig1, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC);\n+    EvalScript(stack1, scriptSig1, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n     vector<valtype> stack2;\n-    EvalScript(stack2, scriptSig2, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC);\n+    EvalScript(stack2, scriptSig2, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n \n     return CombineSignatures(scriptPubKey, txTo, nIn, txType, vSolutions, stack1, stack2);\n }"
      }
    ]
  },
  {
    "sha": "e790c370b5971dd096d1bbfd55960ccf71b7594a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzkwYzM3MGI1OTcxZGQwOTZkMWJiZmQ1NTk2MGNjZjcxYjc1OTRh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-09-14T02:48:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-02T18:26:58Z"
      },
      "message": "Replace SCRIPT_VERIFY_NOCACHE by flag directly to checker",
      "tree": {
        "sha": "de37518b3fa3c9fe6d3c6b70759f05dde90134fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de37518b3fa3c9fe6d3c6b70759f05dde90134fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e790c370b5971dd096d1bbfd55960ccf71b7594a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e790c370b5971dd096d1bbfd55960ccf71b7594a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e790c370b5971dd096d1bbfd55960ccf71b7594a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e790c370b5971dd096d1bbfd55960ccf71b7594a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c1e798a8e9df15f8fbd120e57fc67e585f13843",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c1e798a8e9df15f8fbd120e57fc67e585f13843"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 64,
      "deletions": 74
    },
    "files": [
      {
        "sha": "61d5f2c177d3523e0af2bcbe00605d987d0e73d7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -943,7 +943,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS))\n+        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n         {\n             return error(\"AcceptToMemoryPool: : ConnectInputs failed %s\", hash.ToString());\n         }\n@@ -1316,12 +1316,12 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() const {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, *ptxTo, nIn, nFlags))\n+    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore)))\n         return error(\"CScriptCheck() : %s:%d VerifySignature failed\", ptxTo->GetHash().ToString(), nIn);\n     return true;\n }\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, std::vector<CScriptCheck> *pvChecks)\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n     {\n@@ -1390,7 +1390,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                 assert(coins);\n \n                 // Verify signature\n-                CScriptCheck check(*coins, tx, i, flags);\n+                CScriptCheck check(*coins, tx, i, flags, cacheStore);\n                 if (pvChecks) {\n                     pvChecks->push_back(CScriptCheck());\n                     check.swap(pvChecks->back());\n@@ -1403,7 +1403,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         // avoid splitting the network between upgraded and\n                         // non-upgraded nodes.\n                         CScriptCheck check(*coins, tx, i,\n-                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS);\n+                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheStore);\n                         if (check())\n                             return state.Invalid(false, REJECT_NONSTANDARD, \"non-mandatory-script-verify-flag\");\n                     }\n@@ -1599,8 +1599,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     int64_t nBIP16SwitchTime = 1333238400;\n     bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n \n-    unsigned int flags = SCRIPT_VERIFY_NOCACHE |\n-                         (fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE);\n+    unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n     CBlockUndo blockundo;\n \n@@ -1644,7 +1643,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n             nFees += view.GetValueIn(tx)-tx.GetValueOut();\n \n             std::vector<CScriptCheck> vChecks;\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, nScriptCheckThreads ? &vChecks : NULL))\n+            if (!CheckInputs(tx, state, view, fScriptChecks, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n                 return false;\n             control.Add(vChecks);\n         }"
      },
      {
        "sha": "c09a139b2405ca311b5ae65c1a8dcf49f07d6e2c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -259,9 +259,8 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& ma\n // Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n // This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n // instead of being performed inline.\n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, bool fScriptChecks = true,\n-                 unsigned int flags = STANDARD_SCRIPT_VERIFY_FLAGS,\n-                 std::vector<CScriptCheck> *pvChecks = NULL);\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, bool fScriptChecks,\n+                 unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks = NULL);\n \n // Apply the effects of this transaction on the UTXO set represented by view\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight);\n@@ -303,12 +302,13 @@ class CScriptCheck\n     const CTransaction *ptxTo;\n     unsigned int nIn;\n     unsigned int nFlags;\n+    bool cacheStore;\n \n public:\n-    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0) {}\n-    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn) :\n+    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0), cacheStore(false) {}\n+    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn) :\n         scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey),\n-        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn) { }\n+        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn) { }\n \n     bool operator()() const;\n \n@@ -317,6 +317,7 @@ class CScriptCheck\n         std::swap(ptxTo, check.ptxTo);\n         std::swap(nIn, check.nIn);\n         std::swap(nFlags, check.nFlags);\n+        std::swap(cacheStore, check.cacheStore);\n     }\n };\n "
      },
      {
        "sha": "280349e8c2d560f98f9f788a9a3185b5a6b9dde3",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -257,7 +257,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             // policy here, but we still have to ensure that the block we\n             // create only contains transactions that are valid in new blocks.\n             CValidationState state;\n-            if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS))\n+            if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n                 continue;\n \n             CTxUndo txundo;"
      },
      {
        "sha": "e50a278bc8eb90cb4804b062e7dde81b8431efa3",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -687,7 +687,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, STANDARD_SCRIPT_VERIFY_FLAGS))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "56140f19dba9c01e5f8d8923257268ee441f2815",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -671,7 +671,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n                     bool fSuccess = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                        checker.CheckSig(vchSig, vchPubKey, scriptCode, flags);\n+                        checker.CheckSig(vchSig, vchPubKey, scriptCode);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -732,7 +732,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n \n                         // Check signature\n                         bool fOk = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                            checker.CheckSig(vchSig, vchPubKey, scriptCode, flags);\n+                            checker.CheckSig(vchSig, vchPubKey, scriptCode);\n \n                         if (fOk) {\n                             isig++;\n@@ -917,12 +917,12 @@ uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsig\n     return ss.GetHash();\n }\n \n-bool SignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash, int flags) const\n+bool SignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n     return pubkey.Verify(sighash, vchSig);\n }\n \n-bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, int flags) const\n+bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n {\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())\n@@ -937,7 +937,7 @@ bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vec\n \n     uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n \n-    if (!VerifySignature(vchSig, pubkey, sighash, flags))\n+    if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;\n \n     return true;"
      },
      {
        "sha": "f5363a7535a6fa9236911d0709fe33eb2e3528e4",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -31,8 +31,7 @@ enum\n     SCRIPT_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n     SCRIPT_VERIFY_STRICTENC = (1U << 1), // enforce strict conformance to DER and SEC2 for signatures and pubkeys\n     SCRIPT_VERIFY_LOW_S     = (1U << 2), // enforce low S values (<n/2) in signatures (depends on STRICTENC)\n-    SCRIPT_VERIFY_NOCACHE   = (1U << 3), // do not store results in signature cache (but do query it)\n-    SCRIPT_VERIFY_NULLDUMMY = (1U << 4), // verify dummy stack item consumed by CHECKMULTISIG is of zero-length\n+    SCRIPT_VERIFY_NULLDUMMY = (1U << 3), // verify dummy stack item consumed by CHECKMULTISIG is of zero-length\n };\n \n bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey, unsigned int flags);\n@@ -43,7 +42,7 @@ uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsig\n class BaseSignatureChecker\n {\n public:\n-    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int nFlags) const\n+    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n     {\n         return false;\n     }\n@@ -58,11 +57,11 @@ class SignatureChecker : public BaseSignatureChecker\n     unsigned int nIn;\n \n protected:\n-    virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash, int flags) const;\n+    virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n \n public:\n     SignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, int nFlags) const;\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n };\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker);"
      },
      {
        "sha": "981563b7aea02b82bfa76ef89c6fe3944cddd972",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -72,17 +72,17 @@ class CSignatureCache\n \n }\n \n-bool CachingSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash, int flags) const\n+bool CachingSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n     static CSignatureCache signatureCache;\n \n     if (signatureCache.Get(sighash, vchSig, pubkey))\n         return true;\n \n-    if (!SignatureChecker::VerifySignature(vchSig, pubkey, sighash, flags))\n+    if (!SignatureChecker::VerifySignature(vchSig, pubkey, sighash))\n         return false;\n \n-    if (!(flags & SCRIPT_VERIFY_NOCACHE))\n+    if (store)\n         signatureCache.Set(sighash, vchSig, pubkey);\n     return true;\n }"
      },
      {
        "sha": "9537efbd118e677c1756eaa39c25fa9a393c8c40",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -14,21 +14,13 @@ class CPubKey;\n \n class CachingSignatureChecker : public SignatureChecker\n {\n+private:\n+    bool store;\n+\n public:\n-    CachingSignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : SignatureChecker(txToIn, nInIn) {}\n+    CachingSignatureChecker(const CTransaction& txToIn, unsigned int nInIn, bool storeIn=true) : SignatureChecker(txToIn, nInIn), store(storeIn) {}\n \n-    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash, int flags) const;\n+    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };\n \n-// Wrappers using a default SignatureChecker.\n-bool inline EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n-{\n-    return EvalScript(stack, script, flags, CachingSignatureChecker(txTo, nIn));\n-}\n-\n-bool inline VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n-{\n-    return VerifyScript(scriptSig, scriptPubKey, flags, CachingSignatureChecker(txTo, nIn));\n-}\n-\n #endif"
      },
      {
        "sha": "da77e7d1f1be881540937df77f5170540b5015a8",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -174,7 +174,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (SignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey, 0))\n+            if (SignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n             {\n                 sigs[pubkey] = sig;\n                 break;"
      },
      {
        "sha": "5a2ec1cb31947aa14de97d2251a50994102c1ef8",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -82,19 +82,19 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.clear();\n     keys += key[0],key[1]; // magic operator+= from boost.assign\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, flags));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.clear();\n         keys += key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)), strprintf(\"a&b 1: %d\", i));\n \n         keys.clear();\n         keys += key[1],key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)), strprintf(\"a&b 2: %d\", i));\n     }\n \n     // Test a OR b:\n@@ -104,16 +104,16 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         keys += key[i];\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, flags), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)), strprintf(\"a|b: %d\", i));\n         else\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, flags), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)), strprintf(\"a|b: %d\", i));\n     }\n     s.clear();\n     s << OP_0 << OP_0;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)));\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)));\n \n \n     for (int i = 0; i < 4; i++)\n@@ -123,9 +123,9 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             keys += key[i],key[j];\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, flags), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0)), strprintf(\"escrow 1: %d %d\", i, j));\n             else\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, flags), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0)), strprintf(\"escrow 2: %d %d\", i, j));\n         }\n }\n "
      },
      {
        "sha": "6c32a263a97139558f2ef43565fd1cc2e19d76d9",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -42,7 +42,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict)\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, txTo, 0, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE);\n+    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, SignatureChecker(txTo, 0));\n }\n \n \n@@ -113,7 +113,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         {\n             CScript sigSave = txTo[i].vin[0].scriptSig;\n             txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n-            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC)();\n+            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false)();\n             if (i == j)\n                 BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             else"
      },
      {
        "sha": "bfba0ea7fe96497041417498057e5574ba22ca6e",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -464,18 +464,18 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n     static const unsigned char pushdata4[] = { OP_PUSHDATA4, 1, 0, 0, 0, 0x5a };\n \n     vector<vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, true));\n+    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), true, BaseSignatureChecker()));\n \n     vector<vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, true));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), true, BaseSignatureChecker()));\n     BOOST_CHECK(pushdata1Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, true));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), true, BaseSignatureChecker()));\n     BOOST_CHECK(pushdata2Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, true));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), true, BaseSignatureChecker()));\n     BOOST_CHECK(pushdata4Stack == directStack);\n }\n \n@@ -533,15 +533,15 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     txTo12.vout[0].nValue = 1;\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n }\n \n BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n@@ -569,46 +569,46 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n }    \n \n BOOST_AUTO_TEST_CASE(script_combineSigs)"
      },
      {
        "sha": "823afa168050770798b29c768cef2978c2f884e1",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e790c370b5971dd096d1bbfd55960ccf71b7594a/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "patch": "@@ -27,7 +27,6 @@ using namespace boost::algorithm;\n // In script_tests.cpp\n extern Array read_json(const std::string& jsondata);\n \n-// Note how NOCACHE is not included as it is a runtime-only flag.\n static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"NONE\"), (unsigned int)SCRIPT_VERIFY_NONE)\n     (string(\"P2SH\"), (unsigned int)SCRIPT_VERIFY_P2SH)\n@@ -139,7 +138,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 tx, i, verify_flags),\n+                                                 verify_flags, SignatureChecker(tx, i)),\n                                     strTest);\n             }\n         }\n@@ -212,7 +211,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      tx, i, verify_flags);\n+                                      verify_flags, SignatureChecker(tx, i));\n             }\n \n             BOOST_CHECK_MESSAGE(!fValid, strTest);"
      }
    ]
  },
  {
    "sha": "54510f267228e3f6934fdcf8d02d02a95a06d876",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDUxMGYyNjcyMjhlM2Y2OTM0ZmRjZjhkMDJkMDJhOTVhMDZkODc2",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-09-28T04:33:33Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-02T19:48:29Z"
      },
      "message": "DRY: Avoid repetitions in script_test",
      "tree": {
        "sha": "3bd264ab7ee5610bf5076b0e77ab276dd0f2bc02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3bd264ab7ee5610bf5076b0e77ab276dd0f2bc02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54510f267228e3f6934fdcf8d02d02a95a06d876",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54510f267228e3f6934fdcf8d02d02a95a06d876",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54510f267228e3f6934fdcf8d02d02a95a06d876",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54510f267228e3f6934fdcf8d02d02a95a06d876/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6faee7942671141649b74e50908cb99cabc840e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6faee7942671141649b74e50908cb99cabc840e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6faee7942671141649b74e50908cb99cabc840e5"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 7,
      "deletions": 30
    },
    "files": [
      {
        "sha": "48a5635d8fd397ef5c87f7212e4a6c93468775a7",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 30,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54510f267228e3f6934fdcf8d02d02a95a06d876/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54510f267228e3f6934fdcf8d02d02a95a06d876/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=54510f267228e3f6934fdcf8d02d02a95a06d876",
        "patch": "@@ -70,7 +70,7 @@ CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n     return txCredit;\n }\n \n-CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CTransaction& txCredit)\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)\n {\n     CMutableTransaction txSpend;\n     txSpend.nVersion = 1;\n@@ -521,16 +521,8 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CScript scriptPubKey12;\n     scriptPubKey12 << OP_1 << key1.GetPubKey() << key2.GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n \n-    CMutableTransaction txFrom12;\n-    txFrom12.vout.resize(1);\n-    txFrom12.vout[0].scriptPubKey = scriptPubKey12;\n-\n-    CMutableTransaction txTo12;\n-    txTo12.vin.resize(1);\n-    txTo12.vout.resize(1);\n-    txTo12.vin[0].prevout.n = 0;\n-    txTo12.vin[0].prevout.hash = txFrom12.GetHash();\n-    txTo12.vout[0].nValue = 1;\n+    CMutableTransaction txFrom12 = BuildCreditingTransaction(scriptPubKey12);\n+    CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n     BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags));\n@@ -555,16 +547,8 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     CScript scriptPubKey23;\n     scriptPubKey23 << OP_2 << key1.GetPubKey() << key2.GetPubKey() << key3.GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n \n-    CMutableTransaction txFrom23;\n-    txFrom23.vout.resize(1);\n-    txFrom23.vout[0].scriptPubKey = scriptPubKey23;\n-\n-    CMutableTransaction txTo23;\n-    txTo23.vin.resize(1);\n-    txTo23.vout.resize(1);\n-    txTo23.vin[0].prevout.n = 0;\n-    txTo23.vin[0].prevout.hash = txFrom23.GetHash();\n-    txTo23.vout[0].nValue = 1;\n+    CMutableTransaction txFrom23 = BuildCreditingTransaction(scriptPubKey23);\n+    CMutableTransaction txTo23 = BuildSpendingTransaction(CScript(), txFrom23);\n \n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n@@ -626,17 +610,10 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n         keystore.AddKey(key);\n     }\n \n-    CMutableTransaction txFrom;\n-    txFrom.vout.resize(1);\n-    txFrom.vout[0].scriptPubKey = GetScriptForDestination(keys[0].GetPubKey().GetID());\n+    CMutableTransaction txFrom = BuildCreditingTransaction(GetScriptForDestination(keys[0].GetPubKey().GetID()));\n+    CMutableTransaction txTo = BuildSpendingTransaction(CScript(), txFrom);\n     CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n-    CMutableTransaction txTo;\n-    txTo.vin.resize(1);\n-    txTo.vout.resize(1);\n-    txTo.vin[0].prevout.n = 0;\n-    txTo.vin[0].prevout.hash = txFrom.GetHash();\n     CScript& scriptSig = txTo.vin[0].scriptSig;\n-    txTo.vout[0].nValue = 1;\n \n     CScript empty;\n     CScript combined = CombineSignatures(scriptPubKey, txTo, 0, empty, empty);"
      }
    ]
  },
  {
    "sha": "b9b2e3fabd36b9f93b09c2deb53aa626c26df9e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWIyZTNmYWJkMzZiOWY5M2IwOWMyZGViNTNhYTYyNmMyNmRmOWUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T20:17:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T20:20:16Z"
      },
      "message": "Don't translate state.Abort() messages\n\nThere is only one message passed to AbortNode() that makes sense to\ntranslate to the user specifically: Disk space is low. For the others\nshow a generic message and refer to debug.log for details.\n\nReduces the number of confusing jargon translation messages.",
      "tree": {
        "sha": "4c4da566a8b138de862fdccb5edf096c271cecc0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c4da566a8b138de862fdccb5edf096c271cecc0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9b2e3fabd36b9f93b09c2deb53aa626c26df9e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9b2e3fabd36b9f93b09c2deb53aa626c26df9e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9b2e3fabd36b9f93b09c2deb53aa626c26df9e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9b2e3fabd36b9f93b09c2deb53aa626c26df9e2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6faee7942671141649b74e50908cb99cabc840e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6faee7942671141649b74e50908cb99cabc840e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6faee7942671141649b74e50908cb99cabc840e5"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 21,
      "deletions": 19
    },
    "files": [
      {
        "sha": "793b3511aa98dffc60492bc0d2fb0aa364d4a739",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 18,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9b2e3fabd36b9f93b09c2deb53aa626c26df9e2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9b2e3fabd36b9f93b09c2deb53aa626c26df9e2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b9b2e3fabd36b9f93b09c2deb53aa626c26df9e2",
        "patch": "@@ -1688,7 +1688,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n             if (!FindUndoPos(state, pindex->nFile, pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n                 return error(\"ConnectBlock() : FindUndoPos failed\");\n             if (!blockundo.WriteToDisk(pos, pindex->pprev->GetBlockHash()))\n-                return state.Abort(_(\"Failed to write undo data\"));\n+                return state.Abort(\"Failed to write undo data\");\n \n             // update nUndoPos in block index\n             pindex->nUndoPos = pos.nPos;\n@@ -1699,12 +1699,12 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n \n         CDiskBlockIndex blockindex(pindex);\n         if (!pblocktree->WriteBlockIndex(blockindex))\n-            return state.Abort(_(\"Failed to write block index\"));\n+            return state.Abort(\"Failed to write block index\");\n     }\n \n     if (fTxIndex)\n         if (!pblocktree->WriteTxIndex(vPos))\n-            return state.Abort(_(\"Failed to write transaction index\"));\n+            return state.Abort(\"Failed to write transaction index\");\n \n     // add this block to the view's block chain\n     bool ret;\n@@ -1739,7 +1739,7 @@ bool static WriteChainState(CValidationState &state) {\n         FlushBlockFile();\n         pblocktree->Sync();\n         if (!pcoinsTip->Flush())\n-            return state.Abort(_(\"Failed to write to coin database\"));\n+            return state.Abort(\"Failed to write to coin database\");\n         nLastWrite = GetTimeMicros();\n     }\n     return true;\n@@ -1787,7 +1787,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Read block from disk.\n     CBlock block;\n     if (!ReadBlockFromDisk(block, pindexDelete))\n-        return state.Abort(_(\"Failed to read block\"));\n+        return state.Abort(\"Failed to read block\");\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n@@ -1836,7 +1836,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     CBlock block;\n     if (!pblock) {\n         if (!ReadBlockFromDisk(block, pindexNew))\n-            return state.Abort(_(\"Failed to read block\"));\n+            return state.Abort(\"Failed to read block\");\n         pblock = &block;\n     }\n     // Apply the block atomically to the chain state.\n@@ -1990,7 +1990,7 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n         CheckForkWarningConditions();\n \n     if (!pblocktree->Flush())\n-        return state.Abort(_(\"Failed to sync block index\"));\n+        return state.Abort(\"Failed to sync block index\");\n \n     return true;\n }\n@@ -2097,7 +2097,7 @@ bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBl\n         setBlockIndexValid.insert(pindexNew);\n \n     if (!pblocktree->WriteBlockIndex(CDiskBlockIndex(pindexNew)))\n-        return state.Abort(_(\"Failed to write block index\"));\n+        return state.Abort(\"Failed to write block index\");\n \n     return true;\n }\n@@ -2149,7 +2149,7 @@ bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAdd\n     }\n \n     if (!pblocktree->WriteBlockFileInfo(nLastBlockFile, infoLastBlockFile))\n-        return state.Abort(_(\"Failed to write file info\"));\n+        return state.Abort(\"Failed to write file info\");\n     if (fUpdatedLast)\n         pblocktree->WriteLastBlockFile(nLastBlockFile);\n \n@@ -2167,15 +2167,15 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n         pos.nPos = infoLastBlockFile.nUndoSize;\n         nNewSize = (infoLastBlockFile.nUndoSize += nAddSize);\n         if (!pblocktree->WriteBlockFileInfo(nLastBlockFile, infoLastBlockFile))\n-            return state.Abort(_(\"Failed to write block info\"));\n+            return state.Abort(\"Failed to write block info\");\n     } else {\n         CBlockFileInfo info;\n         if (!pblocktree->ReadBlockFileInfo(nFile, info))\n-            return state.Abort(_(\"Failed to read block info\"));\n+            return state.Abort(\"Failed to read block info\");\n         pos.nPos = info.nUndoSize;\n         nNewSize = (info.nUndoSize += nAddSize);\n         if (!pblocktree->WriteBlockFileInfo(nFile, info))\n-            return state.Abort(_(\"Failed to write block info\"));\n+            return state.Abort(\"Failed to write block info\");\n     }\n \n     unsigned int nOldChunks = (pos.nPos + UNDOFILE_CHUNK_SIZE - 1) / UNDOFILE_CHUNK_SIZE;\n@@ -2392,11 +2392,11 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n             return error(\"AcceptBlock() : FindBlockPos failed\");\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos))\n-                return state.Abort(_(\"Failed to write block\"));\n+                return state.Abort(\"Failed to write block\");\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n             return error(\"AcceptBlock() : ReceivedBlockTransactions failed\");\n     } catch(std::runtime_error &e) {\n-        return state.Abort(_(\"System error: \") + e.what());\n+        return state.Abort(std::string(\"System error: \") + e.what());\n     }\n \n     return true;\n@@ -2719,10 +2719,12 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n \n \n \n-bool AbortNode(const std::string &strMessage) {\n+bool AbortNode(const std::string &strMessage, const std::string &userMessage) {\n     strMiscWarning = strMessage;\n     LogPrintf(\"*** %s\\n\", strMessage);\n-    uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_ERROR);\n+    uiInterface.ThreadSafeMessageBox(\n+        userMessage.empty() ? _(\"Error: A fatal internal error occured, see debug.log for details\") : userMessage,\n+        \"\", CClientUIInterface::MSG_ERROR);\n     StartShutdown();\n     return false;\n }\n@@ -2733,7 +2735,7 @@ bool CheckDiskSpace(uint64_t nAdditionalBytes)\n \n     // Check for nMinDiskSpace bytes (currently 50MB)\n     if (nFreeBytesAvailable < nMinDiskSpace + nAdditionalBytes)\n-        return AbortNode(_(\"Error: Disk space is low!\"));\n+        return AbortNode(\"Disk space is low!\", _(\"Error: Disk space is low!\"));\n \n     return true;\n }\n@@ -3143,7 +3145,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n         }\n         fclose(fileIn);\n     } catch(std::runtime_error &e) {\n-        AbortNode(_(\"Error: system error: \") + e.what());\n+        AbortNode(std::string(\"System error: \") + e.what());\n     }\n     if (nLoaded > 0)\n         LogPrintf(\"Loaded %i blocks from external file in %dms\\n\", nLoaded, GetTimeMillis() - nStart);"
      },
      {
        "sha": "156a0af19fed2b9cf5ecc7a6876f28f35ceed0ce",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9b2e3fabd36b9f93b09c2deb53aa626c26df9e2/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9b2e3fabd36b9f93b09c2deb53aa626c26df9e2/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=b9b2e3fabd36b9f93b09c2deb53aa626c26df9e2",
        "patch": "@@ -177,7 +177,7 @@ CAmount GetBlockValue(int nHeight, const CAmount& nFees);\n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n /** Abort with a message */\n-bool AbortNode(const std::string &msg);\n+bool AbortNode(const std::string &msg, const std::string &userMessage=\"\");\n /** Get statistics from node state */\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n /** Increase a node's misbehavior score. */"
      }
    ]
  },
  {
    "sha": "eb6b3b245cab5bb172ba27a0072edf9c2de32c29",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjZiM2IyNDVjYWI1YmIxNzJiYTI3YTAwNzJlZGY5YzJkZTMyYzI5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T20:20:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T20:20:23Z"
      },
      "message": "Update English translation",
      "tree": {
        "sha": "c9e676111b18e342a3001a2aae804475a3604b28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9e676111b18e342a3001a2aae804475a3604b28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb6b3b245cab5bb172ba27a0072edf9c2de32c29",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb6b3b245cab5bb172ba27a0072edf9c2de32c29",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb6b3b245cab5bb172ba27a0072edf9c2de32c29",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb6b3b245cab5bb172ba27a0072edf9c2de32c29/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9b2e3fabd36b9f93b09c2deb53aa626c26df9e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9b2e3fabd36b9f93b09c2deb53aa626c26df9e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9b2e3fabd36b9f93b09c2deb53aa626c26df9e2"
      }
    ],
    "stats": {
      "total": 362,
      "additions": 161,
      "deletions": 201
    },
    "files": [
      {
        "sha": "25c811183fa958eaf50b718da82772a76be51427",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb6b3b245cab5bb172ba27a0072edf9c2de32c29/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb6b3b245cab5bb172ba27a0072edf9c2de32c29/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=eb6b3b245cab5bb172ba27a0072edf9c2de32c29",
        "patch": "@@ -195,21 +195,11 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading wallet.dat: Wallet corrupted\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading wallet.dat: Wallet requires newer version of Bitcoin Core\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error opening block database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: A fatal internal error occured, see debug.log for details\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Disk space is low!\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Unsupported argument -tor found, use -onion.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Wallet locked, unable to create transaction!\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: system error: \"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to listen on any port. Use -listen=0 if you want this.\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to read block info\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to read block\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to sync block index\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to write block index\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to write block info\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to write block\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to write file info\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to write to coin database\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to write transaction index\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to write undo data\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Fee (in BTC/kB) to add to transactions you send (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Force safe mode (default: 0)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Generate coins (default: 0)\"),\n@@ -231,6 +221,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -paytxfee=<amount>: '%s'\")\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid netmask specified in -whitelist: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keep at most <n> unconnectable blocks in memory (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keep at most <n> unconnectable transactions in memory (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Limit size of signature cache to <n> entries (default: 50000)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Listen for connections on <port> (default: 8333 or testnet: 18333)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading addresses...\"),\n@@ -245,7 +236,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Need to specify a port with -whitebind: '%s'\"\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Node relay options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Not enough file descriptors available.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Only accept block chain matching built-in checkpoints (default: 1)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Only connect to nodes in network <net> (IPv4, IPv6 or Tor)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Password for JSON-RPC connections\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Prepend debug output with timestamp (default: 1)\"),\n@@ -282,7 +273,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify wallet file (within data directory)\")\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify your own public address\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Spend unconfirmed change when sending transactions (default: 1)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Stop running after importing blocks from disk (default: 0)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"System error: \"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"This help message\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"This is experimental software.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"This is intended for regression testing tools and app development.\"),"
      },
      {
        "sha": "5c3abef2e7f892dd17bbb8452ee3e13ce850a306",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 158,
        "deletions": 188,
        "changes": 346,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb6b3b245cab5bb172ba27a0072edf9c2de32c29/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb6b3b245cab5bb172ba27a0072edf9c2de32c29/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=eb6b3b245cab5bb172ba27a0072edf9c2de32c29",
        "patch": "@@ -19,7 +19,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+11\"/>\n+        <location line=\"+14\"/>\n         <source>Copy the currently selected address to the system clipboard</source>\n         <translation>Copy the currently selected address to the system clipboard</translation>\n     </message>\n@@ -29,7 +29,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+58\"/>\n+        <location line=\"+67\"/>\n         <source>C&amp;lose</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -39,12 +39,12 @@\n         <translation>&amp;Copy Address</translation>\n     </message>\n     <message>\n-        <location filename=\"../forms/addressbookpage.ui\" line=\"-47\"/>\n+        <location filename=\"../forms/addressbookpage.ui\" line=\"-53\"/>\n         <source>Delete the currently selected address from the list</source>\n         <translation>Delete the currently selected address from the list</translation>\n     </message>\n     <message>\n-        <location line=\"+27\"/>\n+        <location line=\"+30\"/>\n         <source>Export the data in the current tab to a file</source>\n         <translation>Export the data in the current tab to a file</translation>\n     </message>\n@@ -54,7 +54,7 @@\n         <translation>&amp;Export</translation>\n     </message>\n     <message>\n-        <location line=\"-27\"/>\n+        <location line=\"-30\"/>\n         <source>&amp;Delete</source>\n         <translation>&amp;Delete</translation>\n     </message>\n@@ -286,17 +286,17 @@\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n-        <location filename=\"../bitcoingui.cpp\" line=\"+300\"/>\n+        <location filename=\"../bitcoingui.cpp\" line=\"+327\"/>\n         <source>Sign &amp;message...</source>\n         <translation>Sign &amp;message...</translation>\n     </message>\n     <message>\n-        <location line=\"+339\"/>\n+        <location line=\"+348\"/>\n         <source>Synchronizing with network...</source>\n         <translation>Synchronizing with network...</translation>\n     </message>\n     <message>\n-        <location line=\"-411\"/>\n+        <location line=\"-420\"/>\n         <source>&amp;Overview</source>\n         <translation>&amp;Overview</translation>\n     </message>\n@@ -377,13 +377,13 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+168\"/>\n+        <location line=\"+175\"/>\n         <location line=\"+5\"/>\n         <source>Bitcoin Core client</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+156\"/>\n+        <location line=\"+158\"/>\n         <source>Importing blocks from disk...</source>\n         <translation>Importing blocks from disk...</translation>\n     </message>\n@@ -393,7 +393,7 @@\n         <translation>Reindexing blocks on disk...</translation>\n     </message>\n     <message>\n-        <location line=\"-409\"/>\n+        <location line=\"-418\"/>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Send coins to a Bitcoin address</translation>\n     </message>\n@@ -428,12 +428,12 @@\n         <translation>&amp;Verify message...</translation>\n     </message>\n     <message>\n-        <location line=\"+437\"/>\n+        <location line=\"+446\"/>\n         <source>Bitcoin</source>\n         <translation>Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"-655\"/>\n+        <location line=\"-664\"/>\n         <source>Wallet</source>\n         <translation>Wallet</translation>\n     </message>\n@@ -500,12 +500,12 @@\n     </message>\n     <message>\n         <location line=\"-289\"/>\n-        <location line=\"+386\"/>\n+        <location line=\"+393\"/>\n         <source>[testnet]</source>\n         <translation>[testnet]</translation>\n     </message>\n     <message>\n-        <location line=\"-411\"/>\n+        <location line=\"-418\"/>\n         <source>Bitcoin Core</source>\n         <translation type=\"unfinished\">Bitcoin Core</translation>\n     </message>\n@@ -546,15 +546,15 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+310\"/>\n+        <location line=\"+316\"/>\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation>\n             <numerusform>%n active connection to Bitcoin network</numerusform>\n             <numerusform>%n active connections to Bitcoin network</numerusform>\n         </translation>\n     </message>\n     <message>\n-        <location line=\"+22\"/>\n+        <location line=\"+25\"/>\n         <source>No block source available...</source>\n         <translation>No block source available...</translation>\n     </message>\n@@ -665,7 +665,7 @@ Address: %4\n </translation>\n     </message>\n     <message>\n-        <location line=\"+69\"/>\n+        <location line=\"+68\"/>\n         <source>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;unlocked&lt;/b&gt;</source>\n         <translation>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;unlocked&lt;/b&gt;</translation>\n     </message>\n@@ -678,7 +678,7 @@ Address: %4\n <context>\n     <name>ClientModel</name>\n     <message>\n-        <location filename=\"../clientmodel.cpp\" line=\"+138\"/>\n+        <location filename=\"../clientmodel.cpp\" line=\"+139\"/>\n         <source>Network Alert</source>\n         <translation>Network Alert</translation>\n     </message>\n@@ -736,7 +736,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n+        <location line=\"+16\"/>\n         <source>Tree mode</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1059,7 +1059,7 @@ Address: %4\n <context>\n     <name>HelpMessageDialog</name>\n     <message>\n-        <location filename=\"../utilitydialog.cpp\" line=\"+29\"/>\n+        <location filename=\"../utilitydialog.cpp\" line=\"+31\"/>\n         <source>Bitcoin Core</source>\n         <translation type=\"unfinished\">Bitcoin Core</translation>\n     </message>\n@@ -1201,7 +1201,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+11\"/>\n+        <location line=\"+10\"/>\n         <source>Select payment request file</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1430,12 +1430,12 @@ Address: %4\n         <translation>&amp;OK</translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+13\"/>\n         <source>&amp;Cancel</source>\n         <translation>&amp;Cancel</translation>\n     </message>\n     <message>\n-        <location filename=\"../optionsdialog.cpp\" line=\"+68\"/>\n+        <location filename=\"../optionsdialog.cpp\" line=\"+71\"/>\n         <source>default</source>\n         <translation>default</translation>\n     </message>\n@@ -1479,23 +1479,18 @@ Address: %4\n         <translation>Form</translation>\n     </message>\n     <message>\n-        <location line=\"+52\"/>\n-        <location line=\"+394\"/>\n+        <location line=\"+53\"/>\n+        <location line=\"+372\"/>\n         <source>The displayed information may be out of date. Your wallet automatically synchronizes with the Bitcoin network after a connection is established, but this process has not completed yet.</source>\n         <translation>The displayed information may be out of date. Your wallet automatically synchronizes with the Bitcoin network after a connection is established, but this process has not completed yet.</translation>\n     </message>\n     <message>\n-        <location line=\"-401\"/>\n-        <source>Wallet</source>\n-        <translation>Wallet</translation>\n-    </message>\n-    <message>\n-        <location line=\"+33\"/>\n+        <location line=\"-133\"/>\n         <source>Watch-only:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+43\"/>\n+        <location line=\"+10\"/>\n         <source>Available:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1505,62 +1500,72 @@ Address: %4\n         <translation>Your current spendable balance</translation>\n     </message>\n     <message>\n-        <location line=\"+16\"/>\n+        <location line=\"+41\"/>\n         <source>Pending:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+16\"/>\n+        <location line=\"-236\"/>\n         <source>Total of transactions that have yet to be confirmed, and do not yet count toward the spendable balance</source>\n         <translation>Total of transactions that have yet to be confirmed, and do not yet count toward the spendable balance</translation>\n     </message>\n     <message>\n-        <location line=\"+16\"/>\n+        <location line=\"+112\"/>\n         <source>Immature:</source>\n         <translation>Immature:</translation>\n     </message>\n     <message>\n-        <location line=\"+16\"/>\n+        <location line=\"-29\"/>\n         <source>Mined balance that has not yet matured</source>\n         <translation>Mined balance that has not yet matured</translation>\n     </message>\n     <message>\n-        <location line=\"+23\"/>\n+        <location line=\"-163\"/>\n+        <source>Balances</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+147\"/>\n         <source>Total:</source>\n         <translation>Total:</translation>\n     </message>\n     <message>\n-        <location line=\"+16\"/>\n+        <location line=\"+61\"/>\n         <source>Your current total balance</source>\n         <translation>Your current total balance</translation>\n     </message>\n     <message>\n-        <location line=\"+38\"/>\n+        <location line=\"+92\"/>\n         <source>Your current balance in watch-only addresses</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+25\"/>\n+        <location line=\"+23\"/>\n+        <source>Spendable:</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+49\"/>\n+        <source>Recent transactions</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-317\"/>\n         <source>Unconfirmed transactions to watch-only addresses</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+25\"/>\n+        <location line=\"+50\"/>\n         <source>Mined balance in watch-only addresses that has not yet matured</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+44\"/>\n+        <location line=\"+128\"/>\n         <source>Current total balance in watch-only addresses</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+67\"/>\n-        <source>&lt;b&gt;Recent transactions&lt;/b&gt;</source>\n-        <translation>&lt;b&gt;Recent transactions&lt;/b&gt;</translation>\n-    </message>\n-    <message>\n-        <location filename=\"../overviewpage.cpp\" line=\"+123\"/>\n+        <location filename=\"../overviewpage.cpp\" line=\"+131\"/>\n         <location line=\"+1\"/>\n         <source>out of sync</source>\n         <translation>out of sync</translation>\n@@ -1569,7 +1574,7 @@ Address: %4\n <context>\n     <name>PaymentServer</name>\n     <message>\n-        <location filename=\"../paymentserver.cpp\" line=\"+405\"/>\n+        <location filename=\"../paymentserver.cpp\" line=\"+410\"/>\n         <location line=\"+14\"/>\n         <location line=\"+7\"/>\n         <source>URI handling</source>\n@@ -1681,7 +1686,7 @@ Address: %4\n <context>\n     <name>PeerTableModel</name>\n     <message>\n-        <location filename=\"../peertablemodel.cpp\" line=\"+112\"/>\n+        <location filename=\"../peertablemodel.cpp\" line=\"+118\"/>\n         <source>User Agent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1699,17 +1704,17 @@ Address: %4\n <context>\n     <name>QObject</name>\n     <message>\n-        <location filename=\"../bitcoinunits.cpp\" line=\"+200\"/>\n+        <location filename=\"../bitcoinunits.cpp\" line=\"+196\"/>\n         <source>Amount</source>\n         <translation type=\"unfinished\">Amount</translation>\n     </message>\n     <message>\n-        <location filename=\"../guiutil.cpp\" line=\"+97\"/>\n+        <location filename=\"../guiutil.cpp\" line=\"+106\"/>\n         <source>Enter a Bitcoin address (e.g. %1)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+673\"/>\n+        <location line=\"+698\"/>\n         <source>%1 d</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1795,7 +1800,7 @@ Address: %4\n         <location line=\"+23\"/>\n         <location line=\"+36\"/>\n         <location line=\"+23\"/>\n-        <location line=\"+462\"/>\n+        <location line=\"+465\"/>\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n@@ -1813,7 +1818,7 @@ Address: %4\n         <translation>N/A</translation>\n     </message>\n     <message>\n-        <location line=\"-987\"/>\n+        <location line=\"-990\"/>\n         <source>Client version</source>\n         <translation>Client version</translation>\n     </message>\n@@ -1873,7 +1878,7 @@ Address: %4\n         <translation>Current number of blocks</translation>\n     </message>\n     <message>\n-        <location line=\"+300\"/>\n+        <location line=\"+303\"/>\n         <source>Received</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1889,7 +1894,7 @@ Address: %4\n     </message>\n     <message>\n         <location line=\"+39\"/>\n-        <location filename=\"../rpcconsole.cpp\" line=\"+234\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"+236\"/>\n         <location line=\"+327\"/>\n         <source>Select a peer to view detailed information.</source>\n         <translation type=\"unfinished\"></translation>\n@@ -1965,7 +1970,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-761\"/>\n+        <location line=\"-764\"/>\n         <source>Last block time</source>\n         <translation>Last block time</translation>\n     </message>\n@@ -1990,7 +1995,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n+        <location line=\"+16\"/>\n         <source>Totals</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2005,7 +2010,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../forms/rpcconsole.ui\" line=\"-354\"/>\n+        <location filename=\"../forms/rpcconsole.ui\" line=\"-357\"/>\n         <source>Build date</source>\n         <translation>Build date</translation>\n     </message>\n@@ -2163,12 +2168,12 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+78\"/>\n+        <location line=\"+75\"/>\n         <source>Requested payments history</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-98\"/>\n+        <location line=\"-95\"/>\n         <source>&amp;Request payment</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2183,7 +2188,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+14\"/>\n+        <location line=\"+17\"/>\n         <source>Remove the selected entries from the list</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2221,12 +2226,12 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+10\"/>\n         <source>Copy &amp;Address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+10\"/>\n         <source>&amp;Save Image...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2279,7 +2284,7 @@ Address: %4\n <context>\n     <name>RecentRequestsTableModel</name>\n     <message>\n-        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+24\"/>\n+        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+26\"/>\n         <source>Date</source>\n         <translation type=\"unfinished\">Date</translation>\n     </message>\n@@ -2333,7 +2338,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+10\"/>\n         <source>automatically selected</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2398,22 +2403,22 @@ Address: %4\n         <translation>Add &amp;Recipient</translation>\n     </message>\n     <message>\n-        <location line=\"-23\"/>\n+        <location line=\"-20\"/>\n         <source>Clear all fields of the form.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-271\"/>\n+        <location line=\"-274\"/>\n         <source>Dust:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+274\"/>\n+        <location line=\"+277\"/>\n         <source>Clear &amp;All</source>\n         <translation>Clear &amp;All</translation>\n     </message>\n     <message>\n-        <location line=\"+58\"/>\n+        <location line=\"+55\"/>\n         <source>Balance:</source>\n         <translation>Balance:</translation>\n     </message>\n@@ -2653,7 +2658,7 @@ Address: %4\n <context>\n     <name>ShutdownWindow</name>\n     <message>\n-        <location filename=\"../utilitydialog.cpp\" line=\"+51\"/>\n+        <location filename=\"../utilitydialog.cpp\" line=\"+47\"/>\n         <source>Bitcoin Core is shutting down...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2671,7 +2676,7 @@ Address: %4\n         <translation>Signatures - Sign / Verify a Message</translation>\n     </message>\n     <message>\n-        <location line=\"+10\"/>\n+        <location line=\"+13\"/>\n         <source>&amp;Sign Message</source>\n         <translation>&amp;Sign Message</translation>\n     </message>\n@@ -2848,7 +2853,7 @@ Address: %4\n <context>\n     <name>SplashScreen</name>\n     <message>\n-        <location filename=\"../splashscreen.cpp\" line=\"+32\"/>\n+        <location filename=\"../splashscreen.cpp\" line=\"+34\"/>\n         <source>Bitcoin Core</source>\n         <translation type=\"unfinished\">Bitcoin Core</translation>\n     </message>\n@@ -2874,7 +2879,7 @@ Address: %4\n <context>\n     <name>TransactionDesc</name>\n     <message>\n-        <location filename=\"../transactiondesc.cpp\" line=\"+33\"/>\n+        <location filename=\"../transactiondesc.cpp\" line=\"+34\"/>\n         <source>Open until %1</source>\n         <translation>Open until %1</translation>\n     </message>\n@@ -3098,7 +3103,7 @@ Address: %4\n <context>\n     <name>TransactionTableModel</name>\n     <message>\n-        <location filename=\"../transactiontablemodel.cpp\" line=\"+237\"/>\n+        <location filename=\"../transactiontablemodel.cpp\" line=\"+235\"/>\n         <source>Date</source>\n         <translation>Date</translation>\n     </message>\n@@ -3166,7 +3171,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+51\"/>\n+        <location line=\"+48\"/>\n         <source>Received with</source>\n         <translation>Received with</translation>\n     </message>\n@@ -3191,12 +3196,17 @@ Address: %4\n         <translation>Mined</translation>\n     </message>\n     <message>\n-        <location line=\"+41\"/>\n+        <location line=\"+28\"/>\n+        <source>watch-only</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+15\"/>\n         <source>(n/a)</source>\n         <translation>(n/a)</translation>\n     </message>\n     <message>\n-        <location line=\"+193\"/>\n+        <location line=\"+210\"/>\n         <source>Transaction status. Hover over this field to show number of confirmations.</source>\n         <translation>Transaction status. Hover over this field to show number of confirmations.</translation>\n     </message>\n@@ -3210,6 +3220,11 @@ Address: %4\n         <source>Type of transaction.</source>\n         <translation>Type of transaction.</translation>\n     </message>\n+    <message>\n+        <location line=\"+2\"/>\n+        <source>Whether or not a watch-only address is involved in this transaction.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+2\"/>\n         <source>Destination address of transaction.</source>\n@@ -3224,7 +3239,7 @@ Address: %4\n <context>\n     <name>TransactionView</name>\n     <message>\n-        <location filename=\"../transactionview.cpp\" line=\"+60\"/>\n+        <location filename=\"../transactionview.cpp\" line=\"+67\"/>\n         <location line=\"+16\"/>\n         <source>All</source>\n         <translation>All</translation>\n@@ -3325,12 +3340,17 @@ Address: %4\n         <translation>Show transaction details</translation>\n     </message>\n     <message>\n-        <location line=\"+163\"/>\n+        <location line=\"+179\"/>\n         <source>Export Transaction History</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+19\"/>\n+        <location line=\"+12\"/>\n+        <source>Watch-only</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+9\"/>\n         <source>Exporting Failed</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3350,7 +3370,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-22\"/>\n+        <location line=\"-24\"/>\n         <source>Comma separated file (*.csv)</source>\n         <translation>Comma separated file (*.csv)</translation>\n     </message>\n@@ -3360,7 +3380,7 @@ Address: %4\n         <translation>Confirmed</translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n+        <location line=\"+3\"/>\n         <source>Date</source>\n         <translation>Date</translation>\n     </message>\n@@ -3398,7 +3418,7 @@ Address: %4\n <context>\n     <name>UnitDisplayStatusBarControl</name>\n     <message>\n-        <location filename=\"../bitcoingui.cpp\" line=\"+101\"/>\n+        <location filename=\"../bitcoingui.cpp\" line=\"+103\"/>\n         <source>Unit to show amounts in. Click to select another unit.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3465,7 +3485,7 @@ Address: %4\n <context>\n     <name>bitcoin-core</name>\n     <message>\n-        <location filename=\"../bitcoinstrings.cpp\" line=\"+249\"/>\n+        <location filename=\"../bitcoinstrings.cpp\" line=\"+240\"/>\n         <source>Options:</source>\n         <translation>Options:</translation>\n     </message>\n@@ -3495,22 +3515,22 @@ Address: %4\n         <translation>Maintain at most &lt;n&gt; connections to peers (default: 125)</translation>\n     </message>\n     <message>\n-        <location line=\"-62\"/>\n+        <location line=\"-53\"/>\n         <source>Connect to a node to retrieve peer addresses, and disconnect</source>\n         <translation>Connect to a node to retrieve peer addresses, and disconnect</translation>\n     </message>\n     <message>\n-        <location line=\"+103\"/>\n+        <location line=\"+94\"/>\n         <source>Specify your own public address</source>\n         <translation>Specify your own public address</translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+6\"/>\n         <source>Threshold for disconnecting misbehaving peers (default: 100)</source>\n         <translation>Threshold for disconnecting misbehaving peers (default: 100)</translation>\n     </message>\n     <message>\n-        <location line=\"-181\"/>\n+        <location line=\"-171\"/>\n         <source>Number of seconds to keep misbehaving peers from reconnecting (default: 86400)</source>\n         <translation>Number of seconds to keep misbehaving peers from reconnecting (default: 86400)</translation>\n     </message>\n@@ -3525,17 +3545,17 @@ Address: %4\n         <translation>Accept command line and JSON-RPC commands</translation>\n     </message>\n     <message>\n-        <location line=\"+99\"/>\n+        <location line=\"+90\"/>\n         <source>Run in the background as a daemon and accept commands</source>\n         <translation>Run in the background as a daemon and accept commands</translation>\n     </message>\n     <message>\n-        <location line=\"+36\"/>\n+        <location line=\"+35\"/>\n         <source>Use the test network</source>\n         <translation>Use the test network</translation>\n     </message>\n     <message>\n-        <location line=\"-134\"/>\n+        <location line=\"-124\"/>\n         <source>Accept connections from outside (default: 1 if no -proxy or -connect)</source>\n         <translation>Accept connections from outside (default: 1 if no -proxy or -connect)</translation>\n     </message>\n@@ -3756,6 +3776,11 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n     </message>\n     <message>\n         <location line=\"+2\"/>\n+        <source>Error: A fatal internal error occured, see debug.log for details</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n         <source>Error: Disk space is low!</source>\n         <translation>Error: Disk space is low!</translation>\n     </message>\n@@ -3764,66 +3789,11 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <source>Error: Wallet locked, unable to create transaction!</source>\n         <translation>Error: Wallet locked, unable to create transaction!</translation>\n     </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Error: system error: </source>\n-        <translation>Error: system error: </translation>\n-    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Failed to listen on any port. Use -listen=0 if you want this.</source>\n         <translation>Failed to listen on any port. Use -listen=0 if you want this.</translation>\n     </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to read block info</source>\n-        <translation>Failed to read block info</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to read block</source>\n-        <translation>Failed to read block</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to sync block index</source>\n-        <translation>Failed to sync block index</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to write block index</source>\n-        <translation>Failed to write block index</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to write block info</source>\n-        <translation>Failed to write block info</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to write block</source>\n-        <translation>Failed to write block</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to write file info</source>\n-        <translation>Failed to write file info</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to write to coin database</source>\n-        <translation>Failed to write to coin database</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to write transaction index</source>\n-        <translation>Failed to write transaction index</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to write undo data</source>\n-        <translation>Failed to write undo data</translation>\n-    </message>\n     <message>\n         <location line=\"+2\"/>\n         <source>Force safe mode (default: 0)</source>\n@@ -3860,12 +3830,17 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+21\"/>\n+        <location line=\"+22\"/>\n         <source>Not enough file descriptors available.</source>\n         <translation>Not enough file descriptors available.</translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+2\"/>\n+        <source>Only connect to nodes in network &lt;net&gt; (ipv4, ipv6 or onion)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n         <source>Prepend debug output with timestamp (default: 1)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3905,7 +3880,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+3\"/>\n         <source>This is intended for regression testing tools and app development.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3940,7 +3915,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Imports blocks from external blk000??.dat file</translation>\n     </message>\n     <message>\n-        <location line=\"-195\"/>\n+        <location line=\"-185\"/>\n         <source>(default: 1, 1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4080,12 +4055,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+5\"/>\n         <source>Error: Unsupported argument -tor found, use -onion.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+14\"/>\n+        <location line=\"+3\"/>\n         <source>Fee (in BTC/kB) to add to transactions you send (default: %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4129,6 +4104,11 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <source>Keep at most &lt;n&gt; unconnectable blocks in memory (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Keep at most &lt;n&gt; unconnectable transactions in memory (default: %u)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Limit size of signature cache to &lt;n&gt; entries (default: 50000)</source>\n@@ -4170,12 +4150,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Only accept block chain matching built-in checkpoints (default: 1)</translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Only connect to nodes in network &lt;net&gt; (IPv4, IPv6 or Tor)</source>\n-        <translation>Only connect to nodes in network &lt;net&gt; (IPv4, IPv6 or Tor)</translation>\n-    </message>\n-    <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+5\"/>\n         <source>Print block on startup, if found in block index</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4255,12 +4230,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Specify connection timeout in milliseconds (default: 5000)</translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n-        <source>System error: </source>\n-        <translation>System error: </translation>\n-    </message>\n-    <message>\n-        <location line=\"+2\"/>\n+        <location line=\"+8\"/>\n         <source>This is experimental software.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4340,22 +4310,22 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>wallet.dat corrupt, salvage failed</translation>\n     </message>\n     <message>\n-        <location line=\"-64\"/>\n+        <location line=\"-63\"/>\n         <source>Password for JSON-RPC connections</source>\n         <translation>Password for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-164\"/>\n+        <location line=\"-155\"/>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Execute command when the best block changes (%s in cmd is replaced by block hash)</translation>\n     </message>\n     <message>\n-        <location line=\"+210\"/>\n+        <location line=\"+200\"/>\n         <source>Upgrade wallet to latest format</source>\n         <translation>Upgrade wallet to latest format</translation>\n     </message>\n     <message>\n-        <location line=\"-27\"/>\n+        <location line=\"-26\"/>\n         <source>Set key pool size to &lt;n&gt; (default: 100)</source>\n         <translation>Set key pool size to &lt;n&gt; (default: 100)</translation>\n     </message>\n@@ -4365,12 +4335,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Rescan the block chain for missing wallet transactions</translation>\n     </message>\n     <message>\n-        <location line=\"+36\"/>\n+        <location line=\"+35\"/>\n         <source>Use OpenSSL (https) for JSON-RPC connections</source>\n         <translation>Use OpenSSL (https) for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-31\"/>\n+        <location line=\"-30\"/>\n         <source>Server certificate file (default: server.cert)</source>\n         <translation>Server certificate file (default: server.cert)</translation>\n     </message>\n@@ -4380,22 +4350,22 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Server private key (default: server.pem)</translation>\n     </message>\n     <message>\n-        <location line=\"+19\"/>\n+        <location line=\"+18\"/>\n         <source>This help message</source>\n         <translation>This help message</translation>\n     </message>\n     <message>\n-        <location line=\"-118\"/>\n+        <location line=\"-108\"/>\n         <source>Allow DNS lookups for -addnode, -seednode and -connect</source>\n         <translation>Allow DNS lookups for -addnode, -seednode and -connect</translation>\n     </message>\n     <message>\n-        <location line=\"+68\"/>\n+        <location line=\"+59\"/>\n         <source>Loading addresses...</source>\n         <translation>Loading addresses...</translation>\n     </message>\n     <message>\n-        <location line=\"-42\"/>\n+        <location line=\"-33\"/>\n         <source>Error loading wallet.dat: Wallet corrupted</source>\n         <translation>Error loading wallet.dat: Wallet corrupted</translation>\n     </message>\n@@ -4405,7 +4375,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Error loading wallet.dat</translation>\n     </message>\n     <message>\n-        <location line=\"+33\"/>\n+        <location line=\"+23\"/>\n         <source>Invalid -proxy address: &apos;%s&apos;</source>\n         <translation>Invalid -proxy address: &apos;%s&apos;</translation>\n     </message>\n@@ -4415,7 +4385,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Unknown network specified in -onlynet: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"-122\"/>\n+        <location line=\"-112\"/>\n         <source>Cannot resolve -bind address: &apos;%s&apos;</source>\n         <translation>Cannot resolve -bind address: &apos;%s&apos;</translation>\n     </message>\n@@ -4425,7 +4395,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Cannot resolve -externalip address: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"+56\"/>\n+        <location line=\"+46\"/>\n         <source>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos;</source>\n         <translation>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos;</translation>\n     </message>\n@@ -4440,22 +4410,22 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Insufficient funds</translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n+        <location line=\"+14\"/>\n         <source>Loading block index...</source>\n         <translation>Loading block index...</translation>\n     </message>\n     <message>\n-        <location line=\"-70\"/>\n+        <location line=\"-61\"/>\n         <source>Add a node to connect to and attempt to keep the connection open</source>\n         <translation>Add a node to connect to and attempt to keep the connection open</translation>\n     </message>\n     <message>\n-        <location line=\"+71\"/>\n+        <location line=\"+62\"/>\n         <source>Loading wallet...</source>\n         <translation>Loading wallet...</translation>\n     </message>\n     <message>\n-        <location line=\"-66\"/>\n+        <location line=\"-57\"/>\n         <source>Cannot downgrade wallet</source>\n         <translation>Cannot downgrade wallet</translation>\n     </message>\n@@ -4465,22 +4435,22 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Cannot write default address</translation>\n     </message>\n     <message>\n-        <location line=\"+86\"/>\n+        <location line=\"+77\"/>\n         <source>Rescanning...</source>\n         <translation>Rescanning...</translation>\n     </message>\n     <message>\n-        <location line=\"-73\"/>\n+        <location line=\"-64\"/>\n         <source>Done loading</source>\n         <translation>Done loading</translation>\n     </message>\n     <message>\n-        <location line=\"+101\"/>\n+        <location line=\"+91\"/>\n         <source>To use the %s option</source>\n         <translation>To use the %s option</translation>\n     </message>\n     <message>\n-        <location line=\"-93\"/>\n+        <location line=\"-83\"/>\n         <source>Error</source>\n         <translation>Error</translation>\n     </message>"
      }
    ]
  },
  {
    "sha": "0e64566a829a2d6a59d83c7f6731f9849f6dbc90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTY0NTY2YTgyOWEyZDZhNTlkODNjN2Y2NzMxZjk4NDlmNmRiYzkw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T20:35:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T20:35:36Z"
      },
      "message": "Merge pull request #4978\n\n938bcce CAutoFile: make file private (Philip Kaufmann)\n0c35486 CBufferedFile: add explicit close function (Philip Kaufmann)\nc9fb27d CBufferedFile: convert into a non-refcounted RAII wrapper (Philip Kaufmann)",
      "tree": {
        "sha": "4a34019ab37c1c382fd4335a1e699c30c6ae3651",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a34019ab37c1c382fd4335a1e699c30c6ae3651"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e64566a829a2d6a59d83c7f6731f9849f6dbc90",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULbcYAAoJEHSBCwEjRsmm1lgH/23iT9OFsRv5vLdPuEy7IAGf\n1/3yoQpg6GJUYHMuyEOKLAvaqB6mwa0OfSwCmyt1ROY0QVsJ29K+m6Wx09YqCCfm\nXj76wDj/brpoxLmj/JmM9U9VniEhT9xLPki7xkqFLnzZYHrKWM+sJ/0dXq+CyPVP\nfKxyjtq22mpOPVIrkG+c/TOPIjs5QGalUrPoCqHSpygGYGRmgP8sgNPElVwCCP+i\nWlAnnO/DlaRGc1EucNvnyIHWu3UVaEkZjFaPlbp52b2OYD5tqOOCufRySg6yoJqX\nm0EKIhZlMVAUEzDBfe8Ayh9GOGGLByz7tF9IpRLqOmtAGR4bAMF/s7q+zVN2dtg=\n=JzbQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 4a34019ab37c1c382fd4335a1e699c30c6ae3651\nparent 6faee7942671141649b74e50908cb99cabc840e5\nparent 938bccebf1cb3ed6c7b8bfb8236a5172433bf890\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412282113 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412282136 +0200\n\nMerge pull request #4978\n\n938bcce CAutoFile: make file private (Philip Kaufmann)\n0c35486 CBufferedFile: add explicit close function (Philip Kaufmann)\nc9fb27d CBufferedFile: convert into a non-refcounted RAII wrapper (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e64566a829a2d6a59d83c7f6731f9849f6dbc90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e64566a829a2d6a59d83c7f6731f9849f6dbc90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e64566a829a2d6a59d83c7f6731f9849f6dbc90/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6faee7942671141649b74e50908cb99cabc840e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6faee7942671141649b74e50908cb99cabc840e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6faee7942671141649b74e50908cb99cabc840e5"
      },
      {
        "sha": "938bccebf1cb3ed6c7b8bfb8236a5172433bf890",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/938bccebf1cb3ed6c7b8bfb8236a5172433bf890",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/938bccebf1cb3ed6c7b8bfb8236a5172433bf890"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 41,
      "deletions": 16
    },
    "files": [
      {
        "sha": "129d18486859a90159e4e510a084af2853a968af",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e64566a829a2d6a59d83c7f6731f9849f6dbc90/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e64566a829a2d6a59d83c7f6731f9849f6dbc90/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0e64566a829a2d6a59d83c7f6731f9849f6dbc90",
        "patch": "@@ -3085,6 +3085,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n \n     int nLoaded = 0;\n     try {\n+        // This takes over fileIn and calls fclose() on it in the CBufferedFile destructor\n         CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION);\n         uint64_t nStartByte = 0;\n         if (dbp) {\n@@ -3141,7 +3142,6 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                 LogPrintf(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n             }\n         }\n-        fclose(fileIn);\n     } catch(std::runtime_error &e) {\n         AbortNode(_(\"Error: system error: \") + e.what());\n     }"
      },
      {
        "sha": "ff11edc06c761492b8d83e54ca2d8730cda26e37",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 40,
        "deletions": 15,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e64566a829a2d6a59d83c7f6731f9849f6dbc90/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e64566a829a2d6a59d83c7f6731f9849f6dbc90/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=0e64566a829a2d6a59d83c7f6731f9849f6dbc90",
        "patch": "@@ -1154,7 +1154,7 @@ class CDataStream\n \n \n \n-/** Non-refcounted RAII wrapper for FILE*.\n+/** Non-refcounted RAII wrapper for FILE*\n  *\n  * Will automatically close the file when it goes out of scope if not null.\n  * If you're returning the file pointer, return file.release().\n@@ -1166,12 +1166,13 @@ class CAutoFile\n     // Disallow copies\n     CAutoFile(const CAutoFile&);\n     CAutoFile& operator=(const CAutoFile&);\n-protected:\n-    FILE* file;\n-public:\n+\n     int nType;\n     int nVersion;\n+\t\n+    FILE* file;\t\n \n+public:\n     CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn)\n     {\n         file = filenew;\n@@ -1186,9 +1187,10 @@ class CAutoFile\n \n     void fclose()\n     {\n-        if (file != NULL && file != stdin && file != stdout && file != stderr)\n+        if (file) {\n             ::fclose(file);\n-        file = NULL;\n+            file = NULL;\n+        }\n     }\n \n     FILE* release()             { FILE* ret = file; file = NULL; return ret; }\n@@ -1256,13 +1258,23 @@ class CAutoFile\n     }\n };\n \n-/** Wrapper around a FILE* that implements a ring buffer to\n- *  deserialize from. It guarantees the ability to rewind\n- *  a given number of bytes. */\n+/** Non-refcounted RAII wrapper around a FILE* that implements a ring buffer to\n+ *  deserialize from. It guarantees the ability to rewind a given number of bytes.\n+ *\n+ *  Will automatically close the file when it goes out of scope if not null.\n+ *  If you need to close the file early, use file.fclose() instead of fclose(file).\n+ */\n class CBufferedFile\n {\n private:\n-    FILE *src;          // source file\n+    // Disallow copies\n+    CBufferedFile(const CBufferedFile&);\n+    CBufferedFile& operator=(const CBufferedFile&);\n+\n+    int nType;\n+    int nVersion;\n+\n+    FILE *src;            // source file\n     uint64_t nSrcPos;     // how many bytes have been read from source\n     uint64_t nReadPos;    // how many bytes have been read from this\n     uint64_t nReadLimit;  // up to which position we're allowed to read\n@@ -1289,12 +1301,25 @@ class CBufferedFile\n     }\n \n public:\n-    int nType;\n-    int nVersion;\n-\n     CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :\n-        src(fileIn), nSrcPos(0), nReadPos(0), nReadLimit((uint64_t)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0),\n-        nType(nTypeIn), nVersion(nVersionIn) {\n+        nSrcPos(0), nReadPos(0), nReadLimit((uint64_t)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0)\n+    {\n+        src = fileIn;\n+        nType = nTypeIn;\n+        nVersion = nVersionIn;\n+    }\n+\n+    ~CBufferedFile()\n+    {\n+        fclose();\n+    }\n+\n+    void fclose()\n+    {\n+        if (src) {\n+            ::fclose(src);\n+            src = NULL;\n+        }\n     }\n \n     // check whether we're at the end of the source file"
      }
    ]
  },
  {
    "sha": "29f96e8bc652cb14c6fdefe5279ee983054faa2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWY5NmU4YmM2NTJjYjE0YzZmZGVmZTUyNzllZTk4MzA1NGZhYTJh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T20:41:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-02T20:41:54Z"
      },
      "message": "Merge pull request #4994\n\n54510f2 DRY: Avoid repetitions in script_test (jtimon)",
      "tree": {
        "sha": "106f3ef8cff4aa3af705a7f574c87ccfbae815f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/106f3ef8cff4aa3af705a7f574c87ccfbae815f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29f96e8bc652cb14c6fdefe5279ee983054faa2a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULbiSAAoJEHSBCwEjRsmmzmMH/iuHL+elNvDzLHVMbb0hZKkU\nQezCBrLPNiBH98mRTBYioN0owMy1TYgA+T2UY4xOO2WaW/oALVtuqsd3+VIvMBID\nzoqUTfW10I8AFKDrpF/9iUvEPK2cL2SXi3urcQfwtm6IrHsPGOoY1zMS4M3ZoHMn\na0RlyblVMqGh/ICgk2x1xeuo4ntZhqCE52NyyMIpXfY30X2Tnk7sltNR8UBc9REK\nBU2UF54u9oxMs4/MzNBSDn6S/pLGyOsxEzki/IiQiqpKLaI1iAgbFibiOrMxUzCL\naQxDOlK6bvLycHN40Kt1otUgLPmv49cU6CC3AMpSKRd8LvDjZTPWjZL4/fXtleY=\n=hYEN\n-----END PGP SIGNATURE-----",
        "payload": "tree 106f3ef8cff4aa3af705a7f574c87ccfbae815f7\nparent 0e64566a829a2d6a59d83c7f6731f9849f6dbc90\nparent 54510f267228e3f6934fdcf8d02d02a95a06d876\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412282490 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412282514 +0200\n\nMerge pull request #4994\n\n54510f2 DRY: Avoid repetitions in script_test (jtimon)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29f96e8bc652cb14c6fdefe5279ee983054faa2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29f96e8bc652cb14c6fdefe5279ee983054faa2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29f96e8bc652cb14c6fdefe5279ee983054faa2a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e64566a829a2d6a59d83c7f6731f9849f6dbc90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e64566a829a2d6a59d83c7f6731f9849f6dbc90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e64566a829a2d6a59d83c7f6731f9849f6dbc90"
      },
      {
        "sha": "54510f267228e3f6934fdcf8d02d02a95a06d876",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54510f267228e3f6934fdcf8d02d02a95a06d876",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54510f267228e3f6934fdcf8d02d02a95a06d876"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 7,
      "deletions": 30
    },
    "files": [
      {
        "sha": "48a5635d8fd397ef5c87f7212e4a6c93468775a7",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 30,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29f96e8bc652cb14c6fdefe5279ee983054faa2a/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29f96e8bc652cb14c6fdefe5279ee983054faa2a/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=29f96e8bc652cb14c6fdefe5279ee983054faa2a",
        "patch": "@@ -70,7 +70,7 @@ CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n     return txCredit;\n }\n \n-CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CTransaction& txCredit)\n+CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)\n {\n     CMutableTransaction txSpend;\n     txSpend.nVersion = 1;\n@@ -521,16 +521,8 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CScript scriptPubKey12;\n     scriptPubKey12 << OP_1 << key1.GetPubKey() << key2.GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n \n-    CMutableTransaction txFrom12;\n-    txFrom12.vout.resize(1);\n-    txFrom12.vout[0].scriptPubKey = scriptPubKey12;\n-\n-    CMutableTransaction txTo12;\n-    txTo12.vin.resize(1);\n-    txTo12.vout.resize(1);\n-    txTo12.vin[0].prevout.n = 0;\n-    txTo12.vin[0].prevout.hash = txFrom12.GetHash();\n-    txTo12.vout[0].nValue = 1;\n+    CMutableTransaction txFrom12 = BuildCreditingTransaction(scriptPubKey12);\n+    CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n     BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags));\n@@ -555,16 +547,8 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     CScript scriptPubKey23;\n     scriptPubKey23 << OP_2 << key1.GetPubKey() << key2.GetPubKey() << key3.GetPubKey() << OP_3 << OP_CHECKMULTISIG;\n \n-    CMutableTransaction txFrom23;\n-    txFrom23.vout.resize(1);\n-    txFrom23.vout[0].scriptPubKey = scriptPubKey23;\n-\n-    CMutableTransaction txTo23;\n-    txTo23.vin.resize(1);\n-    txTo23.vout.resize(1);\n-    txTo23.vin[0].prevout.n = 0;\n-    txTo23.vin[0].prevout.hash = txFrom23.GetHash();\n-    txTo23.vout[0].nValue = 1;\n+    CMutableTransaction txFrom23 = BuildCreditingTransaction(scriptPubKey23);\n+    CMutableTransaction txTo23 = BuildSpendingTransaction(CScript(), txFrom23);\n \n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n@@ -626,17 +610,10 @@ BOOST_AUTO_TEST_CASE(script_combineSigs)\n         keystore.AddKey(key);\n     }\n \n-    CMutableTransaction txFrom;\n-    txFrom.vout.resize(1);\n-    txFrom.vout[0].scriptPubKey = GetScriptForDestination(keys[0].GetPubKey().GetID());\n+    CMutableTransaction txFrom = BuildCreditingTransaction(GetScriptForDestination(keys[0].GetPubKey().GetID()));\n+    CMutableTransaction txTo = BuildSpendingTransaction(CScript(), txFrom);\n     CScript& scriptPubKey = txFrom.vout[0].scriptPubKey;\n-    CMutableTransaction txTo;\n-    txTo.vin.resize(1);\n-    txTo.vout.resize(1);\n-    txTo.vin[0].prevout.n = 0;\n-    txTo.vin[0].prevout.hash = txFrom.GetHash();\n     CScript& scriptSig = txTo.vin[0].scriptSig;\n-    txTo.vout[0].nValue = 1;\n \n     CScript empty;\n     CScript combined = CombineSignatures(scriptPubKey, txTo, 0, empty, empty);"
      }
    ]
  },
  {
    "sha": "c9c51cba4e3e1905c154ecf9f6559ced7606dc75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWM1MWNiYTRlM2UxOTA1YzE1NGVjZjlmNjU1OWNlZDc2MDZkYzc1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-10-02T20:15:59Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-10-02T20:52:19Z"
      },
      "message": "Make comptool more deterministic",
      "tree": {
        "sha": "3c4626a49b36511e9b0e7af60927b629ad824d63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c4626a49b36511e9b0e7af60927b629ad824d63"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9c51cba4e3e1905c154ecf9f6559ced7606dc75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9c51cba4e3e1905c154ecf9f6559ced7606dc75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9c51cba4e3e1905c154ecf9f6559ced7606dc75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9c51cba4e3e1905c154ecf9f6559ced7606dc75/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6faee7942671141649b74e50908cb99cabc840e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6faee7942671141649b74e50908cb99cabc840e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6faee7942671141649b74e50908cb99cabc840e5"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3d430d4306a586f05f78facfe023b80cc4d27791",
        "filename": "depends/packages/native_comparisontool.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9c51cba4e3e1905c154ecf9f6559ced7606dc75/depends/packages/native_comparisontool.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9c51cba4e3e1905c154ecf9f6559ced7606dc75/depends/packages/native_comparisontool.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_comparisontool.mk?ref=c9c51cba4e3e1905c154ecf9f6559ced7606dc75",
        "patch": "@@ -1,8 +1,8 @@\n package=native_comparisontool\n-$(package)_version=5caed78\n-$(package)_download_path=https://github.com/TheBlueMatt/test-scripts/raw/2d76ce92d68e6746988adde731318605a70e252c\n+$(package)_version=0f7b5d8\n+$(package)_download_path=https://github.com/TheBlueMatt/test-scripts/raw/38b490a2599d422b12d5ce8f165792f63fd8f54f\n $(package)_file_name=pull-tests-$($(package)_version).jar\n-$(package)_sha256_hash=b55a98828b17060e327c5dabe5e4631898f422c0cba07c46170930a9eaf5e7c0\n+$(package)_sha256_hash=ecd43b988a8b673b483e4f69f931596360a5e90fc415c75c4c259faa690df198\n $(package)_install_dirname=BitcoindComparisonTool_jar\n $(package)_install_filename=BitcoindComparisonTool.jar\n "
      }
    ]
  },
  {
    "sha": "ccca27a788fe1ae13661308243c20a1d7a3d0074",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2NhMjdhNzg4ZmUxYWUxMzY2MTMwODI0M2MyMGExZDdhM2QwMDc0",
    "commit": {
      "author": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-07-26T19:05:11Z"
      },
      "committer": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-10-03T02:29:51Z"
      },
      "message": "[Wallet] Watch-only fixes",
      "tree": {
        "sha": "b862f0f1e0fe98fdd1957cc2236076fef899cc50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b862f0f1e0fe98fdd1957cc2236076fef899cc50"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccca27a788fe1ae13661308243c20a1d7a3d0074",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccca27a788fe1ae13661308243c20a1d7a3d0074",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccca27a788fe1ae13661308243c20a1d7a3d0074",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccca27a788fe1ae13661308243c20a1d7a3d0074/comments",
    "author": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29f96e8bc652cb14c6fdefe5279ee983054faa2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29f96e8bc652cb14c6fdefe5279ee983054faa2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29f96e8bc652cb14c6fdefe5279ee983054faa2a"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 70,
      "deletions": 13
    },
    "files": [
      {
        "sha": "755defa26de9be41bc1d87eda19e4b0652785214",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=ccca27a788fe1ae13661308243c20a1d7a3d0074",
        "patch": "@@ -67,6 +67,13 @@ bool CBasicKeyStore::AddWatchOnly(const CScript &dest)\n     return true;\n }\n \n+bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)\n+{\n+    LOCK(cs_KeyStore);\n+    setWatchOnly.erase(dest);\n+    return true;\n+}\n+\n bool CBasicKeyStore::HaveWatchOnly(const CScript &dest) const\n {\n     LOCK(cs_KeyStore);"
      },
      {
        "sha": "d3478f7672aed777c91d82248600bdc23ece1e55",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=ccca27a788fe1ae13661308243c20a1d7a3d0074",
        "patch": "@@ -40,6 +40,7 @@ class CKeyStore\n \n     // Support for Watch-only addresses\n     virtual bool AddWatchOnly(const CScript &dest) =0;\n+    virtual bool RemoveWatchOnly(const CScript &dest) =0;\n     virtual bool HaveWatchOnly(const CScript &dest) const =0;\n     virtual bool HaveWatchOnly() const =0;\n };\n@@ -98,6 +99,7 @@ class CBasicKeyStore : public CKeyStore\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const;\n \n     virtual bool AddWatchOnly(const CScript &dest);\n+    virtual bool RemoveWatchOnly(const CScript &dest);\n     virtual bool HaveWatchOnly(const CScript &dest) const;\n     virtual bool HaveWatchOnly() const;\n };"
      },
      {
        "sha": "5278c8673a2ced46a4edbd37c85fdb95bad99cf4",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=ccca27a788fe1ae13661308243c20a1d7a3d0074",
        "patch": "@@ -32,7 +32,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n {\n     QList<TransactionRecord> parts;\n     int64_t nTime = wtx.GetTxTime();\n-    CAmount nCredit = wtx.GetCredit(true);\n+    CAmount nCredit = wtx.GetCredit(ISMINE_ALL);\n     CAmount nDebit = wtx.GetDebit(ISMINE_ALL);\n     CAmount nNet = nCredit - nDebit;\n     uint256 hash = wtx.GetHash();"
      },
      {
        "sha": "b4733d369ea3b09a6cd373c49b3c2c6473182ad9",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=ccca27a788fe1ae13661308243c20a1d7a3d0074",
        "patch": "@@ -605,7 +605,8 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n         if (nDepth < 0) continue;\n         COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth, true);\n-        vCoins.push_back(out);\n+        if (outpoint.n < out.tx->vout.size() && wallet->IsMine(out.tx->vout[outpoint.n]) == ISMINE_SPENDABLE)\n+            vCoins.push_back(out);\n     }\n \n     BOOST_FOREACH(const COutput& out, vCoins)"
      },
      {
        "sha": "9da0a7d091b3f0b29cd4453c00723892a518ea67",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=ccca27a788fe1ae13661308243c20a1d7a3d0074",
        "patch": "@@ -114,8 +114,6 @@ Value importprivkey(const Array& params, bool fHelp)\n     CPubKey pubkey = key.GetPubKey();\n     CKeyID vchAddress = pubkey.GetID();\n     {\n-        LOCK2(cs_main, pwalletMain->cs_wallet);\n-\n         pwalletMain->MarkDirty();\n         pwalletMain->SetAddressBook(vchAddress, strLabel, \"receive\");\n \n@@ -181,7 +179,8 @@ Value importaddress(const Array& params, bool fHelp)\n         fRescan = params[2].get_bool();\n \n     {\n-        LOCK2(cs_main, pwalletMain->cs_wallet);\n+        if (::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n \n         // add to address book or update label\n         if (address.IsValid())"
      },
      {
        "sha": "d11455e389aa5ccfc2d84c4ef403b585aa4ef51d",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=ccca27a788fe1ae13661308243c20a1d7a3d0074",
        "patch": "@@ -1539,7 +1539,7 @@ Value gettransaction(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n-    CAmount nCredit = wtx.GetCredit(filter != 0);\n+    CAmount nCredit = wtx.GetCredit(filter);\n     CAmount nDebit = wtx.GetDebit(filter);\n     CAmount nNet = nCredit - nDebit;\n     CAmount nFee = (wtx.IsFromMe(filter) ? wtx.GetValueOut() - nDebit : 0);"
      },
      {
        "sha": "1653084495e46e62c067a44a44c10b507b1d5f04",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ccca27a788fe1ae13661308243c20a1d7a3d0074",
        "patch": "@@ -87,6 +87,13 @@ bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     if (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey))\n         return false;\n+\n+    // check if we need to remove from watch-only\n+    CScript script;\n+    script = GetScriptForDestination(pubkey.GetID());\n+    if (HaveWatchOnly(script))\n+        RemoveWatchOnly(script);\n+\n     if (!fFileBacked)\n         return true;\n     if (!IsCrypted()) {\n@@ -169,6 +176,20 @@ bool CWallet::AddWatchOnly(const CScript &dest)\n     return CWalletDB(strWalletFile).WriteWatchOnly(dest);\n }\n \n+bool CWallet::RemoveWatchOnly(const CScript &dest)\n+{\n+    AssertLockHeld(cs_wallet);\n+    if (!CCryptoKeyStore::RemoveWatchOnly(dest))\n+        return false;\n+    if (!HaveWatchOnly())\n+        NotifyWatchonlyChanged(false);\n+    if (fFileBacked)\n+        if (!CWalletDB(strWalletFile).EraseWatchOnly(dest))\n+            return false;\n+\n+    return true;\n+}\n+\n bool CWallet::LoadWatchOnly(const CScript &dest)\n {\n     return CCryptoKeyStore::AddWatchOnly(dest);"
      },
      {
        "sha": "1ccc29d3c8fb8457e1d3afb314389604fc2ec48b",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 27,
        "deletions": 7,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=ccca27a788fe1ae13661308243c20a1d7a3d0074",
        "patch": "@@ -222,6 +222,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     // Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript &dest);\n+    bool RemoveWatchOnly(const CScript &dest);\n     // Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n \n@@ -701,18 +702,37 @@ class CWalletTx : public CMerkleTx\n         return debit;\n     }\n \n-    CAmount GetCredit(bool fUseCache=true) const\n+    CAmount GetCredit(const isminefilter& filter) const\n     {\n         // Must wait until coinbase is safely deep enough in the chain before valuing it\n         if (IsCoinBase() && GetBlocksToMaturity() > 0)\n             return 0;\n \n-        // GetBalance can assume transactions in mapWallet won't change\n-        if (fUseCache && fCreditCached)\n-            return nCreditCached;\n-        nCreditCached = pwallet->GetCredit(*this, ISMINE_ALL);\n-        fCreditCached = true;\n-        return nCreditCached;\n+        int64_t credit = 0;\n+        if (filter & ISMINE_SPENDABLE)\n+        {\n+            // GetBalance can assume transactions in mapWallet won't change\n+            if (fCreditCached)\n+                credit += nCreditCached;\n+            else\n+            {\n+                nCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n+                fCreditCached = true;\n+                credit += nCreditCached;\n+            }\n+        }\n+        if (filter & ISMINE_WATCH_ONLY)\n+        {\n+            if (fWatchCreditCached)\n+                credit += nWatchCreditCached;\n+            else\n+            {\n+                nWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n+                fWatchCreditCached = true;\n+                credit += nWatchCreditCached;\n+            }\n+        }\n+        return credit;\n     }\n \n     CAmount GetImmatureCredit(bool fUseCache=true) const"
      },
      {
        "sha": "a851db65cd86689d929688f3ea6dc11888c7e9c5",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=ccca27a788fe1ae13661308243c20a1d7a3d0074",
        "patch": "@@ -121,6 +121,12 @@ bool CWalletDB::WriteWatchOnly(const CScript &dest)\n     return Write(std::make_pair(std::string(\"watchs\"), dest), '1');\n }\n \n+bool CWalletDB::EraseWatchOnly(const CScript &dest)\n+{\n+    nWalletDBUpdated++;\n+    return Erase(std::make_pair(std::string(\"watchs\"), dest));\n+}\n+\n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n {\n     nWalletDBUpdated++;"
      },
      {
        "sha": "7ff41c7c8d4736626c3dec4c7992bf4a337e1e7a",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccca27a788fe1ae13661308243c20a1d7a3d0074/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=ccca27a788fe1ae13661308243c20a1d7a3d0074",
        "patch": "@@ -96,6 +96,7 @@ class CWalletDB : public CDB\n     bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n     bool WriteWatchOnly(const CScript &script);\n+    bool EraseWatchOnly(const CScript &script);\n \n     bool WriteBestBlock(const CBlockLocator& locator);\n     bool ReadBestBlock(CBlockLocator& locator);"
      }
    ]
  },
  {
    "sha": "5ccd735d30472d8e7acc30d242a142f3cc9968ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Y2NkNzM1ZDMwNDcyZDhlN2FjYzMwZDI0MmExNDJmM2NjOTk2OGVm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-03T02:27:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-03T02:31:44Z"
      },
      "message": "Merge pull request #4887\n\n4bb30a1 Correct logging AcceptBlock()->AcceptBlockHeader() (R E Broadley)",
      "tree": {
        "sha": "82a2387ccba1b6bc24915dd9e079e6d5c3a55d37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82a2387ccba1b6bc24915dd9e079e6d5c3a55d37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ccd735d30472d8e7acc30d242a142f3cc9968ef",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJULgqQAAoJEFeJbS/48LZXRXcL/0Oowe2cGdGcRkAGnOH0MZG1\n24Iv78J3E+voFzTrA4KsPHUHTakFzrMtzf/HzeMFwHY9KekGH9ky4Lx9GlBvum08\ncjnMj+1dsyVON5lHynmWW74Z7oPb8xa2pjyBxLXIz0QJ4epdj9rV7ZGg1CrGM5D9\n+ZUM9t7ut5EKc7c/0uZDxcrfsxjQStFUVfgqRrXNMW3aCuE1hEUrIrqqsxYtyrYk\nkG3uw4urZhvXfkKh32mLZaJhpfXVmATQ390H0e/h/DoOhX7rj9ERcs8jgwOhm5VM\n3z3RDAmNFfyiUjdR2y9ujsJrTz/Rj+NTysi+mNmzmxUzKo2CA7dcOi2CiGzGSpvk\nyjLC8bd84a/zjJw87xIyN7ie5VemrHC9xGx1FaurXkWLz75x+oIkrWJONa3t/ogJ\ncwZ7VDmr0/ojGvWQQmW2eiKQIC214NO/tNO4jkpRhUGJFoh2G1IdOWLJFHnsXkGp\nFpjznOJ/A2vLAIvcYoTAp0CVdfTeMnswcunqXd5mZg==\n=MyA6\n-----END PGP SIGNATURE-----",
        "payload": "tree 82a2387ccba1b6bc24915dd9e079e6d5c3a55d37\nparent 29f96e8bc652cb14c6fdefe5279ee983054faa2a\nparent 4bb30a1eb81009cf75b75c8371e361ef149e3744\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1412303247 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1412303504 +0200\n\nMerge pull request #4887\n\n4bb30a1 Correct logging AcceptBlock()->AcceptBlockHeader() (R E Broadley)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ccd735d30472d8e7acc30d242a142f3cc9968ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ccd735d30472d8e7acc30d242a142f3cc9968ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ccd735d30472d8e7acc30d242a142f3cc9968ef/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29f96e8bc652cb14c6fdefe5279ee983054faa2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29f96e8bc652cb14c6fdefe5279ee983054faa2a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29f96e8bc652cb14c6fdefe5279ee983054faa2a"
      },
      {
        "sha": "4bb30a1eb81009cf75b75c8371e361ef149e3744",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bb30a1eb81009cf75b75c8371e361ef149e3744",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4bb30a1eb81009cf75b75c8371e361ef149e3744"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "83848bf849568de205ff743009f71462d58c4a33",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ccd735d30472d8e7acc30d242a142f3cc9968ef/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ccd735d30472d8e7acc30d242a142f3cc9968ef/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5ccd735d30472d8e7acc30d242a142f3cc9968ef",
        "patch": "@@ -2274,7 +2274,7 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n     if (miSelf != mapBlockIndex.end()) {\n         pindex = miSelf->second;\n         if (pindex->nStatus & BLOCK_FAILED_MASK)\n-            return state.Invalid(error(\"AcceptBlock() : block is marked invalid\"), 0, \"duplicate\");\n+            return state.Invalid(error(\"%s : block is marked invalid\", __func__), 0, \"duplicate\");\n     }\n \n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n@@ -2284,12 +2284,12 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n         int64_t deltaTime = block.GetBlockTime() - pcheckpoint->GetBlockTime();\n         if (deltaTime < 0)\n         {\n-            return state.DoS(100, error(\"CheckBlockHeader() : block with timestamp before last checkpoint\"),\n+            return state.DoS(100, error(\"%s : block with timestamp before last checkpoint\", __func__),\n                              REJECT_CHECKPOINT, \"time-too-old\");\n         }\n         if (!CheckMinWork(block.nBits, pcheckpoint->nBits, deltaTime))\n         {\n-            return state.DoS(100, error(\"CheckBlockHeader() : block with too little proof-of-work\"),\n+            return state.DoS(100, error(\"%s : block with too little proof-of-work\", __func__),\n                              REJECT_INVALID, \"bad-diffbits\");\n         }\n     }\n@@ -2300,36 +2300,36 @@ bool AcceptBlockHeader(CBlockHeader& block, CValidationState& state, CBlockIndex\n     if (hash != Params().HashGenesisBlock()) {\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n-            return state.DoS(10, error(\"AcceptBlock() : prev block not found\"), 0, \"bad-prevblk\");\n+            return state.DoS(10, error(\"%s : prev block not found\", __func__), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n         nHeight = pindexPrev->nHeight+1;\n \n         // Check proof of work\n         if ((!Params().SkipProofOfWorkCheck()) &&\n            (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n-            return state.DoS(100, error(\"AcceptBlock() : incorrect proof of work\"),\n+            return state.DoS(100, error(\"%s : incorrect proof of work\", __func__),\n                              REJECT_INVALID, \"bad-diffbits\");\n \n         // Check timestamp against prev\n         if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-            return state.Invalid(error(\"AcceptBlock() : block's timestamp is too early\"),\n+            return state.Invalid(error(\"%s : block's timestamp is too early\", __func__),\n                                  REJECT_INVALID, \"time-too-old\");\n \n         // Check that the block chain matches the known block chain up to a checkpoint\n         if (!Checkpoints::CheckBlock(nHeight, hash))\n-            return state.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lock-in at %d\", nHeight),\n+            return state.DoS(100, error(\"%s : rejected by checkpoint lock-in at %d\", __func__, nHeight),\n                              REJECT_CHECKPOINT, \"checkpoint mismatch\");\n \n         // Don't accept any forks from the main chain prior to last checkpoint\n         CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n         if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-            return state.DoS(100, error(\"AcceptBlock() : forked chain older than last checkpoint (height %d)\", nHeight));\n+            return state.DoS(100, error(\"%s : forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n \n         // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n         if (block.nVersion < 2 && \n             CBlockIndex::IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n         {\n-            return state.Invalid(error(\"AcceptBlock() : rejected nVersion=1 block\"),\n+            return state.Invalid(error(\"%s : rejected nVersion=1 block\", __func__),\n                                  REJECT_OBSOLETE, \"bad-version\");\n         }\n     }"
      }
    ]
  },
  {
    "sha": "cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDkxZWQ0ZjVmMzJhM2VjZjkwN2EyYWIzNzY3OWM0MWQ4ZDE3NTVj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-03T13:26:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-03T13:27:58Z"
      },
      "message": "Merge pull request #4982\n\nb5ec5fe update getnetworkinfo help with subversion (Philip Kaufmann)",
      "tree": {
        "sha": "3b98d48e7a4528e6b792c37fa1d5bfb5034ab4c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b98d48e7a4528e6b792c37fa1d5bfb5034ab4c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJULqReAAoJEHSBCwEjRsmmvowIAKqSbgzDSNf3GyZmztWNpPzk\n5oaEsBabg31RUkSJlaVOpQFr3rdFBkmW0ZwnAAvOBHbr0xDywI8g6KKZgSht+S/v\ntcJ4AYnYRi4FyVyeofS3JhS3FLA/i3bTdTV/P+HiFihf16Vh2EmdoyWEBMap3BMw\n+xv+c89dlr/CMRf/pWDgdfC9Y2A8HmEi4rPx7IXC82Qe1Ob/iJroEcuvTlKqNQmS\nMxMGj91dIokjNJ04WMwAX2oa28y81wdShLhQfEUhj1tRQ3rpHJkcc8QMvznO17Ys\n2LvMj6PfYTnOKpHdrKXVpmVocPbyPYtD2wQc8bQABd6AigFkAe4G2QJdW/jFbNc=\n=91HI\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b98d48e7a4528e6b792c37fa1d5bfb5034ab4c0\nparent 5ccd735d30472d8e7acc30d242a142f3cc9968ef\nparent b5ec5fe0cb0a85cb626167b66fdda3bed8c5ba19\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412342802 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412342878 +0200\n\nMerge pull request #4982\n\nb5ec5fe update getnetworkinfo help with subversion (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ccd735d30472d8e7acc30d242a142f3cc9968ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ccd735d30472d8e7acc30d242a142f3cc9968ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ccd735d30472d8e7acc30d242a142f3cc9968ef"
      },
      {
        "sha": "b5ec5fe0cb0a85cb626167b66fdda3bed8c5ba19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5ec5fe0cb0a85cb626167b66fdda3bed8c5ba19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5ec5fe0cb0a85cb626167b66fdda3bed8c5ba19"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 24,
      "deletions": 18
    },
    "files": [
      {
        "sha": "bc19d1372a7539a86abdc112351ed908352f68ee",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 18,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c",
        "patch": "@@ -368,23 +368,29 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n             \"Returns an object containing various state info regarding P2P networking.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"version\\\": xxxxx,           (numeric) the server version\\n\"\n-            \"  \\\"protocolversion\\\": xxxxx,   (numeric) the protocol version\\n\"\n-            \"  \\\"localservices\\\": \\\"xxxxxxxxxxxxxxxx\\\",   (string) the services we offer to the network\\n\"\n-            \"  \\\"timeoffset\\\": xxxxx,        (numeric) the time offset\\n\"\n-            \"  \\\"connections\\\": xxxxx,       (numeric) the number of connections\\n\"\n-            \"  \\\"networks\\\": [               (array) information per network\\n\"\n-            \"      \\\"name\\\": \\\"xxx\\\",        (string) network (ipv4, ipv6 or onion)\\n\"\n-            \"      \\\"limited\\\": xxx,         (boolean) is the network limited using -onlynet?\\n\"\n-            \"      \\\"reachable\\\": xxx,       (boolean) is the network reachable?\\n\"\n-            \"      \\\"proxy\\\": \\\"host:port\\\"  (string) the proxy that is used for this network, or empty if none\\n\"\n-            \"    },\\n\"\n+            \"  \\\"version\\\": xxxxx,                      (numeric) the server version\\n\"\n+            \"  \\\"subversion\\\": \\\"/Satoshi:x.x.x/\\\",     (string) the server subversion string\\n\"\n+            \"  \\\"protocolversion\\\": xxxxx,              (numeric) the protocol version\\n\"\n+            \"  \\\"localservices\\\": \\\"xxxxxxxxxxxxxxxx\\\", (string) the services we offer to the network\\n\"\n+            \"  \\\"timeoffset\\\": xxxxx,                   (numeric) the time offset\\n\"\n+            \"  \\\"connections\\\": xxxxx,                  (numeric) the number of connections\\n\"\n+            \"  \\\"networks\\\": [                          (array) information per network\\n\"\n+            \"  {\\n\"\n+            \"    \\\"name\\\": \\\"xxx\\\",                     (string) network (ipv4, ipv6 or onion)\\n\"\n+            \"    \\\"limited\\\": true|false,               (boolean) is the network limited using -onlynet?\\n\"\n+            \"    \\\"reachable\\\": true|false,             (boolean) is the network reachable?\\n\"\n+            \"    \\\"proxy\\\": \\\"host:port\\\"               (string) the proxy that is used for this network, or empty if none\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"relayfee\\\": x.xxxx,         (numeric) minimum relay fee for non-free transactions in btc/kb\\n\"\n-            \"  \\\"localaddresses\\\": [,        (array) list of local addresses\\n\"\n-            \"    \\\"address\\\": \\\"xxxx\\\",      (string) network address\\n\"\n-            \"    \\\"port\\\": xxx,              (numeric) network port\\n\"\n-            \"    \\\"score\\\": xxx              (numeric) relative score\\n\"\n+            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for non-free transactions in btc/kb\\n\"\n+            \"  \\\"localaddresses\\\": [                    (array) list of local addresses\\n\"\n+            \"  {\\n\"\n+            \"    \\\"address\\\": \\\"xxxx\\\",                 (string) network address\\n\"\n+            \"    \\\"port\\\": xxx,                         (numeric) network port\\n\"\n+            \"    \\\"score\\\": xxx                         (numeric) relative score\\n\"\n+            \"  }\\n\"\n+            \"  ,...\\n\"\n             \"  ]\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n@@ -393,10 +399,10 @@ Value getnetworkinfo(const Array& params, bool fHelp)\n         );\n \n     Object obj;\n-    obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n+    obj.push_back(Pair(\"version\",       CLIENT_VERSION));\n     obj.push_back(Pair(\"subversion\",\n         FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>())));\n-    obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n+    obj.push_back(Pair(\"protocolversion\",PROTOCOL_VERSION));\n     obj.push_back(Pair(\"localservices\",       strprintf(\"%016x\", nLocalServices)));\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));"
      }
    ]
  },
  {
    "sha": "d6b0539f452527d340c6d7e6c57652147214196d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmIwNTM5ZjQ1MjUyN2QzNDBjNmQ3ZTZjNTc2NTIxNDcyMTQxOTZk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-03T21:34:34Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-03T22:56:04Z"
      },
      "message": "travis: add non-default shell testing to travis.",
      "tree": {
        "sha": "50267aa82b0624dd5210a16148d18735455972e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50267aa82b0624dd5210a16148d18735455972e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6b0539f452527d340c6d7e6c57652147214196d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6b0539f452527d340c6d7e6c57652147214196d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6b0539f452527d340c6d7e6c57652147214196d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6b0539f452527d340c6d7e6c57652147214196d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "89b2238655fcbb2df9ec5f852fe66dae51199227",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6b0539f452527d340c6d7e6c57652147214196d/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6b0539f452527d340c6d7e6c57652147214196d/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=d6b0539f452527d340c6d7e6c57652147214196d",
        "patch": "@@ -31,7 +31,7 @@ matrix:\n     - compiler: \"true 3\"\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n     - compiler: \"true 4\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\" USE_SHELL=\"/bin/dash\"\n     - compiler: \"true 5\"\n       env: HOST=x86_64-apple-darwin11 PACKAGES=\"gcc-multilib g++-multilib cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.7 GOAL=\"deploy\"\n     - compiler: \"true 6\"\n@@ -48,11 +48,12 @@ before_script:\n     - if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n     - make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS || (echo \"Build failure. Verbose build follows.\" && make -C depends V=1 HOST=$HOST $DEP_OPTS)\n script:\n+    - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n     - BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n     - depends/$HOST/native/bin/ccache --max-size=$CCACHE_SIZE\n     - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then export CCACHE_READONLY=1; fi\n-    - ./autogen.sh\n+    - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n     - ./configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n     - make distdir PACKAGE=bitcoin VERSION=$HOST\n     - cd bitcoin-$HOST"
      }
    ]
  },
  {
    "sha": "b77b4eda8db4e7ebd7762d8543c713c15b207e90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzdiNGVkYThkYjRlN2ViZDc3NjJkODU0M2M3MTNjMTViMjA3ZTkw",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-03T18:58:59Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-03T23:45:26Z"
      },
      "message": "Bugfix: Replace bashisms with standard sh to fix build on non-BASH systems",
      "tree": {
        "sha": "a951795bc3e2b3bb8b0dd85e040b67eea166a06e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a951795bc3e2b3bb8b0dd85e040b67eea166a06e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b77b4eda8db4e7ebd7762d8543c713c15b207e90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77b4eda8db4e7ebd7762d8543c713c15b207e90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b77b4eda8db4e7ebd7762d8543c713c15b207e90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77b4eda8db4e7ebd7762d8543c713c15b207e90/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6b0539f452527d340c6d7e6c57652147214196d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6b0539f452527d340c6d7e6c57652147214196d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6b0539f452527d340c6d7e6c57652147214196d"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 36,
      "deletions": 33
    },
    "files": [
      {
        "sha": "3e26a183059c059277632e0cca9d11c3b1836f31",
        "filename": "autogen.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b77b4eda8db4e7ebd7762d8543c713c15b207e90/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b77b4eda8db4e7ebd7762d8543c713c15b207e90/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/autogen.sh?ref=b77b4eda8db4e7ebd7762d8543c713c15b207e90",
        "patch": "@@ -3,6 +3,7 @@ set -e\n srcdir=\"$(dirname $0)\"\n cd \"$srcdir\"\n if [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"`which glibtoolize 2>/dev/null`\"; then\n-  export LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n+  LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n+  export LIBTOOLIZE\n fi\n autoreconf --install --force --warnings=all"
      },
      {
        "sha": "2a72262653f1f71ca1341fc3ebd30b781a7789f1",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b77b4eda8db4e7ebd7762d8543c713c15b207e90/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b77b4eda8db4e7ebd7762d8543c713c15b207e90/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=b77b4eda8db4e7ebd7762d8543c713c15b207e90",
        "patch": "@@ -84,7 +84,7 @@ dnl Outputs: bitcoin_enable_qt, bitcoin_enable_qt_dbus, bitcoin_enable_qt_test\n AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   use_pkgconfig=$1\n \n-  if test x$use_pkgconfig == x; then\n+  if test x$use_pkgconfig = x; then\n     use_pkgconfig=yes\n   fi\n \n@@ -106,9 +106,9 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   BITCOIN_QT_CHECK([\n   TEMP_CPPFLAGS=$CPPFLAGS\n   CPPFLAGS=$QT_INCLUDES\n-  if test x$bitcoin_qt_got_major_vers == x5; then\n+  if test x$bitcoin_qt_got_major_vers = x5; then\n     _BITCOIN_QT_IS_STATIC\n-    if test x$bitcoin_cv_static_qt == xyes; then\n+    if test x$bitcoin_cv_static_qt = xyes; then\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n       if test x$qt_plugin_path != x; then\n         QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n@@ -118,14 +118,14 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n         PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n       fi\n       _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n-      if test x$TARGET_OS == xwindows; then\n+      if test x$TARGET_OS = xwindows; then\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n         AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n-      elif test x$TARGET_OS == xlinux; then\n+      elif test x$TARGET_OS = xlinux; then\n         PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n         AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n-      elif test x$TARGET_OS == xdarwin; then\n+      elif test x$TARGET_OS = xdarwin; then\n         if test x$use_pkgconfig = xyes; then\n           PKG_CHECK_MODULES([QTPRINT], [Qt5PrintSupport], [QT_LIBS=\"$QTPRINT_LIBS $QT_LIBS\"])\n         fi\n@@ -135,7 +135,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n       fi\n     fi\n   else\n-    if test x$TARGET_OS == xwindows; then\n+    if test x$TARGET_OS = xwindows; then\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n       if test x$qt_plugin_path != x; then\n         QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n@@ -196,7 +196,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     if test x$use_dbus = xyes && test x$have_qt_dbus = xno; then\n       AC_MSG_ERROR(\"libQtDBus not found. Install libQtDBus or remove --with-qtdbus.\")\n     fi\n-    if test x$LUPDATE == x; then\n+    if test x$LUPDATE = x; then\n       AC_MSG_WARN(\"lupdate is required to update qt translations\")\n     fi\n   ],[\n@@ -291,10 +291,10 @@ dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n   m4_ifdef([PKG_CHECK_MODULES],[\n   auto_priority_version=$1\n-  if test x$auto_priority_version == x; then\n+  if test x$auto_priority_version = x; then\n     auto_priority_version=qt5\n   fi\n-    if test x$bitcoin_qt_want_version == xqt5 ||  ( test x$bitcoin_qt_want_version == xauto && test x$auto_priority_version == xqt5 ); then\n+    if test x$bitcoin_qt_want_version = xqt5 ||  ( test x$bitcoin_qt_want_version = xauto && test x$auto_priority_version = xqt5 ); then\n       QT_LIB_PREFIX=Qt5\n       bitcoin_qt_got_major_vers=5\n     else\n@@ -304,14 +304,14 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n     qt5_modules=\"Qt5Core Qt5Gui Qt5Network Qt5Widgets\"\n     qt4_modules=\"QtCore QtGui QtNetwork\"\n     BITCOIN_QT_CHECK([\n-      if test x$bitcoin_qt_want_version == xqt5 || ( test x$bitcoin_qt_want_version == xauto && test x$auto_priority_version == xqt5 ); then\n+      if test x$bitcoin_qt_want_version = xqt5 || ( test x$bitcoin_qt_want_version = xauto && test x$auto_priority_version = xqt5 ); then\n         PKG_CHECK_MODULES([QT], [$qt5_modules], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes],[have_qt=no])\n-      elif test x$bitcoin_qt_want_version == xqt4 || ( test x$bitcoin_qt_want_version == xauto && test x$auto_priority_version == xqt4 ); then\n+      elif test x$bitcoin_qt_want_version = xqt4 || ( test x$bitcoin_qt_want_version = xauto && test x$auto_priority_version = xqt4 ); then\n         PKG_CHECK_MODULES([QT], [$qt4_modules], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes], [have_qt=no])\n       fi\n \n       dnl qt version is set to 'auto' and the preferred version wasn't found. Now try the other.\n-      if test x$have_qt == xno && test x$bitcoin_qt_want_version == xauto; then\n+      if test x$have_qt = xno && test x$bitcoin_qt_want_version = xauto; then\n         if test x$auto_priority_version = x$qt5; then\n           PKG_CHECK_MODULES([QT], [$qt4_modules], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes; QT_LIB_PREFIX=Qt; bitcoin_qt_got_major_vers=4], [have_qt=no])\n         else\n@@ -358,7 +358,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n     if test x$bitcoin_qt_want_version = xauto; then\n       _BITCOIN_QT_CHECK_QT5\n     fi\n-    if test x$bitcoin_cv_qt5 == xyes || test x$bitcoin_qt_want_version = xqt5; then\n+    if test x$bitcoin_cv_qt5 = xyes || test x$bitcoin_qt_want_version = xqt5; then\n       QT_LIB_PREFIX=Qt5\n       bitcoin_qt_got_major_vers=5\n     else\n@@ -373,7 +373,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n       LIBS=\"$LIBS -L$qt_lib_path\"\n     fi\n \n-    if test x$TARGET_OS == xwindows; then\n+    if test x$TARGET_OS = xwindows; then\n       AC_CHECK_LIB([imm32],      [main],, BITCOIN_QT_FAIL(libimm32 not found))\n     fi\n   ])\n@@ -385,7 +385,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXCore not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXGui not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXNetwork not found)))\n-  if test x$bitcoin_qt_got_major_vers == x5; then\n+  if test x$bitcoin_qt_got_major_vers = x5; then\n     BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Widgets],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXWidgets not found)))\n   fi\n   QT_LIBS=\"$LIBS\""
      },
      {
        "sha": "0bd309a3a843394c0ddf75a84095e15751497536",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 18,
        "deletions": 16,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b77b4eda8db4e7ebd7762d8543c713c15b207e90/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b77b4eda8db4e7ebd7762d8543c713c15b207e90/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b77b4eda8db4e7ebd7762d8543c713c15b207e90",
        "patch": "@@ -250,14 +250,16 @@ case $host in\n          bdb_prefix=`$BREW --prefix berkeley-db4 2>/dev/null`\n          qt5_prefix=`$BREW --prefix qt5 2>/dev/null`\n          if test x$openssl_prefix != x; then\n-           export PKG_CONFIG_PATH=\"$openssl_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+           PKG_CONFIG_PATH=\"$openssl_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+           export PKG_CONFIG_PATH\n          fi\n          if test x$bdb_prefix != x; then\n            CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"\n            LIBS=\"$LIBS -L$bdb_prefix/lib\"\n          fi\n          if test x$qt5_prefix != x; then\n-           export PKG_CONFIG_PATH=\"$qt5_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+           PKG_CONFIG_PATH=\"$qt5_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+           export PKG_CONFIG_PATH\n          fi\n        fi\n      else\n@@ -287,28 +289,28 @@ if test x$use_comparison_tool != xno; then\n fi\n \n if test x$use_comparison_tool_reorg_tests != xno; then\n-  if test x$use_comparison_tool == x; then\n+  if test x$use_comparison_tool = x; then\n     AC_MSG_ERROR(\"comparison tool reorg tests but comparison tool was not specified\")\n   fi\n   AC_SUBST(COMPARISON_TOOL_REORG_TESTS, 1)\n else\n   AC_SUBST(COMPARISON_TOOL_REORG_TESTS, 0)\n fi\n \n-if test x$use_lcov == xyes; then\n-  if test x$LCOV == x; then\n+if test x$use_lcov = xyes; then\n+  if test x$LCOV = x; then\n     AC_MSG_ERROR(\"lcov testing requested but lcov not found\")\n   fi\n-  if test x$GCOV == x; then\n+  if test x$GCOV = x; then\n     AC_MSG_ERROR(\"lcov testing requested but gcov not found\")\n   fi\n-  if test x$JAVA == x; then\n+  if test x$JAVA = x; then\n     AC_MSG_ERROR(\"lcov testing requested but java not found\")\n   fi\n-  if test x$GENHTML == x; then\n+  if test x$GENHTML = x; then\n     AC_MSG_ERROR(\"lcov testing requested but genhtml not found\")\n   fi\n-  if test x$use_comparison_tool == x; then\n+  if test x$use_comparison_tool = x; then\n     AC_MSG_ERROR(\"lcov testing requested but comparison tool was not specified\")\n   fi\n   LCOV=\"$LCOV --gcov-tool=$GCOV\"\n@@ -607,7 +609,7 @@ BITCOIN_QT_INIT\n \n if test x$use_pkgconfig = xyes; then\n \n-  if test x\"$PKG_CONFIG\" == \"x\"; then\n+  if test x\"$PKG_CONFIG\" = \"x\"; then\n     AC_MSG_ERROR(pkg-config not found.)\n   fi\n \n@@ -721,7 +723,7 @@ if test x$bitcoin_enable_qt != xno; then\n   dnl enable qr support\n   AC_MSG_CHECKING([whether to build GUI with support for QR codes])\n   if test x$have_qrencode = xno; then\n-    if test x$use_qr == xyes; then\n+    if test x$use_qr = xyes; then\n      AC_MSG_ERROR(\"QR support requested but cannot be built. use --without-qrencode\")\n     fi\n     AC_MSG_RESULT(no)\n@@ -735,7 +737,7 @@ if test x$bitcoin_enable_qt != xno; then\n     fi\n   fi\n \n-  if test x$XGETTEXT == x; then\n+  if test x$XGETTEXT = x; then\n     AC_MSG_WARN(\"xgettext is required to update qt translations\")\n   fi\n \n@@ -770,12 +772,12 @@ fi\n AM_CONDITIONAL([TARGET_DARWIN], [test x$TARGET_OS = xdarwin])\n AM_CONDITIONAL([BUILD_DARWIN], [test x$BUILD_OS = xdarwin])\n AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\n-AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet == xyes])\n-AM_CONDITIONAL([ENABLE_TESTS],[test x$use_tests == xyes])\n-AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt == xyes])\n+AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n+AM_CONDITIONAL([ENABLE_TESTS],[test x$use_tests = xyes])\n+AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$use_tests$bitcoin_enable_qt_test = xyesyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n-AM_CONDITIONAL([USE_LCOV],[test x$use_lcov == xyes])\n+AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])\n AM_CONDITIONAL([USE_COMPARISON_TOOL_REORG_TESTS],[test x$use_comparison_tool_reorg_test != xno])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])"
      }
    ]
  },
  {
    "sha": "ab72068565e4417799843d2445da39d9e98efffd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjcyMDY4NTY1ZTQ0MTc3OTk4NDNkMjQ0NWRhMzlkOWU5OGVmZmZk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-03T18:58:59Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-03T23:45:26Z"
      },
      "message": "Bugfix: Replace bashisms with standard sh in gitian descriptors",
      "tree": {
        "sha": "7e7faaa0c70b1b4969773d8edeaea5e63574dc68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e7faaa0c70b1b4969773d8edeaea5e63574dc68"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab72068565e4417799843d2445da39d9e98efffd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab72068565e4417799843d2445da39d9e98efffd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab72068565e4417799843d2445da39d9e98efffd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab72068565e4417799843d2445da39d9e98efffd/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b77b4eda8db4e7ebd7762d8543c713c15b207e90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b77b4eda8db4e7ebd7762d8543c713c15b207e90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b77b4eda8db4e7ebd7762d8543c713c15b207e90"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "347952e3a663988e3df5cd125137ca5cd07e8e3c",
        "filename": "contrib/gitian-descriptors/boost-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab72068565e4417799843d2445da39d9e98efffd/contrib/gitian-descriptors/boost-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab72068565e4417799843d2445da39d9e98efffd/contrib/gitian-descriptors/boost-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/boost-win.yml?ref=ab72068565e4417799843d2445da39d9e98efffd",
        "patch": "@@ -29,7 +29,7 @@ script: |\n     #\n     INSTALLPREFIX=$HOME/staging${BITS}\n     BUILDDIR=$HOME/build${BITS}\n-    if [ \"$BITS\" == \"32\" ]; then\n+    if [ \"x$BITS\" = \"x32\" ]; then\n       HOST=i686-w64-mingw32\n     else\n       HOST=x86_64-w64-mingw32"
      },
      {
        "sha": "fe02950ef9c09ee5a3c0941ba9660390f01b53ec",
        "filename": "contrib/gitian-descriptors/deps-win.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab72068565e4417799843d2445da39d9e98efffd/contrib/gitian-descriptors/deps-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab72068565e4417799843d2445da39d9e98efffd/contrib/gitian-descriptors/deps-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/deps-win.yml?ref=ab72068565e4417799843d2445da39d9e98efffd",
        "patch": "@@ -39,7 +39,7 @@ script: |\n     #\n     INSTALLPREFIX=$HOME/staging${BITS}\n     BUILDDIR=$HOME/build${BITS}\n-    if [ \"$BITS\" == \"32\" ]; then\n+    if [ \"x$BITS\" = \"x32\" ]; then\n       HOST=i686-w64-mingw32\n     else\n       HOST=x86_64-w64-mingw32\n@@ -50,7 +50,7 @@ script: |\n     #\n     tar xzf $INDIR/openssl-1.0.1h.tar.gz\n     cd openssl-1.0.1h\n-    if [ \"$BITS\" == \"32\" ]; then\n+    if [ \"x$BITS\" = \"x32\" ]; then\n       OPENSSL_TGT=mingw\n     else\n       OPENSSL_TGT=mingw64"
      },
      {
        "sha": "b2795c5376941dc34ee3812731ce83c9181d3a15",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab72068565e4417799843d2445da39d9e98efffd/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab72068565e4417799843d2445da39d9e98efffd/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=ab72068565e4417799843d2445da39d9e98efffd",
        "patch": "@@ -50,7 +50,7 @@ script: |\n     STAGING=$HOME/staging${BITS}\n     BUILDDIR=$HOME/build${BITS}\n     BINDIR=$OUTDIR/$BITS\n-    if [ \"$BITS\" == \"32\" ]; then\n+    if [ \"x$BITS\" = \"x32\" ]; then\n       HOST=i686-w64-mingw32\n     else\n       HOST=x86_64-w64-mingw32\n@@ -63,7 +63,7 @@ script: |\n     unzip $INDIR/boost-win${BITS}-1.55.0-gitian-r6.zip\n     unzip $INDIR/bitcoin-deps-win${BITS}-gitian-r13.zip\n     unzip $INDIR/protobuf-win${BITS}-2.5.0-gitian-r4.zip\n-    if [ \"$NEEDDIST\" == \"1\" ]; then\n+    if [ \"x$NEEDDIST\" = \"x1\" ]; then\n       # Make source code archive which is architecture independent so it only needs to be done once\n       cd $HOME/build/bitcoin\n       ./autogen.sh"
      },
      {
        "sha": "1b7af08843df5b8ce7790e749d4f18b6fc36c6e8",
        "filename": "contrib/gitian-descriptors/protobuf-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab72068565e4417799843d2445da39d9e98efffd/contrib/gitian-descriptors/protobuf-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab72068565e4417799843d2445da39d9e98efffd/contrib/gitian-descriptors/protobuf-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/protobuf-win.yml?ref=ab72068565e4417799843d2445da39d9e98efffd",
        "patch": "@@ -26,7 +26,7 @@ script: |\n     #\n     INSTALLPREFIX=$HOME/staging${BITS}\n     BUILDDIR=$HOME/build${BITS}\n-    if [ \"$BITS\" == \"32\" ]; then\n+    if [ \"x$BITS\" = \"x32\" ]; then\n       HOST=i686-w64-mingw32\n     else\n       HOST=x86_64-w64-mingw32"
      },
      {
        "sha": "fd86b4df1dceb6815fd9d61f329b6a779e80108f",
        "filename": "contrib/gitian-descriptors/qt-linux.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab72068565e4417799843d2445da39d9e98efffd/contrib/gitian-descriptors/qt-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab72068565e4417799843d2445da39d9e98efffd/contrib/gitian-descriptors/qt-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/qt-linux.yml?ref=ab72068565e4417799843d2445da39d9e98efffd",
        "patch": "@@ -18,7 +18,7 @@ files:\n script: |\n   export FAKETIME=$REFERENCE_DATETIME\n   export TZ=UTC\n-  if [ \"$GBUILD_BITS\" == \"32\" ]; then\n+  if [ \"x$GBUILD_BITS\" = \"x32\" ]; then\n     ARCH='i386-linux-gnu'\n   else\n     ARCH='x86_64-linux-gnu'\n@@ -74,7 +74,7 @@ script: |\n   #endif\n   ' > $QCONFIG\n \n-  if [ \"$GBUILD_BITS\" == \"32\" ]; then\n+  if [ \"x$GBUILD_BITS\" = \"x32\" ]; then\n     echo '\n   /* Machine byte-order */\n   #define Q_BIG_ENDIAN 4321"
      },
      {
        "sha": "57bc4c31804926f5c5ae120c4e41fefb8c8220b7",
        "filename": "contrib/gitian-descriptors/qt-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab72068565e4417799843d2445da39d9e98efffd/contrib/gitian-descriptors/qt-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab72068565e4417799843d2445da39d9e98efffd/contrib/gitian-descriptors/qt-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/qt-win.yml?ref=ab72068565e4417799843d2445da39d9e98efffd",
        "patch": "@@ -38,7 +38,7 @@ script: |\n     INSTALLPREFIX=$HOME/staging${BITS}\n     BUILDDIR=$HOME/build${BITS}\n     DEPSDIR=$HOME/deps${BITS}\n-    if [ \"$BITS\" == \"32\" ]; then\n+    if [ \"x$BITS\" = \"x32\" ]; then\n       HOST=i686-w64-mingw32\n     else\n       HOST=x86_64-w64-mingw32"
      },
      {
        "sha": "df076956bd3eb51e05bd6def26cfc32724ff3185",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab72068565e4417799843d2445da39d9e98efffd/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab72068565e4417799843d2445da39d9e98efffd/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=ab72068565e4417799843d2445da39d9e98efffd",
        "patch": "@@ -34,12 +34,12 @@ if test -z $with_gui && test -n \"@no_qt@\"; then\n   with_gui=no\n fi\n \n-if test @host_os@ == darwin; then\n+if test x@host_os@ = xdarwin; then\n   BREW=no\n   PORT=no\n fi\n \n-if test @host_os@ == mingw32; then\n+if test x@host_os@ = xmingw32; then\n   if test -z $with_qt_incdir; then\n     with_qt_incdir=$prefix/include\n   fi"
      }
    ]
  },
  {
    "sha": "0b17964131c78daa6a3ee01c41f47a43ee2e1947",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjE3OTY0MTMxYzc4ZGFhNmEzZWUwMWM0MWY0N2E0M2VlMmUxOTQ3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-03T18:58:59Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-03T23:45:26Z"
      },
      "message": "Bugfix: Replace bashisms with standard sh in tests/tools",
      "tree": {
        "sha": "0d3d7013ab2f4e0b876d4b5cbbd4bbe0f134cf23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d3d7013ab2f4e0b876d4b5cbbd4bbe0f134cf23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b17964131c78daa6a3ee01c41f47a43ee2e1947",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b17964131c78daa6a3ee01c41f47a43ee2e1947",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b17964131c78daa6a3ee01c41f47a43ee2e1947",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b17964131c78daa6a3ee01c41f47a43ee2e1947/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab72068565e4417799843d2445da39d9e98efffd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab72068565e4417799843d2445da39d9e98efffd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab72068565e4417799843d2445da39d9e98efffd"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "a83a2a59be307cb72b0ad25ec173f16151c7959d",
        "filename": "contrib/devtools/github-merge.sh",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b17964131c78daa6a3ee01c41f47a43ee2e1947/contrib/devtools/github-merge.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b17964131c78daa6a3ee01c41f47a43ee2e1947/contrib/devtools/github-merge.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.sh?ref=0b17964131c78daa6a3ee01c41f47a43ee2e1947",
        "patch": "@@ -13,7 +13,7 @@\n # name $BRANCH is overwritten with the merged result, and optionally pushed.\n \n REPO=\"$(git config --get githubmerge.repository)\"\n-if [[ \"d$REPO\" == \"d\" ]]; then\n+if [ \"d$REPO\" = \"d\" ]; then\n   echo \"ERROR: No repository configured. Use this command to set:\" >&2\n   echo \"git config githubmerge.repository <owner>/<repo>\" >&2\n   echo \"In addition, you can set the following variables:\" >&2\n@@ -24,25 +24,25 @@ if [[ \"d$REPO\" == \"d\" ]]; then\n fi\n \n HOST=\"$(git config --get githubmerge.host)\"\n-if [[ \"d$HOST\" == \"d\" ]]; then\n+if [ \"d$HOST\" = \"d\" ]; then\n   HOST=\"git@github.com\"\n fi\n \n BRANCH=\"$(git config --get githubmerge.branch)\"\n-if [[ \"d$BRANCH\" == \"d\" ]]; then\n+if [ \"d$BRANCH\" = \"d\" ]; then\n   BRANCH=\"master\"\n fi\n \n TESTCMD=\"$(git config --get githubmerge.testcmd)\"\n \n PULL=\"$1\"\n \n-if [[ \"d$PULL\" == \"d\" ]]; then\n+if [ \"d$PULL\" = \"d\" ]; then\n   echo \"Usage: $0 pullnumber [branch]\" >&2\n   exit 2\n fi\n \n-if [[ \"d$2\" != \"d\" ]]; then\n+if [ \"d$2\" != \"d\" ]; then\n   BRANCH=\"$2\"\n fi\n \n@@ -101,7 +101,7 @@ else\n fi\n \n # Run test command if configured.\n-if [[ \"d$TESTCMD\" != \"d\" ]]; then\n+if [ \"d$TESTCMD\" != \"d\" ]; then\n   # Go up to the repository's root.\n   while [ ! -d .git ]; do cd ..; done\n   if ! $TESTCMD; then\n@@ -112,10 +112,10 @@ if [[ \"d$TESTCMD\" != \"d\" ]]; then\n   # Show the created merge.\n   git diff pull/\"$PULL\"/merge..pull/\"$PULL\"/local-merge >\"$TMPDIR\"/diff\n   git diff pull/\"$PULL\"/base..pull/\"$PULL\"/local-merge\n-  if [[ \"$(<\"$TMPDIR\"/diff)\" != \"\" ]]; then\n+  if [ \"$(<\"$TMPDIR\"/diff)\" != \"\" ]; then\n     echo \"WARNING: merge differs from github!\" >&2\n     read -p \"Type 'ignore' to continue. \" -r >&2\n-    if [[ \"d$REPLY\" =~ ^d[iI][gG][nN][oO][rR][eE]$ ]]; then\n+    if [ \"d$REPLY\" =~ ^d[iI][gG][nN][oO][rR][eE]$ ]; then\n       echo \"Difference with github ignored.\" >&2\n     else\n       cleanup\n@@ -124,7 +124,7 @@ if [[ \"d$TESTCMD\" != \"d\" ]]; then\n   fi\n   read -p \"Press 'd' to accept the diff. \" -n 1 -r >&2\n   echo\n-  if [[ \"d$REPLY\" =~ ^d[dD]$ ]]; then\n+  if [ \"d$REPLY\" =~ ^d[dD]$ ]; then\n     echo \"Diff accepted.\" >&2\n   else\n     echo \"ERROR: Diff rejected.\" >&2\n@@ -139,7 +139,7 @@ else\n   bash -i\n   read -p \"Press 'm' to accept the merge. \" -n 1 -r >&2\n   echo\n-  if [[ \"d$REPLY\" =~ ^d[Mm]$ ]]; then\n+  if [ \"d$REPLY\" =~ ^d[Mm]$ ]; then\n     echo \"Merge accepted.\" >&2\n   else\n     echo \"ERROR: Merge rejected.\" >&2\n@@ -151,8 +151,8 @@ fi\n # Sign the merge commit.\n read -p \"Press 's' to sign off on the merge. \" -n 1 -r >&2\n echo\n-if [[ \"d$REPLY\" =~ ^d[Ss]$ ]]; then\n-  if [[ \"$(git config --get user.signingkey)\" == \"\" ]]; then\n+if [ \"d$REPLY\" =~ ^d[Ss]$ ]; then\n+  if [ \"$(git config --get user.signingkey)\" = \"\" ]; then\n     echo \"WARNING: No GPG signing key set, not signing. Set one using:\" >&2\n     echo \"git config --global user.signingkey <key>\" >&2\n     git commit -q --signoff --amend --no-edit\n@@ -168,6 +168,6 @@ cleanup\n \n # Push the result.\n read -p \"Type 'push' to push the result to $HOST:$REPO, branch $BRANCH. \" -r >&2\n-if [[ \"d$REPLY\" =~ ^d[Pp][Uu][Ss][Hh]$ ]]; then\n+if [ \"d$REPLY\" =~ ^d[Pp][Uu][Ss][Hh]$ ]; then\n   git push \"$HOST\":\"$REPO\" refs/heads/\"$BRANCH\"\n fi"
      },
      {
        "sha": "8c0f114590cf9df5eb2541771c7b93b955252e09",
        "filename": "qa/rpc-tests/send.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b17964131c78daa6a3ee01c41f47a43ee2e1947/qa/rpc-tests/send.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b17964131c78daa6a3ee01c41f47a43ee2e1947/qa/rpc-tests/send.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/send.sh?ref=0b17964131c78daa6a3ee01c41f47a43ee2e1947",
        "patch": "@@ -14,7 +14,7 @@ if [ $# -eq 0 ]; then\n   exit 0\n fi\n \n-if [ $1 == \"-STOP\" ]; then\n+if [ $1 = \"-STOP\" ]; then\n   if [ -s ${PIDFILE} ]; then\n       kill -s ${SIGNAL} $(<${PIDFILE})\n   fi"
      },
      {
        "sha": "b88d5920f7a91270e6c5a4e746c951809c3c40ef",
        "filename": "qa/rpc-tests/walletbackup.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b17964131c78daa6a3ee01c41f47a43ee2e1947/qa/rpc-tests/walletbackup.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b17964131c78daa6a3ee01c41f47a43ee2e1947/qa/rpc-tests/walletbackup.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.sh?ref=0b17964131c78daa6a3ee01c41f47a43ee2e1947",
        "patch": "@@ -149,7 +149,7 @@ echo \"Creating transactions...\"\n \n function S {\n   TXID=$( $CLI -datadir=${D}/node${1} sendtoaddress ${2} \"${3}\" 0 )\n-  if [[ $TXID == \"\" ]] ; then\n+  if [ x$TXID = x ] ; then\n       echoerr \"node${1}: error sending ${3} btc\"\n       echo -n \"node${1} balance: \"\n       $CLI -datadir=${D}/node${1} getbalance \"*\" 0"
      }
    ]
  },
  {
    "sha": "5bf029603c60305cafcb1734c4d3f8b9eddfa4ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmYwMjk2MDNjNjAzMDVjYWZjYjE3MzRjNGQzZjhiOWVkZGZhNGVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-04T06:51:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-04T06:51:56Z"
      },
      "message": "Merge pull request #5035\n\nc9c51cb Make comptool more deterministic (Matt Corallo)",
      "tree": {
        "sha": "e7392bc5d54edacc1ec25bf5977c251a54331b5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7392bc5d54edacc1ec25bf5977c251a54331b5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bf029603c60305cafcb1734c4d3f8b9eddfa4ee",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUL5kMAAoJEHSBCwEjRsmmlEIH/i16+KgwpybGn+jUzvjauSIo\nc00GrXiYDwWNDp8JMxTXylQiwi1SYSr7RRoIKgw4qwujGKmyOuG2+BLgJh25l/X2\nERycQH0Jo4WHea0Vsr/fYlsMXlpLAnpLZMqLrbCY7l8TNzOqnG0Z2dHhSb3pwNdr\n0rugAqVbtpIavhus0kMh+rn3Nv0aixhphd5rn0RmNSzi3VOvv5bu5aRDpFN9kOFq\nsfOnkORFybj6Ux/UnsgiLK4HzKJby8MC4fHD9PFDJDhRufhUy/QoZsZy03NxBZQN\nXd8T7xc85DOI7EMDcP9/ApFul9lsrm65Mw3Dz3btAuiTJuX5SCHjN6Uxx6qmkGA=\n=Ylin\n-----END PGP SIGNATURE-----",
        "payload": "tree e7392bc5d54edacc1ec25bf5977c251a54331b5b\nparent cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c\nparent c9c51cba4e3e1905c154ecf9f6559ced7606dc75\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412405509 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412405516 +0200\n\nMerge pull request #5035\n\nc9c51cb Make comptool more deterministic (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bf029603c60305cafcb1734c4d3f8b9eddfa4ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bf029603c60305cafcb1734c4d3f8b9eddfa4ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bf029603c60305cafcb1734c4d3f8b9eddfa4ee/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c"
      },
      {
        "sha": "c9c51cba4e3e1905c154ecf9f6559ced7606dc75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9c51cba4e3e1905c154ecf9f6559ced7606dc75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9c51cba4e3e1905c154ecf9f6559ced7606dc75"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "3d430d4306a586f05f78facfe023b80cc4d27791",
        "filename": "depends/packages/native_comparisontool.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bf029603c60305cafcb1734c4d3f8b9eddfa4ee/depends/packages/native_comparisontool.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bf029603c60305cafcb1734c4d3f8b9eddfa4ee/depends/packages/native_comparisontool.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_comparisontool.mk?ref=5bf029603c60305cafcb1734c4d3f8b9eddfa4ee",
        "patch": "@@ -1,8 +1,8 @@\n package=native_comparisontool\n-$(package)_version=5caed78\n-$(package)_download_path=https://github.com/TheBlueMatt/test-scripts/raw/2d76ce92d68e6746988adde731318605a70e252c\n+$(package)_version=0f7b5d8\n+$(package)_download_path=https://github.com/TheBlueMatt/test-scripts/raw/38b490a2599d422b12d5ce8f165792f63fd8f54f\n $(package)_file_name=pull-tests-$($(package)_version).jar\n-$(package)_sha256_hash=b55a98828b17060e327c5dabe5e4631898f422c0cba07c46170930a9eaf5e7c0\n+$(package)_sha256_hash=ecd43b988a8b673b483e4f69f931596360a5e90fc415c75c4c259faa690df198\n $(package)_install_dirname=BitcoindComparisonTool_jar\n $(package)_install_filename=BitcoindComparisonTool.jar\n "
      }
    ]
  },
  {
    "sha": "1f9be984db13e9bed98d2aadb8f0577a2057f7cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjliZTk4NGRiMTNlOWJlZDk4ZDJhYWRiOGYwNTc3YTIwNTdmN2Nj",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-10-04T11:34:15Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-10-04T11:34:15Z"
      },
      "message": "Disable App Nap on OSX 10.9+",
      "tree": {
        "sha": "890cad03a0f9dceea98aa6d8ca003e2e9b1f3022",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/890cad03a0f9dceea98aa6d8ca003e2e9b1f3022"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f9be984db13e9bed98d2aadb8f0577a2057f7cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9be984db13e9bed98d2aadb8f0577a2057f7cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f9be984db13e9bed98d2aadb8f0577a2057f7cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9be984db13e9bed98d2aadb8f0577a2057f7cc/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bf029603c60305cafcb1734c4d3f8b9eddfa4ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bf029603c60305cafcb1734c4d3f8b9eddfa4ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bf029603c60305cafcb1734c4d3f8b9eddfa4ee"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd6edde8d285d2e139d8cad61e91dbe664fc4d6a",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f9be984db13e9bed98d2aadb8f0577a2057f7cc/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f9be984db13e9bed98d2aadb8f0577a2057f7cc/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=1f9be984db13e9bed98d2aadb8f0577a2057f7cc",
        "patch": "@@ -91,6 +91,9 @@\n   <key>NSHighResolutionCapable</key>\n     <string>True</string>\n \n+  <key>LSAppNapIsDisabled</key>\n+    <string>True</string>\n+  \n   <key>LSApplicationCategoryType</key>\n     <string>public.app-category.finance</string>\n </dict>"
      }
    ]
  },
  {
    "sha": "5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjFhZWUwNjZhNTZhYTVhYzk4MDc1OGQ1ZDNhNjlkZDM3YTQ2ZTcz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-06T02:38:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-06T02:39:17Z"
      },
      "message": "Merge pull request #4890\n\ne790c37 Replace SCRIPT_VERIFY_NOCACHE by flag directly to checker (Pieter Wuille)\n5c1e798 Make signature cache optional (Pieter Wuille)\nc7829ea Abstract out SignatureChecker (Pieter Wuille)",
      "tree": {
        "sha": "f925a2fafa00c5c41501976b737e5063d5636252",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f925a2fafa00c5c41501976b737e5063d5636252"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUMgDVAAoJEHSBCwEjRsmm9VIH/1eCtkuONq6mZm5mZlH4K5Au\nWyEKgFnHzS8ZuMGdObGvc1csEYpS9eCupMhFq6IbzA8IogYgfGUi1P12JiRWbeUO\n83yx9jfWQrWhY9/3KgU+P0O8+2I37JAUjVNYmhHVpVYmzFS6NXzQs7S9BCtdSLJm\nLPHrzf0F6p9KMdBqZI1HL5Khynf/duQMNX4QUjuaQ1vNsdpwTN78TJmykNa6UKs1\nr+T+QZrnTmYt/vcsA8uBlKmdqAFxbbXwzl6PMhxxBe7y4SrcTeBLdfAU9U08swkx\na/5bup2q0jd7ygFCEyI41QunfJmGd1kIvfKwlZDUKhEQLKi4TSgDE6eON+Ee8rc=\n=Xac9\n-----END PGP SIGNATURE-----",
        "payload": "tree f925a2fafa00c5c41501976b737e5063d5636252\nparent 5bf029603c60305cafcb1734c4d3f8b9eddfa4ee\nparent e790c370b5971dd096d1bbfd55960ccf71b7594a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412563132 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412563157 +0200\n\nMerge pull request #4890\n\ne790c37 Replace SCRIPT_VERIFY_NOCACHE by flag directly to checker (Pieter Wuille)\n5c1e798 Make signature cache optional (Pieter Wuille)\nc7829ea Abstract out SignatureChecker (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bf029603c60305cafcb1734c4d3f8b9eddfa4ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bf029603c60305cafcb1734c4d3f8b9eddfa4ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bf029603c60305cafcb1734c4d3f8b9eddfa4ee"
      },
      {
        "sha": "e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e790c370b5971dd096d1bbfd55960ccf71b7594a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e790c370b5971dd096d1bbfd55960ccf71b7594a"
      }
    ],
    "stats": {
      "total": 350,
      "additions": 215,
      "deletions": 135
    },
    "files": [
      {
        "sha": "155adfef7d34c3de6f0165e999b56ce4cc5f09b1",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -103,6 +103,7 @@ BITCOIN_CORE_H = \\\n   script/compressor.h \\\n   script/interpreter.h \\\n   script/script.h \\\n+  script/sigcache.h \\\n   script/sign.h \\\n   script/standard.h \\\n   serialize.h \\\n@@ -218,6 +219,7 @@ libbitcoin_common_a_SOURCES = \\\n   script/compressor.cpp \\\n   script/interpreter.cpp \\\n   script/script.cpp \\\n+  script/sigcache.cpp \\\n   script/sign.cpp \\\n   script/standard.cpp \\\n   $(BITCOIN_CORE_H)"
      },
      {
        "sha": "a198eb586eed18eab97d319ed86a791dcb770a12",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -435,7 +435,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n         BOOST_FOREACH(const CTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, STANDARD_SCRIPT_VERIFY_FLAGS))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "595aa7e0100b91e22fd8982d74074fb2198d2210",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -645,7 +645,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // IsStandard() will have already returned false\n         // and this method isn't called.\n         vector<vector<unsigned char> > stack;\n-        if (!EvalScript(stack, tx.vin[i].scriptSig, tx, i, false))\n+        if (!EvalScript(stack, tx.vin[i].scriptSig, false, BaseSignatureChecker()))\n             return false;\n \n         if (whichType == TX_SCRIPTHASH)\n@@ -943,7 +943,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS))\n+        if (!CheckInputs(tx, state, view, true, STANDARD_SCRIPT_VERIFY_FLAGS, true))\n         {\n             return error(\"AcceptToMemoryPool: : ConnectInputs failed %s\", hash.ToString());\n         }\n@@ -1316,12 +1316,12 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n \n bool CScriptCheck::operator()() const {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    if (!VerifyScript(scriptSig, scriptPubKey, *ptxTo, nIn, nFlags))\n+    if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore)))\n         return error(\"CScriptCheck() : %s:%d VerifySignature failed\", ptxTo->GetHash().ToString(), nIn);\n     return true;\n }\n \n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, std::vector<CScriptCheck> *pvChecks)\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks)\n {\n     if (!tx.IsCoinBase())\n     {\n@@ -1390,7 +1390,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                 assert(coins);\n \n                 // Verify signature\n-                CScriptCheck check(*coins, tx, i, flags);\n+                CScriptCheck check(*coins, tx, i, flags, cacheStore);\n                 if (pvChecks) {\n                     pvChecks->push_back(CScriptCheck());\n                     check.swap(pvChecks->back());\n@@ -1403,7 +1403,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n                         // avoid splitting the network between upgraded and\n                         // non-upgraded nodes.\n                         CScriptCheck check(*coins, tx, i,\n-                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS);\n+                                flags & ~STANDARD_NOT_MANDATORY_VERIFY_FLAGS, cacheStore);\n                         if (check())\n                             return state.Invalid(false, REJECT_NONSTANDARD, \"non-mandatory-script-verify-flag\");\n                     }\n@@ -1599,8 +1599,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     int64_t nBIP16SwitchTime = 1333238400;\n     bool fStrictPayToScriptHash = (pindex->GetBlockTime() >= nBIP16SwitchTime);\n \n-    unsigned int flags = SCRIPT_VERIFY_NOCACHE |\n-                         (fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE);\n+    unsigned int flags = fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE;\n \n     CBlockUndo blockundo;\n \n@@ -1644,7 +1643,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n             nFees += view.GetValueIn(tx)-tx.GetValueOut();\n \n             std::vector<CScriptCheck> vChecks;\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, nScriptCheckThreads ? &vChecks : NULL))\n+            if (!CheckInputs(tx, state, view, fScriptChecks, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n                 return false;\n             control.Add(vChecks);\n         }"
      },
      {
        "sha": "c09a139b2405ca311b5ae65c1a8dcf49f07d6e2c",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -17,6 +17,7 @@\n #include \"net.h\"\n #include \"pow.h\"\n #include \"script/script.h\"\n+#include \"script/sigcache.h\"\n #include \"script/standard.h\"\n #include \"sync.h\"\n #include \"txmempool.h\"\n@@ -258,9 +259,8 @@ unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& ma\n // Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n // This does not modify the UTXO set. If pvChecks is not NULL, script checks are pushed onto it\n // instead of being performed inline.\n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, bool fScriptChecks = true,\n-                 unsigned int flags = STANDARD_SCRIPT_VERIFY_FLAGS,\n-                 std::vector<CScriptCheck> *pvChecks = NULL);\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &view, bool fScriptChecks,\n+                 unsigned int flags, bool cacheStore, std::vector<CScriptCheck> *pvChecks = NULL);\n \n // Apply the effects of this transaction on the UTXO set represented by view\n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight);\n@@ -302,12 +302,13 @@ class CScriptCheck\n     const CTransaction *ptxTo;\n     unsigned int nIn;\n     unsigned int nFlags;\n+    bool cacheStore;\n \n public:\n-    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0) {}\n-    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn) :\n+    CScriptCheck(): ptxTo(0), nIn(0), nFlags(0), cacheStore(false) {}\n+    CScriptCheck(const CCoins& txFromIn, const CTransaction& txToIn, unsigned int nInIn, unsigned int nFlagsIn, bool cacheIn) :\n         scriptPubKey(txFromIn.vout[txToIn.vin[nInIn].prevout.n].scriptPubKey),\n-        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn) { }\n+        ptxTo(&txToIn), nIn(nInIn), nFlags(nFlagsIn), cacheStore(cacheIn) { }\n \n     bool operator()() const;\n \n@@ -316,6 +317,7 @@ class CScriptCheck\n         std::swap(ptxTo, check.ptxTo);\n         std::swap(nIn, check.nIn);\n         std::swap(nFlags, check.nFlags);\n+        std::swap(cacheStore, check.cacheStore);\n     }\n };\n "
      },
      {
        "sha": "280349e8c2d560f98f9f788a9a3185b5a6b9dde3",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -257,7 +257,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             // policy here, but we still have to ensure that the block we\n             // create only contains transactions that are valid in new blocks.\n             CValidationState state;\n-            if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS))\n+            if (!CheckInputs(tx, state, view, true, MANDATORY_SCRIPT_VERIFY_FLAGS, true))\n                 continue;\n \n             CTxUndo txundo;"
      },
      {
        "sha": "e50a278bc8eb90cb4804b062e7dde81b8431efa3",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -687,7 +687,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         BOOST_FOREACH(const CMutableTransaction& txv, txVariants) {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, STANDARD_SCRIPT_VERIFY_FLAGS))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(mergedTx, i)))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "56140f19dba9c01e5f8d8923257268ee441f2815",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 75,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -9,14 +9,10 @@\n #include \"crypto/ripemd160.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha2.h\"\n-#include \"random.h\"\n #include \"script/script.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n-#include <boost/thread.hpp>\n-#include <boost/tuple/tuple_comparison.hpp>\n-\n using namespace std;\n \n typedef vector<unsigned char> valtype;\n@@ -132,7 +128,7 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n     return true;\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker)\n {\n     CScript::const_iterator pc = script.begin();\n     CScript::const_iterator pend = script.end();\n@@ -675,7 +671,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n                     bool fSuccess = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                        CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, flags);\n+                        checker.CheckSig(vchSig, vchPubKey, scriptCode);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -736,7 +732,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n \n                         // Check signature\n                         bool fOk = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                            CheckSig(vchSig, vchPubKey, scriptCode, txTo, nIn, flags);\n+                            checker.CheckSig(vchSig, vchPubKey, scriptCode);\n \n                         if (fOk) {\n                             isig++;\n@@ -897,7 +893,7 @@ class CTransactionSignatureSerializer {\n \n } // anon namespace\n \n-uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n+uint256 SignatureHash(const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType)\n {\n     if (nIn >= txTo.vin.size()) {\n         LogPrintf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n@@ -921,97 +917,40 @@ uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsig\n     return ss.GetHash();\n }\n \n-// Valid signature cache, to avoid doing expensive ECDSA signature checking\n-// twice for every transaction (once when accepted into memory pool, and\n-// again when accepted into the block chain)\n-class CSignatureCache\n+bool SignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n {\n-private:\n-     // sigdata_type is (signature hash, signature, public key):\n-    typedef boost::tuple<uint256, std::vector<unsigned char>, CPubKey> sigdata_type;\n-    std::set< sigdata_type> setValid;\n-    boost::shared_mutex cs_sigcache;\n-\n-public:\n-    bool\n-    Get(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n-    {\n-        boost::shared_lock<boost::shared_mutex> lock(cs_sigcache);\n-\n-        sigdata_type k(hash, vchSig, pubKey);\n-        std::set<sigdata_type>::iterator mi = setValid.find(k);\n-        if (mi != setValid.end())\n-            return true;\n-        return false;\n-    }\n-\n-    void Set(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n-    {\n-        // DoS prevention: limit cache size to less than 10MB\n-        // (~200 bytes per cache entry times 50,000 entries)\n-        // Since there are a maximum of 20,000 signature operations per block\n-        // 50,000 is a reasonable default.\n-        int64_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", 50000);\n-        if (nMaxCacheSize <= 0) return;\n-\n-        boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n-\n-        while (static_cast<int64_t>(setValid.size()) > nMaxCacheSize)\n-        {\n-            // Evict a random entry. Random because that helps\n-            // foil would-be DoS attackers who might try to pre-generate\n-            // and re-use a set of valid signatures just-slightly-greater\n-            // than our cache size.\n-            uint256 randomHash = GetRandHash();\n-            std::vector<unsigned char> unused;\n-            std::set<sigdata_type>::iterator it =\n-                setValid.lower_bound(sigdata_type(randomHash, unused, unused));\n-            if (it == setValid.end())\n-                it = setValid.begin();\n-            setValid.erase(*it);\n-        }\n-\n-        sigdata_type k(hash, vchSig, pubKey);\n-        setValid.insert(k);\n-    }\n-};\n+    return pubkey.Verify(sighash, vchSig);\n+}\n \n-bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char>& vchPubKey, const CScript& scriptCode, const CTransaction& txTo, unsigned int nIn, int flags)\n+bool SignatureChecker::CheckSig(const vector<unsigned char>& vchSigIn, const vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n {\n-    static CSignatureCache signatureCache;\n-\n     CPubKey pubkey(vchPubKey);\n     if (!pubkey.IsValid())\n         return false;\n \n     // Hash type is one byte tacked on to the end of the signature\n+    vector<unsigned char> vchSig(vchSigIn);\n     if (vchSig.empty())\n         return false;\n     int nHashType = vchSig.back();\n     vchSig.pop_back();\n \n     uint256 sighash = SignatureHash(scriptCode, txTo, nIn, nHashType);\n \n-    if (signatureCache.Get(sighash, vchSig, pubkey))\n-        return true;\n-\n-    if (!pubkey.Verify(sighash, vchSig))\n+    if (!VerifySignature(vchSig, pubkey, sighash))\n         return false;\n \n-    if (!(flags & SCRIPT_VERIFY_NOCACHE))\n-        signatureCache.Set(sighash, vchSig, pubkey);\n-\n     return true;\n }\n \n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags)\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker)\n {\n     vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, txTo, nIn, flags))\n+    if (!EvalScript(stack, scriptSig, flags, checker))\n         return false;\n     if (flags & SCRIPT_VERIFY_P2SH)\n         stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, txTo, nIn, flags))\n+    if (!EvalScript(stack, scriptPubKey, flags, checker))\n         return false;\n     if (stack.empty())\n         return false;\n@@ -1034,7 +973,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n         popstack(stackCopy);\n \n-        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, flags))\n+        if (!EvalScript(stackCopy, pubKey2, flags, checker))\n             return false;\n         if (stackCopy.empty())\n             return false;"
      },
      {
        "sha": "f5363a7535a6fa9236911d0709fe33eb2e3528e4",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 31,
        "deletions": 6,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -10,9 +10,10 @@\n #include <stdint.h>\n #include <string>\n \n+class uint256;\n+class CPubKey;\n class CScript;\n class CTransaction;\n-class uint256;\n \n /** Signature hash types/flags */\n enum\n@@ -30,16 +31,40 @@ enum\n     SCRIPT_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n     SCRIPT_VERIFY_STRICTENC = (1U << 1), // enforce strict conformance to DER and SEC2 for signatures and pubkeys\n     SCRIPT_VERIFY_LOW_S     = (1U << 2), // enforce low S values (<n/2) in signatures (depends on STRICTENC)\n-    SCRIPT_VERIFY_NOCACHE   = (1U << 3), // do not store results in signature cache (but do query it)\n-    SCRIPT_VERIFY_NULLDUMMY = (1U << 4), // verify dummy stack item consumed by CHECKMULTISIG is of zero-length\n+    SCRIPT_VERIFY_NULLDUMMY = (1U << 3), // verify dummy stack item consumed by CHECKMULTISIG is of zero-length\n };\n \n bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey, unsigned int flags);\n bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int flags);\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-bool CheckSig(std::vector<unsigned char> vchSig, const std::vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int flags);\n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n-bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn, unsigned int flags);\n+\n+class BaseSignatureChecker\n+{\n+public:\n+    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const\n+    {\n+        return false;\n+    }\n+\n+    virtual ~BaseSignatureChecker() {}\n+};\n+\n+class SignatureChecker : public BaseSignatureChecker\n+{\n+private:\n+    const CTransaction& txTo;\n+    unsigned int nIn;\n+\n+protected:\n+    virtual bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n+\n+public:\n+    SignatureChecker(const CTransaction& txToIn, unsigned int nInIn) : txTo(txToIn), nIn(nInIn) {}\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode) const;\n+};\n+\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker);\n+bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, unsigned int flags, const BaseSignatureChecker& checker);\n \n #endif // H_BITCOIN_SCRIPT_INTERPRETER"
      },
      {
        "sha": "981563b7aea02b82bfa76ef89c6fe3944cddd972",
        "filename": "src/script/sigcache.cpp",
        "status": "added",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"sigcache.h\"\n+\n+#include \"key.h\"\n+#include \"random.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <boost/thread.hpp>\n+#include <boost/tuple/tuple_comparison.hpp>\n+\n+namespace {\n+\n+// Valid signature cache, to avoid doing expensive ECDSA signature checking\n+// twice for every transaction (once when accepted into memory pool, and\n+// again when accepted into the block chain)\n+class CSignatureCache\n+{\n+private:\n+     // sigdata_type is (signature hash, signature, public key):\n+    typedef boost::tuple<uint256, std::vector<unsigned char>, CPubKey> sigdata_type;\n+    std::set< sigdata_type> setValid;\n+    boost::shared_mutex cs_sigcache;\n+\n+public:\n+    bool\n+    Get(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n+    {\n+        boost::shared_lock<boost::shared_mutex> lock(cs_sigcache);\n+\n+        sigdata_type k(hash, vchSig, pubKey);\n+        std::set<sigdata_type>::iterator mi = setValid.find(k);\n+        if (mi != setValid.end())\n+            return true;\n+        return false;\n+    }\n+\n+    void Set(const uint256 &hash, const std::vector<unsigned char>& vchSig, const CPubKey& pubKey)\n+    {\n+        // DoS prevention: limit cache size to less than 10MB\n+        // (~200 bytes per cache entry times 50,000 entries)\n+        // Since there are a maximum of 20,000 signature operations per block\n+        // 50,000 is a reasonable default.\n+        int64_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", 50000);\n+        if (nMaxCacheSize <= 0) return;\n+\n+        boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n+\n+        while (static_cast<int64_t>(setValid.size()) > nMaxCacheSize)\n+        {\n+            // Evict a random entry. Random because that helps\n+            // foil would-be DoS attackers who might try to pre-generate\n+            // and re-use a set of valid signatures just-slightly-greater\n+            // than our cache size.\n+            uint256 randomHash = GetRandHash();\n+            std::vector<unsigned char> unused;\n+            std::set<sigdata_type>::iterator it =\n+                setValid.lower_bound(sigdata_type(randomHash, unused, unused));\n+            if (it == setValid.end())\n+                it = setValid.begin();\n+            setValid.erase(*it);\n+        }\n+\n+        sigdata_type k(hash, vchSig, pubKey);\n+        setValid.insert(k);\n+    }\n+};\n+\n+}\n+\n+bool CachingSignatureChecker::VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& pubkey, const uint256& sighash) const\n+{\n+    static CSignatureCache signatureCache;\n+\n+    if (signatureCache.Get(sighash, vchSig, pubkey))\n+        return true;\n+\n+    if (!SignatureChecker::VerifySignature(vchSig, pubkey, sighash))\n+        return false;\n+\n+    if (store)\n+        signatureCache.Set(sighash, vchSig, pubkey);\n+    return true;\n+}"
      },
      {
        "sha": "9537efbd118e677c1756eaa39c25fa9a393c8c40",
        "filename": "src/script/sigcache.h",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -0,0 +1,26 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_BITCOIN_SCRIPT_SIGCACHE\n+#define H_BITCOIN_SCRIPT_SIGCACHE\n+\n+#include \"script/interpreter.h\"\n+\n+#include <vector>\n+\n+class CPubKey;\n+\n+class CachingSignatureChecker : public SignatureChecker\n+{\n+private:\n+    bool store;\n+\n+public:\n+    CachingSignatureChecker(const CTransaction& txToIn, unsigned int nInIn, bool storeIn=true) : SignatureChecker(txToIn, nInIn), store(storeIn) {}\n+\n+    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n+};\n+\n+#endif"
      },
      {
        "sha": "da77e7d1f1be881540937df77f5170540b5015a8",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -123,7 +123,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutabl\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, STANDARD_SCRIPT_VERIFY_FLAGS);\n+    return VerifyScript(txin.scriptSig, fromPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, SignatureChecker(txTo, nIn));\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -174,7 +174,7 @@ static CScript CombineMultisig(CScript scriptPubKey, const CMutableTransaction&\n             if (sigs.count(pubkey))\n                 continue; // Already got a sig for this pubkey\n \n-            if (CheckSig(sig, pubkey, scriptPubKey, txTo, nIn, 0))\n+            if (SignatureChecker(txTo, nIn).CheckSig(sig, pubkey, scriptPubKey))\n             {\n                 sigs[pubkey] = sig;\n                 break;\n@@ -252,9 +252,9 @@ CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsign\n     Solver(scriptPubKey, txType, vSolutions);\n \n     vector<valtype> stack1;\n-    EvalScript(stack1, scriptSig1, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC);\n+    EvalScript(stack1, scriptSig1, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n     vector<valtype> stack2;\n-    EvalScript(stack2, scriptSig2, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC);\n+    EvalScript(stack2, scriptSig2, SCRIPT_VERIFY_STRICTENC, BaseSignatureChecker());\n \n     return CombineSignatures(scriptPubKey, txTo, nIn, txType, vSolutions, stack1, stack2);\n }"
      },
      {
        "sha": "5a2ec1cb31947aa14de97d2251a50994102c1ef8",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -82,19 +82,19 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.clear();\n     keys += key[0],key[1]; // magic operator+= from boost.assign\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, flags));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.clear();\n         keys += key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)), strprintf(\"a&b 1: %d\", i));\n \n         keys.clear();\n         keys += key[1],key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, flags, SignatureChecker(txTo[0], 0)), strprintf(\"a&b 2: %d\", i));\n     }\n \n     // Test a OR b:\n@@ -104,16 +104,16 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         keys += key[i];\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, flags), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)), strprintf(\"a|b: %d\", i));\n         else\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, flags), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)), strprintf(\"a|b: %d\", i));\n     }\n     s.clear();\n     s << OP_0 << OP_0;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)));\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, flags, SignatureChecker(txTo[1], 0)));\n \n \n     for (int i = 0; i < 4; i++)\n@@ -123,9 +123,9 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             keys += key[i],key[j];\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, flags), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0)), strprintf(\"escrow 1: %d %d\", i, j));\n             else\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, flags), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, flags, SignatureChecker(txTo[2], 0)), strprintf(\"escrow 2: %d %d\", i, j));\n         }\n }\n "
      },
      {
        "sha": "6c32a263a97139558f2ef43565fd1cc2e19d76d9",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -42,7 +42,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict)\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, txTo, 0, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE);\n+    return VerifyScript(scriptSig, scriptPubKey, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, SignatureChecker(txTo, 0));\n }\n \n \n@@ -113,7 +113,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         {\n             CScript sigSave = txTo[i].vin[0].scriptSig;\n             txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n-            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC)();\n+            bool sigOK = CScriptCheck(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, false)();\n             if (i == j)\n                 BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             else"
      },
      {
        "sha": "6ed3e03f53137f3f38e9e1ddb13b068085e1f2f5",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -89,7 +89,7 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n \n void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message)\n {\n-    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey)), 0, flags) == expect, message);\n+    BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, SignatureChecker(BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey)), 0)) == expect, message);\n }\n \n namespace\n@@ -464,18 +464,18 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n     static const unsigned char pushdata4[] = { OP_PUSHDATA4, 1, 0, 0, 0, 0x5a };\n \n     vector<vector<unsigned char> > directStack;\n-    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), CTransaction(), 0, true));\n+    BOOST_CHECK(EvalScript(directStack, CScript(&direct[0], &direct[sizeof(direct)]), true, BaseSignatureChecker()));\n \n     vector<vector<unsigned char> > pushdata1Stack;\n-    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), CTransaction(), 0, true));\n+    BOOST_CHECK(EvalScript(pushdata1Stack, CScript(&pushdata1[0], &pushdata1[sizeof(pushdata1)]), true, BaseSignatureChecker()));\n     BOOST_CHECK(pushdata1Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata2Stack;\n-    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), CTransaction(), 0, true));\n+    BOOST_CHECK(EvalScript(pushdata2Stack, CScript(&pushdata2[0], &pushdata2[sizeof(pushdata2)]), true, BaseSignatureChecker()));\n     BOOST_CHECK(pushdata2Stack == directStack);\n \n     vector<vector<unsigned char> > pushdata4Stack;\n-    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), CTransaction(), 0, true));\n+    BOOST_CHECK(EvalScript(pushdata4Stack, CScript(&pushdata4[0], &pushdata4[sizeof(pushdata4)]), true, BaseSignatureChecker()));\n     BOOST_CHECK(pushdata4Stack == directStack);\n }\n \n@@ -525,15 +525,15 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     CMutableTransaction txTo12 = BuildSpendingTransaction(CScript(), txFrom12);\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, flags, SignatureChecker(txTo12, 0)));\n }\n \n BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n@@ -553,46 +553,46 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, flags));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, flags, SignatureChecker(txTo23, 0)));\n }    \n \n BOOST_AUTO_TEST_CASE(script_combineSigs)"
      },
      {
        "sha": "823afa168050770798b29c768cef2978c2f884e1",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f1aee066a56aa5ac980758d5d3a69dd37a46e73/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "patch": "@@ -27,7 +27,6 @@ using namespace boost::algorithm;\n // In script_tests.cpp\n extern Array read_json(const std::string& jsondata);\n \n-// Note how NOCACHE is not included as it is a runtime-only flag.\n static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"NONE\"), (unsigned int)SCRIPT_VERIFY_NONE)\n     (string(\"P2SH\"), (unsigned int)SCRIPT_VERIFY_P2SH)\n@@ -139,7 +138,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                                 tx, i, verify_flags),\n+                                                 verify_flags, SignatureChecker(tx, i)),\n                                     strTest);\n             }\n         }\n@@ -212,7 +211,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n \n                 unsigned int verify_flags = ParseScriptFlags(test[2].get_str());\n                 fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout],\n-                                      tx, i, verify_flags);\n+                                      verify_flags, SignatureChecker(tx, i));\n             }\n \n             BOOST_CHECK_MESSAGE(!fValid, strTest);"
      }
    ]
  },
  {
    "sha": "5505a1b13f75af9f0f6421b42d97c06e079db345",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTA1YTFiMTNmNzVhZjlmMGY2NDIxYjQyZDk3YzA2ZTA3OWRiMzQ1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-06T02:42:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-06T02:42:09Z"
      },
      "message": "Merge pull request #5036\n\neb6b3b2 Update English translation (Wladimir J. van der Laan)\nb9b2e3f Don't translate state.Abort() messages (Wladimir J. van der Laan)",
      "tree": {
        "sha": "056dea4e6ff864c27465110157540d466e934176",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/056dea4e6ff864c27465110157540d466e934176"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5505a1b13f75af9f0f6421b42d97c06e079db345",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "gpgverify_unavailable",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUMgGBAAoJEHSBCwEjRsmmF9IIAMtq3kxIKN+IQUtHE448VE/F\nqIgxLxUxC/UoYhHHnBzAdVtufT5nu7IJlxGEZ+h7HFvCQ05YUMfT/R7ESJiRROj+\npdNlpY9p5DdEi+EZjljmvTxPBN0p6LUq0yoXHOdAAPzScksqH9/eWJEu2NWlwfpF\nQLpqecX4aJDx9zNxDU4i1ETZtStSP+1ld1xtNRdRp/RV6i8O7iFdz8oS/1e+pHV9\nzNvJM2jvpQTDan8dhHCltuI5j87tmSGVuR8D0Dy0twQ382Cex1tplY9jvysHjB9c\nSCfnx+/qd7Nv4JUrKqYGXpcKz97UOUAA6pvCYyhX6ly/GUKw+ZJ1R75coL7FGTY=\n=aR5G\n-----END PGP SIGNATURE-----",
        "payload": "tree 056dea4e6ff864c27465110157540d466e934176\nparent 5f1aee066a56aa5ac980758d5d3a69dd37a46e73\nparent eb6b3b245cab5bb172ba27a0072edf9c2de32c29\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412563322 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412563329 +0200\n\nMerge pull request #5036\n\neb6b3b2 Update English translation (Wladimir J. van der Laan)\nb9b2e3f Don't translate state.Abort() messages (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5505a1b13f75af9f0f6421b42d97c06e079db345",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5505a1b13f75af9f0f6421b42d97c06e079db345",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5505a1b13f75af9f0f6421b42d97c06e079db345/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f1aee066a56aa5ac980758d5d3a69dd37a46e73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f1aee066a56aa5ac980758d5d3a69dd37a46e73"
      },
      {
        "sha": "eb6b3b245cab5bb172ba27a0072edf9c2de32c29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb6b3b245cab5bb172ba27a0072edf9c2de32c29",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb6b3b245cab5bb172ba27a0072edf9c2de32c29"
      }
    ],
    "stats": {
      "total": 402,
      "additions": 182,
      "deletions": 220
    },
    "files": [
      {
        "sha": "44ac232aadec4e06a47d34d3358fa10eebbdd7b2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 18,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5505a1b13f75af9f0f6421b42d97c06e079db345/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5505a1b13f75af9f0f6421b42d97c06e079db345/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5505a1b13f75af9f0f6421b42d97c06e079db345",
        "patch": "@@ -1687,7 +1687,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n             if (!FindUndoPos(state, pindex->nFile, pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n                 return error(\"ConnectBlock() : FindUndoPos failed\");\n             if (!blockundo.WriteToDisk(pos, pindex->pprev->GetBlockHash()))\n-                return state.Abort(_(\"Failed to write undo data\"));\n+                return state.Abort(\"Failed to write undo data\");\n \n             // update nUndoPos in block index\n             pindex->nUndoPos = pos.nPos;\n@@ -1698,12 +1698,12 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n \n         CDiskBlockIndex blockindex(pindex);\n         if (!pblocktree->WriteBlockIndex(blockindex))\n-            return state.Abort(_(\"Failed to write block index\"));\n+            return state.Abort(\"Failed to write block index\");\n     }\n \n     if (fTxIndex)\n         if (!pblocktree->WriteTxIndex(vPos))\n-            return state.Abort(_(\"Failed to write transaction index\"));\n+            return state.Abort(\"Failed to write transaction index\");\n \n     // add this block to the view's block chain\n     bool ret;\n@@ -1738,7 +1738,7 @@ bool static WriteChainState(CValidationState &state) {\n         FlushBlockFile();\n         pblocktree->Sync();\n         if (!pcoinsTip->Flush())\n-            return state.Abort(_(\"Failed to write to coin database\"));\n+            return state.Abort(\"Failed to write to coin database\");\n         nLastWrite = GetTimeMicros();\n     }\n     return true;\n@@ -1786,7 +1786,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Read block from disk.\n     CBlock block;\n     if (!ReadBlockFromDisk(block, pindexDelete))\n-        return state.Abort(_(\"Failed to read block\"));\n+        return state.Abort(\"Failed to read block\");\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n@@ -1835,7 +1835,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     CBlock block;\n     if (!pblock) {\n         if (!ReadBlockFromDisk(block, pindexNew))\n-            return state.Abort(_(\"Failed to read block\"));\n+            return state.Abort(\"Failed to read block\");\n         pblock = &block;\n     }\n     // Apply the block atomically to the chain state.\n@@ -1989,7 +1989,7 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n         CheckForkWarningConditions();\n \n     if (!pblocktree->Flush())\n-        return state.Abort(_(\"Failed to sync block index\"));\n+        return state.Abort(\"Failed to sync block index\");\n \n     return true;\n }\n@@ -2096,7 +2096,7 @@ bool ReceivedBlockTransactions(const CBlock &block, CValidationState& state, CBl\n         setBlockIndexValid.insert(pindexNew);\n \n     if (!pblocktree->WriteBlockIndex(CDiskBlockIndex(pindexNew)))\n-        return state.Abort(_(\"Failed to write block index\"));\n+        return state.Abort(\"Failed to write block index\");\n \n     return true;\n }\n@@ -2148,7 +2148,7 @@ bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAdd\n     }\n \n     if (!pblocktree->WriteBlockFileInfo(nLastBlockFile, infoLastBlockFile))\n-        return state.Abort(_(\"Failed to write file info\"));\n+        return state.Abort(\"Failed to write file info\");\n     if (fUpdatedLast)\n         pblocktree->WriteLastBlockFile(nLastBlockFile);\n \n@@ -2166,15 +2166,15 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n         pos.nPos = infoLastBlockFile.nUndoSize;\n         nNewSize = (infoLastBlockFile.nUndoSize += nAddSize);\n         if (!pblocktree->WriteBlockFileInfo(nLastBlockFile, infoLastBlockFile))\n-            return state.Abort(_(\"Failed to write block info\"));\n+            return state.Abort(\"Failed to write block info\");\n     } else {\n         CBlockFileInfo info;\n         if (!pblocktree->ReadBlockFileInfo(nFile, info))\n-            return state.Abort(_(\"Failed to read block info\"));\n+            return state.Abort(\"Failed to read block info\");\n         pos.nPos = info.nUndoSize;\n         nNewSize = (info.nUndoSize += nAddSize);\n         if (!pblocktree->WriteBlockFileInfo(nFile, info))\n-            return state.Abort(_(\"Failed to write block info\"));\n+            return state.Abort(\"Failed to write block info\");\n     }\n \n     unsigned int nOldChunks = (pos.nPos + UNDOFILE_CHUNK_SIZE - 1) / UNDOFILE_CHUNK_SIZE;\n@@ -2391,11 +2391,11 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n             return error(\"AcceptBlock() : FindBlockPos failed\");\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos))\n-                return state.Abort(_(\"Failed to write block\"));\n+                return state.Abort(\"Failed to write block\");\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n             return error(\"AcceptBlock() : ReceivedBlockTransactions failed\");\n     } catch(std::runtime_error &e) {\n-        return state.Abort(_(\"System error: \") + e.what());\n+        return state.Abort(std::string(\"System error: \") + e.what());\n     }\n \n     return true;\n@@ -2718,10 +2718,12 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n \n \n \n-bool AbortNode(const std::string &strMessage) {\n+bool AbortNode(const std::string &strMessage, const std::string &userMessage) {\n     strMiscWarning = strMessage;\n     LogPrintf(\"*** %s\\n\", strMessage);\n-    uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_ERROR);\n+    uiInterface.ThreadSafeMessageBox(\n+        userMessage.empty() ? _(\"Error: A fatal internal error occured, see debug.log for details\") : userMessage,\n+        \"\", CClientUIInterface::MSG_ERROR);\n     StartShutdown();\n     return false;\n }\n@@ -2732,7 +2734,7 @@ bool CheckDiskSpace(uint64_t nAdditionalBytes)\n \n     // Check for nMinDiskSpace bytes (currently 50MB)\n     if (nFreeBytesAvailable < nMinDiskSpace + nAdditionalBytes)\n-        return AbortNode(_(\"Error: Disk space is low!\"));\n+        return AbortNode(\"Disk space is low!\", _(\"Error: Disk space is low!\"));\n \n     return true;\n }\n@@ -3142,7 +3144,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n             }\n         }\n     } catch(std::runtime_error &e) {\n-        AbortNode(_(\"Error: system error: \") + e.what());\n+        AbortNode(std::string(\"System error: \") + e.what());\n     }\n     if (nLoaded > 0)\n         LogPrintf(\"Loaded %i blocks from external file in %dms\\n\", nLoaded, GetTimeMillis() - nStart);"
      },
      {
        "sha": "cad7eebfb7524d6b0025166f71970839bcbfc4c8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5505a1b13f75af9f0f6421b42d97c06e079db345/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5505a1b13f75af9f0f6421b42d97c06e079db345/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5505a1b13f75af9f0f6421b42d97c06e079db345",
        "patch": "@@ -178,7 +178,7 @@ CAmount GetBlockValue(int nHeight, const CAmount& nFees);\n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n /** Abort with a message */\n-bool AbortNode(const std::string &msg);\n+bool AbortNode(const std::string &msg, const std::string &userMessage=\"\");\n /** Get statistics from node state */\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n /** Increase a node's misbehavior score. */"
      },
      {
        "sha": "25c811183fa958eaf50b718da82772a76be51427",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5505a1b13f75af9f0f6421b42d97c06e079db345/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5505a1b13f75af9f0f6421b42d97c06e079db345/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=5505a1b13f75af9f0f6421b42d97c06e079db345",
        "patch": "@@ -195,21 +195,11 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading wallet.dat: Wallet corrupted\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error loading wallet.dat: Wallet requires newer version of Bitcoin Core\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error opening block database\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: A fatal internal error occured, see debug.log for details\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Disk space is low!\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Unsupported argument -tor found, use -onion.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: Wallet locked, unable to create transaction!\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Error: system error: \"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to listen on any port. Use -listen=0 if you want this.\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to read block info\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to read block\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to sync block index\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to write block index\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to write block info\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to write block\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to write file info\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to write to coin database\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to write transaction index\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Failed to write undo data\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Fee (in BTC/kB) to add to transactions you send (default: %s)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Force safe mode (default: 0)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Generate coins (default: 0)\"),\n@@ -231,6 +221,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount for -paytxfee=<amount>: '%s'\")\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid amount\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Invalid netmask specified in -whitelist: '%s'\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keep at most <n> unconnectable blocks in memory (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Keep at most <n> unconnectable transactions in memory (default: %u)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Limit size of signature cache to <n> entries (default: 50000)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Listen for connections on <port> (default: 8333 or testnet: 18333)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Loading addresses...\"),\n@@ -245,7 +236,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Need to specify a port with -whitebind: '%s'\"\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Node relay options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Not enough file descriptors available.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Only accept block chain matching built-in checkpoints (default: 1)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Only connect to nodes in network <net> (IPv4, IPv6 or Tor)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Password for JSON-RPC connections\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Prepend debug output with timestamp (default: 1)\"),\n@@ -282,7 +273,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify wallet file (within data directory)\")\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Specify your own public address\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Spend unconfirmed change when sending transactions (default: 1)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Stop running after importing blocks from disk (default: 0)\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"System error: \"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"This help message\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"This is experimental software.\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"This is intended for regression testing tools and app development.\"),"
      },
      {
        "sha": "5c3abef2e7f892dd17bbb8452ee3e13ce850a306",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 158,
        "deletions": 188,
        "changes": 346,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5505a1b13f75af9f0f6421b42d97c06e079db345/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5505a1b13f75af9f0f6421b42d97c06e079db345/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=5505a1b13f75af9f0f6421b42d97c06e079db345",
        "patch": "@@ -19,7 +19,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+11\"/>\n+        <location line=\"+14\"/>\n         <source>Copy the currently selected address to the system clipboard</source>\n         <translation>Copy the currently selected address to the system clipboard</translation>\n     </message>\n@@ -29,7 +29,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+58\"/>\n+        <location line=\"+67\"/>\n         <source>C&amp;lose</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -39,12 +39,12 @@\n         <translation>&amp;Copy Address</translation>\n     </message>\n     <message>\n-        <location filename=\"../forms/addressbookpage.ui\" line=\"-47\"/>\n+        <location filename=\"../forms/addressbookpage.ui\" line=\"-53\"/>\n         <source>Delete the currently selected address from the list</source>\n         <translation>Delete the currently selected address from the list</translation>\n     </message>\n     <message>\n-        <location line=\"+27\"/>\n+        <location line=\"+30\"/>\n         <source>Export the data in the current tab to a file</source>\n         <translation>Export the data in the current tab to a file</translation>\n     </message>\n@@ -54,7 +54,7 @@\n         <translation>&amp;Export</translation>\n     </message>\n     <message>\n-        <location line=\"-27\"/>\n+        <location line=\"-30\"/>\n         <source>&amp;Delete</source>\n         <translation>&amp;Delete</translation>\n     </message>\n@@ -286,17 +286,17 @@\n <context>\n     <name>BitcoinGUI</name>\n     <message>\n-        <location filename=\"../bitcoingui.cpp\" line=\"+300\"/>\n+        <location filename=\"../bitcoingui.cpp\" line=\"+327\"/>\n         <source>Sign &amp;message...</source>\n         <translation>Sign &amp;message...</translation>\n     </message>\n     <message>\n-        <location line=\"+339\"/>\n+        <location line=\"+348\"/>\n         <source>Synchronizing with network...</source>\n         <translation>Synchronizing with network...</translation>\n     </message>\n     <message>\n-        <location line=\"-411\"/>\n+        <location line=\"-420\"/>\n         <source>&amp;Overview</source>\n         <translation>&amp;Overview</translation>\n     </message>\n@@ -377,13 +377,13 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+168\"/>\n+        <location line=\"+175\"/>\n         <location line=\"+5\"/>\n         <source>Bitcoin Core client</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+156\"/>\n+        <location line=\"+158\"/>\n         <source>Importing blocks from disk...</source>\n         <translation>Importing blocks from disk...</translation>\n     </message>\n@@ -393,7 +393,7 @@\n         <translation>Reindexing blocks on disk...</translation>\n     </message>\n     <message>\n-        <location line=\"-409\"/>\n+        <location line=\"-418\"/>\n         <source>Send coins to a Bitcoin address</source>\n         <translation>Send coins to a Bitcoin address</translation>\n     </message>\n@@ -428,12 +428,12 @@\n         <translation>&amp;Verify message...</translation>\n     </message>\n     <message>\n-        <location line=\"+437\"/>\n+        <location line=\"+446\"/>\n         <source>Bitcoin</source>\n         <translation>Bitcoin</translation>\n     </message>\n     <message>\n-        <location line=\"-655\"/>\n+        <location line=\"-664\"/>\n         <source>Wallet</source>\n         <translation>Wallet</translation>\n     </message>\n@@ -500,12 +500,12 @@\n     </message>\n     <message>\n         <location line=\"-289\"/>\n-        <location line=\"+386\"/>\n+        <location line=\"+393\"/>\n         <source>[testnet]</source>\n         <translation>[testnet]</translation>\n     </message>\n     <message>\n-        <location line=\"-411\"/>\n+        <location line=\"-418\"/>\n         <source>Bitcoin Core</source>\n         <translation type=\"unfinished\">Bitcoin Core</translation>\n     </message>\n@@ -546,15 +546,15 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message numerus=\"yes\">\n-        <location line=\"+310\"/>\n+        <location line=\"+316\"/>\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation>\n             <numerusform>%n active connection to Bitcoin network</numerusform>\n             <numerusform>%n active connections to Bitcoin network</numerusform>\n         </translation>\n     </message>\n     <message>\n-        <location line=\"+22\"/>\n+        <location line=\"+25\"/>\n         <source>No block source available...</source>\n         <translation>No block source available...</translation>\n     </message>\n@@ -665,7 +665,7 @@ Address: %4\n </translation>\n     </message>\n     <message>\n-        <location line=\"+69\"/>\n+        <location line=\"+68\"/>\n         <source>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;unlocked&lt;/b&gt;</source>\n         <translation>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;unlocked&lt;/b&gt;</translation>\n     </message>\n@@ -678,7 +678,7 @@ Address: %4\n <context>\n     <name>ClientModel</name>\n     <message>\n-        <location filename=\"../clientmodel.cpp\" line=\"+138\"/>\n+        <location filename=\"../clientmodel.cpp\" line=\"+139\"/>\n         <source>Network Alert</source>\n         <translation>Network Alert</translation>\n     </message>\n@@ -736,7 +736,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n+        <location line=\"+16\"/>\n         <source>Tree mode</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1059,7 +1059,7 @@ Address: %4\n <context>\n     <name>HelpMessageDialog</name>\n     <message>\n-        <location filename=\"../utilitydialog.cpp\" line=\"+29\"/>\n+        <location filename=\"../utilitydialog.cpp\" line=\"+31\"/>\n         <source>Bitcoin Core</source>\n         <translation type=\"unfinished\">Bitcoin Core</translation>\n     </message>\n@@ -1201,7 +1201,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+11\"/>\n+        <location line=\"+10\"/>\n         <source>Select payment request file</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1430,12 +1430,12 @@ Address: %4\n         <translation>&amp;OK</translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+13\"/>\n         <source>&amp;Cancel</source>\n         <translation>&amp;Cancel</translation>\n     </message>\n     <message>\n-        <location filename=\"../optionsdialog.cpp\" line=\"+68\"/>\n+        <location filename=\"../optionsdialog.cpp\" line=\"+71\"/>\n         <source>default</source>\n         <translation>default</translation>\n     </message>\n@@ -1479,23 +1479,18 @@ Address: %4\n         <translation>Form</translation>\n     </message>\n     <message>\n-        <location line=\"+52\"/>\n-        <location line=\"+394\"/>\n+        <location line=\"+53\"/>\n+        <location line=\"+372\"/>\n         <source>The displayed information may be out of date. Your wallet automatically synchronizes with the Bitcoin network after a connection is established, but this process has not completed yet.</source>\n         <translation>The displayed information may be out of date. Your wallet automatically synchronizes with the Bitcoin network after a connection is established, but this process has not completed yet.</translation>\n     </message>\n     <message>\n-        <location line=\"-401\"/>\n-        <source>Wallet</source>\n-        <translation>Wallet</translation>\n-    </message>\n-    <message>\n-        <location line=\"+33\"/>\n+        <location line=\"-133\"/>\n         <source>Watch-only:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+43\"/>\n+        <location line=\"+10\"/>\n         <source>Available:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1505,62 +1500,72 @@ Address: %4\n         <translation>Your current spendable balance</translation>\n     </message>\n     <message>\n-        <location line=\"+16\"/>\n+        <location line=\"+41\"/>\n         <source>Pending:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+16\"/>\n+        <location line=\"-236\"/>\n         <source>Total of transactions that have yet to be confirmed, and do not yet count toward the spendable balance</source>\n         <translation>Total of transactions that have yet to be confirmed, and do not yet count toward the spendable balance</translation>\n     </message>\n     <message>\n-        <location line=\"+16\"/>\n+        <location line=\"+112\"/>\n         <source>Immature:</source>\n         <translation>Immature:</translation>\n     </message>\n     <message>\n-        <location line=\"+16\"/>\n+        <location line=\"-29\"/>\n         <source>Mined balance that has not yet matured</source>\n         <translation>Mined balance that has not yet matured</translation>\n     </message>\n     <message>\n-        <location line=\"+23\"/>\n+        <location line=\"-163\"/>\n+        <source>Balances</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+147\"/>\n         <source>Total:</source>\n         <translation>Total:</translation>\n     </message>\n     <message>\n-        <location line=\"+16\"/>\n+        <location line=\"+61\"/>\n         <source>Your current total balance</source>\n         <translation>Your current total balance</translation>\n     </message>\n     <message>\n-        <location line=\"+38\"/>\n+        <location line=\"+92\"/>\n         <source>Your current balance in watch-only addresses</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+25\"/>\n+        <location line=\"+23\"/>\n+        <source>Spendable:</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+49\"/>\n+        <source>Recent transactions</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"-317\"/>\n         <source>Unconfirmed transactions to watch-only addresses</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+25\"/>\n+        <location line=\"+50\"/>\n         <source>Mined balance in watch-only addresses that has not yet matured</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+44\"/>\n+        <location line=\"+128\"/>\n         <source>Current total balance in watch-only addresses</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+67\"/>\n-        <source>&lt;b&gt;Recent transactions&lt;/b&gt;</source>\n-        <translation>&lt;b&gt;Recent transactions&lt;/b&gt;</translation>\n-    </message>\n-    <message>\n-        <location filename=\"../overviewpage.cpp\" line=\"+123\"/>\n+        <location filename=\"../overviewpage.cpp\" line=\"+131\"/>\n         <location line=\"+1\"/>\n         <source>out of sync</source>\n         <translation>out of sync</translation>\n@@ -1569,7 +1574,7 @@ Address: %4\n <context>\n     <name>PaymentServer</name>\n     <message>\n-        <location filename=\"../paymentserver.cpp\" line=\"+405\"/>\n+        <location filename=\"../paymentserver.cpp\" line=\"+410\"/>\n         <location line=\"+14\"/>\n         <location line=\"+7\"/>\n         <source>URI handling</source>\n@@ -1681,7 +1686,7 @@ Address: %4\n <context>\n     <name>PeerTableModel</name>\n     <message>\n-        <location filename=\"../peertablemodel.cpp\" line=\"+112\"/>\n+        <location filename=\"../peertablemodel.cpp\" line=\"+118\"/>\n         <source>User Agent</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1699,17 +1704,17 @@ Address: %4\n <context>\n     <name>QObject</name>\n     <message>\n-        <location filename=\"../bitcoinunits.cpp\" line=\"+200\"/>\n+        <location filename=\"../bitcoinunits.cpp\" line=\"+196\"/>\n         <source>Amount</source>\n         <translation type=\"unfinished\">Amount</translation>\n     </message>\n     <message>\n-        <location filename=\"../guiutil.cpp\" line=\"+97\"/>\n+        <location filename=\"../guiutil.cpp\" line=\"+106\"/>\n         <source>Enter a Bitcoin address (e.g. %1)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+673\"/>\n+        <location line=\"+698\"/>\n         <source>%1 d</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1795,7 +1800,7 @@ Address: %4\n         <location line=\"+23\"/>\n         <location line=\"+36\"/>\n         <location line=\"+23\"/>\n-        <location line=\"+462\"/>\n+        <location line=\"+465\"/>\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n         <location line=\"+23\"/>\n@@ -1813,7 +1818,7 @@ Address: %4\n         <translation>N/A</translation>\n     </message>\n     <message>\n-        <location line=\"-987\"/>\n+        <location line=\"-990\"/>\n         <source>Client version</source>\n         <translation>Client version</translation>\n     </message>\n@@ -1873,7 +1878,7 @@ Address: %4\n         <translation>Current number of blocks</translation>\n     </message>\n     <message>\n-        <location line=\"+300\"/>\n+        <location line=\"+303\"/>\n         <source>Received</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -1889,7 +1894,7 @@ Address: %4\n     </message>\n     <message>\n         <location line=\"+39\"/>\n-        <location filename=\"../rpcconsole.cpp\" line=\"+234\"/>\n+        <location filename=\"../rpcconsole.cpp\" line=\"+236\"/>\n         <location line=\"+327\"/>\n         <source>Select a peer to view detailed information.</source>\n         <translation type=\"unfinished\"></translation>\n@@ -1965,7 +1970,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-761\"/>\n+        <location line=\"-764\"/>\n         <source>Last block time</source>\n         <translation>Last block time</translation>\n     </message>\n@@ -1990,7 +1995,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n+        <location line=\"+16\"/>\n         <source>Totals</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2005,7 +2010,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location filename=\"../forms/rpcconsole.ui\" line=\"-354\"/>\n+        <location filename=\"../forms/rpcconsole.ui\" line=\"-357\"/>\n         <source>Build date</source>\n         <translation>Build date</translation>\n     </message>\n@@ -2163,12 +2168,12 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+78\"/>\n+        <location line=\"+75\"/>\n         <source>Requested payments history</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-98\"/>\n+        <location line=\"-95\"/>\n         <source>&amp;Request payment</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2183,7 +2188,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+14\"/>\n+        <location line=\"+17\"/>\n         <source>Remove the selected entries from the list</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2221,12 +2226,12 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+10\"/>\n         <source>Copy &amp;Address</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+10\"/>\n         <source>&amp;Save Image...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2279,7 +2284,7 @@ Address: %4\n <context>\n     <name>RecentRequestsTableModel</name>\n     <message>\n-        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+24\"/>\n+        <location filename=\"../recentrequeststablemodel.cpp\" line=\"+26\"/>\n         <source>Date</source>\n         <translation type=\"unfinished\">Date</translation>\n     </message>\n@@ -2333,7 +2338,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+10\"/>\n         <source>automatically selected</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2398,22 +2403,22 @@ Address: %4\n         <translation>Add &amp;Recipient</translation>\n     </message>\n     <message>\n-        <location line=\"-23\"/>\n+        <location line=\"-20\"/>\n         <source>Clear all fields of the form.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-271\"/>\n+        <location line=\"-274\"/>\n         <source>Dust:</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+274\"/>\n+        <location line=\"+277\"/>\n         <source>Clear &amp;All</source>\n         <translation>Clear &amp;All</translation>\n     </message>\n     <message>\n-        <location line=\"+58\"/>\n+        <location line=\"+55\"/>\n         <source>Balance:</source>\n         <translation>Balance:</translation>\n     </message>\n@@ -2653,7 +2658,7 @@ Address: %4\n <context>\n     <name>ShutdownWindow</name>\n     <message>\n-        <location filename=\"../utilitydialog.cpp\" line=\"+51\"/>\n+        <location filename=\"../utilitydialog.cpp\" line=\"+47\"/>\n         <source>Bitcoin Core is shutting down...</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -2671,7 +2676,7 @@ Address: %4\n         <translation>Signatures - Sign / Verify a Message</translation>\n     </message>\n     <message>\n-        <location line=\"+10\"/>\n+        <location line=\"+13\"/>\n         <source>&amp;Sign Message</source>\n         <translation>&amp;Sign Message</translation>\n     </message>\n@@ -2848,7 +2853,7 @@ Address: %4\n <context>\n     <name>SplashScreen</name>\n     <message>\n-        <location filename=\"../splashscreen.cpp\" line=\"+32\"/>\n+        <location filename=\"../splashscreen.cpp\" line=\"+34\"/>\n         <source>Bitcoin Core</source>\n         <translation type=\"unfinished\">Bitcoin Core</translation>\n     </message>\n@@ -2874,7 +2879,7 @@ Address: %4\n <context>\n     <name>TransactionDesc</name>\n     <message>\n-        <location filename=\"../transactiondesc.cpp\" line=\"+33\"/>\n+        <location filename=\"../transactiondesc.cpp\" line=\"+34\"/>\n         <source>Open until %1</source>\n         <translation>Open until %1</translation>\n     </message>\n@@ -3098,7 +3103,7 @@ Address: %4\n <context>\n     <name>TransactionTableModel</name>\n     <message>\n-        <location filename=\"../transactiontablemodel.cpp\" line=\"+237\"/>\n+        <location filename=\"../transactiontablemodel.cpp\" line=\"+235\"/>\n         <source>Date</source>\n         <translation>Date</translation>\n     </message>\n@@ -3166,7 +3171,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+51\"/>\n+        <location line=\"+48\"/>\n         <source>Received with</source>\n         <translation>Received with</translation>\n     </message>\n@@ -3191,12 +3196,17 @@ Address: %4\n         <translation>Mined</translation>\n     </message>\n     <message>\n-        <location line=\"+41\"/>\n+        <location line=\"+28\"/>\n+        <source>watch-only</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+15\"/>\n         <source>(n/a)</source>\n         <translation>(n/a)</translation>\n     </message>\n     <message>\n-        <location line=\"+193\"/>\n+        <location line=\"+210\"/>\n         <source>Transaction status. Hover over this field to show number of confirmations.</source>\n         <translation>Transaction status. Hover over this field to show number of confirmations.</translation>\n     </message>\n@@ -3210,6 +3220,11 @@ Address: %4\n         <source>Type of transaction.</source>\n         <translation>Type of transaction.</translation>\n     </message>\n+    <message>\n+        <location line=\"+2\"/>\n+        <source>Whether or not a watch-only address is involved in this transaction.</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+2\"/>\n         <source>Destination address of transaction.</source>\n@@ -3224,7 +3239,7 @@ Address: %4\n <context>\n     <name>TransactionView</name>\n     <message>\n-        <location filename=\"../transactionview.cpp\" line=\"+60\"/>\n+        <location filename=\"../transactionview.cpp\" line=\"+67\"/>\n         <location line=\"+16\"/>\n         <source>All</source>\n         <translation>All</translation>\n@@ -3325,12 +3340,17 @@ Address: %4\n         <translation>Show transaction details</translation>\n     </message>\n     <message>\n-        <location line=\"+163\"/>\n+        <location line=\"+179\"/>\n         <source>Export Transaction History</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+19\"/>\n+        <location line=\"+12\"/>\n+        <source>Watch-only</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+9\"/>\n         <source>Exporting Failed</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3350,7 +3370,7 @@ Address: %4\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-22\"/>\n+        <location line=\"-24\"/>\n         <source>Comma separated file (*.csv)</source>\n         <translation>Comma separated file (*.csv)</translation>\n     </message>\n@@ -3360,7 +3380,7 @@ Address: %4\n         <translation>Confirmed</translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n+        <location line=\"+3\"/>\n         <source>Date</source>\n         <translation>Date</translation>\n     </message>\n@@ -3398,7 +3418,7 @@ Address: %4\n <context>\n     <name>UnitDisplayStatusBarControl</name>\n     <message>\n-        <location filename=\"../bitcoingui.cpp\" line=\"+101\"/>\n+        <location filename=\"../bitcoingui.cpp\" line=\"+103\"/>\n         <source>Unit to show amounts in. Click to select another unit.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3465,7 +3485,7 @@ Address: %4\n <context>\n     <name>bitcoin-core</name>\n     <message>\n-        <location filename=\"../bitcoinstrings.cpp\" line=\"+249\"/>\n+        <location filename=\"../bitcoinstrings.cpp\" line=\"+240\"/>\n         <source>Options:</source>\n         <translation>Options:</translation>\n     </message>\n@@ -3495,22 +3515,22 @@ Address: %4\n         <translation>Maintain at most &lt;n&gt; connections to peers (default: 125)</translation>\n     </message>\n     <message>\n-        <location line=\"-62\"/>\n+        <location line=\"-53\"/>\n         <source>Connect to a node to retrieve peer addresses, and disconnect</source>\n         <translation>Connect to a node to retrieve peer addresses, and disconnect</translation>\n     </message>\n     <message>\n-        <location line=\"+103\"/>\n+        <location line=\"+94\"/>\n         <source>Specify your own public address</source>\n         <translation>Specify your own public address</translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n+        <location line=\"+6\"/>\n         <source>Threshold for disconnecting misbehaving peers (default: 100)</source>\n         <translation>Threshold for disconnecting misbehaving peers (default: 100)</translation>\n     </message>\n     <message>\n-        <location line=\"-181\"/>\n+        <location line=\"-171\"/>\n         <source>Number of seconds to keep misbehaving peers from reconnecting (default: 86400)</source>\n         <translation>Number of seconds to keep misbehaving peers from reconnecting (default: 86400)</translation>\n     </message>\n@@ -3525,17 +3545,17 @@ Address: %4\n         <translation>Accept command line and JSON-RPC commands</translation>\n     </message>\n     <message>\n-        <location line=\"+99\"/>\n+        <location line=\"+90\"/>\n         <source>Run in the background as a daemon and accept commands</source>\n         <translation>Run in the background as a daemon and accept commands</translation>\n     </message>\n     <message>\n-        <location line=\"+36\"/>\n+        <location line=\"+35\"/>\n         <source>Use the test network</source>\n         <translation>Use the test network</translation>\n     </message>\n     <message>\n-        <location line=\"-134\"/>\n+        <location line=\"-124\"/>\n         <source>Accept connections from outside (default: 1 if no -proxy or -connect)</source>\n         <translation>Accept connections from outside (default: 1 if no -proxy or -connect)</translation>\n     </message>\n@@ -3756,6 +3776,11 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n     </message>\n     <message>\n         <location line=\"+2\"/>\n+        <source>Error: A fatal internal error occured, see debug.log for details</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+1\"/>\n         <source>Error: Disk space is low!</source>\n         <translation>Error: Disk space is low!</translation>\n     </message>\n@@ -3764,66 +3789,11 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <source>Error: Wallet locked, unable to create transaction!</source>\n         <translation>Error: Wallet locked, unable to create transaction!</translation>\n     </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Error: system error: </source>\n-        <translation>Error: system error: </translation>\n-    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Failed to listen on any port. Use -listen=0 if you want this.</source>\n         <translation>Failed to listen on any port. Use -listen=0 if you want this.</translation>\n     </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to read block info</source>\n-        <translation>Failed to read block info</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to read block</source>\n-        <translation>Failed to read block</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to sync block index</source>\n-        <translation>Failed to sync block index</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to write block index</source>\n-        <translation>Failed to write block index</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to write block info</source>\n-        <translation>Failed to write block info</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to write block</source>\n-        <translation>Failed to write block</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to write file info</source>\n-        <translation>Failed to write file info</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to write to coin database</source>\n-        <translation>Failed to write to coin database</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to write transaction index</source>\n-        <translation>Failed to write transaction index</translation>\n-    </message>\n-    <message>\n-        <location line=\"+1\"/>\n-        <source>Failed to write undo data</source>\n-        <translation>Failed to write undo data</translation>\n-    </message>\n     <message>\n         <location line=\"+2\"/>\n         <source>Force safe mode (default: 0)</source>\n@@ -3860,12 +3830,17 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+21\"/>\n+        <location line=\"+22\"/>\n         <source>Not enough file descriptors available.</source>\n         <translation>Not enough file descriptors available.</translation>\n     </message>\n     <message>\n-        <location line=\"+5\"/>\n+        <location line=\"+2\"/>\n+        <source>Only connect to nodes in network &lt;net&gt; (ipv4, ipv6 or onion)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n+    <message>\n+        <location line=\"+3\"/>\n         <source>Prepend debug output with timestamp (default: 1)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3905,7 +3880,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+3\"/>\n         <source>This is intended for regression testing tools and app development.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -3940,7 +3915,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Imports blocks from external blk000??.dat file</translation>\n     </message>\n     <message>\n-        <location line=\"-195\"/>\n+        <location line=\"-185\"/>\n         <source>(default: 1, 1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4080,12 +4055,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+5\"/>\n         <source>Error: Unsupported argument -tor found, use -onion.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+14\"/>\n+        <location line=\"+3\"/>\n         <source>Fee (in BTC/kB) to add to transactions you send (default: %s)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4129,6 +4104,11 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <source>Keep at most &lt;n&gt; unconnectable blocks in memory (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>Keep at most &lt;n&gt; unconnectable transactions in memory (default: %u)</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Limit size of signature cache to &lt;n&gt; entries (default: 50000)</source>\n@@ -4170,12 +4150,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Only accept block chain matching built-in checkpoints (default: 1)</translation>\n     </message>\n     <message>\n-        <location line=\"+1\"/>\n-        <source>Only connect to nodes in network &lt;net&gt; (IPv4, IPv6 or Tor)</source>\n-        <translation>Only connect to nodes in network &lt;net&gt; (IPv4, IPv6 or Tor)</translation>\n-    </message>\n-    <message>\n-        <location line=\"+4\"/>\n+        <location line=\"+5\"/>\n         <source>Print block on startup, if found in block index</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4255,12 +4230,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Specify connection timeout in milliseconds (default: 5000)</translation>\n     </message>\n     <message>\n-        <location line=\"+7\"/>\n-        <source>System error: </source>\n-        <translation>System error: </translation>\n-    </message>\n-    <message>\n-        <location line=\"+2\"/>\n+        <location line=\"+8\"/>\n         <source>This is experimental software.</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4340,22 +4310,22 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>wallet.dat corrupt, salvage failed</translation>\n     </message>\n     <message>\n-        <location line=\"-64\"/>\n+        <location line=\"-63\"/>\n         <source>Password for JSON-RPC connections</source>\n         <translation>Password for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-164\"/>\n+        <location line=\"-155\"/>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Execute command when the best block changes (%s in cmd is replaced by block hash)</translation>\n     </message>\n     <message>\n-        <location line=\"+210\"/>\n+        <location line=\"+200\"/>\n         <source>Upgrade wallet to latest format</source>\n         <translation>Upgrade wallet to latest format</translation>\n     </message>\n     <message>\n-        <location line=\"-27\"/>\n+        <location line=\"-26\"/>\n         <source>Set key pool size to &lt;n&gt; (default: 100)</source>\n         <translation>Set key pool size to &lt;n&gt; (default: 100)</translation>\n     </message>\n@@ -4365,12 +4335,12 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Rescan the block chain for missing wallet transactions</translation>\n     </message>\n     <message>\n-        <location line=\"+36\"/>\n+        <location line=\"+35\"/>\n         <source>Use OpenSSL (https) for JSON-RPC connections</source>\n         <translation>Use OpenSSL (https) for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-31\"/>\n+        <location line=\"-30\"/>\n         <source>Server certificate file (default: server.cert)</source>\n         <translation>Server certificate file (default: server.cert)</translation>\n     </message>\n@@ -4380,22 +4350,22 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Server private key (default: server.pem)</translation>\n     </message>\n     <message>\n-        <location line=\"+19\"/>\n+        <location line=\"+18\"/>\n         <source>This help message</source>\n         <translation>This help message</translation>\n     </message>\n     <message>\n-        <location line=\"-118\"/>\n+        <location line=\"-108\"/>\n         <source>Allow DNS lookups for -addnode, -seednode and -connect</source>\n         <translation>Allow DNS lookups for -addnode, -seednode and -connect</translation>\n     </message>\n     <message>\n-        <location line=\"+68\"/>\n+        <location line=\"+59\"/>\n         <source>Loading addresses...</source>\n         <translation>Loading addresses...</translation>\n     </message>\n     <message>\n-        <location line=\"-42\"/>\n+        <location line=\"-33\"/>\n         <source>Error loading wallet.dat: Wallet corrupted</source>\n         <translation>Error loading wallet.dat: Wallet corrupted</translation>\n     </message>\n@@ -4405,7 +4375,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Error loading wallet.dat</translation>\n     </message>\n     <message>\n-        <location line=\"+33\"/>\n+        <location line=\"+23\"/>\n         <source>Invalid -proxy address: &apos;%s&apos;</source>\n         <translation>Invalid -proxy address: &apos;%s&apos;</translation>\n     </message>\n@@ -4415,7 +4385,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Unknown network specified in -onlynet: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"-122\"/>\n+        <location line=\"-112\"/>\n         <source>Cannot resolve -bind address: &apos;%s&apos;</source>\n         <translation>Cannot resolve -bind address: &apos;%s&apos;</translation>\n     </message>\n@@ -4425,7 +4395,7 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Cannot resolve -externalip address: &apos;%s&apos;</translation>\n     </message>\n     <message>\n-        <location line=\"+56\"/>\n+        <location line=\"+46\"/>\n         <source>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos;</source>\n         <translation>Invalid amount for -paytxfee=&lt;amount&gt;: &apos;%s&apos;</translation>\n     </message>\n@@ -4440,22 +4410,22 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Insufficient funds</translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n+        <location line=\"+14\"/>\n         <source>Loading block index...</source>\n         <translation>Loading block index...</translation>\n     </message>\n     <message>\n-        <location line=\"-70\"/>\n+        <location line=\"-61\"/>\n         <source>Add a node to connect to and attempt to keep the connection open</source>\n         <translation>Add a node to connect to and attempt to keep the connection open</translation>\n     </message>\n     <message>\n-        <location line=\"+71\"/>\n+        <location line=\"+62\"/>\n         <source>Loading wallet...</source>\n         <translation>Loading wallet...</translation>\n     </message>\n     <message>\n-        <location line=\"-66\"/>\n+        <location line=\"-57\"/>\n         <source>Cannot downgrade wallet</source>\n         <translation>Cannot downgrade wallet</translation>\n     </message>\n@@ -4465,22 +4435,22 @@ for example: alertnotify=echo %%s | mail -s &quot;Bitcoin Alert&quot; admin@foo.\n         <translation>Cannot write default address</translation>\n     </message>\n     <message>\n-        <location line=\"+86\"/>\n+        <location line=\"+77\"/>\n         <source>Rescanning...</source>\n         <translation>Rescanning...</translation>\n     </message>\n     <message>\n-        <location line=\"-73\"/>\n+        <location line=\"-64\"/>\n         <source>Done loading</source>\n         <translation>Done loading</translation>\n     </message>\n     <message>\n-        <location line=\"+101\"/>\n+        <location line=\"+91\"/>\n         <source>To use the %s option</source>\n         <translation>To use the %s option</translation>\n     </message>\n     <message>\n-        <location line=\"-93\"/>\n+        <location line=\"-83\"/>\n         <source>Error</source>\n         <translation>Error</translation>\n     </message>"
      }
    ]
  },
  {
    "sha": "5eed8c21c7be355a2b5368843e383f40aa4642d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWVkOGMyMWM3YmUzNTVhMmI1MzY4ODQzZTM4M2Y0MGFhNDY0MmQ2",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-06T11:00:55Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-06T11:00:55Z"
      },
      "message": "minor license, header end comment etc. cleanup in /script\n\n- ensure all licenses are just MIT\n- add a missing header end comment\n- ensure alphabetical ordering",
      "tree": {
        "sha": "b04e535cbe2e9bd17ef7a50c7e30d113962386af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b04e535cbe2e9bd17ef7a50c7e30d113962386af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5eed8c21c7be355a2b5368843e383f40aa4642d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eed8c21c7be355a2b5368843e383f40aa4642d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5eed8c21c7be355a2b5368843e383f40aa4642d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eed8c21c7be355a2b5368843e383f40aa4642d6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "5505a1b13f75af9f0f6421b42d97c06e079db345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5505a1b13f75af9f0f6421b42d97c06e079db345",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5505a1b13f75af9f0f6421b42d97c06e079db345"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "0ff73964ba812af878633d9aca204406282388bc",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eed8c21c7be355a2b5368843e383f40aa4642d6/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eed8c21c7be355a2b5368843e383f40aa4642d6/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=5eed8c21c7be355a2b5368843e383f40aa4642d6",
        "patch": "@@ -10,10 +10,10 @@\n #include <stdint.h>\n #include <string>\n \n-class uint256;\n class CPubKey;\n class CScript;\n class CTransaction;\n+class uint256;\n \n /** Signature hash types/flags */\n enum"
      },
      {
        "sha": "ab366898d8256958e989cfb97d8124091dfd9fe3",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eed8c21c7be355a2b5368843e383f40aa4642d6/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eed8c21c7be355a2b5368843e383f40aa4642d6/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=5eed8c21c7be355a2b5368843e383f40aa4642d6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"sigcache.h\""
      },
      {
        "sha": "46b8f4d3359925df281c7c1b4a2f771e61dabc30",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eed8c21c7be355a2b5368843e383f40aa4642d6/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eed8c21c7be355a2b5368843e383f40aa4642d6/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=5eed8c21c7be355a2b5368843e383f40aa4642d6",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef H_BITCOIN_SCRIPT_SIGCACHE\n@@ -23,4 +23,4 @@ class CachingSignatureChecker : public SignatureChecker\n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };\n \n-#endif\n+#endif // H_BITCOIN_SCRIPT_SIGCACHE"
      }
    ]
  },
  {
    "sha": "4dc5eb057c1d3b3cab8eb6462a0e134b128de1fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGM1ZWIwNTdjMWQzYjNjYWI4ZWI2NDYyYTBlMTM0YjEyOGRlMWZk",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-06T11:04:02Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-06T11:04:02Z"
      },
      "message": "fix a lock indentation in main.cpp\n\n- also ensure alphabetical ordering in file header",
      "tree": {
        "sha": "13bc40e378a91585f3054b8ca518029dd4dc5101",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13bc40e378a91585f3054b8ca518029dd4dc5101"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4dc5eb057c1d3b3cab8eb6462a0e134b128de1fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dc5eb057c1d3b3cab8eb6462a0e134b128de1fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4dc5eb057c1d3b3cab8eb6462a0e134b128de1fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dc5eb057c1d3b3cab8eb6462a0e134b128de1fd/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "5eed8c21c7be355a2b5368843e383f40aa4642d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eed8c21c7be355a2b5368843e383f40aa4642d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5eed8c21c7be355a2b5368843e383f40aa4642d6"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "5d46c30a9be6348feded56fa7dabf2e83498c95a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc5eb057c1d3b3cab8eb6462a0e134b128de1fd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc5eb057c1d3b3cab8eb6462a0e134b128de1fd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4dc5eb057c1d3b3cab8eb6462a0e134b128de1fd",
        "patch": "@@ -26,8 +26,8 @@\n #include <boost/filesystem/fstream.hpp>\n #include <boost/thread.hpp>\n \n-using namespace std;\n using namespace boost;\n+using namespace std;\n \n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\"\n@@ -2026,10 +2026,10 @@ bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n             // Relay inventory, but don't relay old inventory during initial block download.\n             int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n             {\n-            LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n-                if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                    pnode->PushInventory(CInv(MSG_BLOCK, hashNewTip));\n+                LOCK(cs_vNodes);\n+                BOOST_FOREACH(CNode* pnode, vNodes)\n+                    if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n+                        pnode->PushInventory(CInv(MSG_BLOCK, hashNewTip));\n             }\n \n             uiInterface.NotifyBlockTip(hashNewTip);"
      }
    ]
  },
  {
    "sha": "de10efd154d6c02fe8549a2dc9649a96cf601fd2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTEwZWZkMTU0ZDZjMDJmZTg1NDlhMmRjOTY0OWE5NmNmNjAxZmQy",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-09-25T07:01:54Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2014-10-06T11:13:25Z"
      },
      "message": "add -timeout default as constant and use them\n\n- update help message text\n- simplify code in init to check for -timeout",
      "tree": {
        "sha": "00dfcc650d5ff65d67fa0130314a0862f2d4ba2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00dfcc650d5ff65d67fa0130314a0862f2d4ba2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de10efd154d6c02fe8549a2dc9649a96cf601fd2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de10efd154d6c02fe8549a2dc9649a96cf601fd2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de10efd154d6c02fe8549a2dc9649a96cf601fd2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de10efd154d6c02fe8549a2dc9649a96cf601fd2/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "5505a1b13f75af9f0f6421b42d97c06e079db345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5505a1b13f75af9f0f6421b42d97c06e079db345",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5505a1b13f75af9f0f6421b42d97c06e079db345"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "d3cb3c32d568aef877fd5aac660ccf0254d3b5ea",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de10efd154d6c02fe8549a2dc9649a96cf601fd2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de10efd154d6c02fe8549a2dc9649a96cf601fd2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=de10efd154d6c02fe8549a2dc9649a96cf601fd2",
        "patch": "@@ -260,7 +260,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -port=<port>           \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\";\n     strUsage += \"  -proxy=<ip:port>       \" + _(\"Connect through SOCKS5 proxy\") + \"\\n\";\n     strUsage += \"  -seednode=<ip>         \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\";\n-    strUsage += \"  -timeout=<n>           \" + _(\"Specify connection timeout in milliseconds (default: 5000)\") + \"\\n\";\n+    strUsage += \"  -timeout=<n>           \" + strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT) + \"\\n\";\n #ifdef USE_UPNP\n #if USE_UPNP\n     strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 1 when listening)\") + \"\\n\";\n@@ -641,12 +641,9 @@ bool AppInit2(boost::thread_group& threadGroup)\n     bool fDisableWallet = GetBoolArg(\"-disablewallet\", false);\n #endif\n \n-    if (mapArgs.count(\"-timeout\"))\n-    {\n-        int nNewTimeout = GetArg(\"-timeout\", 5000);\n-        if (nNewTimeout > 0 && nNewTimeout < 600000)\n-            nConnectTimeout = nNewTimeout;\n-    }\n+    nConnectTimeout = GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n+    if (nConnectTimeout <= 0)\n+        nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n \n     // Continue to put \"/P2SH/\" in the coinbase to monitor\n     // BIP16 support."
      },
      {
        "sha": "b3d1001547e5123ec1873e38c85a212a0f672ab6",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de10efd154d6c02fe8549a2dc9649a96cf601fd2/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de10efd154d6c02fe8549a2dc9649a96cf601fd2/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=de10efd154d6c02fe8549a2dc9649a96cf601fd2",
        "patch": "@@ -40,7 +40,7 @@ using namespace std;\n static proxyType proxyInfo[NET_MAX];\n static CService nameProxy;\n static CCriticalSection cs_proxyInfos;\n-int nConnectTimeout = 5000;\n+int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n bool fNameLookup = false;\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };"
      },
      {
        "sha": "1455cd8c33d342f522d24e146786f7f278252a5d",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de10efd154d6c02fe8549a2dc9649a96cf601fd2/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de10efd154d6c02fe8549a2dc9649a96cf601fd2/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=de10efd154d6c02fe8549a2dc9649a96cf601fd2",
        "patch": "@@ -19,6 +19,9 @@\n extern int nConnectTimeout;\n extern bool fNameLookup;\n \n+/** -timeout default */\n+static const int DEFAULT_CONNECT_TIMEOUT = 5000;\n+\n #ifdef WIN32\n // In MSVC, this is defined as a macro, undefine it to prevent a compile and link error\n #undef SetPort"
      }
    ]
  },
  {
    "sha": "772ab0ea98b31020095eaf9baa6a6504957507af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzJhYjBlYTk4YjMxMDIwMDk1ZWFmOWJhYTZhNjUwNDk1NzUwN2Fm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-06T11:23:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-06T11:27:13Z"
      },
      "message": "contrib: use batched JSON-RPC in linarize-hashes\n\nBatch up to 10000 requests for a ~30x speedup.",
      "tree": {
        "sha": "ccabcb4708390fd800b407259be968ad831c902d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccabcb4708390fd800b407259be968ad831c902d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/772ab0ea98b31020095eaf9baa6a6504957507af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/772ab0ea98b31020095eaf9baa6a6504957507af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/772ab0ea98b31020095eaf9baa6a6504957507af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/772ab0ea98b31020095eaf9baa6a6504957507af/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35ee2dac6736e23be3fdd584ba0e321e54ff8f61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35ee2dac6736e23be3fdd584ba0e321e54ff8f61"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 39,
      "deletions": 32
    },
    "files": [
      {
        "sha": "dc7f6540499620738fff5bcd510970d2f400a54c",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 39,
        "deletions": 32,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/772ab0ea98b31020095eaf9baa6a6504957507af/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/772ab0ea98b31020095eaf9baa6a6504957507af/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=772ab0ea98b31020095eaf9baa6a6504957507af",
        "patch": "@@ -2,11 +2,12 @@\n #\n # linearize-hashes.py:  List blocks in a linear, no-fork version of the chain.\n #\n-# Copyright (c) 2013 The Bitcoin developers\n+# Copyright (c) 2013-2014 The Bitcoin developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n+from __future__ import print_function\n import json\n import struct\n import re\n@@ -17,59 +18,65 @@\n settings = {}\n \n class BitcoinRPC:\n-\tOBJID = 1\n-\n \tdef __init__(self, host, port, username, password):\n \t\tauthpair = \"%s:%s\" % (username, password)\n \t\tself.authhdr = \"Basic %s\" % (base64.b64encode(authpair))\n \t\tself.conn = httplib.HTTPConnection(host, port, False, 30)\n-\tdef rpc(self, method, params=None):\n-\t\tself.OBJID += 1\n-\t\tobj = { 'version' : '1.1',\n-\t\t\t'method' : method,\n-\t\t\t'id' : self.OBJID }\n-\t\tif params is None:\n-\t\t\tobj['params'] = []\n-\t\telse:\n-\t\t\tobj['params'] = params\n+\n+\tdef execute(self, obj):\n \t\tself.conn.request('POST', '/', json.dumps(obj),\n \t\t\t{ 'Authorization' : self.authhdr,\n \t\t\t  'Content-type' : 'application/json' })\n \n \t\tresp = self.conn.getresponse()\n \t\tif resp is None:\n-\t\t\tprint \"JSON-RPC: no response\"\n+\t\t\tprint(\"JSON-RPC: no response\", file=sys.stderr)\n \t\t\treturn None\n \n \t\tbody = resp.read()\n \t\tresp_obj = json.loads(body)\n-\t\tif resp_obj is None:\n-\t\t\tprint \"JSON-RPC: cannot JSON-decode body\"\n-\t\t\treturn None\n-\t\tif 'error' in resp_obj and resp_obj['error'] != None:\n-\t\t\treturn resp_obj['error']\n-\t\tif 'result' not in resp_obj:\n-\t\t\tprint \"JSON-RPC: no result in object\"\n-\t\t\treturn None\n+\t\treturn resp_obj\n \n-\t\treturn resp_obj['result']\n-\tdef getblock(self, hash, verbose=True):\n-\t\treturn self.rpc('getblock', [hash, verbose])\n-\tdef getblockhash(self, index):\n-\t\treturn self.rpc('getblockhash', [index])\n+\t@staticmethod\n+\tdef build_request(idx, method, params):\n+\t\tobj = { 'version' : '1.1',\n+\t\t\t'method' : method,\n+\t\t\t'id' : idx }\n+\t\tif params is None:\n+\t\t\tobj['params'] = []\n+\t\telse:\n+\t\t\tobj['params'] = params\n+\t\treturn obj\n+\n+\t@staticmethod\n+\tdef response_is_error(resp_obj):\n+\t\treturn 'error' in resp_obj and resp_obj['error'] is not None\n \n-def get_block_hashes(settings):\n+def get_block_hashes(settings, max_blocks_per_call=10000):\n \trpc = BitcoinRPC(settings['host'], settings['port'],\n \t\t\t settings['rpcuser'], settings['rpcpassword'])\n \n-\tfor height in xrange(settings['min_height'], settings['max_height']+1):\n-\t\thash = rpc.getblockhash(height)\n+\theight = settings['min_height']\n+\twhile height < settings['max_height']+1:\n+\t\tnum_blocks = min(settings['max_height']+1-height, max_blocks_per_call)\n+\t\tbatch = []\n+\t\tfor x in range(num_blocks):\n+\t\t\tbatch.append(rpc.build_request(x, 'getblockhash', [height + x]))\n+\n+\t\treply = rpc.execute(batch)\n+\n+\t\tfor x,resp_obj in enumerate(reply):\n+\t\t\tif rpc.response_is_error(resp_obj):\n+\t\t\t\tprint('JSON-RPC: error at height', height+x, ': ', resp_obj['error'], file=sys.stderr)\n+\t\t\t\texit(1)\n+\t\t\tassert(resp_obj['id'] == x) # assume replies are in-sequence\n+\t\t\tprint(resp_obj['result'])\n \n-\t\tprint(hash)\n+\t\theight += num_blocks\n \n if __name__ == '__main__':\n \tif len(sys.argv) != 2:\n-\t\tprint \"Usage: linearize-hashes.py CONFIG-FILE\"\n+\t\tprint(\"Usage: linearize-hashes.py CONFIG-FILE\")\n \t\tsys.exit(1)\n \n \tf = open(sys.argv[1])\n@@ -95,7 +102,7 @@ def get_block_hashes(settings):\n \tif 'max_height' not in settings:\n \t\tsettings['max_height'] = 313000\n \tif 'rpcuser' not in settings or 'rpcpassword' not in settings:\n-\t\tprint \"Missing username and/or password in cfg file\"\n+\t\tprint(\"Missing username and/or password in cfg file\", file=stderr)\n \t\tsys.exit(1)\n \n \tsettings['port'] = int(settings['port'])"
      }
    ]
  },
  {
    "sha": "aedc74dfa688306c5a139a88782da74f69ba6757",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWRjNzRkZmE2ODgzMDZjNWExMzlhODg3ODJkYTc0ZjY5YmE2NzU3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-06T15:55:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-06T16:30:12Z"
      },
      "message": "contrib: make linearize-data.py cope with out-of-order blocks\n\nMake it possible to read blocks in any order. This will be required\nafter headers-first (#4468), so should be merged before that.\n\n- Read block header. For expected blocks, continue, else skip.\n- For in-order blocks: copy block contents directly. Write prior\n  out-of-order blocks if this connects a consecutive span.\n- For out-of-order blocks, store extents of block data for later\n  retrieval. Cache out-of-order blocks in memory up to 100MB\n  (configurable).",
      "tree": {
        "sha": "9e7b2fd87c426010465298c3ab5d72ba54bad66d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e7b2fd87c426010465298c3ab5d72ba54bad66d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aedc74dfa688306c5a139a88782da74f69ba6757",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aedc74dfa688306c5a139a88782da74f69ba6757",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aedc74dfa688306c5a139a88782da74f69ba6757",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aedc74dfa688306c5a139a88782da74f69ba6757/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5505a1b13f75af9f0f6421b42d97c06e079db345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5505a1b13f75af9f0f6421b42d97c06e079db345",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5505a1b13f75af9f0f6421b42d97c06e079db345"
      }
    ],
    "stats": {
      "total": 260,
      "additions": 162,
      "deletions": 98
    },
    "files": [
      {
        "sha": "e0fef13886d92aa96b6172e8eab7116895fd09f7",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aedc74dfa688306c5a139a88782da74f69ba6757/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aedc74dfa688306c5a139a88782da74f69ba6757/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=aedc74dfa688306c5a139a88782da74f69ba6757",
        "patch": "@@ -15,3 +15,5 @@ output_file=/home/example/Downloads/bootstrap.dat\n hashlist=hashlist.txt\n split_year=1\n \n+# Maxmimum size in bytes of out-of-order blocks cache in memory\n+out_of_order_cache_sz = 100000000"
      },
      {
        "sha": "2dac3a614b03180b7d6804cd7d195e3e2a92e7c2",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 160,
        "deletions": 98,
        "changes": 258,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aedc74dfa688306c5a139a88782da74f69ba6757/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aedc74dfa688306c5a139a88782da74f69ba6757/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=aedc74dfa688306c5a139a88782da74f69ba6757",
        "patch": "@@ -2,11 +2,12 @@\n #\n # linearize-data.py: Construct a linear, no-fork version of the chain.\n #\n-# Copyright (c) 2013 The Bitcoin developers\n+# Copyright (c) 2013-2014 The Bitcoin developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n+from __future__ import print_function, division\n import json\n import struct\n import re\n@@ -17,10 +18,10 @@\n import hashlib\n import datetime\n import time\n+from collections import namedtuple\n \n settings = {}\n \n-\n def uint32(x):\n \treturn x & 0xffffffffL\n \n@@ -78,116 +79,174 @@ def get_block_hashes(settings):\n \n \treturn blkindex\n \n-def mkblockset(blkindex):\n+def mkblockmap(blkindex):\n \tblkmap = {}\n-\tfor hash in blkindex:\n-\t\tblkmap[hash] = True\n+\tfor height,hash in enumerate(blkindex):\n+\t\tblkmap[hash] = height\n \treturn blkmap\n \n-def copydata(settings, blkindex, blkset):\n-\tinFn = 0\n-\tinF = None\n-\toutFn = 0\n-\toutsz = 0\n-\toutF = None\n-\toutFname = None\n-\tblkCount = 0\n-\n-\tlastDate = datetime.datetime(2000, 1, 1)\n-\thighTS = 1408893517 - 315360000\n-\ttimestampSplit = False\n-\tfileOutput = True\n-\tsetFileTime = False\n-\tmaxOutSz = settings['max_out_sz']\n-\tif 'output' in settings:\n-\t\tfileOutput = False\n-\tif settings['file_timestamp'] != 0:\n-\t\tsetFileTime = True\n-\tif settings['split_timestamp'] != 0:\n-\t\ttimestampSplit = True\n-\n-\twhile True:\n-\t\tif not inF:\n-\t\t\tfname = \"%s/blk%05d.dat\" % (settings['input'], inFn)\n-\t\t\tprint(\"Input file\" + fname)\n-\t\t\ttry:\n-\t\t\t\tinF = open(fname, \"rb\")\n-\t\t\texcept IOError:\n-\t\t\t\tprint \"Done\"\n-\t\t\t\treturn\n-\n-\t\tinhdr = inF.read(8)\n-\t\tif (not inhdr or (inhdr[0] == \"\\0\")):\n-\t\t\tinF.close()\n-\t\t\tinF = None\n-\t\t\tinFn = inFn + 1\n-\t\t\tcontinue\n-\n-\t\tinMagic = inhdr[:4]\n-\t\tif (inMagic != settings['netmagic']):\n-\t\t\tprint(\"Invalid magic:\" + inMagic)\n-\t\t\treturn\n-\t\tinLenLE = inhdr[4:]\n-\t\tsu = struct.unpack(\"<I\", inLenLE)\n-\t\tinLen = su[0]\n-\t\trawblock = inF.read(inLen)\n-\t\tblk_hdr = rawblock[:80]\n-\n-\t\thash_str = calc_hash_str(blk_hdr)\n-\t\tif not hash_str in blkset:\n-\t\t\tprint(\"Skipping unknown block \" + hash_str)\n-\t\t\tcontinue\n-\n-\t\tif blkindex[blkCount] != hash_str:\n-\t\t\tprint(\"Out of order block.\")\n-\t\t\tprint(\"Expected \" + blkindex[blkCount])\n-\t\t\tprint(\"Got \" + hash_str)\n-\t\t\tsys.exit(1)\n-\n-\t\tif not fileOutput and ((outsz + inLen) > maxOutSz):\n-\t\t\toutF.close()\n-\t\t\tif setFileTime:\n+# Block header and extent on disk\n+BlockExtent = namedtuple('BlockExtent', ['fn', 'offset', 'inhdr', 'blkhdr', 'size'])\n+\n+class BlockDataCopier:\n+\tdef __init__(self, settings, blkindex, blkmap):\n+\t\tself.settings = settings\n+\t\tself.blkindex = blkindex\n+\t\tself.blkmap = blkmap\n+\n+\t\tself.inFn = 0\n+\t\tself.inF = None\n+\t\tself.outFn = 0\n+\t\tself.outsz = 0\n+\t\tself.outF = None\n+\t\tself.outFname = None\n+\t\tself.blkCountIn = 0\n+\t\tself.blkCountOut = 0\n+\n+\t\tself.lastDate = datetime.datetime(2000, 1, 1)\n+\t\tself.highTS = 1408893517 - 315360000\n+\t\tself.timestampSplit = False\n+\t\tself.fileOutput = True\n+\t\tself.setFileTime = False\n+\t\tself.maxOutSz = settings['max_out_sz']\n+\t\tif 'output' in settings:\n+\t\t\tself.fileOutput = False\n+\t\tif settings['file_timestamp'] != 0:\n+\t\t\tself.setFileTime = True\n+\t\tif settings['split_timestamp'] != 0:\n+\t\t\tself.timestampSplit = True\n+        # Extents and cache for out-of-order blocks\n+\t\tself.blockExtents = {}\n+\t\tself.outOfOrderData = {}\n+\t\tself.outOfOrderSize = 0 # running total size for items in outOfOrderData\n+\n+\tdef writeBlock(self, inhdr, blk_hdr, rawblock):\n+\t\tif not self.fileOutput and ((self.outsz + self.inLen) > self.maxOutSz):\n+\t\t\tself.outF.close()\n+\t\t\tif self.setFileTime:\n \t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n-\t\t\toutF = None\n-\t\t\toutFname = None\n-\t\t\toutFn = outFn + 1\n-\t\t\toutsz = 0\n+\t\t\tself.outF = None\n+\t\t\tself.outFname = None\n+\t\t\tself.outFn = outFn + 1\n+\t\t\tself.outsz = 0\n \n \t\t(blkDate, blkTS) = get_blk_dt(blk_hdr)\n-\t\tif timestampSplit and (blkDate > lastDate):\n+\t\tif self.timestampSplit and (blkDate > self.lastDate):\n \t\t\tprint(\"New month \" + blkDate.strftime(\"%Y-%m\") + \" @ \" + hash_str)\n \t\t\tlastDate = blkDate\n \t\t\tif outF:\n \t\t\t\toutF.close()\n \t\t\t\tif setFileTime:\n \t\t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n-\t\t\t\toutF = None\n-\t\t\t\toutFname = None\n-\t\t\t\toutFn = outFn + 1\n-\t\t\t\toutsz = 0\n-\n-\t\tif not outF:\n-\t\t\tif fileOutput:\n-\t\t\t\toutFname = settings['output_file']\n+\t\t\t\tself.outF = None\n+\t\t\t\tself.outFname = None\n+\t\t\t\tself.outFn = self.outFn + 1\n+\t\t\t\tself.outsz = 0\n+\n+\t\tif not self.outF:\n+\t\t\tif self.fileOutput:\n+\t\t\t\toutFname = self.settings['output_file']\n \t\t\telse:\n-\t\t\t\toutFname = \"%s/blk%05d.dat\" % (settings['output'], outFn)\n+\t\t\t\toutFname = \"%s/blk%05d.dat\" % (self.settings['output'], outFn)\n \t\t\tprint(\"Output file\" + outFname)\n-\t\t\toutF = open(outFname, \"wb\")\n-\n-\t\toutF.write(inhdr)\n-\t\toutF.write(rawblock)\n-\t\toutsz = outsz + inLen + 8\n-\n-\t\tblkCount = blkCount + 1\n-\t\tif blkTS > highTS:\n-\t\t\thighTS = blkTS\n-\n-\t\tif (blkCount % 1000) == 0:\n-\t\t\tprint(\"Wrote \" + str(blkCount) + \" blocks\")\n+\t\t\tself.outF = open(outFname, \"wb\")\n+\n+\t\tself.outF.write(inhdr)\n+\t\tself.outF.write(blk_hdr)\n+\t\tself.outF.write(rawblock)\n+\t\tself.outsz = self.outsz + len(inhdr) + len(blk_hdr) + len(rawblock)\n+\n+\t\tself.blkCountOut = self.blkCountOut + 1\n+\t\tif blkTS > self.highTS:\n+\t\t\tself.highTS = blkTS\n+\n+\t\tif (self.blkCountOut % 1000) == 0:\n+\t\t\tprint('%i blocks scanned, %i blocks written (of %i, %.1f%% complete)' % \n+\t\t\t\t\t(self.blkCountIn, self.blkCountOut, len(self.blkindex), 100.0 * self.blkCountOut / len(self.blkindex)))\n+\n+\tdef inFileName(self, fn):\n+\t\treturn \"%s/blk%05d.dat\" % (self.settings['input'], fn)\n+\n+\tdef fetchBlock(self, extent):\n+\t\t'''Fetch block contents from disk given extents'''\n+\t\twith open(self.inFileName(extent.fn), \"rb\") as f:\n+\t\t\tf.seek(extent.offset)\n+\t\t\treturn f.read(extent.size)\n+\n+\tdef copyOneBlock(self):\n+\t\t'''Find the next block to be written in the input, and copy it to the output.'''\n+\t\textent = self.blockExtents.pop(self.blkCountOut)\n+\t\tif self.blkCountOut in self.outOfOrderData:\n+\t\t\t# If the data is cached, use it from memory and remove from the cache\n+\t\t\trawblock = self.outOfOrderData.pop(self.blkCountOut)\n+\t\t\tself.outOfOrderSize -= len(rawblock)\n+\t\telse: # Otherwise look up data on disk\n+\t\t\trawblock = self.fetchBlock(extent)\n+\n+\t\tself.writeBlock(extent.inhdr, extent.blkhdr, rawblock)\n+\n+\tdef run(self):\n+\t\twhile self.blkCountOut < len(self.blkindex):\n+\t\t\tif not self.inF:\n+\t\t\t\tfname = self.inFileName(self.inFn)\n+\t\t\t\tprint(\"Input file\" + fname)\n+\t\t\t\ttry:\n+\t\t\t\t\tself.inF = open(fname, \"rb\")\n+\t\t\t\texcept IOError:\n+\t\t\t\t\tprint(\"Premature end of block data\")\n+\t\t\t\t\treturn\n+\n+\t\t\tinhdr = self.inF.read(8)\n+\t\t\tif (not inhdr or (inhdr[0] == \"\\0\")):\n+\t\t\t\tself.inF.close()\n+\t\t\t\tself.inF = None\n+\t\t\t\tself.inFn = self.inFn + 1\n+\t\t\t\tcontinue\n+\n+\t\t\tinMagic = inhdr[:4]\n+\t\t\tif (inMagic != self.settings['netmagic']):\n+\t\t\t\tprint(\"Invalid magic:\" + inMagic)\n+\t\t\t\treturn\n+\t\t\tinLenLE = inhdr[4:]\n+\t\t\tsu = struct.unpack(\"<I\", inLenLE)\n+\t\t\tinLen = su[0] - 80 # length without header\n+\t\t\tblk_hdr = self.inF.read(80)\n+\t\t\tinExtent = BlockExtent(self.inFn, self.inF.tell(), inhdr, blk_hdr, inLen)\n+\n+\t\t\thash_str = calc_hash_str(blk_hdr)\n+\t\t\tif not hash_str in blkmap:\n+\t\t\t\tprint(\"Skipping unknown block \" + hash_str)\n+\t\t\t\tself.inF.seek(inLen, os.SEEK_CUR)\n+\t\t\t\tcontinue\n+\n+\t\t\tblkHeight = self.blkmap[hash_str]\n+\t\t\tself.blkCountIn += 1\n+\n+\t\t\tif self.blkCountOut == blkHeight:\n+\t\t\t\t# If in-order block, just copy\n+\t\t\t\trawblock = self.inF.read(inLen)\n+\t\t\t\tself.writeBlock(inhdr, blk_hdr, rawblock)\n+\n+\t\t\t\t# See if we can catch up to prior out-of-order blocks\n+\t\t\t\twhile self.blkCountOut in self.blockExtents:\n+\t\t\t\t\tself.copyOneBlock()\n+\n+\t\t\telse: # If out-of-order, skip over block data for now\n+\t\t\t\tself.blockExtents[blkHeight] = inExtent\n+\t\t\t\tif self.outOfOrderSize < self.settings['out_of_order_cache_sz']:\n+\t\t\t\t\t# If there is space in the cache, read the data\n+\t\t\t\t\t# Reading the data in file sequence instead of seeking and fetching it later is preferred,\n+\t\t\t\t\t# but we don't want to fill up memory\n+\t\t\t\t\tself.outOfOrderData[blkHeight] = self.inF.read(inLen)\n+\t\t\t\t\tself.outOfOrderSize += inLen\n+\t\t\t\telse: # If no space in cache, seek forward\n+\t\t\t\t\tself.inF.seek(inLen, os.SEEK_CUR)\n+\n+\t\tprint(\"Done (%i blocks written)\" % (self.blkCountOut))\n \n if __name__ == '__main__':\n \tif len(sys.argv) != 2:\n-\t\tprint \"Usage: linearize-data.py CONFIG-FILE\"\n+\t\tprint(\"Usage: linearize-data.py CONFIG-FILE\")\n \t\tsys.exit(1)\n \n \tf = open(sys.argv[1])\n@@ -216,22 +275,25 @@ def copydata(settings, blkindex, blkset):\n \t\tsettings['split_timestamp'] = 0\n \tif 'max_out_sz' not in settings:\n \t\tsettings['max_out_sz'] = 1000L * 1000 * 1000\n+\tif 'out_of_order_cache_sz' not in settings:\n+\t\tsettings['out_of_order_cache_sz'] = 100 * 1000 * 1000\n \n \tsettings['max_out_sz'] = long(settings['max_out_sz'])\n \tsettings['split_timestamp'] = int(settings['split_timestamp'])\n \tsettings['file_timestamp'] = int(settings['file_timestamp'])\n \tsettings['netmagic'] = settings['netmagic'].decode('hex')\n+\tsettings['out_of_order_cache_sz'] = int(settings['out_of_order_cache_sz'])\n \n \tif 'output_file' not in settings and 'output' not in settings:\n \t\tprint(\"Missing output file / directory\")\n \t\tsys.exit(1)\n \n \tblkindex = get_block_hashes(settings)\n-\tblkset = mkblockset(blkindex)\n+\tblkmap = mkblockmap(blkindex)\n \n-\tif not \"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\" in blkset:\n+\tif not \"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\" in blkmap:\n \t\tprint(\"not found\")\n \telse:\n-\t\tcopydata(settings, blkindex, blkset)\n+\t\tBlockDataCopier(settings, blkindex, blkmap).run()\n \n "
      }
    ]
  },
  {
    "sha": "3e61eb9c51b57e5b38133cb35842c471044e1ad6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTYxZWI5YzUxYjU3ZTViMzgxMzNjYjM1ODQyYzQ3MTA0NGUxYWQ2",
    "commit": {
      "author": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-10-03T23:48:12Z"
      },
      "committer": {
        "name": "Cozz Lovan",
        "email": "cozzlovan@yahoo.com",
        "date": "2014-10-06T16:52:51Z"
      },
      "message": "minor txindex documentation improvement",
      "tree": {
        "sha": "03ec6d3af44f91b3e417a3f3595de0c3ae438aba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03ec6d3af44f91b3e417a3f3595de0c3ae438aba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e61eb9c51b57e5b38133cb35842c471044e1ad6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e61eb9c51b57e5b38133cb35842c471044e1ad6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e61eb9c51b57e5b38133cb35842c471044e1ad6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e61eb9c51b57e5b38133cb35842c471044e1ad6/comments",
    "author": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "cozz",
      "id": 2814559,
      "node_id": "MDQ6VXNlcjI4MTQ1NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2814559?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cozz",
      "html_url": "https://github.com/cozz",
      "followers_url": "https://api.github.com/users/cozz/followers",
      "following_url": "https://api.github.com/users/cozz/following{/other_user}",
      "gists_url": "https://api.github.com/users/cozz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cozz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cozz/subscriptions",
      "organizations_url": "https://api.github.com/users/cozz/orgs",
      "repos_url": "https://api.github.com/users/cozz/repos",
      "events_url": "https://api.github.com/users/cozz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cozz/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd91ed4f5f32a3ecf907a2ab37679c41d8d1755c"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "36ba13b941fbe6310964af6725eb05036c39925d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e61eb9c51b57e5b38133cb35842c471044e1ad6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e61eb9c51b57e5b38133cb35842c471044e1ad6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3e61eb9c51b57e5b38133cb35842c471044e1ad6",
        "patch": "@@ -237,7 +237,7 @@ std::string HelpMessage(HelpMessageMode mode)\n #if !defined(WIN32)\n     strUsage += \"  -sysperms              \" + _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\") + \"\\n\";\n #endif\n-    strUsage += \"  -txindex               \" + _(\"Maintain a full transaction index (default: 0)\") + \"\\n\";\n+    strUsage += \"  -txindex               \" + _(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: 0)\") + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"Connection options:\") + \"\\n\";\n     strUsage += \"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\";\n@@ -280,7 +280,6 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += \"  -mintxfee=<amt>        \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"), FormatMoney(CWallet::minTxFee.GetFeePerK())) + \"\\n\";\n     strUsage += \"  -paytxfee=<amt>        \" + strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())) + \"\\n\";\n     strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -respendnotify=<cmd>   \" + _(\"Execute command when a network tx respends wallet tx input (%s=respend TxID, %t=wallet TxID)\") + \"\\n\";\n     strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\") + \"\\n\";\n     strUsage += \"  -spendzeroconfchange   \" + _(\"Spend unconfirmed change when sending transactions (default: 1)\") + \"\\n\";\n     strUsage += \"  -txconfirmtarget=<n>   \" + _(\"If paytxfee is not set, include enough fee so transactions are confirmed on average within n blocks (default: 1)\") + \"\\n\";"
      },
      {
        "sha": "3c62272ecb705802535134c7ae13525b576a694a",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e61eb9c51b57e5b38133cb35842c471044e1ad6/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e61eb9c51b57e5b38133cb35842c471044e1ad6/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=3e61eb9c51b57e5b38133cb35842c471044e1ad6",
        "patch": "@@ -110,6 +110,9 @@ Value getrawtransaction(const Array& params, bool fHelp)\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n             \"getrawtransaction \\\"txid\\\" ( verbose )\\n\"\n+            \"\\nNOTE: By default this function only works sometimes. This is when the tx is in the mempool\\n\"\n+            \"or there is an unspent output in the utxo for this transaction. To make it always work,\\n\"\n+            \"you need to maintain a transaction index, using the -txindex command line option.\\n\"\n             \"\\nReturn the raw transaction data.\\n\"\n             \"\\nIf verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\\n\"\n             \"If verbose is non-zero, returns an Object with information about 'txid'.\\n\"\n@@ -202,7 +205,7 @@ Value listunspent(const Array& params, bool fHelp)\n             \"Results are an array of Objects, each of which has:\\n\"\n             \"{txid, vout, scriptPubKey, amount, confirmations}\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. minconf          (numeric, optional, default=1) The minimum confirmationsi to filter\\n\"\n+            \"1. minconf          (numeric, optional, default=1) The minimum confirmations to filter\\n\"\n             \"2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\\n\"\n             \"3. \\\"addresses\\\"    (string) A json array of bitcoin addresses to filter\\n\"\n             \"    [\\n\""
      }
    ]
  },
  {
    "sha": "27368e76260564268a7994d7e179a675750dbd05",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzM2OGU3NjI2MDU2NDI2OGE3OTk0ZDdlMTc5YTY3NTc1MGRiZDA1",
    "commit": {
      "author": {
        "name": "Dominyk Tiller",
        "email": "DomT4@users.noreply.github.com",
        "date": "2014-10-06T20:36:24Z"
      },
      "committer": {
        "name": "Dominyk Tiller",
        "email": "DomT4@users.noreply.github.com",
        "date": "2014-10-06T20:36:24Z"
      },
      "message": "Homebrew lang fix\n\nVery small tweak to correct the language on Homebrew's sandboxing process.\r\n\r\nDiscussed in [this commit](https://github.com/bitcoin/bitcoin/commit/9fedafba4b903d7f3af044eb86dc313856e40b08).",
      "tree": {
        "sha": "e6bf27cf8413c255cf4533292dcbf378fb5778d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6bf27cf8413c255cf4533292dcbf378fb5778d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27368e76260564268a7994d7e179a675750dbd05",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27368e76260564268a7994d7e179a675750dbd05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27368e76260564268a7994d7e179a675750dbd05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27368e76260564268a7994d7e179a675750dbd05/comments",
    "author": {
      "login": "DomT4",
      "id": 6998367,
      "node_id": "MDQ6VXNlcjY5OTgzNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6998367?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DomT4",
      "html_url": "https://github.com/DomT4",
      "followers_url": "https://api.github.com/users/DomT4/followers",
      "following_url": "https://api.github.com/users/DomT4/following{/other_user}",
      "gists_url": "https://api.github.com/users/DomT4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DomT4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DomT4/subscriptions",
      "organizations_url": "https://api.github.com/users/DomT4/orgs",
      "repos_url": "https://api.github.com/users/DomT4/repos",
      "events_url": "https://api.github.com/users/DomT4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DomT4/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "DomT4",
      "id": 6998367,
      "node_id": "MDQ6VXNlcjY5OTgzNjc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6998367?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DomT4",
      "html_url": "https://github.com/DomT4",
      "followers_url": "https://api.github.com/users/DomT4/followers",
      "following_url": "https://api.github.com/users/DomT4/following{/other_user}",
      "gists_url": "https://api.github.com/users/DomT4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DomT4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DomT4/subscriptions",
      "organizations_url": "https://api.github.com/users/DomT4/orgs",
      "repos_url": "https://api.github.com/users/DomT4/repos",
      "events_url": "https://api.github.com/users/DomT4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DomT4/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5505a1b13f75af9f0f6421b42d97c06e079db345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5505a1b13f75af9f0f6421b42d97c06e079db345",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5505a1b13f75af9f0f6421b42d97c06e079db345"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7a54a16c42f47538cb87a96d1b8d6846a5ebd6fe",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27368e76260564268a7994d7e179a675750dbd05/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27368e76260564268a7994d7e179a675750dbd05/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=27368e76260564268a7994d7e179a675750dbd05",
        "patch": "@@ -240,7 +240,7 @@ case $host in\n \n        AC_CHECK_PROG([BREW],brew, brew)\n        if test x$BREW = xbrew; then\n-         dnl These Homebrew packages may be bottled, meaning that they won't be found\n+         dnl These Homebrew packages may be keg-only, meaning that they won't be found\n          dnl in expected paths because they may conflict with system files. Ask\n          dnl Homebrew where each one is located, then adjust paths accordingly.\n          dnl It's safe to add these paths even if the functionality is disabled by"
      }
    ]
  },
  {
    "sha": "a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmE1ZmUzYjcyN2JjZjVmODdiOTFmNWI2MjVjOThlMTMyZmQzZDIy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-06T21:49:05Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-06T21:51:45Z"
      },
      "message": "Merge pull request #5049\n\n4dc5eb0 fix a lock indentation in main.cpp (Philip Kaufmann)\n5eed8c2 minor license, header end comment etc. cleanup in /script (Philip Kaufmann)",
      "tree": {
        "sha": "13bc40e378a91585f3054b8ca518029dd4dc5101",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13bc40e378a91585f3054b8ca518029dd4dc5101"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUMw7xAAoJEFeJbS/48LZXXe0L/jAK7i2FPDMktyZt7NLRun0d\n/5mYO+0B39H+GN2+cL2ma5/xkKMoO5dAi1Sz8q49K63vVnZ5pLUDLNTPYPZIUVZ2\ndZF39/lODclgMfLGGsPArjMUy2s6543fTuzF0UhPkIOHgIryTA1IOe+ZUM2Vp6s2\n5bh9Bwpm093Enb1AsbRHBGbVScWr4LjghBuXX5qPXMk2eeU1BoF6RHJPFulgLzQ7\nAAWjATQuW4XU8VYN7r5ydZj2CsgcLuUQjnYC45dzBYazpMarialB7cnR6zPUC77W\nbqos8ugbrAk79CEc2buHX8Ql3rYf6KrcKxi02DKyrRo9OLfICK1OnYu6DIu/IAsB\nqNcOrNN9N07r3j/vWlRGaD7xBln93twadVhyw57hPUHMmduuGKiK9MAPOgm2Q2tt\npj1jdmBXWHysvkmwYLD3h7q4PbFogQL0lM05teREg45Oh+FEpSoXcfYn8z5GeCLk\nfb1VqvolkLSezqnygfWGdIe6ehig58sEbjnwTBW0ug==\n=voWp\n-----END PGP SIGNATURE-----",
        "payload": "tree 13bc40e378a91585f3054b8ca518029dd4dc5101\nparent 5505a1b13f75af9f0f6421b42d97c06e079db345\nparent 4dc5eb057c1d3b3cab8eb6462a0e134b128de1fd\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1412632145 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1412632305 +0200\n\nMerge pull request #5049\n\n4dc5eb0 fix a lock indentation in main.cpp (Philip Kaufmann)\n5eed8c2 minor license, header end comment etc. cleanup in /script (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5505a1b13f75af9f0f6421b42d97c06e079db345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5505a1b13f75af9f0f6421b42d97c06e079db345",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5505a1b13f75af9f0f6421b42d97c06e079db345"
      },
      {
        "sha": "4dc5eb057c1d3b3cab8eb6462a0e134b128de1fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dc5eb057c1d3b3cab8eb6462a0e134b128de1fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4dc5eb057c1d3b3cab8eb6462a0e134b128de1fd"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "5d46c30a9be6348feded56fa7dabf2e83498c95a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22",
        "patch": "@@ -26,8 +26,8 @@\n #include <boost/filesystem/fstream.hpp>\n #include <boost/thread.hpp>\n \n-using namespace std;\n using namespace boost;\n+using namespace std;\n \n #if defined(NDEBUG)\n # error \"Bitcoin cannot be compiled without assertions.\"\n@@ -2026,10 +2026,10 @@ bool ActivateBestChain(CValidationState &state, CBlock *pblock) {\n             // Relay inventory, but don't relay old inventory during initial block download.\n             int nBlockEstimate = Checkpoints::GetTotalBlocksEstimate();\n             {\n-            LOCK(cs_vNodes);\n-            BOOST_FOREACH(CNode* pnode, vNodes)\n-                if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n-                    pnode->PushInventory(CInv(MSG_BLOCK, hashNewTip));\n+                LOCK(cs_vNodes);\n+                BOOST_FOREACH(CNode* pnode, vNodes)\n+                    if (chainActive.Height() > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate))\n+                        pnode->PushInventory(CInv(MSG_BLOCK, hashNewTip));\n             }\n \n             uiInterface.NotifyBlockTip(hashNewTip);"
      },
      {
        "sha": "0ff73964ba812af878633d9aca204406282388bc",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22",
        "patch": "@@ -10,10 +10,10 @@\n #include <stdint.h>\n #include <string>\n \n-class uint256;\n class CPubKey;\n class CScript;\n class CTransaction;\n+class uint256;\n \n /** Signature hash types/flags */\n enum"
      },
      {
        "sha": "ab366898d8256958e989cfb97d8124091dfd9fe3",
        "filename": "src/script/sigcache.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22/src/script/sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22/src/script/sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.cpp?ref=a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"sigcache.h\""
      },
      {
        "sha": "46b8f4d3359925df281c7c1b4a2f771e61dabc30",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22",
        "patch": "@@ -1,6 +1,6 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2013 The Bitcoin developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef H_BITCOIN_SCRIPT_SIGCACHE\n@@ -23,4 +23,4 @@ class CachingSignatureChecker : public SignatureChecker\n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };\n \n-#endif\n+#endif // H_BITCOIN_SCRIPT_SIGCACHE"
      }
    ]
  },
  {
    "sha": "9d7cd4c598edfff12f1f80629c9149b3f1cf75a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDdjZDRjNTk4ZWRmZmYxMmYxZjgwNjI5YzkxNDliM2YxY2Y3NWE2",
    "commit": {
      "author": {
        "name": "Andy Alness",
        "email": "andy@coinbase.com",
        "date": "2014-09-20T23:13:18Z"
      },
      "committer": {
        "name": "Andy Alness",
        "email": "andy@coinbase.com",
        "date": "2014-10-07T01:54:34Z"
      },
      "message": "Don't return an address for invalid pubkeys",
      "tree": {
        "sha": "c9bc22b523c3e86a7c74ccce3ca23a53b8f20a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9bc22b523c3e86a7c74ccce3ca23a53b8f20a5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d7cd4c598edfff12f1f80629c9149b3f1cf75a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d7cd4c598edfff12f1f80629c9149b3f1cf75a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d7cd4c598edfff12f1f80629c9149b3f1cf75a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d7cd4c598edfff12f1f80629c9149b3f1cf75a6/comments",
    "author": {
      "login": "aalness",
      "id": 4391003,
      "node_id": "MDQ6VXNlcjQzOTEwMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4391003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aalness",
      "html_url": "https://github.com/aalness",
      "followers_url": "https://api.github.com/users/aalness/followers",
      "following_url": "https://api.github.com/users/aalness/following{/other_user}",
      "gists_url": "https://api.github.com/users/aalness/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aalness/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aalness/subscriptions",
      "organizations_url": "https://api.github.com/users/aalness/orgs",
      "repos_url": "https://api.github.com/users/aalness/repos",
      "events_url": "https://api.github.com/users/aalness/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aalness/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "aalness",
      "id": 4391003,
      "node_id": "MDQ6VXNlcjQzOTEwMDM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4391003?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/aalness",
      "html_url": "https://github.com/aalness",
      "followers_url": "https://api.github.com/users/aalness/followers",
      "following_url": "https://api.github.com/users/aalness/following{/other_user}",
      "gists_url": "https://api.github.com/users/aalness/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/aalness/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/aalness/subscriptions",
      "organizations_url": "https://api.github.com/users/aalness/orgs",
      "repos_url": "https://api.github.com/users/aalness/repos",
      "events_url": "https://api.github.com/users/aalness/events{/privacy}",
      "received_events_url": "https://api.github.com/users/aalness/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25308337d659108e3320257fb6c1c16d5fe24aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25308337d659108e3320257fb6c1c16d5fe24aa9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25308337d659108e3320257fb6c1c16d5fe24aa9"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 13,
      "deletions": 2
    },
    "files": [
      {
        "sha": "53ae254d59ac181905965ea1c30555de9df0dd0b",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d7cd4c598edfff12f1f80629c9149b3f1cf75a6/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d7cd4c598edfff12f1f80629c9149b3f1cf75a6/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=9d7cd4c598edfff12f1f80629c9149b3f1cf75a6",
        "patch": "@@ -203,7 +203,11 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n \n     if (whichType == TX_PUBKEY)\n     {\n-        addressRet = CPubKey(vSolutions[0]).GetID();\n+        CPubKey pubKey(vSolutions[0]);\n+        if (!pubKey.IsValid())\n+            return false;\n+\n+        addressRet = pubKey.GetID();\n         return true;\n     }\n     else if (whichType == TX_PUBKEYHASH)\n@@ -237,9 +241,16 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vecto\n         nRequiredRet = vSolutions.front()[0];\n         for (unsigned int i = 1; i < vSolutions.size()-1; i++)\n         {\n-            CTxDestination address = CPubKey(vSolutions[i]).GetID();\n+            CPubKey pubKey(vSolutions[i]);\n+            if (!pubKey.IsValid())\n+                continue;\n+\n+            CTxDestination address = pubKey.GetID();\n             addressRet.push_back(address);\n         }\n+\n+        if (addressRet.empty())\n+            return false;\n     }\n     else\n     {"
      }
    ]
  },
  {
    "sha": "953f16cb4e17aef8223d74a578d1fd064b2a34b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTNmMTZjYjRlMTdhZWY4MjIzZDc0YTU3OGQxZmQwNjRiMmEzNGI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-07T06:38:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-07T06:51:20Z"
      },
      "message": "Merge pull request #4954\n\n9d7cd4c Don't return an address for invalid pubkeys (Andy Alness)",
      "tree": {
        "sha": "6043f970485404fdd5de69489a46eafba9423ce9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6043f970485404fdd5de69489a46eafba9423ce9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/953f16cb4e17aef8223d74a578d1fd064b2a34b6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUM41oAAoJEHSBCwEjRsmmBCIH/RWsJ+pFOe4OobuVa2cVp42h\nCB7yppp+1h0GrxV4gojffjBu9IhqOFt0361R9f2xFgh3jphLTPl5rQ+wxAmcQCJl\nYfBv5FT6GMdih+IUhg1bjO/NZXyGFu73KZ9DOTlTE+4QyKrps+x0T4AUfxTIEACu\nn23dmcwq9RV8b/KB0w585gVxQHsqvTVFkizDnFDQx2vN/VECtUwZchYsyy4caby5\nASioYmxDznXbziAbCQdqH0EG1GJ1syc3n7rDlb6Que6iYEAiuK8lu9dzcnB3r8zh\nCyGq8e22WgN8jpwiyskasgoVvJ3SDaDX/GdXZ7nSxfU8kYV/n/r34L8V3lDKJYI=\n=0CMK\n-----END PGP SIGNATURE-----",
        "payload": "tree 6043f970485404fdd5de69489a46eafba9423ce9\nparent a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22\nparent 9d7cd4c598edfff12f1f80629c9149b3f1cf75a6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412663920 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412664680 +0200\n\nMerge pull request #4954\n\n9d7cd4c Don't return an address for invalid pubkeys (Andy Alness)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/953f16cb4e17aef8223d74a578d1fd064b2a34b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/953f16cb4e17aef8223d74a578d1fd064b2a34b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/953f16cb4e17aef8223d74a578d1fd064b2a34b6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22"
      },
      {
        "sha": "9d7cd4c598edfff12f1f80629c9149b3f1cf75a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d7cd4c598edfff12f1f80629c9149b3f1cf75a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d7cd4c598edfff12f1f80629c9149b3f1cf75a6"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 13,
      "deletions": 2
    },
    "files": [
      {
        "sha": "53ae254d59ac181905965ea1c30555de9df0dd0b",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/953f16cb4e17aef8223d74a578d1fd064b2a34b6/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/953f16cb4e17aef8223d74a578d1fd064b2a34b6/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=953f16cb4e17aef8223d74a578d1fd064b2a34b6",
        "patch": "@@ -203,7 +203,11 @@ bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet)\n \n     if (whichType == TX_PUBKEY)\n     {\n-        addressRet = CPubKey(vSolutions[0]).GetID();\n+        CPubKey pubKey(vSolutions[0]);\n+        if (!pubKey.IsValid())\n+            return false;\n+\n+        addressRet = pubKey.GetID();\n         return true;\n     }\n     else if (whichType == TX_PUBKEYHASH)\n@@ -237,9 +241,16 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vecto\n         nRequiredRet = vSolutions.front()[0];\n         for (unsigned int i = 1; i < vSolutions.size()-1; i++)\n         {\n-            CTxDestination address = CPubKey(vSolutions[i]).GetID();\n+            CPubKey pubKey(vSolutions[i]);\n+            if (!pubKey.IsValid())\n+                continue;\n+\n+            CTxDestination address = pubKey.GetID();\n             addressRet.push_back(address);\n         }\n+\n+        if (addressRet.empty())\n+            return false;\n     }\n     else\n     {"
      }
    ]
  },
  {
    "sha": "d4b571a5d32af211b43d69643822d3d2993b344f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGI1NzFhNWQzMmFmMjExYjQzZDY5NjQzODIyZDNkMjk5M2IzNDRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-07T06:51:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-07T06:53:07Z"
      },
      "message": "Merge pull request #5038\n\n0b17964 Bugfix: Replace bashisms with standard sh in tests/tools (Luke Dashjr)\nab72068 Bugfix: Replace bashisms with standard sh in gitian descriptors (Luke Dashjr)\nb77b4ed Bugfix: Replace bashisms with standard sh to fix build on non-BASH systems (Luke Dashjr)\nd6b0539 travis: add non-default shell testing to travis. (Cory Fields)",
      "tree": {
        "sha": "09325f1b10c9778a5a392fc4abd04d48d4eb6b54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09325f1b10c9778a5a392fc4abd04d48d4eb6b54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4b571a5d32af211b43d69643822d3d2993b344f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUM43TAAoJEHSBCwEjRsmmC3MH/2Iou9RAfrQlrv8mSLDAvEKL\nk+098b9E9d+mXWo3e1g8FJsiO+64Myf5C6r5nK2yzl0kOchmQcPTTSnGYnHMEpW1\nnoZf/pi/gm8sePDE3CjGkcO27FL4FwNoefCj/K29zqnyZfR65AJaztmLFEfGDtdV\n0Npp5xgRp8XxN4zXfx9sHGqlemRnzlqBxE6N8nNJ07QnjJXeZyD+dU2yBaaoDOX6\ne2O3Gb7qTiy4fcoiolwyYs8v7SpI4iFDo74foeRJ/KWEgKEm5X65l2Om4h326VXO\n7lHK7NZhSJMJatPfXpvUhMfwKEMMDMohFL9mlqPkckfNOHbU7zls/wxBvcc2FSc=\n=h8Gp\n-----END PGP SIGNATURE-----",
        "payload": "tree 09325f1b10c9778a5a392fc4abd04d48d4eb6b54\nparent 953f16cb4e17aef8223d74a578d1fd064b2a34b6\nparent 0b17964131c78daa6a3ee01c41f47a43ee2e1947\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412664703 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412664787 +0200\n\nMerge pull request #5038\n\n0b17964 Bugfix: Replace bashisms with standard sh in tests/tools (Luke Dashjr)\nab72068 Bugfix: Replace bashisms with standard sh in gitian descriptors (Luke Dashjr)\nb77b4ed Bugfix: Replace bashisms with standard sh to fix build on non-BASH systems (Luke Dashjr)\nd6b0539 travis: add non-default shell testing to travis. (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4b571a5d32af211b43d69643822d3d2993b344f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4b571a5d32af211b43d69643822d3d2993b344f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4b571a5d32af211b43d69643822d3d2993b344f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "953f16cb4e17aef8223d74a578d1fd064b2a34b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/953f16cb4e17aef8223d74a578d1fd064b2a34b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/953f16cb4e17aef8223d74a578d1fd064b2a34b6"
      },
      {
        "sha": "0b17964131c78daa6a3ee01c41f47a43ee2e1947",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b17964131c78daa6a3ee01c41f47a43ee2e1947",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b17964131c78daa6a3ee01c41f47a43ee2e1947"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 65,
      "deletions": 61
    },
    "files": [
      {
        "sha": "89b2238655fcbb2df9ec5f852fe66dae51199227",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b571a5d32af211b43d69643822d3d2993b344f/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b571a5d32af211b43d69643822d3d2993b344f/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=d4b571a5d32af211b43d69643822d3d2993b344f",
        "patch": "@@ -31,7 +31,7 @@ matrix:\n     - compiler: \"true 3\"\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n     - compiler: \"true 4\"\n-      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n+      env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\" USE_SHELL=\"/bin/dash\"\n     - compiler: \"true 5\"\n       env: HOST=x86_64-apple-darwin11 PACKAGES=\"gcc-multilib g++-multilib cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.7 GOAL=\"deploy\"\n     - compiler: \"true 6\"\n@@ -48,11 +48,12 @@ before_script:\n     - if [ -n \"$OSX_SDK\" -a -f depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz; fi\n     - make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS || (echo \"Build failure. Verbose build follows.\" && make -C depends V=1 HOST=$HOST $DEP_OPTS)\n script:\n+    - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n     - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n     - BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n     - depends/$HOST/native/bin/ccache --max-size=$CCACHE_SIZE\n     - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then export CCACHE_READONLY=1; fi\n-    - ./autogen.sh\n+    - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n     - ./configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n     - make distdir PACKAGE=bitcoin VERSION=$HOST\n     - cd bitcoin-$HOST"
      },
      {
        "sha": "3e26a183059c059277632e0cca9d11c3b1836f31",
        "filename": "autogen.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b571a5d32af211b43d69643822d3d2993b344f/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b571a5d32af211b43d69643822d3d2993b344f/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/autogen.sh?ref=d4b571a5d32af211b43d69643822d3d2993b344f",
        "patch": "@@ -3,6 +3,7 @@ set -e\n srcdir=\"$(dirname $0)\"\n cd \"$srcdir\"\n if [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"`which glibtoolize 2>/dev/null`\"; then\n-  export LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n+  LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n+  export LIBTOOLIZE\n fi\n autoreconf --install --force --warnings=all"
      },
      {
        "sha": "2a72262653f1f71ca1341fc3ebd30b781a7789f1",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b571a5d32af211b43d69643822d3d2993b344f/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b571a5d32af211b43d69643822d3d2993b344f/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=d4b571a5d32af211b43d69643822d3d2993b344f",
        "patch": "@@ -84,7 +84,7 @@ dnl Outputs: bitcoin_enable_qt, bitcoin_enable_qt_dbus, bitcoin_enable_qt_test\n AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   use_pkgconfig=$1\n \n-  if test x$use_pkgconfig == x; then\n+  if test x$use_pkgconfig = x; then\n     use_pkgconfig=yes\n   fi\n \n@@ -106,9 +106,9 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   BITCOIN_QT_CHECK([\n   TEMP_CPPFLAGS=$CPPFLAGS\n   CPPFLAGS=$QT_INCLUDES\n-  if test x$bitcoin_qt_got_major_vers == x5; then\n+  if test x$bitcoin_qt_got_major_vers = x5; then\n     _BITCOIN_QT_IS_STATIC\n-    if test x$bitcoin_cv_static_qt == xyes; then\n+    if test x$bitcoin_cv_static_qt = xyes; then\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n       if test x$qt_plugin_path != x; then\n         QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n@@ -118,14 +118,14 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n         PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n       fi\n       _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(AccessibleFactory)], [-lqtaccessiblewidgets])\n-      if test x$TARGET_OS == xwindows; then\n+      if test x$TARGET_OS = xwindows; then\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n         AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n-      elif test x$TARGET_OS == xlinux; then\n+      elif test x$TARGET_OS = xlinux; then\n         PKG_CHECK_MODULES([X11XCB], [x11-xcb], [QT_LIBS=\"$X11XCB_LIBS $QT_LIBS\"])\n         _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n         AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n-      elif test x$TARGET_OS == xdarwin; then\n+      elif test x$TARGET_OS = xdarwin; then\n         if test x$use_pkgconfig = xyes; then\n           PKG_CHECK_MODULES([QTPRINT], [Qt5PrintSupport], [QT_LIBS=\"$QTPRINT_LIBS $QT_LIBS\"])\n         fi\n@@ -135,7 +135,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n       fi\n     fi\n   else\n-    if test x$TARGET_OS == xwindows; then\n+    if test x$TARGET_OS = xwindows; then\n       AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n       if test x$qt_plugin_path != x; then\n         QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n@@ -196,7 +196,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n     if test x$use_dbus = xyes && test x$have_qt_dbus = xno; then\n       AC_MSG_ERROR(\"libQtDBus not found. Install libQtDBus or remove --with-qtdbus.\")\n     fi\n-    if test x$LUPDATE == x; then\n+    if test x$LUPDATE = x; then\n       AC_MSG_WARN(\"lupdate is required to update qt translations\")\n     fi\n   ],[\n@@ -291,10 +291,10 @@ dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n   m4_ifdef([PKG_CHECK_MODULES],[\n   auto_priority_version=$1\n-  if test x$auto_priority_version == x; then\n+  if test x$auto_priority_version = x; then\n     auto_priority_version=qt5\n   fi\n-    if test x$bitcoin_qt_want_version == xqt5 ||  ( test x$bitcoin_qt_want_version == xauto && test x$auto_priority_version == xqt5 ); then\n+    if test x$bitcoin_qt_want_version = xqt5 ||  ( test x$bitcoin_qt_want_version = xauto && test x$auto_priority_version = xqt5 ); then\n       QT_LIB_PREFIX=Qt5\n       bitcoin_qt_got_major_vers=5\n     else\n@@ -304,14 +304,14 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n     qt5_modules=\"Qt5Core Qt5Gui Qt5Network Qt5Widgets\"\n     qt4_modules=\"QtCore QtGui QtNetwork\"\n     BITCOIN_QT_CHECK([\n-      if test x$bitcoin_qt_want_version == xqt5 || ( test x$bitcoin_qt_want_version == xauto && test x$auto_priority_version == xqt5 ); then\n+      if test x$bitcoin_qt_want_version = xqt5 || ( test x$bitcoin_qt_want_version = xauto && test x$auto_priority_version = xqt5 ); then\n         PKG_CHECK_MODULES([QT], [$qt5_modules], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes],[have_qt=no])\n-      elif test x$bitcoin_qt_want_version == xqt4 || ( test x$bitcoin_qt_want_version == xauto && test x$auto_priority_version == xqt4 ); then\n+      elif test x$bitcoin_qt_want_version = xqt4 || ( test x$bitcoin_qt_want_version = xauto && test x$auto_priority_version = xqt4 ); then\n         PKG_CHECK_MODULES([QT], [$qt4_modules], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes], [have_qt=no])\n       fi\n \n       dnl qt version is set to 'auto' and the preferred version wasn't found. Now try the other.\n-      if test x$have_qt == xno && test x$bitcoin_qt_want_version == xauto; then\n+      if test x$have_qt = xno && test x$bitcoin_qt_want_version = xauto; then\n         if test x$auto_priority_version = x$qt5; then\n           PKG_CHECK_MODULES([QT], [$qt4_modules], [QT_INCLUDES=\"$QT_CFLAGS\"; have_qt=yes; QT_LIB_PREFIX=Qt; bitcoin_qt_got_major_vers=4], [have_qt=no])\n         else\n@@ -358,7 +358,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n     if test x$bitcoin_qt_want_version = xauto; then\n       _BITCOIN_QT_CHECK_QT5\n     fi\n-    if test x$bitcoin_cv_qt5 == xyes || test x$bitcoin_qt_want_version = xqt5; then\n+    if test x$bitcoin_cv_qt5 = xyes || test x$bitcoin_qt_want_version = xqt5; then\n       QT_LIB_PREFIX=Qt5\n       bitcoin_qt_got_major_vers=5\n     else\n@@ -373,7 +373,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n       LIBS=\"$LIBS -L$qt_lib_path\"\n     fi\n \n-    if test x$TARGET_OS == xwindows; then\n+    if test x$TARGET_OS = xwindows; then\n       AC_CHECK_LIB([imm32],      [main],, BITCOIN_QT_FAIL(libimm32 not found))\n     fi\n   ])\n@@ -385,7 +385,7 @@ AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXCore not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXGui not found)))\n   BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXNetwork not found)))\n-  if test x$bitcoin_qt_got_major_vers == x5; then\n+  if test x$bitcoin_qt_got_major_vers = x5; then\n     BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Widgets],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXWidgets not found)))\n   fi\n   QT_LIBS=\"$LIBS\""
      },
      {
        "sha": "0bd309a3a843394c0ddf75a84095e15751497536",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 18,
        "deletions": 16,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b571a5d32af211b43d69643822d3d2993b344f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b571a5d32af211b43d69643822d3d2993b344f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=d4b571a5d32af211b43d69643822d3d2993b344f",
        "patch": "@@ -250,14 +250,16 @@ case $host in\n          bdb_prefix=`$BREW --prefix berkeley-db4 2>/dev/null`\n          qt5_prefix=`$BREW --prefix qt5 2>/dev/null`\n          if test x$openssl_prefix != x; then\n-           export PKG_CONFIG_PATH=\"$openssl_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+           PKG_CONFIG_PATH=\"$openssl_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+           export PKG_CONFIG_PATH\n          fi\n          if test x$bdb_prefix != x; then\n            CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"\n            LIBS=\"$LIBS -L$bdb_prefix/lib\"\n          fi\n          if test x$qt5_prefix != x; then\n-           export PKG_CONFIG_PATH=\"$qt5_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+           PKG_CONFIG_PATH=\"$qt5_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+           export PKG_CONFIG_PATH\n          fi\n        fi\n      else\n@@ -287,28 +289,28 @@ if test x$use_comparison_tool != xno; then\n fi\n \n if test x$use_comparison_tool_reorg_tests != xno; then\n-  if test x$use_comparison_tool == x; then\n+  if test x$use_comparison_tool = x; then\n     AC_MSG_ERROR(\"comparison tool reorg tests but comparison tool was not specified\")\n   fi\n   AC_SUBST(COMPARISON_TOOL_REORG_TESTS, 1)\n else\n   AC_SUBST(COMPARISON_TOOL_REORG_TESTS, 0)\n fi\n \n-if test x$use_lcov == xyes; then\n-  if test x$LCOV == x; then\n+if test x$use_lcov = xyes; then\n+  if test x$LCOV = x; then\n     AC_MSG_ERROR(\"lcov testing requested but lcov not found\")\n   fi\n-  if test x$GCOV == x; then\n+  if test x$GCOV = x; then\n     AC_MSG_ERROR(\"lcov testing requested but gcov not found\")\n   fi\n-  if test x$JAVA == x; then\n+  if test x$JAVA = x; then\n     AC_MSG_ERROR(\"lcov testing requested but java not found\")\n   fi\n-  if test x$GENHTML == x; then\n+  if test x$GENHTML = x; then\n     AC_MSG_ERROR(\"lcov testing requested but genhtml not found\")\n   fi\n-  if test x$use_comparison_tool == x; then\n+  if test x$use_comparison_tool = x; then\n     AC_MSG_ERROR(\"lcov testing requested but comparison tool was not specified\")\n   fi\n   LCOV=\"$LCOV --gcov-tool=$GCOV\"\n@@ -607,7 +609,7 @@ BITCOIN_QT_INIT\n \n if test x$use_pkgconfig = xyes; then\n \n-  if test x\"$PKG_CONFIG\" == \"x\"; then\n+  if test x\"$PKG_CONFIG\" = \"x\"; then\n     AC_MSG_ERROR(pkg-config not found.)\n   fi\n \n@@ -721,7 +723,7 @@ if test x$bitcoin_enable_qt != xno; then\n   dnl enable qr support\n   AC_MSG_CHECKING([whether to build GUI with support for QR codes])\n   if test x$have_qrencode = xno; then\n-    if test x$use_qr == xyes; then\n+    if test x$use_qr = xyes; then\n      AC_MSG_ERROR(\"QR support requested but cannot be built. use --without-qrencode\")\n     fi\n     AC_MSG_RESULT(no)\n@@ -735,7 +737,7 @@ if test x$bitcoin_enable_qt != xno; then\n     fi\n   fi\n \n-  if test x$XGETTEXT == x; then\n+  if test x$XGETTEXT = x; then\n     AC_MSG_WARN(\"xgettext is required to update qt translations\")\n   fi\n \n@@ -770,12 +772,12 @@ fi\n AM_CONDITIONAL([TARGET_DARWIN], [test x$TARGET_OS = xdarwin])\n AM_CONDITIONAL([BUILD_DARWIN], [test x$BUILD_OS = xdarwin])\n AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\n-AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet == xyes])\n-AM_CONDITIONAL([ENABLE_TESTS],[test x$use_tests == xyes])\n-AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt == xyes])\n+AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n+AM_CONDITIONAL([ENABLE_TESTS],[test x$use_tests = xyes])\n+AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$use_tests$bitcoin_enable_qt_test = xyesyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n-AM_CONDITIONAL([USE_LCOV],[test x$use_lcov == xyes])\n+AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n AM_CONDITIONAL([USE_COMPARISON_TOOL],[test x$use_comparison_tool != xno])\n AM_CONDITIONAL([USE_COMPARISON_TOOL_REORG_TESTS],[test x$use_comparison_tool_reorg_test != xno])\n AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])"
      },
      {
        "sha": "a83a2a59be307cb72b0ad25ec173f16151c7959d",
        "filename": "contrib/devtools/github-merge.sh",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b571a5d32af211b43d69643822d3d2993b344f/contrib/devtools/github-merge.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b571a5d32af211b43d69643822d3d2993b344f/contrib/devtools/github-merge.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.sh?ref=d4b571a5d32af211b43d69643822d3d2993b344f",
        "patch": "@@ -13,7 +13,7 @@\n # name $BRANCH is overwritten with the merged result, and optionally pushed.\n \n REPO=\"$(git config --get githubmerge.repository)\"\n-if [[ \"d$REPO\" == \"d\" ]]; then\n+if [ \"d$REPO\" = \"d\" ]; then\n   echo \"ERROR: No repository configured. Use this command to set:\" >&2\n   echo \"git config githubmerge.repository <owner>/<repo>\" >&2\n   echo \"In addition, you can set the following variables:\" >&2\n@@ -24,25 +24,25 @@ if [[ \"d$REPO\" == \"d\" ]]; then\n fi\n \n HOST=\"$(git config --get githubmerge.host)\"\n-if [[ \"d$HOST\" == \"d\" ]]; then\n+if [ \"d$HOST\" = \"d\" ]; then\n   HOST=\"git@github.com\"\n fi\n \n BRANCH=\"$(git config --get githubmerge.branch)\"\n-if [[ \"d$BRANCH\" == \"d\" ]]; then\n+if [ \"d$BRANCH\" = \"d\" ]; then\n   BRANCH=\"master\"\n fi\n \n TESTCMD=\"$(git config --get githubmerge.testcmd)\"\n \n PULL=\"$1\"\n \n-if [[ \"d$PULL\" == \"d\" ]]; then\n+if [ \"d$PULL\" = \"d\" ]; then\n   echo \"Usage: $0 pullnumber [branch]\" >&2\n   exit 2\n fi\n \n-if [[ \"d$2\" != \"d\" ]]; then\n+if [ \"d$2\" != \"d\" ]; then\n   BRANCH=\"$2\"\n fi\n \n@@ -101,7 +101,7 @@ else\n fi\n \n # Run test command if configured.\n-if [[ \"d$TESTCMD\" != \"d\" ]]; then\n+if [ \"d$TESTCMD\" != \"d\" ]; then\n   # Go up to the repository's root.\n   while [ ! -d .git ]; do cd ..; done\n   if ! $TESTCMD; then\n@@ -112,10 +112,10 @@ if [[ \"d$TESTCMD\" != \"d\" ]]; then\n   # Show the created merge.\n   git diff pull/\"$PULL\"/merge..pull/\"$PULL\"/local-merge >\"$TMPDIR\"/diff\n   git diff pull/\"$PULL\"/base..pull/\"$PULL\"/local-merge\n-  if [[ \"$(<\"$TMPDIR\"/diff)\" != \"\" ]]; then\n+  if [ \"$(<\"$TMPDIR\"/diff)\" != \"\" ]; then\n     echo \"WARNING: merge differs from github!\" >&2\n     read -p \"Type 'ignore' to continue. \" -r >&2\n-    if [[ \"d$REPLY\" =~ ^d[iI][gG][nN][oO][rR][eE]$ ]]; then\n+    if [ \"d$REPLY\" =~ ^d[iI][gG][nN][oO][rR][eE]$ ]; then\n       echo \"Difference with github ignored.\" >&2\n     else\n       cleanup\n@@ -124,7 +124,7 @@ if [[ \"d$TESTCMD\" != \"d\" ]]; then\n   fi\n   read -p \"Press 'd' to accept the diff. \" -n 1 -r >&2\n   echo\n-  if [[ \"d$REPLY\" =~ ^d[dD]$ ]]; then\n+  if [ \"d$REPLY\" =~ ^d[dD]$ ]; then\n     echo \"Diff accepted.\" >&2\n   else\n     echo \"ERROR: Diff rejected.\" >&2\n@@ -139,7 +139,7 @@ else\n   bash -i\n   read -p \"Press 'm' to accept the merge. \" -n 1 -r >&2\n   echo\n-  if [[ \"d$REPLY\" =~ ^d[Mm]$ ]]; then\n+  if [ \"d$REPLY\" =~ ^d[Mm]$ ]; then\n     echo \"Merge accepted.\" >&2\n   else\n     echo \"ERROR: Merge rejected.\" >&2\n@@ -151,8 +151,8 @@ fi\n # Sign the merge commit.\n read -p \"Press 's' to sign off on the merge. \" -n 1 -r >&2\n echo\n-if [[ \"d$REPLY\" =~ ^d[Ss]$ ]]; then\n-  if [[ \"$(git config --get user.signingkey)\" == \"\" ]]; then\n+if [ \"d$REPLY\" =~ ^d[Ss]$ ]; then\n+  if [ \"$(git config --get user.signingkey)\" = \"\" ]; then\n     echo \"WARNING: No GPG signing key set, not signing. Set one using:\" >&2\n     echo \"git config --global user.signingkey <key>\" >&2\n     git commit -q --signoff --amend --no-edit\n@@ -168,6 +168,6 @@ cleanup\n \n # Push the result.\n read -p \"Type 'push' to push the result to $HOST:$REPO, branch $BRANCH. \" -r >&2\n-if [[ \"d$REPLY\" =~ ^d[Pp][Uu][Ss][Hh]$ ]]; then\n+if [ \"d$REPLY\" =~ ^d[Pp][Uu][Ss][Hh]$ ]; then\n   git push \"$HOST\":\"$REPO\" refs/heads/\"$BRANCH\"\n fi"
      },
      {
        "sha": "347952e3a663988e3df5cd125137ca5cd07e8e3c",
        "filename": "contrib/gitian-descriptors/boost-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b571a5d32af211b43d69643822d3d2993b344f/contrib/gitian-descriptors/boost-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b571a5d32af211b43d69643822d3d2993b344f/contrib/gitian-descriptors/boost-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/boost-win.yml?ref=d4b571a5d32af211b43d69643822d3d2993b344f",
        "patch": "@@ -29,7 +29,7 @@ script: |\n     #\n     INSTALLPREFIX=$HOME/staging${BITS}\n     BUILDDIR=$HOME/build${BITS}\n-    if [ \"$BITS\" == \"32\" ]; then\n+    if [ \"x$BITS\" = \"x32\" ]; then\n       HOST=i686-w64-mingw32\n     else\n       HOST=x86_64-w64-mingw32"
      },
      {
        "sha": "fe02950ef9c09ee5a3c0941ba9660390f01b53ec",
        "filename": "contrib/gitian-descriptors/deps-win.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b571a5d32af211b43d69643822d3d2993b344f/contrib/gitian-descriptors/deps-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b571a5d32af211b43d69643822d3d2993b344f/contrib/gitian-descriptors/deps-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/deps-win.yml?ref=d4b571a5d32af211b43d69643822d3d2993b344f",
        "patch": "@@ -39,7 +39,7 @@ script: |\n     #\n     INSTALLPREFIX=$HOME/staging${BITS}\n     BUILDDIR=$HOME/build${BITS}\n-    if [ \"$BITS\" == \"32\" ]; then\n+    if [ \"x$BITS\" = \"x32\" ]; then\n       HOST=i686-w64-mingw32\n     else\n       HOST=x86_64-w64-mingw32\n@@ -50,7 +50,7 @@ script: |\n     #\n     tar xzf $INDIR/openssl-1.0.1h.tar.gz\n     cd openssl-1.0.1h\n-    if [ \"$BITS\" == \"32\" ]; then\n+    if [ \"x$BITS\" = \"x32\" ]; then\n       OPENSSL_TGT=mingw\n     else\n       OPENSSL_TGT=mingw64"
      },
      {
        "sha": "b2795c5376941dc34ee3812731ce83c9181d3a15",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b571a5d32af211b43d69643822d3d2993b344f/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b571a5d32af211b43d69643822d3d2993b344f/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=d4b571a5d32af211b43d69643822d3d2993b344f",
        "patch": "@@ -50,7 +50,7 @@ script: |\n     STAGING=$HOME/staging${BITS}\n     BUILDDIR=$HOME/build${BITS}\n     BINDIR=$OUTDIR/$BITS\n-    if [ \"$BITS\" == \"32\" ]; then\n+    if [ \"x$BITS\" = \"x32\" ]; then\n       HOST=i686-w64-mingw32\n     else\n       HOST=x86_64-w64-mingw32\n@@ -63,7 +63,7 @@ script: |\n     unzip $INDIR/boost-win${BITS}-1.55.0-gitian-r6.zip\n     unzip $INDIR/bitcoin-deps-win${BITS}-gitian-r13.zip\n     unzip $INDIR/protobuf-win${BITS}-2.5.0-gitian-r4.zip\n-    if [ \"$NEEDDIST\" == \"1\" ]; then\n+    if [ \"x$NEEDDIST\" = \"x1\" ]; then\n       # Make source code archive which is architecture independent so it only needs to be done once\n       cd $HOME/build/bitcoin\n       ./autogen.sh"
      },
      {
        "sha": "1b7af08843df5b8ce7790e749d4f18b6fc36c6e8",
        "filename": "contrib/gitian-descriptors/protobuf-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b571a5d32af211b43d69643822d3d2993b344f/contrib/gitian-descriptors/protobuf-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b571a5d32af211b43d69643822d3d2993b344f/contrib/gitian-descriptors/protobuf-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/protobuf-win.yml?ref=d4b571a5d32af211b43d69643822d3d2993b344f",
        "patch": "@@ -26,7 +26,7 @@ script: |\n     #\n     INSTALLPREFIX=$HOME/staging${BITS}\n     BUILDDIR=$HOME/build${BITS}\n-    if [ \"$BITS\" == \"32\" ]; then\n+    if [ \"x$BITS\" = \"x32\" ]; then\n       HOST=i686-w64-mingw32\n     else\n       HOST=x86_64-w64-mingw32"
      },
      {
        "sha": "fd86b4df1dceb6815fd9d61f329b6a779e80108f",
        "filename": "contrib/gitian-descriptors/qt-linux.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b571a5d32af211b43d69643822d3d2993b344f/contrib/gitian-descriptors/qt-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b571a5d32af211b43d69643822d3d2993b344f/contrib/gitian-descriptors/qt-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/qt-linux.yml?ref=d4b571a5d32af211b43d69643822d3d2993b344f",
        "patch": "@@ -18,7 +18,7 @@ files:\n script: |\n   export FAKETIME=$REFERENCE_DATETIME\n   export TZ=UTC\n-  if [ \"$GBUILD_BITS\" == \"32\" ]; then\n+  if [ \"x$GBUILD_BITS\" = \"x32\" ]; then\n     ARCH='i386-linux-gnu'\n   else\n     ARCH='x86_64-linux-gnu'\n@@ -74,7 +74,7 @@ script: |\n   #endif\n   ' > $QCONFIG\n \n-  if [ \"$GBUILD_BITS\" == \"32\" ]; then\n+  if [ \"x$GBUILD_BITS\" = \"x32\" ]; then\n     echo '\n   /* Machine byte-order */\n   #define Q_BIG_ENDIAN 4321"
      },
      {
        "sha": "57bc4c31804926f5c5ae120c4e41fefb8c8220b7",
        "filename": "contrib/gitian-descriptors/qt-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b571a5d32af211b43d69643822d3d2993b344f/contrib/gitian-descriptors/qt-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b571a5d32af211b43d69643822d3d2993b344f/contrib/gitian-descriptors/qt-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/qt-win.yml?ref=d4b571a5d32af211b43d69643822d3d2993b344f",
        "patch": "@@ -38,7 +38,7 @@ script: |\n     INSTALLPREFIX=$HOME/staging${BITS}\n     BUILDDIR=$HOME/build${BITS}\n     DEPSDIR=$HOME/deps${BITS}\n-    if [ \"$BITS\" == \"32\" ]; then\n+    if [ \"x$BITS\" = \"x32\" ]; then\n       HOST=i686-w64-mingw32\n     else\n       HOST=x86_64-w64-mingw32"
      },
      {
        "sha": "df076956bd3eb51e05bd6def26cfc32724ff3185",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b571a5d32af211b43d69643822d3d2993b344f/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b571a5d32af211b43d69643822d3d2993b344f/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=d4b571a5d32af211b43d69643822d3d2993b344f",
        "patch": "@@ -34,12 +34,12 @@ if test -z $with_gui && test -n \"@no_qt@\"; then\n   with_gui=no\n fi\n \n-if test @host_os@ == darwin; then\n+if test x@host_os@ = xdarwin; then\n   BREW=no\n   PORT=no\n fi\n \n-if test @host_os@ == mingw32; then\n+if test x@host_os@ = xmingw32; then\n   if test -z $with_qt_incdir; then\n     with_qt_incdir=$prefix/include\n   fi"
      },
      {
        "sha": "8c0f114590cf9df5eb2541771c7b93b955252e09",
        "filename": "qa/rpc-tests/send.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b571a5d32af211b43d69643822d3d2993b344f/qa/rpc-tests/send.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b571a5d32af211b43d69643822d3d2993b344f/qa/rpc-tests/send.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/send.sh?ref=d4b571a5d32af211b43d69643822d3d2993b344f",
        "patch": "@@ -14,7 +14,7 @@ if [ $# -eq 0 ]; then\n   exit 0\n fi\n \n-if [ $1 == \"-STOP\" ]; then\n+if [ $1 = \"-STOP\" ]; then\n   if [ -s ${PIDFILE} ]; then\n       kill -s ${SIGNAL} $(<${PIDFILE})\n   fi"
      },
      {
        "sha": "b88d5920f7a91270e6c5a4e746c951809c3c40ef",
        "filename": "qa/rpc-tests/walletbackup.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4b571a5d32af211b43d69643822d3d2993b344f/qa/rpc-tests/walletbackup.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4b571a5d32af211b43d69643822d3d2993b344f/qa/rpc-tests/walletbackup.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.sh?ref=d4b571a5d32af211b43d69643822d3d2993b344f",
        "patch": "@@ -149,7 +149,7 @@ echo \"Creating transactions...\"\n \n function S {\n   TXID=$( $CLI -datadir=${D}/node${1} sendtoaddress ${2} \"${3}\" 0 )\n-  if [[ $TXID == \"\" ]] ; then\n+  if [ x$TXID = x ] ; then\n       echoerr \"node${1}: error sending ${3} btc\"\n       echo -n \"node${1} balance: \"\n       $CLI -datadir=${D}/node${1} getbalance \"*\" 0"
      }
    ]
  },
  {
    "sha": "2c930d932bdd4e1306f60dbb89f60c9a0149468b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzkzMGQ5MzJiZGQ0ZTEzMDZmNjBkYmI4OWY2MGM5YTAxNDk0Njhi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-07T00:22:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-07T07:41:33Z"
      },
      "message": "Prettify JSON tests and minimize diffs",
      "tree": {
        "sha": "2e70eecb5213675fa2bdcb27fa97e2677e5fa4c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e70eecb5213675fa2bdcb27fa97e2677e5fa4c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c930d932bdd4e1306f60dbb89f60c9a0149468b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c930d932bdd4e1306f60dbb89f60c9a0149468b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c930d932bdd4e1306f60dbb89f60c9a0149468b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c930d932bdd4e1306f60dbb89f60c9a0149468b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2a5fe3b727bcf5f87b91f5b625c98e132fd3d22"
      }
    ],
    "stats": {
      "total": 219,
      "additions": 179,
      "deletions": 40
    },
    "files": [
      {
        "sha": "e62b8eeb75ef4530cb5a2f1c60ae1858ed7b56b9",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 72,
        "deletions": 13,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c930d932bdd4e1306f60dbb89f60c9a0149468b/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c930d932bdd4e1306f60dbb89f60c9a0149468b/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=2c930d932bdd4e1306f60dbb89f60c9a0149468b",
        "patch": "@@ -384,19 +384,78 @@ nSequences are max.\n \n [\"0x00\", \"'00' EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"],\n \n-[\"0x47 0x30440220304eff7556bba9560df47873275e64db45f3cd735998ce3f00d2e57b1bb5f31302205c0c9d14b8b80d43e2ac9b87532f1af6d8a3271262bc694ec4e14068392bb0a001\", \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"\", \"P2PK, bad sig\"],\n-[\"0x47 0x3044022037fcdb8e08f41e27588de8bc036d2c4b16eb3d09c1ba53b8f47a0a9c27722a39022058664b7a53b507e71dfafb77193e3786c3f0c119d78ce9104480ee7ece04f09301 0x21 0x03363d90d446b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\", \"DUP HASH160 0x14 0xc0834c0c158f53be706d234c38fd52de7eece656 EQUALVERIFY CHECKSIG\", \"\", \"P2PKH, bad pubkey\"],\n-[\"0x47 0x3044022035e5b6742d299861c84cebaf2ea64145ee427a95facab39e2594d6deebb0c1d602200acb16778faa2e467a59006f342f2535b1418d55ba63a8605b387b7f9ac86d9a01\", \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\", \"\", \"P2PK anyonecanpay marked with normal hashtype\"],\n-[\"0x47 0x3044022029b2b8765ca950cf75a69e80b73b7ddfcaa8b27080c2db4c23b36aae60688e790220598ff368e17872ee065aa54d7d3a590682ca5204325b23b31d7da3c4a21ae67901 0x23 0x210279be667ef9dcbbac54a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\", \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\", \"P2SH\", \"P2SH(P2PK), bad redeemscript\"],\n-[\"0x47 0x30440220647f906e63890df5ef1d3fed47ba892b31976c634281079e2bd38504fb54a1fb022021e8811f38fbe90efb6b74cb78da01d9badbac3bafdf70a861d7538a220d0b2601 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\", \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\", \"P2SH\", \"P2SH(P2PKH), bad sig\"],\n-[\"0 0x47 0x304402203ef170402f8887f2ac183f31b1f503b0bc60bfc968dd469b097ea6124aefac5002200612febadc4e4cacc086982cb85830a17af3680c1b6a3cf77c1708af7621cf1301 0 0x47 0x304402207821838251a24a2234844f68e7169e6d11945cdf052ea12bd3e4e37457aceb4402200b6b46c81361e314c740ae5133c072af5fa5c209d65d2db1679e1716f19a538101\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"\", \"3-of-3, 2 sigs\"],\n-[\"0 0 0x47 0x304402204661f7795e8db7be3132e8974e9a76d1d24b31f23df94c6fbcea07d1c205789102203f5e45a1c0b085279b58d11b36d5fea5449c3cf16f844ad10124e9b65e8777d201 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\", \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\", \"P2SH\", \"P2SH(2-of-3), 1 sig\"],\n-[\"0x47 0x304402200052bc1600ca45c71f3538720fe62a5e8548dffd137af04467598c98466e9c0a0220789318ddbc9991ee477974089220a2feb6a6298a7c93d5ff6c25a92a2f4b48d501\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"STRICTENC\", \"P2PK with too much R padding\"],\n-[\"0x48 0x304502206eb7b92628bfb3c4d2a04b65b986987bcbb1af4fceedb144d5a0437b7ee410590221005f57a52df4aa26366742eed0db182fce51fbcd7159011b0644a7c05943eb228901\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"STRICTENC\", \"P2PK with too much S padding\"],\n-[\"0x47 0x30440220d8ad1efd55a3d2b8896495c38aba72056e1b3ca4a6ca15760e843eb1a9b9907602203eb0e8f3d6bec998262dfd03eaeb0f31c4e5105965436dec77550724b3771f3201\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"STRICTENC\", \"P2PK with too little R padding\"],\n-[\"0x48 0x304502206c43e065c8a8db3bbe69015afb86a51fb2fc8870defd41d436da2a197d9d6c12022100fcec35816ee2d84ec271ad159fcabf5dd712157051169e48ac328a7818cdb51e01\", \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\", \"LOW_S,STRICTENC\", \"P2PK with high S\"],\n-[\"0x01 0x01 0x47 0x304402200e48ba1cf4d7182db94ffb57bd72ea31b5545dc0d1c512e665779b4fb2badc52022054b8388dfc074c708a75b62359b7be46402751ee40c0a111aef38a837b6ed09801 0x47 0x304402201c9820f59c49107bb30e6175cfc9ec95f897b03beb628b4bc854d2b80392aa0602200235d986ae418bcd111b8814f4c26a0ab5f475fb542a44884fc14912a97a252301 0x47 0x304402204cd7894c6f10a871f5b0c1f9c13228f8cdd4050248f0d0f498ee86be69ee3080022051bd2932c7d585eb600c7194235c74da820935f0d67972fd9545673aa1fd023301\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"NULLDUMMY\", \"3-of-3 with nonzero dummy\"],\n+[\n+    \"0x47 0x30440220304eff7556bba9560df47873275e64db45f3cd735998ce3f00d2e57b1bb5f31302205c0c9d14b8b80d43e2ac9b87532f1af6d8a3271262bc694ec4e14068392bb0a001\",\n+    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"\",\n+    \"P2PK, bad sig\"\n+],\n+[\n+    \"0x47 0x3044022037fcdb8e08f41e27588de8bc036d2c4b16eb3d09c1ba53b8f47a0a9c27722a39022058664b7a53b507e71dfafb77193e3786c3f0c119d78ce9104480ee7ece04f09301 0x21 0x03363d90d446b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\",\n+    \"DUP HASH160 0x14 0xc0834c0c158f53be706d234c38fd52de7eece656 EQUALVERIFY CHECKSIG\",\n+    \"\",\n+    \"P2PKH, bad pubkey\"\n+],\n+[\n+    \"0x47 0x3044022035e5b6742d299861c84cebaf2ea64145ee427a95facab39e2594d6deebb0c1d602200acb16778faa2e467a59006f342f2535b1418d55ba63a8605b387b7f9ac86d9a01\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n+    \"\",\n+    \"P2PK anyonecanpay marked with normal hashtype\"\n+],\n+[\n+    \"0x47 0x3044022029b2b8765ca950cf75a69e80b73b7ddfcaa8b27080c2db4c23b36aae60688e790220598ff368e17872ee065aa54d7d3a590682ca5204325b23b31d7da3c4a21ae67901 0x23 0x210279be667ef9dcbbac54a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n+    \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\",\n+    \"P2SH\",\n+    \"P2SH(P2PK), bad redeemscript\"\n+],\n+[\n+    \"0x47 0x30440220647f906e63890df5ef1d3fed47ba892b31976c634281079e2bd38504fb54a1fb022021e8811f38fbe90efb6b74cb78da01d9badbac3bafdf70a861d7538a220d0b2601 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\",\n+    \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\",\n+    \"P2SH\",\n+    \"P2SH(P2PKH), bad sig\"\n+],\n+[\n+    \"0 0x47 0x304402203ef170402f8887f2ac183f31b1f503b0bc60bfc968dd469b097ea6124aefac5002200612febadc4e4cacc086982cb85830a17af3680c1b6a3cf77c1708af7621cf1301 0 0x47 0x304402207821838251a24a2234844f68e7169e6d11945cdf052ea12bd3e4e37457aceb4402200b6b46c81361e314c740ae5133c072af5fa5c209d65d2db1679e1716f19a538101\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n+    \"\",\n+    \"3-of-3, 2 sigs\"\n+],\n+[\n+    \"0 0 0x47 0x304402204661f7795e8db7be3132e8974e9a76d1d24b31f23df94c6fbcea07d1c205789102203f5e45a1c0b085279b58d11b36d5fea5449c3cf16f844ad10124e9b65e8777d201 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\",\n+    \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\",\n+    \"P2SH\",\n+    \"P2SH(2-of-3), 1 sig\"\n+],\n+[\n+    \"0x47 0x304402200052bc1600ca45c71f3538720fe62a5e8548dffd137af04467598c98466e9c0a0220789318ddbc9991ee477974089220a2feb6a6298a7c93d5ff6c25a92a2f4b48d501\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"STRICTENC\",\n+    \"P2PK with too much R padding\"\n+],\n+[\n+    \"0x48 0x304502206eb7b92628bfb3c4d2a04b65b986987bcbb1af4fceedb144d5a0437b7ee410590221005f57a52df4aa26366742eed0db182fce51fbcd7159011b0644a7c05943eb228901\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"STRICTENC\",\n+    \"P2PK with too much S padding\"\n+],\n+[\n+    \"0x47 0x30440220d8ad1efd55a3d2b8896495c38aba72056e1b3ca4a6ca15760e843eb1a9b9907602203eb0e8f3d6bec998262dfd03eaeb0f31c4e5105965436dec77550724b3771f3201\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"STRICTENC\",\n+    \"P2PK with too little R padding\"\n+],\n+[\n+    \"0x48 0x304502206c43e065c8a8db3bbe69015afb86a51fb2fc8870defd41d436da2a197d9d6c12022100fcec35816ee2d84ec271ad159fcabf5dd712157051169e48ac328a7818cdb51e01\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"LOW_S,STRICTENC\",\n+    \"P2PK with high S\"\n+],\n+[\n+    \"0x01 0x01 0x47 0x304402200e48ba1cf4d7182db94ffb57bd72ea31b5545dc0d1c512e665779b4fb2badc52022054b8388dfc074c708a75b62359b7be46402751ee40c0a111aef38a837b6ed09801 0x47 0x304402201c9820f59c49107bb30e6175cfc9ec95f897b03beb628b4bc854d2b80392aa0602200235d986ae418bcd111b8814f4c26a0ab5f475fb542a44884fc14912a97a252301 0x47 0x304402204cd7894c6f10a871f5b0c1f9c13228f8cdd4050248f0d0f498ee86be69ee3080022051bd2932c7d585eb600c7194235c74da820935f0d67972fd9545673aa1fd023301\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n+    \"NULLDUMMY\",\n+    \"3-of-3 with nonzero dummy\"\n+],\n \n [\"The End\"]\n-\n ]"
      },
      {
        "sha": "49c7abbb312b98e77b9a023e3a9f4dcfd36e9e18",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 78,
        "deletions": 13,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c930d932bdd4e1306f60dbb89f60c9a0149468b/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c930d932bdd4e1306f60dbb89f60c9a0149468b/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=2c930d932bdd4e1306f60dbb89f60c9a0149468b",
        "patch": "@@ -529,19 +529,84 @@ nSequences are max.\n \n [\"0x00\", \"SIZE 0 EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"],\n \n-[\"0x47 0x3044022007415aa37ce7eaa6146001ac8bdefca0ddcba0e37c5dc08c4ac99392124ebac802207d382307fd53f65778b07b9c63b6e196edeadf0be719130c5db21ff1e700d67501\", \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"\", \"P2PK\"],\n-[\"0x47 0x3044022069d40999786aeb2fd874f9eb2636461a062dc963471627ed8390a3a5f9556f640220350132a52415ce622f2aadd07f791c591500917ec1f8c5edbc5381ef7942534d01 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508\", \"DUP HASH160 0x14 0x1018853670f9f3b0582c5b9ee8ce93764ac32b93 EQUALVERIFY CHECKSIG\", \"\", \"P2PKH\"],\n-[\"0x47 0x30440220519f2a6632ffa134c7811ea2819e9dcc951f0c7baf461f2dffdd09133f3b080a02203ec6bab5eb6619ed7f41b8701d7c6d70cfc83bb26c5c97f54b2ca6e304fc2bb581\", \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\", \"\", \"P2PK anyonecanpay\"],\n-[\"0x47 0x30440220279dad2170ffb5639f0a1ea71fc462ee37d75d420d86f84c978bac523c09b7f20220683b2789f5c5528a9e0a0d78f6e40db3f616cf1adb5a5fdef117d5974795cfe201 0x23 0x210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\", \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\", \"P2SH\", \"P2SH(P2PK)\"],\n-[\"0x47 0x3044022066acbfb5ac96b7cbf3f05a2aaf358c32438c45d1d7359dee9fc1ee636940735f02205606a03fd8cbf6a6fcbcba60c8abb1e385c0b5753cb57a97538159106fd3684e01 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\", \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\", \"\", \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\"],\n-[\"0 0x47 0x3044022004e791dd30a64c70e55e84e150c002af9feb3ce0ab1f20e86c53d1209003927502205a60453987fcd72aebaaacebc8ce4b15449cdd79e54cc82cefb83e69dbcfeabf01 0x47 0x304402201d021808ce93dd8574cc4f99ae4f11b44305528b0aecbd9f156f08315173643802200944a0ea5c884bd86180aef76d8b1e444860776b251e47d2d6c651a1c6f9930801 0x47 0x30440220446336d7b7de05ebb5683b82b05248ec7d78e88ae8d6125985f5776c887a4cf90220674ab2b2c2f954ba1cf35457d273c90d0c0c1c224d0ae128628740e81129486801\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"\", \"3-of-3\"],\n-[\"0 0x47 0x30440220288b06d057cf0eac434ed0c3be9257cc0ca144dd99c11cc8f1a49467a37d8e8002203c496c72253c528e6bc81c42e683aba974d46041a96ef7b00915c863eb2a702901 0x47 0x304402207ffb4da33f40cac839a43000a187bd76a1ee5bf95e46dc1534b38bb7bd0321db022038c078f29d1831f8eb68ffdc2634c654fb01c3467b6457b98ad220653bb2478501 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\", \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\", \"P2SH\", \"P2SH(2-of-3)\"],\n-[\"0x47 0x304402200001cae94b795baaafb05db38cf24cd75560cab2c36c91e29fac7d0fd2a723a3022058e2e56e568ce7c4b2b106210d114e1faa079407a6ed4154f230667c7d3583bc01\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"\", \"P2PK with too much R padding but no STRICTENC\"],\n-[\"0x48 0x304502206d01de7c2a40ac2bb1231ed97f3890a1782f421d4c28b97166deff317990288f0221005e720213b089355be2cf785d81a82c59307d30e1624f450ed9ca1ebbc11cca6d01\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"\", \"P2PK with too much S padding but no STRICTENC\"],\n-[\"0x47 0x30440220f3d8889602147d60d26c1d3b21b8db183eac02bf6d2fec1424c0ef377ca6fd7b02202bae8bfe39d00a432d4538a592e338b0ffc44c17d4b7056043d55063cf91f5ef01\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"\", \"P2PK with too little R padding but no STRICTENC\"],\n-[\"0x48 0x3045022021bf9184d94f208ac9f4757ebca9b1cbebf008cfc244fe5be1360b1b9aba0e92022100e55074f72f3a1bfddf2ea4ea7ba984f78822e136fe04c8f9c1363238e0233bd801\", \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\", \"STRICTENC\", \"P2PK with high S but no LOW_S\"],\n-[\"0x48 0x304502205c3e81aaf2aad0673f349035b180eba783eba7797af91c979920dea6b17a16d6022100d1d46825c68da1b325f320a3503dad27bb818227f64a38d153554bfd360c0e5301\", \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\", \"LOW_S\", \"P2PK with high S but no STRICTENC\"],\n-[\"0x01 0x01 0x47 0x3044022046ce33d1771b0127dd4c4cef8fdc3218ebdfa60e3793ed700292d8ebd93fb1f402201029d47a414db83e96e31443c2d8b552f971469c4800f5eff7df2f0648521aed01 0x47 0x304402205c53911ad55b054920043962bbda98cf6e57e2db1cd5611138251490baabaa8702201dc80dfceae6007e7772dc13ff6e7ca66a983cb017fe5d46d30118462d83bcf801 0x47 0x304402201937e44a4ec12364f9d32f9d25e7ecbc68aee9ef90069af80efef4c05f6ace9602206c515101c00c75710b32ff7ff8dbaf7c9a0be6e86ed14a0755b47626604f31fd01\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"\", \"3-of-3 with nonzero dummy but no NULLDUMMY\"],\n+[\n+    \"0x47 0x3044022007415aa37ce7eaa6146001ac8bdefca0ddcba0e37c5dc08c4ac99392124ebac802207d382307fd53f65778b07b9c63b6e196edeadf0be719130c5db21ff1e700d67501\",\n+    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"\",\n+    \"P2PK\"\n+],\n+[\n+    \"0x47 0x3044022069d40999786aeb2fd874f9eb2636461a062dc963471627ed8390a3a5f9556f640220350132a52415ce622f2aadd07f791c591500917ec1f8c5edbc5381ef7942534d01 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508\",\n+    \"DUP HASH160 0x14 0x1018853670f9f3b0582c5b9ee8ce93764ac32b93 EQUALVERIFY CHECKSIG\",\n+    \"\",\n+    \"P2PKH\"\n+],\n+[\n+    \"0x47 0x30440220519f2a6632ffa134c7811ea2819e9dcc951f0c7baf461f2dffdd09133f3b080a02203ec6bab5eb6619ed7f41b8701d7c6d70cfc83bb26c5c97f54b2ca6e304fc2bb581\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n+    \"\",\n+    \"P2PK anyonecanpay\"\n+],\n+[\n+    \"0x47 0x30440220279dad2170ffb5639f0a1ea71fc462ee37d75d420d86f84c978bac523c09b7f20220683b2789f5c5528a9e0a0d78f6e40db3f616cf1adb5a5fdef117d5974795cfe201 0x23 0x210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n+    \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\",\n+    \"P2SH\",\n+    \"P2SH(P2PK)\"\n+],\n+[\n+    \"0x47 0x3044022066acbfb5ac96b7cbf3f05a2aaf358c32438c45d1d7359dee9fc1ee636940735f02205606a03fd8cbf6a6fcbcba60c8abb1e385c0b5753cb57a97538159106fd3684e01 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\",\n+    \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\",\n+    \"\",\n+    \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\"\n+],\n+[\n+    \"0 0x47 0x3044022004e791dd30a64c70e55e84e150c002af9feb3ce0ab1f20e86c53d1209003927502205a60453987fcd72aebaaacebc8ce4b15449cdd79e54cc82cefb83e69dbcfeabf01 0x47 0x304402201d021808ce93dd8574cc4f99ae4f11b44305528b0aecbd9f156f08315173643802200944a0ea5c884bd86180aef76d8b1e444860776b251e47d2d6c651a1c6f9930801 0x47 0x30440220446336d7b7de05ebb5683b82b05248ec7d78e88ae8d6125985f5776c887a4cf90220674ab2b2c2f954ba1cf35457d273c90d0c0c1c224d0ae128628740e81129486801\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n+    \"\",\n+    \"3-of-3\"\n+],\n+[\n+    \"0 0x47 0x30440220288b06d057cf0eac434ed0c3be9257cc0ca144dd99c11cc8f1a49467a37d8e8002203c496c72253c528e6bc81c42e683aba974d46041a96ef7b00915c863eb2a702901 0x47 0x304402207ffb4da33f40cac839a43000a187bd76a1ee5bf95e46dc1534b38bb7bd0321db022038c078f29d1831f8eb68ffdc2634c654fb01c3467b6457b98ad220653bb2478501 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\",\n+    \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\",\n+    \"P2SH\",\n+    \"P2SH(2-of-3)\"\n+],\n+[\n+    \"0x47 0x304402200001cae94b795baaafb05db38cf24cd75560cab2c36c91e29fac7d0fd2a723a3022058e2e56e568ce7c4b2b106210d114e1faa079407a6ed4154f230667c7d3583bc01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"P2PK with too much R padding but no STRICTENC\"\n+],\n+[\n+    \"0x48 0x304502206d01de7c2a40ac2bb1231ed97f3890a1782f421d4c28b97166deff317990288f0221005e720213b089355be2cf785d81a82c59307d30e1624f450ed9ca1ebbc11cca6d01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"P2PK with too much S padding but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x30440220f3d8889602147d60d26c1d3b21b8db183eac02bf6d2fec1424c0ef377ca6fd7b02202bae8bfe39d00a432d4538a592e338b0ffc44c17d4b7056043d55063cf91f5ef01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"P2PK with too little R padding but no STRICTENC\"\n+],\n+[\n+    \"0x48 0x3045022021bf9184d94f208ac9f4757ebca9b1cbebf008cfc244fe5be1360b1b9aba0e92022100e55074f72f3a1bfddf2ea4ea7ba984f78822e136fe04c8f9c1363238e0233bd801\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"STRICTENC\",\n+    \"P2PK with high S but no LOW_S\"\n+],\n+[\n+    \"0x48 0x304502205c3e81aaf2aad0673f349035b180eba783eba7797af91c979920dea6b17a16d6022100d1d46825c68da1b325f320a3503dad27bb818227f64a38d153554bfd360c0e5301\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"LOW_S\",\n+    \"P2PK with high S but no STRICTENC\"\n+],\n+[\n+    \"0x01 0x01 0x47 0x3044022046ce33d1771b0127dd4c4cef8fdc3218ebdfa60e3793ed700292d8ebd93fb1f402201029d47a414db83e96e31443c2d8b552f971469c4800f5eff7df2f0648521aed01 0x47 0x304402205c53911ad55b054920043962bbda98cf6e57e2db1cd5611138251490baabaa8702201dc80dfceae6007e7772dc13ff6e7ca66a983cb017fe5d46d30118462d83bcf801 0x47 0x304402201937e44a4ec12364f9d32f9d25e7ecbc68aee9ef90069af80efef4c05f6ace9602206c515101c00c75710b32ff7ff8dbaf7c9a0be6e86ed14a0755b47626604f31fd01\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n+    \"\",\n+    \"3-of-3 with nonzero dummy but no NULLDUMMY\"\n+],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "424eea11f5817fa25feb0917b7d3d10dcda0993c",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 14,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c930d932bdd4e1306f60dbb89f60c9a0149468b/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c930d932bdd4e1306f60dbb89f60c9a0149468b/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=2c930d932bdd4e1306f60dbb89f60c9a0149468b",
        "patch": "@@ -34,6 +34,9 @@ using namespace std;\n using namespace json_spirit;\n using namespace boost::algorithm;\n \n+// Uncomment if you want to output updated JSON tests.\n+// #define UPDATE_JSON_TESTS\n+\n static const unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;\n \n unsigned int ParseScriptFlags(string strFlags);\n@@ -239,14 +242,14 @@ class TestBuilder\n         return *this;\n     }\n \n-    operator std::string()\n+    Array GetJSON() const\n     {\n-        DoPush();\n-        return \"[\\\"\" +\n-               FormatScript(spendTx.vin[0].scriptSig) + \"\\\", \\\"\" +\n-               FormatScript(creditTx.vout[0].scriptPubKey) + \"\\\", \\\"\" +\n-               FormatScriptFlags(flags) + \"\\\", \\\"\" +\n-               comment + \"\\\"],\\n\";\n+        Array array;\n+        array.push_back(FormatScript(spendTx.vin[0].scriptSig));\n+        array.push_back(FormatScript(creditTx.vout[0].scriptPubKey));\n+        array.push_back(FormatScriptFlags(flags));\n+        array.push_back(comment);\n+        return array;\n     }\n \n     std::string GetComment()\n@@ -377,18 +380,30 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n     BOOST_FOREACH(TestBuilder& test, good) {\n         test.Test(true);\n-        BOOST_CHECK_MESSAGE(tests_good.count(test.GetComment()) > 0, \"Missing auto script_valid test: \" + test.GetComment());\n-        BOOST_CHECK_MESSAGE(ParseScript(tests_good[test.GetComment()][1].get_str()) == test.GetScriptPubKey(), \"ScriptPubKey mismatch in auto script_valid test: \" + test.GetComment());\n-        strGood += test;\n+        if (tests_good.count(test.GetComment()) == 0) {\n+#ifndef UPDATE_JSON_TESTS\n+            BOOST_CHECK_MESSAGE(false, \"Missing auto script_valid test: \" + test.GetComment());\n+#endif\n+            strGood += write_string(Value(test.GetJSON()), true) + \",\\n\";\n+        } else {\n+            BOOST_CHECK_MESSAGE(ParseScript(tests_good[test.GetComment()][1].get_str()) == test.GetScriptPubKey(), \"ScriptPubKey mismatch in auto script_valid test: \" + test.GetComment());\n+            strGood += write_string(Value(tests_good[test.GetComment()]), true) + \",\\n\";\n+        }\n     }\n     BOOST_FOREACH(TestBuilder& test, bad) {\n         test.Test(false);\n-        BOOST_CHECK_MESSAGE(tests_bad.count(test.GetComment()) > 0, \"Missing auto script_invalid test: \" + test.GetComment());\n-        BOOST_CHECK_MESSAGE(ParseScript(tests_bad[test.GetComment()][1].get_str()) == test.GetScriptPubKey(), \"ScriptPubKey mismatch in auto script_invalid test: \" + test.GetComment());\n-        strBad += test;\n+        if (tests_bad.count(test.GetComment()) == 0) {\n+#ifndef UPDATE_JSON_TESTS\n+            BOOST_CHECK_MESSAGE(false, \"Missing auto script_invalid test: \" + test.GetComment());\n+#endif\n+            strBad += write_string(Value(test.GetJSON()), true) + \",\\n\";\n+        } else {\n+            BOOST_CHECK_MESSAGE(ParseScript(tests_bad[test.GetComment()][1].get_str()) == test.GetScriptPubKey(), \"ScriptPubKey mismatch in auto script_invalid test: \" + test.GetComment());\n+            strBad += write_string(Value(tests_bad[test.GetComment()]), true) + \",\\n\";\n+        }\n     }\n \n-#if 0\n+#ifdef UPDATE_JSON_TESTS\n     FILE* valid = fopen(\"script_valid.json.gen\", \"w\");\n     fputs(strGood.c_str(), valid);\n     fclose(valid);"
      }
    ]
  },
  {
    "sha": "ca067dc9374d7f6611853f85fd6a0b6d1deb7306",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTA2N2RjOTM3NGQ3ZjY2MTE4NTNmODVmZDZhMGI2ZDFkZWI3MzA2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-07T07:56:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-07T07:58:21Z"
      },
      "message": "Merge pull request #5053\n\n27368e7 Homebrew lang fix (Dominyk Tiller)",
      "tree": {
        "sha": "5519e64de7b59e62e66e0c09e4f758b1a99b0be6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5519e64de7b59e62e66e0c09e4f758b1a99b0be6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca067dc9374d7f6611853f85fd6a0b6d1deb7306",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUM50dAAoJEHSBCwEjRsmm7iYIAJsdcFuRKcF4ybl76YaY3bla\nQnhPLgmmcseBJl/zdrarAAEcTR8eFChJoOxQBX12MvZxJcr+LXErlxClrxdgh4Hl\n0gfJbHYOesFOo7278nZM4xZR5iImYmYFQtX/eBMY721CeumWbrdUGdzJB9x7Sl+a\naY1d0N/3NQ1lP0lYg6YmDqa2ZyDZih11OjQJfHAYSxefgEuowxSvwFcftk7/x1Wp\ndX/DiF0xeGtSJrOwPYqygKlz5ETC+t22hm6kddAZhR6I4t5EkvDyx0ZltsZQdxqF\nvcxta3QyVnIpPpI5s6tEnBBQoKVuKJNaHNlhwePJHt3VYv9Qly9mLZvNZ8j8zb0=\n=zw1g\n-----END PGP SIGNATURE-----",
        "payload": "tree 5519e64de7b59e62e66e0c09e4f758b1a99b0be6\nparent d4b571a5d32af211b43d69643822d3d2993b344f\nparent 27368e76260564268a7994d7e179a675750dbd05\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412668608 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412668701 +0200\n\nMerge pull request #5053\n\n27368e7 Homebrew lang fix (Dominyk Tiller)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca067dc9374d7f6611853f85fd6a0b6d1deb7306",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca067dc9374d7f6611853f85fd6a0b6d1deb7306",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca067dc9374d7f6611853f85fd6a0b6d1deb7306/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4b571a5d32af211b43d69643822d3d2993b344f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4b571a5d32af211b43d69643822d3d2993b344f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4b571a5d32af211b43d69643822d3d2993b344f"
      },
      {
        "sha": "27368e76260564268a7994d7e179a675750dbd05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27368e76260564268a7994d7e179a675750dbd05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27368e76260564268a7994d7e179a675750dbd05"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "87c7833bcee9eabf0d86486da42e6dd916bae500",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca067dc9374d7f6611853f85fd6a0b6d1deb7306/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca067dc9374d7f6611853f85fd6a0b6d1deb7306/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=ca067dc9374d7f6611853f85fd6a0b6d1deb7306",
        "patch": "@@ -240,7 +240,7 @@ case $host in\n \n        AC_CHECK_PROG([BREW],brew, brew)\n        if test x$BREW = xbrew; then\n-         dnl These Homebrew packages may be bottled, meaning that they won't be found\n+         dnl These Homebrew packages may be keg-only, meaning that they won't be found\n          dnl in expected paths because they may conflict with system files. Ask\n          dnl Homebrew where each one is located, then adjust paths accordingly.\n          dnl It's safe to add these paths even if the functionality is disabled by"
      }
    ]
  },
  {
    "sha": "cd3269e38e082df3370463221d399e353516ebdc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDMyNjllMzhlMDgyZGYzMzcwNDYzMjIxZDM5OWUzNTM1MTZlYmRj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-07T07:34:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-07T08:00:12Z"
      },
      "message": "contrib: revert changes to github-merge.sh in #5038",
      "tree": {
        "sha": "505d94dc6c8d62b5bc0f20a6edfa87a3596d1ab3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/505d94dc6c8d62b5bc0f20a6edfa87a3596d1ab3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd3269e38e082df3370463221d399e353516ebdc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUM52NAAoJEHSBCwEjRsmm4UcH/iprN+XBPdGOY8vlFf8vzvtW\nmuaXof/26WnK+XJD023IczXu0YB6Sdz75bvW6SzxC9651KS+UrYtkckV6a+0+57R\na69WN5LZ3LwatP5hk/52ycO1ZtUVs/VSDjArNUGW5Yy1ScrdP/GQqQyPRcJtW0KH\n9f7ugN0d0fnvShByrQI5BEkiTsU/Mc1TQec3UuYJIx/HSIsx4FAqckySZGVuH2wB\nolmuuAdSrvH9RIPdJ6TybLp+TncAElMGcWYrYxYpm3Q1TOgBP92V24CcR+hbTAA2\nA+Cj5HCGE318ySe4nRqRgLK1+AhrrbQArt8tQWnzDRM0WFVLDdJ9qijusR7Gz+Y=\n=ICgs\n-----END PGP SIGNATURE-----",
        "payload": "tree 505d94dc6c8d62b5bc0f20a6edfa87a3596d1ab3\nparent ca067dc9374d7f6611853f85fd6a0b6d1deb7306\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412667286 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412668812 +0200\n\ncontrib: revert changes to github-merge.sh in #5038\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd3269e38e082df3370463221d399e353516ebdc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd3269e38e082df3370463221d399e353516ebdc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd3269e38e082df3370463221d399e353516ebdc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca067dc9374d7f6611853f85fd6a0b6d1deb7306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca067dc9374d7f6611853f85fd6a0b6d1deb7306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca067dc9374d7f6611853f85fd6a0b6d1deb7306"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "3217a061950264ff0b3ec4df074fd03a16e0d524",
        "filename": "contrib/devtools/github-merge.sh",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd3269e38e082df3370463221d399e353516ebdc/contrib/devtools/github-merge.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd3269e38e082df3370463221d399e353516ebdc/contrib/devtools/github-merge.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.sh?ref=cd3269e38e082df3370463221d399e353516ebdc",
        "patch": "@@ -13,7 +13,7 @@\n # name $BRANCH is overwritten with the merged result, and optionally pushed.\n \n REPO=\"$(git config --get githubmerge.repository)\"\n-if [ \"d$REPO\" = \"d\" ]; then\n+if [[ \"d$REPO\" == \"d\" ]]; then\n   echo \"ERROR: No repository configured. Use this command to set:\" >&2\n   echo \"git config githubmerge.repository <owner>/<repo>\" >&2\n   echo \"In addition, you can set the following variables:\" >&2\n@@ -24,25 +24,25 @@ if [ \"d$REPO\" = \"d\" ]; then\n fi\n \n HOST=\"$(git config --get githubmerge.host)\"\n-if [ \"d$HOST\" = \"d\" ]; then\n+if [[ \"d$HOST\" == \"d\" ]]; then\n   HOST=\"git@github.com\"\n fi\n \n BRANCH=\"$(git config --get githubmerge.branch)\"\n-if [ \"d$BRANCH\" = \"d\" ]; then\n+if [[ \"d$BRANCH\" == \"d\" ]]; then\n   BRANCH=\"master\"\n fi\n \n TESTCMD=\"$(git config --get githubmerge.testcmd)\"\n \n PULL=\"$1\"\n \n-if [ \"d$PULL\" = \"d\" ]; then\n+if [[ \"d$PULL\" == \"d\" ]]; then\n   echo \"Usage: $0 pullnumber [branch]\" >&2\n   exit 2\n fi\n \n-if [ \"d$2\" != \"d\" ]; then\n+if [[ \"d$2\" != \"d\" ]]; then\n   BRANCH=\"$2\"\n fi\n \n@@ -101,7 +101,7 @@ else\n fi\n \n # Run test command if configured.\n-if [ \"d$TESTCMD\" != \"d\" ]; then\n+if [[ \"d$TESTCMD\" != \"d\" ]]; then\n   # Go up to the repository's root.\n   while [ ! -d .git ]; do cd ..; done\n   if ! $TESTCMD; then\n@@ -112,10 +112,10 @@ if [ \"d$TESTCMD\" != \"d\" ]; then\n   # Show the created merge.\n   git diff pull/\"$PULL\"/merge..pull/\"$PULL\"/local-merge >\"$TMPDIR\"/diff\n   git diff pull/\"$PULL\"/base..pull/\"$PULL\"/local-merge\n-  if [ \"$(<\"$TMPDIR\"/diff)\" != \"\" ]; then\n+  if [[ \"$(<\"$TMPDIR\"/diff)\" != \"\" ]]; then\n     echo \"WARNING: merge differs from github!\" >&2\n     read -p \"Type 'ignore' to continue. \" -r >&2\n-    if [ \"d$REPLY\" =~ ^d[iI][gG][nN][oO][rR][eE]$ ]; then\n+    if [[ \"d$REPLY\" =~ ^d[iI][gG][nN][oO][rR][eE]$ ]]; then\n       echo \"Difference with github ignored.\" >&2\n     else\n       cleanup\n@@ -124,7 +124,7 @@ if [ \"d$TESTCMD\" != \"d\" ]; then\n   fi\n   read -p \"Press 'd' to accept the diff. \" -n 1 -r >&2\n   echo\n-  if [ \"d$REPLY\" =~ ^d[dD]$ ]; then\n+  if [[ \"d$REPLY\" =~ ^d[dD]$ ]]; then\n     echo \"Diff accepted.\" >&2\n   else\n     echo \"ERROR: Diff rejected.\" >&2\n@@ -139,7 +139,7 @@ else\n   bash -i\n   read -p \"Press 'm' to accept the merge. \" -n 1 -r >&2\n   echo\n-  if [ \"d$REPLY\" =~ ^d[Mm]$ ]; then\n+  if [[ \"d$REPLY\" =~ ^d[Mm]$ ]]; then\n     echo \"Merge accepted.\" >&2\n   else\n     echo \"ERROR: Merge rejected.\" >&2\n@@ -151,8 +151,8 @@ fi\n # Sign the merge commit.\n read -p \"Press 's' to sign off on the merge. \" -n 1 -r >&2\n echo\n-if [ \"d$REPLY\" =~ ^d[Ss]$ ]; then\n-  if [ \"$(git config --get user.signingkey)\" = \"\" ]; then\n+if [[ \"d$REPLY\" =~ ^d[Ss]$ ]]; then\n+  if [[ \"$(git config --get user.signingkey)\" == \"\" ]]; then\n     echo \"WARNING: No GPG signing key set, not signing. Set one using:\" >&2\n     echo \"git config --global user.signingkey <key>\" >&2\n     git commit -q --signoff --amend --no-edit\n@@ -168,6 +168,6 @@ cleanup\n \n # Push the result.\n read -p \"Type 'push' to push the result to $HOST:$REPO, branch $BRANCH. \" -r >&2\n-if [ \"d$REPLY\" =~ ^d[Pp][Uu][Ss][Hh]$ ]; then\n+if [[ \"d$REPLY\" =~ ^d[Pp][Uu][Ss][Hh]$ ]]; then\n   git push \"$HOST\":\"$REPO\" refs/heads/\"$BRANCH\"\n fi"
      }
    ]
  },
  {
    "sha": "3eaa9462f8336e0d0a5800b10544400bdea3a03b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZWFhOTQ2MmY4MzM2ZTBkMGE1ODAwYjEwNTQ0NDAwYmRlYTNhMDNi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-07T08:16:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-07T08:17:05Z"
      },
      "message": "Merge pull request #5047\n\n3e61eb9 minor txindex documentation improvement (Cozz Lovan)",
      "tree": {
        "sha": "737d211000343ab230b0ac885a186478132b984a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/737d211000343ab230b0ac885a186478132b984a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3eaa9462f8336e0d0a5800b10544400bdea3a03b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUM6GBAAoJEHSBCwEjRsmmzyUIAKaIhIJ7QoAArW3XWanKOdAN\nmKZcVwDWDabHKNQ0qCBt76s4MAocsBaktZNY1L5rc7ViTLZDccZJSVaoWm8TPS7V\namEglzQca1mAM5qj56mKttjvBP4URiRvdB1/z+xx7khFkmGgRtFrzw6K4Ts5Q8vv\nZ+hYCnicdIHmv/ArpAt9Cl4CqoIA7t5tDXJSNW2JfwAHMiuWcWIc7cYYw9/80CCE\ndOLKX3TEMht3IJ3fAzrIIbgFtrermq9knxfZJyH7nJBTMepSKbScg9a12grJ6u/h\nFWNSYcpzqALATMCu2/Xjlj3naQXF3TI8LZhUmhcrTFIXRVkrYNm/VGv/ZCPho9c=\n=yehF\n-----END PGP SIGNATURE-----",
        "payload": "tree 737d211000343ab230b0ac885a186478132b984a\nparent cd3269e38e082df3370463221d399e353516ebdc\nparent 3e61eb9c51b57e5b38133cb35842c471044e1ad6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412669807 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412669825 +0200\n\nMerge pull request #5047\n\n3e61eb9 minor txindex documentation improvement (Cozz Lovan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaa9462f8336e0d0a5800b10544400bdea3a03b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3eaa9462f8336e0d0a5800b10544400bdea3a03b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaa9462f8336e0d0a5800b10544400bdea3a03b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd3269e38e082df3370463221d399e353516ebdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd3269e38e082df3370463221d399e353516ebdc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd3269e38e082df3370463221d399e353516ebdc"
      },
      {
        "sha": "3e61eb9c51b57e5b38133cb35842c471044e1ad6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e61eb9c51b57e5b38133cb35842c471044e1ad6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e61eb9c51b57e5b38133cb35842c471044e1ad6"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "36ba13b941fbe6310964af6725eb05036c39925d",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa9462f8336e0d0a5800b10544400bdea3a03b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa9462f8336e0d0a5800b10544400bdea3a03b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3eaa9462f8336e0d0a5800b10544400bdea3a03b",
        "patch": "@@ -237,7 +237,7 @@ std::string HelpMessage(HelpMessageMode mode)\n #if !defined(WIN32)\n     strUsage += \"  -sysperms              \" + _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\") + \"\\n\";\n #endif\n-    strUsage += \"  -txindex               \" + _(\"Maintain a full transaction index (default: 0)\") + \"\\n\";\n+    strUsage += \"  -txindex               \" + _(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: 0)\") + \"\\n\";\n \n     strUsage += \"\\n\" + _(\"Connection options:\") + \"\\n\";\n     strUsage += \"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\";\n@@ -280,7 +280,6 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += \"  -mintxfee=<amt>        \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"), FormatMoney(CWallet::minTxFee.GetFeePerK())) + \"\\n\";\n     strUsage += \"  -paytxfee=<amt>        \" + strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())) + \"\\n\";\n     strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -respendnotify=<cmd>   \" + _(\"Execute command when a network tx respends wallet tx input (%s=respend TxID, %t=wallet TxID)\") + \"\\n\";\n     strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\") + \"\\n\";\n     strUsage += \"  -spendzeroconfchange   \" + _(\"Spend unconfirmed change when sending transactions (default: 1)\") + \"\\n\";\n     strUsage += \"  -txconfirmtarget=<n>   \" + _(\"If paytxfee is not set, include enough fee so transactions are confirmed on average within n blocks (default: 1)\") + \"\\n\";"
      },
      {
        "sha": "23e647b17af726827af4d03b6be356a1be02a8a0",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3eaa9462f8336e0d0a5800b10544400bdea3a03b/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3eaa9462f8336e0d0a5800b10544400bdea3a03b/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=3eaa9462f8336e0d0a5800b10544400bdea3a03b",
        "patch": "@@ -110,6 +110,9 @@ Value getrawtransaction(const Array& params, bool fHelp)\n     if (fHelp || params.size() < 1 || params.size() > 2)\n         throw runtime_error(\n             \"getrawtransaction \\\"txid\\\" ( verbose )\\n\"\n+            \"\\nNOTE: By default this function only works sometimes. This is when the tx is in the mempool\\n\"\n+            \"or there is an unspent output in the utxo for this transaction. To make it always work,\\n\"\n+            \"you need to maintain a transaction index, using the -txindex command line option.\\n\"\n             \"\\nReturn the raw transaction data.\\n\"\n             \"\\nIf verbose=0, returns a string that is serialized, hex-encoded data for 'txid'.\\n\"\n             \"If verbose is non-zero, returns an Object with information about 'txid'.\\n\"\n@@ -202,7 +205,7 @@ Value listunspent(const Array& params, bool fHelp)\n             \"Results are an array of Objects, each of which has:\\n\"\n             \"{txid, vout, scriptPubKey, amount, confirmations}\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. minconf          (numeric, optional, default=1) The minimum confirmationsi to filter\\n\"\n+            \"1. minconf          (numeric, optional, default=1) The minimum confirmations to filter\\n\"\n             \"2. maxconf          (numeric, optional, default=9999999) The maximum confirmations to filter\\n\"\n             \"3. \\\"addresses\\\"    (string) A json array of bitcoin addresses to filter\\n\"\n             \"    [\\n\""
      }
    ]
  },
  {
    "sha": "2b5261c63690fd545a8dcf742e32ed1bb519183a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjUyNjFjNjM2OTBmZDU0NWE4ZGNmNzQyZTMyZWQxYmI1MTkxODNh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-07T08:17:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-07T08:17:55Z"
      },
      "message": "Merge pull request #5041\n\n1f9be98 Disable App Nap on OSX 10.9+ (Michael Ford)",
      "tree": {
        "sha": "42dd50f11149a0de0fb6fb4d1ec91754a39e249d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42dd50f11149a0de0fb6fb4d1ec91754a39e249d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b5261c63690fd545a8dcf742e32ed1bb519183a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUM6GzAAoJEHSBCwEjRsmmphEH/1po0HqNVuZjZQBOulLHDVfT\nm8TRzqPLO3CCDYhbNnf/LW+f8wYGUTnsbgZmYXD6X3IsfFBVDfyYXaxFxQqmDILG\n6NRAj5DqOhO2MF8oRsHx0f4mVfdq55UN8mVmdwGZFWqkEFvJCO4RpXuTdB3JDiQV\nzeXvZqFSlzCh+ZRZC74zmchv3MOWm3oJMiDjau8X4VoZyHtXzTmTloh8tVDGz0ml\nVuoiOmajcYwtiQsO2V7/qFML6TWZD2wFAEGQuGCddol29lMZHl1IinVUSdHP6124\n6z1FhBzocq725akINi/KIjHqchy4PKHa8Kwb/SrGERpEOpolNNJ3SMD402Y/yMI=\n=mA+B\n-----END PGP SIGNATURE-----",
        "payload": "tree 42dd50f11149a0de0fb6fb4d1ec91754a39e249d\nparent 3eaa9462f8336e0d0a5800b10544400bdea3a03b\nparent 1f9be984db13e9bed98d2aadb8f0577a2057f7cc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412669852 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412669875 +0200\n\nMerge pull request #5041\n\n1f9be98 Disable App Nap on OSX 10.9+ (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b5261c63690fd545a8dcf742e32ed1bb519183a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b5261c63690fd545a8dcf742e32ed1bb519183a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b5261c63690fd545a8dcf742e32ed1bb519183a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3eaa9462f8336e0d0a5800b10544400bdea3a03b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3eaa9462f8336e0d0a5800b10544400bdea3a03b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3eaa9462f8336e0d0a5800b10544400bdea3a03b"
      },
      {
        "sha": "1f9be984db13e9bed98d2aadb8f0577a2057f7cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f9be984db13e9bed98d2aadb8f0577a2057f7cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f9be984db13e9bed98d2aadb8f0577a2057f7cc"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd6edde8d285d2e139d8cad61e91dbe664fc4d6a",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b5261c63690fd545a8dcf742e32ed1bb519183a/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b5261c63690fd545a8dcf742e32ed1bb519183a/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=2b5261c63690fd545a8dcf742e32ed1bb519183a",
        "patch": "@@ -91,6 +91,9 @@\n   <key>NSHighResolutionCapable</key>\n     <string>True</string>\n \n+  <key>LSAppNapIsDisabled</key>\n+    <string>True</string>\n+  \n   <key>LSApplicationCategoryType</key>\n     <string>public.app-category.finance</string>\n </dict>"
      }
    ]
  },
  {
    "sha": "7c6cbff0e52d4b69fd823426341a4d62d29b2c16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzZjYmZmMGU1MmQ0YjY5ZmQ4MjM0MjYzNDFhNGQ2MmQyOWIyYzE2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-07T10:32:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-07T10:33:45Z"
      },
      "message": "Merge pull request #4976\n\n27c3e91 qt: add proxy to options overridden if necessary. (Cory Fields)",
      "tree": {
        "sha": "5a1d4b5db424f3ac4a12f7cf011d93a51d5acafe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a1d4b5db424f3ac4a12f7cf011d93a51d5acafe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c6cbff0e52d4b69fd823426341a4d62d29b2c16",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUM8GJAAoJEHSBCwEjRsmmPdEH+gL+4E1TP9CfwXuFp7HNjqkA\nJcEppHOrZBRMYUhLeihO/bGauIq7yJKoSpa3aN/nPYXn0JRUKr29mexoXaJ4B9bV\nN9qVuBpxegbCxTtEqrTo2p4YzBuQRiYshtxoD5wKO5XaCNyjBfbNs3yPeBLZJmQA\nPEIUZwsHRnWj1KGqNqdRsP5S8VPJ+uTbXxdPeW49sl1nagzjLDEFJs5hI5ARFPi9\nMklrL2H5PWlUFEw3JaaeVa/4C8jnTk6atjg44wh2dPfvmVs0/75sUuuwrzjxFFO8\n2oSYZb+ms7iR91cwxv3+7Gp2jJvfsESLZWyI8iWKyGfibkn/0kdpKZnT067aJ5g=\n=6sS2\n-----END PGP SIGNATURE-----",
        "payload": "tree 5a1d4b5db424f3ac4a12f7cf011d93a51d5acafe\nparent 2b5261c63690fd545a8dcf742e32ed1bb519183a\nparent 27c3e91014d65091b096b97680b95d1b130a284d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412677969 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412678025 +0200\n\nMerge pull request #4976\n\n27c3e91 qt: add proxy to options overridden if necessary. (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c6cbff0e52d4b69fd823426341a4d62d29b2c16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c6cbff0e52d4b69fd823426341a4d62d29b2c16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c6cbff0e52d4b69fd823426341a4d62d29b2c16/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b5261c63690fd545a8dcf742e32ed1bb519183a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b5261c63690fd545a8dcf742e32ed1bb519183a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b5261c63690fd545a8dcf742e32ed1bb519183a"
      },
      {
        "sha": "27c3e91014d65091b096b97680b95d1b130a284d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27c3e91014d65091b096b97680b95d1b130a284d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27c3e91014d65091b096b97680b95d1b130a284d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6db654dff71215e9e7b68fde598f100e8c9078ab",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c6cbff0e52d4b69fd823426341a4d62d29b2c16/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c6cbff0e52d4b69fd823426341a4d62d29b2c16/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=7c6cbff0e52d4b69fd823426341a4d62d29b2c16",
        "patch": "@@ -119,6 +119,8 @@ void OptionsModel::Init()\n     // Only try to set -proxy, if user has enabled fUseProxy\n     if (settings.value(\"fUseProxy\").toBool() && !SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n         addOverriddenOption(\"-proxy\");\n+    else if(!settings.value(\"fUseProxy\").toBool() && !GetArg(\"-proxy\", \"\").empty())\n+        addOverriddenOption(\"-proxy\");\n \n     // Display\n     if (!settings.contains(\"language\"))"
      }
    ]
  },
  {
    "sha": "fb5fa86bb412c2de59b3e2df4e354cd5ca67993d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjVmYTg2YmI0MTJjMmRlNTliM2UyZGY0ZTM1NGNkNWNhNjc5OTNk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-08T06:49:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-08T06:54:18Z"
      },
      "message": "Merge pull request #5050\n\n772ab0e contrib: use batched JSON-RPC in linarize-hashes (Wladimir J. van der Laan)",
      "tree": {
        "sha": "f452ae8394bbc78eccd782cfc28e64640890f277",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f452ae8394bbc78eccd782cfc28e64640890f277"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb5fa86bb412c2de59b3e2df4e354cd5ca67993d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUNN+aAAoJEHSBCwEjRsmmIj4H/ih//bUSKe8Gl/G4GZhhbnky\npC9Z00vCXSEw+9ofB/loWUmtKD0E8d5zPUIdykwSc4oxevt6cN4oDAJs9w7BEwuJ\ns/LSvYL9t858cUWmMZNlYTA1VPKyianRZwuszMpZ96PCRNOBREMqpxn0NTwVvUhK\nUMoMhUgOIve+LAGQGwHL66WurXA27xZkWDvvoGfsA0euDkDhJgEmS5oY0Dv/IMkh\nCz1tqctyHGyUf2OPzWsZzmL+hLYg8npFwIAT9AvRBO2JwEGwzez/Aw85iD1IUox6\nrj8OdC05Cpz+F0TbKYzKXGqbN6d9hwtGEoaZrHJmDUegKMzWLfELwloqs7FQZUw=\n=NOts\n-----END PGP SIGNATURE-----",
        "payload": "tree f452ae8394bbc78eccd782cfc28e64640890f277\nparent 7c6cbff0e52d4b69fd823426341a4d62d29b2c16\nparent 772ab0ea98b31020095eaf9baa6a6504957507af\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412750965 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412751258 +0200\n\nMerge pull request #5050\n\n772ab0e contrib: use batched JSON-RPC in linarize-hashes (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb5fa86bb412c2de59b3e2df4e354cd5ca67993d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb5fa86bb412c2de59b3e2df4e354cd5ca67993d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb5fa86bb412c2de59b3e2df4e354cd5ca67993d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c6cbff0e52d4b69fd823426341a4d62d29b2c16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c6cbff0e52d4b69fd823426341a4d62d29b2c16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c6cbff0e52d4b69fd823426341a4d62d29b2c16"
      },
      {
        "sha": "772ab0ea98b31020095eaf9baa6a6504957507af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/772ab0ea98b31020095eaf9baa6a6504957507af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/772ab0ea98b31020095eaf9baa6a6504957507af"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 39,
      "deletions": 32
    },
    "files": [
      {
        "sha": "dc7f6540499620738fff5bcd510970d2f400a54c",
        "filename": "contrib/linearize/linearize-hashes.py",
        "status": "modified",
        "additions": 39,
        "deletions": 32,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb5fa86bb412c2de59b3e2df4e354cd5ca67993d/contrib/linearize/linearize-hashes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb5fa86bb412c2de59b3e2df4e354cd5ca67993d/contrib/linearize/linearize-hashes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-hashes.py?ref=fb5fa86bb412c2de59b3e2df4e354cd5ca67993d",
        "patch": "@@ -2,11 +2,12 @@\n #\n # linearize-hashes.py:  List blocks in a linear, no-fork version of the chain.\n #\n-# Copyright (c) 2013 The Bitcoin developers\n+# Copyright (c) 2013-2014 The Bitcoin developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n+from __future__ import print_function\n import json\n import struct\n import re\n@@ -17,59 +18,65 @@\n settings = {}\n \n class BitcoinRPC:\n-\tOBJID = 1\n-\n \tdef __init__(self, host, port, username, password):\n \t\tauthpair = \"%s:%s\" % (username, password)\n \t\tself.authhdr = \"Basic %s\" % (base64.b64encode(authpair))\n \t\tself.conn = httplib.HTTPConnection(host, port, False, 30)\n-\tdef rpc(self, method, params=None):\n-\t\tself.OBJID += 1\n-\t\tobj = { 'version' : '1.1',\n-\t\t\t'method' : method,\n-\t\t\t'id' : self.OBJID }\n-\t\tif params is None:\n-\t\t\tobj['params'] = []\n-\t\telse:\n-\t\t\tobj['params'] = params\n+\n+\tdef execute(self, obj):\n \t\tself.conn.request('POST', '/', json.dumps(obj),\n \t\t\t{ 'Authorization' : self.authhdr,\n \t\t\t  'Content-type' : 'application/json' })\n \n \t\tresp = self.conn.getresponse()\n \t\tif resp is None:\n-\t\t\tprint \"JSON-RPC: no response\"\n+\t\t\tprint(\"JSON-RPC: no response\", file=sys.stderr)\n \t\t\treturn None\n \n \t\tbody = resp.read()\n \t\tresp_obj = json.loads(body)\n-\t\tif resp_obj is None:\n-\t\t\tprint \"JSON-RPC: cannot JSON-decode body\"\n-\t\t\treturn None\n-\t\tif 'error' in resp_obj and resp_obj['error'] != None:\n-\t\t\treturn resp_obj['error']\n-\t\tif 'result' not in resp_obj:\n-\t\t\tprint \"JSON-RPC: no result in object\"\n-\t\t\treturn None\n+\t\treturn resp_obj\n \n-\t\treturn resp_obj['result']\n-\tdef getblock(self, hash, verbose=True):\n-\t\treturn self.rpc('getblock', [hash, verbose])\n-\tdef getblockhash(self, index):\n-\t\treturn self.rpc('getblockhash', [index])\n+\t@staticmethod\n+\tdef build_request(idx, method, params):\n+\t\tobj = { 'version' : '1.1',\n+\t\t\t'method' : method,\n+\t\t\t'id' : idx }\n+\t\tif params is None:\n+\t\t\tobj['params'] = []\n+\t\telse:\n+\t\t\tobj['params'] = params\n+\t\treturn obj\n+\n+\t@staticmethod\n+\tdef response_is_error(resp_obj):\n+\t\treturn 'error' in resp_obj and resp_obj['error'] is not None\n \n-def get_block_hashes(settings):\n+def get_block_hashes(settings, max_blocks_per_call=10000):\n \trpc = BitcoinRPC(settings['host'], settings['port'],\n \t\t\t settings['rpcuser'], settings['rpcpassword'])\n \n-\tfor height in xrange(settings['min_height'], settings['max_height']+1):\n-\t\thash = rpc.getblockhash(height)\n+\theight = settings['min_height']\n+\twhile height < settings['max_height']+1:\n+\t\tnum_blocks = min(settings['max_height']+1-height, max_blocks_per_call)\n+\t\tbatch = []\n+\t\tfor x in range(num_blocks):\n+\t\t\tbatch.append(rpc.build_request(x, 'getblockhash', [height + x]))\n+\n+\t\treply = rpc.execute(batch)\n+\n+\t\tfor x,resp_obj in enumerate(reply):\n+\t\t\tif rpc.response_is_error(resp_obj):\n+\t\t\t\tprint('JSON-RPC: error at height', height+x, ': ', resp_obj['error'], file=sys.stderr)\n+\t\t\t\texit(1)\n+\t\t\tassert(resp_obj['id'] == x) # assume replies are in-sequence\n+\t\t\tprint(resp_obj['result'])\n \n-\t\tprint(hash)\n+\t\theight += num_blocks\n \n if __name__ == '__main__':\n \tif len(sys.argv) != 2:\n-\t\tprint \"Usage: linearize-hashes.py CONFIG-FILE\"\n+\t\tprint(\"Usage: linearize-hashes.py CONFIG-FILE\")\n \t\tsys.exit(1)\n \n \tf = open(sys.argv[1])\n@@ -95,7 +102,7 @@ def get_block_hashes(settings):\n \tif 'max_height' not in settings:\n \t\tsettings['max_height'] = 313000\n \tif 'rpcuser' not in settings or 'rpcpassword' not in settings:\n-\t\tprint \"Missing username and/or password in cfg file\"\n+\t\tprint(\"Missing username and/or password in cfg file\", file=stderr)\n \t\tsys.exit(1)\n \n \tsettings['port'] = int(settings['port'])"
      }
    ]
  },
  {
    "sha": "ad9cd64d3b0dd4528b37f939bcb2c9205b44db65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDljZDY0ZDNiMGRkNDUyOGIzN2Y5MzliY2IyYzkyMDViNDRkYjY1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-08T07:12:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-08T07:12:39Z"
      },
      "message": "Merge pull request #5055\n\n2c930d9 Prettify JSON tests and minimize diffs (Pieter Wuille)",
      "tree": {
        "sha": "44fa26fa7a7cd3e7b04907a2c2ff7fa0d806f9f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44fa26fa7a7cd3e7b04907a2c2ff7fa0d806f9f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad9cd64d3b0dd4528b37f939bcb2c9205b44db65",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUNOPnAAoJEHSBCwEjRsmmY80H/A5MNCnIMr7oGfd4i5xD9ctY\nfQqygWSNA8nnVqij8reYcz4m8jro4hwRPNPfLQiA/HKr9GaQ89kdQsEiIoYaGceJ\n2sD4IKUp2yhCzwt0s5e/0eZG59WpkE3loA7lJQBTcWox0hmLwf5FvQPrJRWSN3EU\nFSovCxJcdzUy4oGcX/EfTXp587o1vMc1uiwIQzZ9Sh1nf0B+4t6B0wUkGT84D6Ww\n1OsdQ85sxO5F1TJqzUG+/3kj+Yzqg2EhgiFfNQZ67H+EdOh6F8rK/lgS31K3VrGc\ng9SLeIFIPr5bA+ukemyhtMuLfGEkMLcZG9hgW/ZO3r6vsiWYbrJr+/0IuCIso18=\n=0Jp9\n-----END PGP SIGNATURE-----",
        "payload": "tree 44fa26fa7a7cd3e7b04907a2c2ff7fa0d806f9f8\nparent fb5fa86bb412c2de59b3e2df4e354cd5ca67993d\nparent 2c930d932bdd4e1306f60dbb89f60c9a0149468b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412752344 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412752359 +0200\n\nMerge pull request #5055\n\n2c930d9 Prettify JSON tests and minimize diffs (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad9cd64d3b0dd4528b37f939bcb2c9205b44db65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad9cd64d3b0dd4528b37f939bcb2c9205b44db65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad9cd64d3b0dd4528b37f939bcb2c9205b44db65/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb5fa86bb412c2de59b3e2df4e354cd5ca67993d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb5fa86bb412c2de59b3e2df4e354cd5ca67993d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb5fa86bb412c2de59b3e2df4e354cd5ca67993d"
      },
      {
        "sha": "2c930d932bdd4e1306f60dbb89f60c9a0149468b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c930d932bdd4e1306f60dbb89f60c9a0149468b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c930d932bdd4e1306f60dbb89f60c9a0149468b"
      }
    ],
    "stats": {
      "total": 219,
      "additions": 179,
      "deletions": 40
    },
    "files": [
      {
        "sha": "e62b8eeb75ef4530cb5a2f1c60ae1858ed7b56b9",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 72,
        "deletions": 13,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad9cd64d3b0dd4528b37f939bcb2c9205b44db65/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad9cd64d3b0dd4528b37f939bcb2c9205b44db65/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=ad9cd64d3b0dd4528b37f939bcb2c9205b44db65",
        "patch": "@@ -384,19 +384,78 @@ nSequences are max.\n \n [\"0x00\", \"'00' EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"],\n \n-[\"0x47 0x30440220304eff7556bba9560df47873275e64db45f3cd735998ce3f00d2e57b1bb5f31302205c0c9d14b8b80d43e2ac9b87532f1af6d8a3271262bc694ec4e14068392bb0a001\", \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"\", \"P2PK, bad sig\"],\n-[\"0x47 0x3044022037fcdb8e08f41e27588de8bc036d2c4b16eb3d09c1ba53b8f47a0a9c27722a39022058664b7a53b507e71dfafb77193e3786c3f0c119d78ce9104480ee7ece04f09301 0x21 0x03363d90d446b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\", \"DUP HASH160 0x14 0xc0834c0c158f53be706d234c38fd52de7eece656 EQUALVERIFY CHECKSIG\", \"\", \"P2PKH, bad pubkey\"],\n-[\"0x47 0x3044022035e5b6742d299861c84cebaf2ea64145ee427a95facab39e2594d6deebb0c1d602200acb16778faa2e467a59006f342f2535b1418d55ba63a8605b387b7f9ac86d9a01\", \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\", \"\", \"P2PK anyonecanpay marked with normal hashtype\"],\n-[\"0x47 0x3044022029b2b8765ca950cf75a69e80b73b7ddfcaa8b27080c2db4c23b36aae60688e790220598ff368e17872ee065aa54d7d3a590682ca5204325b23b31d7da3c4a21ae67901 0x23 0x210279be667ef9dcbbac54a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\", \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\", \"P2SH\", \"P2SH(P2PK), bad redeemscript\"],\n-[\"0x47 0x30440220647f906e63890df5ef1d3fed47ba892b31976c634281079e2bd38504fb54a1fb022021e8811f38fbe90efb6b74cb78da01d9badbac3bafdf70a861d7538a220d0b2601 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\", \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\", \"P2SH\", \"P2SH(P2PKH), bad sig\"],\n-[\"0 0x47 0x304402203ef170402f8887f2ac183f31b1f503b0bc60bfc968dd469b097ea6124aefac5002200612febadc4e4cacc086982cb85830a17af3680c1b6a3cf77c1708af7621cf1301 0 0x47 0x304402207821838251a24a2234844f68e7169e6d11945cdf052ea12bd3e4e37457aceb4402200b6b46c81361e314c740ae5133c072af5fa5c209d65d2db1679e1716f19a538101\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"\", \"3-of-3, 2 sigs\"],\n-[\"0 0 0x47 0x304402204661f7795e8db7be3132e8974e9a76d1d24b31f23df94c6fbcea07d1c205789102203f5e45a1c0b085279b58d11b36d5fea5449c3cf16f844ad10124e9b65e8777d201 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\", \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\", \"P2SH\", \"P2SH(2-of-3), 1 sig\"],\n-[\"0x47 0x304402200052bc1600ca45c71f3538720fe62a5e8548dffd137af04467598c98466e9c0a0220789318ddbc9991ee477974089220a2feb6a6298a7c93d5ff6c25a92a2f4b48d501\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"STRICTENC\", \"P2PK with too much R padding\"],\n-[\"0x48 0x304502206eb7b92628bfb3c4d2a04b65b986987bcbb1af4fceedb144d5a0437b7ee410590221005f57a52df4aa26366742eed0db182fce51fbcd7159011b0644a7c05943eb228901\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"STRICTENC\", \"P2PK with too much S padding\"],\n-[\"0x47 0x30440220d8ad1efd55a3d2b8896495c38aba72056e1b3ca4a6ca15760e843eb1a9b9907602203eb0e8f3d6bec998262dfd03eaeb0f31c4e5105965436dec77550724b3771f3201\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"STRICTENC\", \"P2PK with too little R padding\"],\n-[\"0x48 0x304502206c43e065c8a8db3bbe69015afb86a51fb2fc8870defd41d436da2a197d9d6c12022100fcec35816ee2d84ec271ad159fcabf5dd712157051169e48ac328a7818cdb51e01\", \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\", \"LOW_S,STRICTENC\", \"P2PK with high S\"],\n-[\"0x01 0x01 0x47 0x304402200e48ba1cf4d7182db94ffb57bd72ea31b5545dc0d1c512e665779b4fb2badc52022054b8388dfc074c708a75b62359b7be46402751ee40c0a111aef38a837b6ed09801 0x47 0x304402201c9820f59c49107bb30e6175cfc9ec95f897b03beb628b4bc854d2b80392aa0602200235d986ae418bcd111b8814f4c26a0ab5f475fb542a44884fc14912a97a252301 0x47 0x304402204cd7894c6f10a871f5b0c1f9c13228f8cdd4050248f0d0f498ee86be69ee3080022051bd2932c7d585eb600c7194235c74da820935f0d67972fd9545673aa1fd023301\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"NULLDUMMY\", \"3-of-3 with nonzero dummy\"],\n+[\n+    \"0x47 0x30440220304eff7556bba9560df47873275e64db45f3cd735998ce3f00d2e57b1bb5f31302205c0c9d14b8b80d43e2ac9b87532f1af6d8a3271262bc694ec4e14068392bb0a001\",\n+    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"\",\n+    \"P2PK, bad sig\"\n+],\n+[\n+    \"0x47 0x3044022037fcdb8e08f41e27588de8bc036d2c4b16eb3d09c1ba53b8f47a0a9c27722a39022058664b7a53b507e71dfafb77193e3786c3f0c119d78ce9104480ee7ece04f09301 0x21 0x03363d90d446b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\",\n+    \"DUP HASH160 0x14 0xc0834c0c158f53be706d234c38fd52de7eece656 EQUALVERIFY CHECKSIG\",\n+    \"\",\n+    \"P2PKH, bad pubkey\"\n+],\n+[\n+    \"0x47 0x3044022035e5b6742d299861c84cebaf2ea64145ee427a95facab39e2594d6deebb0c1d602200acb16778faa2e467a59006f342f2535b1418d55ba63a8605b387b7f9ac86d9a01\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n+    \"\",\n+    \"P2PK anyonecanpay marked with normal hashtype\"\n+],\n+[\n+    \"0x47 0x3044022029b2b8765ca950cf75a69e80b73b7ddfcaa8b27080c2db4c23b36aae60688e790220598ff368e17872ee065aa54d7d3a590682ca5204325b23b31d7da3c4a21ae67901 0x23 0x210279be667ef9dcbbac54a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n+    \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\",\n+    \"P2SH\",\n+    \"P2SH(P2PK), bad redeemscript\"\n+],\n+[\n+    \"0x47 0x30440220647f906e63890df5ef1d3fed47ba892b31976c634281079e2bd38504fb54a1fb022021e8811f38fbe90efb6b74cb78da01d9badbac3bafdf70a861d7538a220d0b2601 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\",\n+    \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\",\n+    \"P2SH\",\n+    \"P2SH(P2PKH), bad sig\"\n+],\n+[\n+    \"0 0x47 0x304402203ef170402f8887f2ac183f31b1f503b0bc60bfc968dd469b097ea6124aefac5002200612febadc4e4cacc086982cb85830a17af3680c1b6a3cf77c1708af7621cf1301 0 0x47 0x304402207821838251a24a2234844f68e7169e6d11945cdf052ea12bd3e4e37457aceb4402200b6b46c81361e314c740ae5133c072af5fa5c209d65d2db1679e1716f19a538101\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n+    \"\",\n+    \"3-of-3, 2 sigs\"\n+],\n+[\n+    \"0 0 0x47 0x304402204661f7795e8db7be3132e8974e9a76d1d24b31f23df94c6fbcea07d1c205789102203f5e45a1c0b085279b58d11b36d5fea5449c3cf16f844ad10124e9b65e8777d201 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\",\n+    \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\",\n+    \"P2SH\",\n+    \"P2SH(2-of-3), 1 sig\"\n+],\n+[\n+    \"0x47 0x304402200052bc1600ca45c71f3538720fe62a5e8548dffd137af04467598c98466e9c0a0220789318ddbc9991ee477974089220a2feb6a6298a7c93d5ff6c25a92a2f4b48d501\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"STRICTENC\",\n+    \"P2PK with too much R padding\"\n+],\n+[\n+    \"0x48 0x304502206eb7b92628bfb3c4d2a04b65b986987bcbb1af4fceedb144d5a0437b7ee410590221005f57a52df4aa26366742eed0db182fce51fbcd7159011b0644a7c05943eb228901\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"STRICTENC\",\n+    \"P2PK with too much S padding\"\n+],\n+[\n+    \"0x47 0x30440220d8ad1efd55a3d2b8896495c38aba72056e1b3ca4a6ca15760e843eb1a9b9907602203eb0e8f3d6bec998262dfd03eaeb0f31c4e5105965436dec77550724b3771f3201\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"STRICTENC\",\n+    \"P2PK with too little R padding\"\n+],\n+[\n+    \"0x48 0x304502206c43e065c8a8db3bbe69015afb86a51fb2fc8870defd41d436da2a197d9d6c12022100fcec35816ee2d84ec271ad159fcabf5dd712157051169e48ac328a7818cdb51e01\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"LOW_S,STRICTENC\",\n+    \"P2PK with high S\"\n+],\n+[\n+    \"0x01 0x01 0x47 0x304402200e48ba1cf4d7182db94ffb57bd72ea31b5545dc0d1c512e665779b4fb2badc52022054b8388dfc074c708a75b62359b7be46402751ee40c0a111aef38a837b6ed09801 0x47 0x304402201c9820f59c49107bb30e6175cfc9ec95f897b03beb628b4bc854d2b80392aa0602200235d986ae418bcd111b8814f4c26a0ab5f475fb542a44884fc14912a97a252301 0x47 0x304402204cd7894c6f10a871f5b0c1f9c13228f8cdd4050248f0d0f498ee86be69ee3080022051bd2932c7d585eb600c7194235c74da820935f0d67972fd9545673aa1fd023301\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n+    \"NULLDUMMY\",\n+    \"3-of-3 with nonzero dummy\"\n+],\n \n [\"The End\"]\n-\n ]"
      },
      {
        "sha": "49c7abbb312b98e77b9a023e3a9f4dcfd36e9e18",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 78,
        "deletions": 13,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad9cd64d3b0dd4528b37f939bcb2c9205b44db65/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad9cd64d3b0dd4528b37f939bcb2c9205b44db65/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=ad9cd64d3b0dd4528b37f939bcb2c9205b44db65",
        "patch": "@@ -529,19 +529,84 @@ nSequences are max.\n \n [\"0x00\", \"SIZE 0 EQUAL\", \"P2SH,STRICTENC\", \"Basic OP_0 execution\"],\n \n-[\"0x47 0x3044022007415aa37ce7eaa6146001ac8bdefca0ddcba0e37c5dc08c4ac99392124ebac802207d382307fd53f65778b07b9c63b6e196edeadf0be719130c5db21ff1e700d67501\", \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\", \"\", \"P2PK\"],\n-[\"0x47 0x3044022069d40999786aeb2fd874f9eb2636461a062dc963471627ed8390a3a5f9556f640220350132a52415ce622f2aadd07f791c591500917ec1f8c5edbc5381ef7942534d01 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508\", \"DUP HASH160 0x14 0x1018853670f9f3b0582c5b9ee8ce93764ac32b93 EQUALVERIFY CHECKSIG\", \"\", \"P2PKH\"],\n-[\"0x47 0x30440220519f2a6632ffa134c7811ea2819e9dcc951f0c7baf461f2dffdd09133f3b080a02203ec6bab5eb6619ed7f41b8701d7c6d70cfc83bb26c5c97f54b2ca6e304fc2bb581\", \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\", \"\", \"P2PK anyonecanpay\"],\n-[\"0x47 0x30440220279dad2170ffb5639f0a1ea71fc462ee37d75d420d86f84c978bac523c09b7f20220683b2789f5c5528a9e0a0d78f6e40db3f616cf1adb5a5fdef117d5974795cfe201 0x23 0x210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\", \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\", \"P2SH\", \"P2SH(P2PK)\"],\n-[\"0x47 0x3044022066acbfb5ac96b7cbf3f05a2aaf358c32438c45d1d7359dee9fc1ee636940735f02205606a03fd8cbf6a6fcbcba60c8abb1e385c0b5753cb57a97538159106fd3684e01 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\", \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\", \"\", \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\"],\n-[\"0 0x47 0x3044022004e791dd30a64c70e55e84e150c002af9feb3ce0ab1f20e86c53d1209003927502205a60453987fcd72aebaaacebc8ce4b15449cdd79e54cc82cefb83e69dbcfeabf01 0x47 0x304402201d021808ce93dd8574cc4f99ae4f11b44305528b0aecbd9f156f08315173643802200944a0ea5c884bd86180aef76d8b1e444860776b251e47d2d6c651a1c6f9930801 0x47 0x30440220446336d7b7de05ebb5683b82b05248ec7d78e88ae8d6125985f5776c887a4cf90220674ab2b2c2f954ba1cf35457d273c90d0c0c1c224d0ae128628740e81129486801\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"\", \"3-of-3\"],\n-[\"0 0x47 0x30440220288b06d057cf0eac434ed0c3be9257cc0ca144dd99c11cc8f1a49467a37d8e8002203c496c72253c528e6bc81c42e683aba974d46041a96ef7b00915c863eb2a702901 0x47 0x304402207ffb4da33f40cac839a43000a187bd76a1ee5bf95e46dc1534b38bb7bd0321db022038c078f29d1831f8eb68ffdc2634c654fb01c3467b6457b98ad220653bb2478501 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\", \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\", \"P2SH\", \"P2SH(2-of-3)\"],\n-[\"0x47 0x304402200001cae94b795baaafb05db38cf24cd75560cab2c36c91e29fac7d0fd2a723a3022058e2e56e568ce7c4b2b106210d114e1faa079407a6ed4154f230667c7d3583bc01\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"\", \"P2PK with too much R padding but no STRICTENC\"],\n-[\"0x48 0x304502206d01de7c2a40ac2bb1231ed97f3890a1782f421d4c28b97166deff317990288f0221005e720213b089355be2cf785d81a82c59307d30e1624f450ed9ca1ebbc11cca6d01\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"\", \"P2PK with too much S padding but no STRICTENC\"],\n-[\"0x47 0x30440220f3d8889602147d60d26c1d3b21b8db183eac02bf6d2fec1424c0ef377ca6fd7b02202bae8bfe39d00a432d4538a592e338b0ffc44c17d4b7056043d55063cf91f5ef01\", \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\", \"\", \"P2PK with too little R padding but no STRICTENC\"],\n-[\"0x48 0x3045022021bf9184d94f208ac9f4757ebca9b1cbebf008cfc244fe5be1360b1b9aba0e92022100e55074f72f3a1bfddf2ea4ea7ba984f78822e136fe04c8f9c1363238e0233bd801\", \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\", \"STRICTENC\", \"P2PK with high S but no LOW_S\"],\n-[\"0x48 0x304502205c3e81aaf2aad0673f349035b180eba783eba7797af91c979920dea6b17a16d6022100d1d46825c68da1b325f320a3503dad27bb818227f64a38d153554bfd360c0e5301\", \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\", \"LOW_S\", \"P2PK with high S but no STRICTENC\"],\n-[\"0x01 0x01 0x47 0x3044022046ce33d1771b0127dd4c4cef8fdc3218ebdfa60e3793ed700292d8ebd93fb1f402201029d47a414db83e96e31443c2d8b552f971469c4800f5eff7df2f0648521aed01 0x47 0x304402205c53911ad55b054920043962bbda98cf6e57e2db1cd5611138251490baabaa8702201dc80dfceae6007e7772dc13ff6e7ca66a983cb017fe5d46d30118462d83bcf801 0x47 0x304402201937e44a4ec12364f9d32f9d25e7ecbc68aee9ef90069af80efef4c05f6ace9602206c515101c00c75710b32ff7ff8dbaf7c9a0be6e86ed14a0755b47626604f31fd01\", \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\", \"\", \"3-of-3 with nonzero dummy but no NULLDUMMY\"],\n+[\n+    \"0x47 0x3044022007415aa37ce7eaa6146001ac8bdefca0ddcba0e37c5dc08c4ac99392124ebac802207d382307fd53f65778b07b9c63b6e196edeadf0be719130c5db21ff1e700d67501\",\n+    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"\",\n+    \"P2PK\"\n+],\n+[\n+    \"0x47 0x3044022069d40999786aeb2fd874f9eb2636461a062dc963471627ed8390a3a5f9556f640220350132a52415ce622f2aadd07f791c591500917ec1f8c5edbc5381ef7942534d01 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508\",\n+    \"DUP HASH160 0x14 0x1018853670f9f3b0582c5b9ee8ce93764ac32b93 EQUALVERIFY CHECKSIG\",\n+    \"\",\n+    \"P2PKH\"\n+],\n+[\n+    \"0x47 0x30440220519f2a6632ffa134c7811ea2819e9dcc951f0c7baf461f2dffdd09133f3b080a02203ec6bab5eb6619ed7f41b8701d7c6d70cfc83bb26c5c97f54b2ca6e304fc2bb581\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n+    \"\",\n+    \"P2PK anyonecanpay\"\n+],\n+[\n+    \"0x47 0x30440220279dad2170ffb5639f0a1ea71fc462ee37d75d420d86f84c978bac523c09b7f20220683b2789f5c5528a9e0a0d78f6e40db3f616cf1adb5a5fdef117d5974795cfe201 0x23 0x210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n+    \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\",\n+    \"P2SH\",\n+    \"P2SH(P2PK)\"\n+],\n+[\n+    \"0x47 0x3044022066acbfb5ac96b7cbf3f05a2aaf358c32438c45d1d7359dee9fc1ee636940735f02205606a03fd8cbf6a6fcbcba60c8abb1e385c0b5753cb57a97538159106fd3684e01 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\",\n+    \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\",\n+    \"\",\n+    \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\"\n+],\n+[\n+    \"0 0x47 0x3044022004e791dd30a64c70e55e84e150c002af9feb3ce0ab1f20e86c53d1209003927502205a60453987fcd72aebaaacebc8ce4b15449cdd79e54cc82cefb83e69dbcfeabf01 0x47 0x304402201d021808ce93dd8574cc4f99ae4f11b44305528b0aecbd9f156f08315173643802200944a0ea5c884bd86180aef76d8b1e444860776b251e47d2d6c651a1c6f9930801 0x47 0x30440220446336d7b7de05ebb5683b82b05248ec7d78e88ae8d6125985f5776c887a4cf90220674ab2b2c2f954ba1cf35457d273c90d0c0c1c224d0ae128628740e81129486801\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n+    \"\",\n+    \"3-of-3\"\n+],\n+[\n+    \"0 0x47 0x30440220288b06d057cf0eac434ed0c3be9257cc0ca144dd99c11cc8f1a49467a37d8e8002203c496c72253c528e6bc81c42e683aba974d46041a96ef7b00915c863eb2a702901 0x47 0x304402207ffb4da33f40cac839a43000a187bd76a1ee5bf95e46dc1534b38bb7bd0321db022038c078f29d1831f8eb68ffdc2634c654fb01c3467b6457b98ad220653bb2478501 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\",\n+    \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\",\n+    \"P2SH\",\n+    \"P2SH(2-of-3)\"\n+],\n+[\n+    \"0x47 0x304402200001cae94b795baaafb05db38cf24cd75560cab2c36c91e29fac7d0fd2a723a3022058e2e56e568ce7c4b2b106210d114e1faa079407a6ed4154f230667c7d3583bc01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"P2PK with too much R padding but no STRICTENC\"\n+],\n+[\n+    \"0x48 0x304502206d01de7c2a40ac2bb1231ed97f3890a1782f421d4c28b97166deff317990288f0221005e720213b089355be2cf785d81a82c59307d30e1624f450ed9ca1ebbc11cca6d01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"P2PK with too much S padding but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x30440220f3d8889602147d60d26c1d3b21b8db183eac02bf6d2fec1424c0ef377ca6fd7b02202bae8bfe39d00a432d4538a592e338b0ffc44c17d4b7056043d55063cf91f5ef01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"P2PK with too little R padding but no STRICTENC\"\n+],\n+[\n+    \"0x48 0x3045022021bf9184d94f208ac9f4757ebca9b1cbebf008cfc244fe5be1360b1b9aba0e92022100e55074f72f3a1bfddf2ea4ea7ba984f78822e136fe04c8f9c1363238e0233bd801\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"STRICTENC\",\n+    \"P2PK with high S but no LOW_S\"\n+],\n+[\n+    \"0x48 0x304502205c3e81aaf2aad0673f349035b180eba783eba7797af91c979920dea6b17a16d6022100d1d46825c68da1b325f320a3503dad27bb818227f64a38d153554bfd360c0e5301\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"LOW_S\",\n+    \"P2PK with high S but no STRICTENC\"\n+],\n+[\n+    \"0x01 0x01 0x47 0x3044022046ce33d1771b0127dd4c4cef8fdc3218ebdfa60e3793ed700292d8ebd93fb1f402201029d47a414db83e96e31443c2d8b552f971469c4800f5eff7df2f0648521aed01 0x47 0x304402205c53911ad55b054920043962bbda98cf6e57e2db1cd5611138251490baabaa8702201dc80dfceae6007e7772dc13ff6e7ca66a983cb017fe5d46d30118462d83bcf801 0x47 0x304402201937e44a4ec12364f9d32f9d25e7ecbc68aee9ef90069af80efef4c05f6ace9602206c515101c00c75710b32ff7ff8dbaf7c9a0be6e86ed14a0755b47626604f31fd01\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n+    \"\",\n+    \"3-of-3 with nonzero dummy but no NULLDUMMY\"\n+],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "424eea11f5817fa25feb0917b7d3d10dcda0993c",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 14,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad9cd64d3b0dd4528b37f939bcb2c9205b44db65/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad9cd64d3b0dd4528b37f939bcb2c9205b44db65/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=ad9cd64d3b0dd4528b37f939bcb2c9205b44db65",
        "patch": "@@ -34,6 +34,9 @@ using namespace std;\n using namespace json_spirit;\n using namespace boost::algorithm;\n \n+// Uncomment if you want to output updated JSON tests.\n+// #define UPDATE_JSON_TESTS\n+\n static const unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;\n \n unsigned int ParseScriptFlags(string strFlags);\n@@ -239,14 +242,14 @@ class TestBuilder\n         return *this;\n     }\n \n-    operator std::string()\n+    Array GetJSON() const\n     {\n-        DoPush();\n-        return \"[\\\"\" +\n-               FormatScript(spendTx.vin[0].scriptSig) + \"\\\", \\\"\" +\n-               FormatScript(creditTx.vout[0].scriptPubKey) + \"\\\", \\\"\" +\n-               FormatScriptFlags(flags) + \"\\\", \\\"\" +\n-               comment + \"\\\"],\\n\";\n+        Array array;\n+        array.push_back(FormatScript(spendTx.vin[0].scriptSig));\n+        array.push_back(FormatScript(creditTx.vout[0].scriptPubKey));\n+        array.push_back(FormatScriptFlags(flags));\n+        array.push_back(comment);\n+        return array;\n     }\n \n     std::string GetComment()\n@@ -377,18 +380,30 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n     BOOST_FOREACH(TestBuilder& test, good) {\n         test.Test(true);\n-        BOOST_CHECK_MESSAGE(tests_good.count(test.GetComment()) > 0, \"Missing auto script_valid test: \" + test.GetComment());\n-        BOOST_CHECK_MESSAGE(ParseScript(tests_good[test.GetComment()][1].get_str()) == test.GetScriptPubKey(), \"ScriptPubKey mismatch in auto script_valid test: \" + test.GetComment());\n-        strGood += test;\n+        if (tests_good.count(test.GetComment()) == 0) {\n+#ifndef UPDATE_JSON_TESTS\n+            BOOST_CHECK_MESSAGE(false, \"Missing auto script_valid test: \" + test.GetComment());\n+#endif\n+            strGood += write_string(Value(test.GetJSON()), true) + \",\\n\";\n+        } else {\n+            BOOST_CHECK_MESSAGE(ParseScript(tests_good[test.GetComment()][1].get_str()) == test.GetScriptPubKey(), \"ScriptPubKey mismatch in auto script_valid test: \" + test.GetComment());\n+            strGood += write_string(Value(tests_good[test.GetComment()]), true) + \",\\n\";\n+        }\n     }\n     BOOST_FOREACH(TestBuilder& test, bad) {\n         test.Test(false);\n-        BOOST_CHECK_MESSAGE(tests_bad.count(test.GetComment()) > 0, \"Missing auto script_invalid test: \" + test.GetComment());\n-        BOOST_CHECK_MESSAGE(ParseScript(tests_bad[test.GetComment()][1].get_str()) == test.GetScriptPubKey(), \"ScriptPubKey mismatch in auto script_invalid test: \" + test.GetComment());\n-        strBad += test;\n+        if (tests_bad.count(test.GetComment()) == 0) {\n+#ifndef UPDATE_JSON_TESTS\n+            BOOST_CHECK_MESSAGE(false, \"Missing auto script_invalid test: \" + test.GetComment());\n+#endif\n+            strBad += write_string(Value(test.GetJSON()), true) + \",\\n\";\n+        } else {\n+            BOOST_CHECK_MESSAGE(ParseScript(tests_bad[test.GetComment()][1].get_str()) == test.GetScriptPubKey(), \"ScriptPubKey mismatch in auto script_invalid test: \" + test.GetComment());\n+            strBad += write_string(Value(tests_bad[test.GetComment()]), true) + \",\\n\";\n+        }\n     }\n \n-#if 0\n+#ifdef UPDATE_JSON_TESTS\n     FILE* valid = fopen(\"script_valid.json.gen\", \"w\");\n     fputs(strGood.c_str(), valid);\n     fclose(valid);"
      }
    ]
  },
  {
    "sha": "6860a55ea0c07eff56882efa7499bed35b173397",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODYwYTU1ZWEwYzA3ZWZmNTY4ODJlZmE3NDk5YmVkMzViMTczMzk3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-08T07:16:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-08T07:16:19Z"
      },
      "message": "Merge pull request #4979\n\nde10efd add -timeout default as constant and use them (Philip Kaufmann)",
      "tree": {
        "sha": "8adbe700d952c8d842dcaa6f313ed8cd05364842",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8adbe700d952c8d842dcaa6f313ed8cd05364842"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6860a55ea0c07eff56882efa7499bed35b173397",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUNOTDAAoJEHSBCwEjRsmmp+QIAII6T1BG5zlqw/N5fqKP9E6q\nTD5bkR2NtvtYoe1pB7hT0qngeBU9+N5denSnLw9Z4Y6RLiCxe+rvyROKRxbR+6vd\ni+SlqaKojQ3R8OnV50pA7EK8ugSHvtDwfXS7ElQmCl+oAlUIumh7NNxfEPxRfqr+\ndjxAhm+GoXGMl3KcKBXw2dMvpbCCW5KZgKYpgN5A1XtQqbezPz25oU7wcbqFfn63\n30FqmniBm2QXu695FJfdD/Ezlig3dLs2c7y91LIaWURfXDdFfXaLSCeJEWV+volt\ns/g6UOLkXiFnSmeIAjUOARipv6hViOtk0uinO5a2DOGtdHt6iJZBYbyqbL+A80I=\n=sErN\n-----END PGP SIGNATURE-----",
        "payload": "tree 8adbe700d952c8d842dcaa6f313ed8cd05364842\nparent ad9cd64d3b0dd4528b37f939bcb2c9205b44db65\nparent de10efd154d6c02fe8549a2dc9649a96cf601fd2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412752563 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412752579 +0200\n\nMerge pull request #4979\n\nde10efd add -timeout default as constant and use them (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6860a55ea0c07eff56882efa7499bed35b173397",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6860a55ea0c07eff56882efa7499bed35b173397",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6860a55ea0c07eff56882efa7499bed35b173397/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad9cd64d3b0dd4528b37f939bcb2c9205b44db65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad9cd64d3b0dd4528b37f939bcb2c9205b44db65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad9cd64d3b0dd4528b37f939bcb2c9205b44db65"
      },
      {
        "sha": "de10efd154d6c02fe8549a2dc9649a96cf601fd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de10efd154d6c02fe8549a2dc9649a96cf601fd2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de10efd154d6c02fe8549a2dc9649a96cf601fd2"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "97d0f585274cc4710c371e97e09669f75d1e40d7",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6860a55ea0c07eff56882efa7499bed35b173397/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6860a55ea0c07eff56882efa7499bed35b173397/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6860a55ea0c07eff56882efa7499bed35b173397",
        "patch": "@@ -260,7 +260,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -port=<port>           \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\";\n     strUsage += \"  -proxy=<ip:port>       \" + _(\"Connect through SOCKS5 proxy\") + \"\\n\";\n     strUsage += \"  -seednode=<ip>         \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\";\n-    strUsage += \"  -timeout=<n>           \" + _(\"Specify connection timeout in milliseconds (default: 5000)\") + \"\\n\";\n+    strUsage += \"  -timeout=<n>           \" + strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT) + \"\\n\";\n #ifdef USE_UPNP\n #if USE_UPNP\n     strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 1 when listening)\") + \"\\n\";\n@@ -640,12 +640,9 @@ bool AppInit2(boost::thread_group& threadGroup)\n     bool fDisableWallet = GetBoolArg(\"-disablewallet\", false);\n #endif\n \n-    if (mapArgs.count(\"-timeout\"))\n-    {\n-        int nNewTimeout = GetArg(\"-timeout\", 5000);\n-        if (nNewTimeout > 0 && nNewTimeout < 600000)\n-            nConnectTimeout = nNewTimeout;\n-    }\n+    nConnectTimeout = GetArg(\"-timeout\", DEFAULT_CONNECT_TIMEOUT);\n+    if (nConnectTimeout <= 0)\n+        nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n \n     // Continue to put \"/P2SH/\" in the coinbase to monitor\n     // BIP16 support."
      },
      {
        "sha": "b3d1001547e5123ec1873e38c85a212a0f672ab6",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6860a55ea0c07eff56882efa7499bed35b173397/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6860a55ea0c07eff56882efa7499bed35b173397/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=6860a55ea0c07eff56882efa7499bed35b173397",
        "patch": "@@ -40,7 +40,7 @@ using namespace std;\n static proxyType proxyInfo[NET_MAX];\n static CService nameProxy;\n static CCriticalSection cs_proxyInfos;\n-int nConnectTimeout = 5000;\n+int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n bool fNameLookup = false;\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };"
      },
      {
        "sha": "1455cd8c33d342f522d24e146786f7f278252a5d",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6860a55ea0c07eff56882efa7499bed35b173397/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6860a55ea0c07eff56882efa7499bed35b173397/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=6860a55ea0c07eff56882efa7499bed35b173397",
        "patch": "@@ -19,6 +19,9 @@\n extern int nConnectTimeout;\n extern bool fNameLookup;\n \n+/** -timeout default */\n+static const int DEFAULT_CONNECT_TIMEOUT = 5000;\n+\n #ifdef WIN32\n // In MSVC, this is defined as a macro, undefine it to prevent a compile and link error\n #undef SetPort"
      }
    ]
  },
  {
    "sha": "97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2EzNGMyOGQ1NjhjYjhiMjE3MWQ4ZGQ4ZWIxMmNhOGFmYjA4YTdi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-08T07:46:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-08T07:47:41Z"
      },
      "message": "Merge pull request #5051\n\naedc74d contrib: make linearize-data.py cope with out-of-order blocks (Wladimir J. van der Laan)",
      "tree": {
        "sha": "5be692c6761b230ee26bf3d650dbbaa0f070bb1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5be692c6761b230ee26bf3d650dbbaa0f070bb1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUNOwdAAoJEHSBCwEjRsmmczIIALMh+U3fKhjEsCqC7fH/lvru\nB3a/AwleRfOmkncS4R5lLCbe6QP1O9kmDrQlTnwxH5uNiyGXWiWdiGxmIRXN9ZF/\n38iWU+i3qYNxgjllx70L1wR7BU06A7jO/54AIUzPiZ481uNIyoIs58L7OakBXwFY\n7Mle9L0LDtJbcqbjY4P1F5A189YII7m4aZZ30MqDwcfEHNb5g4VssYliC4KzHbU7\n76nCDjTwcawwYBdQpXou5D9w4BS48yvdsomtHTFYDafYS2ukhlvT9jqFiOjm1La2\n09HlT3ea5rMofUxdoWGOFHLWbTu7jwgY3ufTWxyKX0vOuGnsVtEW3W5tCsfmTiM=\n=jbIC\n-----END PGP SIGNATURE-----",
        "payload": "tree 5be692c6761b230ee26bf3d650dbbaa0f070bb1a\nparent 6860a55ea0c07eff56882efa7499bed35b173397\nparent aedc74dfa688306c5a139a88782da74f69ba6757\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412754408 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412754461 +0200\n\nMerge pull request #5051\n\naedc74d contrib: make linearize-data.py cope with out-of-order blocks (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6860a55ea0c07eff56882efa7499bed35b173397",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6860a55ea0c07eff56882efa7499bed35b173397",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6860a55ea0c07eff56882efa7499bed35b173397"
      },
      {
        "sha": "aedc74dfa688306c5a139a88782da74f69ba6757",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aedc74dfa688306c5a139a88782da74f69ba6757",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aedc74dfa688306c5a139a88782da74f69ba6757"
      }
    ],
    "stats": {
      "total": 260,
      "additions": 162,
      "deletions": 98
    },
    "files": [
      {
        "sha": "e0fef13886d92aa96b6172e8eab7116895fd09f7",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b",
        "patch": "@@ -15,3 +15,5 @@ output_file=/home/example/Downloads/bootstrap.dat\n hashlist=hashlist.txt\n split_year=1\n \n+# Maxmimum size in bytes of out-of-order blocks cache in memory\n+out_of_order_cache_sz = 100000000"
      },
      {
        "sha": "2dac3a614b03180b7d6804cd7d195e3e2a92e7c2",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 160,
        "deletions": 98,
        "changes": 258,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b",
        "patch": "@@ -2,11 +2,12 @@\n #\n # linearize-data.py: Construct a linear, no-fork version of the chain.\n #\n-# Copyright (c) 2013 The Bitcoin developers\n+# Copyright (c) 2013-2014 The Bitcoin developers\n # Distributed under the MIT/X11 software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n \n+from __future__ import print_function, division\n import json\n import struct\n import re\n@@ -17,10 +18,10 @@\n import hashlib\n import datetime\n import time\n+from collections import namedtuple\n \n settings = {}\n \n-\n def uint32(x):\n \treturn x & 0xffffffffL\n \n@@ -78,116 +79,174 @@ def get_block_hashes(settings):\n \n \treturn blkindex\n \n-def mkblockset(blkindex):\n+def mkblockmap(blkindex):\n \tblkmap = {}\n-\tfor hash in blkindex:\n-\t\tblkmap[hash] = True\n+\tfor height,hash in enumerate(blkindex):\n+\t\tblkmap[hash] = height\n \treturn blkmap\n \n-def copydata(settings, blkindex, blkset):\n-\tinFn = 0\n-\tinF = None\n-\toutFn = 0\n-\toutsz = 0\n-\toutF = None\n-\toutFname = None\n-\tblkCount = 0\n-\n-\tlastDate = datetime.datetime(2000, 1, 1)\n-\thighTS = 1408893517 - 315360000\n-\ttimestampSplit = False\n-\tfileOutput = True\n-\tsetFileTime = False\n-\tmaxOutSz = settings['max_out_sz']\n-\tif 'output' in settings:\n-\t\tfileOutput = False\n-\tif settings['file_timestamp'] != 0:\n-\t\tsetFileTime = True\n-\tif settings['split_timestamp'] != 0:\n-\t\ttimestampSplit = True\n-\n-\twhile True:\n-\t\tif not inF:\n-\t\t\tfname = \"%s/blk%05d.dat\" % (settings['input'], inFn)\n-\t\t\tprint(\"Input file\" + fname)\n-\t\t\ttry:\n-\t\t\t\tinF = open(fname, \"rb\")\n-\t\t\texcept IOError:\n-\t\t\t\tprint \"Done\"\n-\t\t\t\treturn\n-\n-\t\tinhdr = inF.read(8)\n-\t\tif (not inhdr or (inhdr[0] == \"\\0\")):\n-\t\t\tinF.close()\n-\t\t\tinF = None\n-\t\t\tinFn = inFn + 1\n-\t\t\tcontinue\n-\n-\t\tinMagic = inhdr[:4]\n-\t\tif (inMagic != settings['netmagic']):\n-\t\t\tprint(\"Invalid magic:\" + inMagic)\n-\t\t\treturn\n-\t\tinLenLE = inhdr[4:]\n-\t\tsu = struct.unpack(\"<I\", inLenLE)\n-\t\tinLen = su[0]\n-\t\trawblock = inF.read(inLen)\n-\t\tblk_hdr = rawblock[:80]\n-\n-\t\thash_str = calc_hash_str(blk_hdr)\n-\t\tif not hash_str in blkset:\n-\t\t\tprint(\"Skipping unknown block \" + hash_str)\n-\t\t\tcontinue\n-\n-\t\tif blkindex[blkCount] != hash_str:\n-\t\t\tprint(\"Out of order block.\")\n-\t\t\tprint(\"Expected \" + blkindex[blkCount])\n-\t\t\tprint(\"Got \" + hash_str)\n-\t\t\tsys.exit(1)\n-\n-\t\tif not fileOutput and ((outsz + inLen) > maxOutSz):\n-\t\t\toutF.close()\n-\t\t\tif setFileTime:\n+# Block header and extent on disk\n+BlockExtent = namedtuple('BlockExtent', ['fn', 'offset', 'inhdr', 'blkhdr', 'size'])\n+\n+class BlockDataCopier:\n+\tdef __init__(self, settings, blkindex, blkmap):\n+\t\tself.settings = settings\n+\t\tself.blkindex = blkindex\n+\t\tself.blkmap = blkmap\n+\n+\t\tself.inFn = 0\n+\t\tself.inF = None\n+\t\tself.outFn = 0\n+\t\tself.outsz = 0\n+\t\tself.outF = None\n+\t\tself.outFname = None\n+\t\tself.blkCountIn = 0\n+\t\tself.blkCountOut = 0\n+\n+\t\tself.lastDate = datetime.datetime(2000, 1, 1)\n+\t\tself.highTS = 1408893517 - 315360000\n+\t\tself.timestampSplit = False\n+\t\tself.fileOutput = True\n+\t\tself.setFileTime = False\n+\t\tself.maxOutSz = settings['max_out_sz']\n+\t\tif 'output' in settings:\n+\t\t\tself.fileOutput = False\n+\t\tif settings['file_timestamp'] != 0:\n+\t\t\tself.setFileTime = True\n+\t\tif settings['split_timestamp'] != 0:\n+\t\t\tself.timestampSplit = True\n+        # Extents and cache for out-of-order blocks\n+\t\tself.blockExtents = {}\n+\t\tself.outOfOrderData = {}\n+\t\tself.outOfOrderSize = 0 # running total size for items in outOfOrderData\n+\n+\tdef writeBlock(self, inhdr, blk_hdr, rawblock):\n+\t\tif not self.fileOutput and ((self.outsz + self.inLen) > self.maxOutSz):\n+\t\t\tself.outF.close()\n+\t\t\tif self.setFileTime:\n \t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n-\t\t\toutF = None\n-\t\t\toutFname = None\n-\t\t\toutFn = outFn + 1\n-\t\t\toutsz = 0\n+\t\t\tself.outF = None\n+\t\t\tself.outFname = None\n+\t\t\tself.outFn = outFn + 1\n+\t\t\tself.outsz = 0\n \n \t\t(blkDate, blkTS) = get_blk_dt(blk_hdr)\n-\t\tif timestampSplit and (blkDate > lastDate):\n+\t\tif self.timestampSplit and (blkDate > self.lastDate):\n \t\t\tprint(\"New month \" + blkDate.strftime(\"%Y-%m\") + \" @ \" + hash_str)\n \t\t\tlastDate = blkDate\n \t\t\tif outF:\n \t\t\t\toutF.close()\n \t\t\t\tif setFileTime:\n \t\t\t\t\tos.utime(outFname, (int(time.time()), highTS))\n-\t\t\t\toutF = None\n-\t\t\t\toutFname = None\n-\t\t\t\toutFn = outFn + 1\n-\t\t\t\toutsz = 0\n-\n-\t\tif not outF:\n-\t\t\tif fileOutput:\n-\t\t\t\toutFname = settings['output_file']\n+\t\t\t\tself.outF = None\n+\t\t\t\tself.outFname = None\n+\t\t\t\tself.outFn = self.outFn + 1\n+\t\t\t\tself.outsz = 0\n+\n+\t\tif not self.outF:\n+\t\t\tif self.fileOutput:\n+\t\t\t\toutFname = self.settings['output_file']\n \t\t\telse:\n-\t\t\t\toutFname = \"%s/blk%05d.dat\" % (settings['output'], outFn)\n+\t\t\t\toutFname = \"%s/blk%05d.dat\" % (self.settings['output'], outFn)\n \t\t\tprint(\"Output file\" + outFname)\n-\t\t\toutF = open(outFname, \"wb\")\n-\n-\t\toutF.write(inhdr)\n-\t\toutF.write(rawblock)\n-\t\toutsz = outsz + inLen + 8\n-\n-\t\tblkCount = blkCount + 1\n-\t\tif blkTS > highTS:\n-\t\t\thighTS = blkTS\n-\n-\t\tif (blkCount % 1000) == 0:\n-\t\t\tprint(\"Wrote \" + str(blkCount) + \" blocks\")\n+\t\t\tself.outF = open(outFname, \"wb\")\n+\n+\t\tself.outF.write(inhdr)\n+\t\tself.outF.write(blk_hdr)\n+\t\tself.outF.write(rawblock)\n+\t\tself.outsz = self.outsz + len(inhdr) + len(blk_hdr) + len(rawblock)\n+\n+\t\tself.blkCountOut = self.blkCountOut + 1\n+\t\tif blkTS > self.highTS:\n+\t\t\tself.highTS = blkTS\n+\n+\t\tif (self.blkCountOut % 1000) == 0:\n+\t\t\tprint('%i blocks scanned, %i blocks written (of %i, %.1f%% complete)' % \n+\t\t\t\t\t(self.blkCountIn, self.blkCountOut, len(self.blkindex), 100.0 * self.blkCountOut / len(self.blkindex)))\n+\n+\tdef inFileName(self, fn):\n+\t\treturn \"%s/blk%05d.dat\" % (self.settings['input'], fn)\n+\n+\tdef fetchBlock(self, extent):\n+\t\t'''Fetch block contents from disk given extents'''\n+\t\twith open(self.inFileName(extent.fn), \"rb\") as f:\n+\t\t\tf.seek(extent.offset)\n+\t\t\treturn f.read(extent.size)\n+\n+\tdef copyOneBlock(self):\n+\t\t'''Find the next block to be written in the input, and copy it to the output.'''\n+\t\textent = self.blockExtents.pop(self.blkCountOut)\n+\t\tif self.blkCountOut in self.outOfOrderData:\n+\t\t\t# If the data is cached, use it from memory and remove from the cache\n+\t\t\trawblock = self.outOfOrderData.pop(self.blkCountOut)\n+\t\t\tself.outOfOrderSize -= len(rawblock)\n+\t\telse: # Otherwise look up data on disk\n+\t\t\trawblock = self.fetchBlock(extent)\n+\n+\t\tself.writeBlock(extent.inhdr, extent.blkhdr, rawblock)\n+\n+\tdef run(self):\n+\t\twhile self.blkCountOut < len(self.blkindex):\n+\t\t\tif not self.inF:\n+\t\t\t\tfname = self.inFileName(self.inFn)\n+\t\t\t\tprint(\"Input file\" + fname)\n+\t\t\t\ttry:\n+\t\t\t\t\tself.inF = open(fname, \"rb\")\n+\t\t\t\texcept IOError:\n+\t\t\t\t\tprint(\"Premature end of block data\")\n+\t\t\t\t\treturn\n+\n+\t\t\tinhdr = self.inF.read(8)\n+\t\t\tif (not inhdr or (inhdr[0] == \"\\0\")):\n+\t\t\t\tself.inF.close()\n+\t\t\t\tself.inF = None\n+\t\t\t\tself.inFn = self.inFn + 1\n+\t\t\t\tcontinue\n+\n+\t\t\tinMagic = inhdr[:4]\n+\t\t\tif (inMagic != self.settings['netmagic']):\n+\t\t\t\tprint(\"Invalid magic:\" + inMagic)\n+\t\t\t\treturn\n+\t\t\tinLenLE = inhdr[4:]\n+\t\t\tsu = struct.unpack(\"<I\", inLenLE)\n+\t\t\tinLen = su[0] - 80 # length without header\n+\t\t\tblk_hdr = self.inF.read(80)\n+\t\t\tinExtent = BlockExtent(self.inFn, self.inF.tell(), inhdr, blk_hdr, inLen)\n+\n+\t\t\thash_str = calc_hash_str(blk_hdr)\n+\t\t\tif not hash_str in blkmap:\n+\t\t\t\tprint(\"Skipping unknown block \" + hash_str)\n+\t\t\t\tself.inF.seek(inLen, os.SEEK_CUR)\n+\t\t\t\tcontinue\n+\n+\t\t\tblkHeight = self.blkmap[hash_str]\n+\t\t\tself.blkCountIn += 1\n+\n+\t\t\tif self.blkCountOut == blkHeight:\n+\t\t\t\t# If in-order block, just copy\n+\t\t\t\trawblock = self.inF.read(inLen)\n+\t\t\t\tself.writeBlock(inhdr, blk_hdr, rawblock)\n+\n+\t\t\t\t# See if we can catch up to prior out-of-order blocks\n+\t\t\t\twhile self.blkCountOut in self.blockExtents:\n+\t\t\t\t\tself.copyOneBlock()\n+\n+\t\t\telse: # If out-of-order, skip over block data for now\n+\t\t\t\tself.blockExtents[blkHeight] = inExtent\n+\t\t\t\tif self.outOfOrderSize < self.settings['out_of_order_cache_sz']:\n+\t\t\t\t\t# If there is space in the cache, read the data\n+\t\t\t\t\t# Reading the data in file sequence instead of seeking and fetching it later is preferred,\n+\t\t\t\t\t# but we don't want to fill up memory\n+\t\t\t\t\tself.outOfOrderData[blkHeight] = self.inF.read(inLen)\n+\t\t\t\t\tself.outOfOrderSize += inLen\n+\t\t\t\telse: # If no space in cache, seek forward\n+\t\t\t\t\tself.inF.seek(inLen, os.SEEK_CUR)\n+\n+\t\tprint(\"Done (%i blocks written)\" % (self.blkCountOut))\n \n if __name__ == '__main__':\n \tif len(sys.argv) != 2:\n-\t\tprint \"Usage: linearize-data.py CONFIG-FILE\"\n+\t\tprint(\"Usage: linearize-data.py CONFIG-FILE\")\n \t\tsys.exit(1)\n \n \tf = open(sys.argv[1])\n@@ -216,22 +275,25 @@ def copydata(settings, blkindex, blkset):\n \t\tsettings['split_timestamp'] = 0\n \tif 'max_out_sz' not in settings:\n \t\tsettings['max_out_sz'] = 1000L * 1000 * 1000\n+\tif 'out_of_order_cache_sz' not in settings:\n+\t\tsettings['out_of_order_cache_sz'] = 100 * 1000 * 1000\n \n \tsettings['max_out_sz'] = long(settings['max_out_sz'])\n \tsettings['split_timestamp'] = int(settings['split_timestamp'])\n \tsettings['file_timestamp'] = int(settings['file_timestamp'])\n \tsettings['netmagic'] = settings['netmagic'].decode('hex')\n+\tsettings['out_of_order_cache_sz'] = int(settings['out_of_order_cache_sz'])\n \n \tif 'output_file' not in settings and 'output' not in settings:\n \t\tprint(\"Missing output file / directory\")\n \t\tsys.exit(1)\n \n \tblkindex = get_block_hashes(settings)\n-\tblkset = mkblockset(blkindex)\n+\tblkmap = mkblockmap(blkindex)\n \n-\tif not \"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\" in blkset:\n+\tif not \"000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\" in blkmap:\n \t\tprint(\"not found\")\n \telse:\n-\t\tcopydata(settings, blkindex, blkset)\n+\t\tBlockDataCopier(settings, blkindex, blkmap).run()\n \n "
      }
    ]
  },
  {
    "sha": "d4a42334d447cad48fb3996cad0fd5c945b75571",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGE0MjMzNGQ0NDdjYWQ0OGZiMzk5NmNhZDBmZDVjOTQ1Yjc1NTcx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-08T21:57:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-08T21:58:16Z"
      },
      "message": "Merge pull request #4834\n\n7c70438 Get rid of the dummy CCoinsViewCache constructor arg (Pieter Wuille)\ned27e53 Add coins_tests with a large randomized CCoinViewCache test. (Pieter Wuille)\n058b08c Do not keep fully spent but unwritten CCoins entries cached. (Pieter Wuille)\nc9d1a81 Get rid of CCoinsView's SetCoins and SetBestBlock. (Pieter Wuille)\nf28aec0 Use ModifyCoins instead of mutable GetCoins. (Pieter Wuille)",
      "tree": {
        "sha": "ed1c616af0038cf7fb5a5b95e3c2dc5eddbf5fdc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed1c616af0038cf7fb5a5b95e3c2dc5eddbf5fdc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4a42334d447cad48fb3996cad0fd5c945b75571",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUNbN4AAoJEFeJbS/48LZXTygMAJXJGsRu6hsTeV4ul9/VoCFS\nkRgUZPDOWvfA96RONnvetH7IlfPjelKWC8w+qciKl8Tq+dexXf8csJ8NUGl+O8y3\ngi2+vhd/XQ8k1hnhzUC82d4N+dqvQGIC8dOXbJUAq25fyE+a/1CrvTvMZFDcdQVh\ne2ausbEWQ+miw8EEcniZgplDNUtfTUHMlrV5jJkW9QJSmyJvlIs1HcsHUybZVrSC\nu7ddmjOIt6Ucg56mBXZd3chh10KdIJLobEGZ6tiETSi6/YHPum5gikEpmsSelFew\neCYODQ6kRWxDcLKnOTzhcbHUpsF9tzuKTXEGj7vzfKpfxwlGEB2XZig6mODuJprK\nV/CTJ7lBljkjof6LASXeSfkovauX299WBicawvx8I1v369YrWmzloEJc4InnV5EE\nz5AVbSvyS1/NUfY9a7PoHcqb+HBzgSpRS6DwuLCiRjBobhYrWfwKssuiP8BXKJtx\npC26oG9dnIGp5359Z2LMAMnEk2yjcK1Oa8U1uHvqRg==\n=2+1h\n-----END PGP SIGNATURE-----",
        "payload": "tree ed1c616af0038cf7fb5a5b95e3c2dc5eddbf5fdc\nparent 97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b\nparent 7c70438dc67547e83953ba0343a071fae304ce65\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1412805451 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1412805496 -0700\n\nMerge pull request #4834\n\n7c70438 Get rid of the dummy CCoinsViewCache constructor arg (Pieter Wuille)\ned27e53 Add coins_tests with a large randomized CCoinViewCache test. (Pieter Wuille)\n058b08c Do not keep fully spent but unwritten CCoins entries cached. (Pieter Wuille)\nc9d1a81 Get rid of CCoinsView's SetCoins and SetBestBlock. (Pieter Wuille)\nf28aec0 Use ModifyCoins instead of mutable GetCoins. (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4a42334d447cad48fb3996cad0fd5c945b75571",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4a42334d447cad48fb3996cad0fd5c945b75571",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4a42334d447cad48fb3996cad0fd5c945b75571/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97a34c28d568cb8b2171d8dd8eb12ca8afb08a7b"
      },
      {
        "sha": "7c70438dc67547e83953ba0343a071fae304ce65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c70438dc67547e83953ba0343a071fae304ce65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c70438dc67547e83953ba0343a071fae304ce65"
      }
    ],
    "stats": {
      "total": 540,
      "additions": 393,
      "deletions": 147
    },
    "files": [
      {
        "sha": "99ac09e1a4741dbc36d0d30f8a7bcf71802e76a0",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -44,6 +44,7 @@ BITCOIN_TESTS =\\\n   test/checkblock_tests.cpp \\\n   test/Checkpoints_tests.cpp \\\n   test/compress_tests.cpp \\\n+  test/coins_tests.cpp \\\n   test/crypto_tests.cpp \\\n   test/DoS_tests.cpp \\\n   test/getarg_tests.cpp \\"
      },
      {
        "sha": "da37e60c7f4a5d2fda6bebe0bbb5dd4bfc59e24c",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -340,7 +340,7 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n     CMutableTransaction mergedTx(txVariants[0]);\n     bool fComplete = true;\n     CCoinsView viewDummy;\n-    CCoinsViewCache view(viewDummy);\n+    CCoinsViewCache view(&viewDummy);\n \n     if (!registers.count(\"privatekeys\"))\n         throw runtime_error(\"privatekeys register variable must be set.\");\n@@ -384,21 +384,19 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n             vector<unsigned char> pkData(ParseHexUV(prevOut, \"scriptPubKey\"));\n             CScript scriptPubKey(pkData.begin(), pkData.end());\n \n-            CCoins coins;\n-            if (view.GetCoins(txid, coins)) {\n-                if (coins.IsAvailable(nOut) && coins.vout[nOut].scriptPubKey != scriptPubKey) {\n+            {\n+                CCoinsModifier coins = view.ModifyCoins(txid);\n+                if (coins->IsAvailable(nOut) && coins->vout[nOut].scriptPubKey != scriptPubKey) {\n                     string err(\"Previous output scriptPubKey mismatch:\\n\");\n-                    err = err + coins.vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n+                    err = err + coins->vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n                         scriptPubKey.ToString();\n                     throw runtime_error(err);\n                 }\n-                // what todo if txid is known, but the actual output isn't?\n+                if ((unsigned int)nOut >= coins->vout.size())\n+                    coins->vout.resize(nOut+1);\n+                coins->vout[nOut].scriptPubKey = scriptPubKey;\n+                coins->vout[nOut].nValue = 0; // we don't know the actual output value\n             }\n-            if ((unsigned int)nOut >= coins.vout.size())\n-                coins.vout.resize(nOut+1);\n-            coins.vout[nOut].scriptPubKey = scriptPubKey;\n-            coins.vout[nOut].nValue = 0; // we don't know the actual output value\n-            view.SetCoins(txid, coins);\n \n             // if redeemScript given and private keys given,\n             // add redeemScript to the tempKeystore so it can be signed:"
      },
      {
        "sha": "e4f3e67aeb679ed5799a36ae6e47292193434a9f",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 80,
        "deletions": 37,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -53,84 +53,90 @@ bool CCoins::Spend(int nPos) {\n \n \n bool CCoinsView::GetCoins(const uint256 &txid, CCoins &coins) const { return false; }\n-bool CCoinsView::SetCoins(const uint256 &txid, const CCoins &coins) { return false; }\n bool CCoinsView::HaveCoins(const uint256 &txid) const { return false; }\n uint256 CCoinsView::GetBestBlock() const { return uint256(0); }\n-bool CCoinsView::SetBestBlock(const uint256 &hashBlock) { return false; }\n bool CCoinsView::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return false; }\n bool CCoinsView::GetStats(CCoinsStats &stats) const { return false; }\n \n \n-CCoinsViewBacked::CCoinsViewBacked(CCoinsView &viewIn) : base(&viewIn) { }\n+CCoinsViewBacked::CCoinsViewBacked(CCoinsView *viewIn) : base(viewIn) { }\n bool CCoinsViewBacked::GetCoins(const uint256 &txid, CCoins &coins) const { return base->GetCoins(txid, coins); }\n-bool CCoinsViewBacked::SetCoins(const uint256 &txid, const CCoins &coins) { return base->SetCoins(txid, coins); }\n bool CCoinsViewBacked::HaveCoins(const uint256 &txid) const { return base->HaveCoins(txid); }\n uint256 CCoinsViewBacked::GetBestBlock() const { return base->GetBestBlock(); }\n-bool CCoinsViewBacked::SetBestBlock(const uint256 &hashBlock) { return base->SetBestBlock(hashBlock); }\n void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n bool CCoinsViewBacked::GetStats(CCoinsStats &stats) const { return base->GetStats(stats); }\n \n CCoinsKeyHasher::CCoinsKeyHasher() : salt(GetRandHash()) {}\n \n-CCoinsViewCache::CCoinsViewCache(CCoinsView &baseIn, bool fDummy) : CCoinsViewBacked(baseIn), hashBlock(0) { }\n+CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), hashBlock(0) { }\n \n-bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n-    if (cacheCoins.count(txid)) {\n-        coins = cacheCoins[txid];\n-        return true;\n-    }\n-    if (base->GetCoins(txid, coins)) {\n-        cacheCoins[txid] = coins;\n-        return true;\n-    }\n-    return false;\n+CCoinsViewCache::~CCoinsViewCache()\n+{\n+    assert(!hasModifier);\n }\n \n-CCoinsMap::iterator CCoinsViewCache::FetchCoins(const uint256 &txid) {\n+CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n     CCoinsMap::iterator it = cacheCoins.find(txid);\n     if (it != cacheCoins.end())\n         return it;\n     CCoins tmp;\n-    if (!base->GetCoins(txid,tmp))\n+    if (!base->GetCoins(txid, tmp))\n         return cacheCoins.end();\n-    CCoinsMap::iterator ret = cacheCoins.insert(it, std::make_pair(txid, CCoins()));\n-    tmp.swap(ret->second);\n+    CCoinsMap::iterator ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry())).first;\n+    tmp.swap(ret->second.coins);\n+    if (ret->second.coins.IsPruned()) {\n+        // The parent only has an empty entry for this txid; we can consider our\n+        // version as fresh.\n+        ret->second.flags = CCoinsCacheEntry::FRESH;\n+    }\n     return ret;\n }\n \n-CCoinsMap::const_iterator CCoinsViewCache::FetchCoins(const uint256 &txid) const {\n-    /* Avoid redundant implementation with the const-cast.  */\n-    return const_cast<CCoinsViewCache*>(this)->FetchCoins(txid);\n+bool CCoinsViewCache::GetCoins(const uint256 &txid, CCoins &coins) const {\n+    CCoinsMap::const_iterator it = FetchCoins(txid);\n+    if (it != cacheCoins.end()) {\n+        coins = it->second.coins;\n+        return true;\n+    }\n+    return false;\n }\n \n-CCoins &CCoinsViewCache::GetCoins(const uint256 &txid) {\n-    CCoinsMap::iterator it = FetchCoins(txid);\n-    assert(it != cacheCoins.end());\n-    return it->second;\n+CCoinsModifier CCoinsViewCache::ModifyCoins(const uint256 &txid) {\n+    assert(!hasModifier);\n+    hasModifier = true;\n+    std::pair<CCoinsMap::iterator, bool> ret = cacheCoins.insert(std::make_pair(txid, CCoinsCacheEntry()));\n+    if (ret.second) {\n+        if (!base->GetCoins(txid, ret.first->second.coins)) {\n+            // The parent view does not have this entry; mark it as fresh.\n+            ret.first->second.coins.Clear();\n+            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+        } else if (ret.first->second.coins.IsPruned()) {\n+            // The parent view only has a pruned entry for this; mark it as fresh.\n+            ret.first->second.flags = CCoinsCacheEntry::FRESH;\n+        }\n+    }\n+    // Assume that whenever ModifyCoins is called, the entry will be modified.\n+    ret.first->second.flags |= CCoinsCacheEntry::DIRTY;\n+    return CCoinsModifier(*this, ret.first);\n }\n \n const CCoins* CCoinsViewCache::AccessCoins(const uint256 &txid) const {\n     CCoinsMap::const_iterator it = FetchCoins(txid);\n     if (it == cacheCoins.end()) {\n         return NULL;\n     } else {\n-        return &it->second;\n+        return &it->second.coins;\n     }\n }\n \n-bool CCoinsViewCache::SetCoins(const uint256 &txid, const CCoins &coins) {\n-    cacheCoins[txid] = coins;\n-    return true;\n-}\n-\n bool CCoinsViewCache::HaveCoins(const uint256 &txid) const {\n     CCoinsMap::const_iterator it = FetchCoins(txid);\n     // We're using vtx.empty() instead of IsPruned here for performance reasons,\n     // as we only care about the case where an transaction was replaced entirely\n     // in a reorganization (which wipes vout entirely, as opposed to spending\n     // which just cleans individual outputs).\n-    return (it != cacheCoins.end() && !it->second.vout.empty());\n+    return (it != cacheCoins.end() && !it->second.coins.vout.empty());\n }\n \n uint256 CCoinsViewCache::GetBestBlock() const {\n@@ -139,14 +145,39 @@ uint256 CCoinsViewCache::GetBestBlock() const {\n     return hashBlock;\n }\n \n-bool CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n+void CCoinsViewCache::SetBestBlock(const uint256 &hashBlockIn) {\n     hashBlock = hashBlockIn;\n-    return true;\n }\n \n bool CCoinsViewCache::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlockIn) {\n+    assert(!hasModifier);\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n-        cacheCoins[it->first].swap(it->second);\n+        if (it->second.flags & CCoinsCacheEntry::DIRTY) { // Ignore non-dirty entries (optimization).\n+            CCoinsMap::iterator itUs = cacheCoins.find(it->first);\n+            if (itUs == cacheCoins.end()) {\n+                if (!it->second.coins.IsPruned()) {\n+                    // The parent cache does not have an entry, while the child\n+                    // cache does have (a non-pruned) one. Move the data up, and\n+                    // mark it as fresh (if the grandparent did have it, we\n+                    // would have pulled it in at first GetCoins).\n+                    assert(it->second.flags & CCoinsCacheEntry::FRESH);\n+                    CCoinsCacheEntry& entry = cacheCoins[it->first];\n+                    entry.coins.swap(it->second.coins);\n+                    entry.flags = CCoinsCacheEntry::DIRTY | CCoinsCacheEntry::FRESH;\n+                }\n+            } else {\n+                if ((itUs->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n+                    // The grandparent does not have an entry, and the child is\n+                    // modified and being pruned. This means we can just delete\n+                    // it from the parent.\n+                    cacheCoins.erase(itUs);\n+                } else {\n+                    // A normal modification.\n+                    itUs->second.coins.swap(it->second.coins);\n+                    itUs->second.flags |= CCoinsCacheEntry::DIRTY;\n+                }\n+            }\n+        }\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n     }\n@@ -213,3 +244,15 @@ double CCoinsViewCache::GetPriority(const CTransaction &tx, int nHeight) const\n     }\n     return tx.ComputePriority(dResult);\n }\n+\n+CCoinsModifier::CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_) : cache(cache_), it(it_) {}\n+\n+CCoinsModifier::~CCoinsModifier()\n+{\n+    assert(cache.hasModifier);\n+    cache.hasModifier = false;\n+    it->second.coins.Cleanup();\n+    if ((it->second.flags & CCoinsCacheEntry::FRESH) && it->second.coins.IsPruned()) {\n+        cache.cacheCoins.erase(it);\n+    }\n+}"
      },
      {
        "sha": "b8f1e5bcc5607f281e7c144e7e14e2263bb710c9",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 63,
        "deletions": 18,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -83,11 +83,26 @@ class CCoins\n     // as new tx version will probably only be introduced at certain heights\n     int nVersion;\n \n-    // construct a CCoins from a CTransaction, at a given height\n-    CCoins(const CTransaction &tx, int nHeightIn) : fCoinBase(tx.IsCoinBase()), vout(tx.vout), nHeight(nHeightIn), nVersion(tx.nVersion) {\n+    void FromTx(const CTransaction &tx, int nHeightIn) {\n+        fCoinBase = tx.IsCoinBase();\n+        vout = tx.vout;\n+        nHeight = nHeightIn;\n+        nVersion = tx.nVersion;\n         ClearUnspendable();\n     }\n \n+    // construct a CCoins from a CTransaction, at a given height\n+    CCoins(const CTransaction &tx, int nHeightIn) {\n+        FromTx(tx, nHeightIn);\n+    }\n+\n+    void Clear() {\n+        fCoinBase = false;\n+        std::vector<CTxOut>().swap(vout);\n+        nHeight = 0;\n+        nVersion = 0;\n+    }\n+\n     // empty constructor\n     CCoins() : fCoinBase(false), vout(0), nHeight(0), nVersion(0) { }\n \n@@ -256,7 +271,20 @@ class CCoinsKeyHasher\n     }\n };\n \n-typedef boost::unordered_map<uint256, CCoins, CCoinsKeyHasher> CCoinsMap;\n+struct CCoinsCacheEntry\n+{\n+    CCoins coins; // The actual cached data.\n+    unsigned char flags;\n+\n+    enum Flags {\n+        DIRTY = (1 << 0), // This cache entry is potentially different from the version in the parent view.\n+        FRESH = (1 << 1), // The parent view does not have this entry (or it is pruned).\n+    };\n+\n+    CCoinsCacheEntry() : coins(), flags(0) {}\n+};\n+\n+typedef boost::unordered_map<uint256, CCoinsCacheEntry, CCoinsKeyHasher> CCoinsMap;\n \n struct CCoinsStats\n {\n@@ -279,20 +307,14 @@ class CCoinsView\n     // Retrieve the CCoins (unspent transaction outputs) for a given txid\n     virtual bool GetCoins(const uint256 &txid, CCoins &coins) const;\n \n-    // Modify the CCoins for a given txid\n-    virtual bool SetCoins(const uint256 &txid, const CCoins &coins);\n-\n     // Just check whether we have data for a given txid.\n     // This may (but cannot always) return true for fully spent transactions\n     virtual bool HaveCoins(const uint256 &txid) const;\n \n     // Retrieve the block hash whose state this CCoinsView currently represents\n     virtual uint256 GetBestBlock() const;\n \n-    // Modify the currently active block hash\n-    virtual bool SetBestBlock(const uint256 &hashBlock);\n-\n-    // Do a bulk modification (multiple SetCoins + one SetBestBlock).\n+    // Do a bulk modification (multiple CCoins changes + BestBlock change).\n     // The passed mapCoins can be modified.\n     virtual bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n@@ -311,46 +333,67 @@ class CCoinsViewBacked : public CCoinsView\n     CCoinsView *base;\n \n public:\n-    CCoinsViewBacked(CCoinsView &viewIn);\n+    CCoinsViewBacked(CCoinsView *viewIn);\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool SetCoins(const uint256 &txid, const CCoins &coins);\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n-    bool SetBestBlock(const uint256 &hashBlock);\n     void SetBackend(CCoinsView &viewIn);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n     bool GetStats(CCoinsStats &stats) const;\n };\n \n \n+class CCoinsViewCache;\n+\n+/** A reference to a mutable cache entry. Encapsulating it allows us to run\n+ *  cleanup code after the modification is finished, and keeping track of\n+ *  concurrent modifications. */\n+class CCoinsModifier\n+{\n+private:\n+    CCoinsViewCache& cache;\n+    CCoinsMap::iterator it;\n+    CCoinsModifier(CCoinsViewCache& cache_, CCoinsMap::iterator it_);\n+\n+public:\n+    CCoins* operator->() { return &it->second.coins; }\n+    CCoins& operator*() { return it->second.coins; }\n+    ~CCoinsModifier();\n+    friend class CCoinsViewCache;\n+};\n+\n /** CCoinsView that adds a memory cache for transactions to another CCoinsView */\n class CCoinsViewCache : public CCoinsViewBacked\n {\n protected:\n+    /* Whether this cache has an active modifier. */\n+    bool hasModifier;\n \n     /* Make mutable so that we can \"fill the cache\" even from Get-methods\n        declared as \"const\".  */\n     mutable uint256 hashBlock;\n     mutable CCoinsMap cacheCoins;\n \n public:\n-    CCoinsViewCache(CCoinsView &baseIn, bool fDummy = false);\n+    CCoinsViewCache(CCoinsView *baseIn);\n+    ~CCoinsViewCache();\n \n     // Standard CCoinsView methods\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool SetCoins(const uint256 &txid, const CCoins &coins);\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n-    bool SetBestBlock(const uint256 &hashBlock);\n+    void SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n \n     // Return a pointer to CCoins in the cache, or NULL if not found. This is\n     // more efficient than GetCoins. Modifications to other cache entries are\n     // allowed while accessing the returned pointer.\n     const CCoins* AccessCoins(const uint256 &txid) const;\n \n-    // Return a modifiable reference to a CCoins. Check HaveCoins first.\n-    CCoins &GetCoins(const uint256 &txid);\n+    // Return a modifiable reference to a CCoins. If no entry with the given\n+    // txid exists, a new one is created. Simultaneous modifications are not\n+    // allowed.\n+    CCoinsModifier ModifyCoins(const uint256 &txid);\n \n     // Push the modifications applied to this cache to its base.\n     // Failure to call this method before destruction will cause the changes to be forgotten.\n@@ -377,6 +420,8 @@ class CCoinsViewCache : public CCoinsViewBacked\n \n     const CTxOut &GetOutputFor(const CTxIn& input) const;\n \n+    friend class CCoinsModifier;\n+\n private:\n     CCoinsMap::iterator FetchCoins(const uint256 &txid);\n     CCoinsMap::const_iterator FetchCoins(const uint256 &txid) const;"
      },
      {
        "sha": "8dcd35fb8f6f54142102c7c2e1942a2e985e51f6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -955,7 +955,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n \n                 pblocktree = new CBlockTreeDB(nBlockTreeDBCache, false, fReindex);\n                 pcoinsdbview = new CCoinsViewDB(nCoinDBCache, false, fReindex);\n-                pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n+                pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n \n                 if (fReindex)\n                     pblocktree->WriteReindexing(true);"
      },
      {
        "sha": "de3876944e21b2d9ae48df2f3738debfbadc910e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 37,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -844,12 +844,12 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n     {\n         CCoinsView dummy;\n-        CCoinsViewCache view(dummy);\n+        CCoinsViewCache view(&dummy);\n \n         CAmount nValueIn = 0;\n         {\n         LOCK(pool.cs);\n-        CCoinsViewMemPool viewMemPool(*pcoinsTip, pool);\n+        CCoinsViewMemPool viewMemPool(pcoinsTip, pool);\n         view.SetBackend(viewMemPool);\n \n         // do we already have it?\n@@ -1296,22 +1296,18 @@ void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state\n \n void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCache &inputs, CTxUndo &txundo, int nHeight)\n {\n-    bool ret;\n     // mark inputs spent\n     if (!tx.IsCoinBase()) {\n         txundo.vprevout.reserve(tx.vin.size());\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            const CTxIn &txin = tx.vin[i];\n-            CCoins &coins = inputs.GetCoins(txin.prevout.hash);\n+        BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n             txundo.vprevout.push_back(CTxInUndo());\n-            ret = coins.Spend(txin.prevout, txundo.vprevout.back());\n+            bool ret = inputs.ModifyCoins(txin.prevout.hash)->Spend(txin.prevout, txundo.vprevout.back());\n             assert(ret);\n         }\n     }\n \n     // add outputs\n-    ret = inputs.SetCoins(tx.GetHash(), CCoins(tx, nHeight));\n-    assert(ret);\n+    inputs.ModifyCoins(tx.GetHash())->FromTx(tx, nHeight);\n }\n \n bool CScriptCheck::operator()() const {\n@@ -1453,21 +1449,23 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         // exactly. Note that transactions with only provably unspendable outputs won't\n         // have outputs available even in the block itself, so we handle that case\n         // specially with outsEmpty.\n+        {\n         CCoins outsEmpty;\n-        CCoins &outs = view.HaveCoins(hash) ? view.GetCoins(hash) : outsEmpty;\n-        outs.ClearUnspendable();\n+        CCoinsModifier outs = view.ModifyCoins(hash);\n+        outs->ClearUnspendable();\n \n-        CCoins outsBlock = CCoins(tx, pindex->nHeight);\n+        CCoins outsBlock(tx, pindex->nHeight);\n         // The CCoins serialization does not serialize negative numbers.\n         // No network rules currently depend on the version here, so an inconsistency is harmless\n         // but it must be corrected before txout nversion ever influences a network rule.\n         if (outsBlock.nVersion < 0)\n-            outs.nVersion = outsBlock.nVersion;\n-        if (outs != outsBlock)\n+            outs->nVersion = outsBlock.nVersion;\n+        if (*outs != outsBlock)\n             fClean = fClean && error(\"DisconnectBlock() : added transaction mismatch? database corrupted\");\n \n         // remove outputs\n-        outs = CCoins();\n+        outs->Clear();\n+        }\n \n         // restore inputs\n         if (i > 0) { // not coinbases\n@@ -1477,27 +1475,24 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 const CTxInUndo &undo = txundo.vprevout[j];\n-                CCoins coins;\n-                view.GetCoins(out.hash, coins); // this can fail if the prevout was already entirely spent\n+                CCoinsModifier coins = view.ModifyCoins(out.hash);\n                 if (undo.nHeight != 0) {\n                     // undo data contains height: this is the last output of the prevout tx being spent\n-                    if (!coins.IsPruned())\n+                    if (!coins->IsPruned())\n                         fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing transaction\");\n-                    coins = CCoins();\n-                    coins.fCoinBase = undo.fCoinBase;\n-                    coins.nHeight = undo.nHeight;\n-                    coins.nVersion = undo.nVersion;\n+                    coins->Clear();\n+                    coins->fCoinBase = undo.fCoinBase;\n+                    coins->nHeight = undo.nHeight;\n+                    coins->nVersion = undo.nVersion;\n                 } else {\n-                    if (coins.IsPruned())\n+                    if (coins->IsPruned())\n                         fClean = fClean && error(\"DisconnectBlock() : undo data adding output to missing transaction\");\n                 }\n-                if (coins.IsAvailable(out.n))\n+                if (coins->IsAvailable(out.n))\n                     fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing output\");\n-                if (coins.vout.size() < out.n+1)\n-                    coins.vout.resize(out.n+1);\n-                coins.vout[out.n] = undo.txout;\n-                if (!view.SetCoins(out.hash, coins))\n-                    return error(\"DisconnectBlock() : cannot restore coin inputs\");\n+                if (coins->vout.size() < out.n+1)\n+                    coins->vout.resize(out.n+1);\n+                coins->vout[out.n] = undo.txout;\n             }\n         }\n     }\n@@ -1706,9 +1701,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n             return state.Abort(\"Failed to write transaction index\");\n \n     // add this block to the view's block chain\n-    bool ret;\n-    ret = view.SetBestBlock(pindex->GetBlockHash());\n-    assert(ret);\n+    view.SetBestBlock(pindex->GetBlockHash());\n \n     int64_t nTime3 = GetTimeMicros(); nTimeIndex += nTime3 - nTime2;\n     LogPrint(\"bench\", \"    - Index writing: %.2fms [%.2fs]\\n\", 0.001 * (nTime3 - nTime2), nTimeIndex * 0.000001);\n@@ -1752,10 +1745,10 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     nTimeBestReceived = GetTime();\n     mempool.AddTransactionsUpdated(1);\n \n-    LogPrintf(\"UpdateTip: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f\\n\",\n+    LogPrintf(\"UpdateTip: new best=%s  height=%d  log2_work=%.8g  tx=%lu  date=%s progress=%f  cache=%u\\n\",\n       chainActive.Tip()->GetBlockHash().ToString(), chainActive.Height(), log(chainActive.Tip()->nChainWork.getdouble())/log(2.0), (unsigned long)chainActive.Tip()->nChainTx,\n       DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", chainActive.Tip()->GetBlockTime()),\n-      Checkpoints::GuessVerificationProgress(chainActive.Tip()));\n+      Checkpoints::GuessVerificationProgress(chainActive.Tip()), (unsigned int)pcoinsTip->GetCacheSize());\n \n     cvBlockChange.notify_all();\n \n@@ -1790,7 +1783,7 @@ bool static DisconnectTip(CValidationState &state) {\n     // Apply the block atomically to the chain state.\n     int64_t nStart = GetTimeMicros();\n     {\n-        CCoinsViewCache view(*pcoinsTip, true);\n+        CCoinsViewCache view(pcoinsTip);\n         if (!DisconnectBlock(block, state, pindexDelete, view))\n             return error(\"DisconnectTip() : DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n         assert(view.Flush());\n@@ -1843,7 +1836,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n     int64_t nTime3;\n     LogPrint(\"bench\", \"  - Load block from disk: %.2fms [%.2fs]\\n\", (nTime2 - nTime1) * 0.001, nTimeReadFromDisk * 0.000001);\n     {\n-        CCoinsViewCache view(*pcoinsTip, true);\n+        CCoinsViewCache view(pcoinsTip);\n         CInv inv(MSG_BLOCK, pindexNew->GetBlockHash());\n         if (!ConnectBlock(*pblock, state, pindexNew, view)) {\n             if (state.IsInvalid())\n@@ -2893,7 +2886,7 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n         nCheckDepth = chainActive.Height();\n     nCheckLevel = std::max(0, std::min(4, nCheckLevel));\n     LogPrintf(\"Verifying last %i blocks at level %i\\n\", nCheckDepth, nCheckLevel);\n-    CCoinsViewCache coins(*coinsview, true);\n+    CCoinsViewCache coins(coinsview);\n     CBlockIndex* pindexState = chainActive.Tip();\n     CBlockIndex* pindexFailure = NULL;\n     int nGoodTransactions = 0;"
      },
      {
        "sha": "fd6c52ca690b7691f4ad1372a5d4b7fe7a2803f4",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -116,7 +116,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     {\n         LOCK2(cs_main, mempool.cs);\n         CBlockIndex* pindexPrev = chainActive.Tip();\n-        CCoinsViewCache view(*pcoinsTip, true);\n+        CCoinsViewCache view(pcoinsTip);\n \n         // Priority order to process transactions\n         list<COrphan> vOrphan; // list memory doesn't move\n@@ -316,7 +316,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         CBlockIndex indexDummy(*pblock);\n         indexDummy.pprev = pindexPrev;\n         indexDummy.nHeight = pindexPrev->nHeight + 1;\n-        CCoinsViewCache viewNew(*pcoinsTip, true);\n+        CCoinsViewCache viewNew(pcoinsTip);\n         CValidationState state;\n         if (!ConnectBlock(*pblock, state, &indexDummy, viewNew, true))\n             throw std::runtime_error(\"CreateNewBlock() : ConnectBlock failed\");"
      },
      {
        "sha": "24175215bf71e8e6cdb54b5a66d864c95f8945d5",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -381,7 +381,7 @@ Value gettxout(const Array& params, bool fHelp)\n     CCoins coins;\n     if (fMempool) {\n         LOCK(mempool.cs);\n-        CCoinsViewMemPool view(*pcoinsTip, mempool);\n+        CCoinsViewMemPool view(pcoinsTip, mempool);\n         if (!view.GetCoins(hash, coins))\n             return Value::null;\n         mempool.pruneSpent(hash, coins); // TODO: this should be done by the CCoinsViewMemPool"
      },
      {
        "sha": "78372da685aa32ed5e48f2f395f93f228a968f19",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -560,11 +560,11 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n     // Fetch previous transactions (inputs):\n     CCoinsView viewDummy;\n-    CCoinsViewCache view(viewDummy);\n+    CCoinsViewCache view(&viewDummy);\n     {\n         LOCK(mempool.cs);\n         CCoinsViewCache &viewChain = *pcoinsTip;\n-        CCoinsViewMemPool viewMempool(viewChain, mempool);\n+        CCoinsViewMemPool viewMempool(&viewChain, mempool);\n         view.SetBackend(viewMempool); // temporarily switch cache backend to db+mempool view\n \n         BOOST_FOREACH(const CTxIn& txin, mergedTx.vin) {\n@@ -615,21 +615,19 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             vector<unsigned char> pkData(ParseHexO(prevOut, \"scriptPubKey\"));\n             CScript scriptPubKey(pkData.begin(), pkData.end());\n \n-            CCoins coins;\n-            if (view.GetCoins(txid, coins)) {\n-                if (coins.IsAvailable(nOut) && coins.vout[nOut].scriptPubKey != scriptPubKey) {\n+            {\n+                CCoinsModifier coins = view.ModifyCoins(txid);\n+                if (coins->IsAvailable(nOut) && coins->vout[nOut].scriptPubKey != scriptPubKey) {\n                     string err(\"Previous output scriptPubKey mismatch:\\n\");\n-                    err = err + coins.vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n+                    err = err + coins->vout[nOut].scriptPubKey.ToString() + \"\\nvs:\\n\"+\n                         scriptPubKey.ToString();\n                     throw JSONRPCError(RPC_DESERIALIZATION_ERROR, err);\n                 }\n-                // what todo if txid is known, but the actual output isn't?\n+                if ((unsigned int)nOut >= coins->vout.size())\n+                    coins->vout.resize(nOut+1);\n+                coins->vout[nOut].scriptPubKey = scriptPubKey;\n+                coins->vout[nOut].nValue = 0; // we don't know the actual output value\n             }\n-            if ((unsigned int)nOut >= coins.vout.size())\n-                coins.vout.resize(nOut+1);\n-            coins.vout[nOut].scriptPubKey = scriptPubKey;\n-            coins.vout[nOut].nValue = 0; // we don't know the actual output value\n-            view.SetCoins(txid, coins);\n \n             // if redeemScript given and not using the local wallet (private keys\n             // given), add redeemScript to the tempKeystore so it can be signed:"
      },
      {
        "sha": "3ecd301bc749c40f213543ab620c98e7eb89eba0",
        "filename": "src/test/coins_tests.cpp",
        "status": "added",
        "additions": 178,
        "deletions": 0,
        "changes": 178,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -0,0 +1,178 @@\n+// Copyright (c) 2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"coins.h\"\n+#include \"random.h\"\n+#include \"uint256.h\"\n+\n+#include <vector>\n+#include <map>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+namespace\n+{\n+class CCoinsViewTest : public CCoinsView\n+{\n+    uint256 hashBestBlock_;\n+    std::map<uint256, CCoins> map_;\n+\n+public:\n+    bool GetCoins(const uint256& txid, CCoins& coins) const\n+    {\n+        std::map<uint256, CCoins>::const_iterator it = map_.find(txid);\n+        if (it == map_.end()) {\n+            return false;\n+        }\n+        coins = it->second;\n+        if (coins.IsPruned() && insecure_rand() % 2 == 0) {\n+            // Randomly return false in case of an empty entry.\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    bool HaveCoins(const uint256& txid) const\n+    {\n+        CCoins coins;\n+        return GetCoins(txid, coins);\n+    }\n+\n+    uint256 GetBestBlock() const { return hashBestBlock_; }\n+\n+    bool BatchWrite(CCoinsMap& mapCoins, const uint256& hashBlock)\n+    {\n+        for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end(); ) {\n+            map_[it->first] = it->second.coins;\n+            if (it->second.coins.IsPruned() && insecure_rand() % 3 == 0) {\n+                // Randomly delete empty entries on write.\n+                map_.erase(it->first);\n+            }\n+            mapCoins.erase(it++);\n+        }\n+        mapCoins.clear();\n+        hashBestBlock_ = hashBlock;\n+        return true;\n+    }\n+\n+    bool GetStats(CCoinsStats& stats) const { return false; }\n+};\n+}\n+\n+BOOST_AUTO_TEST_SUITE(coins_tests)\n+\n+static const unsigned int NUM_SIMULATION_ITERATIONS = 40000;\n+\n+// This is a large randomized insert/remove simulation test on a variable-size\n+// stack of caches on top of CCoinsViewTest.\n+//\n+// It will randomly create/update/delete CCoins entries to a tip of caches, with\n+// txids picked from a limited list of random 256-bit hashes. Occasionally, a\n+// new tip is added to the stack of caches, or the tip is flushed and removed.\n+//\n+// During the process, booleans are kept to make sure that the randomized\n+// operation hits all branches.\n+BOOST_AUTO_TEST_CASE(coins_cache_simulation_test)\n+{\n+    // Various coverage trackers.\n+    bool removed_all_caches = false;\n+    bool reached_4_caches = false;\n+    bool added_an_entry = false;\n+    bool removed_an_entry = false;\n+    bool updated_an_entry = false;\n+    bool found_an_entry = false;\n+    bool missed_an_entry = false;\n+\n+    // A simple map to track what we expect the cache stack to represent.\n+    std::map<uint256, CCoins> result;\n+\n+    // The cache stack.\n+    CCoinsViewTest base; // A CCoinsViewTest at the bottom.\n+    std::vector<CCoinsViewCache*> stack; // A stack of CCoinsViewCaches on top.\n+    stack.push_back(new CCoinsViewCache(&base)); // Start with one cache.\n+\n+    // Use a limited set of random transaction ids, so we do test overwriting entries.\n+    std::vector<uint256> txids;\n+    txids.resize(NUM_SIMULATION_ITERATIONS / 8);\n+    for (unsigned int i = 0; i < txids.size(); i++) {\n+        txids[i] = GetRandHash();\n+    }\n+\n+    for (unsigned int i = 0; i < NUM_SIMULATION_ITERATIONS; i++) {\n+        // Do a random modification.\n+        {\n+            uint256 txid = txids[insecure_rand() % txids.size()]; // txid we're going to modify in this iteration.\n+            CCoins& coins = result[txid];\n+            CCoinsModifier entry = stack.back()->ModifyCoins(txid);\n+            BOOST_CHECK(coins == *entry);\n+            if (insecure_rand() % 5 == 0 || coins.IsPruned()) {\n+                if (coins.IsPruned()) {\n+                    added_an_entry = true;\n+                } else {\n+                    updated_an_entry = true;\n+                }\n+                coins.nVersion = insecure_rand();\n+                coins.vout.resize(1);\n+                coins.vout[0].nValue = insecure_rand();\n+                *entry = coins;\n+            } else {\n+                coins.Clear();\n+                entry->Clear();\n+                removed_an_entry = true;\n+            }\n+        }\n+\n+        // Once every 1000 iterations and at the end, verify the full cache.\n+        if (insecure_rand() % 1000 == 1 || i == NUM_SIMULATION_ITERATIONS - 1) {\n+            for (std::map<uint256, CCoins>::iterator it = result.begin(); it != result.end(); it++) {\n+                const CCoins* coins = stack.back()->AccessCoins(it->first);\n+                if (coins) {\n+                    BOOST_CHECK(*coins == it->second);\n+                    found_an_entry = true;\n+                } else {\n+                    BOOST_CHECK(it->second.IsPruned());\n+                    missed_an_entry = true;\n+                }\n+            }\n+        }\n+\n+        if (insecure_rand() % 100 == 0) {\n+            // Every 100 iterations, change the cache stack.\n+            if (stack.size() > 0 && insecure_rand() % 2 == 0) {\n+                stack.back()->Flush();\n+                delete stack.back();\n+                stack.pop_back();\n+            }\n+            if (stack.size() == 0 || (stack.size() < 4 && insecure_rand() % 2)) {\n+                CCoinsView* tip = &base;\n+                if (stack.size() > 0) {\n+                    tip = stack.back();\n+                } else {\n+                    removed_all_caches = true;\n+                }\n+                stack.push_back(new CCoinsViewCache(tip));\n+                if (stack.size() == 4) {\n+                    reached_4_caches = true;\n+                }\n+            }\n+        }\n+    }\n+\n+    // Clean up the stack.\n+    while (stack.size() > 0) {\n+        delete stack.back();\n+        stack.pop_back();\n+    }\n+\n+    // Verify coverage.\n+    BOOST_CHECK(removed_all_caches);\n+    BOOST_CHECK(reached_4_caches);\n+    BOOST_CHECK(added_an_entry);\n+    BOOST_CHECK(removed_an_entry);\n+    BOOST_CHECK(updated_an_entry);\n+    BOOST_CHECK(found_an_entry);\n+    BOOST_CHECK(missed_an_entry);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "f8361a0dc8bb907609c405065f075ed822d0c311",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -255,7 +255,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n {\n     LOCK(cs_main);\n     CCoinsView coinsDummy;\n-    CCoinsViewCache coins(coinsDummy);\n+    CCoinsViewCache coins(&coinsDummy);\n     CBasicKeyStore keystore;\n     CKey key[6];\n     vector<CPubKey> keys;\n@@ -312,8 +312,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txFrom.vout[6].scriptPubKey = GetScriptForDestination(twentySigops.GetID());\n     txFrom.vout[6].nValue = 6000;\n \n-\n-    coins.SetCoins(txFrom.GetHash(), CCoins(txFrom, 0));\n+    coins.ModifyCoins(txFrom.GetHash())->FromTx(txFrom, 0);\n \n     CMutableTransaction txTo;\n     txTo.vout.resize(1);"
      },
      {
        "sha": "afd63d271726978b2d5f27aadb17450ebba6ed23",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -41,7 +41,7 @@ struct TestingSetup {\n         mapArgs[\"-datadir\"] = pathTemp.string();\n         pblocktree = new CBlockTreeDB(1 << 20, true);\n         pcoinsdbview = new CCoinsViewDB(1 << 23, true);\n-        pcoinsTip = new CCoinsViewCache(*pcoinsdbview);\n+        pcoinsTip = new CCoinsViewCache(pcoinsdbview);\n         InitBlockIndex();\n #ifdef ENABLE_WALLET\n         bool fFirstRun;"
      },
      {
        "sha": "f14f600bbe8875a29dabb97a875964bd45557824",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -242,7 +242,7 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n // paid to a TX_PUBKEYHASH.\n //\n static std::vector<CMutableTransaction>\n-SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsView & coinsRet)\n+SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n {\n     std::vector<CMutableTransaction> dummyTransactions;\n     dummyTransactions.resize(2);\n@@ -261,14 +261,14 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsView & coinsRet)\n     dummyTransactions[0].vout[0].scriptPubKey << key[0].GetPubKey() << OP_CHECKSIG;\n     dummyTransactions[0].vout[1].nValue = 50*CENT;\n     dummyTransactions[0].vout[1].scriptPubKey << key[1].GetPubKey() << OP_CHECKSIG;\n-    coinsRet.SetCoins(dummyTransactions[0].GetHash(), CCoins(dummyTransactions[0], 0));\n+    coinsRet.ModifyCoins(dummyTransactions[0].GetHash())->FromTx(dummyTransactions[0], 0);\n \n     dummyTransactions[1].vout.resize(2);\n     dummyTransactions[1].vout[0].nValue = 21*CENT;\n     dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n     dummyTransactions[1].vout[1].nValue = 22*CENT;\n     dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n-    coinsRet.SetCoins(dummyTransactions[1].GetHash(), CCoins(dummyTransactions[1], 0));\n+    coinsRet.ModifyCoins(dummyTransactions[1].GetHash())->FromTx(dummyTransactions[1], 0);\n \n     return dummyTransactions;\n }\n@@ -277,7 +277,7 @@ BOOST_AUTO_TEST_CASE(test_Get)\n {\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n-    CCoinsViewCache coins(coinsDummy);\n+    CCoinsViewCache coins(&coinsDummy);\n     std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n \n     CMutableTransaction t1;\n@@ -312,7 +312,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     LOCK(cs_main);\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n-    CCoinsViewCache coins(coinsDummy);\n+    CCoinsViewCache coins(&coinsDummy);\n     std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n \n     CMutableTransaction t;"
      },
      {
        "sha": "cb9f15001160316127e270751a97d78b29fe452f",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 15,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -33,12 +33,6 @@ bool CCoinsViewDB::GetCoins(const uint256 &txid, CCoins &coins) const {\n     return db.Read(make_pair('c', txid), coins);\n }\n \n-bool CCoinsViewDB::SetCoins(const uint256 &txid, const CCoins &coins) {\n-    CLevelDBBatch batch;\n-    BatchWriteCoins(batch, txid, coins);\n-    return db.WriteBatch(batch);\n-}\n-\n bool CCoinsViewDB::HaveCoins(const uint256 &txid) const {\n     return db.Exists(make_pair('c', txid));\n }\n@@ -50,24 +44,23 @@ uint256 CCoinsViewDB::GetBestBlock() const {\n     return hashBestChain;\n }\n \n-bool CCoinsViewDB::SetBestBlock(const uint256 &hashBlock) {\n-    CLevelDBBatch batch;\n-    BatchWriteHashBestChain(batch, hashBlock);\n-    return db.WriteBatch(batch);\n-}\n-\n bool CCoinsViewDB::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) {\n-    LogPrint(\"coindb\", \"Committing %u changed transactions to coin database...\\n\", (unsigned int)mapCoins.size());\n-\n     CLevelDBBatch batch;\n+    size_t count = 0;\n+    size_t changed = 0;\n     for (CCoinsMap::iterator it = mapCoins.begin(); it != mapCoins.end();) {\n-        BatchWriteCoins(batch, it->first, it->second);\n+        if (it->second.flags & CCoinsCacheEntry::DIRTY) {\n+            BatchWriteCoins(batch, it->first, it->second.coins);\n+            changed++;\n+        }\n+        count++;\n         CCoinsMap::iterator itOld = it++;\n         mapCoins.erase(itOld);\n     }\n     if (hashBlock != uint256(0))\n         BatchWriteHashBestChain(batch, hashBlock);\n \n+    LogPrint(\"coindb\", \"Committing %u changed transactions (out of %u) to coin database...\\n\", (unsigned int)changed, (unsigned int)count);\n     return db.WriteBatch(batch);\n }\n "
      },
      {
        "sha": "8f2bd9af4d15f2e1b5cb7590d52d0c8db32af903",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -33,10 +33,8 @@ class CCoinsViewDB : public CCoinsView\n     CCoinsViewDB(size_t nCacheSize, bool fMemory = false, bool fWipe = false);\n \n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n-    bool SetCoins(const uint256 &txid, const CCoins &coins);\n     bool HaveCoins(const uint256 &txid) const;\n     uint256 GetBestBlock() const;\n-    bool SetBestBlock(const uint256 &hashBlock);\n     bool BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock);\n     bool GetStats(CCoinsStats &stats) const;\n };"
      },
      {
        "sha": "fa1802ad31edd8a1bf16c425ddf2291395614219",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -631,7 +631,7 @@ void CTxMemPool::ClearPrioritisation(const uint256 hash)\n }\n \n \n-CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView &baseIn, CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n+CCoinsViewMemPool::CCoinsViewMemPool(CCoinsView *baseIn, CTxMemPool &mempoolIn) : CCoinsViewBacked(baseIn), mempool(mempoolIn) { }\n \n bool CCoinsViewMemPool::GetCoins(const uint256 &txid, CCoins &coins) const {\n     // If an entry in the mempool exists, always return that one, as it's guaranteed to never"
      },
      {
        "sha": "c63fd6f59035c8cdbdccabf6dcc396ebcc09bd3a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -144,7 +144,7 @@ class CCoinsViewMemPool : public CCoinsViewBacked\n     CTxMemPool &mempool;\n \n public:\n-    CCoinsViewMemPool(CCoinsView &baseIn, CTxMemPool &mempoolIn);\n+    CCoinsViewMemPool(CCoinsView *baseIn, CTxMemPool &mempoolIn);\n     bool GetCoins(const uint256 &txid, CCoins &coins) const;\n     bool HaveCoins(const uint256 &txid) const;\n };"
      }
    ]
  },
  {
    "sha": "9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGY5Y2Y1YTlmNWY1NjI2MWIwYjIyNmRlYzYyNDlmOWRmYmVmZWQ2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-07T00:22:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-08T22:42:29Z"
      },
      "message": "Make SCRIPT_VERIFY_STRICTENC compatible with BIP62\n\n* Delete canonical_tests.cpp, and move the tests to script_tests.cpp.\n* Split off SCRIPT_VERIFY_DERSIG from SCRIPT_VERIFY_STRICTENC (the BIP62 part of it).\n* Change signature STRICTENC/DERSIG semantics to fail the script entirely rather than the CHECKSIG result (softfork safety, and BIP62 requirement).\n* Add many autogenerated tests for several odd cases.\n* Mention specific BIP62 rules in the script verification flags.",
      "tree": {
        "sha": "afb1a13bbabe88337c1f7ebe7acc86cea4286535",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afb1a13bbabe88337c1f7ebe7acc86cea4286535"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4a42334d447cad48fb3996cad0fd5c945b75571",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4a42334d447cad48fb3996cad0fd5c945b75571",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4a42334d447cad48fb3996cad0fd5c945b75571"
      }
    ],
    "stats": {
      "total": 398,
      "additions": 234,
      "deletions": 164
    },
    "files": [
      {
        "sha": "b20e226c3dd862e39aebbee4520687153b1b37b8",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "patch": "@@ -40,7 +40,6 @@ BITCOIN_TESTS =\\\n   test/base58_tests.cpp \\\n   test/base64_tests.cpp \\\n   test/bloom_tests.cpp \\\n-  test/canonical_tests.cpp \\\n   test/checkblock_tests.cpp \\\n   test/Checkpoints_tests.cpp \\\n   test/compress_tests.cpp \\"
      },
      {
        "sha": "ae66217b7ca0d6a9b6b821eb3b7e5b0d8891d5a5",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 21,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "patch": "@@ -52,10 +52,7 @@ static inline void popstack(vector<valtype>& stack)\n     stack.pop_back();\n }\n \n-bool IsCanonicalPubKey(const valtype &vchPubKey, unsigned int flags) {\n-    if (!(flags & SCRIPT_VERIFY_STRICTENC))\n-        return true;\n-\n+bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {\n     if (vchPubKey.size() < 33)\n         return error(\"Non-canonical public key: too short\");\n     if (vchPubKey[0] == 0x04) {\n@@ -70,10 +67,7 @@ bool IsCanonicalPubKey(const valtype &vchPubKey, unsigned int flags) {\n     return true;\n }\n \n-bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n-    if (!(flags & SCRIPT_VERIFY_STRICTENC))\n-        return true;\n-\n+bool static IsDERSignature(const valtype &vchSig) {\n     // See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623\n     // A canonical signature exists of: <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>\n     // Where R and S are not negative (their first byte has its highest bit not set), and not\n@@ -83,9 +77,6 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n         return error(\"Non-canonical signature: too short\");\n     if (vchSig.size() > 73)\n         return error(\"Non-canonical signature: too long\");\n-    unsigned char nHashType = vchSig[vchSig.size() - 1] & (~(SIGHASH_ANYONECANPAY));\n-    if (nHashType < SIGHASH_ALL || nHashType > SIGHASH_SINGLE)\n-        return error(\"Non-canonical signature: unknown hashtype byte\");\n     if (vchSig[0] != 0x30)\n         return error(\"Non-canonical signature: wrong type\");\n     if (vchSig[1] != vchSig.size()-3)\n@@ -117,17 +108,54 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n     if (nLenS > 1 && (S[0] == 0x00) && !(S[1] & 0x80))\n         return error(\"Non-canonical signature: S value excessively padded\");\n \n-    if (flags & SCRIPT_VERIFY_LOW_S) {\n-        // If the S value is above the order of the curve divided by two, its\n-        // complement modulo the order could have been used instead, which is\n-        // one byte shorter when encoded correctly.\n-        if (!CKey::CheckSignatureElement(S, nLenS, true))\n-            return error(\"Non-canonical signature: S value is unnecessarily high\");\n+    return true;\n+}\n+\n+bool static IsLowDERSignature(const valtype &vchSig) {\n+    if (!IsDERSignature(vchSig)) {\n+        return false;\n     }\n+    unsigned int nLenR = vchSig[3];\n+    unsigned int nLenS = vchSig[5+nLenR];\n+    const unsigned char *S = &vchSig[6+nLenR];\n+    // If the S value is above the order of the curve divided by two, its\n+    // complement modulo the order could have been used instead, which is\n+    // one byte shorter when encoded correctly.\n+    if (!CKey::CheckSignatureElement(S, nLenS, true))\n+        return error(\"Non-canonical signature: S value is unnecessarily high\");\n \n     return true;\n }\n \n+bool static IsDefinedHashtypeSignature(const valtype &vchSig) {\n+    if (vchSig.size() == 0) {\n+        return false;\n+    }\n+    unsigned char nHashType = vchSig[vchSig.size() - 1] & (~(SIGHASH_ANYONECANPAY));\n+    if (nHashType < SIGHASH_ALL || nHashType > SIGHASH_SINGLE)\n+        return error(\"Non-canonical signature: unknown hashtype byte\");\n+\n+    return true;\n+}\n+\n+bool static CheckSignatureEncoding(const valtype &vchSig, unsigned int flags) {\n+    if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsDERSignature(vchSig)) {\n+        return false;\n+    } else if ((flags & SCRIPT_VERIFY_LOW_S) != 0 && !IsLowDERSignature(vchSig)) {\n+        return false;\n+    } else if ((flags & SCRIPT_VERIFY_STRICTENC) != 0 && !IsDefinedHashtypeSignature(vchSig)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool static CheckPubKeyEncoding(const valtype &vchSig, unsigned int flags) {\n+    if ((flags & SCRIPT_VERIFY_STRICTENC) != 0 && !IsCompressedOrUncompressedPubKey(vchSig)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker)\n {\n     CScript::const_iterator pc = script.begin();\n@@ -670,8 +698,11 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     // Drop the signature, since there's no way for a signature to sign itself\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n-                    bool fSuccess = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                        checker.CheckSig(vchSig, vchPubKey, scriptCode);\n+                    if (!CheckSignatureEncoding(vchSig, flags)) {\n+                        return false;\n+                    }\n+\n+                    bool fSuccess = CheckPubKeyEncoding(vchPubKey, flags) && checker.CheckSig(vchSig, vchPubKey, scriptCode);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -730,9 +761,12 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         valtype& vchSig    = stacktop(-isig);\n                         valtype& vchPubKey = stacktop(-ikey);\n \n+                        if (!CheckSignatureEncoding(vchSig, flags)) {\n+                            return false;\n+                        }\n+\n                         // Check signature\n-                        bool fOk = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                            checker.CheckSig(vchSig, vchPubKey, scriptCode);\n+                        bool fOk = CheckPubKeyEncoding(vchPubKey, flags) && checker.CheckSig(vchSig, vchPubKey, scriptCode);\n \n                         if (fOk) {\n                             isig++;"
      },
      {
        "sha": "de5ce2ced1a3450158299e9701ea538925bf66d8",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "patch": "@@ -28,14 +28,25 @@ enum\n enum\n {\n     SCRIPT_VERIFY_NONE      = 0,\n-    SCRIPT_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n-    SCRIPT_VERIFY_STRICTENC = (1U << 1), // enforce strict conformance to DER and SEC2 for signatures and pubkeys\n-    SCRIPT_VERIFY_LOW_S     = (1U << 2), // enforce low S values (<n/2) in signatures (depends on STRICTENC)\n-    SCRIPT_VERIFY_NULLDUMMY = (1U << 3), // verify dummy stack item consumed by CHECKMULTISIG is of zero-length\n-};\n \n-bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey, unsigned int flags);\n-bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int flags);\n+    // Evaluate P2SH subscripts (softfork safe, BIP16).\n+    SCRIPT_VERIFY_P2SH      = (1U << 0),\n+\n+    // Passing a non-strict-DER signature or one with undefined hashtype to a checksig operation causes script failure.\n+    // Passing a pubkey that is not (0x04 + 64 bytes) or (0x02 or 0x03 + 32 bytes) to checksig causes that pubkey to be\n+    // skipped (not softfork safe: this flag can widen the validity of OP_CHECKSIG OP_NOT).\n+    SCRIPT_VERIFY_STRICTENC = (1U << 1),\n+\n+    // Passing a non-strict-DER signature to a checksig operation causes script failure (softfork safe, BIP62 rule 1)\n+    SCRIPT_VERIFY_DERSIG    = (1U << 2),\n+\n+    // Passing a non-strict-DER signature or one with S > order/2 to a checksig operation causes script failure\n+    // (softfork safe, BIP62 rule 5).\n+    SCRIPT_VERIFY_LOW_S     = (1U << 3),\n+\n+    // verify dummy stack item consumed by CHECKMULTISIG is of zero-length (softfork safe, BIP62 rule 7).\n+    SCRIPT_VERIFY_NULLDUMMY = (1U << 4),\n+};\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n "
      },
      {
        "sha": "a17099de72752307ddfe015f985abaf9221c1bb3",
        "filename": "src/test/canonical_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 113,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/test/canonical_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/test/canonical_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/canonical_tests.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -1,113 +0,0 @@\n-// Copyright (c) 2012-2013 The Bitcoin Core developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-//\n-// Unit tests for canonical signatures\n-//\n-\n-#include \"data/sig_noncanonical.json.h\"\n-#include \"data/sig_canonical.json.h\"\n-#include \"key.h\"\n-#include \"random.h\"\n-#include \"script/interpreter.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-\n-#include <boost/foreach.hpp>\n-#include <boost/test/unit_test.hpp>\n-#include \"json/json_spirit_writer_template.h\"\n-#include <openssl/ecdsa.h>\n-\n-using namespace std;\n-using namespace json_spirit;\n-\n-// In script_tests.cpp\n-extern Array read_json(const std::string& jsondata);\n-\n-BOOST_AUTO_TEST_SUITE(canonical_tests)\n-\n-// OpenSSL-based test for canonical signature (without test for hashtype byte)\n-bool static IsCanonicalSignature_OpenSSL_inner(const std::vector<unsigned char>& vchSig)\n-{\n-    if (vchSig.size() == 0)\n-        return false;\n-    const unsigned char *input = &vchSig[0];\n-    ECDSA_SIG *psig = NULL;\n-    d2i_ECDSA_SIG(&psig, &input, vchSig.size());\n-    if (psig == NULL)\n-        return false;\n-    unsigned char buf[256];\n-    unsigned char *pbuf = buf;\n-    unsigned int nLen = i2d_ECDSA_SIG(psig, NULL);\n-    if (nLen != vchSig.size()) {\n-        ECDSA_SIG_free(psig);\n-        return false;\n-    }\n-    nLen = i2d_ECDSA_SIG(psig, &pbuf);\n-    ECDSA_SIG_free(psig);\n-    return (memcmp(&vchSig[0], &buf[0], nLen) == 0);\n-}\n-\n-// OpenSSL-based test for canonical signature\n-bool static IsCanonicalSignature_OpenSSL(const std::vector<unsigned char> &vchSignature) {\n-    if (vchSignature.size() < 1)\n-        return false;\n-    if (vchSignature.size() > 127)\n-        return false;\n-    if (vchSignature[vchSignature.size() - 1] & 0x7C)\n-        return false;\n-\n-    std::vector<unsigned char> vchSig(vchSignature);\n-    vchSig.pop_back();\n-    if (!IsCanonicalSignature_OpenSSL_inner(vchSig))\n-        return false;\n-    return true;\n-}\n-\n-BOOST_AUTO_TEST_CASE(script_canon)\n-{\n-    Array tests = read_json(std::string(json_tests::sig_canonical, json_tests::sig_canonical + sizeof(json_tests::sig_canonical)));\n-\n-    BOOST_FOREACH(Value &tv, tests) {\n-        string test = tv.get_str();\n-        if (IsHex(test)) {\n-            std::vector<unsigned char> sig = ParseHex(test);\n-            BOOST_CHECK_MESSAGE(IsCanonicalSignature(sig, SCRIPT_VERIFY_STRICTENC), test);\n-            BOOST_CHECK_MESSAGE(IsCanonicalSignature_OpenSSL(sig), test);\n-        }\n-    }\n-}\n-\n-BOOST_AUTO_TEST_CASE(script_noncanon)\n-{\n-    Array tests = read_json(std::string(json_tests::sig_noncanonical, json_tests::sig_noncanonical + sizeof(json_tests::sig_noncanonical)));\n-\n-    BOOST_FOREACH(Value &tv, tests) {\n-        string test = tv.get_str();\n-        if (IsHex(test)) {\n-            std::vector<unsigned char> sig = ParseHex(test);\n-            BOOST_CHECK_MESSAGE(!IsCanonicalSignature(sig, SCRIPT_VERIFY_STRICTENC), test);\n-            BOOST_CHECK_MESSAGE(!IsCanonicalSignature_OpenSSL(sig), test);\n-        }\n-    }\n-}\n-\n-BOOST_AUTO_TEST_CASE(script_signstrict)\n-{\n-    for (int i=0; i<100; i++) {\n-        CKey key;\n-        key.MakeNewKey(i & 1);\n-        std::vector<unsigned char> sig;\n-        uint256 hash = GetRandHash();\n-\n-        BOOST_CHECK(key.Sign(hash, sig)); // Generate a random signature.\n-        BOOST_CHECK(key.GetPubKey().Verify(hash, sig)); // Check it.\n-        sig.push_back(0x01); // Append a sighash type.\n-\n-        BOOST_CHECK(IsCanonicalSignature(sig, SCRIPT_VERIFY_STRICTENC | SCRIPT_VERIFY_LOW_S));\n-        BOOST_CHECK(IsCanonicalSignature_OpenSSL(sig));\n-    }\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "b6447cb2213f06f12c2d411e35c03a1c6ee5fa46",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "patch": "@@ -444,18 +444,66 @@ nSequences are max.\n     \"STRICTENC\",\n     \"P2PK with too little R padding\"\n ],\n+[\n+    \"0x47 0x30440220001d0f82c127470cb38316c96b1719b33382353687a1146a776dee8259606905022062cd1fc8eacef819d68f0f41cc9ae9fdc2e29b70c3c7ad2c6c18f39b4e35c42701\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"P2PK NOT with bad sig with too much R padding\"\n+],\n+[\n+    \"0x47 0x30440220005d727e2a82d6e8a98a6da6fbc281325644d1a40455e386fdb17883a8e6bc4d02202d15cca42ce136047a980d288e60c679d7e84cce18c3ceffb6bc81b9e9ba517801\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with too much R padding but no DERSIG\"\n+],\n+[\n+    \"0x47 0x30440220006e8bc4f82032b12bd594847c16d8b2986de734aa3b0528bd89d664d41e6d1c02200cfd582694891bcfa2e630e899bda257486eba00a007222fae71144dba07dc2901\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"P2PK NOT with too much R padding\"\n+],\n [\n     \"0x48 0x304502206c43e065c8a8db3bbe69015afb86a51fb2fc8870defd41d436da2a197d9d6c12022100fcec35816ee2d84ec271ad159fcabf5dd712157051169e48ac328a7818cdb51e01\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n     \"LOW_S,STRICTENC\",\n     \"P2PK with high S\"\n ],\n+[\n+    \"0x47 0x304402203aab50cd7c30cc1e1475dee615b295bcee6ccf8aa8a7f6cda6b696c70d79cbb40220558e43fe7596c31146e2d077698d5a9c38351d8ba567549a2ae43ca97231c39501\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"STRICTENC\",\n+    \"P2PK with hybrid pubkey\"\n+],\n+[\n+    \"0x47 0x304402205745e8f846110c185ee1185c01843a108588b81463d2c34d4a3f2445529f12fe02206ee6a2657bbc4e2bb74bfc44c3a5c4f410ed6356ca68982465de6ca807c807c201\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with hybrid pubkey but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x304402201f82b99a813c9c48c8dee8d2c43b8f637b72353fe9bdcc084537bc17e2ab770402200c43b96a5f7e115f0114eabda32e068145965cb6c7b5ef64833bb4fcf9fc1b3b05\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n+    \"STRICTENC\",\n+    \"P2PK with undefined hashtype\"\n+],\n+[\n+    \"0x47 0x30440220166848cd5b82a32b5944d90de3c35249354b43773c2ece1844ee8d1103e2f6c602203b6b046da4243c77adef80ada9201b27bbfdf7f9d5428f40434b060432afd62005\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"P2PK NOT with invalid sig and undefined hashtype\"\n+],\n [\n     \"0x01 0x01 0x47 0x304402200e48ba1cf4d7182db94ffb57bd72ea31b5545dc0d1c512e665779b4fb2badc52022054b8388dfc074c708a75b62359b7be46402751ee40c0a111aef38a837b6ed09801 0x47 0x304402201c9820f59c49107bb30e6175cfc9ec95f897b03beb628b4bc854d2b80392aa0602200235d986ae418bcd111b8814f4c26a0ab5f475fb542a44884fc14912a97a252301 0x47 0x304402204cd7894c6f10a871f5b0c1f9c13228f8cdd4050248f0d0f498ee86be69ee3080022051bd2932c7d585eb600c7194235c74da820935f0d67972fd9545673aa1fd023301\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n     \"NULLDUMMY\",\n     \"3-of-3 with nonzero dummy\"\n ],\n+[\n+    \"0x01 0x01 0x47 0x304402201847fc3b8f7597768e7f543c58da1fca6e8e35eb28979431e6b637572ce6eaa4022048dd58608e040841d0bf52a70cfb70e1a9c8d2826fad068f4e9d2bf5c87766a501 0x47 0x30440220711311a72516affed73363763983d05c3d6a06a2eadf5d76b90b4354162ba94302204841a69e5955a7dc8e4ab3105fd0c86040c1dac6016297a51ddbf5079c28756801 0x47 0x30440220267e331a378191e7282fd10d61c97bf74bc97c233c5833d677936424ac08dee502201eee83d88b91988e1c4d9b979df2404aa190e0987a8ca09c4e5cd61da1d48ecc01\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG NOT\",\n+    \"NULLDUMMY\",\n+    \"3-of-3 NOT with invalid sig with nonzero dummy\"\n+],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "88bec7238c77e5090f4f2cbe6152129fa0fccd1b",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 52,
        "deletions": 10,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "patch": "@@ -572,22 +572,28 @@ nSequences are max.\n     \"P2SH(2-of-3)\"\n ],\n [\n-    \"0x47 0x304402200001cae94b795baaafb05db38cf24cd75560cab2c36c91e29fac7d0fd2a723a3022058e2e56e568ce7c4b2b106210d114e1faa079407a6ed4154f230667c7d3583bc01\",\n+    \"0x47 0x30440220001fff8863c84c0efc8eea5bffb7f388313f966f23a00ad3c0acc30ff5339684022016e6d78f51a3a1c362745931ca40b24f71cba2903dbfe5a6d392a9189127d83701\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n-    \"P2PK with too much R padding but no STRICTENC\"\n+    \"P2PK with too much R padding but no DERSIG\"\n ],\n [\n-    \"0x48 0x304502206d01de7c2a40ac2bb1231ed97f3890a1782f421d4c28b97166deff317990288f0221005e720213b089355be2cf785d81a82c59307d30e1624f450ed9ca1ebbc11cca6d01\",\n+    \"0x48 0x304502202323d56f293842b544cacedd06baafb999196dfa1c2975314848c158ac606655022100514bd98186b8a3a1cc87f4aff76aed797781389f13f50d87bf95b2df6e488fcc01\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n-    \"P2PK with too much S padding but no STRICTENC\"\n+    \"P2PK with too much S padding but no DERSIG\"\n ],\n [\n-    \"0x47 0x30440220f3d8889602147d60d26c1d3b21b8db183eac02bf6d2fec1424c0ef377ca6fd7b02202bae8bfe39d00a432d4538a592e338b0ffc44c17d4b7056043d55063cf91f5ef01\",\n+    \"0x47 0x30440220d31c24bb6c08a496e7698a08fd41975115d7b55bfaa31cb2d573e09481e59a6702206a691239996434076b78a4e1cf46fc8e993b468a9c77fb1832186aa8040a61a201\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n-    \"P2PK with too little R padding but no STRICTENC\"\n+    \"P2PK with too little R padding but no DERSIG\"\n+],\n+[\n+    \"0x47 0x30440220007c2cc7aef1801c2937447703c87ef2a3744209ad98da2abadd4ba8bb2e3ea00220503a275582c9f9e9ff30260c81b7f64b8b696f22105605cc8241fb76a797316201\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with bad sig with too much R padding but no DERSIG\"\n ],\n [\n     \"0x48 0x3045022021bf9184d94f208ac9f4757ebca9b1cbebf008cfc244fe5be1360b1b9aba0e92022100e55074f72f3a1bfddf2ea4ea7ba984f78822e136fe04c8f9c1363238e0233bd801\",\n@@ -596,17 +602,53 @@ nSequences are max.\n     \"P2PK with high S but no LOW_S\"\n ],\n [\n-    \"0x48 0x304502205c3e81aaf2aad0673f349035b180eba783eba7797af91c979920dea6b17a16d6022100d1d46825c68da1b325f320a3503dad27bb818227f64a38d153554bfd360c0e5301\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n-    \"LOW_S\",\n-    \"P2PK with high S but no STRICTENC\"\n+    \"0x47 0x304402202163bc732c21b7de0251297d3c6c2ece182782e85fc5e19d6036f1130a79051e022033827811634924ebba68767537d78dd7bd9109ae2a89a60587927abdc25eb06401\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"\",\n+    \"P2PK with hybrid pubkey but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x3044022078033e4227aa05ded69d8da579966578e230d8a7fb44d5f1a0620c3853c24f78022006a2e3f4d872ac8dfdc529110aa37301d65a76255a4b6cce2992adacd4d2c4e201\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"P2PK NOT with hybrid pubkey\"\n+],\n+[\n+    \"0x47 0x3044022078d6c447887e88dcbe1bc5b613645280df6f4e5935648bc226e9d91da71b3216022047d6b7ef0949b228fc1b359afb8d50500268711354298217b983c26970790c7601\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x304402207592427de20e315d644839754f2a5cca5b978b983a15e6da82109ede01722baa022032ceaf78590faa3f7743821e1b47b897ed1a57f6ee1c8a7519d23774d8de3c4401\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"P2PK NOT with invalid hybrid pubkey\"\n+],\n+[\n+    \"0x47 0x304402204649e9517ef0377a8f8270bd423053fd98ddff62d74ea553e9579558abbb75e4022044a2b2344469c12e35ed898987711272b634733dd0f5e051288eceb04bd4669e05\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n+    \"\",\n+    \"P2PK with undefined hashtype but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x304402207f1cf1866a2df0bb4b8d84d0ade72aa3abb6aaab0639d608b23d9e10ead0c48202203caa97f22c3439443eea4b89f7f6729854df0f567a8184d6ecc6e8b6c68c3e9d05\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\"\n ],\n [\n     \"0x01 0x01 0x47 0x3044022046ce33d1771b0127dd4c4cef8fdc3218ebdfa60e3793ed700292d8ebd93fb1f402201029d47a414db83e96e31443c2d8b552f971469c4800f5eff7df2f0648521aed01 0x47 0x304402205c53911ad55b054920043962bbda98cf6e57e2db1cd5611138251490baabaa8702201dc80dfceae6007e7772dc13ff6e7ca66a983cb017fe5d46d30118462d83bcf801 0x47 0x304402201937e44a4ec12364f9d32f9d25e7ecbc68aee9ef90069af80efef4c05f6ace9602206c515101c00c75710b32ff7ff8dbaf7c9a0be6e86ed14a0755b47626604f31fd01\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n     \"\",\n     \"3-of-3 with nonzero dummy but no NULLDUMMY\"\n ],\n+[\n+    \"0x01 0x01 0x47 0x30440220195038dbc6b2ae1199f86a6777824f7c5149789d85f655a3534a4422b8fba38c02204df9db87d2eb9fe06edc66870d9ac4c9ce673459f9d43cee0347ce4ffb02ee5a01 0x47 0x3044022010a45f30c6fa97a186eba9e6b595ab87d3dfcbf05dcaf1f1b8e3e7bf39515bb802203474e78d3d372e5f5c0f8c257ce8300c4bb8f37c51d4a894e11a91b5817da6ed01 0x47 0x30440220039cffd8e39850f95112662b1220b14b3c0d3d8a2772e13c947bfbf96345a64e02204154bfa77e2c0134d5434353bed82141e5da1cc479954aa288d5f0671480a04b01\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\"\n+],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "a4b0212494e1b01d46fd6384caf0abc2ae7ef5fe",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 12,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "patch": "@@ -242,8 +242,9 @@ class TestBuilder\n         return *this;\n     }\n \n-    Array GetJSON() const\n+    Array GetJSON()\n     {\n+        DoPush();\n         Array array;\n         array.push_back(FormatScript(spendTx.vin[0].scriptSig));\n         array.push_back(FormatScript(creditTx.vout[0].scriptPubKey));\n@@ -319,40 +320,87 @@ BOOST_AUTO_TEST_CASE(script_build)\n                              ).Num(0).PushSig(keys.key1).Num(0).PushRedeem());\n \n     good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                               \"P2PK with too much R padding but no STRICTENC\", 0\n+                               \"P2PK with too much R padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n     bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                              \"P2PK with too much R padding\", SCRIPT_VERIFY_STRICTENC\n+                              \"P2PK with too much R padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n     good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                               \"P2PK with too much S padding but no STRICTENC\", 0\n+                               \"P2PK with too much S padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n     bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                              \"P2PK with too much S padding\", SCRIPT_VERIFY_STRICTENC\n+                              \"P2PK with too much S padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n     good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                               \"P2PK with too little R padding but no STRICTENC\", 0\n+                               \"P2PK with too little R padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n     bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                              \"P2PK with too little R padding\", SCRIPT_VERIFY_STRICTENC\n+                              \"P2PK with too little R padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with bad sig with too much R padding but no DERSIG\", 0\n+                              ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with bad sig with too much R padding\", SCRIPT_VERIFY_DERSIG\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with too much R padding but no DERSIG\", 0\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n \n     good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n-                               \"P2PK with high S but no LOW_S\", SCRIPT_VERIFY_STRICTENC\n-                              ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n-    good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n-                               \"P2PK with high S but no STRICTENC\", SCRIPT_VERIFY_LOW_S\n+                               \"P2PK with high S but no LOW_S\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n     bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n-                              \"P2PK with high S\", SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC\n+                              \"P2PK with high S\", SCRIPT_VERIFY_LOW_S\n                              ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n \n+    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG,\n+                               \"P2PK with hybrid pubkey but no STRICTENC\", 0\n+                              ).PushSig(keys.key0, SIGHASH_ALL));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG,\n+                              \"P2PK with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key0, SIGHASH_ALL));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with hybrid pubkey but no STRICTENC\", 0\n+                             ).PushSig(keys.key0, SIGHASH_ALL));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                              ).PushSig(keys.key0, SIGHASH_ALL));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\", 0\n+                              ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with invalid hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                              ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n+\n+    good.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG,\n+                               \"P2PK with undefined hashtype but no STRICTENC\", 0\n+                              ).PushSig(keys.key1, 5));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG,\n+                              \"P2PK with undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key1, 5));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\", 0\n+                              ).PushSig(keys.key1, 5).DamagePush(10));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with invalid sig and undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key1, 5).DamagePush(10));\n+\n     good.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n                                \"3-of-3 with nonzero dummy but no NULLDUMMY\", 0\n                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n     bad.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n                               \"3-of-3 with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n                              ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+    good.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\", 0\n+                              ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n+    bad.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"3-of-3 NOT with invalid sig with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n+                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n \n     std::map<std::string, Array> tests_good;\n     std::map<std::string, Array> tests_bad;"
      },
      {
        "sha": "18cb8f3d1ba7af74c2fad0dd7e35ef60f7393ef3",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "patch": "@@ -31,6 +31,7 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"NONE\"), (unsigned int)SCRIPT_VERIFY_NONE)\n     (string(\"P2SH\"), (unsigned int)SCRIPT_VERIFY_P2SH)\n     (string(\"STRICTENC\"), (unsigned int)SCRIPT_VERIFY_STRICTENC)\n+    (string(\"DERSIG\"), (unsigned int)SCRIPT_VERIFY_DERSIG)\n     (string(\"LOW_S\"), (unsigned int)SCRIPT_VERIFY_LOW_S)\n     (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY);\n "
      }
    ]
  },
  {
    "sha": "bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjdiNGZjNmQzYmRmZDkyODNhNjMzZGE3ODMzYTVlYzZmYTNjZDg1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-08T22:46:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-08T22:48:57Z"
      },
      "message": "Merge pull request #5004\n\n9df9cf5 Make SCRIPT_VERIFY_STRICTENC compatible with BIP62 (Pieter Wuille)",
      "tree": {
        "sha": "afb1a13bbabe88337c1f7ebe7acc86cea4286535",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afb1a13bbabe88337c1f7ebe7acc86cea4286535"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUNb9ZAAoJEFeJbS/48LZX5+oL/1+mO3JTjWCmF22Tg6VrQPP9\nQOZTyPiY2/pJN456mBrTd7H4Ga04QLf+r3taA/BPg9H2ma3PkLvkplWnRXvmDLfV\nadpw68iG2Vv8tBuuO0z5gY+m6wYaqkYBCveekoIteqaqP7lWWhgpJUlyN5HJzpO7\nNk37lffZe40RunBtqg2rv/M/fEfWEgEmifd+NpL9PD6yYOSTvKGHfw2dggS1uvEB\nT/I5fa2a2i0cRj4VRWTHf+yGsTWFnt3Oyyver8qPH+VWD67V+3YLR/uPVFG2AU+b\nmCszJD810u2xGxEso8jDvaznZz6xGtLsoqmMbp+i+1RaspRwmiNnTKUnDCocT/o8\ny3BHDaEKTCKOSug71wjd8oOzeQ5q3FTSoTeZDS+b13SMJREBy5z801+XKZTYXstw\nV2YjlAO8o1HCC4BJbyyhbAj2SaTPhTr7XuwDZnmIQmQZCXT7ZqawcgP/EaOnzysz\nfZPTioAKG/hbdQ0VkU92PEm0zJVytIwQYjFPSDS/eQ==\n=kf8q\n-----END PGP SIGNATURE-----",
        "payload": "tree afb1a13bbabe88337c1f7ebe7acc86cea4286535\nparent d4a42334d447cad48fb3996cad0fd5c945b75571\nparent 9df9cf5a9f5f56261b0b226dec6249f9dfbefed6\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1412808414 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1412808537 -0700\n\nMerge pull request #5004\n\n9df9cf5 Make SCRIPT_VERIFY_STRICTENC compatible with BIP62 (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4a42334d447cad48fb3996cad0fd5c945b75571",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4a42334d447cad48fb3996cad0fd5c945b75571",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4a42334d447cad48fb3996cad0fd5c945b75571"
      },
      {
        "sha": "9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9df9cf5a9f5f56261b0b226dec6249f9dfbefed6"
      }
    ],
    "stats": {
      "total": 398,
      "additions": 234,
      "deletions": 164
    },
    "files": [
      {
        "sha": "b20e226c3dd862e39aebbee4520687153b1b37b8",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85",
        "patch": "@@ -40,7 +40,6 @@ BITCOIN_TESTS =\\\n   test/base58_tests.cpp \\\n   test/base64_tests.cpp \\\n   test/bloom_tests.cpp \\\n-  test/canonical_tests.cpp \\\n   test/checkblock_tests.cpp \\\n   test/Checkpoints_tests.cpp \\\n   test/compress_tests.cpp \\"
      },
      {
        "sha": "ae66217b7ca0d6a9b6b821eb3b7e5b0d8891d5a5",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 21,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85",
        "patch": "@@ -52,10 +52,7 @@ static inline void popstack(vector<valtype>& stack)\n     stack.pop_back();\n }\n \n-bool IsCanonicalPubKey(const valtype &vchPubKey, unsigned int flags) {\n-    if (!(flags & SCRIPT_VERIFY_STRICTENC))\n-        return true;\n-\n+bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {\n     if (vchPubKey.size() < 33)\n         return error(\"Non-canonical public key: too short\");\n     if (vchPubKey[0] == 0x04) {\n@@ -70,10 +67,7 @@ bool IsCanonicalPubKey(const valtype &vchPubKey, unsigned int flags) {\n     return true;\n }\n \n-bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n-    if (!(flags & SCRIPT_VERIFY_STRICTENC))\n-        return true;\n-\n+bool static IsDERSignature(const valtype &vchSig) {\n     // See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623\n     // A canonical signature exists of: <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>\n     // Where R and S are not negative (their first byte has its highest bit not set), and not\n@@ -83,9 +77,6 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n         return error(\"Non-canonical signature: too short\");\n     if (vchSig.size() > 73)\n         return error(\"Non-canonical signature: too long\");\n-    unsigned char nHashType = vchSig[vchSig.size() - 1] & (~(SIGHASH_ANYONECANPAY));\n-    if (nHashType < SIGHASH_ALL || nHashType > SIGHASH_SINGLE)\n-        return error(\"Non-canonical signature: unknown hashtype byte\");\n     if (vchSig[0] != 0x30)\n         return error(\"Non-canonical signature: wrong type\");\n     if (vchSig[1] != vchSig.size()-3)\n@@ -117,17 +108,54 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n     if (nLenS > 1 && (S[0] == 0x00) && !(S[1] & 0x80))\n         return error(\"Non-canonical signature: S value excessively padded\");\n \n-    if (flags & SCRIPT_VERIFY_LOW_S) {\n-        // If the S value is above the order of the curve divided by two, its\n-        // complement modulo the order could have been used instead, which is\n-        // one byte shorter when encoded correctly.\n-        if (!CKey::CheckSignatureElement(S, nLenS, true))\n-            return error(\"Non-canonical signature: S value is unnecessarily high\");\n+    return true;\n+}\n+\n+bool static IsLowDERSignature(const valtype &vchSig) {\n+    if (!IsDERSignature(vchSig)) {\n+        return false;\n     }\n+    unsigned int nLenR = vchSig[3];\n+    unsigned int nLenS = vchSig[5+nLenR];\n+    const unsigned char *S = &vchSig[6+nLenR];\n+    // If the S value is above the order of the curve divided by two, its\n+    // complement modulo the order could have been used instead, which is\n+    // one byte shorter when encoded correctly.\n+    if (!CKey::CheckSignatureElement(S, nLenS, true))\n+        return error(\"Non-canonical signature: S value is unnecessarily high\");\n \n     return true;\n }\n \n+bool static IsDefinedHashtypeSignature(const valtype &vchSig) {\n+    if (vchSig.size() == 0) {\n+        return false;\n+    }\n+    unsigned char nHashType = vchSig[vchSig.size() - 1] & (~(SIGHASH_ANYONECANPAY));\n+    if (nHashType < SIGHASH_ALL || nHashType > SIGHASH_SINGLE)\n+        return error(\"Non-canonical signature: unknown hashtype byte\");\n+\n+    return true;\n+}\n+\n+bool static CheckSignatureEncoding(const valtype &vchSig, unsigned int flags) {\n+    if ((flags & (SCRIPT_VERIFY_DERSIG | SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC)) != 0 && !IsDERSignature(vchSig)) {\n+        return false;\n+    } else if ((flags & SCRIPT_VERIFY_LOW_S) != 0 && !IsLowDERSignature(vchSig)) {\n+        return false;\n+    } else if ((flags & SCRIPT_VERIFY_STRICTENC) != 0 && !IsDefinedHashtypeSignature(vchSig)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool static CheckPubKeyEncoding(const valtype &vchSig, unsigned int flags) {\n+    if ((flags & SCRIPT_VERIFY_STRICTENC) != 0 && !IsCompressedOrUncompressedPubKey(vchSig)) {\n+        return false;\n+    }\n+    return true;\n+}\n+\n bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker)\n {\n     CScript::const_iterator pc = script.begin();\n@@ -670,8 +698,11 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     // Drop the signature, since there's no way for a signature to sign itself\n                     scriptCode.FindAndDelete(CScript(vchSig));\n \n-                    bool fSuccess = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                        checker.CheckSig(vchSig, vchPubKey, scriptCode);\n+                    if (!CheckSignatureEncoding(vchSig, flags)) {\n+                        return false;\n+                    }\n+\n+                    bool fSuccess = CheckPubKeyEncoding(vchPubKey, flags) && checker.CheckSig(vchSig, vchPubKey, scriptCode);\n \n                     popstack(stack);\n                     popstack(stack);\n@@ -730,9 +761,12 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         valtype& vchSig    = stacktop(-isig);\n                         valtype& vchPubKey = stacktop(-ikey);\n \n+                        if (!CheckSignatureEncoding(vchSig, flags)) {\n+                            return false;\n+                        }\n+\n                         // Check signature\n-                        bool fOk = IsCanonicalSignature(vchSig, flags) && IsCanonicalPubKey(vchPubKey, flags) &&\n-                            checker.CheckSig(vchSig, vchPubKey, scriptCode);\n+                        bool fOk = CheckPubKeyEncoding(vchPubKey, flags) && checker.CheckSig(vchSig, vchPubKey, scriptCode);\n \n                         if (fOk) {\n                             isig++;"
      },
      {
        "sha": "de5ce2ced1a3450158299e9701ea538925bf66d8",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85",
        "patch": "@@ -28,14 +28,25 @@ enum\n enum\n {\n     SCRIPT_VERIFY_NONE      = 0,\n-    SCRIPT_VERIFY_P2SH      = (1U << 0), // evaluate P2SH (BIP16) subscripts\n-    SCRIPT_VERIFY_STRICTENC = (1U << 1), // enforce strict conformance to DER and SEC2 for signatures and pubkeys\n-    SCRIPT_VERIFY_LOW_S     = (1U << 2), // enforce low S values (<n/2) in signatures (depends on STRICTENC)\n-    SCRIPT_VERIFY_NULLDUMMY = (1U << 3), // verify dummy stack item consumed by CHECKMULTISIG is of zero-length\n-};\n \n-bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey, unsigned int flags);\n-bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig, unsigned int flags);\n+    // Evaluate P2SH subscripts (softfork safe, BIP16).\n+    SCRIPT_VERIFY_P2SH      = (1U << 0),\n+\n+    // Passing a non-strict-DER signature or one with undefined hashtype to a checksig operation causes script failure.\n+    // Passing a pubkey that is not (0x04 + 64 bytes) or (0x02 or 0x03 + 32 bytes) to checksig causes that pubkey to be\n+    // skipped (not softfork safe: this flag can widen the validity of OP_CHECKSIG OP_NOT).\n+    SCRIPT_VERIFY_STRICTENC = (1U << 1),\n+\n+    // Passing a non-strict-DER signature to a checksig operation causes script failure (softfork safe, BIP62 rule 1)\n+    SCRIPT_VERIFY_DERSIG    = (1U << 2),\n+\n+    // Passing a non-strict-DER signature or one with S > order/2 to a checksig operation causes script failure\n+    // (softfork safe, BIP62 rule 5).\n+    SCRIPT_VERIFY_LOW_S     = (1U << 3),\n+\n+    // verify dummy stack item consumed by CHECKMULTISIG is of zero-length (softfork safe, BIP62 rule 7).\n+    SCRIPT_VERIFY_NULLDUMMY = (1U << 4),\n+};\n \n uint256 SignatureHash(const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n "
      },
      {
        "sha": "a17099de72752307ddfe015f985abaf9221c1bb3",
        "filename": "src/test/canonical_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 113,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4a42334d447cad48fb3996cad0fd5c945b75571/src/test/canonical_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4a42334d447cad48fb3996cad0fd5c945b75571/src/test/canonical_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/canonical_tests.cpp?ref=d4a42334d447cad48fb3996cad0fd5c945b75571",
        "patch": "@@ -1,113 +0,0 @@\n-// Copyright (c) 2012-2013 The Bitcoin Core developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-//\n-// Unit tests for canonical signatures\n-//\n-\n-#include \"data/sig_noncanonical.json.h\"\n-#include \"data/sig_canonical.json.h\"\n-#include \"key.h\"\n-#include \"random.h\"\n-#include \"script/interpreter.h\"\n-#include \"util.h\"\n-#include \"utilstrencodings.h\"\n-\n-#include <boost/foreach.hpp>\n-#include <boost/test/unit_test.hpp>\n-#include \"json/json_spirit_writer_template.h\"\n-#include <openssl/ecdsa.h>\n-\n-using namespace std;\n-using namespace json_spirit;\n-\n-// In script_tests.cpp\n-extern Array read_json(const std::string& jsondata);\n-\n-BOOST_AUTO_TEST_SUITE(canonical_tests)\n-\n-// OpenSSL-based test for canonical signature (without test for hashtype byte)\n-bool static IsCanonicalSignature_OpenSSL_inner(const std::vector<unsigned char>& vchSig)\n-{\n-    if (vchSig.size() == 0)\n-        return false;\n-    const unsigned char *input = &vchSig[0];\n-    ECDSA_SIG *psig = NULL;\n-    d2i_ECDSA_SIG(&psig, &input, vchSig.size());\n-    if (psig == NULL)\n-        return false;\n-    unsigned char buf[256];\n-    unsigned char *pbuf = buf;\n-    unsigned int nLen = i2d_ECDSA_SIG(psig, NULL);\n-    if (nLen != vchSig.size()) {\n-        ECDSA_SIG_free(psig);\n-        return false;\n-    }\n-    nLen = i2d_ECDSA_SIG(psig, &pbuf);\n-    ECDSA_SIG_free(psig);\n-    return (memcmp(&vchSig[0], &buf[0], nLen) == 0);\n-}\n-\n-// OpenSSL-based test for canonical signature\n-bool static IsCanonicalSignature_OpenSSL(const std::vector<unsigned char> &vchSignature) {\n-    if (vchSignature.size() < 1)\n-        return false;\n-    if (vchSignature.size() > 127)\n-        return false;\n-    if (vchSignature[vchSignature.size() - 1] & 0x7C)\n-        return false;\n-\n-    std::vector<unsigned char> vchSig(vchSignature);\n-    vchSig.pop_back();\n-    if (!IsCanonicalSignature_OpenSSL_inner(vchSig))\n-        return false;\n-    return true;\n-}\n-\n-BOOST_AUTO_TEST_CASE(script_canon)\n-{\n-    Array tests = read_json(std::string(json_tests::sig_canonical, json_tests::sig_canonical + sizeof(json_tests::sig_canonical)));\n-\n-    BOOST_FOREACH(Value &tv, tests) {\n-        string test = tv.get_str();\n-        if (IsHex(test)) {\n-            std::vector<unsigned char> sig = ParseHex(test);\n-            BOOST_CHECK_MESSAGE(IsCanonicalSignature(sig, SCRIPT_VERIFY_STRICTENC), test);\n-            BOOST_CHECK_MESSAGE(IsCanonicalSignature_OpenSSL(sig), test);\n-        }\n-    }\n-}\n-\n-BOOST_AUTO_TEST_CASE(script_noncanon)\n-{\n-    Array tests = read_json(std::string(json_tests::sig_noncanonical, json_tests::sig_noncanonical + sizeof(json_tests::sig_noncanonical)));\n-\n-    BOOST_FOREACH(Value &tv, tests) {\n-        string test = tv.get_str();\n-        if (IsHex(test)) {\n-            std::vector<unsigned char> sig = ParseHex(test);\n-            BOOST_CHECK_MESSAGE(!IsCanonicalSignature(sig, SCRIPT_VERIFY_STRICTENC), test);\n-            BOOST_CHECK_MESSAGE(!IsCanonicalSignature_OpenSSL(sig), test);\n-        }\n-    }\n-}\n-\n-BOOST_AUTO_TEST_CASE(script_signstrict)\n-{\n-    for (int i=0; i<100; i++) {\n-        CKey key;\n-        key.MakeNewKey(i & 1);\n-        std::vector<unsigned char> sig;\n-        uint256 hash = GetRandHash();\n-\n-        BOOST_CHECK(key.Sign(hash, sig)); // Generate a random signature.\n-        BOOST_CHECK(key.GetPubKey().Verify(hash, sig)); // Check it.\n-        sig.push_back(0x01); // Append a sighash type.\n-\n-        BOOST_CHECK(IsCanonicalSignature(sig, SCRIPT_VERIFY_STRICTENC | SCRIPT_VERIFY_LOW_S));\n-        BOOST_CHECK(IsCanonicalSignature_OpenSSL(sig));\n-    }\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "b6447cb2213f06f12c2d411e35c03a1c6ee5fa46",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85",
        "patch": "@@ -444,18 +444,66 @@ nSequences are max.\n     \"STRICTENC\",\n     \"P2PK with too little R padding\"\n ],\n+[\n+    \"0x47 0x30440220001d0f82c127470cb38316c96b1719b33382353687a1146a776dee8259606905022062cd1fc8eacef819d68f0f41cc9ae9fdc2e29b70c3c7ad2c6c18f39b4e35c42701\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"P2PK NOT with bad sig with too much R padding\"\n+],\n+[\n+    \"0x47 0x30440220005d727e2a82d6e8a98a6da6fbc281325644d1a40455e386fdb17883a8e6bc4d02202d15cca42ce136047a980d288e60c679d7e84cce18c3ceffb6bc81b9e9ba517801\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with too much R padding but no DERSIG\"\n+],\n+[\n+    \"0x47 0x30440220006e8bc4f82032b12bd594847c16d8b2986de734aa3b0528bd89d664d41e6d1c02200cfd582694891bcfa2e630e899bda257486eba00a007222fae71144dba07dc2901\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"P2PK NOT with too much R padding\"\n+],\n [\n     \"0x48 0x304502206c43e065c8a8db3bbe69015afb86a51fb2fc8870defd41d436da2a197d9d6c12022100fcec35816ee2d84ec271ad159fcabf5dd712157051169e48ac328a7818cdb51e01\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n     \"LOW_S,STRICTENC\",\n     \"P2PK with high S\"\n ],\n+[\n+    \"0x47 0x304402203aab50cd7c30cc1e1475dee615b295bcee6ccf8aa8a7f6cda6b696c70d79cbb40220558e43fe7596c31146e2d077698d5a9c38351d8ba567549a2ae43ca97231c39501\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"STRICTENC\",\n+    \"P2PK with hybrid pubkey\"\n+],\n+[\n+    \"0x47 0x304402205745e8f846110c185ee1185c01843a108588b81463d2c34d4a3f2445529f12fe02206ee6a2657bbc4e2bb74bfc44c3a5c4f410ed6356ca68982465de6ca807c807c201\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with hybrid pubkey but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x304402201f82b99a813c9c48c8dee8d2c43b8f637b72353fe9bdcc084537bc17e2ab770402200c43b96a5f7e115f0114eabda32e068145965cb6c7b5ef64833bb4fcf9fc1b3b05\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n+    \"STRICTENC\",\n+    \"P2PK with undefined hashtype\"\n+],\n+[\n+    \"0x47 0x30440220166848cd5b82a32b5944d90de3c35249354b43773c2ece1844ee8d1103e2f6c602203b6b046da4243c77adef80ada9201b27bbfdf7f9d5428f40434b060432afd62005\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"P2PK NOT with invalid sig and undefined hashtype\"\n+],\n [\n     \"0x01 0x01 0x47 0x304402200e48ba1cf4d7182db94ffb57bd72ea31b5545dc0d1c512e665779b4fb2badc52022054b8388dfc074c708a75b62359b7be46402751ee40c0a111aef38a837b6ed09801 0x47 0x304402201c9820f59c49107bb30e6175cfc9ec95f897b03beb628b4bc854d2b80392aa0602200235d986ae418bcd111b8814f4c26a0ab5f475fb542a44884fc14912a97a252301 0x47 0x304402204cd7894c6f10a871f5b0c1f9c13228f8cdd4050248f0d0f498ee86be69ee3080022051bd2932c7d585eb600c7194235c74da820935f0d67972fd9545673aa1fd023301\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n     \"NULLDUMMY\",\n     \"3-of-3 with nonzero dummy\"\n ],\n+[\n+    \"0x01 0x01 0x47 0x304402201847fc3b8f7597768e7f543c58da1fca6e8e35eb28979431e6b637572ce6eaa4022048dd58608e040841d0bf52a70cfb70e1a9c8d2826fad068f4e9d2bf5c87766a501 0x47 0x30440220711311a72516affed73363763983d05c3d6a06a2eadf5d76b90b4354162ba94302204841a69e5955a7dc8e4ab3105fd0c86040c1dac6016297a51ddbf5079c28756801 0x47 0x30440220267e331a378191e7282fd10d61c97bf74bc97c233c5833d677936424ac08dee502201eee83d88b91988e1c4d9b979df2404aa190e0987a8ca09c4e5cd61da1d48ecc01\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG NOT\",\n+    \"NULLDUMMY\",\n+    \"3-of-3 NOT with invalid sig with nonzero dummy\"\n+],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "88bec7238c77e5090f4f2cbe6152129fa0fccd1b",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 52,
        "deletions": 10,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85",
        "patch": "@@ -572,22 +572,28 @@ nSequences are max.\n     \"P2SH(2-of-3)\"\n ],\n [\n-    \"0x47 0x304402200001cae94b795baaafb05db38cf24cd75560cab2c36c91e29fac7d0fd2a723a3022058e2e56e568ce7c4b2b106210d114e1faa079407a6ed4154f230667c7d3583bc01\",\n+    \"0x47 0x30440220001fff8863c84c0efc8eea5bffb7f388313f966f23a00ad3c0acc30ff5339684022016e6d78f51a3a1c362745931ca40b24f71cba2903dbfe5a6d392a9189127d83701\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n-    \"P2PK with too much R padding but no STRICTENC\"\n+    \"P2PK with too much R padding but no DERSIG\"\n ],\n [\n-    \"0x48 0x304502206d01de7c2a40ac2bb1231ed97f3890a1782f421d4c28b97166deff317990288f0221005e720213b089355be2cf785d81a82c59307d30e1624f450ed9ca1ebbc11cca6d01\",\n+    \"0x48 0x304502202323d56f293842b544cacedd06baafb999196dfa1c2975314848c158ac606655022100514bd98186b8a3a1cc87f4aff76aed797781389f13f50d87bf95b2df6e488fcc01\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n-    \"P2PK with too much S padding but no STRICTENC\"\n+    \"P2PK with too much S padding but no DERSIG\"\n ],\n [\n-    \"0x47 0x30440220f3d8889602147d60d26c1d3b21b8db183eac02bf6d2fec1424c0ef377ca6fd7b02202bae8bfe39d00a432d4538a592e338b0ffc44c17d4b7056043d55063cf91f5ef01\",\n+    \"0x47 0x30440220d31c24bb6c08a496e7698a08fd41975115d7b55bfaa31cb2d573e09481e59a6702206a691239996434076b78a4e1cf46fc8e993b468a9c77fb1832186aa8040a61a201\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n-    \"P2PK with too little R padding but no STRICTENC\"\n+    \"P2PK with too little R padding but no DERSIG\"\n+],\n+[\n+    \"0x47 0x30440220007c2cc7aef1801c2937447703c87ef2a3744209ad98da2abadd4ba8bb2e3ea00220503a275582c9f9e9ff30260c81b7f64b8b696f22105605cc8241fb76a797316201\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with bad sig with too much R padding but no DERSIG\"\n ],\n [\n     \"0x48 0x3045022021bf9184d94f208ac9f4757ebca9b1cbebf008cfc244fe5be1360b1b9aba0e92022100e55074f72f3a1bfddf2ea4ea7ba984f78822e136fe04c8f9c1363238e0233bd801\",\n@@ -596,17 +602,53 @@ nSequences are max.\n     \"P2PK with high S but no LOW_S\"\n ],\n [\n-    \"0x48 0x304502205c3e81aaf2aad0673f349035b180eba783eba7797af91c979920dea6b17a16d6022100d1d46825c68da1b325f320a3503dad27bb818227f64a38d153554bfd360c0e5301\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n-    \"LOW_S\",\n-    \"P2PK with high S but no STRICTENC\"\n+    \"0x47 0x304402202163bc732c21b7de0251297d3c6c2ece182782e85fc5e19d6036f1130a79051e022033827811634924ebba68767537d78dd7bd9109ae2a89a60587927abdc25eb06401\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"\",\n+    \"P2PK with hybrid pubkey but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x3044022078033e4227aa05ded69d8da579966578e230d8a7fb44d5f1a0620c3853c24f78022006a2e3f4d872ac8dfdc529110aa37301d65a76255a4b6cce2992adacd4d2c4e201\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"P2PK NOT with hybrid pubkey\"\n+],\n+[\n+    \"0x47 0x3044022078d6c447887e88dcbe1bc5b613645280df6f4e5935648bc226e9d91da71b3216022047d6b7ef0949b228fc1b359afb8d50500268711354298217b983c26970790c7601\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x304402207592427de20e315d644839754f2a5cca5b978b983a15e6da82109ede01722baa022032ceaf78590faa3f7743821e1b47b897ed1a57f6ee1c8a7519d23774d8de3c4401\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"P2PK NOT with invalid hybrid pubkey\"\n+],\n+[\n+    \"0x47 0x304402204649e9517ef0377a8f8270bd423053fd98ddff62d74ea553e9579558abbb75e4022044a2b2344469c12e35ed898987711272b634733dd0f5e051288eceb04bd4669e05\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n+    \"\",\n+    \"P2PK with undefined hashtype but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x304402207f1cf1866a2df0bb4b8d84d0ade72aa3abb6aaab0639d608b23d9e10ead0c48202203caa97f22c3439443eea4b89f7f6729854df0f567a8184d6ecc6e8b6c68c3e9d05\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG NOT\",\n+    \"\",\n+    \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\"\n ],\n [\n     \"0x01 0x01 0x47 0x3044022046ce33d1771b0127dd4c4cef8fdc3218ebdfa60e3793ed700292d8ebd93fb1f402201029d47a414db83e96e31443c2d8b552f971469c4800f5eff7df2f0648521aed01 0x47 0x304402205c53911ad55b054920043962bbda98cf6e57e2db1cd5611138251490baabaa8702201dc80dfceae6007e7772dc13ff6e7ca66a983cb017fe5d46d30118462d83bcf801 0x47 0x304402201937e44a4ec12364f9d32f9d25e7ecbc68aee9ef90069af80efef4c05f6ace9602206c515101c00c75710b32ff7ff8dbaf7c9a0be6e86ed14a0755b47626604f31fd01\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n     \"\",\n     \"3-of-3 with nonzero dummy but no NULLDUMMY\"\n ],\n+[\n+    \"0x01 0x01 0x47 0x30440220195038dbc6b2ae1199f86a6777824f7c5149789d85f655a3534a4422b8fba38c02204df9db87d2eb9fe06edc66870d9ac4c9ce673459f9d43cee0347ce4ffb02ee5a01 0x47 0x3044022010a45f30c6fa97a186eba9e6b595ab87d3dfcbf05dcaf1f1b8e3e7bf39515bb802203474e78d3d372e5f5c0f8c257ce8300c4bb8f37c51d4a894e11a91b5817da6ed01 0x47 0x30440220039cffd8e39850f95112662b1220b14b3c0d3d8a2772e13c947bfbf96345a64e02204154bfa77e2c0134d5434353bed82141e5da1cc479954aa288d5f0671480a04b01\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\"\n+],\n \n [\"The End\"]\n ]"
      },
      {
        "sha": "a4b0212494e1b01d46fd6384caf0abc2ae7ef5fe",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 12,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85",
        "patch": "@@ -242,8 +242,9 @@ class TestBuilder\n         return *this;\n     }\n \n-    Array GetJSON() const\n+    Array GetJSON()\n     {\n+        DoPush();\n         Array array;\n         array.push_back(FormatScript(spendTx.vin[0].scriptSig));\n         array.push_back(FormatScript(creditTx.vout[0].scriptPubKey));\n@@ -319,40 +320,87 @@ BOOST_AUTO_TEST_CASE(script_build)\n                              ).Num(0).PushSig(keys.key1).Num(0).PushRedeem());\n \n     good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                               \"P2PK with too much R padding but no STRICTENC\", 0\n+                               \"P2PK with too much R padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n     bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                              \"P2PK with too much R padding\", SCRIPT_VERIFY_STRICTENC\n+                              \"P2PK with too much R padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n     good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                               \"P2PK with too much S padding but no STRICTENC\", 0\n+                               \"P2PK with too much S padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n     bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                              \"P2PK with too much S padding\", SCRIPT_VERIFY_STRICTENC\n+                              \"P2PK with too much S padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n     good.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                               \"P2PK with too little R padding but no STRICTENC\", 0\n+                               \"P2PK with too little R padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n     bad.push_back(TestBuilder(CScript() << keys.pubkey1C << OP_CHECKSIG,\n-                              \"P2PK with too little R padding\", SCRIPT_VERIFY_STRICTENC\n+                              \"P2PK with too little R padding\", SCRIPT_VERIFY_DERSIG\n                              ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with bad sig with too much R padding but no DERSIG\", 0\n+                              ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with bad sig with too much R padding\", SCRIPT_VERIFY_DERSIG\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with too much R padding but no DERSIG\", 0\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n \n     good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n-                               \"P2PK with high S but no LOW_S\", SCRIPT_VERIFY_STRICTENC\n-                              ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n-    good.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n-                               \"P2PK with high S but no STRICTENC\", SCRIPT_VERIFY_LOW_S\n+                               \"P2PK with high S but no LOW_S\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n     bad.push_back(TestBuilder(CScript() << keys.pubkey2C << OP_CHECKSIG,\n-                              \"P2PK with high S\", SCRIPT_VERIFY_LOW_S | SCRIPT_VERIFY_STRICTENC\n+                              \"P2PK with high S\", SCRIPT_VERIFY_LOW_S\n                              ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n \n+    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG,\n+                               \"P2PK with hybrid pubkey but no STRICTENC\", 0\n+                              ).PushSig(keys.key0, SIGHASH_ALL));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG,\n+                              \"P2PK with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key0, SIGHASH_ALL));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with hybrid pubkey but no STRICTENC\", 0\n+                             ).PushSig(keys.key0, SIGHASH_ALL));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                              ).PushSig(keys.key0, SIGHASH_ALL));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\", 0\n+                              ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey0H << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with invalid hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                              ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n+\n+    good.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG,\n+                               \"P2PK with undefined hashtype but no STRICTENC\", 0\n+                              ).PushSig(keys.key1, 5));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG,\n+                              \"P2PK with undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key1, 5));\n+    good.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG << OP_NOT,\n+                               \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\", 0\n+                              ).PushSig(keys.key1, 5).DamagePush(10));\n+    bad.push_back(TestBuilder(CScript() << keys.pubkey1 << OP_CHECKSIG << OP_NOT,\n+                              \"P2PK NOT with invalid sig and undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n+                             ).PushSig(keys.key1, 5).DamagePush(10));\n+\n     good.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n                                \"3-of-3 with nonzero dummy but no NULLDUMMY\", 0\n                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n     bad.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG,\n                               \"3-of-3 with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n                              ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+    good.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n+                               \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\", 0\n+                              ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n+    bad.push_back(TestBuilder(CScript() << OP_3 << keys.pubkey0C << keys.pubkey1C << keys.pubkey2C << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n+                              \"3-of-3 NOT with invalid sig with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n+                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n \n     std::map<std::string, Array> tests_good;\n     std::map<std::string, Array> tests_bad;"
      },
      {
        "sha": "18cb8f3d1ba7af74c2fad0dd7e35ef60f7393ef3",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85",
        "patch": "@@ -31,6 +31,7 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"NONE\"), (unsigned int)SCRIPT_VERIFY_NONE)\n     (string(\"P2SH\"), (unsigned int)SCRIPT_VERIFY_P2SH)\n     (string(\"STRICTENC\"), (unsigned int)SCRIPT_VERIFY_STRICTENC)\n+    (string(\"DERSIG\"), (unsigned int)SCRIPT_VERIFY_DERSIG)\n     (string(\"LOW_S\"), (unsigned int)SCRIPT_VERIFY_LOW_S)\n     (string(\"NULLDUMMY\"), (unsigned int)SCRIPT_VERIFY_NULLDUMMY);\n "
      }
    ]
  },
  {
    "sha": "dec58922d07241f0b502c96f8e5131abccbd5dc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWM1ODkyMmQwNzI0MWYwYjUwMmM5NmY4ZTUxMzFhYmNjYmQ1ZGMx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-08T22:49:37Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-08T22:51:32Z"
      },
      "message": "Merge pull request #4996\n\nd0c4197 change exit(1) to an assert in CWallet::EncryptWallet (Philip Kaufmann)\n870da77 fix possible memory leaks in CWallet::EncryptWallet (Philip Kaufmann)\nf606bb9 fix a possible memory leak in CWalletDB::Recover (Philip Kaufmann)",
      "tree": {
        "sha": "6061a94c3cbc9b0b8948009df3ef7ee4d00e02c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6061a94c3cbc9b0b8948009df3ef7ee4d00e02c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dec58922d07241f0b502c96f8e5131abccbd5dc1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUNb/0AAoJEFeJbS/48LZXqZkL/jczzyOPoQ6tVZZUj1f+zpj0\nNA6322tojIOF1dQUkwocw/oeZUwNfdm3uaawRBdVw2lZ+7ItSYsloHJyef2bvoyn\nhKez+Asq5jQ8yqwG96SXatWptiTznHYAfyb787K7tFJuYmZeY122MVmWoe2j/eUQ\ni2cmZo0SE62iAftbkcfJ2+sk8Sg7riSHVb6pMGJmFupZKlpdmamqAqIHJux7jxU1\nt2vg9DpUM7nmdb0H/44+p+pUQGA9igLqrHkVhQqwybtIwEKtV6OjnAKTRD2DwoBS\nBYjk435ZUgR0/D84NDNZwl3eHnKWr6hYApsxVnTYJHiVBBhrO7zBhE5H/JZs2B73\nuJWMRHRzAXAyklM9/6BTaTxUS40mdu8OGzNGmrR114O+MAnRvotyBnP83mqrQj14\nnSK8R3IFqI7azKiP+XvR2oTQqPjutepif5xNkz1knRtAlMZKPZ6gTXMDS5vXXS/x\nbxDSg9X8TUbFEWPw6A2NhdCNYi+uAoOtteP+KyUiYg==\n=bSb1\n-----END PGP SIGNATURE-----",
        "payload": "tree 6061a94c3cbc9b0b8948009df3ef7ee4d00e02c9\nparent bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85\nparent d0c4197ef6ecfdaff792579810107e2f1b8b319e\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1412808577 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1412808692 -0700\n\nMerge pull request #4996\n\nd0c4197 change exit(1) to an assert in CWallet::EncryptWallet (Philip Kaufmann)\n870da77 fix possible memory leaks in CWallet::EncryptWallet (Philip Kaufmann)\nf606bb9 fix a possible memory leak in CWalletDB::Recover (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec58922d07241f0b502c96f8e5131abccbd5dc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dec58922d07241f0b502c96f8e5131abccbd5dc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec58922d07241f0b502c96f8e5131abccbd5dc1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf7b4fc6d3bdfd9283a633da7833a5ec6fa3cd85"
      },
      {
        "sha": "d0c4197ef6ecfdaff792579810107e2f1b8b319e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0c4197ef6ecfdaff792579810107e2f1b8b319e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0c4197ef6ecfdaff792579810107e2f1b8b319e"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 31,
      "deletions": 10
    },
    "files": [
      {
        "sha": "026c53aa2e3c92ce0dbfa6c4bb6936c539768444",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dec58922d07241f0b502c96f8e5131abccbd5dc1/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dec58922d07241f0b502c96f8e5131abccbd5dc1/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "patch": "@@ -15,6 +15,8 @@\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n \n+#include <assert.h>\n+\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/thread.hpp>\n \n@@ -426,26 +428,38 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         mapMasterKeys[++nMasterKeyMaxID] = kMasterKey;\n         if (fFileBacked)\n         {\n+            assert(!pwalletdbEncryption);\n             pwalletdbEncryption = new CWalletDB(strWalletFile);\n-            if (!pwalletdbEncryption->TxnBegin())\n+            if (!pwalletdbEncryption->TxnBegin()) {\n+                delete pwalletdbEncryption;\n+                pwalletdbEncryption = NULL;\n                 return false;\n+            }\n             pwalletdbEncryption->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n         }\n \n         if (!EncryptKeys(vMasterKey))\n         {\n-            if (fFileBacked)\n+            if (fFileBacked) {\n                 pwalletdbEncryption->TxnAbort();\n-            exit(1); //We now probably have half of our keys encrypted in memory, and half not...die and let the user reload their unencrypted wallet.\n+                delete pwalletdbEncryption;\n+            }\n+            // We now probably have half of our keys encrypted in memory, and half not...\n+            // die and let the user reload their unencrypted wallet.\n+            assert(false);\n         }\n \n         // Encryption was introduced in version 0.4.0\n         SetMinVersion(FEATURE_WALLETCRYPT, pwalletdbEncryption, true);\n \n         if (fFileBacked)\n         {\n-            if (!pwalletdbEncryption->TxnCommit())\n-                exit(1); //We now have keys encrypted in memory, but no on disk...die to avoid confusion and let the user reload their unencrypted wallet.\n+            if (!pwalletdbEncryption->TxnCommit()) {\n+                delete pwalletdbEncryption;\n+                // We now have keys encrypted in memory, but no on disk...\n+                // die to avoid confusion and let the user reload their unencrypted wallet.\n+                assert(false);\n+            }\n \n             delete pwalletdbEncryption;\n             pwalletdbEncryption = NULL;\n@@ -1068,7 +1082,7 @@ CAmount CWallet::GetWatchOnlyBalance() const\n                 nTotal += pcoin->GetAvailableWatchOnlyCredit();\n         }\n     }\n-    \n+\n     return nTotal;\n }\n "
      },
      {
        "sha": "58e285b7eba6355a08c4a824fd83681c30fac63e",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dec58922d07241f0b502c96f8e5131abccbd5dc1/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dec58922d07241f0b502c96f8e5131abccbd5dc1/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "patch": "@@ -143,13 +143,21 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     {\n         SetNull();\n     }\n+\n     CWallet(std::string strWalletFileIn)\n     {\n         SetNull();\n \n         strWalletFile = strWalletFileIn;\n         fFileBacked = true;\n     }\n+\n+    ~CWallet()\n+    {\n+        delete pwalletdbEncryption;\n+        pwalletdbEncryption = NULL;\n+    }\n+\n     void SetNull()\n     {\n         nWalletVersion = FEATURE_BASE;"
      },
      {
        "sha": "e09bb8d1b27660df73c22cd498cbaed56bb25773",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dec58922d07241f0b502c96f8e5131abccbd5dc1/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dec58922d07241f0b502c96f8e5131abccbd5dc1/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "patch": "@@ -15,11 +15,11 @@\n \n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n+#include <boost/scoped_ptr.hpp>\n #include <boost/thread.hpp>\n \n-using namespace std;\n using namespace boost;\n-\n+using namespace std;\n \n static uint64_t nAccountingEntryNumber = 0;\n \n@@ -918,7 +918,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n \n     bool fSuccess = allOK;\n-    Db* pdbCopy = new Db(&dbenv.dbenv, 0);\n+    boost::scoped_ptr<Db> pdbCopy(new Db(&dbenv.dbenv, 0));\n     int ret = pdbCopy->open(NULL,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name\n@@ -959,7 +959,6 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     }\n     ptxn->commit(0);\n     pdbCopy->close(0);\n-    delete pdbCopy;\n \n     return fSuccess;\n }"
      }
    ]
  },
  {
    "sha": "e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDFhNzkzOWQzYTNiMjMxZjY4YWUyZjM2Y2JjNGRlMGNmNGQ0OTk5",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-10-07T17:11:48Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-10-09T14:25:30Z"
      },
      "message": "Refactor -alertnotify code\n\nRefactor common -alertnotify code into static CAlert::Notify method.",
      "tree": {
        "sha": "4abe870bb84c4667b4b901f458457cca7b620029",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4abe870bb84c4667b4b901f458457cca7b620029"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlQ2mtoACgkQdYgkL74406ichgCfXGiplcxxyAtTqDuVv4ijWcaL\nJpgAn0KQPR8bfdSZ/vyJzIqh9570a+D0\n=7eXr\n-----END PGP SIGNATURE-----",
        "payload": "tree 4abe870bb84c4667b4b901f458457cca7b620029\nparent 7c6cbff0e52d4b69fd823426341a4d62d29b2c16\nauthor Gavin Andresen <gavinandresen@gmail.com> 1412701908 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1412864730 -0400\n\nRefactor -alertnotify code\n\nRefactor common -alertnotify code into static CAlert::Notify method.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c6cbff0e52d4b69fd823426341a4d62d29b2c16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c6cbff0e52d4b69fd823426341a4d62d29b2c16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c6cbff0e52d4b69fd823426341a4d62d29b2c16"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 26,
      "deletions": 25
    },
    "files": [
      {
        "sha": "d495849206d46a7cccf6bd168456347b358b0310",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 16,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999",
        "patch": "@@ -233,25 +233,30 @@ bool CAlert::ProcessAlert(bool fThread)\n         if(AppliesToMe())\n         {\n             uiInterface.NotifyAlertChanged(GetHash(), CT_NEW);\n-            std::string strCmd = GetArg(\"-alertnotify\", \"\");\n-            if (!strCmd.empty())\n-            {\n-                // Alert text should be plain ascii coming from a trusted source, but to\n-                // be safe we first strip anything not in safeChars, then add single quotes around\n-                // the whole string before passing it to the shell:\n-                std::string singleQuote(\"'\");\n-                std::string safeStatus = SanitizeString(strStatusBar);\n-                safeStatus = singleQuote+safeStatus+singleQuote;\n-                boost::replace_all(strCmd, \"%s\", safeStatus);\n-\n-                if (fThread)\n-                    boost::thread t(runCommand, strCmd); // thread runs free\n-                else\n-                    runCommand(strCmd);\n-            }\n+            Notify(strStatusBar, fThread);\n         }\n     }\n \n     LogPrint(\"alert\", \"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());\n     return true;\n }\n+\n+void\n+CAlert::Notify(const std::string& strMessage, bool fThread)\n+{\n+    std::string strCmd = GetArg(\"-alertnotify\", \"\");\n+    if (strCmd.empty()) return;\n+\n+    // Alert text should be plain ascii coming from a trusted source, but to\n+    // be safe we first strip anything not in safeChars, then add single quotes around\n+    // the whole string before passing it to the shell:\n+    std::string singleQuote(\"'\");\n+    std::string safeStatus = SanitizeString(strMessage);\n+    safeStatus = singleQuote+safeStatus+singleQuote;\n+    boost::replace_all(strCmd, \"%s\", safeStatus);\n+\n+    if (fThread)\n+        boost::thread t(runCommand, strCmd); // thread runs free\n+    else\n+        runCommand(strCmd);\n+}"
      },
      {
        "sha": "ba3235858dbb79b0448b6d5e9d73da6bf117deb6",
        "filename": "src/alert.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999/src/alert.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999/src/alert.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.h?ref=e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999",
        "patch": "@@ -101,7 +101,8 @@ class CAlert : public CUnsignedAlert\n     bool AppliesToMe() const;\n     bool RelayTo(CNode* pnode) const;\n     bool CheckSignature() const;\n-    bool ProcessAlert(bool fThread = true);\n+    bool ProcessAlert(bool fThread = true); // fThread means run -alertnotify in a free-running thread\n+    static void Notify(const std::string& strMessage, bool fThread);\n \n     /*\n      * Get copy of (active) alert object by hash. Returns a null alert if it is not found."
      },
      {
        "sha": "106c336a83586983359a525ac2fdf506e1c29008",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999",
        "patch": "@@ -1178,14 +1178,9 @@ void CheckForkWarningConditions()\n     {\n         if (!fLargeWorkForkFound)\n         {\n-            std::string strCmd = GetArg(\"-alertnotify\", \"\");\n-            if (!strCmd.empty())\n-            {\n-                std::string warning = std::string(\"'Warning: Large-work fork detected, forking after block \") +\n-                                      pindexBestForkBase->phashBlock->ToString() + std::string(\"'\");\n-                boost::replace_all(strCmd, \"%s\", warning);\n-                boost::thread t(runCommand, strCmd); // thread runs free\n-            }\n+            std::string warning = std::string(\"'Warning: Large-work fork detected, forking after block \") +\n+                pindexBestForkBase->phashBlock->ToString() + std::string(\"'\");\n+            CAlert::Notify(warning, true);\n         }\n         if (pindexBestForkTip)\n         {"
      }
    ]
  },
  {
    "sha": "dbca89b74b76610331d21656cd6747f5bf8375d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmNhODliNzRiNzY2MTAzMzFkMjE2NTZjZDY3NDdmNWJmODM3NWQ2",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-10-07T18:22:58Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-10-09T14:28:27Z"
      },
      "message": "Trigger -alertnotify if network is upgrading without you\n\nThis adds a -regetest-only undocumented (for regression testing only)\ncommand-line option -blockversion=N to set block.nVersion.\n\nAdds to the \"has the rest of the network upgraded to a\nblock.nVersion we don't understand\" code so it calls\n-alertnotify when 51 of the last 100 blocks are up-version.\nBut it only alerts once, not with every subsequent new, upversion\nblock.\n\nAnd adds a forknotify.py regression test to make sure it works.\n\nTested using forknotify.py:\n\nBefore adding CAlert::Notify, get:\nAssertion failed: -alertnotify did not warn of up-version blocks\n\nBefore adding code to only alert once:\nAssertion failed: -alertnotify excessive warning of up-version blocks\n\nAfter final code in this pull:\nTests successful",
      "tree": {
        "sha": "aaf91b54261aa4f57654367a3ee4fe96454bb784",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aaf91b54261aa4f57654367a3ee4fe96454bb784"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbca89b74b76610331d21656cd6747f5bf8375d6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlQ2m40ACgkQdYgkL74406h4XACggV7bASup0oBR7sWQb+9FwDrk\nOnIAn2M6F6qI3CQ6iNLSIA1q3nV3mQO3\n=gNJh\n-----END PGP SIGNATURE-----",
        "payload": "tree aaf91b54261aa4f57654367a3ee4fe96454bb784\nparent e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999\nauthor Gavin Andresen <gavinandresen@gmail.com> 1412706178 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1412864907 -0400\n\nTrigger -alertnotify if network is upgrading without you\n\nThis adds a -regetest-only undocumented (for regression testing only)\ncommand-line option -blockversion=N to set block.nVersion.\n\nAdds to the \"has the rest of the network upgraded to a\nblock.nVersion we don't understand\" code so it calls\n-alertnotify when 51 of the last 100 blocks are up-version.\nBut it only alerts once, not with every subsequent new, upversion\nblock.\n\nAnd adds a forknotify.py regression test to make sure it works.\n\nTested using forknotify.py:\n\nBefore adding CAlert::Notify, get:\nAssertion failed: -alertnotify did not warn of up-version blocks\n\nBefore adding code to only alert once:\nAssertion failed: -alertnotify excessive warning of up-version blocks\n\nAfter final code in this pull:\nTests successful\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbca89b74b76610331d21656cd6747f5bf8375d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbca89b74b76610331d21656cd6747f5bf8375d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbca89b74b76610331d21656cd6747f5bf8375d6/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e01a7939d3a3b231f68ae2f36cbc4de0cf4d4999"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 77,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1ef47d77f4d13043303dc9cb421d60a2fd3d1fb5",
        "filename": "qa/pull-tester/build-tests.sh.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbca89b74b76610331d21656cd6747f5bf8375d6/qa/pull-tester/build-tests.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbca89b74b76610331d21656cd6747f5bf8375d6/qa/pull-tester/build-tests.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/build-tests.sh.in?ref=dbca89b74b76610331d21656cd6747f5bf8375d6",
        "patch": "@@ -75,6 +75,7 @@ make check\n # Run RPC integration test on Linux:\n @abs_top_srcdir@/qa/rpc-tests/wallet.sh @abs_top_srcdir@/linux-build/src\n @abs_top_srcdir@/qa/rpc-tests/listtransactions.py --srcdir @abs_top_srcdir@/linux-build/src\n+@abs_top_srcdir@/qa/rpc-tests/forknotify.py --srcdir @abs_top_srcdir@/linux-build/src\n # Clean up cache/ directory that the python regression tests create\n rm -rf cache\n "
      },
      {
        "sha": "a482f7cc5ad6725e78ae57473c1dc56b9b306590",
        "filename": "qa/rpc-tests/forknotify.py",
        "status": "added",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbca89b74b76610331d21656cd6747f5bf8375d6/qa/rpc-tests/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbca89b74b76610331d21656cd6747f5bf8375d6/qa/rpc-tests/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/forknotify.py?ref=dbca89b74b76610331d21656cd6747f5bf8375d6",
        "patch": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test -alertnotify \n+#\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+import os\n+import shutil\n+\n+class ForkNotifyTest(BitcoinTestFramework):\n+\n+    alert_filename = None  # Set by setup_network\n+\n+    def setup_network(self, test_dir):\n+        nodes = []\n+        self.alert_filename = os.path.join(test_dir, \"alert.txt\")\n+        with open(self.alert_filename, 'w') as f:\n+            pass  # Just open then close to create zero-length file\n+        nodes.append(start_node(0, test_dir,\n+                            [\"-blockversion=2\", \"-alertnotify=echo %s >> '\" + self.alert_filename + \"'\"]))\n+        # Node1 mines block.version=211 blocks\n+        nodes.append(start_node(1, test_dir,\n+                                [\"-blockversion=211\"]))\n+        connect_nodes(nodes[1], 0)\n+\n+        sync_blocks(nodes)\n+        return nodes\n+        \n+\n+    def run_test(self, nodes):\n+        # Mine 51 up-version blocks\n+        nodes[1].setgenerate(True, 51)\n+        sync_blocks(nodes)\n+        # -alertnotify should trigger on the 51'st,\n+        # but mine and sync another to give\n+        # -alertnotify time to write\n+        nodes[1].setgenerate(True, 1)\n+        sync_blocks(nodes)\n+\n+        with open(self.alert_filename, 'r') as f:\n+            alert_text = f.read()\n+\n+        if len(alert_text) == 0:\n+            raise AssertionError(\"-alertnotify did not warn of up-version blocks\")\n+\n+        # Mine more up-version blocks, should not get more alerts:\n+        nodes[1].setgenerate(True, 1)\n+        sync_blocks(nodes)\n+        nodes[1].setgenerate(True, 1)\n+        sync_blocks(nodes)\n+\n+        with open(self.alert_filename, 'r') as f:\n+            alert_text2 = f.read()\n+\n+        if alert_text != alert_text2:\n+            raise AssertionError(\"-alertnotify excessive warning of up-version blocks\")\n+\n+if __name__ == '__main__':\n+    ForkNotifyTest().main()"
      },
      {
        "sha": "43b81aaef83705f7db0afa7b9e4d626cdf93e799",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbca89b74b76610331d21656cd6747f5bf8375d6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbca89b74b76610331d21656cd6747f5bf8375d6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dbca89b74b76610331d21656cd6747f5bf8375d6",
        "patch": "@@ -1755,7 +1755,8 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     cvBlockChange.notify_all();\n \n     // Check the version of the last 100 blocks to see if we need to upgrade:\n-    if (!IsInitialBlockDownload())\n+    static bool fWarned = false;\n+    if (!IsInitialBlockDownload() && !fWarned)\n     {\n         int nUpgraded = 0;\n         const CBlockIndex* pindex = chainActive.Tip();\n@@ -1768,8 +1769,12 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n         if (nUpgraded > 0)\n             LogPrintf(\"SetBestChain: %d of last 100 blocks above version %d\\n\", nUpgraded, (int)CBlock::CURRENT_VERSION);\n         if (nUpgraded > 100/2)\n+        {\n             // strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:\n             strMiscWarning = _(\"Warning: This version is obsolete, upgrade required!\");\n+            CAlert::Notify(strMiscWarning, true);\n+            fWarned = true;\n+        }\n     }\n }\n "
      },
      {
        "sha": "2eb028b1d32b91fed2d13765f8eff4318e3cdd5c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbca89b74b76610331d21656cd6747f5bf8375d6/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbca89b74b76610331d21656cd6747f5bf8375d6/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=dbca89b74b76610331d21656cd6747f5bf8375d6",
        "patch": "@@ -83,6 +83,11 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         return NULL;\n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n \n+    // -regtest only: allow overriding block.nVersion with\n+    // -blockversion=N to test forking scenarios\n+    if (Params().MineBlocksOnDemand())\n+        pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n+\n     // Create coinbase tx\n     CMutableTransaction txNew;\n     txNew.vin.resize(1);"
      }
    ]
  },
  {
    "sha": "3222802ea11053f0dd69c99fc2f33edff554dc17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMjIyODAyZWExMTA1M2YwZGQ2OWM5OWZjMmYzM2VkZmY1NTRkYzE3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-10-09T14:33:05Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-10-09T14:39:29Z"
      },
      "message": "Merge pull request #5059\n\ndbca89b Trigger -alertnotify if network is upgrading without you (Gavin Andresen)\ne01a793 Refactor -alertnotify code (Gavin Andresen)\n\nSigned-off-by: Gavin Andresen <gavinandresen@gmail.com>",
      "tree": {
        "sha": "8db1800655df86b016a4a5ef042a855f321bde02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8db1800655df86b016a4a5ef042a855f321bde02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3222802ea11053f0dd69c99fc2f33edff554dc17",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlQ2niEACgkQdYgkL74406i3oQCgxvgoN6NAgQwNVbS7rMEsqhWj\n07kAnA3ZsJgyug/6bGkMil/On63lep0J\n=G6WH\n-----END PGP SIGNATURE-----",
        "payload": "tree 8db1800655df86b016a4a5ef042a855f321bde02\nparent dec58922d07241f0b502c96f8e5131abccbd5dc1\nparent dbca89b74b76610331d21656cd6747f5bf8375d6\nauthor Gavin Andresen <gavinandresen@gmail.com> 1412865185 -0400\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1412865569 -0400\n\nMerge pull request #5059\n\ndbca89b Trigger -alertnotify if network is upgrading without you (Gavin Andresen)\ne01a793 Refactor -alertnotify code (Gavin Andresen)\n\nSigned-off-by: Gavin Andresen <gavinandresen@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3222802ea11053f0dd69c99fc2f33edff554dc17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3222802ea11053f0dd69c99fc2f33edff554dc17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3222802ea11053f0dd69c99fc2f33edff554dc17/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dec58922d07241f0b502c96f8e5131abccbd5dc1"
      },
      {
        "sha": "dbca89b74b76610331d21656cd6747f5bf8375d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbca89b74b76610331d21656cd6747f5bf8375d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbca89b74b76610331d21656cd6747f5bf8375d6"
      }
    ],
    "stats": {
      "total": 129,
      "additions": 103,
      "deletions": 26
    },
    "files": [
      {
        "sha": "1ef47d77f4d13043303dc9cb421d60a2fd3d1fb5",
        "filename": "qa/pull-tester/build-tests.sh.in",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3222802ea11053f0dd69c99fc2f33edff554dc17/qa/pull-tester/build-tests.sh.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3222802ea11053f0dd69c99fc2f33edff554dc17/qa/pull-tester/build-tests.sh.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/build-tests.sh.in?ref=3222802ea11053f0dd69c99fc2f33edff554dc17",
        "patch": "@@ -75,6 +75,7 @@ make check\n # Run RPC integration test on Linux:\n @abs_top_srcdir@/qa/rpc-tests/wallet.sh @abs_top_srcdir@/linux-build/src\n @abs_top_srcdir@/qa/rpc-tests/listtransactions.py --srcdir @abs_top_srcdir@/linux-build/src\n+@abs_top_srcdir@/qa/rpc-tests/forknotify.py --srcdir @abs_top_srcdir@/linux-build/src\n # Clean up cache/ directory that the python regression tests create\n rm -rf cache\n "
      },
      {
        "sha": "a482f7cc5ad6725e78ae57473c1dc56b9b306590",
        "filename": "qa/rpc-tests/forknotify.py",
        "status": "added",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3222802ea11053f0dd69c99fc2f33edff554dc17/qa/rpc-tests/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3222802ea11053f0dd69c99fc2f33edff554dc17/qa/rpc-tests/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/forknotify.py?ref=3222802ea11053f0dd69c99fc2f33edff554dc17",
        "patch": "@@ -0,0 +1,65 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT/X11 software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test -alertnotify \n+#\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+import os\n+import shutil\n+\n+class ForkNotifyTest(BitcoinTestFramework):\n+\n+    alert_filename = None  # Set by setup_network\n+\n+    def setup_network(self, test_dir):\n+        nodes = []\n+        self.alert_filename = os.path.join(test_dir, \"alert.txt\")\n+        with open(self.alert_filename, 'w') as f:\n+            pass  # Just open then close to create zero-length file\n+        nodes.append(start_node(0, test_dir,\n+                            [\"-blockversion=2\", \"-alertnotify=echo %s >> '\" + self.alert_filename + \"'\"]))\n+        # Node1 mines block.version=211 blocks\n+        nodes.append(start_node(1, test_dir,\n+                                [\"-blockversion=211\"]))\n+        connect_nodes(nodes[1], 0)\n+\n+        sync_blocks(nodes)\n+        return nodes\n+        \n+\n+    def run_test(self, nodes):\n+        # Mine 51 up-version blocks\n+        nodes[1].setgenerate(True, 51)\n+        sync_blocks(nodes)\n+        # -alertnotify should trigger on the 51'st,\n+        # but mine and sync another to give\n+        # -alertnotify time to write\n+        nodes[1].setgenerate(True, 1)\n+        sync_blocks(nodes)\n+\n+        with open(self.alert_filename, 'r') as f:\n+            alert_text = f.read()\n+\n+        if len(alert_text) == 0:\n+            raise AssertionError(\"-alertnotify did not warn of up-version blocks\")\n+\n+        # Mine more up-version blocks, should not get more alerts:\n+        nodes[1].setgenerate(True, 1)\n+        sync_blocks(nodes)\n+        nodes[1].setgenerate(True, 1)\n+        sync_blocks(nodes)\n+\n+        with open(self.alert_filename, 'r') as f:\n+            alert_text2 = f.read()\n+\n+        if alert_text != alert_text2:\n+            raise AssertionError(\"-alertnotify excessive warning of up-version blocks\")\n+\n+if __name__ == '__main__':\n+    ForkNotifyTest().main()"
      },
      {
        "sha": "d495849206d46a7cccf6bd168456347b358b0310",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 16,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3222802ea11053f0dd69c99fc2f33edff554dc17/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3222802ea11053f0dd69c99fc2f33edff554dc17/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=3222802ea11053f0dd69c99fc2f33edff554dc17",
        "patch": "@@ -233,25 +233,30 @@ bool CAlert::ProcessAlert(bool fThread)\n         if(AppliesToMe())\n         {\n             uiInterface.NotifyAlertChanged(GetHash(), CT_NEW);\n-            std::string strCmd = GetArg(\"-alertnotify\", \"\");\n-            if (!strCmd.empty())\n-            {\n-                // Alert text should be plain ascii coming from a trusted source, but to\n-                // be safe we first strip anything not in safeChars, then add single quotes around\n-                // the whole string before passing it to the shell:\n-                std::string singleQuote(\"'\");\n-                std::string safeStatus = SanitizeString(strStatusBar);\n-                safeStatus = singleQuote+safeStatus+singleQuote;\n-                boost::replace_all(strCmd, \"%s\", safeStatus);\n-\n-                if (fThread)\n-                    boost::thread t(runCommand, strCmd); // thread runs free\n-                else\n-                    runCommand(strCmd);\n-            }\n+            Notify(strStatusBar, fThread);\n         }\n     }\n \n     LogPrint(\"alert\", \"accepted alert %d, AppliesToMe()=%d\\n\", nID, AppliesToMe());\n     return true;\n }\n+\n+void\n+CAlert::Notify(const std::string& strMessage, bool fThread)\n+{\n+    std::string strCmd = GetArg(\"-alertnotify\", \"\");\n+    if (strCmd.empty()) return;\n+\n+    // Alert text should be plain ascii coming from a trusted source, but to\n+    // be safe we first strip anything not in safeChars, then add single quotes around\n+    // the whole string before passing it to the shell:\n+    std::string singleQuote(\"'\");\n+    std::string safeStatus = SanitizeString(strMessage);\n+    safeStatus = singleQuote+safeStatus+singleQuote;\n+    boost::replace_all(strCmd, \"%s\", safeStatus);\n+\n+    if (fThread)\n+        boost::thread t(runCommand, strCmd); // thread runs free\n+    else\n+        runCommand(strCmd);\n+}"
      },
      {
        "sha": "ba3235858dbb79b0448b6d5e9d73da6bf117deb6",
        "filename": "src/alert.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3222802ea11053f0dd69c99fc2f33edff554dc17/src/alert.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3222802ea11053f0dd69c99fc2f33edff554dc17/src/alert.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.h?ref=3222802ea11053f0dd69c99fc2f33edff554dc17",
        "patch": "@@ -101,7 +101,8 @@ class CAlert : public CUnsignedAlert\n     bool AppliesToMe() const;\n     bool RelayTo(CNode* pnode) const;\n     bool CheckSignature() const;\n-    bool ProcessAlert(bool fThread = true);\n+    bool ProcessAlert(bool fThread = true); // fThread means run -alertnotify in a free-running thread\n+    static void Notify(const std::string& strMessage, bool fThread);\n \n     /*\n      * Get copy of (active) alert object by hash. Returns a null alert if it is not found."
      },
      {
        "sha": "fc8167e40ecebb90d5552841e910a078e500a4e8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3222802ea11053f0dd69c99fc2f33edff554dc17/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3222802ea11053f0dd69c99fc2f33edff554dc17/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3222802ea11053f0dd69c99fc2f33edff554dc17",
        "patch": "@@ -1178,14 +1178,9 @@ void CheckForkWarningConditions()\n     {\n         if (!fLargeWorkForkFound)\n         {\n-            std::string strCmd = GetArg(\"-alertnotify\", \"\");\n-            if (!strCmd.empty())\n-            {\n-                std::string warning = std::string(\"'Warning: Large-work fork detected, forking after block \") +\n-                                      pindexBestForkBase->phashBlock->ToString() + std::string(\"'\");\n-                boost::replace_all(strCmd, \"%s\", warning);\n-                boost::thread t(runCommand, strCmd); // thread runs free\n-            }\n+            std::string warning = std::string(\"'Warning: Large-work fork detected, forking after block \") +\n+                pindexBestForkBase->phashBlock->ToString() + std::string(\"'\");\n+            CAlert::Notify(warning, true);\n         }\n         if (pindexBestForkTip)\n         {\n@@ -1753,7 +1748,8 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     cvBlockChange.notify_all();\n \n     // Check the version of the last 100 blocks to see if we need to upgrade:\n-    if (!IsInitialBlockDownload())\n+    static bool fWarned = false;\n+    if (!IsInitialBlockDownload() && !fWarned)\n     {\n         int nUpgraded = 0;\n         const CBlockIndex* pindex = chainActive.Tip();\n@@ -1766,8 +1762,12 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n         if (nUpgraded > 0)\n             LogPrintf(\"SetBestChain: %d of last 100 blocks above version %d\\n\", nUpgraded, (int)CBlock::CURRENT_VERSION);\n         if (nUpgraded > 100/2)\n+        {\n             // strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:\n             strMiscWarning = _(\"Warning: This version is obsolete, upgrade required!\");\n+            CAlert::Notify(strMiscWarning, true);\n+            fWarned = true;\n+        }\n     }\n }\n "
      },
      {
        "sha": "c2762bf44e3929b838e8f656d8d08731bf6b3fce",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3222802ea11053f0dd69c99fc2f33edff554dc17/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3222802ea11053f0dd69c99fc2f33edff554dc17/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=3222802ea11053f0dd69c99fc2f33edff554dc17",
        "patch": "@@ -83,6 +83,11 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         return NULL;\n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n \n+    // -regtest only: allow overriding block.nVersion with\n+    // -blockversion=N to test forking scenarios\n+    if (Params().MineBlocksOnDemand())\n+        pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n+\n     // Create coinbase tx\n     CMutableTransaction txNew;\n     txNew.vin.resize(1);"
      }
    ]
  },
  {
    "sha": "fe36e031cde8cd0e1cb446d761f229c088a0403f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTM2ZTAzMWNkZThjZDBlMWNiNDQ2ZDc2MWYyMjljMDg4YTA0MDNm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-09T16:04:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-09T16:10:29Z"
      },
      "message": "Merge pull request #5032\n\n4bd1185 Qt: allow \"emergency\" shutdown during startup (Philip Kaufmann)",
      "tree": {
        "sha": "e900123d670352a978bd5599daee0a81d003af44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e900123d670352a978bd5599daee0a81d003af44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe36e031cde8cd0e1cb446d761f229c088a0403f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUNrN1AAoJEHSBCwEjRsmm8IcH/iab4kNagbExvT5XlBm/KbYB\nUzdSbAHhalTLMLvKzOB5i5wh+540OB3XVoLmghxJ3PnsdwNcwHPxxnVFEHmB2zeK\nAGk2atOvaw16TatFs/1qS/edp5dbxWkwAxzBuBYJ4wfEyYFfxZHb+JZVXNV//Qs/\nSePamAgwPU2H3tWcforv5BxBgF/7G/F7cbw0VojGh1gvnE+5TECbrTD5DLsDDxYu\naRVRCkrgJsUV6EZJWF4eHM/Y4hP2GqBmbzrBsuVM/Qgw9f1Ea2o/7zWdxS8YaO8n\ntts1gKIb02ngqKLRAiNwHHjvA3OoYtitAwgzdtrPJHZ9SMLluRtG5swFbXT8ByA=\n=US2F\n-----END PGP SIGNATURE-----",
        "payload": "tree e900123d670352a978bd5599daee0a81d003af44\nparent 3222802ea11053f0dd69c99fc2f33edff554dc17\nparent 4bd11852802f3ed11e17e8d66660ce2e60f02287\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412870697 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412871029 +0200\n\nMerge pull request #5032\n\n4bd1185 Qt: allow \"emergency\" shutdown during startup (Philip Kaufmann)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe36e031cde8cd0e1cb446d761f229c088a0403f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe36e031cde8cd0e1cb446d761f229c088a0403f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe36e031cde8cd0e1cb446d761f229c088a0403f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3222802ea11053f0dd69c99fc2f33edff554dc17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3222802ea11053f0dd69c99fc2f33edff554dc17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3222802ea11053f0dd69c99fc2f33edff554dc17"
      },
      {
        "sha": "4bd11852802f3ed11e17e8d66660ce2e60f02287",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bd11852802f3ed11e17e8d66660ce2e60f02287",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4bd11852802f3ed11e17e8d66660ce2e60f02287"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "74512e62aab213d7b66d7d737d3cda432c21a79b",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe36e031cde8cd0e1cb446d761f229c088a0403f/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe36e031cde8cd0e1cb446d761f229c088a0403f/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=fe36e031cde8cd0e1cb446d761f229c088a0403f",
        "patch": "@@ -177,5 +177,6 @@ void SplashScreen::paintEvent(QPaintEvent *event)\n \n void SplashScreen::closeEvent(QCloseEvent *event)\n {\n+    StartShutdown(); // allows an \"emergency\" shutdown during startup\n     event->ignore();\n }"
      }
    ]
  },
  {
    "sha": "caecb42b3863634aa2c2301f85b1297e5044ecf4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWVjYjQyYjM4NjM2MzRhYTJjMjMwMWY4NWIxMjk3ZTUwNDRlY2Y0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-10T03:23:44Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2014-10-10T03:36:49Z"
      },
      "message": "Travis: Descriptive build names",
      "tree": {
        "sha": "37e4e1ffd515f35ed676bb31802cab493ede125b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37e4e1ffd515f35ed676bb31802cab493ede125b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caecb42b3863634aa2c2301f85b1297e5044ecf4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caecb42b3863634aa2c2301f85b1297e5044ecf4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/caecb42b3863634aa2c2301f85b1297e5044ecf4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caecb42b3863634aa2c2301f85b1297e5044ecf4/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dec58922d07241f0b502c96f8e5131abccbd5dc1"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "94d1c15f80a5274a84a1d6533e70608a356fc54f",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caecb42b3863634aa2c2301f85b1297e5044ecf4/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caecb42b3863634aa2c2301f85b1297e5044ecf4/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=caecb42b3863634aa2c2301f85b1297e5044ecf4",
        "patch": "@@ -1,8 +1,8 @@\n # errata:\n # - A travis bug causes caches to trample eachother when using the same\n #   compiler key (which we don't use anyway). This is worked around for now by\n-#   using the phony compilers \"true X\". These can be removed when the travis\n-#   bug is fixed. See: https://github.com/travis-ci/casher/issues/6\n+#   replacing the \"compilers\" with a build name prefixed by the no-op \":\"\n+#   command. See: https://github.com/travis-ci/casher/issues/6\n \n os: linux\n language: cpp\n@@ -24,19 +24,19 @@ cache:\n matrix:\n   fast_finish: true\n   include:\n-    - compiler: \"true 1\"\n+    - compiler: \": ARM\"\n       env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n-    - compiler: \"true 2\"\n+    - compiler: \": bitcoind\"\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat CPPFLAGS=-DDEBUG_LOCKORDER\"\n-    - compiler: \"true 3\"\n+    - compiler: \": No wallet\"\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n-    - compiler: \"true 4\"\n+    - compiler: \": 32-bit + dash\"\n       env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\" USE_SHELL=\"/bin/dash\"\n-    - compiler: \"true 5\"\n+    - compiler: \": Cross-Mac\"\n       env: HOST=x86_64-apple-darwin11 PACKAGES=\"gcc-multilib g++-multilib cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.7 GOAL=\"deploy\"\n-    - compiler: \"true 6\"\n+    - compiler: \": Win64\"\n       env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine\" RUN_TESTS=true GOAL=\"deploy\"\n-    - compiler: \"true 7\"\n+    - compiler: \": Win32\"\n       env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine\" RUN_TESTS=true GOAL=\"deploy\"\n install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi"
      }
    ]
  },
  {
    "sha": "11d486d23f6f718a36f9bb5c3c7476e33b43f136",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWQ0ODZkMjNmNmY3MThhMzZmOWJiNWMzYzc0NzZlMzNiNDNmMTM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-10T06:27:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-10T06:30:09Z"
      },
      "message": "Merge pull request #5072\n\ncaecb42 Travis: Descriptive build names (Luke Dashjr)",
      "tree": {
        "sha": "c3b55dd32626467693bef8c39046ea6f2c5a9196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3b55dd32626467693bef8c39046ea6f2c5a9196"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11d486d23f6f718a36f9bb5c3c7476e33b43f136",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUN3zxAAoJEHSBCwEjRsmmPhAIAJQ3AqGunv3D0QtYYJ75uxxu\nYYVF55pUii57NpNuPqKl6ufRNB5sFsWsZwwUXoelggxkpCu8CShEb9PUhHfKBW0U\n94D2UkL1nXZaPHmD+Sk1XoSYCp1Yoib+Zz4ihXdksnkg8YfEQFdKCshyOLPYWfik\nKiMxM/ojCrIy/9wU6gE11BQ+y6GgM3zWOt7e7P2QchtDhN5KIgGRsNVQ4UNB+ogC\n7FqC2DxqltRUgQMhtmRU3u08aHQX8mnbMjOkJ3GcXZ+D7ytJfCewf8M1Zw9OudHv\nO0SGim4M/Q9W2s/9jY/VzG1N9V2HacPx+HxTsk97i4inY6CroA9bn43Uqyd5AfI=\n=CJbk\n-----END PGP SIGNATURE-----",
        "payload": "tree c3b55dd32626467693bef8c39046ea6f2c5a9196\nparent fe36e031cde8cd0e1cb446d761f229c088a0403f\nparent caecb42b3863634aa2c2301f85b1297e5044ecf4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412922478 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412922609 +0200\n\nMerge pull request #5072\n\ncaecb42 Travis: Descriptive build names (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11d486d23f6f718a36f9bb5c3c7476e33b43f136",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11d486d23f6f718a36f9bb5c3c7476e33b43f136",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11d486d23f6f718a36f9bb5c3c7476e33b43f136/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe36e031cde8cd0e1cb446d761f229c088a0403f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe36e031cde8cd0e1cb446d761f229c088a0403f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe36e031cde8cd0e1cb446d761f229c088a0403f"
      },
      {
        "sha": "caecb42b3863634aa2c2301f85b1297e5044ecf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caecb42b3863634aa2c2301f85b1297e5044ecf4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caecb42b3863634aa2c2301f85b1297e5044ecf4"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "94d1c15f80a5274a84a1d6533e70608a356fc54f",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11d486d23f6f718a36f9bb5c3c7476e33b43f136/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11d486d23f6f718a36f9bb5c3c7476e33b43f136/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=11d486d23f6f718a36f9bb5c3c7476e33b43f136",
        "patch": "@@ -1,8 +1,8 @@\n # errata:\n # - A travis bug causes caches to trample eachother when using the same\n #   compiler key (which we don't use anyway). This is worked around for now by\n-#   using the phony compilers \"true X\". These can be removed when the travis\n-#   bug is fixed. See: https://github.com/travis-ci/casher/issues/6\n+#   replacing the \"compilers\" with a build name prefixed by the no-op \":\"\n+#   command. See: https://github.com/travis-ci/casher/issues/6\n \n os: linux\n language: cpp\n@@ -24,19 +24,19 @@ cache:\n matrix:\n   fast_finish: true\n   include:\n-    - compiler: \"true 1\"\n+    - compiler: \": ARM\"\n       env: HOST=arm-linux-gnueabihf PACKAGES=\"g++-arm-linux-gnueabihf\" DEP_OPTS=\"NO_QT=1\" GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n-    - compiler: \"true 2\"\n+    - compiler: \": bitcoind\"\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat CPPFLAGS=-DDEBUG_LOCKORDER\"\n-    - compiler: \"true 3\"\n+    - compiler: \": No wallet\"\n       env: HOST=x86_64-unknown-linux-gnu DEP_OPTS=\"NO_WALLET=1\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\"\n-    - compiler: \"true 4\"\n+    - compiler: \": 32-bit + dash\"\n       env: HOST=i686-pc-linux-gnu PACKAGES=\"g++-multilib\" RUN_TESTS=true GOAL=\"install\" BITCOIN_CONFIG=\"--enable-glibc-back-compat\" USE_SHELL=\"/bin/dash\"\n-    - compiler: \"true 5\"\n+    - compiler: \": Cross-Mac\"\n       env: HOST=x86_64-apple-darwin11 PACKAGES=\"gcc-multilib g++-multilib cmake libcap-dev libz-dev libbz2-dev\" OSX_SDK=10.7 GOAL=\"deploy\"\n-    - compiler: \"true 6\"\n+    - compiler: \": Win64\"\n       env: HOST=x86_64-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 binutils-mingw-w64-x86-64 mingw-w64-dev wine\" RUN_TESTS=true GOAL=\"deploy\"\n-    - compiler: \"true 7\"\n+    - compiler: \": Win32\"\n       env: HOST=i686-w64-mingw32 PACKAGES=\"nsis gcc-mingw-w64-i686 g++-mingw-w64-i686 binutils-mingw-w64-i686 mingw-w64-dev wine\" RUN_TESTS=true GOAL=\"deploy\"\n install:\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi"
      }
    ]
  },
  {
    "sha": "6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGU1MGMzYzlhODllNzJmMzE1MmExZGY3Nzc1NTcyZDVjOGFkMGU3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-09T09:04:49Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-10T09:00:59Z"
      },
      "message": "qt: add network-specific style object\n\nMainly cleanups: Gets rid of isTestNet everywhere, by keeping track\nof network-specific theming in a central place.\n\nAlso makes GUI no longer dependent on the network ID enumeration, which\nalleviates concerns about #4802.",
      "tree": {
        "sha": "cf708c7b5b7800b295aeb5bcdb3d742f79b6a31b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf708c7b5b7800b295aeb5bcdb3d742f79b6a31b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec58922d07241f0b502c96f8e5131abccbd5dc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dec58922d07241f0b502c96f8e5131abccbd5dc1"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 125,
      "deletions": 75
    },
    "files": [
      {
        "sha": "872a0cf1c5358c9ac8d9d7cc4c4195be3c8b6eae",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -178,6 +178,7 @@ BITCOIN_QT_H = \\\n   qt/macdockiconhandler.h \\\n   qt/macnotificationhandler.h \\\n   qt/monitoreddatamapper.h \\\n+  qt/networkstyle.h \\\n   qt/notificator.h \\\n   qt/openuridialog.h \\\n   qt/optionsdialog.h \\\n@@ -269,6 +270,7 @@ BITCOIN_QT_CPP = \\\n   qt/guiutil.cpp \\\n   qt/intro.cpp \\\n   qt/monitoreddatamapper.cpp \\\n+  qt/networkstyle.cpp \\\n   qt/notificator.cpp \\\n   qt/optionsdialog.cpp \\\n   qt/optionsmodel.cpp \\"
      },
      {
        "sha": "9872ebc1f640ea632d72985d908838eba202d4bd",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -12,6 +12,7 @@\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"intro.h\"\n+#include \"networkstyle.h\"\n #include \"optionsmodel.h\"\n #include \"splashscreen.h\"\n #include \"utilitydialog.h\"\n@@ -190,9 +191,9 @@ class BitcoinApplication: public QApplication\n     /// Create options model\n     void createOptionsModel();\n     /// Create main window\n-    void createWindow(bool isaTestNet);\n+    void createWindow(const NetworkStyle *networkStyle);\n     /// Create splash screen\n-    void createSplashScreen(bool isaTestNet);\n+    void createSplashScreen(const NetworkStyle *networkStyle);\n \n     /// Request core initialization\n     void requestInitialize();\n@@ -331,18 +332,18 @@ void BitcoinApplication::createOptionsModel()\n     optionsModel = new OptionsModel();\n }\n \n-void BitcoinApplication::createWindow(bool isaTestNet)\n+void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n {\n-    window = new BitcoinGUI(isaTestNet, 0);\n+    window = new BitcoinGUI(networkStyle, 0);\n \n     pollShutdownTimer = new QTimer(window);\n     connect(pollShutdownTimer, SIGNAL(timeout()), window, SLOT(detectShutdown()));\n     pollShutdownTimer->start(200);\n }\n \n-void BitcoinApplication::createSplashScreen(bool isaTestNet)\n+void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n {\n-    SplashScreen *splash = new SplashScreen(0, isaTestNet);\n+    SplashScreen *splash = new SplashScreen(0, networkStyle);\n     // We don't hold a direct pointer to the splash screen after creation, so use\n     // Qt::WA_DeleteOnClose to make sure that the window will be deleted eventually.\n     splash->setAttribute(Qt::WA_DeleteOnClose);\n@@ -572,12 +573,10 @@ int main(int argc, char *argv[])\n     if (!PaymentServer::ipcParseCommandLine(argc, argv))\n         exit(0);\n #endif\n-    bool isaTestNet = Params().NetworkID() != CBaseChainParams::MAIN;\n+    QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n+    assert(!networkStyle.isNull());\n     // Allow for separate UI settings for testnets\n-    if (isaTestNet)\n-        QApplication::setApplicationName(QAPP_APP_NAME_TESTNET);\n-    else\n-        QApplication::setApplicationName(QAPP_APP_NAME_DEFAULT);\n+    QApplication::setApplicationName(networkStyle->getAppName());\n     // Re-initialize translations after changing application name (language in network-specific settings can be different)\n     initTranslations(qtTranslatorBase, qtTranslator, translatorBase, translator);\n \n@@ -617,11 +616,11 @@ int main(int argc, char *argv[])\n     uiInterface.InitMessage.connect(InitMessage);\n \n     if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\", false))\n-        app.createSplashScreen(isaTestNet);\n+        app.createSplashScreen(networkStyle.data());\n \n     try\n     {\n-        app.createWindow(isaTestNet);\n+        app.createWindow(networkStyle.data());\n         app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n         WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"Bitcoin Core didn't yet exit safely...\"), (HWND)app.getMainWinId());"
      },
      {
        "sha": "8a945606dcd000af14f1e91ba7c506bbb52c99d3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 42,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -8,6 +8,7 @@\n #include \"clientmodel.h\"\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n+#include \"networkstyle.h\"\n #include \"notificator.h\"\n #include \"openuridialog.h\"\n #include \"optionsdialog.h\"\n@@ -59,7 +60,7 @@\n \n const QString BitcoinGUI::DEFAULT_WALLET = \"~Default\";\n \n-BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n+BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     QMainWindow(parent),\n     clientModel(0),\n     walletFrame(0),\n@@ -112,26 +113,13 @@ BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n     } else {\n         windowTitle += tr(\"Node\");\n     }\n-\n-    if (!fIsTestnet)\n-    {\n+    windowTitle += \" \" + networkStyle->getTitleAddText();\n #ifndef Q_OS_MAC\n-        QApplication::setWindowIcon(QIcon(\":icons/bitcoin\"));\n-        setWindowIcon(QIcon(\":icons/bitcoin\"));\n+    QApplication::setWindowIcon(networkStyle->getAppIcon());\n+    setWindowIcon(networkStyle->getAppIcon());\n #else\n-        MacDockIconHandler::instance()->setIcon(QIcon(\":icons/bitcoin\"));\n+    MacDockIconHandler::instance()->setIcon(networkStyle->getAppIcon());\n #endif\n-    }\n-    else\n-    {\n-        windowTitle += \" \" + tr(\"[testnet]\");\n-#ifndef Q_OS_MAC\n-        QApplication::setWindowIcon(QIcon(\":icons/bitcoin_testnet\"));\n-        setWindowIcon(QIcon(\":icons/bitcoin_testnet\"));\n-#else\n-        MacDockIconHandler::instance()->setIcon(QIcon(\":icons/bitcoin_testnet\"));\n-#endif\n-    }\n     setWindowTitle(windowTitle);\n \n #if defined(Q_OS_MAC) && QT_VERSION < 0x050000\n@@ -161,7 +149,7 @@ BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n \n     // Create actions for the toolbar, menu bar and tray/dock icon\n     // Needs walletFrame to be initialized\n-    createActions(fIsTestnet);\n+    createActions(networkStyle);\n \n     // Create application menu bar\n     createMenuBar();\n@@ -170,7 +158,7 @@ BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n     createToolBars();\n \n     // Create system tray icon and notification\n-    createTrayIcon(fIsTestnet);\n+    createTrayIcon(networkStyle);\n \n     // Create status bar\n     statusBar();\n@@ -248,7 +236,7 @@ BitcoinGUI::~BitcoinGUI()\n #endif\n }\n \n-void BitcoinGUI::createActions(bool fIsTestnet)\n+void BitcoinGUI::createActions(const NetworkStyle *networkStyle)\n {\n     QActionGroup *tabGroup = new QActionGroup(this);\n \n@@ -295,10 +283,7 @@ void BitcoinGUI::createActions(bool fIsTestnet)\n     quitAction->setStatusTip(tr(\"Quit application\"));\n     quitAction->setShortcut(QKeySequence(Qt::CTRL + Qt::Key_Q));\n     quitAction->setMenuRole(QAction::QuitRole);\n-    if (!fIsTestnet)\n-        aboutAction = new QAction(QIcon(\":/icons/bitcoin\"), tr(\"&About Bitcoin Core\"), this);\n-    else\n-        aboutAction = new QAction(QIcon(\":/icons/bitcoin_testnet\"), tr(\"&About Bitcoin Core\"), this);\n+    aboutAction = new QAction(networkStyle->getAppIcon(), tr(\"&About Bitcoin Core\"), this);\n     aboutAction->setStatusTip(tr(\"Show information about Bitcoin Core\"));\n     aboutAction->setMenuRole(QAction::AboutRole);\n #if QT_VERSION < 0x050000\n@@ -311,10 +296,7 @@ void BitcoinGUI::createActions(bool fIsTestnet)\n     optionsAction = new QAction(QIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n     optionsAction->setStatusTip(tr(\"Modify configuration options for Bitcoin\"));\n     optionsAction->setMenuRole(QAction::PreferencesRole);\n-    if (!fIsTestnet)\n-        toggleHideAction = new QAction(QIcon(\":/icons/bitcoin\"), tr(\"&Show / Hide\"), this);\n-    else\n-        toggleHideAction = new QAction(QIcon(\":/icons/bitcoin_testnet\"), tr(\"&Show / Hide\"), this);\n+    toggleHideAction = new QAction(networkStyle->getAppIcon(), tr(\"&Show / Hide\"), this);\n     toggleHideAction->setStatusTip(tr(\"Show or hide the main Window\"));\n \n     encryptWalletAction = new QAction(QIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n@@ -505,22 +487,13 @@ void BitcoinGUI::setWalletActionsEnabled(bool enabled)\n     openAction->setEnabled(enabled);\n }\n \n-void BitcoinGUI::createTrayIcon(bool fIsTestnet)\n+void BitcoinGUI::createTrayIcon(const NetworkStyle *networkStyle)\n {\n #ifndef Q_OS_MAC\n     trayIcon = new QSystemTrayIcon(this);\n-\n-    if (!fIsTestnet)\n-    {\n-        trayIcon->setToolTip(tr(\"Bitcoin Core client\"));\n-        trayIcon->setIcon(QIcon(\":/icons/bitcoin\"));\n-    }\n-    else\n-    {\n-        trayIcon->setToolTip(tr(\"Bitcoin Core client\") + \" \" + tr(\"[testnet]\"));\n-        trayIcon->setIcon(QIcon(\":/icons/bitcoin_testnet\"));\n-    }\n-\n+    QString toolTip = tr(\"Bitcoin Core client\") + \" \" + networkStyle->getTitleAddText();\n+    trayIcon->setToolTip(toolTip);\n+    trayIcon->setIcon(networkStyle->getAppIcon());\n     trayIcon->show();\n #endif\n "
      },
      {
        "sha": "f65f0e91379d93f3c0ee0e88da101ab747ce198e",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -19,6 +19,7 @@\n #include <QSystemTrayIcon>\n \n class ClientModel;\n+class NetworkStyle;\n class Notificator;\n class OptionsModel;\n class RPCConsole;\n@@ -46,7 +47,7 @@ class BitcoinGUI : public QMainWindow\n public:\n     static const QString DEFAULT_WALLET;\n \n-    explicit BitcoinGUI(bool fIsTestnet = false, QWidget *parent = 0);\n+    explicit BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent = 0);\n     ~BitcoinGUI();\n \n     /** Set the client model.\n@@ -114,13 +115,13 @@ class BitcoinGUI : public QMainWindow\n     int spinnerFrame;\n \n     /** Create the main UI actions. */\n-    void createActions(bool fIsTestnet);\n+    void createActions(const NetworkStyle *networkStyle);\n     /** Create the menu bar and sub-menus. */\n     void createMenuBar();\n     /** Create the toolbars */\n     void createToolBars();\n     /** Create system tray icon and notification */\n-    void createTrayIcon(bool fIsTestnet);\n+    void createTrayIcon(const NetworkStyle *networkStyle);\n     /** Create system tray menu (or setup the dock menu) */\n     void createTrayIconMenu();\n "
      },
      {
        "sha": "62c44703f470c2c76955694a01d382d74e23eb37",
        "filename": "src/qt/networkstyle.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"networkstyle.h\"\n+\n+#include \"guiconstants.h\"\n+\n+#include <QApplication>\n+\n+static const struct {\n+    const char *networkId;\n+    const char *appName;\n+    const char *appIcon;\n+    const char *titleAddText;\n+    const char *splashImage;\n+} network_styles[] = {\n+    {\"main\", QAPP_APP_NAME_DEFAULT, \":/icons/bitcoin\", \"\", \":/images/splash\"},\n+    {\"test\", QAPP_APP_NAME_TESTNET, \":/icons/bitcoin_testnet\", QT_TRANSLATE_NOOP(\"SplashScreen\", \"[testnet]\"), \":/images/splash_testnet\"},\n+    {\"regtest\", QAPP_APP_NAME_TESTNET, \":/icons/bitcoin_testnet\", \"[regtest]\", \":/images/splash_testnet\"}\n+};\n+static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);\n+\n+// titleAddText needs to be const char* for tr()\n+NetworkStyle::NetworkStyle(const QString &appName, const QString &appIcon, const char *titleAddText, const QString &splashImage):\n+    appName(appName),\n+    appIcon(appIcon),\n+    titleAddText(qApp->translate(\"SplashScreen\", titleAddText)),\n+    splashImage(splashImage)\n+{\n+}\n+\n+const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)\n+{\n+    for (unsigned x=0; x<network_styles_count; ++x)\n+    {\n+        if (networkId == network_styles[x].networkId)\n+        {\n+            return new NetworkStyle(\n+                    network_styles[x].appName,\n+                    network_styles[x].appIcon,\n+                    network_styles[x].titleAddText,\n+                    network_styles[x].splashImage);\n+        }\n+    }\n+    return 0;\n+}"
      },
      {
        "sha": "99304d61a3abe20babc7945d355ed25f2a3e7850",
        "filename": "src/qt/networkstyle.h",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/networkstyle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/networkstyle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.h?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_NETWORKSTYLE\n+#define H_NETWORKSTYLE\n+\n+#include <QIcon>\n+#include <QPixmap>\n+#include <QString>\n+\n+/* Coin network-specific GUI style information */\n+class NetworkStyle\n+{\n+public:\n+    /** Get style associated with provided BIP70 network id, or 0 if not known */\n+    static const NetworkStyle *instantiate(const QString &networkId);\n+\n+    const QString &getAppName() const { return appName; }\n+    const QIcon &getAppIcon() const { return appIcon; }\n+    const QString &getTitleAddText() const { return titleAddText; }\n+    const QPixmap &getSplashImage() const { return splashImage; }\n+\n+private:\n+    NetworkStyle(const QString &appName, const QString &appIcon, const char *titleAddText, const QString &splashImage);\n+\n+    QString appName;\n+    QIcon appIcon;\n+    QString titleAddText;\n+    QPixmap splashImage;\n+};\n+\n+#endif // H_NETWORKSTYLE"
      },
      {
        "sha": "360008ea8336f076b224fa467fd7927d9873c23f",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 16,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"clientversion.h\"\n #include \"init.h\"\n+#include \"networkstyle.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"version.h\"\n@@ -19,7 +20,7 @@\n #include <QDesktopWidget>\n #include <QPainter>\n \n-SplashScreen::SplashScreen(Qt::WindowFlags f, bool isTestNet) :\n+SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle) :\n     QWidget(0, f), curAlignment(0)\n {\n     // set reference point, paddings\n@@ -34,17 +35,12 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, bool isTestNet) :\n     QString titleText       = tr(\"Bitcoin Core\");\n     QString versionText     = QString(\"Version %1\").arg(QString::fromStdString(FormatFullVersion()));\n     QString copyrightText   = QChar(0xA9)+QString(\" 2009-%1 \").arg(COPYRIGHT_YEAR) + QString(tr(\"The Bitcoin Core developers\"));\n-    QString testnetAddText  = QString(tr(\"[testnet]\")); // define text to place as single text object\n+    QString titleAddText    = networkStyle->getTitleAddText();\n \n     QString font            = \"Arial\";\n \n     // load the bitmap for writing some text over it\n-    if(isTestNet) {\n-        pixmap     = QPixmap(\":/images/splash_testnet\");\n-    }\n-    else {\n-        pixmap     = QPixmap(\":/images/splash\");\n-    }\n+    pixmap     = networkStyle->getSplashImage();\n \n     QPainter pixPaint(&pixmap);\n     pixPaint.setPen(QColor(100,100,100));\n@@ -78,23 +74,20 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, bool isTestNet) :\n     pixPaint.setFont(QFont(font, 10*fontFactor));\n     pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight,paddingTop+titleCopyrightVSpace,copyrightText);\n \n-    // draw testnet string if testnet is on\n-    if(isTestNet) {\n+    // draw additional text if special network\n+    if(!titleAddText.isEmpty()) {\n         QFont boldFont = QFont(font, 10*fontFactor);\n         boldFont.setWeight(QFont::Bold);\n         pixPaint.setFont(boldFont);\n         fm = pixPaint.fontMetrics();\n-        int testnetAddTextWidth  = fm.width(testnetAddText);\n-        pixPaint.drawText(pixmap.width()-testnetAddTextWidth-10,15,testnetAddText);\n+        int titleAddTextWidth  = fm.width(titleAddText);\n+        pixPaint.drawText(pixmap.width()-titleAddTextWidth-10,15,titleAddText);\n     }\n \n     pixPaint.end();\n \n     // Set window title\n-    if(isTestNet)\n-        setWindowTitle(titleText + \" \" + testnetAddText);\n-    else\n-        setWindowTitle(titleText);\n+    setWindowTitle(titleText + \" \" + titleAddText);\n \n     // Resize window and move to center of desktop, disallow resizing\n     QRect r(QPoint(), pixmap.size());"
      },
      {
        "sha": "128edadbee40bd96ad23c4e089e33b759664f994",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <QSplashScreen>\n \n+class NetworkStyle;\n+\n /** Class for the splashscreen with information of the running client.\n  *\n  * @note this is intentionally not a QSplashScreen. Bitcoin Core initialization\n@@ -18,7 +20,7 @@ class SplashScreen : public QWidget\n     Q_OBJECT\n \n public:\n-    explicit SplashScreen(Qt::WindowFlags f, bool isTestNet);\n+    explicit SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle);\n     ~SplashScreen();\n \n protected:"
      }
    ]
  },
  {
    "sha": "e11712df7ea5e946c5ec008d1c761187b495f872",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTE3MTJkZjdlYTVlOTQ2YzVlYzAwOGQxYzc2MTE4N2I0OTVmODcy",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-31T19:32:23Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-10T09:00:59Z"
      },
      "message": "Move checkpoint data selection to chainparams",
      "tree": {
        "sha": "ff134f106e1dddf80454ce6feff6019aaaeae82c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff134f106e1dddf80454ce6feff6019aaaeae82c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e11712df7ea5e946c5ec008d1c761187b495f872",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e11712df7ea5e946c5ec008d1c761187b495f872",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e11712df7ea5e946c5ec008d1c761187b495f872",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e11712df7ea5e946c5ec008d1c761187b495f872/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6de50c3c9a89e72f3152a1df7775572d5c8ad0e7"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 89,
      "deletions": 78
    },
    "files": [
      {
        "sha": "a81b618208e18d2937280ed57243379c60cb3299",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 1,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e11712df7ea5e946c5ec008d1c761187b495f872/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e11712df7ea5e946c5ec008d1c761187b495f872/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=e11712df7ea5e946c5ec008d1c761187b495f872",
        "patch": "@@ -44,6 +44,57 @@ static void convertSeed6(std::vector<CAddress> &vSeedsOut, const SeedSpec6 *data\n     }\n }\n \n+    // What makes a good checkpoint block?\n+    // + Is surrounded by blocks with reasonable timestamps\n+    //   (no blocks before with a timestamp after, none after with\n+    //    timestamp before)\n+    // + Contains no strange transactions\n+static Checkpoints::MapCheckpoints mapCheckpoints =\n+        boost::assign::map_list_of\n+        ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n+        ( 33333, uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n+        ( 74000, uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n+        (105000, uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n+        (134444, uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n+        (168000, uint256(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n+        (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n+        (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n+        (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n+        (225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n+        (250000, uint256(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n+        (279000, uint256(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n+        (295000, uint256(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n+        ;\n+static const Checkpoints::CCheckpointData data = {\n+        &mapCheckpoints,\n+        1397080064, // * UNIX timestamp of last checkpoint block\n+        36544669,   // * total number of transactions between genesis and last checkpoint\n+                    //   (the tx=... number in the SetBestChain debug.log lines)\n+        60000.0     // * estimated number of transactions per day after checkpoint\n+    };\n+\n+static Checkpoints::MapCheckpoints mapCheckpointsTestnet =\n+        boost::assign::map_list_of\n+        ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n+        ;\n+static const Checkpoints::CCheckpointData dataTestnet = {\n+        &mapCheckpointsTestnet,\n+        1337966069,\n+        1488,\n+        300\n+    };\n+\n+static Checkpoints::MapCheckpoints mapCheckpointsRegtest =\n+        boost::assign::map_list_of\n+        ( 0, uint256(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n+        ;\n+static const Checkpoints::CCheckpointData dataRegtest = {\n+        &mapCheckpointsRegtest,\n+        0,\n+        0,\n+        0\n+    };\n+\n class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n@@ -117,6 +168,11 @@ class CMainParams : public CChainParams {\n         fMineBlocksOnDemand = false;\n         fSkipProofOfWorkCheck = false;\n     }\n+\n+    const Checkpoints::CCheckpointData& Checkpoints() const \n+    {\n+        return data;\n+    }\n };\n static CMainParams mainParams;\n \n@@ -173,6 +229,10 @@ class CTestNetParams : public CMainParams {\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n     }\n+    const Checkpoints::CCheckpointData& Checkpoints() const \n+    {\n+        return dataTestnet;\n+    }\n };\n static CTestNetParams testNetParams;\n \n@@ -212,6 +272,10 @@ class CRegTestParams : public CTestNetParams {\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n     }\n+    const Checkpoints::CCheckpointData& Checkpoints() const \n+    {\n+        return dataRegtest;\n+    }\n };\n static CRegTestParams regTestParams;\n \n@@ -233,7 +297,13 @@ class CUnitTestParams : public CMainParams, public CModifiableParams {\n         fAllowMinDifficultyBlocks = false;\n         fMineBlocksOnDemand = true;\n     }\n-public:\n+\n+    const Checkpoints::CCheckpointData& Checkpoints() const \n+    {\n+        // UnitTest share the same checkpoints as MAIN\n+        return data;\n+    }\n+\n     // Published setters to allow changing values in unit test cases\n     virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }\n     virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }"
      },
      {
        "sha": "d3b1781b4d8bd507daeba27be05727f462dd053b",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e11712df7ea5e946c5ec008d1c761187b495f872/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e11712df7ea5e946c5ec008d1c761187b495f872/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=e11712df7ea5e946c5ec008d1c761187b495f872",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"core.h\"\n #include \"chainparamsbase.h\"\n+#include \"checkpoints.h\"\n #include \"protocol.h\"\n #include \"uint256.h\"\n \n@@ -77,6 +78,7 @@ class CChainParams\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     const std::vector<CAddress>& FixedSeeds() const { return vFixedSeeds; }\n+    virtual const Checkpoints::CCheckpointData& Checkpoints() const = 0;\n protected:\n     CChainParams() {}\n "
      },
      {
        "sha": "fbde47339d9c138b79ad88eea6b349d64c4e77a4",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 76,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e11712df7ea5e946c5ec008d1c761187b495f872/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e11712df7ea5e946c5ec008d1c761187b495f872/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=e11712df7ea5e946c5ec008d1c761187b495f872",
        "patch": "@@ -4,102 +4,31 @@\n \n #include \"checkpoints.h\"\n \n+#include \"chainparams.h\"\n #include \"main.h\"\n #include \"uint256.h\"\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/foreach.hpp>\n \n namespace Checkpoints {\n \n-    typedef std::map<int, uint256> MapCheckpoints;\n-\n     // How many times we expect transactions after the last checkpoint to\n     // be slower. This number is a compromise, as it can't be accurate for\n     // every system. When reindexing from a fast disk with a slow CPU, it\n     // can be up to 20, while when downloading from a slow network with a\n     // fast multicore CPU, it won't be much higher than 1.\n     static const double SIGCHECK_VERIFICATION_FACTOR = 5.0;\n \n-    struct CCheckpointData {\n-        const MapCheckpoints *mapCheckpoints;\n-        int64_t nTimeLastCheckpoint;\n-        int64_t nTransactionsLastCheckpoint;\n-        double fTransactionsPerDay;\n-    };\n-\n     bool fEnabled = true;\n \n-    // What makes a good checkpoint block?\n-    // + Is surrounded by blocks with reasonable timestamps\n-    //   (no blocks before with a timestamp after, none after with\n-    //    timestamp before)\n-    // + Contains no strange transactions\n-    static MapCheckpoints mapCheckpoints =\n-        boost::assign::map_list_of\n-        ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n-        ( 33333, uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n-        ( 74000, uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n-        (105000, uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n-        (134444, uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n-        (168000, uint256(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n-        (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n-        (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n-        (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n-        (225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n-        (250000, uint256(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n-        (279000, uint256(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n-        (295000, uint256(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n-        ;\n-    static const CCheckpointData data = {\n-        &mapCheckpoints,\n-        1397080064, // * UNIX timestamp of last checkpoint block\n-        36544669,   // * total number of transactions between genesis and last checkpoint\n-                    //   (the tx=... number in the SetBestChain debug.log lines)\n-        60000.0     // * estimated number of transactions per day after checkpoint\n-    };\n-\n-    static MapCheckpoints mapCheckpointsTestnet =\n-        boost::assign::map_list_of\n-        ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n-        ;\n-    static const CCheckpointData dataTestnet = {\n-        &mapCheckpointsTestnet,\n-        1337966069,\n-        1488,\n-        300\n-    };\n-\n-    static MapCheckpoints mapCheckpointsRegtest =\n-        boost::assign::map_list_of\n-        ( 0, uint256(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n-        ;\n-    static const CCheckpointData dataRegtest = {\n-        &mapCheckpointsRegtest,\n-        0,\n-        0,\n-        0\n-    };\n-\n-    const CCheckpointData &Checkpoints() {\n-        if (Params().NetworkID() == CBaseChainParams::TESTNET)\n-            return dataTestnet;\n-        else if (Params().NetworkID() == CBaseChainParams::MAIN)\n-            return data;\n-        else if (Params().NetworkID() == CBaseChainParams::UNITTEST) // UnitTest share the same checkpoints as MAIN\n-            return data;\n-        else\n-            return dataRegtest;\n-    }\n-\n     bool CheckBlock(int nHeight, const uint256& hash)\n     {\n         if (!fEnabled)\n             return true;\n \n-        const MapCheckpoints& checkpoints = *Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n \n         MapCheckpoints::const_iterator i = checkpoints.find(nHeight);\n         if (i == checkpoints.end()) return true;\n@@ -119,7 +48,7 @@ namespace Checkpoints {\n         // Work is defined as: 1.0 per transaction before the last checkpoint, and\n         // fSigcheckVerificationFactor per transaction after.\n \n-        const CCheckpointData &data = Checkpoints();\n+        const CCheckpointData &data = Params().Checkpoints();\n \n         if (pindex->nChainTx <= data.nTransactionsLastCheckpoint) {\n             double nCheapBefore = pindex->nChainTx;\n@@ -143,7 +72,7 @@ namespace Checkpoints {\n         if (!fEnabled)\n             return 0;\n \n-        const MapCheckpoints& checkpoints = *Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n \n         return checkpoints.rbegin()->first;\n     }\n@@ -153,7 +82,7 @@ namespace Checkpoints {\n         if (!fEnabled)\n             return NULL;\n \n-        const MapCheckpoints& checkpoints = *Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n \n         BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)\n         {"
      },
      {
        "sha": "b5b620fa6b2e153ad81f78bffea683bca0d911d6",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e11712df7ea5e946c5ec008d1c761187b495f872/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e11712df7ea5e946c5ec008d1c761187b495f872/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=e11712df7ea5e946c5ec008d1c761187b495f872",
        "patch": "@@ -5,16 +5,26 @@\n #ifndef BITCOIN_CHECKPOINT_H\n #define BITCOIN_CHECKPOINT_H\n \n+#include \"uint256.h\"\n+\n #include <map>\n \n class CBlockIndex;\n-class uint256;\n \n /** Block-chain checkpoints are compiled-in sanity checks.\n  * They are updated every release or three.\n  */\n namespace Checkpoints\n {\n+typedef std::map<int, uint256> MapCheckpoints;\n+\n+struct CCheckpointData {\n+    const MapCheckpoints *mapCheckpoints;\n+    int64_t nTimeLastCheckpoint;\n+    int64_t nTransactionsLastCheckpoint;\n+    double fTransactionsPerDay;\n+};\n+\n // Returns true if block passes checkpoint checks\n bool CheckBlock(int nHeight, const uint256& hash);\n "
      }
    ]
  },
  {
    "sha": "cc972107997122cb31f015b4e70f81781dbce784",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzk3MjEwNzk5NzEyMmNiMzFmMDE1YjRlNzBmODE3ODFkYmNlNzg0",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-31T20:32:52Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-10T09:01:00Z"
      },
      "message": "Add fTestnetToBeDeprecatedFieldRPC to CChainParams",
      "tree": {
        "sha": "fa8a7ab017f33df0ca599c0ca6dd0281e62574bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa8a7ab017f33df0ca599c0ca6dd0281e62574bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc972107997122cb31f015b4e70f81781dbce784",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc972107997122cb31f015b4e70f81781dbce784",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc972107997122cb31f015b4e70f81781dbce784",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc972107997122cb31f015b4e70f81781dbce784/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e11712df7ea5e946c5ec008d1c761187b495f872",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e11712df7ea5e946c5ec008d1c761187b495f872",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e11712df7ea5e946c5ec008d1c761187b495f872"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f2a14b8293cb96f78d1ed20423795b2d7fb335da",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc972107997122cb31f015b4e70f81781dbce784/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc972107997122cb31f015b4e70f81781dbce784/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=cc972107997122cb31f015b4e70f81781dbce784",
        "patch": "@@ -167,6 +167,7 @@ class CMainParams : public CChainParams {\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n         fSkipProofOfWorkCheck = false;\n+        fTestnetToBeDeprecatedFieldRPC = false;\n     }\n \n     const Checkpoints::CCheckpointData& Checkpoints() const \n@@ -228,6 +229,7 @@ class CTestNetParams : public CMainParams {\n         fAllowMinDifficultyBlocks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n+        fTestnetToBeDeprecatedFieldRPC = true;\n     }\n     const Checkpoints::CCheckpointData& Checkpoints() const \n     {\n@@ -271,6 +273,7 @@ class CRegTestParams : public CTestNetParams {\n         fAllowMinDifficultyBlocks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n+        fTestnetToBeDeprecatedFieldRPC = false;\n     }\n     const Checkpoints::CCheckpointData& Checkpoints() const \n     {"
      },
      {
        "sha": "21d3b4d526a5bc075348e528c3747fd4741276df",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc972107997122cb31f015b4e70f81781dbce784/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc972107997122cb31f015b4e70f81781dbce784/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=cc972107997122cb31f015b4e70f81781dbce784",
        "patch": "@@ -72,6 +72,8 @@ class CChainParams\n     /* Make miner stop after a block is found. In RPC, don't return\n      * until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n+    /* In the future use NetworkIDString() for RPC fields */\n+    bool TestnetToBeDeprecatedFieldRPC() const { return fTestnetToBeDeprecatedFieldRPC; }\n     CBaseChainParams::Network NetworkID() const { return networkID; }\n     /* Return the BIP70 network string (main, test or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n@@ -108,6 +110,7 @@ class CChainParams\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n     bool fSkipProofOfWorkCheck;\n+    bool fTestnetToBeDeprecatedFieldRPC;\n };\n \n /** Modifiable parameters interface is used by test cases to adapt the parameters in order"
      },
      {
        "sha": "c767835a27ff85f3c4646e3252980df115562349",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc972107997122cb31f015b4e70f81781dbce784/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc972107997122cb31f015b4e70f81781dbce784/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=cc972107997122cb31f015b4e70f81781dbce784",
        "patch": "@@ -239,7 +239,7 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", -1)));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n-    obj.push_back(Pair(\"testnet\",          Params().NetworkID() == CBaseChainParams::TESTNET));\n+    obj.push_back(Pair(\"testnet\",          Params().TestnetToBeDeprecatedFieldRPC()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n #ifdef ENABLE_WALLET\n     obj.push_back(Pair(\"generate\",         getgenerate(params, false)));"
      },
      {
        "sha": "8be14b567cc95369dfe62f78b7ec2d4090f46f6b",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc972107997122cb31f015b4e70f81781dbce784/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc972107997122cb31f015b4e70f81781dbce784/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=cc972107997122cb31f015b4e70f81781dbce784",
        "patch": "@@ -87,7 +87,7 @@ Value getinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"proxy\",         (proxy.IsValid() ? proxy.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n-    obj.push_back(Pair(\"testnet\",       Params().NetworkID() == CBaseChainParams::TESTNET));\n+    obj.push_back(Pair(\"testnet\",       Params().TestnetToBeDeprecatedFieldRPC()));\n #ifdef ENABLE_WALLET\n     if (pwalletMain) {\n         obj.push_back(Pair(\"keypoololdest\", pwalletMain->GetOldestKeyPoolTime()));"
      }
    ]
  },
  {
    "sha": "6fd546dd9680fff2c442075e511875acbd18b486",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmQ1NDZkZDk2ODBmZmYyYzQ0MjA3NWU1MTE4NzVhY2JkMThiNDg2",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-08-31T21:01:54Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-10T09:01:00Z"
      },
      "message": "Remove CChainParams::NetworkID()",
      "tree": {
        "sha": "3c00b2605f000156ca0865e108f8e143cb3606be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c00b2605f000156ca0865e108f8e143cb3606be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fd546dd9680fff2c442075e511875acbd18b486",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fd546dd9680fff2c442075e511875acbd18b486",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fd546dd9680fff2c442075e511875acbd18b486",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fd546dd9680fff2c442075e511875acbd18b486/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cc972107997122cb31f015b4e70f81781dbce784",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc972107997122cb31f015b4e70f81781dbce784",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cc972107997122cb31f015b4e70f81781dbce784"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f157419bb26fc9ee6782f8d86fa387b420355e14",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fd546dd9680fff2c442075e511875acbd18b486/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fd546dd9680fff2c442075e511875acbd18b486/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=6fd546dd9680fff2c442075e511875acbd18b486",
        "patch": "@@ -74,7 +74,6 @@ class CChainParams\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n     /* In the future use NetworkIDString() for RPC fields */\n     bool TestnetToBeDeprecatedFieldRPC() const { return fTestnetToBeDeprecatedFieldRPC; }\n-    CBaseChainParams::Network NetworkID() const { return networkID; }\n     /* Return the BIP70 network string (main, test or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }"
      }
    ]
  },
  {
    "sha": "023690c0f24a06853bb860db032a1ff67978ee74",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjM2OTBjMGYyNGEwNjg1M2JiODYwZGIwMzJhMWZmNjc5NzhlZTc0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-10T09:36:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-10T09:56:58Z"
      },
      "message": "Merge pull request #4802\n\n6fd546d Remove CChainParams::NetworkID() (jtimon)\ncc97210 Add fTestnetToBeDeprecatedFieldRPC to CChainParams (jtimon)\ne11712d Move checkpoint data selection to chainparams (jtimon)\n6de50c3 qt: add network-specific style object (Wladimir J. van der Laan)",
      "tree": {
        "sha": "32843e65dc50a3f49ea051b73b821e87d1451cd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32843e65dc50a3f49ea051b73b821e87d1451cd3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/023690c0f24a06853bb860db032a1ff67978ee74",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUN61qAAoJEHSBCwEjRsmmdw0IAJjdHV/MlCVaXFajgpgnjcMp\nSZS3QORzlMceYw2q0y3VdC3ComjW81tyjkCW677A4n5QpnHodqL/O4eU9pBbcJqx\n/uo6R5c2nYISrveCmS/z/9o94EOIB9ATgo/s0rJS3bm5zEdqpwjttWq06m0W4KIE\nNLAcXZk0C2+SpNqh1Sny9vpxkYWnoUhRiko4BCPLPglxn1WaSMMUfUheK8LYX6jX\nAWZFYTsq/JXnZAX22M1/31Nr8HehjKkdMcXFxZG2aucDv1B3Q2nr2RS2JnSYCiMj\nk2nR67nxrgaNjaCvL7mdfmqBX+ygmQfrIVXFyE7fxw08LWa8Aya0Z63Qev23g/k=\n=N6NE\n-----END PGP SIGNATURE-----",
        "payload": "tree 32843e65dc50a3f49ea051b73b821e87d1451cd3\nparent 11d486d23f6f718a36f9bb5c3c7476e33b43f136\nparent 6fd546dd9680fff2c442075e511875acbd18b486\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1412933802 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1412935018 +0200\n\nMerge pull request #4802\n\n6fd546d Remove CChainParams::NetworkID() (jtimon)\ncc97210 Add fTestnetToBeDeprecatedFieldRPC to CChainParams (jtimon)\ne11712d Move checkpoint data selection to chainparams (jtimon)\n6de50c3 qt: add network-specific style object (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/023690c0f24a06853bb860db032a1ff67978ee74",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/023690c0f24a06853bb860db032a1ff67978ee74",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/023690c0f24a06853bb860db032a1ff67978ee74/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11d486d23f6f718a36f9bb5c3c7476e33b43f136",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11d486d23f6f718a36f9bb5c3c7476e33b43f136",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11d486d23f6f718a36f9bb5c3c7476e33b43f136"
      },
      {
        "sha": "6fd546dd9680fff2c442075e511875acbd18b486",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fd546dd9680fff2c442075e511875acbd18b486",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6fd546dd9680fff2c442075e511875acbd18b486"
      }
    ],
    "stats": {
      "total": 378,
      "additions": 222,
      "deletions": 156
    },
    "files": [
      {
        "sha": "872a0cf1c5358c9ac8d9d7cc4c4195be3c8b6eae",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023690c0f24a06853bb860db032a1ff67978ee74/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023690c0f24a06853bb860db032a1ff67978ee74/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=023690c0f24a06853bb860db032a1ff67978ee74",
        "patch": "@@ -178,6 +178,7 @@ BITCOIN_QT_H = \\\n   qt/macdockiconhandler.h \\\n   qt/macnotificationhandler.h \\\n   qt/monitoreddatamapper.h \\\n+  qt/networkstyle.h \\\n   qt/notificator.h \\\n   qt/openuridialog.h \\\n   qt/optionsdialog.h \\\n@@ -269,6 +270,7 @@ BITCOIN_QT_CPP = \\\n   qt/guiutil.cpp \\\n   qt/intro.cpp \\\n   qt/monitoreddatamapper.cpp \\\n+  qt/networkstyle.cpp \\\n   qt/notificator.cpp \\\n   qt/optionsdialog.cpp \\\n   qt/optionsmodel.cpp \\"
      },
      {
        "sha": "f2a14b8293cb96f78d1ed20423795b2d7fb335da",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 1,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023690c0f24a06853bb860db032a1ff67978ee74/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023690c0f24a06853bb860db032a1ff67978ee74/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=023690c0f24a06853bb860db032a1ff67978ee74",
        "patch": "@@ -44,6 +44,57 @@ static void convertSeed6(std::vector<CAddress> &vSeedsOut, const SeedSpec6 *data\n     }\n }\n \n+    // What makes a good checkpoint block?\n+    // + Is surrounded by blocks with reasonable timestamps\n+    //   (no blocks before with a timestamp after, none after with\n+    //    timestamp before)\n+    // + Contains no strange transactions\n+static Checkpoints::MapCheckpoints mapCheckpoints =\n+        boost::assign::map_list_of\n+        ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n+        ( 33333, uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n+        ( 74000, uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n+        (105000, uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n+        (134444, uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n+        (168000, uint256(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n+        (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n+        (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n+        (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n+        (225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n+        (250000, uint256(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n+        (279000, uint256(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n+        (295000, uint256(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n+        ;\n+static const Checkpoints::CCheckpointData data = {\n+        &mapCheckpoints,\n+        1397080064, // * UNIX timestamp of last checkpoint block\n+        36544669,   // * total number of transactions between genesis and last checkpoint\n+                    //   (the tx=... number in the SetBestChain debug.log lines)\n+        60000.0     // * estimated number of transactions per day after checkpoint\n+    };\n+\n+static Checkpoints::MapCheckpoints mapCheckpointsTestnet =\n+        boost::assign::map_list_of\n+        ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n+        ;\n+static const Checkpoints::CCheckpointData dataTestnet = {\n+        &mapCheckpointsTestnet,\n+        1337966069,\n+        1488,\n+        300\n+    };\n+\n+static Checkpoints::MapCheckpoints mapCheckpointsRegtest =\n+        boost::assign::map_list_of\n+        ( 0, uint256(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n+        ;\n+static const Checkpoints::CCheckpointData dataRegtest = {\n+        &mapCheckpointsRegtest,\n+        0,\n+        0,\n+        0\n+    };\n+\n class CMainParams : public CChainParams {\n public:\n     CMainParams() {\n@@ -116,6 +167,12 @@ class CMainParams : public CChainParams {\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n         fSkipProofOfWorkCheck = false;\n+        fTestnetToBeDeprecatedFieldRPC = false;\n+    }\n+\n+    const Checkpoints::CCheckpointData& Checkpoints() const \n+    {\n+        return data;\n     }\n };\n static CMainParams mainParams;\n@@ -172,6 +229,11 @@ class CTestNetParams : public CMainParams {\n         fAllowMinDifficultyBlocks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n+        fTestnetToBeDeprecatedFieldRPC = true;\n+    }\n+    const Checkpoints::CCheckpointData& Checkpoints() const \n+    {\n+        return dataTestnet;\n     }\n };\n static CTestNetParams testNetParams;\n@@ -211,6 +273,11 @@ class CRegTestParams : public CTestNetParams {\n         fAllowMinDifficultyBlocks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n+        fTestnetToBeDeprecatedFieldRPC = false;\n+    }\n+    const Checkpoints::CCheckpointData& Checkpoints() const \n+    {\n+        return dataRegtest;\n     }\n };\n static CRegTestParams regTestParams;\n@@ -233,7 +300,13 @@ class CUnitTestParams : public CMainParams, public CModifiableParams {\n         fAllowMinDifficultyBlocks = false;\n         fMineBlocksOnDemand = true;\n     }\n-public:\n+\n+    const Checkpoints::CCheckpointData& Checkpoints() const \n+    {\n+        // UnitTest share the same checkpoints as MAIN\n+        return data;\n+    }\n+\n     // Published setters to allow changing values in unit test cases\n     virtual void setSubsidyHalvingInterval(int anSubsidyHalvingInterval)  { nSubsidyHalvingInterval=anSubsidyHalvingInterval; }\n     virtual void setEnforceBlockUpgradeMajority(int anEnforceBlockUpgradeMajority)  { nEnforceBlockUpgradeMajority=anEnforceBlockUpgradeMajority; }"
      },
      {
        "sha": "f157419bb26fc9ee6782f8d86fa387b420355e14",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023690c0f24a06853bb860db032a1ff67978ee74/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023690c0f24a06853bb860db032a1ff67978ee74/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=023690c0f24a06853bb860db032a1ff67978ee74",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"core.h\"\n #include \"chainparamsbase.h\"\n+#include \"checkpoints.h\"\n #include \"protocol.h\"\n #include \"uint256.h\"\n \n@@ -71,12 +72,14 @@ class CChainParams\n     /* Make miner stop after a block is found. In RPC, don't return\n      * until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n-    CBaseChainParams::Network NetworkID() const { return networkID; }\n+    /* In the future use NetworkIDString() for RPC fields */\n+    bool TestnetToBeDeprecatedFieldRPC() const { return fTestnetToBeDeprecatedFieldRPC; }\n     /* Return the BIP70 network string (main, test or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n     const std::vector<unsigned char>& Base58Prefix(Base58Type type) const { return base58Prefixes[type]; }\n     const std::vector<CAddress>& FixedSeeds() const { return vFixedSeeds; }\n+    virtual const Checkpoints::CCheckpointData& Checkpoints() const = 0;\n protected:\n     CChainParams() {}\n \n@@ -106,6 +109,7 @@ class CChainParams\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n     bool fSkipProofOfWorkCheck;\n+    bool fTestnetToBeDeprecatedFieldRPC;\n };\n \n /** Modifiable parameters interface is used by test cases to adapt the parameters in order"
      },
      {
        "sha": "fbde47339d9c138b79ad88eea6b349d64c4e77a4",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 76,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023690c0f24a06853bb860db032a1ff67978ee74/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023690c0f24a06853bb860db032a1ff67978ee74/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=023690c0f24a06853bb860db032a1ff67978ee74",
        "patch": "@@ -4,102 +4,31 @@\n \n #include \"checkpoints.h\"\n \n+#include \"chainparams.h\"\n #include \"main.h\"\n #include \"uint256.h\"\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/foreach.hpp>\n \n namespace Checkpoints {\n \n-    typedef std::map<int, uint256> MapCheckpoints;\n-\n     // How many times we expect transactions after the last checkpoint to\n     // be slower. This number is a compromise, as it can't be accurate for\n     // every system. When reindexing from a fast disk with a slow CPU, it\n     // can be up to 20, while when downloading from a slow network with a\n     // fast multicore CPU, it won't be much higher than 1.\n     static const double SIGCHECK_VERIFICATION_FACTOR = 5.0;\n \n-    struct CCheckpointData {\n-        const MapCheckpoints *mapCheckpoints;\n-        int64_t nTimeLastCheckpoint;\n-        int64_t nTransactionsLastCheckpoint;\n-        double fTransactionsPerDay;\n-    };\n-\n     bool fEnabled = true;\n \n-    // What makes a good checkpoint block?\n-    // + Is surrounded by blocks with reasonable timestamps\n-    //   (no blocks before with a timestamp after, none after with\n-    //    timestamp before)\n-    // + Contains no strange transactions\n-    static MapCheckpoints mapCheckpoints =\n-        boost::assign::map_list_of\n-        ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n-        ( 33333, uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n-        ( 74000, uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n-        (105000, uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n-        (134444, uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n-        (168000, uint256(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n-        (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n-        (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n-        (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n-        (225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n-        (250000, uint256(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n-        (279000, uint256(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n-        (295000, uint256(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n-        ;\n-    static const CCheckpointData data = {\n-        &mapCheckpoints,\n-        1397080064, // * UNIX timestamp of last checkpoint block\n-        36544669,   // * total number of transactions between genesis and last checkpoint\n-                    //   (the tx=... number in the SetBestChain debug.log lines)\n-        60000.0     // * estimated number of transactions per day after checkpoint\n-    };\n-\n-    static MapCheckpoints mapCheckpointsTestnet =\n-        boost::assign::map_list_of\n-        ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n-        ;\n-    static const CCheckpointData dataTestnet = {\n-        &mapCheckpointsTestnet,\n-        1337966069,\n-        1488,\n-        300\n-    };\n-\n-    static MapCheckpoints mapCheckpointsRegtest =\n-        boost::assign::map_list_of\n-        ( 0, uint256(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n-        ;\n-    static const CCheckpointData dataRegtest = {\n-        &mapCheckpointsRegtest,\n-        0,\n-        0,\n-        0\n-    };\n-\n-    const CCheckpointData &Checkpoints() {\n-        if (Params().NetworkID() == CBaseChainParams::TESTNET)\n-            return dataTestnet;\n-        else if (Params().NetworkID() == CBaseChainParams::MAIN)\n-            return data;\n-        else if (Params().NetworkID() == CBaseChainParams::UNITTEST) // UnitTest share the same checkpoints as MAIN\n-            return data;\n-        else\n-            return dataRegtest;\n-    }\n-\n     bool CheckBlock(int nHeight, const uint256& hash)\n     {\n         if (!fEnabled)\n             return true;\n \n-        const MapCheckpoints& checkpoints = *Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n \n         MapCheckpoints::const_iterator i = checkpoints.find(nHeight);\n         if (i == checkpoints.end()) return true;\n@@ -119,7 +48,7 @@ namespace Checkpoints {\n         // Work is defined as: 1.0 per transaction before the last checkpoint, and\n         // fSigcheckVerificationFactor per transaction after.\n \n-        const CCheckpointData &data = Checkpoints();\n+        const CCheckpointData &data = Params().Checkpoints();\n \n         if (pindex->nChainTx <= data.nTransactionsLastCheckpoint) {\n             double nCheapBefore = pindex->nChainTx;\n@@ -143,7 +72,7 @@ namespace Checkpoints {\n         if (!fEnabled)\n             return 0;\n \n-        const MapCheckpoints& checkpoints = *Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n \n         return checkpoints.rbegin()->first;\n     }\n@@ -153,7 +82,7 @@ namespace Checkpoints {\n         if (!fEnabled)\n             return NULL;\n \n-        const MapCheckpoints& checkpoints = *Checkpoints().mapCheckpoints;\n+        const MapCheckpoints& checkpoints = *Params().Checkpoints().mapCheckpoints;\n \n         BOOST_REVERSE_FOREACH(const MapCheckpoints::value_type& i, checkpoints)\n         {"
      },
      {
        "sha": "b5b620fa6b2e153ad81f78bffea683bca0d911d6",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023690c0f24a06853bb860db032a1ff67978ee74/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023690c0f24a06853bb860db032a1ff67978ee74/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=023690c0f24a06853bb860db032a1ff67978ee74",
        "patch": "@@ -5,16 +5,26 @@\n #ifndef BITCOIN_CHECKPOINT_H\n #define BITCOIN_CHECKPOINT_H\n \n+#include \"uint256.h\"\n+\n #include <map>\n \n class CBlockIndex;\n-class uint256;\n \n /** Block-chain checkpoints are compiled-in sanity checks.\n  * They are updated every release or three.\n  */\n namespace Checkpoints\n {\n+typedef std::map<int, uint256> MapCheckpoints;\n+\n+struct CCheckpointData {\n+    const MapCheckpoints *mapCheckpoints;\n+    int64_t nTimeLastCheckpoint;\n+    int64_t nTransactionsLastCheckpoint;\n+    double fTransactionsPerDay;\n+};\n+\n // Returns true if block passes checkpoint checks\n bool CheckBlock(int nHeight, const uint256& hash);\n "
      },
      {
        "sha": "9872ebc1f640ea632d72985d908838eba202d4bd",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023690c0f24a06853bb860db032a1ff67978ee74/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023690c0f24a06853bb860db032a1ff67978ee74/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=023690c0f24a06853bb860db032a1ff67978ee74",
        "patch": "@@ -12,6 +12,7 @@\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"intro.h\"\n+#include \"networkstyle.h\"\n #include \"optionsmodel.h\"\n #include \"splashscreen.h\"\n #include \"utilitydialog.h\"\n@@ -190,9 +191,9 @@ class BitcoinApplication: public QApplication\n     /// Create options model\n     void createOptionsModel();\n     /// Create main window\n-    void createWindow(bool isaTestNet);\n+    void createWindow(const NetworkStyle *networkStyle);\n     /// Create splash screen\n-    void createSplashScreen(bool isaTestNet);\n+    void createSplashScreen(const NetworkStyle *networkStyle);\n \n     /// Request core initialization\n     void requestInitialize();\n@@ -331,18 +332,18 @@ void BitcoinApplication::createOptionsModel()\n     optionsModel = new OptionsModel();\n }\n \n-void BitcoinApplication::createWindow(bool isaTestNet)\n+void BitcoinApplication::createWindow(const NetworkStyle *networkStyle)\n {\n-    window = new BitcoinGUI(isaTestNet, 0);\n+    window = new BitcoinGUI(networkStyle, 0);\n \n     pollShutdownTimer = new QTimer(window);\n     connect(pollShutdownTimer, SIGNAL(timeout()), window, SLOT(detectShutdown()));\n     pollShutdownTimer->start(200);\n }\n \n-void BitcoinApplication::createSplashScreen(bool isaTestNet)\n+void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n {\n-    SplashScreen *splash = new SplashScreen(0, isaTestNet);\n+    SplashScreen *splash = new SplashScreen(0, networkStyle);\n     // We don't hold a direct pointer to the splash screen after creation, so use\n     // Qt::WA_DeleteOnClose to make sure that the window will be deleted eventually.\n     splash->setAttribute(Qt::WA_DeleteOnClose);\n@@ -572,12 +573,10 @@ int main(int argc, char *argv[])\n     if (!PaymentServer::ipcParseCommandLine(argc, argv))\n         exit(0);\n #endif\n-    bool isaTestNet = Params().NetworkID() != CBaseChainParams::MAIN;\n+    QScopedPointer<const NetworkStyle> networkStyle(NetworkStyle::instantiate(QString::fromStdString(Params().NetworkIDString())));\n+    assert(!networkStyle.isNull());\n     // Allow for separate UI settings for testnets\n-    if (isaTestNet)\n-        QApplication::setApplicationName(QAPP_APP_NAME_TESTNET);\n-    else\n-        QApplication::setApplicationName(QAPP_APP_NAME_DEFAULT);\n+    QApplication::setApplicationName(networkStyle->getAppName());\n     // Re-initialize translations after changing application name (language in network-specific settings can be different)\n     initTranslations(qtTranslatorBase, qtTranslator, translatorBase, translator);\n \n@@ -617,11 +616,11 @@ int main(int argc, char *argv[])\n     uiInterface.InitMessage.connect(InitMessage);\n \n     if (GetBoolArg(\"-splash\", true) && !GetBoolArg(\"-min\", false))\n-        app.createSplashScreen(isaTestNet);\n+        app.createSplashScreen(networkStyle.data());\n \n     try\n     {\n-        app.createWindow(isaTestNet);\n+        app.createWindow(networkStyle.data());\n         app.requestInitialize();\n #if defined(Q_OS_WIN) && QT_VERSION >= 0x050000\n         WinShutdownMonitor::registerShutdownBlockReason(QObject::tr(\"Bitcoin Core didn't yet exit safely...\"), (HWND)app.getMainWinId());"
      },
      {
        "sha": "8a945606dcd000af14f1e91ba7c506bbb52c99d3",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 42,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023690c0f24a06853bb860db032a1ff67978ee74/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023690c0f24a06853bb860db032a1ff67978ee74/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=023690c0f24a06853bb860db032a1ff67978ee74",
        "patch": "@@ -8,6 +8,7 @@\n #include \"clientmodel.h\"\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n+#include \"networkstyle.h\"\n #include \"notificator.h\"\n #include \"openuridialog.h\"\n #include \"optionsdialog.h\"\n@@ -59,7 +60,7 @@\n \n const QString BitcoinGUI::DEFAULT_WALLET = \"~Default\";\n \n-BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n+BitcoinGUI::BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent) :\n     QMainWindow(parent),\n     clientModel(0),\n     walletFrame(0),\n@@ -112,26 +113,13 @@ BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n     } else {\n         windowTitle += tr(\"Node\");\n     }\n-\n-    if (!fIsTestnet)\n-    {\n+    windowTitle += \" \" + networkStyle->getTitleAddText();\n #ifndef Q_OS_MAC\n-        QApplication::setWindowIcon(QIcon(\":icons/bitcoin\"));\n-        setWindowIcon(QIcon(\":icons/bitcoin\"));\n+    QApplication::setWindowIcon(networkStyle->getAppIcon());\n+    setWindowIcon(networkStyle->getAppIcon());\n #else\n-        MacDockIconHandler::instance()->setIcon(QIcon(\":icons/bitcoin\"));\n+    MacDockIconHandler::instance()->setIcon(networkStyle->getAppIcon());\n #endif\n-    }\n-    else\n-    {\n-        windowTitle += \" \" + tr(\"[testnet]\");\n-#ifndef Q_OS_MAC\n-        QApplication::setWindowIcon(QIcon(\":icons/bitcoin_testnet\"));\n-        setWindowIcon(QIcon(\":icons/bitcoin_testnet\"));\n-#else\n-        MacDockIconHandler::instance()->setIcon(QIcon(\":icons/bitcoin_testnet\"));\n-#endif\n-    }\n     setWindowTitle(windowTitle);\n \n #if defined(Q_OS_MAC) && QT_VERSION < 0x050000\n@@ -161,7 +149,7 @@ BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n \n     // Create actions for the toolbar, menu bar and tray/dock icon\n     // Needs walletFrame to be initialized\n-    createActions(fIsTestnet);\n+    createActions(networkStyle);\n \n     // Create application menu bar\n     createMenuBar();\n@@ -170,7 +158,7 @@ BitcoinGUI::BitcoinGUI(bool fIsTestnet, QWidget *parent) :\n     createToolBars();\n \n     // Create system tray icon and notification\n-    createTrayIcon(fIsTestnet);\n+    createTrayIcon(networkStyle);\n \n     // Create status bar\n     statusBar();\n@@ -248,7 +236,7 @@ BitcoinGUI::~BitcoinGUI()\n #endif\n }\n \n-void BitcoinGUI::createActions(bool fIsTestnet)\n+void BitcoinGUI::createActions(const NetworkStyle *networkStyle)\n {\n     QActionGroup *tabGroup = new QActionGroup(this);\n \n@@ -295,10 +283,7 @@ void BitcoinGUI::createActions(bool fIsTestnet)\n     quitAction->setStatusTip(tr(\"Quit application\"));\n     quitAction->setShortcut(QKeySequence(Qt::CTRL + Qt::Key_Q));\n     quitAction->setMenuRole(QAction::QuitRole);\n-    if (!fIsTestnet)\n-        aboutAction = new QAction(QIcon(\":/icons/bitcoin\"), tr(\"&About Bitcoin Core\"), this);\n-    else\n-        aboutAction = new QAction(QIcon(\":/icons/bitcoin_testnet\"), tr(\"&About Bitcoin Core\"), this);\n+    aboutAction = new QAction(networkStyle->getAppIcon(), tr(\"&About Bitcoin Core\"), this);\n     aboutAction->setStatusTip(tr(\"Show information about Bitcoin Core\"));\n     aboutAction->setMenuRole(QAction::AboutRole);\n #if QT_VERSION < 0x050000\n@@ -311,10 +296,7 @@ void BitcoinGUI::createActions(bool fIsTestnet)\n     optionsAction = new QAction(QIcon(\":/icons/options\"), tr(\"&Options...\"), this);\n     optionsAction->setStatusTip(tr(\"Modify configuration options for Bitcoin\"));\n     optionsAction->setMenuRole(QAction::PreferencesRole);\n-    if (!fIsTestnet)\n-        toggleHideAction = new QAction(QIcon(\":/icons/bitcoin\"), tr(\"&Show / Hide\"), this);\n-    else\n-        toggleHideAction = new QAction(QIcon(\":/icons/bitcoin_testnet\"), tr(\"&Show / Hide\"), this);\n+    toggleHideAction = new QAction(networkStyle->getAppIcon(), tr(\"&Show / Hide\"), this);\n     toggleHideAction->setStatusTip(tr(\"Show or hide the main Window\"));\n \n     encryptWalletAction = new QAction(QIcon(\":/icons/lock_closed\"), tr(\"&Encrypt Wallet...\"), this);\n@@ -505,22 +487,13 @@ void BitcoinGUI::setWalletActionsEnabled(bool enabled)\n     openAction->setEnabled(enabled);\n }\n \n-void BitcoinGUI::createTrayIcon(bool fIsTestnet)\n+void BitcoinGUI::createTrayIcon(const NetworkStyle *networkStyle)\n {\n #ifndef Q_OS_MAC\n     trayIcon = new QSystemTrayIcon(this);\n-\n-    if (!fIsTestnet)\n-    {\n-        trayIcon->setToolTip(tr(\"Bitcoin Core client\"));\n-        trayIcon->setIcon(QIcon(\":/icons/bitcoin\"));\n-    }\n-    else\n-    {\n-        trayIcon->setToolTip(tr(\"Bitcoin Core client\") + \" \" + tr(\"[testnet]\"));\n-        trayIcon->setIcon(QIcon(\":/icons/bitcoin_testnet\"));\n-    }\n-\n+    QString toolTip = tr(\"Bitcoin Core client\") + \" \" + networkStyle->getTitleAddText();\n+    trayIcon->setToolTip(toolTip);\n+    trayIcon->setIcon(networkStyle->getAppIcon());\n     trayIcon->show();\n #endif\n "
      },
      {
        "sha": "f65f0e91379d93f3c0ee0e88da101ab747ce198e",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023690c0f24a06853bb860db032a1ff67978ee74/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023690c0f24a06853bb860db032a1ff67978ee74/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=023690c0f24a06853bb860db032a1ff67978ee74",
        "patch": "@@ -19,6 +19,7 @@\n #include <QSystemTrayIcon>\n \n class ClientModel;\n+class NetworkStyle;\n class Notificator;\n class OptionsModel;\n class RPCConsole;\n@@ -46,7 +47,7 @@ class BitcoinGUI : public QMainWindow\n public:\n     static const QString DEFAULT_WALLET;\n \n-    explicit BitcoinGUI(bool fIsTestnet = false, QWidget *parent = 0);\n+    explicit BitcoinGUI(const NetworkStyle *networkStyle, QWidget *parent = 0);\n     ~BitcoinGUI();\n \n     /** Set the client model.\n@@ -114,13 +115,13 @@ class BitcoinGUI : public QMainWindow\n     int spinnerFrame;\n \n     /** Create the main UI actions. */\n-    void createActions(bool fIsTestnet);\n+    void createActions(const NetworkStyle *networkStyle);\n     /** Create the menu bar and sub-menus. */\n     void createMenuBar();\n     /** Create the toolbars */\n     void createToolBars();\n     /** Create system tray icon and notification */\n-    void createTrayIcon(bool fIsTestnet);\n+    void createTrayIcon(const NetworkStyle *networkStyle);\n     /** Create system tray menu (or setup the dock menu) */\n     void createTrayIconMenu();\n "
      },
      {
        "sha": "62c44703f470c2c76955694a01d382d74e23eb37",
        "filename": "src/qt/networkstyle.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023690c0f24a06853bb860db032a1ff67978ee74/src/qt/networkstyle.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023690c0f24a06853bb860db032a1ff67978ee74/src/qt/networkstyle.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.cpp?ref=023690c0f24a06853bb860db032a1ff67978ee74",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"networkstyle.h\"\n+\n+#include \"guiconstants.h\"\n+\n+#include <QApplication>\n+\n+static const struct {\n+    const char *networkId;\n+    const char *appName;\n+    const char *appIcon;\n+    const char *titleAddText;\n+    const char *splashImage;\n+} network_styles[] = {\n+    {\"main\", QAPP_APP_NAME_DEFAULT, \":/icons/bitcoin\", \"\", \":/images/splash\"},\n+    {\"test\", QAPP_APP_NAME_TESTNET, \":/icons/bitcoin_testnet\", QT_TRANSLATE_NOOP(\"SplashScreen\", \"[testnet]\"), \":/images/splash_testnet\"},\n+    {\"regtest\", QAPP_APP_NAME_TESTNET, \":/icons/bitcoin_testnet\", \"[regtest]\", \":/images/splash_testnet\"}\n+};\n+static const unsigned network_styles_count = sizeof(network_styles)/sizeof(*network_styles);\n+\n+// titleAddText needs to be const char* for tr()\n+NetworkStyle::NetworkStyle(const QString &appName, const QString &appIcon, const char *titleAddText, const QString &splashImage):\n+    appName(appName),\n+    appIcon(appIcon),\n+    titleAddText(qApp->translate(\"SplashScreen\", titleAddText)),\n+    splashImage(splashImage)\n+{\n+}\n+\n+const NetworkStyle *NetworkStyle::instantiate(const QString &networkId)\n+{\n+    for (unsigned x=0; x<network_styles_count; ++x)\n+    {\n+        if (networkId == network_styles[x].networkId)\n+        {\n+            return new NetworkStyle(\n+                    network_styles[x].appName,\n+                    network_styles[x].appIcon,\n+                    network_styles[x].titleAddText,\n+                    network_styles[x].splashImage);\n+        }\n+    }\n+    return 0;\n+}"
      },
      {
        "sha": "99304d61a3abe20babc7945d355ed25f2a3e7850",
        "filename": "src/qt/networkstyle.h",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023690c0f24a06853bb860db032a1ff67978ee74/src/qt/networkstyle.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023690c0f24a06853bb860db032a1ff67978ee74/src/qt/networkstyle.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/networkstyle.h?ref=023690c0f24a06853bb860db032a1ff67978ee74",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef H_NETWORKSTYLE\n+#define H_NETWORKSTYLE\n+\n+#include <QIcon>\n+#include <QPixmap>\n+#include <QString>\n+\n+/* Coin network-specific GUI style information */\n+class NetworkStyle\n+{\n+public:\n+    /** Get style associated with provided BIP70 network id, or 0 if not known */\n+    static const NetworkStyle *instantiate(const QString &networkId);\n+\n+    const QString &getAppName() const { return appName; }\n+    const QIcon &getAppIcon() const { return appIcon; }\n+    const QString &getTitleAddText() const { return titleAddText; }\n+    const QPixmap &getSplashImage() const { return splashImage; }\n+\n+private:\n+    NetworkStyle(const QString &appName, const QString &appIcon, const char *titleAddText, const QString &splashImage);\n+\n+    QString appName;\n+    QIcon appIcon;\n+    QString titleAddText;\n+    QPixmap splashImage;\n+};\n+\n+#endif // H_NETWORKSTYLE"
      },
      {
        "sha": "b4b81440ca8106809f50ebfc2978c03d82fe1806",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 16,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023690c0f24a06853bb860db032a1ff67978ee74/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023690c0f24a06853bb860db032a1ff67978ee74/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=023690c0f24a06853bb860db032a1ff67978ee74",
        "patch": "@@ -6,6 +6,7 @@\n \n #include \"clientversion.h\"\n #include \"init.h\"\n+#include \"networkstyle.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"version.h\"\n@@ -19,7 +20,7 @@\n #include <QDesktopWidget>\n #include <QPainter>\n \n-SplashScreen::SplashScreen(Qt::WindowFlags f, bool isTestNet) :\n+SplashScreen::SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle) :\n     QWidget(0, f), curAlignment(0)\n {\n     // set reference point, paddings\n@@ -34,17 +35,12 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, bool isTestNet) :\n     QString titleText       = tr(\"Bitcoin Core\");\n     QString versionText     = QString(\"Version %1\").arg(QString::fromStdString(FormatFullVersion()));\n     QString copyrightText   = QChar(0xA9)+QString(\" 2009-%1 \").arg(COPYRIGHT_YEAR) + QString(tr(\"The Bitcoin Core developers\"));\n-    QString testnetAddText  = QString(tr(\"[testnet]\")); // define text to place as single text object\n+    QString titleAddText    = networkStyle->getTitleAddText();\n \n     QString font            = \"Arial\";\n \n     // load the bitmap for writing some text over it\n-    if(isTestNet) {\n-        pixmap     = QPixmap(\":/images/splash_testnet\");\n-    }\n-    else {\n-        pixmap     = QPixmap(\":/images/splash\");\n-    }\n+    pixmap     = networkStyle->getSplashImage();\n \n     QPainter pixPaint(&pixmap);\n     pixPaint.setPen(QColor(100,100,100));\n@@ -78,23 +74,20 @@ SplashScreen::SplashScreen(Qt::WindowFlags f, bool isTestNet) :\n     pixPaint.setFont(QFont(font, 10*fontFactor));\n     pixPaint.drawText(pixmap.width()-titleTextWidth-paddingRight,paddingTop+titleCopyrightVSpace,copyrightText);\n \n-    // draw testnet string if testnet is on\n-    if(isTestNet) {\n+    // draw additional text if special network\n+    if(!titleAddText.isEmpty()) {\n         QFont boldFont = QFont(font, 10*fontFactor);\n         boldFont.setWeight(QFont::Bold);\n         pixPaint.setFont(boldFont);\n         fm = pixPaint.fontMetrics();\n-        int testnetAddTextWidth  = fm.width(testnetAddText);\n-        pixPaint.drawText(pixmap.width()-testnetAddTextWidth-10,15,testnetAddText);\n+        int titleAddTextWidth  = fm.width(titleAddText);\n+        pixPaint.drawText(pixmap.width()-titleAddTextWidth-10,15,titleAddText);\n     }\n \n     pixPaint.end();\n \n     // Set window title\n-    if(isTestNet)\n-        setWindowTitle(titleText + \" \" + testnetAddText);\n-    else\n-        setWindowTitle(titleText);\n+    setWindowTitle(titleText + \" \" + titleAddText);\n \n     // Resize window and move to center of desktop, disallow resizing\n     QRect r(QPoint(), pixmap.size());"
      },
      {
        "sha": "128edadbee40bd96ad23c4e089e33b759664f994",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023690c0f24a06853bb860db032a1ff67978ee74/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023690c0f24a06853bb860db032a1ff67978ee74/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=023690c0f24a06853bb860db032a1ff67978ee74",
        "patch": "@@ -7,6 +7,8 @@\n \n #include <QSplashScreen>\n \n+class NetworkStyle;\n+\n /** Class for the splashscreen with information of the running client.\n  *\n  * @note this is intentionally not a QSplashScreen. Bitcoin Core initialization\n@@ -18,7 +20,7 @@ class SplashScreen : public QWidget\n     Q_OBJECT\n \n public:\n-    explicit SplashScreen(Qt::WindowFlags f, bool isTestNet);\n+    explicit SplashScreen(Qt::WindowFlags f, const NetworkStyle *networkStyle);\n     ~SplashScreen();\n \n protected:"
      },
      {
        "sha": "c767835a27ff85f3c4646e3252980df115562349",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023690c0f24a06853bb860db032a1ff67978ee74/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023690c0f24a06853bb860db032a1ff67978ee74/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=023690c0f24a06853bb860db032a1ff67978ee74",
        "patch": "@@ -239,7 +239,7 @@ Value getmininginfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"genproclimit\",     (int)GetArg(\"-genproclimit\", -1)));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n-    obj.push_back(Pair(\"testnet\",          Params().NetworkID() == CBaseChainParams::TESTNET));\n+    obj.push_back(Pair(\"testnet\",          Params().TestnetToBeDeprecatedFieldRPC()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n #ifdef ENABLE_WALLET\n     obj.push_back(Pair(\"generate\",         getgenerate(params, false)));"
      },
      {
        "sha": "8be14b567cc95369dfe62f78b7ec2d4090f46f6b",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023690c0f24a06853bb860db032a1ff67978ee74/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023690c0f24a06853bb860db032a1ff67978ee74/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=023690c0f24a06853bb860db032a1ff67978ee74",
        "patch": "@@ -87,7 +87,7 @@ Value getinfo(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"proxy\",         (proxy.IsValid() ? proxy.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n-    obj.push_back(Pair(\"testnet\",       Params().NetworkID() == CBaseChainParams::TESTNET));\n+    obj.push_back(Pair(\"testnet\",       Params().TestnetToBeDeprecatedFieldRPC()));\n #ifdef ENABLE_WALLET\n     if (pwalletMain) {\n         obj.push_back(Pair(\"keypoololdest\", pwalletMain->GetOldestKeyPoolTime()));"
      }
    ]
  },
  {
    "sha": "a7d1f035ae2b33d5242d9aee5da1b538a0f5adba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2QxZjAzNWFlMmIzM2Q1MjQyZDlhZWU1ZGExYjUzOGEwZjVhZGJh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-10T17:00:50Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-10T17:00:50Z"
      },
      "message": "build: fix dynamic boost check when --with-boost= is used",
      "tree": {
        "sha": "e3635b34989ee3fc615db86449c8ae90cdc622cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3635b34989ee3fc615db86449c8ae90cdc622cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7d1f035ae2b33d5242d9aee5da1b538a0f5adba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d1f035ae2b33d5242d9aee5da1b538a0f5adba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7d1f035ae2b33d5242d9aee5da1b538a0f5adba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d1f035ae2b33d5242d9aee5da1b538a0f5adba/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "023690c0f24a06853bb860db032a1ff67978ee74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/023690c0f24a06853bb860db032a1ff67978ee74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/023690c0f24a06853bb860db032a1ff67978ee74"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "90aa11242166b9dcb2c2faae29db2c940cb22f81",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d1f035ae2b33d5242d9aee5da1b538a0f5adba/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d1f035ae2b33d5242d9aee5da1b538a0f5adba/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a7d1f035ae2b33d5242d9aee5da1b538a0f5adba",
        "patch": "@@ -521,7 +521,7 @@ if test x$use_tests = xyes; then\n   dnl Determine if -DBOOST_TEST_DYN_LINK is needed\n   AC_MSG_CHECKING([for dynamic linked boost test])\n   TEMP_LIBS=\"$LIBS\"\n-  LIBS=\"$LIBS $BOOST_UNIT_TEST_FRAMEWORK_LIB\"\n+  LIBS=\"$LIBS $BOOST_LDFLAGS $BOOST_UNIT_TEST_FRAMEWORK_LIB\"\n   TEMP_CPPFLAGS=\"$CPPFLAGS\"\n   CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n   AC_LINK_IFELSE([AC_LANG_SOURCE(["
      }
    ]
  },
  {
    "sha": "d5fd094569e74595af18d42d2aa06738304b715b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNWZkMDk0NTY5ZTc0NTk1YWYxOGQ0MmQyYWEwNjczODMwNGI3MTVi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-10T17:03:28Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-10T17:03:28Z"
      },
      "message": "build: fix qt test build when libprotobuf is in a non-standard path",
      "tree": {
        "sha": "e007e74473c21106e4cae8564e7f2f9982cd1b3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e007e74473c21106e4cae8564e7f2f9982cd1b3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5fd094569e74595af18d42d2aa06738304b715b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5fd094569e74595af18d42d2aa06738304b715b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5fd094569e74595af18d42d2aa06738304b715b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5fd094569e74595af18d42d2aa06738304b715b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7d1f035ae2b33d5242d9aee5da1b538a0f5adba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d1f035ae2b33d5242d9aee5da1b538a0f5adba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7d1f035ae2b33d5242d9aee5da1b538a0f5adba"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "23375bef82c5edfdf9617a92388028f916940476",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5fd094569e74595af18d42d2aa06738304b715b/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5fd094569e74595af18d42d2aa06738304b715b/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=d5fd094569e74595af18d42d2aa06738304b715b",
        "patch": "@@ -13,7 +13,7 @@ TEST_QT_H = \\\n   qt/test/paymentservertests.h\n \n qt_test_test_bitcoin_qt_CPPFLAGS = $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n-  $(QT_INCLUDES) $(QT_TEST_INCLUDES)\n+  $(QT_INCLUDES) $(QT_TEST_INCLUDES) $(PROTOBUF_CFLAGS)\n \n qt_test_test_bitcoin_qt_SOURCES = \\\n   qt/test/test_main.cpp \\"
      }
    ]
  },
  {
    "sha": "005b5af6e2d32cc2a4a37b6edb60aacdfb5e8ed0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDViNWFmNmUyZDMyY2MyYTRhMzdiNmVkYjYwYWFjZGZiNWU4ZWQw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-10T17:11:47Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-10T17:11:49Z"
      },
      "message": "rpc-tests: don't spew non-errors to stdout\n\nThere's a brief race here, the process might've already exited and cleaned up\nafter itself. If that's the case, reading from the pidfile will harmlessly\nfail. Keep those quiet.",
      "tree": {
        "sha": "04a0eabe1e117ccff8c6413e813cc49e1430c9b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04a0eabe1e117ccff8c6413e813cc49e1430c9b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/005b5af6e2d32cc2a4a37b6edb60aacdfb5e8ed0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/005b5af6e2d32cc2a4a37b6edb60aacdfb5e8ed0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/005b5af6e2d32cc2a4a37b6edb60aacdfb5e8ed0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/005b5af6e2d32cc2a4a37b6edb60aacdfb5e8ed0/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "023690c0f24a06853bb860db032a1ff67978ee74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/023690c0f24a06853bb860db032a1ff67978ee74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/023690c0f24a06853bb860db032a1ff67978ee74"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "37367865c19fa06d8ee4c37eb516219a4d2cf008",
        "filename": "qa/rpc-tests/send.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/005b5af6e2d32cc2a4a37b6edb60aacdfb5e8ed0/qa/rpc-tests/send.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/005b5af6e2d32cc2a4a37b6edb60aacdfb5e8ed0/qa/rpc-tests/send.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/send.sh?ref=005b5af6e2d32cc2a4a37b6edb60aacdfb5e8ed0",
        "patch": "@@ -16,7 +16,7 @@ fi\n \n if [ $1 = \"-STOP\" ]; then\n   if [ -s ${PIDFILE} ]; then\n-      kill -s ${SIGNAL} $(<${PIDFILE})\n+      kill -s ${SIGNAL} $(<$PIDFILE 2>/dev/null) 2>/dev/null\n   fi\n   exit 0\n fi"
      }
    ]
  },
  {
    "sha": "f98bd4eae1bc6d57c27cc13d0495941f15eddf19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOThiZDRlYWUxYmM2ZDU3YzI3Y2MxM2QwNDk1OTQxZjE1ZWRkZjE5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-11T08:48:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-11T08:48:35Z"
      },
      "message": "Merge pull request #5073\n\nd5fd094 build: fix qt test build when libprotobuf is in a non-standard path (Cory Fields)\na7d1f03 build: fix dynamic boost check when --with-boost= is used (Cory Fields)",
      "tree": {
        "sha": "e007e74473c21106e4cae8564e7f2f9982cd1b3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e007e74473c21106e4cae8564e7f2f9982cd1b3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f98bd4eae1bc6d57c27cc13d0495941f15eddf19",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUOO7jAAoJEHSBCwEjRsmmKbsIAISO0IceEHwzXabufz5oCOr3\n9V32Fbs/v1mZTO/yDJYygOqUhpkCSJ28GzQco77MeOGZ4qFFX+36Uog9zUZTC1gQ\n2bKtG3dj6gPFBze42Xlj56HUkxSYv7rlZ0JNpxDXzcGUn/sgMnGIYPUK6aoHLVs3\n/a3inYgHZIsmVyXzxPBz73wu8sF1ZpatHtGC+Q4WX8661rXd8LcNxmpLwuw0h7qB\ncBgs9MVRxqwIxTy6UoDuE8nGEv3Y4DyqS6JAxXZ2dKFyZbnueL/FWNMjUGSfeaL7\nuDAbWv6b9ebzAC81Had0HqhOTIpadha3gQacg1JUqXiuZhXmPqQOWuAcvMEcoHA=\n=375c\n-----END PGP SIGNATURE-----",
        "payload": "tree e007e74473c21106e4cae8564e7f2f9982cd1b3f\nparent 023690c0f24a06853bb860db032a1ff67978ee74\nparent d5fd094569e74595af18d42d2aa06738304b715b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1413017300 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1413017315 +0200\n\nMerge pull request #5073\n\nd5fd094 build: fix qt test build when libprotobuf is in a non-standard path (Cory Fields)\na7d1f03 build: fix dynamic boost check when --with-boost= is used (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f98bd4eae1bc6d57c27cc13d0495941f15eddf19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f98bd4eae1bc6d57c27cc13d0495941f15eddf19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f98bd4eae1bc6d57c27cc13d0495941f15eddf19/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "023690c0f24a06853bb860db032a1ff67978ee74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/023690c0f24a06853bb860db032a1ff67978ee74",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/023690c0f24a06853bb860db032a1ff67978ee74"
      },
      {
        "sha": "d5fd094569e74595af18d42d2aa06738304b715b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5fd094569e74595af18d42d2aa06738304b715b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5fd094569e74595af18d42d2aa06738304b715b"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "90aa11242166b9dcb2c2faae29db2c940cb22f81",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f98bd4eae1bc6d57c27cc13d0495941f15eddf19/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f98bd4eae1bc6d57c27cc13d0495941f15eddf19/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f98bd4eae1bc6d57c27cc13d0495941f15eddf19",
        "patch": "@@ -521,7 +521,7 @@ if test x$use_tests = xyes; then\n   dnl Determine if -DBOOST_TEST_DYN_LINK is needed\n   AC_MSG_CHECKING([for dynamic linked boost test])\n   TEMP_LIBS=\"$LIBS\"\n-  LIBS=\"$LIBS $BOOST_UNIT_TEST_FRAMEWORK_LIB\"\n+  LIBS=\"$LIBS $BOOST_LDFLAGS $BOOST_UNIT_TEST_FRAMEWORK_LIB\"\n   TEMP_CPPFLAGS=\"$CPPFLAGS\"\n   CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n   AC_LINK_IFELSE([AC_LANG_SOURCE(["
      },
      {
        "sha": "23375bef82c5edfdf9617a92388028f916940476",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f98bd4eae1bc6d57c27cc13d0495941f15eddf19/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f98bd4eae1bc6d57c27cc13d0495941f15eddf19/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=f98bd4eae1bc6d57c27cc13d0495941f15eddf19",
        "patch": "@@ -13,7 +13,7 @@ TEST_QT_H = \\\n   qt/test/paymentservertests.h\n \n qt_test_test_bitcoin_qt_CPPFLAGS = $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n-  $(QT_INCLUDES) $(QT_TEST_INCLUDES)\n+  $(QT_INCLUDES) $(QT_TEST_INCLUDES) $(PROTOBUF_CFLAGS)\n \n qt_test_test_bitcoin_qt_SOURCES = \\\n   qt/test/test_main.cpp \\"
      }
    ]
  },
  {
    "sha": "d7e195048342afae9168377cebfc22ab000728a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkN2UxOTUwNDgzNDJhZmFlOTE2ODM3N2NlYmZjMjJhYjAwMDcyOGE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-13T11:56:54Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-13T11:57:07Z"
      },
      "message": "Merge pull request #4937\n\nccca27a [Wallet] Watch-only fixes (Cozz Lovan)",
      "tree": {
        "sha": "ee5b07604ef073ef35d8aa13598fb7d6a4877bc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee5b07604ef073ef35d8aa13598fb7d6a4877bc4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7e195048342afae9168377cebfc22ab000728a5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUO74TAAoJEHSBCwEjRsmm+CwIAIyFaC3jtcfc+5EOHv/5K+W5\nC21QjN1R7zJlcYMypYQdML5wC5kk4CoqPE2es1pFYhhhF8I4rFe77E4qDyxLuzHa\nsN/tJy+yQhRmmUvzQ3/ZD0Le7vJBDEAUczwzha2dYe+qtjHOYUJdrOoxpdaIOoST\nP9ExYjYvfaPUeDNydIru4zT1Mfpf7IGE6inzvp1qd/79nc/VftQjrmMzynIo9Bsb\ne3yrT6pWL4zJRb/4YrlBixXizpS4kZ4jEfFAL0xt6YeVIRBxOtDzi1pxXVikG9fW\n7qGo8BjV75ianBpu2hDO1OgS5BP09qHngiAFXTib9kP/mkuNC+p5DuiPAzHaNII=\n=BMdX\n-----END PGP SIGNATURE-----",
        "payload": "tree ee5b07604ef073ef35d8aa13598fb7d6a4877bc4\nparent f98bd4eae1bc6d57c27cc13d0495941f15eddf19\nparent ccca27a788fe1ae13661308243c20a1d7a3d0074\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1413201414 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1413201427 +0200\n\nMerge pull request #4937\n\nccca27a [Wallet] Watch-only fixes (Cozz Lovan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7e195048342afae9168377cebfc22ab000728a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7e195048342afae9168377cebfc22ab000728a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7e195048342afae9168377cebfc22ab000728a5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f98bd4eae1bc6d57c27cc13d0495941f15eddf19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f98bd4eae1bc6d57c27cc13d0495941f15eddf19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f98bd4eae1bc6d57c27cc13d0495941f15eddf19"
      },
      {
        "sha": "ccca27a788fe1ae13661308243c20a1d7a3d0074",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccca27a788fe1ae13661308243c20a1d7a3d0074",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccca27a788fe1ae13661308243c20a1d7a3d0074"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 70,
      "deletions": 13
    },
    "files": [
      {
        "sha": "755defa26de9be41bc1d87eda19e4b0652785214",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7e195048342afae9168377cebfc22ab000728a5/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7e195048342afae9168377cebfc22ab000728a5/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=d7e195048342afae9168377cebfc22ab000728a5",
        "patch": "@@ -67,6 +67,13 @@ bool CBasicKeyStore::AddWatchOnly(const CScript &dest)\n     return true;\n }\n \n+bool CBasicKeyStore::RemoveWatchOnly(const CScript &dest)\n+{\n+    LOCK(cs_KeyStore);\n+    setWatchOnly.erase(dest);\n+    return true;\n+}\n+\n bool CBasicKeyStore::HaveWatchOnly(const CScript &dest) const\n {\n     LOCK(cs_KeyStore);"
      },
      {
        "sha": "d3478f7672aed777c91d82248600bdc23ece1e55",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7e195048342afae9168377cebfc22ab000728a5/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7e195048342afae9168377cebfc22ab000728a5/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=d7e195048342afae9168377cebfc22ab000728a5",
        "patch": "@@ -40,6 +40,7 @@ class CKeyStore\n \n     // Support for Watch-only addresses\n     virtual bool AddWatchOnly(const CScript &dest) =0;\n+    virtual bool RemoveWatchOnly(const CScript &dest) =0;\n     virtual bool HaveWatchOnly(const CScript &dest) const =0;\n     virtual bool HaveWatchOnly() const =0;\n };\n@@ -98,6 +99,7 @@ class CBasicKeyStore : public CKeyStore\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const;\n \n     virtual bool AddWatchOnly(const CScript &dest);\n+    virtual bool RemoveWatchOnly(const CScript &dest);\n     virtual bool HaveWatchOnly(const CScript &dest) const;\n     virtual bool HaveWatchOnly() const;\n };"
      },
      {
        "sha": "5278c8673a2ced46a4edbd37c85fdb95bad99cf4",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7e195048342afae9168377cebfc22ab000728a5/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7e195048342afae9168377cebfc22ab000728a5/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=d7e195048342afae9168377cebfc22ab000728a5",
        "patch": "@@ -32,7 +32,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n {\n     QList<TransactionRecord> parts;\n     int64_t nTime = wtx.GetTxTime();\n-    CAmount nCredit = wtx.GetCredit(true);\n+    CAmount nCredit = wtx.GetCredit(ISMINE_ALL);\n     CAmount nDebit = wtx.GetDebit(ISMINE_ALL);\n     CAmount nNet = nCredit - nDebit;\n     uint256 hash = wtx.GetHash();"
      },
      {
        "sha": "b4733d369ea3b09a6cd373c49b3c2c6473182ad9",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7e195048342afae9168377cebfc22ab000728a5/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7e195048342afae9168377cebfc22ab000728a5/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=d7e195048342afae9168377cebfc22ab000728a5",
        "patch": "@@ -605,7 +605,8 @@ void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins)\n         int nDepth = wallet->mapWallet[outpoint.hash].GetDepthInMainChain();\n         if (nDepth < 0) continue;\n         COutput out(&wallet->mapWallet[outpoint.hash], outpoint.n, nDepth, true);\n-        vCoins.push_back(out);\n+        if (outpoint.n < out.tx->vout.size() && wallet->IsMine(out.tx->vout[outpoint.n]) == ISMINE_SPENDABLE)\n+            vCoins.push_back(out);\n     }\n \n     BOOST_FOREACH(const COutput& out, vCoins)"
      },
      {
        "sha": "9da0a7d091b3f0b29cd4453c00723892a518ea67",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7e195048342afae9168377cebfc22ab000728a5/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7e195048342afae9168377cebfc22ab000728a5/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=d7e195048342afae9168377cebfc22ab000728a5",
        "patch": "@@ -114,8 +114,6 @@ Value importprivkey(const Array& params, bool fHelp)\n     CPubKey pubkey = key.GetPubKey();\n     CKeyID vchAddress = pubkey.GetID();\n     {\n-        LOCK2(cs_main, pwalletMain->cs_wallet);\n-\n         pwalletMain->MarkDirty();\n         pwalletMain->SetAddressBook(vchAddress, strLabel, \"receive\");\n \n@@ -181,7 +179,8 @@ Value importaddress(const Array& params, bool fHelp)\n         fRescan = params[2].get_bool();\n \n     {\n-        LOCK2(cs_main, pwalletMain->cs_wallet);\n+        if (::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n \n         // add to address book or update label\n         if (address.IsValid())"
      },
      {
        "sha": "d11455e389aa5ccfc2d84c4ef403b585aa4ef51d",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7e195048342afae9168377cebfc22ab000728a5/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7e195048342afae9168377cebfc22ab000728a5/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=d7e195048342afae9168377cebfc22ab000728a5",
        "patch": "@@ -1539,7 +1539,7 @@ Value gettransaction(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n-    CAmount nCredit = wtx.GetCredit(filter != 0);\n+    CAmount nCredit = wtx.GetCredit(filter);\n     CAmount nDebit = wtx.GetDebit(filter);\n     CAmount nNet = nCredit - nDebit;\n     CAmount nFee = (wtx.IsFromMe(filter) ? wtx.GetValueOut() - nDebit : 0);"
      },
      {
        "sha": "19e43f6ec2b48323a0ca37a00bc09426e92c0df6",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7e195048342afae9168377cebfc22ab000728a5/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7e195048342afae9168377cebfc22ab000728a5/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=d7e195048342afae9168377cebfc22ab000728a5",
        "patch": "@@ -89,6 +89,13 @@ bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n     AssertLockHeld(cs_wallet); // mapKeyMetadata\n     if (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey))\n         return false;\n+\n+    // check if we need to remove from watch-only\n+    CScript script;\n+    script = GetScriptForDestination(pubkey.GetID());\n+    if (HaveWatchOnly(script))\n+        RemoveWatchOnly(script);\n+\n     if (!fFileBacked)\n         return true;\n     if (!IsCrypted()) {\n@@ -171,6 +178,20 @@ bool CWallet::AddWatchOnly(const CScript &dest)\n     return CWalletDB(strWalletFile).WriteWatchOnly(dest);\n }\n \n+bool CWallet::RemoveWatchOnly(const CScript &dest)\n+{\n+    AssertLockHeld(cs_wallet);\n+    if (!CCryptoKeyStore::RemoveWatchOnly(dest))\n+        return false;\n+    if (!HaveWatchOnly())\n+        NotifyWatchonlyChanged(false);\n+    if (fFileBacked)\n+        if (!CWalletDB(strWalletFile).EraseWatchOnly(dest))\n+            return false;\n+\n+    return true;\n+}\n+\n bool CWallet::LoadWatchOnly(const CScript &dest)\n {\n     return CCryptoKeyStore::AddWatchOnly(dest);"
      },
      {
        "sha": "fa8a94dfc1194673139495d1795c6bbdcfbf4811",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 27,
        "deletions": 7,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7e195048342afae9168377cebfc22ab000728a5/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7e195048342afae9168377cebfc22ab000728a5/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=d7e195048342afae9168377cebfc22ab000728a5",
        "patch": "@@ -230,6 +230,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     // Adds a watch-only address to the store, and saves it to disk.\n     bool AddWatchOnly(const CScript &dest);\n+    bool RemoveWatchOnly(const CScript &dest);\n     // Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n \n@@ -709,18 +710,37 @@ class CWalletTx : public CMerkleTx\n         return debit;\n     }\n \n-    CAmount GetCredit(bool fUseCache=true) const\n+    CAmount GetCredit(const isminefilter& filter) const\n     {\n         // Must wait until coinbase is safely deep enough in the chain before valuing it\n         if (IsCoinBase() && GetBlocksToMaturity() > 0)\n             return 0;\n \n-        // GetBalance can assume transactions in mapWallet won't change\n-        if (fUseCache && fCreditCached)\n-            return nCreditCached;\n-        nCreditCached = pwallet->GetCredit(*this, ISMINE_ALL);\n-        fCreditCached = true;\n-        return nCreditCached;\n+        int64_t credit = 0;\n+        if (filter & ISMINE_SPENDABLE)\n+        {\n+            // GetBalance can assume transactions in mapWallet won't change\n+            if (fCreditCached)\n+                credit += nCreditCached;\n+            else\n+            {\n+                nCreditCached = pwallet->GetCredit(*this, ISMINE_SPENDABLE);\n+                fCreditCached = true;\n+                credit += nCreditCached;\n+            }\n+        }\n+        if (filter & ISMINE_WATCH_ONLY)\n+        {\n+            if (fWatchCreditCached)\n+                credit += nWatchCreditCached;\n+            else\n+            {\n+                nWatchCreditCached = pwallet->GetCredit(*this, ISMINE_WATCH_ONLY);\n+                fWatchCreditCached = true;\n+                credit += nWatchCreditCached;\n+            }\n+        }\n+        return credit;\n     }\n \n     CAmount GetImmatureCredit(bool fUseCache=true) const"
      },
      {
        "sha": "783f766f6fe92ed5c66f9ac01a73538270503222",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7e195048342afae9168377cebfc22ab000728a5/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7e195048342afae9168377cebfc22ab000728a5/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=d7e195048342afae9168377cebfc22ab000728a5",
        "patch": "@@ -121,6 +121,12 @@ bool CWalletDB::WriteWatchOnly(const CScript &dest)\n     return Write(std::make_pair(std::string(\"watchs\"), dest), '1');\n }\n \n+bool CWalletDB::EraseWatchOnly(const CScript &dest)\n+{\n+    nWalletDBUpdated++;\n+    return Erase(std::make_pair(std::string(\"watchs\"), dest));\n+}\n+\n bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n {\n     nWalletDBUpdated++;"
      },
      {
        "sha": "7ff41c7c8d4736626c3dec4c7992bf4a337e1e7a",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7e195048342afae9168377cebfc22ab000728a5/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7e195048342afae9168377cebfc22ab000728a5/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=d7e195048342afae9168377cebfc22ab000728a5",
        "patch": "@@ -96,6 +96,7 @@ class CWalletDB : public CDB\n     bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n     bool WriteWatchOnly(const CScript &script);\n+    bool EraseWatchOnly(const CScript &script);\n \n     bool WriteBestBlock(const CBlockLocator& locator);\n     bool ReadBestBlock(CBlockLocator& locator);"
      }
    ]
  },
  {
    "sha": "e21b2e0d5f621de5d8d5a9daae910ec512e29aa2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjFiMmUwZDVmNjIxZGU1ZDhkNWE5ZGFhZTkxMGVjNTEyZTI5YWEy",
    "commit": {
      "author": {
        "name": "Luke",
        "email": "lukem512@users.noreply.github.com",
        "date": "2014-10-13T15:57:09Z"
      },
      "committer": {
        "name": "Luke",
        "email": "lukem512@users.noreply.github.com",
        "date": "2014-10-13T15:57:09Z"
      },
      "message": "Typo in test",
      "tree": {
        "sha": "76cf8654c1609b820f630a9fc29e6bbbfbc3aa38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76cf8654c1609b820f630a9fc29e6bbbfbc3aa38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e21b2e0d5f621de5d8d5a9daae910ec512e29aa2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e21b2e0d5f621de5d8d5a9daae910ec512e29aa2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e21b2e0d5f621de5d8d5a9daae910ec512e29aa2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e21b2e0d5f621de5d8d5a9daae910ec512e29aa2/comments",
    "author": {
      "login": "lukem512",
      "id": 2834976,
      "node_id": "MDQ6VXNlcjI4MzQ5NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2834976?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukem512",
      "html_url": "https://github.com/lukem512",
      "followers_url": "https://api.github.com/users/lukem512/followers",
      "following_url": "https://api.github.com/users/lukem512/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukem512/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukem512/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukem512/subscriptions",
      "organizations_url": "https://api.github.com/users/lukem512/orgs",
      "repos_url": "https://api.github.com/users/lukem512/repos",
      "events_url": "https://api.github.com/users/lukem512/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukem512/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lukem512",
      "id": 2834976,
      "node_id": "MDQ6VXNlcjI4MzQ5NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2834976?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lukem512",
      "html_url": "https://github.com/lukem512",
      "followers_url": "https://api.github.com/users/lukem512/followers",
      "following_url": "https://api.github.com/users/lukem512/following{/other_user}",
      "gists_url": "https://api.github.com/users/lukem512/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lukem512/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lukem512/subscriptions",
      "organizations_url": "https://api.github.com/users/lukem512/orgs",
      "repos_url": "https://api.github.com/users/lukem512/repos",
      "events_url": "https://api.github.com/users/lukem512/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lukem512/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7e195048342afae9168377cebfc22ab000728a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7e195048342afae9168377cebfc22ab000728a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7e195048342afae9168377cebfc22ab000728a5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b32f3774fe3e94359c80a8613992f4fe32d28303",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e21b2e0d5f621de5d8d5a9daae910ec512e29aa2/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e21b2e0d5f621de5d8d5a9daae910ec512e29aa2/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=e21b2e0d5f621de5d8d5a9daae910ec512e29aa2",
        "patch": "@@ -75,7 +75,7 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     CKey key1C = bsecret1C.GetKey();\n     BOOST_CHECK(key1C.IsCompressed() == true);\n     CKey key2C = bsecret2C.GetKey();\n-    BOOST_CHECK(key1C.IsCompressed() == true);\n+    BOOST_CHECK(key2C.IsCompressed() == true);\n \n     CPubKey pubkey1  = key1. GetPubKey();\n     CPubKey pubkey2  = key2. GetPubKey();"
      }
    ]
  },
  {
    "sha": "1f27c310a4bcca758f708358601fa25976d56d90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZjI3YzMxMGE0YmNjYTc1OGY3MDgzNTg2MDFmYTI1OTc2ZDU2ZDkw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-13T19:07:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-13T19:11:50Z"
      },
      "message": "Merge pull request #5080\n\ne21b2e0 Typo in test (Luke)",
      "tree": {
        "sha": "76cf8654c1609b820f630a9fc29e6bbbfbc3aa38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76cf8654c1609b820f630a9fc29e6bbbfbc3aa38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1f27c310a4bcca758f708358601fa25976d56d90",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUPCP2AAoJEFeJbS/48LZXI9sL/iEdYts2aAZcU+17mXOzUMhM\nbIEPFPj3MZivisuYJAjWL27ZDOXuTn3Lqnkk7PORaNeHRstrCbIIp9cHi1nIKQhD\ncEb51/qzDTRZLKMOanOUxnXpXqbSQ1Z/24HGDNhUXTdeJ+cUvJfAxYyii4oZSsLR\nbQpTeu1/ky+20iAWCIh/8de3la+myC/FdyrboiQnPk0gNYy+vqXQYGOC4IIS7zy6\neeVqrVc4aZsh5rjnGvTnTY0jS3xehIvGGWtluQCGx6M37gb/bR9jNNSnm41EDxzr\nGj4TcOCoL7GSmOjNLCiVNo0l1yJdZETMA70LenR0TOLbCJaIvU91CnR7saPOT6fD\nB+gck0S/yPacZHoomhC2S4gCajLh0AkjJDk5cUAmATNJ9vhtm3tYYKGn7uf6olxF\nPePkq1b7Bl7KBYnKucgZrkgnhz5+O8dilZYlVxiN8MF/xx8x7gh0C0hn2BwwUHd6\n7c+XwosalrJV0RT5gXzMHvJ1ZfMHTITmMZJ+Xqjd7Q==\n=DF7x\n-----END PGP SIGNATURE-----",
        "payload": "tree 76cf8654c1609b820f630a9fc29e6bbbfbc3aa38\nparent d7e195048342afae9168377cebfc22ab000728a5\nparent e21b2e0d5f621de5d8d5a9daae910ec512e29aa2\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1413227255 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1413227510 -0700\n\nMerge pull request #5080\n\ne21b2e0 Typo in test (Luke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f27c310a4bcca758f708358601fa25976d56d90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1f27c310a4bcca758f708358601fa25976d56d90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f27c310a4bcca758f708358601fa25976d56d90/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7e195048342afae9168377cebfc22ab000728a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7e195048342afae9168377cebfc22ab000728a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7e195048342afae9168377cebfc22ab000728a5"
      },
      {
        "sha": "e21b2e0d5f621de5d8d5a9daae910ec512e29aa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e21b2e0d5f621de5d8d5a9daae910ec512e29aa2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e21b2e0d5f621de5d8d5a9daae910ec512e29aa2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b32f3774fe3e94359c80a8613992f4fe32d28303",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1f27c310a4bcca758f708358601fa25976d56d90/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1f27c310a4bcca758f708358601fa25976d56d90/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=1f27c310a4bcca758f708358601fa25976d56d90",
        "patch": "@@ -75,7 +75,7 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     CKey key1C = bsecret1C.GetKey();\n     BOOST_CHECK(key1C.IsCompressed() == true);\n     CKey key2C = bsecret2C.GetKey();\n-    BOOST_CHECK(key1C.IsCompressed() == true);\n+    BOOST_CHECK(key2C.IsCompressed() == true);\n \n     CPubKey pubkey1  = key1. GetPubKey();\n     CPubKey pubkey2  = key2. GetPubKey();"
      }
    ]
  },
  {
    "sha": "2e4f6127bf6e9f01ea5eb0f711b275270c489e9d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTRmNjEyN2JmNmU5ZjAxZWE1ZWIwZjcxMWIyNzUyNzBjNDg5ZTlk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-14T08:46:58Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-14T08:50:22Z"
      },
      "message": "Merge pull request #5074\n\n005b5af rpc-tests: don't spew non-errors to stdout (Cory Fields)",
      "tree": {
        "sha": "1034e5dee9a8ba8fb20f6e6e3fcf9f8f8dd9f749",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1034e5dee9a8ba8fb20f6e6e3fcf9f8f8dd9f749"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e4f6127bf6e9f01ea5eb0f711b275270c489e9d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUPOPOAAoJEHSBCwEjRsmmsWIIAKiWaKb4/m2NeUGYA/Ywm3JS\nykSN7uhDtN7w+229KrblKmuGUrHGwKILndifgJBshxtgxwEJSsqVNxKWI8Zq/iHq\nkc/pHX6yqzujsd0OzedCNPFKSV2+8tm67achnMuQauHoG7TzUDfO6ilJwA0gZXhM\noqcBuwn0qCSWZMwDNRrkNEgkwJbRZacoOWs668cFTWx8DEHVpVGJjycg+Jchqk8C\nJkZJP9n2b+JH2GNht1oJoKd+DYYJZ6dXCfe0uWlZuXN8Wg17xxJJOmhiJqfiVueV\n+NrAp3sfpS+VnK4mYZgG/G7V12NjkCgFgY/dTX7Ss9mO6tvnk6NsLuZyCeLcE/g=\n=DTvv\n-----END PGP SIGNATURE-----",
        "payload": "tree 1034e5dee9a8ba8fb20f6e6e3fcf9f8f8dd9f749\nparent 1f27c310a4bcca758f708358601fa25976d56d90\nparent 005b5af6e2d32cc2a4a37b6edb60aacdfb5e8ed0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1413276418 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1413276622 +0200\n\nMerge pull request #5074\n\n005b5af rpc-tests: don't spew non-errors to stdout (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e4f6127bf6e9f01ea5eb0f711b275270c489e9d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e4f6127bf6e9f01ea5eb0f711b275270c489e9d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e4f6127bf6e9f01ea5eb0f711b275270c489e9d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1f27c310a4bcca758f708358601fa25976d56d90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1f27c310a4bcca758f708358601fa25976d56d90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1f27c310a4bcca758f708358601fa25976d56d90"
      },
      {
        "sha": "005b5af6e2d32cc2a4a37b6edb60aacdfb5e8ed0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/005b5af6e2d32cc2a4a37b6edb60aacdfb5e8ed0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/005b5af6e2d32cc2a4a37b6edb60aacdfb5e8ed0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "37367865c19fa06d8ee4c37eb516219a4d2cf008",
        "filename": "qa/rpc-tests/send.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e4f6127bf6e9f01ea5eb0f711b275270c489e9d/qa/rpc-tests/send.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e4f6127bf6e9f01ea5eb0f711b275270c489e9d/qa/rpc-tests/send.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/send.sh?ref=2e4f6127bf6e9f01ea5eb0f711b275270c489e9d",
        "patch": "@@ -16,7 +16,7 @@ fi\n \n if [ $1 = \"-STOP\" ]; then\n   if [ -s ${PIDFILE} ]; then\n-      kill -s ${SIGNAL} $(<${PIDFILE})\n+      kill -s ${SIGNAL} $(<$PIDFILE 2>/dev/null) 2>/dev/null\n   fi\n   exit 0\n fi"
      }
    ]
  },
  {
    "sha": "992ab87114b8c9ea8230e97a9c8d8bd71939074d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTJhYjg3MTE0YjhjOWVhODIzMGU5N2E5YzhkOGJkNzE5MzkwNzRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-14T09:32:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-14T09:35:17Z"
      },
      "message": "Merge pull request #4942\n\n9406471 Write fee estimate and peers files only when initialized (Wladimir J. van der Laan)",
      "tree": {
        "sha": "0ee6087b370083783b41aa6362034e631c797b20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ee6087b370083783b41aa6362034e631c797b20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/992ab87114b8c9ea8230e97a9c8d8bd71939074d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJUPO5VAAoJEHSBCwEjRsmmOEEIAMYoItphNGr6jOXl4ytbDcws\nkSmrnM311fQ7kxpYtMwHdX0qBdBcerIQoMNBejO586kpDOs16+cF9vYuH3QZsI/q\nTst6REiQYbYYgNxascp/pVTSHdWDG7u5FERl2ZxQSxKZAzbu5VlfXkjvvnIv7Ylb\nkkJZrP8t+HTqiGMKGv+SExygNrCPjSBDeaHjXZLyNBQoyoMHp43S/SnHYwNdz0J7\nZTupxfbTDXms5jRiUCFQSJQIeFsA9Vw7Eu9VeZXP12OYEmf8vrD2HrV2qtEgXPfF\n6cgnqBhAVP9sme1MWH2aPNJYYEyiacmxkBnlfGtCnrQLzHfWsqHMNzcUrTdAMeY=\n=iD4k\n-----END PGP SIGNATURE-----",
        "payload": "tree 0ee6087b370083783b41aa6362034e631c797b20\nparent 2e4f6127bf6e9f01ea5eb0f711b275270c489e9d\nparent 94064710b9123dfb3df8cfd6c32efae349aec281\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1413279132 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1413279317 +0200\n\nMerge pull request #4942\n\n9406471 Write fee estimate and peers files only when initialized (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992ab87114b8c9ea8230e97a9c8d8bd71939074d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/992ab87114b8c9ea8230e97a9c8d8bd71939074d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992ab87114b8c9ea8230e97a9c8d8bd71939074d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e4f6127bf6e9f01ea5eb0f711b275270c489e9d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e4f6127bf6e9f01ea5eb0f711b275270c489e9d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e4f6127bf6e9f01ea5eb0f711b275270c489e9d"
      },
      {
        "sha": "94064710b9123dfb3df8cfd6c32efae349aec281",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94064710b9123dfb3df8cfd6c32efae349aec281",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94064710b9123dfb3df8cfd6c32efae349aec281"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 29,
      "deletions": 18
    },
    "files": [
      {
        "sha": "8772be55395589e0cedc1f3bb5aaffc98928edd0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 17,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/992ab87114b8c9ea8230e97a9c8d8bd71939074d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/992ab87114b8c9ea8230e97a9c8d8bd71939074d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=992ab87114b8c9ea8230e97a9c8d8bd71939074d",
        "patch": "@@ -47,6 +47,7 @@ using namespace std;\n #ifdef ENABLE_WALLET\n CWallet* pwalletMain = NULL;\n #endif\n+bool fFeeEstimatesInitialized = false;\n \n #ifdef WIN32\n // Win32 LevelDB doesn't use filedescriptors, and the ones used for\n@@ -119,6 +120,10 @@ void Shutdown()\n     if (!lockShutdown)\n         return;\n \n+    /// Note: Shutdown() must be able to handle cases in which AppInit2() failed part of the way,\n+    /// for example if the data directory was found to be locked.\n+    /// Be sure that anything that writes files or flushes caches only does this if the respective\n+    /// module was initialized.\n     RenameThread(\"bitcoin-shutoff\");\n     mempool.AddTransactionsUpdated(1);\n     StopRPCThreads();\n@@ -130,13 +135,15 @@ void Shutdown()\n     StopNode();\n     UnregisterNodeSignals(GetNodeSignals());\n \n+    if (fFeeEstimatesInitialized)\n     {\n         boost::filesystem::path est_path = GetDataDir() / FEE_ESTIMATES_FILENAME;\n         CAutoFile est_fileout(fopen(est_path.string().c_str(), \"wb\"), SER_DISK, CLIENT_VERSION);\n         if (est_fileout)\n             mempool.WriteFeeEstimates(est_fileout);\n         else\n             LogPrintf(\"%s: Failed to write fee estimates to %s\\n\", __func__, est_path.string());\n+        fFeeEstimatesInitialized = false;\n     }\n \n     {\n@@ -1059,6 +1066,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     // Allowed to fail as this file IS missing on first startup.\n     if (est_filein)\n         mempool.ReadFeeEstimates(est_filein);\n+    fFeeEstimatesInitialized = true;\n \n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n@@ -1215,22 +1223,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     }\n     threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n \n-    // ********************************************************* Step 10: load peers\n-\n-    uiInterface.InitMessage(_(\"Loading addresses...\"));\n-\n-    nStart = GetTimeMillis();\n-\n-    {\n-        CAddrDB adb;\n-        if (!adb.Read(addrman))\n-            LogPrintf(\"Invalid or missing peers.dat; recreating\\n\");\n-    }\n-\n-    LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\",\n-           addrman.size(), GetTimeMillis() - nStart);\n-\n-    // ********************************************************* Step 11: start node\n+    // ********************************************************* Step 10: start node\n \n     if (!CheckDiskSpace())\n         return false;\n@@ -1259,7 +1252,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n         GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain, GetArg(\"-genproclimit\", -1));\n #endif\n \n-    // ********************************************************* Step 12: finished\n+    // ********************************************************* Step 11: finished\n \n     uiInterface.InitMessage(_(\"Done loading\"));\n "
      },
      {
        "sha": "dd5cb480cc1c38ccbdc6c61cc7b3e6f75cac2165",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/992ab87114b8c9ea8230e97a9c8d8bd71939074d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/992ab87114b8c9ea8230e97a9c8d8bd71939074d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=992ab87114b8c9ea8230e97a9c8d8bd71939074d",
        "patch": "@@ -78,6 +78,7 @@ uint64_t nLocalHostNonce = 0;\n static std::vector<ListenSocket> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = 125;\n+bool fAddressesInitialized = false;\n \n vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n@@ -1739,6 +1740,18 @@ void static Discover(boost::thread_group& threadGroup)\n \n void StartNode(boost::thread_group& threadGroup)\n {\n+    uiInterface.InitMessage(_(\"Loading addresses...\"));\n+    // Load addresses for peers.dat\n+    int64_t nStart = GetTimeMillis();\n+    {\n+        CAddrDB adb;\n+        if (!adb.Read(addrman))\n+            LogPrintf(\"Invalid or missing peers.dat; recreating\\n\");\n+    }\n+    LogPrintf(\"Loaded %i addresses from peers.dat  %dms\\n\",\n+           addrman.size(), GetTimeMillis() - nStart);\n+    fAddressesInitialized = true;\n+\n     if (semOutbound == NULL) {\n         // initialize semaphore\n         int nMaxOutbound = min(MAX_OUTBOUND_CONNECTIONS, nMaxConnections);\n@@ -1785,7 +1798,12 @@ bool StopNode()\n     if (semOutbound)\n         for (int i=0; i<MAX_OUTBOUND_CONNECTIONS; i++)\n             semOutbound->post();\n-    DumpAddresses();\n+\n+    if (fAddressesInitialized)\n+    {\n+        DumpAddresses();\n+        fAddressesInitialized = false;\n+    }\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "1d9b86d584542fbc34bf49726badaba2ca764228",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDliODZkNTg0NTQyZmJjMzRiZjQ5NzI2YmFkYWJhMmNhNzY0MjI4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-08T18:27:07Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-15T19:13:19Z"
      },
      "message": "boost: drop dependency on is_fundamental in serialization\n\nThere's only one case where a vector containing a fundamental type is\nserialized all-at-once, unsigned char. Anything else would lead to\nstrange results.\n\nUse a dummy argument to overload in that case.",
      "tree": {
        "sha": "c4707cfbfa2d6c5374b0edd665d74d897867a3af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4707cfbfa2d6c5374b0edd665d74d897867a3af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d9b86d584542fbc34bf49726badaba2ca764228",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9b86d584542fbc34bf49726badaba2ca764228",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d9b86d584542fbc34bf49726badaba2ca764228",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9b86d584542fbc34bf49726badaba2ca764228/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "992ab87114b8c9ea8230e97a9c8d8bd71939074d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992ab87114b8c9ea8230e97a9c8d8bd71939074d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/992ab87114b8c9ea8230e97a9c8d8bd71939074d"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 19,
      "deletions": 19
    },
    "files": [
      {
        "sha": "8220fecb9c6c17e013c9b758227cd846495bb018",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d9b86d584542fbc34bf49726badaba2ca764228/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d9b86d584542fbc34bf49726badaba2ca764228/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=1d9b86d584542fbc34bf49726badaba2ca764228",
        "patch": "@@ -21,7 +21,6 @@\n #include <vector>\n \n #include <boost/tuple/tuple.hpp>\n-#include <boost/type_traits/is_fundamental.hpp>\n \n class CAutoFile;\n class CDataStream;\n@@ -432,14 +431,15 @@ template<typename Stream, typename C> void Serialize(Stream& os, const std::basi\n template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_string<C>& str, int, int=0);\n \n // vector\n-template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n-template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n+// vectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n+template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n+template<typename T, typename A, typename V> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const V&);\n template<typename T, typename A> inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion);\n-template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n-template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n+template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n+template<typename Stream, typename T, typename A, typename V> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const V&);\n template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion);\n-template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n-template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n+template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n+template<typename Stream, typename T, typename A, typename V> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&);\n template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion);\n \n // others derived from vector\n@@ -536,13 +536,13 @@ void Unserialize(Stream& is, std::basic_string<C>& str, int, int)\n // vector\n //\n template<typename T, typename A>\n-unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)\n+unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n {\n     return (GetSizeOfCompactSize(v.size()) + v.size() * sizeof(T));\n }\n \n-template<typename T, typename A>\n-unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)\n+template<typename T, typename A, typename V>\n+unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const V&)\n {\n     unsigned int nSize = GetSizeOfCompactSize(v.size());\n     for (typename std::vector<T, A>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n@@ -553,20 +553,20 @@ unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nV\n template<typename T, typename A>\n inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion)\n {\n-    return GetSerializeSize_impl(v, nType, nVersion, boost::is_fundamental<T>());\n+    return GetSerializeSize_impl(v, nType, nVersion, T());\n }\n \n \n template<typename Stream, typename T, typename A>\n-void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)\n+void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n {\n     WriteCompactSize(os, v.size());\n     if (!v.empty())\n         os.write((char*)&v[0], v.size() * sizeof(T));\n }\n \n-template<typename Stream, typename T, typename A>\n-void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)\n+template<typename Stream, typename T, typename A, typename V>\n+void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const V&)\n {\n     WriteCompactSize(os, v.size());\n     for (typename std::vector<T, A>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n@@ -576,12 +576,12 @@ void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVers\n template<typename Stream, typename T, typename A>\n inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion)\n {\n-    Serialize_impl(os, v, nType, nVersion, boost::is_fundamental<T>());\n+    Serialize_impl(os, v, nType, nVersion, T());\n }\n \n \n template<typename Stream, typename T, typename A>\n-void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)\n+void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n {\n     // Limit size per read so bogus size value won't cause out of memory\n     v.clear();\n@@ -596,8 +596,8 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion,\n     }\n }\n \n-template<typename Stream, typename T, typename A>\n-void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)\n+template<typename Stream, typename T, typename A, typename V>\n+void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&)\n {\n     v.clear();\n     unsigned int nSize = ReadCompactSize(is);\n@@ -617,7 +617,7 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion,\n template<typename Stream, typename T, typename A>\n inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion)\n {\n-    Unserialize_impl(is, v, nType, nVersion, boost::is_fundamental<T>());\n+    Unserialize_impl(is, v, nType, nVersion, T());\n }\n \n "
      }
    ]
  },
  {
    "sha": "52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Mjk1NTA2OGI3MGZkZDQxNjZmZmU0NDNlNzE2YjBiMmY2ZmU5ZjZk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-08T18:28:03Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-15T19:13:19Z"
      },
      "message": "boost: drop dependency on tuple in serialization\n\nThere's only one user of this form of serialization, so it can be easily\ndropped. It could be re-added if desired when we switch to c++11.",
      "tree": {
        "sha": "83451c056f24669164f1e212531e567928d1e599",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83451c056f24669164f1e212531e567928d1e599"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52955068b70fdd4166ffe443e716b0b2f6fe9f6d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d9b86d584542fbc34bf49726badaba2ca764228",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d9b86d584542fbc34bf49726badaba2ca764228",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d9b86d584542fbc34bf49726badaba2ca764228"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 4,
      "deletions": 81
    },
    "files": [
      {
        "sha": "55b6891394ba633258fed565c2fcdb3bd97d2f17",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 0,
        "deletions": 77,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52955068b70fdd4166ffe443e716b0b2f6fe9f6d/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52955068b70fdd4166ffe443e716b0b2f6fe9f6d/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
        "patch": "@@ -20,8 +20,6 @@\n #include <utility>\n #include <vector>\n \n-#include <boost/tuple/tuple.hpp>\n-\n class CAutoFile;\n class CDataStream;\n class CScript;\n@@ -452,16 +450,6 @@ template<typename K, typename T> unsigned int GetSerializeSize(const std::pair<K\n template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion);\n template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion);\n \n-// 3 tuple\n-template<typename T0, typename T1, typename T2> unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion);\n-template<typename Stream, typename T0, typename T1, typename T2> void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion);\n-template<typename Stream, typename T0, typename T1, typename T2> void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion);\n-\n-// 4 tuple\n-template<typename T0, typename T1, typename T2, typename T3> unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion);\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3> void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion);\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3> void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion);\n-\n // map\n template<typename K, typename T, typename Pred, typename A> unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n template<typename Stream, typename K, typename T, typename Pred, typename A> void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n@@ -669,71 +657,6 @@ void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion)\n \n \n \n-//\n-// 3 tuple\n-//\n-template<typename T0, typename T1, typename T2>\n-unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)\n-{\n-    unsigned int nSize = 0;\n-    nSize += GetSerializeSize(boost::get<0>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<1>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<2>(item), nType, nVersion);\n-    return nSize;\n-}\n-\n-template<typename Stream, typename T0, typename T1, typename T2>\n-void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)\n-{\n-    Serialize(os, boost::get<0>(item), nType, nVersion);\n-    Serialize(os, boost::get<1>(item), nType, nVersion);\n-    Serialize(os, boost::get<2>(item), nType, nVersion);\n-}\n-\n-template<typename Stream, typename T0, typename T1, typename T2>\n-void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion)\n-{\n-    Unserialize(is, boost::get<0>(item), nType, nVersion);\n-    Unserialize(is, boost::get<1>(item), nType, nVersion);\n-    Unserialize(is, boost::get<2>(item), nType, nVersion);\n-}\n-\n-\n-\n-//\n-// 4 tuple\n-//\n-template<typename T0, typename T1, typename T2, typename T3>\n-unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)\n-{\n-    unsigned int nSize = 0;\n-    nSize += GetSerializeSize(boost::get<0>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<1>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<2>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<3>(item), nType, nVersion);\n-    return nSize;\n-}\n-\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3>\n-void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)\n-{\n-    Serialize(os, boost::get<0>(item), nType, nVersion);\n-    Serialize(os, boost::get<1>(item), nType, nVersion);\n-    Serialize(os, boost::get<2>(item), nType, nVersion);\n-    Serialize(os, boost::get<3>(item), nType, nVersion);\n-}\n-\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3>\n-void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)\n-{\n-    Unserialize(is, boost::get<0>(item), nType, nVersion);\n-    Unserialize(is, boost::get<1>(item), nType, nVersion);\n-    Unserialize(is, boost::get<2>(item), nType, nVersion);\n-    Unserialize(is, boost::get<3>(item), nType, nVersion);\n-}\n-\n-\n-\n //\n // map\n //"
      },
      {
        "sha": "ffddd8106b31f5ffa685390be222aeac6c228220",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/52955068b70fdd4166ffe443e716b0b2f6fe9f6d/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/52955068b70fdd4166ffe443e716b0b2f6fe9f6d/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
        "patch": "@@ -185,7 +185,7 @@ bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)\n \n bool CWalletDB::WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry)\n {\n-    return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, nAccEntryNum), acentry);\n+    return Write(std::make_pair(std::string(\"acentry\"), std::make_pair(acentry.strAccount, nAccEntryNum)), acentry);\n }\n \n bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n@@ -218,7 +218,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n         // Read next record\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         if (fFlags == DB_SET_RANGE)\n-            ssKey << boost::make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64_t(0));\n+            ssKey << std::make_pair(std::string(\"acentry\"), std::make_pair((fAllAccounts ? string(\"\") : strAccount), uint64_t(0)));\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n         fFlags = DB_NEXT;\n@@ -977,11 +977,11 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename)\n bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n {\n     nWalletDBUpdated++;\n-    return Write(boost::make_tuple(std::string(\"destdata\"), address, key), value);\n+    return Write(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)), value);\n }\n \n bool CWalletDB::EraseDestData(const std::string &address, const std::string &key)\n {\n     nWalletDBUpdated++;\n-    return Erase(boost::make_tuple(string(\"destdata\"), address, key));\n+    return Erase(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n }"
      }
    ]
  },
  {
    "sha": "e405aa48c7221017467f50daf29ff6794c76332d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDA1YWE0OGM3MjIxMDE3NDY3ZjUwZGFmMjlmZjY3OTRjNzYzMzJk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-09T20:38:38Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-15T19:13:20Z"
      },
      "message": "boost: remove CPrivKey dependency from CECKey\n\nThis allows CECKey to be used without directly depending on the secure\nallocators",
      "tree": {
        "sha": "dbb546b84ac7a1988debd2e413977411dd6dd350",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbb546b84ac7a1988debd2e413977411dd6dd350"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e405aa48c7221017467f50daf29ff6794c76332d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e405aa48c7221017467f50daf29ff6794c76332d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e405aa48c7221017467f50daf29ff6794c76332d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e405aa48c7221017467f50daf29ff6794c76332d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52955068b70fdd4166ffe443e716b0b2f6fe9f6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52955068b70fdd4166ffe443e716b0b2f6fe9f6d"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "079e2c65405a4b8b16e1c7874e3758008be54dd5",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 15,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e405aa48c7221017467f50daf29ff6794c76332d/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e405aa48c7221017467f50daf29ff6794c76332d/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=e405aa48c7221017467f50daf29ff6794c76332d",
        "patch": "@@ -179,19 +179,17 @@ class CECKey {\n         BN_clear_free(&bn);\n     }\n \n-    void GetPrivKey(CPrivKey &privkey, bool fCompressed) {\n+    int GetPrivKeySize(bool fCompressed) {\n         EC_KEY_set_conv_form(pkey, fCompressed ? POINT_CONVERSION_COMPRESSED : POINT_CONVERSION_UNCOMPRESSED);\n-        int nSize = i2d_ECPrivateKey(pkey, NULL);\n-        assert(nSize);\n-        privkey.resize(nSize);\n-        unsigned char* pbegin = &privkey[0];\n-        int nSize2 = i2d_ECPrivateKey(pkey, &pbegin);\n-        assert(nSize == nSize2);\n+        return i2d_ECPrivateKey(pkey, NULL);\n+    }\n+    int GetPrivKey(unsigned char* privkey, bool fCompressed) {\n+        EC_KEY_set_conv_form(pkey, fCompressed ? POINT_CONVERSION_COMPRESSED : POINT_CONVERSION_UNCOMPRESSED);\n+        return i2d_ECPrivateKey(pkey, &privkey);\n     }\n \n-    bool SetPrivKey(const CPrivKey &privkey, bool fSkipCheck=false) {\n-        const unsigned char* pbegin = &privkey[0];\n-        if (d2i_ECPrivateKey(&pkey, &pbegin, privkey.size())) {\n+    bool SetPrivKey(const unsigned char* privkey, size_t size, bool fSkipCheck=false) {\n+        if (d2i_ECPrivateKey(&pkey, &privkey, size)) {\n             if(fSkipCheck)\n                 return true;\n \n@@ -424,7 +422,7 @@ bool CKey::SetPrivKey(const CPrivKey &privkey, bool fCompressedIn) {\n         return false;\n #else\n     CECKey key;\n-    if (!key.SetPrivKey(privkey))\n+    if (!key.SetPrivKey(&privkey[0], privkey.size()))\n         return false;\n     key.GetSecretBytes(vch);\n #endif\n@@ -436,16 +434,21 @@ bool CKey::SetPrivKey(const CPrivKey &privkey, bool fCompressedIn) {\n CPrivKey CKey::GetPrivKey() const {\n     assert(fValid);\n     CPrivKey privkey;\n+    int privkeylen, ret;\n #ifdef USE_SECP256K1\n     privkey.resize(279);\n-    int privkeylen = 279;\n-    int ret = secp256k1_ecdsa_privkey_export(begin(), (unsigned char*)&privkey[0], &privkeylen, fCompressed);\n+    privkeylen = 279;\n+    ret = secp256k1_ecdsa_privkey_export(begin(), (unsigned char*)&privkey[0], &privkeylen, fCompressed);\n     assert(ret);\n     privkey.resize(privkeylen);\n #else\n     CECKey key;\n     key.SetSecretBytes(vch);\n-    key.GetPrivKey(privkey, fCompressed);\n+    privkeylen = key.GetPrivKeySize(fCompressed);\n+    assert(privkeylen);\n+    privkey.resize(privkeylen);\n+    ret = key.GetPrivKey(&privkey[0], fCompressed);\n+    assert(ret == (int)privkey.size());\n #endif\n     return privkey;\n }\n@@ -517,7 +520,7 @@ bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {\n         return false;\n #else\n     CECKey key;\n-    if (!key.SetPrivKey(privkey, fSkipCheck))\n+    if (!key.SetPrivKey(&privkey[0], privkey.size(), fSkipCheck))\n         return false;\n     key.GetSecretBytes(vch);\n #endif"
      }
    ]
  },
  {
    "sha": "e1c946776652a177e3b46db02391263cc24bfd5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWM5NDY3NzY2NTJhMTc3ZTNiNDZkYjAyMzkxMjYzY2MyNGJmZDVh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-10T04:42:03Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-15T19:13:20Z"
      },
      "message": "boost: drop boost dependency in core.cpp",
      "tree": {
        "sha": "ab42f4635f06f3fd7bc45d75a1fe7d22c4329d8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab42f4635f06f3fd7bc45d75a1fe7d22c4329d8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1c946776652a177e3b46db02391263cc24bfd5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1c946776652a177e3b46db02391263cc24bfd5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1c946776652a177e3b46db02391263cc24bfd5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1c946776652a177e3b46db02391263cc24bfd5a/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e405aa48c7221017467f50daf29ff6794c76332d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e405aa48c7221017467f50daf29ff6794c76332d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e405aa48c7221017467f50daf29ff6794c76332d"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 10,
      "deletions": 13
    },
    "files": [
      {
        "sha": "6a7a9ff378e9804c9a061a75795b2e6cbde9440d",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1c946776652a177e3b46db02391263cc24bfd5a/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1c946776652a177e3b46db02391263cc24bfd5a/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=e1c946776652a177e3b46db02391263cc24bfd5a",
        "patch": "@@ -7,8 +7,6 @@\n \n #include \"tinyformat.h\"\n \n-#include <boost/foreach.hpp>\n-\n std::string COutPoint::ToString() const\n {\n     return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10), n);\n@@ -113,10 +111,10 @@ CTransaction& CTransaction::operator=(const CTransaction &tx) {\n CAmount CTransaction::GetValueOut() const\n {\n     CAmount nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, vout)\n+    for (std::vector<CTxOut>::const_iterator it(vout.begin()); it != vout.end(); ++it)\n     {\n-        nValueOut += txout.nValue;\n-        if (!MoneyRange(txout.nValue) || !MoneyRange(nValueOut))\n+        nValueOut += it->nValue;\n+        if (!MoneyRange(it->nValue) || !MoneyRange(nValueOut))\n             throw std::runtime_error(\"CTransaction::GetValueOut() : value out of range\");\n     }\n     return nValueOut;\n@@ -139,10 +137,9 @@ unsigned int CTransaction::CalculateModifiedSize(unsigned int nTxSize) const\n     // risk encouraging people to create junk outputs to redeem later.\n     if (nTxSize == 0)\n         nTxSize = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n-\n-    BOOST_FOREACH(const CTxIn& txin, vin)\n+    for (std::vector<CTxIn>::const_iterator it(vin.begin()); it != vin.end(); ++it)\n     {\n-        unsigned int offset = 41U + std::min(110U, (unsigned int)txin.scriptSig.size());\n+        unsigned int offset = 41U + std::min(110U, (unsigned int)it->scriptSig.size());\n         if (nTxSize > offset)\n             nTxSize -= offset;\n     }\n@@ -263,8 +260,8 @@ uint256 CBlock::BuildMerkleTree(bool* fMutated) const\n     */\n     vMerkleTree.clear();\n     vMerkleTree.reserve(vtx.size() * 2 + 16); // Safe upper bound for the number of total nodes.\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        vMerkleTree.push_back(tx.GetHash());\n+    for (std::vector<CTransaction>::const_iterator it(vtx.begin()); it != vtx.end(); ++it)\n+        vMerkleTree.push_back(it->GetHash());\n     int j = 0;\n     bool mutated = false;\n     for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n@@ -307,12 +304,12 @@ uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMer\n {\n     if (nIndex == -1)\n         return 0;\n-    BOOST_FOREACH(const uint256& otherside, vMerkleBranch)\n+    for (std::vector<uint256>::const_iterator it(vMerkleBranch.begin()); it != vMerkleBranch.end(); ++it)\n     {\n         if (nIndex & 1)\n-            hash = Hash(BEGIN(otherside), END(otherside), BEGIN(hash), END(hash));\n+            hash = Hash(BEGIN(*it), END(*it), BEGIN(hash), END(hash));\n         else\n-            hash = Hash(BEGIN(hash), END(hash), BEGIN(otherside), END(otherside));\n+            hash = Hash(BEGIN(hash), END(hash), BEGIN(*it), END(*it));\n         nIndex >>= 1;\n     }\n     return hash;"
      }
    ]
  },
  {
    "sha": "352058e8b0da4ec37b2f1891716c53adc2957a02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTIwNThlOGIwZGE0ZWMzN2IyZjE4OTE3MTZjNTNhZGMyOTU3YTAy",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-10T17:24:12Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-15T19:13:20Z"
      },
      "message": "boost: drop boost dependency in utilstrencodings.cpp",
      "tree": {
        "sha": "0f5a62d6bb3397bd4dcfc9fafa866bc11fd6b7f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f5a62d6bb3397bd4dcfc9fafa866bc11fd6b7f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/352058e8b0da4ec37b2f1891716c53adc2957a02",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/352058e8b0da4ec37b2f1891716c53adc2957a02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/352058e8b0da4ec37b2f1891716c53adc2957a02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/352058e8b0da4ec37b2f1891716c53adc2957a02/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1c946776652a177e3b46db02391263cc24bfd5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1c946776652a177e3b46db02391263cc24bfd5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1c946776652a177e3b46db02391263cc24bfd5a"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "81e156f43f96af03053a0e9aa219c9ad4bd7df6a",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/352058e8b0da4ec37b2f1891716c53adc2957a02/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/352058e8b0da4ec37b2f1891716c53adc2957a02/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=352058e8b0da4ec37b2f1891716c53adc2957a02",
        "patch": "@@ -9,8 +9,8 @@\n \n #include <errno.h>\n #include <limits>\n-\n-#include <boost/foreach.hpp>\n+#include <cstdlib>\n+#include <cstring>\n \n using namespace std;\n \n@@ -53,9 +53,9 @@ signed char HexDigit(char c)\n \n bool IsHex(const string& str)\n {\n-    BOOST_FOREACH(char c, str)\n+    for(std::string::const_iterator it(str.begin()); it != str.end(); ++it)\n     {\n-        if (HexDigit(c) < 0)\n+        if (HexDigit(*it) < 0)\n             return false;\n     }\n     return (str.size() > 0) && (str.size()%2 == 0);"
      }
    ]
  },
  {
    "sha": "5f4bcf6b14eb45da408e19295332d2a8486d70df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjRiY2Y2YjE0ZWI0NWRhNDA4ZTE5Mjk1MzMyZDJhODQ4NmQ3MGRm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-13T18:15:19Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-10-15T19:13:20Z"
      },
      "message": "boost: drop boost dependency in version.cpp.\n\nAlso add a test to verify.",
      "tree": {
        "sha": "8b40c5a3f4e10c1951a9fc7d327e15cbc632c8f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b40c5a3f4e10c1951a9fc7d327e15cbc632c8f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f4bcf6b14eb45da408e19295332d2a8486d70df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f4bcf6b14eb45da408e19295332d2a8486d70df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f4bcf6b14eb45da408e19295332d2a8486d70df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f4bcf6b14eb45da408e19295332d2a8486d70df/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "352058e8b0da4ec37b2f1891716c53adc2957a02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/352058e8b0da4ec37b2f1891716c53adc2957a02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/352058e8b0da4ec37b2f1891716c53adc2957a02"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 19,
      "deletions": 3
    },
    "files": [
      {
        "sha": "61daa0a3fe76774d8c01da6c05c3099a51f5258d",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f4bcf6b14eb45da408e19295332d2a8486d70df/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f4bcf6b14eb45da408e19295332d2a8486d70df/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=5f4bcf6b14eb45da408e19295332d2a8486d70df",
        "patch": "@@ -9,6 +9,7 @@\n #include \"sync.h\"\n #include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\"\n+#include \"version.h\"\n \n #include <stdint.h>\n #include <vector>\n@@ -341,4 +342,15 @@ BOOST_AUTO_TEST_CASE(test_FormatParagraph)\n     BOOST_CHECK_EQUAL(FormatParagraph(\"test test\", 4, 4), \"test\\n    test\");\n }\n \n+BOOST_AUTO_TEST_CASE(test_FormatSubVersion)\n+{\n+    std::vector<std::string> comments;\n+    comments.push_back(std::string(\"comment1\"));\n+    std::vector<std::string> comments2;\n+    comments2.push_back(std::string(\"comment1\"));\n+    comments2.push_back(std::string(\"comment2\"));\n+    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, std::vector<std::string>()),std::string(\"/Test:0.9.99/\"));\n+    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments),std::string(\"/Test:0.9.99(comment1)/\"));\n+    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments2),std::string(\"/Test:0.9.99(comment1; comment2)/\"));\n+}\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "d12b681e5c3b72dafe03fc87226943583708a74e",
        "filename": "src/version.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f4bcf6b14eb45da408e19295332d2a8486d70df/src/version.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f4bcf6b14eb45da408e19295332d2a8486d70df/src/version.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.cpp?ref=5f4bcf6b14eb45da408e19295332d2a8486d70df",
        "patch": "@@ -8,8 +8,6 @@\n \n #include <string>\n \n-#include <boost/algorithm/string/join.hpp>\n-\n // Name of client reported in the 'version' message. Report the same name\n // for both bitcoind and bitcoin-qt, to make it harder for attackers to\n // target servers or GUI users specifically.\n@@ -94,7 +92,13 @@ std::string FormatSubVersion(const std::string& name, int nClientVersion, const\n     ss << \"/\";\n     ss << name << \":\" << FormatVersion(nClientVersion);\n     if (!comments.empty())\n-        ss << \"(\" << boost::algorithm::join(comments, \"; \") << \")\";\n+    {\n+        std::vector<std::string>::const_iterator it(comments.begin());\n+        ss << \"(\" << *it;\n+        for(++it; it != comments.end(); ++it)\n+            ss << \"; \" << *it;\n+        ss << \")\";\n+    }\n     ss << \"/\";\n     return ss.str();\n }"
      }
    ]
  },
  {
    "sha": "e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGY2ZDU0ZjFmNThkOWE1OTk4ZTM3MzY3Yjg0YjQyN2U1MWUxYWQ3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-15T19:39:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-15T19:43:16Z"
      },
      "message": "Merge pull request #5082\n\n5f4bcf6 boost: drop boost dependency in version.cpp. (Cory Fields)\n352058e boost: drop boost dependency in utilstrencodings.cpp (Cory Fields)\ne1c9467 boost: drop boost dependency in core.cpp (Cory Fields)\ne405aa4 boost: remove CPrivKey dependency from CECKey (Cory Fields)\n5295506 boost: drop dependency on tuple in serialization (Cory Fields)\n1d9b86d boost: drop dependency on is_fundamental in serialization (Cory Fields)",
      "tree": {
        "sha": "8b40c5a3f4e10c1951a9fc7d327e15cbc632c8f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b40c5a3f4e10c1951a9fc7d327e15cbc632c8f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQGcBAABAgAGBQJUPs5UAAoJEFeJbS/48LZXA78L/irltKD+fwxXyBr/ia0gYCEz\nhxlAgyFDfxghN4wTJ4Ju/up4NyrwVtqQRvPGboakkWvyYC2civmzWCw/pq/qcYGv\n+WP/Vf7a2jN+1nYlLd+Eru2wsp8NVXlCTQ+Rkpo1tE0o0QJI8sbL7HpzXJQTqysm\nUb+7wMkH1X+G1pcJBUxKvbsnrvdiKwW+h2ngo4dL67EQNwXkSpzwmYRvYL9fOITj\nfHDHh4HppnyM7Mk9g0BDQZVP74beh6Jc++/RozlVH2HXF2hx7GjOjJ4FT8Mt99td\nMS1zSApNgsRHB1d3ecBZ8GbxfRDVOuR+LD6wqxGrIi4Q0WeqUTvLLnAHmcXyI4bG\nKQNJ/NoYHwy4ymHtIF0DgpcPyA9Bl85uIoDUjL5lJa8ufGYcN46ZwfvkJIDay1ii\n7Mjs5gwzarUsbjBAaeoB3ccTLOgOxd2eUGnemXBGiF6rJ32zxUt0AsKNprrXM4H9\noglYAAMmR8CwP45N1nOKW3XeQssM8LHzQ0pFbp6DIg==\n=m30/\n-----END PGP SIGNATURE-----",
        "payload": "tree 8b40c5a3f4e10c1951a9fc7d327e15cbc632c8f2\nparent 992ab87114b8c9ea8230e97a9c8d8bd71939074d\nparent 5f4bcf6b14eb45da408e19295332d2a8486d70df\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1413401973 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1413402196 -0700\n\nMerge pull request #5082\n\n5f4bcf6 boost: drop boost dependency in version.cpp. (Cory Fields)\n352058e boost: drop boost dependency in utilstrencodings.cpp (Cory Fields)\ne1c9467 boost: drop boost dependency in core.cpp (Cory Fields)\ne405aa4 boost: remove CPrivKey dependency from CECKey (Cory Fields)\n5295506 boost: drop dependency on tuple in serialization (Cory Fields)\n1d9b86d boost: drop dependency on is_fundamental in serialization (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "992ab87114b8c9ea8230e97a9c8d8bd71939074d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/992ab87114b8c9ea8230e97a9c8d8bd71939074d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/992ab87114b8c9ea8230e97a9c8d8bd71939074d"
      },
      {
        "sha": "5f4bcf6b14eb45da408e19295332d2a8486d70df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f4bcf6b14eb45da408e19295332d2a8486d70df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f4bcf6b14eb45da408e19295332d2a8486d70df"
      }
    ],
    "stats": {
      "total": 209,
      "additions": 74,
      "deletions": 135
    },
    "files": [
      {
        "sha": "6a7a9ff378e9804c9a061a75795b2e6cbde9440d",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
        "patch": "@@ -7,8 +7,6 @@\n \n #include \"tinyformat.h\"\n \n-#include <boost/foreach.hpp>\n-\n std::string COutPoint::ToString() const\n {\n     return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10), n);\n@@ -113,10 +111,10 @@ CTransaction& CTransaction::operator=(const CTransaction &tx) {\n CAmount CTransaction::GetValueOut() const\n {\n     CAmount nValueOut = 0;\n-    BOOST_FOREACH(const CTxOut& txout, vout)\n+    for (std::vector<CTxOut>::const_iterator it(vout.begin()); it != vout.end(); ++it)\n     {\n-        nValueOut += txout.nValue;\n-        if (!MoneyRange(txout.nValue) || !MoneyRange(nValueOut))\n+        nValueOut += it->nValue;\n+        if (!MoneyRange(it->nValue) || !MoneyRange(nValueOut))\n             throw std::runtime_error(\"CTransaction::GetValueOut() : value out of range\");\n     }\n     return nValueOut;\n@@ -139,10 +137,9 @@ unsigned int CTransaction::CalculateModifiedSize(unsigned int nTxSize) const\n     // risk encouraging people to create junk outputs to redeem later.\n     if (nTxSize == 0)\n         nTxSize = ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION);\n-\n-    BOOST_FOREACH(const CTxIn& txin, vin)\n+    for (std::vector<CTxIn>::const_iterator it(vin.begin()); it != vin.end(); ++it)\n     {\n-        unsigned int offset = 41U + std::min(110U, (unsigned int)txin.scriptSig.size());\n+        unsigned int offset = 41U + std::min(110U, (unsigned int)it->scriptSig.size());\n         if (nTxSize > offset)\n             nTxSize -= offset;\n     }\n@@ -263,8 +260,8 @@ uint256 CBlock::BuildMerkleTree(bool* fMutated) const\n     */\n     vMerkleTree.clear();\n     vMerkleTree.reserve(vtx.size() * 2 + 16); // Safe upper bound for the number of total nodes.\n-    BOOST_FOREACH(const CTransaction& tx, vtx)\n-        vMerkleTree.push_back(tx.GetHash());\n+    for (std::vector<CTransaction>::const_iterator it(vtx.begin()); it != vtx.end(); ++it)\n+        vMerkleTree.push_back(it->GetHash());\n     int j = 0;\n     bool mutated = false;\n     for (int nSize = vtx.size(); nSize > 1; nSize = (nSize + 1) / 2)\n@@ -307,12 +304,12 @@ uint256 CBlock::CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMer\n {\n     if (nIndex == -1)\n         return 0;\n-    BOOST_FOREACH(const uint256& otherside, vMerkleBranch)\n+    for (std::vector<uint256>::const_iterator it(vMerkleBranch.begin()); it != vMerkleBranch.end(); ++it)\n     {\n         if (nIndex & 1)\n-            hash = Hash(BEGIN(otherside), END(otherside), BEGIN(hash), END(hash));\n+            hash = Hash(BEGIN(*it), END(*it), BEGIN(hash), END(hash));\n         else\n-            hash = Hash(BEGIN(hash), END(hash), BEGIN(otherside), END(otherside));\n+            hash = Hash(BEGIN(hash), END(hash), BEGIN(*it), END(*it));\n         nIndex >>= 1;\n     }\n     return hash;"
      },
      {
        "sha": "079e2c65405a4b8b16e1c7874e3758008be54dd5",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 15,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
        "patch": "@@ -179,19 +179,17 @@ class CECKey {\n         BN_clear_free(&bn);\n     }\n \n-    void GetPrivKey(CPrivKey &privkey, bool fCompressed) {\n+    int GetPrivKeySize(bool fCompressed) {\n         EC_KEY_set_conv_form(pkey, fCompressed ? POINT_CONVERSION_COMPRESSED : POINT_CONVERSION_UNCOMPRESSED);\n-        int nSize = i2d_ECPrivateKey(pkey, NULL);\n-        assert(nSize);\n-        privkey.resize(nSize);\n-        unsigned char* pbegin = &privkey[0];\n-        int nSize2 = i2d_ECPrivateKey(pkey, &pbegin);\n-        assert(nSize == nSize2);\n+        return i2d_ECPrivateKey(pkey, NULL);\n+    }\n+    int GetPrivKey(unsigned char* privkey, bool fCompressed) {\n+        EC_KEY_set_conv_form(pkey, fCompressed ? POINT_CONVERSION_COMPRESSED : POINT_CONVERSION_UNCOMPRESSED);\n+        return i2d_ECPrivateKey(pkey, &privkey);\n     }\n \n-    bool SetPrivKey(const CPrivKey &privkey, bool fSkipCheck=false) {\n-        const unsigned char* pbegin = &privkey[0];\n-        if (d2i_ECPrivateKey(&pkey, &pbegin, privkey.size())) {\n+    bool SetPrivKey(const unsigned char* privkey, size_t size, bool fSkipCheck=false) {\n+        if (d2i_ECPrivateKey(&pkey, &privkey, size)) {\n             if(fSkipCheck)\n                 return true;\n \n@@ -424,7 +422,7 @@ bool CKey::SetPrivKey(const CPrivKey &privkey, bool fCompressedIn) {\n         return false;\n #else\n     CECKey key;\n-    if (!key.SetPrivKey(privkey))\n+    if (!key.SetPrivKey(&privkey[0], privkey.size()))\n         return false;\n     key.GetSecretBytes(vch);\n #endif\n@@ -436,16 +434,21 @@ bool CKey::SetPrivKey(const CPrivKey &privkey, bool fCompressedIn) {\n CPrivKey CKey::GetPrivKey() const {\n     assert(fValid);\n     CPrivKey privkey;\n+    int privkeylen, ret;\n #ifdef USE_SECP256K1\n     privkey.resize(279);\n-    int privkeylen = 279;\n-    int ret = secp256k1_ecdsa_privkey_export(begin(), (unsigned char*)&privkey[0], &privkeylen, fCompressed);\n+    privkeylen = 279;\n+    ret = secp256k1_ecdsa_privkey_export(begin(), (unsigned char*)&privkey[0], &privkeylen, fCompressed);\n     assert(ret);\n     privkey.resize(privkeylen);\n #else\n     CECKey key;\n     key.SetSecretBytes(vch);\n-    key.GetPrivKey(privkey, fCompressed);\n+    privkeylen = key.GetPrivKeySize(fCompressed);\n+    assert(privkeylen);\n+    privkey.resize(privkeylen);\n+    ret = key.GetPrivKey(&privkey[0], fCompressed);\n+    assert(ret == (int)privkey.size());\n #endif\n     return privkey;\n }\n@@ -517,7 +520,7 @@ bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {\n         return false;\n #else\n     CECKey key;\n-    if (!key.SetPrivKey(privkey, fSkipCheck))\n+    if (!key.SetPrivKey(&privkey[0], privkey.size(), fSkipCheck))\n         return false;\n     key.GetSecretBytes(vch);\n #endif"
      },
      {
        "sha": "55b6891394ba633258fed565c2fcdb3bd97d2f17",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 19,
        "deletions": 96,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
        "patch": "@@ -20,9 +20,6 @@\n #include <utility>\n #include <vector>\n \n-#include <boost/tuple/tuple.hpp>\n-#include <boost/type_traits/is_fundamental.hpp>\n-\n class CAutoFile;\n class CDataStream;\n class CScript;\n@@ -432,14 +429,15 @@ template<typename Stream, typename C> void Serialize(Stream& os, const std::basi\n template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_string<C>& str, int, int=0);\n \n // vector\n-template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n-template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n+// vectors of unsigned char are a special case and are intended to be serialized as a single opaque blob.\n+template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n+template<typename T, typename A, typename V> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const V&);\n template<typename T, typename A> inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion);\n-template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n-template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n+template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n+template<typename Stream, typename T, typename A, typename V> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const V&);\n template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion);\n-template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n-template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n+template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const unsigned char&);\n+template<typename Stream, typename T, typename A, typename V> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&);\n template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion);\n \n // others derived from vector\n@@ -452,16 +450,6 @@ template<typename K, typename T> unsigned int GetSerializeSize(const std::pair<K\n template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion);\n template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion);\n \n-// 3 tuple\n-template<typename T0, typename T1, typename T2> unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion);\n-template<typename Stream, typename T0, typename T1, typename T2> void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion);\n-template<typename Stream, typename T0, typename T1, typename T2> void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion);\n-\n-// 4 tuple\n-template<typename T0, typename T1, typename T2, typename T3> unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion);\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3> void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion);\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3> void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion);\n-\n // map\n template<typename K, typename T, typename Pred, typename A> unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n template<typename Stream, typename K, typename T, typename Pred, typename A> void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion);\n@@ -536,13 +524,13 @@ void Unserialize(Stream& is, std::basic_string<C>& str, int, int)\n // vector\n //\n template<typename T, typename A>\n-unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)\n+unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n {\n     return (GetSizeOfCompactSize(v.size()) + v.size() * sizeof(T));\n }\n \n-template<typename T, typename A>\n-unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)\n+template<typename T, typename A, typename V>\n+unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const V&)\n {\n     unsigned int nSize = GetSizeOfCompactSize(v.size());\n     for (typename std::vector<T, A>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n@@ -553,20 +541,20 @@ unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nV\n template<typename T, typename A>\n inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion)\n {\n-    return GetSerializeSize_impl(v, nType, nVersion, boost::is_fundamental<T>());\n+    return GetSerializeSize_impl(v, nType, nVersion, T());\n }\n \n \n template<typename Stream, typename T, typename A>\n-void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)\n+void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n {\n     WriteCompactSize(os, v.size());\n     if (!v.empty())\n         os.write((char*)&v[0], v.size() * sizeof(T));\n }\n \n-template<typename Stream, typename T, typename A>\n-void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)\n+template<typename Stream, typename T, typename A, typename V>\n+void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const V&)\n {\n     WriteCompactSize(os, v.size());\n     for (typename std::vector<T, A>::const_iterator vi = v.begin(); vi != v.end(); ++vi)\n@@ -576,12 +564,12 @@ void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVers\n template<typename Stream, typename T, typename A>\n inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion)\n {\n-    Serialize_impl(os, v, nType, nVersion, boost::is_fundamental<T>());\n+    Serialize_impl(os, v, nType, nVersion, T());\n }\n \n \n template<typename Stream, typename T, typename A>\n-void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&)\n+void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const unsigned char&)\n {\n     // Limit size per read so bogus size value won't cause out of memory\n     v.clear();\n@@ -596,8 +584,8 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion,\n     }\n }\n \n-template<typename Stream, typename T, typename A>\n-void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&)\n+template<typename Stream, typename T, typename A, typename V>\n+void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const V&)\n {\n     v.clear();\n     unsigned int nSize = ReadCompactSize(is);\n@@ -617,7 +605,7 @@ void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion,\n template<typename Stream, typename T, typename A>\n inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion)\n {\n-    Unserialize_impl(is, v, nType, nVersion, boost::is_fundamental<T>());\n+    Unserialize_impl(is, v, nType, nVersion, T());\n }\n \n \n@@ -669,71 +657,6 @@ void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion)\n \n \n \n-//\n-// 3 tuple\n-//\n-template<typename T0, typename T1, typename T2>\n-unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)\n-{\n-    unsigned int nSize = 0;\n-    nSize += GetSerializeSize(boost::get<0>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<1>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<2>(item), nType, nVersion);\n-    return nSize;\n-}\n-\n-template<typename Stream, typename T0, typename T1, typename T2>\n-void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion)\n-{\n-    Serialize(os, boost::get<0>(item), nType, nVersion);\n-    Serialize(os, boost::get<1>(item), nType, nVersion);\n-    Serialize(os, boost::get<2>(item), nType, nVersion);\n-}\n-\n-template<typename Stream, typename T0, typename T1, typename T2>\n-void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion)\n-{\n-    Unserialize(is, boost::get<0>(item), nType, nVersion);\n-    Unserialize(is, boost::get<1>(item), nType, nVersion);\n-    Unserialize(is, boost::get<2>(item), nType, nVersion);\n-}\n-\n-\n-\n-//\n-// 4 tuple\n-//\n-template<typename T0, typename T1, typename T2, typename T3>\n-unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)\n-{\n-    unsigned int nSize = 0;\n-    nSize += GetSerializeSize(boost::get<0>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<1>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<2>(item), nType, nVersion);\n-    nSize += GetSerializeSize(boost::get<3>(item), nType, nVersion);\n-    return nSize;\n-}\n-\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3>\n-void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)\n-{\n-    Serialize(os, boost::get<0>(item), nType, nVersion);\n-    Serialize(os, boost::get<1>(item), nType, nVersion);\n-    Serialize(os, boost::get<2>(item), nType, nVersion);\n-    Serialize(os, boost::get<3>(item), nType, nVersion);\n-}\n-\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3>\n-void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion)\n-{\n-    Unserialize(is, boost::get<0>(item), nType, nVersion);\n-    Unserialize(is, boost::get<1>(item), nType, nVersion);\n-    Unserialize(is, boost::get<2>(item), nType, nVersion);\n-    Unserialize(is, boost::get<3>(item), nType, nVersion);\n-}\n-\n-\n-\n //\n // map\n //"
      },
      {
        "sha": "61daa0a3fe76774d8c01da6c05c3099a51f5258d",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
        "patch": "@@ -9,6 +9,7 @@\n #include \"sync.h\"\n #include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\"\n+#include \"version.h\"\n \n #include <stdint.h>\n #include <vector>\n@@ -341,4 +342,15 @@ BOOST_AUTO_TEST_CASE(test_FormatParagraph)\n     BOOST_CHECK_EQUAL(FormatParagraph(\"test test\", 4, 4), \"test\\n    test\");\n }\n \n+BOOST_AUTO_TEST_CASE(test_FormatSubVersion)\n+{\n+    std::vector<std::string> comments;\n+    comments.push_back(std::string(\"comment1\"));\n+    std::vector<std::string> comments2;\n+    comments2.push_back(std::string(\"comment1\"));\n+    comments2.push_back(std::string(\"comment2\"));\n+    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, std::vector<std::string>()),std::string(\"/Test:0.9.99/\"));\n+    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments),std::string(\"/Test:0.9.99(comment1)/\"));\n+    BOOST_CHECK_EQUAL(FormatSubVersion(\"Test\", 99900, comments2),std::string(\"/Test:0.9.99(comment1; comment2)/\"));\n+}\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "81e156f43f96af03053a0e9aa219c9ad4bd7df6a",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
        "patch": "@@ -9,8 +9,8 @@\n \n #include <errno.h>\n #include <limits>\n-\n-#include <boost/foreach.hpp>\n+#include <cstdlib>\n+#include <cstring>\n \n using namespace std;\n \n@@ -53,9 +53,9 @@ signed char HexDigit(char c)\n \n bool IsHex(const string& str)\n {\n-    BOOST_FOREACH(char c, str)\n+    for(std::string::const_iterator it(str.begin()); it != str.end(); ++it)\n     {\n-        if (HexDigit(c) < 0)\n+        if (HexDigit(*it) < 0)\n             return false;\n     }\n     return (str.size() > 0) && (str.size()%2 == 0);"
      },
      {
        "sha": "d12b681e5c3b72dafe03fc87226943583708a74e",
        "filename": "src/version.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/src/version.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/src/version.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.cpp?ref=e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
        "patch": "@@ -8,8 +8,6 @@\n \n #include <string>\n \n-#include <boost/algorithm/string/join.hpp>\n-\n // Name of client reported in the 'version' message. Report the same name\n // for both bitcoind and bitcoin-qt, to make it harder for attackers to\n // target servers or GUI users specifically.\n@@ -94,7 +92,13 @@ std::string FormatSubVersion(const std::string& name, int nClientVersion, const\n     ss << \"/\";\n     ss << name << \":\" << FormatVersion(nClientVersion);\n     if (!comments.empty())\n-        ss << \"(\" << boost::algorithm::join(comments, \"; \") << \")\";\n+    {\n+        std::vector<std::string>::const_iterator it(comments.begin());\n+        ss << \"(\" << *it;\n+        for(++it; it != comments.end(); ++it)\n+            ss << \"; \" << *it;\n+        ss << \")\";\n+    }\n     ss << \"/\";\n     return ss.str();\n }"
      },
      {
        "sha": "ffddd8106b31f5ffa685390be222aeac6c228220",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
        "patch": "@@ -185,7 +185,7 @@ bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)\n \n bool CWalletDB::WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry)\n {\n-    return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, nAccEntryNum), acentry);\n+    return Write(std::make_pair(std::string(\"acentry\"), std::make_pair(acentry.strAccount, nAccEntryNum)), acentry);\n }\n \n bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n@@ -218,7 +218,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n         // Read next record\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         if (fFlags == DB_SET_RANGE)\n-            ssKey << boost::make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64_t(0));\n+            ssKey << std::make_pair(std::string(\"acentry\"), std::make_pair((fAllAccounts ? string(\"\") : strAccount), uint64_t(0)));\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n         fFlags = DB_NEXT;\n@@ -977,11 +977,11 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename)\n bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n {\n     nWalletDBUpdated++;\n-    return Write(boost::make_tuple(std::string(\"destdata\"), address, key), value);\n+    return Write(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)), value);\n }\n \n bool CWalletDB::EraseDestData(const std::string &address, const std::string &key)\n {\n     nWalletDBUpdated++;\n-    return Erase(boost::make_tuple(string(\"destdata\"), address, key));\n+    return Erase(std::make_pair(std::string(\"destdata\"), std::make_pair(address, key)));\n }"
      }
    ]
  },
  {
    "sha": "5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjlmODQyNWE1MTU3MzllMjE0OWJmNWJmYjJhZTZlZDYwYmZiYWYy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-16T19:23:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-16T19:23:50Z"
      },
      "message": "Merge src/leveldb changes for LevelDB 1.18.",
      "tree": {
        "sha": "bacc7dd4d2f77da27499000d6f12655a3f6463f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bacc7dd4d2f77da27499000d6f12655a3f6463f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8f6d54f1f58d9a5998e37367b84b427e51e1ad7"
      },
      {
        "sha": "4b0e2d75d78036e7e76fd9584e17b0379ba08d24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b0e2d75d78036e7e76fd9584e17b0379ba08d24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b0e2d75d78036e7e76fd9584e17b0379ba08d24"
      }
    ],
    "stats": {
      "total": 884,
      "additions": 602,
      "deletions": 282
    },
    "files": [
      {
        "sha": "cd600ff46b8802d990967397a67fbc96fdc4aca2",
        "filename": "src/leveldb/CONTRIBUTING.md",
        "status": "added",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/CONTRIBUTING.md?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -0,0 +1,36 @@\n+# Contributing\n+\n+We'd love to accept your code patches! However, before we can take them, we\n+have to jump a couple of legal hurdles.\n+\n+## Contributor License Agreements\n+\n+Please fill out either the individual or corporate Contributor License\n+Agreement as appropriate.\n+\n+* If you are an individual writing original source code and you're sure you\n+own the intellectual property, then sign an [individual CLA](https://developers.google.com/open-source/cla/individual).\n+* If you work for a company that wants to allow you to contribute your work,\n+then sign a [corporate CLA](https://developers.google.com/open-source/cla/corporate).\n+\n+Follow either of the two links above to access the appropriate CLA and\n+instructions for how to sign and return it.\n+\n+## Submitting a Patch\n+\n+1. Sign the contributors license agreement above.\n+2. Decide which code you want to submit. A submission should be a set of changes\n+that addresses one issue in the [issue tracker](https://github.com/google/leveldb/issues).\n+Please don't mix more than one logical change per submission, because it makes\n+the history hard to follow. If you want to make a change\n+(e.g. add a sample or feature) that doesn't have a corresponding issue in the\n+issue tracker, please create one.\n+3. **Submitting**: When you are ready to submit, send us a Pull Request. Be\n+sure to include the issue number you fixed and the name you used to sign\n+the CLA.\n+\n+## Writing Code ##\n+\n+If your contribution contains code, please make sure that it follows \n+[the style guide](http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml).\n+Otherwise we will have to ask you to make changes, and that's no fun for anyone."
      },
      {
        "sha": "2bd2cadcddeb9ba912c241fed604f5d4d2136886",
        "filename": "src/leveldb/Makefile",
        "status": "modified",
        "additions": 20,
        "deletions": 8,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/Makefile?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -6,9 +6,12 @@\n # Uncomment exactly one of the lines labelled (A), (B), and (C) below\n # to switch between compilation modes.\n \n-OPT ?= -O2 -DNDEBUG       # (A) Production use (optimized mode)\n-# OPT ?= -g2              # (B) Debug mode, w/ full line-level debugging symbols\n-# OPT ?= -O2 -g2 -DNDEBUG # (C) Profiling mode: opt, but w/debugging symbols\n+# (A) Production use (optimized mode)\n+OPT ?= -O2 -DNDEBUG\n+# (B) Debug mode, w/ full line-level debugging symbols\n+# OPT ?= -g2\n+# (C) Profiling mode: opt, but w/debugging symbols\n+# OPT ?= -O2 -g2 -DNDEBUG\n #-----------------------------------------------\n \n # detect what platform we're building on\n@@ -29,6 +32,11 @@ MEMENVOBJECTS = $(MEMENV_SOURCES:.cc=.o)\n TESTUTIL = ./util/testutil.o\n TESTHARNESS = ./util/testharness.o $(TESTUTIL)\n \n+# Note: iOS should probably be using libtool, not ar.\n+ifeq ($(PLATFORM), IOS)\n+AR=xcrun ar\n+endif\n+\n TESTS = \\\n \tarena_test \\\n \tautocompact_test \\\n@@ -43,6 +51,7 @@ TESTS = \\\n \tenv_test \\\n \tfilename_test \\\n \tfilter_block_test \\\n+\thash_test \\\n \tissue178_test \\\n \tissue200_test \\\n \tlog_test \\\n@@ -72,7 +81,7 @@ SHARED = $(SHARED1)\n else\n # Update db.h if you change these.\n SHARED_MAJOR = 1\n-SHARED_MINOR = 17\n+SHARED_MINOR = 18\n SHARED1 = libleveldb.$(PLATFORM_SHARED_EXT)\n SHARED2 = $(SHARED1).$(SHARED_MAJOR)\n SHARED3 = $(SHARED1).$(SHARED_MAJOR).$(SHARED_MINOR)\n@@ -152,6 +161,9 @@ filename_test: db/filename_test.o $(LIBOBJECTS) $(TESTHARNESS)\n filter_block_test: table/filter_block_test.o $(LIBOBJECTS) $(TESTHARNESS)\n \t$(CXX) $(LDFLAGS) table/filter_block_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n \n+hash_test: util/hash_test.o $(LIBOBJECTS) $(TESTHARNESS)\n+\t$(CXX) $(LDFLAGS) util/hash_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n+\n issue178_test: issues/issue178_test.o $(LIBOBJECTS) $(TESTHARNESS)\n \t$(CXX) $(LDFLAGS) issues/issue178_test.o $(LIBOBJECTS) $(TESTHARNESS) -o $@ $(LIBS)\n \n@@ -194,17 +206,17 @@ IOSARCH=-arch armv6 -arch armv7 -arch armv7s -arch arm64\n \n .cc.o:\n \tmkdir -p ios-x86/$(dir $@)\n-\t$(CXX) $(CXXFLAGS) -isysroot $(SIMULATORROOT)/SDKs/iPhoneSimulator$(IOSVERSION).sdk -arch i686 -arch x86_64 -c $< -o ios-x86/$@\n+\txcrun -sdk iphonesimulator $(CXX) $(CXXFLAGS) -isysroot $(SIMULATORROOT)/SDKs/iPhoneSimulator$(IOSVERSION).sdk -arch i686 -arch x86_64 -c $< -o ios-x86/$@\n \tmkdir -p ios-arm/$(dir $@)\n \txcrun -sdk iphoneos $(CXX) $(CXXFLAGS) -isysroot $(DEVICEROOT)/SDKs/iPhoneOS$(IOSVERSION).sdk $(IOSARCH) -c $< -o ios-arm/$@\n-\tlipo ios-x86/$@ ios-arm/$@ -create -output $@\n+\txcrun lipo ios-x86/$@ ios-arm/$@ -create -output $@\n \n .c.o:\n \tmkdir -p ios-x86/$(dir $@)\n-\t$(CC) $(CFLAGS) -isysroot $(SIMULATORROOT)/SDKs/iPhoneSimulator$(IOSVERSION).sdk -arch i686 -arch x86_64 -c $< -o ios-x86/$@\n+\txcrun -sdk iphonesimulator $(CC) $(CFLAGS) -isysroot $(SIMULATORROOT)/SDKs/iPhoneSimulator$(IOSVERSION).sdk -arch i686 -arch x86_64 -c $< -o ios-x86/$@\n \tmkdir -p ios-arm/$(dir $@)\n \txcrun -sdk iphoneos $(CC) $(CFLAGS) -isysroot $(DEVICEROOT)/SDKs/iPhoneOS$(IOSVERSION).sdk $(IOSARCH) -c $< -o ios-arm/$@\n-\tlipo ios-x86/$@ ios-arm/$@ -create -output $@\n+\txcrun lipo ios-x86/$@ ios-arm/$@ -create -output $@\n \n else\n .cc.o:"
      },
      {
        "sha": "480affb5ca1dec9f066c184dbb55afc429a1d5b6",
        "filename": "src/leveldb/README.md",
        "status": "added",
        "additions": 138,
        "deletions": 0,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/README.md?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -0,0 +1,138 @@\n+**LevelDB is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values.**\n+\n+Authors: Sanjay Ghemawat (sanjay@google.com) and Jeff Dean (jeff@google.com)\n+\n+# Features\n+  * Keys and values are arbitrary byte arrays.\n+  * Data is stored sorted by key.\n+  * Callers can provide a custom comparison function to override the sort order.\n+  * The basic operations are `Put(key,value)`, `Get(key)`, `Delete(key)`.\n+  * Multiple changes can be made in one atomic batch.\n+  * Users can create a transient snapshot to get a consistent view of data.\n+  * Forward and backward iteration is supported over the data.\n+  * Data is automatically compressed using the [Snappy compression library](http://code.google.com/p/snappy).\n+  * External activity (file system operations etc.) is relayed through a virtual interface so users can customize the operating system interactions.\n+  * [Detailed documentation](http://htmlpreview.github.io/?https://github.com/google/leveldb/blob/master/doc/index.html) about how to use the library is included with the source code.\n+\n+\n+# Limitations\n+  * This is not a SQL database.  It does not have a relational data model, it does not support SQL queries, and it has no support for indexes.\n+  * Only a single process (possibly multi-threaded) can access a particular database at a time.\n+  * There is no client-server support builtin to the library.  An application that needs such support will have to wrap their own server around the library.\n+\n+# Performance\n+\n+Here is a performance report (with explanations) from the run of the\n+included db_bench program.  The results are somewhat noisy, but should\n+be enough to get a ballpark performance estimate.\n+\n+## Setup\n+\n+We use a database with a million entries.  Each entry has a 16 byte\n+key, and a 100 byte value.  Values used by the benchmark compress to\n+about half their original size.\n+\n+    LevelDB:    version 1.1\n+    Date:       Sun May  1 12:11:26 2011\n+    CPU:        4 x Intel(R) Core(TM)2 Quad CPU    Q6600  @ 2.40GHz\n+    CPUCache:   4096 KB\n+    Keys:       16 bytes each\n+    Values:     100 bytes each (50 bytes after compression)\n+    Entries:    1000000\n+    Raw Size:   110.6 MB (estimated)\n+    File Size:  62.9 MB (estimated)\n+\n+## Write performance\n+\n+The \"fill\" benchmarks create a brand new database, in either\n+sequential, or random order.  The \"fillsync\" benchmark flushes data\n+from the operating system to the disk after every operation; the other\n+write operations leave the data sitting in the operating system buffer\n+cache for a while.  The \"overwrite\" benchmark does random writes that\n+update existing keys in the database.\n+\n+    fillseq      :       1.765 micros/op;   62.7 MB/s\n+    fillsync     :     268.409 micros/op;    0.4 MB/s (10000 ops)\n+    fillrandom   :       2.460 micros/op;   45.0 MB/s\n+    overwrite    :       2.380 micros/op;   46.5 MB/s\n+\n+Each \"op\" above corresponds to a write of a single key/value pair.\n+I.e., a random write benchmark goes at approximately 400,000 writes per second.\n+\n+Each \"fillsync\" operation costs much less (0.3 millisecond)\n+than a disk seek (typically 10 milliseconds).  We suspect that this is\n+because the hard disk itself is buffering the update in its memory and\n+responding before the data has been written to the platter.  This may\n+or may not be safe based on whether or not the hard disk has enough\n+power to save its memory in the event of a power failure.\n+\n+## Read performance\n+\n+We list the performance of reading sequentially in both the forward\n+and reverse direction, and also the performance of a random lookup.\n+Note that the database created by the benchmark is quite small.\n+Therefore the report characterizes the performance of leveldb when the\n+working set fits in memory.  The cost of reading a piece of data that\n+is not present in the operating system buffer cache will be dominated\n+by the one or two disk seeks needed to fetch the data from disk.\n+Write performance will be mostly unaffected by whether or not the\n+working set fits in memory.\n+\n+    readrandom   :      16.677 micros/op;  (approximately 60,000 reads per second)\n+    readseq      :       0.476 micros/op;  232.3 MB/s\n+    readreverse  :       0.724 micros/op;  152.9 MB/s\n+\n+LevelDB compacts its underlying storage data in the background to\n+improve read performance.  The results listed above were done\n+immediately after a lot of random writes.  The results after\n+compactions (which are usually triggered automatically) are better.\n+\n+    readrandom   :      11.602 micros/op;  (approximately 85,000 reads per second)\n+    readseq      :       0.423 micros/op;  261.8 MB/s\n+    readreverse  :       0.663 micros/op;  166.9 MB/s\n+\n+Some of the high cost of reads comes from repeated decompression of blocks\n+read from disk.  If we supply enough cache to the leveldb so it can hold the\n+uncompressed blocks in memory, the read performance improves again:\n+\n+    readrandom   :       9.775 micros/op;  (approximately 100,000 reads per second before compaction)\n+    readrandom   :       5.215 micros/op;  (approximately 190,000 reads per second after compaction)\n+\n+## Repository contents\n+\n+See doc/index.html for more explanation. See doc/impl.html for a brief overview of the implementation.\n+\n+The public interface is in include/*.h.  Callers should not include or\n+rely on the details of any other header files in this package.  Those\n+internal APIs may be changed without warning.\n+\n+Guide to header files:\n+\n+* **include/db.h**: Main interface to the DB: Start here\n+\n+* **include/options.h**: Control over the behavior of an entire database,\n+and also control over the behavior of individual reads and writes.\n+\n+* **include/comparator.h**: Abstraction for user-specified comparison function. \n+If you want just bytewise comparison of keys, you can use the default\n+comparator, but clients can write their own comparator implementations if they\n+want custom ordering (e.g. to handle different character encodings, etc.)\n+\n+* **include/iterator.h**: Interface for iterating over data. You can get\n+an iterator from a DB object.\n+\n+* **include/write_batch.h**: Interface for atomically applying multiple\n+updates to a database.\n+\n+* **include/slice.h**: A simple module for maintaining a pointer and a\n+length into some other byte array.\n+\n+* **include/status.h**: Status is returned from many of the public interfaces\n+and is used to report success and various kinds of errors.\n+\n+* **include/env.h**: \n+Abstraction of the OS environment.  A posix implementation of this interface is\n+in util/env_posix.cc\n+\n+* **include/table.h, include/table_builder.h**: Lower-level modules that most\n+clients probably won't use directly"
      },
      {
        "sha": "a1101c1bdad89e99834ca64f7ed07b9bc7535c4c",
        "filename": "src/leveldb/build_detect_platform",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/build_detect_platform",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/build_detect_platform",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/build_detect_platform?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -20,7 +20,7 @@\n #\n # The PLATFORM_CCFLAGS and PLATFORM_CXXFLAGS might include the following:\n #\n-#       -DLEVELDB_CSTDATOMIC_PRESENT if <cstdatomic> is present\n+#       -DLEVELDB_ATOMIC_PRESENT     if <atomic> is present\n #       -DLEVELDB_PLATFORM_POSIX     for Posix-based platforms\n #       -DSNAPPY                     if the Snappy library is present\n #\n@@ -72,6 +72,12 @@ if [ \"$CXX\" = \"g++\" ]; then\n fi\n \n case \"$TARGET_OS\" in\n+    CYGWIN_*)\n+        PLATFORM=OS_LINUX\n+        COMMON_FLAGS=\"$MEMCMP_FLAG -lpthread -DOS_LINUX -DCYGWIN\"\n+        PLATFORM_LDFLAGS=\"-lpthread\"\n+        PORT_FILE=port/port_posix.cc\n+        ;;\n     Darwin)\n         PLATFORM=OS_MACOSX\n         COMMON_FLAGS=\"$MEMCMP_FLAG -DOS_MACOSX\"\n@@ -185,13 +191,14 @@ if [ \"$CROSS_COMPILE\" = \"true\" ]; then\n else\n     CXXOUTPUT=\"${TMPDIR}/leveldb_build_detect_platform-cxx.$$\"\n \n-    # If -std=c++0x works, use <cstdatomic>.  Otherwise use port_posix.h.\n+    # If -std=c++0x works, use <atomic> as fallback for when memory barriers\n+    # are not available.\n     $CXX $CXXFLAGS -std=c++0x -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF\n-      #include <cstdatomic>\n+      #include <atomic>\n       int main() {}\n EOF\n     if [ \"$?\" = 0 ]; then\n-        COMMON_FLAGS=\"$COMMON_FLAGS -DLEVELDB_PLATFORM_POSIX -DLEVELDB_CSTDATOMIC_PRESENT\"\n+        COMMON_FLAGS=\"$COMMON_FLAGS -DLEVELDB_PLATFORM_POSIX -DLEVELDB_ATOMIC_PRESENT\"\n         PLATFORM_CXXFLAGS=\"-std=c++0x\"\n     else\n         COMMON_FLAGS=\"$COMMON_FLAGS -DLEVELDB_PLATFORM_POSIX\""
      },
      {
        "sha": "705a170aae4715cce8e7fd7810ceac6b04bef5ef",
        "filename": "src/leveldb/db/db_bench.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/db_bench.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/db_bench.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_bench.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -431,7 +431,7 @@ class Benchmark {\n         benchmarks = sep + 1;\n       }\n \n-      // Reset parameters that may be overriddden bwlow\n+      // Reset parameters that may be overridden below\n       num_ = FLAGS_num;\n       reads_ = (FLAGS_reads < 0 ? FLAGS_num : FLAGS_reads);\n       value_size_ = FLAGS_value_size;\n@@ -811,7 +811,6 @@ class Benchmark {\n \n   void SeekRandom(ThreadState* thread) {\n     ReadOptions options;\n-    std::string value;\n     int found = 0;\n     for (int i = 0; i < reads_; i++) {\n       Iterator* iter = db_->NewIterator(options);"
      },
      {
        "sha": "49b95953b4e961756cdb4bb028f143363160f9d4",
        "filename": "src/leveldb/db/db_impl.cc",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/db_impl.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/db_impl.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_impl.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -392,7 +392,7 @@ Status DBImpl::RecoverLogFile(uint64_t log_number,\n   reporter.info_log = options_.info_log;\n   reporter.fname = fname.c_str();\n   reporter.status = (options_.paranoid_checks ? &status : NULL);\n-  // We intentially make log::Reader do checksumming even if\n+  // We intentionally make log::Reader do checksumming even if\n   // paranoid_checks==false so that corruptions cause entire commits\n   // to be skipped instead of propagating bad information (like overly\n   // large sequence numbers).\n@@ -1267,7 +1267,7 @@ WriteBatch* DBImpl::BuildBatchGroup(Writer** last_writer) {\n         break;\n       }\n \n-      // Append to *reuslt\n+      // Append to *result\n       if (result == first->batch) {\n         // Switch to temporary batch instead of disturbing caller's batch\n         result = tmp_batch_;"
      },
      {
        "sha": "0fed9137d5ff86e3796f9d09b21b85ae43ed50c7",
        "filename": "src/leveldb/db/db_test.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/db_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/db_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/db_test.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -626,7 +626,7 @@ TEST(DBTest, GetEncountersEmptyLevel) {\n     //   * sstable B in level 2\n     // Then do enough Get() calls to arrange for an automatic compaction\n     // of sstable A.  A bug would cause the compaction to be marked as\n-    // occuring at level 1 (instead of the correct level 0).\n+    // occurring at level 1 (instead of the correct level 0).\n \n     // Step 1: First place sstables in levels 0 and 2\n     int compaction_count = 0;"
      },
      {
        "sha": "ea897b13c017f30be86f8d9597838effd8d31a8d",
        "filename": "src/leveldb/db/dbformat.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/dbformat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/dbformat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/dbformat.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -2,8 +2,8 @@\n // Use of this source code is governed by a BSD-style license that can be\n // found in the LICENSE file. See the AUTHORS file for names of contributors.\n \n-#ifndef STORAGE_LEVELDB_DB_FORMAT_H_\n-#define STORAGE_LEVELDB_DB_FORMAT_H_\n+#ifndef STORAGE_LEVELDB_DB_DBFORMAT_H_\n+#define STORAGE_LEVELDB_DB_DBFORMAT_H_\n \n #include <stdio.h>\n #include \"leveldb/comparator.h\"\n@@ -227,4 +227,4 @@ inline LookupKey::~LookupKey() {\n \n }  // namespace leveldb\n \n-#endif  // STORAGE_LEVELDB_DB_FORMAT_H_\n+#endif  // STORAGE_LEVELDB_DB_DBFORMAT_H_"
      },
      {
        "sha": "61c47c2ff999ab23c50119f705025593297f4200",
        "filename": "src/leveldb/db/dumpfile.cc",
        "status": "added",
        "additions": 225,
        "deletions": 0,
        "changes": 225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/dumpfile.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/dumpfile.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/dumpfile.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -0,0 +1,225 @@\n+// Copyright (c) 2012 The LevelDB Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file. See the AUTHORS file for names of contributors.\n+\n+#include <stdio.h>\n+#include \"db/dbformat.h\"\n+#include \"db/filename.h\"\n+#include \"db/log_reader.h\"\n+#include \"db/version_edit.h\"\n+#include \"db/write_batch_internal.h\"\n+#include \"leveldb/env.h\"\n+#include \"leveldb/iterator.h\"\n+#include \"leveldb/options.h\"\n+#include \"leveldb/status.h\"\n+#include \"leveldb/table.h\"\n+#include \"leveldb/write_batch.h\"\n+#include \"util/logging.h\"\n+\n+namespace leveldb {\n+\n+namespace {\n+\n+bool GuessType(const std::string& fname, FileType* type) {\n+  size_t pos = fname.rfind('/');\n+  std::string basename;\n+  if (pos == std::string::npos) {\n+    basename = fname;\n+  } else {\n+    basename = std::string(fname.data() + pos + 1, fname.size() - pos - 1);\n+  }\n+  uint64_t ignored;\n+  return ParseFileName(basename, &ignored, type);\n+}\n+\n+// Notified when log reader encounters corruption.\n+class CorruptionReporter : public log::Reader::Reporter {\n+ public:\n+  WritableFile* dst_;\n+  virtual void Corruption(size_t bytes, const Status& status) {\n+    std::string r = \"corruption: \";\n+    AppendNumberTo(&r, bytes);\n+    r += \" bytes; \";\n+    r += status.ToString();\n+    r.push_back('\\n');\n+    dst_->Append(r);\n+  }\n+};\n+\n+// Print contents of a log file. (*func)() is called on every record.\n+Status PrintLogContents(Env* env, const std::string& fname,\n+                        void (*func)(uint64_t, Slice, WritableFile*),\n+                        WritableFile* dst) {\n+  SequentialFile* file;\n+  Status s = env->NewSequentialFile(fname, &file);\n+  if (!s.ok()) {\n+    return s;\n+  }\n+  CorruptionReporter reporter;\n+  reporter.dst_ = dst;\n+  log::Reader reader(file, &reporter, true, 0);\n+  Slice record;\n+  std::string scratch;\n+  while (reader.ReadRecord(&record, &scratch)) {\n+    (*func)(reader.LastRecordOffset(), record, dst);\n+  }\n+  delete file;\n+  return Status::OK();\n+}\n+\n+// Called on every item found in a WriteBatch.\n+class WriteBatchItemPrinter : public WriteBatch::Handler {\n+ public:\n+  WritableFile* dst_;\n+  virtual void Put(const Slice& key, const Slice& value) {\n+    std::string r = \"  put '\";\n+    AppendEscapedStringTo(&r, key);\n+    r += \"' '\";\n+    AppendEscapedStringTo(&r, value);\n+    r += \"'\\n\";\n+    dst_->Append(r);\n+  }\n+  virtual void Delete(const Slice& key) {\n+    std::string r = \"  del '\";\n+    AppendEscapedStringTo(&r, key);\n+    r += \"'\\n\";\n+    dst_->Append(r);\n+  }\n+};\n+\n+\n+// Called on every log record (each one of which is a WriteBatch)\n+// found in a kLogFile.\n+static void WriteBatchPrinter(uint64_t pos, Slice record, WritableFile* dst) {\n+  std::string r = \"--- offset \";\n+  AppendNumberTo(&r, pos);\n+  r += \"; \";\n+  if (record.size() < 12) {\n+    r += \"log record length \";\n+    AppendNumberTo(&r, record.size());\n+    r += \" is too small\\n\";\n+    dst->Append(r);\n+    return;\n+  }\n+  WriteBatch batch;\n+  WriteBatchInternal::SetContents(&batch, record);\n+  r += \"sequence \";\n+  AppendNumberTo(&r, WriteBatchInternal::Sequence(&batch));\n+  r.push_back('\\n');\n+  dst->Append(r);\n+  WriteBatchItemPrinter batch_item_printer;\n+  batch_item_printer.dst_ = dst;\n+  Status s = batch.Iterate(&batch_item_printer);\n+  if (!s.ok()) {\n+    dst->Append(\"  error: \" + s.ToString() + \"\\n\");\n+  }\n+}\n+\n+Status DumpLog(Env* env, const std::string& fname, WritableFile* dst) {\n+  return PrintLogContents(env, fname, WriteBatchPrinter, dst);\n+}\n+\n+// Called on every log record (each one of which is a WriteBatch)\n+// found in a kDescriptorFile.\n+static void VersionEditPrinter(uint64_t pos, Slice record, WritableFile* dst) {\n+  std::string r = \"--- offset \";\n+  AppendNumberTo(&r, pos);\n+  r += \"; \";\n+  VersionEdit edit;\n+  Status s = edit.DecodeFrom(record);\n+  if (!s.ok()) {\n+    r += s.ToString();\n+    r.push_back('\\n');\n+  } else {\n+    r += edit.DebugString();\n+  }\n+  dst->Append(r);\n+}\n+\n+Status DumpDescriptor(Env* env, const std::string& fname, WritableFile* dst) {\n+  return PrintLogContents(env, fname, VersionEditPrinter, dst);\n+}\n+\n+Status DumpTable(Env* env, const std::string& fname, WritableFile* dst) {\n+  uint64_t file_size;\n+  RandomAccessFile* file = NULL;\n+  Table* table = NULL;\n+  Status s = env->GetFileSize(fname, &file_size);\n+  if (s.ok()) {\n+    s = env->NewRandomAccessFile(fname, &file);\n+  }\n+  if (s.ok()) {\n+    // We use the default comparator, which may or may not match the\n+    // comparator used in this database. However this should not cause\n+    // problems since we only use Table operations that do not require\n+    // any comparisons.  In particular, we do not call Seek or Prev.\n+    s = Table::Open(Options(), file, file_size, &table);\n+  }\n+  if (!s.ok()) {\n+    delete table;\n+    delete file;\n+    return s;\n+  }\n+\n+  ReadOptions ro;\n+  ro.fill_cache = false;\n+  Iterator* iter = table->NewIterator(ro);\n+  std::string r;\n+  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {\n+    r.clear();\n+    ParsedInternalKey key;\n+    if (!ParseInternalKey(iter->key(), &key)) {\n+      r = \"badkey '\";\n+      AppendEscapedStringTo(&r, iter->key());\n+      r += \"' => '\";\n+      AppendEscapedStringTo(&r, iter->value());\n+      r += \"'\\n\";\n+      dst->Append(r);\n+    } else {\n+      r = \"'\";\n+      AppendEscapedStringTo(&r, key.user_key);\n+      r += \"' @ \";\n+      AppendNumberTo(&r, key.sequence);\n+      r += \" : \";\n+      if (key.type == kTypeDeletion) {\n+        r += \"del\";\n+      } else if (key.type == kTypeValue) {\n+        r += \"val\";\n+      } else {\n+        AppendNumberTo(&r, key.type);\n+      }\n+      r += \" => '\";\n+      AppendEscapedStringTo(&r, iter->value());\n+      r += \"'\\n\";\n+      dst->Append(r);\n+    }\n+  }\n+  s = iter->status();\n+  if (!s.ok()) {\n+    dst->Append(\"iterator error: \" + s.ToString() + \"\\n\");\n+  }\n+\n+  delete iter;\n+  delete table;\n+  delete file;\n+  return Status::OK();\n+}\n+\n+}  // namespace\n+\n+Status DumpFile(Env* env, const std::string& fname, WritableFile* dst) {\n+  FileType ftype;\n+  if (!GuessType(fname, &ftype)) {\n+    return Status::InvalidArgument(fname + \": unknown file type\");\n+  }\n+  switch (ftype) {\n+    case kLogFile:         return DumpLog(env, fname, dst);\n+    case kDescriptorFile:  return DumpDescriptor(env, fname, dst);\n+    case kTableFile:       return DumpTable(env, fname, dst);\n+    default:\n+      break;\n+  }\n+  return Status::InvalidArgument(fname + \": not a dump-able file type\");\n+}\n+\n+}  // namespace leveldb"
      },
      {
        "sha": "9f4b7dd70c245302e9841e6a407e89659992284f",
        "filename": "src/leveldb/db/leveldb_main.cc",
        "status": "modified",
        "additions": 15,
        "deletions": 189,
        "changes": 204,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/leveldb_main.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/leveldb_main.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/leveldb_main.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -3,212 +3,38 @@\n // found in the LICENSE file. See the AUTHORS file for names of contributors.\n \n #include <stdio.h>\n-#include \"db/dbformat.h\"\n-#include \"db/filename.h\"\n-#include \"db/log_reader.h\"\n-#include \"db/version_edit.h\"\n-#include \"db/write_batch_internal.h\"\n+#include \"leveldb/dumpfile.h\"\n #include \"leveldb/env.h\"\n-#include \"leveldb/iterator.h\"\n-#include \"leveldb/options.h\"\n #include \"leveldb/status.h\"\n-#include \"leveldb/table.h\"\n-#include \"leveldb/write_batch.h\"\n-#include \"util/logging.h\"\n \n namespace leveldb {\n-\n namespace {\n \n-bool GuessType(const std::string& fname, FileType* type) {\n-  size_t pos = fname.rfind('/');\n-  std::string basename;\n-  if (pos == std::string::npos) {\n-    basename = fname;\n-  } else {\n-    basename = std::string(fname.data() + pos + 1, fname.size() - pos - 1);\n-  }\n-  uint64_t ignored;\n-  return ParseFileName(basename, &ignored, type);\n-}\n-\n-// Notified when log reader encounters corruption.\n-class CorruptionReporter : public log::Reader::Reporter {\n- public:\n-  virtual void Corruption(size_t bytes, const Status& status) {\n-    printf(\"corruption: %d bytes; %s\\n\",\n-            static_cast<int>(bytes),\n-            status.ToString().c_str());\n-  }\n-};\n-\n-// Print contents of a log file. (*func)() is called on every record.\n-bool PrintLogContents(Env* env, const std::string& fname,\n-                      void (*func)(Slice)) {\n-  SequentialFile* file;\n-  Status s = env->NewSequentialFile(fname, &file);\n-  if (!s.ok()) {\n-    fprintf(stderr, \"%s\\n\", s.ToString().c_str());\n-    return false;\n-  }\n-  CorruptionReporter reporter;\n-  log::Reader reader(file, &reporter, true, 0);\n-  Slice record;\n-  std::string scratch;\n-  while (reader.ReadRecord(&record, &scratch)) {\n-    printf(\"--- offset %llu; \",\n-           static_cast<unsigned long long>(reader.LastRecordOffset()));\n-    (*func)(record);\n-  }\n-  delete file;\n-  return true;\n-}\n-\n-// Called on every item found in a WriteBatch.\n-class WriteBatchItemPrinter : public WriteBatch::Handler {\n+class StdoutPrinter : public WritableFile {\n  public:\n-  uint64_t offset_;\n-  uint64_t sequence_;\n-\n-  virtual void Put(const Slice& key, const Slice& value) {\n-    printf(\"  put '%s' '%s'\\n\",\n-           EscapeString(key).c_str(),\n-           EscapeString(value).c_str());\n-  }\n-  virtual void Delete(const Slice& key) {\n-    printf(\"  del '%s'\\n\",\n-           EscapeString(key).c_str());\n+  virtual Status Append(const Slice& data) {\n+    fwrite(data.data(), 1, data.size(), stdout);\n+    return Status::OK();\n   }\n+  virtual Status Close() { return Status::OK(); }\n+  virtual Status Flush() { return Status::OK(); }\n+  virtual Status Sync() { return Status::OK(); }\n };\n \n-\n-// Called on every log record (each one of which is a WriteBatch)\n-// found in a kLogFile.\n-static void WriteBatchPrinter(Slice record) {\n-  if (record.size() < 12) {\n-    printf(\"log record length %d is too small\\n\",\n-           static_cast<int>(record.size()));\n-    return;\n-  }\n-  WriteBatch batch;\n-  WriteBatchInternal::SetContents(&batch, record);\n-  printf(\"sequence %llu\\n\",\n-         static_cast<unsigned long long>(WriteBatchInternal::Sequence(&batch)));\n-  WriteBatchItemPrinter batch_item_printer;\n-  Status s = batch.Iterate(&batch_item_printer);\n-  if (!s.ok()) {\n-    printf(\"  error: %s\\n\", s.ToString().c_str());\n-  }\n-}\n-\n-bool DumpLog(Env* env, const std::string& fname) {\n-  return PrintLogContents(env, fname, WriteBatchPrinter);\n-}\n-\n-// Called on every log record (each one of which is a WriteBatch)\n-// found in a kDescriptorFile.\n-static void VersionEditPrinter(Slice record) {\n-  VersionEdit edit;\n-  Status s = edit.DecodeFrom(record);\n-  if (!s.ok()) {\n-    printf(\"%s\\n\", s.ToString().c_str());\n-    return;\n-  }\n-  printf(\"%s\", edit.DebugString().c_str());\n-}\n-\n-bool DumpDescriptor(Env* env, const std::string& fname) {\n-  return PrintLogContents(env, fname, VersionEditPrinter);\n-}\n-\n-bool DumpTable(Env* env, const std::string& fname) {\n-  uint64_t file_size;\n-  RandomAccessFile* file = NULL;\n-  Table* table = NULL;\n-  Status s = env->GetFileSize(fname, &file_size);\n-  if (s.ok()) {\n-    s = env->NewRandomAccessFile(fname, &file);\n-  }\n-  if (s.ok()) {\n-    // We use the default comparator, which may or may not match the\n-    // comparator used in this database. However this should not cause\n-    // problems since we only use Table operations that do not require\n-    // any comparisons.  In particular, we do not call Seek or Prev.\n-    s = Table::Open(Options(), file, file_size, &table);\n-  }\n-  if (!s.ok()) {\n-    fprintf(stderr, \"%s\\n\", s.ToString().c_str());\n-    delete table;\n-    delete file;\n-    return false;\n-  }\n-\n-  ReadOptions ro;\n-  ro.fill_cache = false;\n-  Iterator* iter = table->NewIterator(ro);\n-  for (iter->SeekToFirst(); iter->Valid(); iter->Next()) {\n-    ParsedInternalKey key;\n-    if (!ParseInternalKey(iter->key(), &key)) {\n-      printf(\"badkey '%s' => '%s'\\n\",\n-             EscapeString(iter->key()).c_str(),\n-             EscapeString(iter->value()).c_str());\n-    } else {\n-      char kbuf[20];\n-      const char* type;\n-      if (key.type == kTypeDeletion) {\n-        type = \"del\";\n-      } else if (key.type == kTypeValue) {\n-        type = \"val\";\n-      } else {\n-        snprintf(kbuf, sizeof(kbuf), \"%d\", static_cast<int>(key.type));\n-        type = kbuf;\n-      }\n-      printf(\"'%s' @ %8llu : %s => '%s'\\n\",\n-             EscapeString(key.user_key).c_str(),\n-             static_cast<unsigned long long>(key.sequence),\n-             type,\n-             EscapeString(iter->value()).c_str());\n-    }\n-  }\n-  s = iter->status();\n-  if (!s.ok()) {\n-    printf(\"iterator error: %s\\n\", s.ToString().c_str());\n-  }\n-\n-  delete iter;\n-  delete table;\n-  delete file;\n-  return true;\n-}\n-\n-bool DumpFile(Env* env, const std::string& fname) {\n-  FileType ftype;\n-  if (!GuessType(fname, &ftype)) {\n-    fprintf(stderr, \"%s: unknown file type\\n\", fname.c_str());\n-    return false;\n-  }\n-  switch (ftype) {\n-    case kLogFile:         return DumpLog(env, fname);\n-    case kDescriptorFile:  return DumpDescriptor(env, fname);\n-    case kTableFile:       return DumpTable(env, fname);\n-\n-    default: {\n-      fprintf(stderr, \"%s: not a dump-able file type\\n\", fname.c_str());\n-      break;\n-    }\n-  }\n-  return false;\n-}\n-\n bool HandleDumpCommand(Env* env, char** files, int num) {\n+  StdoutPrinter printer;\n   bool ok = true;\n   for (int i = 0; i < num; i++) {\n-    ok &= DumpFile(env, files[i]);\n+    Status s = DumpFile(env, files[i], &printer);\n+    if (!s.ok()) {\n+      fprintf(stderr, \"%s\\n\", s.ToString().c_str());\n+      ok = false;\n+    }\n   }\n   return ok;\n }\n \n-}\n+}  // namespace\n }  // namespace leveldb\n \n static void Usage() {"
      },
      {
        "sha": "a8c06efe185ae262d3e741beaa724198bb9c9116",
        "filename": "src/leveldb/db/log_format.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/log_format.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/log_format.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/log_format.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -26,8 +26,8 @@ static const int kMaxRecordType = kLastType;\n \n static const int kBlockSize = 32768;\n \n-// Header is checksum (4 bytes), type (1 byte), length (2 bytes).\n-static const int kHeaderSize = 4 + 1 + 2;\n+// Header is checksum (4 bytes), length (2 bytes), type (1 byte).\n+static const int kHeaderSize = 4 + 2 + 1;\n \n }  // namespace log\n }  // namespace leveldb"
      },
      {
        "sha": "e44b66c85bf7c23b120e2cb5ff73d0abac037892",
        "filename": "src/leveldb/db/log_reader.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/log_reader.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/log_reader.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/log_reader.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -167,14 +167,14 @@ uint64_t Reader::LastRecordOffset() {\n   return last_record_offset_;\n }\n \n-void Reader::ReportCorruption(size_t bytes, const char* reason) {\n+void Reader::ReportCorruption(uint64_t bytes, const char* reason) {\n   ReportDrop(bytes, Status::Corruption(reason));\n }\n \n-void Reader::ReportDrop(size_t bytes, const Status& reason) {\n+void Reader::ReportDrop(uint64_t bytes, const Status& reason) {\n   if (reporter_ != NULL &&\n       end_of_buffer_offset_ - buffer_.size() - bytes >= initial_offset_) {\n-    reporter_->Corruption(bytes, reason);\n+    reporter_->Corruption(static_cast<size_t>(bytes), reason);\n   }\n }\n "
      },
      {
        "sha": "6aff7917162b73fca8fd00a3b474bcbf313a2144",
        "filename": "src/leveldb/db/log_reader.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/log_reader.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/log_reader.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/log_reader.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -94,8 +94,8 @@ class Reader {\n \n   // Reports dropped bytes to the reporter.\n   // buffer_ must be updated to remove the dropped bytes prior to invocation.\n-  void ReportCorruption(size_t bytes, const char* reason);\n-  void ReportDrop(size_t bytes, const Status& reason);\n+  void ReportCorruption(uint64_t bytes, const char* reason);\n+  void ReportDrop(uint64_t bytes, const Status& reason);\n \n   // No copying allowed\n   Reader(const Reader&);"
      },
      {
        "sha": "dcf056265297e973fde16c150e39b36ca17e5d7c",
        "filename": "src/leveldb/db/log_test.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/log_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/log_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/log_test.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -463,7 +463,7 @@ TEST(LogTest, ErrorJoinsRecords) {\n \n   ASSERT_EQ(\"correct\", Read());\n   ASSERT_EQ(\"EOF\", Read());\n-  const int dropped = DroppedBytes();\n+  const size_t dropped = DroppedBytes();\n   ASSERT_LE(dropped, 2*kBlockSize + 100);\n   ASSERT_GE(dropped, 2*kBlockSize);\n }"
      },
      {
        "sha": "4cd4bb047f483ad211a05bdd98201c6df1bfa87a",
        "filename": "src/leveldb/db/repair.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/repair.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/repair.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/repair.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -186,7 +186,7 @@ class Repairer {\n     reporter.env = env_;\n     reporter.info_log = options_.info_log;\n     reporter.lognum = log;\n-    // We intentially make log::Reader do checksumming so that\n+    // We intentionally make log::Reader do checksumming so that\n     // corruptions cause entire commits to be skipped instead of\n     // propagating bad information (like overly large sequence\n     // numbers)."
      },
      {
        "sha": "ed8b092203b689ef0f76b9a32fac773a26f0c7cc",
        "filename": "src/leveldb/db/skiplist.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/skiplist.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/skiplist.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/skiplist.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -1,3 +1,6 @@\n+#ifndef STORAGE_LEVELDB_DB_SKIPLIST_H_\n+#define STORAGE_LEVELDB_DB_SKIPLIST_H_\n+\n // Copyright (c) 2011 The LevelDB Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style license that can be\n // found in the LICENSE file. See the AUTHORS file for names of contributors.\n@@ -377,3 +380,5 @@ bool SkipList<Key,Comparator>::Contains(const Key& key) const {\n }\n \n }  // namespace leveldb\n+\n+#endif  // STORAGE_LEVELDB_DB_SKIPLIST_H_"
      },
      {
        "sha": "310a3c891220bb78dcd00bc36bddb5e3c1116361",
        "filename": "src/leveldb/db/write_batch_internal.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/write_batch_internal.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/db/write_batch_internal.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/write_batch_internal.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -21,10 +21,10 @@ class WriteBatchInternal {\n   // Set the count for the number of entries in the batch.\n   static void SetCount(WriteBatch* batch, int n);\n \n-  // Return the seqeunce number for the start of this batch.\n+  // Return the sequence number for the start of this batch.\n   static SequenceNumber Sequence(const WriteBatch* batch);\n \n-  // Store the specified number as the seqeunce number for the start of\n+  // Store the specified number as the sequence number for the start of\n   // this batch.\n   static void SetSequence(WriteBatch* batch, SequenceNumber seq);\n "
      },
      {
        "sha": "4ca381f11f354126088419a7997710a8fe37da49",
        "filename": "src/leveldb/doc/bench/db_bench_tree_db.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/doc/bench/db_bench_tree_db.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/doc/bench/db_bench_tree_db.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/doc/bench/db_bench_tree_db.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -338,7 +338,7 @@ class Benchmark {\n       bool write_sync = false;\n       if (name == Slice(\"fillseq\")) {\n         Write(write_sync, SEQUENTIAL, FRESH, num_, FLAGS_value_size, 1);\n-        \n+        DBSynchronize(db_);\n       } else if (name == Slice(\"fillrandom\")) {\n         Write(write_sync, RANDOM, FRESH, num_, FLAGS_value_size, 1);\n         DBSynchronize(db_);"
      },
      {
        "sha": "6a468be0955d921a3e7bad2d55a71989209d06ae",
        "filename": "src/leveldb/doc/impl.html",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/doc/impl.html",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/doc/impl.html",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/doc/impl.html?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -111,7 +111,7 @@ <h1>Compactions</h1>\n sequence of level-(L+1) files.  We switch to producing a new\n level-(L+1) file after the current output file has reached the target\n file size (2MB).  We also switch to a new output file when the key\n-range of the current output file has grown enough to overlap more then\n+range of the current output file has grown enough to overlap more than\n ten level-(L+2) files.  This last rule ensures that a later compaction\n of a level-(L+1) file will not pick up too much data from level-(L+2).\n \n@@ -151,7 +151,7 @@ <h2>Timing</h2>\n If we throttle the background writing to something small, say 10% of\n the full 100MB/s speed, a compaction may take up to 5 seconds.  If the\n user is writing at 10MB/s, we might build up lots of level-0 files\n-(~50 to hold the 5*10MB).  This may signficantly increase the cost of\n+(~50 to hold the 5*10MB).  This may significantly increase the cost of\n reads due to the overhead of merging more files together on every\n read.\n "
      },
      {
        "sha": "4cca5ef6ead327bc4c55d8941528f656fa68166c",
        "filename": "src/leveldb/doc/log_format.txt",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/doc/log_format.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/doc/log_format.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/doc/log_format.txt?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -11,7 +11,7 @@ Each block consists of a sequence of records:\n \n A record never starts within the last six bytes of a block (since it\n won't fit).  Any leftover bytes here form the trailer, which must\n-consist entirely of zero bytes and must be skipped by readers.  \n+consist entirely of zero bytes and must be skipped by readers.\n \n Aside: if exactly seven bytes are left in the current block, and a new\n non-zero length record is added, the writer must emit a FIRST record\n@@ -33,8 +33,8 @@ The FULL record contains the contents of an entire user record.\n FIRST, MIDDLE, LAST are types used for user records that have been\n split into multiple fragments (typically because of block boundaries).\n FIRST is the type of the first fragment of a user record, LAST is the\n-type of the last fragment of a user record, and MID is the type of all\n-interior fragments of a user record.\n+type of the last fragment of a user record, and MIDDLE is the type of\n+all interior fragments of a user record.\n \n Example: consider a sequence of user records:\n    A: length 1000"
      },
      {
        "sha": "43ef2e0729755de154c14b20c79a07ca75c760af",
        "filename": "src/leveldb/helpers/memenv/memenv.cc",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/helpers/memenv/memenv.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/helpers/memenv/memenv.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/helpers/memenv/memenv.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -55,14 +55,15 @@ class FileState {\n     }\n     const uint64_t available = size_ - offset;\n     if (n > available) {\n-      n = available;\n+      n = static_cast<size_t>(available);\n     }\n     if (n == 0) {\n       *result = Slice();\n       return Status::OK();\n     }\n \n-    size_t block = offset / kBlockSize;\n+    assert(offset / kBlockSize <= SIZE_MAX);\n+    size_t block = static_cast<size_t>(offset / kBlockSize);\n     size_t block_offset = offset % kBlockSize;\n \n     if (n <= kBlockSize - block_offset) {\n@@ -167,7 +168,7 @@ class SequentialFileImpl : public SequentialFile {\n     if (pos_ > file_->Size()) {\n       return Status::IOError(\"pos_ > file_->Size()\");\n     }\n-    const size_t available = file_->Size() - pos_;\n+    const uint64_t available = file_->Size() - pos_;\n     if (n > available) {\n       n = available;\n     }\n@@ -177,7 +178,7 @@ class SequentialFileImpl : public SequentialFile {\n \n  private:\n   FileState* file_;\n-  size_t pos_;\n+  uint64_t pos_;\n };\n \n class RandomAccessFileImpl : public RandomAccessFile {"
      },
      {
        "sha": "1a201e5e0a994aa20270e984be2cda055376c4a1",
        "filename": "src/leveldb/include/leveldb/cache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/include/leveldb/cache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/include/leveldb/cache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/include/leveldb/cache.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -96,4 +96,4 @@ class Cache {\n \n }  // namespace leveldb\n \n-#endif  // STORAGE_LEVELDB_UTIL_CACHE_H_\n+#endif  // STORAGE_LEVELDB_INCLUDE_CACHE_H_"
      },
      {
        "sha": "4c169bf22ed92ecfa3d8d6f7ef53b9b16bb9ab0a",
        "filename": "src/leveldb/include/leveldb/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/include/leveldb/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/include/leveldb/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/include/leveldb/db.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -14,7 +14,7 @@ namespace leveldb {\n \n // Update Makefile if you change these\n static const int kMajorVersion = 1;\n-static const int kMinorVersion = 17;\n+static const int kMinorVersion = 18;\n \n struct Options;\n struct ReadOptions;"
      },
      {
        "sha": "3f97fda16baa96c6d83f62cb822c8ae9438da979",
        "filename": "src/leveldb/include/leveldb/dumpfile.h",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/include/leveldb/dumpfile.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/include/leveldb/dumpfile.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/include/leveldb/dumpfile.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2014 The LevelDB Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file. See the AUTHORS file for names of contributors.\n+\n+#ifndef STORAGE_LEVELDB_INCLUDE_DUMPFILE_H_\n+#define STORAGE_LEVELDB_INCLUDE_DUMPFILE_H_\n+\n+#include <string>\n+#include \"leveldb/env.h\"\n+#include \"leveldb/status.h\"\n+\n+namespace leveldb {\n+\n+// Dump the contents of the file named by fname in text format to\n+// *dst.  Makes a sequence of dst->Append() calls; each call is passed\n+// the newline-terminated text corresponding to a single item found\n+// in the file.\n+//\n+// Returns a non-OK result if fname does not name a leveldb storage\n+// file, or if the file cannot be read.\n+Status DumpFile(Env* env, const std::string& fname, WritableFile* dst);\n+\n+}  // namespace leveldb\n+\n+#endif  // STORAGE_LEVELDB_INCLUDE_DUMPFILE_H_"
      },
      {
        "sha": "f709514da6c28dbc6ad606c445c4a68009e89e04",
        "filename": "src/leveldb/include/leveldb/env.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/include/leveldb/env.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/include/leveldb/env.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/include/leveldb/env.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -142,7 +142,7 @@ class Env {\n   // useful for computing deltas of time.\n   virtual uint64_t NowMicros() = 0;\n \n-  // Sleep/delay the thread for the perscribed number of micro-seconds.\n+  // Sleep/delay the thread for the prescribed number of micro-seconds.\n   virtual void SleepForMicroseconds(int micros) = 0;\n \n  private:"
      },
      {
        "sha": "76aced04bddf8679562f1670be99be8ac5e93124",
        "filename": "src/leveldb/include/leveldb/iterator.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/include/leveldb/iterator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/include/leveldb/iterator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/include/leveldb/iterator.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -61,7 +61,7 @@ class Iterator {\n   // Return the value for the current entry.  The underlying storage for\n   // the returned slice is valid only until the next modification of\n   // the iterator.\n-  // REQUIRES: !AtEnd() && !AtStart()\n+  // REQUIRES: Valid()\n   virtual Slice value() const = 0;\n \n   // If an error has occurred, return it.  Else return an ok status."
      },
      {
        "sha": "7c9b973454e2b10332a9b4f5d9fa0adc835aaf57",
        "filename": "src/leveldb/include/leveldb/options.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/include/leveldb/options.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/include/leveldb/options.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/include/leveldb/options.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -153,7 +153,7 @@ struct ReadOptions {\n \n   // If \"snapshot\" is non-NULL, read as of the supplied snapshot\n   // (which must belong to the DB that is being read and which must\n-  // not have been released).  If \"snapshot\" is NULL, use an impliicit\n+  // not have been released).  If \"snapshot\" is NULL, use an implicit\n   // snapshot of the state at the beginning of this read operation.\n   // Default: NULL\n   const Snapshot* snapshot;"
      },
      {
        "sha": "9bf091f757c252aa31a4a1a6750e19eb4b7030fb",
        "filename": "src/leveldb/port/atomic_pointer.h",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/port/atomic_pointer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/port/atomic_pointer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/atomic_pointer.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -5,23 +5,22 @@\n // AtomicPointer provides storage for a lock-free pointer.\n // Platform-dependent implementation of AtomicPointer:\n // - If the platform provides a cheap barrier, we use it with raw pointers\n-// - If cstdatomic is present (on newer versions of gcc, it is), we use\n-//   a cstdatomic-based AtomicPointer.  However we prefer the memory\n+// - If <atomic> is present (on newer versions of gcc, it is), we use\n+//   a <atomic>-based AtomicPointer.  However we prefer the memory\n //   barrier based version, because at least on a gcc 4.4 32-bit build\n-//   on linux, we have encountered a buggy <cstdatomic>\n-//   implementation.  Also, some <cstdatomic> implementations are much\n-//   slower than a memory-barrier based implementation (~16ns for\n-//   <cstdatomic> based acquire-load vs. ~1ns for a barrier based\n-//   acquire-load).\n+//   on linux, we have encountered a buggy <atomic> implementation.\n+//   Also, some <atomic> implementations are much slower than a memory-barrier\n+//   based implementation (~16ns for <atomic> based acquire-load vs. ~1ns for\n+//   a barrier based acquire-load).\n // This code is based on atomicops-internals-* in Google's perftools:\n // http://code.google.com/p/google-perftools/source/browse/#svn%2Ftrunk%2Fsrc%2Fbase\n \n #ifndef PORT_ATOMIC_POINTER_H_\n #define PORT_ATOMIC_POINTER_H_\n \n #include <stdint.h>\n-#ifdef LEVELDB_CSTDATOMIC_PRESENT\n-#include <cstdatomic>\n+#ifdef LEVELDB_ATOMIC_PRESENT\n+#include <atomic>\n #endif\n #ifdef OS_WIN\n #include <windows.h>\n@@ -126,7 +125,7 @@ class AtomicPointer {\n };\n \n // AtomicPointer based on <cstdatomic>\n-#elif defined(LEVELDB_CSTDATOMIC_PRESENT)\n+#elif defined(LEVELDB_ATOMIC_PRESENT)\n class AtomicPointer {\n  private:\n   std::atomic<void*> rep_;\n@@ -207,7 +206,7 @@ class AtomicPointer {\n   inline void NoBarrier_Store(void* v) { rep_ = v; }\n };\n \n-// We have neither MemoryBarrier(), nor <cstdatomic>\n+// We have neither MemoryBarrier(), nor <atomic>\n #else\n #error Please implement AtomicPointer for this platform.\n "
      },
      {
        "sha": "ccca9939d3dc6fbee3afa2d6ad54c39041b4f13f",
        "filename": "src/leveldb/port/port_posix.h",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/port/port_posix.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/port/port_posix.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/port_posix.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -21,14 +21,11 @@\n   #else\n     #define PLATFORM_IS_LITTLE_ENDIAN false\n   #endif\n-#elif defined(OS_FREEBSD)\n+#elif defined(OS_FREEBSD) || defined(OS_OPENBSD) ||\\\n+      defined(OS_NETBSD) || defined(OS_DRAGONFLYBSD)\n   #include <sys/types.h>\n   #include <sys/endian.h>\n   #define PLATFORM_IS_LITTLE_ENDIAN (_BYTE_ORDER == _LITTLE_ENDIAN)\n-#elif defined(OS_OPENBSD) || defined(OS_NETBSD) ||\\\n-      defined(OS_DRAGONFLYBSD)\n-  #include <sys/types.h>\n-  #include <sys/endian.h>\n #elif defined(OS_HPUX)\n   #define PLATFORM_IS_LITTLE_ENDIAN false\n #elif defined(OS_ANDROID)\n@@ -55,7 +52,7 @@\n \n #if defined(OS_MACOSX) || defined(OS_SOLARIS) || defined(OS_FREEBSD) ||\\\n     defined(OS_NETBSD) || defined(OS_OPENBSD) || defined(OS_DRAGONFLYBSD) ||\\\n-    defined(OS_ANDROID) || defined(OS_HPUX)\n+    defined(OS_ANDROID) || defined(OS_HPUX) || defined(CYGWIN)\n // Use fread/fwrite/fflush on platforms without _unlocked variants\n #define fread_unlocked fread\n #define fwrite_unlocked fwrite"
      },
      {
        "sha": "9470ef587c9496fff4804f64c4a94dbd7c268671",
        "filename": "src/leveldb/port/thread_annotations.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/port/thread_annotations.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/port/thread_annotations.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/port/thread_annotations.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -2,7 +2,8 @@\n // Use of this source code is governed by a BSD-style license that can be\n // found in the LICENSE file. See the AUTHORS file for names of contributors.\n \n-#ifndef STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H\n+#ifndef STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H_\n+#define STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H_\n \n // Some environments provide custom macros to aid in static thread-safety\n // analysis.  Provide empty definitions of such macros unless they are already\n@@ -56,4 +57,4 @@\n #define NO_THREAD_SAFETY_ANALYSIS\n #endif\n \n-#endif  // STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H\n+#endif  // STORAGE_LEVELDB_PORT_THREAD_ANNOTATIONS_H_"
      },
      {
        "sha": "43e402c9c07acc5c6e009f1e3c5666169557a118",
        "filename": "src/leveldb/table/block.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/table/block.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/table/block.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/block.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -46,7 +46,7 @@ Block::~Block() {\n // Helper routine: decode the next block entry starting at \"p\",\n // storing the number of shared key bytes, non_shared key bytes,\n // and the length of the value in \"*shared\", \"*non_shared\", and\n-// \"*value_length\", respectively.  Will not derefence past \"limit\".\n+// \"*value_length\", respectively.  Will not dereference past \"limit\".\n //\n // If any errors are detected, returns NULL.  Otherwise, returns a\n // pointer to the key delta (just past the three decoded values)."
      },
      {
        "sha": "4fbcb33972fd77c47e6aaa8621e0000858297dbe",
        "filename": "src/leveldb/table/block_builder.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/table/block_builder.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/table/block_builder.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/block_builder.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -21,7 +21,7 @@ class BlockBuilder {\n   // Reset the contents as if the BlockBuilder was just constructed.\n   void Reset();\n \n-  // REQUIRES: Finish() has not been callled since the last call to Reset().\n+  // REQUIRES: Finish() has not been called since the last call to Reset().\n   // REQUIRES: key is larger than any previously added key\n   void Add(const Slice& key, const Slice& value);\n "
      },
      {
        "sha": "aa63144c9e7a7e0e98bd4b1bddcf745f0efbccc5",
        "filename": "src/leveldb/table/format.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/table/format.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/table/format.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/format.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -48,7 +48,7 @@ Status Footer::DecodeFrom(Slice* input) {\n   const uint64_t magic = ((static_cast<uint64_t>(magic_hi) << 32) |\n                           (static_cast<uint64_t>(magic_lo)));\n   if (magic != kTableMagicNumber) {\n-    return Status::InvalidArgument(\"not an sstable (bad magic number)\");\n+    return Status::Corruption(\"not an sstable (bad magic number)\");\n   }\n \n   Status result = metaindex_handle_.DecodeFrom(input);"
      },
      {
        "sha": "dff8a82590a63ace8f3ed0d820ad3d19b2175783",
        "filename": "src/leveldb/table/table.cc",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/table/table.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/table/table.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/table/table.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -41,7 +41,7 @@ Status Table::Open(const Options& options,\n                    Table** table) {\n   *table = NULL;\n   if (size < Footer::kEncodedLength) {\n-    return Status::InvalidArgument(\"file is too short to be an sstable\");\n+    return Status::Corruption(\"file is too short to be an sstable\");\n   }\n \n   char footer_space[Footer::kEncodedLength];\n@@ -58,7 +58,11 @@ Status Table::Open(const Options& options,\n   BlockContents contents;\n   Block* index_block = NULL;\n   if (s.ok()) {\n-    s = ReadBlock(file, ReadOptions(), footer.index_handle(), &contents);\n+    ReadOptions opt;\n+    if (options.paranoid_checks) {\n+      opt.verify_checksums = true;\n+    }\n+    s = ReadBlock(file, opt, footer.index_handle(), &contents);\n     if (s.ok()) {\n       index_block = new Block(contents);\n     }\n@@ -92,6 +96,9 @@ void Table::ReadMeta(const Footer& footer) {\n   // TODO(sanjay): Skip this if footer.metaindex_handle() size indicates\n   // it is an empty block.\n   ReadOptions opt;\n+  if (rep_->options.paranoid_checks) {\n+    opt.verify_checksums = true;\n+  }\n   BlockContents contents;\n   if (!ReadBlock(rep_->file, opt, footer.metaindex_handle(), &contents).ok()) {\n     // Do not propagate errors since meta info is not needed for operation\n@@ -120,6 +127,9 @@ void Table::ReadFilter(const Slice& filter_handle_value) {\n   // We might want to unify with ReadBlock() if we start\n   // requiring checksum verification in Table::Open.\n   ReadOptions opt;\n+  if (rep_->options.paranoid_checks) {\n+    opt.verify_checksums = true;\n+  }\n   BlockContents block;\n   if (!ReadBlock(rep_->file, opt, filter_handle, &block).ok()) {\n     return;"
      },
      {
        "sha": "a27a2ace2886860ae6606fef397506b7588dff9c",
        "filename": "src/leveldb/util/bloom.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/util/bloom.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/util/bloom.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/bloom.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -29,7 +29,7 @@ class BloomFilterPolicy : public FilterPolicy {\n   }\n \n   virtual const char* Name() const {\n-    return \"leveldb.BuiltinBloomFilter\";\n+    return \"leveldb.BuiltinBloomFilter2\";\n   }\n \n   virtual void CreateFilter(const Slice* keys, int n, std::string* dst) const {"
      },
      {
        "sha": "ba2667864acb00ce5999b5aceb6fd5d98510054d",
        "filename": "src/leveldb/util/env_posix.cc",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_posix.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -3,8 +3,6 @@\n // found in the LICENSE file. See the AUTHORS file for names of contributors.\n #if !defined(LEVELDB_PLATFORM_WINDOWS)\n \n-#include <deque>\n-#include <set>\n #include <dirent.h>\n #include <errno.h>\n #include <fcntl.h>\n@@ -18,9 +16,8 @@\n #include <sys/types.h>\n #include <time.h>\n #include <unistd.h>\n-#if defined(LEVELDB_PLATFORM_ANDROID)\n-#include <sys/stat.h>\n-#endif\n+#include <deque>\n+#include <set>\n #include \"leveldb/env.h\"\n #include \"leveldb/slice.h\"\n #include \"port/port.h\"\n@@ -296,7 +293,8 @@ class PosixEnv : public Env {\n  public:\n   PosixEnv();\n   virtual ~PosixEnv() {\n-    fprintf(stderr, \"Destroying Env::Default()\\n\");\n+    char msg[] = \"Destroying Env::Default()\\n\";\n+    fwrite(msg, 1, sizeof(msg), stderr);\n     abort();\n   }\n "
      },
      {
        "sha": "ed439ce7a2ad204da4c5f3898fc09d99dea559c9",
        "filename": "src/leveldb/util/hash.cc",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/util/hash.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/util/hash.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/hash.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -34,13 +34,13 @@ uint32_t Hash(const char* data, size_t n, uint32_t seed) {\n   // Pick up remaining bytes\n   switch (limit - data) {\n     case 3:\n-      h += data[2] << 16;\n+      h += static_cast<unsigned char>(data[2]) << 16;\n       FALLTHROUGH_INTENDED;\n     case 2:\n-      h += data[1] << 8;\n+      h += static_cast<unsigned char>(data[1]) << 8;\n       FALLTHROUGH_INTENDED;\n     case 1:\n-      h += data[0];\n+      h += static_cast<unsigned char>(data[0]);\n       h *= m;\n       h ^= (h >> r);\n       break;"
      },
      {
        "sha": "eaa1c92c23240cfb1bc097621f760b1174182212",
        "filename": "src/leveldb/util/hash_test.cc",
        "status": "added",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/util/hash_test.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/util/hash_test.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/hash_test.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -0,0 +1,54 @@\n+// Copyright (c) 2011 The LevelDB Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file. See the AUTHORS file for names of contributors.\n+\n+#include \"util/hash.h\"\n+#include \"util/testharness.h\"\n+\n+namespace leveldb {\n+\n+class HASH { };\n+\n+TEST(HASH, SignedUnsignedIssue) {\n+  const unsigned char data1[1] = {0x62};\n+  const unsigned char data2[2] = {0xc3, 0x97};\n+  const unsigned char data3[3] = {0xe2, 0x99, 0xa5};\n+  const unsigned char data4[4] = {0xe1, 0x80, 0xb9, 0x32};\n+  const unsigned char data5[48] = {\n+    0x01, 0xc0, 0x00, 0x00,\n+    0x00, 0x00, 0x00, 0x00,\n+    0x00, 0x00, 0x00, 0x00,\n+    0x00, 0x00, 0x00, 0x00,\n+    0x14, 0x00, 0x00, 0x00,\n+    0x00, 0x00, 0x04, 0x00,\n+    0x00, 0x00, 0x00, 0x14,\n+    0x00, 0x00, 0x00, 0x18,\n+    0x28, 0x00, 0x00, 0x00,\n+    0x00, 0x00, 0x00, 0x00,\n+    0x02, 0x00, 0x00, 0x00,\n+    0x00, 0x00, 0x00, 0x00,\n+  };\n+\n+  ASSERT_EQ(Hash(0, 0, 0xbc9f1d34), 0xbc9f1d34);\n+  ASSERT_EQ(\n+      Hash(reinterpret_cast<const char*>(data1), sizeof(data1), 0xbc9f1d34),\n+      0xef1345c4);\n+  ASSERT_EQ(\n+      Hash(reinterpret_cast<const char*>(data2), sizeof(data2), 0xbc9f1d34),\n+      0x5b663814);\n+  ASSERT_EQ(\n+      Hash(reinterpret_cast<const char*>(data3), sizeof(data3), 0xbc9f1d34),\n+      0x323c078f);\n+  ASSERT_EQ(\n+      Hash(reinterpret_cast<const char*>(data4), sizeof(data4), 0xbc9f1d34),\n+      0xed21633a);\n+  ASSERT_EQ(\n+      Hash(reinterpret_cast<const char*>(data5), sizeof(data5), 0x12345678),\n+      0xf333dabb);\n+}\n+\n+}  // namespace leveldb\n+\n+int main(int argc, char** argv) {\n+  return leveldb::test::RunAllTests();\n+}"
      },
      {
        "sha": "ca6b3244038ec21bb7aacc2447e8593c79d48b4f",
        "filename": "src/leveldb/util/logging.cc",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/util/logging.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/util/logging.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/logging.cc?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -45,15 +45,6 @@ std::string EscapeString(const Slice& value) {\n   return r;\n }\n \n-bool ConsumeChar(Slice* in, char c) {\n-  if (!in->empty() && (*in)[0] == c) {\n-    in->remove_prefix(1);\n-    return true;\n-  } else {\n-    return false;\n-  }\n-}\n-\n bool ConsumeDecimalNumber(Slice* in, uint64_t* val) {\n   uint64_t v = 0;\n   int digits = 0;"
      },
      {
        "sha": "1b450d2480e60d53b6e6454038b9e757df03946c",
        "filename": "src/leveldb/util/logging.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/util/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2/src/leveldb/util/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/logging.h?ref=5b9f8425a515739e2149bf5bfb2ae6ed60bfbaf2",
        "patch": "@@ -32,10 +32,6 @@ extern std::string NumberToString(uint64_t num);\n // Escapes any non-printable characters found in \"value\".\n extern std::string EscapeString(const Slice& value);\n \n-// If *in starts with \"c\", advances *in past the first character and\n-// returns true.  Otherwise, returns false.\n-extern bool ConsumeChar(Slice* in, char c);\n-\n // Parse a human-readable number from \"*in\" into *value.  On success,\n // advances \"*in\" past the consumed number and sets \"*val\" to the\n // numeric value.  Otherwise, returns false and leaves *in in an"
      }
    ]
  }
]