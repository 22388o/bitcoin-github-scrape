[
  {
    "sha": "62d50ef3085c48788d32b4918dc189f9a6c997d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmQ1MGVmMzA4NWM0ODc4OGQzMmI0OTE4ZGMxODlmOWE2Yzk5N2Q3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-07T08:07:09Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2019-05-08T08:31:54Z"
      },
      "message": "Add LOCKS_EXCLUDED(cs_main) to LimitValidationInterfaceQueue(...) which does AssertLockNotHeld(cs_main)\n\nAdd LOCKS_EXCLUDED(cs_main) to functions calling LimitValidationInterfaceQueue(...) which does AssertLockNotHeld(cs_main)\n\nAdd LOCKS_EXCLUDED(cs_main) to functions calling CChainState::InvalidateBlock(...) which calls LimitValidationInterfaceQueue(...) which in turn does AssertLockNotHeld(cs_main)\n\nAdd LOCKS_EXCLUDED(cs_main) to functions calling CChainState::RewindBlockIndex(...) which calls LimitValidationInterfaceQueue(...) which in turn does AssertLockNotHeld(cs_main)",
      "tree": {
        "sha": "07b73cbf1a18075c9e12949e84ff71b7d3f2339a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07b73cbf1a18075c9e12949e84ff71b7d3f2339a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62d50ef3085c48788d32b4918dc189f9a6c997d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62d50ef3085c48788d32b4918dc189f9a6c997d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62d50ef3085c48788d32b4918dc189f9a6c997d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62d50ef3085c48788d32b4918dc189f9a6c997d7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3632143ebbfdd4888571db800c8ee8d684eec57b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3632143ebbfdd4888571db800c8ee8d684eec57b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3632143ebbfdd4888571db800c8ee8d684eec57b"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "a6550f98e5ec0b643a204e2e15f5a6e1ea016628",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62d50ef3085c48788d32b4918dc189f9a6c997d7/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62d50ef3085c48788d32b4918dc189f9a6c997d7/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=62d50ef3085c48788d32b4918dc189f9a6c997d7",
        "patch": "@@ -164,7 +164,7 @@ class CChainState {\n \n     bool LoadBlockIndex(const Consensus::Params& consensus_params, CBlockTreeDB& blocktree) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-    bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock);\n+    bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) LOCKS_EXCLUDED(cs_main);\n \n     /**\n      * If a block header hasn't already been seen, call CheckBlockHeader on it, ensure\n@@ -183,11 +183,11 @@ class CChainState {\n \n     // Manual block validity manipulation:\n     bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n-    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex);\n+    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n     void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n-    bool RewindBlockIndex(const CChainParams& params);\n+    bool RewindBlockIndex(const CChainParams& params) LOCKS_EXCLUDED(cs_main);\n     bool LoadGenesisBlock(const CChainParams& chainparams);\n \n     void PruneBlockIndexCandidates();\n@@ -2648,7 +2648,7 @@ static void NotifyHeaderTip() LOCKS_EXCLUDED(cs_main) {\n     }\n }\n \n-static void LimitValidationInterfaceQueue() {\n+static void LimitValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main) {\n     AssertLockNotHeld(cs_main);\n \n     if (GetMainSignals().CallbacksPending() > 10) {"
      },
      {
        "sha": "bc32f45e25b2f597ccea35a43d9e357f714d3374",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62d50ef3085c48788d32b4918dc189f9a6c997d7/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62d50ef3085c48788d32b4918dc189f9a6c997d7/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=62d50ef3085c48788d32b4918dc189f9a6c997d7",
        "patch": "@@ -393,7 +393,7 @@ bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& pa\n bool IsNullDummyEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n \n /** When there are blocks in the active chain with missing data, rewind the chainstate and remove them from the block index */\n-bool RewindBlockIndex(const CChainParams& params);\n+bool RewindBlockIndex(const CChainParams& params) LOCKS_EXCLUDED(cs_main);\n \n /** Update uncommitted block structures (currently: only the witness reserved value). This is safe for submitted blocks. */\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n@@ -430,7 +430,7 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) LOCKS_EXCLUDED(cs_main);\n \n /** Mark a block as invalid. */\n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex);\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n \n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      }
    ]
  }
]