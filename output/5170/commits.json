[
  {
    "sha": "22c4272bf4ea04689fc0ea08e637caa46ba12c98",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmM0MjcyYmY0ZWEwNDY4OWZjMGVhMDhlNjM3Y2FhNDZiYTEyYzk4",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-21T23:31:01Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-29T20:00:05Z"
      },
      "message": "MOVEONLY: Move void UpdateTime() from pow.o to miner.o (plus fix include main.h -> chain.h)",
      "tree": {
        "sha": "d3df14ade9168c18687d9a769ba62c328611ad6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d3df14ade9168c18687d9a769ba62c328611ad6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22c4272bf4ea04689fc0ea08e637caa46ba12c98",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22c4272bf4ea04689fc0ea08e637caa46ba12c98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22c4272bf4ea04689fc0ea08e637caa46ba12c98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22c4272bf4ea04689fc0ea08e637caa46ba12c98/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "723c7526368badda15df8ac1ffc047a0ab2e384a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723c7526368badda15df8ac1ffc047a0ab2e384a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/723c7526368badda15df8ac1ffc047a0ab2e384a"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "d3bbc6235ecfc2f31da2d040d5b1b21d97b15c1f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22c4272bf4ea04689fc0ea08e637caa46ba12c98/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22c4272bf4ea04689fc0ea08e637caa46ba12c98/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=22c4272bf4ea04689fc0ea08e637caa46ba12c98",
        "patch": "@@ -12,6 +12,7 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"pow.h\"\n+#include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #ifdef ENABLE_WALLET\n@@ -78,6 +79,15 @@ class TxPriorityCompare\n     }\n };\n \n+void UpdateTime(CBlockHeader* pblock, const CBlockIndex* pindexPrev)\n+{\n+    pblock->nTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n+\n+    // Updating time can change work required on testnet:\n+    if (Params().AllowMinDifficultyBlocks())\n+        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock);\n+}\n+\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n     // Create new block"
      },
      {
        "sha": "aede0e6d4b06b4a1e3f31c3c39b1282f478fbb2c",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22c4272bf4ea04689fc0ea08e637caa46ba12c98/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22c4272bf4ea04689fc0ea08e637caa46ba12c98/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=22c4272bf4ea04689fc0ea08e637caa46ba12c98",
        "patch": "@@ -9,6 +9,7 @@\n #include <stdint.h>\n \n class CBlock;\n+class CBlockHeader;\n class CBlockIndex;\n class CReserveKey;\n class CScript;\n@@ -25,6 +26,7 @@ CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n /** Check mined block */\n bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);\n+void UpdateTime(CBlockHeader* block, const CBlockIndex* pindexPrev);\n \n extern double dHashesPerSec;\n extern int64_t nHPSTimerStart;"
      },
      {
        "sha": "483122a76a89dbe4768d149ad93967b12b9ed022",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22c4272bf4ea04689fc0ea08e637caa46ba12c98/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22c4272bf4ea04689fc0ea08e637caa46ba12c98/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=22c4272bf4ea04689fc0ea08e637caa46ba12c98",
        "patch": "@@ -5,10 +5,9 @@\n \n #include \"pow.h\"\n \n+#include \"chain.h\"\n #include \"chainparams.h\"\n #include \"core/block.h\"\n-#include \"main.h\"\n-#include \"timedata.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n@@ -98,15 +97,6 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     return true;\n }\n \n-void UpdateTime(CBlockHeader* pblock, const CBlockIndex* pindexPrev)\n-{\n-    pblock->nTime = std::max(pindexPrev->GetMedianTimePast()+1, GetAdjustedTime());\n-\n-    // Updating time can change work required on testnet:\n-    if (Params().AllowMinDifficultyBlocks())\n-        pblock->nBits = GetNextWorkRequired(pindexPrev, pblock);\n-}\n-\n uint256 GetProofIncrement(unsigned int nBits)\n {\n     uint256 bnTarget;"
      },
      {
        "sha": "9ee6ce44d6f8ccf1ae0e1162eefbc2783d6ffa04",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22c4272bf4ea04689fc0ea08e637caa46ba12c98/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22c4272bf4ea04689fc0ea08e637caa46ba12c98/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=22c4272bf4ea04689fc0ea08e637caa46ba12c98",
        "patch": "@@ -17,8 +17,6 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n \n-void UpdateTime(CBlockHeader* block, const CBlockIndex* pindexPrev);\n-\n uint256 GetProofIncrement(unsigned int nBits);\n \n #endif // BITCOIN_POW_H"
      }
    ]
  },
  {
    "sha": "092b58d13d658baebbf03a6d5209f368f19e50a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTJiNThkMTNkNjU4YmFlYmJmMDNhNmQ1MjA5ZjM2OGYxOWU1MGE4",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-29T16:00:02Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@blockstream.io",
        "date": "2014-10-29T20:01:07Z"
      },
      "message": "CBlockIndex::GetBlockWork() + GetProofIncrement(nBits) -> GetBlockProof(CBlockIndex)",
      "tree": {
        "sha": "bce476eeb459762977a5677b96d71f530f04f53a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bce476eeb459762977a5677b96d71f530f04f53a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/092b58d13d658baebbf03a6d5209f368f19e50a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/092b58d13d658baebbf03a6d5209f368f19e50a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/092b58d13d658baebbf03a6d5209f368f19e50a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/092b58d13d658baebbf03a6d5209f368f19e50a8/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22c4272bf4ea04689fc0ea08e637caa46ba12c98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22c4272bf4ea04689fc0ea08e637caa46ba12c98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22c4272bf4ea04689fc0ea08e637caa46ba12c98"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 7,
      "deletions": 13
    },
    "files": [
      {
        "sha": "0f513019d0ca0a62e58b23d210bd445bf36d47ca",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/092b58d13d658baebbf03a6d5209f368f19e50a8/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/092b58d13d658baebbf03a6d5209f368f19e50a8/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=092b58d13d658baebbf03a6d5209f368f19e50a8",
        "patch": "@@ -217,11 +217,6 @@ class CBlockIndex\n         return (int64_t)nTime;\n     }\n \n-    uint256 GetBlockWork() const\n-    {\n-        return GetProofIncrement(nBits);\n-    }\n-\n     enum { nMedianTimeSpan=11 };\n \n     int64_t GetMedianTimePast() const"
      },
      {
        "sha": "0ac23ab876006a16e91a5ef155208eabe78fafd7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/092b58d13d658baebbf03a6d5209f368f19e50a8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/092b58d13d658baebbf03a6d5209f368f19e50a8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=092b58d13d658baebbf03a6d5209f368f19e50a8",
        "patch": "@@ -1205,7 +1205,7 @@ void CheckForkWarningConditions()\n     if (pindexBestForkTip && chainActive.Height() - pindexBestForkTip->nHeight >= 72)\n         pindexBestForkTip = NULL;\n \n-    if (pindexBestForkTip || (pindexBestInvalid && pindexBestInvalid->nChainWork > chainActive.Tip()->nChainWork + (chainActive.Tip()->GetBlockWork() * 6)))\n+    if (pindexBestForkTip || (pindexBestInvalid && pindexBestInvalid->nChainWork > chainActive.Tip()->nChainWork + (GetBlockProof(*chainActive.Tip()) * 6)))\n     {\n         if (!fLargeWorkForkFound)\n         {\n@@ -1256,7 +1256,7 @@ void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n     // We define it this way because it allows us to only store the highest fork tip (+ base) which meets\n     // the 7-block condition and from this always have the most-likely-to-cause-warning fork\n     if (pfork && (!pindexBestForkTip || (pindexBestForkTip && pindexNewForkTip->nHeight > pindexBestForkTip->nHeight)) &&\n-            pindexNewForkTip->nChainWork - pfork->nChainWork > (pfork->GetBlockWork() * 7) &&\n+            pindexNewForkTip->nChainWork - pfork->nChainWork > (GetBlockProof(*pfork) * 7) &&\n             chainActive.Height() - pindexNewForkTip->nHeight < 72)\n     {\n         pindexBestForkTip = pindexNewForkTip;\n@@ -2095,7 +2095,7 @@ CBlockIndex* AddToBlockIndex(const CBlockHeader& block)\n         pindexNew->nHeight = pindexNew->pprev->nHeight + 1;\n         pindexNew->BuildSkip();\n     }\n-    pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + pindexNew->GetBlockWork();\n+    pindexNew->nChainWork = (pindexNew->pprev ? pindexNew->pprev->nChainWork : 0) + GetBlockProof(*pindexNew);\n     pindexNew->RaiseValidity(BLOCK_VALID_TREE);\n     if (pindexBestHeader == NULL || pindexBestHeader->nChainWork < pindexNew->nChainWork)\n         pindexBestHeader = pindexNew;\n@@ -2788,7 +2788,7 @@ bool static LoadBlockIndexDB()\n     BOOST_FOREACH(const PAIRTYPE(int, CBlockIndex*)& item, vSortedByHeight)\n     {\n         CBlockIndex* pindex = item.second;\n-        pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + pindex->GetBlockWork();\n+        pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         if (pindex->nStatus & BLOCK_HAVE_DATA) {\n             if (pindex->pprev) {\n                 if (pindex->pprev->nChainTx) {"
      },
      {
        "sha": "e07e7ff7702dbe0591d0d5197d70255089537750",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/092b58d13d658baebbf03a6d5209f368f19e50a8/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/092b58d13d658baebbf03a6d5209f368f19e50a8/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=092b58d13d658baebbf03a6d5209f368f19e50a8",
        "patch": "@@ -97,12 +97,12 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n     return true;\n }\n \n-uint256 GetProofIncrement(unsigned int nBits)\n+uint256 GetBlockProof(const CBlockIndex& block)\n {\n     uint256 bnTarget;\n     bool fNegative;\n     bool fOverflow;\n-    bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n+    bnTarget.SetCompact(block.nBits, &fNegative, &fOverflow);\n     if (fNegative || fOverflow || bnTarget == 0)\n         return 0;\n     // We need to compute 2**256 / (bnTarget+1), but we can't represent 2**256"
      },
      {
        "sha": "cf28656bd8af8ac61209853abfa010f2fe2d2b88",
        "filename": "src/pow.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/092b58d13d658baebbf03a6d5209f368f19e50a8/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/092b58d13d658baebbf03a6d5209f368f19e50a8/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=092b58d13d658baebbf03a6d5209f368f19e50a8",
        "patch": "@@ -16,7 +16,6 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n \n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n-\n-uint256 GetProofIncrement(unsigned int nBits);\n+uint256 GetBlockProof(const CBlockIndex& block);\n \n #endif // BITCOIN_POW_H"
      }
    ]
  }
]