[
  {
    "sha": "23f1760c599dd64a3ee69d9a073b1cc33ab558ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2YxNzYwYzU5OWRkNjRhM2VlNjlkOWEwNzNiMWNjMzNhYjU1OGFi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-05T22:37:22Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-06T09:13:10Z"
      },
      "message": "Add GetBlockIndex(const uint256& hash) for when the caller assumes the block index exists for the given block hash",
      "tree": {
        "sha": "aee013fefb44847364f5b94f0e412b682ea2940a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aee013fefb44847364f5b94f0e412b682ea2940a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23f1760c599dd64a3ee69d9a073b1cc33ab558ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23f1760c599dd64a3ee69d9a073b1cc33ab558ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23f1760c599dd64a3ee69d9a073b1cc33ab558ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23f1760c599dd64a3ee69d9a073b1cc33ab558ab/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f0c6a7b0e47e03f848dc992d37fe209dd9c6975",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f0c6a7b0e47e03f848dc992d37fe209dd9c6975",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f0c6a7b0e47e03f848dc992d37fe209dd9c6975"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 29,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ec23bb6f370ddbe54746000ea71c323e5e956e70",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23f1760c599dd64a3ee69d9a073b1cc33ab558ab/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23f1760c599dd64a3ee69d9a073b1cc33ab558ab/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=23f1760c599dd64a3ee69d9a073b1cc33ab558ab",
        "patch": "@@ -859,7 +859,7 @@ static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     stats.hashBlock = pcursor->GetBestBlock();\n     {\n         LOCK(cs_main);\n-        stats.nHeight = LookupBlockIndex(stats.hashBlock)->nHeight;\n+        stats.nHeight = GetBlockIndex(stats.hashBlock)->nHeight;\n     }\n     ss << stats.hashBlock;\n     uint256 prevkey;\n@@ -1042,7 +1042,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n         }\n     }\n \n-    const CBlockIndex* pindex = LookupBlockIndex(pcoinsTip->GetBestBlock());\n+    const CBlockIndex* pindex = GetBlockIndex(pcoinsTip->GetBestBlock());\n     ret.pushKV(\"bestblock\", pindex->GetBlockHash().GetHex());\n     if (coin.nHeight == MEMPOOL_HEIGHT) {\n         ret.pushKV(\"confirmations\", 0);"
      },
      {
        "sha": "8d8989d279615cdda1fad2bb08a2ab6473d9ea0b",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23f1760c599dd64a3ee69d9a073b1cc33ab558ab/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23f1760c599dd64a3ee69d9a073b1cc33ab558ab/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=23f1760c599dd64a3ee69d9a073b1cc33ab558ab",
        "patch": "@@ -1322,7 +1322,7 @@ bool CScriptCheck::operator()() {\n int GetSpendHeight(const CCoinsViewCache& inputs)\n {\n     LOCK(cs_main);\n-    CBlockIndex* pindexPrev = LookupBlockIndex(inputs.GetBestBlock());\n+    CBlockIndex* pindexPrev = GetBlockIndex(inputs.GetBestBlock());\n     return pindexPrev->nHeight + 1;\n }\n "
      },
      {
        "sha": "8c276a69f1627781e428d45d77de0619c3678465",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23f1760c599dd64a3ee69d9a073b1cc33ab558ab/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23f1760c599dd64a3ee69d9a073b1cc33ab558ab/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=23f1760c599dd64a3ee69d9a073b1cc33ab558ab",
        "patch": "@@ -430,13 +430,38 @@ class CVerifyDB {\n /** Replay blocks that aren't fully applied to the database. */\n bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n \n+/** Find and retrieve the block index for the given block hash.\n+ *  The caller must check if the block index is valid. If the block index\n+ *  always exists then use GetBlockIndex instead.\n+ *  Call with cs_main held.\n+ *\n+ *  @param[in] hash The block hash\n+ *  @return The block index pointer if found, nullptr otherwise\n+ *  @see GetBlockIndex\n+ */\n inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n {\n     AssertLockHeld(cs_main);\n     BlockMap::const_iterator it = mapBlockIndex.find(hash);\n     return it == mapBlockIndex.end() ? nullptr : it->second;\n }\n \n+/** Retrieve the block index for the given block hash.\n+ *  The block index must exists otherwise an assertion fails. If the block index\n+ *  can not exist then use LookupBlockIndex instead.\n+ *  Call with cs_main held.\n+ *\n+ *  @param[in] hash The block hash\n+ *  @return The block index pointer\n+ *  @see LookupBlockIndex\n+ */\n+inline CBlockIndex* GetBlockIndex(const uint256& hash)\n+{\n+    CBlockIndex* index = LookupBlockIndex(hash);\n+    assert(index);\n+    return index;\n+}\n+\n /** Find the last common block between the parameter chain and a locator. */\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n "
      },
      {
        "sha": "5e9e449c7bae41c183a2c296c95336e31c2bf439",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23f1760c599dd64a3ee69d9a073b1cc33ab558ab/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23f1760c599dd64a3ee69d9a073b1cc33ab558ab/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=23f1760c599dd64a3ee69d9a073b1cc33ab558ab",
        "patch": "@@ -95,7 +95,7 @@ void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n     {\n         entry.pushKV(\"blockhash\", wtx.hashBlock.GetHex());\n         entry.pushKV(\"blockindex\", wtx.nIndex);\n-        entry.pushKV(\"blocktime\", LookupBlockIndex(wtx.hashBlock)->GetBlockTime());\n+        entry.pushKV(\"blocktime\", GetBlockIndex(wtx.hashBlock)->GetBlockTime());\n     } else {\n         entry.pushKV(\"trusted\", wtx.IsTrusted());\n     }"
      }
    ]
  }
]