promag,2020-08-31 15:03:22,Correct me if I'm wrong but `m_node.mempool` is always set right?,https://github.com/bitcoin/bitcoin/pull/19848#issuecomment-683836059,683836059,
MarcoFalke,2020-08-31 15:08:42,"https://github.com/bitcoin/bitcoin/blob/068bc211881c790225e9979eb16ce4f44fb64e01/src/init.cpp#L1374\n\nCurrently it will be set during init until shortly before shutdown is done. Though, in the future it may be nullptr for the whole runtime of the program (see also https://github.com/bitcoin/bitcoin/pull/19629#issuecomment-666587078)",https://github.com/bitcoin/bitcoin/pull/19848#issuecomment-683839218,683839218,
DrahtBot,2020-08-31 16:55:09,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19872 (Avoid locking CTxMemPool::cs recursively in some cases by hebasto)\n* #19572 (ZMQ: Create ""sequence"" notifier, ena",https://github.com/bitcoin/bitcoin/pull/19848#issuecomment-683902144,683902144,
hebasto,2020-08-31 17:42:36,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19848#issuecomment-683926993,683926993,
practicalswift,2020-08-31 19:09:09,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19848#issuecomment-683974176,683974176,
jnewbery,2020-09-02 08:31:34,utACK fa5fa7e025164f9ac73741ece697e3ea4e7ed64c,https://github.com/bitcoin/bitcoin/pull/19848#issuecomment-685443679,685443679,
MarcoFalke,2020-09-03 08:08:06,Changed the first commit to remove `NO_THREAD_SAFETY_ANALYSIS`. Let me know if this is better or if I should revert to the initial version.,https://github.com/bitcoin/bitcoin/pull/19848#issuecomment-686328397,686328397,
MarcoFalke,2020-09-04 06:48:13,fixed up and force pushed last doc commit,https://github.com/bitcoin/bitcoin/pull/19848#issuecomment-686950471,686950471,
MarcoFalke,2020-09-05 09:49:06,"Changed first commit according to feedback.\n\n![Untitled png](https://user-images.githubusercontent.com/6399679/92302614-c68fad80-ef6d-11ea-8b27-fd19fb9cd458.jpg)\n",https://github.com/bitcoin/bitcoin/pull/19848#issuecomment-687581401,687581401,
jnewbery,2020-09-05 10:13:07,utACK fa9ee52556,https://github.com/bitcoin/bitcoin/pull/19848#issuecomment-687584485,687584485,
hebasto,2020-09-02 17:02:12,"Could we avoid:\n- adding new `NO_THREAD_SAFETY_ANALYSIS`\n- conditional `AssertLockHeld()`: https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#no-conditionally-held-locks\n\n?",https://github.com/bitcoin/bitcoin/pull/19848#discussion_r482224795,482224795,src/policy/rbf.cpp
MarcoFalke,2020-09-03 08:08:23,Fixed,https://github.com/bitcoin/bitcoin/pull/19848#discussion_r482788967,482788967,src/policy/rbf.cpp
hebasto,2020-09-03 18:38:56,"This comment lacks `FINAL` value description: https://github.com/bitcoin/bitcoin/blob/fa9124d93527fd5ff741000b790a3772f2961a52/src/policy/rbf.cpp#L37\n",https://github.com/bitcoin/bitcoin/pull/19848#discussion_r483181278,483181278,src/policy/rbf.h
MarcoFalke,2020-09-04 06:47:49,"It wasn't the goal to document `RBFTransactionState`, but since you asked for it, I've done that",https://github.com/bitcoin/bitcoin/pull/19848#discussion_r483420961,483420961,src/policy/rbf.h
jnewbery,2020-09-04 07:59:49,"Seems like quite a roundabout way to avoid one line of code:\n\n```suggestion\n    // If we don't have a local mempool we can only check the transaction itself.\n    return SignalsOptInRBF(tx) ? RBFTransactionState::REPLACEABLE_BIP125 : RBFTransactionState::UNKNOWN;\n```",https://github.com/bitcoin/bitcoin/pull/19848#discussion_r483454085,483454085,src/policy/rbf.cpp
