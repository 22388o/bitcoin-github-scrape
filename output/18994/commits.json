[
  {
    "sha": "c571ecb07145b4ce8c17ca80489f8f1497388c4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTcxZWNiMDcxNDViNGNlOGMxN2NhODA0ODlmOGYxNDk3Mzg4YzRk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-16T18:13:36Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-29T16:44:22Z"
      },
      "message": "tests: Add fuzzing helper functions ConsumeDataStream, ConsumeTxDestination and ConsumeUInt160",
      "tree": {
        "sha": "6e6ab809b15ebdefcf2d245a3efd39bd74cda6a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e6ab809b15ebdefcf2d245a3efd39bd74cda6a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c571ecb07145b4ce8c17ca80489f8f1497388c4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c571ecb07145b4ce8c17ca80489f8f1497388c4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c571ecb07145b4ce8c17ca80489f8f1497388c4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c571ecb07145b4ce8c17ca80489f8f1497388c4d/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c19fd96694d15966f1cc83c43bae2746b92d3149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c19fd96694d15966f1cc83c43bae2746b92d3149",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c19fd96694d15966f1cc83c43bae2746b92d3149"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 55,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f26878a704669edf673b2be45f0f0e3e6b78005c",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 55,
        "deletions": 2,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c571ecb07145b4ce8c17ca80489f8f1497388c4d/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c571ecb07145b4ce8c17ca80489f8f1497388c4d/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=c571ecb07145b4ce8c17ca80489f8f1497388c4d",
        "patch": "@@ -12,6 +12,7 @@\n #include <consensus/consensus.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n+#include <script/standard.h>\n #include <serialize.h>\n #include <streams.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n@@ -20,6 +21,7 @@\n #include <uint256.h>\n #include <version.h>\n \n+#include <algorithm>\n #include <cstdint>\n #include <optional>\n #include <string>\n@@ -31,6 +33,11 @@ NODISCARD inline std::vector<uint8_t> ConsumeRandomLengthByteVector(FuzzedDataPr\n     return {s.begin(), s.end()};\n }\n \n+NODISCARD inline CDataStream ConsumeDataStream(FuzzedDataProvider& fuzzed_data_provider, const size_t max_length = 4096) noexcept\n+{\n+    return {ConsumeRandomLengthByteVector(fuzzed_data_provider, max_length), SER_NETWORK, INIT_PROTO_VERSION};\n+}\n+\n NODISCARD inline std::vector<std::string> ConsumeRandomLengthStringVector(FuzzedDataProvider& fuzzed_data_provider, const size_t max_vector_size = 16, const size_t max_string_length = 16) noexcept\n {\n     const size_t n_elements = fuzzed_data_provider.ConsumeIntegralInRange<size_t>(0, max_vector_size);\n@@ -87,10 +94,19 @@ NODISCARD inline CScriptNum ConsumeScriptNum(FuzzedDataProvider& fuzzed_data_pro\n     return CScriptNum{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n }\n \n+NODISCARD inline uint160 ConsumeUInt160(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    const std::vector<uint8_t> v160 = fuzzed_data_provider.ConsumeBytes<uint8_t>(160 / 8);\n+    if (v160.size() != 160 / 8) {\n+        return {};\n+    }\n+    return uint160{v160};\n+}\n+\n NODISCARD inline uint256 ConsumeUInt256(FuzzedDataProvider& fuzzed_data_provider) noexcept\n {\n-    const std::vector<unsigned char> v256 = fuzzed_data_provider.ConsumeBytes<unsigned char>(sizeof(uint256));\n-    if (v256.size() != sizeof(uint256)) {\n+    const std::vector<uint8_t> v256 = fuzzed_data_provider.ConsumeBytes<uint8_t>(256 / 8);\n+    if (v256.size() != 256 / 8) {\n         return {};\n     }\n     return uint256{v256};\n@@ -116,6 +132,43 @@ NODISCARD inline CTxMemPoolEntry ConsumeTxMemPoolEntry(FuzzedDataProvider& fuzze\n     return CTxMemPoolEntry{MakeTransactionRef(tx), fee, time, entry_height, spends_coinbase, sig_op_cost, {}};\n }\n \n+NODISCARD inline CTxDestination ConsumeTxDestination(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    CTxDestination tx_destination;\n+    switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 5)) {\n+    case 0: {\n+        tx_destination = CNoDestination{};\n+        break;\n+    }\n+    case 1: {\n+        tx_destination = PKHash{ConsumeUInt160(fuzzed_data_provider)};\n+        break;\n+    }\n+    case 2: {\n+        tx_destination = ScriptHash{ConsumeUInt160(fuzzed_data_provider)};\n+        break;\n+    }\n+    case 3: {\n+        tx_destination = WitnessV0ScriptHash{ConsumeUInt256(fuzzed_data_provider)};\n+        break;\n+    }\n+    case 4: {\n+        tx_destination = WitnessV0KeyHash{ConsumeUInt160(fuzzed_data_provider)};\n+        break;\n+    }\n+    case 5: {\n+        WitnessUnknown witness_unknown{};\n+        witness_unknown.version = fuzzed_data_provider.ConsumeIntegral<int>();\n+        const std::vector<uint8_t> witness_unknown_program_1 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+        witness_unknown.length = witness_unknown_program_1.size();\n+        std::copy(witness_unknown_program_1.begin(), witness_unknown_program_1.end(), witness_unknown.program);\n+        tx_destination = witness_unknown;\n+        break;\n+    }\n+    }\n+    return tx_destination;\n+}\n+\n template <typename T>\n NODISCARD bool MultiplicationOverflow(const T i, const T j) noexcept\n {"
      }
    ]
  },
  {
    "sha": "8de72711c685e638fa54d485694fb1b1af024adc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGU3MjcxMWM2ODVlNjM4ZmE1NGQ0ODU2OTRmYjFiMWFmMDI0YWRj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-16T18:15:13Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-30T10:37:01Z"
      },
      "message": "tests: Fill fuzzing coverage gaps for functions in script/script.h, script/script_error.h and script/standard.h",
      "tree": {
        "sha": "0f6d3e4884b93e8a60f3d70cd512bc0fadd51a76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f6d3e4884b93e8a60f3d70cd512bc0fadd51a76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8de72711c685e638fa54d485694fb1b1af024adc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8de72711c685e638fa54d485694fb1b1af024adc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8de72711c685e638fa54d485694fb1b1af024adc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8de72711c685e638fa54d485694fb1b1af024adc/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c571ecb07145b4ce8c17ca80489f8f1497388c4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c571ecb07145b4ce8c17ca80489f8f1497388c4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c571ecb07145b4ce8c17ca80489f8f1497388c4d"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 44,
      "deletions": 0
    },
    "files": [
      {
        "sha": "933cf9049d91e45e58084db594c5376474a30065",
        "filename": "src/test/fuzz/script.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8de72711c685e638fa54d485694fb1b1af024adc/src/test/fuzz/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8de72711c685e638fa54d485694fb1b1af024adc/src/test/fuzz/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script.cpp?ref=8de72711c685e638fa54d485694fb1b1af024adc",
        "patch": "@@ -11,6 +11,7 @@\n #include <script/descriptor.h>\n #include <script/interpreter.h>\n #include <script/script.h>\n+#include <script/script_error.h>\n #include <script/sign.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n@@ -21,6 +22,8 @@\n #include <univalue.h>\n #include <util/memory.h>\n \n+#include <algorithm>\n+#include <cassert>\n #include <cstdint>\n #include <optional>\n #include <string>\n@@ -124,4 +127,40 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n             wit.SetNull();\n         }\n     }\n+\n+    (void)GetOpName(ConsumeOpcodeType(fuzzed_data_provider));\n+    (void)ScriptErrorString(static_cast<ScriptError>(fuzzed_data_provider.ConsumeIntegralInRange<int>(0, SCRIPT_ERR_ERROR_COUNT)));\n+\n+    {\n+        const std::vector<uint8_t> bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+        CScript append_script{bytes.begin(), bytes.end()};\n+        append_script << fuzzed_data_provider.ConsumeIntegral<int64_t>();\n+        append_script << ConsumeOpcodeType(fuzzed_data_provider);\n+        append_script << CScriptNum{fuzzed_data_provider.ConsumeIntegral<int64_t>()};\n+        append_script << ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    }\n+\n+    {\n+        WitnessUnknown witness_unknown_1{};\n+        witness_unknown_1.version = fuzzed_data_provider.ConsumeIntegral<int>();\n+        const std::vector<uint8_t> witness_unknown_program_1 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+        witness_unknown_1.length = witness_unknown_program_1.size();\n+        std::copy(witness_unknown_program_1.begin(), witness_unknown_program_1.end(), witness_unknown_1.program);\n+\n+        WitnessUnknown witness_unknown_2{};\n+        witness_unknown_2.version = fuzzed_data_provider.ConsumeIntegral<int>();\n+        const std::vector<uint8_t> witness_unknown_program_2 = fuzzed_data_provider.ConsumeBytes<uint8_t>(40);\n+        witness_unknown_2.length = witness_unknown_program_2.size();\n+        std::copy(witness_unknown_program_2.begin(), witness_unknown_program_2.end(), witness_unknown_2.program);\n+\n+        (void)(witness_unknown_1 == witness_unknown_2);\n+        (void)(witness_unknown_1 < witness_unknown_2);\n+    }\n+\n+    {\n+        const CTxDestination tx_destination_1 = ConsumeTxDestination(fuzzed_data_provider);\n+        const CTxDestination tx_destination_2 = ConsumeTxDestination(fuzzed_data_provider);\n+        (void)(tx_destination_1 == tx_destination_2);\n+        (void)(tx_destination_1 < tx_destination_2);\n+    }\n }"
      },
      {
        "sha": "271062dc9521bbedcbce61399945c12f32caa440",
        "filename": "src/test/fuzz/string.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8de72711c685e638fa54d485694fb1b1af024adc/src/test/fuzz/string.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8de72711c685e638fa54d485694fb1b1af024adc/src/test/fuzz/string.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/string.cpp?ref=8de72711c685e638fa54d485694fb1b1af024adc",
        "patch": "@@ -12,6 +12,7 @@\n #include <rpc/server.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n+#include <script/script.h>\n #include <serialize.h>\n #include <streams.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n@@ -89,6 +90,10 @@ void test_one_input(const std::vector<uint8_t>& buffer)\n     (void)urlDecode(random_string_1);\n     (void)ValidAsCString(random_string_1);\n     (void)_(random_string_1.c_str());\n+    try {\n+        throw scriptnum_error{random_string_1};\n+    } catch (const std::runtime_error&) {\n+    }\n \n     {\n         CDataStream data_stream{SER_NETWORK, INIT_PROTO_VERSION};"
      }
    ]
  },
  {
    "sha": "43fb8f0ca331a7f79f0d287817da7f4b894bdbfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0M2ZiOGYwY2EzMzFhN2Y3OWYwZDI4NzgxN2RhN2Y0Yjg5NGJkYmZh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-16T18:17:25Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-30T10:37:01Z"
      },
      "message": "tests: Add fuzzing harness for functions in script/bitcoinconsensus.h",
      "tree": {
        "sha": "af2e71abd3ac74bf630b52c1cd1a20d325f97428",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af2e71abd3ac74bf630b52c1cd1a20d325f97428"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43fb8f0ca331a7f79f0d287817da7f4b894bdbfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43fb8f0ca331a7f79f0d287817da7f4b894bdbfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/43fb8f0ca331a7f79f0d287817da7f4b894bdbfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43fb8f0ca331a7f79f0d287817da7f4b894bdbfa/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8de72711c685e638fa54d485694fb1b1af024adc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8de72711c685e638fa54d485694fb1b1af024adc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8de72711c685e638fa54d485694fb1b1af024adc"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 38,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6ae32c7e7ef1ab0d0663a1e1241d55073ad8b35e",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43fb8f0ca331a7f79f0d287817da7f4b894bdbfa/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43fb8f0ca331a7f79f0d287817da7f4b894bdbfa/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=43fb8f0ca331a7f79f0d287817da7f4b894bdbfa",
        "patch": "@@ -110,6 +110,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/rbf \\\n   test/fuzz/rolling_bloom_filter \\\n   test/fuzz/script \\\n+  test/fuzz/script_bitcoin_consensus \\\n   test/fuzz/script_deserialize \\\n   test/fuzz/script_flags \\\n   test/fuzz/script_ops \\\n@@ -941,6 +942,12 @@ test_fuzz_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_script_SOURCES = test/fuzz/script.cpp\n \n+test_fuzz_script_bitcoin_consensus_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_bitcoin_consensus_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_bitcoin_consensus_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_script_bitcoin_consensus_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_bitcoin_consensus_SOURCES = test/fuzz/script_bitcoin_consensus.cpp\n+\n test_fuzz_script_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSCRIPT_DESERIALIZE=1\n test_fuzz_script_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_script_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "22f4b4f44afa3c2e7d25d1bb638ead698d7c29b2",
        "filename": "src/test/fuzz/script_bitcoin_consensus.cpp",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43fb8f0ca331a7f79f0d287817da7f4b894bdbfa/src/test/fuzz/script_bitcoin_consensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43fb8f0ca331a7f79f0d287817da7f4b894bdbfa/src/test/fuzz/script_bitcoin_consensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_bitcoin_consensus.cpp?ref=43fb8f0ca331a7f79f0d287817da7f4b894bdbfa",
        "patch": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <script/bitcoinconsensus.h>\n+#include <script/interpreter.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::vector<uint8_t> random_bytes_1 = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    const std::vector<uint8_t> random_bytes_2 = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    const CAmount money = ConsumeMoney(fuzzed_data_provider);\n+    bitcoinconsensus_error err;\n+    bitcoinconsensus_error* err_p = fuzzed_data_provider.ConsumeBool() ? &err : nullptr;\n+    const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+    const unsigned int flags = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+    assert(bitcoinconsensus_version() == BITCOINCONSENSUS_API_VER);\n+    if ((flags & SCRIPT_VERIFY_WITNESS) != 0 && (flags & SCRIPT_VERIFY_P2SH) == 0) {\n+        return;\n+    }\n+    (void)bitcoinconsensus_verify_script(random_bytes_1.data(), random_bytes_1.size(), random_bytes_2.data(), random_bytes_2.size(), n_in, flags, err_p);\n+    (void)bitcoinconsensus_verify_script_with_amount(random_bytes_1.data(), random_bytes_1.size(), money, random_bytes_2.data(), random_bytes_2.size(), n_in, flags, err_p);\n+}"
      }
    ]
  },
  {
    "sha": "fa80117cfdeca7e5d3a2a09b385c0e938bf701e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTgwMTE3Y2ZkZWNhN2U1ZDNhMmEwOWIzODVjMGU5MzhiZjcwMWU5",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-16T18:18:07Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-30T10:37:01Z"
      },
      "message": "tests: Add fuzzing harness for functions in script/descriptor.h",
      "tree": {
        "sha": "a0213a1585d1663dd8b4d53828208fc95687f65b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0213a1585d1663dd8b4d53828208fc95687f65b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa80117cfdeca7e5d3a2a09b385c0e938bf701e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa80117cfdeca7e5d3a2a09b385c0e938bf701e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa80117cfdeca7e5d3a2a09b385c0e938bf701e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa80117cfdeca7e5d3a2a09b385c0e938bf701e9/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "43fb8f0ca331a7f79f0d287817da7f4b894bdbfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43fb8f0ca331a7f79f0d287817da7f4b894bdbfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/43fb8f0ca331a7f79f0d287817da7f4b894bdbfa"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 49,
      "deletions": 0
    },
    "files": [
      {
        "sha": "92b23644ce77bceb4607c4732000103f9e725660",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa80117cfdeca7e5d3a2a09b385c0e938bf701e9/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa80117cfdeca7e5d3a2a09b385c0e938bf701e9/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=fa80117cfdeca7e5d3a2a09b385c0e938bf701e9",
        "patch": "@@ -111,6 +111,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/rolling_bloom_filter \\\n   test/fuzz/script \\\n   test/fuzz/script_bitcoin_consensus \\\n+  test/fuzz/script_descriptor_cache \\\n   test/fuzz/script_deserialize \\\n   test/fuzz/script_flags \\\n   test/fuzz/script_ops \\\n@@ -948,6 +949,12 @@ test_fuzz_script_bitcoin_consensus_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_script_bitcoin_consensus_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_script_bitcoin_consensus_SOURCES = test/fuzz/script_bitcoin_consensus.cpp\n \n+test_fuzz_script_descriptor_cache_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_descriptor_cache_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_descriptor_cache_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_script_descriptor_cache_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_descriptor_cache_SOURCES = test/fuzz/script_descriptor_cache.cpp\n+\n test_fuzz_script_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSCRIPT_DESERIALIZE=1\n test_fuzz_script_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_script_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "4bfe61cec7f38373f14a9ba782915f19a00cf3b7",
        "filename": "src/test/fuzz/script_descriptor_cache.cpp",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa80117cfdeca7e5d3a2a09b385c0e938bf701e9/src/test/fuzz/script_descriptor_cache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa80117cfdeca7e5d3a2a09b385c0e938bf701e9/src/test/fuzz/script_descriptor_cache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_descriptor_cache.cpp?ref=fa80117cfdeca7e5d3a2a09b385c0e938bf701e9",
        "patch": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <optional.h>\n+#include <pubkey.h>\n+#include <script/descriptor.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    DescriptorCache descriptor_cache;\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const std::vector<uint8_t> code = fuzzed_data_provider.ConsumeBytes<uint8_t>(BIP32_EXTKEY_SIZE);\n+        if (code.size() == BIP32_EXTKEY_SIZE) {\n+            CExtPubKey xpub;\n+            xpub.Decode(code.data());\n+            const uint32_t key_exp_pos = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+            CExtPubKey xpub_fetched;\n+            if (fuzzed_data_provider.ConsumeBool()) {\n+                (void)descriptor_cache.GetCachedParentExtPubKey(key_exp_pos, xpub_fetched);\n+                descriptor_cache.CacheParentExtPubKey(key_exp_pos, xpub);\n+                assert(descriptor_cache.GetCachedParentExtPubKey(key_exp_pos, xpub_fetched));\n+            } else {\n+                const uint32_t der_index = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+                (void)descriptor_cache.GetCachedDerivedExtPubKey(key_exp_pos, der_index, xpub_fetched);\n+                descriptor_cache.CacheDerivedExtPubKey(key_exp_pos, der_index, xpub);\n+                assert(descriptor_cache.GetCachedDerivedExtPubKey(key_exp_pos, der_index, xpub_fetched));\n+            }\n+            assert(xpub == xpub_fetched);\n+        }\n+        (void)descriptor_cache.GetCachedParentExtPubKeys();\n+        (void)descriptor_cache.GetCachedDerivedExtPubKeys();\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "d3d8adb79fbe34b15cf29334607f9b76d303aa1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2Q4YWRiNzlmYmUzNGIxNWNmMjkzMzQ2MDdmOWI3NmQzMDNhYTFh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-16T18:18:49Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-30T10:37:01Z"
      },
      "message": "tests: Add fuzzing harness for functions in script/interpreter.h",
      "tree": {
        "sha": "49cc0ff174c15e71e6c19e1335220aa855b39bea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49cc0ff174c15e71e6c19e1335220aa855b39bea"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3d8adb79fbe34b15cf29334607f9b76d303aa1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3d8adb79fbe34b15cf29334607f9b76d303aa1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3d8adb79fbe34b15cf29334607f9b76d303aa1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3d8adb79fbe34b15cf29334607f9b76d303aa1a/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa80117cfdeca7e5d3a2a09b385c0e938bf701e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa80117cfdeca7e5d3a2a09b385c0e938bf701e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa80117cfdeca7e5d3a2a09b385c0e938bf701e9"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 48,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9acae81a837f53c78a7e08687265a3f18034d477",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3d8adb79fbe34b15cf29334607f9b76d303aa1a/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3d8adb79fbe34b15cf29334607f9b76d303aa1a/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=d3d8adb79fbe34b15cf29334607f9b76d303aa1a",
        "patch": "@@ -114,6 +114,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/script_descriptor_cache \\\n   test/fuzz/script_deserialize \\\n   test/fuzz/script_flags \\\n+  test/fuzz/script_interpreter \\\n   test/fuzz/script_ops \\\n   test/fuzz/scriptnum_ops \\\n   test/fuzz/service_deserialize \\\n@@ -967,6 +968,12 @@ test_fuzz_script_flags_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_script_flags_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_script_flags_SOURCES = test/fuzz/script_flags.cpp\n \n+test_fuzz_script_interpreter_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_interpreter_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_interpreter_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_script_interpreter_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_interpreter_SOURCES = test/fuzz/script_interpreter.cpp\n+\n test_fuzz_script_ops_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_script_ops_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_script_ops_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "26d5732f246797ac8f638a6360981a6a4063f55c",
        "filename": "src/test/fuzz/script_interpreter.cpp",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3d8adb79fbe34b15cf29334607f9b76d303aa1a/src/test/fuzz/script_interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3d8adb79fbe34b15cf29334607f9b76d303aa1a/src/test/fuzz/script_interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_interpreter.cpp?ref=d3d8adb79fbe34b15cf29334607f9b76d303aa1a",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <primitives/transaction.h>\n+#include <script/interpreter.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+bool CastToBool(const std::vector<unsigned char>& vch);\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    {\n+        const CScript script_code = ConsumeScript(fuzzed_data_provider);\n+        const std::optional<CMutableTransaction> mtx = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+        if (mtx) {\n+            const CTransaction tx_to{*mtx};\n+            const unsigned int in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+            if (in < tx_to.vin.size()) {\n+                (void)SignatureHash(script_code, tx_to, in, fuzzed_data_provider.ConsumeIntegral<int>(), ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}), nullptr);\n+                const std::optional<CMutableTransaction> mtx_precomputed = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+                if (mtx_precomputed) {\n+                    const CTransaction tx_precomputed{*mtx_precomputed};\n+                    const PrecomputedTransactionData precomputed_transaction_data{tx_precomputed};\n+                    (void)SignatureHash(script_code, tx_to, in, fuzzed_data_provider.ConsumeIntegral<int>(), ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}), &precomputed_transaction_data);\n+                }\n+            }\n+        }\n+    }\n+    {\n+        (void)CastToBool(ConsumeRandomLengthByteVector(fuzzed_data_provider));\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "c91d2f06150cda258a17e78d9b7065b594d34a85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTFkMmYwNjE1MGNkYTI1OGExN2U3OGQ5YjcwNjViNTk0ZDM0YTg1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-16T18:20:15Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-30T10:37:01Z"
      },
      "message": "tests: Add fuzzing harness for functions in script/sigcache.h",
      "tree": {
        "sha": "89402c610afa80791b71a89d644d406715a0ab69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89402c610afa80791b71a89d644d406715a0ab69"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c91d2f06150cda258a17e78d9b7065b594d34a85",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c91d2f06150cda258a17e78d9b7065b594d34a85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c91d2f06150cda258a17e78d9b7065b594d34a85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c91d2f06150cda258a17e78d9b7065b594d34a85/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3d8adb79fbe34b15cf29334607f9b76d303aa1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3d8adb79fbe34b15cf29334607f9b76d303aa1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3d8adb79fbe34b15cf29334607f9b76d303aa1a"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 52,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7f2c6b6c912c1eeeb88db8a86b2c72a202b6eb13",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c91d2f06150cda258a17e78d9b7065b594d34a85/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c91d2f06150cda258a17e78d9b7065b594d34a85/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=c91d2f06150cda258a17e78d9b7065b594d34a85",
        "patch": "@@ -116,6 +116,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/script_flags \\\n   test/fuzz/script_interpreter \\\n   test/fuzz/script_ops \\\n+  test/fuzz/script_sigcache \\\n   test/fuzz/scriptnum_ops \\\n   test/fuzz/service_deserialize \\\n   test/fuzz/signature_checker \\\n@@ -980,6 +981,12 @@ test_fuzz_script_ops_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_script_ops_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_script_ops_SOURCES = test/fuzz/script_ops.cpp\n \n+test_fuzz_script_sigcache_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_sigcache_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_sigcache_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_script_sigcache_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_sigcache_SOURCES = test/fuzz/script_sigcache.cpp\n+\n test_fuzz_scriptnum_ops_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_scriptnum_ops_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_scriptnum_ops_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "434a47b7022e13bec04fd686f0ded419da8a2fdf",
        "filename": "src/test/fuzz/script_sigcache.cpp",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c91d2f06150cda258a17e78d9b7065b594d34a85/src/test/fuzz/script_sigcache.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c91d2f06150cda258a17e78d9b7065b594d34a85/src/test/fuzz/script_sigcache.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_sigcache.cpp?ref=c91d2f06150cda258a17e78d9b7065b594d34a85",
        "patch": "@@ -0,0 +1,45 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <script/sigcache.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cstdint>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+    InitSignatureCache();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    const std::optional<CMutableTransaction> mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+    const CTransaction tx = mutable_transaction ? CTransaction{*mutable_transaction} : CTransaction{};\n+    const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+    const CAmount amount = ConsumeMoney(fuzzed_data_provider);\n+    const bool store = fuzzed_data_provider.ConsumeBool();\n+    PrecomputedTransactionData tx_data;\n+    CachingTransactionSignatureChecker caching_transaction_signature_checker{mutable_transaction ? &tx : nullptr, n_in, amount, store, tx_data};\n+    const std::optional<CPubKey> pub_key = ConsumeDeserializable<CPubKey>(fuzzed_data_provider);\n+    if (pub_key) {\n+        const std::vector<uint8_t> random_bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+        if (!random_bytes.empty()) {\n+            (void)caching_transaction_signature_checker.VerifySignature(random_bytes, *pub_key, ConsumeUInt256(fuzzed_data_provider));\n+        }\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "f898ef65c947776750e49d050633f830546bbdc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODk4ZWY2NWM5NDc3NzY3NTBlNDlkMDUwNjMzZjgzMDU0NmJiZGM2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-16T18:20:39Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-05-30T10:37:01Z"
      },
      "message": "tests: Add fuzzing harness for functions in script/sign.h",
      "tree": {
        "sha": "3066fa550a2247b6ec8b2fe628ab23e96ee11da2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3066fa550a2247b6ec8b2fe628ab23e96ee11da2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f898ef65c947776750e49d050633f830546bbdc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f898ef65c947776750e49d050633f830546bbdc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f898ef65c947776750e49d050633f830546bbdc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f898ef65c947776750e49d050633f830546bbdc6/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c91d2f06150cda258a17e78d9b7065b594d34a85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c91d2f06150cda258a17e78d9b7065b594d34a85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c91d2f06150cda258a17e78d9b7065b594d34a85"
      }
    ],
    "stats": {
      "total": 156,
      "additions": 156,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7909cb4a0f081f0e67acd42c3ce020d6b72e3ef8",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f898ef65c947776750e49d050633f830546bbdc6/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f898ef65c947776750e49d050633f830546bbdc6/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=f898ef65c947776750e49d050633f830546bbdc6",
        "patch": "@@ -117,6 +117,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/script_interpreter \\\n   test/fuzz/script_ops \\\n   test/fuzz/script_sigcache \\\n+  test/fuzz/script_sign \\\n   test/fuzz/scriptnum_ops \\\n   test/fuzz/service_deserialize \\\n   test/fuzz/signature_checker \\\n@@ -987,6 +988,12 @@ test_fuzz_script_sigcache_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_script_sigcache_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_script_sigcache_SOURCES = test/fuzz/script_sigcache.cpp\n \n+test_fuzz_script_sign_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_sign_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_sign_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_script_sign_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_sign_SOURCES = test/fuzz/script_sign.cpp\n+\n test_fuzz_scriptnum_ops_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_scriptnum_ops_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_scriptnum_ops_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "c626f950e705ae3fd202a123ef28b78b565c12c5",
        "filename": "src/test/fuzz/script_sign.cpp",
        "status": "added",
        "additions": 149,
        "deletions": 0,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f898ef65c947776750e49d050633f830546bbdc6/src/test/fuzz/script_sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f898ef65c947776750e49d050633f830546bbdc6/src/test/fuzz/script_sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/script_sign.cpp?ref=f898ef65c947776750e49d050633f830546bbdc6",
        "patch": "@@ -0,0 +1,149 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <chainparams.h>\n+#include <chainparamsbase.h>\n+#include <key.h>\n+#include <pubkey.h>\n+#include <script/keyorigin.h>\n+#include <script/sign.h>\n+#include <script/signingprovider.h>\n+#include <streams.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <iostream>\n+#include <map>\n+#include <optional>\n+#include <string>\n+#include <vector>\n+\n+void initialize()\n+{\n+    static const ECCVerifyHandle ecc_verify_handle;\n+    ECC_Start();\n+    SelectParams(CBaseChainParams::REGTEST);\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    const std::vector<uint8_t> key = ConsumeRandomLengthByteVector(fuzzed_data_provider, 128);\n+\n+    {\n+        CDataStream random_data_stream = ConsumeDataStream(fuzzed_data_provider);\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(random_data_stream, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+    }\n+\n+    {\n+        std::map<CPubKey, KeyOriginInfo> hd_keypaths;\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            const std::optional<CPubKey> pub_key = ConsumeDeserializable<CPubKey>(fuzzed_data_provider);\n+            if (!pub_key) {\n+                break;\n+            }\n+            const std::optional<KeyOriginInfo> key_origin_info = ConsumeDeserializable<KeyOriginInfo>(fuzzed_data_provider);\n+            if (!key_origin_info) {\n+                break;\n+            }\n+            hd_keypaths[*pub_key] = *key_origin_info;\n+        }\n+        CDataStream serialized{SER_NETWORK, PROTOCOL_VERSION};\n+        try {\n+            SerializeHDKeypaths(serialized, hd_keypaths, fuzzed_data_provider.ConsumeIntegral<uint8_t>());\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        std::map<CPubKey, KeyOriginInfo> deserialized_hd_keypaths;\n+        try {\n+            DeserializeHDKeypaths(serialized, key, hd_keypaths);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+        assert(hd_keypaths.size() >= deserialized_hd_keypaths.size());\n+    }\n+\n+    {\n+        SignatureData signature_data_1{ConsumeScript(fuzzed_data_provider)};\n+        SignatureData signature_data_2{ConsumeScript(fuzzed_data_provider)};\n+        signature_data_1.MergeSignatureData(signature_data_2);\n+    }\n+\n+    FillableSigningProvider provider;\n+    CKey k;\n+    const std::vector<uint8_t> key_data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+    k.Set(key_data.begin(), key_data.end(), fuzzed_data_provider.ConsumeBool());\n+    if (k.IsValid()) {\n+        provider.AddKey(k);\n+    }\n+\n+    {\n+        const std::optional<CMutableTransaction> mutable_transaction = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+        const std::optional<CTxOut> tx_out = ConsumeDeserializable<CTxOut>(fuzzed_data_provider);\n+        const unsigned int n_in = fuzzed_data_provider.ConsumeIntegral<unsigned int>();\n+        if (mutable_transaction && tx_out && mutable_transaction->vin.size() > n_in) {\n+            SignatureData signature_data_1 = DataFromTransaction(*mutable_transaction, n_in, *tx_out);\n+            CTxIn input;\n+            UpdateInput(input, signature_data_1);\n+            const CScript script = ConsumeScript(fuzzed_data_provider);\n+            SignatureData signature_data_2{script};\n+            signature_data_1.MergeSignatureData(signature_data_2);\n+        }\n+        if (mutable_transaction) {\n+            CTransaction tx_from{*mutable_transaction};\n+            CMutableTransaction tx_to;\n+            const std::optional<CMutableTransaction> opt_tx_to = ConsumeDeserializable<CMutableTransaction>(fuzzed_data_provider);\n+            if (opt_tx_to) {\n+                tx_to = *opt_tx_to;\n+            }\n+            CMutableTransaction script_tx_to = tx_to;\n+            CMutableTransaction sign_transaction_tx_to = tx_to;\n+            if (n_in < tx_to.vin.size() && tx_to.vin[n_in].prevout.n < tx_from.vout.size()) {\n+                (void)SignSignature(provider, tx_from, tx_to, n_in, fuzzed_data_provider.ConsumeIntegral<int>());\n+            }\n+            if (n_in < script_tx_to.vin.size()) {\n+                (void)SignSignature(provider, ConsumeScript(fuzzed_data_provider), script_tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>());\n+                MutableTransactionSignatureCreator signature_creator{&tx_to, n_in, ConsumeMoney(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int>()};\n+                std::vector<unsigned char> vch_sig;\n+                CKeyID address;\n+                if (fuzzed_data_provider.ConsumeBool()) {\n+                    if (k.IsValid()) {\n+                        address = k.GetPubKey().GetID();\n+                    }\n+                } else {\n+                    address = CKeyID{ConsumeUInt160(fuzzed_data_provider)};\n+                }\n+                (void)signature_creator.CreateSig(provider, vch_sig, address, ConsumeScript(fuzzed_data_provider), fuzzed_data_provider.PickValueInArray({SigVersion::BASE, SigVersion::WITNESS_V0}));\n+            }\n+            std::map<COutPoint, Coin> coins;\n+            while (fuzzed_data_provider.ConsumeBool()) {\n+                const std::optional<COutPoint> outpoint = ConsumeDeserializable<COutPoint>(fuzzed_data_provider);\n+                if (!outpoint) {\n+                    break;\n+                }\n+                const std::optional<Coin> coin = ConsumeDeserializable<Coin>(fuzzed_data_provider);\n+                if (!coin) {\n+                    break;\n+                }\n+                coins[*outpoint] = *coin;\n+            }\n+            std::map<int, std::string> input_errors;\n+            (void)SignTransaction(sign_transaction_tx_to, &provider, coins, fuzzed_data_provider.ConsumeIntegral<int>(), input_errors);\n+        }\n+    }\n+\n+    {\n+        SignatureData signature_data_1;\n+        (void)ProduceSignature(provider, DUMMY_SIGNATURE_CREATOR, ConsumeScript(fuzzed_data_provider), signature_data_1);\n+        SignatureData signature_data_2;\n+        (void)ProduceSignature(provider, DUMMY_MAXIMUM_SIGNATURE_CREATOR, ConsumeScript(fuzzed_data_provider), signature_data_2);\n+    }\n+}"
      }
    ]
  }
]