[
  {
    "sha": "226671adfd0851753212400571fe1ab8ea230e49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjY2NzFhZGZkMDg1MTc1MzIxMjQwMDU3MWZlMWFiOGVhMjMwZTQ5",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-09T04:29:27Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-20T10:45:39Z"
      },
      "message": "Add SegWit support to importmulti with some ProcessImport cleanup",
      "tree": {
        "sha": "e24a94bea249edce196502b5306f5315705ef827",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e24a94bea249edce196502b5306f5315705ef827"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/226671adfd0851753212400571fe1ab8ea230e49",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/226671adfd0851753212400571fe1ab8ea230e49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/226671adfd0851753212400571fe1ab8ea230e49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/226671adfd0851753212400571fe1ab8ea230e49/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a2cac787360e80ec1aeba58b54d03ff81f5d20f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a2cac787360e80ec1aeba58b54d03ff81f5d20f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a2cac787360e80ec1aeba58b54d03ff81f5d20f"
      }
    ],
    "stats": {
      "total": 279,
      "additions": 127,
      "deletions": 152
    },
    "files": [
      {
        "sha": "67334605691b810df2b22659283364260e58430c",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 148,
        "changes": 271,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/226671adfd0851753212400571fe1ab8ea230e49/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/226671adfd0851753212400571fe1ab8ea230e49/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=226671adfd0851753212400571fe1ab8ea230e49",
        "patch": "@@ -809,29 +809,24 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n-        bool success = false;\n-\n-        // Required fields.\n+        // First ensure scriptPubKey has either a script or JSON with \"address\" string\n         const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n-\n-        // Should have script or JSON with \"address\".\n-        if (!(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\")) && !(scriptPubKey.getType() == UniValue::VSTR)) {\n+        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+        if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scriptPubKey\");\n         }\n+        const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n \n         // Optional fields.\n         const std::string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n+        const std::string& witness_script_hex = data.exists(\"witnessscript\") ? data[\"witnessscript\"].get_str() : \"\";\n         const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n         const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n         const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n         const bool watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n-        const std::string& label = data.exists(\"label\") && !internal ? data[\"label\"].get_str() : \"\";\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n \n-        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n-        bool isP2SH = strRedeemScript.length() > 0;\n-        const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n-\n-        // Parse the output.\n+        // Generate the script and destination for the scriptPubKey provided\n         CScript script;\n         CTxDestination dest;\n \n@@ -858,32 +853,31 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n         }\n \n-        // Internal + Label\n+        // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n         }\n \n-        // Keys / PubKeys size check.\n-        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n-        }\n-\n-        // Invalid P2SH redeemScript\n-        if (isP2SH && !IsHex(strRedeemScript)) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        // Force users to provide the witness script in its field rather than redeemscript\n+        if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Provide witnessscript not redeemscript for P2WSH address\");\n         }\n \n-        // Process. //\n-\n         // P2SH\n-        if (isP2SH) {\n+        if (!strRedeemScript.empty() && script.IsPayToScriptHash()) {\n+            // Check the redeemScript is valid\n+            if (!IsHex(strRedeemScript)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+            }\n+\n             // Import redeem script.\n             std::vector<unsigned char> vData(ParseHex(strRedeemScript));\n             CScript redeemScript = CScript(vData.begin(), vData.end());\n+            CScriptID redeem_id(redeemScript);\n \n-            // Invalid P2SH address\n-            if (!script.IsPayToScriptHash()) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid P2SH address / script\");\n+            // Check that the redeemScript and scriptPubKey match\n+            if (GetScriptForDestination(redeem_id) != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The redeemScript does not match the scriptPubKey\");\n             }\n \n             pwallet->MarkDirty();\n@@ -892,103 +886,95 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            CScriptID redeem_id(redeemScript);\n             if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            CScript redeemDestination = GetScriptForDestination(redeem_id);\n+            // Check for P2SH-P2WSH\n+            if (redeemScript.IsPayToWitnessScriptHash()) {\n+                if (!IsHex(witness_script_hex)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n+                }\n \n-            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-            }\n+                // Generate the scripts\n+                std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n+                CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n+                CScriptID witness_id(witness_script);\n \n-            pwallet->MarkDirty();\n+                // Check that the witnessScript and P2SH redeemScript match\n+                if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != redeemScript) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the redeemScript\");\n+                }\n \n-            if (!pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n+                // Import into the wallet\n+                if (!pwallet->AddWatchOnly(witness_script, timestamp)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n \n-            // add to address book or update label\n-            if (IsValidDestination(dest)) {\n-                pwallet->SetAddressBook(dest, label, \"receive\");\n+                if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh-p2wsh witnessScript to wallet\");\n+                }\n             }\n \n-            // Import private keys.\n-            if (keys.size()) {\n-                for (size_t i = 0; i < keys.size(); i++) {\n-                    const std::string& privkey = keys[i].get_str();\n-\n-                    CKey key = DecodeSecret(privkey);\n-\n-                    if (!key.IsValid()) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                    }\n-\n-                    CPubKey pubkey = key.GetPubKey();\n-                    assert(key.VerifyPubKey(pubkey));\n-\n-                    CKeyID vchAddress = pubkey.GetID();\n-                    pwallet->MarkDirty();\n-                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n+        // P2WSH\n+        } else if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n+            if (!IsHex(witness_script_hex)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n+            }\n \n-                    if (pwallet->HaveKey(vchAddress)) {\n-                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n-                    }\n+            // Generate the scripts\n+            std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n+            CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n+            CScriptID witness_id(witness_script);\n \n-                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n+            // Check that the witnessScript and scriptPubKey match\n+            if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey\");\n+            }\n \n-                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                    }\n+            // Import into the wallet\n+            if (!pwallet->AddWatchOnly(witness_script, timestamp)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            }\n \n-                    pwallet->UpdateTimeFirstKey(timestamp);\n-                }\n+            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n             }\n \n-            success = true;\n-        } else {\n-            // Import public keys.\n-            if (pubKeys.size() && keys.size() == 0) {\n+        // P2PK/P2PKH/P2WPKH\n+        } else if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n+            if (keys.size() > 1 || pubKeys.size() > 1) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than one key given for one single-key address\");\n+            }\n+            CPubKey pubkey;\n+            if (keys.size()) {\n+                pubkey = DecodeSecret(keys[0].get_str()).GetPubKey();\n+            }\n+            if (pubKeys.size()) {\n                 const std::string& strPubKey = pubKeys[0].get_str();\n-\n                 if (!IsHex(strPubKey)) {\n                     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n                 }\n-\n-                std::vector<unsigned char> vData(ParseHex(strPubKey));\n-                CPubKey pubKey(vData.begin(), vData.end());\n-\n-                if (!pubKey.IsFullyValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n-                }\n-\n-                CTxDestination pubkey_dest = pubKey.GetID();\n-\n-                // Consistency check.\n-                if (!(pubkey_dest == dest)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n+                std::vector<unsigned char> vData(ParseHex(pubKeys[0].get_str()));\n+                CPubKey pubkey_temp(vData.begin(), vData.end());\n+                if (pubkey.size() && pubkey_temp != pubkey) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key does not match public key for address\");\n                 }\n-\n-                CScript pubKeyScript = GetScriptForDestination(pubkey_dest);\n-\n-                if (::IsMine(*pwallet, pubKeyScript) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n-\n-                pwallet->MarkDirty();\n-\n-                if (!pwallet->AddWatchOnly(pubKeyScript, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                pubkey = pubkey_temp;\n+            }\n+            if (pubkey.size() > 0) {\n+                if (!pubkey.IsFullyValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n                 }\n \n-                // add to address book or update label\n-                if (IsValidDestination(pubkey_dest)) {\n-                    pwallet->SetAddressBook(pubkey_dest, label, \"receive\");\n+                // Check the key corresponds to the destination given\n+                std::vector<CTxDestination> destinations = GetAllDestinationsForKey(pubkey);\n+                if (std::find(destinations.begin(), destinations.end(), dest) == destinations.end()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Key does not match address destination\");\n                 }\n \n-                // TODO Is this necessary?\n-                CScript scriptRawPubKey = GetScriptForRawPubKey(pubKey);\n+                // This is necessary to force the wallet to import the pubKey\n+                CScript scriptRawPubKey = GetScriptForRawPubKey(pubkey);\n \n                 if (::IsMine(*pwallet, scriptRawPubKey) == ISMINE_SPENDABLE) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n@@ -999,73 +985,61 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 if (!pwallet->AddWatchOnly(scriptRawPubKey, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n-\n-                success = true;\n             }\n+        }\n \n-            // Import private keys.\n-            if (keys.size()) {\n-                const std::string& strPrivkey = keys[0].get_str();\n-\n-                // Checks.\n-                CKey key = DecodeSecret(strPrivkey);\n-\n-                if (!key.IsValid()) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n-                }\n-\n-                CPubKey pubKey = key.GetPubKey();\n-                assert(key.VerifyPubKey(pubKey));\n-\n-                CTxDestination pubkey_dest = pubKey.GetID();\n+        // Import the address\n+        if (::IsMine(*pwallet, script) == ISMINE_SPENDABLE) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+        }\n \n-                // Consistency check.\n-                if (!(pubkey_dest == dest)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n-                }\n+        pwallet->MarkDirty();\n \n-                CKeyID vchAddress = pubKey.GetID();\n-                pwallet->MarkDirty();\n-                pwallet->SetAddressBook(vchAddress, label, \"receive\");\n+        if (!pwallet->AddWatchOnly(script, timestamp)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+        }\n \n-                if (pwallet->HaveKey(vchAddress)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+        if (!watchOnly && !pwallet->HaveCScript(CScriptID(scriptpubkey_script)) && !pwallet->AddCScript(scriptpubkey_script)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding scriptPubKey script to wallet\");\n+        }\n \n-                pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n+        // add to address book or update label\n+        if (IsValidDestination(dest)) {\n+            pwallet->SetAddressBook(dest, label, \"receive\");\n+        }\n \n-                if (!pwallet->AddKeyPubKey(key, pubKey)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-                }\n+        // Import private keys.\n+        for (size_t i = 0; i < keys.size(); i++) {\n+            const std::string& strPrivkey = keys[i].get_str();\n \n-                pwallet->UpdateTimeFirstKey(timestamp);\n+            // Checks.\n+            CKey key = DecodeSecret(strPrivkey);\n \n-                success = true;\n+            if (!key.IsValid()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n             }\n \n-            // Import scriptPubKey only.\n-            if (pubKeys.size() == 0 && keys.size() == 0) {\n-                if (::IsMine(*pwallet, script) == ISMINE_SPENDABLE) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n-                }\n+            CPubKey pubKey = key.GetPubKey();\n+            assert(key.VerifyPubKey(pubKey));\n \n-                pwallet->MarkDirty();\n+            CKeyID vchAddress = pubKey.GetID();\n+            pwallet->MarkDirty();\n \n-                if (!pwallet->AddWatchOnly(script, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-                }\n+            if (pwallet->HaveKey(vchAddress)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n+            }\n \n-                // add to address book or update label\n-                if (IsValidDestination(dest)) {\n-                    pwallet->SetAddressBook(dest, label, \"receive\");\n-                }\n+            pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n \n-                success = true;\n+            if (!pwallet->AddKeyPubKey(key, pubKey)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n             }\n+\n+            pwallet->UpdateTimeFirstKey(timestamp);\n         }\n \n         UniValue result = UniValue(UniValue::VOBJ);\n-        result.pushKV(\"success\", UniValue(success));\n+        result.pushKV(\"success\", UniValue(true));\n         return result;\n     } catch (const UniValue& e) {\n         UniValue result = UniValue(UniValue::VOBJ);\n@@ -1118,7 +1092,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\"\n             \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest key\\n\"\n             \"                                                              creation time of all keys being imported by the importmulti call will be scanned.\\n\"\n-            \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n+            \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH or P2SH-P2WSH address/scriptPubKey\\n\"\n+            \"      \\\"witnessscript\\\": \\\"<script>\\\"                           , (string, optional) Allowed only if the scriptPubKey is a P2SH-P2WSH or P2WSH address/scriptPubKey\\n\"\n             \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n             \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n             \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be treated as not incoming payments\\n\""
      },
      {
        "sha": "7193a8b3029c8d23b1ee2cbcb6e37da243177fd3",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/226671adfd0851753212400571fe1ab8ea230e49/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/226671adfd0851753212400571fe1ab8ea230e49/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=226671adfd0851753212400571fe1ab8ea230e49",
        "patch": "@@ -355,7 +355,7 @@ def run_test (self):\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n-        assert_equal(result[0]['error']['message'], 'Consistency check failed')\n+        assert_equal(result[0]['error']['message'], 'Key does not match address destination')\n         address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n@@ -375,7 +375,7 @@ def run_test (self):\n         result = self.nodes[1].importmulti(request)\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n-        assert_equal(result[0]['error']['message'], 'Consistency check failed')\n+        assert_equal(result[0]['error']['message'], 'Key does not match address destination')\n         address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n@@ -395,7 +395,7 @@ def run_test (self):\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n-        assert_equal(result[0]['error']['message'], 'Consistency check failed')\n+        assert_equal(result[0]['error']['message'], 'Key does not match address destination')\n         address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n@@ -414,7 +414,7 @@ def run_test (self):\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -5)\n-        assert_equal(result[0]['error']['message'], 'Consistency check failed')\n+        assert_equal(result[0]['error']['message'], 'Key does not match address destination')\n         address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)"
      }
    ]
  },
  {
    "sha": "36719c309e605fe3463b2fe1aa065c6a75b3be16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjcxOWMzMDllNjA1ZmUzNDYzYjJmZTFhYTA2NWM2YTc1YjNiZTE2",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-09T05:43:20Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-20T10:45:39Z"
      },
      "message": "Add segwit address tests for importmulti",
      "tree": {
        "sha": "0d5c97888caf0e1d2bf0d1c4c9f93158814343a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d5c97888caf0e1d2bf0d1c4c9f93158814343a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36719c309e605fe3463b2fe1aa065c6a75b3be16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36719c309e605fe3463b2fe1aa065c6a75b3be16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36719c309e605fe3463b2fe1aa065c6a75b3be16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36719c309e605fe3463b2fe1aa065c6a75b3be16/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "226671adfd0851753212400571fe1ab8ea230e49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/226671adfd0851753212400571fe1ab8ea230e49",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/226671adfd0851753212400571fe1ab8ea230e49"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 70,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1297f68905b65f70029fbd7bde6049e317cfc278",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 70,
        "deletions": 1,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36719c309e605fe3463b2fe1aa065c6a75b3be16/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36719c309e605fe3463b2fe1aa065c6a75b3be16/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=36719c309e605fe3463b2fe1aa065c6a75b3be16",
        "patch": "@@ -11,8 +11,18 @@\n     assert_greater_than,\n     assert_raises_rpc_error,\n     bytes_to_hex_str,\n+    hex_str_to_bytes\n )\n-\n+from test_framework.script import (\n+    CScript,\n+    OP_0,\n+    OP_1,\n+    hash160,\n+    OP_CHECKMULTISIG,\n+    OP_HASH160,\n+    OP_EQUAL\n+)\n+from test_framework.messages import sha256\n \n class ImportMultiTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -458,6 +468,65 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n+        # Import P2WPKH address\n+        self.log.info(\"Should import a P2WPKH address\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+\n+        # P2WSH multisig address + witnessscript + private keys\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        multi_sig_script = self.nodes[0].addmultisigaddress(1, [sig_address_1['pubkey'], sig_address_2['pubkey']], \"\", \"bech32\")\n+        self.log.info(\"Should import a p2wsh with respective redeem script and private keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"witnessscript\": multi_sig_script['redeemScript'],\n+            \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address'])]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+\n+        # P2SH-P2PKH address + redeemscript + private key\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"p2sh-segwit\"))\n+        pubkeyhash = hash160(hex_str_to_bytes(sig_address_1['pubkey']))\n+        pkscript = CScript([OP_0, pubkeyhash])\n+        self.log.info(\"Should import a p2sh-p2pkh with respective redeem script and private keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": sig_address_1['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"redeemscript\": bytes_to_hex_str(pkscript),\n+            \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address'])]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+\n+        # P2SH-P2WSH 1-of-1 multisig + redeemscript + private key\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        witness_program = CScript([OP_1, hex_str_to_bytes(sig_address_1['pubkey']), OP_1, OP_CHECKMULTISIG])\n+        scripthash = sha256(witness_program)\n+        redeem_script = CScript([OP_0, scripthash])\n+        redeem_script_hash = hash160(redeem_script)\n+        p2sh_script = CScript([OP_HASH160, redeem_script_hash, OP_EQUAL])\n+        self.log.info(\"Should import a p2sh-p2wsh with respective redeem script and private keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": bytes_to_hex_str(p2sh_script),\n+            \"timestamp\": \"now\",\n+            \"redeemscript\": bytes_to_hex_str(redeem_script),\n+            \"witnessscript\": bytes_to_hex_str(witness_program),\n+            \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address'])]\n+        }])\n+        assert_equal(result[0]['success'], True)\n \n if __name__ == '__main__':\n     ImportMultiTest ().main ()"
      }
    ]
  },
  {
    "sha": "f2b101a5c8d1d46e04a267870d52c58616295859",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmIxMDFhNWM4ZDFkNDZlMDRhMjY3ODcwZDUyYzU4NjE2Mjk1ODU5",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-09T13:18:34Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-20T10:45:40Z"
      },
      "message": "Fix typo in test_framework/blocktools",
      "tree": {
        "sha": "6021a6902d02f7a65847429a9af5e3c4c3b18da2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6021a6902d02f7a65847429a9af5e3c4c3b18da2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2b101a5c8d1d46e04a267870d52c58616295859",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2b101a5c8d1d46e04a267870d52c58616295859",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2b101a5c8d1d46e04a267870d52c58616295859",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2b101a5c8d1d46e04a267870d52c58616295859/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36719c309e605fe3463b2fe1aa065c6a75b3be16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36719c309e605fe3463b2fe1aa065c6a75b3be16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36719c309e605fe3463b2fe1aa065c6a75b3be16"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "81cce1167bae8832aa9bf06311b2d115b91022f3",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2b101a5c8d1d46e04a267870d52c58616295859/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2b101a5c8d1d46e04a267870d52c58616295859/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=f2b101a5c8d1d46e04a267870d52c58616295859",
        "patch": "@@ -169,7 +169,7 @@ def get_legacy_sigopcount_tx(tx, accurate=True):\n     return count\n \n def witness_script(use_p2wsh, pubkey):\n-    \"\"\"Create a scriptPubKey for a pay-to-wtiness TxOut.\n+    \"\"\"Create a scriptPubKey for a pay-to-witness TxOut.\n \n     This is either a P2WPKH output for the given pubkey, or a P2WSH output of a\n     1-of-1 multisig for the given pubkey. Returns the hex encoding of the"
      }
    ]
  },
  {
    "sha": "d73f658aa26cc245373cf012d5c9af5b79a84426",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzNmNjU4YWEyNmNjMjQ1MzczY2YwMTJkNWM5YWY1Yjc5YTg0NDI2",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-15T06:01:21Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-20T10:45:40Z"
      },
      "message": "Add release notes for importmulti segwit change",
      "tree": {
        "sha": "f151bea4fac3028092ea1bab9c15356e27ed55fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f151bea4fac3028092ea1bab9c15356e27ed55fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d73f658aa26cc245373cf012d5c9af5b79a84426",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d73f658aa26cc245373cf012d5c9af5b79a84426",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d73f658aa26cc245373cf012d5c9af5b79a84426",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d73f658aa26cc245373cf012d5c9af5b79a84426/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2b101a5c8d1d46e04a267870d52c58616295859",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2b101a5c8d1d46e04a267870d52c58616295859",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2b101a5c8d1d46e04a267870d52c58616295859"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd2c6c7ced57f3dbe6d3dbd6ae554ed5d711c286",
        "filename": "doc/release-notes-14454.md",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d73f658aa26cc245373cf012d5c9af5b79a84426/doc/release-notes-14454.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d73f658aa26cc245373cf012d5c9af5b79a84426/doc/release-notes-14454.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14454.md?ref=d73f658aa26cc245373cf012d5c9af5b79a84426",
        "patch": "@@ -0,0 +1,6 @@\n+Low-level RPC changes\n+----------------------\n+\n+The `importmulti` RPC has been updated to support P2WSH, P2WPKH, P2SH-P2WPKH,\n+P2SH-P2WSH. Each request now accepts an additional `witnessscript` to be used\n+for P2WSH or P2SH-P2WSH."
      }
    ]
  },
  {
    "sha": "cebab44dc0fbd2867514ded48ec21ebd7b039e05",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWJhYjQ0ZGMwZmJkMjg2NzUxNGRlZDQ4ZWMyMWViZDdiMDM5ZTA1",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-17T01:43:45Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-20T10:45:41Z"
      },
      "message": "Refactor ProcessImport to allow P2SH-P2WPKH again",
      "tree": {
        "sha": "2e99fe8a97de16a696c0dc9aec0cc612be9b642c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e99fe8a97de16a696c0dc9aec0cc612be9b642c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cebab44dc0fbd2867514ded48ec21ebd7b039e05",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cebab44dc0fbd2867514ded48ec21ebd7b039e05",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cebab44dc0fbd2867514ded48ec21ebd7b039e05",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cebab44dc0fbd2867514ded48ec21ebd7b039e05/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d73f658aa26cc245373cf012d5c9af5b79a84426",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d73f658aa26cc245373cf012d5c9af5b79a84426",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d73f658aa26cc245373cf012d5c9af5b79a84426"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 13,
      "deletions": 31
    },
    "files": [
      {
        "sha": "a4ff1d212673675a8de346ace1900174d02ae55b",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 31,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cebab44dc0fbd2867514ded48ec21ebd7b039e05/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cebab44dc0fbd2867514ded48ec21ebd7b039e05/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=cebab44dc0fbd2867514ded48ec21ebd7b039e05",
        "patch": "@@ -863,6 +863,9 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Provide witnessscript not redeemscript for P2WSH address\");\n         }\n \n+        CScript original_script = script;\n+        CTxDestination original_dest = dest;\n+\n         // P2SH\n         if (!strRedeemScript.empty() && script.IsPayToScriptHash()) {\n             // Check the redeemScript is valid\n@@ -890,34 +893,13 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n-            // Check for P2SH-P2WSH\n-            if (redeemScript.IsPayToWitnessScriptHash()) {\n-                if (!IsHex(witness_script_hex)) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n-                }\n-\n-                // Generate the scripts\n-                std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n-                CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n-                CScriptID witness_id(witness_script);\n-\n-                // Check that the witnessScript and P2SH redeemScript match\n-                if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != redeemScript) {\n-                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the redeemScript\");\n-                }\n-\n-                // Import into the wallet\n-                if (!pwallet->AddWatchOnly(witness_script, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-                }\n-\n-                if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh-p2wsh witnessScript to wallet\");\n-                }\n-            }\n+            // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n+            script = redeemScript;\n+            ExtractDestination(script, dest);\n+        }\n \n         // P2WSH\n-        } else if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n+        if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n             if (!IsHex(witness_script_hex)) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n             }\n@@ -929,7 +911,7 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n \n             // Check that the witnessScript and scriptPubKey match\n             if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey\");\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n             }\n \n             // Import into the wallet\n@@ -989,13 +971,13 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         }\n \n         // Import the address\n-        if (::IsMine(*pwallet, script) == ISMINE_SPENDABLE) {\n+        if (::IsMine(*pwallet, original_script) == ISMINE_SPENDABLE) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n         }\n \n         pwallet->MarkDirty();\n \n-        if (!pwallet->AddWatchOnly(script, timestamp)) {\n+        if (!pwallet->AddWatchOnly(original_script, timestamp)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n         }\n \n@@ -1004,8 +986,8 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         }\n \n         // add to address book or update label\n-        if (IsValidDestination(dest)) {\n-            pwallet->SetAddressBook(dest, label, \"receive\");\n+        if (IsValidDestination(original_dest)) {\n+            pwallet->SetAddressBook(original_dest, label, \"receive\");\n         }\n \n         // Import private keys."
      }
    ]
  },
  {
    "sha": "f2a4e1e2a9f47b7f11e75f173a6bf3ea335b6199",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmE0ZTFlMmE5ZjQ3YjdmMTFlNzVmMTczYTZiZjNlYTMzNWI2MTk5",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-17T01:51:00Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-20T10:45:42Z"
      },
      "message": "Make getaddressinfo return solvability",
      "tree": {
        "sha": "42b7142eccd95a370610336703e41a9e80073945",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42b7142eccd95a370610336703e41a9e80073945"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2a4e1e2a9f47b7f11e75f173a6bf3ea335b6199",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2a4e1e2a9f47b7f11e75f173a6bf3ea335b6199",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2a4e1e2a9f47b7f11e75f173a6bf3ea335b6199",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2a4e1e2a9f47b7f11e75f173a6bf3ea335b6199/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cebab44dc0fbd2867514ded48ec21ebd7b039e05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cebab44dc0fbd2867514ded48ec21ebd7b039e05",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cebab44dc0fbd2867514ded48ec21ebd7b039e05"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "293c8be6a465fcda2aa36dc3e9614f0d2c9eb455",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2a4e1e2a9f47b7f11e75f173a6bf3ea335b6199/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2a4e1e2a9f47b7f11e75f173a6bf3ea335b6199/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f2a4e1e2a9f47b7f11e75f173a6bf3ea335b6199",
        "patch": "@@ -3538,6 +3538,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex-encoded scriptPubKey generated by the address\\n\"\n             \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n+            \"  \\\"issolvable\\\" : true|false,    (boolean) If the address is solvable by the wallet\\n\"\n             \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n             \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n@@ -3592,6 +3593,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     isminetype mine = IsMine(*pwallet, dest);\n     ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n     ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n+    ret.pushKV(\"issolvable\", IsSolvable(*pwallet, scriptPubKey));\n     UniValue detail = DescribeWalletAddress(pwallet, dest);\n     ret.pushKVs(detail);\n     if (pwallet->mapAddressBook.count(dest)) {"
      }
    ]
  },
  {
    "sha": "31d8b4b24aa97e34f02fa54f3f756a77c6a2290b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWQ4YjRiMjRhYTk3ZTM0ZjAyZmE1NGYzZjc1NmE3N2M2YTIyOTBi",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-17T02:02:34Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-20T10:45:44Z"
      },
      "message": "Improve segwit importmulti tests",
      "tree": {
        "sha": "acde3d90d1750cb5a19c6256997770d907b0c1ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acde3d90d1750cb5a19c6256997770d907b0c1ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31d8b4b24aa97e34f02fa54f3f756a77c6a2290b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d8b4b24aa97e34f02fa54f3f756a77c6a2290b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31d8b4b24aa97e34f02fa54f3f756a77c6a2290b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d8b4b24aa97e34f02fa54f3f756a77c6a2290b/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2a4e1e2a9f47b7f11e75f173a6bf3ea335b6199",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2a4e1e2a9f47b7f11e75f173a6bf3ea335b6199",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2a4e1e2a9f47b7f11e75f173a6bf3ea335b6199"
      }
    ],
    "stats": {
      "total": 133,
      "additions": 112,
      "deletions": 21
    },
    "files": [
      {
        "sha": "26982ec61e05e5eee117b47129a04388eff5a538",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 112,
        "deletions": 21,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d8b4b24aa97e34f02fa54f3f756a77c6a2290b/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d8b4b24aa97e34f02fa54f3f756a77c6a2290b/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=31d8b4b24aa97e34f02fa54f3f756a77c6a2290b",
        "patch": "@@ -16,11 +16,7 @@\n from test_framework.script import (\n     CScript,\n     OP_0,\n-    OP_1,\n-    hash160,\n-    OP_CHECKMULTISIG,\n-    OP_HASH160,\n-    OP_EQUAL\n+    hash160\n )\n from test_framework.messages import sha256\n \n@@ -100,6 +96,19 @@ def run_test (self):\n         assert_equal(address_assert['ismine'], False)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n+        # ScriptPubKey + internal + label\n+        self.log.info(\"Should not allow a label to be specified when internal is true\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"timestamp\": \"now\",\n+            \"internal\": True,\n+            \"label\": \"Example label\"\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -8)\n+        assert_equal(result[0]['error']['message'], 'Internal addresses should not have a label')\n+\n         # Nonstandard scriptPubKey + !internal\n         self.log.info(\"Should not import a nonstandard scriptPubKey without internal flag\")\n         nonstandardScriptPubKey = address['scriptPubKey'] + bytes_to_hex_str(script.CScript([script.OP_NOP]))\n@@ -468,8 +477,8 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n-        # Import P2WPKH address\n-        self.log.info(\"Should import a P2WPKH address\")\n+        # Import P2WPKH address as watch only\n+        self.log.info(\"Should import a P2WPKH address as watch only\")\n         address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n@@ -480,27 +489,105 @@ def run_test (self):\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['issolvable'], False)\n \n-        # P2WSH multisig address + witnessscript + private keys\n+        # Import P2WPKH address with public key but no private key\n+        self.log.info(\"Should import a P2WPKH address and public key as solvable but not spendable\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"pubkeys\": [ address['pubkey'] ]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['ismine'], False)\n+        assert_equal(address_assert['issolvable'], True)\n+\n+        # Import P2WPKH address with key and check it is spendable\n+        self.log.info(\"Should import a P2WPKH address with key\")\n+        address = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"keys\": [self.nodes[0].dumpprivkey(address['address'])]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], True)\n+\n+        # P2WSH multisig address without scripts or keys\n         sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n         sig_address_2 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n-        multi_sig_script = self.nodes[0].addmultisigaddress(1, [sig_address_1['pubkey'], sig_address_2['pubkey']], \"\", \"bech32\")\n+        multi_sig_script = self.nodes[0].addmultisigaddress(2, [sig_address_1['pubkey'], sig_address_2['pubkey']], \"\", \"bech32\")\n+        self.log.info(\"Should import a p2wsh multisig as watch only without respective redeem script and private keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n+            \"timestamp\": \"now\"\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n+        assert_equal(address_assert['issolvable'], False)\n+\n+        # Same P2WSH multisig address as above, but now with witnessscript + private keys\n         self.log.info(\"Should import a p2wsh with respective redeem script and private keys\")\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": multi_sig_script['address']\n             },\n             \"timestamp\": \"now\",\n             \"witnessscript\": multi_sig_script['redeemScript'],\n-            \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address'])]\n+            \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address']) ]\n         }])\n         assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n+        assert_equal(address_assert['issolvable'], True)\n+        assert_equal(address_assert['ismine'], True)\n+        assert_equal(address_assert['sigsrequired'], 2)\n \n-        # P2SH-P2PKH address + redeemscript + private key\n+        # P2SH-P2WPKH address with no redeemscript or public or private key\n         sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"p2sh-segwit\"))\n         pubkeyhash = hash160(hex_str_to_bytes(sig_address_1['pubkey']))\n         pkscript = CScript([OP_0, pubkeyhash])\n-        self.log.info(\"Should import a p2sh-p2pkh with respective redeem script and private keys\")\n+        self.log.info(\"Should import a p2sh-p2wpkh without redeem script or keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": sig_address_1['address']\n+            },\n+            \"timestamp\": \"now\"\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(sig_address_1['address'])\n+        assert_equal(address_assert['issolvable'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+        # P2SH-P2WPKH address + redeemscript + public key with no private key\n+        self.log.info(\"Should import a p2sh-p2wpkh with respective redeem script and pubkey as solvable\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": sig_address_1['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"redeemscript\": bytes_to_hex_str(pkscript),\n+            \"pubkeys\": [ sig_address_1['pubkey'] ]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(sig_address_1['address'])\n+        assert_equal(address_assert['issolvable'], True)\n+        assert_equal(address_assert['ismine'], False)\n+\n+        # P2SH-P2WPKH address + redeemscript + private key\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"p2sh-segwit\"))\n+        pubkeyhash = hash160(hex_str_to_bytes(sig_address_1['pubkey']))\n+        pkscript = CScript([OP_0, pubkeyhash])\n+        self.log.info(\"Should import a p2sh-p2wpkh with respective redeem script and private keys\")\n         result = self.nodes[1].importmulti([{\n             \"scriptPubKey\": {\n                 \"address\": sig_address_1['address']\n@@ -510,23 +597,27 @@ def run_test (self):\n             \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address'])]\n         }])\n         assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(sig_address_1['address'])\n+        assert_equal(address_assert['issolvable'], True)\n+        assert_equal(address_assert['ismine'], True)\n \n-        # P2SH-P2WSH 1-of-1 multisig + redeemscript + private key\n+        # P2SH-P2WSH 1-of-1 multisig + redeemscript with no private key\n         sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())\n-        witness_program = CScript([OP_1, hex_str_to_bytes(sig_address_1['pubkey']), OP_1, OP_CHECKMULTISIG])\n-        scripthash = sha256(witness_program)\n+        multi_sig_script = self.nodes[0].addmultisigaddress(1, [sig_address_1['pubkey']], \"\", \"p2sh-segwit\")\n+        scripthash = sha256(hex_str_to_bytes(multi_sig_script['redeemScript']))\n         redeem_script = CScript([OP_0, scripthash])\n-        redeem_script_hash = hash160(redeem_script)\n-        p2sh_script = CScript([OP_HASH160, redeem_script_hash, OP_EQUAL])\n-        self.log.info(\"Should import a p2sh-p2wsh with respective redeem script and private keys\")\n+        self.log.info(\"Should import a p2sh-p2wsh with respective redeem script but no private key\")\n         result = self.nodes[1].importmulti([{\n-            \"scriptPubKey\": bytes_to_hex_str(p2sh_script),\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n             \"timestamp\": \"now\",\n             \"redeemscript\": bytes_to_hex_str(redeem_script),\n-            \"witnessscript\": bytes_to_hex_str(witness_program),\n-            \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address'])]\n+            \"witnessscript\": multi_sig_script['redeemScript']\n         }])\n         assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n+        assert_equal(address_assert['issolvable'], True)\n \n if __name__ == '__main__':\n     ImportMultiTest ().main ()"
      }
    ]
  },
  {
    "sha": "417a64ea154ed96e1c31bd18a6d84ef3f268974f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTdhNjRlYTE1NGVkOTZlMWMzMWJkMThhNmQ4NGVmM2YyNjg5NzRm",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-18T00:07:11Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-20T10:45:45Z"
      },
      "message": "fixups for importmulti segwit support PR",
      "tree": {
        "sha": "3050293ae70f3fc3e9537eab387be1a0747bb5ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3050293ae70f3fc3e9537eab387be1a0747bb5ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/417a64ea154ed96e1c31bd18a6d84ef3f268974f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/417a64ea154ed96e1c31bd18a6d84ef3f268974f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/417a64ea154ed96e1c31bd18a6d84ef3f268974f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/417a64ea154ed96e1c31bd18a6d84ef3f268974f/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31d8b4b24aa97e34f02fa54f3f756a77c6a2290b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d8b4b24aa97e34f02fa54f3f756a77c6a2290b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31d8b4b24aa97e34f02fa54f3f756a77c6a2290b"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 27,
      "deletions": 17
    },
    "files": [
      {
        "sha": "176d68d988c89391f0c1a4c79f3bf47047069555",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 15,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/417a64ea154ed96e1c31bd18a6d84ef3f268974f/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/417a64ea154ed96e1c31bd18a6d84ef3f268974f/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=417a64ea154ed96e1c31bd18a6d84ef3f268974f",
        "patch": "@@ -813,7 +813,7 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n         bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n         if (!isScript && !(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\"))) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scriptPubKey\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"scriptPubKey must be string with script or JSON with address string\");\n         }\n         const std::string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n \n@@ -850,27 +850,28 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n \n         // Watchonly and private keys\n         if (watchOnly && keys.size()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Watch-only addresses should not include private keys\");\n         }\n \n         // Internal addresses should not have a label\n         if (internal && data.exists(\"label\")) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n         }\n \n         // Force users to provide the witness script in its field rather than redeemscript\n         if (!strRedeemScript.empty() && script.IsPayToWitnessScriptHash()) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Provide witnessscript not redeemscript for P2WSH address\");\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"P2WSH addresses have an empty redeemscript. Please provide the witnessscript instead.\");\n         }\n \n-        CScript original_script = script;\n-        CTxDestination original_dest = dest;\n+        CScript scriptpubkey_script = script;\n+        CTxDestination scriptpubkey_dest = dest;\n+        bool allow_p2wpkh = true;\n \n         // P2SH\n         if (!strRedeemScript.empty() && script.IsPayToScriptHash()) {\n             // Check the redeemScript is valid\n             if (!IsHex(strRedeemScript)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script: must be hex string\");\n             }\n \n             // Import redeem script.\n@@ -898,10 +899,10 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             ExtractDestination(script, dest);\n         }\n \n-        // P2WSH\n+        // (P2SH-)P2WSH\n         if (!witness_script_hex.empty() && script.IsPayToWitnessScriptHash()) {\n             if (!IsHex(witness_script_hex)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script\");\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid witness script: must be hex string\");\n             }\n \n             // Generate the scripts\n@@ -923,8 +924,17 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n             }\n \n-        // P2PK/P2PKH/P2WPKH\n-        } else if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n+            // Now set script to the witnessScript so we parse the inner script as P2PK or P2PKH below\n+            script = witness_script;\n+            ExtractDestination(script, dest);\n+            allow_p2wpkh = false; // P2WPKH cannot be embedded in P2WSH\n+        }\n+\n+        // (P2SH-)P2PK/P2PKH/P2WPKH\n+        if (dest.type() == typeid(CKeyID) || dest.type() == typeid(WitnessV0KeyHash)) {\n+            if (!allow_p2wpkh && dest.type() == typeid(WitnessV0KeyHash)) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"P2WPKH cannot be embedded in P2WSH\");\n+            }\n             if (keys.size() > 1 || pubKeys.size() > 1) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than one key given for one single-key address\");\n             }\n@@ -971,13 +981,13 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         }\n \n         // Import the address\n-        if (::IsMine(*pwallet, original_script) == ISMINE_SPENDABLE) {\n+        if (::IsMine(*pwallet, scriptpubkey_script) == ISMINE_SPENDABLE) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n         }\n \n         pwallet->MarkDirty();\n \n-        if (!pwallet->AddWatchOnly(original_script, timestamp)) {\n+        if (!pwallet->AddWatchOnly(scriptpubkey_script, timestamp)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n         }\n \n@@ -986,8 +996,8 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         }\n \n         // add to address book or update label\n-        if (IsValidDestination(original_dest)) {\n-            pwallet->SetAddressBook(original_dest, label, \"receive\");\n+        if (IsValidDestination(scriptpubkey_dest)) {\n+            pwallet->SetAddressBook(scriptpubkey_dest, label, \"receive\");\n         }\n \n         // Import private keys."
      },
      {
        "sha": "08d1e19db8157d4913cc3acfcc919c7dd125eaed",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/417a64ea154ed96e1c31bd18a6d84ef3f268974f/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/417a64ea154ed96e1c31bd18a6d84ef3f268974f/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=417a64ea154ed96e1c31bd18a6d84ef3f268974f",
        "patch": "@@ -217,7 +217,7 @@ def run_test (self):\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n-        assert_equal(result[0]['error']['message'], 'Incompatibility found between watchonly and keys')\n+        assert_equal(result[0]['error']['message'], 'Watch-only addresses should not include private keys')\n         address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], False)\n         assert_equal(address_assert['ismine'], False)\n@@ -358,7 +358,7 @@ def run_test (self):\n         }])\n         assert_equal(result[0]['success'], False)\n         assert_equal(result[0]['error']['code'], -8)\n-        assert_equal(result[0]['error']['message'], 'Incompatibility found between watchonly and keys')\n+        assert_equal(result[0]['error']['message'], 'Watch-only addresses should not include private keys')\n \n \n         # Address + Public key + !Internal + Wrong pubkey"
      }
    ]
  },
  {
    "sha": "7c0268acb59e1a2c497b7aaab07f6ac4a7393988",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzAyNjhhY2I1OWUxYTJjNDk3YjdhYWFiMDdmNmFjNGE3MzkzOTg4",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-20T10:41:19Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-20T10:45:45Z"
      },
      "message": "Rename issolvable to solvable",
      "tree": {
        "sha": "ef4d756db28b533b9a9b670517a728663f3eb772",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef4d756db28b533b9a9b670517a728663f3eb772"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c0268acb59e1a2c497b7aaab07f6ac4a7393988",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c0268acb59e1a2c497b7aaab07f6ac4a7393988",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c0268acb59e1a2c497b7aaab07f6ac4a7393988",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c0268acb59e1a2c497b7aaab07f6ac4a7393988/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "417a64ea154ed96e1c31bd18a6d84ef3f268974f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/417a64ea154ed96e1c31bd18a6d84ef3f268974f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/417a64ea154ed96e1c31bd18a6d84ef3f268974f"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "fb6a97a1fe52dea8b9705aea908d1e0e8d831726",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c0268acb59e1a2c497b7aaab07f6ac4a7393988/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c0268acb59e1a2c497b7aaab07f6ac4a7393988/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7c0268acb59e1a2c497b7aaab07f6ac4a7393988",
        "patch": "@@ -3538,7 +3538,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"address\\\" : \\\"address\\\",        (string) The bitcoin address validated\\n\"\n             \"  \\\"scriptPubKey\\\" : \\\"hex\\\",       (string) The hex-encoded scriptPubKey generated by the address\\n\"\n             \"  \\\"ismine\\\" : true|false,        (boolean) If the address is yours or not\\n\"\n-            \"  \\\"issolvable\\\" : true|false,    (boolean) If the address is solvable by the wallet\\n\"\n+            \"  \\\"solvable\\\" : true|false,      (boolean) If the address is solvable by the wallet\\n\"\n             \"  \\\"iswatchonly\\\" : true|false,   (boolean) If the address is watchonly\\n\"\n             \"  \\\"isscript\\\" : true|false,      (boolean) If the key is a script\\n\"\n             \"  \\\"iswitness\\\" : true|false,     (boolean) If the address is a witness address\\n\"\n@@ -3593,7 +3593,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     isminetype mine = IsMine(*pwallet, dest);\n     ret.pushKV(\"ismine\", bool(mine & ISMINE_SPENDABLE));\n     ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n-    ret.pushKV(\"issolvable\", IsSolvable(*pwallet, scriptPubKey));\n+    ret.pushKV(\"solvable\", IsSolvable(*pwallet, scriptPubKey));\n     UniValue detail = DescribeWalletAddress(pwallet, dest);\n     ret.pushKVs(detail);\n     if (pwallet->mapAddressBook.count(dest)) {"
      },
      {
        "sha": "9ba6860306b517de9671f217e20470c4b9fccdc5",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c0268acb59e1a2c497b7aaab07f6ac4a7393988/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c0268acb59e1a2c497b7aaab07f6ac4a7393988/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=7c0268acb59e1a2c497b7aaab07f6ac4a7393988",
        "patch": "@@ -489,7 +489,7 @@ def run_test (self):\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['iswatchonly'], True)\n-        assert_equal(address_assert['issolvable'], False)\n+        assert_equal(address_assert['solvable'], False)\n \n         # Import P2WPKH address with public key but no private key\n         self.log.info(\"Should import a P2WPKH address and public key as solvable but not spendable\")\n@@ -504,7 +504,7 @@ def run_test (self):\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].getaddressinfo(address['address'])\n         assert_equal(address_assert['ismine'], False)\n-        assert_equal(address_assert['issolvable'], True)\n+        assert_equal(address_assert['solvable'], True)\n \n         # Import P2WPKH address with key and check it is spendable\n         self.log.info(\"Should import a P2WPKH address with key\")\n@@ -534,7 +534,7 @@ def run_test (self):\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n-        assert_equal(address_assert['issolvable'], False)\n+        assert_equal(address_assert['solvable'], False)\n \n         # Same P2WSH multisig address as above, but now with witnessscript + private keys\n         self.log.info(\"Should import a p2wsh with respective redeem script and private keys\")\n@@ -548,7 +548,7 @@ def run_test (self):\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n-        assert_equal(address_assert['issolvable'], True)\n+        assert_equal(address_assert['solvable'], True)\n         assert_equal(address_assert['ismine'], True)\n         assert_equal(address_assert['sigsrequired'], 2)\n \n@@ -565,7 +565,7 @@ def run_test (self):\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].getaddressinfo(sig_address_1['address'])\n-        assert_equal(address_assert['issolvable'], False)\n+        assert_equal(address_assert['solvable'], False)\n         assert_equal(address_assert['ismine'], False)\n \n         # P2SH-P2WPKH address + redeemscript + public key with no private key\n@@ -580,7 +580,7 @@ def run_test (self):\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].getaddressinfo(sig_address_1['address'])\n-        assert_equal(address_assert['issolvable'], True)\n+        assert_equal(address_assert['solvable'], True)\n         assert_equal(address_assert['ismine'], False)\n \n         # P2SH-P2WPKH address + redeemscript + private key\n@@ -598,7 +598,7 @@ def run_test (self):\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].getaddressinfo(sig_address_1['address'])\n-        assert_equal(address_assert['issolvable'], True)\n+        assert_equal(address_assert['solvable'], True)\n         assert_equal(address_assert['ismine'], True)\n \n         # P2SH-P2WSH 1-of-1 multisig + redeemscript with no private key\n@@ -617,7 +617,7 @@ def run_test (self):\n         }])\n         assert_equal(result[0]['success'], True)\n         address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n-        assert_equal(address_assert['issolvable'], True)\n+        assert_equal(address_assert['solvable'], True)\n \n if __name__ == '__main__':\n     ImportMultiTest ().main ()"
      }
    ]
  },
  {
    "sha": "e4a66bb791cc832b192f4fd780d3159b98f494e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNGE2NmJiNzkxY2M4MzJiMTkyZjRmZDc4MGQzMTU5Yjk4ZjQ5NGUz",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-23T02:18:24Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-10-23T02:18:24Z"
      },
      "message": "Do not add inner witness script as watch only",
      "tree": {
        "sha": "d824f86efb9d0f30f81cad9fc5868ef08e05d850",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d824f86efb9d0f30f81cad9fc5868ef08e05d850"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4a66bb791cc832b192f4fd780d3159b98f494e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4a66bb791cc832b192f4fd780d3159b98f494e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4a66bb791cc832b192f4fd780d3159b98f494e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4a66bb791cc832b192f4fd780d3159b98f494e3/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c0268acb59e1a2c497b7aaab07f6ac4a7393988",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c0268acb59e1a2c497b7aaab07f6ac4a7393988",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c0268acb59e1a2c497b7aaab07f6ac4a7393988"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "188c2246f82dc5386ed8c2a4e6639081d2a39ae2",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4a66bb791cc832b192f4fd780d3159b98f494e3/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4a66bb791cc832b192f4fd780d3159b98f494e3/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=e4a66bb791cc832b192f4fd780d3159b98f494e3",
        "patch": "@@ -915,8 +915,8 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n             }\n \n-            // Import into the wallet\n-            if (!pwallet->AddWatchOnly(witness_script, timestamp)) {\n+            // Add the witness script as watch only only if it is not for P2SH-P2WSH\n+            if (!scriptpubkey_script.IsPayToScriptHash() && !pwallet->AddWatchOnly(witness_script, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n "
      }
    ]
  },
  {
    "sha": "6e71d4f1bd34a34ffee703c69dcb1ef998c97653",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTcxZDRmMWJkMzRhMzRmZmVlNzAzYzY5ZGNiMWVmOTk4Yzk3NjUz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-10-20T02:48:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-10-23T04:14:33Z"
      },
      "message": "refactor: introduce script importing helper functions in ProcessImport\n\nIntroduce two functions, ImportScriptsToKeystore and AddScriptsToWatchOnly.\nThese functions move the actual script and public key importing to the\nend of ProcessImport.",
      "tree": {
        "sha": "f9c52677d735e430f3e55aeabde66f35a8408a8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9c52677d735e430f3e55aeabde66f35a8408a8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e71d4f1bd34a34ffee703c69dcb1ef998c97653",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e71d4f1bd34a34ffee703c69dcb1ef998c97653",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e71d4f1bd34a34ffee703c69dcb1ef998c97653",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e71d4f1bd34a34ffee703c69dcb1ef998c97653/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4a66bb791cc832b192f4fd780d3159b98f494e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4a66bb791cc832b192f4fd780d3159b98f494e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4a66bb791cc832b192f4fd780d3159b98f494e3"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 47,
      "deletions": 34
    },
    "files": [
      {
        "sha": "b206dc937d71d7b354c1abb6ec17b3afa4f85c2d",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 34,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e71d4f1bd34a34ffee703c69dcb1ef998c97653/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e71d4f1bd34a34ffee703c69dcb1ef998c97653/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=6e71d4f1bd34a34ffee703c69dcb1ef998c97653",
        "patch": "@@ -805,6 +805,24 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     return reply;\n }\n \n+static void ImportScriptsToKeyStore(CBasicKeyStore* keystore, const std::vector<CScript>& scripts)\n+{\n+    for (const auto& script : scripts) {\n+        if (!keystore->HaveCScript(CScriptID(script)) && !keystore->AddCScript(script)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding script to wallet\");\n+        }\n+    }\n+}\n+\n+static void AddScriptsToWalletWatchOnly(CWallet* wallet, const std::vector<CScript>& scripts, const int64_t timestamp)\n+{\n+    LOCK(wallet->cs_wallet);\n+    for (const auto& script : scripts) {\n+        if (!wallet->AddWatchOnly(script, timestamp)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding script to wallet\");\n+        }\n+    }\n+}\n \n static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n@@ -829,6 +847,8 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         // Generate the script and destination for the scriptPubKey provided\n         CScript script;\n         CTxDestination dest;\n+        std::vector<CScript> scripts_to_import;\n+        std::vector<CScript> scripts_to_watchonly;\n \n         if (!isScript) {\n             dest = DecodeDestination(output);\n@@ -884,15 +904,8 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The redeemScript does not match the scriptPubKey\");\n             }\n \n-            pwallet->MarkDirty();\n-\n-            if (!pwallet->AddWatchOnly(redeemScript, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            if (!pwallet->HaveCScript(redeem_id) && !pwallet->AddCScript(redeemScript)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n-            }\n+            scripts_to_import.push_back(redeemScript);\n+            scripts_to_watchonly.push_back(redeemScript);\n \n             // Now set script to the redeemScript so we parse the inner script as P2WSH or P2WPKH below\n             script = redeemScript;\n@@ -908,21 +921,17 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             // Generate the scripts\n             std::vector<unsigned char> witness_script_parsed(ParseHex(witness_script_hex));\n             CScript witness_script = CScript(witness_script_parsed.begin(), witness_script_parsed.end());\n-            CScriptID witness_id(witness_script);\n \n             // Check that the witnessScript and scriptPubKey match\n             if (GetScriptForDestination(WitnessV0ScriptHash(witness_script)) != script) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"The witnessScript does not match the scriptPubKey or redeemScript\");\n             }\n \n             // Add the witness script as watch only only if it is not for P2SH-P2WSH\n-            if (!scriptpubkey_script.IsPayToScriptHash() && !pwallet->AddWatchOnly(witness_script, timestamp)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-            }\n-\n-            if (!pwallet->HaveCScript(witness_id) && !pwallet->AddCScript(witness_script)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2wsh witnessScript to wallet\");\n+            if (!scriptpubkey_script.IsPayToScriptHash()) {\n+                scripts_to_watchonly.push_back(witness_script);\n             }\n+            scripts_to_import.push_back(witness_script);\n \n             // Now set script to the witnessScript so we parse the inner script as P2PK or P2PKH below\n             script = witness_script;\n@@ -972,11 +981,7 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }\n \n-                pwallet->MarkDirty();\n-\n-                if (!pwallet->AddWatchOnly(scriptRawPubKey, timestamp)) {\n-                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-                }\n+                scripts_to_watchonly.push_back(scriptRawPubKey);\n             }\n         }\n \n@@ -985,21 +990,9 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n         }\n \n+        // Mark wallet dirty before any imports happen\n         pwallet->MarkDirty();\n \n-        if (!pwallet->AddWatchOnly(scriptpubkey_script, timestamp)) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n-        }\n-\n-        if (!watchOnly && !pwallet->HaveCScript(CScriptID(scriptpubkey_script)) && !pwallet->AddCScript(scriptpubkey_script)) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding scriptPubKey script to wallet\");\n-        }\n-\n-        // add to address book or update label\n-        if (IsValidDestination(scriptpubkey_dest)) {\n-            pwallet->SetAddressBook(scriptpubkey_dest, label, \"receive\");\n-        }\n-\n         // Import private keys.\n         for (size_t i = 0; i < keys.size(); i++) {\n             const std::string& strPrivkey = keys[i].get_str();\n@@ -1027,9 +1020,29 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n             }\n \n+            scripts_to_watchonly.push_back(GetScriptForRawPubKey(pubKey));\n+\n             pwallet->UpdateTimeFirstKey(timestamp);\n         }\n \n+        // Finally import things\n+        // Import the scripts to the wallet\n+        AddScriptsToWalletWatchOnly(pwallet, scripts_to_watchonly, timestamp);\n+        ImportScriptsToKeyStore(pwallet, scripts_to_import);\n+\n+        if (!pwallet->AddWatchOnly(scriptpubkey_script, timestamp)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+        }\n+\n+        if (!watchOnly && !pwallet->HaveCScript(CScriptID(scriptpubkey_script)) && !pwallet->AddCScript(scriptpubkey_script)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding scriptPubKey script to wallet\");\n+        }\n+\n+        // add to address book or update label\n+        if (IsValidDestination(dest)) {\n+            pwallet->SetAddressBook(dest, label, \"receive\");\n+        }\n+\n         UniValue result = UniValue(UniValue::VOBJ);\n         result.pushKV(\"success\", UniValue(true));\n         return result;"
      }
    ]
  },
  {
    "sha": "45a5d3d989124e1c496de5b4f4e77c670e3cf193",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWE1ZDNkOTg5MTI0ZTFjNDk2ZGU1YjRmNGU3N2M2NzBlM2NmMTkz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-10-20T17:26:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-10-23T16:25:29Z"
      },
      "message": "Introduce AllUsedKeyStore\n\nAllUsedKeyStore is used to track whether all of the scripts and\npublic keys in the keystore have been used in signing.\n\nTo avoid issues with const-ness, the usage maps are in a separate\nstruct which is pointed to by a pointer in AllUsedKeyStore. This\nallows GetPubKey and GetCScript to properly override the CBasicKeyStore\nfunctions.",
      "tree": {
        "sha": "49fc77dd9b3fc39a957ad829fc588d21b043208d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49fc77dd9b3fc39a957ad829fc588d21b043208d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45a5d3d989124e1c496de5b4f4e77c670e3cf193",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45a5d3d989124e1c496de5b4f4e77c670e3cf193",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45a5d3d989124e1c496de5b4f4e77c670e3cf193",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45a5d3d989124e1c496de5b4f4e77c670e3cf193/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e71d4f1bd34a34ffee703c69dcb1ef998c97653",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e71d4f1bd34a34ffee703c69dcb1ef998c97653",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e71d4f1bd34a34ffee703c69dcb1ef998c97653"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 109,
      "deletions": 1
    },
    "files": [
      {
        "sha": "54cf8f57045cf57531bac4c0d6c0d574c3b4aa8c",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45a5d3d989124e1c496de5b4f4e77c670e3cf193/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45a5d3d989124e1c496de5b4f4e77c670e3cf193/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=45a5d3d989124e1c496de5b4f4e77c670e3cf193",
        "patch": "@@ -121,7 +121,7 @@ bool CBasicKeyStore::GetCScript(const CScriptID &hash, CScript& redeemScriptOut)\n     return false;\n }\n \n-static bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n+bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut)\n {\n     //TODO: Use Solver to extract this?\n     CScript::const_iterator pc = dest.begin();"
      },
      {
        "sha": "0f4e3a3540320bbd9336f366506fe57b3082fce7",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45a5d3d989124e1c496de5b4f4e77c670e3cf193/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45a5d3d989124e1c496de5b4f4e77c670e3cf193/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=45a5d3d989124e1c496de5b4f4e77c670e3cf193",
        "patch": "@@ -80,4 +80,7 @@ CKeyID GetKeyForDestination(const CKeyStore& store, const CTxDestination& dest);\n /** Checks if a CKey is in the given CKeyStore compressed or otherwise*/\n bool HaveKey(const CKeyStore& store, const CKey& key);\n \n+/** Retrieves the pubkey from a p2pk scriptPubKey */\n+bool ExtractPubKey(const CScript &dest, CPubKey& pubKeyOut);\n+\n #endif // BITCOIN_KEYSTORE_H"
      },
      {
        "sha": "7028d7ecff7bb7cc8043bc62c4db8084692891d2",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 105,
        "deletions": 0,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45a5d3d989124e1c496de5b4f4e77c670e3cf193/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45a5d3d989124e1c496de5b4f4e77c670e3cf193/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=45a5d3d989124e1c496de5b4f4e77c670e3cf193",
        "patch": "@@ -805,6 +805,111 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     return reply;\n }\n \n+struct UsageMaps {\n+    using ScriptUseMap = std::map<CScriptID, bool>;\n+    using WatchKeyUseMap = std::map<CKeyID, bool>;\n+    using KeyUseMap = std::map<CKeyID, bool>;\n+\n+    WatchKeyUseMap map_watch_key_use;\n+    ScriptUseMap map_script_use;\n+    KeyUseMap map_key_use;\n+};\n+\n+// Class which remembers whether every script and public key was used\n+class AllUsedKeyStore : public CBasicKeyStore\n+{\n+private:\n+    struct UsageMaps* usage = new UsageMaps();\n+public:\n+    bool AllUsed() const;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    bool AddCScript(const CScript& redeemScript) override;\n+    bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n+    bool AddWatchOnly(const CScript &dest) override;\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n+    bool GetKeyOrigin(const CKeyID& id, KeyOriginInfo& info) const override;\n+};\n+\n+bool AllUsedKeyStore::GetPubKey(const CKeyID &address, CPubKey &pubkey_out) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (CBasicKeyStore::GetPubKey(address, pubkey_out)) {\n+        usage->map_watch_key_use[address] = true;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool AllUsedKeyStore::GetCScript(const CScriptID &hash, CScript& script_out) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (CBasicKeyStore::GetCScript(hash, script_out)) {\n+        usage->map_script_use[hash] = true;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool AllUsedKeyStore::AddWatchOnly(const CScript &dest)\n+{\n+    LOCK(cs_KeyStore);\n+    setWatchOnly.insert(dest);\n+    CPubKey pubKey;\n+    if (ExtractPubKey(dest, pubKey)) {\n+        mapWatchKeys[pubKey.GetID()] = pubKey;\n+        usage->map_watch_key_use[pubKey.GetID()] = false;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool AllUsedKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_KeyStore);\n+    if (CBasicKeyStore::AddKeyPubKey(key, pubkey)) {\n+        usage->map_key_use[pubkey.GetID()] = false;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool AllUsedKeyStore::GetKey(const CKeyID &address, CKey &keyOut) const\n+{\n+    LOCK(cs_KeyStore);\n+    if (CBasicKeyStore::GetKey(address, keyOut)) {\n+        usage->map_key_use[address] = true;\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool AllUsedKeyStore::AddCScript(const CScript& redeemScript)\n+{\n+    if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n+        return error(\"CBasicKeyStore::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n+\n+    LOCK(cs_KeyStore);\n+    mapScripts[CScriptID(redeemScript)] =redeemScript;\n+    usage->map_script_use[CScriptID(redeemScript)] = false;\n+    return true;\n+}\n+\n+bool AllUsedKeyStore::AllUsed() const\n+{\n+    LOCK(cs_KeyStore);\n+    bool used = true;\n+    for (const auto& script_pair : usage->map_script_use) {\n+        used &= script_pair.second;\n+    }\n+    for (const auto& key_pair : usage->map_watch_key_use) {\n+        used &= key_pair.second;\n+    }\n+    for (const auto& key_pair : usage->map_key_use) {\n+        used &= key_pair.second;\n+    }\n+    return used;\n+}\n+\n static void ImportScriptsToKeyStore(CBasicKeyStore* keystore, const std::vector<CScript>& scripts)\n {\n     for (const auto& script : scripts) {"
      }
    ]
  },
  {
    "sha": "9879272cf9618d57066560aa7e582750b188bc5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODc5MjcyY2Y5NjE4ZDU3MDY2NTYwYWE3ZTU4Mjc1MGIxODhiYzVk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-10-20T17:45:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-10-24T04:41:19Z"
      },
      "message": "rpc: importmulti: Check for solvability and minimal import\n\nCheck that if more than just a scriptPubKey was imported, that there\nwas enough data to be solvable.\n\nCheck that if more than just a scriptPubKey was imported, that the\nminimal data needed for solvability was imported.",
      "tree": {
        "sha": "a665864f7923f740869e2395d7918f1589edf197",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a665864f7923f740869e2395d7918f1589edf197"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9879272cf9618d57066560aa7e582750b188bc5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9879272cf9618d57066560aa7e582750b188bc5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9879272cf9618d57066560aa7e582750b188bc5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9879272cf9618d57066560aa7e582750b188bc5d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45a5d3d989124e1c496de5b4f4e77c670e3cf193",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45a5d3d989124e1c496de5b4f4e77c670e3cf193",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45a5d3d989124e1c496de5b4f4e77c670e3cf193"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 57,
      "deletions": 15
    },
    "files": [
      {
        "sha": "266c1ca62e29920c1e508991bafc7e626707cde9",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 15,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9879272cf9618d57066560aa7e582750b188bc5d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9879272cf9618d57066560aa7e582750b188bc5d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9879272cf9618d57066560aa7e582750b188bc5d",
        "patch": "@@ -919,6 +919,42 @@ static void ImportScriptsToKeyStore(CBasicKeyStore* keystore, const std::vector<\n     }\n }\n \n+static void ImportKeysToKeyStore(CBasicKeyStore* keystore, const std::vector<CKey>& keys)\n+{\n+    for (const auto& key : keys) {\n+        CPubKey pubKey = key.GetPubKey();\n+        CKeyID vchAddress = pubKey.GetID();\n+\n+        if (keystore->HaveKey(vchAddress)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n+        }\n+\n+        if (!keystore->AddKeyPubKey(key, pubKey)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n+        }\n+    }\n+}\n+\n+static void AddKeyMetaToWallet(CWallet* wallet, const std::vector<CKey>& keys, const int64_t timestamp)\n+{\n+    LOCK(wallet->cs_wallet);\n+    for (const auto& key : keys) {\n+        CPubKey pubKey = key.GetPubKey();\n+        CKeyID vchAddress = pubKey.GetID();\n+        wallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n+        wallet->UpdateTimeFirstKey(timestamp);\n+    }\n+}\n+\n+static void AddScriptsToKeyStoreWatchOnly(CBasicKeyStore* keystore, const std::vector<CScript>& scripts)\n+{\n+    for (const auto& script : scripts) {\n+        if (!keystore->AddWatchOnly(script)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding script to wallet\");\n+        }\n+    }\n+}\n+\n static void AddScriptsToWalletWatchOnly(CWallet* wallet, const std::vector<CScript>& scripts, const int64_t timestamp)\n {\n     LOCK(wallet->cs_wallet);\n@@ -1099,6 +1135,7 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n         pwallet->MarkDirty();\n \n         // Import private keys.\n+        std::vector<CKey> keys_to_import;\n         for (size_t i = 0; i < keys.size(); i++) {\n             const std::string& strPrivkey = keys[i].get_str();\n \n@@ -1108,32 +1145,37 @@ static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, con\n             if (!key.IsValid()) {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n             }\n-\n             CPubKey pubKey = key.GetPubKey();\n             assert(key.VerifyPubKey(pubKey));\n+            keys_to_import.push_back(key);\n+        }\n \n-            CKeyID vchAddress = pubKey.GetID();\n-            pwallet->MarkDirty();\n-\n-            if (pwallet->HaveKey(vchAddress)) {\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n+        // Finally import things\n+        // Check for solvability and that only necessary things were introduced\n+        if (scripts_to_import.size() || scripts_to_watchonly.size()) {\n+            // Import everything into an AllUsedKeyStore first\n+            AllUsedKeyStore auks;\n+            AddScriptsToKeyStoreWatchOnly(&auks, scripts_to_watchonly);\n+            ImportScriptsToKeyStore(&auks, scripts_to_import);\n+            ImportKeysToKeyStore(&auks, keys_to_import);\n+\n+            // Check that we have everything for solvability by dummy signing\n+            SignatureData sigdata;\n+            if (!ProduceSignature(auks, DUMMY_SIGNATURE_CREATOR, scriptpubkey_script, sigdata)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Not enough information was provided to make outputs with this scriptPubKey solvable.\");\n             }\n \n-            pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n-\n-            if (!pwallet->AddKeyPubKey(key, pubKey)) {\n-                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n+            // Make sure that no extra data was provided\n+            if (!auks.AllUsed()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"More data was imported than was necessary to make this solvable.\");\n             }\n-\n-            scripts_to_watchonly.push_back(GetScriptForRawPubKey(pubKey));\n-\n-            pwallet->UpdateTimeFirstKey(timestamp);\n         }\n \n-        // Finally import things\n         // Import the scripts to the wallet\n         AddScriptsToWalletWatchOnly(pwallet, scripts_to_watchonly, timestamp);\n         ImportScriptsToKeyStore(pwallet, scripts_to_import);\n+        ImportKeysToKeyStore(pwallet, keys_to_import);\n+        AddKeyMetaToWallet(pwallet, keys_to_import, timestamp);\n \n         if (!pwallet->AddWatchOnly(scriptpubkey_script, timestamp)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");"
      }
    ]
  },
  {
    "sha": "7b93302c48cb67b16093da9ec4394b671fb11779",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjkzMzAyYzQ4Y2I2N2IxNjA5M2RhOWVjNDM5NGI2NzFmYjExNzc5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-10-23T15:24:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-10-24T04:41:19Z"
      },
      "message": "Test solvability requirement",
      "tree": {
        "sha": "8b4d9a8fbc27a93ca1de51f48e3037c382817bf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b4d9a8fbc27a93ca1de51f48e3037c382817bf0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b93302c48cb67b16093da9ec4394b671fb11779",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b93302c48cb67b16093da9ec4394b671fb11779",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b93302c48cb67b16093da9ec4394b671fb11779",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b93302c48cb67b16093da9ec4394b671fb11779/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9879272cf9618d57066560aa7e582750b188bc5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9879272cf9618d57066560aa7e582750b188bc5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9879272cf9618d57066560aa7e582750b188bc5d"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 34,
      "deletions": 3
    },
    "files": [
      {
        "sha": "cd439f085b272c2ca55066a873bdb698d79ba495",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b93302c48cb67b16093da9ec4394b671fb11779/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b93302c48cb67b16093da9ec4394b671fb11779/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=7b93302c48cb67b16093da9ec4394b671fb11779",
        "patch": "@@ -457,6 +457,10 @@ class DummySignatureCreator final : public BaseSignatureCreator {\n     const BaseSignatureChecker& Checker() const override { return DUMMY_CHECKER; }\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override\n     {\n+        // Fetch the key to satisfy things that rely on CreateSig doing GetKey\n+        CKey key;\n+        provider.GetKey(keyid, key);\n+\n         // Create a dummy signature that is a valid DER-encoding\n         vchSig.assign(m_r_len + m_s_len + 7, '\\000');\n         vchSig[0] = 0x30;"
      },
      {
        "sha": "0f439f5deb9d24c48e3cddadcc3ef5d508f38119",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b93302c48cb67b16093da9ec4394b671fb11779/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b93302c48cb67b16093da9ec4394b671fb11779/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=7b93302c48cb67b16093da9ec4394b671fb11779",
        "patch": "@@ -827,7 +827,7 @@ class AllUsedKeyStore : public CBasicKeyStore\n     bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n     bool AddWatchOnly(const CScript &dest) override;\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n-    bool GetKeyOrigin(const CKeyID& id, KeyOriginInfo& info) const override;\n+    bool GetKey(const CKeyID &address, CKey &keyOut) const override;\n };\n \n bool AllUsedKeyStore::GetPubKey(const CKeyID &address, CPubKey &pubkey_out) const\n@@ -858,9 +858,8 @@ bool AllUsedKeyStore::AddWatchOnly(const CScript &dest)\n     if (ExtractPubKey(dest, pubKey)) {\n         mapWatchKeys[pubKey.GetID()] = pubKey;\n         usage->map_watch_key_use[pubKey.GetID()] = false;\n-        return true;\n     }\n-    return false;\n+    return true;\n }\n \n bool AllUsedKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)"
      },
      {
        "sha": "36b3a274ebb910cfce39dee507e60d389d8ccf7a",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b93302c48cb67b16093da9ec4394b671fb11779/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b93302c48cb67b16093da9ec4394b671fb11779/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=7b93302c48cb67b16093da9ec4394b671fb11779",
        "patch": "@@ -619,5 +619,33 @@ def run_test (self):\n         address_assert = self.nodes[1].getaddressinfo(multi_sig_script['address'])\n         assert_equal(address_assert['solvable'], True)\n \n+        # P2SH-P2WPKH address + redeemscript\n+        # Should fail since a pubkey is needed to make this solvable\n+        sig_address_1 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress(address_type=\"p2sh-segwit\"))\n+        pubkeyhash = hash160(hex_str_to_bytes(sig_address_1['pubkey']))\n+        pkscript = CScript([OP_0, pubkeyhash])\n+        self.log.info(\"Should fail to import a p2sh-p2wpkh with only the redeem script\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": sig_address_1['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"redeemscript\": bytes_to_hex_str(pkscript),\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['message'], 'Not enough information was provided to make outputs with this scriptPubKey solvable.')\n+\n+        # P2SH-P2WPKH address + pubkey\n+        # Weird case since the redeemScript is added to the wallet by importing the pubkey\n+        self.log.info(\"Should import a p2sh-p2wpkh with only the pubkey\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": sig_address_1['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"pubkeys\": [ sig_address_1['pubkey'] ]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+\n if __name__ == '__main__':\n     ImportMultiTest ().main ()"
      }
    ]
  }
]