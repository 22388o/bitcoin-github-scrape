sipa,2018-10-24T07:11:26Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/14558#issuecomment-432539534,432539534,
DrahtBot,2018-10-24T16:54:04Z,"<!--e57a25ab6845829454e8d69fc972939a-->Reviewers, this pull request conflicts with the following ones:\n\n* #14565 (Overhaul importmulti logic by sipa)\n* #14454 (Add SegWit support to importmulti by MeshCollider)\n* #14303 (rpc: Early call once CWallet::MarkDirty in import calls by promag)\n* #14075 (Import watch only pubkeys to the keypool if private keys are disabled by achow101)\n* #14021 (Imp",https://github.com/bitcoin/bitcoin/pull/14558#issuecomment-432739445,432739445,
achow101,2018-10-30T04:24:15Z,Closing in favor of #14565,https://github.com/bitcoin/bitcoin/pull/14558#issuecomment-434167543,434167543,
promag,2018-10-24T09:22:07Z,Any reason to not move these to `AllUsedKeyStore`?,https://github.com/bitcoin/bitcoin/pull/14558#discussion_r227708275,227708275,src/wallet/rpcdump.cpp
achow101,2018-10-24T13:25:13Z,"Yes. The functions `GetKey`, `GetPubKey`, and `GetCScript` are all const functions and need to be in order to override the `CBasicKeyStore` versions of them. However, those functions need to modify the usage maps. If they were in `AllUsedKeyStore`, those functions would not be const. By having them in a separate struct that has a pointer in `AllUsedKeyStore`, the functions can remain const but sti",https://github.com/bitcoin/bitcoin/pull/14558#discussion_r227786140,227786140,src/wallet/rpcdump.cpp
promag,2018-10-24T13:33:36Z,"Got it, thanks. ",https://github.com/bitcoin/bitcoin/pull/14558#discussion_r227789618,227789618,src/wallet/rpcdump.cpp
promag,2018-10-24T13:33:59Z,This is leaking.,https://github.com/bitcoin/bitcoin/pull/14558#discussion_r227789783,227789783,src/wallet/rpcdump.cpp
promag,2018-10-24T13:34:29Z,"Nit, could remove struct?",https://github.com/bitcoin/bitcoin/pull/14558#discussion_r227790036,227790036,src/wallet/rpcdump.cpp
practicalswift,2018-10-24T14:54:03Z,`scriptpubkey_dest` is unused?,https://github.com/bitcoin/bitcoin/pull/14558#discussion_r227825582,227825582,src/wallet/rpcdump.cpp
practicalswift,2018-10-24T14:58:22Z,Make the parameters names match between declaration and definition (`CPubKey& vchPubKeyOut` vs `CPubKey &pubkey_out`) :-),https://github.com/bitcoin/bitcoin/pull/14558#discussion_r227827584,227827584,src/wallet/rpcdump.cpp
practicalswift,2018-10-24T15:00:55Z,Same here: `CScript& redeemScriptOut` vs `CScript& script_out` :-),https://github.com/bitcoin/bitcoin/pull/14558#discussion_r227828834,227828834,src/wallet/rpcdump.cpp
promag,2018-10-24T21:57:29Z,"You could invert the logic and keep track of the unused\n - when adding a key, add to the unused set\n - when reading a key, remove from the unused set\n\nThen `AllUsed` could look like (s/usage/unused):\n```cpp\n    return \n        unused->watch_keys.empty() &&\n        unused->scripts.empty() &&\n        unused->keys.empty();\n```\n\nI could be missing some detail.",https://github.com/bitcoin/bitcoin/pull/14558#discussion_r227974598,227974598,src/wallet/rpcdump.cpp
