[
  {
    "sha": "30da90de8dcbb62199262f65516e574dab57d1bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGRhOTBkZThkY2JiNjIxOTkyNjJmNjU1MTZlNTc0ZGFiNTdkMWJk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-11-02T06:53:55Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-04-24T00:50:39Z"
      },
      "message": "Add CMerkleBlock constructor for tx set + block and an empty one",
      "tree": {
        "sha": "630cfb9d9a171668a9ee57f0fdd75f3aaeeec998",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/630cfb9d9a171668a9ee57f0fdd75f3aaeeec998"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30da90de8dcbb62199262f65516e574dab57d1bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30da90de8dcbb62199262f65516e574dab57d1bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30da90de8dcbb62199262f65516e574dab57d1bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30da90de8dcbb62199262f65516e574dab57d1bd/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "734f80a5d18821f4f6d0488996655c6e35ce160c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/734f80a5d18821f4f6d0488996655c6e35ce160c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/734f80a5d18821f4f6d0488996655c6e35ce160c"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 28,
      "deletions": 0
    },
    "files": [
      {
        "sha": "40723f0322b5e64b522fae8bbe00defbbf0d421b",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30da90de8dcbb62199262f65516e574dab57d1bd/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30da90de8dcbb62199262f65516e574dab57d1bd/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=30da90de8dcbb62199262f65516e574dab57d1bd",
        "patch": "@@ -37,6 +37,29 @@ CMerkleBlock::CMerkleBlock(const CBlock& block, CBloomFilter& filter)\n     txn = CPartialMerkleTree(vHashes, vMatch);\n }\n \n+CMerkleBlock::CMerkleBlock(const CBlock& block, const std::set<uint256>& txids)\n+{\n+    header = block.GetBlockHeader();\n+\n+    vector<bool> vMatch;\n+    vector<uint256> vHashes;\n+\n+    vMatch.reserve(block.vtx.size());\n+    vHashes.reserve(block.vtx.size());\n+\n+    for (unsigned int i = 0; i < block.vtx.size(); i++)\n+    {\n+        const uint256& hash = block.vtx[i].GetHash();\n+        if (txids.count(hash))\n+            vMatch.push_back(true);\n+        else\n+            vMatch.push_back(false);\n+        vHashes.push_back(hash);\n+    }\n+\n+    txn = CPartialMerkleTree(vHashes, vMatch);\n+}\n+\n uint256 CPartialMerkleTree::CalcHash(int height, unsigned int pos, const std::vector<uint256> &vTxid) {\n     if (height == 0) {\n         // hash at height 0 is the txids themself"
      },
      {
        "sha": "d90face17c3a24b200f6f433b17228665eb1ffd7",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30da90de8dcbb62199262f65516e574dab57d1bd/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30da90de8dcbb62199262f65516e574dab57d1bd/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=30da90de8dcbb62199262f65516e574dab57d1bd",
        "patch": "@@ -139,6 +139,11 @@ class CMerkleBlock\n      */\n     CMerkleBlock(const CBlock& block, CBloomFilter& filter);\n \n+    // Create from a CBlock, matching the txids in the set\n+    CMerkleBlock(const CBlock& block, const std::set<uint256>& txids);\n+\n+    CMerkleBlock() {}\n+\n     ADD_SERIALIZE_METHODS;\n \n     template <typename Stream, typename Operation>"
      }
    ]
  },
  {
    "sha": "59ed61b3895b022f61970ea7aac0c20e8ba38886",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWVkNjFiMzg5NWIwMjJmNjE5NzBlYTdhYWMwYzIwZThiYTM4ODg2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-11-01T23:01:48Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-04-24T00:50:39Z"
      },
      "message": "Add RPC call to generate and verify merkle blocks",
      "tree": {
        "sha": "6732e33e4d1dbb70a37ee474c660c6fea0572065",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6732e33e4d1dbb70a37ee474c660c6fea0572065"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59ed61b3895b022f61970ea7aac0c20e8ba38886",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59ed61b3895b022f61970ea7aac0c20e8ba38886",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59ed61b3895b022f61970ea7aac0c20e8ba38886",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59ed61b3895b022f61970ea7aac0c20e8ba38886/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30da90de8dcbb62199262f65516e574dab57d1bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30da90de8dcbb62199262f65516e574dab57d1bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30da90de8dcbb62199262f65516e574dab57d1bd"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 119,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ad676f9edcfaccd3a0d00ce113e8088edfe74ec3",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59ed61b3895b022f61970ea7aac0c20e8ba38886/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59ed61b3895b022f61970ea7aac0c20e8ba38886/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=59ed61b3895b022f61970ea7aac0c20e8ba38886",
        "patch": "@@ -79,6 +79,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"sendrawtransaction\", 1 },\n     { \"gettxout\", 1 },\n     { \"gettxout\", 2 },\n+    { \"gettxoutproof\", 0 },\n     { \"lockunspent\", 0 },\n     { \"lockunspent\", 1 },\n     { \"importprivkey\", 2 },"
      },
      {
        "sha": "1e13f5dbbadd0c530732dde000201b659adb1ad0",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 114,
        "deletions": 0,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59ed61b3895b022f61970ea7aac0c20e8ba38886/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59ed61b3895b022f61970ea7aac0c20e8ba38886/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=59ed61b3895b022f61970ea7aac0c20e8ba38886",
        "patch": "@@ -9,6 +9,7 @@\n #include \"init.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n+#include \"merkleblock.h\"\n #include \"net.h\"\n #include \"rpcserver.h\"\n #include \"script/script.h\"\n@@ -193,6 +194,119 @@ Value getrawtransaction(const Array& params, bool fHelp)\n     return result;\n }\n \n+Value gettxoutproof(const Array& params, bool fHelp)\n+{\n+    if (fHelp || (params.size() != 1 && params.size() != 2))\n+        throw runtime_error(\n+            \"gettxoutproof [\\\"txid\\\",...] ( blockhash )\\n\"\n+            \"\\nReturns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n+            \"\\nNOTE: By default this function only works sometimes. This is when there is an\\n\"\n+            \"unspent output in the utxo for this transaction. To make it always work,\\n\"\n+            \"you need to maintain a transaction index, using the -txindex command line option or\\n\"\n+            \"specify the block in which the transaction is included in manually (by blockhash).\\n\"\n+            \"\\nReturn the raw transaction data.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"txids\\\"       (string) A json array of txids to filter\\n\"\n+            \"    [\\n\"\n+            \"      \\\"txid\\\"     (string) A transaction hash\\n\"\n+            \"      ,...\\n\"\n+            \"    ]\\n\"\n+            \"2. \\\"block hash\\\"  (string, optional) If specified, looks for txid in the block with this hash\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"data\\\"           (string) A string that is a serialized, hex-encoded data for the proof.\\n\"\n+        );\n+\n+    set<uint256> setTxids;\n+    uint256 oneTxid;\n+    Array txids = params[0].get_array();\n+    BOOST_FOREACH(Value& txid, txids) {\n+        if (txid.get_str().length() != 64 || !IsHex(txid.get_str()))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid txid \")+txid.get_str());\n+        uint256 hash(uint256S(txid.get_str()));\n+        if (setTxids.count(hash))\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, string(\"Invalid parameter, duplicated txid: \")+txid.get_str());\n+       setTxids.insert(hash);\n+       oneTxid = hash;\n+    }\n+\n+    LOCK(cs_main);\n+\n+    CBlockIndex* pblockindex = NULL;\n+\n+    uint256 hashBlock;\n+    if (params.size() > 1)\n+    {\n+        hashBlock = uint256S(params[1].get_str());\n+        if (!mapBlockIndex.count(hashBlock))\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        pblockindex = mapBlockIndex[hashBlock];\n+    } else {\n+        CCoins coins;\n+        if (pcoinsTip->GetCoins(oneTxid, coins) && coins.nHeight > 0 && coins.nHeight <= chainActive.Height())\n+            pblockindex = chainActive[coins.nHeight];\n+    }\n+\n+    if (pblockindex == NULL)\n+    {\n+        CTransaction tx;\n+        if (!GetTransaction(oneTxid, tx, hashBlock, false) || hashBlock.IsNull())\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not yet in block\");\n+        if (!mapBlockIndex.count(hashBlock))\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Transaction index corrupt\");\n+        pblockindex = mapBlockIndex[hashBlock];\n+    }\n+\n+    CBlock block;\n+    if(!ReadBlockFromDisk(block, pblockindex))\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n+\n+    unsigned int ntxFound = 0;\n+    BOOST_FOREACH(const CTransaction&tx, block.vtx)\n+        if (setTxids.count(tx.GetHash()))\n+            ntxFound++;\n+    if (ntxFound != setTxids.size())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"(Not all) transactions not found in specified block\");\n+\n+    CDataStream ssMB(SER_NETWORK, PROTOCOL_VERSION);\n+    CMerkleBlock mb(block, setTxids);\n+    ssMB << mb;\n+    std::string strHex = HexStr(ssMB.begin(), ssMB.end());\n+    return strHex;\n+}\n+\n+Value verifytxoutproof(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"verifytxoutproof \\\"proof\\\"\\n\"\n+            \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n+            \"and throwing an RPC error if the block is not in our best chain\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"proof\\\"    (string, required) The hex-encoded proof generated by gettxoutproof\\n\"\n+            \"\\nResult:\\n\"\n+            \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid\\n\"\n+        );\n+\n+    CDataStream ssMB(ParseHexV(params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CMerkleBlock merkleBlock;\n+    ssMB >> merkleBlock;\n+\n+    Array res;\n+\n+    vector<uint256> vMatch;\n+    if (merkleBlock.txn.ExtractMatches(vMatch) != merkleBlock.header.hashMerkleRoot)\n+        return res;\n+\n+    LOCK(cs_main);\n+\n+    if (!mapBlockIndex.count(merkleBlock.header.GetHash()) || !chainActive.Contains(mapBlockIndex[merkleBlock.header.GetHash()]))\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found in chain\");\n+\n+    BOOST_FOREACH(const uint256& hash, vMatch)\n+        res.push_back(hash.GetHex());\n+    return res;\n+}\n+\n Value createrawtransaction(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 2)"
      },
      {
        "sha": "61dda9125b9fff6e749b720c29edf66cce1ca23e",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59ed61b3895b022f61970ea7aac0c20e8ba38886/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59ed61b3895b022f61970ea7aac0c20e8ba38886/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=59ed61b3895b022f61970ea7aac0c20e8ba38886",
        "patch": "@@ -293,6 +293,8 @@ static const CRPCCommand vRPCCommands[] =\n     { \"blockchain\",         \"getmempoolinfo\",         &getmempoolinfo,         true  },\n     { \"blockchain\",         \"getrawmempool\",          &getrawmempool,          true  },\n     { \"blockchain\",         \"gettxout\",               &gettxout,               true  },\n+    { \"blockchain\",         \"gettxoutproof\",          &gettxoutproof,          true  },\n+    { \"blockchain\",         \"verifytxoutproof\",       &verifytxoutproof,       true  },\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true  },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            true  },\n "
      },
      {
        "sha": "790104f8c9a74766070f44bf72078db81a0367ae",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59ed61b3895b022f61970ea7aac0c20e8ba38886/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59ed61b3895b022f61970ea7aac0c20e8ba38886/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=59ed61b3895b022f61970ea7aac0c20e8ba38886",
        "patch": "@@ -218,6 +218,8 @@ extern json_spirit::Value decoderawtransaction(const json_spirit::Array& params,\n extern json_spirit::Value decodescript(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value signrawtransaction(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value sendrawtransaction(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value gettxoutproof(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value verifytxoutproof(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getblockcount(const json_spirit::Array& params, bool fHelp); // in rpcblockchain.cpp\n extern json_spirit::Value getbestblockhash(const json_spirit::Array& params, bool fHelp);"
      }
    ]
  },
  {
    "sha": "352ed22c2c34b36824fe84d87969be9de797458c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTJlZDIyYzJjMzRiMzY4MjRmZTg0ZDg3OTY5YmU5ZGU3OTc0NThj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-02-04T01:59:41Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-04-24T04:19:15Z"
      },
      "message": "Add merkle blocks test",
      "tree": {
        "sha": "1c3ea87530c28cf37133ee411b4d8ffd82a56c4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c3ea87530c28cf37133ee411b4d8ffd82a56c4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/352ed22c2c34b36824fe84d87969be9de797458c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/352ed22c2c34b36824fe84d87969be9de797458c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/352ed22c2c34b36824fe84d87969be9de797458c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/352ed22c2c34b36824fe84d87969be9de797458c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59ed61b3895b022f61970ea7aac0c20e8ba38886",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59ed61b3895b022f61970ea7aac0c20e8ba38886",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59ed61b3895b022f61970ea7aac0c20e8ba38886"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 91,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dd2f8d4e5ee28172e30aa67af9a0a50013320134",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/352ed22c2c34b36824fe84d87969be9de797458c/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/352ed22c2c34b36824fe84d87969be9de797458c/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=352ed22c2c34b36824fe84d87969be9de797458c",
        "patch": "@@ -28,6 +28,7 @@ testScripts=(\n     'httpbasics.py'\n     'zapwallettxes.py'\n     'proxy_test.py'\n+    'merkle_blocks.py'\n #    'forknotify.py'\n );\n if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then"
      },
      {
        "sha": "a143d21a2146f01994fbfd764e97638135931b53",
        "filename": "qa/rpc-tests/merkle_blocks.py",
        "status": "added",
        "additions": 90,
        "deletions": 0,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/352ed22c2c34b36824fe84d87969be9de797458c/qa/rpc-tests/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/352ed22c2c34b36824fe84d87969be9de797458c/qa/rpc-tests/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/merkle_blocks.py?ref=352ed22c2c34b36824fe84d87969be9de797458c",
        "patch": "@@ -0,0 +1,90 @@\n+#!/usr/bin/env python2\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test merkleblock fetch/validation\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from util import *\n+import os\n+import shutil\n+\n+class MerkleBlockTest(BitcoinTestFramework):\n+\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 4)\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        # Nodes 0/1 are \"wallet\" nodes\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n+        # Nodes 2/3 are used for testing\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\"]))\n+        self.nodes.append(start_node(3, self.options.tmpdir, [\"-debug\", \"-txindex\"]))\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[0], 3)\n+\n+        self.is_network_split = False\n+        self.sync_all()\n+\n+    def run_test(self):\n+        print \"Mining blocks...\"\n+        self.nodes[0].generate(105)\n+        self.sync_all()\n+\n+        chain_height = self.nodes[1].getblockcount()\n+        assert_equal(chain_height, 105)\n+        assert_equal(self.nodes[1].getbalance(), 0)\n+        assert_equal(self.nodes[2].getbalance(), 0)\n+\n+        node0utxos = self.nodes[0].listunspent(1)\n+        tx1 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 50})\n+        txid1 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx1)[\"hex\"])\n+        tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 50})\n+        txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx2)[\"hex\"])\n+        assert_raises(JSONRPCException, self.nodes[0].gettxoutproof, [txid1])\n+\n+        self.nodes[0].generate(1)\n+        blockhash = self.nodes[0].getblockhash(chain_height + 1)\n+        self.sync_all()\n+\n+        txlist = []\n+        blocktxn = self.nodes[0].getblock(blockhash, True)[\"tx\"]\n+        txlist.append(blocktxn[1])\n+        txlist.append(blocktxn[2])\n+\n+        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1])), [txid1])\n+        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1, txid2])), txlist)\n+        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1, txid2], blockhash)), txlist)\n+\n+        txin_spent = self.nodes[1].listunspent(1).pop()\n+        tx3 = self.nodes[1].createrawtransaction([txin_spent], {self.nodes[0].getnewaddress(): 50})\n+        self.nodes[0].sendrawtransaction(self.nodes[1].signrawtransaction(tx3)[\"hex\"])\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        txid_spent = txin_spent[\"txid\"]\n+        txid_unspent = txid1 if txin_spent[\"txid\"] != txid1 else txid2\n+\n+        # We cant find the block from a fully-spent tx\n+        assert_raises(JSONRPCException, self.nodes[2].gettxoutproof, [txid_spent])\n+        # ...but we can if we specify the block\n+        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_spent], blockhash)), [txid_spent])\n+        # ...or if the first tx is not fully-spent\n+        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_unspent])), [txid_unspent])\n+        try:\n+            assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid1, txid2])), txlist)\n+        except JSONRPCException:\n+            assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid2, txid1])), txlist)\n+        # ...or if we have a -txindex\n+        assert_equal(self.nodes[2].verifytxoutproof(self.nodes[3].gettxoutproof([txid_spent])), [txid_spent])\n+\n+if __name__ == '__main__':\n+    MerkleBlockTest().main()"
      }
    ]
  },
  {
    "sha": "1ec900a29e115503ca3a70eba28f2de33ca06228",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWM5MDBhMjllMTE1NTAzY2EzYTcwZWJhMjhmMmRlMzNjYTA2MjI4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2014-12-23T02:35:52Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-04-24T09:28:47Z"
      },
      "message": "Remove broken+useless lock/unlock log prints",
      "tree": {
        "sha": "c9afc60d6f629efcb7a43c2bfb6ac590c839c4bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9afc60d6f629efcb7a43c2bfb6ac590c839c4bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ec900a29e115503ca3a70eba28f2de33ca06228",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ec900a29e115503ca3a70eba28f2de33ca06228",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ec900a29e115503ca3a70eba28f2de33ca06228",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ec900a29e115503ca3a70eba28f2de33ca06228/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "352ed22c2c34b36824fe84d87969be9de797458c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/352ed22c2c34b36824fe84d87969be9de797458c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/352ed22c2c34b36824fe84d87969be9de797458c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 0,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a422939964277912d3a4732a12d9e12cfa1644ef",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ec900a29e115503ca3a70eba28f2de33ca06228/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ec900a29e115503ca3a70eba28f2de33ca06228/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=1ec900a29e115503ca3a70eba28f2de33ca06228",
        "patch": "@@ -86,7 +86,6 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n     if (lockstack.get() == NULL)\n         lockstack.reset(new LockStack);\n \n-    LogPrint(\"lock\", \"Locking: %s\\n\", locklocation.ToString());\n     dd_mutex.lock();\n \n     (*lockstack).push_back(std::make_pair(c, locklocation));\n@@ -113,10 +112,6 @@ static void push_lock(void* c, const CLockLocation& locklocation, bool fTry)\n \n static void pop_lock()\n {\n-    if (fDebug) {\n-        const CLockLocation& locklocation = (*lockstack).rbegin()->second;\n-        LogPrint(\"lock\", \"Unlocked: %s\\n\", locklocation.ToString());\n-    }\n     dd_mutex.lock();\n     (*lockstack).pop_back();\n     dd_mutex.unlock();"
      }
    ]
  }
]