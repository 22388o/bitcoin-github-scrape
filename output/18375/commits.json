[
  {
    "sha": "d6d646d53b65ebb0044edb01ee38c323843bccee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmQ2NDZkNTNiNjVlYmIwMDQ0ZWRiMDFlZTM4YzMyMzg0M2JjY2Vl",
    "commit": {
      "author": {
        "name": "Ale",
        "email": "47560914+AleGiovanardi@users.noreply.github.com",
        "date": "2020-01-24T13:25:07Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2020-01-24T13:25:07Z"
      },
      "message": "Merge pull request #1 from bitcoin/master\n\nUpdate",
      "tree": {
        "sha": "fc97c4193f625ce6c723091a8e36c0c4abfd89f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc97c4193f625ce6c723091a8e36c0c4abfd89f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6d646d53b65ebb0044edb01ee38c323843bccee",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeKvAzCRBK7hj4Ov3rIwAAdHIIAHv47M2bMfkgl7Ek4Sp9Jnud\nh5KQ6G5wttIiJi5ssobOfGIemuvf08+9W5jF3LbRmBMPz0C7DWImfe4KoNjgyqJV\nfqXWzu1u2sNRK+c9YI2bmpOW9Au94OxSrmtsdfYpzDBjOmcVTpXpNidPSo5NAKKN\nxRdUxgjbokY2wCR02dE4/pZMiNwQm2M7mjcgX9WuGOZD0WW3eKEQUZ7/6BGqbghR\nqWMgnA5bZ9JUvR6HtQOHd9xq0x1UoXkrB/sSbPxVk+SmdvwW3xnYhnn6z64VSu4o\n0YSpjD+L7qvknpeD8I1RsGcyeO9qN15pEy/X8bdTc8AAKwP0G+5AJEelb39y1EY=\n=RrS/\n-----END PGP SIGNATURE-----\n",
        "payload": "tree fc97c4193f625ce6c723091a8e36c0c4abfd89f3\nparent e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc\nparent 28fbe68fdcac2a06f359b1e48555a3d23015c2b7\nauthor Ale <47560914+AleGiovanardi@users.noreply.github.com> 1579872307 +0100\ncommitter GitHub <noreply@github.com> 1579872307 +0100\n\nMerge pull request #1 from bitcoin/master\n\nUpdate"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6d646d53b65ebb0044edb01ee38c323843bccee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6d646d53b65ebb0044edb01ee38c323843bccee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6d646d53b65ebb0044edb01ee38c323843bccee/comments",
    "author": {
      "login": "AleGiovanardi",
      "id": 47560914,
      "node_id": "MDQ6VXNlcjQ3NTYwOTE0",
      "avatar_url": "https://avatars.githubusercontent.com/u/47560914?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AleGiovanardi",
      "html_url": "https://github.com/AleGiovanardi",
      "followers_url": "https://api.github.com/users/AleGiovanardi/followers",
      "following_url": "https://api.github.com/users/AleGiovanardi/following{/other_user}",
      "gists_url": "https://api.github.com/users/AleGiovanardi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AleGiovanardi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AleGiovanardi/subscriptions",
      "organizations_url": "https://api.github.com/users/AleGiovanardi/orgs",
      "repos_url": "https://api.github.com/users/AleGiovanardi/repos",
      "events_url": "https://api.github.com/users/AleGiovanardi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AleGiovanardi/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc"
      },
      {
        "sha": "28fbe68fdcac2a06f359b1e48555a3d23015c2b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28fbe68fdcac2a06f359b1e48555a3d23015c2b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28fbe68fdcac2a06f359b1e48555a3d23015c2b7"
      }
    ],
    "stats": {
      "total": 2838,
      "additions": 1876,
      "deletions": 962
    },
    "files": [
      {
        "sha": "db493811c522accf37547ffe8a5d73880c0df32b",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -7,8 +7,9 @@ src/bitcoind\n src/bitcoin-cli\n src/bitcoin-tx\n src/bitcoin-wallet\n+src/test/fuzz\n+!src/test/fuzz/*.*\n src/test/test_bitcoin\n-src/test/test_bitcoin_fuzzy\n src/qt/test/test_bitcoin-qt\n \n # autoreconf"
      },
      {
        "sha": "fbc81b261420869ac2146295e422b41385d73b22",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -82,14 +82,14 @@ jobs:\n         - set -o errexit; source ./ci/lint/06_script.sh\n \n     - stage: test\n-      name: 'ARM  [GOAL: install]  [bionic]  [unit tests, functional tests]'\n+      name: 'ARM  [GOAL: install]  [buster]  [unit tests, functional tests]'\n       arch: arm64\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_arm.sh\"\n         QEMU_USER_CMD=\"\"  # Can run the tests natively without qemu\n \n     - stage: test\n-      name: 'S390x  [GOAL: install]  [bionic]  [unit tests, functional tests]'\n+      name: 'S390x  [GOAL: install]  [buster]  [unit tests, functional tests]'\n       arch: s390x\n       env: >-\n         FILE_ENV=\"./ci/test/00_setup_env_s390x.sh\"\n@@ -101,14 +101,9 @@ jobs:\n         FILE_ENV=\"./ci/test/00_setup_env_win64.sh\"\n \n     - stage: test\n-      name: '32-bit + dash  [GOAL: install]  [gui]'\n+      name: '32-bit + dash  [GOAL: install]  [CentOS 7]  [gui]'\n       env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_i686.sh\"\n-\n-    - stage: test\n-      name: 'x86_64 Linux  [GOAL: install]  [CentOS 7]  [no depends, only system libs]'\n-      env: >-\n-        FILE_ENV=\"./ci/test/00_setup_env_native_centos.sh\"\n+        FILE_ENV=\"./ci/test/00_setup_env_i686_centos.sh\"\n \n     - stage: test\n       name: 'x86_64 Linux  [GOAL: install]  [bionic]  [uses qt5 dev package and some depends packages] [unsigned char]'"
      },
      {
        "sha": "e5aaf57abf19fab254d8be154287247a81d5d84f",
        "filename": "build_msvc/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/build_msvc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/build_msvc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/README.md?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -12,7 +12,7 @@ Quick Start\n The minimal steps required to build Bitcoin Core with the msbuild toolchain are below. More detailed instructions are contained in the following sections.\n \n ```\n-vcpkg install --triplet x64-windows-static boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent zeromq berkeleydb rapidcheck double-conversion\n+vcpkg install --triplet x64-windows-static berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] rapidcheck zeromq double-conversion\n py -3 build_msvc\\msvc-autogen.py\n msbuild /m build_msvc\\bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n ```\n@@ -41,7 +41,9 @@ Qt\n ---------------------\n In order to build the Bitcoin Core a static build of Qt is required. The runtime library version (e.g. v141, v142) and platform type (x86 or x64) must also match.\n \n-A prebuilt version of Qt can be downloaded from [here](https://github.com/sipsorcery/qt_win_binary/releases). Please be aware this download is NOT an officially sanctioned Bitcoin Core distribution and is provided for developer convenience. It should NOT be used for builds that will be used in a production environment or with real funds.\n+Some prebuilt x64 versions of Qt can be downloaded from [here](https://github.com/sipsorcery/qt_win_binary/releases). Please be aware these downloads are NOT officially sanctioned by Bitcoin Core and are provided for developer convenience only. They should NOT be used for builds that will be used in a production environment or with real funds.\n+\n+To determine which Qt prebuilt version to download open the `.appveyor.yml` file and note the `QT_DOWNLOAD_URL`. When extracting the zip file the destination path must be set to `C:\\`. This is due to the way that Qt includes, libraries and tools use internal paths.\n \n To build Bitcoin Core without Qt unload or disable the `bitcoin-qt`, `libbitcoin_qt` and `test_bitcoin-qt` projects.\n \n@@ -64,18 +66,20 @@ PS >py -3 msvc-autogen.py\n \n - An optional step is to adjust the settings in the build_msvc directory and the common.init.vcxproj file. This project file contains settings that are common to all projects such as the runtime library version and target Windows SDK version. The Qt directories can also be set.\n \n-- Build with Visual Studio 2017 or msbuild.\n+- To build from the command line with the Visual Studio 2017 toolchain use:\n \n ```\n msbuild /m bitcoin.sln /p:Platform=x64 /p:Configuration=Release /p:PlatformToolset=v141 /t:build\n ```\n \n-- Build with Visual Studio 2019 or msbuild.\n+- To build from the command line with the Visual Studio 2019 toolchain use:\n \n ```\n msbuild /m bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n ```\n \n+- Alternatively open the `build_msvc\\bitcoin.sln` file in Visual Studio.\n+\n AppVeyor\n ---------------------\n The .appveyor.yml in the root directory is suitable to perform builds on [AppVeyor](https://www.appveyor.com/) Continuous Integration servers. The simplest way to perform an AppVeyor build is to fork Bitcoin Core and then configure a new AppVeyor Project pointing to the forked repository."
      },
      {
        "sha": "17cd31a52ef27db296d34fd810a98d7dc515ad61",
        "filename": "build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -50,7 +50,7 @@\n     </ProjectReference>\n   </ItemGroup>\n \n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)'=='Release'\">\n     <ClCompile>\n       <AdditionalIncludeDirectories>$(QtIncludes);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n@@ -64,7 +64,7 @@\n     </ResourceCompile>\n   </ItemDefinitionGroup>\n \n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)'=='Debug'\">\n     <ClCompile>\n       <AdditionalIncludeDirectories>$(QtIncludes);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>"
      },
      {
        "sha": "3178f2a3d8d4847c407ec9bca52da49b2f3783a5",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 4,
        "deletions": 72,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_BITCOIN_CONFIG_H\n #define BITCOIN_BITCOIN_CONFIG_H\n \n@@ -49,9 +53,6 @@\n /* define if the Boost::Filesystem library is available */\n #define HAVE_BOOST_FILESYSTEM /**/\n \n-/* define if the Boost::PROGRAM_OPTIONS library is available */\n-#define HAVE_BOOST_PROGRAM_OPTIONS /**/\n-\n /* define if the Boost::System library is available */\n #define HAVE_BOOST_SYSTEM /**/\n \n@@ -179,75 +180,6 @@\n /* Define to 1 if you have the <inttypes.h> header file. */\n #define HAVE_INTTYPES_H 1\n \n-/* Define to 1 if you have the `advapi32' library (-ladvapi32). */\n-#define HAVE_LIBADVAPI32 1\n-\n-/* Define to 1 if you have the `comctl32' library (-lcomctl32). */\n-#define HAVE_LIBCOMCTL32 1\n-\n-/* Define to 1 if you have the `comdlg32' library (-lcomdlg32). */\n-#define HAVE_LIBCOMDLG32 1\n-\n-/* Define to 1 if you have the `crypt32' library (-lcrypt32). */\n-#define HAVE_LIBCRYPT32 1\n-\n-/* Define to 1 if you have the `gdi32' library (-lgdi32). */\n-#define HAVE_LIBGDI32 1\n-\n-/* Define to 1 if you have the `imm32' library (-limm32). */\n-#define HAVE_LIBIMM32 1\n-\n-/* Define to 1 if you have the `iphlpapi' library (-liphlpapi). */\n-#define HAVE_LIBIPHLPAPI 1\n-\n-/* Define to 1 if you have the `kernel32' library (-lkernel32). */\n-#define HAVE_LIBKERNEL32 1\n-\n-/* Define to 1 if you have the `mingwthrd' library (-lmingwthrd). */\n-#define HAVE_LIBMINGWTHRD 1\n-\n-/* Define to 1 if you have the `mswsock' library (-lmswsock). */\n-#define HAVE_LIBMSWSOCK 1\n-\n-/* Define to 1 if you have the `ole32' library (-lole32). */\n-#define HAVE_LIBOLE32 1\n-\n-/* Define to 1 if you have the `oleaut32' library (-loleaut32). */\n-#define HAVE_LIBOLEAUT32 1\n-\n-/* Define to 1 if you have the `rpcrt4' library (-lrpcrt4). */\n-#define HAVE_LIBRPCRT4 1\n-\n-/* Define to 1 if you have the `rt' library (-lrt). */\n-/* #undef HAVE_LIBRT */\n-\n-/* Define to 1 if you have the `shell32' library (-lshell32). */\n-#define HAVE_LIBSHELL32 1\n-\n-/* Define to 1 if you have the `shlwapi' library (-lshlwapi). */\n-#define HAVE_LIBSHLWAPI 1\n-\n-/* Define to 1 if you have the `ssp' library (-lssp). */\n-#define HAVE_LIBSSP 1\n-\n-/* Define to 1 if you have the `user32' library (-luser32). */\n-#define HAVE_LIBUSER32 1\n-\n-/* Define to 1 if you have the `uuid' library (-luuid). */\n-#define HAVE_LIBUUID 1\n-\n-/* Define to 1 if you have the `winmm' library (-lwinmm). */\n-#define HAVE_LIBWINMM 1\n-\n-/* Define to 1 if you have the `winspool' library (-lwinspool). */\n-#define HAVE_LIBWINSPOOL 1\n-\n-/* Define to 1 if you have the `ws2_32' library (-lws2_32). */\n-#define HAVE_LIBWS2_32 1\n-\n-/* Define to 1 if you have the `z ' library (-lz ). */\n-#define HAVE_LIBZ_ 1\n-\n /* Define this symbol if you have malloc_info */\n /* #undef HAVE_MALLOC_INFO */\n "
      },
      {
        "sha": "c09997d39d6ab97e0db1be8859b2c69339c6c9af",
        "filename": "build_msvc/common.init.vcxproj",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/build_msvc/common.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/build_msvc/common.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.init.vcxproj?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -6,6 +6,7 @@\n     <VCProjectVersion>16.0</VCProjectVersion>\n     <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n     <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n+    <UseNativeEnvironment>true</UseNativeEnvironment>\n    </PropertyGroup>\n \n   <PropertyGroup Condition=\"'$(WindowsTargetPlatformVersion)'=='' and !Exists('$(WindowsSdkDir)\\DesignTime\\CommonConfiguration\\Neutral\\Windows.props')\">\n@@ -115,7 +116,7 @@\n     <Link>\n       <SubSystem>Console</SubSystem>\n       <GenerateDebugInformation>true</GenerateDebugInformation>\n-      <AdditionalDependencies>crypt32.lib;Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n+      <AdditionalDependencies>Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n     </Link>\n     <Lib>\n       <AdditionalOptions>/ignore:4221</AdditionalOptions>"
      },
      {
        "sha": "d99b17d38127bec2623a42552f461979cee61531",
        "filename": "build_msvc/msvc-autogen.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/build_msvc/msvc-autogen.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/build_msvc/msvc-autogen.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/msvc-autogen.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,7 @@\n #!/usr/bin/env python3\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n import os\n import re"
      },
      {
        "sha": "2095c0c3213513510eb6106852943fc991d8e2b1",
        "filename": "build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -67,21 +67,23 @@\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n \n-  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)'=='Release'\">\n     <ClCompile>\n       <AdditionalIncludeDirectories>..\\libbitcoin_qt\\$(GeneratedFilesOutDir)\\..\\;$(QtIncludeDir)\\QtTest;$(QtIncludes);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n     <Link>\n       <AdditionalDependencies>$(QtLibraryDir)\\Qt5Test.lib;$(QtReleaseLibraries);%(AdditionalDependencies)</AdditionalDependencies>\n+\t  <AdditionalOptions>/ignore:4206</AdditionalOptions>\n     </Link>\n   </ItemDefinitionGroup>\n \n-    <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n+    <ItemDefinitionGroup Condition=\"'$(Configuration)'=='Debug'\">\n     <ClCompile>\n       <AdditionalIncludeDirectories>..\\libbitcoin_qt\\$(GeneratedFilesOutDir)\\..\\;$(QtIncludeDir)\\QtTest;$(QtIncludes);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n     <Link>\n       <AdditionalDependencies>$(QtDebugLibraries);%(AdditionalDependencies)</AdditionalDependencies>\n+\t  <AdditionalOptions>/ignore:4206</AdditionalOptions>\n     </Link>\n   </ItemDefinitionGroup>\n   <ItemGroup>"
      },
      {
        "sha": "571d19957f9fdaec2fc8528ab633b2ac87541879",
        "filename": "build_msvc/testconsensus/testconsensus.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/build_msvc/testconsensus/testconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/build_msvc/testconsensus/testconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/testconsensus/testconsensus.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include <iostream>\n \n // bitcoin includes."
      },
      {
        "sha": "a008d515236dc566570d62bf5829e75c2db00afc",
        "filename": "ci/test/00_setup_env.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/00_setup_env.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/00_setup_env.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -51,7 +51,7 @@ export DEPENDS_DIR=${DEPENDS_DIR:-$BASE_ROOT_DIR/depends}\n export BASE_OUTDIR=${BASE_OUTDIR:-$BASE_SCRATCH_DIR/out/$HOST}\n export SDK_URL=${SDK_URL:-https://bitcoincore.org/depends-sources/sdks}\n export WINEDEBUG=${WINEDEBUG:-fixme-all}\n-export DOCKER_PACKAGES=${DOCKER_PACKAGES:-build-essential libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates ccache python3 rsync git}\n+export DOCKER_PACKAGES=${DOCKER_PACKAGES:-build-essential libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates ccache python3 rsync git procps}\n export GOAL=${GOAL:-install}\n export DIR_QA_ASSETS=${DIR_QA_ASSETS:-${BASE_SCRATCH_DIR}/qa-assets}\n export PATH=${BASE_ROOT_DIR}/ci/retry:$PATH"
      },
      {
        "sha": "2a522f5a8f05c56da10b6c12c08dd50d41f262ba",
        "filename": "ci/test/00_setup_env_arm.sh",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/00_setup_env_arm.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/00_setup_env_arm.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_arm.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -9,11 +9,15 @@ export LC_ALL=C.UTF-8\n export HOST=arm-linux-gnueabihf\n # The host arch is unknown, so we run the tests through qemu.\n # If the host is arm and wants to run the tests natively, it can set QEMU_USER_CMD to the empty string.\n-export QEMU_USER_CMD=\"${QEMU_USER_CMD:\"qemu-arm -L /usr/arm-linux-gnueabihf/\"}\"\n-# We don't know whether the host can run the cross compiled binaries. To run them, either qemu-user or libc6:armhf for\n-# the target is required, so install both.\n+if [ -z ${QEMU_USER_CMD+x} ]; then export QEMU_USER_CMD=\"${QEMU_USER_CMD:-\"qemu-arm -L /usr/arm-linux-gnueabihf/\"}\"; fi\n export DPKG_ADD_ARCH=\"armhf\"\n-export PACKAGES=\"python3 g++-arm-linux-gnueabihf busybox qemu-user libc6:armhf libstdc++6:armhf libfontconfig1:armhf libxcb1:armhf\"\n+export PACKAGES=\"python3-zmq g++-arm-linux-gnueabihf busybox libc6:armhf libstdc++6:armhf libfontconfig1:armhf libxcb1:armhf\"\n+if [ -n \"$QEMU_USER_CMD\" ]; then\n+  # Likely cross-compiling, so install the needed gcc and qemu-user\n+  export PACKAGES=\"$PACKAGES qemu-user\"\n+fi\n+# Use debian to avoid 404 apt errors when cross compiling\n+export DOCKER_NAME_TAG=\"debian:buster\"\n export USE_BUSY_BOX=true\n export RUN_UNIT_TESTS=true\n export RUN_FUNCTIONAL_TESTS=true"
      },
      {
        "sha": "6df65dd4a0525296e7223efe02a2ea86bcac6cbe",
        "filename": "ci/test/00_setup_env_i686.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc/ci/test/00_setup_env_i686.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc/ci/test/00_setup_env_i686.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_i686.sh?ref=e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc",
        "patch": "@@ -1,13 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C.UTF-8\n-\n-export HOST=i686-pc-linux-gnu\n-export PACKAGES=\"g++-multilib python3-zmq\"\n-export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports LDFLAGS=-static-libstdc++\"\n-export CONFIG_SHELL=\"/bin/dash\""
      },
      {
        "sha": "b875dceef0a1a1d0c459d6d66f885e1f2f10c056",
        "filename": "ci/test/00_setup_env_i686_centos.sh",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/00_setup_env_i686_centos.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/00_setup_env_i686_centos.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_i686_centos.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+export HOST=i686-pc-linux-gnu\n+export DOCKER_NAME_TAG=centos:7\n+export DOCKER_PACKAGES=\"gcc-c++ glibc-devel.x86_64 libstdc++-devel.x86_64 glibc-devel.i686 libstdc++-devel.i686 ccache libtool make git python3 python36-zmq which patch lbzip2 dash\"\n+export GOAL=\"install\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-reduce-exports\"\n+export CONFIG_SHELL=\"/bin/dash\""
      },
      {
        "sha": "56b915b6c7b366c8d9a3970d6ac510d9b7ae0af9",
        "filename": "ci/test/00_setup_env_native_centos.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc/ci/test/00_setup_env_native_centos.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc/ci/test/00_setup_env_native_centos.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_centos.sh?ref=e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc",
        "patch": "@@ -1,14 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2019 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C.UTF-8\n-\n-export DOCKER_NAME_TAG=centos:7\n-export DOCKER_PACKAGES=\"gcc-c++ libtool make git python3 python36-zmq\"\n-export PACKAGES=\"boost-devel libevent-devel libdb4-devel libdb4-cxx-devel miniupnpc-devel zeromq-devel qt5-qtbase-devel qt5-qttools-devel qrencode-devel\"\n-export NO_DEPENDS=1\n-export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-reduce-exports\""
      },
      {
        "sha": "6452feb5f2c9dcd8d489929f3d77c276b6ff9e44",
        "filename": "ci/test/00_setup_env_s390x.sh",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/00_setup_env_s390x.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/00_setup_env_s390x.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_s390x.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -9,8 +9,15 @@ export LC_ALL=C.UTF-8\n export HOST=s390x-linux-gnu\n # The host arch is unknown, so we run the tests through qemu.\n # If the host is s390x and wants to run the tests natively, it can set QEMU_USER_CMD to the empty string.\n-export QEMU_USER_CMD=\"${QEMU_USER_CMD:\"qemu-s390x\"}\"\n-export PACKAGES=\"python3-zmq bsdmainutils qemu-user\"\n+if [ -z ${QEMU_USER_CMD+x} ]; then export QEMU_USER_CMD=\"${QEMU_USER_CMD:-\"qemu-s390x\"}\"; fi\n+export PACKAGES=\"python3-zmq\"\n+if [ -n \"$QEMU_USER_CMD\" ]; then\n+  # Likely cross-compiling, so install the needed gcc and qemu-user\n+  export DPKG_ADD_ARCH=\"s390x\"\n+  export PACKAGES=\"$PACKAGES g++-s390x-linux-gnu qemu-user libc6:s390x libstdc++6:s390x libfontconfig1:s390x libxcb1:s390x\"\n+fi\n+# Use debian to avoid 404 apt errors\n+export DOCKER_NAME_TAG=\"debian:buster\"\n export RUN_UNIT_TESTS=true\n export RUN_FUNCTIONAL_TESTS=true\n export GOAL=\"install\""
      },
      {
        "sha": "4d5859e4d34af63d59f3a84fea2018281f8bdedd",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -9,6 +9,9 @@ export LC_ALL=C.UTF-8\n if [[ $DOCKER_NAME_TAG == centos* ]]; then\n   export LC_ALL=en_US.utf8\n fi\n+if [[ $QEMU_USER_CMD == qemu-s390* ]]; then\n+  export LC_ALL=C\n+fi\n \n if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n   set +o errexit\n@@ -42,7 +45,7 @@ export ASAN_OPTIONS=\"detect_stack_use_after_return=1:check_initialization_order=\n export LSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/lsan\"\n export TSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/tsan:log_path=${BASE_SCRATCH_DIR}/sanitizer-output/tsan\"\n export UBSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1\"\n-env | grep -E '^(BITCOIN_CONFIG|BASE_|CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS)' | tee /tmp/env\n+env | grep -E '^(BITCOIN_CONFIG|BASE_|QEMU_|CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS)' | tee /tmp/env\n if [[ $HOST = *-mingw32 ]]; then\n   DOCKER_ADMIN=\"--cap-add SYS_ADMIN\"\n elif [[ $BITCOIN_CONFIG = *--with-sanitizers=*address* ]]; then # If ran with (ASan + LSan), Docker needs access to ptrace (https://github.com/google/sanitizers/issues/764)\n@@ -73,16 +76,6 @@ else\n   }\n fi\n \n-if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n-  top -l 1 -s 0 | awk ' /PhysMem/ {print}'\n-  echo \"Number of CPUs: $(sysctl -n hw.logicalcpu)\"\n-else\n-  DOCKER_EXEC free -m -h\n-  DOCKER_EXEC echo \"Number of CPUs \\(nproc\\):\" \\$\\(nproc\\)\n-  DOCKER_EXEC echo \"Free disk space:\"\n-  DOCKER_EXEC df -h\n-fi\n-\n if [ -n \"$DPKG_ADD_ARCH\" ]; then\n   DOCKER_EXEC dpkg --add-architecture \"$DPKG_ADD_ARCH\"\n fi\n@@ -95,6 +88,16 @@ elif [ \"$TRAVIS_OS_NAME\" != \"osx\" ]; then\n   ${CI_RETRY_EXE} DOCKER_EXEC apt-get install --no-install-recommends --no-upgrade -y $PACKAGES $DOCKER_PACKAGES\n fi\n \n+if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n+  top -l 1 -s 0 | awk ' /PhysMem/ {print}'\n+  echo \"Number of CPUs: $(sysctl -n hw.logicalcpu)\"\n+else\n+  DOCKER_EXEC free -m -h\n+  DOCKER_EXEC echo \"Number of CPUs \\(nproc\\):\" \\$\\(nproc\\)\n+  DOCKER_EXEC echo \"Free disk space:\"\n+  DOCKER_EXEC df -h\n+fi\n+\n if [ ! -d ${DIR_QA_ASSETS} ]; then\n   DOCKER_EXEC git clone https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n fi"
      },
      {
        "sha": "d8aa5c87a22f24aa7b26f7a8b39fd7bcba748be7",
        "filename": "ci/test/05_before_script.sh",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/05_before_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/05_before_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/05_before_script.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -25,5 +25,13 @@ if [[ $HOST = *-mingw32 ]]; then\n   DOCKER_EXEC update-alternatives --set $HOST-g++ \\$\\(which $HOST-g++-posix\\)\n fi\n if [ -z \"$NO_DEPENDS\" ]; then\n-  DOCKER_EXEC CONFIG_SHELL= make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n+  if [[ $DOCKER_NAME_TAG == centos* ]]; then\n+    # CentOS has problems building the depends if the config shell is not explicitely set\n+    # (i.e. for libevent a Makefile with an empty SHELL variable is generated, leading to\n+    #  an error as the first command is executed)\n+    SHELL_OPTS=\"CONFIG_SHELL=/bin/bash\"\n+  else\n+    SHELL_OPTS=\"CONFIG_SHELL=\"\n+  fi\n+  DOCKER_EXEC $SHELL_OPTS make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n fi"
      },
      {
        "sha": "537493a7103633306022c5f2028621b4359d7819",
        "filename": "ci/test/06_script_b.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/06_script_b.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/06_script_b.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_b.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -11,16 +11,7 @@ if [ -n \"$QEMU_USER_CMD\" ]; then\n   # Generate all binaries, so that they can be wrapped\n   DOCKER_EXEC make $MAKEJOBS -C src/secp256k1 VERBOSE=1\n   DOCKER_EXEC make $MAKEJOBS -C src/univalue VERBOSE=1\n-  for b_name in {\"${BASE_OUTDIR}/bin\"/*,src/secp256k1/*tests,src/univalue/{no_nul,test_json,unitester,object}}; do\n-    # shellcheck disable=SC2044\n-    for b in $(find \"${BASE_ROOT_DIR}\" -executable -type f -name $(basename $b_name)); do\n-      echo \"Wrap $b ...\"\n-      DOCKER_EXEC mv \"$b\" \"${b}_orig\"\n-      DOCKER_EXEC echo \"\\#\\!/usr/bin/env bash\" \\> \"$b\"\n-      DOCKER_EXEC echo \"$QEMU_USER_CMD \\\\\\\"${b}_orig\\\\\\\" \\\\\\\"\\\\\\$@\\\\\\\"\" \\>\\> \"$b\"\n-      DOCKER_EXEC chmod +x \"$b\"\n-    done\n-  done\n+  DOCKER_EXEC \"${BASE_ROOT_DIR}/ci/test/wrap-qemu.sh\"\n   END_FOLD\n fi\n "
      },
      {
        "sha": "f1d30887482a5b374c2ef3ec50eb70b5d943b8fe",
        "filename": "ci/test/wrap-qemu.sh",
        "status": "added",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/wrap-qemu.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/ci/test/wrap-qemu.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/wrap-qemu.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -0,0 +1,18 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+for b_name in {\"${BASE_OUTDIR}/bin\"/*,src/secp256k1/*tests,src/univalue/{no_nul,test_json,unitester,object}}; do\n+    # shellcheck disable=SC2044\n+    for b in $(find \"${BASE_ROOT_DIR}\" -executable -type f -name $(basename $b_name)); do\n+      echo \"Wrap $b ...\"\n+      mv \"$b\" \"${b}_orig\"\n+      echo '#!/usr/bin/env bash' > \"$b\"\n+      echo \"$QEMU_USER_CMD \\\"${b}_orig\\\" \\\"\\$@\\\"\" >> \"$b\"\n+      chmod +x \"$b\"\n+    done\n+done"
      },
      {
        "sha": "18f3104acb0ea4992a252d2dfe24e8c3fdc410a1",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 17,
        "deletions": 24,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -329,6 +329,7 @@ if test \"x$enable_werror\" = \"xyes\"; then\n   AX_CHECK_COMPILE_FLAG([-Werror=switch],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=switch\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=thread-safety-analysis],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=unused-variable],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unused-variable\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=date-time],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=date-time\"],,[[$CXXFLAG_WERROR]])\n fi\n \n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n@@ -342,6 +343,7 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wrange-loop-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wrange-loop-analysis\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wredundant-decls],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wredundant-decls\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wunused-variable],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-variable\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wdate-time],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdate-time\"],,[[$CXXFLAG_WERROR]])\n \n   dnl Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n   dnl unknown options if any other warning is produced. Test the -Wfoo case, and\n@@ -481,29 +483,24 @@ use_pkgconfig=yes\n case $host in\n   *mingw*)\n \n-     #pkgconfig does more harm than good with MinGW\n+     dnl pkgconfig does more harm than good with MinGW\n      use_pkgconfig=no\n \n      TARGET_OS=windows\n-     AC_CHECK_LIB([mingwthrd],      [main],, AC_MSG_ERROR(libmingwthrd missing))\n-     AC_CHECK_LIB([kernel32],      [main],, AC_MSG_ERROR(libkernel32 missing))\n-     AC_CHECK_LIB([user32],      [main],, AC_MSG_ERROR(libuser32 missing))\n-     AC_CHECK_LIB([gdi32],      [main],, AC_MSG_ERROR(libgdi32 missing))\n-     AC_CHECK_LIB([comdlg32],      [main],, AC_MSG_ERROR(libcomdlg32 missing))\n-     AC_CHECK_LIB([winspool],      [main],, AC_MSG_ERROR(libwinspool missing))\n-     AC_CHECK_LIB([winmm],      [main],, AC_MSG_ERROR(libwinmm missing))\n-     AC_CHECK_LIB([shell32],      [main],, AC_MSG_ERROR(libshell32 missing))\n-     AC_CHECK_LIB([comctl32],      [main],, AC_MSG_ERROR(libcomctl32 missing))\n-     AC_CHECK_LIB([ole32],      [main],, AC_MSG_ERROR(libole32 missing))\n-     AC_CHECK_LIB([oleaut32],      [main],, AC_MSG_ERROR(liboleaut32 missing))\n-     AC_CHECK_LIB([uuid],      [main],, AC_MSG_ERROR(libuuid missing))\n-     AC_CHECK_LIB([rpcrt4],      [main],, AC_MSG_ERROR(librpcrt4 missing))\n-     AC_CHECK_LIB([advapi32],      [main],, AC_MSG_ERROR(libadvapi32 missing))\n-     AC_CHECK_LIB([ws2_32],      [main],, AC_MSG_ERROR(libws2_32 missing))\n-     AC_CHECK_LIB([mswsock],      [main],, AC_MSG_ERROR(libmswsock missing))\n-     AC_CHECK_LIB([shlwapi],      [main],, AC_MSG_ERROR(libshlwapi missing))\n-     AC_CHECK_LIB([iphlpapi],      [main],, AC_MSG_ERROR(libiphlpapi missing))\n-     AC_CHECK_LIB([crypt32],      [main],, AC_MSG_ERROR(libcrypt32 missing))\n+     AC_CHECK_LIB([kernel32], [GetModuleFileNameA],, AC_MSG_ERROR(libkernel32 missing))\n+     AC_CHECK_LIB([user32],   [main],, AC_MSG_ERROR(libuser32 missing))\n+     AC_CHECK_LIB([gdi32],    [main],, AC_MSG_ERROR(libgdi32 missing))\n+     AC_CHECK_LIB([comdlg32], [main],, AC_MSG_ERROR(libcomdlg32 missing))\n+     AC_CHECK_LIB([winmm],    [main],, AC_MSG_ERROR(libwinmm missing))\n+     AC_CHECK_LIB([shell32],  [SHGetSpecialFolderPathW],, AC_MSG_ERROR(libshell32 missing))\n+     AC_CHECK_LIB([comctl32], [main],, AC_MSG_ERROR(libcomctl32 missing))\n+     AC_CHECK_LIB([ole32],    [CoCreateInstance],, AC_MSG_ERROR(libole32 missing))\n+     AC_CHECK_LIB([oleaut32], [main],, AC_MSG_ERROR(liboleaut32 missing))\n+     AC_CHECK_LIB([uuid],     [main],, AC_MSG_ERROR(libuuid missing))\n+     AC_CHECK_LIB([advapi32], [CryptAcquireContextW],, AC_MSG_ERROR(libadvapi32 missing))\n+     AC_CHECK_LIB([ws2_32],   [WSAStartup],, AC_MSG_ERROR(libws2_32 missing))\n+     AC_CHECK_LIB([shlwapi],  [PathRemoveFileSpecW],, AC_MSG_ERROR(libshlwapi missing))\n+     AC_CHECK_LIB([iphlpapi], [GetAdaptersAddresses],, AC_MSG_ERROR(libiphlpapi missing))\n \n      dnl -static is interpreted by libtool, where it has a different meaning.\n      dnl In libtool-speak, it's -all-static.\n@@ -693,10 +690,6 @@ AX_GCC_FUNC_ATTRIBUTE([dllimport])\n \n if test x$use_glibc_compat != xno; then\n \n-  dnl glibc absorbed clock_gettime in 2.17. librt (its previous location) is safe to link\n-  dnl in anyway for back-compat.\n-  AC_CHECK_LIB([rt],[clock_gettime],, AC_MSG_ERROR(librt missing))\n-\n   dnl __fdelt_chk's params and return type have changed from long unsigned int to long int.\n   dnl See which one is present here.\n   AC_MSG_CHECKING(__fdelt_chk type)"
      },
      {
        "sha": "515a0d8fc600db30505e0c58c391953ec84eb15c",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -103,17 +103,21 @@ Perform basic security checks on a series of executables.\n symbol-check.py\n ===============\n \n-A script to check that the (Linux) executables produced by gitian only contain\n-allowed gcc, glibc and libstdc++ version symbols. This makes sure they are\n-still compatible with the minimum supported Linux distribution versions.\n+A script to check that the executables produced by gitian only contain\n+certain symbols and are only linked against allowed libraries.\n+\n+For Linux this means checking for allowed gcc, glibc and libstdc++ version symbols.\n+This makes sure they are still compatible with the minimum supported distribution versions.\n+\n+For macOS we check that the executables are only linked against libraries we allow.\n \n Example usage after a gitian build:\n \n     find ../gitian-builder/build -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n \n-If only supported symbols are used the return value will be 0 and the output will be empty.\n+If no errors occur the return value will be 0 and the output will be empty.\n \n-If there are 'unsupported' symbols, the return value will be 1 a list like this will be printed:\n+If there are any errors the return value will be 1 and output like this will be printed:\n \n     .../64/test_bitcoin: symbol memcpy from unsupported version GLIBC_2.14\n     .../64/test_bitcoin: symbol __fdelt_chk from unsupported version GLIBC_2.15"
      },
      {
        "sha": "6afa4351e794d02b7cb143bc0326a5addfd6afd3",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,7 @@\n #!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n import sys\n import re"
      },
      {
        "sha": "1b71245aab09bcb281cb59aec9f2afc63f611674",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -19,6 +19,8 @@\n     'src/qt/bitcoinstrings.cpp',\n     'src/chainparamsseeds.h',\n     # other external copyrights:\n+    'src/reverse_iterator.h',\n+    'src/test/fuzz/FuzzedDataProvider.h',\n     'src/tinyformat.h',\n     'test/functional/test_framework/bignum.py',\n     # python init:\n@@ -455,14 +457,14 @@ def get_header_lines(header, start_year, end_year):\n def get_cpp_header_lines_to_insert(start_year, end_year):\n     return reversed(get_header_lines(CPP_HEADER, start_year, end_year))\n \n-PYTHON_HEADER = '''\n+SCRIPT_HEADER = '''\n # Copyright (c) %s The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n \n-def get_python_header_lines_to_insert(start_year, end_year):\n-    return reversed(get_header_lines(PYTHON_HEADER, start_year, end_year))\n+def get_script_header_lines_to_insert(start_year, end_year):\n+    return reversed(get_header_lines(SCRIPT_HEADER, start_year, end_year))\n \n ################################################################################\n # query git for year of last change\n@@ -491,17 +493,18 @@ def file_has_hashbang(file_lines):\n         return False\n     return file_lines[0][:2] == '#!'\n \n-def insert_python_header(filename, file_lines, start_year, end_year):\n+def insert_script_header(filename, file_lines, start_year, end_year):\n     if file_has_hashbang(file_lines):\n         insert_idx = 1\n     else:\n         insert_idx = 0\n-    header_lines = get_python_header_lines_to_insert(start_year, end_year)\n+    header_lines = get_script_header_lines_to_insert(start_year, end_year)\n     for line in header_lines:\n         file_lines.insert(insert_idx, line)\n     write_file_lines(filename, file_lines)\n \n def insert_cpp_header(filename, file_lines, start_year, end_year):\n+    file_lines.insert(0, '\\n')\n     header_lines = get_cpp_header_lines_to_insert(start_year, end_year)\n     for line in header_lines:\n         file_lines.insert(0, line)\n@@ -513,8 +516,8 @@ def exec_insert_header(filename, style):\n         sys.exit('*** %s already has a copyright by The Bitcoin Core developers'\n                  % (filename))\n     start_year, end_year = get_git_change_year_range(filename)\n-    if style == 'python':\n-        insert_python_header(filename, file_lines, start_year, end_year)\n+    if style in ['python', 'shell']:\n+        insert_script_header(filename, file_lines, start_year, end_year)\n     else:\n         insert_cpp_header(filename, file_lines, start_year, end_year)\n \n@@ -555,11 +558,13 @@ def insert_cmd(argv):\n     if not os.path.isfile(filename):\n         sys.exit(\"*** bad filename: %s\" % filename)\n     _, extension = os.path.splitext(filename)\n-    if extension not in ['.h', '.cpp', '.cc', '.c', '.py']:\n+    if extension not in ['.h', '.cpp', '.cc', '.c', '.py', '.sh']:\n         sys.exit(\"*** cannot insert for file extension %s\" % extension)\n \n     if extension == '.py':\n         style = 'python'\n+    elif extension == '.sh':\n+        style = 'shell'\n     else:\n         style = 'cpp'\n     exec_insert_header(filename, style)"
      },
      {
        "sha": "aa65953d838585aff4f33081b30c1cdb984b2e15",
        "filename": "contrib/devtools/gen-manpages.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/devtools/gen-manpages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/devtools/gen-manpages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/gen-manpages.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,7 @@\n #!/usr/bin/env bash\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C\n TOPDIR=${TOPDIR:-$(git rev-parse --show-toplevel)}"
      },
      {
        "sha": "21d64e893db3d6dc90e7a5221532d479284ff7e4",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''"
      },
      {
        "sha": "f92d997621058edfb92356b748c5e1b36e1d0f8d",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 113,
        "deletions": 23,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -15,6 +15,7 @@\n import re\n import sys\n import os\n+from typing import List, Optional, Tuple\n \n # Debian 8 (Jessie) EOL: 2020. https://wiki.debian.org/DebianReleases#Production_Releases\n #\n@@ -52,8 +53,10 @@\n }\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n+OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n+\n # Allowed NEEDED libraries\n-ALLOWED_LIBRARIES = {\n+ELF_ALLOWED_LIBRARIES = {\n # bitcoind and bitcoin-qt\n 'libgcc_s.so.1', # GCC base support\n 'libc.so.6', # C library\n@@ -79,6 +82,25 @@\n 'AArch64':(2,17),\n 'RISC-V': (2,27)\n }\n+\n+MACHO_ALLOWED_LIBRARIES = {\n+# bitcoind and bitcoin-qt\n+'libc++.1.dylib', # C++ Standard Library\n+'libSystem.B.dylib', # libc, libm, libpthread, libinfo\n+# bitcoin-qt only\n+'AppKit', # user interface\n+'ApplicationServices', # common application tasks.\n+'Carbon', # deprecated c back-compat API\n+'CoreFoundation', # low level func, data types\n+'CoreGraphics', # 2D rendering\n+'CoreServices', # operating system services\n+'CoreText', # interface for laying out text and handling fonts.\n+'Foundation', # base layer functionality for apps/frameworks\n+'ImageIO', # read and write image file formats.\n+'IOKit', # user-space access to hardware devices and drivers.\n+'libobjc.A.dylib', # Objective-C runtime library\n+}\n+\n class CPPFilt(object):\n     '''\n     Demangle C++ symbol names.\n@@ -98,15 +120,15 @@ def close(self):\n         self.proc.stdout.close()\n         self.proc.wait()\n \n-def read_symbols(executable, imports=True):\n+def read_symbols(executable, imports=True) -> List[Tuple[str, str, str]]:\n     '''\n-    Parse an ELF executable and return a list of (symbol,version) tuples\n+    Parse an ELF executable and return a list of (symbol,version, arch) tuples\n     for dynamic, imported symbols.\n     '''\n     p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', '-h', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n     (stdout, stderr) = p.communicate()\n     if p.returncode:\n-        raise IOError('Could not read symbols for %s: %s' % (executable, stderr.strip()))\n+        raise IOError('Could not read symbols for {}: {}'.format(executable, stderr.strip()))\n     syms = []\n     for line in stdout.splitlines():\n         line = line.split()\n@@ -121,7 +143,7 @@ def read_symbols(executable, imports=True):\n                 syms.append((sym, version, arch))\n     return syms\n \n-def check_version(max_versions, version, arch):\n+def check_version(max_versions, version, arch) -> bool:\n     if '_' in version:\n         (lib, _, ver) = version.rpartition('_')\n     else:\n@@ -132,7 +154,7 @@ def check_version(max_versions, version, arch):\n         return False\n     return ver <= max_versions[lib] or lib == 'GLIBC' and ver <= ARCH_MIN_GLIBC_VER[arch]\n \n-def read_libraries(filename):\n+def elf_read_libraries(filename) -> List[str]:\n     p = subprocess.Popen([READELF_CMD, '-d', '-W', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n     (stdout, stderr) = p.communicate()\n     if p.returncode:\n@@ -148,26 +170,94 @@ def read_libraries(filename):\n                 raise ValueError('Unparseable (NEEDED) specification')\n     return libraries\n \n-if __name__ == '__main__':\n+def check_imported_symbols(filename) -> bool:\n     cppfilt = CPPFilt()\n+    ok = True\n+    for sym, version, arch in read_symbols(filename, True):\n+        if version and not check_version(MAX_VERSIONS, version, arch):\n+            print('{}: symbol {} from unsupported version {}'.format(filename, cppfilt(sym), version))\n+            ok = False\n+    return ok\n+\n+def check_exported_symbols(filename) -> bool:\n+    cppfilt = CPPFilt()\n+    ok = True\n+    for sym,version,arch in read_symbols(filename, False):\n+        if arch == 'RISC-V' or sym in IGNORE_EXPORTS:\n+            continue\n+        print('{}: export of symbol {} not allowed'.format(filename, cppfilt(sym)))\n+        ok = False\n+    return ok\n+\n+def check_ELF_libraries(filename) -> bool:\n+    ok = True\n+    for library_name in elf_read_libraries(filename):\n+        if library_name not in ELF_ALLOWED_LIBRARIES:\n+            print('{}: NEEDED library {} is not allowed'.format(filename, library_name))\n+            ok = False\n+    return ok\n+\n+def macho_read_libraries(filename) -> List[str]:\n+    p = subprocess.Popen([OTOOL_CMD, '-L', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    libraries = []\n+    for line in stdout.splitlines():\n+        tokens = line.split()\n+        if len(tokens) == 1: # skip executable name\n+            continue\n+        libraries.append(tokens[0].split('/')[-1])\n+    return libraries\n+\n+def check_MACHO_libraries(filename) -> bool:\n+    ok = True\n+    for dylib in macho_read_libraries(filename):\n+        if dylib not in MACHO_ALLOWED_LIBRARIES:\n+            print('{} is not in ALLOWED_LIBRARIES!'.format(dylib))\n+            ok = False\n+    return ok\n+\n+CHECKS = {\n+'ELF': [\n+    ('IMPORTED_SYMBOLS', check_imported_symbols),\n+    ('EXPORTED_SYMBOLS', check_exported_symbols),\n+    ('LIBRARY_DEPENDENCIES', check_ELF_libraries)\n+],\n+'MACHO': [\n+    ('DYNAMIC_LIBRARIES', check_MACHO_libraries)\n+]\n+}\n+\n+def identify_executable(executable) -> Optional[str]:\n+    with open(filename, 'rb') as f:\n+        magic = f.read(4)\n+    if magic.startswith(b'MZ'):\n+        return 'PE'\n+    elif magic.startswith(b'\\x7fELF'):\n+        return 'ELF'\n+    elif magic.startswith(b'\\xcf\\xfa'):\n+        return 'MACHO'\n+    return None\n+\n+if __name__ == '__main__':\n     retval = 0\n     for filename in sys.argv[1:]:\n-        # Check imported symbols\n-        for sym,version,arch in read_symbols(filename, True):\n-            if version and not check_version(MAX_VERSIONS, version, arch):\n-                print('%s: symbol %s from unsupported version %s' % (filename, cppfilt(sym), version))\n-                retval = 1\n-        # Check exported symbols\n-        if arch != 'RISC-V':\n-            for sym,version,arch in read_symbols(filename, False):\n-                if sym in IGNORE_EXPORTS:\n-                    continue\n-                print('%s: export of symbol %s not allowed' % (filename, cppfilt(sym)))\n-                retval = 1\n-        # Check dependency libraries\n-        for library_name in read_libraries(filename):\n-            if library_name not in ALLOWED_LIBRARIES:\n-                print('%s: NEEDED library %s is not allowed' % (filename, library_name))\n+        try:\n+            etype = identify_executable(filename)\n+            if etype is None:\n+                print('{}: unknown format'.format(filename))\n                 retval = 1\n+                continue\n \n+            failed = []\n+            for (name, func) in CHECKS[etype]:\n+                if not func(filename):\n+                    failed.append(name)\n+            if failed:\n+                print('{}: failed {}'.format(filename, ' '.join(failed)))\n+                retval = 1\n+        except IOError:\n+            print('{}: cannot open'.format(filename))\n+            retval = 1\n     sys.exit(retval)"
      },
      {
        "sha": "75034616f7456f4e2d075138e05b7764010db032",
        "filename": "contrib/filter-lcov.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/filter-lcov.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/filter-lcov.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/filter-lcov.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,7 @@\n #!/usr/bin/env python3\n+# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n import argparse\n "
      },
      {
        "sha": "ade9e00d1b09feab55fcec0d94008ed1653d6859",
        "filename": "contrib/gitian-build.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/gitian-build.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/gitian-build.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,7 @@\n #!/usr/bin/env python3\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n import argparse\n import os"
      },
      {
        "sha": "257dd8ba3030c2ee418f6b34aaa6b408233f3a29",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -5,7 +5,7 @@ distro: \"ubuntu\"\n suites:\n - \"bionic\"\n architectures:\n-- \"linux64\"\n+- \"amd64\"\n packages:\n - \"curl\"\n - \"g++-aarch64-linux-gnu\""
      },
      {
        "sha": "a4f3219c2291e8164c92d5ba1eedb7a346b1bdb4",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -4,7 +4,7 @@ distro: \"ubuntu\"\n suites:\n - \"bionic\"\n architectures:\n-- \"linux64\"\n+- \"amd64\"\n packages:\n - \"faketime\"\n remotes:"
      },
      {
        "sha": "7c5abb90182c05343fdb602eaa6c320aabece18d",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -5,7 +5,7 @@ distro: \"ubuntu\"\n suites:\n - \"bionic\"\n architectures:\n-- \"linux64\"\n+- \"amd64\"\n packages:\n - \"ca-certificates\"\n - \"curl\"\n@@ -138,6 +138,7 @@ script: |\n     CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n     make ${MAKEOPTS}\n     make ${MAKEOPTS} -C src check-security\n+    make ${MAKEOPTS} -C src check-symbols\n     make install-strip DESTDIR=${INSTALLPATH}\n \n     make osx_volname"
      },
      {
        "sha": "9d96465742429991268d736bf1fb365fc1d4e8c4",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -4,7 +4,7 @@ distro: \"ubuntu\"\n suites:\n - \"bionic\"\n architectures:\n-- \"linux64\"\n+- \"amd64\"\n packages:\n - \"libssl-dev\"\n - \"autoconf\""
      },
      {
        "sha": "de2e45190a225854cbd3d039f398c4f5ed2c5b9e",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -5,7 +5,7 @@ distro: \"ubuntu\"\n suites:\n - \"bionic\"\n architectures:\n-- \"linux64\"\n+- \"amd64\"\n packages:\n - \"curl\"\n - \"g++\""
      },
      {
        "sha": "e9130a21ded67cbb3a9811f2a27a6affe46d3634",
        "filename": "contrib/install_db4.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/install_db4.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/install_db4.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/install_db4.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,7 @@\n #!/bin/sh\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # Install libdb4.8 (Berkeley DB).\n "
      },
      {
        "sha": "21243ada042ba1d5791b148cc4283f7d0c211486",
        "filename": "contrib/macdeploy/extract-osx-sdk.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/macdeploy/extract-osx-sdk.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/macdeploy/extract-osx-sdk.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/extract-osx-sdk.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env bash\n-# Copyright (c) 2016-2018 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "d516ca10c108ba52357c2eb376df84e6bc503e01",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -19,13 +19,9 @@\n \n # These are hosts that have been observed to be behaving strangely (e.g.\n # aggressively connecting to every node).\n-SUSPICIOUS_HOSTS = {\n-    \"130.211.129.106\", \"178.63.107.226\",\n-    \"83.81.130.26\", \"88.198.17.7\", \"148.251.238.178\", \"176.9.46.6\",\n-    \"54.173.72.127\", \"54.174.10.182\", \"54.183.64.54\", \"54.194.231.211\",\n-    \"54.66.214.167\", \"54.66.220.137\", \"54.67.33.14\", \"54.77.251.214\",\n-    \"54.94.195.96\", \"54.94.200.247\"\n-}\n+with open(\"suspicious_hosts.txt\", mode=\"r\", encoding=\"utf-8\") as f:\n+    SUSPICIOUS_HOSTS = {s.strip() for s in f if s.strip()}\n+\n \n PATTERN_IPV4 = re.compile(r\"^((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})):(\\d+)$\")\n PATTERN_IPV6 = re.compile(r\"^\\[([0-9a-z:]+)\\]:(\\d+)$\")"
      },
      {
        "sha": "13385cc816209d2c9fc2acf68343dce15e4dd201",
        "filename": "contrib/seeds/suspicious_hosts.txt",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/seeds/suspicious_hosts.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/seeds/suspicious_hosts.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/suspicious_hosts.txt?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -0,0 +1,16 @@\n+130.211.129.106\n+148.251.238.178\n+176.9.46.6\n+178.63.107.226\n+54.173.72.127\n+54.174.10.182\n+54.183.64.54\n+54.194.231.211\n+54.66.214.167\n+54.66.220.137\n+54.67.33.14\n+54.77.251.214\n+54.94.195.96\n+54.94.200.247\n+83.81.130.26\n+88.198.17.7\n\\ No newline at end of file"
      },
      {
        "sha": "a26791f0d1299ee5d4ee87dc2890e6d531f7c459",
        "filename": "contrib/verify-commits/pre-push-hook.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/verify-commits/pre-push-hook.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/contrib/verify-commits/pre-push-hook.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/pre-push-hook.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env bash\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "cd0e70fb1c18fa879a7575431758203854929acd",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -29,11 +29,11 @@ $(package)_cxxflags_android=-fPIC\n endef\n \n define $(package)_preprocess_cmds\n-  echo \"using $(boost_toolset_$(host_os)) : : $($(package)_cxx) : <cxxflags>\\\"$($(package)_cxxflags) $($(package)_cppflags)\\\" <linkflags>\\\"$($(package)_ldflags)\\\" <archiver>\\\"$(boost_archiver_$(host_os))\\\" <striper>\\\"$(host_STRIP)\\\"  <ranlib>\\\"$(host_RANLIB)\\\" <rc>\\\"$(host_WINDRES)\\\" : ;\" > user-config.jam\n+  echo \"using $($(package)_toolset_$(host_os)) : : $($(package)_cxx) : <cxxflags>\\\"$($(package)_cxxflags) $($(package)_cppflags)\\\" <linkflags>\\\"$($(package)_ldflags)\\\" <archiver>\\\"$($(package)_archiver_$(host_os))\\\" <striper>\\\"$(host_STRIP)\\\"  <ranlib>\\\"$(host_RANLIB)\\\" <rc>\\\"$(host_WINDRES)\\\" : ;\" > user-config.jam\n endef\n \n define $(package)_config_cmds\n-  ./bootstrap.sh --without-icu --with-libraries=$(boost_config_libraries)\n+  ./bootstrap.sh --without-icu --with-libraries=$($(package)_config_libraries)\n endef\n \n define $(package)_build_cmds"
      },
      {
        "sha": "3ef35cfcfab6d499cd60fd2c1fd324d1404f2079",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 61,
        "deletions": 18,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -9,6 +9,7 @@ Developer Notes\n     - [Coding Style (C++)](#coding-style-c)\n     - [Coding Style (Python)](#coding-style-python)\n     - [Coding Style (Doxygen-compatible comments)](#coding-style-doxygen-compatible-comments)\n+      - [Generating Documentation](#generating-documentation)\n     - [Development tips and tricks](#development-tips-and-tricks)\n         - [Compiling for debugging](#compiling-for-debugging)\n         - [Compiling for gprof profiling](#compiling-for-gprof-profiling)\n@@ -35,6 +36,9 @@ Developer Notes\n     - [Source code organization](#source-code-organization)\n     - [GUI](#gui)\n     - [Subtrees](#subtrees)\n+    - [Upgrading LevelDB](#upgrading-leveldb)\n+      - [File Descriptor Counts](#file-descriptor-counts)\n+      - [Consensus Compatibility](#consensus-compatibility)\n     - [Scripted diffs](#scripted-diffs)\n         - [Suggestions and examples](#suggestions-and-examples)\n     - [Release notes](#release-notes)\n@@ -138,12 +142,17 @@ For example, to describe a function use:\n \n ```c++\n /**\n- * ... text ...\n- * @param[in] arg1    A description\n- * @param[in] arg2    Another argument description\n- * @pre Precondition for function...\n+ * ... Description ...\n+ *\n+ * @param[in]  arg1 input description...\n+ * @param[in]  arg2 input description...\n+ * @param[out] arg3 output description...\n+ * @return Return cases...\n+ * @throws Error type and cases...\n+ * @pre  Pre-condition for function...\n+ * @post Post-condition for function...\n  */\n-bool function(int arg1, const char *arg2)\n+bool function(int arg1, const char *arg2, std::string& arg3)\n ```\n \n A complete list of `@xxx` commands can be found at http://www.doxygen.nl/manual/commands.html.\n@@ -158,44 +167,73 @@ To describe a class, use the same construct above the class definition:\n  * @see GetWarnings()\n  */\n class CAlert\n-{\n ```\n \n To describe a member or variable use:\n ```c++\n-int var; //!< Detailed description after the member\n+//! Description before the member\n+int var;\n ```\n \n or\n ```c++\n-//! Description before the member\n-int var;\n+int var; //!< Description after the member\n ```\n \n Also OK:\n ```c++\n ///\n-/// ... text ...\n+/// ... Description ...\n ///\n bool function2(int arg1, const char *arg2)\n ```\n \n-Not OK (used plenty in the current source, but not picked up):\n+Not picked up by Doxygen:\n ```c++\n //\n-// ... text ...\n+// ... Description ...\n //\n ```\n \n+Also not picked up by Doxygen:\n+```c++\n+/*\n+ * ... Description ...\n+ */\n+```\n+\n A full list of comment syntaxes picked up by Doxygen can be found at http://www.doxygen.nl/manual/docblocks.html,\n but the above styles are favored.\n \n-Documentation can be generated with `make docs` and cleaned up with `make clean-docs`. The resulting files are located in `doc/doxygen/html`; open `index.html` to view the homepage.\n+Recommendations:\n \n-Before running `make docs`, you will need to install dependencies `doxygen` and `dot`. For example, on macOS via Homebrew:\n-```\n-brew install graphviz doxygen\n-```\n+- Avoiding duplicating type and input/output information in function\n+  descriptions.\n+\n+- Use backticks (&#96;&#96;) to refer to `argument` names in function and\n+  parameter descriptions.\n+\n+- Backticks aren't required when referring to functions Doxygen already knows\n+  about; it will build hyperlinks for these automatically. See\n+  http://www.doxygen.nl/manual/autolink.html for complete info.\n+\n+- Avoid linking to external documentation; links can break.\n+\n+- Javadoc and all valid Doxygen comments are stripped from Doxygen source code\n+  previews (`STRIP_CODE_COMMENTS = YES` in [Doxyfile.in](doc/Doxyfile.in)). If\n+  you want a comment to be preserved, it must instead use `//` or `/* */`.\n+\n+### Generating Documentation\n+\n+The documentation can be generated with `make docs` and cleaned up with `make\n+clean-docs`. The resulting files are located in `doc/doxygen/html`; open\n+`index.html` in that directory to view the homepage.\n+\n+Before running `make docs`, you'll need to install these dependencies:\n+\n+Linux: `sudo apt install doxygen graphviz`\n+\n+MacOS: `brew install doxygen graphviz`\n \n Development tips and tricks\n ---------------------------\n@@ -919,7 +957,7 @@ introduce accidental changes.\n Some good examples of scripted-diff:\n \n - [scripted-diff: Rename InitInterfaces to NodeContext](https://github.com/bitcoin/bitcoin/commit/301bd41a2e6765b185bd55f4c541f9e27aeea29d)\n-uses an elegant script to replace occurences of multiple terms in all source files.\n+uses an elegant script to replace occurrences of multiple terms in all source files.\n \n - [scripted-diff: Remove g_connman, g_banman globals](https://github.com/bitcoin/bitcoin/commit/301bd41a2e6765b185bd55f4c541f9e27aeea29d)\n replaces specific terms in a list of specific source files.\n@@ -1047,6 +1085,11 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n     new RPC is replacing a deprecated RPC, to avoid both RPCs confusingly\n     showing up in the command list.\n \n+- Use *invalid* bech32 addresses for `RPCExamples` help documentation.\n+\n+  - *Rationale*: Prevent accidental transactions by users and encourage the use\n+    of bech32 addresses by default.\n+\n - Use the `UNIX_EPOCH_TIME` constant when describing UNIX epoch time or\n   timestamps in the documentation.\n "
      },
      {
        "sha": "1b07436bb14f1a4c03124698c9f66e8583e97596",
        "filename": "doc/release-notes-17578.md",
        "status": "added",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/doc/release-notes-17578.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/doc/release-notes-17578.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-17578.md?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -0,0 +1,8 @@\n+Deprecated or removed RPCs\n+--------------------------\n+\n+- The `getaddressinfo` RPC `labels` field now returns an array of label name\n+  strings. Previously, it returned an array of JSON objects containing `name` and\n+  `purpose` key/value pairs, which is now deprecated and will be removed in\n+  0.21. To re-enable the previous behavior, launch bitcoind with\n+  `-deprecatedrpc=labelspurpose`."
      },
      {
        "sha": "821553579acf2a202476126a35ac63ed3087cbf2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -554,12 +554,9 @@ if TARGET_WINDOWS\n bitcoind_SOURCES += bitcoind-res.rc\n endif\n \n-# Libraries below may be listed more than once to resolve circular dependencies (see\n-# https://eli.thegreenplace.net/2013/07/09/library-order-in-static-linking#circular-dependency)\n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_WALLET) \\\n-  $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n@@ -702,6 +699,11 @@ clean-local:\n \t$(AM_V_GEN) $(WINDRES) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(CPPFLAGS) -DWINDRES_PREPROC -i $< -o $@\n \n check-symbols: $(bin_PROGRAMS)\n+if TARGET_DARWIN\n+\t@echo \"Checking macOS dynamic libraries...\"\n+\t$(AM_V_at) OTOOL=$(OTOOL) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+endif\n+\n if GLIBC_BACK_COMPAT\n \t@echo \"Checking glibc back compat...\"\n \t$(AM_V_at) READELF=$(READELF) CPPFILT=$(CPPFILT) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)"
      },
      {
        "sha": "79db5cd7b42ff02fd58296c5fcb0ff9e7c30bfe7",
        "filename": "src/Makefile.qt_locale.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/Makefile.qt_locale.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/Makefile.qt_locale.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt_locale.include?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -10,6 +10,7 @@ QT_TS = \\\n   qt/locale/bitcoin_de_DE.ts \\\n   qt/locale/bitcoin_el.ts \\\n   qt/locale/bitcoin_el_GR.ts \\\n+  qt/locale/bitcoin_en.ts \\\n   qt/locale/bitcoin_en_AU.ts \\\n   qt/locale/bitcoin_en_GB.ts \\\n   qt/locale/bitcoin_eo.ts \\"
      },
      {
        "sha": "097555199502885919d9b04638322cfb12d43b91",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 249,
        "deletions": 240,
        "changes": 489,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -23,6 +23,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/blockundo_deserialize \\\n   test/fuzz/bloomfilter_deserialize \\\n   test/fuzz/coins_deserialize \\\n+  test/fuzz/decode_tx \\\n   test/fuzz/descriptor_parse \\\n   test/fuzz/diskblockindex_deserialize \\\n   test/fuzz/eval_script \\\n@@ -38,12 +39,12 @@ FUZZ_TARGETS = \\\n   test/fuzz/out_point_deserialize \\\n   test/fuzz/parse_hd_keypath \\\n   test/fuzz/parse_iso8601 \\\n-  test/fuzz/partial_merkle_tree_deserialize \\\n-  test/fuzz/partially_signed_transaction_deserialize \\\n-  test/fuzz/prefilled_transaction_deserialize \\\n   test/fuzz/parse_numbers \\\n   test/fuzz/parse_script \\\n   test/fuzz/parse_univalue \\\n+  test/fuzz/partial_merkle_tree_deserialize \\\n+  test/fuzz/partially_signed_transaction_deserialize \\\n+  test/fuzz/prefilled_transaction_deserialize \\\n   test/fuzz/psbt \\\n   test/fuzz/psbt_input_deserialize \\\n   test/fuzz/psbt_output_deserialize \\\n@@ -185,6 +186,7 @@ BITCOIN_TESTS =\\\n   test/uint256_tests.cpp \\\n   test/util_tests.cpp \\\n   test/validation_block_tests.cpp \\\n+  test/validation_flush_tests.cpp \\\n   test/versionbits_tests.cpp\n \n if ENABLE_PROPERTY_TESTS\n@@ -232,341 +234,348 @@ test_test_bitcoin_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n \n if ENABLE_FUZZ\n-test_fuzz_block_SOURCES = $(FUZZ_SUITE) test/fuzz/block.cpp\n-test_fuzz_block_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_block_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_block_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_block_LDADD = $(FUZZ_SUITE_LD_COMMON)\n \n-test_fuzz_block_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_block_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_DESERIALIZE=1\n-test_fuzz_block_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_block_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_block_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_blocklocator_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_blocklocator_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKLOCATOR_DESERIALIZE=1\n-test_fuzz_blocklocator_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_blocklocator_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_blocklocator_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_addr_info_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDR_INFO_DESERIALIZE=1\n+test_fuzz_addr_info_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_addr_info_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_addr_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_addr_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_blockmerkleroot_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_blockmerkleroot_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKMERKLEROOT=1\n-test_fuzz_blockmerkleroot_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_blockmerkleroot_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_blockmerkleroot_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_address_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRESS_DESERIALIZE=1\n+test_fuzz_address_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_address_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_address_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_address_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_addrman_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_addrman_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRMAN_DESERIALIZE=1\n test_fuzz_addrman_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_addrman_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_addrman_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_addrman_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_addrman_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_blockheader_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_blockheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKHEADER_DESERIALIZE=1\n-test_fuzz_blockheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_blockheader_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_blockheader_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_banentry_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_banentry_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBANENTRY_DESERIALIZE=1\n test_fuzz_banentry_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_banentry_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_banentry_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_banentry_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_banentry_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_bech32_SOURCES = $(FUZZ_SUITE) test/fuzz/bech32.cpp\n-test_fuzz_bech32_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_bech32_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_bech32_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_bech32_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_base_encode_decode_SOURCES = $(FUZZ_SUITE) test/fuzz/base_encode_decode.cpp\n test_fuzz_base_encode_decode_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_base_encode_decode_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_base_encode_decode_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_base_encode_decode_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_base_encode_decode_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_base_encode_decode_SOURCES = $(FUZZ_SUITE) test/fuzz/base_encode_decode.cpp\n \n-test_fuzz_txundo_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_txundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXUNDO_DESERIALIZE=1\n-test_fuzz_txundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_txundo_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_txundo_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_blockundo_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_blockundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKUNDO_DESERIALIZE=1\n-test_fuzz_blockundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_blockundo_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_blockundo_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_coins_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_coins_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DCOINS_DESERIALIZE=1\n-test_fuzz_coins_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_coins_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_coins_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_descriptor_parse_SOURCES = $(FUZZ_SUITE) test/fuzz/descriptor_parse.cpp\n-test_fuzz_descriptor_parse_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_descriptor_parse_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_descriptor_parse_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_descriptor_parse_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_bech32_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_bech32_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_bech32_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_bech32_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_bech32_SOURCES = $(FUZZ_SUITE) test/fuzz/bech32.cpp\n \n-test_fuzz_netaddr_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_netaddr_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DNETADDR_DESERIALIZE=1\n-test_fuzz_netaddr_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_netaddr_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_netaddr_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_block_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_block_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_block_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_SOURCES = $(FUZZ_SUITE) test/fuzz/block.cpp\n \n-test_fuzz_parse_iso8601_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_iso8601.cpp\n-test_fuzz_parse_iso8601_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_parse_iso8601_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_parse_iso8601_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_parse_iso8601_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_block_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_DESERIALIZE=1\n+test_fuzz_block_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_block_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_psbt_SOURCES = $(FUZZ_SUITE) test/fuzz/psbt.cpp\n-test_fuzz_psbt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_psbt_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_psbt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_psbt_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_block_file_info_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_FILE_INFO_DESERIALIZE=1\n+test_fuzz_block_file_info_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_file_info_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_block_file_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_file_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_script_SOURCES = $(FUZZ_SUITE) test/fuzz/script.cpp\n-test_fuzz_script_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_script_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_block_filter_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_FILTER_DESERIALIZE=1\n+test_fuzz_block_filter_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_filter_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_block_filter_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_filter_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_script_flags_SOURCES = $(FUZZ_SUITE) test/fuzz/script_flags.cpp\n-test_fuzz_script_flags_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_script_flags_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_script_flags_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_script_flags_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_block_header_and_short_txids_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_HEADER_AND_SHORT_TXIDS_DESERIALIZE=1\n+test_fuzz_block_header_and_short_txids_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_block_header_and_short_txids_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_block_header_and_short_txids_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_block_header_and_short_txids_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_service_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_service_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSERVICE_DESERIALIZE=1\n-test_fuzz_service_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_service_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_service_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_blockheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKHEADER_DESERIALIZE=1\n+test_fuzz_blockheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blockheader_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_blockheader_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blockheader_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_spanparsing_SOURCES = $(FUZZ_SUITE) test/fuzz/spanparsing.cpp\n-test_fuzz_spanparsing_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_spanparsing_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_spanparsing_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_spanparsing_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_blocklocator_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKLOCATOR_DESERIALIZE=1\n+test_fuzz_blocklocator_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blocklocator_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_blocklocator_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blocklocator_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_messageheader_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_messageheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGEHEADER_DESERIALIZE=1\n-test_fuzz_messageheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_messageheader_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_messageheader_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_blockmerkleroot_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKMERKLEROOT=1\n+test_fuzz_blockmerkleroot_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blockmerkleroot_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_blockmerkleroot_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blockmerkleroot_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_address_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_address_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDRESS_DESERIALIZE=1\n-test_fuzz_address_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_address_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_address_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_blocktransactions_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKTRANSACTIONS_DESERIALIZE=1\n+test_fuzz_blocktransactions_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blocktransactions_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_blocktransactions_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blocktransactions_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_hex_SOURCES = $(FUZZ_SUITE) test/fuzz/hex.cpp\n-test_fuzz_hex_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_hex_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_hex_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_hex_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_blocktransactionsrequest_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKTRANSACTIONSREQUEST_DESERIALIZE=1\n+test_fuzz_blocktransactionsrequest_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blocktransactionsrequest_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_blocktransactionsrequest_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blocktransactionsrequest_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_inv_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_inv_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DINV_DESERIALIZE=1\n-test_fuzz_inv_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_inv_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_inv_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_blockundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKUNDO_DESERIALIZE=1\n+test_fuzz_blockundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_blockundo_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_blockundo_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_blockundo_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_bloomfilter_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_bloomfilter_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOOMFILTER_DESERIALIZE=1\n test_fuzz_bloomfilter_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_bloomfilter_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_bloomfilter_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_bloomfilter_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_bloomfilter_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+\n+test_fuzz_coins_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DCOINS_DESERIALIZE=1\n+test_fuzz_coins_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_coins_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_coins_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_coins_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+\n+test_fuzz_decode_tx_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_decode_tx_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_decode_tx_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_decode_tx_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_decode_tx_SOURCES = $(FUZZ_SUITE) test/fuzz/decode_tx.cpp\n+\n+test_fuzz_descriptor_parse_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_descriptor_parse_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_descriptor_parse_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_descriptor_parse_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_descriptor_parse_SOURCES = $(FUZZ_SUITE) test/fuzz/descriptor_parse.cpp\n \n-test_fuzz_diskblockindex_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_diskblockindex_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DDISKBLOCKINDEX_DESERIALIZE=1\n test_fuzz_diskblockindex_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_diskblockindex_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_diskblockindex_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_diskblockindex_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_diskblockindex_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_eval_script_SOURCES = $(FUZZ_SUITE) test/fuzz/eval_script.cpp\n test_fuzz_eval_script_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_eval_script_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_eval_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_eval_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_eval_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_eval_script_SOURCES = $(FUZZ_SUITE) test/fuzz/eval_script.cpp\n \n-test_fuzz_integer_SOURCES = $(FUZZ_SUITE) test/fuzz/integer.cpp\n-test_fuzz_integer_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_integer_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_integer_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_integer_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_txoutcompressor_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_txoutcompressor_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXOUTCOMPRESSOR_DESERIALIZE=1\n-test_fuzz_txoutcompressor_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_txoutcompressor_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_txoutcompressor_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_blocktransactions_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_blocktransactions_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKTRANSACTIONS_DESERIALIZE=1\n-test_fuzz_blocktransactions_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_blocktransactions_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_blocktransactions_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_blocktransactionsrequest_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_blocktransactionsrequest_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCKTRANSACTIONSREQUEST_DESERIALIZE=1\n-test_fuzz_blocktransactionsrequest_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_blocktransactionsrequest_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_blocktransactionsrequest_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_transaction_SOURCES = $(FUZZ_SUITE) test/fuzz/transaction.cpp\n-test_fuzz_transaction_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_transaction_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_transaction_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_transaction_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_addr_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_addr_info_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DADDR_INFO_DESERIALIZE=1\n-test_fuzz_addr_info_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_addr_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_addr_info_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_block_file_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_block_file_info_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_FILE_INFO_DESERIALIZE=1\n-test_fuzz_block_file_info_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_block_file_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_block_file_info_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_block_filter_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_block_filter_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_FILTER_DESERIALIZE=1\n-test_fuzz_block_filter_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_block_filter_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_block_filter_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_block_header_and_short_txids_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_block_header_and_short_txids_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DBLOCK_HEADER_AND_SHORT_TXIDS_DESERIALIZE=1\n-test_fuzz_block_header_and_short_txids_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_block_header_and_short_txids_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_block_header_and_short_txids_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_fee_rate_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_fee_rate_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DFEE_RATE_DESERIALIZE=1\n test_fuzz_fee_rate_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_fee_rate_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_fee_rate_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_fee_rate_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_fee_rate_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_flat_file_pos_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_flat_file_pos_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DFLAT_FILE_POS_DESERIALIZE=1\n test_fuzz_flat_file_pos_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_flat_file_pos_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_flat_file_pos_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_flat_file_pos_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_flat_file_pos_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+\n+test_fuzz_hex_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_hex_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_hex_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_hex_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_hex_SOURCES = $(FUZZ_SUITE) test/fuzz/hex.cpp\n+\n+test_fuzz_integer_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_integer_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_integer_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_integer_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_integer_SOURCES = $(FUZZ_SUITE) test/fuzz/integer.cpp\n+\n+test_fuzz_inv_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DINV_DESERIALIZE=1\n+test_fuzz_inv_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_inv_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_inv_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_inv_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_key_origin_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_key_origin_info_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DKEY_ORIGIN_INFO_DESERIALIZE=1\n test_fuzz_key_origin_info_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_key_origin_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_key_origin_info_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_key_origin_info_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_key_origin_info_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_merkle_block_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_merkle_block_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMERKLE_BLOCK_DESERIALIZE=1\n test_fuzz_merkle_block_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_merkle_block_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_merkle_block_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_merkle_block_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_merkle_block_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+\n+test_fuzz_messageheader_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DMESSAGEHEADER_DESERIALIZE=1\n+test_fuzz_messageheader_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_messageheader_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_messageheader_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_messageheader_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+\n+test_fuzz_netaddr_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DNETADDR_DESERIALIZE=1\n+test_fuzz_netaddr_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_netaddr_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_netaddr_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_netaddr_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_out_point_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_out_point_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DOUT_POINT_DESERIALIZE=1\n test_fuzz_out_point_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_out_point_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_out_point_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_out_point_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_out_point_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_partially_signed_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_partially_signed_transaction_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPARTIALLY_SIGNED_TRANSACTION_DESERIALIZE=1\n-test_fuzz_partially_signed_transaction_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_partially_signed_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_partially_signed_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_parse_hd_keypath_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_parse_hd_keypath_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_parse_hd_keypath_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_parse_hd_keypath_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_parse_hd_keypath_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_hd_keypath.cpp\n+\n+test_fuzz_parse_iso8601_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_parse_iso8601_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_parse_iso8601_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_parse_iso8601_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_parse_iso8601_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_iso8601.cpp\n+\n+test_fuzz_parse_numbers_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_parse_numbers_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_parse_numbers_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_parse_numbers_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_parse_numbers_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_numbers.cpp\n+\n+test_fuzz_parse_script_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_parse_script_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_parse_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_parse_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_parse_script_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_script.cpp\n+\n+test_fuzz_parse_univalue_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_parse_univalue_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_parse_univalue_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_parse_univalue_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_parse_univalue_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_univalue.cpp\n \n-test_fuzz_partial_merkle_tree_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_partial_merkle_tree_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPARTIAL_MERKLE_TREE_DESERIALIZE=1\n test_fuzz_partial_merkle_tree_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_partial_merkle_tree_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_partial_merkle_tree_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_partial_merkle_tree_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_partial_merkle_tree_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+\n+test_fuzz_partially_signed_transaction_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPARTIALLY_SIGNED_TRANSACTION_DESERIALIZE=1\n+test_fuzz_partially_signed_transaction_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_partially_signed_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_partially_signed_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_partially_signed_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_prefilled_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_prefilled_transaction_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPREFILLED_TRANSACTION_DESERIALIZE=1\n test_fuzz_prefilled_transaction_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_prefilled_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_prefilled_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_prefilled_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_prefilled_transaction_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+\n+test_fuzz_psbt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_psbt_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_psbt_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_psbt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_psbt_SOURCES = $(FUZZ_SUITE) test/fuzz/psbt.cpp\n \n-test_fuzz_psbt_input_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_psbt_input_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPSBT_INPUT_DESERIALIZE=1\n test_fuzz_psbt_input_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_psbt_input_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_psbt_input_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_psbt_input_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_psbt_input_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_psbt_output_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_psbt_output_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPSBT_OUTPUT_DESERIALIZE=1\n test_fuzz_psbt_output_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_psbt_output_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_psbt_output_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_psbt_output_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_psbt_output_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_pub_key_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_pub_key_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DPUB_KEY_DESERIALIZE=1\n test_fuzz_pub_key_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_pub_key_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_pub_key_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_pub_key_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_pub_key_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+\n+test_fuzz_script_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_SOURCES = $(FUZZ_SUITE) test/fuzz/script.cpp\n \n-test_fuzz_script_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_script_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSCRIPT_DESERIALIZE=1\n test_fuzz_script_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_script_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_script_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_script_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+\n+test_fuzz_script_flags_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_script_flags_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_script_flags_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_script_flags_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_script_flags_SOURCES = $(FUZZ_SUITE) test/fuzz/script_flags.cpp\n+\n+test_fuzz_service_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSERVICE_DESERIALIZE=1\n+test_fuzz_service_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_service_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_service_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_service_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n+\n+test_fuzz_spanparsing_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_spanparsing_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_spanparsing_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_spanparsing_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_spanparsing_SOURCES = $(FUZZ_SUITE) test/fuzz/spanparsing.cpp\n \n-test_fuzz_sub_net_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n test_fuzz_sub_net_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DSUB_NET_DESERIALIZE=1\n test_fuzz_sub_net_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_sub_net_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_sub_net_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_sub_net_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_sub_net_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_tx_in_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n-test_fuzz_tx_in_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTX_IN_DESERIALIZE=1\n-test_fuzz_tx_in_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_tx_in_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_tx_in_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_transaction_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_transaction_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_transaction_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_transaction_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_transaction_SOURCES = $(FUZZ_SUITE) test/fuzz/transaction.cpp\n \n-test_fuzz_tx_in_SOURCES = $(FUZZ_SUITE) test/fuzz/tx_in.cpp\n test_fuzz_tx_in_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_tx_in_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_tx_in_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_tx_in_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_tx_in_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_tx_in_SOURCES = $(FUZZ_SUITE) test/fuzz/tx_in.cpp\n+\n+test_fuzz_tx_in_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTX_IN_DESERIALIZE=1\n+test_fuzz_tx_in_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_tx_in_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_tx_in_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_tx_in_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_tx_out_SOURCES = $(FUZZ_SUITE) test/fuzz/tx_out.cpp\n test_fuzz_tx_out_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_tx_out_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_tx_out_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_tx_out_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_tx_out_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_tx_out_SOURCES = $(FUZZ_SUITE) test/fuzz/tx_out.cpp\n \n-test_fuzz_parse_hd_keypath_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_hd_keypath.cpp\n-test_fuzz_parse_hd_keypath_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_parse_hd_keypath_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_parse_hd_keypath_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_parse_hd_keypath_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_parse_script_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_script.cpp\n-test_fuzz_parse_script_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_parse_script_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_parse_script_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_parse_script_LDADD = $(FUZZ_SUITE_LD_COMMON)\n-\n-test_fuzz_parse_numbers_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_numbers.cpp\n-test_fuzz_parse_numbers_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_parse_numbers_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_parse_numbers_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_parse_numbers_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_txoutcompressor_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXOUTCOMPRESSOR_DESERIALIZE=1\n+test_fuzz_txoutcompressor_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_txoutcompressor_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_txoutcompressor_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_txoutcompressor_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n-test_fuzz_parse_univalue_SOURCES = $(FUZZ_SUITE) test/fuzz/parse_univalue.cpp\n-test_fuzz_parse_univalue_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n-test_fuzz_parse_univalue_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n-test_fuzz_parse_univalue_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n-test_fuzz_parse_univalue_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_txundo_deserialize_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) -DTXUNDO_DESERIALIZE=1\n+test_fuzz_txundo_deserialize_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_txundo_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_txundo_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_txundo_deserialize_SOURCES = $(FUZZ_SUITE) test/fuzz/deserialize.cpp\n \n endif # ENABLE_FUZZ\n "
      },
      {
        "sha": "8685ea504935feadbe8ca7d047b1138aff69d9b1",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2012 Pieter Wuille\n-// Copyright (c) 2012-2019 The Bitcoin Core developers\n+// Copyright (c) 2012-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -172,7 +172,7 @@ class CAddrMan\n {\n protected:\n     //! critical section to protect the inner data structures\n-    mutable CCriticalSection cs;\n+    mutable RecursiveMutex cs;\n \n private:\n     //! last used nId"
      },
      {
        "sha": "8984874914004cc7cc97be3181ce218580d0a580",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef BITCOIN_BANMAN_H\n@@ -59,7 +59,7 @@ class BanMan\n     //!clean unused entries (if bantime has expired)\n     void SweepBanned();\n \n-    CCriticalSection m_cs_banned;\n+    RecursiveMutex m_cs_banned;\n     banmap_t m_banned GUARDED_BY(m_cs_banned);\n     bool m_is_dirty GUARDED_BY(m_cs_banned);\n     CClientUIInterface* m_client_interface = nullptr;"
      },
      {
        "sha": "d1b2b938ff2c28c32d67b724092e7750b0bbe706",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -16,6 +16,7 @@\n #include <regex>\n \n const RegTestingSetup* g_testing_setup = nullptr;\n+const std::function<void(const std::string&)> G_TEST_LOG_FUN{};\n \n void benchmark::ConsolePrinter::header()\n {"
      },
      {
        "sha": "6b7a0f76d1bd2b48a4d268d899ab5e4959ce7ea0",
        "filename": "src/bench/bench.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/bench/bench.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/bench/bench.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2019 The Bitcoin Core developers\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7f1a4a114ba4af63bc6f535c13045f27c288661c",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -41,7 +41,7 @@ static bool WalletAppInit(int argc, char* argv[])\n     }\n     if (argc < 2 || HelpRequested(gArgs)) {\n         std::string usage = strprintf(\"%s bitcoin-wallet version\", PACKAGE_NAME) + \" \" + FormatFullVersion() + \"\\n\\n\" +\n-                                      \"bitcoin-wallet is an offline tool for creating and interacting with Bitcoin Core wallet files.\\n\" +\n+                                      \"bitcoin-wallet is an offline tool for creating and interacting with \" PACKAGE_NAME \" wallet files.\\n\" +\n                                       \"By default bitcoin-wallet will act on wallets in the default mainnet wallet directory in the datadir.\\n\" +\n                                       \"To change the target wallet, use the -datadir, -wallet and -testnet/-regtest arguments.\\n\\n\" +\n                                       \"Usage:\\n\" +"
      },
      {
        "sha": "48bcb8bfddd906c47d4a1722e9dde01638b35f0b",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 25,
        "deletions": 33,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -48,17 +48,15 @@ class CBlockFileInfo\n     uint64_t nTimeFirst;       //!< earliest time of block in file\n     uint64_t nTimeLast;        //!< latest time of block in file\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(VARINT(nBlocks));\n-        READWRITE(VARINT(nSize));\n-        READWRITE(VARINT(nUndoSize));\n-        READWRITE(VARINT(nHeightFirst));\n-        READWRITE(VARINT(nHeightLast));\n-        READWRITE(VARINT(nTimeFirst));\n-        READWRITE(VARINT(nTimeLast));\n+    SERIALIZE_METHODS(CBlockFileInfo, obj)\n+    {\n+        READWRITE(VARINT(obj.nBlocks));\n+        READWRITE(VARINT(obj.nSize));\n+        READWRITE(VARINT(obj.nUndoSize));\n+        READWRITE(VARINT(obj.nHeightFirst));\n+        READWRITE(VARINT(obj.nHeightLast));\n+        READWRITE(VARINT(obj.nTimeFirst));\n+        READWRITE(VARINT(obj.nTimeLast));\n     }\n \n      void SetNull() {\n@@ -332,31 +330,25 @@ class CDiskBlockIndex : public CBlockIndex\n         hashPrev = (pprev ? pprev->GetBlockHash() : uint256());\n     }\n \n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n+    SERIALIZE_METHODS(CDiskBlockIndex, obj)\n+    {\n         int _nVersion = s.GetVersion();\n-        if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(VARINT(_nVersion, VarIntMode::NONNEGATIVE_SIGNED));\n-\n-        READWRITE(VARINT(nHeight, VarIntMode::NONNEGATIVE_SIGNED));\n-        READWRITE(VARINT(nStatus));\n-        READWRITE(VARINT(nTx));\n-        if (nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO))\n-            READWRITE(VARINT(nFile, VarIntMode::NONNEGATIVE_SIGNED));\n-        if (nStatus & BLOCK_HAVE_DATA)\n-            READWRITE(VARINT(nDataPos));\n-        if (nStatus & BLOCK_HAVE_UNDO)\n-            READWRITE(VARINT(nUndoPos));\n+        if (!(s.GetType() & SER_GETHASH)) READWRITE(VARINT(_nVersion, VarIntMode::NONNEGATIVE_SIGNED));\n+\n+        READWRITE(VARINT(obj.nHeight, VarIntMode::NONNEGATIVE_SIGNED));\n+        READWRITE(VARINT(obj.nStatus));\n+        READWRITE(VARINT(obj.nTx));\n+        if (obj.nStatus & (BLOCK_HAVE_DATA | BLOCK_HAVE_UNDO)) READWRITE(VARINT(obj.nFile, VarIntMode::NONNEGATIVE_SIGNED));\n+        if (obj.nStatus & BLOCK_HAVE_DATA) READWRITE(VARINT(obj.nDataPos));\n+        if (obj.nStatus & BLOCK_HAVE_UNDO) READWRITE(VARINT(obj.nUndoPos));\n \n         // block header\n-        READWRITE(this->nVersion);\n-        READWRITE(hashPrev);\n-        READWRITE(hashMerkleRoot);\n-        READWRITE(nTime);\n-        READWRITE(nBits);\n-        READWRITE(nNonce);\n+        READWRITE(obj.nVersion);\n+        READWRITE(obj.hashPrev);\n+        READWRITE(obj.hashMerkleRoot);\n+        READWRITE(obj.nTime);\n+        READWRITE(obj.nBits);\n+        READWRITE(obj.nNonce);\n     }\n \n     uint256 GetBlockHash() const"
      },
      {
        "sha": "624bdb42e47412fc89f5b0a2bd8aab10b2d055d2",
        "filename": "src/crypto/sha256_avx2.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/crypto/sha256_avx2.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/crypto/sha256_avx2.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256_avx2.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifdef ENABLE_AVX2\n \n #include <stdint.h>"
      },
      {
        "sha": "4eaf7d7b188ce3278699d04a1aa588e04b8ad04f",
        "filename": "src/crypto/sha256_sse41.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/crypto/sha256_sse41.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/crypto/sha256_sse41.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256_sse41.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifdef ENABLE_SSE41\n \n #include <stdint.h>"
      },
      {
        "sha": "a5582e3b2c891e2ed4f76770ad936dfe49641f6e",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Copyright (c) 2018-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,6 +11,8 @@ enum class WalletCreationStatus;\n \n namespace interfaces {\n class Chain;\n+class Handler;\n+class Wallet;\n }\n \n class DummyWalletInit : public WalletInitInterface {\n@@ -80,9 +82,13 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n-namespace interfaces {\n+using LoadWalletFn = std::function<void(std::unique_ptr<interfaces::Wallet> wallet)>;\n+std::unique_ptr<interfaces::Handler> HandleLoadWallet(LoadWalletFn load_wallet)\n+{\n+    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n+}\n \n-class Wallet;\n+namespace interfaces {\n \n std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet)\n {"
      },
      {
        "sha": "066c6c10d30c5246b12781e69401e1b183b30ac5",
        "filename": "src/fs.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/fs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/fs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include <fs.h>\n \n #ifndef WIN32"
      },
      {
        "sha": "0e13b85806d88f8896d589624febc5bb9feaab0c",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -172,7 +172,7 @@ static bool InitHTTPAllowList()\n     rpc_allow_subnets.push_back(CSubNet(localv6));         // always allow IPv6 localhost\n     for (const std::string& strAllow : gArgs.GetArgs(\"-rpcallowip\")) {\n         CSubNet subnet;\n-        LookupSubNet(strAllow.c_str(), subnet);\n+        LookupSubNet(strAllow, subnet);\n         if (!subnet.IsValid()) {\n             uiInterface.ThreadSafeMessageBox(\n                 strprintf(\"Invalid -rpcallowip subnet specification: %s. Valid are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24).\", strAllow),\n@@ -324,7 +324,7 @@ static bool HTTPBindAddresses(struct evhttp* http)\n         evhttp_bound_socket *bind_handle = evhttp_bind_socket_with_handle(http, i->first.empty() ? nullptr : i->first.c_str(), i->second);\n         if (bind_handle) {\n             CNetAddr addr;\n-            if (i->first.empty() || (LookupHost(i->first.c_str(), addr, false) && addr.IsBindAny())) {\n+            if (i->first.empty() || (LookupHost(i->first, addr, false) && addr.IsBindAny())) {\n                 LogPrintf(\"WARNING: the RPC server is not safe to expose to untrusted networks such as the public internet\\n\");\n             }\n             boundSockets.push_back(bind_handle);"
      },
      {
        "sha": "1bc1d767caa00a66e5b50a43e7e7088c256af4e0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -172,7 +172,7 @@ void Interrupt(NodeContext& node)\n void Shutdown(NodeContext& node)\n {\n     LogPrintf(\"%s: In progress...\\n\", __func__);\n-    static CCriticalSection cs_Shutdown;\n+    static RecursiveMutex cs_Shutdown;\n     TRY_LOCK(cs_Shutdown, lockShutdown);\n     if (!lockShutdown)\n         return;\n@@ -197,8 +197,6 @@ void Shutdown(NodeContext& node)\n     // using the other before destroying them.\n     if (node.peer_logic) UnregisterValidationInterface(node.peer_logic.get());\n     if (node.connman) node.connman->Stop();\n-    if (g_txindex) g_txindex->Stop();\n-    ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Stop(); });\n \n     StopTorControl();\n \n@@ -212,8 +210,6 @@ void Shutdown(NodeContext& node)\n     node.peer_logic.reset();\n     node.connman.reset();\n     node.banman.reset();\n-    g_txindex.reset();\n-    DestroyAllBlockFilterIndexes();\n \n     if (::mempool.IsLoaded() && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool(::mempool);\n@@ -246,6 +242,14 @@ void Shutdown(NodeContext& node)\n     // CValidationInterface callbacks, flush them...\n     GetMainSignals().FlushBackgroundCallbacks();\n \n+    // Stop and delete all indexes only after flushing background callbacks.\n+    if (g_txindex) {\n+        g_txindex->Stop();\n+        g_txindex.reset();\n+    }\n+    ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Stop(); });\n+    DestroyAllBlockFilterIndexes();\n+\n     // Any future callbacks will be dropped. This should absolutely be safe - if\n     // missing a callback results in an unrecoverable situation, unclean shutdown\n     // would too. The only reason to do the above flushes is to let the wallet catch\n@@ -517,7 +521,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-minrelaytxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\",\n         CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n     gArgs.AddArg(\"-whitelistforcerelay\", strprintf(\"Add 'forcerelay' permission to whitelisted inbound peers with default permissions. This will relay transactions even if the transactions were already in the mempool or violate local relay policy. (default: %d)\", DEFAULT_WHITELISTFORCERELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n-    gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Add 'relay' permission to whitelisted inbound peers with default permissions. The will accept relayed transactions even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n+    gArgs.AddArg(\"-whitelistrelay\", strprintf(\"Add 'relay' permission to whitelisted inbound peers with default permissions. This will accept relayed transactions even when not relaying transactions (default: %d)\", DEFAULT_WHITELISTRELAY), ArgsManager::ALLOW_ANY, OptionsCategory::NODE_RELAY);\n \n \n     gArgs.AddArg(\"-blockmaxweight=<n>\", strprintf(\"Set maximum BIP141 block weight (default: %d)\", DEFAULT_BLOCK_MAX_WEIGHT), ArgsManager::ALLOW_ANY, OptionsCategory::BLOCK_CREATION);\n@@ -877,8 +881,8 @@ bool AppInitBasicSetup()\n     _set_abort_behavior(0, _WRITE_ABORT_MSG | _CALL_REPORTFAULT);\n #endif\n #ifdef WIN32\n-    // Enable Data Execution Prevention (DEP)\n-    SetProcessDEPPolicy(PROCESS_DEP_ENABLE);\n+    // Enable heap terminate-on-corruption\n+    HeapSetInformation(nullptr, HeapEnableTerminationOnCorruption, nullptr, 0);\n #endif\n \n     if (!SetupNetworking())\n@@ -1354,7 +1358,7 @@ bool AppInitMain(NodeContext& node)\n     SetReachable(NET_ONION, false);\n     if (proxyArg != \"\" && proxyArg != \"0\") {\n         CService proxyAddr;\n-        if (!Lookup(proxyArg.c_str(), proxyAddr, 9050, fNameLookup)) {\n+        if (!Lookup(proxyArg, proxyAddr, 9050, fNameLookup)) {\n             return InitError(strprintf(_(\"Invalid -proxy address or hostname: '%s'\").translated, proxyArg));\n         }\n \n@@ -1378,7 +1382,7 @@ bool AppInitMain(NodeContext& node)\n             SetReachable(NET_ONION, false);\n         } else {\n             CService onionProxy;\n-            if (!Lookup(onionArg.c_str(), onionProxy, 9050, fNameLookup)) {\n+            if (!Lookup(onionArg, onionProxy, 9050, fNameLookup)) {\n                 return InitError(strprintf(_(\"Invalid -onion address or hostname: '%s'\").translated, onionArg));\n             }\n             proxyType addrOnion = proxyType(onionProxy, proxyRandomize);\n@@ -1396,7 +1400,7 @@ bool AppInitMain(NodeContext& node)\n \n     for (const std::string& strAddr : gArgs.GetArgs(\"-externalip\")) {\n         CService addrLocal;\n-        if (Lookup(strAddr.c_str(), addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n+        if (Lookup(strAddr, addrLocal, GetListenPort(), fNameLookup) && addrLocal.IsValid())\n             AddLocal(addrLocal, LOCAL_MANUAL);\n         else\n             return InitError(ResolveErrMsg(\"externalip\", strAddr));\n@@ -1776,7 +1780,7 @@ bool AppInitMain(NodeContext& node)\n \n     for (const std::string& strBind : gArgs.GetArgs(\"-bind\")) {\n         CService addrBind;\n-        if (!Lookup(strBind.c_str(), addrBind, GetListenPort(), false)) {\n+        if (!Lookup(strBind, addrBind, GetListenPort(), false)) {\n             return InitError(ResolveErrMsg(\"bind\", strBind));\n         }\n         connOptions.vBinds.push_back(addrBind);"
      },
      {
        "sha": "643bb58d56cde5f50c762a1e25d44fa112cfe9dc",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Copyright (c) 2018-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -38,7 +38,7 @@\n namespace interfaces {\n namespace {\n \n-class LockImpl : public Chain::Lock, public UniqueLock<CCriticalSection>\n+class LockImpl : public Chain::Lock, public UniqueLock<RecursiveMutex>\n {\n     Optional<int> getHeight() override\n     {\n@@ -338,7 +338,6 @@ class ChainImpl : public Chain\n     void initMessage(const std::string& message) override { ::uiInterface.InitMessage(message); }\n     void initWarning(const std::string& message) override { InitWarning(message); }\n     void initError(const std::string& message) override { InitError(message); }\n-    void loadWallet(std::unique_ptr<Wallet> wallet) override { ::uiInterface.LoadWallet(wallet); }\n     void showProgress(const std::string& title, int progress, bool resume_possible) override\n     {\n         ::uiInterface.ShowProgress(title, progress, resume_possible);"
      },
      {
        "sha": "7304f82749babe5d3c82da7cc42ae580e0b98eff",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Copyright (c) 2018-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -43,7 +43,7 @@ class Wallet;\n //!   asynchronously\n //!   (https://github.com/bitcoin/bitcoin/pull/10973#issuecomment-380101269).\n //!\n-//! * The initMessages() and loadWallet() methods which the wallet uses to send\n+//! * The initMessage() and showProgress() methods which the wallet uses to send\n //!   notifications to the GUI should go away when GUI and wallet can directly\n //!   communicate with each other without going through the node\n //!   (https://github.com/bitcoin/bitcoin/pull/15288#discussion_r253321096).\n@@ -209,9 +209,6 @@ class Chain\n     //! Send init error.\n     virtual void initError(const std::string& message) = 0;\n \n-    //! Send wallet load notification to the GUI.\n-    virtual void loadWallet(std::unique_ptr<Wallet> wallet) = 0;\n-\n     //! Send progress indicator.\n     virtual void showProgress(const std::string& title, int progress, bool resume_possible) = 0;\n "
      },
      {
        "sha": "95035c1b540932b05a9ba9cbc6e9c9d14767e727",
        "filename": "src/interfaces/handler.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/interfaces/handler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/interfaces/handler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/handler.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018 The Bitcoin Core developers\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -22,11 +22,25 @@ class HandlerImpl : public Handler\n     boost::signals2::scoped_connection m_connection;\n };\n \n+class CleanupHandler : public Handler\n+{\n+public:\n+    explicit CleanupHandler(std::function<void()> cleanup) : m_cleanup(std::move(cleanup)) {}\n+    ~CleanupHandler() override { if (!m_cleanup) return; m_cleanup(); m_cleanup = nullptr; }\n+    void disconnect() override { if (!m_cleanup) return; m_cleanup(); m_cleanup = nullptr; }\n+    std::function<void()> m_cleanup;\n+};\n+\n } // namespace\n \n std::unique_ptr<Handler> MakeHandler(boost::signals2::connection connection)\n {\n     return MakeUnique<HandlerImpl>(std::move(connection));\n }\n \n+std::unique_ptr<Handler> MakeHandler(std::function<void()> cleanup)\n+{\n+    return MakeUnique<CleanupHandler>(std::move(cleanup));\n+}\n+\n } // namespace interfaces"
      },
      {
        "sha": "fbac3c6b71a2b1abce76a89dc3feb8d35b903463",
        "filename": "src/interfaces/handler.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/interfaces/handler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/interfaces/handler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/handler.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,10 +1,11 @@\n-// Copyright (c) 2018 The Bitcoin Core developers\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_INTERFACES_HANDLER_H\n #define BITCOIN_INTERFACES_HANDLER_H\n \n+#include <functional>\n #include <memory>\n \n namespace boost {\n@@ -30,6 +31,9 @@ class Handler\n //! Return handler wrapping a boost signal connection.\n std::unique_ptr<Handler> MakeHandler(boost::signals2::connection connection);\n \n+//! Return handler wrapping a cleanup function.\n+std::unique_ptr<Handler> MakeHandler(std::function<void()> cleanup);\n+\n } // namespace interfaces\n \n #endif // BITCOIN_INTERFACES_HANDLER_H"
      },
      {
        "sha": "8a64a9d26aacbf8bde164445e955fb031cd581c9",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Copyright (c) 2018-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -43,11 +43,10 @@ std::vector<fs::path> ListWalletDir();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::vector<std::string>& warnings);\n WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result);\n+std::unique_ptr<interfaces::Handler> HandleLoadWallet(interfaces::Node::LoadWalletFn load_wallet);\n \n namespace interfaces {\n \n-class Wallet;\n-\n namespace {\n \n class NodeImpl : public Node\n@@ -286,7 +285,7 @@ class NodeImpl : public Node\n     }\n     std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) override\n     {\n-        return MakeHandler(::uiInterface.LoadWallet_connect([fn](std::unique_ptr<Wallet>& wallet) { fn(std::move(wallet)); }));\n+        return HandleLoadWallet(std::move(fn));\n     }\n     std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) override\n     {"
      },
      {
        "sha": "6fd916b60328eeb3cb25564719e8c631f4f02c1d",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -162,6 +162,7 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::COINDB, \"coindb\"},\n     {BCLog::QT, \"qt\"},\n     {BCLog::LEVELDB, \"leveldb\"},\n+    {BCLog::VALIDATION, \"validation\"},\n     {BCLog::ALL, \"1\"},\n     {BCLog::ALL, \"all\"},\n };"
      },
      {
        "sha": "b2fde1b9ea79a34170abb323110c7df70baf31f9",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -54,6 +54,7 @@ namespace BCLog {\n         COINDB      = (1 << 18),\n         QT          = (1 << 19),\n         LEVELDB     = (1 << 20),\n+        VALIDATION  = (1 << 21),\n         ALL         = ~(uint32_t)0,\n     };\n "
      },
      {
        "sha": "68764bf5cb17d6039ebf3438e1b295dfb76e1f2a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -85,7 +85,7 @@ static const uint64_t RANDOMIZER_ID_LOCALHOSTNONCE = 0xd93e69e2bbfa5735ULL; // S\n bool fDiscover = true;\n bool fListen = true;\n bool g_relay_txes = !DEFAULT_BLOCKSONLY;\n-CCriticalSection cs_mapLocalHost;\n+RecursiveMutex cs_mapLocalHost;\n std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n static bool vfLimited[NET_MAX] GUARDED_BY(cs_mapLocalHost) = {};\n std::string strSubVersion;\n@@ -410,7 +410,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n             if (hSocket == INVALID_SOCKET) {\n                 return nullptr;\n             }\n-            connected = ConnectThroughProxy(proxy, addrConnect.ToStringIP(), addrConnect.GetPort(), hSocket, nConnectTimeout, &proxyConnectionFailed);\n+            connected = ConnectThroughProxy(proxy, addrConnect.ToStringIP(), addrConnect.GetPort(), hSocket, nConnectTimeout, proxyConnectionFailed);\n         } else {\n             // no proxy needed (none set for target network)\n             hSocket = CreateSocket(addrConnect);\n@@ -432,7 +432,8 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         std::string host;\n         int port = default_port;\n         SplitHostPort(std::string(pszDest), port, host);\n-        connected = ConnectThroughProxy(proxy, host, port, hSocket, nConnectTimeout, nullptr);\n+        bool proxyConnectionFailed;\n+        connected = ConnectThroughProxy(proxy, host, port, hSocket, nConnectTimeout, proxyConnectionFailed);\n     }\n     if (!connected) {\n         CloseSocket(hSocket);\n@@ -1609,7 +1610,7 @@ void CConnman::ThreadDNSAddressSeed()\n                 continue;\n             }\n             unsigned int nMaxIPs = 256; // Limits number of IPs learned from a DNS seed\n-            if (LookupHost(host.c_str(), vIPs, nMaxIPs, true)) {\n+            if (LookupHost(host, vIPs, nMaxIPs, true)) {\n                 for (const CNetAddr& ip : vIPs) {\n                     int nOneDay = 24*3600;\n                     CAddress addr = CAddress(CService(ip, Params().GetDefaultPort()), requiredServiceBits);\n@@ -1907,7 +1908,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n     }\n \n     for (const std::string& strAddNode : lAddresses) {\n-        CService service(LookupNumeric(strAddNode.c_str(), Params().GetDefaultPort()));\n+        CService service(LookupNumeric(strAddNode, Params().GetDefaultPort()));\n         AddedNodeInfo addedNode{strAddNode, CService(), false, false};\n         if (service.IsValid()) {\n             // strAddNode is an IP:port"
      },
      {
        "sha": "2e7f29a8d7d8d41fcb7a790cef8fbdef7ef678f7",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -384,10 +384,10 @@ class CConnman\n     static bool NodeFullyConnected(const CNode* pnode);\n \n     // Network usage totals\n-    CCriticalSection cs_totalBytesRecv;\n-    CCriticalSection cs_totalBytesSent;\n-    uint64_t nTotalBytesRecv GUARDED_BY(cs_totalBytesRecv);\n-    uint64_t nTotalBytesSent GUARDED_BY(cs_totalBytesSent);\n+    RecursiveMutex cs_totalBytesRecv;\n+    RecursiveMutex cs_totalBytesSent;\n+    uint64_t nTotalBytesRecv GUARDED_BY(cs_totalBytesRecv) {0};\n+    uint64_t nTotalBytesSent GUARDED_BY(cs_totalBytesSent) {0};\n \n     // outbound limit & stats\n     uint64_t nMaxOutboundTotalBytesSentInCycle GUARDED_BY(cs_totalBytesSent);\n@@ -410,12 +410,12 @@ class CConnman\n     bool fAddressesInitialized{false};\n     CAddrMan addrman;\n     std::deque<std::string> vOneShots GUARDED_BY(cs_vOneShots);\n-    CCriticalSection cs_vOneShots;\n+    RecursiveMutex cs_vOneShots;\n     std::vector<std::string> vAddedNodes GUARDED_BY(cs_vAddedNodes);\n-    CCriticalSection cs_vAddedNodes;\n+    RecursiveMutex cs_vAddedNodes;\n     std::vector<CNode*> vNodes GUARDED_BY(cs_vNodes);\n     std::list<CNode*> vNodesDisconnected;\n-    mutable CCriticalSection cs_vNodes;\n+    mutable RecursiveMutex cs_vNodes;\n     std::atomic<NodeId> nLastNodeId{0};\n     unsigned int nPrevNodeCount{0};\n \n@@ -565,7 +565,7 @@ struct LocalServiceInfo {\n     int nPort;\n };\n \n-extern CCriticalSection cs_mapLocalHost;\n+extern RecursiveMutex cs_mapLocalHost;\n extern std::map<CNetAddr, LocalServiceInfo> mapLocalHost GUARDED_BY(cs_mapLocalHost);\n \n extern const std::string NET_MESSAGE_COMMAND_OTHER;\n@@ -713,15 +713,15 @@ class CNode\n     size_t nSendOffset{0}; // offset inside the first vSendMsg already sent\n     uint64_t nSendBytes GUARDED_BY(cs_vSend){0};\n     std::deque<std::vector<unsigned char>> vSendMsg GUARDED_BY(cs_vSend);\n-    CCriticalSection cs_vSend;\n-    CCriticalSection cs_hSocket;\n-    CCriticalSection cs_vRecv;\n+    RecursiveMutex cs_vSend;\n+    RecursiveMutex cs_hSocket;\n+    RecursiveMutex cs_vRecv;\n \n-    CCriticalSection cs_vProcessMsg;\n+    RecursiveMutex cs_vProcessMsg;\n     std::list<CNetMessage> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n     size_t nProcessQueueSize{0};\n \n-    CCriticalSection cs_sendProcessing;\n+    RecursiveMutex cs_sendProcessing;\n \n     std::deque<CInv> vRecvGetData;\n     uint64_t nRecvBytes GUARDED_BY(cs_vRecv){0};\n@@ -787,19 +787,19 @@ class CNode\n     // There is no final sorting before sending, as they are always sent immediately\n     // and in the order requested.\n     std::vector<uint256> vInventoryBlockToSend GUARDED_BY(cs_inventory);\n-    CCriticalSection cs_inventory;\n+    RecursiveMutex cs_inventory;\n \n     struct TxRelay {\n         TxRelay() { pfilter = MakeUnique<CBloomFilter>(); }\n-        mutable CCriticalSection cs_filter;\n+        mutable RecursiveMutex cs_filter;\n         // We use fRelayTxes for two purposes -\n         // a) it allows us to not relay tx invs before receiving the peer's version message\n         // b) the peer may tell us in its version message that we should not relay tx invs\n         //    unless it loads a bloom filter.\n         bool fRelayTxes GUARDED_BY(cs_filter){false};\n         std::unique_ptr<CBloomFilter> pfilter PT_GUARDED_BY(cs_filter) GUARDED_BY(cs_filter);\n \n-        mutable CCriticalSection cs_tx_inventory;\n+        mutable RecursiveMutex cs_tx_inventory;\n         CRollingBloomFilter filterInventoryKnown GUARDED_BY(cs_tx_inventory){50000, 0.000001};\n         // Set of transaction ids we still have to announce.\n         // They are sorted by the mempool before relay, so the order is not important.\n@@ -810,7 +810,7 @@ class CNode\n         std::atomic<std::chrono::seconds> m_last_mempool_req{std::chrono::seconds{0}};\n         std::chrono::microseconds nNextInvSend{0};\n \n-        CCriticalSection cs_feeFilter;\n+        RecursiveMutex cs_feeFilter;\n         // Minimum fee rate with which to filter inv's to this node\n         CAmount minFeeFilter GUARDED_BY(cs_feeFilter){0};\n         CAmount lastSentFeeFilter{0};\n@@ -872,12 +872,12 @@ class CNode\n     NetPermissionFlags m_permissionFlags{ PF_NONE };\n     std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n \n-    mutable CCriticalSection cs_addrName;\n+    mutable RecursiveMutex cs_addrName;\n     std::string addrName GUARDED_BY(cs_addrName);\n \n     // Our address, as reported by the peer\n     CService addrLocal GUARDED_BY(cs_addrLocal);\n-    mutable CCriticalSection cs_addrLocal;\n+    mutable RecursiveMutex cs_addrLocal;\n public:\n \n     NodeId GetId() const {"
      },
      {
        "sha": "22fa5ee73b4cfd8a626bea5bbdea46b9d0423bae",
        "filename": "src/net_permissions.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -71,7 +71,7 @@ bool NetWhitebindPermissions::TryParse(const std::string str, NetWhitebindPermis\n \n     const std::string strBind = str.substr(offset);\n     CService addrBind;\n-    if (!Lookup(strBind.c_str(), addrBind, 0, false)) {\n+    if (!Lookup(strBind, addrBind, 0, false)) {\n         error = ResolveErrMsg(\"whitebind\", strBind);\n         return false;\n     }\n@@ -94,7 +94,7 @@ bool NetWhitelistPermissions::TryParse(const std::string str, NetWhitelistPermis\n \n     const std::string net = str.substr(offset);\n     CSubNet subnet;\n-    LookupSubNet(net.c_str(), subnet);\n+    LookupSubNet(net, subnet);\n     if (!subnet.IsValid()) {\n         error = strprintf(_(\"Invalid netmask specified in -whitelist: '%s'\").translated, net);\n         return false;"
      },
      {
        "sha": "1e065da07ddddf280dc527819259ccfe1d330c86",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -90,7 +90,7 @@ struct COrphanTx {\n     int64_t nTimeExpire;\n     size_t list_pos;\n };\n-CCriticalSection g_cs_orphans;\n+RecursiveMutex g_cs_orphans;\n std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n \n void EraseOrphansFor(NodeId peer);\n@@ -990,7 +990,7 @@ static bool TxRelayMayResultInDisconnect(const TxValidationState& state) {\n /**\n  * Potentially ban a node based on the contents of a BlockValidationState object\n  *\n- * @param[in] via_compact_block: this bool is passed in because net_processing should\n+ * @param[in] via_compact_block this bool is passed in because net_processing should\n  * punish peers differently depending on whether the data was provided in a compact\n  * block message or not. If the compact block had a valid header, but contained invalid\n  * txs, the peer should not be punished. See BIP 152.\n@@ -1162,7 +1162,7 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n }\n \n // All of the following cache a recent block, and are protected by cs_most_recent_block\n-static CCriticalSection cs_most_recent_block;\n+static RecursiveMutex cs_most_recent_block;\n static std::shared_ptr<const CBlock> most_recent_block GUARDED_BY(cs_most_recent_block);\n static std::shared_ptr<const CBlockHeaderAndShortTxIDs> most_recent_compact_block GUARDED_BY(cs_most_recent_block);\n static uint256 most_recent_block_hash GUARDED_BY(cs_most_recent_block);"
      },
      {
        "sha": "2ceadedd9939441be6ef7d65fb04a97ea41f6951",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -11,7 +11,7 @@\n #include <consensus/params.h>\n #include <sync.h>\n \n-extern CCriticalSection cs_main;\n+extern RecursiveMutex cs_main;\n \n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;"
      },
      {
        "sha": "a70179cb16ea91bb5a9cc915378193395301939e",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 32,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,14 +1,15 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <netbase.h>\n \n #include <sync.h>\n #include <tinyformat.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/string.h>\n+#include <util/system.h>\n \n #include <atomic>\n \n@@ -27,7 +28,7 @@\n #endif\n \n // Settings\n-static CCriticalSection cs_proxyInfos;\n+static RecursiveMutex cs_proxyInfos;\n static proxyType proxyInfo[NET_MAX] GUARDED_BY(cs_proxyInfos);\n static proxyType nameProxy GUARDED_BY(cs_proxyInfos);\n int nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n@@ -59,10 +60,14 @@ std::string GetNetworkName(enum Network net) {\n     }\n }\n \n-bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n+bool static LookupIntern(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n {\n     vIP.clear();\n \n+    if (!ValidAsCString(name)) {\n+        return false;\n+    }\n+\n     {\n         CNetAddr addr;\n         // From our perspective, onion addresses are not hostnames but rather\n@@ -71,7 +76,7 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n         // getaddrinfo to decode them and it wouldn't make sense to resolve\n         // them, we return a network address representing it instead. See\n         // CNetAddr::SetSpecial(const std::string&) for more details.\n-        if (addr.SetSpecial(std::string(pszName))) {\n+        if (addr.SetSpecial(name)) {\n             vIP.push_back(addr);\n             return true;\n         }\n@@ -93,7 +98,7 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n     // hostname lookups.\n     aiHint.ai_flags = fAllowLookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n     struct addrinfo *aiRes = nullptr;\n-    int nErr = getaddrinfo(pszName, nullptr, &aiHint, &aiRes);\n+    int nErr = getaddrinfo(name.c_str(), nullptr, &aiHint, &aiRes);\n     if (nErr)\n         return false;\n \n@@ -131,7 +136,7 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n /**\n  * Resolve a host string to its corresponding network addresses.\n  *\n- * @param pszName The string representing a host. Could be a name or a numerical\n+ * @param name    The string representing a host. Could be a name or a numerical\n  *                IP address (IPv6 addresses in their bracketed form are\n  *                allowed).\n  * @param[out] vIP The resulting network addresses to which the specified host\n@@ -143,28 +148,34 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n  * @see Lookup(const char *, std::vector<CService>&, int, bool, unsigned int)\n  *      for additional parameter descriptions.\n  */\n-bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n+bool LookupHost(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n {\n-    std::string strHost(pszName);\n+    if (!ValidAsCString(name)) {\n+        return false;\n+    }\n+    std::string strHost = name;\n     if (strHost.empty())\n         return false;\n     if (strHost.front() == '[' && strHost.back() == ']') {\n         strHost = strHost.substr(1, strHost.size() - 2);\n     }\n \n-    return LookupIntern(strHost.c_str(), vIP, nMaxSolutions, fAllowLookup);\n+    return LookupIntern(strHost, vIP, nMaxSolutions, fAllowLookup);\n }\n \n  /**\n  * Resolve a host string to its first corresponding network address.\n  *\n- * @see LookupHost(const char *, std::vector<CNetAddr>&, unsigned int, bool) for\n+ * @see LookupHost(const std::string&, std::vector<CNetAddr>&, unsigned int, bool) for\n  *      additional parameter descriptions.\n  */\n-bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup)\n+bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup)\n {\n+    if (!ValidAsCString(name)) {\n+        return false;\n+    }\n     std::vector<CNetAddr> vIP;\n-    LookupHost(pszName, vIP, 1, fAllowLookup);\n+    LookupHost(name, vIP, 1, fAllowLookup);\n     if(vIP.empty())\n         return false;\n     addr = vIP.front();\n@@ -174,7 +185,7 @@ bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup)\n /**\n  * Resolve a service string to its corresponding service.\n  *\n- * @param pszName The string representing a service. Could be a name or a\n+ * @param name    The string representing a service. Could be a name or a\n  *                numerical IP address (IPv6 addresses should be in their\n  *                disambiguated bracketed form), optionally followed by a port\n  *                number. (e.g. example.com:8333 or\n@@ -191,16 +202,17 @@ bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup)\n  * @returns Whether or not the service string successfully resolved to any\n  *          resulting services.\n  */\n-bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)\n+bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)\n {\n-    if (pszName[0] == 0)\n+    if (name.empty() || !ValidAsCString(name)) {\n         return false;\n+    }\n     int port = portDefault;\n     std::string hostname;\n-    SplitHostPort(std::string(pszName), port, hostname);\n+    SplitHostPort(name, port, hostname);\n \n     std::vector<CNetAddr> vIP;\n-    bool fRet = LookupIntern(hostname.c_str(), vIP, nMaxSolutions, fAllowLookup);\n+    bool fRet = LookupIntern(hostname, vIP, nMaxSolutions, fAllowLookup);\n     if (!fRet)\n         return false;\n     vAddr.resize(vIP.size());\n@@ -215,10 +227,13 @@ bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault,\n  * @see Lookup(const char *, std::vector<CService>&, int, bool, unsigned int)\n  *      for additional parameter descriptions.\n  */\n-bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup)\n+bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllowLookup)\n {\n+    if (!ValidAsCString(name)) {\n+        return false;\n+    }\n     std::vector<CService> vService;\n-    bool fRet = Lookup(pszName, vService, portDefault, fAllowLookup, 1);\n+    bool fRet = Lookup(name, vService, portDefault, fAllowLookup, 1);\n     if (!fRet)\n         return false;\n     addr = vService[0];\n@@ -235,12 +250,15 @@ bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLoo\n  * @see Lookup(const char *, CService&, int, bool) for additional parameter\n  *      descriptions.\n  */\n-CService LookupNumeric(const char *pszName, int portDefault)\n+CService LookupNumeric(const std::string& name, int portDefault)\n {\n+    if (!ValidAsCString(name)) {\n+        return {};\n+    }\n     CService addr;\n     // \"1.2:345\" will fail to resolve the ip, but will still set the port.\n     // If the ip fails to resolve, re-init the result.\n-    if(!Lookup(pszName, addr, portDefault, false))\n+    if(!Lookup(name, addr, portDefault, false))\n         addr = CService();\n     return addr;\n }\n@@ -763,17 +781,16 @@ bool IsProxy(const CNetAddr &addr) {\n  * @param hSocket The socket on which to connect to the SOCKS5 proxy.\n  * @param nTimeout Wait this many milliseconds for the connection to the SOCKS5\n  *                 proxy to be established.\n- * @param outProxyConnectionFailed[out] Whether or not the connection to the\n+ * @param[out] outProxyConnectionFailed Whether or not the connection to the\n  *                                      SOCKS5 proxy failed.\n  *\n  * @returns Whether or not the operation succeeded.\n  */\n-bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocket, int nTimeout, bool *outProxyConnectionFailed)\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocket, int nTimeout, bool& outProxyConnectionFailed)\n {\n     // first connect to proxy server\n     if (!ConnectSocketDirectly(proxy.proxy, hSocket, nTimeout, true)) {\n-        if (outProxyConnectionFailed)\n-            *outProxyConnectionFailed = true;\n+        outProxyConnectionFailed = true;\n         return false;\n     }\n     // do socks negotiation\n@@ -796,23 +813,25 @@ bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int\n  * Parse and resolve a specified subnet string into the appropriate internal\n  * representation.\n  *\n- * @param pszName A string representation of a subnet of the form `network\n+ * @param strSubnet A string representation of a subnet of the form `network\n  *                address [ \"/\", ( CIDR-style suffix | netmask ) ]`(e.g.\n  *                `2001:db8::/32`, `192.0.2.0/255.255.255.0`, or `8.8.8.8`).\n  * @param ret The resulting internal representation of a subnet.\n  *\n  * @returns Whether the operation succeeded or not.\n  */\n-bool LookupSubNet(const char* pszName, CSubNet& ret)\n+bool LookupSubNet(const std::string& strSubnet, CSubNet& ret)\n {\n-    std::string strSubnet(pszName);\n+    if (!ValidAsCString(strSubnet)) {\n+        return false;\n+    }\n     size_t slash = strSubnet.find_last_of('/');\n     std::vector<CNetAddr> vIP;\n \n     std::string strAddress = strSubnet.substr(0, slash);\n-    // TODO: Use LookupHost(const char *, CNetAddr&, bool) instead to just get\n+    // TODO: Use LookupHost(const std::string&, CNetAddr&, bool) instead to just get\n     //       one CNetAddr.\n-    if (LookupHost(strAddress.c_str(), vIP, 1, false))\n+    if (LookupHost(strAddress, vIP, 1, false))\n     {\n         CNetAddr network = vIP[0];\n         if (slash != strSubnet.npos)\n@@ -827,7 +846,7 @@ bool LookupSubNet(const char* pszName, CSubNet& ret)\n             else // If not a valid number, try full netmask syntax\n             {\n                 // Never allow lookup for netmask\n-                if (LookupHost(strNetmask.c_str(), vIP, 1, false)) {\n+                if (LookupHost(strNetmask, vIP, 1, false)) {\n                     ret = CSubNet(network, vIP[0]);\n                     return ret.IsValid();\n                 }"
      },
      {
        "sha": "ac4cd97673aa364b609f2fa51d1cbd71bcf532e7",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -45,15 +45,15 @@ bool IsProxy(const CNetAddr &addr);\n bool SetNameProxy(const proxyType &addrProxy);\n bool HaveNameProxy();\n bool GetNameProxy(proxyType &nameProxyOut);\n-bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup);\n-bool LookupHost(const char *pszName, CNetAddr& addr, bool fAllowLookup);\n-bool Lookup(const char *pszName, CService& addr, int portDefault, bool fAllowLookup);\n-bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n-CService LookupNumeric(const char *pszName, int portDefault = 0);\n-bool LookupSubNet(const char *pszName, CSubNet& subnet);\n+bool LookupHost(const std::string& name, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup);\n+bool LookupHost(const std::string& name, CNetAddr& addr, bool fAllowLookup);\n+bool Lookup(const std::string& name, CService& addr, int portDefault, bool fAllowLookup);\n+bool Lookup(const std::string& name, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions);\n+CService LookupNumeric(const std::string& name, int portDefault = 0);\n+bool LookupSubNet(const std::string& strSubnet, CSubNet& subnet);\n SOCKET CreateSocket(const CService &addrConnect);\n bool ConnectSocketDirectly(const CService &addrConnect, const SOCKET& hSocketRet, int nTimeout, bool manual_connection);\n-bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocketRet, int nTimeout, bool *outProxyConnectionFailed);\n+bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDest, int port, const SOCKET& hSocketRet, int nTimeout, bool& outProxyConnectionFailed);\n /** Return readable error string for a network error code */\n std::string NetworkErrorString(int err);\n /** Close socket and set hSocket to INVALID_SOCKET */"
      },
      {
        "sha": "a85dfb8aced0e83fcc30d4161cdbdd901fa5de83",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -22,10 +22,10 @@ struct NodeContext;\n  *\n  * @param[in]  node reference to node context\n  * @param[in]  tx the transaction to broadcast\n- * @param[out] &err_string reference to std::string to fill with error string if available\n+ * @param[out] err_string reference to std::string to fill with error string if available\n  * @param[in]  max_tx_fee reject txs with fees higher than this (if 0, accept any fee)\n  * @param[in]  relay flag if both mempool insertion and p2p relay are requested\n- * @param[in]  wait_callback, wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n+ * @param[in]  wait_callback wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n  * return error\n  */\n NODISCARD TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);"
      },
      {
        "sha": "6ee6e0d5478955c7102fb876f47cb9aba3d680d9",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #ifndef BITCOIN_POLICY_FEES_H\n@@ -223,7 +223,7 @@ class CBlockPolicyEstimator\n     unsigned int HighestTargetTracked(FeeEstimateHorizon horizon) const;\n \n private:\n-    mutable CCriticalSection m_cs_fee_estimator;\n+    mutable RecursiveMutex m_cs_fee_estimator;\n \n     unsigned int nBestSeenHeight GUARDED_BY(m_cs_fee_estimator);\n     unsigned int firstRecordedHeight GUARDED_BY(m_cs_fee_estimator);"
      },
      {
        "sha": "dfba2619617600083d89aacb1491ac6e78f4572e",
        "filename": "src/psbt.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/psbt.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/psbt.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -584,15 +584,15 @@ void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransactio\n /**\n  * Finalizes a PSBT if possible, combining partial signatures.\n  *\n- * @param[in,out] &psbtx reference to PartiallySignedTransaction to finalize\n+ * @param[in,out] psbtx PartiallySignedTransaction to finalize\n  * return True if the PSBT is now complete, false otherwise\n  */\n bool FinalizePSBT(PartiallySignedTransaction& psbtx);\n \n /**\n  * Finalizes a PSBT if possible, and extracts it to a CMutableTransaction if it could be finalized.\n  *\n- * @param[in]  &psbtx reference to PartiallySignedTransaction\n+ * @param[in]  psbtx PartiallySignedTransaction\n  * @param[out] result CMutableTransaction representing the complete transaction, if successful\n  * @return True if we successfully extracted the transaction, false otherwise\n  */\n@@ -601,7 +601,7 @@ bool FinalizeAndExtractPSBT(PartiallySignedTransaction& psbtx, CMutableTransacti\n /**\n  * Combines PSBTs with the same underlying transaction, resulting in a single PSBT with all partial signatures from each input.\n  *\n- * @param[out] &out   the combined PSBT, if successful\n+ * @param[out] out   the combined PSBT, if successful\n  * @param[in]  psbtxs the PSBTs to combine\n  * @return error (OK if we successfully combined the transactions, other error if they were not compatible)\n  */"
      },
      {
        "sha": "4313d6ee7f8d9f78ba5afa4fcd362a8e6b16da6e",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -281,8 +281,11 @@ void BitcoinApplication::parameterSetup()\n     m_node.initParameterInteraction();\n }\n \n-void BitcoinApplication::SetPrune(bool prune, bool force) {\n-     optionsModel->SetPrune(prune, force);\n+void BitcoinApplication::InitializePruneSetting(bool prune)\n+{\n+    // If prune is set, intentionally override existing prune size with\n+    // the default size since this is called when choosing a new datadir.\n+    optionsModel->SetPruneTargetGB(prune ? DEFAULT_PRUNE_TARGET_GB : 0, true);\n }\n \n void BitcoinApplication::requestInitialize()\n@@ -556,12 +559,13 @@ int GuiMain(int argc, char* argv[])\n     qInstallMessageHandler(DebugMessageHandler);\n     // Allow parameter interaction before we create the options model\n     app.parameterSetup();\n+    GUIUtil::LogQtInfo();\n     // Load GUI settings from QSettings\n     app.createOptionsModel(gArgs.GetBoolArg(\"-resetguisettings\", false));\n \n     if (did_show_intro) {\n         // Store intro dialog settings other than datadir (network specific)\n-        app.SetPrune(prune, true);\n+        app.InitializePruneSetting(prune);\n     }\n \n     if (gArgs.GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !gArgs.GetBoolArg(\"-min\", false))"
      },
      {
        "sha": "077a37fde59c7e81006668332f11c04455901ac0",
        "filename": "src/qt/bitcoin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -67,8 +67,8 @@ class BitcoinApplication: public QApplication\n     void parameterSetup();\n     /// Create options model\n     void createOptionsModel(bool resetSettings);\n-    /// Update prune value\n-    void SetPrune(bool prune, bool force = false);\n+    /// Initialize prune setting\n+    void InitializePruneSetting(bool prune);\n     /// Create main window\n     void createWindow(const NetworkStyle *networkStyle);\n     /// Create splash screen"
      },
      {
        "sha": "c781072e9bd8d5040af9be536ee537be9701f8c8",
        "filename": "src/qt/bitcoin_locale.qrc",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/bitcoin_locale.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/bitcoin_locale.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin_locale.qrc?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -11,6 +11,7 @@\n         <file alias=\"de_DE\">locale/bitcoin_de_DE.qm</file>\n         <file alias=\"el\">locale/bitcoin_el.qm</file>\n         <file alias=\"el_GR\">locale/bitcoin_el_GR.qm</file>\n+        <file alias=\"en\">locale/bitcoin_en.qm</file>\n         <file alias=\"en_AU\">locale/bitcoin_en_AU.qm</file>\n         <file alias=\"en_GB\">locale/bitcoin_en_GB.qm</file>\n         <file alias=\"eo\">locale/bitcoin_eo.qm</file>"
      },
      {
        "sha": "f22d33bf0aab1155e7d6f9cc5f57675b54e4c417",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -634,10 +634,10 @@ void BitcoinGUI::setWalletController(WalletController* wallet_controller)\n void BitcoinGUI::addWallet(WalletModel* walletModel)\n {\n     if (!walletFrame) return;\n+    if (!walletFrame->addWallet(walletModel)) return;\n     const QString display_name = walletModel->getDisplayName();\n     setWalletActionsEnabled(true);\n     rpcConsole->addWallet(walletModel);\n-    walletFrame->addWallet(walletModel);\n     m_wallet_selector->addItem(display_name, QVariant::fromValue(walletModel));\n     if (m_wallet_selector->count() == 2) {\n         m_wallet_selector_label_action->setVisible(true);\n@@ -659,6 +659,8 @@ void BitcoinGUI::removeWallet(WalletModel* walletModel)\n     rpcConsole->removeWallet(walletModel);\n     walletFrame->removeWallet(walletModel);\n     updateWindowTitle();\n+    labelWalletHDStatusIcon->hide();\n+    labelWalletEncryptionIcon->hide();\n }\n \n void BitcoinGUI::setCurrentWallet(WalletModel* wallet_model)\n@@ -1209,7 +1211,7 @@ void BitcoinGUI::setHDStatus(bool privkeyDisabled, int hdEnabled)\n {\n     labelWalletHDStatusIcon->setPixmap(platformStyle->SingleColorIcon(privkeyDisabled ? \":/icons/eye\" : hdEnabled ? \":/icons/hd_enabled\" : \":/icons/hd_disabled\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n     labelWalletHDStatusIcon->setToolTip(privkeyDisabled ? tr(\"Private key <b>disabled</b>\") : hdEnabled ? tr(\"HD key generation is <b>enabled</b>\") : tr(\"HD key generation is <b>disabled</b>\"));\n-\n+    labelWalletHDStatusIcon->show();\n     // eventually disable the QLabel to set its opacity to 50%\n     labelWalletHDStatusIcon->setEnabled(hdEnabled);\n }"
      },
      {
        "sha": "4c8a88996520c0b5e87ca68c32dcd402bbb55d40",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "39dc9a5e9e41312a5d7cc94efe6fda3857eec41c",
        "filename": "src/qt/coincontroltreewidget.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/coincontroltreewidget.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/coincontroltreewidget.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroltreewidget.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e443529335f5ea9da98e679f70ef0c61b600e199",
        "filename": "src/qt/csvmodelwriter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/csvmodelwriter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/csvmodelwriter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/csvmodelwriter.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "9457ea37d6cf7938715add44d4198544588e2d8e",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -51,4 +51,7 @@ static const int TOOLTIP_WRAP_THRESHOLD = 80;\n /* One gigabyte (GB) in bytes */\n static constexpr uint64_t GB_BYTES{1000000000};\n \n+// Default prune target displayed in GUI.\n+static constexpr int DEFAULT_PRUNE_TARGET_GB{2};\n+\n #endif // BITCOIN_QT_GUICONSTANTS_H"
      },
      {
        "sha": "911322092c90518c1fbe3ceeb5c6564b47ebfc24",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -44,14 +44,20 @@\n #include <QFont>\n #include <QFontDatabase>\n #include <QFontMetrics>\n+#include <QGuiApplication>\n #include <QKeyEvent>\n #include <QLineEdit>\n+#include <QList>\n #include <QMouseEvent>\n #include <QProgressDialog>\n+#include <QScreen>\n #include <QSettings>\n+#include <QSize>\n+#include <QString>\n #include <QTextDocument> // for Qt::mightBeRichText\n #include <QThread>\n #include <QUrlQuery>\n+#include <QtGlobal>\n \n #if defined(Q_OS_MAC)\n \n@@ -879,4 +885,23 @@ int TextWidth(const QFontMetrics& fm, const QString& text)\n #endif\n }\n \n+void LogQtInfo()\n+{\n+#ifdef QT_STATIC\n+    const std::string qt_link{\"static\"};\n+#else\n+    const std::string qt_link{\"dynamic\"};\n+#endif\n+#ifdef QT_STATICPLUGIN\n+    const std::string plugin_link{\"static\"};\n+#else\n+    const std::string plugin_link{\"dynamic\"};\n+#endif\n+    LogPrintf(\"Qt %s (%s), plugin=%s (%s)\\n\", qVersion(), qt_link, QGuiApplication::platformName().toStdString(), plugin_link);\n+    LogPrintf(\"System: %s, %s\\n\", QSysInfo::prettyProductName().toStdString(), QSysInfo::buildAbi().toStdString());\n+    for (const QScreen* s : QGuiApplication::screens()) {\n+        LogPrintf(\"Screen: %s %dx%d, pixel ratio=%.1f\\n\", s->name().toStdString(), s->size().width(), s->size().height(), s->devicePixelRatio());\n+    }\n+}\n+\n } // namespace GUIUtil"
      },
      {
        "sha": "05e73cc5f0cd3c51a10b2d20903e8ea911a57ecc",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -265,6 +265,11 @@ namespace GUIUtil\n      * In Qt 5.11 the QFontMetrics::horizontalAdvance() was introduced.\n      */\n     int TextWidth(const QFontMetrics& fm, const QString& text);\n+\n+    /**\n+     * Writes to debug.log short info about the used Qt and the host system.\n+     */\n+    void LogQtInfo();\n } // namespace GUIUtil\n \n #endif // BITCOIN_QT_GUIUTIL_H"
      },
      {
        "sha": "53f0c3a108c4cd47c2205ea2145d05c7440f99a9",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -135,7 +135,7 @@ Intro::Intro(QWidget *parent, uint64_t blockchain_size, uint64_t chain_state_siz\n         ui->prune->setChecked(true);\n         ui->prune->setEnabled(false);\n     }\n-    ui->prune->setText(tr(\"Discard blocks after verification, except most recent %1 GB (prune)\").arg(pruneTarget ? pruneTarget / 1000 : 2));\n+    ui->prune->setText(tr(\"Discard blocks after verification, except most recent %1 GB (prune)\").arg(pruneTarget ? pruneTarget / 1000 : DEFAULT_PRUNE_TARGET_GB));\n     requiredSpace = m_blockchain_size;\n     QString storageRequiresMsg = tr(\"At least %1 GB of data will be stored in this directory, and it will grow over time.\");\n     if (pruneTarget) {"
      },
      {
        "sha": "b16042e9464377d043a17872ee6045787fdbd10d",
        "filename": "src/qt/macnotificationhandler.mm",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/macnotificationhandler.mm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/macnotificationhandler.mm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macnotificationhandler.mm?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "6243a71c7d45836ce0575a07de70df7eebbc5c73",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -31,7 +31,7 @@ userClosed(false)\n     setVisible(false);\n     if (!enable_wallet) {\n         ui->infoText->setVisible(false);\n-        ui->infoTextStrong->setText(tr(\"Bitcoin Core is currently syncing.  It will download headers and blocks from peers and validate them until reaching the tip of the block chain.\"));\n+        ui->infoTextStrong->setText(tr(\"%1 is currently syncing.  It will download headers and blocks from peers and validate them until reaching the tip of the block chain.\").arg(PACKAGE_NAME));\n     }\n }\n "
      },
      {
        "sha": "8ee6c947e6e4a4c113d12396856d2a468eef0241",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -375,7 +375,7 @@ QValidator::State ProxyAddressValidator::validate(QString &input, int &pos) cons\n {\n     Q_UNUSED(pos);\n     // Validate the proxy\n-    CService serv(LookupNumeric(input.toStdString().c_str(), DEFAULT_GUI_PROXY_PORT));\n+    CService serv(LookupNumeric(input.toStdString(), DEFAULT_GUI_PROXY_PORT));\n     proxyType addrProxy = proxyType(serv, true);\n     if (addrProxy.IsValid())\n         return QValidator::Acceptable;"
      },
      {
        "sha": "b4b5b323115a4260546657b05779bc323dc37419",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -91,8 +91,8 @@ void OptionsModel::Init(bool resetSettings)\n     if (!settings.contains(\"bPrune\"))\n         settings.setValue(\"bPrune\", false);\n     if (!settings.contains(\"nPruneSize\"))\n-        settings.setValue(\"nPruneSize\", 2);\n-    SetPrune(settings.value(\"bPrune\").toBool());\n+        settings.setValue(\"nPruneSize\", DEFAULT_PRUNE_TARGET_GB);\n+    SetPruneEnabled(settings.value(\"bPrune\").toBool());\n \n     if (!settings.contains(\"nDatabaseCache\"))\n         settings.setValue(\"nDatabaseCache\", (qint64)nDefaultDbCache);\n@@ -236,7 +236,7 @@ static const QString GetDefaultProxyAddress()\n     return QString(\"%1:%2\").arg(DEFAULT_GUI_PROXY_HOST).arg(DEFAULT_GUI_PROXY_PORT);\n }\n \n-void OptionsModel::SetPrune(bool prune, bool force)\n+void OptionsModel::SetPruneEnabled(bool prune, bool force)\n {\n     QSettings settings;\n     settings.setValue(\"bPrune\", prune);\n@@ -252,6 +252,16 @@ void OptionsModel::SetPrune(bool prune, bool force)\n     }\n }\n \n+void OptionsModel::SetPruneTargetGB(int prune_target_gb, bool force)\n+{\n+    const bool prune = prune_target_gb > 0;\n+    if (prune) {\n+        QSettings settings;\n+        settings.setValue(\"nPruneSize\", prune_target_gb);\n+    }\n+    SetPruneEnabled(prune, force);\n+}\n+\n // read QSettings values and return them\n QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {"
      },
      {
        "sha": "524fe268b97f62966c78bb0725e230c9ad278ff8",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -73,7 +73,8 @@ class OptionsModel : public QAbstractListModel\n     const QString& getOverriddenByCommandLine() { return strOverriddenByCommandLine; }\n \n     /* Explicit setters */\n-    void SetPrune(bool prune, bool force = false);\n+    void SetPruneEnabled(bool prune, bool force = false);\n+    void SetPruneTargetGB(int prune_target_gb, bool force = false);\n \n     /* Restart flag helper */\n     void setRestartRequired(bool fRequired);"
      },
      {
        "sha": "5cca515079cb68114dc28b5ce2aee93bf6d3e98a",
        "filename": "src/qt/qvaluecombobox.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/qvaluecombobox.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/qvaluecombobox.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvaluecombobox.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e1f783b0e5846db5d90ed194b2cf080d3900a13d",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -905,12 +905,8 @@ void RPCConsole::on_lineEdit_returnPressed()\n \n         cmdBeforeBrowsing = QString();\n \n-        WalletModel* wallet_model{nullptr};\n #ifdef ENABLE_WALLET\n-        const int wallet_index = ui->WalletSelector->currentIndex();\n-        if (wallet_index > 0) {\n-            wallet_model = ui->WalletSelector->itemData(wallet_index).value<WalletModel*>();\n-        }\n+        WalletModel* wallet_model = ui->WalletSelector->currentData().value<WalletModel*>();\n \n         if (m_last_wallet_model != wallet_model) {\n             if (wallet_model) {\n@@ -1240,7 +1236,7 @@ void RPCConsole::unbanSelectedNode()\n         QString strNode = nodes.at(i).data().toString();\n         CSubNet possibleSubnet;\n \n-        LookupSubNet(strNode.toStdString().c_str(), possibleSubnet);\n+        LookupSubNet(strNode.toStdString(), possibleSubnet);\n         if (possibleSubnet.IsValid() && m_node.unban(possibleSubnet))\n         {\n             clientModel->getBanTableModel()->refresh();"
      },
      {
        "sha": "176aa7902b50371694738cf62b146cb6f15c1967",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include <qt/test/addressbooktests.h>\n #include <qt/test/util.h>\n #include <test/util/setup_common.h>"
      },
      {
        "sha": "5de89c75923767b4380d6bc9f63f29403e2e8518",
        "filename": "src/qt/test/addressbooktests.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/addressbooktests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/addressbooktests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_QT_TEST_ADDRESSBOOKTESTS_H\n #define BITCOIN_QT_TEST_ADDRESSBOOKTESTS_H\n "
      },
      {
        "sha": "d16c9fe487d6880e7039136eb09c563d4dbdfc06",
        "filename": "src/qt/test/apptests.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/apptests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/apptests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/apptests.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018-2017 The Bitcoin Core developers\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "aefdcd27163a9befc578e321d4d35ec422f60a7c",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -37,6 +37,8 @@ Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin);\n #endif\n #endif\n \n+const std::function<void(const std::string&)> G_TEST_LOG_FUN{};\n+\n // This is all you need to run all the tests\n int main(int argc, char *argv[])\n {"
      },
      {
        "sha": "e09f0ad77dc7455a607344a567e6a6158435ef62",
        "filename": "src/qt/test/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/util.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include <QApplication>\n #include <QMessageBox>\n #include <QPushButton>"
      },
      {
        "sha": "763847606ae75e757cb1263a42bae6b8737ce704",
        "filename": "src/qt/test/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/util.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_QT_TEST_UTIL_H\n #define BITCOIN_QT_TEST_UTIL_H\n "
      },
      {
        "sha": "b4cd7f6baca5b8d13bbb61bcac45cda8f7c48c2e",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2015-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include <qt/test/wallettests.h>\n #include <qt/test/util.h>\n "
      },
      {
        "sha": "8ee40bf07f1c60488c9b915df44c8a56976b8d13",
        "filename": "src/qt/test/wallettests.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/wallettests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/test/wallettests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_QT_TEST_WALLETTESTS_H\n #define BITCOIN_QT_TEST_WALLETTESTS_H\n "
      },
      {
        "sha": "af5890ba240d139aa67b6e75afc4897dca5e7a7b",
        "filename": "src/qt/trafficgraphwidget.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/trafficgraphwidget.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/trafficgraphwidget.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "74e34cde878f3ed7fe57f702c0fb8f7446bfbb73",
        "filename": "src/qt/transactiondescdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/transactiondescdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/transactiondescdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondescdialog.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2018 The Bitcoin Core developers\n+// Copyright (c) 2011-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "27a5a5ac647f3cdcb2ff6b1cfffdd640947dc3ce",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -39,11 +39,11 @@ void WalletFrame::setClientModel(ClientModel *_clientModel)\n     this->clientModel = _clientModel;\n }\n \n-void WalletFrame::addWallet(WalletModel *walletModel)\n+bool WalletFrame::addWallet(WalletModel *walletModel)\n {\n-    if (!gui || !clientModel || !walletModel) return;\n+    if (!gui || !clientModel || !walletModel) return false;\n \n-    if (mapWalletViews.count(walletModel) > 0) return;\n+    if (mapWalletViews.count(walletModel) > 0) return false;\n \n     WalletView *walletView = new WalletView(platformStyle, this);\n     walletView->setBitcoinGUI(gui);\n@@ -62,6 +62,8 @@ void WalletFrame::addWallet(WalletModel *walletModel)\n     mapWalletViews[walletModel] = walletView;\n \n     connect(walletView, &WalletView::outOfSyncWarningClicked, this, &WalletFrame::outOfSyncWarningClicked);\n+\n+    return true;\n }\n \n void WalletFrame::setCurrentWallet(WalletModel* wallet_model)"
      },
      {
        "sha": "20fad08b0ef8e51bbcbddc4d74c208e987654ed2",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -36,7 +36,7 @@ class WalletFrame : public QFrame\n \n     void setClientModel(ClientModel *clientModel);\n \n-    void addWallet(WalletModel *walletModel);\n+    bool addWallet(WalletModel *walletModel);\n     void setCurrentWallet(WalletModel* wallet_model);\n     void removeWallet(WalletModel* wallet_model);\n     void removeAllWallets();"
      },
      {
        "sha": "6c3a06f3a2c15dfa519eb1c6191aa142ad8fcdc9",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 1,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -10,6 +10,7 @@\n \n #include <qt/addresstablemodel.h>\n #include <qt/guiconstants.h>\n+#include <qt/guiutil.h>\n #include <qt/optionsmodel.h>\n #include <qt/paymentserver.h>\n #include <qt/recentrequeststablemodel.h>\n@@ -487,8 +488,10 @@ bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n          return false;\n     }\n \n+    const bool create_psbt = privateKeysDisabled();\n+\n     // allow a user based fee verification\n-    QString questionString = tr(\"Do you want to increase the fee?\");\n+    QString questionString = create_psbt ? tr(\"Do you want to draft a transaction with fee increase?\") : tr(\"Do you want to increase the fee?\");\n     questionString.append(\"<br />\");\n     questionString.append(\"<table style=\\\"text-align: left;\\\">\");\n     questionString.append(\"<tr><td>\");\n@@ -519,6 +522,23 @@ bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n         return false;\n     }\n \n+    // Short-circuit if we are returning a bumped transaction PSBT to clipboard\n+    if (create_psbt) {\n+        PartiallySignedTransaction psbtx(mtx);\n+        bool complete = false;\n+        const TransactionError err = wallet().fillPSBT(psbtx, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+        if (err != TransactionError::OK || complete) {\n+            QMessageBox::critical(nullptr, tr(\"Fee bump error\"), tr(\"Can't draft transaction.\"));\n+            return false;\n+        }\n+        // Serialize the PSBT\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        GUIUtil::setClipboard(EncodeBase64(ssTx.str()).c_str());\n+        Q_EMIT message(tr(\"PSBT copied\"), \"Copied to clipboard\", CClientUIInterface::MSG_INFORMATION);\n+        return true;\n+    }\n+\n     // sign bumped transaction\n     if (!m_wallet->signBumpTransaction(mtx)) {\n         QMessageBox::critical(nullptr, tr(\"Fee bump error\"), tr(\"Can't sign transaction.\"));"
      },
      {
        "sha": "e5994b172be8e7643d8d63f57182c2a3332a6c06",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "e0c1976f1a7f7771c4736b151d4abb7f4e492c20",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -562,11 +562,11 @@ static UniValue setban(const JSONRPCRequest& request)\n \n     if (!isSubnet) {\n         CNetAddr resolved;\n-        LookupHost(request.params[0].get_str().c_str(), resolved, false);\n+        LookupHost(request.params[0].get_str(), resolved, false);\n         netAddr = resolved;\n     }\n     else\n-        LookupSubNet(request.params[0].get_str().c_str(), subNet);\n+        LookupSubNet(request.params[0].get_str(), subNet);\n \n     if (! (isSubnet ? subNet.IsValid() : netAddr.IsValid()) )\n         throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Invalid IP/Subnet\");"
      },
      {
        "sha": "4750fd64ed4080b7412d4b12ac83a39fa1f0ba06",
        "filename": "src/rpc/rawtransaction_util.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/rpc/rawtransaction_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/rpc/rawtransaction_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -28,7 +28,7 @@ void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n /**\n   * Parse a prevtxs UniValue array and get the map of coins from it\n   *\n-  * @param  prevTxs       Array of previous txns outputs that tx depends on but may not yet be in the block chain\n+  * @param  prevTxsUnival Array of previous txns outputs that tx depends on but may not yet be in the block chain\n   * @param  keystore      A pointer to the temporary keystore if there is one\n   * @param  coins         Map of unspent outputs - coins in mempool and current chain UTXO set, may be extended by previous txns outputs after call\n   */"
      },
      {
        "sha": "df8e687d823240eb5ea12e37a8f3b32072bfcb03",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -18,7 +18,7 @@\n #include <memory> // for unique_ptr\n #include <unordered_map>\n \n-static CCriticalSection cs_rpcWarmup;\n+static RecursiveMutex cs_rpcWarmup;\n static std::atomic<bool> g_rpc_running{false};\n static bool fRPCInWarmup GUARDED_BY(cs_rpcWarmup) = true;\n static std::string rpcWarmupStatus GUARDED_BY(cs_rpcWarmup) = \"RPC server started\";"
      },
      {
        "sha": "7080adf34c1d5dcdc03108672adffc8731fa6e2b",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2019 The Bitcoin Core developers\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -98,7 +98,7 @@ class SingleThreadedSchedulerClient {\n private:\n     CScheduler *m_pscheduler;\n \n-    CCriticalSection m_cs_callbacks_pending;\n+    RecursiveMutex m_cs_callbacks_pending;\n     std::list<std::function<void ()>> m_callbacks_pending GUARDED_BY(m_cs_callbacks_pending);\n     bool m_are_callbacks_running GUARDED_BY(m_cs_callbacks_pending) = false;\n "
      },
      {
        "sha": "a5a41d78dd617d0c4d92b9018402b2fe6ad0786c",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -47,28 +47,28 @@ struct Descriptor {\n \n     /** Expand a descriptor at a specified position.\n      *\n-     * @param[in] pos: The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n-     * @param[in] provider: The provider to query for private keys in case of hardened derivation.\n-     * @param[out] output_scripts: The expanded scriptPubKeys.\n-     * @param[out] out: Scripts and public keys necessary for solving the expanded scriptPubKeys (may be equal to `provider`).\n-     * @param[out] cache: Cache data necessary to evaluate the descriptor at this point without access to private keys.\n+     * @param[in] pos The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n+     * @param[in] provider The provider to query for private keys in case of hardened derivation.\n+     * @param[out] output_scripts The expanded scriptPubKeys.\n+     * @param[out] out Scripts and public keys necessary for solving the expanded scriptPubKeys (may be equal to `provider`).\n+     * @param[out] cache Cache data necessary to evaluate the descriptor at this point without access to private keys.\n      */\n     virtual bool Expand(int pos, const SigningProvider& provider, std::vector<CScript>& output_scripts, FlatSigningProvider& out, std::vector<unsigned char>* cache = nullptr) const = 0;\n \n     /** Expand a descriptor at a specified position using cached expansion data.\n      *\n-     * @param[in] pos: The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n-     * @param[in] cache: Cached expansion data.\n-     * @param[out] output_scripts: The expanded scriptPubKeys.\n-     * @param[out] out: Scripts and public keys necessary for solving the expanded scriptPubKeys (may be equal to `provider`).\n+     * @param[in] pos The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n+     * @param[in] cache Cached expansion data.\n+     * @param[out] output_scripts The expanded scriptPubKeys.\n+     * @param[out] out Scripts and public keys necessary for solving the expanded scriptPubKeys (may be equal to `provider`).\n      */\n     virtual bool ExpandFromCache(int pos, const std::vector<unsigned char>& cache, std::vector<CScript>& output_scripts, FlatSigningProvider& out) const = 0;\n \n     /** Expand the private key for a descriptor at a specified position, if possible.\n      *\n-     * @param[in] pos: The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n-     * @param[in] provider: The provider to query for the private keys.\n-     * @param[out] out: Any private keys available for the specified `pos`.\n+     * @param[in] pos The position at which to expand the descriptor. If IsRange() is false, this is ignored.\n+     * @param[in] provider The provider to query for the private keys.\n+     * @param[out] out Any private keys available for the specified `pos`.\n      */\n     virtual void ExpandPrivate(int pos, const SigningProvider& provider, FlatSigningProvider& out) const = 0;\n };"
      },
      {
        "sha": "6ad20480a7069d4b1919b1d4fba8cfc8fa1fe352",
        "filename": "src/script/signingprovider.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/script/signingprovider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/script/signingprovider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -72,7 +72,7 @@ class FillableSigningProvider : public SigningProvider\n     void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n public:\n-    mutable CCriticalSection cs_KeyStore;\n+    mutable RecursiveMutex cs_KeyStore;\n \n     virtual bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n     virtual bool AddKey(const CKey &key) { return AddKeyPubKey(key, key.GetPubKey()); }"
      },
      {
        "sha": "49a45f3eba68fd5a04e3cfd5c2eb1e94fc70aef8",
        "filename": "src/script/standard.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/script/standard.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/script/standard.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -80,9 +80,14 @@ struct PKHash : public uint160\n     using uint160::uint160;\n };\n \n+struct WitnessV0KeyHash;\n struct ScriptHash : public uint160\n {\n     ScriptHash() : uint160() {}\n+    // These don't do what you'd expect.\n+    // Use ScriptHash(GetScriptForDestination(...)) instead.\n+    explicit ScriptHash(const WitnessV0KeyHash& hash) = delete;\n+    explicit ScriptHash(const PKHash& hash) = delete;\n     explicit ScriptHash(const uint160& hash) : uint160(hash) {}\n     explicit ScriptHash(const CScript& script);\n     using uint160::uint160;"
      },
      {
        "sha": "56c324c527791950234629036d8329e4dcdbf309",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 36,
        "deletions": 17,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -442,26 +442,48 @@ I ReadVarInt(Stream& is)\n     }\n }\n \n-#define VARINT(obj, ...) WrapVarInt<__VA_ARGS__>(REF(obj))\n-#define COMPACTSIZE(obj) CCompactSize(REF(obj))\n-#define LIMITED_STRING(obj,n) LimitedString< n >(REF(obj))\n-\n-template<VarIntMode Mode, typename I>\n-class CVarInt\n+/** Simple wrapper class to serialize objects using a formatter; used by Using(). */\n+template<typename Formatter, typename T>\n+class Wrapper\n {\n+    static_assert(std::is_lvalue_reference<T>::value, \"Wrapper needs an lvalue reference type T\");\n protected:\n-    I &n;\n+    T m_object;\n public:\n-    explicit CVarInt(I& nIn) : n(nIn) { }\n+    explicit Wrapper(T obj) : m_object(obj) {}\n+    template<typename Stream> void Serialize(Stream &s) const { Formatter().Ser(s, m_object); }\n+    template<typename Stream> void Unserialize(Stream &s) { Formatter().Unser(s, m_object); }\n+};\n \n-    template<typename Stream>\n-    void Serialize(Stream &s) const {\n-        WriteVarInt<Stream,Mode,I>(s, n);\n+/** Cause serialization/deserialization of an object to be done using a specified formatter class.\n+ *\n+ * To use this, you need a class Formatter that has public functions Ser(stream, const object&) for\n+ * serialization, and Unser(stream, object&) for deserialization. Serialization routines (inside\n+ * READWRITE, or directly with << and >> operators), can then use Using<Formatter>(object).\n+ *\n+ * This works by constructing a Wrapper<Formatter, T>-wrapped version of object, where T is\n+ * const during serialization, and non-const during deserialization, which maintains const\n+ * correctness.\n+ */\n+template<typename Formatter, typename T>\n+static inline Wrapper<Formatter, T&> Using(T&& t) { return Wrapper<Formatter, T&>(t); }\n+\n+#define VARINT(obj, ...) Using<VarIntFormatter<__VA_ARGS__>>(obj)\n+#define COMPACTSIZE(obj) CCompactSize(REF(obj))\n+#define LIMITED_STRING(obj,n) LimitedString< n >(REF(obj))\n+\n+/** Serialization wrapper class for integers in VarInt format. */\n+template<VarIntMode Mode=VarIntMode::DEFAULT>\n+struct VarIntFormatter\n+{\n+    template<typename Stream, typename I> void Ser(Stream &s, I v)\n+    {\n+        WriteVarInt<Stream,Mode,typename std::remove_cv<I>::type>(s, v);\n     }\n \n-    template<typename Stream>\n-    void Unserialize(Stream& s) {\n-        n = ReadVarInt<Stream,Mode,I>(s);\n+    template<typename Stream, typename I> void Unser(Stream& s, I& v)\n+    {\n+        v = ReadVarInt<Stream,Mode,typename std::remove_cv<I>::type>(s);\n     }\n };\n \n@@ -546,9 +568,6 @@ class LimitedString\n     }\n };\n \n-template<VarIntMode Mode=VarIntMode::DEFAULT, typename I>\n-CVarInt<Mode, I> WrapVarInt(I& n) { return CVarInt<Mode, I>{n}; }\n-\n template<typename I>\n BigEndian<I> WrapBigEndian(I& n) { return BigEndian<I>(n); }\n "
      },
      {
        "sha": "924e7b5bb020ce33d1d85e19262785b049f680a0",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -75,7 +75,7 @@ typedef std::set<std::pair<void*, void*> > InvLockOrders;\n struct LockData {\n     // Very ugly hack: as the global constructs and destructors run single\n     // threaded, we use this boolean to know whether LockData still exists,\n-    // as DeleteLock can get called by global CCriticalSection destructors\n+    // as DeleteLock can get called by global RecursiveMutex destructors\n     // after LockData disappears.\n     bool available;\n     LockData() : available(true) {}"
      },
      {
        "sha": "0cdbb59c701ad01631cca8fe13fbcf4d47fe3811",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -106,7 +106,6 @@ class LOCKABLE AnnotatedMixin : public PARENT\n  * TODO: We should move away from using the recursive lock by default.\n  */\n using RecursiveMutex = AnnotatedMixin<std::recursive_mutex>;\n-typedef AnnotatedMixin<std::recursive_mutex> CCriticalSection;\n \n /** Wrapped mutex: supports waiting but not recursive locking */\n typedef AnnotatedMixin<std::mutex> Mutex;"
      },
      {
        "sha": "f44ed712d92fde156eb7350b821c1c5555061262",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -59,29 +59,20 @@ class CAddrManTest : public CAddrMan\n      }\n };\n \n-static CNetAddr ResolveIP(const char* ip)\n+static CNetAddr ResolveIP(const std::string& ip)\n {\n     CNetAddr addr;\n     BOOST_CHECK_MESSAGE(LookupHost(ip, addr, false), strprintf(\"failed to resolve: %s\", ip));\n     return addr;\n }\n \n-static CNetAddr ResolveIP(std::string ip)\n-{\n-    return ResolveIP(ip.c_str());\n-}\n-\n-static CService ResolveService(const char* ip, int port = 0)\n+static CService ResolveService(const std::string& ip, const int port = 0)\n {\n     CService serv;\n     BOOST_CHECK_MESSAGE(Lookup(ip, serv, port, false), strprintf(\"failed to resolve: %s:%i\", ip, port));\n     return serv;\n }\n \n-static CService ResolveService(std::string ip, int port = 0)\n-{\n-    return ResolveService(ip.c_str(), port);\n-}\n \n BOOST_FIXTURE_TEST_SUITE(addrman_tests, BasicTestingSetup)\n "
      },
      {
        "sha": "3b4c480f72521f8ee7543fe27ec1beea12e94ec4",
        "filename": "src/test/blockchain_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/blockchain_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/blockchain_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockchain_tests.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include <boost/test/unit_test.hpp>\n \n #include <stdlib.h>"
      },
      {
        "sha": "6be24c08455eca16ac3128e58578e231e83e4e6c",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -7,6 +7,7 @@\n #include <test/util/setup_common.h>\n #include <random.h>\n #include <thread>\n+#include <deque>\n \n /** Test Suite for CuckooCache\n  *"
      },
      {
        "sha": "2c2b3035e376341e806f0da7fbe348f029667341",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -51,7 +51,7 @@ struct COrphanTx {\n     NodeId fromPeer;\n     int64_t nTimeExpire;\n };\n-extern CCriticalSection g_cs_orphans;\n+extern RecursiveMutex g_cs_orphans;\n extern std::map<uint256, COrphanTx> mapOrphanTransactions GUARDED_BY(g_cs_orphans);\n \n static CService ip(uint32_t i)"
      },
      {
        "sha": "09c4ff05df1369e50da22269584107816da78408",
        "filename": "src/test/fuzz/decode_tx.cpp",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/fuzz/decode_tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/fuzz/decode_tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/decode_tx.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <core_io.h>\n+#include <primitives/transaction.h>\n+#include <test/fuzz/fuzz.h>\n+#include <util/strencodings.h>\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    const std::string tx_hex = HexStr(std::string{buffer.begin(), buffer.end()});\n+    CMutableTransaction mtx;\n+    const bool result_none = DecodeHexTx(mtx, tx_hex, false, false);\n+    const bool result_try_witness = DecodeHexTx(mtx, tx_hex, false, true);\n+    const bool result_try_witness_and_maybe_no_witness = DecodeHexTx(mtx, tx_hex, true, true);\n+    const bool result_try_no_witness = DecodeHexTx(mtx, tx_hex, true, false);\n+    assert(!result_none);\n+    if (result_try_witness_and_maybe_no_witness) {\n+        assert(result_try_no_witness || result_try_witness);\n+    }\n+    // if (result_try_no_witness) { // Uncomment when https://github.com/bitcoin/bitcoin/pull/17775 is merged\n+    if (result_try_witness) { // Remove stop-gap when https://github.com/bitcoin/bitcoin/pull/17775 is merged\n+        assert(result_try_witness_and_maybe_no_witness);\n+    }\n+}"
      },
      {
        "sha": "a6ab620e21890a3dbea483fcea45acf35e6b5be3",
        "filename": "src/test/fuzz/fuzz.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/fuzz/fuzz.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/fuzz/fuzz.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fuzz.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -4,10 +4,14 @@\n \n #include <test/fuzz/fuzz.h>\n \n+#include <test/util/setup_common.h>\n+\n #include <cstdint>\n #include <unistd.h>\n #include <vector>\n \n+const std::function<void(const std::string&)> G_TEST_LOG_FUN{};\n+\n static bool read_stdin(std::vector<uint8_t>& data)\n {\n     uint8_t buffer[1024];"
      },
      {
        "sha": "e6529949e27022a4e605155643f54296884ba8ad",
        "filename": "src/test/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -2,6 +2,21 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+/**\n+ * See https://www.boost.org/doc/libs/1_71_0/libs/test/doc/html/boost_test/utf_reference/link_references/link_boost_test_module_macro.html\n+ */\n #define BOOST_TEST_MODULE Bitcoin Core Test Suite\n \n #include <boost/test/unit_test.hpp>\n+\n+#include <test/util/setup_common.h>\n+\n+/** Redirect debug log to boost log */\n+const std::function<void(const std::string&)> G_TEST_LOG_FUN = [](const std::string& s) {\n+    if (s.back() == '\\n') {\n+        // boost will insert the new line\n+        BOOST_TEST_MESSAGE(s.substr(0, s.size() - 1));\n+    } else {\n+        BOOST_TEST_MESSAGE(s);\n+    }\n+};"
      },
      {
        "sha": "cb1ef5dcf39b6ef32ce5f3401163cfce528f5481",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -99,6 +99,8 @@ BOOST_AUTO_TEST_CASE(caddrdb_read)\n     BOOST_CHECK(Lookup(\"250.7.1.1\", addr1, 8333, false));\n     BOOST_CHECK(Lookup(\"250.7.2.2\", addr2, 9999, false));\n     BOOST_CHECK(Lookup(\"250.7.3.3\", addr3, 9999, false));\n+    BOOST_CHECK(Lookup(std::string(\"250.7.3.3\", 9), addr3, 9999, false));\n+    BOOST_CHECK(!Lookup(std::string(\"250.7.3.3\\0example.com\", 21), addr3, 9999, false));\n \n     // Add three addresses to new table.\n     CService source;"
      },
      {
        "sha": "58e0565bdabe400f12199f2ca002ea13bb2fada9",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 5,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -13,21 +13,21 @@\n \n BOOST_FIXTURE_TEST_SUITE(netbase_tests, BasicTestingSetup)\n \n-static CNetAddr ResolveIP(const char* ip)\n+static CNetAddr ResolveIP(const std::string& ip)\n {\n     CNetAddr addr;\n     LookupHost(ip, addr, false);\n     return addr;\n }\n \n-static CSubNet ResolveSubNet(const char* subnet)\n+static CSubNet ResolveSubNet(const std::string& subnet)\n {\n     CSubNet ret;\n     LookupSubNet(subnet, ret);\n     return ret;\n }\n \n-static CNetAddr CreateInternal(const char* host)\n+static CNetAddr CreateInternal(const std::string& host)\n {\n     CNetAddr addr;\n     addr.SetInternal(host);\n@@ -105,7 +105,7 @@ BOOST_AUTO_TEST_CASE(netbase_splithost)\n \n bool static TestParse(std::string src, std::string canon)\n {\n-    CService addr(LookupNumeric(src.c_str(), 65535));\n+    CService addr(LookupNumeric(src, 65535));\n     return canon == addr.ToString();\n }\n \n@@ -127,7 +127,6 @@ BOOST_AUTO_TEST_CASE(netbase_lookupnumeric)\n \n BOOST_AUTO_TEST_CASE(onioncat_test)\n {\n-\n     // values from https://web.archive.org/web/20121122003543/http://www.cypherpunk.at/onioncat/wiki/OnionCat\n     CNetAddr addr1(ResolveIP(\"5wyqrzbvrdsumnok.onion\"));\n     CNetAddr addr2(ResolveIP(\"FD87:D87E:EB43:edb1:8e4:3588:e546:35ca\"));\n@@ -402,4 +401,22 @@ BOOST_AUTO_TEST_CASE(netpermissions_test)\n     BOOST_CHECK(std::find(strings.begin(), strings.end(), \"mempool\") != strings.end());\n }\n \n+BOOST_AUTO_TEST_CASE(netbase_dont_resolve_strings_with_embedded_nul_characters)\n+{\n+    CNetAddr addr;\n+    BOOST_CHECK(LookupHost(std::string(\"127.0.0.1\", 9), addr, false));\n+    BOOST_CHECK(!LookupHost(std::string(\"127.0.0.1\\0\", 10), addr, false));\n+    BOOST_CHECK(!LookupHost(std::string(\"127.0.0.1\\0example.com\", 21), addr, false));\n+    BOOST_CHECK(!LookupHost(std::string(\"127.0.0.1\\0example.com\\0\", 22), addr, false));\n+    CSubNet ret;\n+    BOOST_CHECK(LookupSubNet(std::string(\"1.2.3.0/24\", 10), ret));\n+    BOOST_CHECK(!LookupSubNet(std::string(\"1.2.3.0/24\\0\", 11), ret));\n+    BOOST_CHECK(!LookupSubNet(std::string(\"1.2.3.0/24\\0example.com\", 22), ret));\n+    BOOST_CHECK(!LookupSubNet(std::string(\"1.2.3.0/24\\0example.com\\0\", 23), ret));\n+    BOOST_CHECK(LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\", 22), ret));\n+    BOOST_CHECK(!LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\\0\", 23), ret));\n+    BOOST_CHECK(!LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\\0example.com\", 34), ret));\n+    BOOST_CHECK(!LookupSubNet(std::string(\"5wyqrzbvrdsumnok.onion\\0example.com\\0\", 35), ret));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "5c6c2ee38e722f1743f516cdb9ffbcae2c19ada8",
        "filename": "src/test/sync_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/sync_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/sync_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sync_tests.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2012-2019 The Bitcoin Core developers\n+// Copyright (c) 2012-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -38,7 +38,7 @@ BOOST_AUTO_TEST_CASE(potential_deadlock_detected)\n     g_debug_lockorder_abort = false;\n     #endif\n \n-    CCriticalSection rmutex1, rmutex2;\n+    RecursiveMutex rmutex1, rmutex2;\n     TestPotentialDeadLockDetected(rmutex1, rmutex2);\n \n     Mutex mutex1, mutex2;"
      },
      {
        "sha": "c14cd647665c1cf55c5024c176870959ef3ef254",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "ccb3064d5974afc6da768f70cf0df923a7dbc801",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -71,6 +71,7 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n     SelectParams(chainName);\n     SeedInsecureRand();\n     gArgs.ForceSetArg(\"-printtoconsole\", \"0\");\n+    if (G_TEST_LOG_FUN) LogInstance().PushBackCallback(G_TEST_LOG_FUN);\n     InitLogging();\n     LogInstance().StartLogging();\n     SHA256AutoDetect();"
      },
      {
        "sha": "6741be84804aae9cdd338fa3503a4e51b44e8f21",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -18,6 +18,9 @@\n \n #include <boost/thread.hpp>\n \n+/** This is connected to the logger. Can be used to redirect logs to any other log */\n+extern const std::function<void(const std::string&)> G_TEST_LOG_FUN;\n+\n // Enable BOOST_CHECK_EQUAL for enum class types\n template <typename T>\n std::ostream& operator<<(typename std::enable_if<std::is_enum<T>::value, std::ostream>::type& stream, const T& e)"
      },
      {
        "sha": "6f0e464891555ad2e3f8e3b2cd8bd9a8fa0ad7e4",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2019 The Bitcoin Core developers\n+// Copyright (c) 2011-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -38,7 +38,7 @@ BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_criticalsection)\n {\n-    CCriticalSection cs;\n+    RecursiveMutex cs;\n \n     do {\n         LOCK(cs);"
      },
      {
        "sha": "ab8b957f7df4bec3798678baf69ca51a32093d8b",
        "filename": "src/test/validation_flush_tests.cpp",
        "status": "added",
        "additions": 174,
        "deletions": 0,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/validation_flush_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/test/validation_flush_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_flush_tests.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -0,0 +1,174 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+//\n+#include <txmempool.h>\n+#include <validation.h>\n+#include <sync.h>\n+#include <test/util/setup_common.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(validation_flush_tests, BasicTestingSetup)\n+\n+//! Test utilities for detecting when we need to flush the coins cache based\n+//! on estimated memory usage.\n+//!\n+//! @sa CChainState::GetCoinsCacheSizeState()\n+//!\n+BOOST_AUTO_TEST_CASE(getcoinscachesizestate)\n+{\n+    BlockManager blockman{};\n+    CChainState chainstate{blockman};\n+    chainstate.InitCoinsDB(/*cache_size_bytes*/ 1 << 10, /*in_memory*/ true, /*should_wipe*/ false);\n+    WITH_LOCK(::cs_main, chainstate.InitCoinsCache());\n+    CTxMemPool tx_pool{};\n+\n+    constexpr bool is_64_bit = sizeof(void*) == 8;\n+\n+    LOCK(::cs_main);\n+    auto& view = chainstate.CoinsTip();\n+\n+    //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view.\n+    auto add_coin = [](CCoinsViewCache& coins_view) -> COutPoint {\n+        Coin newcoin;\n+        uint256 txid = InsecureRand256();\n+        COutPoint outp{txid, 0};\n+        newcoin.nHeight = 1;\n+        newcoin.out.nValue = InsecureRand32();\n+        newcoin.out.scriptPubKey.assign((uint32_t)56, 1);\n+        coins_view.AddCoin(outp, std::move(newcoin), false);\n+\n+        return outp;\n+    };\n+\n+    // The number of bytes consumed by coin's heap data, i.e. CScript\n+    // (prevector<28, unsigned char>) when assigned 56 bytes of data per above.\n+    //\n+    // See also: Coin::DynamicMemoryUsage().\n+    constexpr int COIN_SIZE = is_64_bit ? 80 : 64;\n+\n+    auto print_view_mem_usage = [](CCoinsViewCache& view) {\n+        BOOST_TEST_MESSAGE(\"CCoinsViewCache memory usage: \" << view.DynamicMemoryUsage());\n+    };\n+\n+    constexpr size_t MAX_COINS_CACHE_BYTES = 1024;\n+\n+    // Without any coins in the cache, we shouldn't need to flush.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::OK);\n+\n+    // If the initial memory allocations of cacheCoins don't match these common\n+    // cases, we can't really continue to make assertions about memory usage.\n+    // End the test early.\n+    if (view.DynamicMemoryUsage() != 32 && view.DynamicMemoryUsage() != 16) {\n+        // Add a bunch of coins to see that we at least flip over to CRITICAL.\n+\n+        for (int i{0}; i < 1000; ++i) {\n+            COutPoint res = add_coin(view);\n+            BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        }\n+\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::CRITICAL);\n+\n+        BOOST_TEST_MESSAGE(\"Exiting cache flush tests early due to unsupported arch\");\n+        return;\n+    }\n+\n+    print_view_mem_usage(view);\n+    BOOST_CHECK_EQUAL(view.DynamicMemoryUsage(), is_64_bit ? 32 : 16);\n+\n+    // We should be able to add COINS_UNTIL_CRITICAL coins to the cache before going CRITICAL.\n+    // This is contingent not only on the dynamic memory usage of the Coins\n+    // that we're adding (COIN_SIZE bytes per), but also on how much memory the\n+    // cacheCoins (unordered_map) preallocates.\n+    //\n+    // I came up with the count by examining the printed memory usage of the\n+    // CCoinsCacheView, so it's sort of arbitrary - but it shouldn't change\n+    // unless we somehow change the way the cacheCoins map allocates memory.\n+    //\n+    constexpr int COINS_UNTIL_CRITICAL = is_64_bit ? 4 : 5;\n+\n+    for (int i{0}; i < COINS_UNTIL_CRITICAL; ++i) {\n+        COutPoint res = add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(view.AccessCoin(res).DynamicMemoryUsage(), COIN_SIZE);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    // Adding an additional coin will push us over the edge to CRITICAL.\n+    add_coin(view);\n+    print_view_mem_usage(view);\n+\n+    auto size_state = chainstate.GetCoinsCacheSizeState(\n+        tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0);\n+\n+    if (!is_64_bit && size_state == CoinsCacheSizeState::LARGE) {\n+        // On 32 bit hosts, we may hit LARGE before CRITICAL.\n+        add_coin(view);\n+        print_view_mem_usage(view);\n+    }\n+\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 0),\n+        CoinsCacheSizeState::CRITICAL);\n+\n+    // Passing non-zero max mempool usage should allow us more headroom.\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+        CoinsCacheSizeState::OK);\n+\n+    for (int i{0}; i < 3; ++i) {\n+        add_coin(view);\n+        print_view_mem_usage(view);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, /*max_mempool_size_bytes*/ 1 << 10),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    // Adding another coin with the additional mempool room will put us >90%\n+    // but not yet critical.\n+    add_coin(view);\n+    print_view_mem_usage(view);\n+\n+    // Only perform these checks on 64 bit hosts; I haven't done the math for 32.\n+    if (is_64_bit) {\n+        float usage_percentage = (float)view.DynamicMemoryUsage() / (MAX_COINS_CACHE_BYTES + (1 << 10));\n+        BOOST_TEST_MESSAGE(\"CoinsTip usage percentage: \" << usage_percentage);\n+        BOOST_CHECK(usage_percentage >= 0.9);\n+        BOOST_CHECK(usage_percentage < 1);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, 1 << 10),\n+            CoinsCacheSizeState::LARGE);\n+    }\n+\n+    // Using the default max_* values permits way more coins to be added.\n+    for (int i{0}; i < 1000; ++i) {\n+        add_coin(view);\n+        BOOST_CHECK_EQUAL(\n+            chainstate.GetCoinsCacheSizeState(tx_pool),\n+            CoinsCacheSizeState::OK);\n+    }\n+\n+    // Flushing the view doesn't take us back to OK because cacheCoins has\n+    // preallocated memory that doesn't get reclaimed even after flush.\n+\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, 0),\n+        CoinsCacheSizeState::CRITICAL);\n+\n+    view.SetBestBlock(InsecureRand256());\n+    BOOST_CHECK(view.Flush());\n+    print_view_mem_usage(view);\n+\n+    BOOST_CHECK_EQUAL(\n+        chainstate.GetCoinsCacheSizeState(tx_pool, MAX_COINS_CACHE_BYTES, 0),\n+        CoinsCacheSizeState::CRITICAL);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "942b3cb91998adb9022e0f9185b736fc6fc1d85d",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2019 The Bitcoin Core developers\n+// Copyright (c) 2014-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -16,7 +16,7 @@\n #include <warnings.h>\n \n \n-static CCriticalSection cs_nTimeOffset;\n+static RecursiveMutex cs_nTimeOffset;\n static int64_t nTimeOffset GUARDED_BY(cs_nTimeOffset) = 0;\n \n /**"
      },
      {
        "sha": "84118b36efdf193e0af7edcd370cfdd893ceedc8",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -501,7 +501,7 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n             }\n             return;\n         }\n-        service = LookupNumeric(std::string(service_id+\".onion\").c_str(), Params().GetDefaultPort());\n+        service = LookupNumeric(std::string(service_id+\".onion\"), Params().GetDefaultPort());\n         LogPrintf(\"tor: Got service ID %s, advertising service %s\\n\", service_id, service.ToString());\n         if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n             LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().string());"
      },
      {
        "sha": "488c24f9357b363ab5b98d8ab6e55bacdc674546",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -20,8 +20,6 @@ class CBlockIndex;\n class CCoinsViewDBCursor;\n class uint256;\n \n-//! No need to periodic flush if at least this much space still available.\n-static constexpr int MAX_BLOCK_COINSDB_USAGE = 10;\n //! -dbcache default (MiB)\n static const int64_t nDefaultDbCache = 450;\n //! -dbbatchsize default (bytes)"
      },
      {
        "sha": "01db59e8596df8ceeb155736c1f275b083a5cf84",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -30,7 +30,7 @@\n #include <boost/signals2/signal.hpp>\n \n class CBlockIndex;\n-extern CCriticalSection cs_main;\n+extern RecursiveMutex cs_main;\n \n /** Fake height value used in Coin to signify they are only in the memory pool (since 0.8) */\n static const uint32_t MEMPOOL_HEIGHT = 0x7FFFFFFF;"
      },
      {
        "sha": "85bb746d19615d7fd44e845e0185c45db8fd10f8",
        "filename": "src/ui_interface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/ui_interface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/ui_interface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2010-2019 The Bitcoin Core developers\n+// Copyright (c) 2010-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -16,7 +16,6 @@ struct UISignals {\n     boost::signals2::signal<CClientUIInterface::NotifyNumConnectionsChangedSig> NotifyNumConnectionsChanged;\n     boost::signals2::signal<CClientUIInterface::NotifyNetworkActiveChangedSig> NotifyNetworkActiveChanged;\n     boost::signals2::signal<CClientUIInterface::NotifyAlertChangedSig> NotifyAlertChanged;\n-    boost::signals2::signal<CClientUIInterface::LoadWalletSig> LoadWallet;\n     boost::signals2::signal<CClientUIInterface::ShowProgressSig> ShowProgress;\n     boost::signals2::signal<CClientUIInterface::NotifyBlockTipSig> NotifyBlockTip;\n     boost::signals2::signal<CClientUIInterface::NotifyHeaderTipSig> NotifyHeaderTip;\n@@ -36,7 +35,6 @@ ADD_SIGNALS_IMPL_WRAPPER(InitMessage);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyNumConnectionsChanged);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyNetworkActiveChanged);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyAlertChanged);\n-ADD_SIGNALS_IMPL_WRAPPER(LoadWallet);\n ADD_SIGNALS_IMPL_WRAPPER(ShowProgress);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyBlockTip);\n ADD_SIGNALS_IMPL_WRAPPER(NotifyHeaderTip);\n@@ -48,7 +46,6 @@ void CClientUIInterface::InitMessage(const std::string& message) { return g_ui_s\n void CClientUIInterface::NotifyNumConnectionsChanged(int newNumConnections) { return g_ui_signals.NotifyNumConnectionsChanged(newNumConnections); }\n void CClientUIInterface::NotifyNetworkActiveChanged(bool networkActive) { return g_ui_signals.NotifyNetworkActiveChanged(networkActive); }\n void CClientUIInterface::NotifyAlertChanged() { return g_ui_signals.NotifyAlertChanged(); }\n-void CClientUIInterface::LoadWallet(std::unique_ptr<interfaces::Wallet>& wallet) { return g_ui_signals.LoadWallet(wallet); }\n void CClientUIInterface::ShowProgress(const std::string& title, int nProgress, bool resume_possible) { return g_ui_signals.ShowProgress(title, nProgress, resume_possible); }\n void CClientUIInterface::NotifyBlockTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyBlockTip(b, i); }\n void CClientUIInterface::NotifyHeaderTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyHeaderTip(b, i); }"
      },
      {
        "sha": "b402177b8520440fd482c24b0c996975ecc5809e",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2012-2019 The Bitcoin Core developers\n+// Copyright (c) 2012-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -17,10 +17,6 @@ class connection;\n }\n } // namespace boost\n \n-namespace interfaces {\n-class Wallet;\n-} // namespace interfaces\n-\n /** General change type (added, updated, removed). */\n enum ChangeType\n {\n@@ -105,9 +101,6 @@ class CClientUIInterface\n      */\n     ADD_SIGNALS_DECL_WRAPPER(NotifyAlertChanged, void, );\n \n-    /** A wallet has been loaded. */\n-    ADD_SIGNALS_DECL_WRAPPER(LoadWallet, void, std::unique_ptr<interfaces::Wallet>& wallet);\n-\n     /**\n      * Show progress e.g. for verifychain.\n      * resume_possible indicates shutting down now will result in the current progress action resuming upon restart."
      },
      {
        "sha": "6f176dd5ec30defcfcf4360d2f89b285d2a6d23e",
        "filename": "src/util/bip32.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/util/bip32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/util/bip32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bip32.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2019-2018 The Bitcoin Core developers\n+// Copyright (c) 2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "7e58b79f38ab73f9c4613fc0c25f15a154c6b7ad",
        "filename": "src/util/bip32.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/util/bip32.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/util/bip32.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bip32.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2019-2018 The Bitcoin Core developers\n+// Copyright (c) 2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "1d03639fa268bc738ed3b13d16258bf1b806336f",
        "filename": "src/util/settings.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/util/settings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/util/settings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/settings.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2019 The Bitcoin Core developers\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -71,11 +71,11 @@ struct SettingsSpan {\n     explicit SettingsSpan(const SettingsValue& value) noexcept : SettingsSpan(&value, 1) {}\n     explicit SettingsSpan(const SettingsValue* data, size_t size) noexcept : data(data), size(size) {}\n     explicit SettingsSpan(const std::vector<SettingsValue>& vec) noexcept;\n-    const SettingsValue* begin() const; //<! Pointer to first non-negated value.\n-    const SettingsValue* end() const;   //<! Pointer to end of values.\n-    bool empty() const;                 //<! True if there are any non-negated values.\n-    bool last_negated() const;          //<! True if the last value is negated.\n-    size_t negated() const;             //<! Number of negated values.\n+    const SettingsValue* begin() const; //!< Pointer to first non-negated value.\n+    const SettingsValue* end() const;   //!< Pointer to end of values.\n+    bool empty() const;                 //!< True if there are any non-negated values.\n+    bool last_negated() const;          //!< True if the last value is negated.\n+    size_t negated() const;             //!< Number of negated values.\n \n     const SettingsValue* data = nullptr;\n     size_t size = 0;"
      },
      {
        "sha": "588ddc1fcf23a6a7eae5f07bcd3f2c317803e8eb",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -974,17 +974,19 @@ void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {\n     SetEndOfFile(hFile);\n #elif defined(MAC_OSX)\n     // OSX specific version\n+    // NOTE: Contrary to other OS versions, the OSX version assumes that\n+    // NOTE: offset is the size of the file.\n     fstore_t fst;\n     fst.fst_flags = F_ALLOCATECONTIG;\n     fst.fst_posmode = F_PEOFPOSMODE;\n     fst.fst_offset = 0;\n-    fst.fst_length = (off_t)offset + length;\n+    fst.fst_length = length; // mac os fst_length takes the # of free bytes to allocate, not desired file size\n     fst.fst_bytesalloc = 0;\n     if (fcntl(fileno(file), F_PREALLOCATE, &fst) == -1) {\n         fst.fst_flags = F_ALLOCATEALL;\n         fcntl(fileno(file), F_PREALLOCATE, &fst);\n     }\n-    ftruncate(fileno(file), fst.fst_length);\n+    ftruncate(fileno(file), static_cast<off_t>(offset) + length);\n #else\n     #if defined(__linux__)\n     // Version using posix_fallocate"
      },
      {
        "sha": "473019bbed62a763295008886cb6ec0b216f0b33",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -155,7 +155,7 @@ class ArgsManager\n         unsigned int m_flags;\n     };\n \n-    mutable CCriticalSection cs_args;\n+    mutable RecursiveMutex cs_args;\n     util::Settings m_settings GUARDED_BY(cs_args);\n     std::string m_network GUARDED_BY(cs_args);\n     std::set<std::string> m_network_only_args GUARDED_BY(cs_args);"
      },
      {
        "sha": "89bc6665a4b0f2f44404b9ac412f98786a96f0f0",
        "filename": "src/util/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/util/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/util/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/validation.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -8,12 +8,18 @@\n #include <consensus/validation.h>\n #include <tinyformat.h>\n \n-/** Convert ValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const ValidationState &state)\n {\n-    return strprintf(\"%s%s\",\n-        state.GetRejectReason(),\n-        state.GetDebugMessage().empty() ? \"\" : \", \"+state.GetDebugMessage());\n+    if (state.IsValid()) {\n+        return \"Valid\";\n+    }\n+\n+    const std::string debug_message = state.GetDebugMessage();\n+    if (!debug_message.empty()) {\n+        return strprintf(\"%s, %s\", state.GetRejectReason(), debug_message);\n+    }\n+\n+    return state.GetRejectReason();\n }\n \n const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";"
      },
      {
        "sha": "9854740e6f4bf07680f7ba75b54c26d768ca9199",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 8,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -133,7 +133,7 @@ CTxMemPool mempool(&feeEstimator);\n namespace {\n     CBlockIndex* pindexBestInvalid = nullptr;\n \n-    CCriticalSection cs_LastBlockFile;\n+    RecursiveMutex cs_LastBlockFile;\n     std::vector<CBlockFileInfo> vinfoBlockFile;\n     int nLastBlockFile = 0;\n     /** Global flag to indicate we should check to see if there are\n@@ -2187,13 +2187,44 @@ bool CChainState::ConnectBlock(const CBlock& block, BlockValidationState& state,\n     return true;\n }\n \n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(const CTxMemPool& tx_pool)\n+{\n+    return this->GetCoinsCacheSizeState(\n+        tx_pool,\n+        nCoinCacheUsage,\n+        gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+}\n+\n+CoinsCacheSizeState CChainState::GetCoinsCacheSizeState(\n+    const CTxMemPool& tx_pool,\n+    size_t max_coins_cache_size_bytes,\n+    size_t max_mempool_size_bytes)\n+{\n+    int64_t nMempoolUsage = tx_pool.DynamicMemoryUsage();\n+    int64_t cacheSize = CoinsTip().DynamicMemoryUsage();\n+    int64_t nTotalSpace =\n+        max_coins_cache_size_bytes + std::max<int64_t>(max_mempool_size_bytes - nMempoolUsage, 0);\n+\n+    //! No need to periodic flush if at least this much space still available.\n+    static constexpr int64_t MAX_BLOCK_COINSDB_USAGE_BYTES = 10 * 1024 * 1024;  // 10MB\n+    int64_t large_threshold =\n+        std::max((9 * nTotalSpace) / 10, nTotalSpace - MAX_BLOCK_COINSDB_USAGE_BYTES);\n+\n+    if (cacheSize > nTotalSpace) {\n+        LogPrintf(\"Cache size (%s) exceeds total space (%s)\\n\", cacheSize, nTotalSpace);\n+        return CoinsCacheSizeState::CRITICAL;\n+    } else if (cacheSize > large_threshold) {\n+        return CoinsCacheSizeState::LARGE;\n+    }\n+    return CoinsCacheSizeState::OK;\n+}\n+\n bool CChainState::FlushStateToDisk(\n     const CChainParams& chainparams,\n     BlockValidationState &state,\n     FlushStateMode mode,\n     int nManualPruneHeight)\n {\n-    int64_t nMempoolUsage = mempool.DynamicMemoryUsage();\n     LOCK(cs_main);\n     assert(this->CanFlushToDisk());\n     static int64_t nLastWrite = 0;\n@@ -2208,6 +2239,7 @@ bool CChainState::FlushStateToDisk(\n     {\n         bool fFlushForPrune = false;\n         bool fDoFullFlush = false;\n+        CoinsCacheSizeState cache_state = GetCoinsCacheSizeState(::mempool);\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n             if (nManualPruneHeight > 0) {\n@@ -2236,13 +2268,10 @@ bool CChainState::FlushStateToDisk(\n         if (nLastFlush == 0) {\n             nLastFlush = nNow;\n         }\n-        int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n-        int64_t cacheSize = CoinsTip().DynamicMemoryUsage();\n-        int64_t nTotalSpace = nCoinCacheUsage + std::max<int64_t>(nMempoolSizeMax - nMempoolUsage, 0);\n         // The cache is large and we're within 10% and 10 MiB of the limit, but we have time now (not in the middle of a block processing).\n-        bool fCacheLarge = mode == FlushStateMode::PERIODIC && cacheSize > std::max((9 * nTotalSpace) / 10, nTotalSpace - MAX_BLOCK_COINSDB_USAGE * 1024 * 1024);\n+        bool fCacheLarge = mode == FlushStateMode::PERIODIC && cache_state >= CoinsCacheSizeState::LARGE;\n         // The cache is over the limit, we have to write now.\n-        bool fCacheCritical = mode == FlushStateMode::IF_NEEDED && cacheSize > nTotalSpace;\n+        bool fCacheCritical = mode == FlushStateMode::IF_NEEDED && cache_state >= CoinsCacheSizeState::CRITICAL;\n         // It's been a while since we wrote the block index to disk. Do this frequently, so we don't need to redownload after a crash.\n         bool fPeriodicWrite = mode == FlushStateMode::PERIODIC && nNow > nLastWrite + (int64_t)DATABASE_WRITE_INTERVAL * 1000000;\n         // It's been very long since we flushed the cache. Do this infrequently, to optimize cache usage."
      },
      {
        "sha": "a5335edc4357b459565717c019a103a33dfbbb0d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 24,
        "deletions": 4,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -136,7 +136,7 @@ struct BlockHasher\n     size_t operator()(const uint256& hash) const { return ReadLE64(hash.begin()); }\n };\n \n-extern CCriticalSection cs_main;\n+extern RecursiveMutex cs_main;\n extern CBlockPolicyEstimator feeEstimator;\n extern CTxMemPool mempool;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n@@ -530,6 +530,15 @@ class CoinsViews {\n     void InitCache() EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n };\n \n+enum class CoinsCacheSizeState\n+{\n+    //! The coins cache is in immediate need of a flush.\n+    CRITICAL = 2,\n+    //! The cache is at >= 90% capacity.\n+    LARGE = 1,\n+    OK = 0\n+};\n+\n /**\n  * CChainState stores and provides an API to update our local knowledge of the\n  * current best chain.\n@@ -551,7 +560,7 @@ class CChainState {\n      * Every received block is assigned a unique and increasing identifier, so we\n      * know which one to give priority in case of a fork.\n      */\n-    CCriticalSection cs_nBlockSequenceId;\n+    RecursiveMutex cs_nBlockSequenceId;\n     /** Blocks loaded from disk are assigned id 0, so start the counter at 1. */\n     int32_t nBlockSequenceId = 1;\n     /** Decreasing counter (used by subsequent preciousblock calls). */\n@@ -563,7 +572,7 @@ class CChainState {\n      * the ChainState CriticalSection\n      * A lock that must be held when modifying this ChainState - held in ActivateBestChain()\n      */\n-    CCriticalSection m_cs_chainstate;\n+    RecursiveMutex m_cs_chainstate;\n \n     /**\n      * Whether this chainstate is undergoing initial block download.\n@@ -721,6 +730,17 @@ class CChainState {\n     /** Update the chain tip based on database information, i.e. CoinsTip()'s best block. */\n     bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    //! Dictates whether we need to flush the cache to disk or not.\n+    //!\n+    //! @return the state of the size of the coins cache.\n+    CoinsCacheSizeState GetCoinsCacheSizeState(const CTxMemPool& tx_pool)\n+        EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n+    CoinsCacheSizeState GetCoinsCacheSizeState(\n+        const CTxMemPool& tx_pool,\n+        size_t max_coins_cache_size_bytes,\n+        size_t max_mempool_size_bytes) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n private:\n     bool ActivateBestChainStep(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs);\n     bool ConnectTip(BlockValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions& disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs);"
      },
      {
        "sha": "0f513c065f9f9e2f12fa87fcb2ea18b68e67d995",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 13,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,12 +1,17 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <validationinterface.h>\n \n+#include <chain.h>\n+#include <consensus/validation.h>\n+#include <logging.h>\n #include <primitives/block.h>\n+#include <primitives/transaction.h>\n #include <scheduler.h>\n+#include <util/validation.h>\n \n #include <future>\n #include <unordered_map>\n@@ -110,52 +115,89 @@ void SyncWithValidationInterfaceQueue() {\n     promise.get_future().wait();\n }\n \n+// Use a macro instead of a function for conditional logging to prevent\n+// evaluating arguments when logging is not enabled.\n+//\n+// NOTE: The lambda captures all local variables by value.\n+#define ENQUEUE_AND_LOG_EVENT(event, fmt, name, ...)           \\\n+    do {                                                       \\\n+        auto local_name = (name);                              \\\n+        LOG_EVENT(\"Enqueuing \" fmt, local_name, __VA_ARGS__);  \\\n+        m_internals->m_schedulerClient.AddToProcessQueue([=] { \\\n+            LOG_EVENT(fmt, local_name, __VA_ARGS__);           \\\n+            event();                                           \\\n+        });                                                    \\\n+    } while (0)\n+\n+#define LOG_EVENT(fmt, ...) \\\n+    LogPrint(BCLog::VALIDATION, fmt \"\\n\", __VA_ARGS__)\n \n void CMainSignals::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     // Dependencies exist that require UpdatedBlockTip events to be delivered in the order in which\n     // the chain actually updates. One way to ensure this is for the caller to invoke this signal\n     // in the same critical section where the chain is updated\n \n-    m_internals->m_schedulerClient.AddToProcessQueue([pindexNew, pindexFork, fInitialDownload, this] {\n+    auto event = [pindexNew, pindexFork, fInitialDownload, this] {\n         m_internals->UpdatedBlockTip(pindexNew, pindexFork, fInitialDownload);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: new block hash=%s fork block hash=%s (in IBD=%s)\", __func__,\n+                          pindexNew->GetBlockHash().ToString(),\n+                          pindexFork ? pindexFork->GetBlockHash().ToString() : \"null\",\n+                          fInitialDownload);\n }\n \n void CMainSignals::TransactionAddedToMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto event = [ptx, this] {\n         m_internals->TransactionAddedToMempool(ptx);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s\", __func__,\n+                          ptx->GetHash().ToString(),\n+                          ptx->GetWitnessHash().ToString());\n }\n \n void CMainSignals::TransactionRemovedFromMempool(const CTransactionRef &ptx) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([ptx, this] {\n+    auto event = [ptx, this] {\n         m_internals->TransactionRemovedFromMempool(ptx);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: txid=%s wtxid=%s\", __func__,\n+                          ptx->GetHash().ToString(),\n+                          ptx->GetWitnessHash().ToString());\n }\n \n void CMainSignals::BlockConnected(const std::shared_ptr<const CBlock> &pblock, const CBlockIndex *pindex, const std::shared_ptr<const std::vector<CTransactionRef>>& pvtxConflicted) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, pvtxConflicted, this] {\n+    auto event = [pblock, pindex, pvtxConflicted, this] {\n         m_internals->BlockConnected(pblock, pindex, *pvtxConflicted);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s block height=%d\", __func__,\n+                          pblock->GetHash().ToString(),\n+                          pindex->nHeight);\n }\n \n void CMainSignals::BlockDisconnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex)\n {\n-    m_internals->m_schedulerClient.AddToProcessQueue([pblock, pindex, this] {\n+    auto event = [pblock, pindex, this] {\n         m_internals->BlockDisconnected(pblock, pindex);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s block height=%d\", __func__,\n+                          pblock->GetHash().ToString(),\n+                          pindex->nHeight);\n }\n \n void CMainSignals::ChainStateFlushed(const CBlockLocator &locator) {\n-    m_internals->m_schedulerClient.AddToProcessQueue([locator, this] {\n+    auto event = [locator, this] {\n         m_internals->ChainStateFlushed(locator);\n-    });\n+    };\n+    ENQUEUE_AND_LOG_EVENT(event, \"%s: block hash=%s\", __func__,\n+                          locator.IsNull() ? \"null\" : locator.vHave.front().ToString());\n }\n \n void CMainSignals::BlockChecked(const CBlock& block, const BlockValidationState& state) {\n+    LOG_EVENT(\"%s: block hash=%s state=%s\", __func__,\n+              block.GetHash().ToString(), FormatStateMessage(state));\n     m_internals->BlockChecked(block, state);\n }\n \n void CMainSignals::NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock> &block) {\n+    LOG_EVENT(\"%s: block hash=%s\", __func__, block->GetHash().ToString());\n     m_internals->NewPoWValidBlock(pindex, block);\n }"
      },
      {
        "sha": "ed6c560944a4cdce80a7c2ad595e230138d72f2c",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -12,7 +12,7 @@\n #include <functional>\n #include <memory>\n \n-extern CCriticalSection cs_main;\n+extern RecursiveMutex cs_main;\n class BlockValidationState;\n class CBlock;\n class CBlockIndex;"
      },
      {
        "sha": "8b042162d8060e4cdc8345161157b46cc1918dc9",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -44,7 +44,7 @@ void CheckUniqueFileid(const BerkeleyEnvironment& env, const std::string& filena\n     }\n }\n \n-CCriticalSection cs_db;\n+RecursiveMutex cs_db;\n std::map<std::string, std::weak_ptr<BerkeleyEnvironment>> g_dbenvs GUARDED_BY(cs_db); //!< Map from directory name to db environment.\n } // namespace\n \n@@ -650,7 +650,7 @@ void BerkeleyEnvironment::ReloadDbEnv()\n {\n     // Make sure that no Db's are in use\n     AssertLockNotHeld(cs_db);\n-    std::unique_lock<CCriticalSection> lock(cs_db);\n+    std::unique_lock<RecursiveMutex> lock(cs_db);\n     m_db_in_use.wait(lock, [this](){\n         for (auto& count : mapFileUseCount) {\n             if (count.second > 0) return false;"
      },
      {
        "sha": "b93b9ef1bca676088fadba67f4bca51082127b49",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -47,7 +47,8 @@ static feebumper::Result PreconditionChecks(const CWallet& wallet, const CWallet\n \n     // check that original tx consists entirely of our inputs\n     // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n-    if (!wallet.IsAllFromMe(*wtx.tx, ISMINE_SPENDABLE)) {\n+    isminefilter filter = wallet.GetLegacyScriptPubKeyMan() && wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n+    if (!wallet.IsAllFromMe(*wtx.tx, filter)) {\n         errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n         return feebumper::Result::WALLET_ERROR;\n     }\n@@ -78,7 +79,8 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n     CFeeRate incrementalRelayFee = std::max(wallet.chain().relayIncrementalFee(), CFeeRate(WALLET_INCREMENTAL_RELAY_FEE));\n \n     // Given old total fee and transaction size, calculate the old feeRate\n-    CAmount old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    isminefilter filter = wallet.GetLegacyScriptPubKeyMan() && wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n+    CAmount old_fee = wtx.GetDebit(filter) - wtx.tx->GetValueOut();\n     const int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n     CFeeRate nOldFeeRate(old_fee, txSize);\n     // Min total fee is old fee + relay fee\n@@ -195,7 +197,8 @@ Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, co\n     }\n \n     // calculate the old fee and fee-rate\n-    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    isminefilter filter = wallet->GetLegacyScriptPubKeyMan() && wallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n+    old_fee = wtx.GetDebit(filter) - wtx.tx->GetValueOut();\n     CFeeRate nOldFeeRate(old_fee, txSize);\n     // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n     // future proof against changes to network wide policy for incremental relay\n@@ -308,7 +311,8 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n         }\n     }\n \n-    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    isminefilter filter = wallet.GetLegacyScriptPubKeyMan() && wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n+    old_fee = wtx.GetDebit(filter) - wtx.tx->GetValueOut();\n \n     if (coin_control.m_feerate) {\n         // The user provided a feeRate argument."
      },
      {
        "sha": "b35a0a58d13c7e26960e5b6ced2d5a409d58a9a7",
        "filename": "src/wallet/psbtwallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/psbtwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/psbtwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/psbtwallet.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -15,8 +15,8 @@\n  * finalize.) Sets `error` and returns false if something goes wrong.\n  *\n  * @param[in]  pwallet pointer to a wallet\n- * @param[in]  &psbtx reference to PartiallySignedTransaction to fill in\n- * @param[out] &complete indicates whether the PSBT is now complete\n+ * @param[in]  psbtx PartiallySignedTransaction to fill in\n+ * @param[out] complete indicates whether the PSBT is now complete\n  * @param[in]  sighash_type the sighash type to use when signing (if PSBT does not specify)\n  * @param[in]  sign whether to sign or not\n  * @param[in]  bip32derivs whether to fill in bip32 derivation information if available"
      },
      {
        "sha": "05719b47545127ae74cf066534fc2ba5b9ac301f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 38,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -2927,7 +2927,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n         CTxDestination address;\n         const CScript& scriptPubKey = out.tx->tx->vout[out.i].scriptPubKey;\n         bool fValidAddress = ExtractDestination(scriptPubKey, address);\n-        bool reused = avoid_reuse && pwallet->IsUsedDestination(address);\n+        bool reused = avoid_reuse && pwallet->IsUsedDestination(out.tx->GetHash(), out.i);\n \n         if (destinations.size() && (!fValidAddress || !destinations.count(address)))\n             continue;\n@@ -3365,10 +3365,11 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"txid\\\":    \\\"value\\\",   (string)  The id of the new transaction\\n\"\n-            \"  \\\"origfee\\\":  n,         (numeric) Fee of the replaced transaction\\n\"\n-            \"  \\\"fee\\\":      n,         (numeric) Fee of the new transaction\\n\"\n-            \"  \\\"errors\\\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty)\\n\"\n+            \"  \\\"psbt\\\":    \\\"psbt\\\",    (string) The base64-encoded unsigned PSBT of the new transaction. Only returned when wallet private keys are disabled.\\n\"\n+            \"  \\\"txid\\\":    \\\"value\\\",   (string) The id of the new transaction. Only returned when wallet private keys are enabled.\\n\"\n+            \"  \\\"origfee\\\":  n,        (numeric) The fee of the replaced transaction.\\n\"\n+            \"  \\\"fee\\\":      n,        (numeric) The fee of the new transaction.\\n\"\n+            \"  \\\"errors\\\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty).\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -3380,10 +3381,12 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n \n+    CCoinControl coin_control;\n+    coin_control.fAllowWatchOnly = pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     // optional parameters\n     CAmount totalFee = 0;\n-    CCoinControl coin_control;\n     coin_control.m_signal_bip125_rbf = true;\n+\n     if (!request.params[1].isNull()) {\n         UniValue options = request.params[1];\n         RPCTypeCheckObj(options,\n@@ -3468,17 +3471,32 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n         }\n     }\n \n-    // sign bumped transaction\n-    if (!feebumper::SignTransaction(*pwallet, mtx)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n-    }\n-    // commit the bumped transaction\n-    uint256 txid;\n-    if (feebumper::CommitTransaction(*pwallet, hash, std::move(mtx), errors, txid) != feebumper::Result::OK) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n-    }\n     UniValue result(UniValue::VOBJ);\n-    result.pushKV(\"txid\", txid.GetHex());\n+\n+    // If wallet private keys are enabled, return the new transaction id,\n+    // otherwise return the base64-encoded unsigned PSBT of the new transaction.\n+    if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        if (!feebumper::SignTransaction(*pwallet, mtx)) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n+        }\n+\n+        uint256 txid;\n+        if (feebumper::CommitTransaction(*pwallet, hash, std::move(mtx), errors, txid) != feebumper::Result::OK) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n+        }\n+\n+        result.pushKV(\"txid\", txid.GetHex());\n+    } else {\n+        PartiallySignedTransaction psbtx(mtx);\n+        bool complete = false;\n+        const TransactionError err = FillPSBT(pwallet, psbtx, complete, SIGHASH_ALL, false /* sign */, true /* bip32derivs */);\n+        CHECK_NONFATAL(err == TransactionError::OK);\n+        CHECK_NONFATAL(!complete);\n+        CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);\n+        ssTx << psbtx;\n+        result.pushKV(\"psbt\", EncodeBase64(ssTx.str()));\n+    }\n+\n     result.pushKV(\"origfee\", ValueFromAmount(old_fee));\n     result.pushKV(\"fee\", ValueFromAmount(new_fee));\n     UniValue result_errors(UniValue::VARR);\n@@ -3708,6 +3726,8 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n+    const std::string example_address = \"\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\"\";\n+\n             RPCHelpMan{\"getaddressinfo\",\n                 \"\\nReturn information about the given bitcoin address.\\n\"\n                 \"Some of the information will only be present if the address is in the active wallet.\\n\",\n@@ -3742,32 +3762,33 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"                                                         getaddressinfo output fields for the embedded address, excluding metadata (timestamp, hdkeypath,\\n\"\n             \"                                                         hdseedid) and relation to the wallet (ismine, iswatchonly).\\n\"\n             \"  \\\"iscompressed\\\" : true|false,        (boolean, optional) If the pubkey is compressed.\\n\"\n-            \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address. Defaults to \\\"\\\". Equivalent to the name field in the labels array.\\n\"\n+            \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address. Defaults to \\\"\\\". Equivalent to the label name in the labels array below.\\n\"\n             \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key, if available, expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath, if the key is HD and available.\\n\"\n             \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed.\\n\"\n             \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingerprint of the master key.\\n\"\n-            \"  \\\"labels\\\"                            (object) An array of labels associated with the address. Currently limited to one label but returned\\n\"\n+            \"  \\\"labels\\\"                            (json object) An array of labels associated with the address. Currently limited to one label but returned\\n\"\n             \"                                               as an array to keep the API stable if multiple labels are enabled in the future.\\n\"\n             \"    [\\n\"\n+            \"      \\\"label name\\\" (string) The label name. Defaults to \\\"\\\". Equivalent to the label field above.\\n\\n\"\n+            \"      DEPRECATED, will be removed in 0.21. To re-enable, launch bitcoind with `-deprecatedrpc=labelspurpose`:\\n\"\n             \"      { (json object of label data)\\n\"\n-            \"        \\\"name\\\": \\\"label name\\\" (string) The label name. Defaults to \\\"\\\". Equivalent to the label field above.\\n\"\n-            \"        \\\"purpose\\\": \\\"purpose\\\" (string) The purpose of the associated address (send or receive).\\n\"\n-            \"      },...\\n\"\n+            \"        \\\"name\\\" : \\\"label name\\\" (string) The label name. Defaults to \\\"\\\". Equivalent to the label field above.\\n\"\n+            \"        \\\"purpose\\\" : \\\"purpose\\\" (string) The purpose of the associated address (send or receive).\\n\"\n+            \"      }\\n\"\n             \"    ]\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n-                    HelpExampleCli(\"getaddressinfo\", \"\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\"\") +\n-                    HelpExampleRpc(\"getaddressinfo\", \"\\\"bc1q09vm5lfy0j5reeulh4x5752q25uqqvz34hufdl\\\"\")\n+                    HelpExampleCli(\"getaddressinfo\", example_address) +\n+                    HelpExampleRpc(\"getaddressinfo\", example_address)\n                 },\n             }.Check(request);\n \n     LOCK(pwallet->cs_wallet);\n \n     UniValue ret(UniValue::VOBJ);\n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n-\n     // Make sure the destination is valid\n     if (!IsValidDestination(dest)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n@@ -3793,24 +3814,18 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n     ret.pushKV(\"iswatchonly\", bool(mine & ISMINE_WATCH_ONLY));\n \n-    // Return DescribeWalletAddress fields.\n-    // Always returned: isscript, ischange, iswitness.\n-    // Optional: witness_version, witness_program, script, hex, pubkeys (array),\n-    // sigsrequired, pubkey, embedded, iscompressed.\n     UniValue detail = DescribeWalletAddress(pwallet, dest);\n     ret.pushKVs(detail);\n \n     // Return label field if existing. Currently only one label can be\n     // associated with an address, so the label should be equivalent to the\n-    // value of the name key/value pair in the labels hash array below.\n+    // value of the name key/value pair in the labels array below.\n     if (pwallet->mapAddressBook.count(dest)) {\n         ret.pushKV(\"label\", pwallet->mapAddressBook[dest].name);\n     }\n \n     ret.pushKV(\"ischange\", pwallet->IsChange(scriptPubKey));\n \n-    // Fetch KeyMetadata, if present, for the timestamp, hdkeypath, hdseedid,\n-    // and hdmasterfingerprint fields.\n     ScriptPubKeyMan* spk_man = pwallet->GetScriptPubKeyMan(scriptPubKey);\n     if (spk_man) {\n         if (const CKeyMetadata* meta = spk_man->GetMetadata(dest)) {\n@@ -3823,15 +3838,22 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n         }\n     }\n \n-    // Return a labels array containing a hash of key/value pairs for the label\n-    // name and address purpose. The name value is equivalent to the label field\n-    // above. Currently only one label can be associated with an address, but we\n-    // return an array so the API remains stable if we allow multiple labels to\n-    // be associated with an address in the future.\n+    // Return a `labels` array containing the label associated with the address,\n+    // equivalent to the `label` field above. Currently only one label can be\n+    // associated with an address, but we return an array so the API remains\n+    // stable if we allow multiple labels to be associated with an address in\n+    // the future.\n+    //\n+    // DEPRECATED: The previous behavior of returning an array containing a JSON\n+    // object of `name` and `purpose` key/value pairs has been deprecated.\n     UniValue labels(UniValue::VARR);\n     std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n     if (mi != pwallet->mapAddressBook.end()) {\n-        labels.push_back(AddressBookDataToJSON(mi->second, true));\n+        if (pwallet->chain().rpcEnableDeprecated(\"labelspurpose\")) {\n+            labels.push_back(AddressBookDataToJSON(mi->second, true));\n+        } else {\n+            labels.push_back(mi->second.name);\n+        }\n     }\n     ret.pushKV(\"labels\", std::move(labels));\n "
      },
      {
        "sha": "8b50711280821d7954b3a7773c6777157cd16e6f",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2019 The Bitcoin Core developers\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -420,7 +420,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     void NotifyCanGetAddressesChanged() const;\n     template<typename... Params> void WalletLogPrintf(const std::string& fmt, const Params&... parameters) const;\n     CWallet& m_wallet;\n-    CCriticalSection& cs_wallet;\n+    RecursiveMutex& cs_wallet;\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "0e0f06c64cde6402820023076a7ac3b1024815b7",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -78,6 +78,7 @@ static void add_coin(CWallet& wallet, const CAmount& nValue, int nAge = 6*24, bo\n     if (fIsFromMe)\n     {\n         wtx->m_amounts[CWalletTx::DEBIT].Set(ISMINE_SPENDABLE, 1);\n+        wtx->m_is_cache_empty = false;\n     }\n     COutput output(wtx.get(), nInput, nAge, true /* spendable */, true /* solvable */, true /* safe */);\n     vCoins.push_back(output);"
      },
      {
        "sha": "724997a36df693c4695a51af92838308ae51c227",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 15,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -45,8 +45,9 @@ const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS{\n \n static const size_t OUTPUT_GROUP_MAX_ENTRIES = 10;\n \n-static CCriticalSection cs_wallets;\n+static RecursiveMutex cs_wallets;\n static std::vector<std::shared_ptr<CWallet>> vpwallets GUARDED_BY(cs_wallets);\n+static std::list<LoadWalletFn> g_load_wallet_fns GUARDED_BY(cs_wallets);\n \n bool AddWallet(const std::shared_ptr<CWallet>& wallet)\n {\n@@ -89,6 +90,13 @@ std::shared_ptr<CWallet> GetWallet(const std::string& name)\n     return nullptr;\n }\n \n+std::unique_ptr<interfaces::Handler> HandleLoadWallet(LoadWalletFn load_wallet)\n+{\n+    LOCK(cs_wallets);\n+    auto it = g_load_wallet_fns.emplace(g_load_wallet_fns.end(), std::move(load_wallet));\n+    return interfaces::MakeHandler([it] { LOCK(cs_wallets); g_load_wallet_fns.erase(it); });\n+}\n+\n static Mutex g_wallet_release_mutex;\n static std::condition_variable g_wallet_release_cv;\n static std::set<std::string> g_unloading_wallet_set;\n@@ -700,7 +708,7 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n     return success;\n }\n \n-void CWallet::SetUsedDestinationState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used)\n+void CWallet::SetUsedDestinationState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used, std::set<CTxDestination>& tx_destinations)\n {\n     AssertLockHeld(cs_wallet);\n     const CWalletTx* srctx = GetWalletTx(hash);\n@@ -710,25 +718,43 @@ void CWallet::SetUsedDestinationState(WalletBatch& batch, const uint256& hash, u\n     if (ExtractDestination(srctx->tx->vout[n].scriptPubKey, dst)) {\n         if (IsMine(dst)) {\n             if (used && !GetDestData(dst, \"used\", nullptr)) {\n-                AddDestData(batch, dst, \"used\", \"p\"); // p for \"present\", opposite of absent (null)\n+                if (AddDestData(batch, dst, \"used\", \"p\")) { // p for \"present\", opposite of absent (null)\n+                    tx_destinations.insert(dst);\n+                }\n             } else if (!used && GetDestData(dst, \"used\", nullptr)) {\n                 EraseDestData(batch, dst, \"used\");\n             }\n         }\n     }\n }\n \n-bool CWallet::IsUsedDestination(const CTxDestination& dst) const\n-{\n-    LOCK(cs_wallet);\n-    return IsMine(dst) && GetDestData(dst, \"used\", nullptr);\n-}\n-\n bool CWallet::IsUsedDestination(const uint256& hash, unsigned int n) const\n {\n+    AssertLockHeld(cs_wallet);\n     CTxDestination dst;\n     const CWalletTx* srctx = GetWalletTx(hash);\n-    return srctx && ExtractDestination(srctx->tx->vout[n].scriptPubKey, dst) && IsUsedDestination(dst);\n+    if (srctx) {\n+        assert(srctx->tx->vout.size() > n);\n+        LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n+        // When descriptor wallets arrive, these additional checks are\n+        // likely superfluous and can be optimized out\n+        assert(spk_man != nullptr);\n+        for (const auto& keyid : GetAffectedKeys(srctx->tx->vout[n].scriptPubKey, *spk_man)) {\n+            WitnessV0KeyHash wpkh_dest(keyid);\n+            if (GetDestData(wpkh_dest, \"used\", nullptr)) {\n+                return true;\n+            }\n+            ScriptHash sh_wpkh_dest(GetScriptForDestination(wpkh_dest));\n+            if (GetDestData(sh_wpkh_dest, \"used\", nullptr)) {\n+                return true;\n+            }\n+            PKHash pkh_dest(keyid);\n+            if (GetDestData(pkh_dest, \"used\", nullptr)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n }\n \n bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n@@ -741,10 +767,14 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n \n     if (IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE)) {\n         // Mark used destinations\n+        std::set<CTxDestination> tx_destinations;\n+\n         for (const CTxIn& txin : wtxIn.tx->vin) {\n             const COutPoint& op = txin.prevout;\n-            SetUsedDestinationState(batch, op.hash, op.n, true);\n+            SetUsedDestinationState(batch, op.hash, op.n, true, tx_destinations);\n         }\n+\n+        MarkDestinationsDirty(tx_destinations);\n     }\n \n     // Inserts only if not already there, returns tx inserted or tx found\n@@ -1765,6 +1795,7 @@ CAmount CWalletTx::GetCachableAmount(AmountType type, const isminefilter& filter\n     auto& amount = m_amounts[type];\n     if (recalculate || !amount.m_cached[filter]) {\n         amount.Set(filter, type == DEBIT ? pwallet->GetDebit(*tx, filter) : pwallet->GetCredit(*tx, filter));\n+        m_is_cache_empty = false;\n     }\n     return amount.m_value[filter];\n }\n@@ -1841,6 +1872,7 @@ CAmount CWalletTx::GetAvailableCredit(bool fUseCache, const isminefilter& filter\n \n     if (allow_cache) {\n         m_amounts[AVAILABLE_CREDIT].Set(filter, nCredit);\n+        m_is_cache_empty = false;\n     }\n \n     return nCredit;\n@@ -2167,8 +2199,8 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins(interfaces::Ch\n \n     std::vector<COutPoint> lockedCoins;\n     ListLockedCoins(lockedCoins);\n-    // Include watch-only for wallets without private keys\n-    const bool include_watch_only = IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n+    // Include watch-only for LegacyScriptPubKeyMan wallets without private keys\n+    const bool include_watch_only = GetLegacyScriptPubKeyMan() && IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS);\n     const isminetype is_mine_filter = include_watch_only ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n     for (const COutPoint& output : lockedCoins) {\n         auto it = mapWallet.find(output.hash);\n@@ -3138,6 +3170,20 @@ int64_t CWallet::GetOldestKeyPoolTime()\n     return oldestKey;\n }\n \n+void CWallet::MarkDestinationsDirty(const std::set<CTxDestination>& destinations) {\n+    for (auto& entry : mapWallet) {\n+        CWalletTx& wtx = entry.second;\n+        if (wtx.m_is_cache_empty) continue;\n+        for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n+            CTxDestination dst;\n+            if (ExtractDestination(wtx.tx->vout[i].scriptPubKey, dst) && destinations.count(dst)) {\n+                wtx.MarkDirty();\n+                break;\n+            }\n+        }\n+    }\n+}\n+\n std::map<CTxDestination, CAmount> CWallet::GetAddressBalances(interfaces::Chain::Lock& locked_chain)\n {\n     std::map<CTxDestination, CAmount> balances;\n@@ -3895,7 +3941,12 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n     }\n \n-    chain.loadWallet(interfaces::MakeWallet(walletInstance));\n+    {\n+        LOCK(cs_wallets);\n+        for (auto& load_wallet : g_load_wallet_fns) {\n+            load_wallet(interfaces::MakeWallet(walletInstance));\n+        }\n+    }\n \n     // Register with the validation interface. It's ok to do this after rescan since we're still holding locked_chain.\n     walletInstance->handleNotifications();"
      },
      {
        "sha": "44bfa20612484ee2777f30a3b384d835dda17e50",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 26,
        "deletions": 10,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -35,6 +35,8 @@\n \n #include <boost/signals2/signal.hpp>\n \n+using LoadWalletFn = std::function<void(std::unique_ptr<interfaces::Wallet> wallet)>;\n+\n //! Explicitly unload and delete the wallet.\n //! Blocks the current thread after signaling the unload intent so that all\n //! wallet clients release the wallet.\n@@ -48,6 +50,7 @@ bool HasWallets();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings);\n+std::unique_ptr<interfaces::Handler> HandleLoadWallet(LoadWalletFn load_wallet);\n \n enum class WalletCreationStatus {\n     SUCCESS,\n@@ -310,6 +313,13 @@ class CWalletTx\n     enum AmountType { DEBIT, CREDIT, IMMATURE_CREDIT, AVAILABLE_CREDIT, AMOUNTTYPE_ENUM_ELEMENTS };\n     CAmount GetCachableAmount(AmountType type, const isminefilter& filter, bool recalculate = false) const;\n     mutable CachableAmount m_amounts[AMOUNTTYPE_ENUM_ELEMENTS];\n+    /**\n+     * This flag is true if all m_amounts caches are empty. This is particularly\n+     * useful in places where MarkDirty is conditionally called and the\n+     * condition can be expensive and thus can be skipped if the flag is true.\n+     * See MarkDestinationsDirty.\n+     */\n+    mutable bool m_is_cache_empty{true};\n     mutable bool fChangeCached;\n     mutable bool fInMempool;\n     mutable CAmount nChangeCached;\n@@ -436,6 +446,7 @@ class CWalletTx\n         m_amounts[IMMATURE_CREDIT].Reset();\n         m_amounts[AVAILABLE_CREDIT].Reset();\n         fChangeCached = false;\n+        m_is_cache_empty = true;\n     }\n \n     void BindWallet(CWallet *pwalletIn)\n@@ -696,7 +707,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n      * Main wallet lock.\n      * This lock protects all the fields added by CWallet.\n      */\n-    mutable CCriticalSection cs_wallet;\n+    mutable RecursiveMutex cs_wallet;\n \n     /** Get database handle used by this wallet. Ideally this function would\n      * not be necessary.\n@@ -798,10 +809,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     bool IsSpent(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    // Whether this or any UTXO with the same CTxDestination has been spent.\n-    bool IsUsedDestination(const CTxDestination& dst) const;\n-    bool IsUsedDestination(const uint256& hash, unsigned int n) const;\n-    void SetUsedDestinationState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    // Whether this or any known UTXO with the same single key has been spent.\n+    bool IsUsedDestination(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void SetUsedDestinationState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used, std::set<CTxDestination>& tx_destinations) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const;\n \n@@ -913,9 +923,9 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n      * Should be called after CreateTransaction unless you want to abort\n      * broadcasting the transaction.\n      *\n-     * @param tx[in] The transaction to be broadcast.\n-     * @param mapValue[in] key-values to be set on the transaction.\n-     * @param orderForm[in] BIP 70 / BIP 21 order form details to be set on the transaction.\n+     * @param[in] tx The transaction to be broadcast.\n+     * @param[in] mapValue key-values to be set on the transaction.\n+     * @param[in] orderForm BIP 70 / BIP 21 order form details to be set on the transaction.\n      */\n     void CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm);\n \n@@ -961,6 +971,12 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     std::set<CTxDestination> GetLabelAddresses(const std::string& label) const;\n \n+    /**\n+     * Marks all outputs in each one of the destinations dirty, so their cache is\n+     * reset and does not return outdated information.\n+     */\n+    void MarkDestinationsDirty(const std::set<CTxDestination>& destinations) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     bool GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error);\n     bool GetNewChangeDestination(const OutputType type, CTxDestination& dest, std::string& error);\n \n@@ -1131,7 +1147,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n     // Temporary LegacyScriptPubKeyMan accessors and aliases.\n     friend class LegacyScriptPubKeyMan;\n     std::unique_ptr<LegacyScriptPubKeyMan> m_spk_man = MakeUnique<LegacyScriptPubKeyMan>(*this);\n-    CCriticalSection& cs_KeyStore = m_spk_man->cs_KeyStore;\n+    RecursiveMutex& cs_KeyStore = m_spk_man->cs_KeyStore;\n     LegacyScriptPubKeyMan::KeyMap& mapKeys GUARDED_BY(cs_KeyStore) = m_spk_man->mapKeys;\n     LegacyScriptPubKeyMan::ScriptMap& mapScripts GUARDED_BY(cs_KeyStore) = m_spk_man->mapScripts;\n     LegacyScriptPubKeyMan::CryptedKeyMap& mapCryptedKeys GUARDED_BY(cs_KeyStore) = m_spk_man->mapCryptedKeys;"
      },
      {
        "sha": "1a6512548062a274849c0a7d7231053d85f930e4",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -124,7 +124,7 @@ class CKeyMetadata\n     std::string hdKeypath; //optional HD/bip32 keypath. Still used to determine whether a key is a seed. Also kept for backwards compatibility\n     CKeyID hd_seed_id; //id of the HD seed used to derive this key\n     KeyOriginInfo key_origin; // Key origin info with path and fingerprint\n-    bool has_key_origin = false; //< Whether the key_origin is useful\n+    bool has_key_origin = false; //!< Whether the key_origin is useful\n \n     CKeyMetadata()\n     {"
      },
      {
        "sha": "04806903c2bd2d4ff4328bf5423682f8d9ca6400",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2015-2019 The Bitcoin Core developers\n+// Copyright (c) 2015-2020 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -112,7 +112,8 @@ bool CZMQAbstractPublishNotifier::Initialize(void *pcontext)\n \n void CZMQAbstractPublishNotifier::Shutdown()\n {\n-    assert(psocket);\n+    // Early return if Initialize was not called\n+    if (!psocket) return;\n \n     int count = mapPublishNotifiers.count(address);\n "
      },
      {
        "sha": "00f2833f55b1fbc15fcdff5d548ebb4042ef8157",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,7 @@\n #!/usr/bin/env python3\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Combine logs from multiple bitcoin nodes as well as the test_framework log.\n \n This streams the combined log output to stdout. Use combine_logs.py > outputfile"
      },
      {
        "sha": "003a74184b3d3f8d154329bd8b5c1dad1d8fe5dd",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2019 The Bitcoin Core developers\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test various command line arguments and configuration file parameters.\"\"\"\n@@ -79,7 +79,7 @@ def test_config_file_parser(self):\n             conf.write('')  # clear\n \n     def test_log_buffer(self):\n-        with self.nodes[0].assert_debug_log(expected_msgs=['Warning: parsed potentially confusing double-negative -connect=0']):\n+        with self.nodes[0].assert_debug_log(expected_msgs=['Warning: parsed potentially confusing double-negative -connect=0\\n']):\n             self.start_node(0, extra_args=['-noconnect=0'])\n         self.stop_node(0)\n "
      },
      {
        "sha": "89c55f31f3b1cadebbf2927b616c35c5859c4731",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -59,6 +59,10 @@ def test_basic(self):\n         # Note that the publishing order is not defined in the documentation and\n         # is subject to change.\n         import zmq\n+\n+        # Invalid zmq arguments don't take down the node, see #17185.\n+        self.restart_node(0, [\"-zmqpubrawtx=foo\", \"-zmqpubhashtx=bar\"])\n+\n         address = 'tcp://127.0.0.1:28332'\n         socket = self.ctx.socket(zmq.SUB)\n         socket.set(zmq.RCVTIMEO, 60000)"
      },
      {
        "sha": "900cabccda67feaeeaaea0dd7990e76477e08001",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -8,6 +8,7 @@\n import math\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.key import ECKey\n from test_framework.messages import (\n     BIP125_SEQUENCE_NUMBER,\n     COIN,\n@@ -20,6 +21,9 @@\n     hash160,\n     CScript,\n     OP_0,\n+    OP_2,\n+    OP_3,\n+    OP_CHECKMULTISIG,\n     OP_EQUAL,\n     OP_HASH160,\n     OP_RETURN,\n@@ -35,7 +39,7 @@ class MempoolAcceptanceTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\n-            '-txindex',\n+            '-txindex','-permitbaremultisig=0',\n         ]] * self.num_nodes\n         self.supports_cli = False\n \n@@ -262,6 +266,15 @@ def run_test(self):\n             rawtxs=[tx.serialize().hex()],\n         )\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n+        key = ECKey()\n+        key.generate()\n+        pubkey = key.get_pubkey().get_bytes()\n+        tx.vout[0].scriptPubKey = CScript([OP_2, pubkey, pubkey, pubkey, OP_3, OP_CHECKMULTISIG])  # Some bare multisig script (2-of-3)\n+        self.check_mempool_result(\n+            result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'bare-multisig'}],\n+            rawtxs=[tx.serialize().hex()],\n+        )\n+        tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vin[0].scriptSig = CScript([OP_HASH160])  # Some not-pushonly scriptSig\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'scriptsig-not-pushonly'}],"
      },
      {
        "sha": "07eacf410d888eda5b4978535147663b978bd472",
        "filename": "test/functional/p2p_invalid_messages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/p2p_invalid_messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/p2p_invalid_messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_messages.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -145,13 +145,13 @@ def run_test(self):\n     def test_magic_bytes(self):\n         conn = self.nodes[0].add_p2p_connection(P2PDataStore())\n \n-        def swap_magic_bytes():\n+        async def swap_magic_bytes():\n             conn._on_data = lambda: None  # Need to ignore all incoming messages from now, since they come with \"invalid\" magic bytes\n             conn.magic_bytes = b'\\x00\\x11\\x22\\x32'\n \n         # Call .result() to block until the atomic swap is complete, otherwise\n         # we might run into races later on\n-        asyncio.run_coroutine_threadsafe(asyncio.coroutine(swap_magic_bytes)(), NetworkThread.network_event_loop).result()\n+        asyncio.run_coroutine_threadsafe(swap_magic_bytes(), NetworkThread.network_event_loop).result()\n \n         with self.nodes[0].assert_debug_log(['PROCESSMESSAGE: INVALID MESSAGESTART ping']):\n             conn.send_message(messages.msg_ping(nonce=0xff))"
      },
      {
        "sha": "193900dba20a4e6a43eba033f297b2eed8e4c229",
        "filename": "test/functional/rpc_getaddressinfo_labels_purpose_deprecation.py",
        "status": "added",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/rpc_getaddressinfo_labels_purpose_deprecation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/rpc_getaddressinfo_labels_purpose_deprecation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getaddressinfo_labels_purpose_deprecation.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -0,0 +1,48 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test deprecation of RPC getaddressinfo `labels` returning an array\n+containing a JSON hash of `name` and purpose` key-value pairs. It now\n+returns an array of label names.\n+\n+\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+LABELS_TO_TEST = frozenset({\"\" , \"New \ud834\udd61 $<#>&!\u0440\u044b\u0431\u0430 Label\"})\n+\n+class GetAddressInfoLabelsPurposeDeprecationTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.setup_clean_chain = False\n+        # Start node[0] with -deprecatedrpc=labelspurpose and node[1] without.\n+        self.extra_args = [[\"-deprecatedrpc=labelspurpose\"], []]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_labels(self, node_num, label_name, expected_value):\n+        node = self.nodes[node_num]\n+        address = node.getnewaddress()\n+        if label_name != \"\":\n+            node.setlabel(address, label_name)\n+            self.log.info(\"  set label to {}\".format(label_name))\n+        labels = node.getaddressinfo(address)[\"labels\"]\n+        self.log.info(\"  labels = {}\".format(labels))\n+        assert_equal(labels, expected_value)\n+\n+    def run_test(self):\n+        \"\"\"Test getaddressinfo labels with and without -deprecatedrpc flag.\"\"\"\n+        self.log.info(\"Test getaddressinfo labels with -deprecatedrpc flag\")\n+        for label in LABELS_TO_TEST:\n+            self.test_labels(node_num=0, label_name=label, expected_value=[{\"name\": label, \"purpose\": \"receive\"}])\n+\n+        self.log.info(\"Test getaddressinfo labels without -deprecatedrpc flag\")\n+        for label in LABELS_TO_TEST:\n+            self.test_labels(node_num=1, label_name=label, expected_value=[label])\n+\n+\n+if __name__ == '__main__':\n+    GetAddressInfoLabelsPurposeDeprecationTest().main()"
      },
      {
        "sha": "eb537015fb27da9ce0c4f783efdff67394fb6311",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Useful util functions for testing the wallet\"\"\"\n@@ -88,11 +88,6 @@ def get_multisig(node):\n                     p2sh_p2wsh_script=CScript([OP_HASH160, witness_script, OP_EQUAL]).hex(),\n                     p2sh_p2wsh_addr=script_to_p2sh_p2wsh(script_code))\n \n-def labels_value(name=\"\", purpose=\"receive\"):\n-    \"\"\"Generate a getaddressinfo labels array from a name and purpose.\n-    Often used as the value of a labels kwarg for calling test_address below.\"\"\"\n-    return [{\"name\": name, \"purpose\": purpose}]\n-\n def test_address(node, address, **kwargs):\n     \"\"\"Get address info for `address` and test whether the returned values are as expected.\"\"\"\n     addr_info = node.getaddressinfo(address)"
      },
      {
        "sha": "acb559911b4ae95941333c262bd0c2e795dd91ad",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -212,6 +212,7 @@\n     'p2p_permissions.py',\n     'feature_blocksdir.py',\n     'feature_config_args.py',\n+    'rpc_getaddressinfo_labels_purpose_deprecation.py',\n     'rpc_help.py',\n     'feature_help.py',\n     'feature_shutdown.py',"
      },
      {
        "sha": "1ca02a695c470ad3b33f32c240f14fc7b4367ef5",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 53,
        "deletions": 5,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the avoid_reuse and setwalletflag features.\"\"\"\n@@ -86,7 +86,13 @@ def run_test(self):\n         reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n         self.test_fund_send_fund_senddirty()\n         reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n-        self.test_fund_send_fund_send()\n+        self.test_fund_send_fund_send(\"legacy\")\n+        reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n+        self.test_fund_send_fund_send(\"p2sh-segwit\")\n+        reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n+        self.test_fund_send_fund_send(\"bech32\")\n+        reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n+        self.test_getbalances_used()\n \n     def test_persistence(self):\n         '''Test that wallet files persist the avoid_reuse flag.'''\n@@ -182,7 +188,7 @@ def test_fund_send_fund_senddirty(self):\n         assert_approx(self.nodes[1].getbalance(), 5, 0.001)\n         assert_approx(self.nodes[1].getbalance(avoid_reuse=False), 5, 0.001)\n \n-    def test_fund_send_fund_send(self):\n+    def test_fund_send_fund_send(self, second_addr_type):\n         '''\n         Test the simple case where [1] generates a new address A, then\n         [0] sends 10 BTC to A.\n@@ -193,7 +199,7 @@ def test_fund_send_fund_send(self):\n         '''\n         self.log.info(\"Test fund send fund send\")\n \n-        fundaddr = self.nodes[1].getnewaddress()\n+        fundaddr = self.nodes[1].getnewaddress(label=\"\", address_type=\"legacy\")\n         retaddr = self.nodes[0].getnewaddress()\n \n         self.nodes[0].sendtoaddress(fundaddr, 10)\n@@ -214,7 +220,19 @@ def test_fund_send_fund_send(self):\n         # getbalances should show no used, 5 btc trusted\n         assert_balances(self.nodes[1], mine={\"used\": 0, \"trusted\": 5})\n \n-        self.nodes[0].sendtoaddress(fundaddr, 10)\n+        # For the second send, we transmute it to a related single-key address\n+        # to make sure it's also detected as re-use\n+        fund_spk = self.nodes[0].getaddressinfo(fundaddr)[\"scriptPubKey\"]\n+        fund_decoded = self.nodes[0].decodescript(fund_spk)\n+        if second_addr_type == \"p2sh-segwit\":\n+            new_fundaddr = fund_decoded[\"segwit\"][\"p2sh-segwit\"]\n+        elif second_addr_type == \"bech32\":\n+            new_fundaddr = fund_decoded[\"segwit\"][\"addresses\"][0]\n+        else:\n+            new_fundaddr = fundaddr\n+            assert_equal(second_addr_type, \"legacy\")\n+\n+        self.nodes[0].sendtoaddress(new_fundaddr, 10)\n         self.nodes[0].generate(1)\n         self.sync_all()\n \n@@ -240,5 +258,35 @@ def test_fund_send_fund_send(self):\n         assert_approx(self.nodes[1].getbalance(), 1, 0.001)\n         assert_approx(self.nodes[1].getbalance(avoid_reuse=False), 11, 0.001)\n \n+    def test_getbalances_used(self):\n+        '''\n+        getbalances and listunspent should pick up on reused addresses\n+        immediately, even for address reusing outputs created before the first\n+        transaction was spending from that address\n+        '''\n+        self.log.info(\"Test getbalances used category\")\n+\n+        # node under test should be completely empty\n+        assert_equal(self.nodes[1].getbalance(avoid_reuse=False), 0)\n+\n+        new_addr = self.nodes[1].getnewaddress()\n+        ret_addr = self.nodes[0].getnewaddress()\n+\n+        # send multiple transactions, reusing one address\n+        for _ in range(11):\n+            self.nodes[0].sendtoaddress(new_addr, 1)\n+\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # send transaction that should not use all the available outputs\n+        # per the current coin selection algorithm\n+        self.nodes[1].sendtoaddress(ret_addr, 5)\n+\n+        # getbalances and listunspent should show the remaining outputs\n+        # in the reused address as used/reused\n+        assert_unspent(self.nodes[1], total_count=2, total_sum=6, reused_count=1, reused_sum=1)\n+        assert_balances(self.nodes[1], mine={\"used\": 1, \"trusted\": 5})\n+\n if __name__ == '__main__':\n     AvoidReuseTest().main()"
      },
      {
        "sha": "4780e9263eab498198f907fa75df481cdb689c0c",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -15,10 +15,7 @@\n     connect_nodes,\n     wait_until,\n )\n-from test_framework.wallet_util import (\n-    labels_value,\n-    test_address,\n-)\n+from test_framework.wallet_util import test_address\n \n \n class WalletTest(BitcoinTestFramework):\n@@ -395,7 +392,7 @@ def run_test(self):\n             for label in [u'\u0440\u044b\u0431\u0430', u'\ud834\udd61']:\n                 addr = self.nodes[0].getnewaddress()\n                 self.nodes[0].setlabel(addr, label)\n-                test_address(self.nodes[0], addr, label=label, labels=labels_value(name=label))\n+                test_address(self.nodes[0], addr, label=label, labels=[label])\n                 assert label in self.nodes[0].listlabels()\n         self.nodes[0].rpc.ensure_ascii = True  # restore to default\n "
      },
      {
        "sha": "4eb0d19a4fa31196a27da99600dd0744ce592442",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 82,
        "deletions": 0,
        "changes": 82,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -78,6 +78,7 @@ def run_test(self):\n         test_small_output_fails(rbf_node, dest_address)\n         test_dust_to_fee(rbf_node, dest_address)\n         test_settxfee(rbf_node, dest_address)\n+        test_watchonly_psbt(self, peer_node, rbf_node, dest_address)\n         test_rebumping(rbf_node, dest_address)\n         test_rebumping_not_replaceable(rbf_node, dest_address)\n         test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n@@ -103,6 +104,7 @@ def test_simple_bumpfee_succeeds(self, mode, rbf_node, peer_node, dest_address):\n     assert_equal(bumped_tx[\"errors\"], [])\n     assert bumped_tx[\"fee\"] > -rbftx[\"fee\"]\n     assert_equal(bumped_tx[\"origfee\"], -rbftx[\"fee\"])\n+    assert \"psbt\" not in bumped_tx\n     # check that bumped_tx propagates, original tx was evicted and has a wallet conflict\n     self.sync_mempools((rbf_node, peer_node))\n     assert bumped_tx[\"txid\"] in rbf_node.getrawmempool()\n@@ -280,6 +282,86 @@ def test_maxtxfee_fails(test, rbf_node, dest_address):\n     test.restart_node(1, test.extra_args[1])\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n+def test_watchonly_psbt(test, peer_node, rbf_node, dest_address):\n+    priv_rec_desc = \"wpkh([00000001/84'/1'/0']tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0/*)#rweraev0\"\n+    pub_rec_desc = rbf_node.getdescriptorinfo(priv_rec_desc)[\"descriptor\"]\n+    priv_change_desc = \"wpkh([00000001/84'/1'/0']tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1/*)#j6uzqvuh\"\n+    pub_change_desc = rbf_node.getdescriptorinfo(priv_change_desc)[\"descriptor\"]\n+    # Create a wallet with private keys that can sign PSBTs\n+    rbf_node.createwallet(wallet_name=\"signer\", disable_private_keys=False, blank=True)\n+    signer = rbf_node.get_wallet_rpc(\"signer\")\n+    assert signer.getwalletinfo()['private_keys_enabled']\n+    result = signer.importmulti([{\n+        \"desc\": priv_rec_desc,\n+        \"timestamp\": 0,\n+        \"range\": [0,1],\n+        \"internal\": False,\n+        \"keypool\": False # Keys can only be imported to the keypool when private keys are disabled\n+    },\n+    {\n+        \"desc\": priv_change_desc,\n+        \"timestamp\": 0,\n+        \"range\": [0, 0],\n+        \"internal\": True,\n+        \"keypool\": False\n+    }])\n+    assert_equal(result, [{'success': True}, {'success': True}])\n+\n+    # Create another wallet with just the public keys, which creates PSBTs\n+    rbf_node.createwallet(wallet_name=\"watcher\", disable_private_keys=True, blank=True)\n+    watcher = rbf_node.get_wallet_rpc(\"watcher\")\n+    assert not watcher.getwalletinfo()['private_keys_enabled']\n+\n+    result = watcher.importmulti([{\n+        \"desc\": pub_rec_desc,\n+        \"timestamp\": 0,\n+        \"range\": [0,10],\n+        \"internal\": False,\n+        \"keypool\": True,\n+        \"watchonly\": True\n+    },\n+    {\n+        \"desc\": pub_change_desc,\n+        \"timestamp\": 0,\n+        \"range\": [0, 10],\n+        \"internal\": True,\n+        \"keypool\": True,\n+        \"watchonly\": True\n+    }])\n+    assert_equal(result, [{'success': True}, {'success': True}])\n+\n+    funding_address1 = watcher.getnewaddress(address_type='bech32')\n+    funding_address2 = watcher.getnewaddress(address_type='bech32')\n+    peer_node.sendmany(\"\", {funding_address1: 0.001, funding_address2: 0.001})\n+    peer_node.generate(1)\n+    test.sync_all()\n+\n+    # Create single-input PSBT for transaction to be bumped\n+    psbt = watcher.walletcreatefundedpsbt([], {dest_address:0.0005}, 0, {\"feeRate\": 0.00001}, True)['psbt']\n+    psbt_signed = signer.walletprocesspsbt(psbt=psbt, sign=True, sighashtype=\"ALL\", bip32derivs=True)\n+    psbt_final = watcher.finalizepsbt(psbt_signed[\"psbt\"])\n+    original_txid = watcher.sendrawtransaction(psbt_final[\"hex\"])\n+    assert_equal(len(watcher.decodepsbt(psbt)[\"tx\"][\"vin\"]), 1)\n+\n+    # Bump fee, obnoxiously high to add additional watchonly input\n+    bumped_psbt = watcher.bumpfee(original_txid, {\"fee_rate\":0.005})\n+    assert_greater_than(len(watcher.decodepsbt(bumped_psbt['psbt'])[\"tx\"][\"vin\"]), 1)\n+    assert \"txid\" not in bumped_psbt\n+    assert_equal(bumped_psbt[\"origfee\"], -watcher.gettransaction(original_txid)[\"fee\"])\n+    assert not watcher.finalizepsbt(bumped_psbt[\"psbt\"])[\"complete\"]\n+\n+    # Sign bumped transaction\n+    bumped_psbt_signed = signer.walletprocesspsbt(psbt=bumped_psbt[\"psbt\"], sign=True, sighashtype=\"ALL\", bip32derivs=True)\n+    bumped_psbt_final = watcher.finalizepsbt(bumped_psbt_signed[\"psbt\"])\n+    assert bumped_psbt_final[\"complete\"]\n+\n+    # Broadcast bumped transaction\n+    bumped_txid = watcher.sendrawtransaction(bumped_psbt_final[\"hex\"])\n+    assert bumped_txid in rbf_node.getrawmempool()\n+    assert original_txid not in rbf_node.getrawmempool()\n+\n+    rbf_node.unloadwallet(\"watcher\")\n+    rbf_node.unloadwallet(\"signer\")\n \n def test_rebumping(rbf_node, dest_address):\n     # check that re-bumping the original tx fails, but bumping the bumper succeeds"
      },
      {
        "sha": "f3a28785ce03f2ad2cd3590b79a1ae5ae1869228",
        "filename": "test/functional/wallet_import_with_label.py",
        "status": "modified",
        "additions": 11,
        "deletions": 30,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/wallet_import_with_label.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/wallet_import_with_label.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_with_label.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Copyright (c) 2018-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the behavior of RPC importprivkey on set and unset labels of\n@@ -11,10 +11,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.wallet_util import (\n-    labels_value,\n-    test_address,\n-)\n+from test_framework.wallet_util import test_address\n \n \n class ImportWithLabel(BitcoinTestFramework):\n@@ -40,19 +37,15 @@ def run_test(self):\n                      iswatchonly=True,\n                      ismine=False,\n                      label=label,\n-                     labels=labels_value(name=label))\n+                     labels=[label])\n \n         self.log.info(\n             \"Import the watch-only address's private key without a \"\n             \"label and the address should keep its label.\"\n         )\n         priv_key = self.nodes[0].dumpprivkey(address)\n         self.nodes[1].importprivkey(priv_key)\n-\n-        test_address(self.nodes[1],\n-                     address,\n-                     label=label,\n-                     labels=labels_value(name=label))\n+        test_address(self.nodes[1], address, label=label, labels=[label])\n \n         self.log.info(\n             \"Test importaddress without label and importprivkey with label.\"\n@@ -65,7 +58,7 @@ def run_test(self):\n                      iswatchonly=True,\n                      ismine=False,\n                      label=\"\",\n-                     labels=labels_value())\n+                     labels=[\"\"])\n \n         self.log.info(\n             \"Import the watch-only address's private key with a \"\n@@ -75,10 +68,7 @@ def run_test(self):\n         label2 = \"Test Label 2\"\n         self.nodes[1].importprivkey(priv_key2, label2)\n \n-        test_address(self.nodes[1],\n-                     address2,\n-                     label=label2,\n-                     labels=labels_value(name=label2))\n+        test_address(self.nodes[1], address2, label=label2, labels=[label2])\n \n         self.log.info(\"Test importaddress with label and importprivkey with label.\")\n         self.log.info(\"Import a watch-only address with a label.\")\n@@ -90,7 +80,7 @@ def run_test(self):\n                      iswatchonly=True,\n                      ismine=False,\n                      label=label3_addr,\n-                     labels=labels_value(name=label3_addr))\n+                     labels=[label3_addr])\n \n         self.log.info(\n             \"Import the watch-only address's private key with a \"\n@@ -100,10 +90,7 @@ def run_test(self):\n         label3_priv = \"Test Label 3 for importprivkey\"\n         self.nodes[1].importprivkey(priv_key3, label3_priv)\n \n-        test_address(self.nodes[1],\n-                     address3,\n-                     label=label3_priv,\n-                     labels=labels_value(name=label3_priv))\n+        test_address(self.nodes[1], address3, label=label3_priv, labels=[label3_priv])\n \n         self.log.info(\n             \"Test importprivkey won't label new dests with the same \"\n@@ -118,7 +105,7 @@ def run_test(self):\n                      iswatchonly=True,\n                      ismine=False,\n                      label=label4_addr,\n-                     labels=labels_value(name=label4_addr),\n+                     labels=[label4_addr],\n                      embedded=None)\n \n         self.log.info(\n@@ -131,15 +118,9 @@ def run_test(self):\n         self.nodes[1].importprivkey(priv_key4)\n         embedded_addr = self.nodes[1].getaddressinfo(address4)['embedded']['address']\n \n-        test_address(self.nodes[1],\n-                     embedded_addr,\n-                     label=\"\",\n-                     labels=labels_value())\n+        test_address(self.nodes[1], embedded_addr, label=\"\", labels=[\"\"])\n \n-        test_address(self.nodes[1],\n-                     address4,\n-                     label=label4_addr,\n-                     labels=labels_value(name=label4_addr))\n+        test_address(self.nodes[1], address4, label=label4_addr, labels=[label4_addr])\n \n         self.stop_nodes()\n "
      },
      {
        "sha": "eb55578bfdc564882b54cea29e5b97f244ae1f2f",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -29,7 +29,6 @@\n from test_framework.wallet_util import (\n     get_key,\n     get_multisig,\n-    labels_value,\n     test_address,\n )\n \n@@ -571,7 +570,7 @@ def run_test(self):\n                      solvable=True,\n                      ismine=True,\n                      label=p2sh_p2wpkh_label,\n-                     labels=labels_value(name=p2sh_p2wpkh_label))\n+                     labels=[p2sh_p2wpkh_label])\n \n         # Test ranged descriptor fails if range is not specified\n         xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n@@ -643,7 +642,7 @@ def run_test(self):\n                      solvable=True,\n                      ismine=False,\n                      label=p2pkh_label,\n-                     labels=labels_value(name=p2pkh_label))\n+                     labels=[p2pkh_label])\n \n         # Test import fails if both desc and scriptPubKey are provided\n         key = get_key(self.nodes[0])"
      },
      {
        "sha": "037a09b05f4f846c7e8ef6da4b54ed6c1c5caf6f",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 4,
        "deletions": 11,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2019 The Bitcoin Core developers\n+# Copyright (c) 2016-2020 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test label RPCs.\n@@ -13,10 +13,8 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n-from test_framework.wallet_util import (\n-    labels_value,\n-    test_address,\n-)\n+from test_framework.wallet_util import test_address\n+\n \n class WalletLabelsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -157,12 +155,7 @@ def verify(self, node):\n         if self.receive_address is not None:\n             assert self.receive_address in self.addresses\n         for address in self.addresses:\n-            test_address(\n-                node,\n-                address,\n-                label=self.name,\n-                labels=labels_value(name=self.name, purpose=self.purpose[address])\n-             )\n+            test_address(node, address, label=self.name, labels=[self.name])\n         assert self.name in node.listlabels()\n         assert_equal(\n             node.getaddressesbylabel(self.name),"
      },
      {
        "sha": "4b83e1613f1cdbce0c9023a239eeaddffd385575",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -11,10 +11,7 @@\n     assert_equal,\n     assert_raises_rpc_error,\n )\n-from test_framework.wallet_util import (\n-    labels_value,\n-    test_address,\n-)\n+from test_framework.wallet_util import test_address\n \n \n class ReceivedByTest(BitcoinTestFramework):\n@@ -131,7 +128,7 @@ def run_test(self):\n         # set pre-state\n         label = ''\n         address = self.nodes[1].getnewaddress()\n-        test_address(self.nodes[1], address, label=label, labels=labels_value(name=label))\n+        test_address(self.nodes[1], address, label=label, labels=[label])\n         received_by_label_json = [r for r in self.nodes[1].listreceivedbylabel() if r[\"label\"] == label][0]\n         balance_by_label = self.nodes[1].getreceivedbylabel(label)\n "
      },
      {
        "sha": "9027311a8b4cc2c2b9975c43432b04fa2af2972c",
        "filename": "test/fuzz/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/fuzz/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/fuzz/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fuzz/test_runner.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -20,6 +20,7 @@\n     \"block_file_info_deserialize\",\n     \"block_filter_deserialize\",\n     \"block_header_and_short_txids_deserialize\",\n+    \"decode_tx\",\n     \"fee_rate_deserialize\",\n     \"flat_file_pos_deserialize\",\n     \"hex\","
      },
      {
        "sha": "65c51e02f580016b32fa955f6305512b3cf3715c",
        "filename": "test/lint/extended-lint-all.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/lint/extended-lint-all.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/lint/extended-lint-all.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/extended-lint-all.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2018 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #"
      },
      {
        "sha": "47df25ba6bbc87067138774d2c5c3033a781a9cb",
        "filename": "test/lint/extended-lint-cppcheck.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/lint/extended-lint-cppcheck.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/lint/extended-lint-cppcheck.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/extended-lint-cppcheck.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2018 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #"
      },
      {
        "sha": "cc24a0b60900a0889ddc9b3d6e7dfbee1b8ccd29",
        "filename": "test/lint/lint-format-strings.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/lint/lint-format-strings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/lint/lint-format-strings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.py?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -17,6 +17,7 @@\n     (\"src/index/base.cpp\", \"FatalError(const char* fmt, const Args&... args)\"),\n     (\"src/netbase.cpp\", \"LogConnectFailure(bool manual_connection, const char* fmt, const Args&... args)\"),\n     (\"src/util/system.cpp\", \"strprintf(_(COPYRIGHT_HOLDERS).translated, COPYRIGHT_HOLDERS_SUBSTITUTION)\"),\n+    (\"src/validationinterface.cpp\", \"LogPrint(BCLog::VALIDATION, fmt \\\"\\\\n\\\", __VA_ARGS__)\"),\n     (\"src/wallet/wallet.h\",  \"WalletLogPrintf(std::string fmt, Params... parameters)\"),\n     (\"src/wallet/wallet.h\", \"LogPrintf((\\\"%s \\\" + fmt).c_str(), GetDisplayName(), parameters...)\"),\n     (\"src/logging.h\", \"LogPrintf(const char* fmt, const Args&... args)\"),"
      },
      {
        "sha": "35e58c2df687ca366381d39da24747d3bc906b2e",
        "filename": "test/lint/lint-locale-dependence.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/lint/lint-locale-dependence.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/lint/lint-locale-dependence.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-locale-dependence.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,7 @@\n #!/usr/bin/env bash\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C\n KNOWN_VIOLATIONS=("
      },
      {
        "sha": "a666fdfecfc44107193453bcf6bea112a08bbad6",
        "filename": "test/lint/lint-shebang.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/lint/lint-shebang.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/lint/lint-shebang.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-shebang.sh?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -1,4 +1,8 @@\n #!/usr/bin/env bash\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n # Assert expected shebang lines\n \n export LC_ALL=C"
      },
      {
        "sha": "b9c5c038d0afadfad014ee8b2e436f805408b76a",
        "filename": "test/sanitizer_suppressions/tsan",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6d646d53b65ebb0044edb01ee38c323843bccee/test/sanitizer_suppressions/tsan",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6d646d53b65ebb0044edb01ee38c323843bccee/test/sanitizer_suppressions/tsan",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/sanitizer_suppressions/tsan?ref=d6d646d53b65ebb0044edb01ee38c323843bccee",
        "patch": "@@ -7,6 +7,14 @@ deadlock:WalletBatch\n # Intentional deadlock in tests\n deadlock:TestPotentialDeadLockDetected\n \n+# Race due to unprotected calls to thread-unsafe BOOST_TEST_MESSAGE from different threads:\n+# * G_TEST_LOG_FUN in the index thread\n+# * boost test case invoker (entering a test case) in the main thread\n+# TODO: get rid of BOOST_ macros, see also https://github.com/bitcoin/bitcoin/issues/8670\n+race:blockfilter_index_initial_sync_invoker\n+race:txindex_initial_sync_invoker\n+race:validation_block_tests::TestSubscriber\n+\n # Wildcard for all gui tests, should be replaced with non-wildcard suppressions\n race:src/qt/test/*\n deadlock:src/qt/test/*"
      }
    ]
  }
]