[
  {
    "sha": "012598880cf69a6a4d4d495c78e40ab4abb4eb39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTI1OTg4ODBjZjY5YTZhNGQ0ZDQ5NWM3OGU0MGFiNGFiYjRlYjM5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-22T14:44:43Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-12-11T16:22:15Z"
      },
      "message": "Implement test for merkle tree malleability in CPartialMerkleTree\n\nThis is a check that is mentioned in BIP 37, but never implemented in the\nreference code. As Bitcoin Core so far never decodes partial merkle trees,\nthis is not a problem. But perhaps others use the code as a reference.",
      "tree": {
        "sha": "f2d433bad71f00fadfdeac6063700b43735863b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2d433bad71f00fadfdeac6063700b43735863b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/012598880cf69a6a4d4d495c78e40ab4abb4eb39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/012598880cf69a6a4d4d495c78e40ab4abb4eb39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/012598880cf69a6a4d4d495c78e40ab4abb4eb39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/012598880cf69a6a4d4d495c78e40ab4abb4eb39/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bb29a3e13f78f534d96b71048a128843f3bab85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bb29a3e13f78f534d96b71048a128843f3bab85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bb29a3e13f78f534d96b71048a128843f3bab85"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 19,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0500cfde88966d15427eb5ad738b2e72a5000747",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/012598880cf69a6a4d4d495c78e40ab4abb4eb39/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/012598880cf69a6a4d4d495c78e40ab4abb4eb39/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=012598880cf69a6a4d4d495c78e40ab4abb4eb39",
        "patch": "@@ -93,10 +93,16 @@ uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, uns\n     } else {\n         // otherwise, descend into the subtrees to extract matched txids and hashes\n         uint256 left = TraverseAndExtract(height-1, pos*2, nBitsUsed, nHashUsed, vMatch), right;\n-        if (pos*2+1 < CalcTreeWidth(height-1))\n+        if (pos*2+1 < CalcTreeWidth(height-1)) {\n             right = TraverseAndExtract(height-1, pos*2+1, nBitsUsed, nHashUsed, vMatch);\n-        else\n+            if (right == left) {\n+                // If the left and right branch should never be identical as the transaction\n+                // hashes covered by them must be unique.\n+                fBad = true;\n+            }\n+        } else {\n             right = left;\n+        }\n         // and combine them before returning\n         return Hash(BEGIN(left), END(left), BEGIN(right), END(right));\n     }"
      },
      {
        "sha": "eea5b0af4998f08741ae1e1024e819ab0235b4d8",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/012598880cf69a6a4d4d495c78e40ab4abb4eb39/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/012598880cf69a6a4d4d495c78e40ab4abb4eb39/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=012598880cf69a6a4d4d495c78e40ab4abb4eb39",
        "patch": "@@ -10,6 +10,7 @@\n \n #include <vector>\n \n+#include <boost/assign/list_of.hpp>\n #include <boost/test/unit_test.hpp>\n \n using namespace std;\n@@ -104,4 +105,14 @@ BOOST_AUTO_TEST_CASE(pmt_test1)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(pmt_malleability)\n+{\n+    std::vector<uint256> vTxid = boost::assign::list_of(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(9)(10);\n+    std::vector<bool> vMatch = boost::assign::list_of(false)(false)(false)(false)(false)(false)(false)(false)(false)(true)(true)(false);\n+\n+    CPartialMerkleTree tree(vTxid, vMatch);\n+    std::vector<uint256> vTxid2;\n+    BOOST_CHECK(tree.ExtractMatches(vTxid) == 0);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]