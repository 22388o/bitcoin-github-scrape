vasild,2020-12-28 16:18:16,"The following two PRs would benefit from this:\n\n* https://github.com/bitcoin/bitcoin/pull/19203 would only need to add the fuzzing test and the mocked/fuzzed `Sock` implementation (last commit from that PR).\n* https://github.com/bitcoin/bitcoin/pull/20685 would become smaller. `Sock` originated there and that PR contains a copy of it. So if this PR gets merged, then the size of #20685 will b",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-751770419,751770419,
DrahtBot,2020-12-28 17:07:35,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21015 (Make all of net_processing (and some of net) use std::chrono types by dhruv)\n* #20685 (Add I2P support using I2P ",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-751790123,751790123,
practicalswift,2020-12-28 20:57:34,"Strong concept ACK\n\nThis abstraction would be extremely useful to have when fuzzing low-level networking code.",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-751861963,751861963,
vasild,2020-12-30 11:37:19,"99b8e88a1...408a9473b: moved the `Sock` class inside `netbase.cpp` to resolve a [circular dependency](https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549799438).\n\nAnother option would be to keep the `Sock` class in its own file `src/sock.cpp` or `src/util/sock.cpp`. Since it uses `MillisToTimeval()` and `CloseSocket()` they would have to be moved out of `netbase.cpp`.",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-752448197,752448197,
jnewbery,2020-12-31 14:08:47,Concept ACK. Is there any reason not to use the `Sock` object in `CNode`?,https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-752967726,752967726,
vasild,2020-12-31 14:14:38,408a9473b...8fc63e344: fixed a typo and removed unused parameter,https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-752969218,752969218,
vasild,2020-12-31 14:35:28,"@jonatack \n\n> moving the Sock class to its own file and the common deps to a utility seems appealing\n\nI will try this. Opinions, anybody? That would mean:\n* Move `Sock` from `netbase.cpp` to `util/sock.cpp`\n* Move `MillisToTimeval()` from `netbase.cpp` to `util/where?`\n* Move `CloseSocket()` from `netbase.cpp` to `util/where?` (it uses `LogPrintf()`)\n\n> do you plan to add unit te",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-752975368,752975368,
lontivero,2020-12-31 16:23:14,"I agree with moving it to its own file and with adding UTs for it. I am not sure a real socket is necessary for testing this abstraction, could it be enough to simply mock `send`, `recv` and `select`? Something it could be useful is to make sure the ownership of the `SOCKET` is always correct (`copy ctor`, `Release`, `operator =`)\n\nbtw, utACK 8fc63e344660f52a35bd97c1f881afdb1643b52a",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-752998925,752998925,
vasild,2021-01-08 13:24:36,"8fc63e3...3fa2a11:\n* rebased due to conflicts\n* moved `Sock` to its dedicated `src/util/sock.{cpp,h}`\n* added unit tests",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-756754017,756754017,
vasild,2021-01-11 17:03:46,3fa2a11f6...ed69709c8: hopefully fix CI and address some suggestions,https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-758089514,758089514,
lontivero,2021-01-11 20:13:15,utACK ed69709c8c86970f21b2a987a366737a01bc1c79,https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-758195672,758195672,
vasild,2021-01-14 12:11:41,ed69709c8...cc109a474: rebase due to conflicts,https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-760157837,760157837,
lontivero,2021-01-14 13:22:46,utACK cc109a47481263e1a7fb9b74f1aea57ea0129f8e,https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-760193702,760193702,
laanwj,2021-01-24 22:01:38,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-766439884,766439884,
vasild,2021-02-04 17:26:59,"cc109a474...bb5231615: stylistic changes to address suggestions by @jonatack, thanks!",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-773477173,773477173,
jonatack,2021-02-09 13:45:28,"Thanks @vasild. I didn't see your latest notifications as I have been adjusting to the new `ghwatch.py` script, will re-review.",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-775947271,775947271,
laanwj,2021-02-09 19:42:39,"It seems more logical to me to move the `CloseSocket` and `NetworkErrorString` functions to `sock.h`, not `system.h`? ~~Also do we still need an explicit `CloseSocket` instead of `Sock::Reset`?~~ (oh those are separate types, I see)\n\nCursory code review ACK otherwise.",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-776193697,776193697,
vasild,2021-02-10 11:18:32,"bb5231615...7b6e4ee30: move `CloseSocket()` and `NetworkErrorString()` to `util/sock.{h,cpp}` instead of to `util/system.{h,cpp}`.\n\n@laanwj,\n\n> It seems more logical to me to move the `CloseSocket` and `NetworkErrorString` functions to `sock.h`, not `system.h`?\n\nDone.\n\n> ~Also do we still need an explicit `CloseSocket` instead of `Sock::Reset`?~\n\nActually this question makes se",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-776638169,776638169,
vasild,2021-02-10 12:37:24,7b6e4ee30...e8e372a43: fix Vindows build,https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-776678051,776678051,
laanwj,2021-02-10 19:24:37,"@vasild Thanks! Yes, agree with not getting rid of `CloseSocket` in this PR, but glad to hear there's a path to removing the loose function.\n\nCode review and light testing (outbound connections over Tor still work) ACK e8e372a43122366fab7d6c7a45e05d4ad18d6da7",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-776956778,776956778,
laanwj,2021-02-11 08:56:25,"I think this is ready for merge, but would be nice to fix @jonatack's comment typos.",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-777289382,777289382,
vasild,2021-02-11 09:47:15,e8e372a43...615ba0eb9: fix typos in a comment,https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-777320031,777320031,
laanwj,2021-02-11 12:23:47,"Re-ACK 615ba0eb96cf131364c1ceca9d3dedf006fa1e1c\nChecked that only change is the comment.",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-777415663,777415663,
jonatack,2021-02-11 12:59:51,"(Review and comment made from gh pr as an experiment.)\n\nEdit: learned to never write `gh pr` in a comment from github cli, as it converts it to the general help.",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-777438277,777438277,
practicalswift,2021-02-12 09:36:14,"@vasild Thanks for making our socket handling mockable. This will be extremely useful when fuzzing!\n\nSimilar to what you've done for TCP connections it would be really useful to be able to globally mock out DNS lookup to be able to have the responses be generated by a `FuzzedDataProvider` driven class instead of the ordinary lookup facility provided by the OS.\n\nIf you want to address this ",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-778085839,778085839,
vasild,2021-02-13 13:11:01,"Just for reference: previous incarnations of this PR had the `Sock::Wait()` method report to the caller whether one of the requested events happened or a timeout occurred. This was [removed](https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550250637) because none of the callers needed it.\n\nHowever this is needed in #20685, so that PR contains a tiny [commit](https://github.com/bitcoin",https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-778617207,778617207,
MarcoFalke,2020-12-28 16:26:39,"```suggestion\n#include <netbase.h> // For CloseSocket\n```\n\nIt seems this is the only Bitcoin Core related dependency. Are the other includes needed at all? If not, it would be good to move this module to `util`, which is the place for general utility stuff (not bitcoin related).",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549406398,549406398,src/sock.cpp
lontivero,2020-12-28 19:26:26,Q: would it make sense to have this method as part of the `Sock`? (Something similar to `Sock::recv` but with a timeout parameter),https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549461016,549461016,src/netbase.cpp
vasild,2020-12-29 14:10:40,"Yes, indeed. That would be convenient together with a `send` method that retries upon temporary failures (see below).\n\nI did not include such methods in this PR because it is self-sufficient as it is and achieves the initial purpose to introduce a mockable socket that can be used for fuzzing in https://github.com/bitcoin/bitcoin/pull/19203.\n\nPossible future improvements (which I resisted a",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549718454,549718454,src/netbase.cpp
vasild,2020-12-29 18:09:50,"No, the other includes are not needed (and I removed them). However there is a circular dependency now:\n\n* netbase -> sock (`netbase.cpp` uses the `Sock` class, of course)\n* sock -> netbase (`sock.cpp` uses `MillisToTimeval()` and `CloseSocket()` which are defined in `netbase.cpp`)\n\nOne way to resolve that is to put the `Sock` class in `netbase.{h,cpp}` and ditch `sock.{h,cpp}`.\n\nAno",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r549799438,549799438,src/sock.cpp
vasild,2020-12-30 11:38:39,"> One way to resolve that is to put the `Sock` class in `netbase.{h,cpp}`...\n\nDid that.",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550164602,550164602,src/sock.cpp
jonatack,2020-12-30 16:02:50,"nit here and L120, s/overriden/overridden/",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550243581,550243581,src/netbase.h
lontivero,2020-12-30 16:17:47,"nit: i would like to suggest rename `Sock::Release` as `Sock::GetAndRelease`. IMO it makes it just a tiny bit  more readable. Feel free to ignore this comment.\n```c++\n    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), sock->GetAndRelease(), addrConnect,\n                             CalculateKeyedNetGroup(addrConnect), nonce, addr_bind,\n                             pszDest ? ",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550248416,550248416,src/net.cpp
lontivero,2020-12-30 16:24:06,"The `returned` parameter is never used by any caller. It seems this is something that was added for future usage maybe. Does it make sense to have it at this point in time, I mean, if tomorrow it is needed then it could be added in a future PR. ",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550250637,550250637,src/netbase.cpp
vasild,2020-12-31 13:53:08,"I agree `GetAndRelease()` is more descriptive, but I am trying to mimic `std::unique_ptr` and its [method which is called release()](https://en.cppreference.com/w/cpp/memory/unique_ptr/release).",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550487660,550487660,src/net.cpp
vasild,2020-12-31 14:14:51,Fixed,https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550491541,550491541,src/netbase.h
vasild,2020-12-31 14:15:16,"Removed, the less code - the better.",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r550491623,550491623,src/netbase.cpp
lontivero,2021-01-11 14:12:45,Q: Why are these tests disabled for Windows?,https://github.com/bitcoin/bitcoin/pull/20788#discussion_r555073220,555073220,src/test/sock_tests.cpp
lontivero,2021-01-11 14:15:54,Q: Why not `CloseSocket` here? ,https://github.com/bitcoin/bitcoin/pull/20788#discussion_r555075396,555075396,src/test/sock_tests.cpp
lontivero,2021-01-11 14:28:12,"Does `24h` means 24 hours? If that's the case it looks too much to me, even for a UT.",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r555083671,555083671,src/test/sock_tests.cpp
lontivero,2021-01-11 14:35:50,It could make sense to use `SOCKET_ERROR` here.,https://github.com/bitcoin/bitcoin/pull/20788#discussion_r555089125,555089125,src/test/sock_tests.cpp
vasild,2021-01-11 16:49:37,"They were because Windows does not have `socketpair()`, but since not all tests use this function I have now enabled the tests that don't.",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r555191243,555191243,src/test/sock_tests.cpp
vasild,2021-01-11 16:51:55,"Right, changed to `CloseSocket()`.",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r555192873,555192873,src/test/sock_tests.cpp
vasild,2021-01-11 16:55:14,"Done, thanks!",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r555195148,555195148,src/test/sock_tests.cpp
vasild,2021-01-11 17:02:47,"Yes, 24 hours. I wanted to use `1y` (1 year), but `y` is not supported.\n\nIf this test detects a failure, it would result in a ""test timeout in CI"" which waits for 2 hours.\n\nI don't know how else to check if `Wait()` works as expected. Notice - it does not signal to the caller whether a timeout occurred or the socket is ready for the event. It was possible before, but [we simplified](https:",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r555200385,555200385,src/test/sock_tests.cpp
lontivero,2021-01-11 17:51:57,"> I think it is not worth restoring it for the sake of this test, what's your take?\n\nI agree with you. I don't think it is a good idea to have code the sake of one test only.",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r555232584,555232584,src/test/sock_tests.cpp
vasild,2021-01-22 12:44:07,"This was finally [changed](https://github.com/bitcoin/bitcoin/pull/20788#issuecomment-756754017) to:\n\n> move MillisToTimeval() and CloseSocket() outside of netbase.cpp, somewhere in src/util/ and use them from both netbase.cpp and from sock.cpp\n\nit looks much better now.",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r562606180,562606180,src/sock.cpp
laanwj,2021-01-24 21:58:07,"Please create new general utilities like this in `src/compat`, `src/support` or `src/util`, not in the source root.",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r563382158,563382158,src/Makefile.am
vasild,2021-01-25 09:56:22,"Hmm, the newly added `sock.h` is in `src/util`, so that's already the case, no?",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r563592536,563592536,src/Makefile.am
laanwj,2021-01-25 10:14:08,Huh. Oops. I misread this. Seems good then :+1:.,https://github.com/bitcoin/bitcoin/pull/20788#discussion_r563604808,563604808,src/Makefile.am
jonatack,2021-02-03 16:40:50,"acc89632 this commit isn't move-only because `hSocket` was renamed, making it more error-prone and difficult to verify that the code isn't changed, suggest clarifying the commit message with the renaming or, better yet, making this change move-only",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r569566888,569566888,src/util/system.cpp
jonatack,2021-02-03 16:48:02,"1dcf817 here and in the definition and in `Sock::Wait()`\n```suggestion\nstruct timeval MillisToTimeval(std::chrono::milliseconds ms);\n```",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r569572507,569572507,src/util/time.h
jonatack,2021-02-03 16:51:59,"1dcf817\n```suggestion\n#include <chrono>\n```",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r569575610,569575610,src/util/sock.h
jonatack,2021-02-03 17:00:20,"The diff could be smaller, faster, easier and safer to review without unneeded renamings mixed with the coding changes. For existing code it's not required to update the variable naming to current coding style and it would be good to be able to focus on the significant changes. Maybe open a separate pull for the renamings.",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r569582374,569582374,src/netbase.cpp
jonatack,2021-02-03 17:01:58,"The diff could be smaller, faster, easier and safer to review without the unnecessary formatting churn in the diff. There are a few functions doing this here. Maybe open a separate pull for the formatting changes.",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r569583586,569583586,src/net.cpp
vasild,2021-02-04 17:21:54,Changed the commit to be move-only and left the variable name as `hSocket`.,https://github.com/bitcoin/bitcoin/pull/20788#discussion_r570404619,570404619,src/util/system.cpp
vasild,2021-02-04 17:22:17,Changed.,https://github.com/bitcoin/bitcoin/pull/20788#discussion_r570404856,570404856,src/util/time.h
vasild,2021-02-04 17:23:44,"Those comments are useful, if they are present, during refactoring when moving code around. Unfortunately they are not widely used, so I do not insist on their presence. Removed.",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r570405855,570405855,src/util/sock.h
vasild,2021-02-04 17:25:59,"I split this commit in two: variable type change from `SOCKET` to `Sock` + variable rename from `hSocket` to `sock`.\n\nIt is good to have the implied convention of naming `SOCKET` variables `hSocket` (old code) or `socket` (new code) and `Sock` variables `sock`.",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r570407463,570407463,src/netbase.cpp
vasild,2021-02-04 17:26:20,Joined this back to one long line.,https://github.com/bitcoin/bitcoin/pull/20788#discussion_r570407726,570407726,src/net.cpp
jonatack,2021-02-10 20:25:52,"```suggestion\n    // wrongly pretend that the socket is not closed.\n```\nor ""incorrectly""",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r574052336,574052336,src/test/sock_tests.cpp
jonatack,2021-02-10 20:26:36,"```suggestion\n    // closed, it may be assigned the same file descriptor number. In this case, our test will\n```",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r574052725,574052725,src/test/sock_tests.cpp
vasild,2021-02-11 09:46:14,"Yeah, that was wron. Fixed.",https://github.com/bitcoin/bitcoin/pull/20788#discussion_r574364605,574364605,src/test/sock_tests.cpp
vasild,2021-02-11 09:46:37,Fixed.,https://github.com/bitcoin/bitcoin/pull/20788#discussion_r574364819,574364819,src/test/sock_tests.cpp
