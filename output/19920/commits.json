[
  {
    "sha": "b71cf8469a1a77652cc2ce9f7d15a66d972e2438",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzFjZjg0NjlhMWE3NzY1MmNjMmNlOWY3ZDE1YTY2ZDk3MmUyNDM4",
    "commit": {
      "author": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2020-09-08T20:36:45Z"
      },
      "committer": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2021-03-19T11:28:39Z"
      },
      "message": "Add siphash reference impl to fuzzers veorq/SipHash#bab35c64d10f63587a3693a71200620f0ee03cc4",
      "tree": {
        "sha": "fd179f735669d36b2a28c598f2aa329627730bf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd179f735669d36b2a28c598f2aa329627730bf5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b71cf8469a1a77652cc2ce9f7d15a66d972e2438",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAmBUiucZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqf7ksD/9QR0yFD78L8zxfWfvtmk+e\nAiiSSjFKO4wBAI8YCx+F2X6VR0qjkU2vmynsViSW2rRSF13Mpnb7TDVEGv71CI7V\n6gi9ETD8JWM/U9Vnc3R4JXH0dB8XCL3KI1y763cftMDfOAg62AOuP4TaRBR3PHun\nkJYKoedqiO5j1+nN/Eh1RpseogeStXMkHplN0iFyZiPyuzH8u5a2S7cwKMUA5sjg\nsmnbLgJU9sT5Z/JKoSyS/QFHZDlMl9/At4s1kRLQb5jYtgwLlKxCv2+GG2K6nPt4\nAuuDONGq6owdiHxJRJt9+8UFGYICbYxQeYu54DO30OfbKf0vrHut9HWtWoyigil8\n3M3NqDuKHragY50sQkc1hcOY7wq8Wi8yOSquX3DkftNMGoc3AyYIQdJR4j000WsA\nfVTc4et5wHhldaMgG87tZAN3807FDCnBgj74mh8j71R15uEyJddv+NxLy/4Dxuxk\n+trHWggVLFsdBcXXehzyM4eLjReCpd2EdWdSgLIoxQvMo9ZlMdzeqW6zqxe6ux4A\niyS7ketu+jOH6tULgGAw7wDOMpMn4lQBAIjgBNIJzSJXee5IF0WOaszFjiEWms3q\ns4IJmZ018iF/bYeDfDQE5HBP0QyNiqb/+BSM4pBZIQTfYhuOvKCq38zsJjx8YHr5\nTSmO6IwkOM2n8cozxofWaA==\n=y8J9\n-----END PGP SIGNATURE-----",
        "payload": "tree fd179f735669d36b2a28c598f2aa329627730bf5\nparent 05757aa860215a8fd5002d99b6ec653175c6b734\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1599597405 +0300\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1616153319 +0200\n\nAdd siphash reference impl to fuzzers veorq/SipHash#bab35c64d10f63587a3693a71200620f0ee03cc4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b71cf8469a1a77652cc2ce9f7d15a66d972e2438",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b71cf8469a1a77652cc2ce9f7d15a66d972e2438",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b71cf8469a1a77652cc2ce9f7d15a66d972e2438/comments",
    "author": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following{/other_user}",
      "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following{/other_user}",
      "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05757aa860215a8fd5002d99b6ec653175c6b734",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05757aa860215a8fd5002d99b6ec653175c6b734",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05757aa860215a8fd5002d99b6ec653175c6b734"
      }
    ],
    "stats": {
      "total": 166,
      "additions": 166,
      "deletions": 0
    },
    "files": [
      {
        "sha": "71d85de37c619387791128007b2973e2b26022a8",
        "filename": "src/test/fuzz/siphash.c",
        "status": "added",
        "additions": 166,
        "deletions": 0,
        "changes": 166,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b71cf8469a1a77652cc2ce9f7d15a66d972e2438/src/test/fuzz/siphash.c",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b71cf8469a1a77652cc2ce9f7d15a66d972e2438/src/test/fuzz/siphash.c",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/siphash.c?ref=b71cf8469a1a77652cc2ce9f7d15a66d972e2438",
        "patch": "@@ -0,0 +1,166 @@\n+/*\n+   SipHash reference C implementation\n+\n+   Copyright (c) 2012-2016 Jean-Philippe Aumasson\n+   <jeanphilippe.aumasson@gmail.com>\n+   Copyright (c) 2012-2014 Daniel J. Bernstein <djb@cr.yp.to>\n+\n+   To the extent possible under law, the author(s) have dedicated all copyright\n+   and related and neighboring rights to this software to the public domain\n+   worldwide. This software is distributed without any warranty.\n+\n+   You should have received a copy of the CC0 Public Domain Dedication along\n+   with\n+   this software. If not, see\n+   <http://creativecommons.org/publicdomain/zero/1.0/>.\n+ */\n+#include <assert.h>\n+#include <inttypes.h>\n+#include <stdint.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+/* default: SipHash-2-4 */\n+#ifndef cROUNDS\n+    #define cROUNDS 2\n+#endif\n+#ifndef dROUNDS\n+    #define dROUNDS 4\n+#endif\n+\n+#define ROTL(x, b) (uint64_t)(((x) << (b)) | ((x) >> (64 - (b))))\n+\n+#define U32TO8_LE(p, v)                                                        \\\n+    (p)[0] = (uint8_t)((v));                                                   \\\n+    (p)[1] = (uint8_t)((v) >> 8);                                              \\\n+    (p)[2] = (uint8_t)((v) >> 16);                                             \\\n+    (p)[3] = (uint8_t)((v) >> 24);\n+\n+#define U64TO8_LE(p, v)                                                        \\\n+    U32TO8_LE((p), (uint32_t)((v)));                                           \\\n+    U32TO8_LE((p) + 4, (uint32_t)((v) >> 32));\n+\n+#define U8TO64_LE(p)                                                           \\\n+    (((uint64_t)((p)[0])) | ((uint64_t)((p)[1]) << 8) |                        \\\n+     ((uint64_t)((p)[2]) << 16) | ((uint64_t)((p)[3]) << 24) |                 \\\n+     ((uint64_t)((p)[4]) << 32) | ((uint64_t)((p)[5]) << 40) |                 \\\n+     ((uint64_t)((p)[6]) << 48) | ((uint64_t)((p)[7]) << 56))\n+\n+#define SIPROUND                                                               \\\n+    do {                                                                       \\\n+        v0 += v1;                                                              \\\n+        v1 = ROTL(v1, 13);                                                     \\\n+        v1 ^= v0;                                                              \\\n+        v0 = ROTL(v0, 32);                                                     \\\n+        v2 += v3;                                                              \\\n+        v3 = ROTL(v3, 16);                                                     \\\n+        v3 ^= v2;                                                              \\\n+        v0 += v3;                                                              \\\n+        v3 = ROTL(v3, 21);                                                     \\\n+        v3 ^= v0;                                                              \\\n+        v2 += v1;                                                              \\\n+        v1 = ROTL(v1, 17);                                                     \\\n+        v1 ^= v2;                                                              \\\n+        v2 = ROTL(v2, 32);                                                     \\\n+    } while (0)\n+\n+#ifdef DEBUG\n+#define TRACE                                                                  \\\n+    do {                                                                       \\\n+        printf(\"(%3zu) v0 %016\"PRIx64\"\\n\", inlen, v0);                         \\\n+        printf(\"(%3zu) v1 %016\"PRIx64\"\\n\", inlen, v1);                         \\\n+        printf(\"(%3zu) v2 %016\"PRIx64\"\\n\", inlen, v2);                         \\\n+        printf(\"(%3zu) v3 %016\"PRIx64\"\\n\", inlen, v3);                         \\\n+    } while (0)\n+#else\n+#define TRACE\n+#endif\n+\n+int siphash(const uint8_t *in, const size_t inlen, const uint8_t *k,\n+            uint8_t *out, const size_t outlen) {\n+\n+    assert((outlen == 8) || (outlen == 16));\n+    uint64_t v0 = UINT64_C(0x736f6d6570736575);\n+    uint64_t v1 = UINT64_C(0x646f72616e646f6d);\n+    uint64_t v2 = UINT64_C(0x6c7967656e657261);\n+    uint64_t v3 = UINT64_C(0x7465646279746573);\n+    uint64_t k0 = U8TO64_LE(k);\n+    uint64_t k1 = U8TO64_LE(k + 8);\n+    uint64_t m;\n+    int i;\n+    const uint8_t *end = in + inlen - (inlen % sizeof(uint64_t));\n+    const int left = inlen & 7;\n+    uint64_t b = ((uint64_t)inlen) << 56;\n+    v3 ^= k1;\n+    v2 ^= k0;\n+    v1 ^= k1;\n+    v0 ^= k0;\n+\n+    if (outlen == 16)\n+        v1 ^= 0xee;\n+\n+    for (; in != end; in += 8) {\n+        m = U8TO64_LE(in);\n+        v3 ^= m;\n+\n+        TRACE;\n+        for (i = 0; i < cROUNDS; ++i)\n+            SIPROUND;\n+\n+        v0 ^= m;\n+    }\n+\n+    switch (left) {\n+    case 7:\n+        b |= ((uint64_t)in[6]) << 48;\n+    case 6:\n+        b |= ((uint64_t)in[5]) << 40;\n+    case 5:\n+        b |= ((uint64_t)in[4]) << 32;\n+    case 4:\n+        b |= ((uint64_t)in[3]) << 24;\n+    case 3:\n+        b |= ((uint64_t)in[2]) << 16;\n+    case 2:\n+        b |= ((uint64_t)in[1]) << 8;\n+    case 1:\n+        b |= ((uint64_t)in[0]);\n+        break;\n+    case 0:\n+        break;\n+    }\n+\n+    v3 ^= b;\n+\n+    TRACE;\n+    for (i = 0; i < cROUNDS; ++i)\n+        SIPROUND;\n+\n+    v0 ^= b;\n+\n+    if (outlen == 16)\n+        v2 ^= 0xee;\n+    else\n+        v2 ^= 0xff;\n+\n+    TRACE;\n+    for (i = 0; i < dROUNDS; ++i)\n+        SIPROUND;\n+\n+    b = v0 ^ v1 ^ v2 ^ v3;\n+    U64TO8_LE(out, b);\n+\n+    if (outlen == 8)\n+        return 0;\n+\n+    v1 ^= 0xdd;\n+\n+    TRACE;\n+    for (i = 0; i < dROUNDS; ++i)\n+        SIPROUND;\n+\n+    b = v0 ^ v1 ^ v2 ^ v3;\n+    U64TO8_LE(out + 8, b);\n+\n+    return 0;\n+}"
      }
    ]
  },
  {
    "sha": "e0d809082f5193be422252d11a88ec44f7d14170",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGQ4MDkwODJmNTE5M2JlNDIyMjUyZDExYTg4ZWM0NGY3ZDE0MTcw",
    "commit": {
      "author": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2020-09-08T20:37:16Z"
      },
      "committer": {
        "name": "Elichai Turkel",
        "email": "elichai.turkel@gmail.com",
        "date": "2021-03-19T12:59:25Z"
      },
      "message": "Add a fuzz harness for siphash against reference implementation",
      "tree": {
        "sha": "1c29934e1c1eded018676126611ea63bd24945e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c29934e1c1eded018676126611ea63bd24945e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0d809082f5193be422252d11a88ec44f7d14170",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJNBAABCAA3FiEEC5PUstyhDoo+NyfXk4PN6ejman8FAmBUoC4ZHGVsaWNoYWku\ndHVya2VsQGdtYWlsLmNvbQAKCRCTg83p6OZqfw7kEADCJMEFPcWMJeIkLJGAIdVX\nxKWy2xN0PtW9GLRf6V18SAKfW92wFSWnvmKyMjL4VEuXuOPHgqbdrpQJOQQeuGvb\nWWzRQnvq8MaR9okStLNb/qS+rkjugbxjLBa6lQ037wLgS0HXOQZVqRrRPQaX36gs\nn5g1yZPl03EAPnvoIOuFdPljqpMNYk9n5fnGA5gyNZw5VTNB4Dh9/5gjMA3kYMW0\nPIhwqXQIPVMrE6+Xt0kgMc/tke2RL6IvgmsDRmJT2R1PnLNHcriwzzKwtyONgjvn\nP9dFmob1QpzXHpM/RofLGqDOG3JxGooJ2bbxFxTwp1zoC8wGYdcM+KC14Cuie0IV\nDr5SfjSKxpJ0onoLs1e0XRP057BVHtTsDRy4Qgf3KzZ1okfnsbe3E8sFNp63sPRK\nxSGbwlphAyG7oTG34YNDVT4Jc/03lZIwMhxBdp4wtb0HT+BJMnHey7MipmGalO/t\nR+oT18zYe7fygebLOgI62wyB9u6V8y+kCm52iBBvwa18TPFIiF0wSewuuyqpA0Mf\nkdi8ak+RJOhMNsISap5kjHeQ0lgWXFGgeFbr9Svcr8atVW7wRy490SVZp+r7wBVF\nLoOwokpvQ3r1KQ8g5xG7WxHzCgAakg1tmH4wmMXTSWBeATtMhGH258TC5kDr8mzX\nxmQg4OR6G8qIICDeO9XWlg==\n=/SJ1\n-----END PGP SIGNATURE-----",
        "payload": "tree 1c29934e1c1eded018676126611ea63bd24945e3\nparent b71cf8469a1a77652cc2ce9f7d15a66d972e2438\nauthor Elichai Turkel <elichai.turkel@gmail.com> 1599597436 +0300\ncommitter Elichai Turkel <elichai.turkel@gmail.com> 1616158765 +0200\n\nAdd a fuzz harness for siphash against reference implementation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0d809082f5193be422252d11a88ec44f7d14170",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0d809082f5193be422252d11a88ec44f7d14170",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0d809082f5193be422252d11a88ec44f7d14170/comments",
    "author": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following{/other_user}",
      "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "elichai",
      "id": 2167860,
      "node_id": "MDQ6VXNlcjIxNjc4NjA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2167860?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elichai",
      "html_url": "https://github.com/elichai",
      "followers_url": "https://api.github.com/users/elichai/followers",
      "following_url": "https://api.github.com/users/elichai/following{/other_user}",
      "gists_url": "https://api.github.com/users/elichai/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elichai/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elichai/subscriptions",
      "organizations_url": "https://api.github.com/users/elichai/orgs",
      "repos_url": "https://api.github.com/users/elichai/repos",
      "events_url": "https://api.github.com/users/elichai/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elichai/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b71cf8469a1a77652cc2ce9f7d15a66d972e2438",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b71cf8469a1a77652cc2ce9f7d15a66d972e2438",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b71cf8469a1a77652cc2ce9f7d15a66d972e2438"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 59,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4869751b1614912f1291dc6f5d93d283d0ec20a6",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0d809082f5193be422252d11a88ec44f7d14170/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0d809082f5193be422252d11a88ec44f7d14170/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=e0d809082f5193be422252d11a88ec44f7d14170",
        "patch": "@@ -197,6 +197,7 @@ FUZZ_SUITE_LDFLAGS_COMMON = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) $(\n if ENABLE_FUZZ_BINARY\n test_fuzz_fuzz_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_fuzz_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_fuzz_CFLAGS = $(AM_CFLAGS) $(PIE_FLAGS)\n test_fuzz_fuzz_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_fuzz_LDFLAGS = $(FUZZ_SUITE_LDFLAGS_COMMON)\n test_fuzz_fuzz_SOURCES = \\\n@@ -226,6 +227,8 @@ test_fuzz_fuzz_SOURCES = \\\n  test/fuzz/crypto_common.cpp \\\n  test/fuzz/crypto_hkdf_hmac_sha256_l32.cpp \\\n  test/fuzz/crypto_poly1305.cpp \\\n+ test/fuzz/crypto_siphash.cpp \\\n+ test/fuzz/siphash.c \\\n  test/fuzz/cuckoocache.cpp \\\n  test/fuzz/data_stream.cpp \\\n  test/fuzz/decode_tx.cpp \\"
      },
      {
        "sha": "014f994746bf63a7645eb54aa2bb7abaad56e831",
        "filename": "src/test/fuzz/crypto_siphash.cpp",
        "status": "added",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0d809082f5193be422252d11a88ec44f7d14170/src/test/fuzz/crypto_siphash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0d809082f5193be422252d11a88ec44f7d14170/src/test/fuzz/crypto_siphash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/crypto_siphash.cpp?ref=e0d809082f5193be422252d11a88ec44f7d14170",
        "patch": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <compat/endian.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <vector>\n+\n+constexpr uint8_t sep = 0x07;\n+\n+extern \"C\" {\n+int siphash(const uint8_t *in, size_t inlen, const uint8_t *k, uint8_t *out, size_t outlen);\n+}\n+\n+\n+FUZZ_TARGET(crypto_siphash)\n+{\n+\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    uint64_t k[2] = {\n+        htole64(fuzzed_data_provider.ConsumeIntegral<uint64_t>()),\n+        htole64(fuzzed_data_provider.ConsumeIntegral<uint64_t>())\n+    };\n+\n+    auto gradual_siphash = CSipHasher(k[0], k[1]);\n+    auto input = fuzzed_data_provider.ConsumeRemainingBytes<uint8_t>();\n+\n+    auto iterators = std::vector<std::vector<uint8_t>::const_iterator>{};\n+    for (auto it = input.cbegin(); it != input.cend(); it = std::find(std::next(it), input.cend(), sep)) {\n+        iterators.push_back(it);\n+    }\n+    iterators.push_back(input.cend());\n+\n+    for (size_t i = 0; i < iterators.size(); i++) {\n+        size_t size;\n+        if (i < iterators.size() - 1) {\n+            size = std::distance(iterators[i], iterators[i + 1]);\n+        } else {\n+            size = std::distance(iterators[i], input.cend());\n+        }\n+        gradual_siphash.Write(iterators[i].base(), size);\n+    }\n+    uint64_t our_gradual_hash = gradual_siphash.Finalize();\n+    uint64_t our_direct_hash = CSipHasher(k[0], k[1]).Write(input.data(), input.size()).Finalize();\n+    uint64_t ref_hash;\n+    siphash(input.data(), input.size(), reinterpret_cast<const uint8_t*>(&k[0]), reinterpret_cast<uint8_t*>(&ref_hash), sizeof(ref_hash));\n+    ref_hash = htole64(ref_hash);\n+\n+    assert(ref_hash == our_gradual_hash);\n+    assert(our_direct_hash == our_gradual_hash);\n+}"
      }
    ]
  }
]