laanwj,2014-08-19T09:18:12Z,"How does gitian manage the dependency cache?\n(ie, what does it look like? is it possible to keep around dependencies for different versions of bitcoin?)\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-52609054,52609054,
theuni,2014-08-21T18:01:33Z,"Gitian doesn't manage the dependency cache, it blindly copies the result of the build. So if the build nukes the cache, it's gone (see huge caveat below, this is completely untrue in practice). Currently the dependency builder removes everything but the most recent result for each dependency, so that it can be used by set-and-forget systems without worry of disks filling up.\n\nHuge caveat: Gitian",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-52958134,52958134,
TheBlueMatt,2014-08-21T23:30:09Z,"Though it may be a bit too late, I'm not sure about the way this was done. I'd generally much have preferred that gitian was used directly  on travis (dunno what they support, but some neutered LXC containerish thing should be possible, or maybe a null-op vm where there is no vm?) and continue using the gitian dependency management stuff instead of a wrapper around our own dependency management sy",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-52999009,52999009,
laanwj,2014-08-22T06:46:10Z,"@TheBlueMatt Using gitian in travis would add quite a lot of overhead. Note that using depends/ directly _is_ effectively a null-op VM, as gitian uses depends too. The only advantage of using gitian in the tester would have been that the gcc/binutils/libc version matches what is used to build releases. Which would be nice but not sure it's worth the extra testing time. The rest is built from scrat",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53028495,53028495,
TheBlueMatt,2014-08-22T07:32:11Z,"@laanwj a null-op VM for gitian wouldn't add any overhead. But in any case, I would strongly think about making a release-builds/ TLD or so, to put gitian things and depends/, I'm really not a fan of them being in the top-level, as it appears to encourage people to go use those when building Bitcoin themselves, whereas they should just use whats in their OS (which is kinda the point of having auto",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53031410,53031410,
laanwj,2014-08-22T07:37:57Z,"@TheBlueMatt But as I see it in a null-op VM, you'd still have the gcc/libc difference issue. Unless you somehow inject Ubuntu 12.04's compilers and linkers.\n\nAs for 'encouraging people to use depends', that's very UNIX-focused, I think it wouldn't be crazy to encourage using depends on:\n- MacOSX: lots of problem with homebrew and similar package systems needed to build\n- Windows: no package s",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53031846,53031846,
TheBlueMatt,2014-08-22T07:39:08Z,"Sure, depends/ makes sense exactly for windows (though I dont have too much experience with OSX). Somehow I would just very strongly like to make that clear to people who download and see ""oh hey, this shitty software wants to go use specific dependency versions, these guys cant write (UNIX) software""\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53031944,53031944,
laanwj,2014-08-22T07:42:02Z,"We don't require _any_ specific dependency versions at this point (apart from the soft requirement of BDB4.8). The only mandated versions are for 'official' releases. If you think that's unclear, is that a documentation issue?\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53032152,53032152,
TheBlueMatt,2014-08-22T07:45:05Z,"Yea, I dunno if its a documentation issue or not, personally, I see /depends/ and think ""first-class feature they want us to use"" not ""this is here if you need it"". Sure, doc changes would help, but maybe something like /buildutils/ would make it more clear?\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53032372,53032372,
laanwj,2014-08-22T13:51:14Z,Another question: is it still possible to verify determinism of the intermediate dependencies after this?\n,https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53062450,53062450,
theuni,2014-08-22T15:10:35Z,"@laanwj yep, pretty much the same procedure as before. The output yml shows the hashes of the intermediates. If you want them rebuilt, just nuke em from the cache.\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53072489,53072489,
theuni,2014-08-22T15:14:56Z,"@TheBlueMatt @laanwj answered your concerns pretty much as I would have. As to the file location, I really don't much care either way. Given that they're (soon?) to be used for gitian and pull-tester, and likely to become the easiest and/or primary way of building for win/osx, imo they should be treated as a first-class citizen.\n\nThat said, I do see your point about a Unixy dev possibly thinking",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53073089,53073089,
theuni,2014-08-22T15:23:40Z,"@TheBlueMatt btw, here is a perfect example of why the naive Gitian scripts really are insufficient: https://github.com/bitcoin/bitcoin/pull/4648#issuecomment-53060613 . Real dependency management ensures that these problems don't arise (even if it was a non-issue this time) because bumping openssl automatically triggers a qt bump.\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53074315,53074315,
TheBlueMatt,2014-08-22T18:00:44Z,@theuni I'm confused as to how we wont have that same problem with the new dependency tracking system?\n,https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53098187,53098187,
theuni,2014-08-22T19:33:04Z,"@TheBlueMatt Each dependency is aware of its own dependencies. In this case, qt depends on openssl. So when openssl is bumped, it forces a qt bump as well.\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53110021,53110021,
laanwj,2014-08-23T07:10:11Z,"@cfields with the depends mechanism, is there a way to separately download the sources and do the build? ie, something like `make fetch`. This would be useful to be able to fetch on one machine, upload the sources, then build without further internet connection.\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53145024,53145024,
theuni,2014-08-23T13:34:02Z,See 'make download' ;)\n,https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53152986,53152986,
TheBlueMatt,2014-08-23T21:51:36Z,"Conceptual ack if we move depends/ to something like buildutils/depends (plus I think it makes sense to move gitian-\* to something other than contrib/, which is more for useful scripts these days)\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53167301,53167301,
laanwj,2014-08-26T12:27:56Z,"I've been testing the linux executables. Testcases run OK and cursory runs of the various executables work.\n\nHowever there are various problems reported by `symbol-check.py`\n- For example on `bitcoin-cli` (64-bit, 32-bit is the same):\n\n```\nbuild/out/bin/64/bitcoin-cli: symbol memcpy from unsupported version GLIBC_2.14\nbuild/out/bin/64/bitcoin-cli: symbol std::out_of_range::~out_of_range() f",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53412720,53412720,
laanwj,2014-08-26T13:19:21Z,The windows executables build and work fine. No problems found. The caching mechanism works great.\n,https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53418562,53418562,
theuni,2014-08-26T17:51:05Z,"Pushed fixes for the visible symbols and glibc.\n\nThe tray icon I'm not sure what to do about. I'm relatively sure it's [this upstream bug](https://bugreports.qt-project.org/browse/QTBUG-35832?attachmentOrder=desc).\n\nIf their tracker can be trusted, it affects 5.2 and 5.3, and it should be fixed in 5.4. I'm thinking the more realistic option may be to just use an icon with a white background :\",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53461567,53461567,
theuni,2014-08-27T07:06:41Z,"Now that Travis is up and running, I'll write up some docs and remove the WIP tag here. I believe the only technical issue that remains (assuming the results prove to be deterministic) is what to do about the Qt tray icon, which will be worked out in depends. I'm fine with that being a merge-blocker though, if necessary.\n\n@TheBlueMatt I really don't see the need for shuffling around. Unless othe",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53533864,53533864,
laanwj,2014-08-27T07:57:31Z,"Well - see for comparison against 0.9.2.1 release. In 0.9.2.1 it picks up my Ubuntu/GTK theme and shows the tray icon in the right place. Now it shows the Qt5 default fusion theme, misplaces the tray icon, and shows a black block around it.\n\n### 0.9.2.1 release\n\n![0921_tray](https://cloud.githubusercontent.com/assets/126646/4056712/8fd5d584-2dbe-11e4-98ed-291b60e65789.png)\n![0921_window](http",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53537738,53537738,
theuni,2014-08-27T10:00:41Z,"Yep, that's very fair. The icon problem we can probably work out one way or another.\n\nThe themes are a different story though. I have a feeling that what you're seeing is about the best we can hope for with static qt5. If that's not going to cut it then our only option is switching back to shared and dealing with the drawbacks of that. Or, I suppose, shipping both ways :\\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53549296,53549296,
theuni,2014-08-29T06:42:34Z,"@laanwj I'm trying a new approach here. I've added a qt 4.8 build to depends and set it as the Linux default. 4.6 is a _major_ pain to build. It's very flaky with newer compilers and requires lots of patching. If 4.6 turns out to be required I can go that route.\n\nI elected instead to go with 4.8 and hook up a back-compat option for qt, similar to what we have with glibc. For now, I'd like to avo",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53842462,53842462,
laanwj,2014-08-29T07:57:02Z,@theuni Why not just use my approach of generating the headers for 4.6 only? We don't actually _need_ the compiled library. We just need the headers!\n,https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-53847461,53847461,
BitcoinPullTester,2014-09-23T16:26:04Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4727_964c661e00c3fd741c87c5c3929498dbcbec15e9/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-56547856,56547856,
theuni,2014-10-25T04:04:18Z,"Rebased and updated to cope with a6a3f141b1b62a816510ba78d9e6aca991f4815b . Qt4 indeed broke without sslv2 in openssl. One of the benefits of the nasty qt4 build is that we hit those incompatibilities at build-time.\n\nStill not merge-ready, I'd like to go through it one more time top-to-bottom first.\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-60470811,60470811,
laanwj,2014-10-25T07:14:53Z,"Stupid Qt4. Well if that requirement of sslv2 poses any possible security issue, we should just screw desktop integration and move to static Qt5 then.\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-60474302,60474302,
theuni,2014-10-26T21:18:04Z,"Well we have no control over the qt4 that's used, so it will depend on whether sslv2 is patched out of it. Debian and most derivatives do, I'm not sure about others.\n\nAs for our usage, I should think that we should probably be able to specify in code what protocols are allowed?\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-60532725,60532725,
theuni,2014-11-11T06:59:02Z,"Rebased and updated. Results are now deterministic (locally, at least). Now waiting on https://github.com/devrandom/gitian-builder/pull/73 and a final docs update. I'll need to emulate a full release and update the docs accordingly. I'll do that tomorrow, then this will be ready for final testing/review.\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-62509621,62509621,
theuni,2014-11-12T00:43:46Z,"All seems to be in order now. Ready for final review/testing.\n\nNote that the descriptors now contain a version as part of their name. For ex, ""bitcoin-linux-0.10"". That doesn't affect any paths relating to building/signing, but it serves to separate build caches. This way, we'll be able to maintain separate caches for each release to avoid having to rebuild everything. Though of course caches ca",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-62650967,62650967,
laanwj,2014-11-19T13:07:32Z,Build was successful using these descriptors. Output (as of commit d7c2739bfd4db69ddb0f2f3bd96cae77073e4314):\n\n```\n04fd1355e51356c52af9057f7d396ad55e3cea7037c2269b63e2d36ee4efd866  ./linux/32/bin/bitcoind\n23fe28403e118780e470d7cbcfe3972ee8bfa0625bd206de5b72be03eef98c82  ./linux/32/bin/bitcoin-tx\n52499a61a53634ffa47acafe181f0b00d865e26b7ba8d243bfe956216472f572  ./linux/32/bin/test_bitcoin\n279,https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-63636698,63636698,
theuni,2014-11-19T14:31:27Z,Thanks. I'll compare.\n,https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-63647692,63647692,
theuni,2014-11-19T19:06:29Z,"All matches except for the source tarballs. Mine match themselves and yours match themselves, but mine don't match yours. Could you upload one of them somewhere so that I can compare?\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-63694472,63694472,
sipa,2014-11-19T19:14:48Z,What do you mean by 'match themselves' ?\n,https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-63695789,63695789,
theuni,2014-11-19T19:27:23Z,"@sipa win/linux/osx all output source tarballs, and they all match eachother as they should. mine do too, but they're not the same as @laanwj's\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-63697873,63697873,
theuni,2014-11-20T04:48:03Z,I think that should have it worked out.\n\nFrom 246659af:\n\n```\n4b9d79dbb4ad51612676d576cbad96db2611f91af1c5f315829f7407694882e8  ./linux/32/bin/test_bitcoin\n1d5b92f7d9c5499c92542e3dea926a571ec37459cecd69dad250d9c224aed98b  ./linux/32/bin/bitcoin-qt\n4088c5919fd33ab394f65821682704a04afffa37e8eda598f919e33d1b43736e  ./linux/32/bin/bitcoin-tx\n1517ab7e1962407aa719e6ab02f72430135c0ed3dd0af92ec9996,https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-63760781,63760781,
laanwj,2014-11-20T12:24:44Z,@cfields https://download.visucore.com/bitcoin/bitcoin-0.9.99.tar.gz\n,https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-63800487,63800487,
laanwj,2014-11-21T16:07:14Z,"I'm rebuilding the linux gitian with commit 246659a to see if the .tar.gz matches, but I noticed it's also rebuilding Qt. This is taking a long time and that doesn't seem to be necessary?\n(Edit: oops I was building the wrong commit, master instead of 246659a, although that still doesn't explain why it rebuilt Qt. Anyhow it only happened once)\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-63992017,63992017,
laanwj,2014-11-21T16:39:02Z,.tar.gz (and the rest) matches!\n\n> 1f218b21d5cdff8d305248c56f1d0732c3442f579dfafa8e9b0561b4fc942159  src/bitcoin-0.9.99.tar.gz\n,https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-63997823,63997823,
theuni,2014-11-21T18:37:39Z,"woohoo!\n\n@laanwj I'm not sure why qt would've been rebuilt. Best guess is that there was a small change in the last rebase or two, maybe openssl was touched? Otherwise if it rebuild needlessly, that's a bug that I'd want to fix for sure.\n",https://github.com/bitcoin/bitcoin/pull/4727#issuecomment-64016324,64016324,
Michagogo,2014-09-04T19:33:13Z,s/s$//\n,https://github.com/bitcoin/bitcoin/pull/4727#discussion_r17136622,17136622,contrib/gitian-descriptors/README.md
Michagogo,2014-09-04T20:21:58Z,Missing braces here?\n,https://github.com/bitcoin/bitcoin/pull/4727#discussion_r17139486,17139486,contrib/gitian-descriptors/gitian-linux.yml
Michagogo,2014-09-04T20:40:25Z,Why drop this comment?\n,https://github.com/bitcoin/bitcoin/pull/4727#discussion_r17140526,17140526,contrib/gitian-descriptors/gitian-win.yml
Michagogo,2014-09-04T20:45:30Z,"Are these the dirs containing the plain binaries? If so, maybe we should put them in a `$OUTDIR/bin`, so there's src, bin, and setups? _shrug_\n",https://github.com/bitcoin/bitcoin/pull/4727#discussion_r17140859,17140859,contrib/gitian-descriptors/gitian-win.yml
Michagogo,2014-09-04T20:49:44Z,"EDIT: Nevermind, this isn't bash.\n",https://github.com/bitcoin/bitcoin/pull/4727#discussion_r17141172,17141172,depends/packages/libICE.mk
theuni,2014-09-04T22:10:33Z,"These are the install prefixes, so it should be that way already. Under there should be bin/, lib/, etc (hah).\nLooking at it now (don't have a build handy so i can't say for sure), it should look like:\n\n```\nsetup32.exe\nsetup64.exe\nsrc/source.tar.gz\n32/bin/bitcoin_qt (and others)\n32/include/(this will exist when we start shipping libs)\n32/lib/(this will exist when we start shipping libs)\n",https://github.com/bitcoin/bitcoin/pull/4727#discussion_r17145947,17145947,contrib/gitian-descriptors/gitian-win.yml
Michagogo,2014-09-05T14:00:56Z,"Eh? Look at Linux. It looks to me like Linux puts them in $OUTDIR/bin/{32,64}. I'm suggesting that we do the same here.\n-$OUTDIR\n--bin\n---64\n---32\n--src\n",https://github.com/bitcoin/bitcoin/pull/4727#discussion_r17173491,17173491,contrib/gitian-descriptors/gitian-win.yml
theuni,2014-09-05T17:43:19Z,"@Michagogo that's fine, doesn't matter to me.\n",https://github.com/bitcoin/bitcoin/pull/4727#discussion_r17186008,17186008,contrib/gitian-descriptors/gitian-win.yml
