NicolasDorier,2016-04-12T06:28:25Z,it probably broke py tests\n,https://github.com/bitcoin/bitcoin/pull/7863#issuecomment-208728739,208728739,
dcousens,2016-04-12T06:28:59Z,The array also implies that `id` may not be unique.\n\nutACK bc1ebf5.\n,https://github.com/bitcoin/bitcoin/pull/7863#issuecomment-208728826,208728826,
NicolasDorier,2016-04-12T06:30:17Z,"I don't strongly oppose, but using an 'id' is easier for parsers who use class reflection (every statically typed language does it) for parsing the JSON. (In .NET for example, you don't have to parse by hand, you just create your class with an ""id"" field and that's it)\n",https://github.com/bitcoin/bitcoin/pull/7863#issuecomment-208729087,208729087,
rustyrussell,2016-04-12T06:47:01Z,"Thanks @NicolasDorier it did break tests.  It's exactly this kind of code which is why I think the format is ins... sub-optimal:\n\n```\n-    for row in info['bip9_softforks']:\n-        if row['id'] == key:\n-            return row\n-    raise IndexError ('key:""%s"" not found' % key)\n+    return info['bip9_softforks'][key]\n```\n",https://github.com/bitcoin/bitcoin/pull/7863#issuecomment-208734242,208734242,
dcousens,2016-04-12T06:58:55Z,"@rustyrussell agreed,  for selecting it changes the lookup complexity to `O(1)` (not that performance matters, but, it certainly looks/feels nicer)\n@NicolasDorier surely those languages can derive their field from the key, maybe through a custom constructor?\n",https://github.com/bitcoin/bitcoin/pull/7863#issuecomment-208739603,208739603,
NicolasDorier,2016-04-12T07:03:11Z,"@dcousens static languages derive their field the shape of the JSON. Changing it that way will mean there will be one different field for each fork proposal instead of a simple non typed array.\n\nBut by thinking about it is in reality it is not so much a problem, because the list of bip9 is static anyway, so it makes sense for a static language to have a different field for each different fork pr",https://github.com/bitcoin/bitcoin/pull/7863#issuecomment-208741107,208741107,
dcousens,2016-04-12T07:49:44Z,"@NicolasDorier keeping the `id` field seems like it would entirely be a special case just for libraries that automatically parse the JSON into class objects. \nFor those that might access the JSON using a more traditional approach `json[""key""][""sub-key""]` (etc), it just becomes a tedium. \n\nI've only ever used the RPC using Python/Javascript and C++, all of which that traditional approach ruled s",https://github.com/bitcoin/bitcoin/pull/7863#issuecomment-208762714,208762714,
MarcoFalke,2016-04-12T07:59:21Z,Travis error unrelated:  #7846\n,https://github.com/bitcoin/bitcoin/pull/7863#issuecomment-208767328,208767328,
NicolasDorier,2016-04-12T08:46:53Z,"@dcousens well, when one solution improve the life of some people, it makes more difficult the life of other. Should we make life easier for hackish tool to parse json or make easier for parser library for static language is a question without responses. \n\nWhat you call ""traditional approach"" is different for both of us, as we code in different environments.\n\nBut by thinking about it I don't t",https://github.com/bitcoin/bitcoin/pull/7863#issuecomment-208793757,208793757,
rustyrussell,2016-04-13T07:34:30Z,"OK, found another place in the tests which cut & paste the same function.  And added BTCDrak's error cleanup as suggested by @MarcoFalke as a separate commit on top.\n",https://github.com/bitcoin/bitcoin/pull/7863#issuecomment-209279300,209279300,
btcdrak,2016-04-13T07:40:55Z,tACK d12760b\n,https://github.com/bitcoin/bitcoin/pull/7863#issuecomment-209285590,209285590,
MarcoFalke,2016-04-13T09:38:14Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/7863#issuecomment-209338541,209338541,
laanwj,2016-04-13T16:04:05Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7863#issuecomment-209524732,209524732,
MarcoFalke,2016-07-11T13:18:43Z,Removing label 'Needs backport'. Please discuss in #8186 about the backport.\n,https://github.com/bitcoin/bitcoin/pull/7863#issuecomment-231731348,231731348,
btcdrak,2016-04-12T10:43:00Z,"Could you change this to preserve the `IndexError` exception on key not found, `null`.\n",https://github.com/bitcoin/bitcoin/pull/7863#discussion_r59355349,59355349,qa/rpc-tests/test_framework/util.py
MarcoFalke,2016-04-12T11:27:59Z,"It should throw a `KeyError`, which is fine. Am I missing something?\n",https://github.com/bitcoin/bitcoin/pull/7863#discussion_r59359808,59359808,qa/rpc-tests/test_framework/util.py
btcdrak,2016-04-12T11:53:50Z,@MarcoFalke even better. The point is to preserve the previous behaviour of throwing a meaningful exception rather than leaving it to Python which results in `Unexpected exception caught during testing: 'xxxx'`.\n,https://github.com/bitcoin/bitcoin/pull/7863#discussion_r59362481,59362481,qa/rpc-tests/test_framework/util.py
MarcoFalke,2016-04-12T14:00:24Z,"Oh, actually this is not the issue of the code here. To get a better error message, you'd have to change `str` into `repr` in this line: https://github.com/bitcoin/bitcoin/blob/514993554c370f4cf30a109ac28d5d64893dbf0a/qa/rpc-tests/test_framework/test_framework.py#L146\n",https://github.com/bitcoin/bitcoin/pull/7863#discussion_r59380462,59380462,qa/rpc-tests/test_framework/util.py
MarcoFalke,2016-04-13T09:42:37Z,> found another place in the tests which cut & paste the same function.\n\nI'd rather have this duplicate code removed... You change stuff in one branch of the code and later notice you have missed to apply the patch to all other copies of the code.\n,https://github.com/bitcoin/bitcoin/pull/7863#discussion_r59520264,59520264,qa/rpc-tests/bip9-softforks.py
btcdrak,2016-04-13T15:26:33Z,"Yes, this can go since the function was moved to `util.py` @rustyrussell \n",https://github.com/bitcoin/bitcoin/pull/7863#discussion_r59569088,59569088,qa/rpc-tests/bip9-softforks.py
