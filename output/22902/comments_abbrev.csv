0xB10C,2021-09-06 15:25:12,"Concept ACK.\n\n@arnabsen1729 is working on this as part of his [summerofbitcoin.org](https://summerofbitcoin.org) project. I've mentored him along the way. Some earlier review is in https://github.com/0xB10C/bitcoin/pull/1.\n\nI suspect hooking into the `add` and `spend` tracepoints during IBD could have a noticeable performance impact. I'll test this. If is is the case, then it should be doc",https://github.com/bitcoin/bitcoin/pull/22902#issuecomment-913726985,913726985,
DrahtBot,2021-09-07 00:28:44,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#9384](https://github.com/bitcoin/bitcoin/pull/9384) (CCoinsViewCache code cleanup & deduplication by ryanofsky)\n\nIf yo",https://github.com/bitcoin/bitcoin/pull/22902#issuecomment-913911250,913911250,
practicalswift,2021-09-08 07:58:08,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22902#issuecomment-915008258,915008258,
theStack,2021-09-08 14:28:20,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22902#issuecomment-915289125,915289125,
0xB10C,2021-09-10 09:32:29,"My benchmarks (4x reindex-chainstate till block 500000 for both the mergebase 92aad5303b9b96c46015156b5dc96b48e9e7bc76 and 15b8ba500d59c6c5de764cd13c22d0cb44d6bd14) show that this PR increases time spent in `ConnectBlock` by about 3.4%. This is without hooking into the tracepoints. \n\n![image](https://user-images.githubusercontent.com/19157360/132832934-81727f02-0292-4530-95e7-7e754c843e18.png)",https://github.com/bitcoin/bitcoin/pull/22902#issuecomment-916768924,916768924,
0xB10C,2021-09-11 23:00:52,"Did some more profiling on a node in IBD running with this PR (https://github.com/bitcoin/bitcoin/commit/15b8ba500d59c6c5de764cd13c22d0cb44d6bd14) to make sure the `ToString()` is really the issue here.\n\nIn `CCoinsViewCache::SpendCoin` we spend more than half of the time in `ToString()`.  \n![image](https://user-images.githubusercontent.com/19157360/132963574-4df9aa0a-6cce-4149-8cb1-8f08ca0b4",https://github.com/bitcoin/bitcoin/pull/22902#issuecomment-917498376,917498376,
laanwj,2021-10-01 07:29:25,"I think in general good advice is to pass binary/raw data into the trace functions directly. Don't spent effort formatting, you can do this on the other side (and only when necessary, just before presentation to the user).",https://github.com/bitcoin/bitcoin/pull/22902#issuecomment-931979916,931979916,
laanwj,2021-11-10 18:39:49,"Concept and light code review ACK, thanks for adding tracepoints!\n\nEdit: see discussion please remove the `ToString`.",https://github.com/bitcoin/bitcoin/pull/22902#issuecomment-965631546,965631546,
laanwj,2021-11-29 12:31:56,"Thanks for updating!\nCode and documentation review ACK 2bc51c5c3215398875c04456a3f3df1c07b830b5",https://github.com/bitcoin/bitcoin/pull/22902#issuecomment-981592097,981592097,
jb55,2021-09-06 16:26:26,what's the purpose of this argument? ,https://github.com/bitcoin/bitcoin/pull/22902#discussion_r703001878,703001878,src/validation.cpp
jb55,2021-09-06 16:36:38,do we need the hash string here (and the ones below)? we should avoid doing non-negligible computations in traces.,https://github.com/bitcoin/bitcoin/pull/22902#discussion_r703005689,703005689,src/coins.cpp
0xB10C,2021-09-06 17:01:01,"We need if we want to support the current versions of `bpftrace` as it can't print binary data in hex (or at all really).\n\nrelated discussion https://github.com/bitcoin/bitcoin/pull/22006#discussion_r638775357 \n\nmight be worth thinking about adding support for this in `bpftrace` rather than this _work around_ here",https://github.com/bitcoin/bitcoin/pull/22902#discussion_r703013754,703013754,src/coins.cpp
0xB10C,2021-09-06 17:03:53,I agree that `outpoint.hash.ToString().c_str()` here is called _a lot_ more than the `hash.data().toString().c_str()` in the connect_block tracepoint. This could hurt performance. Might need to drop this. ,https://github.com/bitcoin/bitcoin/pull/22902#discussion_r703014722,703014722,src/coins.cpp
martinus,2021-09-09 07:12:38,"How about only using the first 64bit of the hash: `outpoint.hash.GetUint64(0)`. This should be very fast and maybe unique enough, at least for the purpose of tracing",https://github.com/bitcoin/bitcoin/pull/22902#discussion_r705041737,705041737,src/coins.cpp
0xB10C,2021-09-09 07:19:16,"We already pass `outpoint.hash.data()` as the last argument, that's not the issue. The issue here is the `ToString()` part which might be to expensive in such a frequently called function while being only a work around for `bpftrace` not supporting hex-formatting.",https://github.com/bitcoin/bitcoin/pull/22902#discussion_r705047534,705047534,src/coins.cpp
0xB10C,2021-09-09 09:55:57,"I just came across https://github.com/iovisor/bpftrace/issues/659#issuecomment-568624842. We don't need to use the built-in hex-formatting as it's quite simple just `printf(""%02x"")` each byte of the txid in an [`unroll () {...}`][1]. This even allows us to print the txids in big-endian (the block-explorer format). \n\n```\n  $p = $txid + 31;\n  unroll(32) {\n      $b = *(uint8*)$p;\n      pr",https://github.com/bitcoin/bitcoin/pull/22902#discussion_r705176691,705176691,src/coins.cpp
arnabsen1729,2021-09-10 09:40:10,"The purpose was to get the duration of the flush, this value can be used for benchmarking purposes. \n\nThe `nNow` was declared here:\nhttps://github.com/bitcoin/bitcoin/blob/384d07601185d0779c324392e798da234163ca72/src/validation.cpp#L1969",https://github.com/bitcoin/bitcoin/pull/22902#discussion_r706044573,706044573,src/validation.cpp
jb55,2021-09-10 22:55:26,"Nice, I was trying to use unroll like this for printing data in bpftrace but could never figure it out. I was never able to do it based on a length argument, probably because it wasn't a literal. This case works fine though since we know the length of the hash.",https://github.com/bitcoin/bitcoin/pull/22902#discussion_r706509325,706509325,src/coins.cpp
laanwj,2021-11-10 19:00:11,"> We already pass outpoint.hash.data() as the last argument, that's not the issue. The issue here is the ToString() part which might be to expensive in such a frequently called function while being only a work around for bpftrace not supporting hex-formatting.\n\nI agree here. Let's remove this ToString argument. It's too much overhead to allocate, construct, deallocate a string here every time ",https://github.com/bitcoin/bitcoin/pull/22902#discussion_r746898280,746898280,src/coins.cpp
0xB10C,2021-11-29 15:48:34,"This tracepoint is being called each time `FlushStateToDisk()` is called, even when we don't flush. We call `FlushStateToDisk()` with `FlushStateMode::PERIODIC` in `AcceptToMemoryPoolWithTime()` for each transaction accepted to mempool.",https://github.com/bitcoin/bitcoin/pull/22902#discussion_r758492317,758492317,src/validation.cpp
0xB10C,2021-11-29 15:50:45,We didn't flush here. We should only trace and log on flushes and not each time `FlushStateToDisk()` is called. See https://github.com/bitcoin/bitcoin/pull/22902#discussion_r758492317.,https://github.com/bitcoin/bitcoin/pull/22902#discussion_r758494620,758494620,contrib/tracing/README.md
jamesob,2021-11-29 18:03:48,"If this is specifically about flushing the UTXO set, it should probably be moved a few lines higher into the conditional where the associated `LOG_TIME_MILLIS...` call is: https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp#L2087-L2089\n\nHowever based on the included doc, it sounds like this tracepoint is attempting to include both UTXO cache flushes and block index flushes. I thi",https://github.com/bitcoin/bitcoin/pull/22902#discussion_r758611463,758611463,src/validation.cpp
