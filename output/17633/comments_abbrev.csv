DrahtBot,2019-11-29 19:36:03,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#12134](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/12134.html) (Build previous releases and run functional ",https://github.com/bitcoin/bitcoin/pull/17633#issuecomment-559869749,559869749,
practicalswift,2019-12-02 14:13:23,"@paymog \n\nThere are a few failing tests: most of them due to timing assumptions that fail in the presence of the `bitcoind` slowdown caused by Valgrind. I plan to fix these failing tests by increasing timeouts where required.\n\nNote that doing that has the added nice benefit of turning a few flaky tests into stable ones since said timing assumptions are intermittently violated under normal ",https://github.com/bitcoin/bitcoin/pull/17633#issuecomment-560413071,560413071,
MarcoFalke,2019-12-03 15:53:36,ACK 5db506ba5943868cc2c845f717508739b7f05714,https://github.com/bitcoin/bitcoin/pull/17633#issuecomment-561230537,561230537,
MarcoFalke,2019-12-03 20:16:37,"@jonatack What does `combine_logs.py` tell you, and are the directories `stdout` and `stderr` in the test dir empty?",https://github.com/bitcoin/bitcoin/pull/17633#issuecomment-561338553,561338553,
jonatack,2019-12-03 20:29:21,@MarcoFalke thanks! I don't see `stdout` or `stderr` directories in /test and /test/functional. [Here is the combine_logs.py output](https://gist.github.com/jonatack/915df3494f9f7274a07e29ae092a2a47) for p2p_segwit.py (which passes without the `--valgrind` option).,https://github.com/bitcoin/bitcoin/pull/17633#issuecomment-561343292,561343292,
MarcoFalke,2019-12-03 20:52:18,Try `tail /tmp/bitcoin_func_test_u513zycz/node*/std*` or similar (Reminds me that this should ideally be done by `combine_logs.py`),https://github.com/bitcoin/bitcoin/pull/17633#issuecomment-561351704,561351704,
MarcoFalke,2019-12-03 20:54:46,"Also, could you try with the suppressions file from https://github.com/bitcoin/bitcoin/pull/17490/files#diff-8982317ece972c9b26bd8545350812f2R31 ? Maybe remove the line I linked to if it still doesn't work.",https://github.com/bitcoin/bitcoin/pull/17633#issuecomment-561352582,561352582,
jonatack,2019-12-03 23:31:51,"ACK 5db506ba5943868cc2c845f717508739b7f05714\n\nReviewed code, reproduced the PR description steps after modifying `contrib/valgrind.supp` ([diff](https://gist.github.com/jonatack/d042208cff84f9cda11fdb64dc730fd2))... perhaps I have a depends issue in my build.\n\nThank you @MarcoFalke for your suggestions.\n",https://github.com/bitcoin/bitcoin/pull/17633#issuecomment-561405084,561405084,
practicalswift,2019-12-10 16:24:52,"> Try `tail /tmp/bitcoin_func_test_u513zycz/node*/std*` or similar (Reminds me that this should ideally be done by `combine_logs.py`)\n\nI'm probably missing something, but isn't that what `print_node_warnings` in `combine_logs.py` does? :)\n\nhttps://github.com/bitcoin/bitcoin/blob/1189b6acab115a7fe7bd67f8b4c6e3f55e53274e/test/functional/combine_logs.py#L98-L111\n",https://github.com/bitcoin/bitcoin/pull/17633#issuecomment-564113499,564113499,
MarcoFalke,2019-12-10 16:32:23,Ah right. Forgot that I already wrote that. And it indeed was also included in https://gist.github.com/jonatack/915df3494f9f7274a07e29ae092a2a47#file-pr17633-combine_log_output-txt-L263,https://github.com/bitcoin/bitcoin/pull/17633#issuecomment-564117054,564117054,
paymog,2019-11-30 09:13:56,"what do you think about updating the [developer docs](https://github.com/bitcoin/bitcoin/blob/33c103e2fe67e32e9f4e783fa243dd2bba6b1682/doc/developer-notes.md) or some other documentation (I'm new to bitcoin so I don't know where the right place is) with instructions on valgrind? \n\nIs there a CI step that runs the functional tests? Should we use this option there?",https://github.com/bitcoin/bitcoin/pull/17633#discussion_r352275058,352275058,test/functional/test_framework/test_framework.py
paymog,2019-11-30 09:15:21,Searching for valgrind doesn't show much documentation: https://github.com/bitcoin/bitcoin/search?q=valgrind&unscoped_q=valgrind,https://github.com/bitcoin/bitcoin/pull/17633#discussion_r352275126,352275126,test/functional/test_framework/test_framework.py
paymog,2019-11-30 09:15:36,`--exist-on-first-error` might slow down the development cycle if there are multiple valgrind problems in a single change.,https://github.com/bitcoin/bitcoin/pull/17633#discussion_r352275132,352275132,test/functional/test_framework/test_node.py
practicalswift,2019-12-02 10:30:26,"There is no easy way to achieve what we are trying to do here without using `--exit-on-first-error`, and hopefully it won't be very common with more than one memory problem per `bitcoind` execution. Additionally, continuing execution after a memory error is not meaningful: the diagnostics emitted after the first error are likely spurious anyways :)\n\nSo in summary -- we'll have to live with `--",https://github.com/bitcoin/bitcoin/pull/17633#discussion_r352522216,352522216,test/functional/test_framework/test_node.py
jonatack,2019-12-03 19:44:31,"suggestion if you have to retouch this:\n```diff\n-            self.args = [""valgrind"", ""--suppressions={}"".format(suppressions_file),\n-                         ""--gen-suppressions=all"", ""--exit-on-first-error=yes"",\n-                         ""--error-exitcode=1"", ""--quiet""] + self.args\n+            self.args = [\n+                ""valgrind"",\n+                ""--suppressions={}"".format(s",https://github.com/bitcoin/bitcoin/pull/17633#discussion_r353385158,353385158,test/functional/test_framework/test_node.py
