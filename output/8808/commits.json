[
  {
    "sha": "9de90bb749926a51aac15d5998bff3e12425675e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGU5MGJiNzQ5OTI2YTUxYWFjMTVkNTk5OGJmZjNlMTI0MjU2NzVl",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-11-10T07:00:05Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-12-05T10:41:46Z"
      },
      "message": "Do not shadow variables (gcc set)",
      "tree": {
        "sha": "c8f36dfda28f69e8f90ea8bffb668a927d031e8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8f36dfda28f69e8f90ea8bffb668a927d031e8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9de90bb749926a51aac15d5998bff3e12425675e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9de90bb749926a51aac15d5998bff3e12425675e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9de90bb749926a51aac15d5998bff3e12425675e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9de90bb749926a51aac15d5998bff3e12425675e/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "43e8150ef69093c906c4406ce58c1fd21fee898e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43e8150ef69093c906c4406ce58c1fd21fee898e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/43e8150ef69093c906c4406ce58c1fd21fee898e"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 45,
      "deletions": 45
    },
    "files": [
      {
        "sha": "64c9dc2bb851a5f1aad316217ccd73ce535935f4",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9de90bb749926a51aac15d5998bff3e12425675e/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9de90bb749926a51aac15d5998bff3e12425675e/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=9de90bb749926a51aac15d5998bff3e12425675e",
        "patch": "@@ -173,9 +173,9 @@ unsigned int base_uint<BITS>::bits() const\n {\n     for (int pos = WIDTH - 1; pos >= 0; pos--) {\n         if (pn[pos]) {\n-            for (int bits = 31; bits > 0; bits--) {\n-                if (pn[pos] & 1 << bits)\n-                    return 32 * pos + bits + 1;\n+            for (int nbits = 31; nbits > 0; nbits--) {\n+                if (pn[pos] & 1 << nbits)\n+                    return 32 * pos + nbits + 1;\n             }\n             return 32 * pos + 1;\n         }"
      },
      {
        "sha": "43a1422795434fd763629d17d98eb1ed88f9d808",
        "filename": "src/bench/lockedpool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9de90bb749926a51aac15d5998bff3e12425675e/src/bench/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9de90bb749926a51aac15d5998bff3e12425675e/src/bench/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/lockedpool.cpp?ref=9de90bb749926a51aac15d5998bff3e12425675e",
        "patch": "@@ -13,7 +13,7 @@\n #define BITER 5000\n #define MSIZE 2048\n \n-static void LockedPool(benchmark::State& state)\n+static void BenchLockedPool(benchmark::State& state)\n {\n     void *synth_base = reinterpret_cast<void*>(0x08000000);\n     const size_t synth_size = 1024*1024;\n@@ -43,5 +43,5 @@ static void LockedPool(benchmark::State& state)\n     addr.clear();\n }\n \n-BENCHMARK(LockedPool);\n+BENCHMARK(BenchLockedPool);\n "
      },
      {
        "sha": "b0471be7431af441ebd4cc84ec2104cdb9d125de",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9de90bb749926a51aac15d5998bff3e12425675e/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9de90bb749926a51aac15d5998bff3e12425675e/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=9de90bb749926a51aac15d5998bff3e12425675e",
        "patch": "@@ -358,9 +358,9 @@ class CDiskBlockIndex : public CBlockIndex\n \n     template <typename Stream, typename Operation>\n     inline void SerializationOp(Stream& s, Operation ser_action) {\n-        int nVersion = s.GetVersion();\n+        int _nVersion = s.GetVersion();\n         if (!(s.GetType() & SER_GETHASH))\n-            READWRITE(VARINT(nVersion));\n+            READWRITE(VARINT(_nVersion));\n \n         READWRITE(VARINT(nHeight));\n         READWRITE(VARINT(nStatus));"
      },
      {
        "sha": "60f6f711e6087ff4d62bc36a7eefe7e7239301e9",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9de90bb749926a51aac15d5998bff3e12425675e/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9de90bb749926a51aac15d5998bff3e12425675e/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=9de90bb749926a51aac15d5998bff3e12425675e",
        "patch": "@@ -171,7 +171,7 @@ class MutableTransactionSignatureChecker : public TransactionSignatureChecker\n     const CTransaction txTo;\n \n public:\n-    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amount) : TransactionSignatureChecker(&txTo, nInIn, amount), txTo(*txToIn) {}\n+    MutableTransactionSignatureChecker(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : TransactionSignatureChecker(&txTo, nInIn, amountIn), txTo(*txToIn) {}\n };\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = NULL);"
      },
      {
        "sha": "8ec0ba27d3a290da18f4525173a42541e353a655",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9de90bb749926a51aac15d5998bff3e12425675e/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9de90bb749926a51aac15d5998bff3e12425675e/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=9de90bb749926a51aac15d5998bff3e12425675e",
        "patch": "@@ -186,18 +186,18 @@ unsigned int CScript::GetSigOpCount(const CScript& scriptSig) const\n     // get the last item that the scriptSig\n     // pushes onto the stack:\n     const_iterator pc = scriptSig.begin();\n-    vector<unsigned char> data;\n+    vector<unsigned char> vData;\n     while (pc < scriptSig.end())\n     {\n         opcodetype opcode;\n-        if (!scriptSig.GetOp(pc, opcode, data))\n+        if (!scriptSig.GetOp(pc, opcode, vData))\n             return 0;\n         if (opcode > OP_16)\n             return 0;\n     }\n \n     /// ... and return its opcount:\n-    CScript subscript(data.begin(), data.end());\n+    CScript subscript(vData.begin(), vData.end());\n     return subscript.GetSigOpCount(true);\n }\n "
      },
      {
        "sha": "11be6ba7d39334d5ee1d5e961df62cc1ae356674",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9de90bb749926a51aac15d5998bff3e12425675e/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9de90bb749926a51aac15d5998bff3e12425675e/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=9de90bb749926a51aac15d5998bff3e12425675e",
        "patch": "@@ -449,16 +449,16 @@ class CScript : public CScriptBase\n         else if (b.size() <= 0xffff)\n         {\n             insert(end(), OP_PUSHDATA2);\n-            uint8_t data[2];\n-            WriteLE16(data, b.size());\n-            insert(end(), data, data + sizeof(data));\n+            uint8_t _data[2];\n+            WriteLE16(_data, b.size());\n+            insert(end(), _data, _data + sizeof(_data));\n         }\n         else\n         {\n             insert(end(), OP_PUSHDATA4);\n-            uint8_t data[4];\n-            WriteLE32(data, b.size());\n-            insert(end(), data, data + sizeof(data));\n+            uint8_t _data[4];\n+            WriteLE32(_data, b.size());\n+            insert(end(), _data, _data + sizeof(_data));\n         }\n         insert(end(), b.begin(), b.end());\n         return *this;"
      },
      {
        "sha": "10950028994a37985c4e9ab4a896d2e287895537",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9de90bb749926a51aac15d5998bff3e12425675e/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9de90bb749926a51aac15d5998bff3e12425675e/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=9de90bb749926a51aac15d5998bff3e12425675e",
        "patch": "@@ -22,7 +22,7 @@ class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n     bool store;\n \n public:\n-    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amount, bool storeIn, PrecomputedTransactionData& txdataIn) : TransactionSignatureChecker(txToIn, nInIn, amount, txdataIn), store(storeIn) {}\n+    CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, bool storeIn, PrecomputedTransactionData& txdataIn) : TransactionSignatureChecker(txToIn, nInIn, amountIn, txdataIn), store(storeIn) {}\n \n     bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n };"
      },
      {
        "sha": "78eb95fb99919fda02fef50442aa316102ae6b2e",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9de90bb749926a51aac15d5998bff3e12425675e/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9de90bb749926a51aac15d5998bff3e12425675e/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=9de90bb749926a51aac15d5998bff3e12425675e",
        "patch": "@@ -48,7 +48,7 @@ class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n     CTransaction tx;\n \n public:\n-    MutableTransactionSignatureCreator(const CKeyStore* keystoreIn, const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amount, int nHashTypeIn) : TransactionSignatureCreator(keystoreIn, &tx, nInIn, amount, nHashTypeIn), tx(*txToIn) {}\n+    MutableTransactionSignatureCreator(const CKeyStore* keystoreIn, const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : TransactionSignatureCreator(keystoreIn, &tx, nInIn, amountIn, nHashTypeIn), tx(*txToIn) {}\n };\n \n /** A signature creator that just produces 72-byte empty signatures. */"
      },
      {
        "sha": "05facad709f2303b2ca288c144d59d2aa66237eb",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9de90bb749926a51aac15d5998bff3e12425675e/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9de90bb749926a51aac15d5998bff3e12425675e/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=9de90bb749926a51aac15d5998bff3e12425675e",
        "patch": "@@ -586,11 +586,11 @@ class CBufferedFile\n             readNow = nAvail;\n         if (readNow == 0)\n             return false;\n-        size_t read = fread((void*)&vchBuf[pos], 1, readNow, src);\n-        if (read == 0) {\n+        size_t nBytes = fread((void*)&vchBuf[pos], 1, readNow, src);\n+        if (nBytes == 0) {\n             throw std::ios_base::failure(feof(src) ? \"CBufferedFile::Fill: end of file\" : \"CBufferedFile::Fill: fread failed\");\n         } else {\n-            nSrcPos += read;\n+            nSrcPos += nBytes;\n             return true;\n         }\n     }"
      },
      {
        "sha": "98c15810934dc56f401b358469db934a371560ac",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9de90bb749926a51aac15d5998bff3e12425675e/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9de90bb749926a51aac15d5998bff3e12425675e/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=9de90bb749926a51aac15d5998bff3e12425675e",
        "patch": "@@ -357,8 +357,8 @@ LockedPool::LockedPageArena::~LockedPageArena()\n /*******************************************************************************/\n // Implementation: LockedPoolManager\n //\n-LockedPoolManager::LockedPoolManager(std::unique_ptr<LockedPageAllocator> allocator):\n-    LockedPool(std::move(allocator), &LockedPoolManager::LockingFailed)\n+LockedPoolManager::LockedPoolManager(std::unique_ptr<LockedPageAllocator> allocator_in):\n+    LockedPool(std::move(allocator_in), &LockedPoolManager::LockingFailed)\n {\n }\n "
      },
      {
        "sha": "6c0a56c10eb9b1656412dad78aab2e06ff3c7275",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9de90bb749926a51aac15d5998bff3e12425675e/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9de90bb749926a51aac15d5998bff3e12425675e/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=9de90bb749926a51aac15d5998bff3e12425675e",
        "patch": "@@ -68,7 +68,7 @@ class CCoinsViewTest : public CCoinsView\n class CCoinsViewCacheTest : public CCoinsViewCache\n {\n public:\n-    CCoinsViewCacheTest(CCoinsView* base) : CCoinsViewCache(base) {}\n+    CCoinsViewCacheTest(CCoinsView* _base) : CCoinsViewCache(_base) {}\n \n     void SelfTest() const\n     {"
      },
      {
        "sha": "111b9e0ebd015c06f66dde49ceccb79ccf762ec1",
        "filename": "src/timedata.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9de90bb749926a51aac15d5998bff3e12425675e/src/timedata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9de90bb749926a51aac15d5998bff3e12425675e/src/timedata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.h?ref=9de90bb749926a51aac15d5998bff3e12425675e",
        "patch": "@@ -27,9 +27,9 @@ class CMedianFilter\n     unsigned int nSize;\n \n public:\n-    CMedianFilter(unsigned int size, T initial_value) : nSize(size)\n+    CMedianFilter(unsigned int _size, T initial_value) : nSize(_size)\n     {\n-        vValues.reserve(size);\n+        vValues.reserve(_size);\n         vValues.push_back(initial_value);\n         vSorted = vValues;\n     }\n@@ -48,14 +48,14 @@ class CMedianFilter\n \n     T median() const\n     {\n-        int size = vSorted.size();\n-        assert(size > 0);\n-        if (size & 1) // Odd number of elements\n+        int vSortedSize = vSorted.size();\n+        assert(vSortedSize > 0);\n+        if (vSortedSize & 1) // Odd number of elements\n         {\n-            return vSorted[size / 2];\n+            return vSorted[vSortedSize / 2];\n         } else // Even number of elements\n         {\n-            return (vSorted[size / 2 - 1] + vSorted[size / 2]) / 2;\n+            return (vSorted[vSortedSize / 2 - 1] + vSorted[vSortedSize / 2]) / 2;\n         }\n     }\n "
      },
      {
        "sha": "5e1f9c445ef1fa6e9b55b96191ba2bb97524b1ae",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9de90bb749926a51aac15d5998bff3e12425675e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9de90bb749926a51aac15d5998bff3e12425675e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9de90bb749926a51aac15d5998bff3e12425675e",
        "patch": "@@ -280,17 +280,17 @@ bool CWallet::LoadWatchOnly(const CScript &dest)\n bool CWallet::Unlock(const SecureString& strWalletPassphrase)\n {\n     CCrypter crypter;\n-    CKeyingMaterial vMasterKey;\n+    CKeyingMaterial _vMasterKey;\n \n     {\n         LOCK(cs_wallet);\n         BOOST_FOREACH(const MasterKeyMap::value_type& pMasterKey, mapMasterKeys)\n         {\n             if(!crypter.SetKeyFromPassphrase(strWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                 return false;\n-            if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, vMasterKey))\n+            if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, _vMasterKey))\n                 continue; // try another master key\n-            if (CCryptoKeyStore::Unlock(vMasterKey))\n+            if (CCryptoKeyStore::Unlock(_vMasterKey))\n                 return true;\n         }\n     }\n@@ -306,14 +306,14 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n         Lock();\n \n         CCrypter crypter;\n-        CKeyingMaterial vMasterKey;\n+        CKeyingMaterial _vMasterKey;\n         BOOST_FOREACH(MasterKeyMap::value_type& pMasterKey, mapMasterKeys)\n         {\n             if(!crypter.SetKeyFromPassphrase(strOldWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                 return false;\n-            if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, vMasterKey))\n+            if (!crypter.Decrypt(pMasterKey.second.vchCryptedKey, _vMasterKey))\n                 return false;\n-            if (CCryptoKeyStore::Unlock(vMasterKey))\n+            if (CCryptoKeyStore::Unlock(_vMasterKey))\n             {\n                 int64_t nStartTime = GetTimeMillis();\n                 crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod);\n@@ -330,7 +330,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n                 if (!crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod))\n                     return false;\n-                if (!crypter.Encrypt(vMasterKey, pMasterKey.second.vchCryptedKey))\n+                if (!crypter.Encrypt(_vMasterKey, pMasterKey.second.vchCryptedKey))\n                     return false;\n                 CWalletDB(strWalletFile).WriteMasterKey(pMasterKey.first, pMasterKey.second);\n                 if (fWasLocked)\n@@ -561,10 +561,10 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     if (IsCrypted())\n         return false;\n \n-    CKeyingMaterial vMasterKey;\n+    CKeyingMaterial _vMasterKey;\n \n-    vMasterKey.resize(WALLET_CRYPTO_KEY_SIZE);\n-    GetStrongRandBytes(&vMasterKey[0], WALLET_CRYPTO_KEY_SIZE);\n+    _vMasterKey.resize(WALLET_CRYPTO_KEY_SIZE);\n+    GetStrongRandBytes(&_vMasterKey[0], WALLET_CRYPTO_KEY_SIZE);\n \n     CMasterKey kMasterKey;\n \n@@ -587,7 +587,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n     if (!crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, kMasterKey.nDeriveIterations, kMasterKey.nDerivationMethod))\n         return false;\n-    if (!crypter.Encrypt(vMasterKey, kMasterKey.vchCryptedKey))\n+    if (!crypter.Encrypt(_vMasterKey, kMasterKey.vchCryptedKey))\n         return false;\n \n     {\n@@ -605,7 +605,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n             pwalletdbEncryption->WriteMasterKey(nMasterKeyMaxID, kMasterKey);\n         }\n \n-        if (!EncryptKeys(vMasterKey))\n+        if (!EncryptKeys(_vMasterKey))\n         {\n             if (fFileBacked) {\n                 pwalletdbEncryption->TxnAbort();"
      },
      {
        "sha": "062438385cafefb0f8d04539e3b3e85a289e794e",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9de90bb749926a51aac15d5998bff3e12425675e/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9de90bb749926a51aac15d5998bff3e12425675e/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=9de90bb749926a51aac15d5998bff3e12425675e",
        "patch": "@@ -116,7 +116,7 @@ class CKeyMetadata\n class CWalletDB : public CDB\n {\n public:\n-    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool fFlushOnClose = true) : CDB(strFilename, pszMode, fFlushOnClose)\n+    CWalletDB(const std::string& strFilename, const char* pszMode = \"r+\", bool _fFlushOnClose = true) : CDB(strFilename, pszMode, _fFlushOnClose)\n     {\n     }\n "
      }
    ]
  },
  {
    "sha": "ad1ae7ae2e90a29fcfaaddee2d5acd025de72cbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDFhZTdhZTJlOTBhMjlmY2ZhYWRkZWUyZDVhY2QwMjVkZTcyY2Jl",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-09-22T14:36:03Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-12-05T10:41:52Z"
      },
      "message": "Check and enable -Wshadow by default.",
      "tree": {
        "sha": "4510073ac88e27548f17b2e832f9fe524c897973",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4510073ac88e27548f17b2e832f9fe524c897973"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad1ae7ae2e90a29fcfaaddee2d5acd025de72cbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad1ae7ae2e90a29fcfaaddee2d5acd025de72cbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad1ae7ae2e90a29fcfaaddee2d5acd025de72cbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad1ae7ae2e90a29fcfaaddee2d5acd025de72cbe/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9de90bb749926a51aac15d5998bff3e12425675e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9de90bb749926a51aac15d5998bff3e12425675e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9de90bb749926a51aac15d5998bff3e12425675e"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "109bbcca7bb0c30e5142a66a0ef031e3dc25a649",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1ae7ae2e90a29fcfaaddee2d5acd025de72cbe/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1ae7ae2e90a29fcfaaddee2d5acd025de72cbe/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=ad1ae7ae2e90a29fcfaaddee2d5acd025de72cbe",
        "patch": "@@ -211,6 +211,7 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wextra],[CXXFLAGS=\"$CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wformat],[CXXFLAGS=\"$CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wformat-security],[CXXFLAGS=\"$CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wshadow],[CXXFLAGS=\"$CXXFLAGS -Wshadow\"],,[[$CXXFLAG_WERROR]])\n \n   ## Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n   ## unknown options if any other warning is produced. Test the -Wfoo case, and"
      }
    ]
  }
]