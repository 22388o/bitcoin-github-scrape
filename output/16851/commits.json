[
  {
    "sha": "168b781fe7f3f13b24c52a151f36de4cdd0a340a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjhiNzgxZmU3ZjNmMTNiMjRjNTJhMTUxZjM2ZGU0Y2RkMGEzNDBh",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-09-10T08:00:17Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2019-10-23T01:36:24Z"
      },
      "message": "Continue relaying transactions after they expire from mapRelay",
      "tree": {
        "sha": "67cb17dcacd0211ca372a5355f983290e516b65a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67cb17dcacd0211ca372a5355f983290e516b65a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/168b781fe7f3f13b24c52a151f36de4cdd0a340a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168b781fe7f3f13b24c52a151f36de4cdd0a340a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/168b781fe7f3f13b24c52a151f36de4cdd0a340a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/168b781fe7f3f13b24c52a151f36de4cdd0a340a/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a689c119076c7b8dc5b4dea4539e4cbf5adfb72f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a689c119076c7b8dc5b4dea4539e4cbf5adfb72f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a689c119076c7b8dc5b4dea4539e4cbf5adfb72f"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 14,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e5f101758cffebeba6fd4295bfc62c5d595f558f",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 4,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/168b781fe7f3f13b24c52a151f36de4cdd0a340a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/168b781fe7f3f13b24c52a151f36de4cdd0a340a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=168b781fe7f3f13b24c52a151f36de4cdd0a340a",
        "patch": "@@ -39,6 +39,8 @@\n static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;\n /** Minimum time between orphan transactions expire time checks in seconds */\n static constexpr int64_t ORPHAN_TX_EXPIRE_INTERVAL = 5 * 60;\n+/** How long to cache transactions in mapRelay for normal relay */\n+static constexpr std::chrono::seconds RELAY_TX_CACHE_TIME{15 * 60};\n /** Headers download timeout expressed in microseconds\n  *  Timeout = base + per_header * (expected number of headers) */\n static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; // 15 minutes\n@@ -1522,6 +1524,10 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n     // messages from this peer (likely resulting in our peer eventually\n     // disconnecting us).\n     if (pfrom->m_tx_relay != nullptr) {\n+        // mempool entries added before this time have likely expired from mapRelay\n+        const std::chrono::seconds longlived_mempool_time = GetTime<std::chrono::seconds>() - RELAY_TX_CACHE_TIME;\n+        const std::chrono::seconds mempool_req = pfrom->m_tx_relay->m_last_mempool_req.load();\n+\n         LOCK(cs_main);\n \n         while (it != pfrom->vRecvGetData.end() && (it->type == MSG_TX || it->type == MSG_WITNESS_TX)) {\n@@ -1541,11 +1547,15 @@ void static ProcessGetData(CNode* pfrom, const CChainParams& chainparams, CConnm\n             if (mi != mapRelay.end()) {\n                 connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                 push = true;\n-            } else if (pfrom->m_tx_relay->m_last_mempool_req.load().count()) {\n+            } else {\n                 auto txinfo = mempool.info(inv.hash);\n                 // To protect privacy, do not answer getdata using the mempool when\n-                // that TX couldn't have been INVed in reply to a MEMPOOL request.\n-                if (txinfo.tx && txinfo.m_time <= pfrom->m_tx_relay->m_last_mempool_req.load()) {\n+                // that TX couldn't have been INVed in reply to a MEMPOOL request,\n+                // or when it's too recent to have expired from mapRelay.\n+                if (txinfo.tx && (\n+                     (mempool_req.count() && txinfo.m_time <= mempool_req)\n+                      || (txinfo.m_time <= longlived_mempool_time)))\n+                {\n                     connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *txinfo.tx));\n                     push = true;\n                 }\n@@ -3931,7 +3941,7 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n \n                             auto ret = mapRelay.insert(std::make_pair(hash, std::move(txinfo.tx)));\n                             if (ret.second) {\n-                                vRelayExpiration.push_back(std::make_pair(nNow + 15 * 60 * 1000000, ret.first));\n+                                vRelayExpiration.push_back(std::make_pair(nNow + std::chrono::microseconds{RELAY_TX_CACHE_TIME}.count(), ret.first));\n                             }\n                         }\n                         if (vInv.size() == MAX_INV_SZ) {"
      }
    ]
  }
]