[
  {
    "sha": "4addb2c066e157f479fdbae902b3d568f2432fd0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWRkYjJjMDY2ZTE1N2Y0NzlmZGJhZTkwMmIzZDU2OGYyNDMyZmQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-19T23:13:55Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-19T23:31:18Z"
      },
      "message": "Refactor keytime/metadata and wallet encryption bugfix\n\nRefactor keytime:\n* Key metadata is kept in a CWallet::mapKeyMetadata (std::map<CKeyId,CKeyMetadata>).\n* When generating a new key, time is put in that map, and new key is written.\n* AddKeyPubKey and AddCryptedKey do not take a creation time argument, but instead\n  pull it from that map, if it exists there.\n\nBugfix:\n* AddKeyPubKey and AddCryptedKey in CWallet didn't override the CKeyStore\n  definition anymore. This is fixed, as they no longed need the nCreationTime\n  argument now.\n\nAlso a few related other changes:\n* Metadata can be overwritten.\n* Only GenerateNewKey calls GetTime(), as it's the only place where we know for\n  sure a key was not constructed earlier.\n* When the nTimeFirstKey is known to be inaccurate, it is set to the value 1\n  (instead of 0, which would mean unknown).\n* Use CPubKey instead of std::vector<unsigned char> where possible.",
      "tree": {
        "sha": "a2fbaf1a181fbac619166fcc75eb7102a172d73f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2fbaf1a181fbac619166fcc75eb7102a172d73f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4addb2c066e157f479fdbae902b3d568f2432fd0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4addb2c066e157f479fdbae902b3d568f2432fd0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4addb2c066e157f479fdbae902b3d568f2432fd0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4addb2c066e157f479fdbae902b3d568f2432fd0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25dbb928600b2c65bc20ce026c5f9cf1fb457d60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25dbb928600b2c65bc20ce026c5f9cf1fb457d60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25dbb928600b2c65bc20ce026c5f9cf1fb457d60"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 36,
      "deletions": 28
    },
    "files": [
      {
        "sha": "1087db632d021c2eb8c0603ec822b0d24d6a746b",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 15,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4addb2c066e157f479fdbae902b3d568f2432fd0/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4addb2c066e157f479fdbae902b3d568f2432fd0/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=4addb2c066e157f479fdbae902b3d568f2432fd0",
        "patch": "@@ -40,38 +40,35 @@ CPubKey CWallet::GenerateNewKey()\n         SetMinVersion(FEATURE_COMPRPUBKEY);\n \n     CPubKey pubkey = secret.GetPubKey();\n+\n+    // Create new metadata\n+    int64 nCreationTime = GetTime();\n+    mapKeyMetadata[pubkey.GetID()] = CKeyMetadata(nCreationTime);\n+    if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n+        nTimeFirstKey = nCreationTime;\n+\n     if (!AddKeyPubKey(secret, pubkey))\n         throw std::runtime_error(\"CWallet::GenerateNewKey() : AddKey failed\");\n     return pubkey;\n }\n \n-bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey,\n-                           int64 nCreateTime)\n+bool CWallet::AddKeyPubKey(const CKey& secret, const CPubKey &pubkey)\n {\n-    if (!nCreateTime)\n-        nCreateTime = GetTime();\n-    if (!nTimeFirstKey || (nCreateTime < nTimeFirstKey))\n-        nTimeFirstKey = nCreateTime;\n     if (!CCryptoKeyStore::AddKeyPubKey(secret, pubkey))\n         return false;\n     if (!fFileBacked)\n         return true;\n     if (!IsCrypted()) {\n         return CWalletDB(strWalletFile).WriteKey(pubkey,\n                                                  secret.GetPrivKey(),\n-                                                 nCreateTime);\n+                                                 mapKeyMetadata[pubkey.GetID()]);\n     }\n     return true;\n }\n \n bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n-                            const vector<unsigned char> &vchCryptedSecret,\n-                            int64 nCreateTime)\n+                            const vector<unsigned char> &vchCryptedSecret)\n {\n-    if (!nCreateTime)\n-        nCreateTime = GetTime();\n-    if (!nTimeFirstKey || (nCreateTime < nTimeFirstKey))\n-        nTimeFirstKey = nCreateTime;\n     if (!CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret))\n         return false;\n     if (!fFileBacked)\n@@ -81,15 +78,24 @@ bool CWallet::AddCryptedKey(const CPubKey &vchPubKey,\n         if (pwalletdbEncryption)\n             return pwalletdbEncryption->WriteCryptedKey(vchPubKey,\n                                                         vchCryptedSecret,\n-                                                        nCreateTime);\n+                                                        mapKeyMetadata[vchPubKey.GetID()]);\n         else\n             return CWalletDB(strWalletFile).WriteCryptedKey(vchPubKey,\n                                                             vchCryptedSecret,\n-                                                            nCreateTime);\n+                                                            mapKeyMetadata[vchPubKey.GetID()]);\n     }\n     return false;\n }\n \n+bool CWallet::LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &meta)\n+{\n+    if (meta.nCreateTime && (!nTimeFirstKey || meta.nCreateTime < nTimeFirstKey))\n+        nTimeFirstKey = meta.nCreateTime;\n+\n+    mapKeyMetadata[pubkey.GetID()] = meta;\n+    return true;\n+}\n+\n bool CWallet::LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret)\n {\n     return CCryptoKeyStore::AddCryptedKey(vchPubKey, vchCryptedSecret);"
      },
      {
        "sha": "48bd511971f355011e66692b75c16d65472934d4",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4addb2c066e157f479fdbae902b3d568f2432fd0/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4addb2c066e157f479fdbae902b3d568f2432fd0/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=4addb2c066e157f479fdbae902b3d568f2432fd0",
        "patch": "@@ -87,7 +87,7 @@ class CWallet : public CCryptoKeyStore\n     std::string strWalletFile;\n \n     std::set<int64> setKeyPool;\n-\n+    std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n     MasterKeyMap mapMasterKeys;\n@@ -140,14 +140,16 @@ class CWallet : public CCryptoKeyStore\n     // Generate a new key\n     CPubKey GenerateNewKey();\n     // Adds a key to the store, and saves it to disk.\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey, int64 nCreateTime = 0);\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n     // Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n+    // Load metadata (used by LoadWallet)\n+    bool LoadKeyMetadata(const CPubKey &pubkey, const CKeyMetadata &metadata);\n \n     bool LoadMinVersion(int nVersion) { nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n \n     // Adds an encrypted key to the store, and saves it to disk.\n-    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret, int64 nCreateTime = 0);\n+    bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     // Adds an encrypted key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n     bool AddCScript(const CScript& redeemScript);"
      },
      {
        "sha": "bf23357f79c95e822e0a3edeeb20d18695896da0",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4addb2c066e157f479fdbae902b3d568f2432fd0/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4addb2c066e157f479fdbae902b3d568f2432fd0/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=4addb2c066e157f479fdbae902b3d568f2432fd0",
        "patch": "@@ -344,12 +344,14 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"keymeta\")\n         {\n-            vector<unsigned char> vchPubKey;\n+            CPubKey vchPubKey;\n             ssKey >> vchPubKey;\n             CKeyMetadata keyMeta;\n             ssValue >> keyMeta;\n             wss.nKeyMeta++;\n \n+            pwallet->LoadKeyMetadata(vchPubKey, keyMeta);\n+\n             // find earliest key creation time, as wallet birthday\n             if (!pwallet->nTimeFirstKey ||\n                 (keyMeta.nCreateTime < pwallet->nTimeFirstKey))\n@@ -483,7 +485,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n     if ((wss.nKeys + wss.nCKeys) != wss.nKeyMeta)\n-        pwallet->nTimeFirstKey = 0;\n+        pwallet->nTimeFirstKey = 1; // 0 would be considered 'no value'\n \n     BOOST_FOREACH(uint256 hash, wss.vWalletUpgrade)\n         WriteTx(hash, pwallet->mapWallet[hash]);"
      },
      {
        "sha": "4dfa35d82aee491b48931600e75dfdf2feecf22d",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4addb2c066e157f479fdbae902b3d568f2432fd0/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4addb2c066e157f479fdbae902b3d568f2432fd0/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=4addb2c066e157f479fdbae902b3d568f2432fd0",
        "patch": "@@ -30,7 +30,7 @@ class CKeyMetadata\n public:\n     static const int CURRENT_VERSION=1;\n     int nVersion;\n-    int64 nCreateTime;\n+    int64 nCreateTime; // 0 means unknown\n \n     CKeyMetadata()\n     {\n@@ -52,7 +52,7 @@ class CKeyMetadata\n     void SetNull()\n     {\n         nVersion = CKeyMetadata::CURRENT_VERSION;\n-        nCreateTime = GetTime();\n+        nCreateTime = 0;\n     }\n };\n \n@@ -84,28 +84,26 @@ class CWalletDB : public CDB\n     }\n \n     bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey,\n-                  int64 nCreateTime)\n+                  const CKeyMetadata &keyMeta)\n     {\n         nWalletDBUpdated++;\n \n-        CKeyMetadata keyMeta(nCreateTime);\n         if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n-                   keyMeta, false))\n+                   keyMeta))\n             return false;\n \n         return Write(std::make_pair(std::string(\"key\"), vchPubKey), vchPrivKey, false);\n     }\n \n     bool WriteCryptedKey(const CPubKey& vchPubKey,\n                          const std::vector<unsigned char>& vchCryptedSecret,\n-                         int64 nCreateTime)\n+                         const CKeyMetadata &keyMeta)\n     {\n         const bool fEraseUnencryptedKey = true;\n         nWalletDBUpdated++;\n \n-        CKeyMetadata keyMeta(nCreateTime);\n         if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n-                   keyMeta, false))\n+                   keyMeta))\n             return false;\n \n         if (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))"
      }
    ]
  }
]