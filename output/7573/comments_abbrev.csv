paveljanik,2016-02-21T16:01:06Z,"Concept ACK. This is the ""one"" way of ""Never go to sea with two chronometers; take one or three."".\n\nYes, please change the default...\n\nNo need to call `AddTimeData()` at all if we trust system clock. Or you can collect time samples and warn user when his system clock is wrong ""a lot""...\n",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-186850364,186850364,
wangchun,2016-02-21T16:46:13Z,Concept ACK. But the default value should be set to false.\n,https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-186855971,186855971,
gmaxwell,2016-02-21T21:16:25Z,"Concept NAK; especially with the default value.\n\nAs is, there is almost never any active monitoring it's quite common for systems even with network time configured to have totally incorrect time because the network time has simply silently stopped working. At RWC some persons from the google chrome team presented data collected from chrome users that showed very high rates of time inaccuracy on ",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-186919568,186919568,
mruddy,2016-02-21T22:17:11Z,"@paveljanik @wangchun OK, I changed the default to false. I pretty much expected that to be the first thing mentioned, thanks for confirming :) I only left it that way to keep merging easier for anyone that was already using it downstream.\n\n@gmaxwell Thanks for your perspective. That point about clocks causing cert validation errors is interesting. I would not have guessed that. With the default",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-186930643,186930643,
paveljanik,2016-02-23T19:21:05Z,@mruddy Can you lease add warning to the user when his clock is too different to the network time?\n,https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-187851188,187851188,
mruddy,2016-02-23T22:30:17Z,"@paveljanik The existing warning will still trigger for that scenario. Please see here https://github.com/mruddy/bitcoin/blob/a1a4d8a5de73e018485ec8fe67d3918b625ed0d0/src/timedata.cpp#L110.\nThis is because the P2P version message still calls AddTimeData. I didn't change any of that. This change leaves all that old time computation stuff, but ignores the offset that is calculated from it if the ne",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-187944129,187944129,
gmaxwell,2016-02-23T22:35:00Z,@mruddy Have you looked into making it conditional on the local NTP thinking its in sync?\n,https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-187945301,187945301,
mruddy,2016-02-23T22:58:25Z,"@gmaxwell No, but not because I ignored the input.\n\nThe first reason is that I don't trust _myself_ to not mess it up and add some kind of vector where a malformed response would allow node takeover etc... The extra attack surface makes me apprehensive.\n\nSecond, when I think of how this would be used, the first use-case that comes to mind is of a node operator that notices some other node(s) t",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-187953596,187953596,
gmaxwell,2016-02-23T23:44:01Z,"Indeed, detection would not help when someone is exploiting NTP's normal lack of security to change the system time; I didn't intend to suggest otherwise. Sorry.\n\nI don't agree with your attack surface concern, after all-- it's all local-- portability may turn out to be more of an issue.  But code to harden up this option to throw an error or refuse to operate when set to trust the local clock b",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-187970082,187970082,
mruddy,2016-02-24T00:43:36Z,"Yep, you're absolutely right that portability might be the devil in the details for the NTP checking. Even being all local, it's still conditional logic that could be triggered under a remote attacker's influence. So, at that point it depends on your threat model whether an attacker being able to influence that exchange is in scope. If that's in scope, then possibly a concern that doesn't depend o",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-187990233,187990233,
laanwj,2016-02-24T07:48:17Z,"No problem with adding this, although I don't think it will be used a lot in practice. It should definitely not be enabled by default.\n\nBut I understand the use case where you have an expensive trusted time source, and you don't want bitcoind messing with it, even if it means well.\n\n> Am I incorrect in my recollection that the getargument stuff is slow? Do we want that inside GetAdjustedTime?\",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-188129423,188129423,
paveljanik,2016-02-24T08:24:36Z,"Idea. This can even be extended. If I trust my time source, I can ban nodes with a huge time difference from my exact time to prevent network partition attacks on me (bad nodes trying to attack me on my node startup with a huge time difference bringing me off the main network). Not that I have seen such attack myself yet, but...\n",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-188136726,188136726,
mruddy,2016-02-25T15:35:55Z,"Thanks, I just pushed the updates mentioned by your feedback.\n\n@laanwj I chose not to disable the time-offset logic entirely because I've gotten feedback about people liking to get the warning message ""Please check that your computer's date and time are correct!"" if none of the peers are within 5 minutes just in-case.\n\n@paveljanik I also did not add any logic to ban nodes with largely differin",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-188844279,188844279,
paveljanik,2016-02-25T15:42:13Z,Please squash into one commit for easier review.\n,https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-188846822,188846822,
mruddy,2016-02-25T18:52:34Z,"Sure thing, done.\n",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-188927090,188927090,
laanwj,2016-02-29T08:57:48Z,"utACK 1079b2c\nThis code change is nicely self-contained and localized. Let's not make any changes to the P2P code in this pull, also any proposal regarding automatic banning (for any reason) has to be very carefully evaluated for advantages and dangers, for the reasons already mentioned  - partitioning risk.\n",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-190108767,190108767,
sipa,2016-03-05T05:46:01Z,@gmaxwell I am not convinced that the behaviour of not correcting at all is less harmful than correcting your clock based on what random peers tell you when chosen by someone who has confidence in their own clock configuration.\n,https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-192584061,192584061,
mruddy,2016-03-05T11:52:02Z,"Perhaps don't think of it as someone ""having confidence in their own clock configuration"", but rather ""wanting to have a consistent or specific perspective on time"". For example, maybe a company has nodes in more than one geo location and wants to have a closely consistent perspective on time across all of its nodes. Or, maybe that company wants to have a cluster of nodes running on internally con",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-192626502,192626502,
laanwj,2016-03-11T07:24:01Z,"I've thought it over a bit and I still think GetTimeOffset should return 0 when `-trustsystemclock` is given. This will make the RPCs (getinfo, getnetworkinfo) give the correct effective time offset.\n",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-195230898,195230898,
mruddy,2016-03-13T23:12:52Z,"Sure, that makes sense too. Update made and rebased/squashed.\n",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-196079796,196079796,
mruddy,2016-03-29T13:53:42Z,"This seemed to be lingering, so, here's a commit with a little different approach.\nNow, instead of adding -trustsystemclock (that effectively limited the max offset to zero), I added -maxtimeadjustment, that lets the user choose how much of an adjustment (in seconds) is acceptable.\nThus, -trustsystemclock and -maxtimeadjustment=0 give the same basic effect of not letting peers influence the loca",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-202903684,202903684,
laanwj,2016-03-29T14:19:55Z,"utACK, I like this better, you've un-magified a magic number (and you can still achieve the same as before, by setting it to 0).\n",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-202914893,202914893,
gmaxwell,2016-03-29T15:58:32Z,"I like this approach much better.  But the implementation has an odd non-monotonicity. E.g. if you have 5 peers claiming ten seconds off, then six more connect claiming 80 minutes.  You'll  apply a correction of 0 instead of 10 seconds.  Perhaps better to just fix in another PR, since it was an existing misbehavior (though more likely to be triggered when the time is cut down to small numbers).\n",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-202973041,202973041,
mruddy,2016-03-29T17:33:12Z,"@gmaxwell Interesting. True, and in that scenario a warning message also gets output when the median goes beyond the acceptable limit.\n\nMaybe you were working towards the, perhaps more alarming, scenario where there are five nodes at 10 seconds off and then six more claim the well-known default acceptable limit of 4200 seconds.\nThat would cause a large effective change in offset with no other w",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-203014622,203014622,
laanwj,2016-03-30T07:28:57Z,"Agreed, let's fix that to another pull.\n\nThere is no obligation for @mruddy to fix the peer time synchronization system, which is a herculean task, especially as it seems he doesn't want to use it at all. See #4521 for a collection of peer time related issues, will link there to this one too.\n",https://github.com/bitcoin/bitcoin/pull/7573#issuecomment-203289933,203289933,
MarcoFalke,2016-02-24T14:17:33Z,Please factor out the default from the translation string. (see @laanwj's comment.)\n,https://github.com/bitcoin/bitcoin/pull/7573#discussion_r53943456,53943456,src/init.cpp
laanwj,2016-03-29T14:20:43Z,This should be in timedata.h (as that's where the option is used)\n,https://github.com/bitcoin/bitcoin/pull/7573#discussion_r57730975,57730975,src/util.h
mruddy,2016-03-29T14:36:17Z,"Yep, sure thing, I'll update that. I had thought of that and just figured I'd leave it with some other defaults since then I didn't have to add the include in init.cpp.\n",https://github.com/bitcoin/bitcoin/pull/7573#discussion_r57733834,57733834,src/util.h
MarcoFalke,2016-03-29T14:41:25Z,"​Also, the github pull subject line needs update. (It's basically a\ndifferent pull)\n",https://github.com/bitcoin/bitcoin/pull/7573#discussion_r57734756,57734756,src/util.h
mruddy,2016-03-29T14:48:46Z,"@MarcoFalke done, thanks\n",https://github.com/bitcoin/bitcoin/pull/7573#discussion_r57736070,57736070,src/util.h
laanwj,2016-03-29T15:13:41Z,"> then I didn't have to add the include in init.cpp\n\nYes - that would be slightly better, but everything considered I think it's better to be explicit about dependencies. It's just a symptom of the current centralization of option handling in init.cpp.\n",https://github.com/bitcoin/bitcoin/pull/7573#discussion_r57740845,57740845,src/util.h
mruddy,2016-03-29T15:28:49Z,makes sense. update is made and passed travis. should be good to go once some others ack.\n,https://github.com/bitcoin/bitcoin/pull/7573#discussion_r57743625,57743625,src/util.h
