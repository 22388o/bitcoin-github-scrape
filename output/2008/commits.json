[
  {
    "sha": "99d0d0f356c3237ad1ef416f179c45797cecb89b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWQwZDBmMzU2YzMyMzdhZDFlZjQxNmYxNzljNDU3OTdjZWNiODli",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-11-13T22:03:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-11-15T22:00:16Z"
      },
      "message": "Introduce script verification flags\n\nThese flags select features to be enabled/disabled during script\nevaluation/checking, instead of several booleans passed along.\nCurrently these flags are defined:\n* SCRIPT_VERIFY_P2SH: enable BIP16-style subscript evaluation\n* SCRIPT_VERIFY_STRICTENC: enforce strict adherence to pubkey/sig encoding standards.",
      "tree": {
        "sha": "72c34c5fe86b95be861f02fdfe5e497f24b56117",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/72c34c5fe86b95be861f02fdfe5e497f24b56117"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99d0d0f356c3237ad1ef416f179c45797cecb89b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99d0d0f356c3237ad1ef416f179c45797cecb89b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99d0d0f356c3237ad1ef416f179c45797cecb89b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99d0d0f356c3237ad1ef416f179c45797cecb89b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6caffb5358b1e403b293846b3c832433fa928e46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6caffb5358b1e403b293846b3c832433fa928e46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6caffb5358b1e403b293846b3c832433fa928e46"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 69,
      "deletions": 63
    },
    "files": [
      {
        "sha": "56012a131a87ac4b2234a77be02e41b3228a0f27",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=99d0d0f356c3237ad1ef416f179c45797cecb89b",
        "patch": "@@ -771,7 +771,7 @@ bool CTxMemPool::accept(CTransaction &tx, bool fCheckInputs,\n \n         // Check against previous transactions\n         // This is done last to help prevent CPU exhaustion denial-of-service attacks.\n-        if (!tx.CheckInputs(view, CS_ALWAYS, true, false))\n+        if (!tx.CheckInputs(view, CS_ALWAYS, SCRIPT_VERIFY_P2SH))\n         {\n             return error(\"CTxMemPool::accept() : ConnectInputs failed %s\", hash.ToString().substr(0,10).c_str());\n         }\n@@ -1327,7 +1327,7 @@ bool CTransaction::HaveInputs(CCoinsViewCache &inputs) const\n     return true;\n }\n \n-bool CTransaction::CheckInputs(CCoinsViewCache &inputs, enum CheckSig_mode csmode, bool fStrictPayToScriptHash, bool fStrictEncodings) const\n+bool CTransaction::CheckInputs(CCoinsViewCache &inputs, enum CheckSig_mode csmode, unsigned int flags) const\n {\n     if (!IsCoinBase())\n     {\n@@ -1384,7 +1384,7 @@ bool CTransaction::CheckInputs(CCoinsViewCache &inputs, enum CheckSig_mode csmod\n                 const CCoins &coins = inputs.GetCoins(prevout.hash);\n \n                 // Verify signature\n-                if (!VerifySignature(coins, *this, i, fStrictPayToScriptHash, fStrictEncodings, 0))\n+                if (!VerifySignature(coins, *this, i, flags, 0))\n                     return DoS(100,error(\"CheckInputs() : %s VerifySignature failed\", GetHash().ToString().substr(0,10).c_str()));\n             }\n         }\n@@ -1415,7 +1415,7 @@ bool CTransaction::ClientCheckInputs() const\n                 return false;\n \n             // Verify signature\n-            if (!VerifySignature(CCoins(txPrev, -1), *this, i, true, false, 0))\n+            if (!VerifySignature(CCoins(txPrev, -1), *this, i, SCRIPT_VERIFY_P2SH, 0))\n                 return error(\"ConnectInputs() : VerifySignature failed\");\n \n             ///// this is redundant with the mempool.mapNextTx stuff,\n@@ -1598,7 +1598,7 @@ bool CBlock::ConnectBlock(CBlockIndex* pindex, CCoinsViewCache &view, bool fJust\n \n             nFees += tx.GetValueIn(view)-tx.GetValueOut();\n \n-            if (!tx.CheckInputs(view, CS_AFTER_CHECKPOINT, fStrictPayToScriptHash, false))\n+            if (!tx.CheckInputs(view, CS_AFTER_CHECKPOINT, fStrictPayToScriptHash ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE))\n                 return false;\n         }\n \n@@ -3863,7 +3863,7 @@ CBlock* CreateNewBlock(CReserveKey& reservekey)\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n                 continue;\n \n-            if (!tx.CheckInputs(viewTemp, CS_ALWAYS, true, false))\n+            if (!tx.CheckInputs(viewTemp, CS_ALWAYS, SCRIPT_VERIFY_P2SH))\n                 continue;\n \n             CTxUndo txundo;"
      },
      {
        "sha": "622875d4a921ca444c36922a2484a6c245602f7f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=99d0d0f356c3237ad1ef416f179c45797cecb89b",
        "patch": "@@ -625,7 +625,7 @@ class CTransaction\n \n     // Check whether all inputs of this transaction are valid (no double spends, scripts & sigs, amounts)\n     // This does not modify the UTXO set\n-    bool CheckInputs(CCoinsViewCache &view, enum CheckSig_mode csmode, bool fStrictPayToScriptHash=true, bool fStrictEncodings=true) const;\n+    bool CheckInputs(CCoinsViewCache &view, enum CheckSig_mode csmode, unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC) const;\n \n     // Apply the effects of this transaction on the UTXO set represented by view\n     bool UpdateCoins(CCoinsViewCache &view, CTxUndo &txundo, int nHeight, const uint256 &txhash) const;"
      },
      {
        "sha": "9531b12678ba24052ace00be8e34bfac8594f84d",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=99d0d0f356c3237ad1ef416f179c45797cecb89b",
        "patch": "@@ -505,7 +505,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n         {\n             txin.scriptSig = CombineSignatures(prevPubKey, mergedTx, i, txin.scriptSig, txv.vin[i].scriptSig);\n         }\n-        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, true, true, 0))\n+        if (!VerifyScript(txin.scriptSig, prevPubKey, mergedTx, i, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, 0))\n             fComplete = false;\n     }\n "
      },
      {
        "sha": "a40ae5b1db77263c37eb69f637d7241b73db98aa",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=99d0d0f356c3237ad1ef416f179c45797cecb89b",
        "patch": "@@ -314,7 +314,7 @@ bool IsCanonicalSignature(const valtype &vchSig) {\n     return true;\n }\n \n-bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, bool fStrictEncodings, int nHashType)\n+bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType)\n {\n     CAutoBN_CTX pctx;\n     CScript::const_iterator pc = script.begin();\n@@ -327,7 +327,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n     if (script.size() > 10000)\n         return false;\n     int nOpCount = 0;\n-\n+    bool fStrictEncodings = flags & SCRIPT_VERIFY_STRICTENC;\n \n     try\n     {\n@@ -1637,14 +1637,14 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vecto\n }\n \n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                  bool fValidatePayToScriptHash, bool fStrictEncodings, int nHashType)\n+                  unsigned int flags, int nHashType)\n {\n     vector<vector<unsigned char> > stack, stackCopy;\n-    if (!EvalScript(stack, scriptSig, txTo, nIn, fStrictEncodings, nHashType))\n+    if (!EvalScript(stack, scriptSig, txTo, nIn, flags, nHashType))\n         return false;\n-    if (fValidatePayToScriptHash)\n+    if (flags & SCRIPT_VERIFY_P2SH)\n         stackCopy = stack;\n-    if (!EvalScript(stack, scriptPubKey, txTo, nIn, fStrictEncodings, nHashType))\n+    if (!EvalScript(stack, scriptPubKey, txTo, nIn, flags, nHashType))\n         return false;\n     if (stack.empty())\n         return false;\n@@ -1653,7 +1653,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         return false;\n \n     // Additional validation for spend-to-script-hash transactions:\n-    if (fValidatePayToScriptHash && scriptPubKey.IsPayToScriptHash())\n+    if ((flags & SCRIPT_VERIFY_P2SH) && scriptPubKey.IsPayToScriptHash())\n     {\n         if (!scriptSig.IsPushOnly()) // scriptSig must be literals-only\n             return false;            // or validation fails\n@@ -1662,7 +1662,7 @@ bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const C\n         CScript pubKey2(pubKeySerialized.begin(), pubKeySerialized.end());\n         popstack(stackCopy);\n \n-        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, fStrictEncodings, nHashType))\n+        if (!EvalScript(stackCopy, pubKey2, txTo, nIn, flags, nHashType))\n             return false;\n         if (stackCopy.empty())\n             return false;\n@@ -1705,7 +1705,7 @@ bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CTransa\n     }\n \n     // Test solution\n-    return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, true, true, 0);\n+    return VerifyScript(txin.scriptSig, fromPubKey, txTo, nIn, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, 0);\n }\n \n bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType)\n@@ -1718,15 +1718,15 @@ bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CTrans\n     return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, nHashType);\n }\n \n-bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned int nIn, bool fValidatePayToScriptHash, bool fStrictEncodings, int nHashType)\n+bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType)\n {\n     assert(nIn < txTo.vin.size());\n     const CTxIn& txin = txTo.vin[nIn];\n     if (txin.prevout.n >= txFrom.vout.size())\n         return false;\n     const CTxOut& txout = txFrom.vout[txin.prevout.n];\n \n-    return VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, fValidatePayToScriptHash, fStrictEncodings, nHashType);\n+    return VerifyScript(txin.scriptSig, txout.scriptPubKey, txTo, nIn, flags, nHashType);\n }\n \n static CScript PushAll(const vector<valtype>& values)\n@@ -1844,9 +1844,9 @@ CScript CombineSignatures(CScript scriptPubKey, const CTransaction& txTo, unsign\n     Solver(scriptPubKey, txType, vSolutions);\n \n     vector<valtype> stack1;\n-    EvalScript(stack1, scriptSig1, CTransaction(), 0, true, 0);\n+    EvalScript(stack1, scriptSig1, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC, 0);\n     vector<valtype> stack2;\n-    EvalScript(stack2, scriptSig2, CTransaction(), 0, true, 0);\n+    EvalScript(stack2, scriptSig2, CTransaction(), 0, SCRIPT_VERIFY_STRICTENC, 0);\n \n     return CombineSignatures(scriptPubKey, txTo, nIn, txType, vSolutions, stack1, stack2);\n }"
      },
      {
        "sha": "7b0643f70ab206313053b4e5843e9106c70b7bab",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=99d0d0f356c3237ad1ef416f179c45797cecb89b",
        "patch": "@@ -26,6 +26,13 @@ enum\n     SIGHASH_ANYONECANPAY = 0x80,\n };\n \n+/** Script verification flags */\n+enum\n+{\n+    SCRIPT_VERIFY_NONE      = 0,\n+    SCRIPT_VERIFY_P2SH      = (1U << 0),\n+    SCRIPT_VERIFY_STRICTENC = (1U << 1),\n+};\n \n enum txnouttype\n {\n@@ -656,7 +663,7 @@ class CScriptCompressor\n bool IsCanonicalPubKey(const std::vector<unsigned char> &vchPubKey);\n bool IsCanonicalSignature(const std::vector<unsigned char> &vchSig);\n \n-bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, bool fStrictEncodings, int nHashType);\n+bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n bool IsStandard(const CScript& scriptPubKey);\n@@ -667,8 +674,8 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::\n bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                  bool fValidatePayToScriptHash, bool fStrictEncodings, int nHashType);\n-bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned int nIn, bool fValidatePayToScriptHash, bool fStrictEncodings, int nHashType);\n+                   unsigned int flags, int nHashType);\n+bool VerifySignature(const CCoins& txFrom, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType);\n \n // Given two sets of signatures for scriptPubKey, possibly with OP_0 placeholders,\n // combine them intelligently and return the result."
      },
      {
        "sha": "b1e98f65edd6bbc107368f2436df0555720d453d",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=99d0d0f356c3237ad1ef416f179c45797cecb89b",
        "patch": "@@ -230,6 +230,7 @@ BOOST_AUTO_TEST_CASE(DoS_checkSig)\n     key.MakeNewKey(true);\n     CBasicKeyStore keystore;\n     keystore.AddKey(key);\n+    unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;\n \n     // 100 orphan transactions:\n     static const int NPREV=100;\n@@ -277,7 +278,7 @@ BOOST_AUTO_TEST_CASE(DoS_checkSig)\n     mst1 = boost::posix_time::microsec_clock::local_time();\n     for (unsigned int i = 0; i < 5; i++)\n         for (unsigned int j = 0; j < tx.vin.size(); j++)\n-            BOOST_CHECK(VerifySignature(CCoins(orphans[j], MEMPOOL_HEIGHT), tx, j, true, true, SIGHASH_ALL));\n+            BOOST_CHECK(VerifySignature(CCoins(orphans[j], MEMPOOL_HEIGHT), tx, j, flags, SIGHASH_ALL));\n     mst2 = boost::posix_time::microsec_clock::local_time();\n     msdiff = mst2 - mst1;\n     long nManyValidate = msdiff.total_milliseconds();\n@@ -288,13 +289,13 @@ BOOST_AUTO_TEST_CASE(DoS_checkSig)\n     // Empty a signature, validation should fail:\n     CScript save = tx.vin[0].scriptSig;\n     tx.vin[0].scriptSig = CScript();\n-    BOOST_CHECK(!VerifySignature(CCoins(orphans[0], MEMPOOL_HEIGHT), tx, 0, true, true, SIGHASH_ALL));\n+    BOOST_CHECK(!VerifySignature(CCoins(orphans[0], MEMPOOL_HEIGHT), tx, 0, flags, SIGHASH_ALL));\n     tx.vin[0].scriptSig = save;\n \n     // Swap signatures, validation should fail:\n     std::swap(tx.vin[0].scriptSig, tx.vin[1].scriptSig);\n-    BOOST_CHECK(!VerifySignature(CCoins(orphans[0], MEMPOOL_HEIGHT), tx, 0, true, true, SIGHASH_ALL));\n-    BOOST_CHECK(!VerifySignature(CCoins(orphans[1], MEMPOOL_HEIGHT), tx, 1, true, true, SIGHASH_ALL));\n+    BOOST_CHECK(!VerifySignature(CCoins(orphans[0], MEMPOOL_HEIGHT), tx, 0, flags, SIGHASH_ALL));\n+    BOOST_CHECK(!VerifySignature(CCoins(orphans[1], MEMPOOL_HEIGHT), tx, 1, flags, SIGHASH_ALL));\n     std::swap(tx.vin[0].scriptSig, tx.vin[1].scriptSig);\n \n     // Exercise -maxsigcachesize code:\n@@ -304,7 +305,7 @@ BOOST_AUTO_TEST_CASE(DoS_checkSig)\n     BOOST_CHECK(SignSignature(keystore, orphans[0], tx, 0));\n     BOOST_CHECK(tx.vin[0].scriptSig != oldSig);\n     for (unsigned int j = 0; j < tx.vin.size(); j++)\n-        BOOST_CHECK(VerifySignature(CCoins(orphans[j], MEMPOOL_HEIGHT), tx, j, true, true, SIGHASH_ALL));\n+        BOOST_CHECK(VerifySignature(CCoins(orphans[j], MEMPOOL_HEIGHT), tx, j, flags, SIGHASH_ALL));\n     mapArgs.erase(\"-maxsigcachesize\");\n \n     LimitOrphanTxSize(0);"
      },
      {
        "sha": "7297bb9a755cb7d108e0d3ba3031c2d58201fd6b",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=99d0d0f356c3237ad1ef416f179c45797cecb89b",
        "patch": "@@ -20,8 +20,6 @@ using namespace boost::assign;\n typedef vector<unsigned char> valtype;\n \n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                         bool fValidatePayToScriptHash, bool fStrictEncodings, int nHashType);\n \n BOOST_AUTO_TEST_SUITE(multisig_tests)\n \n@@ -44,6 +42,8 @@ sign_multisig(CScript scriptPubKey, vector<CKey> keys, CTransaction transaction,\n \n BOOST_AUTO_TEST_CASE(multisig_verify)\n {\n+    unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;\n+\n     CKey key[4];\n     for (int i = 0; i < 4; i++)\n         key[i].MakeNewKey(true);\n@@ -80,19 +80,19 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n     keys.clear();\n     keys += key[0],key[1]; // magic operator+= from boost.assign\n     s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, true, true, 0));\n+    BOOST_CHECK(VerifyScript(s, a_and_b, txTo[0], 0, flags, 0));\n \n     for (int i = 0; i < 4; i++)\n     {\n         keys.clear();\n         keys += key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, true, true, 0), strprintf(\"a&b 1: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags, 0), strprintf(\"a&b 1: %d\", i));\n \n         keys.clear();\n         keys += key[1],key[i];\n         s = sign_multisig(a_and_b, keys, txTo[0], 0);\n-        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, true, true, 0), strprintf(\"a&b 2: %d\", i));\n+        BOOST_CHECK_MESSAGE(!VerifyScript(s, a_and_b, txTo[0], 0, flags, 0), strprintf(\"a&b 2: %d\", i));\n     }\n \n     // Test a OR b:\n@@ -102,16 +102,16 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n         keys += key[i];\n         s = sign_multisig(a_or_b, keys, txTo[1], 0);\n         if (i == 0 || i == 1)\n-            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, true, true, 0), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(VerifyScript(s, a_or_b, txTo[1], 0, flags, 0), strprintf(\"a|b: %d\", i));\n         else\n-            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, true, true, 0), strprintf(\"a|b: %d\", i));\n+            BOOST_CHECK_MESSAGE(!VerifyScript(s, a_or_b, txTo[1], 0, flags, 0), strprintf(\"a|b: %d\", i));\n     }\n     s.clear();\n     s << OP_0 << OP_0;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, true, true, 0));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags, 0));\n     s.clear();\n     s << OP_0 << OP_1;\n-    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, true, true, 0));\n+    BOOST_CHECK(!VerifyScript(s, a_or_b, txTo[1], 0, flags, 0));\n \n \n     for (int i = 0; i < 4; i++)\n@@ -121,9 +121,9 @@ BOOST_AUTO_TEST_CASE(multisig_verify)\n             keys += key[i],key[j];\n             s = sign_multisig(escrow, keys, txTo[2], 0);\n             if (i < j && i < 3 && j < 3)\n-                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, true, true, 0), strprintf(\"escrow 1: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(VerifyScript(s, escrow, txTo[2], 0, flags, 0), strprintf(\"escrow 1: %d %d\", i, j));\n             else\n-                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, true, true, 0), strprintf(\"escrow 2: %d %d\", i, j));\n+                BOOST_CHECK_MESSAGE(!VerifyScript(s, escrow, txTo[2], 0, flags, 0), strprintf(\"escrow 2: %d %d\", i, j));\n         }\n }\n "
      },
      {
        "sha": "b5107193fd8dc2a25e783e71c66ef08394235994",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=99d0d0f356c3237ad1ef416f179c45797cecb89b",
        "patch": "@@ -13,8 +13,6 @@ using namespace std;\n \n // Test routines internal to script.cpp:\n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                         bool fValidatePayToScriptHash, bool fStrictEncodings, int nHashType);\n \n // Helpers:\n static std::vector<unsigned char>\n@@ -40,7 +38,7 @@ Verify(const CScript& scriptSig, const CScript& scriptPubKey, bool fStrict)\n     txTo.vin[0].scriptSig = scriptSig;\n     txTo.vout[0].nValue = 1;\n \n-    return VerifyScript(scriptSig, scriptPubKey, txTo, 0, fStrict, true, 0);\n+    return VerifyScript(scriptSig, scriptPubKey, txTo, 0, fStrict ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, 0);\n }\n \n \n@@ -105,7 +103,7 @@ BOOST_AUTO_TEST_CASE(sign)\n         {\n             CScript sigSave = txTo[i].vin[0].scriptSig;\n             txTo[i].vin[0].scriptSig = txTo[j].vin[0].scriptSig;\n-            bool sigOK = VerifySignature(CCoins(txFrom, 0), txTo[i], 0, true, true, 0);\n+            bool sigOK = VerifySignature(CCoins(txFrom, 0), txTo[i], 0, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC, 0);\n             if (i == j)\n                 BOOST_CHECK_MESSAGE(sigOK, strprintf(\"VerifySignature %d %d\", i, j));\n             else"
      },
      {
        "sha": "5d5a1525f76b8774f1a23ba69190f37cc3f982e3",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=99d0d0f356c3237ad1ef416f179c45797cecb89b",
        "patch": "@@ -20,8 +20,8 @@ using namespace json_spirit;\n using namespace boost::algorithm;\n \n extern uint256 SignatureHash(CScript scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType);\n-extern bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n-                         bool fValidatePayToScriptHash, bool fStrictEncodings, int nHashType);\n+\n+static const unsigned int flags = SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_STRICTENC;\n \n CScript\n ParseScript(string s)\n@@ -143,7 +143,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n \n         CTransaction tx;\n-        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, tx, 0, true, true, SIGHASH_NONE), strTest);\n+        BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, tx, 0, flags, SIGHASH_NONE), strTest);\n     }\n }\n \n@@ -167,7 +167,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n \n         CTransaction tx;\n-        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, tx, 0, true, true, SIGHASH_NONE), strTest);\n+        BOOST_CHECK_MESSAGE(!VerifyScript(scriptSig, scriptPubKey, tx, 0, flags, SIGHASH_NONE), strTest);\n     }\n }\n \n@@ -250,15 +250,15 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG12)\n     txTo12.vout[0].nValue = 1;\n \n     CScript goodsig1 = sign_multisig(scriptPubKey12, key1, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, true, true, 0));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags, 0));\n     txTo12.vout[0].nValue = 2;\n-    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, true, true, 0));\n+    BOOST_CHECK(!VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, flags, 0));\n \n     CScript goodsig2 = sign_multisig(scriptPubKey12, key2, txTo12);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, true, true, 0));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, flags, 0));\n \n     CScript badsig1 = sign_multisig(scriptPubKey12, key3, txTo12);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, true, true, 0));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey12, txTo12, 0, flags, 0));\n }\n \n BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n@@ -286,46 +286,46 @@ BOOST_AUTO_TEST_CASE(script_CHECKMULTISIG23)\n     std::vector<CKey> keys;\n     keys.push_back(key1); keys.push_back(key2);\n     CScript goodsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, true, true, 0));\n+    BOOST_CHECK(VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, flags, 0));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key3);\n     CScript goodsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, true, true, 0));\n+    BOOST_CHECK(VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, flags, 0));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key3);\n     CScript goodsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, true, true, 0));\n+    BOOST_CHECK(VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, flags, 0));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key2); // Can't re-use sig\n     CScript badsig1 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, true, true, 0));\n+    BOOST_CHECK(!VerifyScript(badsig1, scriptPubKey23, txTo23, 0, flags, 0));\n \n     keys.clear();\n     keys.push_back(key2); keys.push_back(key1); // sigs must be in correct order\n     CScript badsig2 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, true, true, 0));\n+    BOOST_CHECK(!VerifyScript(badsig2, scriptPubKey23, txTo23, 0, flags, 0));\n \n     keys.clear();\n     keys.push_back(key3); keys.push_back(key2); // sigs must be in correct order\n     CScript badsig3 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, true, true, 0));\n+    BOOST_CHECK(!VerifyScript(badsig3, scriptPubKey23, txTo23, 0, flags, 0));\n \n     keys.clear();\n     keys.push_back(key4); keys.push_back(key2); // sigs must match pubkeys\n     CScript badsig4 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, true, true, 0));\n+    BOOST_CHECK(!VerifyScript(badsig4, scriptPubKey23, txTo23, 0, flags, 0));\n \n     keys.clear();\n     keys.push_back(key1); keys.push_back(key4); // sigs must match pubkeys\n     CScript badsig5 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, true, true, 0));\n+    BOOST_CHECK(!VerifyScript(badsig5, scriptPubKey23, txTo23, 0, flags, 0));\n \n     keys.clear(); // Must have signatures\n     CScript badsig6 = sign_multisig(scriptPubKey23, keys, txTo23);\n-    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, true, true, 0));\n+    BOOST_CHECK(!VerifyScript(badsig6, scriptPubKey23, txTo23, 0, flags, 0));\n }    \n \n BOOST_AUTO_TEST_CASE(script_combineSigs)"
      },
      {
        "sha": "23837c6c152e062d57f20c1256d16d9d8fe7cca4",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99d0d0f356c3237ad1ef416f179c45797cecb89b/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=99d0d0f356c3237ad1ef416f179c45797cecb89b",
        "patch": "@@ -76,7 +76,7 @@ BOOST_AUTO_TEST_CASE(tx_valid)\n                     break;\n                 }\n \n-                BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout], tx, i, test[2].get_bool(), false, 0), strTest);\n+                BOOST_CHECK_MESSAGE(VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout], tx, i, test[2].get_bool() ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, 0), strTest);\n             }\n         }\n     }\n@@ -143,7 +143,7 @@ BOOST_AUTO_TEST_CASE(tx_invalid)\n                     break;\n                 }\n \n-                fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout], tx, i, test[2].get_bool(), true, 0);\n+                fValid = VerifyScript(tx.vin[i].scriptSig, mapprevOutScriptPubKeys[tx.vin[i].prevout], tx, i, test[2].get_bool() ? SCRIPT_VERIFY_P2SH : SCRIPT_VERIFY_NONE, 0);\n             }\n \n             BOOST_CHECK_MESSAGE(!fValid, strTest);"
      }
    ]
  }
]