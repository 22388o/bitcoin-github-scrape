luke-jr,2017-03-11T01:34:06Z,I almost wonder if it might be useful to have a RPC wrapper for the GUI (possibly in addition to this) so we can just use the RPC tests with it as well.,https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-285829068,285829068,
fanquake,2017-03-11T02:00:24Z,"Failed with:\n```\n==============================================\n   Bitcoin Core 0.14.99: src/test-suite.log\n==============================================\n# TOTAL: 2\n# PASS:  1\n# SKIP:  0\n# XFAIL: 0\n# FAIL:  1\n# XPASS: 0\n# ERROR: 0\n.. contents:: :depth: 2\nFAIL: qt/test/test_bitcoin-qt\n=============================\nThis application failed to start because it could not ",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-285831190,285831190,
laanwj,2017-03-11T08:39:29Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-285853094,285853094,
MarcoFalke,2017-03-11T09:31:11Z,"Concept ACK for sure, as we basically don't have any gui tests right now. In the long term I'd prefer a solution that runs on a higher abstraction level. Your current approach is pretty much mimicking functional tests on a low (unit test) level.",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-285855385,285855385,
ryanofsky,2017-03-11T09:51:03Z,"> I'd prefer a solution that runs on a higher abstraction level. Your current approach is pretty much mimicking functional tests on a low (unit test) level.\n\nI don't think I understand. I'm not doing anything original here, just following the approach of http://doc.qt.io/qt-5/qttestlib-tutorial3-example.html.\n\nIs it that instead of the writing a test that sends qt events, you would prefer ",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-285856276,285856276,
jonasschnelli,2017-03-11T11:36:11Z,"I really like this.\nConcept ACK.",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-285861292,285861292,
MarcoFalke,2017-03-11T11:54:28Z,"> Is it that instead of the writing a test that sends qt events, you would\nprefer to see a test that starts an x server and sends keyboard and mouse\nevents?\n\nIndeed. I was dreaming of a gui test framework where you just press a\n""record this"" button. Then records discrete actions (e.g. ""Press: Receive\ntab"", ""Press: Copy address"", other gui: ""Press: Send tab"", ""Insert:\n$address"", ...) instead",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-285862153,285862153,
fanquake,2017-03-12T03:25:23Z,"Still failing Travis with the same issue, @theuni should probably take a look here.",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-285919082,285919082,
jonasschnelli,2017-03-16T13:31:39Z,"A lock is missing.\n```\ndiff --git a/src/qt/test/wallettests.cpp b/src/qt/test/wallettests.cpp\nindex 81b358e..d63f4ec 100644\n--- a/src/qt/test/wallettests.cpp\n+++ b/src/qt/test/wallettests.cpp\n@@ -73,6 +73,7 @@ void WalletTests::walletTests()\n     test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     bitdb.MakeMock();\n     CWallet wallet(""wallet",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-287057248,287057248,
ryanofsky,2017-03-16T13:52:04Z,"> A lock is missing.\n\nWill add. I'm not sure the way the lock is acquired in the diff is exactly right, because cs_main is supported to be acquired before cs_wallet, and some wallet methods acquire both.\n\n> How could this pass travis with the missing lock?\n\nLocally, the test works fine for me with the missing lock. On travis, every configuration we have either specifies NO_QT or NO_WAL",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-287062826,287062826,
ryanofsky,2017-03-16T18:35:42Z,"Fixed locking bug in 739f19ca969c2ae351e18d2bbb424237830f54f1\n\nSquashed 739f19ca969c2ae351e18d2bbb424237830f54f1 -> 9576b015a107b98fc950c574ed01d993b388d7c9 ([pr/qt-test.7](https://github.com/ryanofsky/bitcoin/commits/pr/qt-test.7) -> [pr/qt-test.8](https://github.com/ryanofsky/bitcoin/commits/pr/qt-test.8))",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-287151946,287151946,
MarcoFalke,2017-03-17T00:17:19Z,utACK 9576b015a107b98fc950c574ed01d993b388d7c9,https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-287231148,287231148,
jonasschnelli,2017-03-17T13:27:25Z,Tested ACK 9576b015a107b98fc950c574ed01d993b388d7c9,https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-287353180,287353180,
jnewbery,2017-03-17T16:30:21Z,"This is great. Hopefully I'll have coverage running soon so we can see how much extra code you've managed to exercise.\n\nPost-merge tested ACK https://github.com/bitcoin/bitcoin/commit/9576b015a107b98fc950c574ed01d993b388d7c9.",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-287403781,287403781,
paveljanik,2017-03-18T14:34:17Z,"BTW, compiling this is not possible with gcc-4.8.5, the default gcc on openSUSE 42.2:\n\n```\n/usr/include/boost/signals2/connection.hpp: In function 'uint256 {anonymous}::SendCoins(CWallet&, SendCoinsDialog&, const CBitcoinAddress&, CAmount)':\n/usr/include/boost/signals2/connection.hpp:234:7: error: 'boost::signals2::scoped_connection::scoped_connection(const boost::signals2::scoped_connecti",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-287550034,287550034,
ryanofsky,2017-03-18T14:48:30Z,"Possible fix might be to change:\n\n```\nboost::signals2::scoped_connection c = wallet.NotifyTransactionChanged.connect(...);\n```\n\nto:\n\n```\nboost::signals2::scoped_connection c(wallet.NotifyTransactionChanged.connect(...));\n```",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-287550867,287550867,
paveljanik,2017-03-18T16:24:46Z,"Hmm, all gcc's on openSUSE 42.2, ie. 4.8.5, 5.3.1 and 6.2.1, fail on the current master...\n",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-287556983,287556983,
paveljanik,2017-03-18T16:43:12Z,"With https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-287550867 change, the build is OK. Will you please PR it?\n",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-287558239,287558239,
paveljanik,2017-03-18T21:00:19Z,"And another issue here. On plain Debian Jessie, with the gcc version 4.9.2 (Debian 4.9.2-10), this doesn't compile with:\n\n```\nqt/test/wallettests.cpp:34:6: error: no matching function for call to 'QTimer::singleShot(int, Qt::TimerType, {anonymous}::ConfirmSend()::<lambda()>)'\n     });\n      ^\nqt/test/wallettests.cpp:34:6: note: candidates are:\nIn file included from /usr/include/x86_6",https://github.com/bitcoin/bitcoin/pull/9974#issuecomment-287574436,287574436,
fanquake,2017-03-12T03:24:37Z,Comment needs removing/updating?,https://github.com/bitcoin/bitcoin/pull/9974#discussion_r105547886,105547886,src/qt/test/test_main.cpp
MarcoFalke,2017-03-12T11:40:16Z,style nit: We use braces now; Always.,https://github.com/bitcoin/bitcoin/pull/9974#discussion_r105555242,105555242,src/qt/test/test_main.cpp
ryanofsky,2017-03-15T17:25:42Z,"It's still accurate, but I expanded the comment in f4d28fbe1b8041ce358d80ecb0e1fa074eee359c.",https://github.com/bitcoin/bitcoin/pull/9974#discussion_r106230360,106230360,src/qt/test/test_main.cpp
ryanofsky,2017-03-15T17:26:06Z,Added in b61b34c89dbe3946e21147dcfe620a4a6ff536ed,https://github.com/bitcoin/bitcoin/pull/9974#discussion_r106230478,106230478,src/qt/test/test_main.cpp
