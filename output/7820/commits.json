[
  {
    "sha": "b49e3876d1da07e934cc880da8344a73a9fea7b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDllMzg3NmQxZGEwN2U5MzRjYzg4MGRhODM0NGE3M2E5ZmVhN2Iz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-14T15:49:05Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-12-02T10:01:42Z"
      },
      "message": "Consensus: Minimal way to move dust out of consensus",
      "tree": {
        "sha": "c84c4ded5368dbaabc31e1776e3172520a67e5b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c84c4ded5368dbaabc31e1776e3172520a67e5b1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b49e3876d1da07e934cc880da8344a73a9fea7b3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYQUaGAAoJEIhmwY6hyUSio3AP/iRcd33VWpF7KkodyhD/4wXn\nFzdN+pza/3gs4G1pDBVA3nfwfHqU+RIiFqEdWLgAoNhmjF12pTI1l6BhfmyXMpdr\nnWhT62urWeC97gKMuvgZn1Q0OI5cDvxOBNkMTpZC45/gcm20iZfSVWy2wHFee3KX\nGmmXCWLnnlQq95AAIUpNWjz+qCOSEeUAX7Tl4PrsrrB1DeVye6zeDylmYU5rUKht\nFezMvQ2GFBlrBHXLg0OB1LZ4mGZCNr7vFlipdAbLZTTt1wCDZNS8SzUnkryIaLpC\nRI4YuTVNraXh8hXh+JkIDZg377a5Cum5WMnCsiXeWntdpgJgGWA5kej9Nsk6Hmxe\nLQOpq+ZMSOu6Yk1Yx820aO/VqgVLUx527UhtQ/96VqnaWSszAS8sCQ0e62JsS7jB\nsIXIR00aAscIaWxWFlUI9V4CcHQ7abln0QGGYvGcrKCNbbSIbfD+zetpj9ezpEcQ\nei0eZT9dvAojonrHuX2MNVFr4yUgIrwZ3RJID4VVy/zzBNtxqfxXEOM3+W1CSS/N\nlpsQf8jL5+zs4PIIGaWW/7tBAKfOAIj5ymnXHDorfaHBk/aJGHyQpeqGqveasjSh\nMJ/zssW8OMlTmWpzMvcfwYgaiBmWE+/auZvZx0ghI1vx3MnMVoEvKn67wUVWjIB2\njwimFtwYLCRAZN58VcGb\n=Resh\n-----END PGP SIGNATURE-----",
        "payload": "tree c84c4ded5368dbaabc31e1776e3172520a67e5b1\nparent ad826b3df9f763b49f1e3e3d50c4efdd438c7547\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1476460145 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1480672902 +0100\n\nConsensus: Minimal way to move dust out of consensus\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b49e3876d1da07e934cc880da8344a73a9fea7b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b49e3876d1da07e934cc880da8344a73a9fea7b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b49e3876d1da07e934cc880da8344a73a9fea7b3/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad826b3df9f763b49f1e3e3d50c4efdd438c7547",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad826b3df9f763b49f1e3e3d50c4efdd438c7547",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad826b3df9f763b49f1e3e3d50c4efdd438c7547"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 57,
      "deletions": 51
    },
    "files": [
      {
        "sha": "c9af8262cd3dccf26448dd3f21c137e64ac58c2a",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 1,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49e3876d1da07e934cc880da8344a73a9fea7b3/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49e3876d1da07e934cc880da8344a73a9fea7b3/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=b49e3876d1da07e934cc880da8344a73a9fea7b3",
        "patch": "@@ -14,6 +14,43 @@\n \n #include <boost/foreach.hpp>\n \n+CAmount GetDustThreshold(const CTxOut& txout)\n+{\n+    // \"Dust\" is defined in terms of minRelayTxFee,\n+    // which has units satoshis-per-kilobyte.\n+    // If you'd pay more than 1/3 in fees\n+    // to spend something, then we consider it dust.\n+    // A typical spendable non-segwit txout is 34 bytes big, and will\n+    // need a CTxIn of at least 148 bytes to spend:\n+    // so dust is a spendable txout less than\n+    // 546*minRelayTxFee/1000 (in satoshis).\n+    // A typical spendable segwit txout is 31 bytes big, and will\n+    // need a CTxIn of at least 67 bytes to spend:\n+    // so dust is a spendable txout less than\n+    // 294*minRelayTxFee/1000 (in satoshis).\n+    if (txout.scriptPubKey.IsUnspendable())\n+        return 0;\n+\n+    size_t nSize = GetSerializeSize(txout, SER_DISK, 0);\n+    int witnessversion = 0;\n+    std::vector<unsigned char> witnessprogram;\n+\n+    if (txout.scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n+        // sum the sizes of the parts of a transaction input\n+        // with 75% segwit discount applied to the script size.\n+        nSize += (32 + 4 + 1 + (107 / WITNESS_SCALE_FACTOR) + 4);\n+    } else {\n+        nSize += (32 + 4 + 1 + 107 + 4); // the 148 mentioned above\n+    }\n+\n+    return 3 * ::minRelayTxFee.GetFee(nSize);\n+}\n+\n+bool IsDust(const CTxOut& txout)\n+{\n+    return (txout.nValue < GetDustThreshold(txout));\n+}\n+\n     /**\n      * Check transaction inputs to mitigate two\n      * potential denial-of-service attacks:\n@@ -105,7 +142,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n         else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n             reason = \"bare-multisig\";\n             return false;\n-        } else if (txout.IsDust(::minRelayTxFee)) {\n+        } else if (IsDust(txout)) {\n             reason = \"dust\";\n             return false;\n         }"
      },
      {
        "sha": "e35dee783554b64b9ed51c9951f0a4620a3c3add",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49e3876d1da07e934cc880da8344a73a9fea7b3/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49e3876d1da07e934cc880da8344a73a9fea7b3/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=b49e3876d1da07e934cc880da8344a73a9fea7b3",
        "patch": "@@ -13,6 +13,7 @@\n #include <string>\n \n class CCoinsViewCache;\n+class CTxOut;\n \n /** Default for -blockmaxsize, which controls the maximum size of block the mining code will create **/\n static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n@@ -64,6 +65,10 @@ static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_\n static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n                                                            LOCKTIME_MEDIAN_TIME_PAST;\n \n+CAmount GetDustThreshold(const CTxOut& txout);\n+\n+bool IsDust(const CTxOut& txout);\n+\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType, const bool witnessEnabled = false);\n     /**\n      * Check for standard transaction types"
      },
      {
        "sha": "bfddfd8ac4d3c6af698a40011e58c627c710429a",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 37,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49e3876d1da07e934cc880da8344a73a9fea7b3/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49e3876d1da07e934cc880da8344a73a9fea7b3/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=b49e3876d1da07e934cc880da8344a73a9fea7b3",
        "patch": "@@ -160,43 +160,6 @@ class CTxOut\n         return (nValue == -1);\n     }\n \n-    CAmount GetDustThreshold(const CFeeRate &minRelayTxFee) const\n-    {\n-        // \"Dust\" is defined in terms of CTransaction::minRelayTxFee,\n-        // which has units satoshis-per-kilobyte.\n-        // If you'd pay more than 1/3 in fees\n-        // to spend something, then we consider it dust.\n-        // A typical spendable non-segwit txout is 34 bytes big, and will\n-        // need a CTxIn of at least 148 bytes to spend:\n-        // so dust is a spendable txout less than\n-        // 546*minRelayTxFee/1000 (in satoshis).\n-        // A typical spendable segwit txout is 31 bytes big, and will\n-        // need a CTxIn of at least 67 bytes to spend:\n-        // so dust is a spendable txout less than\n-        // 294*minRelayTxFee/1000 (in satoshis).\n-        if (scriptPubKey.IsUnspendable())\n-            return 0;\n-\n-        size_t nSize = GetSerializeSize(*this, SER_DISK, 0);\n-        int witnessversion = 0;\n-        std::vector<unsigned char> witnessprogram;\n-\n-        if (scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram)) {\n-            // sum the sizes of the parts of a transaction input\n-            // with 75% segwit discount applied to the script size.\n-            nSize += (32 + 4 + 1 + (107 / WITNESS_SCALE_FACTOR) + 4);\n-        } else {\n-            nSize += (32 + 4 + 1 + 107 + 4); // the 148 mentioned above\n-        }\n-\n-        return 3 * minRelayTxFee.GetFee(nSize);\n-    }\n-\n-    bool IsDust(const CFeeRate &minRelayTxFee) const\n-    {\n-        return (nValue < GetDustThreshold(minRelayTxFee));\n-    }\n-\n     friend bool operator==(const CTxOut& a, const CTxOut& b)\n     {\n         return (a.nValue       == b.nValue &&"
      },
      {
        "sha": "83cb1a486078a3752ba582d7c5c008ad76718fc7",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49e3876d1da07e934cc880da8344a73a9fea7b3/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49e3876d1da07e934cc880da8344a73a9fea7b3/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=b49e3876d1da07e934cc880da8344a73a9fea7b3",
        "patch": "@@ -15,7 +15,8 @@\n \n #include \"wallet/coincontrol.h\"\n #include \"init.h\"\n-#include \"main.h\" // For minRelayTxFee\n+#include \"main.h\"\n+#include \"policy/policy.h\"\n #include \"wallet/wallet.h\"\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n@@ -432,7 +433,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             CTxOut txout(amount, (CScript)std::vector<unsigned char>(24, 0));\n             txDummy.vout.push_back(txout);\n-            if (txout.IsDust(::minRelayTxFee))\n+            if (IsDust(txout))\n                fDust = true;\n         }\n     }\n@@ -545,10 +546,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             if (nChange > 0 && nChange < MIN_CHANGE)\n             {\n                 CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n-                if (txout.IsDust(::minRelayTxFee))\n+                if (IsDust(txout))\n                 {\n                     if (CoinControlDialog::fSubtractFeeFromAmount) // dust-change will be raised until no dust\n-                        nChange = txout.GetDustThreshold(::minRelayTxFee);\n+                        nChange = GetDustThreshold(txout);\n                     else\n                     {\n                         nPayFee += nChange;"
      },
      {
        "sha": "8d6bf2bb4c56b2bf00b4a709b7e15d965044b963",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49e3876d1da07e934cc880da8344a73a9fea7b3/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49e3876d1da07e934cc880da8344a73a9fea7b3/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=b49e3876d1da07e934cc880da8344a73a9fea7b3",
        "patch": "@@ -11,7 +11,7 @@\n \n #include \"primitives/transaction.h\"\n #include \"init.h\"\n-#include \"main.h\" // For minRelayTxFee\n+#include \"policy/policy.h\"\n #include \"protocol.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n@@ -256,7 +256,7 @@ bool isDust(const QString& address, const CAmount& amount)\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n     CScript script = GetScriptForDestination(dest);\n     CTxOut txOut(amount, script);\n-    return txOut.IsDust(::minRelayTxFee);\n+    return IsDust(txOut);\n }\n \n QString HtmlEscape(const QString& str, bool fMultiLine)"
      },
      {
        "sha": "09816ea7baca1d67369ed6a08cc6171c52912370",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49e3876d1da07e934cc880da8344a73a9fea7b3/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49e3876d1da07e934cc880da8344a73a9fea7b3/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=b49e3876d1da07e934cc880da8344a73a9fea7b3",
        "patch": "@@ -10,7 +10,7 @@\n \n #include \"base58.h\"\n #include \"chainparams.h\"\n-#include \"main.h\" // For minRelayTxFee\n+#include \"policy/policy.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"wallet/wallet.h\"\n@@ -582,7 +582,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n \n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n-        if (txOut.IsDust(::minRelayTxFee)) {\n+        if (IsDust(txOut)) {\n             Q_EMIT message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second)),\n                 CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "5079420c3c1fd1dc301a28d18ce7fab5c154e6a7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b49e3876d1da07e934cc880da8344a73a9fea7b3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b49e3876d1da07e934cc880da8344a73a9fea7b3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b49e3876d1da07e934cc880da8344a73a9fea7b3",
        "patch": "@@ -2325,7 +2325,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                         }\n                     }\n \n-                    if (txout.IsDust(::minRelayTxFee))\n+                    if (IsDust(txout))\n                     {\n                         if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                         {\n@@ -2399,16 +2399,16 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     // We do not move dust-change to fees, because the sender would end up paying more than requested.\n                     // This would be against the purpose of the all-inclusive feature.\n                     // So instead we raise the change and deduct from the recipient.\n-                    if (nSubtractFeeFromAmount > 0 && newTxOut.IsDust(::minRelayTxFee))\n+                    if (nSubtractFeeFromAmount > 0 && IsDust(newTxOut))\n                     {\n-                        CAmount nDust = newTxOut.GetDustThreshold(::minRelayTxFee) - newTxOut.nValue;\n+                        CAmount nDust = GetDustThreshold(newTxOut) - newTxOut.nValue;\n                         newTxOut.nValue += nDust; // raise change until no more dust\n                         for (unsigned int i = 0; i < vecSend.size(); i++) // subtract from first recipient\n                         {\n                             if (vecSend[i].fSubtractFeeFromAmount)\n                             {\n                                 txNew.vout[i].nValue -= nDust;\n-                                if (txNew.vout[i].IsDust(::minRelayTxFee))\n+                                if (IsDust(txNew.vout[i]))\n                                 {\n                                     strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                                     return false;\n@@ -2420,7 +2420,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n-                    if (newTxOut.IsDust(::minRelayTxFee))\n+                    if (IsDust(newTxOut))\n                     {\n                         nChangePosInOut = -1;\n                         nFeeRet += nChange;"
      }
    ]
  },
  {
    "sha": "25c6b82b080450e9e39c4085a689bae28daf1e27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWM2YjgyYjA4MDQ1MGU5ZTM5YzQwODVhNjg5YmFlMjhkYWYxZTI3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-31T21:30:17Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-12-02T10:47:34Z"
      },
      "message": "Consensus: Policy: MOVEONLY: Move CFeeRate out of the consensus module\n\n...from amount.o to policy/feerate.o\n\nPolicy, because it moves policy code to the policy directory (common module)",
      "tree": {
        "sha": "d905f5ae2103bcfb940ed6026130c568fca34d1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d905f5ae2103bcfb940ed6026130c568fca34d1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25c6b82b080450e9e39c4085a689bae28daf1e27",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYQVFeAAoJEIhmwY6hyUSiXS0P/iP938hOvZ/3Y7TGRb95y4Oc\nlLdxBD+3IGTNXkMXEoYgj+83ZC7QRaDkKxYirDz5LAfXLuZoivU2nui8vcdUO48z\n2lMlnMayYsi/h5W4VAUkO1q1IVlKnKAZ26vmQz/FzvBmIOc+Xve5D1VMRpxzPEZO\nxTDLnoqzOIYoX+FIMdjPXQX+41KJfR9eCFaecekfRJpLS/wSsRvBua4VRw7SZljE\n4Q7d92aMtvcmhVkSP5QMvg3HXfxuO/3pq7ydwt6mVoMHrPnBfqci0iSbDTosa7IX\nGexLSuRpvRY8OO7nPqp8nACKkuiBtHkMS3cux0uhgD9CekW6n1jcAsyREAaYkWDJ\nKSjbwZqb2S1qofSr96qd+J4WFJCI552/P9m9a74e82vdbA2Dg38i0kqj0U/C8GWZ\noFq6ZrNrRvlv+tZcy0NgIJytjBvL9MUzTD2PudtRVOT7MfKhsiKhVr3ZKfhtBzWh\nDZ13IcziR0YJh+Nx95AkVN9RBV3HYSYWAl9iIYxh7hkKuP35zBQuCVEW2OtHBUPA\nVuXZCJefxKRMBIQM/IiUB5O+As0nZ1IA070Gt+5c0S59v5pQyUmBttHF/XmRq4tU\n2g5uJrix6IJshXUY0w9/G4L18aIRt9zbjfWabnW23YNuPmlExFAFPPzMPf0MgDcr\ndKGtVHYrGl4eJ38ud59L\n=F7gX\n-----END PGP SIGNATURE-----",
        "payload": "tree d905f5ae2103bcfb940ed6026130c568fca34d1d\nparent b49e3876d1da07e934cc880da8344a73a9fea7b3\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1459459817 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1480675654 +0100\n\nConsensus: Policy: MOVEONLY: Move CFeeRate out of the consensus module\n\n...from amount.o to policy/feerate.o\n\nPolicy, because it moves policy code to the policy directory (common module)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25c6b82b080450e9e39c4085a689bae28daf1e27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25c6b82b080450e9e39c4085a689bae28daf1e27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25c6b82b080450e9e39c4085a689bae28daf1e27/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b49e3876d1da07e934cc880da8344a73a9fea7b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b49e3876d1da07e934cc880da8344a73a9fea7b3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b49e3876d1da07e934cc880da8344a73a9fea7b3"
      }
    ],
    "stats": {
      "total": 126,
      "additions": 72,
      "deletions": 54
    },
    "files": [
      {
        "sha": "60c81168dc0b97d1db24ff500ba7631112703909",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -113,6 +113,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   netmessagemaker.h \\\n   noui.h \\\n+  policy/feerate.h \\\n   policy/fees.h \\\n   policy/policy.h \\\n   policy/rbf.h \\\n@@ -288,7 +289,6 @@ libbitcoin_consensus_a_SOURCES = \\\n libbitcoin_common_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_common_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_common_a_SOURCES = \\\n-  amount.cpp \\\n   base58.cpp \\\n   chainparams.cpp \\\n   coins.cpp \\\n@@ -299,6 +299,7 @@ libbitcoin_common_a_SOURCES = \\\n   keystore.cpp \\\n   netaddress.cpp \\\n   netbase.cpp \\\n+  policy/feerate.cpp \\\n   protocol.cpp \\\n   scheduler.cpp \\\n   script/sign.cpp \\"
      },
      {
        "sha": "80bcb3ebfe4cfc2a69339080c7d07fd13a2b334c",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 0,
        "deletions": 43,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -6,19 +6,14 @@\n #ifndef BITCOIN_AMOUNT_H\n #define BITCOIN_AMOUNT_H\n \n-#include \"serialize.h\"\n-\n #include <stdlib.h>\n-#include <string>\n \n /** Amount in satoshis (Can be negative) */\n typedef int64_t CAmount;\n \n static const CAmount COIN = 100000000;\n static const CAmount CENT = 1000000;\n \n-extern const std::string CURRENCY_UNIT;\n-\n /** No amount larger than this (in satoshi) is valid.\n  *\n  * Note that this constant is *not* the total money supply, which in Bitcoin\n@@ -31,42 +26,4 @@ extern const std::string CURRENCY_UNIT;\n static const CAmount MAX_MONEY = 21000000 * COIN;\n inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n \n-/**\n- * Fee rate in satoshis per kilobyte: CAmount / kB\n- */\n-class CFeeRate\n-{\n-private:\n-    CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n-public:\n-    /** Fee rate of 0 satoshis per kB */\n-    CFeeRate() : nSatoshisPerK(0) { }\n-    explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n-    /** Constructor for a fee rate in satoshis per kB. The size in bytes must not exceed (2^63 - 1)*/\n-    CFeeRate(const CAmount& nFeePaid, size_t nBytes);\n-    CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }\n-    /**\n-     * Return the fee in satoshis for the given size in bytes.\n-     */\n-    CAmount GetFee(size_t nBytes) const;\n-    /**\n-     * Return the fee in satoshis for a size of 1000 bytes\n-     */\n-    CAmount GetFeePerK() const { return GetFee(1000); }\n-    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n-    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n-    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n-    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n-    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n-    CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\n-    std::string ToString() const;\n-\n-    ADD_SERIALIZE_METHODS;\n-\n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action) {\n-        READWRITE(nSatoshisPerK);\n-    }\n-};\n-\n #endif //  BITCOIN_AMOUNT_H"
      },
      {
        "sha": "70c0594aee0989c54b3bd86e8fb4caf5c15542f6",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -23,11 +23,12 @@\n #include \"miner.h\"\n #include \"netbase.h\"\n #include \"net.h\"\n+#include \"policy/feerate.h\"\n #include \"policy/policy.h\"\n #include \"rpc/server.h\"\n #include \"rpc/register.h\"\n-#include \"script/standard.h\"\n #include \"script/sigcache.h\"\n+#include \"script/standard.h\"\n #include \"scheduler.h\"\n #include \"timedata.h\"\n #include \"txdb.h\""
      },
      {
        "sha": "fc76d3735ab683f2f41e403d6eca0cd27afcbb46",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -14,6 +14,7 @@\n #include \"chain.h\"\n #include \"coins.h\"\n #include \"net.h\"\n+#include \"policy/feerate.h\"\n #include \"script/script_error.h\"\n #include \"sync.h\"\n #include \"validationinterface.h\""
      },
      {
        "sha": "11a75f09eaecc1c81f852fb00137a016b52f53e2",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -5,7 +5,6 @@\n \n #include \"miner.h\"\n \n-#include \"amount.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"coins.h\"\n@@ -15,6 +14,7 @@\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/feerate.h\"\n #include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"primitives/transaction.h\""
      },
      {
        "sha": "3a04a3d120d9bbf2082d33bb8daf399127bfd30e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -14,6 +14,7 @@\n #include \"hash.h\"\n #include \"limitedmap.h\"\n #include \"netaddress.h\"\n+#include \"policy/feerate.h\"\n #include \"protocol.h\"\n #include \"random.h\"\n #include \"streams.h\""
      },
      {
        "sha": "3bade591d23bbe306a0ecec4a53fd6b65fea73a9",
        "filename": "src/policy/feerate.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/policy/feerate.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/policy/feerate.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.cpp?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -3,7 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"amount.h\"\n+#include \"feerate.h\"\n \n #include \"tinyformat.h\"\n ",
        "previous_filename": "src/amount.cpp"
      },
      {
        "sha": "e82268b095a3196b16007ac58cf3967a40196ed2",
        "filename": "src/policy/feerate.h",
        "status": "added",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/policy/feerate.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/policy/feerate.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/feerate.h?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -0,0 +1,54 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_FEERATE_H\n+#define BITCOIN_POLICY_FEERATE_H\n+\n+#include \"amount.h\"\n+#include \"serialize.h\"\n+\n+#include <string>\n+\n+extern const std::string CURRENCY_UNIT;\n+\n+/**\n+ * Fee rate in satoshis per kilobyte: CAmount / kB\n+ */\n+class CFeeRate\n+{\n+private:\n+    CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n+public:\n+    /** Fee rate of 0 satoshis per kB */\n+    CFeeRate() : nSatoshisPerK(0) { }\n+    explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n+    /** Constructor for a fee rate in satoshis per kB. The size in bytes must not exceed (2^63 - 1)*/\n+    CFeeRate(const CAmount& nFeePaid, size_t nBytes);\n+    CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }\n+    /**\n+     * Return the fee in satoshis for the given size in bytes.\n+     */\n+    CAmount GetFee(size_t nBytes) const;\n+    /**\n+     * Return the fee in satoshis for a size of 1000 bytes\n+     */\n+    CAmount GetFeePerK() const { return GetFee(1000); }\n+    friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n+    friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n+    friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }\n+    friend bool operator<=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK <= b.nSatoshisPerK; }\n+    friend bool operator>=(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK >= b.nSatoshisPerK; }\n+    CFeeRate& operator+=(const CFeeRate& a) { nSatoshisPerK += a.nSatoshisPerK; return *this; }\n+    std::string ToString() const;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        READWRITE(nSatoshisPerK);\n+    }\n+};\n+\n+#endif //  BITCOIN_POLICY_FEERATE_H"
      },
      {
        "sha": "d6a18233ddb029dbd0aa620d73147bc1098c7cde",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -6,7 +6,6 @@\n #include \"policy/fees.h\"\n #include \"policy/policy.h\"\n \n-#include \"amount.h\"\n #include \"primitives/transaction.h\"\n #include \"random.h\"\n #include \"streams.h\""
      },
      {
        "sha": "862f143879ab89c581f02fb48040756bf130f692",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_POLICYESTIMATOR_H\n #define BITCOIN_POLICYESTIMATOR_H\n \n-#include \"amount.h\"\n+#include \"feerate.h\"\n #include \"uint256.h\"\n #include \"random.h\"\n "
      },
      {
        "sha": "a6f3c03cc46136b2b07c0c4f499d843079c50b5a",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_POLICY_POLICY_H\n \n #include \"consensus/consensus.h\"\n+#include \"feerate.h\"\n #include \"script/interpreter.h\"\n #include \"script/standard.h\"\n "
      },
      {
        "sha": "f4e9a0acf8a23cbc753893d9d34e075364653a00",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n #include \"amount.h\"\n+#include \"policy/feerate.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\""
      },
      {
        "sha": "59fff0906971aeb6e643a047761fb2bbfceef61a",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -3,13 +3,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"amount.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"coins.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n+#include \"policy/feerate.h\"\n #include \"policy/policy.h\"\n #include \"primitives/transaction.h\"\n #include \"rpc/server.h\""
      },
      {
        "sha": "4fbd2ec6d3cfe91c80fc8edb1288bd342ed23b2c",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_SCRIPT_INTERPRETER_H\n #define BITCOIN_SCRIPT_INTERPRETER_H\n \n+#include \"amount.h\"\n #include \"script_error.h\"\n #include \"primitives/transaction.h\"\n "
      },
      {
        "sha": "b33f56e142ae7913ea909a746346457ab1268c0e",
        "filename": "src/test/amount_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/test/amount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/test/amount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/amount_tests.cpp?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"amount.h\"\n+#include \"policy/feerate.h\"\n #include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "79681f8b933b02324cbf819f272f22770fa039f5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -13,9 +13,9 @@\n #include <utility>\n #include <string>\n \n-#include \"amount.h\"\n #include \"coins.h\"\n #include \"indirectmap.h\"\n+#include \"policy/feerate.h\"\n #include \"primitives/transaction.h\"\n #include \"sync.h\"\n #include \"random.h\""
      },
      {
        "sha": "42ae19192e14d181ea6b2c0788896df38a33786f",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_WALLET_COINCONTROL_H\n #define BITCOIN_WALLET_COINCONTROL_H\n \n+#include \"policy/feerate.h\"\n #include \"primitives/transaction.h\"\n \n /** Coin Control Features. */"
      },
      {
        "sha": "e46a99cd595009ce7a03e21240f106c449048512",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -3,14 +3,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"amount.h\"\n #include \"base58.h\"\n #include \"chain.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/feerate.h\"\n #include \"policy/rbf.h\"\n #include \"rpc/server.h\"\n #include \"timedata.h\""
      },
      {
        "sha": "030b43e7383f5915d37d3ecfa968f451e9ed83a7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25c6b82b080450e9e39c4085a689bae28daf1e27/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25c6b82b080450e9e39c4085a689bae28daf1e27/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=25c6b82b080450e9e39c4085a689bae28daf1e27",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_WALLET_WALLET_H\n #define BITCOIN_WALLET_WALLET_H\n \n-#include \"amount.h\"\n+#include \"policy/feerate.h\"\n #include \"streams.h\"\n #include \"tinyformat.h\"\n #include \"ui_interface.h\""
      }
    ]
  },
  {
    "sha": "7e2e6fe582ff5bf4ee350e326c6c3633c070cc63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTJlNmZlNTgyZmY1YmY0ZWUzNTBlMzI2YzZjMzYzM2MwNzBjYzYz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-04-04T13:41:25Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-12-02T10:47:59Z"
      },
      "message": "Globals: Allow to parse arguments without implicitly using the argMap global",
      "tree": {
        "sha": "1f246d366004b08f6784ae5f5f0d9673b635957b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f246d366004b08f6784ae5f5f0d9673b635957b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e2e6fe582ff5bf4ee350e326c6c3633c070cc63",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYQVFfAAoJEIhmwY6hyUSiTTAQAL2lIu/JduAhzZTrl7u5Ybej\noZwpfmAbY5/nuafIecrE4ekGhienMaHrTGydUE4KYoDepyL7rl2wT3JeFDdTNRKR\nWktTUZiui1oA/3GlVjNagk8J8bY7fIlt1etRPYzKOMVdMKKS6frsbl3/41U0Eu4A\nyhNyoY0saBMF4jDfcivssxTbssuni7JxK4Q2WcHkUT4I8EvHWKu0CBU2u5omCZ+t\nta725WBsUjOQxE9rSAy/yVtarGmROLhTLDF1R13geP83a/6DdRRE9dwY96qNcqCQ\nh5Ju8eIaYstp5l+YgmwwliseGBqDJ585Cf8yHtxdyzgF0Zguwdwipmpin2GYGMRZ\noKz3q7m1+FGmZTEnYoUxcqkPAAHLkZRye9ukP3Ja0LvVNJ4O8L6ILnPEzv9LO37u\nAuPL1N9qYtC/zKSY4SQo++5cSQ1EOER96ES9atcpE3kcKren8t3eenTQrSsQ3ha/\nrD16wRW5W8bc8QseLUg0+8IHvMAQSes2En+dAXGyWYZbfel2QFr76Toz5X+3NrGL\nIPjJupj+PVD8X8Ct8IOmZd4hzhTZhfG4f0nP7rFEKWuR2XpcNCh0MhWFJL7ECIJj\nrAyfREcsIa1WAkvCKVqq6iwr5HkYWaS+TWZSMZGsdMSu+sherTxL2GNzpzG0GlDZ\nGik3+oA0Ps6FzY8uunVF\n=Xf2D\n-----END PGP SIGNATURE-----",
        "payload": "tree 1f246d366004b08f6784ae5f5f0d9673b635957b\nparent 25c6b82b080450e9e39c4085a689bae28daf1e27\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1459777285 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1480675679 +0100\n\nGlobals: Allow to parse arguments without implicitly using the argMap global\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e2e6fe582ff5bf4ee350e326c6c3633c070cc63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e2e6fe582ff5bf4ee350e326c6c3633c070cc63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e2e6fe582ff5bf4ee350e326c6c3633c070cc63/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "25c6b82b080450e9e39c4085a689bae28daf1e27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25c6b82b080450e9e39c4085a689bae28daf1e27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/25c6b82b080450e9e39c4085a689bae28daf1e27"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 62,
      "deletions": 6
    },
    "files": [
      {
        "sha": "4af7112b73f60c0bee5bbdc97d9279560f7525b8",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 6,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e2e6fe582ff5bf4ee350e326c6c3633c070cc63/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e2e6fe582ff5bf4ee350e326c6c3633c070cc63/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=7e2e6fe582ff5bf4ee350e326c6c3633c070cc63",
        "patch": "@@ -13,6 +13,7 @@\n #include \"random.h\"\n #include \"serialize.h\"\n #include \"sync.h\"\n+#include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n #include \"utiltime.h\"\n \n@@ -377,25 +378,53 @@ void ParseParameters(int argc, const char* const argv[])\n \n std::string GetArg(const std::string& strArg, const std::string& strDefault)\n {\n-    if (mapArgs.count(strArg))\n-        return mapArgs[strArg];\n+    return GetArg(strArg, strDefault, mapArgs);\n+}\n+\n+std::string GetArg(const std::string& strArg, const std::string& strDefault, const std::map<std::string, std::string>& mapArgs)\n+{\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n+        return it->second;\n     return strDefault;\n }\n \n int64_t GetArg(const std::string& strArg, int64_t nDefault)\n {\n-    if (mapArgs.count(strArg))\n-        return atoi64(mapArgs[strArg]);\n+    return GetArg(strArg, nDefault, mapArgs);\n+}\n+\n+int64_t GetArg(const std::string& strArg, int64_t nDefault, const std::map<std::string, std::string>& mapArgs)\n+{\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n+        return atoi64(it->second);\n     return nDefault;\n }\n \n bool GetBoolArg(const std::string& strArg, bool fDefault)\n {\n-    if (mapArgs.count(strArg))\n-        return InterpretBool(mapArgs[strArg]);\n+    return GetBoolArg(strArg, fDefault, mapArgs);\n+}\n+\n+bool GetBoolArg(const std::string& strArg, bool fDefault, const std::map<std::string, std::string>& mapArgs)\n+{\n+    std::map<std::string, std::string>::const_iterator it = mapArgs.find(strArg);\n+    if (it != mapArgs.end())\n+        return InterpretBool(it->second);\n     return fDefault;\n }\n \n+CAmount ParseAmountFromArgs(const std::string& strArg, CAmount nDefault, const std::map<std::string, std::string>& mapArgs)\n+{\n+    CAmount n = nDefault;\n+    std::string strAmount = GetArg(strArg, \"\", mapArgs);\n+    if (\"\" != strAmount)\n+        if (!ParseMoney(strAmount, n) || !MoneyRange(n))\n+            throw std::runtime_error(strprintf(_(\"Invalid amount for %s=<amount>: '%s'\"), strArg, strAmount));\n+    return n;\n+}\n+\n bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n {\n     if (mapArgs.count(strArg))\n@@ -427,6 +456,12 @@ std::string HelpMessageOpt(const std::string &option, const std::string &message\n            std::string(\"\\n\\n\");\n }\n \n+void AppendMessagesOpt(std::string& strUsage, const std::vector<std::pair<std::string, std::string> >& optionsHelp)\n+{\n+    for (unsigned int i=0; i < optionsHelp.size(); i++)\n+        strUsage += HelpMessageOpt(optionsHelp[i].first, optionsHelp[i].second);\n+}\n+\n static std::string FormatException(const std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32"
      },
      {
        "sha": "c6105f8719b370a4c006e9f7a6b421130a0ef43d",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e2e6fe582ff5bf4ee350e326c6c3633c070cc63/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e2e6fe582ff5bf4ee350e326c6c3633c070cc63/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=7e2e6fe582ff5bf4ee350e326c6c3633c070cc63",
        "patch": "@@ -14,6 +14,7 @@\n #include \"config/bitcoin-config.h\"\n #endif\n \n+#include \"amount.h\"\n #include \"compat.h\"\n #include \"tinyformat.h\"\n #include \"utiltime.h\"\n@@ -131,6 +132,7 @@ inline bool IsSwitchChar(char c)\n  * @return command-line argument or default value\n  */\n std::string GetArg(const std::string& strArg, const std::string& strDefault);\n+std::string GetArg(const std::string& strArg, const std::string& strDefault, const std::map<std::string, std::string>& mapArgs);\n \n /**\n  * Return integer argument or default value\n@@ -140,6 +142,7 @@ std::string GetArg(const std::string& strArg, const std::string& strDefault);\n  * @return command-line argument (0 if invalid number) or default value\n  */\n int64_t GetArg(const std::string& strArg, int64_t nDefault);\n+int64_t GetArg(const std::string& strArg, int64_t nDefault, const std::map<std::string, std::string>& mapArgs);\n \n /**\n  * Return boolean argument or default value\n@@ -149,6 +152,24 @@ int64_t GetArg(const std::string& strArg, int64_t nDefault);\n  * @return command-line argument or default value\n  */\n bool GetBoolArg(const std::string& strArg, bool fDefault);\n+bool GetBoolArg(const std::string& strArg, bool fDefault, const std::map<std::string, std::string>& mapArgs);\n+\n+/**\n+ * @param strUsage a string where the options' help with me appended\n+ * @param optionsHelp a vector of string pairs to iteratively call HelpMessageOpt\n+ */\n+void AppendMessagesOpt(std::string& strUsage, const std::vector<std::pair<std::string, std::string> >& optionsHelp);\n+\n+/**\n+ * Return an CAmount argument or default value\n+ *\n+ * @param strArg Argument to get (e.g. \"-foo\")\n+ * @param default a string with an amount\n+ * @param map with the arguments and their values.\n+ * @return command-line argument or default value\n+ * @throw std::runtime_error if there's a parsing error.\n+ */\n+CAmount ParseAmountFromArgs(const std::string& strArg, CAmount nDefault, const std::map<std::string, std::string>& mapArgs);\n \n /**\n  * Set an argument if it doesn't already have a value"
      }
    ]
  },
  {
    "sha": "04f546d64a98d5dfa9eeaf43c703827da56811a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNGY1NDZkNjRhOThkNWRmYTllZWFmNDNjNzAzODI3ZGE1NjgxMWEy",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-04-04T14:21:49Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-12-02T10:48:00Z"
      },
      "message": "Policy: Introduce empty CPolicy interface and CDefaultPolicy implementation",
      "tree": {
        "sha": "57317c9dd9298b5b2a38f08175cf2580c52d640e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/57317c9dd9298b5b2a38f08175cf2580c52d640e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04f546d64a98d5dfa9eeaf43c703827da56811a2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYQVFgAAoJEIhmwY6hyUSiwVMQAKeS+UNiW85E21NAfFzVj1pj\nJKNTMLA3/YhrGpQIfcH1ghevJ9EnQbtWgozocfKMaFrI2+wPkzc0Q1xKY1kC/qsH\nRkxtjQmAFoEC9SNPnagSOKAZ9nhZlmFBBqrwJ1o1VFCsALT0O7xsXKc/VDmRwZnc\ncb4qYGZbsQPGZWikj4aY8OYnpFZvrrDN4CBzhh7sEkrZdph2KG7otW7oPjJvGIUu\nuR4GYTZG5t7upyCfF0nFCLgOg0z5CewKjMgVx9Jjzg16fVtF9p9LXkBL6AU7hdpC\nBarwM7G8EJ+j3mz9Fov20dBVnfplLE8ywy7gsyxSBStFQdoyYNsLwuCWFe+NJTat\nJMDE6xrlslOGMsid/3qFAvlu1ouuYnYY6Y+pWxJHRQEEjW8OWWp62leU6iUKRcJe\n/DyVWgTXtEBRj17WvwGiQdKkz71JHxwtfVAmfjR95okUQCL2br3JF4gDowEGXUCA\nEbKTh7GY4eBU0KUKaq1qgDGfdScMC5JdIyVMOm62/L/7xgMVSUpSul5oawiL4ytS\n38umifNwh2NnqVFbKiBFI3Zk6cgIZe3+j36fVt9leTFvaByEZ8T/mAt1ueABf50w\nbdAz66dRFeWNqskMYcYv7UnA24xAHxxChzRVO7o0ckoVmW8JE1XwYZRijsBLDzln\nSUkd9eylKZ/rzh0umGtr\n=DO7n\n-----END PGP SIGNATURE-----",
        "payload": "tree 57317c9dd9298b5b2a38f08175cf2580c52d640e\nparent 7e2e6fe582ff5bf4ee350e326c6c3633c070cc63\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1459779709 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1480675680 +0100\n\nPolicy: Introduce empty CPolicy interface and CDefaultPolicy implementation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04f546d64a98d5dfa9eeaf43c703827da56811a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04f546d64a98d5dfa9eeaf43c703827da56811a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04f546d64a98d5dfa9eeaf43c703827da56811a2/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e2e6fe582ff5bf4ee350e326c6c3633c070cc63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e2e6fe582ff5bf4ee350e326c6c3633c070cc63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e2e6fe582ff5bf4ee350e326c6c3633c070cc63"
      }
    ],
    "stats": {
      "total": 104,
      "additions": 104,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3becad420ea949c9a1b065ee8e26c8c589ec0e0b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04f546d64a98d5dfa9eeaf43c703827da56811a2/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04f546d64a98d5dfa9eeaf43c703827da56811a2/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=04f546d64a98d5dfa9eeaf43c703827da56811a2",
        "patch": "@@ -115,6 +115,7 @@ BITCOIN_CORE_H = \\\n   noui.h \\\n   policy/feerate.h \\\n   policy/fees.h \\\n+  policy/interface.h \\\n   policy/policy.h \\\n   policy/rbf.h \\\n   pow.h \\"
      },
      {
        "sha": "45730d4f9c5acd4294baf59e780bb2bf941e9db3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04f546d64a98d5dfa9eeaf43c703827da56811a2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04f546d64a98d5dfa9eeaf43c703827da56811a2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=04f546d64a98d5dfa9eeaf43c703827da56811a2",
        "patch": "@@ -459,6 +459,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n \n     AppendParamsHelpMessages(strUsage, showDebug);\n+    Policy::AppendHelpMessages(strUsage, showDebug);\n \n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)\n@@ -949,6 +950,16 @@ bool AppInitParameterInteraction()\n     if (nConnectTimeout <= 0)\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n \n+    try {\n+        CPolicy* pPolicy = Policy::Factory(Policy::STANDARD);\n+        if(!pPolicy)\n+            return InitError(strprintf(_(\"Error: Unable to initialize policy '%s'\"), Policy::STANDARD));\n+        pPolicy->InitFromArgs(mapArgs);\n+        globalPolicy.reset(pPolicy);\n+    } catch(const std::exception& e) {\n+        return InitError(strprintf(_(\"Error while initializing policy: %s\"), e.what()));\n+    }\n+\n     // Fee-per-kilobyte amount considered the same as \"free\"\n     // If you are mining, be careful setting this:\n     // if you set it to zero then"
      },
      {
        "sha": "5f9b234429d1c298dc1aa8caee3be4a300da8097",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04f546d64a98d5dfa9eeaf43c703827da56811a2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04f546d64a98d5dfa9eeaf43c703827da56811a2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=04f546d64a98d5dfa9eeaf43c703827da56811a2",
        "patch": "@@ -87,6 +87,7 @@ bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n \n+std::unique_ptr<CPolicy> globalPolicy;\n CTxMemPool mempool(::minRelayTxFee);\n FeeFilterRounder filterRounder(::minRelayTxFee);\n "
      },
      {
        "sha": "cc33a458f8360f2b83ebeb7df220f874db309571",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04f546d64a98d5dfa9eeaf43c703827da56811a2/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04f546d64a98d5dfa9eeaf43c703827da56811a2/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=04f546d64a98d5dfa9eeaf43c703827da56811a2",
        "patch": "@@ -37,6 +37,7 @@ class CBloomFilter;\n class CChainParams;\n class CInv;\n class CConnman;\n+class CPolicy;\n class CScriptCheck;\n class CTxMemPool;\n class CValidationInterface;\n@@ -157,6 +158,7 @@ struct BlockHasher\n \n extern CScript COINBASE_FLAGS;\n extern CCriticalSection cs_main;\n+extern std::unique_ptr<CPolicy> globalPolicy;\n extern CTxMemPool mempool;\n typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap mapBlockIndex;"
      },
      {
        "sha": "b8757ea28ce098713a169f37a8b38b0b63d3382e",
        "filename": "src/policy/interface.h",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04f546d64a98d5dfa9eeaf43c703827da56811a2/src/policy/interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04f546d64a98d5dfa9eeaf43c703827da56811a2/src/policy/interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/interface.h?ref=04f546d64a98d5dfa9eeaf43c703827da56811a2",
        "patch": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2015 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POLICY_INTERFACE_H\n+#define BITCOIN_POLICY_INTERFACE_H\n+\n+#include <map>\n+#include <string>\n+#include <vector>\n+\n+/**\n+ * Abstract interface for extensible policy.\n+ */\n+class CPolicy\n+{\n+public:\n+    virtual ~CPolicy() {}; // Extend before instantiate, this is an interface\n+\n+    /**\n+     * @return a vector with strings {\"option\", \"description\"} pairs, with the policy options.\n+     */\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const = 0;\n+    /**\n+     * @param argMap a map with options to read from.\n+     */\n+    virtual void InitFromArgs(const std::map<std::string, std::string>& argMap) = 0;\n+};\n+\n+#endif // BITCOIN_POLICY_INTERFACE_H"
      },
      {
        "sha": "e1a5e8a428fcf044519cc17a2f7b17eabd966b01",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04f546d64a98d5dfa9eeaf43c703827da56811a2/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04f546d64a98d5dfa9eeaf43c703827da56811a2/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=04f546d64a98d5dfa9eeaf43c703827da56811a2",
        "patch": "@@ -254,3 +254,31 @@ int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost)\n {\n     return GetVirtualTransactionSize(GetTransactionWeight(tx), nSigOpCost);\n }\n+\n+/** CDefaultPolicy initialization */\n+\n+std::vector<std::pair<std::string, std::string> > CDefaultPolicy::GetOptionsHelp() const\n+{\n+    std::vector<std::pair<std::string, std::string> > optionsHelp;\n+    return optionsHelp;\n+}\n+\n+void CDefaultPolicy::InitFromArgs(const std::map<std::string, std::string>& mapArgs)\n+{\n+}\n+\n+/** Factory and init help */\n+\n+void Policy::AppendHelpMessages(std::string& strUsage, bool showDebug)\n+{\n+    const std::unique_ptr<CPolicy> defaultPolicy(Policy::Factory(Policy::STANDARD));\n+    strUsage += HelpMessageGroup(strprintf(_(\"Policy options: (for policy: %s)\"), Policy::STANDARD));\n+    AppendMessagesOpt(strUsage, defaultPolicy->GetOptionsHelp());\n+}\n+\n+CPolicy* Policy::Factory(const std::string& name)\n+{\n+    if (name == Policy::STANDARD)\n+        return new CDefaultPolicy();\n+    return NULL;\n+}"
      },
      {
        "sha": "4d378da8263edc0e811737ea6c30f8fdc99ed4f3",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04f546d64a98d5dfa9eeaf43c703827da56811a2/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04f546d64a98d5dfa9eeaf43c703827da56811a2/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=04f546d64a98d5dfa9eeaf43c703827da56811a2",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"consensus/consensus.h\"\n #include \"feerate.h\"\n+#include \"interface.h\"\n #include \"script/interpreter.h\"\n #include \"script/standard.h\"\n \n@@ -65,6 +66,35 @@ static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_\n /** Used as the flags parameter to sequence and nLocktime checks in non-consensus code. */\n static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n                                                            LOCKTIME_MEDIAN_TIME_PAST;\n+namespace Policy {\n+\n+/**\n+ * Append a help string for the options of the selected policy.\n+ * @param strUsage a formatted HelpMessage string with policy options\n+ * is appended to this string\n+ */\n+void AppendHelpMessages(std::string& strUsage, bool showDebug);\n+/**\n+ * Factory for the interface from a string.\n+ */\n+CPolicy* Factory(const std::string& name);\n+\n+/** Supported policies */\n+static const std::string STANDARD = \"standard\";\n+\n+} // namespace Policy\n+\n+/**\n+ * Standard implementation \n+ */\n+class CDefaultPolicy : public CPolicy\n+{\n+public:\n+    CDefaultPolicy() {};\n+\n+    virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n+    virtual void InitFromArgs(const std::map<std::string, std::string>& argMap);\n+};\n \n CAmount GetDustThreshold(const CTxOut& txout);\n "
      }
    ]
  },
  {
    "sha": "7cf8970e14859a6f2bdd57fbe6091d82570ebcc5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2Y4OTcwZTE0ODU5YTZmMmJkZDU3ZmJlNjA5MWQ4MjU3MGViY2M1",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-04-04T23:55:26Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-12-02T10:48:01Z"
      },
      "message": "Globals: Policy: mempool and filterRounder are initialized before minRelayTxFee\n\nTherefore the default value before init::AppInit2() is being used always.",
      "tree": {
        "sha": "3cd1fd10e19f1a03f2e55dc8a7e4e6275213391c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cd1fd10e19f1a03f2e55dc8a7e4e6275213391c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYQVFhAAoJEIhmwY6hyUSizHcP/0tqOgzftUbbGb8IseRj+4I4\nlrcMFjY5oEdpI5tdqYXrft83W8V32uOceWYEJLk4ptfrflZxLZ0PSn7ZaD2qyL4D\ndKtc6rr8kZnLdwdP5UzeBxrpaFl3b8J4hDjzMwxWZBNq5j7Jt7pFyDOFugoWda3C\nEcVvUYJFjCkXyQTQubN4RhNjse6Z8czsN/zC6esvcrN2VJV5ssNf0iORjzOimQSF\n9yc0wefPXVS1oeg8k4ZKZAN7EuqFJ84oT0TjSmjZAzRRKSYKMkHI5uZGyOl0Q2Dw\ni0Yq+7NmCkqE45M+AyFq55jsyQVebRoKQf8Y+qXXsbq1t0dKWNmPL2Hpd2dLuLxu\nX9SlCZptXk/BSVcpIZJZKXZNN5N/wff1+5C4Re2U/bvaWHwtGT2PTlp+HlXRDmQF\nWWJ9uXD7cXPW1TfNB5fxfJHuhjqw5GRotwqaePaDTpshplfn1KVeDIOgOoAJL6sv\n1TgiacrmiVISJo/iukpH4r+ya2YtKxO+6AAC1vmqudXQt9KAt8i+dyjmqdi9eQcr\ne6su/IK+61bWqYUoekO8LGf65/MQ5ArJYg7f1uHmC4PugaNn7fDTOaG1VF2qDHbb\nq0g/vIM6foKW8itx0NovEvBJK3GBT1VHj29BtJGGvr/WM3so2qeSGNSaTSB1Tp3u\nwEXqK92dR3tuHrs20Kuy\n=4Ozd\n-----END PGP SIGNATURE-----",
        "payload": "tree 3cd1fd10e19f1a03f2e55dc8a7e4e6275213391c\nparent 04f546d64a98d5dfa9eeaf43c703827da56811a2\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1459814126 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1480675681 +0100\n\nGlobals: Policy: mempool and filterRounder are initialized before minRelayTxFee\n\nTherefore the default value before init::AppInit2() is being used always.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04f546d64a98d5dfa9eeaf43c703827da56811a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04f546d64a98d5dfa9eeaf43c703827da56811a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04f546d64a98d5dfa9eeaf43c703827da56811a2"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 10,
      "deletions": 9
    },
    "files": [
      {
        "sha": "338d7210c4283d3bfad9f45200e65d9ca79ef9bd",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7cf8970e14859a6f2bdd57fbe6091d82570ebcc5",
        "patch": "@@ -88,8 +88,8 @@ CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n \n std::unique_ptr<CPolicy> globalPolicy;\n-CTxMemPool mempool(::minRelayTxFee);\n-FeeFilterRounder filterRounder(::minRelayTxFee);\n+CTxMemPool mempool;\n+FeeFilterRounder filterRounder;\n \n struct IteratorComparator\n {"
      },
      {
        "sha": "d4943793548ff61ea742afa163208d6db748f2e4",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=7cf8970e14859a6f2bdd57fbe6091d82570ebcc5",
        "patch": "@@ -50,8 +50,6 @@ struct LockPoints;\n static const bool DEFAULT_WHITELISTRELAY = true;\n /** Default for DEFAULT_WHITELISTFORCERELAY. */\n static const bool DEFAULT_WHITELISTFORCERELAY = true;\n-/** Default for -minrelaytxfee, minimum relay fee for transactions */\n-static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n //! -maxtxfee default\n static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;\n //! Discourage users to set fees higher than this amount (in satoshis) per kB"
      },
      {
        "sha": "d6b8c087b57abecb609b9bfb5d2bebb319e31aa1",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=7cf8970e14859a6f2bdd57fbe6091d82570ebcc5",
        "patch": "@@ -477,9 +477,9 @@ void CBlockPolicyEstimator::Read(CAutoFile& filein, int nFileVersion)\n     }\n }\n \n-FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)\n+FeeFilterRounder::FeeFilterRounder()\n {\n-    CAmount minFeeLimit = minIncrementalFee.GetFeePerK() / 2;\n+    CAmount minFeeLimit = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE).GetFeePerK() / 2;\n     feeset.insert(0);\n     for (double bucketBoundary = minFeeLimit; bucketBoundary <= MAX_FEERATE; bucketBoundary *= FEE_SPACING) {\n         feeset.insert(bucketBoundary);"
      },
      {
        "sha": "2f1fa4acbad76f63444376f027a049a273535ad7",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=7cf8970e14859a6f2bdd57fbe6091d82570ebcc5",
        "patch": "@@ -264,7 +264,7 @@ class FeeFilterRounder\n {\n public:\n     /** Create new FeeFilterRounder */\n-    FeeFilterRounder(const CFeeRate& minIncrementalFee);\n+    FeeFilterRounder();\n \n     /** Quantize a minimum fee for privacy purpose before broadcast **/\n     CAmount round(CAmount currentMinFee);"
      },
      {
        "sha": "5b1ccc3fed792388ad96f148a31b8489da0f8944",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=7cf8970e14859a6f2bdd57fbe6091d82570ebcc5",
        "patch": "@@ -17,6 +17,8 @@\n class CCoinsViewCache;\n class CTxOut;\n \n+/** Default for -minrelaytxfee, minimum relay fee for transactions */\n+static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n /** Default for -blockmaxsize, which controls the maximum size of block the mining code will create **/\n static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n /** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/"
      },
      {
        "sha": "b687d842ecba18a2ff173221b6be09a9a61377fd",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=7cf8970e14859a6f2bdd57fbe6091d82570ebcc5",
        "patch": "@@ -16,7 +16,7 @@ BOOST_FIXTURE_TEST_SUITE(policyestimator_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n {\n-    CTxMemPool mpool(CFeeRate(1000));\n+    CTxMemPool mpool;\n     TestMemPoolEntryHelper entry;\n     CAmount basefee(2000);\n     CAmount deltaFee(100);"
      },
      {
        "sha": "088a34f4015bec87939b2c9e40609146925a3a6b",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=7cf8970e14859a6f2bdd57fbe6091d82570ebcc5",
        "patch": "@@ -16,6 +16,7 @@\n #include \"coins.h\"\n #include \"indirectmap.h\"\n #include \"policy/feerate.h\"\n+#include \"policy/policy.h\" // For DEFAULT_MIN_RELAY_TX_FEE\n #include \"primitives/transaction.h\"\n #include \"sync.h\"\n #include \"random.h\"\n@@ -508,7 +509,7 @@ class CTxMemPool\n      *  around what it \"costs\" to relay a transaction around the network and\n      *  below which we would reasonably say a transaction has 0-effective-fee.\n      */\n-    CTxMemPool(const CFeeRate& _minReasonableRelayFee);\n+    CTxMemPool(const CFeeRate& _minReasonableRelayFee=CFeeRate(DEFAULT_MIN_RELAY_TX_FEE));\n     ~CTxMemPool();\n \n     /**"
      }
    ]
  },
  {
    "sha": "9185a86c2ad39292afccf68f9759ffc0f46a3e70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MTg1YTg2YzJhZDM5MjkyYWZjY2Y2OGY5NzU5ZmZjMGY0NmEzZTcw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-04-04T15:46:53Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-12-02T10:48:02Z"
      },
      "message": "Policy: Encapsulate ::minRelayTxFee initialization behind CDefaultPolicy::InitFromArgs()",
      "tree": {
        "sha": "e722131b4178c26c407eb06dabad9e19fe6a88dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e722131b4178c26c407eb06dabad9e19fe6a88dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9185a86c2ad39292afccf68f9759ffc0f46a3e70",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYQVFiAAoJEIhmwY6hyUSijocQAJxQ96MNUK406PMgLHFQxeIR\nDpJcHySnCu3Mb7Ln5sUzbM60jbubERbTi5skEylibDC6owkCMjwfyZQjPEwm2r1e\nwtRkxKXwJYLk6lIKw2FZx69XEQiOBx8nJe7vMZ2Ihjoz5fsz/kxraehu6wOU6Q3s\nR1jEUe/qEevCxYYJG9asbZzNTmTASacVwnRkOqKyxVXRmqim/6KMvHKq9Q68dSWa\n03aQfu0Y+jEqX0tOZOP2stRPPU3bmRXd1FQn8CqEyC+jXx90qnmzC9dVfU/XCGAY\n0CvSrStRiTlZIG0c5BFezheQjxImJYSdJkV5iX4Ntet9pfsg7mre3wnclIAqAuwi\nw1X9rFq17Wzji+8oDbda8dvu+RkrpphwDfyCYChD0QQJM2XumWf99ucMYtXXwNyx\noGiWnNVK8qyqakoyLG/KUPiMZsbpjqy9SJIsgD+UVngBIxmMDUyBkLZGD55gEadB\n/D98EHLuBWPCHSZbbn+6Ptnt+oZhhuKr+kbU9hOvht945rrPqvJgeF+wtyoWyxX5\nzUb6oyiuMKpj56NiESioXO//K7ankRCnEzKVqp74ibmJDoxoFMmAnhhHB09ucTgV\nHPoOBqbZ05/5Fgtfer0i1jBb1PNs20v4Kr5hxxEA7VZgc3vtaXnlnQUszpGuaqgd\nubSunGB5wE23wPJBnS7e\n=Z413\n-----END PGP SIGNATURE-----",
        "payload": "tree e722131b4178c26c407eb06dabad9e19fe6a88dd\nparent 7cf8970e14859a6f2bdd57fbe6091d82570ebcc5\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1459784813 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1480675682 +0100\n\nPolicy: Encapsulate ::minRelayTxFee initialization behind CDefaultPolicy::InitFromArgs()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9185a86c2ad39292afccf68f9759ffc0f46a3e70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9185a86c2ad39292afccf68f9759ffc0f46a3e70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9185a86c2ad39292afccf68f9759ffc0f46a3e70/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cf8970e14859a6f2bdd57fbe6091d82570ebcc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cf8970e14859a6f2bdd57fbe6091d82570ebcc5"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 20,
      "deletions": 18
    },
    "files": [
      {
        "sha": "fa9e338db1f55e2e0a4f249657848244c493bfbd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9185a86c2ad39292afccf68f9759ffc0f46a3e70/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9185a86c2ad39292afccf68f9759ffc0f46a3e70/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9185a86c2ad39292afccf68f9759ffc0f46a3e70",
        "patch": "@@ -447,8 +447,6 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n         strUsage += HelpMessageOpt(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE));\n     }\n-    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n     strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n@@ -960,21 +958,6 @@ bool AppInitParameterInteraction()\n         return InitError(strprintf(_(\"Error while initializing policy: %s\"), e.what()));\n     }\n \n-    // Fee-per-kilobyte amount considered the same as \"free\"\n-    // If you are mining, be careful setting this:\n-    // if you set it to zero then\n-    // a transaction spammer can cheaply fill blocks using\n-    // 1-satoshi-fee transactions. It should be set above the real\n-    // cost to you of processing a transaction.\n-    if (mapArgs.count(\"-minrelaytxfee\"))\n-    {\n-        CAmount n = 0;\n-        if (!ParseMoney(mapArgs[\"-minrelaytxfee\"], n) || 0 == n)\n-            return InitError(AmountErrMsg(\"minrelaytxfee\", mapArgs[\"-minrelaytxfee\"]));\n-        // High fee check is done afterward in CWallet::ParameterInteraction()\n-        ::minRelayTxFee = CFeeRate(n);\n-    }\n-\n     fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n     if (chainparams.RequireStandard() && !fRequireStandard)\n         return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));"
      },
      {
        "sha": "7f0bf43325ec255b0984d12cbb07b0b2e735a960",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9185a86c2ad39292afccf68f9759ffc0f46a3e70/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9185a86c2ad39292afccf68f9759ffc0f46a3e70/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=9185a86c2ad39292afccf68f9759ffc0f46a3e70",
        "patch": "@@ -10,6 +10,7 @@\n #include \"main.h\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n+#include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n \n #include <boost/foreach.hpp>\n@@ -260,11 +261,25 @@ int64_t GetVirtualTransactionSize(const CTransaction& tx, int64_t nSigOpCost)\n std::vector<std::pair<std::string, std::string> > CDefaultPolicy::GetOptionsHelp() const\n {\n     std::vector<std::pair<std::string, std::string> > optionsHelp;\n+    optionsHelp.push_back(std::make_pair(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n+        CURRENCY_UNIT, FormatMoney(minRelayFee.GetFee(1000)))));\n     return optionsHelp;\n }\n \n void CDefaultPolicy::InitFromArgs(const std::map<std::string, std::string>& mapArgs)\n {\n+    // Fee-per-kilobyte amount considered the same as \"free\"\n+    // If you are mining, be careful setting this:\n+    // if you set it to zero then\n+    // a transaction spammer can cheaply fill blocks using\n+    // 1-satoshi-fee transactions. It should be set above the real\n+    // cost to you of processing a transaction.\n+    const CAmount nAmountFee = ParseAmountFromArgs(\"-minrelaytxfee\", minRelayFee.GetFee(1000), mapArgs);\n+    if (nAmountFee > 0)\n+        minRelayFee = CFeeRate(nAmountFee);\n+    else\n+        throw std::runtime_error(strprintf(_(\"Invalid amount for %s=<amount>: %d\"), \"-minrelaytxfee\", nAmountFee));\n+    minRelayTxFee = minRelayFee; // TODO unify global minRelayTxFee\n }\n \n /** Factory and init help */"
      },
      {
        "sha": "8b8a984759c559ec89637d1606aa9cae4e8ac3e0",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9185a86c2ad39292afccf68f9759ffc0f46a3e70/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9185a86c2ad39292afccf68f9759ffc0f46a3e70/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=9185a86c2ad39292afccf68f9759ffc0f46a3e70",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_POLICY_POLICY_H\n #define BITCOIN_POLICY_POLICY_H\n \n+#include \"amount.h\"\n #include \"consensus/consensus.h\"\n #include \"feerate.h\"\n #include \"interface.h\"\n@@ -91,8 +92,11 @@ static const std::string STANDARD = \"standard\";\n  */\n class CDefaultPolicy : public CPolicy\n {\n+protected:\n+    /** A fee rate smaller than this is considered zero fee (for relaying, mining and transaction creation) */\n+    CFeeRate minRelayFee;\n public:\n-    CDefaultPolicy() {};\n+    CDefaultPolicy(const CFeeRate& minRelayFeeIn=CFeeRate(DEFAULT_MIN_RELAY_TX_FEE)) : minRelayFee(minRelayFeeIn) {};\n \n     virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n     virtual void InitFromArgs(const std::map<std::string, std::string>& argMap);"
      }
    ]
  },
  {
    "sha": "93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5M2Y4ZjAxNmUyOGNjMDViOTRjMGJhNWFhNTNjMWE4YjYwYjVlOTg4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-04-04T15:47:08Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-12-02T10:48:03Z"
      },
      "message": "ERROR-unittest: Consensus: Policy: MOVEONLY-ish: Rename dust methods from CTxOut to CPolicy\n\nConsensus, because it moves non-consensus code out of the consensus module\nPolicy, because it moves policy code to the policy directory (server module)\n\nMethod Renames:\n- s/CTxOut::GetDustThreshold(const CFeeRate&)/CDefaultPolicy::GetDustThreshold(const CTxOut&)/\n- s/CTxOut::IsDust(const CFeeRate&)/CDefaultPolicy::AcceptDust(const CTxOut&)/",
      "tree": {
        "sha": "aeebf38750e4f1b51be39e82a50f04b6f75913b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aeebf38750e4f1b51be39e82a50f04b6f75913b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYQVFjAAoJEIhmwY6hyUSidQIP/3h9jyf4oB2ICFlNfEV7jU35\n+sMSORC5WLdXxWhphYMOb58PgwpUyqC9kqYDC/ZGn4NSNHnd7ieyjskA+x7bjoil\nvS8kTQoaQU2ZDoYXLITAmzeACGfKwYJa6JkZLnJWkZ5AKuvnPYEXT6TnTNcort95\na+GQqzjqL6LWzTqDlbJS+yHLlbne8vw90i5ApjWLMa/xSswq15vY3lrojykCsyAy\nlHt0lxJ2781d1FAgBe6N+Z0pFFMSFEUW6X/AjdpPqcTQe76mMtxZDZGjoS6lUbAb\njtTPOt9oTppT+5eMbqy8Gp6XEAFiyjURfjRNoIORIzFp2NfwXvPDnfPTlty8PDC8\nImmOR2Tc6IGSs+rx/xXBn5b0wjy1a1RECX/P08rCzr5gSyipyZuNUxDritFg9qir\n4RmrrfrM9FvL2Bkkf71/qNwxI5rjGE35HHLXcdSoNXFCUCLg/c9h+spza/vFMaZD\nPtLfK26HGRrQdju86Z2IKo1nMwWFlstQC+AwLGnxBPNhEq6/boKx/gDuaj8M6E8y\n4oFwhX80xVuS8kcaOp5Icx8ng3teqcKpXakUPELHdiRbg2zqQiIfp+LludPblkkl\n6gWZj656LEikOieJV0F+rRC384P3gxZxOGWJ0PKLc5WS7F43KH0AO5tMbOMZF78H\nlppumJjervQvqn+rYER6\n=PITN\n-----END PGP SIGNATURE-----",
        "payload": "tree aeebf38750e4f1b51be39e82a50f04b6f75913b2\nparent 9185a86c2ad39292afccf68f9759ffc0f46a3e70\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1459784828 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1480675683 +0100\n\nERROR-unittest: Consensus: Policy: MOVEONLY-ish: Rename dust methods from CTxOut to CPolicy\n\nConsensus, because it moves non-consensus code out of the consensus module\nPolicy, because it moves policy code to the policy directory (server module)\n\nMethod Renames:\n- s/CTxOut::GetDustThreshold(const CFeeRate&)/CDefaultPolicy::GetDustThreshold(const CTxOut&)/\n- s/CTxOut::IsDust(const CFeeRate&)/CDefaultPolicy::AcceptDust(const CTxOut&)/\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9185a86c2ad39292afccf68f9759ffc0f46a3e70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9185a86c2ad39292afccf68f9759ffc0f46a3e70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9185a86c2ad39292afccf68f9759ffc0f46a3e70"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 41,
      "deletions": 22
    },
    "files": [
      {
        "sha": "eefa64145e868156950b11c860ba4ad3217c1f2d",
        "filename": "src/policy/interface.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/policy/interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/policy/interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/interface.h?ref=93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
        "patch": "@@ -10,6 +10,8 @@\n #include <string>\n #include <vector>\n \n+class CTxOut;\n+\n /**\n  * Abstract interface for extensible policy.\n  */\n@@ -18,6 +20,10 @@ class CPolicy\n public:\n     virtual ~CPolicy() {}; // Extend before instantiate, this is an interface\n \n+    //! Some policies forbid output amounts below the dust threshold, defined internally.\n+    virtual CAmount GetDustThreshold(const CTxOut& txout) const = 0;\n+    virtual bool AcceptDust(const CTxOut& txout) const = 0;\n+\n     /**\n      * @return a vector with strings {\"option\", \"description\"} pairs, with the policy options.\n      */"
      },
      {
        "sha": "426f0b0aaa493cce472287c020f37929172b5fde",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
        "patch": "@@ -7,28 +7,28 @@\n \n #include \"policy/policy.h\"\n \n-#include \"main.h\"\n+#include \"main.h\" // TODO decouple from main\n #include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n \n #include <boost/foreach.hpp>\n \n-CAmount GetDustThreshold(const CTxOut& txout)\n+CAmount CDefaultPolicy::GetDustThreshold(const CTxOut& txout) const\n {\n-    // \"Dust\" is defined in terms of minRelayTxFee,\n+    // \"Dust\" is defined in terms of CBlockPolicyEstimator::minRelayFee,\n     // which has units satoshis-per-kilobyte.\n     // If you'd pay more than 1/3 in fees\n     // to spend something, then we consider it dust.\n     // A typical spendable non-segwit txout is 34 bytes big, and will\n     // need a CTxIn of at least 148 bytes to spend:\n     // so dust is a spendable txout less than\n-    // 546*minRelayTxFee/1000 (in satoshis).\n+    // 546*minRelayFee/1000 (in satoshis).\n     // A typical spendable segwit txout is 31 bytes big, and will\n     // need a CTxIn of at least 67 bytes to spend:\n     // so dust is a spendable txout less than\n-    // 294*minRelayTxFee/1000 (in satoshis).\n+    // 294*minRelayFee/1000 (in satoshis).\n     if (txout.scriptPubKey.IsUnspendable())\n         return 0;\n \n@@ -44,12 +44,12 @@ CAmount GetDustThreshold(const CTxOut& txout)\n         nSize += (32 + 4 + 1 + 107 + 4); // the 148 mentioned above\n     }\n \n-    return 3 * ::minRelayTxFee.GetFee(nSize);\n+    return 3 * minRelayFee.GetFee(nSize);\n }\n \n-bool IsDust(const CTxOut& txout)\n+bool CDefaultPolicy::AcceptDust(const CTxOut& txout) const\n {\n-    return (txout.nValue < GetDustThreshold(txout));\n+    return txout.nValue >= GetDustThreshold(txout);\n }\n \n     /**\n@@ -143,7 +143,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n         else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n             reason = \"bare-multisig\";\n             return false;\n-        } else if (IsDust(txout)) {\n+        } else if (!globalPolicy->AcceptDust(txout)) {\n             reason = \"dust\";\n             return false;\n         }"
      },
      {
        "sha": "5f611053b08248093e14fd420624410f84d0ff53",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
        "patch": "@@ -98,6 +98,9 @@ class CDefaultPolicy : public CPolicy\n public:\n     CDefaultPolicy(const CFeeRate& minRelayFeeIn=CFeeRate(DEFAULT_MIN_RELAY_TX_FEE)) : minRelayFee(minRelayFeeIn) {};\n \n+    virtual CAmount GetDustThreshold(const CTxOut& txout) const;\n+    virtual bool AcceptDust(const CTxOut& txout) const;\n+\n     virtual std::vector<std::pair<std::string, std::string> > GetOptionsHelp() const;\n     virtual void InitFromArgs(const std::map<std::string, std::string>& argMap);\n };"
      },
      {
        "sha": "bfddfd8ac4d3c6af698a40011e58c627c710429a",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
        "patch": "@@ -7,7 +7,6 @@\n #define BITCOIN_PRIMITIVES_TRANSACTION_H\n \n #include \"amount.h\"\n-#include \"policy/feerate.h\"\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"uint256.h\""
      },
      {
        "sha": "65f89ac7c7e34c361546a0b67cd5314e6ceb41c0",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
        "patch": "@@ -15,8 +15,8 @@\n \n #include \"wallet/coincontrol.h\"\n #include \"init.h\"\n-#include \"main.h\"\n-#include \"policy/policy.h\"\n+#include \"main.h\" // For globalPolicy\n+#include \"policy/interface.h\"\n #include \"wallet/wallet.h\"\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n@@ -418,6 +418,7 @@ void CoinControlDialog::updateLabelLocked()\n \n void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n {\n+    const CPolicy& policy = *globalPolicy;\n     if (!model)\n         return;\n \n@@ -433,7 +434,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             CTxOut txout(amount, (CScript)std::vector<unsigned char>(24, 0));\n             txDummy.vout.push_back(txout);\n-            if (IsDust(txout))\n+            if (!policy.AcceptDust(txout))\n                fDust = true;\n         }\n     }\n@@ -546,10 +547,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             if (nChange > 0 && nChange < MIN_CHANGE)\n             {\n                 CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n-                if (IsDust(txout))\n+                if (!policy.AcceptDust(txout))\n                 {\n                     if (CoinControlDialog::fSubtractFeeFromAmount) // dust-change will be raised until no dust\n-                        nChange = GetDustThreshold(txout);\n+                        nChange = policy.GetDustThreshold(txout);\n                     else\n                     {\n                         nPayFee += nChange;"
      },
      {
        "sha": "6d048e5db0b4d2c74166403ef6751836f37f7547",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
        "patch": "@@ -11,6 +11,8 @@\n \n #include \"primitives/transaction.h\"\n #include \"init.h\"\n+#include \"main.h\" // For globalPolicy\n+#include \"policy/interface.h\"\n #include \"policy/policy.h\"\n #include \"protocol.h\"\n #include \"script/script.h\"\n@@ -253,10 +255,11 @@ QString formatBitcoinURI(const SendCoinsRecipient &info)\n \n bool isDust(const QString& address, const CAmount& amount)\n {\n+    const CPolicy& policy = *globalPolicy;\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n     CScript script = GetScriptForDestination(dest);\n     CTxOut txOut(amount, script);\n-    return IsDust(txOut);\n+    return !policy.AcceptDust(txOut);\n }\n \n QString HtmlEscape(const QString& str, bool fMultiLine)"
      },
      {
        "sha": "0a4a05a34c3d05d6e670f363270e6e35b86770ca",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
        "patch": "@@ -10,6 +10,8 @@\n \n #include \"base58.h\"\n #include \"chainparams.h\"\n+#include \"main.h\" // For globalPolicy\n+#include \"policy/interface.h\"\n #include \"policy/policy.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n@@ -520,6 +522,7 @@ bool PaymentServer::readPaymentRequestFromFile(const QString& filename, PaymentR\n \n bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, SendCoinsRecipient& recipient)\n {\n+    const CPolicy& policy = *globalPolicy;\n     if (!optionsModel)\n         return false;\n \n@@ -582,7 +585,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n \n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n-        if (IsDust(txOut)) {\n+        if (!policy.AcceptDust(txOut)) {\n             Q_EMIT message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second)),\n                 CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "3367dc838268918e3c6de9209e13910a6be32f38",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
        "patch": "@@ -8,6 +8,8 @@\n #include \"paymentrequestdata.h\"\n \n #include \"amount.h\"\n+#include \"main.h\" // For globalPolicy\n+#include \"policy/policy.h\"\n #include \"random.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n@@ -65,6 +67,7 @@ static SendCoinsRecipient handleRequest(PaymentServer* server, std::vector<unsig\n void PaymentServerTests::paymentServerTests()\n {\n     SelectParams(CBaseChainParams::MAIN);\n+    globalPolicy.reset(Policy::Factory(Policy::STANDARD)); // TODO remove\n     OptionsModel optionsModel;\n     PaymentServer* server = new PaymentServer(NULL, false);\n     X509_STORE* caStore = X509_STORE_new();"
      },
      {
        "sha": "01b9a43666884495d420389bde63b50c9a1fd043",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
        "patch": "@@ -2231,6 +2231,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, bool ov\n bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n                                 int& nChangePosInOut, std::string& strFailReason, const CCoinControl* coinControl, bool sign)\n {\n+    const CPolicy& policy = *globalPolicy;\n     CAmount nValue = 0;\n     int nChangePosRequest = nChangePosInOut;\n     unsigned int nSubtractFeeFromAmount = 0;\n@@ -2325,7 +2326,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                         }\n                     }\n \n-                    if (IsDust(txout))\n+                    if (!policy.AcceptDust(txout))\n                     {\n                         if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                         {\n@@ -2399,16 +2400,16 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     // We do not move dust-change to fees, because the sender would end up paying more than requested.\n                     // This would be against the purpose of the all-inclusive feature.\n                     // So instead we raise the change and deduct from the recipient.\n-                    if (nSubtractFeeFromAmount > 0 && IsDust(newTxOut))\n+                    if (nSubtractFeeFromAmount > 0 && !policy.AcceptDust(newTxOut))\n                     {\n-                        CAmount nDust = GetDustThreshold(newTxOut) - newTxOut.nValue;\n+                        CAmount nDust = policy.GetDustThreshold(newTxOut) - newTxOut.nValue;\n                         newTxOut.nValue += nDust; // raise change until no more dust\n                         for (unsigned int i = 0; i < vecSend.size(); i++) // subtract from first recipient\n                         {\n                             if (vecSend[i].fSubtractFeeFromAmount)\n                             {\n                                 txNew.vout[i].nValue -= nDust;\n-                                if (IsDust(txNew.vout[i]))\n+                                if (!policy.AcceptDust(txNew.vout[i]))\n                                 {\n                                     strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                                     return false;\n@@ -2420,7 +2421,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n-                    if (IsDust(newTxOut))\n+                    if (!policy.AcceptDust(newTxOut))\n                     {\n                         nChangePosInOut = -1;\n                         nFeeRet += nChange;"
      }
    ]
  },
  {
    "sha": "a56cbadab1c69a81e8ad0f3678e6715040447d88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTZjYmFkYWIxYzY5YTgxZThhZDBmMzY3OGU2NzE1MDQwNDQ3ZDg4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-04-04T21:57:25Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-12-02T10:48:04Z"
      },
      "message": "ERROR-unit-test_IsStandard: Policy: Introduce CPolicy::GetMinRelayFee() and use it everywhere except for dust",
      "tree": {
        "sha": "db562285ed12a9497ed1df0b67981bc4ba41f688",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db562285ed12a9497ed1df0b67981bc4ba41f688"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a56cbadab1c69a81e8ad0f3678e6715040447d88",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYQVFkAAoJEIhmwY6hyUSi2qkQAOQ+ztUAwQ0zuq6dddLQqg4N\ntMDFLsXpy5KOjFsPHBSsGByX0JK5T9LoAid7JaQvwydbUormMRG7SzIU40dmaqLq\nTs/dqYpXiDqVDpqF45JpqF8KwKUbbpKMTQLB3pCT6pCD0nuZTMxTxaAagJs1/JDC\nf7Nu5HFF1KaEI3Ziklk1a9u8LkFTUdxiSD++h79KbU5d/xz2wnNL9Ra/pR/TB7FW\n3XVLnKnSKPYHcrwGXG/AWFd819Mt/eRa16iUYVwQWTw0fRfmJVApSSBNya9Cu9c+\nXH5u37EkYSgnN97ht/OZ5nQKIcqqz3G1nB6lgOXNEsdKFrbBoVS8RFqKQZdl7qzS\nbk0Lw9kWaAjh5UE6g7illlN4k+hfaMNFUMglPwaKJolQr7jbFX6XW7YFSWUzl1/b\nNRY5Mn3M+madD2EJuRIgBqU8bHBnDujtPrJVDiQ5KHFzkT1M1kPoeP/JQDgqF+ap\nVFdzl6olbm0X/ByKkHgKHE5PTO2JpySyMnh6wh/ZgTzR2Dd2BktQVnY0E2Hv+3qN\nQvc1d4Ww36NnJ66VFj3o2I7Ob5Imu5f25Lr2Hx1TUxsAlk8oD9L86aANzaSW+4DN\nHJtvv+w/GJzT1sSAAK7P5VIAcaLIHA8uqNr8Mz/la2jQUYDIfeb64SI+Qzt0A3hN\n7UbtHwTa4RfN72MwPcom\n=EgNg\n-----END PGP SIGNATURE-----",
        "payload": "tree db562285ed12a9497ed1df0b67981bc4ba41f688\nparent 93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1459807045 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1480675684 +0100\n\nERROR-unit-test_IsStandard: Policy: Introduce CPolicy::GetMinRelayFee() and use it everywhere except for dust\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a56cbadab1c69a81e8ad0f3678e6715040447d88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a56cbadab1c69a81e8ad0f3678e6715040447d88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a56cbadab1c69a81e8ad0f3678e6715040447d88/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/93f8f016e28cc05b94c0ba5aa53c1a8b60b5e988"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 67,
      "deletions": 49
    },
    "files": [
      {
        "sha": "562619b2ca5c6b3c6410241067b49d30e0f425c8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "patch": "@@ -957,14 +957,15 @@ bool AppInitParameterInteraction()\n     } catch(const std::exception& e) {\n         return InitError(strprintf(_(\"Error while initializing policy: %s\"), e.what()));\n     }\n+    const CPolicy& policy = *globalPolicy;\n \n     fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n     if (chainparams.RequireStandard() && !fRequireStandard)\n         return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n     nBytesPerSigOp = GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n #ifdef ENABLE_WALLET\n-    if (!CWallet::ParameterInteraction())\n+    if (!CWallet::ParameterInteraction(policy))\n         return false;\n #endif\n "
      },
      {
        "sha": "8560f9251aa550b3fe9b631af354d14c849dcc29",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "patch": "@@ -1178,6 +1178,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n                               bool* pfMissingInputs, int64_t nAcceptTime, bool fOverrideMempoolLimit, const CAmount& nAbsurdFee,\n                               std::vector<uint256>& vHashTxnToUncache)\n {\n+    const CPolicy& policy = *globalPolicy; // TODO make parameter\n     const uint256 hash = tx.GetHash();\n     AssertLockHeld(cs_main);\n     if (pfMissingInputs)\n@@ -1363,15 +1364,15 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n-        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nModifiedFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(entry.GetPriority(chainActive.Height() + 1))) {\n+        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nModifiedFees < policy.GetMinRelayFee().GetFee(nSize) && !AllowFree(entry.GetPriority(chainActive.Height() + 1))) {\n             // Require that free transactions have sufficient priority to be mined in the next block.\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }\n \n         // Continuously rate-limit free (really, very-low-fee) transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n         // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nModifiedFees < ::minRelayTxFee.GetFee(nSize))\n+        if (fLimitFree && nModifiedFees < policy.GetMinRelayFee().GetFee(nSize))\n         {\n             static CCriticalSection csFreeLimiter;\n             static double dFreeCount;\n@@ -1539,14 +1540,14 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             // Finally in addition to paying more fees than the conflicts the\n             // new transaction must pay for its own bandwidth.\n             CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n-            if (nDeltaFees < ::minRelayTxFee.GetFee(nSize))\n+            if (nDeltaFees < policy.GetMinRelayFee().GetFee(nSize))\n             {\n                 return state.DoS(0, false,\n                         REJECT_INSUFFICIENTFEE, \"insufficient fee\", false,\n                         strprintf(\"rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                               hash.ToString(),\n                               FormatMoney(nDeltaFees),\n-                              FormatMoney(::minRelayTxFee.GetFee(nSize))));\n+                              FormatMoney(policy.GetMinRelayFee().GetFee(nSize))));\n             }\n         }\n "
      },
      {
        "sha": "f81d39df9160da50e0c2ed3a5d324a2ca0f21ed3",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "patch": "@@ -74,8 +74,8 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n     return nNewTime - nOldTime;\n }\n \n-BlockAssembler::BlockAssembler(const CChainParams& _chainparams)\n-    : chainparams(_chainparams)\n+BlockAssembler::BlockAssembler(const CChainParams& _chainparams, const CPolicy& _policy)\n+    : chainparams(_chainparams), policy(_policy)\n {\n     // Block resource limits\n     // If neither -blockmaxsize or -blockmaxweight is given, limit to DEFAULT_BLOCK_MAX_*\n@@ -460,7 +460,7 @@ void BlockAssembler::addPackageTxs()\n             packageSigOpsCost = modit->nSigOpCostWithAncestors;\n         }\n \n-        if (packageFees < ::minRelayTxFee.GetFee(packageSize)) {\n+        if (packageFees < policy.GetMinRelayFee().GetFee(packageSize)) {\n             // Everything else we might consider has a lower fee rate\n             return;\n         }"
      },
      {
        "sha": "5b7443a3d6c05c180f676a48340ae2a34512ccf0",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "patch": "@@ -156,13 +156,14 @@ class BlockAssembler\n     int nHeight;\n     int64_t nLockTimeCutoff;\n     const CChainParams& chainparams;\n+    const CPolicy& policy;\n \n     // Variables used for addPriorityTxs\n     int lastFewTxs;\n     bool blockFinished;\n \n public:\n-    BlockAssembler(const CChainParams& chainparams);\n+    BlockAssembler(const CChainParams& chainparams, const CPolicy& policy);\n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n     std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n "
      },
      {
        "sha": "a9a67b750394a1269a7800686f670cbd6f528569",
        "filename": "src/policy/interface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/policy/interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/policy/interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/interface.h?ref=a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "patch": "@@ -10,6 +10,7 @@\n #include <string>\n #include <vector>\n \n+class CFeeRate;\n class CTxOut;\n \n /**\n@@ -20,6 +21,8 @@ class CPolicy\n public:\n     virtual ~CPolicy() {}; // Extend before instantiate, this is an interface\n \n+    /** A fee rate smaller than this is considered zero fee (for relaying, mining and transaction creation) */\n+    virtual CFeeRate GetMinRelayFee() const = 0;\n     //! Some policies forbid output amounts below the dust threshold, defined internally.\n     virtual CAmount GetDustThreshold(const CTxOut& txout) const = 0;\n     virtual bool AcceptDust(const CTxOut& txout) const = 0;"
      },
      {
        "sha": "4a443fa653cf6819721ba23edc3a8abcfe2f0d26",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "patch": "@@ -98,6 +98,7 @@ class CDefaultPolicy : public CPolicy\n public:\n     CDefaultPolicy(const CFeeRate& minRelayFeeIn=CFeeRate(DEFAULT_MIN_RELAY_TX_FEE)) : minRelayFee(minRelayFeeIn) {};\n \n+    virtual CFeeRate GetMinRelayFee() const { return minRelayFee; };\n     virtual CAmount GetDustThreshold(const CTxOut& txout) const;\n     virtual bool AcceptDust(const CTxOut& txout) const;\n "
      },
      {
        "sha": "13f9476d764ad58194bc7344bf8f89f9542907da",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "patch": "@@ -113,7 +113,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd)\n     {\n-        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(Params()).CreateNewBlock(coinbaseScript->reserveScript));\n+        std::unique_ptr<CBlockTemplate> pblocktemplate(BlockAssembler(Params(), *globalPolicy).CreateNewBlock(coinbaseScript->reserveScript));\n         if (!pblocktemplate.get())\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         CBlock *pblock = &pblocktemplate->block;\n@@ -535,7 +535,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n \n         // Create new block\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = BlockAssembler(Params()).CreateNewBlock(scriptDummy);\n+        pblocktemplate = BlockAssembler(Params(), *globalPolicy).CreateNewBlock(scriptDummy);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n "
      },
      {
        "sha": "57c4343eba154c1dc7cd3e1e4ca159350cbfc166",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "patch": "@@ -9,6 +9,7 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n+#include \"policy/interface.h\"\n #include \"rpc/server.h\"\n #include \"timedata.h\"\n #include \"util.h\"\n@@ -103,7 +104,7 @@ UniValue getinfo(const JSONRPCRequest& request)\n         obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n #endif\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n+    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(globalPolicy->GetMinRelayFee().GetFeePerK())));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n     return obj;\n }"
      },
      {
        "sha": "0c3a3b30de967f09d99d081173a5d76a3e139916",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "patch": "@@ -9,6 +9,7 @@\n #include \"main.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n+#include \"policy/interface.h\"\n #include \"protocol.h\"\n #include \"sync.h\"\n #include \"timedata.h\"\n@@ -441,7 +442,7 @@ UniValue getnetworkinfo(const JSONRPCRequest& request)\n         obj.push_back(Pair(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL)));\n     }\n     obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n+    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(globalPolicy->GetMinRelayFee().GetFeePerK())));\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);"
      },
      {
        "sha": "2df0c2b78cfd7e23a233083aebf24e8379a83b37",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 23,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "patch": "@@ -9,6 +9,7 @@\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n+#include \"policy/policy.h\"\n #include \"pubkey.h\"\n #include \"script/standard.h\"\n #include \"txmempool.h\"\n@@ -77,7 +78,7 @@ bool TestSequenceLocks(const CTransaction &tx, int flags)\n // Implemented as an additional function, rather than a separate test case,\n // to allow reusing the blockchain created in CreateNewBlock_validity.\n // Note that this test assumes blockprioritysize is 0.\n-void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey, std::vector<CTransactionRef>& txFirst)\n+void TestPackageSelection(const CChainParams& chainparams, const CPolicy& policy, CScript scriptPubKey, std::vector<CTransactionRef>& txFirst)\n {\n     // Test the ancestor feerate transaction selection.\n     TestMemPoolEntryHelper entry;\n@@ -107,7 +108,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     uint256 hashHighFeeTx = tx.GetHash();\n     mempool.addUnchecked(hashHighFeeTx, entry.Fee(50000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n \n-    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams, policy).CreateNewBlock(scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashParentTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashHighFeeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashMediumFeeTx);\n@@ -121,13 +122,13 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n \n     // Calculate a fee on child transaction that will put the package just\n     // below the min relay fee (assuming 1 child tx of the same size).\n-    CAmount feeToUse = minRelayTxFee.GetFee(2*freeTxSize) - 1;\n+    CAmount feeToUse = globalPolicy->GetMinRelayFee().GetFee(2*freeTxSize) - 1;\n \n     tx.vin[0].prevout.hash = hashFreeTx;\n     tx.vout[0].nValue = 5000000000LL - 1000 - 50000 - feeToUse;\n     uint256 hashLowFeeTx = tx.GetHash();\n     mempool.addUnchecked(hashLowFeeTx, entry.Fee(feeToUse).FromTx(tx));\n-    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = BlockAssembler(chainparams, policy).CreateNewBlock(scriptPubKey);\n     // Verify that the free tx and the low fee tx didn't get selected\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n         BOOST_CHECK(pblocktemplate->block.vtx[i]->GetHash() != hashFreeTx);\n@@ -141,7 +142,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     tx.vout[0].nValue -= 2; // Now we should be just over the min relay fee\n     hashLowFeeTx = tx.GetHash();\n     mempool.addUnchecked(hashLowFeeTx, entry.Fee(feeToUse+2).FromTx(tx));\n-    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = BlockAssembler(chainparams, policy).CreateNewBlock(scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashFreeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashLowFeeTx);\n \n@@ -158,11 +159,11 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     // This tx can't be mined by itself\n     tx.vin[0].prevout.hash = hashFreeTx2;\n     tx.vout.resize(1);\n-    feeToUse = minRelayTxFee.GetFee(freeTxSize);\n+    feeToUse = globalPolicy->GetMinRelayFee().GetFee(freeTxSize);\n     tx.vout[0].nValue = 5000000000LL - 100000000 - feeToUse;\n     uint256 hashLowFeeTx2 = tx.GetHash();\n     mempool.addUnchecked(hashLowFeeTx2, entry.Fee(feeToUse).SpendsCoinbase(false).FromTx(tx));\n-    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = BlockAssembler(chainparams, policy).CreateNewBlock(scriptPubKey);\n \n     // Verify that this tx isn't selected.\n     for (size_t i=0; i<pblocktemplate->block.vtx.size(); ++i) {\n@@ -175,7 +176,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     tx.vin[0].prevout.n = 1;\n     tx.vout[0].nValue = 100000000 - 10000; // 10k satoshi fee\n     mempool.addUnchecked(tx.GetHash(), entry.Fee(10000).FromTx(tx));\n-    pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    pblocktemplate = BlockAssembler(chainparams, policy).CreateNewBlock(scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[8]->GetHash() == hashLowFeeTx2);\n }\n \n@@ -184,6 +185,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n     // Note that by default, these tests run with size accounting enabled.\n     const CChainParams& chainparams = Params(CBaseChainParams::MAIN);\n+    std::unique_ptr<CPolicy> testPolicy(Policy::Factory(Policy::STANDARD));\n+    globalPolicy.reset(Policy::Factory(Policy::STANDARD)); // TODO remove\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     std::unique_ptr<CBlockTemplate> pblocktemplate;\n     CMutableTransaction tx,tx2;\n@@ -198,7 +201,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     fCheckpointsEnabled = false;\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams, *testPolicy).CreateNewBlock(scriptPubKey));\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n@@ -228,7 +231,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     }\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams, *testPolicy).CreateNewBlock(scriptPubKey));\n \n     const CAmount BLOCKSUBSIDY = 50*COIN;\n     const CAmount LOWFEE = CENT;\n@@ -252,7 +255,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    BOOST_CHECK_THROW(BlockAssembler(chainparams, *testPolicy).CreateNewBlock(scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n@@ -266,7 +269,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).SigOpsCost(80).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams, *testPolicy).CreateNewBlock(scriptPubKey));\n     mempool.clear();\n \n     // block size > limit\n@@ -286,13 +289,13 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(spendsCoinbase).FromTx(tx));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams, *testPolicy).CreateNewBlock(scriptPubKey));\n     mempool.clear();\n \n     // orphan in mempool, template creation fails\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    BOOST_CHECK_THROW(BlockAssembler(chainparams, *testPolicy).CreateNewBlock(scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     // child with higher priority than parent\n@@ -309,7 +312,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = tx.vout[0].nValue+BLOCKSUBSIDY-HIGHERFEE; //First txn output + fresh coinbase - new txn fee\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams, *testPolicy).CreateNewBlock(scriptPubKey));\n     mempool.clear();\n \n     // coinbase in mempool, template creation fails\n@@ -320,7 +323,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     // give it a fee so it'll get mined\n     mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n-    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    BOOST_CHECK_THROW(BlockAssembler(chainparams, *testPolicy).CreateNewBlock(scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     // invalid (pre-p2sh) txn in mempool, template creation fails\n@@ -337,7 +340,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue -= LOWFEE;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(LOWFEE).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n-    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    BOOST_CHECK_THROW(BlockAssembler(chainparams, *testPolicy).CreateNewBlock(scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     // double spend txn pair in mempool, template creation fails\n@@ -350,7 +353,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(HIGHFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK_THROW(BlockAssembler(chainparams).CreateNewBlock(scriptPubKey), std::runtime_error);\n+    BOOST_CHECK_THROW(BlockAssembler(chainparams, *testPolicy).CreateNewBlock(scriptPubKey), std::runtime_error);\n     mempool.clear();\n \n     // subsidy changing\n@@ -366,7 +369,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         next->BuildSkip();\n         chainActive.SetTip(next);\n     }\n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams, *testPolicy).CreateNewBlock(scriptPubKey));\n     // Extend to a 210000-long block chain.\n     while (chainActive.Tip()->nHeight < 210000) {\n         CBlockIndex* prev = chainActive.Tip();\n@@ -378,7 +381,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         next->BuildSkip();\n         chainActive.SetTip(next);\n     }\n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams, *testPolicy).CreateNewBlock(scriptPubKey));\n     // Delete the dummy blocks again.\n     while (chainActive.Tip()->nHeight > nHeight) {\n         CBlockIndex* del = chainActive.Tip();\n@@ -464,7 +467,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].nSequence = CTxIn::SEQUENCE_LOCKTIME_TYPE_FLAG | 1;\n     BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n \n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams, *testPolicy).CreateNewBlock(scriptPubKey));\n \n     // None of the of the absolute height/time locked tx should have made\n     // it into the template because we still check IsFinalTx in CreateNewBlock,\n@@ -477,14 +480,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     chainActive.Tip()->nHeight++;\n     SetMockTime(chainActive.Tip()->GetMedianTimePast() + 1);\n \n-    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams, *testPolicy).CreateNewBlock(scriptPubKey));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);\n     mempool.clear();\n \n-    TestPackageSelection(chainparams, scriptPubKey, txFirst);\n+    TestPackageSelection(chainparams, *testPolicy, scriptPubKey, txFirst);\n \n     fCheckpointsEnabled = true;\n }"
      },
      {
        "sha": "ba1de5ff57dc1a19dcd5d69a2886313200ab8722",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "patch": "@@ -113,7 +113,8 @@ CBlock\n TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)\n {\n     const CChainParams& chainparams = Params();\n-    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    const CPolicy& policy = *globalPolicy;\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams, policy).CreateNewBlock(scriptPubKey);\n     CBlock& block = pblocktemplate->block;\n \n     // Replace mempool-selected txns with just coinbase plus passed-in txns:"
      },
      {
        "sha": "9ed9fe1af85c33c87142893e9ea8924591afb97b",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "patch": "@@ -683,6 +683,8 @@ BOOST_AUTO_TEST_CASE(test_witness)\n BOOST_AUTO_TEST_CASE(test_IsStandard)\n {\n     LOCK(cs_main);\n+    CFeeRate defaultRelayFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n+    globalPolicy.reset(new CDefaultPolicy(defaultRelayFee)); // TODO remove\n     CBasicKeyStore keystore;\n     CCoinsView coinsDummy;\n     CCoinsViewCache coins(&coinsDummy);\n@@ -703,7 +705,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     BOOST_CHECK(IsStandardTx(t, reason));\n \n     // Check dust with default relay fee:\n-    CAmount nDustThreshold = 182 * minRelayTxFee.GetFeePerK()/1000 * 3;\n+    CAmount nDustThreshold = 182 * defaultRelayFee.GetFeePerK()/1000 * 3;\n     BOOST_CHECK_EQUAL(nDustThreshold, 546);\n     // dust:\n     t.vout[0].nValue = nDustThreshold - 1;\n@@ -714,14 +716,14 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n \n     // Check dust with odd relay fee to verify rounding:\n     // nDustThreshold = 182 * 1234 / 1000 * 3\n-    minRelayTxFee = CFeeRate(1234);\n+    globalPolicy.reset(new CDefaultPolicy(CFeeRate(1234))); // TODO remove\n     // dust:\n     t.vout[0].nValue = 672 - 1;\n     BOOST_CHECK(!IsStandardTx(t, reason));\n     // not dust:\n     t.vout[0].nValue = 672;\n     BOOST_CHECK(IsStandardTx(t, reason));\n-    minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n+    globalPolicy.reset(new CDefaultPolicy(defaultRelayFee)); // TODO remove\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;\n     BOOST_CHECK(!IsStandardTx(t, reason));"
      },
      {
        "sha": "220eb63297e606d1bab1d1968aa77ce43051de1b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "patch": "@@ -2530,7 +2530,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n-                if (nFeeNeeded < ::minRelayTxFee.GetFee(nBytes))\n+                if (nFeeNeeded < policy.GetMinRelayFee().GetFee(nBytes))\n                 {\n                     strFailReason = _(\"Transaction too large for fee policy\");\n                     return false;\n@@ -2617,7 +2617,8 @@ bool CWallet::AddAccountingEntry(const CAccountingEntry& acentry, CWalletDB *pwa\n \n CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n {\n-    return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n+    const CPolicy& policy = *globalPolicy; // TODO make parameter\n+    return std::max(minTxFee.GetFee(nTxBytes), policy.GetMinRelayFee().GetFee(nTxBytes));\n }\n \n CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)\n@@ -3560,7 +3561,7 @@ void CWallet::postInitProcess(boost::thread_group& threadGroup)\n     threadGroup.create_thread(boost::bind(&ThreadFlushWalletDB, boost::ref(this->strWalletFile)));\n }\n \n-bool CWallet::ParameterInteraction()\n+bool CWallet::ParameterInteraction(const CPolicy& policy)\n {\n     if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n         return true;\n@@ -3584,7 +3585,7 @@ bool CWallet::ParameterInteraction()\n     if (GetArg(\"-prune\", 0) && GetBoolArg(\"-rescan\", false))\n         return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n \n-    if (::minRelayTxFee.GetFeePerK() > HIGH_TX_FEE_PER_KB)\n+    if (policy.GetMinRelayFee().GetFeePerK() > HIGH_TX_FEE_PER_KB)\n         InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n                     _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n \n@@ -3618,10 +3619,10 @@ bool CWallet::ParameterInteraction()\n                         _(\"This is the transaction fee you will pay if you send a transaction.\"));\n \n         payTxFee = CFeeRate(nFeePerK, 1000);\n-        if (payTxFee < ::minRelayTxFee)\n+        if (payTxFee < policy.GetMinRelayFee())\n         {\n             return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                                       mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString()));\n+                                       mapArgs[\"-paytxfee\"], policy.GetMinRelayFee().ToString()));\n         }\n     }\n     if (mapArgs.count(\"-maxtxfee\"))\n@@ -3632,10 +3633,10 @@ bool CWallet::ParameterInteraction()\n         if (nMaxFee > HIGH_MAX_TX_FEE)\n             InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         maxTxFee = nMaxFee;\n-        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n+        if (CFeeRate(maxTxFee, 1000) < policy.GetMinRelayFee())\n         {\n             return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                                       mapArgs[\"-maxtxfee\"], ::minRelayTxFee.ToString()));\n+                                       mapArgs[\"-maxtxfee\"], policy.GetMinRelayFee().ToString()));\n         }\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);"
      },
      {
        "sha": "0c35da4b5d21e572e619ae96e7862746f08cade4",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a56cbadab1c69a81e8ad0f3678e6715040447d88/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "patch": "@@ -29,6 +29,8 @@\n #include <boost/shared_ptr.hpp>\n #include <boost/thread.hpp>\n \n+class CPolicy;\n+\n extern CWallet* pwalletMain;\n \n /**\n@@ -921,7 +923,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void postInitProcess(boost::thread_group& threadGroup);\n \n     /* Wallets parameter interaction */\n-    static bool ParameterInteraction();\n+    static bool ParameterInteraction(const CPolicy& policy);\n \n     bool BackupWallet(const std::string& strDest);\n "
      }
    ]
  },
  {
    "sha": "daabe730db7558d3e5fe102065c6cd8847cfe59b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYWFiZTczMGRiNzU1OGQzZTVmZTEwMjA2NWM2Y2Q4ODQ3Y2ZlNTli",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-08-30T17:11:42Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-12-02T10:48:05Z"
      },
      "message": "Globals: Cleanly remove ::minRelayTxFee",
      "tree": {
        "sha": "91f576a5b0b9d04bbef32c867a0a3452e296f2a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91f576a5b0b9d04bbef32c867a0a3452e296f2a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/daabe730db7558d3e5fe102065c6cd8847cfe59b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYQVFlAAoJEIhmwY6hyUSiK9EP/RC2oPnpTpuh3XiNrGTS2gUy\n+i90bYq+XNo7WOPbWj0AGp30svD7J4MhKqEQqNxo0NTVICAT9RLA1Cs0h6F4pzPb\nN0g6zDCbt9yJUF3BgG0Te3VWvmCxVlWS+cZqrdgrJ62feWLZPzQPNelih0xet+rQ\nMKZ4W0Em+XIZURFLGYKC/vTqeIHJUWwyGflz9LwRjsGlX4UjAERLANSyWLAYcwaV\n2qOLnDLgKMx4XlZdRlCBS3dLEnmX3tLVhzgs7n5vXuPZGxobHXJjrob3zhmI/wfh\n58tLUeN23DUAdQXlvs0jGKADPCIKooYGFu5HNi7LIp9+dvKUqen1kcy3/tFaWhZi\nJLK3OQ4IHIbDer1DQxjiUjvFaxY9/IaYlhLNDK7Te6qoB2k7lMGcTJUJxsem3As7\nb/MDMwTj2XJ1pTDw0BRKbvq0jKiLmpuROgznXI1Vh5apAs0WXj6SRvh8LaWE9+Mm\nN/lmz/wX7hNv3D73jExpb150rQ/wiSBU6Gh/PPJ7War2pPbNXmLD5hp8pRDOGKXm\njJhKJfXw+worVTGdeirV0LEwe9TKDgFowgvuV/CLbgKuKQTLb9gEXz1r9Bk72zI/\nK2vv1gEN1GdGxkRkbVk/s22CCV0GvJ4Gbfs5+LWoi9czdprsiqXnWt767zcecOa2\n+ec4EIq6Sv0WdyeN0mp5\n=Q33q\n-----END PGP SIGNATURE-----",
        "payload": "tree 91f576a5b0b9d04bbef32c867a0a3452e296f2a1\nparent a56cbadab1c69a81e8ad0f3678e6715040447d88\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1472577102 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1480675685 +0100\n\nGlobals: Cleanly remove ::minRelayTxFee\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daabe730db7558d3e5fe102065c6cd8847cfe59b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/daabe730db7558d3e5fe102065c6cd8847cfe59b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/daabe730db7558d3e5fe102065c6cd8847cfe59b/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a56cbadab1c69a81e8ad0f3678e6715040447d88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a56cbadab1c69a81e8ad0f3678e6715040447d88"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 0,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b78c402ba010cd1b8cb7a446202aff6f68aa22f3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daabe730db7558d3e5fe102065c6cd8847cfe59b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daabe730db7558d3e5fe102065c6cd8847cfe59b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=daabe730db7558d3e5fe102065c6cd8847cfe59b",
        "patch": "@@ -82,9 +82,6 @@ size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n-\n-\n-CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n \n std::unique_ptr<CPolicy> globalPolicy;"
      },
      {
        "sha": "da1b4ab2b4b921ae428cbdb6e8ccbe52fc8b4f60",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daabe730db7558d3e5fe102065c6cd8847cfe59b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daabe730db7558d3e5fe102065c6cd8847cfe59b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=daabe730db7558d3e5fe102065c6cd8847cfe59b",
        "patch": "@@ -175,8 +175,6 @@ extern bool fRequireStandard;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;\n-/** A fee rate smaller than this is considered zero fee (for relaying, mining and transaction creation) */\n-extern CFeeRate minRelayTxFee;\n /** Absolute maximum transaction fee (in satoshis) used by wallet and mempool (rejects high fee in sendrawtransaction) */\n extern CAmount maxTxFee;\n /** If the tip is older than this (in seconds), the node is considered to be in initial block download. */"
      },
      {
        "sha": "debf77ff1a71d099a4c5b9949f60cfed223913e4",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/daabe730db7558d3e5fe102065c6cd8847cfe59b/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/daabe730db7558d3e5fe102065c6cd8847cfe59b/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=daabe730db7558d3e5fe102065c6cd8847cfe59b",
        "patch": "@@ -279,7 +279,6 @@ void CDefaultPolicy::InitFromArgs(const std::map<std::string, std::string>& mapA\n         minRelayFee = CFeeRate(nAmountFee);\n     else\n         throw std::runtime_error(strprintf(_(\"Invalid amount for %s=<amount>: %d\"), \"-minrelaytxfee\", nAmountFee));\n-    minRelayTxFee = minRelayFee; // TODO unify global minRelayTxFee\n }\n \n /** Factory and init help */"
      }
    ]
  }
]