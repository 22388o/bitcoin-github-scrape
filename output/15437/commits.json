[
  {
    "sha": "fa25f43ac5692082dba3f90456c501eb08f1b75c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI1ZjQzYWM1NjkyMDgyZGJhM2Y5MDQ1NmM1MDFlYjA4ZjFiNzVj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-09-10T17:59:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-10-02T14:39:14Z"
      },
      "message": "p2p: Remove BIP61 reject messages",
      "tree": {
        "sha": "dfd75d76811bfa032b7d511eb96ebbf99124bf5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfd75d76811bfa032b7d511eb96ebbf99124bf5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa25f43ac5692082dba3f90456c501eb08f1b75c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiWagwAtYIGmCurKyeo0nVzDLvaYniBe96BppmMxYUsa9YoR89M0qWv9IvRHiqA\nxGbdazcf0xW9Jvi8hJY3inMGCaiabzASOrtdoUBDQWZFTcRSY/99Vkk92AL0CWgF\nsIGPHrvMyP3NrelxP+mq3QZPstZEZn2rumtFFWNlm6nQI/GRgzwgOJXIBSiuoLVV\nWHK1NjjhsI9ZFbaqPF2RanJjd7yM9oRRGhKN7RKIOBLseyYDRFbpGb8DkBJ6g0eI\ncdbcDR0FHnyNepuwcUcU4O1C2tHZ1M0I3pV8HjodVoJjRHqh7Kr2t1ATlhRw5syj\nbrdnDWOMc346OjGsPQ13wJ5T/fHPY+HkNUAlQWFdgZV5F3MjgvzH/fNnHoIuOjOf\nITSYDheUG23104qkCPS+KSldPQQ/ymGDI3scszex3wKhVgvM0Nho06bfBHpnvVRe\nCibFVg7st43SXJK17djxzSnAMG3zqGhpy+K0TTiBDFJbv6sedezRO3MEplcoSepV\nOfMObghl\n=JvSu\n-----END PGP SIGNATURE-----",
        "payload": "tree dfd75d76811bfa032b7d511eb96ebbf99124bf5b\nparent ddc4e3c2d6857336a38cee49c47bce3ca49ab224\nauthor MarcoFalke <falke.marco@gmail.com> 1536602360 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1570027154 -0400\n\np2p: Remove BIP61 reject messages\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa25f43ac5692082dba3f90456c501eb08f1b75c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa25f43ac5692082dba3f90456c501eb08f1b75c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa25f43ac5692082dba3f90456c501eb08f1b75c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddc4e3c2d6857336a38cee49c47bce3ca49ab224",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddc4e3c2d6857336a38cee49c47bce3ca49ab224",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddc4e3c2d6857336a38cee49c47bce3ca49ab224"
      }
    ],
    "stats": {
      "total": 209,
      "additions": 57,
      "deletions": 152
    },
    "files": [
      {
        "sha": "570244aeaeacaf26096541792110aeed3269e34f",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -15,7 +15,7 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.19.0**):\n * [`BIP 35`](https://github.com/bitcoin/bips/blob/master/bip-0035.mediawiki): The 'mempool' protocol message (and the protocol version bump to 60002) has been implemented since **v0.7.0** ([PR #1641](https://github.com/bitcoin/bitcoin/pull/1641)). As of **v0.13.0**, this is only available for `NODE_BLOOM` (BIP 111) peers.\n * [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial Merkle trees for blocks, and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)). Disabled by default since **v0.19.0**, can be enabled by the `-peerbloomfilters` option.\n * [`BIP 42`](https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki): The bug that would have caused the subsidy schedule to resume after block 13440000 was fixed in **v0.9.2** ([PR #3842](https://github.com/bitcoin/bitcoin/pull/3842)).\n-* [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)). Starting **v0.17.0**, whether to send reject messages can be configured with the `-enablebip61` option, and support is deprecated as of **v0.18.0**.\n+* [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)). Starting **v0.17.0**, whether to send reject messages can be configured with the `-enablebip61` option, and support is deprecated (disabled by default) as of **v0.18.0**. Support was removed in **v0.20.0** ([PR #15437](https://github.com/bitcoin/bitcoin/pull/15437)).\n * [`BIP 65`](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki): The CHECKLOCKTIMEVERIFY softfork was merged in **v0.12.0** ([PR #6351](https://github.com/bitcoin/bitcoin/pull/6351)), and backported to **v0.11.2** and **v0.10.4**. Mempool-only CLTV was added in [PR #6124](https://github.com/bitcoin/bitcoin/pull/6124).\n * [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n * [`BIP 68`](https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki): Sequence locks have been implemented as of **v0.12.1**  ([PR #7184](https://github.com/bitcoin/bitcoin/pull/7184)), and have been activated since *block 419328*."
      },
      {
        "sha": "1957fb736e5a9ed58669dc27a9d908b950f088ec",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -179,10 +179,6 @@ Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (def\n Query for peer addresses via DNS lookup, if low on addresses (default: 1\n unless \\fB\\-connect\\fR used)\n .HP\n-\\fB\\-enablebip61\\fR\n-.IP\n-Send reject messages per BIP61 (default: 0)\n-.HP\n \\fB\\-externalip=\\fR<ip>\n .IP\n Specify your own public address"
      },
      {
        "sha": "b0aff99ca2a6b7d6d4c3ee6b8c2488b59ec5ac99",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -179,10 +179,6 @@ Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (def\n Query for peer addresses via DNS lookup, if low on addresses (default: 1\n unless \\fB\\-connect\\fR used)\n .HP\n-\\fB\\-enablebip61\\fR\n-.IP\n-Send reject messages per BIP61 (default: 0)\n-.HP\n \\fB\\-externalip=\\fR<ip>\n .IP\n Specify your own public address"
      },
      {
        "sha": "031e90ccd2459f62cfc9a4440bb8307339b0d7bc",
        "filename": "doc/release-notes-15437.md",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/doc/release-notes-15437.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/doc/release-notes-15437.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15437.md?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -0,0 +1,34 @@\n+P2P and network changes\n+-----------------------\n+\n+#### Removal of reject network messages from Bitcoin Core (BIP61)\n+\n+The command line option to enable BIP61 (`-enablebip61`) has been removed.\n+\n+This feature has been disabled by default since Bitcoin Core version 0.18.0.\n+Nodes on the network can not generally be trusted to send valid (\"reject\")\n+messages, so this should only ever be used when connected to a trusted node.\n+Please use the recommended alternatives if you rely on this deprecated feature:\n+\n+* Testing or debugging of implementations of the Bitcoin P2P network protocol\n+  should be done by inspecting the log messages that are produced by a recent\n+  version of Bitcoin Core. Bitcoin Core logs debug messages\n+  (`-debug=<category>`) to a stream (`-printtoconsole`) or to a file\n+  (`-debuglogfile=<debug.log>`).\n+\n+* Testing the validity of a block can be achieved by specific RPCs:\n+  - `submitblock`\n+  - `getblocktemplate` with `'mode'` set to `'proposal'` for blocks with\n+    potentially invalid POW\n+\n+* Testing the validity of a transaction can be achieved by specific RPCs:\n+  - `sendrawtransaction`\n+  - `testmempoolaccept`\n+\n+* Wallets should not use the absence of \"reject\" messages to indicate a\n+  transaction has propagated the network, nor should wallets use \"reject\"\n+  messages to set transaction fees. Wallets should rather use fee estimation\n+  to determine transaction fees and set replace-by-fee if desired. Thus, they\n+  could wait until the transaction has confirmed (taking into account the fee\n+  target they set (compare the RPC `estimatesmartfee`)) or listen for the\n+  transaction announcement by other network peers to check for propagation."
      },
      {
        "sha": "035725b0908ebddae882583d489bdd8ad82c4857",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -407,7 +407,6 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-discover\", \"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-dns\", strprintf(\"Allow DNS lookups for -addnode, -seednode and -connect (default: %u)\", DEFAULT_NAME_LOOKUP), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-dnsseed\", \"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n-    gArgs.AddArg(\"-enablebip61\", strprintf(\"Send reject messages per BIP61 (default: %u)\", DEFAULT_ENABLE_BIP61), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-externalip=<ip>\", \"Specify your own public address\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-forcednsseed\", strprintf(\"Always query for peer addresses via DNS lookup (default: %u)\", DEFAULT_FORCEDNSSEED), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-listen\", \"Accept connections from outside (default: 1 if no -proxy or -connect)\", ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n@@ -1320,7 +1319,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     assert(!g_connman);\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n \n-    peerLogic.reset(new PeerLogicValidation(g_connman.get(), g_banman.get(), scheduler, gArgs.GetBoolArg(\"-enablebip61\", DEFAULT_ENABLE_BIP61)));\n+    peerLogic.reset(new PeerLogicValidation(g_connman.get(), g_banman.get(), scheduler));\n     RegisterValidationInterface(peerLogic.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size"
      },
      {
        "sha": "f029c9de205a717906211ed0ce0bc8b21a080b81",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 69,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -193,12 +193,6 @@ namespace {\n } // namespace\n \n namespace {\n-struct CBlockReject {\n-    unsigned char chRejectCode;\n-    std::string strRejectReason;\n-    uint256 hashBlock;\n-};\n-\n /**\n  * Maintain validation-specific state about nodes, protected by cs_main, instead\n  * by CNode's own locks. This simplifies asynchronous operation, where\n@@ -216,8 +210,6 @@ struct CNodeState {\n     bool fShouldBan;\n     //! String name of this peer (debugging/logging purposes).\n     const std::string name;\n-    //! List of asynchronously-determined block rejections to notify this peer about.\n-    std::vector<CBlockReject> rejects;\n     //! The best known block we know this peer has announced.\n     const CBlockIndex *pindexBestKnownBlock;\n     //! The hash of the last unknown block this peer has announced.\n@@ -1093,8 +1085,9 @@ static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Para\n         (GetBlockProofEquivalentTime(*pindexBestHeader, *pindex, *pindexBestHeader, consensusParams) < STALE_RELAY_AGE_LIMIT);\n }\n \n-PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CScheduler &scheduler, bool enable_bip61)\n-    : connman(connmanIn), m_banman(banman), m_stale_tip_check_time(0), m_enable_bip61(enable_bip61) {\n+PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, BanMan* banman, CScheduler& scheduler)\n+    : connman(connmanIn), m_banman(banman), m_stale_tip_check_time(0)\n+{\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n \n@@ -1244,8 +1237,6 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationSta\n     if (state.IsInvalid()) {\n         // Don't send reject message with code 0 or an internal reject code.\n         if (it != mapBlockSource.end() && State(it->second.first) && state.GetRejectCode() > 0 && state.GetRejectCode() < REJECT_INTERNAL) {\n-            CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), hash};\n-            State(it->second.first)->rejects.push_back(reject);\n             MaybePunishNode(/*nodeid=*/ it->second.first, state, /*via_compact_block=*/ !it->second.second);\n         }\n     }\n@@ -1859,7 +1850,7 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n-bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool enable_bip61)\n+bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -1883,38 +1874,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         }\n     }\n \n-    if (strCommand == NetMsgType::REJECT)\n-    {\n-        if (LogAcceptCategory(BCLog::NET)) {\n-            try {\n-                std::string strMsg; unsigned char ccode; std::string strReason;\n-                vRecv >> LIMITED_STRING(strMsg, CMessageHeader::COMMAND_SIZE) >> ccode >> LIMITED_STRING(strReason, MAX_REJECT_MESSAGE_LENGTH);\n-\n-                std::ostringstream ss;\n-                ss << strMsg << \" code \" << itostr(ccode) << \": \" << strReason;\n-\n-                if (strMsg == NetMsgType::BLOCK || strMsg == NetMsgType::TX)\n-                {\n-                    uint256 hash;\n-                    vRecv >> hash;\n-                    ss << \": hash \" << hash.ToString();\n-                }\n-                LogPrint(BCLog::NET, \"Reject %s\\n\", SanitizeString(ss.str()));\n-            } catch (const std::ios_base::failure&) {\n-                // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n-                LogPrint(BCLog::NET, \"Unparseable reject message received\\n\");\n-            }\n-        }\n-        return true;\n-    }\n-\n     if (strCommand == NetMsgType::VERSION) {\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n-            if (enable_bip61) {\n-                connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, std::string(\"Duplicate version message\")));\n-            }\n             LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 1);\n             return false;\n@@ -1942,21 +1905,13 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (!pfrom->fInbound && !pfrom->fFeeler && !pfrom->m_manual_connection && !HasAllDesirableServiceFlags(nServices))\n         {\n             LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->GetId(), nServices, GetDesirableServiceFlags(nServices));\n-            if (enable_bip61) {\n-                connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n-                                   strprintf(\"Expected to offer services %08x\", GetDesirableServiceFlags(nServices))));\n-            }\n             pfrom->fDisconnect = true;\n             return false;\n         }\n \n         if (nVersion < MIN_PEER_PROTO_VERSION) {\n             // disconnect from peers older than this proto version\n             LogPrint(BCLog::NET, \"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->GetId(), nVersion);\n-            if (enable_bip61) {\n-                connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n-                                   strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION)));\n-            }\n             pfrom->fDisconnect = true;\n             return false;\n         }\n@@ -2628,10 +2583,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LogPrint(BCLog::MEMPOOLREJ, \"%s from peer=%d was not accepted: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->GetId(),\n                 FormatStateMessage(state));\n-            if (enable_bip61 && state.GetRejectCode() > 0 && state.GetRejectCode() < REJECT_INTERNAL) { // Never send AcceptToMemoryPool's internal codes over P2P\n-                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n-                                   state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash));\n-            }\n             MaybePunishNode(pfrom->GetId(), state, /*via_compact_block*/ false);\n         }\n         return true;\n@@ -2811,7 +2762,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         } // cs_main\n \n         if (fProcessBLOCKTXN)\n-            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman, interruptMsgProc, enable_bip61);\n+            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n \n         if (fRevertToHeaderProcessing) {\n             // Headers received from HB compact block peers are permitted to be\n@@ -3238,18 +3189,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n-bool PeerLogicValidation::SendRejectsAndCheckIfBanned(CNode* pnode, bool enable_bip61) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+bool PeerLogicValidation::CheckIfBanned(CNode* pnode)\n {\n     AssertLockHeld(cs_main);\n     CNodeState &state = *State(pnode->GetId());\n \n-    if (enable_bip61) {\n-        for (const CBlockReject& reject : state.rejects) {\n-            connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, std::string(NetMsgType::BLOCK), reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n-        }\n-    }\n-    state.rejects.clear();\n-\n     if (state.fShouldBan) {\n         state.fShouldBan = false;\n         if (pnode->HasPermission(PF_NOBAN))\n@@ -3358,17 +3302,14 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     bool fRet = false;\n     try\n     {\n-        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, chainparams, connman, interruptMsgProc, m_enable_bip61);\n+        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, chainparams, connman, interruptMsgProc);\n         if (interruptMsgProc)\n             return false;\n         if (!pfrom->vRecvGetData.empty())\n             fMoreWork = true;\n     }\n     catch (const std::ios_base::failure& e)\n     {\n-        if (m_enable_bip61) {\n-            connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n-        }\n         if (strstr(e.what(), \"end of data\")) {\n             // Allow exceptions from under-length message on vRecv\n             LogPrint(BCLog::NET, \"%s(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", __func__, SanitizeString(strCommand), nMessageSize, e.what());\n@@ -3399,7 +3340,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n \n     LOCK(cs_main);\n-    SendRejectsAndCheckIfBanned(pfrom, m_enable_bip61);\n+    CheckIfBanned(pfrom);\n \n     return fMoreWork;\n }\n@@ -3598,11 +3539,12 @@ bool PeerLogicValidation::SendMessages(CNode* pto)\n             }\n         }\n \n-        TRY_LOCK(cs_main, lockMain); // Acquire cs_main for IsInitialBlockDownload() and CNodeState()\n+        TRY_LOCK(cs_main, lockMain);\n         if (!lockMain)\n             return true;\n \n-        if (SendRejectsAndCheckIfBanned(pto, m_enable_bip61)) return true;\n+        if (CheckIfBanned(pto)) return true;\n+\n         CNodeState &state = *State(pto->GetId());\n \n         // Address refresh broadcast"
      },
      {
        "sha": "e8bc3580dd028936f662520b1a17b18c6b85bcb3",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -17,18 +17,17 @@ extern CCriticalSection cs_main;\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n /** Default number of orphan+recently-replaced txn to keep around for block reconstruction */\n static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n-/** Default for BIP61 (sending reject messages) */\n-static constexpr bool DEFAULT_ENABLE_BIP61{false};\n static const bool DEFAULT_PEERBLOOMFILTERS = false;\n \n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n private:\n     CConnman* const connman;\n     BanMan* const m_banman;\n \n-    bool SendRejectsAndCheckIfBanned(CNode* pnode, bool enable_bip61) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    bool CheckIfBanned(CNode* pnode) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+\n public:\n-    PeerLogicValidation(CConnman* connman, BanMan* banman, CScheduler &scheduler, bool enable_bip61);\n+    PeerLogicValidation(CConnman* connman, BanMan* banman, CScheduler& scheduler);\n \n     /**\n      * Overridden from CValidationInterface.\n@@ -75,9 +74,6 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n \n private:\n     int64_t m_stale_tip_check_time; //!< Next time to check for stale tip\n-\n-    /** Enable BIP61 (sending reject messages) */\n-    const bool m_enable_bip61;\n };\n \n struct CNodeStateStats {"
      },
      {
        "sha": "e49e5523aca0019dc07dd6e942f688945f7e0169",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -34,7 +34,6 @@ const char *NOTFOUND=\"notfound\";\n const char *FILTERLOAD=\"filterload\";\n const char *FILTERADD=\"filteradd\";\n const char *FILTERCLEAR=\"filterclear\";\n-const char *REJECT=\"reject\";\n const char *SENDHEADERS=\"sendheaders\";\n const char *FEEFILTER=\"feefilter\";\n const char *SENDCMPCT=\"sendcmpct\";\n@@ -66,7 +65,6 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::FILTERLOAD,\n     NetMsgType::FILTERADD,\n     NetMsgType::FILTERCLEAR,\n-    NetMsgType::REJECT,\n     NetMsgType::SENDHEADERS,\n     NetMsgType::FEEFILTER,\n     NetMsgType::SENDCMPCT,"
      },
      {
        "sha": "e6b25ffa2500072054b58b596f0ffc3153c38eff",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -192,13 +192,6 @@ extern const char *FILTERADD;\n  * @see https://bitcoin.org/en/developer-reference#filterclear\n  */\n extern const char *FILTERCLEAR;\n-/**\n- * The reject message informs the receiving node that one of its previous\n- * messages has been rejected.\n- * @since protocol version 70002 as described by BIP61.\n- * @see https://bitcoin.org/en/developer-reference#reject\n- */\n-extern const char *REJECT;\n /**\n  * Indicates that a node prefers to receive new block announcements via a\n  * \"headers\" message rather than an \"inv\"."
      },
      {
        "sha": "1928324b27b759d280729eec5d270f50a5df23ad",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -78,7 +78,7 @@ BOOST_FIXTURE_TEST_SUITE(denialofservice_tests, TestingSetup)\n BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n {\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, scheduler, false);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, scheduler);\n \n     // Mock an outbound peer\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -148,7 +148,7 @@ static void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidat\n BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n {\n     auto connman = MakeUnique<CConnmanTest>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, scheduler, false);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), nullptr, scheduler);\n \n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     constexpr int max_outbound_full_relay = 8;\n@@ -221,7 +221,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), scheduler, false);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), scheduler);\n \n     banman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n@@ -276,7 +276,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n {\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), scheduler, false);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), scheduler);\n \n     banman->ClearBanned();\n     gArgs.ForceSetArg(\"-banscore\", \"111\"); // because 11 is my favorite number\n@@ -323,7 +323,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n     auto banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     auto connman = MakeUnique<CConnman>(0x1337, 0x1337);\n-    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), scheduler, false);\n+    auto peerLogic = MakeUnique<PeerLogicValidation>(connman.get(), banman.get(), scheduler);\n \n     banman->ClearBanned();\n     int64_t nStartTime = GetTime();"
      },
      {
        "sha": "fbbe3757e0db8709374030cbc55adf27d76e0671",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -102,8 +102,6 @@ static const unsigned int BLOCK_DOWNLOAD_WINDOW = 1024;\n static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n /** Time to wait (in seconds) between flushing chainstate to disk. */\n static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n-/** Maximum length of reject messages. */\n-static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n /** Block download timeout base, expressed in millionths of the block interval (i.e. 10 min) */\n static const int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 1000000;\n /** Additional block download timeout per parallel downloading peer (i.e. 5 min) */"
      },
      {
        "sha": "13f1c9216a55f9f9f2ac7342518ff69e20d5b057",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -22,9 +22,6 @@\n \n CLTV_HEIGHT = 1351\n \n-# Reject codes that we might receive in this test\n-REJECT_INVALID = 16\n-REJECT_NONSTANDARD = 64\n \n def cltv_invalidate(tx):\n     '''Modify the signature in vin 0 of the tx to fail CLTV"
      },
      {
        "sha": "92f6eea5b20c30e2ae2b39288401c8aa5085ddac",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 2,
        "deletions": 12,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -9,19 +9,15 @@\n \n from test_framework.blocktools import create_coinbase, create_block, create_transaction\n from test_framework.messages import msg_block\n-from test_framework.mininode import mininode_lock, P2PInterface\n+from test_framework.mininode import P2PInterface\n from test_framework.script import CScript\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    wait_until,\n )\n \n DERSIG_HEIGHT = 1251\n \n-# Reject codes that we might receive in this test\n-REJECT_INVALID = 16\n-REJECT_NONSTANDARD = 64\n \n # A canonical signature consists of:\n # <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>\n@@ -44,7 +40,7 @@ def unDERify(tx):\n class BIP66Test(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n-        self.extra_args = [['-whitelist=127.0.0.1', '-par=1', '-enablebip61']]  # Use only one script thread to get the exact reject reason for testing\n+        self.extra_args = [['-whitelist=127.0.0.1', '-par=1']]  # Use only one script thread to get the exact log msg for testing\n         self.setup_clean_chain = True\n         self.rpc_timeout = 120\n \n@@ -129,12 +125,6 @@ def run_test(self):\n             assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n             self.nodes[0].p2p.sync_with_ping()\n \n-        wait_until(lambda: \"reject\" in self.nodes[0].p2p.last_message.keys(), lock=mininode_lock)\n-        with mininode_lock:\n-            assert self.nodes[0].p2p.last_message[\"reject\"].code in [REJECT_INVALID, REJECT_NONSTANDARD]\n-            assert_equal(self.nodes[0].p2p.last_message[\"reject\"].data, block.sha256)\n-            assert b'Non-canonical DER signature' in self.nodes[0].p2p.last_message[\"reject\"].reason\n-\n         self.log.info(\"Test that a version 3 block with a DERSIG-compliant transaction is accepted\")\n         block.vtx[1] = create_transaction(self.nodes[0], self.coinbase_txids[1], self.nodeaddress, amount=1.0)\n         block.hashMerkleRoot = block.calc_merkle_root()"
      },
      {
        "sha": "25520a2151f22a9d79c0ee4dd68d5b20cdb85d0f",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -1317,38 +1317,6 @@ def __repr__(self):\n         return \"msg_headers(headers=%s)\" % repr(self.headers)\n \n \n-class msg_reject:\n-    __slots__ = (\"code\", \"data\", \"message\", \"reason\")\n-    command = b\"reject\"\n-    REJECT_MALFORMED = 1\n-\n-    def __init__(self):\n-        self.message = b\"\"\n-        self.code = 0\n-        self.reason = b\"\"\n-        self.data = 0\n-\n-    def deserialize(self, f):\n-        self.message = deser_string(f)\n-        self.code = struct.unpack(\"<B\", f.read(1))[0]\n-        self.reason = deser_string(f)\n-        if (self.code != self.REJECT_MALFORMED and\n-                (self.message == b\"block\" or self.message == b\"tx\")):\n-            self.data = deser_uint256(f)\n-\n-    def serialize(self):\n-        r = ser_string(self.message)\n-        r += struct.pack(\"<B\", self.code)\n-        r += ser_string(self.reason)\n-        if (self.code != self.REJECT_MALFORMED and\n-                (self.message == b\"block\" or self.message == b\"tx\")):\n-            r += ser_uint256(self.data)\n-        return r\n-\n-    def __repr__(self):\n-        return \"msg_reject: %s %d %s [%064x]\" \\\n-            % (self.message, self.code, self.reason, self.data)\n-\n \n class msg_feefilter:\n     __slots__ = (\"feerate\",)"
      },
      {
        "sha": "f95c158a682edea980155956ef8f7fa221ba4590",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa25f43ac5692082dba3f90456c501eb08f1b75c/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa25f43ac5692082dba3f90456c501eb08f1b75c/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=fa25f43ac5692082dba3f90456c501eb08f1b75c",
        "patch": "@@ -41,7 +41,6 @@\n     msg_notfound,\n     msg_ping,\n     msg_pong,\n-    msg_reject,\n     msg_sendcmpct,\n     msg_sendheaders,\n     msg_tx,\n@@ -74,7 +73,6 @@\n     b\"notfound\": msg_notfound,\n     b\"ping\": msg_ping,\n     b\"pong\": msg_pong,\n-    b\"reject\": msg_reject,\n     b\"sendcmpct\": msg_sendcmpct,\n     b\"sendheaders\": msg_sendheaders,\n     b\"tx\": msg_tx,"
      }
    ]
  }
]