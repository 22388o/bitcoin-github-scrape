[
  {
    "sha": "ae9df4ef937ef77405f6edd7c13615df7b63446f",
    "node_id": "C_kwDOABII59oAKGFlOWRmNGVmOTM3ZWY3NzQwNWY2ZWRkN2MxMzYxNWRmN2I2MzQ0NmY",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-15T15:13:56Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-17T14:44:09Z"
      },
      "message": "test: refactor: take use of `create_block` version parameter (or use default)",
      "tree": {
        "sha": "7c29ea4c0b6bbb0f1a856ea4ef9f71cbdf58811e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c29ea4c0b6bbb0f1a856ea4ef9f71cbdf58811e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae9df4ef937ef77405f6edd7c13615df7b63446f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae9df4ef937ef77405f6edd7c13615df7b63446f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae9df4ef937ef77405f6edd7c13615df7b63446f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae9df4ef937ef77405f6edd7c13615df7b63446f/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d94dc69ee454144f4db12d163b15717cc6cad383",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d94dc69ee454144f4db12d163b15717cc6cad383",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d94dc69ee454144f4db12d163b15717cc6cad383"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 4,
      "deletions": 12
    },
    "files": [
      {
        "sha": "da9655ced686af746f947276a7d80fadc136ed47",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9df4ef937ef77405f6edd7c13615df7b63446f/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9df4ef937ef77405f6edd7c13615df7b63446f/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=ae9df4ef937ef77405f6edd7c13615df7b63446f",
        "patch": "@@ -135,7 +135,6 @@ def run_test(self):\n         # Bury the assumed valid block 2100 deep\n         for _ in range(2100):\n             block = create_block(self.tip, create_coinbase(height), self.block_time)\n-            block.nVersion = 4\n             block.solve()\n             self.blocks.append(block)\n             self.tip = block.sha256"
      },
      {
        "sha": "401304325c2ed6cbd701a141e2bf31cccd26635f",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9df4ef937ef77405f6edd7c13615df7b63446f/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9df4ef937ef77405f6edd7c13615df7b63446f/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=ae9df4ef937ef77405f6edd7c13615df7b63446f",
        "patch": "@@ -120,8 +120,7 @@ def run_test(self):\n \n         tip = self.nodes[0].getbestblockhash()\n         block_time = self.nodes[0].getblockheader(tip)['mediantime'] + 1\n-        block = create_block(int(tip, 16), create_coinbase(CLTV_HEIGHT - 1), block_time)\n-        block.nVersion = 3\n+        block = create_block(int(tip, 16), create_coinbase(CLTV_HEIGHT - 1), block_time, version=3)\n         block.vtx.extend(invalid_cltv_txs)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.solve()\n@@ -134,8 +133,7 @@ def run_test(self):\n         self.log.info(\"Test that blocks must now be at least version 4\")\n         tip = block.sha256\n         block_time += 1\n-        block = create_block(tip, create_coinbase(CLTV_HEIGHT), block_time)\n-        block.nVersion = 3\n+        block = create_block(tip, create_coinbase(CLTV_HEIGHT), block_time, version=3)\n         block.solve()\n \n         with self.nodes[0].assert_debug_log(expected_msgs=[f'{block.hash}, bad-version(0x00000003)']):"
      },
      {
        "sha": "2fb0d47d19dbe0b7fc28f0d0a0d605cdea45c4e7",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9df4ef937ef77405f6edd7c13615df7b63446f/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9df4ef937ef77405f6edd7c13615df7b63446f/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=ae9df4ef937ef77405f6edd7c13615df7b63446f",
        "patch": "@@ -174,7 +174,6 @@ def generate_blocks(self, number):\n \n     def create_test_block(self, txs):\n         block = create_block(self.tip, create_coinbase(self.tipheight + 1), self.last_block_time + 600)\n-        block.nVersion = 4\n         block.vtx.extend(txs)\n         block.hashMerkleRoot = block.calc_merkle_root()\n         block.solve()"
      },
      {
        "sha": "af92dc85750696a5ae7134c05552fbd8d736a1ee",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9df4ef937ef77405f6edd7c13615df7b63446f/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9df4ef937ef77405f6edd7c13615df7b63446f/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=ae9df4ef937ef77405f6edd7c13615df7b63446f",
        "patch": "@@ -100,8 +100,7 @@ def run_test(self):\n         self.log.info(\"Test that blocks must now be at least version 3\")\n         tip = block.sha256\n         block_time += 1\n-        block = create_block(tip, create_coinbase(DERSIG_HEIGHT), block_time)\n-        block.nVersion = 2\n+        block = create_block(tip, create_coinbase(DERSIG_HEIGHT), block_time, version=2)\n         block.solve()\n \n         with self.nodes[0].assert_debug_log(expected_msgs=[f'{block.hash}, bad-version(0x00000002)']):"
      },
      {
        "sha": "ed0fe25601ccc7a4404d3846f820816004281a0b",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9df4ef937ef77405f6edd7c13615df7b63446f/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9df4ef937ef77405f6edd7c13615df7b63446f/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=ae9df4ef937ef77405f6edd7c13615df7b63446f",
        "patch": "@@ -1267,7 +1267,6 @@ def block_submit(self, node, txs, msg, err_msg, cb_pubkey=None, fees=0, sigops_w\n         extra_output_script = CScript([OP_CHECKSIG]*((MAX_BLOCK_SIGOPS_WEIGHT - sigops_weight) // WITNESS_SCALE_FACTOR))\n \n         block = create_block(self.tip, create_coinbase(self.lastblockheight + 1, pubkey=cb_pubkey, extra_output_script=extra_output_script, fees=fees), self.lastblocktime + 1)\n-        block.nVersion = 4\n         for tx in txs:\n             tx.rehash()\n             block.vtx.append(tx)"
      },
      {
        "sha": "e83dd7f446085af7fddec63a97010489275b19f7",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9df4ef937ef77405f6edd7c13615df7b63446f/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9df4ef937ef77405f6edd7c13615df7b63446f/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=ae9df4ef937ef77405f6edd7c13615df7b63446f",
        "patch": "@@ -48,8 +48,7 @@ def send_blocks_with_version(self, peer, numblocks, version):\n         tip = int(tip, 16)\n \n         for _ in range(numblocks):\n-            block = create_block(tip, create_coinbase(height + 1), block_time)\n-            block.nVersion = version\n+            block = create_block(tip, create_coinbase(height + 1), block_time, version=version)\n             block.solve()\n             peer.send_message(msg_block(block))\n             block_time += 1"
      },
      {
        "sha": "f377fbaaa6e0a41f0552b1553f0857edf4b405e5",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae9df4ef937ef77405f6edd7c13615df7b63446f/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae9df4ef937ef77405f6edd7c13615df7b63446f/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=ae9df4ef937ef77405f6edd7c13615df7b63446f",
        "patch": "@@ -232,7 +232,6 @@ def build_next_block(self):\n         height = self.nodes[0].getblockcount() + 1\n         block_time = self.nodes[0].getblockheader(tip)[\"mediantime\"] + 1\n         block = create_block(int(tip, 16), create_coinbase(height), block_time)\n-        block.nVersion = 4\n         block.rehash()\n         return block\n "
      }
    ]
  },
  {
    "sha": "df5d783aef3e5af2d1294fc8ff9470a5dc878325",
    "node_id": "C_kwDOABII59oAKGRmNWQ3ODNhZWYzZTVhZjJkMTI5NGZjOGZmOTQ3MGE1ZGM4NzgzMjU",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-15T17:29:13Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-17T14:45:30Z"
      },
      "message": "test: refactor: take use of `create_block` txlist parameter\n\nPassing a list of transactions `txlist` to `create_block` appends\nthem to the block, hence we don't need to do that manually anymore.\nThe merkle root calculation can also be removed, since this is done\nin the end of the helper.",
      "tree": {
        "sha": "0004a7e5e021e9bc4d989b9c2e4cdc552404fb48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0004a7e5e021e9bc4d989b9c2e4cdc552404fb48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df5d783aef3e5af2d1294fc8ff9470a5dc878325",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df5d783aef3e5af2d1294fc8ff9470a5dc878325",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df5d783aef3e5af2d1294fc8ff9470a5dc878325",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df5d783aef3e5af2d1294fc8ff9470a5dc878325/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae9df4ef937ef77405f6edd7c13615df7b63446f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae9df4ef937ef77405f6edd7c13615df7b63446f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae9df4ef937ef77405f6edd7c13615df7b63446f"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 19,
      "deletions": 56
    },
    "files": [
      {
        "sha": "67cacaa9ce445aff79600ce5e902dc3b1e0dabad",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=df5d783aef3e5af2d1294fc8ff9470a5dc878325",
        "patch": "@@ -122,10 +122,8 @@ def run_test(self):\n         tx.vout.append(CTxOut(49 * 100000000, CScript([OP_TRUE])))\n         tx.calc_sha256()\n \n-        block102 = create_block(self.tip, create_coinbase(height), self.block_time)\n+        block102 = create_block(self.tip, create_coinbase(height), self.block_time, txlist=[tx])\n         self.block_time += 1\n-        block102.vtx.extend([tx])\n-        block102.hashMerkleRoot = block102.calc_merkle_root()\n         block102.solve()\n         self.blocks.append(block102)\n         self.tip = block102.sha256"
      },
      {
        "sha": "05d274a9fe410c899f5f05d623d1c48d6fa762a3",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=df5d783aef3e5af2d1294fc8ff9470a5dc878325",
        "patch": "@@ -388,9 +388,7 @@ def test_bip68_not_consensus(self):\n         assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, tx3.serialize().hex())\n \n         # make a block that violates bip68; ensure that the tip updates\n-        block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS))\n-        block.vtx.extend([tx1, tx2, tx3])\n-        block.hashMerkleRoot = block.calc_merkle_root()\n+        block = create_block(tmpl=self.nodes[0].getblocktemplate(NORMAL_GBT_REQUEST_PARAMS), txlist=[tx1, tx2, tx3])\n         add_witness_commitment(block)\n         block.solve()\n "
      },
      {
        "sha": "a3253763bd220aac8f95f50494359b08ea2af6ea",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=df5d783aef3e5af2d1294fc8ff9470a5dc878325",
        "patch": "@@ -1361,11 +1361,10 @@ def next_block(self, number, spend=None, additional_coinbase_value=0, script=CSc\n         else:\n             coinbase.vout[0].nValue += spend.vout[0].nValue - 1  # all but one satoshi to fees\n             coinbase.rehash()\n-            block = create_block(base_block_hash, coinbase, block_time, version=version)\n             tx = self.create_tx(spend, 0, 1, script)  # spend 1 satoshi\n             self.sign_tx(tx, spend)\n-            self.add_transactions_to_block(block, [tx])\n-            block.hashMerkleRoot = block.calc_merkle_root()\n+            tx.rehash()\n+            block = create_block(base_block_hash, coinbase, block_time, version=version, txlist=[tx])\n         # Block is created. Find a valid nonce.\n         block.solve()\n         self.tip = block"
      },
      {
        "sha": "eb90b2c598a1b80dda811b5e81e782679de2af25",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=df5d783aef3e5af2d1294fc8ff9470a5dc878325",
        "patch": "@@ -120,9 +120,7 @@ def run_test(self):\n \n         tip = self.nodes[0].getbestblockhash()\n         block_time = self.nodes[0].getblockheader(tip)['mediantime'] + 1\n-        block = create_block(int(tip, 16), create_coinbase(CLTV_HEIGHT - 1), block_time, version=3)\n-        block.vtx.extend(invalid_cltv_txs)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n+        block = create_block(int(tip, 16), create_coinbase(CLTV_HEIGHT - 1), block_time, version=3, txlist=invalid_cltv_txs)\n         block.solve()\n \n         self.test_cltv_info(is_active=False)  # Not active as of current tip and next block does not need to obey rules"
      },
      {
        "sha": "c200445e81803b4b5ef9f03cc67c7515f39d9942",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=df5d783aef3e5af2d1294fc8ff9470a5dc878325",
        "patch": "@@ -173,9 +173,7 @@ def generate_blocks(self, number):\n         return test_blocks\n \n     def create_test_block(self, txs):\n-        block = create_block(self.tip, create_coinbase(self.tipheight + 1), self.last_block_time + 600)\n-        block.vtx.extend(txs)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n+        block = create_block(self.tip, create_coinbase(self.tipheight + 1), self.last_block_time + 600, txlist=txs)\n         block.solve()\n         return block\n "
      },
      {
        "sha": "b7cb32c842133b54bf4ee0a8058a25799eccacdb",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=df5d783aef3e5af2d1294fc8ff9470a5dc878325",
        "patch": "@@ -85,9 +85,7 @@ def run_test(self):\n \n         tip = self.nodes[0].getbestblockhash()\n         block_time = self.nodes[0].getblockheader(tip)['mediantime'] + 1\n-        block = create_block(int(tip, 16), create_coinbase(DERSIG_HEIGHT - 1), block_time)\n-        block.vtx.append(spendtx)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n+        block = create_block(int(tip, 16), create_coinbase(DERSIG_HEIGHT - 1), block_time, txlist=[spendtx])\n         block.solve()\n \n         assert_equal(self.nodes[0].getblockcount(), DERSIG_HEIGHT - 2)"
      },
      {
        "sha": "de679fbf44474492b52671388e0d169081764e54",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=df5d783aef3e5af2d1294fc8ff9470a5dc878325",
        "patch": "@@ -1266,11 +1266,8 @@ def block_submit(self, node, txs, msg, err_msg, cb_pubkey=None, fees=0, sigops_w\n         # transactions.\n         extra_output_script = CScript([OP_CHECKSIG]*((MAX_BLOCK_SIGOPS_WEIGHT - sigops_weight) // WITNESS_SCALE_FACTOR))\n \n-        block = create_block(self.tip, create_coinbase(self.lastblockheight + 1, pubkey=cb_pubkey, extra_output_script=extra_output_script, fees=fees), self.lastblocktime + 1)\n-        for tx in txs:\n-            tx.rehash()\n-            block.vtx.append(tx)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n+        coinbase_tx = create_coinbase(self.lastblockheight + 1, pubkey=cb_pubkey, extra_output_script=extra_output_script, fees=fees)\n+        block = create_block(self.tip, coinbase_tx, self.lastblocktime + 1, txlist=txs)\n         witness and add_witness_commitment(block)\n         block.solve()\n         block_response = node.submitblock(block.serialize().hex())"
      },
      {
        "sha": "1ee12c0040b40fa87ac9bfd415196a8ab95f4469",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=df5d783aef3e5af2d1294fc8ff9470a5dc878325",
        "patch": "@@ -18,7 +18,6 @@\n from test_framework.messages import (\n     CTransaction,\n     hash256,\n-    tx_from_hex,\n )\n from test_framework.util import (\n     assert_equal,\n@@ -402,12 +401,8 @@ def test_sequence(self):\n             raw_tx = self.nodes[0].getrawtransaction(orig_txid)\n             bump_info = self.nodes[0].bumpfee(orig_txid)\n             # Mine the pre-bump tx\n-            block = create_block(int(self.nodes[0].getbestblockhash(), 16), create_coinbase(self.nodes[0].getblockcount()+1))\n-            tx = tx_from_hex(raw_tx)\n-            block.vtx.append(tx)\n-            for txid in more_tx:\n-                tx = tx_from_hex(self.nodes[0].getrawtransaction(txid))\n-                block.vtx.append(tx)\n+            txs_to_add = [raw_tx] + [self.nodes[0].getrawtransaction(txid) for txid in more_tx]\n+            block = create_block(int(self.nodes[0].getbestblockhash(), 16), create_coinbase(self.nodes[0].getblockcount()+1), txlist=txs_to_add)\n             add_witness_commitment(block)\n             block.solve()\n             assert_equal(self.nodes[0].submitblock(block.serialize().hex()), None)"
      },
      {
        "sha": "95980124847ff4247998ff53a0bc5e5b71c98ffa",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 5,
        "deletions": 18,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=df5d783aef3e5af2d1294fc8ff9470a5dc878325",
        "patch": "@@ -66,15 +66,11 @@ def run_test(self):\n         # For more information on merkle-root malleability see src/consensus/merkle.cpp.\n         self.log.info(\"Test merkle root malleability.\")\n \n-        block2 = create_block(tip, create_coinbase(height), block_time)\n-        block_time += 1\n-\n         # b'0x51' is OP_TRUE\n         tx1 = create_tx_with_script(block1.vtx[0], 0, script_sig=b'\\x51', amount=50 * COIN)\n         tx2 = create_tx_with_script(tx1, 0, script_sig=b'\\x51', amount=50 * COIN)\n-\n-        block2.vtx.extend([tx1, tx2])\n-        block2.hashMerkleRoot = block2.calc_merkle_root()\n+        block2 = create_block(tip, create_coinbase(height), block_time, txlist=[tx1, tx2])\n+        block_time += 1\n         block2.solve()\n         orig_hash = block2.sha256\n         block2_orig = copy.deepcopy(block2)\n@@ -99,12 +95,8 @@ def run_test(self):\n \n         self.log.info(\"Test very broken block.\")\n \n-        block3 = create_block(tip, create_coinbase(height), block_time)\n+        block3 = create_block(tip, create_coinbase(height, nValue=100), block_time)\n         block_time += 1\n-        block3.vtx[0].vout[0].nValue = 100 * COIN  # Too high!\n-        block3.vtx[0].sha256 = None\n-        block3.vtx[0].calc_sha256()\n-        block3.hashMerkleRoot = block3.calc_merkle_root()\n         block3.solve()\n \n         peer.send_blocks_and_test([block3], node, success=False, reject_reason='bad-cb-amount')\n@@ -123,14 +115,10 @@ def run_test(self):\n \n         # Complete testing of CVE-2018-17144, by checking for the inflation bug.\n         # Create a block that spends the output of a tx in a previous block.\n-        block4 = create_block(tip, create_coinbase(height), block_time)\n         tx3 = create_tx_with_script(tx2, 0, script_sig=b'\\x51', amount=50 * COIN)\n-\n-        # Duplicates input\n-        tx3.vin.append(tx3.vin[0])\n+        tx3.vin.append(tx3.vin[0])  # Duplicates input\n         tx3.rehash()\n-        block4.vtx.append(tx3)\n-        block4.hashMerkleRoot = block4.calc_merkle_root()\n+        block4 = create_block(tip, create_coinbase(height), block_time, txlist=[tx3])\n         block4.solve()\n         self.log.info(\"Test inflation by duplicating input\")\n         peer.send_blocks_and_test([block4], node, success=False,  reject_reason='bad-txns-inputs-duplicate')\n@@ -140,7 +128,6 @@ def run_test(self):\n         node.setmocktime(t)\n         # Set block time +1 second past max future validity\n         block = create_block(tip, create_coinbase(height), t + MAX_FUTURE_BLOCK_TIME + 1)\n-        block.hashMerkleRoot = block.calc_merkle_root()\n         block.solve()\n         # Need force_send because the block will get rejected without a getdata otherwise\n         peer.send_blocks_and_test([block], node, force_send=True, success=False, reject_reason='time-too-new')"
      },
      {
        "sha": "9c4e1dd1b1bdf339fcb934ceba8cb14b17860a83",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=df5d783aef3e5af2d1294fc8ff9470a5dc878325",
        "patch": "@@ -225,10 +225,9 @@ def run_test(self):\n         block_289f.solve()\n         block_290f = create_block(block_289f.sha256, create_coinbase(290), block_289f.nTime+1)\n         block_290f.solve()\n-        block_291 = create_block(block_290f.sha256, create_coinbase(291), block_290f.nTime+1)\n         # block_291 spends a coinbase below maturity!\n-        block_291.vtx.append(create_tx_with_script(block_290f.vtx[0], 0, script_sig=b\"42\", amount=1))\n-        block_291.hashMerkleRoot = block_291.calc_merkle_root()\n+        tx_to_add = create_tx_with_script(block_290f.vtx[0], 0, script_sig=b\"42\", amount=1)\n+        block_291 = create_block(block_290f.sha256, create_coinbase(291), block_290f.nTime+1, txlist=[tx_to_add])\n         block_291.solve()\n         block_292 = create_block(block_291.sha256, create_coinbase(292), block_291.nTime+1)\n         block_292.solve()"
      },
      {
        "sha": "f6843d597de80ea7d34daf756aa5bea3284dae37",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df5d783aef3e5af2d1294fc8ff9470a5dc878325/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=df5d783aef3e5af2d1294fc8ff9470a5dc878325",
        "patch": "@@ -24,7 +24,6 @@\n )\n from test_framework.messages import (\n     BIP125_SEQUENCE_NUMBER,\n-    tx_from_hex,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -588,13 +587,10 @@ def spend_one_input(node, dest_address, change_size=Decimal(\"0.00049000\")):\n \n \n def submit_block_with_tx(node, tx):\n-    ctx = tx_from_hex(tx)\n     tip = node.getbestblockhash()\n     height = node.getblockcount() + 1\n     block_time = node.getblockheader(tip)[\"mediantime\"] + 1\n-    block = create_block(int(tip, 16), create_coinbase(height), block_time)\n-    block.vtx.append(ctx)\n-    block.hashMerkleRoot = block.calc_merkle_root()\n+    block = create_block(int(tip, 16), create_coinbase(height), block_time, txlist=[tx])\n     add_witness_commitment(block)\n     block.solve()\n     node.submitblock(block.serialize().hex())"
      }
    ]
  },
  {
    "sha": "e57c0eb865b4ce155b5a4a2e56e46791a47e85af",
    "node_id": "C_kwDOABII59oAKGU1N2MwZWI4NjViNGNlMTU1YjVhNGEyZTU2ZTQ2NzkxYTQ3ZTg1YWY",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-15T17:43:15Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-11-17T14:45:34Z"
      },
      "message": "test: refactor: replace OP_1/OP_TRUE magic numbers by constants",
      "tree": {
        "sha": "f4e7019956866b66133fdcfe918c2e78dac82ce5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4e7019956866b66133fdcfe918c2e78dac82ce5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e57c0eb865b4ce155b5a4a2e56e46791a47e85af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e57c0eb865b4ce155b5a4a2e56e46791a47e85af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e57c0eb865b4ce155b5a4a2e56e46791a47e85af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e57c0eb865b4ce155b5a4a2e56e46791a47e85af/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df5d783aef3e5af2d1294fc8ff9470a5dc878325",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df5d783aef3e5af2d1294fc8ff9470a5dc878325",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df5d783aef3e5af2d1294fc8ff9470a5dc878325"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 16,
      "deletions": 7
    },
    "files": [
      {
        "sha": "0dfa25174bf376ae6d7dfee6bf361087894c5960",
        "filename": "test/functional/p2p_invalid_block.py",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e57c0eb865b4ce155b5a4a2e56e46791a47e85af/test/functional/p2p_invalid_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e57c0eb865b4ce155b5a4a2e56e46791a47e85af/test/functional/p2p_invalid_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_block.py?ref=e57c0eb865b4ce155b5a4a2e56e46791a47e85af",
        "patch": "@@ -15,9 +15,14 @@\n import copy\n import time\n \n-from test_framework.blocktools import create_block, create_coinbase, create_tx_with_script\n+from test_framework.blocktools import (\n+    create_block,\n+    create_coinbase,\n+    create_tx_with_script,\n+)\n from test_framework.messages import COIN\n from test_framework.p2p import P2PDataStore\n+from test_framework.script import OP_TRUE\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n@@ -66,9 +71,8 @@ def run_test(self):\n         # For more information on merkle-root malleability see src/consensus/merkle.cpp.\n         self.log.info(\"Test merkle root malleability.\")\n \n-        # b'0x51' is OP_TRUE\n-        tx1 = create_tx_with_script(block1.vtx[0], 0, script_sig=b'\\x51', amount=50 * COIN)\n-        tx2 = create_tx_with_script(tx1, 0, script_sig=b'\\x51', amount=50 * COIN)\n+        tx1 = create_tx_with_script(block1.vtx[0], 0, script_sig=bytes([OP_TRUE]), amount=50 * COIN)\n+        tx2 = create_tx_with_script(tx1, 0, script_sig=bytes([OP_TRUE]), amount=50 * COIN)\n         block2 = create_block(tip, create_coinbase(height), block_time, txlist=[tx1, tx2])\n         block_time += 1\n         block2.solve()\n@@ -115,7 +119,7 @@ def run_test(self):\n \n         # Complete testing of CVE-2018-17144, by checking for the inflation bug.\n         # Create a block that spends the output of a tx in a previous block.\n-        tx3 = create_tx_with_script(tx2, 0, script_sig=b'\\x51', amount=50 * COIN)\n+        tx3 = create_tx_with_script(tx2, 0, script_sig=bytes([OP_TRUE]), amount=50 * COIN)\n         tx3.vin.append(tx3.vin[0])  # Duplicates input\n         tx3.rehash()\n         block4 = create_block(tip, create_coinbase(height), block_time, txlist=[tx3])"
      },
      {
        "sha": "614f7e1ec03c682841ba42e8ea0751a72d51719c",
        "filename": "test/functional/wallet_taproot.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e57c0eb865b4ce155b5a4a2e56e46791a47e85af/test/functional/wallet_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e57c0eb865b4ce155b5a4a2e56e46791a47e85af/test/functional/wallet_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_taproot.py?ref=e57c0eb865b4ce155b5a4a2e56e46791a47e85af",
        "patch": "@@ -10,7 +10,12 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n from test_framework.descriptors import descsum_create\n-from test_framework.script import (CScript, OP_CHECKSIG, taproot_construct)\n+from test_framework.script import (\n+    CScript,\n+    OP_1,\n+    OP_CHECKSIG,\n+    taproot_construct,\n+)\n from test_framework.segwit_addr import encode_segwit_address\n \n # xprvs/xpubs, and m/* derived x-only pubkeys (created using independent implementation)\n@@ -165,7 +170,7 @@ def pk(hex_key):\n def compute_taproot_address(pubkey, scripts):\n     \"\"\"Compute the address for a taproot output with given inner key and scripts.\"\"\"\n     tap = taproot_construct(pubkey, scripts)\n-    assert tap.scriptPubKey[0] == 0x51\n+    assert tap.scriptPubKey[0] == OP_1\n     assert tap.scriptPubKey[1] == 0x20\n     return encode_segwit_address(\"bcrt\", 1, tap.scriptPubKey[2:])\n "
      }
    ]
  }
]