[
  {
    "sha": "6647e6af73ef0296e3871c46f0226cdfd2bb2174",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjQ3ZTZhZjczZWYwMjk2ZTM4NzFjNDZmMDIyNmNkZmQyYmIyMTc0",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T10:31:49Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-15T09:15:12Z"
      },
      "message": "net: add new method Sock::SetSockOpt() that wraps setsockopt()\n\nThis will help to increase `Sock` usage and make more code mockable.",
      "tree": {
        "sha": "2deed81e78217f00262ab2926dd2e2b1fa8371a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2deed81e78217f00262ab2926dd2e2b1fa8371a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6647e6af73ef0296e3871c46f0226cdfd2bb2174",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB4BCAACgkQVN8G9ktV\ny78B2x/+NggLOClkg1IsdxmDfc1sdPwD2VEf8fZju7zl77bqaeNuFR3Ff8n3sTXT\niM0hv/CrRU1QJs0K98oQL//ksucD0a5aDfX8w8u4tQP2ZfxeVR9pJXwb2rVe1N8b\niRhPGVbNSJNIbgLVRF5TXxAUsmqOrCTOECSXGaoOsz14ElBe8SBvl5Cx6mVvkRX5\npbPrCRaa+nAw+glohIIjkkfsCJGTbhgAFMJxl1HBdgxQUnLqsyq3tRc8cXPbuzCI\n3eqIZTelk0lymYam/F202omrCKIVna5gJhS1baTYHEJc66O/AiEuCvPCjDrmEh1O\nqpls3XN7cqmyYhZyvFe2nLlC1PJ9NDEdZKuQKxNucQNjBkVoSkzyMqvxVvoazmuu\nI25Xwa+4R0CHJ+R0NSsjsyefu3FqJ050hywOLSJuJKKZkba5h8yb5Y968tUgcxhz\nMvtfFKkfURaEg9SvnKm9RNRGO8hf4PodhSWlpCTdWPgRNY+E67r68/3jZjnaCSWc\n74Z5C34G37kdtfpPE5JDSZ+yQtldb8atgcS2xEMr8HNQHnsCs6hJ9hjcCi+6VcEE\nFLI61vU5okLpg7Pk4LGA7DBGI9N4y3J2YGOKdOqncSPyvxW4MjTwAQvxRFmqSijZ\nAQGixBzNhdkkqDApXsbHHMABVEIsk5U5y7AumkogDNYES9RPNJWZkK2K4Agw86n2\nOMXgYk+8dIQYZ1pt2lqn2DUNrG6iqpRC3S932gCwkR630E4mAkQStRq1eoMPh4Iz\nufDXskJVMACJodq/3Ne5UfmKQBHeOyGnaYcI8lyECUoio4SPFHwyVRvvau7Hrbiq\ndVo9IzO/94oFoCtH2xztnA26rxuDt2yV4W5C9RT03xoLUgVf84cdtxK8aIKa5HnS\nDRdBJLfnmgE3+kiERrRL+6kgfS3q2HC2JJKxn230EZar1Hmu+r+dNQ2ZVOUFVKXX\ntQtyP29XBMGkAkdm1T0Dzh3tsmvr2Wx6Tqp3N8BE/x4paWDrXYV/zOeBi1YJZBZ3\nGGT8uz0AAcAt+iwCXfZhzhvpv2IDZo6OG93BAZy8ANy9jE6ZHy7OfqnZO1l12lHD\nn17Ok6MblO8lhzTxM7b7DcUu+0WplqvHuCr3cJF9/bumklaX3nQbRaCFuGSz9Von\na9ZchMI7lHJLufhAwgo+vkpFZP/3gOLU7Rxlsv0fE8Q3znRqYr/vXP3e2iKo/knn\nw5FnfCyYQ52vMzRlwyFLRMenpkkP9HvXXXPjlNLECAOk1mulLsMEbepwpMrMFRR+\nSyx+VqachxWzcUSL7FEiIC+ZfA0CdqdeYW8tcNi9QZmmC/NpIIl13836x3WxWpdg\nijNX4PjupQMkPgAX01ZM8uWxQi93Jg==\n=HYV1\n-----END PGP SIGNATURE-----",
        "payload": "tree 2deed81e78217f00262ab2926dd2e2b1fa8371a7\nparent c6b30ccb2eee5f80f844f79766591f0a1326ce43\nauthor Vasil Dimov <vd@FreeBSD.org> 1618309909 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618478112 +0200\n\nnet: add new method Sock::SetSockOpt() that wraps setsockopt()\n\nThis will help to increase `Sock` usage and make more code mockable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6647e6af73ef0296e3871c46f0226cdfd2bb2174",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6647e6af73ef0296e3871c46f0226cdfd2bb2174",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6647e6af73ef0296e3871c46f0226cdfd2bb2174/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6b30ccb2eee5f80f844f79766591f0a1326ce43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b30ccb2eee5f80f844f79766591f0a1326ce43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6b30ccb2eee5f80f844f79766591f0a1326ce43"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 29,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6c75c396387ff04590a7de147193b85dae8b1dc3",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6647e6af73ef0296e3871c46f0226cdfd2bb2174/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6647e6af73ef0296e3871c46f0226cdfd2bb2174/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=6647e6af73ef0296e3871c46f0226cdfd2bb2174",
        "patch": "@@ -171,6 +171,19 @@ int FuzzedSock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* op\n     return 0;\n }\n \n+int FuzzedSock::SetSockOpt(int, int, const void*, socklen_t) const\n+{\n+    constexpr std::array setsockopt_errnos{\n+        ENOMEM,\n+        ENOBUFS,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, setsockopt_errnos);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n     constexpr std::array wait_errnos{"
      },
      {
        "sha": "1e3a15a2bdb4782632ccb6cf65119c655bbbf58e",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6647e6af73ef0296e3871c46f0226cdfd2bb2174/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6647e6af73ef0296e3871c46f0226cdfd2bb2174/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=6647e6af73ef0296e3871c46f0226cdfd2bb2174",
        "patch": "@@ -591,6 +591,8 @@ class FuzzedSock : public Sock\n \n     int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;\n \n+    int SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt_len) const override;\n+\n     bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;\n \n     bool IsConnected(std::string& errmsg) const override;"
      },
      {
        "sha": "72f79a74e909e697ca09a911f6f05a6e053c1479",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6647e6af73ef0296e3871c46f0226cdfd2bb2174/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6647e6af73ef0296e3871c46f0226cdfd2bb2174/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=6647e6af73ef0296e3871c46f0226cdfd2bb2174",
        "patch": "@@ -114,6 +114,8 @@ class StaticContentsSock : public Sock\n         return 0;\n     }\n \n+    int SetSockOpt(int, int, const void*, socklen_t) const override { return 0; }\n+\n     bool Wait(std::chrono::milliseconds timeout,\n               Event requested,\n               Event* occurred = nullptr) const override"
      },
      {
        "sha": "2708f49924c28ae82d4021803b8393b842637d43",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6647e6af73ef0296e3871c46f0226cdfd2bb2174/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6647e6af73ef0296e3871c46f0226cdfd2bb2174/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=6647e6af73ef0296e3871c46f0226cdfd2bb2174",
        "patch": "@@ -76,6 +76,11 @@ int Sock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len)\n     return getsockopt(m_socket, level, opt_name, static_cast<char*>(opt_val), opt_len);\n }\n \n+int Sock::SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt_len) const\n+{\n+    return setsockopt(m_socket, level, opt_name, static_cast<const char*>(opt_val), opt_len);\n+}\n+\n bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n #ifdef USE_POLL"
      },
      {
        "sha": "2b2c0d7b191bff0d794ca0802ff9d72d7595b89a",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6647e6af73ef0296e3871c46f0226cdfd2bb2174/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6647e6af73ef0296e3871c46f0226cdfd2bb2174/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=6647e6af73ef0296e3871c46f0226cdfd2bb2174",
        "patch": "@@ -103,6 +103,13 @@ class Sock\n      */\n     virtual int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const;\n \n+    /**\n+     * setsockopt(2) wrapper. Equivalent to\n+     * `setsockopt(this->Get(), level, opt_name, opt_val, opt_len)`. Code that uses this\n+     * wrapper can be unit tested if this method is overridden by a mock Sock implementation.\n+     */\n+    virtual int SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt_len) const;\n+\n     using Event = uint8_t;\n \n     /**"
      }
    ]
  },
  {
    "sha": "e2eafa88db568810b7d5061f8189143327856d82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmVhZmE4OGRiNTY4ODEwYjdkNTA2MWY4MTg5MTQzMzI3ODU2ZDgy",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T11:28:10Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-15T09:15:12Z"
      },
      "message": "net: use Sock::SetSockOpt() instead of setsockopt()",
      "tree": {
        "sha": "129657ebdc6de91e890d560d0ec0e7dacbc989b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/129657ebdc6de91e890d560d0ec0e7dacbc989b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2eafa88db568810b7d5061f8189143327856d82",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB4BCEACgkQVN8G9ktV\ny7988h//bapISJfaNTp/ifI4MzUzoT+LF9FXrzqfdH2KVdZZyOVjxK432LTmg2JR\nPnSF3mFguwhokyryxb1iJIzgPT0ArDaPqM6IEon8OugQv7b6RZ5CipxbrbzWzx58\ndGjuhtuX1w63CLAIJTI87sOV06BrLEEGGpXABcxaMgqblkF96OxgC8pTTuzXkCHd\nJbsF8mqNtkyrKF5T1RXLxp5CeGx8cf5PhxpvALm54ttPXfWHQmhG52DpE75gm6HQ\nULXI89GHm6SzcrJIJnziuYi/dRuO0YLZgsGsWoKETTVcFUdlAWFXJiu0Sp0IMnyH\ntOzx1HlEnJGoi5VdGufU/84zQXMI0fssSajZ0vtS4TLmOg68JN7qcYHnearBjFr+\nOx76PEjWy5xayJ3B80Kwf24lef2ulTWUjQxkhABxlOsPenVEB/FED2Jm60qyRByl\nU8fTpkaDX0oof055VLWlHpFieoA2BqUjih9z6hqJ2VXzGLrBH43quVidbEyfq3mx\nR2chFOUp/0efUI3VPjerVI2rWF/nNp5zOW/IJey3aoxSIsgldFfH6WFS5Bo01t/5\nZ5yxiYGVev+QVzAiK9SQauniBBstz/XH+PTn+XOjKqchyfDhx/JHiwDWw26SsHd5\nO+HnWmT8uf5OUn9PIQVgqP+Hg0NawZfIFjM3f0gm7DzTYYh0cgHvCgMmz9Rv67yt\nRou2tf0naaL402VDhQjYa8jR8xzzvxTuVuaW+gt6WyyunczQZ7cADKZzjLu2uYxs\n98xHLU8yiXCGREkteeYAQH0CHHFZbhIYg1geMm4H0AdZcWBn75Div/rHBfqxoz2p\nnJwHp07csWwzkBVd4cS+wHHtbb3DIW0njOiXOkVfNfyTzna6m+lnHw0d2k1XC30a\nZCci0KvgB7zqD8hJynMl6X+429VMDHITUW7uwjSpwMdd8pNjfEEcmmeYELzdconU\nzDbWbtx5YaG0CYoCJOzgiil374sersFmp7RbK7gUM0ckO4iCC9iR0aTxkHMjczMJ\nDsBEt7bMG3KlPZpEurfOR8pD6GTcMsycu8vHlHHTidPobnX/eq+5C2z/LM/tsUDW\niJJpaOqSgPcFX0jMG0v7IaZ0NbBTiROfrAN69C2xeGuv+2/J9a9HzFycpq25Qogc\n2Jtd5cnQhl1G9UYBUuboKe7OVBFi8U5IWCx84vVTe7nJx/e2mAuXrg9ZrkSCz/vM\n+WGuxZvQRElKxp1XwhOsz1iS39rq0Y0SbPAVRzaHf9JQBS7H9Io30A4YjqFF0/J2\nRUQ9R3XuP98tvbz2c3b7DUtVrPDDWHReZdP5mpYTxVqTJI/y05HVLd0d5sCu1z21\nYcP0D9H0kI5ItAqwKXG9D1IouXutCg==\n=F5gM\n-----END PGP SIGNATURE-----",
        "payload": "tree 129657ebdc6de91e890d560d0ec0e7dacbc989b2\nparent 6647e6af73ef0296e3871c46f0226cdfd2bb2174\nauthor Vasil Dimov <vd@FreeBSD.org> 1618313290 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618478112 +0200\n\nnet: use Sock::SetSockOpt() instead of setsockopt()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2eafa88db568810b7d5061f8189143327856d82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2eafa88db568810b7d5061f8189143327856d82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2eafa88db568810b7d5061f8189143327856d82/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6647e6af73ef0296e3871c46f0226cdfd2bb2174",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6647e6af73ef0296e3871c46f0226cdfd2bb2174",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6647e6af73ef0296e3871c46f0226cdfd2bb2174"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "63cdb05200815192ecd740a5a2775d9d7ff1b6bc",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2eafa88db568810b7d5061f8189143327856d82/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2eafa88db568810b7d5061f8189143327856d82/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e2eafa88db568810b7d5061f8189143327856d82",
        "patch": "@@ -2289,17 +2289,17 @@ bool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError,\n \n     // Allow binding if the port is still in TIME_WAIT state after\n     // the program was closed and restarted.\n-    setsockopt(sock->Get(), SOL_SOCKET, SO_REUSEADDR, (sockopt_arg_type)&nOne, sizeof(int));\n+    sock->SetSockOpt(SOL_SOCKET, SO_REUSEADDR, (sockopt_arg_type)&nOne, sizeof(int));\n \n     // some systems don't have IPV6_V6ONLY but are always v6only; others do have the option\n     // and enable it by default or not. Try to enable it, if possible.\n     if (addrBind.IsIPv6()) {\n #ifdef IPV6_V6ONLY\n-        setsockopt(sock->Get(), IPPROTO_IPV6, IPV6_V6ONLY, (sockopt_arg_type)&nOne, sizeof(int));\n+        sock->SetSockOpt(IPPROTO_IPV6, IPV6_V6ONLY, (sockopt_arg_type)&nOne, sizeof(int));\n #endif\n #ifdef WIN32\n         int nProtLevel = PROTECTION_LEVEL_UNRESTRICTED;\n-        setsockopt(sock->Get(), IPPROTO_IPV6, IPV6_PROTECTION_LEVEL, (const char*)&nProtLevel, sizeof(int));\n+        sock->SetSockOpt(IPPROTO_IPV6, IPV6_PROTECTION_LEVEL, (const char*)&nProtLevel, sizeof(int));\n #endif\n     }\n "
      },
      {
        "sha": "c59c39d591759bed27713aacb671b02309bc4732",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2eafa88db568810b7d5061f8189143327856d82/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2eafa88db568810b7d5061f8189143327856d82/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=e2eafa88db568810b7d5061f8189143327856d82",
        "patch": "@@ -498,10 +498,11 @@ std::unique_ptr<Sock> CreateSockTCP(const CService& address_family)\n         return nullptr;\n     }\n \n+    auto sock = std::make_unique<Sock>(hSocket);\n+\n     // Ensure that waiting for I/O on this socket won't result in undefined\n     // behavior.\n-    if (!IsSelectableSocket(hSocket)) {\n-        CloseSocket(hSocket);\n+    if (!IsSelectableSocket(sock->Get())) {\n         LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n         return nullptr;\n     }\n@@ -510,19 +511,18 @@ std::unique_ptr<Sock> CreateSockTCP(const CService& address_family)\n     int set = 1;\n     // Set the no-sigpipe option on the socket for BSD systems, other UNIXes\n     // should use the MSG_NOSIGNAL flag for every send.\n-    setsockopt(hSocket, SOL_SOCKET, SO_NOSIGPIPE, (void*)&set, sizeof(int));\n+    sock->SetSockOpt(SOL_SOCKET, SO_NOSIGPIPE, (void*)&set, sizeof(int));\n #endif\n \n     // Set the no-delay option (disable Nagle's algorithm) on the TCP socket.\n-    SetSocketNoDelay(hSocket);\n+    SetSocketNoDelay(sock->Get());\n \n     // Set the non-blocking option on the socket.\n-    if (!SetSocketNonBlocking(hSocket, true)) {\n-        CloseSocket(hSocket);\n+    if (!SetSocketNonBlocking(sock->Get(), true)) {\n         LogPrintf(\"Error setting socket to non-blocking: %s\\n\", NetworkErrorString(WSAGetLastError()));\n         return nullptr;\n     }\n-    return std::make_unique<Sock>(hSocket);\n+    return sock;\n }\n \n std::function<std::unique_ptr<Sock>(const CService&)> CreateSock = CreateSockTCP;"
      }
    ]
  },
  {
    "sha": "1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTBlMGVjYmM1N2VkNmUxOWQ4Yzk4ZDlkNmRjN2VlZDc0ODQxY2Yy",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T10:14:57Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-16T13:50:43Z"
      },
      "message": "net: change CreateNodeFromAcceptedSocket() to take Sock\n\nChange `CConnman::CreateNodeFromAcceptedSocket()` to take a `Sock`\nargument instead of `SOCKET`.\n\nThis makes the method mockable and also a little bit shorter as some\n`CloseSocket()` calls are removed (the socket will be closed\nautomatically by the `Sock` destructor on early return).",
      "tree": {
        "sha": "1644437fb049cc147ea2615b29cd7d53cb601ff6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1644437fb049cc147ea2615b29cd7d53cb601ff6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB5lo8ACgkQVN8G9ktV\ny78isR/8DZVwwu9LlnJotKVCJ5CiT/fcNCg4BYeVaotHX8H1kjADV/1GuOjYaNDx\nHWmeeceSjWe6iYxQNFxxxX9mXYJfmA0sZFw+n8nl+dp7K/2FPYdtvDLEN2mjE+PN\nPkPZc72VlPgHFRHTGQ6fqNu018mCkf/c1AQR2wa7CAODS4emmvznj46mE21b2fY1\nvO0YETti/5ZvJe3QF8sPbeDtMCaaT8fxwnY2+nmoQbaLRxr4LomPC/ppXtq+lB6U\nBHaaGWD9e1idQ7KJF38/0FzXG7axs5m/2Ji7dYRXHpBZ5IWFjWJGxoppm9CY8Hlz\naUjKsSxWlhADerteCy9Vm5vcTSayo3FA/6cCJTFEkjKnCkukmxlGlfF7E71pvESh\nKb3B9EyZk3OLh/3cHqjR9Y8D/8yl78OaxuC2Puf/M1QvkoeArwRVx/7bWjtl/jbr\n+0eP2M0hWPr72/BTAi+OYsOEQNJRhnlqKHsiivmr2uc9iZJDvbKddNlaHDNrGKbG\n5qjMrYsRlOc8HSs4S0bnGzhfscM+1NuvroHDXdDkZt0NOx4NPEuQwmXH0vgcPHPp\nocQgPHKSQz8OTaqSiEOEK48PkV6f39DMVDvJiMDBMfhbXVT1bQJ2Da/aOU8BUd5e\nUIupZG0r5GYC3tnvhaN+GYx1EctfG258MwIFV4gntg5FH8gtc+NW5iGHwUdbCmzk\nrEICKkz1PTB5TNGRYuaDzWyzhHIbEeA0bv3OOhXPEBueSGjqkZVG49ZF8I1lxt9M\nBqvvsw4z2yFDxr6iYSTtIDm1V2qJgl/6ATUDyqAUcAvIB5UnuFghb6D3FaTMvovU\nvuHTG4UMJmX6eQwey7Jbmjas7HEKfgVZSvmX2K3TNtMkONKZphUm4JxJ8dWW5I8A\nMeIzm/k+BoHrvK41TqIs69MmEDJjf4YJmRFkfhepmNEIwZ/5sexv8Y70wF/CRtkV\nhRcYHc4pQeL1zrIo9oC/Usrc1vlRrOfLR0uS0c2h2d59D4UR3LTpZpvmHQ06B+69\nrrGsyPBZqQF2mcqeEGq0MdH07LfjRODlkmuaBdJRY8pW4WWnC0yp4IdjbUyHYcFR\nxA29c7KsBblpONvh/aJ1ic30bXOKYS86SPfOt+4YUJvqlt/UF2OJQNpXwRuEn/9H\n1DLWc4YFpnmmwwdd18EvWtenf44yECiHkpawPOLoCvDGQChOujf07v+xeM8Lm98l\nrK9EmpUCZ4Ej/CF9B6PURbYLWbmw65MqR87HIdXZtIXwN7qKDWmIUgP4HVGGXExe\no8bfwCaT7tDuyb7HclgnTeObG63q7n2d2sLDTaXxug+tvYPq5ga0e7N/4iOtkRzK\nJ3vLLRX7M5+xfM0CTd+0VPhcQ1ZjqA==\n=W+wc\n-----END PGP SIGNATURE-----",
        "payload": "tree 1644437fb049cc147ea2615b29cd7d53cb601ff6\nparent e2eafa88db568810b7d5061f8189143327856d82\nauthor Vasil Dimov <vd@FreeBSD.org> 1618308897 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618581043 +0200\n\nnet: change CreateNodeFromAcceptedSocket() to take Sock\n\nChange `CConnman::CreateNodeFromAcceptedSocket()` to take a `Sock`\nargument instead of `SOCKET`.\n\nThis makes the method mockable and also a little bit shorter as some\n`CloseSocket()` calls are removed (the socket will be closed\nautomatically by the `Sock` destructor on early return).\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2eafa88db568810b7d5061f8189143327856d82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2eafa88db568810b7d5061f8189143327856d82",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2eafa88db568810b7d5061f8189143327856d82"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 11,
      "deletions": 13
    },
    "files": [
      {
        "sha": "a628a526bbabc4b467d2e38637001b551b63b06e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2",
        "patch": "@@ -1059,15 +1059,17 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         LogPrintf(\"Warning: Unknown socket family\\n\");\n     }\n \n+    auto sock = std::make_unique<Sock>(hSocket);\n+\n     const CAddress addr_bind = GetBindAddress(hSocket);\n \n     NetPermissionFlags permissionFlags = NetPermissionFlags::PF_NONE;\n     hListenSocket.AddSocketPermissionFlags(permissionFlags);\n \n-    CreateNodeFromAcceptedSocket(hSocket, permissionFlags, addr_bind, addr);\n+    CreateNodeFromAcceptedSocket(std::move(sock), permissionFlags, addr_bind, addr);\n }\n \n-void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n+void CConnman::CreateNodeFromAcceptedSocket(std::unique_ptr<Sock> sock,\n                                             NetPermissionFlags permissionFlags,\n                                             const CAddress& addr_bind,\n                                             const CAddress& addr)\n@@ -1093,27 +1095,24 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n \n     if (!fNetworkActive) {\n         LogPrint(BCLog::NET, \"connection from %s dropped: not accepting new connections\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n         return;\n     }\n \n-    if (!IsSelectableSocket(hSocket))\n+    if (!IsSelectableSocket(sock->Get()))\n     {\n         LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n         return;\n     }\n \n     // According to the internet TCP_NODELAY is not carried into accepted sockets\n     // on all platforms.  Set it again here just to be sure.\n-    SetSocketNoDelay(hSocket);\n+    SetSocketNoDelay(sock->Get());\n \n     // Don't accept connections from banned peers.\n     bool banned = m_banman && m_banman->IsBanned(addr);\n     if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && banned)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (banned)\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n         return;\n     }\n \n@@ -1122,7 +1121,6 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n     if (!NetPermissions::HasFlag(permissionFlags, NetPermissionFlags::PF_NOBAN) && nInbound + 1 >= nMaxInbound && discouraged)\n     {\n         LogPrint(BCLog::NET, \"connection from %s dropped (discouraged)\\n\", addr.ToString());\n-        CloseSocket(hSocket);\n         return;\n     }\n \n@@ -1131,7 +1129,6 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n         if (!AttemptToEvictConnection()) {\n             // No connection to evict, disconnect the new connection\n             LogPrint(BCLog::NET, \"failed to find an eviction candidate - connection dropped (full)\\n\");\n-            CloseSocket(hSocket);\n             return;\n         }\n     }\n@@ -1145,7 +1142,7 @@ void CConnman::CreateNodeFromAcceptedSocket(SOCKET hSocket,\n     }\n \n     const bool inbound_onion = std::find(m_onion_binds.begin(), m_onion_binds.end(), addr_bind) != m_onion_binds.end();\n-    CNode* pnode = new CNode(id, nodeServices, hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND, inbound_onion);\n+    CNode* pnode = new CNode(id, nodeServices, sock->Release(), addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", ConnectionType::INBOUND, inbound_onion);\n     pnode->AddRef();\n     pnode->m_permissionFlags = permissionFlags;\n     pnode->m_prefer_evict = discouraged;\n@@ -2261,7 +2258,7 @@ void CConnman::ThreadI2PAcceptIncoming()\n             continue;\n         }\n \n-        CreateNodeFromAcceptedSocket(conn.sock->Release(), NetPermissionFlags::PF_NONE,\n+        CreateNodeFromAcceptedSocket(std::move(conn.sock), NetPermissionFlags::PF_NONE,\n                                      CAddress{conn.me, NODE_NONE}, CAddress{conn.peer, NODE_NONE});\n     }\n }"
      },
      {
        "sha": "5be80a202337e258987e07b4958033537b31e89e",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2",
        "patch": "@@ -27,6 +27,7 @@\n #include <threadinterrupt.h>\n #include <uint256.h>\n #include <util/check.h>\n+#include <util/sock.h>\n \n #include <atomic>\n #include <condition_variable>\n@@ -1049,12 +1050,12 @@ class CConnman\n     /**\n      * Create a `CNode` object from a socket that has just been accepted and add the node to\n      * the `vNodes` member.\n-     * @param[in] hSocket Connected socket to communicate with the peer.\n+     * @param[in] sock Connected socket to communicate with the peer.\n      * @param[in] permissionFlags The peer's permissions.\n      * @param[in] addr_bind The address and port at our side of the connection.\n      * @param[in] addr The address and port at the peer's side of the connection.\n      */\n-    void CreateNodeFromAcceptedSocket(SOCKET hSocket,\n+    void CreateNodeFromAcceptedSocket(std::unique_ptr<Sock> sock,\n                                       NetPermissionFlags permissionFlags,\n                                       const CAddress& addr_bind,\n                                       const CAddress& addr);"
      }
    ]
  },
  {
    "sha": "4cff13a36d9343ba8c274a11131aade5a2ffa508",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2ZmMTNhMzZkOTM0M2JhOGMyNzRhMTExMzFhYWRlNWEyZmZhNTA4",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T12:01:44Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-16T14:00:12Z"
      },
      "message": "net: convert standalone SetSocketNoDelay() to Sock::SetNoDelay()\n\nThis makes the callers mockable.",
      "tree": {
        "sha": "543b5303238f0593373c9f737eb59353a3c0507c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/543b5303238f0593373c9f737eb59353a3c0507c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cff13a36d9343ba8c274a11131aade5a2ffa508",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB5mHAACgkQVN8G9ktV\ny78Gpx/9ES+HQc05s352b5xXSJpbSEKm58xSZLcbnMRTqiC609bIrL/9/MrisDwK\nYk3JxiJ5EZ6L4jAN71xVLBZP+ZlWdnAOyLCfAu08mJbgGq7UfJUUn7tU3CEF9oJI\nVIo3XWQ2J0C65ELUUlxEjGU1eX7CRTSDglAb20o884qZ+KRBDg8Nwwj+U+z2UCtA\nCgksRcde1plBIpVeZAw9RbbTQTSJK7VLn1/GGlkl7p5vUmInBPLG+Z0xTR/ypEVu\nwI6WBghqPPXp345lBhBORQhhXablwNoc840woMpzFJEE0YVf8t1NUYFzg3MeycVO\nOnaofUbpXfF2PixC+1PTj1E13mRDrMUtubXx8PLx8FmA20uwbFC4zkET6hMkMgHf\nUzLV4rCYJmsLpAhHgHO5Hw8LGp6jZLA0zMYLSwNLi3CGTJr5J9xaPHZ3mbVP4ty5\ng1/yRe0V1xqoK63Txp/oaYf25cBXyYpzISQdnMHIUd8/4NPplNwzRG5rN447H5E6\n5OMNdV6gGTHsge49/OckcPOxf4lARBZZy/4byac99gpCzAfuca2xeP/r6ikPNwbR\n1uOa+QrjwmopRA/AzsurdtrVg33zLMZhKPYQUpnaKGyEGz7AKOZu0OWlQ2U1QULH\n0kdh0wG0MsGZGsGbJg5y6QGaYD/LX/JuL72G4gX/br5yh5FZWuHSeKkrPf20AX7I\nBehDyoWF0HALjbih5UMwybfNFiuGXwxw//wUPFi7QLSozaDBq7dpIIdbnPC3Quhl\nA35aUk/SF1DnxB3eVx4edQ6UEtIEyApwlFXEikfJKFlU8ICEE1VbJNrW79iBprhX\n6zq6h/vsRtGgNU6Q4t08BQ+rO5ex/4VyA/Gv52KcdQu0TeB5bapycJhHdqhp7ODE\nBVjmOYfknrBMipPcDusIAHrsoPt++JM1HDygh1Sb8G24CY8rBUToHFctcFg6zEua\np32tNFMCbI3umwEclAl4kdqQaPenYGTBbvd//e0WLOKePxlMPZQB/IpjR/4cDn0o\nIhFyc+qLcpV1q2BEtEjyGg0rnSUnAcj9KPvqQPmpl5cT0kW49KWy+TEN0G4PsBbx\nsNWluajGlRMaSLMKMa/QBDrgor01BzQLezcFkGmPHXWLu3OQrwAySbpcSsBjinaT\n+LuOgNWYmsEJhVGD64/4gD6WYT6JWatNNNkonjd3oFugkh9qa8wPHkjyXdV8smlg\n5oriMC8ZjdsVWwFT91irqAm45IKoCZGYE5qGQXsOEW8k/eQ3lhUub8deKHFYjmQE\n6rC/zcsyruWimIAVJ2NGeGNYiY9mog5lbmhlbJOpXQJurR+jaI8LrQQT89PtvfyE\nyqBrFr6Fi2MCuiAOsWELezNxXq3EtQ==\n=Qi/x\n-----END PGP SIGNATURE-----",
        "payload": "tree 543b5303238f0593373c9f737eb59353a3c0507c\nparent 1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2\nauthor Vasil Dimov <vd@FreeBSD.org> 1618315304 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618581612 +0200\n\nnet: convert standalone SetSocketNoDelay() to Sock::SetNoDelay()\n\nThis makes the callers mockable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cff13a36d9343ba8c274a11131aade5a2ffa508",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cff13a36d9343ba8c274a11131aade5a2ffa508",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cff13a36d9343ba8c274a11131aade5a2ffa508/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a0e0ecbc57ed6e19d8c98d9d6dc7eed74841cf2"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 19,
      "deletions": 11
    },
    "files": [
      {
        "sha": "ed7cb843ce6ce6afc6cdf426a88af00fe066fe6f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cff13a36d9343ba8c274a11131aade5a2ffa508/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cff13a36d9343ba8c274a11131aade5a2ffa508/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4cff13a36d9343ba8c274a11131aade5a2ffa508",
        "patch": "@@ -1106,7 +1106,10 @@ void CConnman::CreateNodeFromAcceptedSocket(std::unique_ptr<Sock> sock,\n \n     // According to the internet TCP_NODELAY is not carried into accepted sockets\n     // on all platforms.  Set it again here just to be sure.\n-    SetSocketNoDelay(sock->Get());\n+    if (!sock->SetNoDelay()) {\n+        LogPrint(BCLog::NET, \"connection from %s: unable to set TCP_NODELAY, continuing anyway\\n\",\n+                 addr.ToString());\n+    }\n \n     // Don't accept connections from banned peers.\n     bool banned = m_banman && m_banman->IsBanned(addr);"
      },
      {
        "sha": "9aab61e93dc7a93c03e58d637401f91a91345dc0",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cff13a36d9343ba8c274a11131aade5a2ffa508/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cff13a36d9343ba8c274a11131aade5a2ffa508/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=4cff13a36d9343ba8c274a11131aade5a2ffa508",
        "patch": "@@ -515,7 +515,9 @@ std::unique_ptr<Sock> CreateSockTCP(const CService& address_family)\n #endif\n \n     // Set the no-delay option (disable Nagle's algorithm) on the TCP socket.\n-    SetSocketNoDelay(sock->Get());\n+    if (!sock->SetNoDelay()) {\n+        LogPrint(BCLog::NET, \"Unable to set TCP_NODELAY on a newly created socket, continuing anyway\\n\");\n+    }\n \n     // Set the non-blocking option on the socket.\n     if (!SetSocketNonBlocking(sock->Get(), true)) {\n@@ -743,13 +745,6 @@ bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking)\n     return true;\n }\n \n-bool SetSocketNoDelay(const SOCKET& hSocket)\n-{\n-    int set = 1;\n-    int rc = setsockopt(hSocket, IPPROTO_TCP, TCP_NODELAY, (const char*)&set, sizeof(int));\n-    return rc == 0;\n-}\n-\n void InterruptSocks5(bool interrupt)\n {\n     interruptSocks5Recv = interrupt;"
      },
      {
        "sha": "132facf46983d7e0ffe6b59b78e80139dbf03db3",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cff13a36d9343ba8c274a11131aade5a2ffa508/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cff13a36d9343ba8c274a11131aade5a2ffa508/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=4cff13a36d9343ba8c274a11131aade5a2ffa508",
        "patch": "@@ -222,8 +222,6 @@ bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, uin\n \n /** Disable or enable blocking-mode for a socket */\n bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking);\n-/** Set the TCP_NODELAY flag on a socket */\n-bool SetSocketNoDelay(const SOCKET& hSocket);\n void InterruptSocks5(bool interrupt);\n \n /**"
      },
      {
        "sha": "a38df1f77c7b7da3884db26591f4b4f874fda202",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cff13a36d9343ba8c274a11131aade5a2ffa508/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cff13a36d9343ba8c274a11131aade5a2ffa508/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=4cff13a36d9343ba8c274a11131aade5a2ffa508",
        "patch": "@@ -81,6 +81,12 @@ int Sock::SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt\n     return setsockopt(m_socket, level, opt_name, static_cast<const char*>(opt_val), opt_len);\n }\n \n+bool Sock::SetNoDelay() const\n+{\n+    const int on{1};\n+    return SetSockOpt(IPPROTO_TCP, TCP_NODELAY, &on, sizeof(on)) == 0;\n+}\n+\n bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n #ifdef USE_POLL"
      },
      {
        "sha": "01e93b04aca6cf360804e5b76982a9e6a9fa8920",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cff13a36d9343ba8c274a11131aade5a2ffa508/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cff13a36d9343ba8c274a11131aade5a2ffa508/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=4cff13a36d9343ba8c274a11131aade5a2ffa508",
        "patch": "@@ -110,6 +110,12 @@ class Sock\n      */\n     virtual int SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt_len) const;\n \n+    /**\n+     * Shortcut to set the TCP_NODELAY option with SetSockOpt().\n+     * @return true if set successfully\n+     */\n+    [[nodiscard]] virtual bool SetNoDelay() const;\n+\n     using Event = uint8_t;\n \n     /**"
      }
    ]
  },
  {
    "sha": "22a2847c77ab63fcef010b63b1801cf61659a727",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMmEyODQ3Yzc3YWI2M2ZjZWYwMTBiNjNiMTgwMWNmNjE2NTlhNzI3",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T12:29:14Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-16T14:01:02Z"
      },
      "message": "net: convert standalone IsSelectableSocket() to Sock::IsSelectable()\n\nThis makes the callers mockable.",
      "tree": {
        "sha": "f4fb9085fd21666f3aae2f11ab036c94a1fd76fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4fb9085fd21666f3aae2f11ab036c94a1fd76fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22a2847c77ab63fcef010b63b1801cf61659a727",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB5mKAACgkQVN8G9ktV\ny78Xfx//Yjh++d7RX/8yryiMy9e0f3z9/QGKo6wIF+82gJU50CevlNcFOWqF5Pdz\nNC4GbHEHuYTe58EQSLupQjXiF/9B+svWV8zZVPypQCZNDdAzOYAJ8enNiKvKA5Mv\nV8K0g87wRccZ19DMEJio+EsqYvOGnufNQLRB1BHmX91YSnBjmbhv0Y86clHK5T4+\npybB0ET1rQbfi/uRhz/N2wRkpBrFttIeRg3aXHxQenx7+T6J2dogBwyOr67ueOui\n2wDMWQaHdjTISUkE2lgdeXcsn6BGkPlt1PrTPrIhMiKkea7qJ73GN/Fva7U/ixJu\nLkimbNds9KQNBRENUFqBhQ6KgdYcAhIIKs/4bMk42hWoOpiMVcn01BcEM9WV0vfQ\nUQ7xZGe7tzW5GT7SxNjz/9VOR7XoOyB90txGvTPfSfkK1wZR1E/6cruHiTmCOUUJ\n2oN5IVLLfS4FQK4bQS5LVUS/HvXG855LgQGG7WTPiU/PtYwFdgCO0wnOj/hzt7q2\naJN01k5X/KBsRjxY/nAD3IB/FLa/Dr8dOrt3fxJau/ubP/uXTu7Y1gDnGSXHhxL5\nzNN9p7qo0EcmtjAm0fXNVKOxS6uqOxDvxCWLTb6yuJERJ6P02Ihwl7hoFMXR8i8S\nOcExGLw1lyURg/+0+ltrpAOmPoKnoiNszd46J49v/9dDql3kFunU3RfiE+ud5vdb\nE/MHIFCV+qkCKzX1y9brp1ysp2HfbkBE2sn5d9hrzp/7GnJ0Sz8nUvs4IEgV+Y0M\nSwRtqZ0DtVRKVN/rcCnkCepUlJ1+GX/VqyvH8a7jQeLdSXmsJWpcIXFGb2m3VHWm\nHUIF1BfAMatgN0+sXWtQsAa+55iaP2UhUe8worh9LbrXNj2vWvniDiVD+25dR/uo\nH9Eoh1EW1O3fwHc0EQMprIB6VJDhpuXfDoLn9jP0CPipKn8U7DzF8dBY7beCCBii\ntGjJKCoRUx/w//yjV057VSAAZczRM2N0NltydyAED3VPGOtilt+KiKwgmJ4EUl4v\nIzOoLYHFhJXK4n0urzl07+egyYWIIczEZY9m3VMh0+ubAIYBZL0+2lmgZ2p4LzlN\nbhu4MW0Cj6v3JwFeMkVBSJ+PeoRsMxg2aVEwyp+IATX8XRqEPtEBCFxZD7XjWTva\nJ97eG52WaLysByPtE8PnLGoZdrdLX3mXbcshFFUjfgKRhD0ilURaNN2PisR1WiAq\nONMbgssQpw8smyQVa8OOFD9qF2uD+2vUJ6JkmnzfKo68lmIdvkh5dWsmQAB2QbK/\n37MC9Bg071RTv483KsNqvHmxXzbGwg+tD8zdN5kTRHfvqh+uoaEF462X2kGz1KPq\n9wFrM4xFiK15lkhaU7HCyOZ06Ugg+Q==\n=pu0A\n-----END PGP SIGNATURE-----",
        "payload": "tree f4fb9085fd21666f3aae2f11ab036c94a1fd76fe\nparent 4cff13a36d9343ba8c274a11131aade5a2ffa508\nauthor Vasil Dimov <vd@FreeBSD.org> 1618316954 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618581662 +0200\n\nnet: convert standalone IsSelectableSocket() to Sock::IsSelectable()\n\nThis makes the callers mockable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22a2847c77ab63fcef010b63b1801cf61659a727",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22a2847c77ab63fcef010b63b1801cf61659a727",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22a2847c77ab63fcef010b63b1801cf61659a727/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cff13a36d9343ba8c274a11131aade5a2ffa508",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cff13a36d9343ba8c274a11131aade5a2ffa508",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cff13a36d9343ba8c274a11131aade5a2ffa508"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 35,
      "deletions": 13
    },
    "files": [
      {
        "sha": "4d6ffe4b3338c2859a039190b6819a6c853555e2",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a2847c77ab63fcef010b63b1801cf61659a727/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a2847c77ab63fcef010b63b1801cf61659a727/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=22a2847c77ab63fcef010b63b1801cf61659a727",
        "patch": "@@ -97,14 +97,6 @@ typedef char* sockopt_arg_type;\n #define USE_POLL\n #endif\n \n-bool static inline IsSelectableSocket(const SOCKET& s) {\n-#if defined(USE_POLL) || defined(WIN32)\n-    return true;\n-#else\n-    return (s < FD_SETSIZE);\n-#endif\n-}\n-\n // MSG_NOSIGNAL is not available on some platforms, if it doesn't exist define it as 0\n #if !defined(MSG_NOSIGNAL)\n #define MSG_NOSIGNAL 0"
      },
      {
        "sha": "91c484f6f8d410d701bed147bacf428c8e28acdf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a2847c77ab63fcef010b63b1801cf61659a727/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a2847c77ab63fcef010b63b1801cf61659a727/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=22a2847c77ab63fcef010b63b1801cf61659a727",
        "patch": "@@ -1098,8 +1098,7 @@ void CConnman::CreateNodeFromAcceptedSocket(std::unique_ptr<Sock> sock,\n         return;\n     }\n \n-    if (!IsSelectableSocket(sock->Get()))\n-    {\n+    if (!sock->IsSelectable()) {\n         LogPrintf(\"connection from %s dropped: non-selectable socket\\n\", addr.ToString());\n         return;\n     }"
      },
      {
        "sha": "ab110dfefa1234670d4cb2cab577aa3f4e506423",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a2847c77ab63fcef010b63b1801cf61659a727/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a2847c77ab63fcef010b63b1801cf61659a727/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=22a2847c77ab63fcef010b63b1801cf61659a727",
        "patch": "@@ -502,7 +502,7 @@ std::unique_ptr<Sock> CreateSockTCP(const CService& address_family)\n \n     // Ensure that waiting for I/O on this socket won't result in undefined\n     // behavior.\n-    if (!IsSelectableSocket(sock->Get())) {\n+    if (!sock->IsSelectable()) {\n         LogPrintf(\"Cannot create connection: non-selectable socket created (fd >= FD_SETSIZE ?)\\n\");\n         return nullptr;\n     }"
      },
      {
        "sha": "77837737094514203d1c08e06da77844e5c72ee7",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a2847c77ab63fcef010b63b1801cf61659a727/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a2847c77ab63fcef010b63b1801cf61659a727/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=22a2847c77ab63fcef010b63b1801cf61659a727",
        "patch": "@@ -8,7 +8,7 @@\n #include <version.h>\n \n FuzzedSock::FuzzedSock(FuzzedDataProvider& fuzzed_data_provider)\n-    : m_fuzzed_data_provider{fuzzed_data_provider}\n+    : m_fuzzed_data_provider{fuzzed_data_provider}, m_selectable{fuzzed_data_provider.ConsumeBool()}\n {\n     m_socket = fuzzed_data_provider.ConsumeIntegralInRange<SOCKET>(INVALID_SOCKET - 1, INVALID_SOCKET);\n }\n@@ -184,6 +184,11 @@ int FuzzedSock::SetSockOpt(int, int, const void*, socklen_t) const\n     return 0;\n }\n \n+bool FuzzedSock::IsSelectable() const\n+{\n+    return m_selectable;\n+}\n+\n bool FuzzedSock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n     constexpr std::array wait_errnos{"
      },
      {
        "sha": "c91ab4c05a6ce8aca18515ed5306e0d807a87ef3",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a2847c77ab63fcef010b63b1801cf61659a727/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a2847c77ab63fcef010b63b1801cf61659a727/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=22a2847c77ab63fcef010b63b1801cf61659a727",
        "patch": "@@ -574,6 +574,13 @@ class FuzzedSock : public Sock\n      */\n     mutable std::optional<uint8_t> m_peek_data;\n \n+    /**\n+     * Whether to pretend that the socket is select(2)-able. This is randomly set in the\n+     * constructor. It should remain constant so that repeated calls to `IsSelectable()`\n+     * return the same value.\n+     */\n+    const bool m_selectable;\n+\n public:\n     explicit FuzzedSock(FuzzedDataProvider& fuzzed_data_provider);\n \n@@ -593,6 +600,8 @@ class FuzzedSock : public Sock\n \n     int SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt_len) const override;\n \n+    bool IsSelectable() const override;\n+\n     bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;\n \n     bool IsConnected(std::string& errmsg) const override;"
      },
      {
        "sha": "cd6281e37019067e130e7dea24439c4a382afe89",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a2847c77ab63fcef010b63b1801cf61659a727/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a2847c77ab63fcef010b63b1801cf61659a727/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=22a2847c77ab63fcef010b63b1801cf61659a727",
        "patch": "@@ -116,6 +116,8 @@ class StaticContentsSock : public Sock\n \n     int SetSockOpt(int, int, const void*, socklen_t) const override { return 0; }\n \n+    bool IsSelectable() const override { return true; }\n+\n     bool Wait(std::chrono::milliseconds timeout,\n               Event requested,\n               Event* occurred = nullptr) const override"
      },
      {
        "sha": "30f0332b588b6c1289d554dc32dac297d90157cd",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a2847c77ab63fcef010b63b1801cf61659a727/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a2847c77ab63fcef010b63b1801cf61659a727/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=22a2847c77ab63fcef010b63b1801cf61659a727",
        "patch": "@@ -87,6 +87,15 @@ bool Sock::SetNoDelay() const\n     return SetSockOpt(IPPROTO_TCP, TCP_NODELAY, &on, sizeof(on)) == 0;\n }\n \n+bool Sock::IsSelectable() const\n+{\n+#if defined(USE_POLL) || defined(WIN32)\n+    return true;\n+#else\n+    return m_socket < FD_SETSIZE;\n+#endif\n+}\n+\n bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred) const\n {\n #ifdef USE_POLL\n@@ -116,7 +125,7 @@ bool Sock::Wait(std::chrono::milliseconds timeout, Event requested, Event* occur\n \n     return true;\n #else\n-    if (!IsSelectableSocket(m_socket)) {\n+    if (!IsSelectable()) {\n         return false;\n     }\n "
      },
      {
        "sha": "f5fcc0c3b62dec30f00a1c2b59fb0c61ac38b40d",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22a2847c77ab63fcef010b63b1801cf61659a727/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22a2847c77ab63fcef010b63b1801cf61659a727/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=22a2847c77ab63fcef010b63b1801cf61659a727",
        "patch": "@@ -116,6 +116,12 @@ class Sock\n      */\n     [[nodiscard]] virtual bool SetNoDelay() const;\n \n+    /**\n+     * Check if the underlying socket can be used for `select(2)` (or the `Wait()` method).\n+     * @return true if selectable\n+     */\n+    [[nodiscard]] virtual bool IsSelectable() const;\n+\n     using Event = uint8_t;\n \n     /**"
      }
    ]
  },
  {
    "sha": "23702fa9117aa42326f3f1dda4244a9ed47523e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzcwMmZhOTExN2FhNDIzMjZmM2YxZGRhNDI0NGE5ZWQ0NzUyM2Uw",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T12:37:16Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-16T14:01:05Z"
      },
      "message": "net: add new method Sock::GetSockName() that wraps getsockname()\n\nThis will help to increase `Sock` usage and make more code mockable.",
      "tree": {
        "sha": "5da2feeed175d3554fee775250fed27f06bbce20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5da2feeed175d3554fee775250fed27f06bbce20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23702fa9117aa42326f3f1dda4244a9ed47523e0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB5mKEACgkQVN8G9ktV\ny78cxh/9HeVH4HawMlnI9xZLNmdTBngc3+JcI3vKOPWAC+SEWfuV8D7hGxPpkDju\nG3WxgLJJ0KU7JmDo6ocWwgLmXASncXF1LDBPRYHBfnOQpYxkAqfZxF5Zku0pDdkU\nvCXqLyjKZ3c+YzxRxNnjkfSuspNEZGgUFekqTkxdSO8MIDJJtXS0PwK6IYWt9/6y\nzTgbmnioa7HSL9YWmznfiU/zfoc11G5nBpWsX40ajTfTyQQBAdl4nFrnemrMYfhM\nTascX/L5Aeu+2t2PurLEfEGhUg5AZv6D7RzY5ODfudwW1Jp4OwRxwPmOOYTVJStb\nloscE46wg2ftSeWZq/rrAsYqxDMmm9pFOg6VqOEMJ3Dk9SER7FN65o8o02uwY3mO\nIEmI3YKzqiK1G0Ee2ilGYuODQJjyjzuv54JwLiSB6A+A2XYfwxj2j7PpJ8CZUXCk\nRd7g9cvbDRY1V2ETtIIYSZAqPCJ8fEwkhlngCM9wSEr5oG3gdO1RsoRmFvL6RxcR\nonMtfNAztcASfeOINGkIcedupKZ+bfqUAlGXqTblp81VwwTgRpH4eulq2k4RDq4h\njwkl9i8yeMsrrOimIAyDUtj3i/1mHIrnMipFQWplmc44vpeSjCES8jTQNCSip5OO\nqES8BUZ4MrLexD5RDPwb+S3aT42gNHgeQ0cPg+PJIZpteMET+D4pTb+G33DqsJK8\nmUIPOxbH1cWtkW1V21jLyoAWoHaf8z9f8CeMqjD+EBPGkx7YSicUvM5HHHqkYu2s\n3YsqvEOWlyQL4nMaEOGQJEVR0h6LcFjpMCLF2xmWcAkZMN9PvwBD24wOI7lZ4Wap\nUVgwzwwZEuHDnoTkWC6F0IGmV/WxUJmLwmcDdBKznHAlCyOM/yAqnLtG7T+ZLnNd\nLg9z80ZHFt9rrRi2PYBOO16vQQZDIVpdhsfk7T4tqoDKbe5a1Azq3MqYAbV6LsCT\nvlxVQKhWbV2MHGuPVwAU0X6v+RaRvkjGNO0jXv4M469a1ZriidpXfmc0025g/jtn\nkE9MW8apZQ5P+xPRjIgXcaSHl4MCYo4W+JH1DDvfvhxz3SXeQPePxfIrpZ/jt/+O\nYVSpimj9rCMjdDTk5ZgMx18PRbMDArOUPq/P3G0hENu/R9Sou+Vw6TbXIfpjYsn2\nuEehawPJ0+sMvjrwTKc+EZBPgtTU7qTTfYT7DHy2Z3IW0CKYPNxMx5/7RH9eXClJ\ne8Icf/rdxzhayd7yulqeld4JMThSbc1NDVtEUUkYbekWCUuLXC9Zum7nh7RPvZeQ\n6Y+p42kll7VVrSVZIurYduJvfjdLl3b8krT+VDF05N34sIZrRXk0rChO2QlBFvGA\nj5ZZqZDNlBSHUXycPXVL40pJ/nuVHg==\n=H3/O\n-----END PGP SIGNATURE-----",
        "payload": "tree 5da2feeed175d3554fee775250fed27f06bbce20\nparent 22a2847c77ab63fcef010b63b1801cf61659a727\nauthor Vasil Dimov <vd@FreeBSD.org> 1618317436 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618581665 +0200\n\nnet: add new method Sock::GetSockName() that wraps getsockname()\n\nThis will help to increase `Sock` usage and make more code mockable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23702fa9117aa42326f3f1dda4244a9ed47523e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23702fa9117aa42326f3f1dda4244a9ed47523e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23702fa9117aa42326f3f1dda4244a9ed47523e0/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22a2847c77ab63fcef010b63b1801cf61659a727",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22a2847c77ab63fcef010b63b1801cf61659a727",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22a2847c77ab63fcef010b63b1801cf61659a727"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3d5311df74741bff6ecca7b534e3f912a36e3bde",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23702fa9117aa42326f3f1dda4244a9ed47523e0/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23702fa9117aa42326f3f1dda4244a9ed47523e0/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=23702fa9117aa42326f3f1dda4244a9ed47523e0",
        "patch": "@@ -184,6 +184,20 @@ int FuzzedSock::SetSockOpt(int, int, const void*, socklen_t) const\n     return 0;\n }\n \n+int FuzzedSock::GetSockName(sockaddr* name, socklen_t* name_len) const\n+{\n+    constexpr std::array getsockname_errnos{\n+        ECONNRESET,\n+        ENOBUFS,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, getsockname_errnos);\n+        return -1;\n+    }\n+    *name_len = m_fuzzed_data_provider.ConsumeData(name, *name_len);\n+    return 0;\n+}\n+\n bool FuzzedSock::IsSelectable() const\n {\n     return m_selectable;"
      },
      {
        "sha": "714673a350d9c0b26beb12680bb663cd8269dbed",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23702fa9117aa42326f3f1dda4244a9ed47523e0/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23702fa9117aa42326f3f1dda4244a9ed47523e0/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=23702fa9117aa42326f3f1dda4244a9ed47523e0",
        "patch": "@@ -600,6 +600,8 @@ class FuzzedSock : public Sock\n \n     int SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt_len) const override;\n \n+    int GetSockName(sockaddr* name, socklen_t* name_len) const override;\n+\n     bool IsSelectable() const override;\n \n     bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;"
      },
      {
        "sha": "01ba32b03f1fb20bd88118194a9db0f21cd62a3d",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23702fa9117aa42326f3f1dda4244a9ed47523e0/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23702fa9117aa42326f3f1dda4244a9ed47523e0/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=23702fa9117aa42326f3f1dda4244a9ed47523e0",
        "patch": "@@ -116,6 +116,12 @@ class StaticContentsSock : public Sock\n \n     int SetSockOpt(int, int, const void*, socklen_t) const override { return 0; }\n \n+    int GetSockName(sockaddr* name, socklen_t* name_len) const override\n+    {\n+        std::memset(name, 0x0, *name_len);\n+        return 0;\n+    }\n+\n     bool IsSelectable() const override { return true; }\n \n     bool Wait(std::chrono::milliseconds timeout,"
      },
      {
        "sha": "3bc29a39bdf70f2cf60f192ee4dad422104de2b2",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23702fa9117aa42326f3f1dda4244a9ed47523e0/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23702fa9117aa42326f3f1dda4244a9ed47523e0/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=23702fa9117aa42326f3f1dda4244a9ed47523e0",
        "patch": "@@ -81,6 +81,11 @@ int Sock::SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt\n     return setsockopt(m_socket, level, opt_name, static_cast<const char*>(opt_val), opt_len);\n }\n \n+int Sock::GetSockName(sockaddr* name, socklen_t* name_len) const\n+{\n+    return getsockname(m_socket, name, name_len);\n+}\n+\n bool Sock::SetNoDelay() const\n {\n     const int on{1};"
      },
      {
        "sha": "951f0e654479a3920e113993b431ae384743307e",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23702fa9117aa42326f3f1dda4244a9ed47523e0/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23702fa9117aa42326f3f1dda4244a9ed47523e0/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=23702fa9117aa42326f3f1dda4244a9ed47523e0",
        "patch": "@@ -110,6 +110,13 @@ class Sock\n      */\n     virtual int SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt_len) const;\n \n+    /**\n+     * getsockname(2) wrapper. Equivalent to\n+     * `getsockname(this->Get(), name, name_len)`. Code that uses this\n+     * wrapper can be unit tested if this method is overridden by a mock Sock implementation.\n+     */\n+    virtual int GetSockName(sockaddr* name, socklen_t* name_len) const;\n+\n     /**\n      * Shortcut to set the TCP_NODELAY option with SetSockOpt().\n      * @return true if set successfully"
      }
    ]
  },
  {
    "sha": "462799293f9e4fdf234951b1eeda4939f0034ff1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjI3OTkyOTNmOWU0ZmRmMjM0OTUxYjFlZWRhNDkzOWYwMDM0ZmYx",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T13:00:52Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-16T14:01:05Z"
      },
      "message": "net: add Sock method to check if it owns a socket\n\nMimic https://en.cppreference.com/w/cpp/memory/unique_ptr/operator_bool",
      "tree": {
        "sha": "5097f2b43fe6ae6846a423ff74dccf98af4f429c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5097f2b43fe6ae6846a423ff74dccf98af4f429c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/462799293f9e4fdf234951b1eeda4939f0034ff1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB5mKIACgkQVN8G9ktV\ny78qJh/9E6WM612bjl6+4cXPB82KehZoUD0B2VKrvNDXwBeUi0sKhCmIuv8rwa8b\n911li2Sv0dEjBZxQC/wPuXyXiS8cswcbKjRgIgH1EeyuppmjMkxmnZs2qraSBaNF\ngKaTskk8fXfCA3lyQvchelYWXqaS24mgFn8UvT+FaY2V3dLpU6NJfjGIvDB+8TV6\nzykp00/egkl9Q8Luz3hu+Uxc+ZHlnPoGLYHyheLmDrgZ9yMpgHfm0PQ2tedaTQ/V\nKZA44KOj9wue9N4wC/+fvY0NLINB1vOjAgOAxKC/E2zGIy9ZA/9wn0pjRsOHVyyd\n4ADnxtnfh3NqpS4eO1JOwv02JDwcEIvlwlLMbJAhb8KF4ewawR9HLKQuN6md9Kla\ndFb3QDdeCz4oQoWhMtapkPoCa98CwaCVNVZdbGYFpuEWdhlXYEFo2C4M/b9VMVfo\nIVr6qOCSxE8+OpOnoy34Kca9/lZkq6Vryh7lcCZ3QkyGmmpbu2cH5pFeywUezQI4\n7J9Eo4VP0m4ccrVyyiH5y+IY+bFHmBXRFF5hSJ+lLn7iOATNknigBCixNzonBG/Y\nthBihUIbp3wQRzQuMsgahsob0VJEAtme2G63gxrd0e63EqWjwkVvKOgt0VFTrn/Q\nfrgfu0lgf/8zY7+VfvXZY6DYCL/DP5q02a2qrxq4roIzHeoOa+OG/aZ6PyTWifKP\nHD+LVa1R6iaYzLlDnTQHPhR0ry5BDKIW7hwvt05D4JdIoLNHB4FAbLpTFvKBjESV\nmTBODJJOJFf2SfAFNIDMfajDsUXLHtTmcOwsjSwGWznecJHHqs81dEbiJH2QzCgm\nzqXl17CMWYi+J8xxq8Q5FVW4HEncx4zAneEosEJFtZ9wqaoGo+4pT+ulbM5L89Qz\noBX3V263xP3nshR5d4LtGvr/BIMU9WAshL7xuzOzEwx1myeVWzhAw2i5KLRv9SGu\nAPOlF50XLB9ZlsOnfhYbW7UKwAG50wPSWrc22S1ZL/he5rE4EMv4oFbGkRvGDCOh\npTvav/zi9WlOch2yF+ipPTbAsuRcLDYl04BXPf6gLxb+jXaqQ2QJj0bQzYSHThrR\njBWrysMAmOrlgSxX3aD/gCnzmS1JG2GjXgS1OQq9kydOhbDi+JHi5robxrA8MkwY\nmPLfxU28psyyd6QB77ErK+2J6z0LRQAfzkP1TZ/1A4RSPTHmTImGbl6fwXhbA1LH\nQsmPC8oC4FUycRxyqJc0fMqOHZC8JNRpENXNopzKK2jALyum8CslLFXyASQO7AYU\nuOb0oZHX3kAD1c3pxjiGCr1uQX56jCJg189fbiIfIWNE672IVTJlQIU5l3AaQdnM\n/otbYnebyi29q4x8eON23/j4CDLhOw==\n=OvX5\n-----END PGP SIGNATURE-----",
        "payload": "tree 5097f2b43fe6ae6846a423ff74dccf98af4f429c\nparent 23702fa9117aa42326f3f1dda4244a9ed47523e0\nauthor Vasil Dimov <vd@FreeBSD.org> 1618318852 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618581665 +0200\n\nnet: add Sock method to check if it owns a socket\n\nMimic https://en.cppreference.com/w/cpp/memory/unique_ptr/operator_bool\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/462799293f9e4fdf234951b1eeda4939f0034ff1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/462799293f9e4fdf234951b1eeda4939f0034ff1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/462799293f9e4fdf234951b1eeda4939f0034ff1/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23702fa9117aa42326f3f1dda4244a9ed47523e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23702fa9117aa42326f3f1dda4244a9ed47523e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23702fa9117aa42326f3f1dda4244a9ed47523e0"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "290fac2190d1ff2d8331119f19c5ac5d29cd4eae",
        "filename": "src/i2p.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/462799293f9e4fdf234951b1eeda4939f0034ff1/src/i2p.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/462799293f9e4fdf234951b1eeda4939f0034ff1/src/i2p.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/i2p.cpp?ref=462799293f9e4fdf234951b1eeda4939f0034ff1",
        "patch": "@@ -397,7 +397,7 @@ std::unique_ptr<Sock> Session::StreamAccept()\n \n void Session::Disconnect()\n {\n-    if (m_control_sock->Get() != INVALID_SOCKET) {\n+    if (*m_control_sock) {\n         if (m_session_id.empty()) {\n             Log(\"Destroying incomplete session\");\n         } else {"
      },
      {
        "sha": "b03fd10280f1249ab0188bb8c073eb51fbed943d",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/462799293f9e4fdf234951b1eeda4939f0034ff1/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/462799293f9e4fdf234951b1eeda4939f0034ff1/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=462799293f9e4fdf234951b1eeda4939f0034ff1",
        "patch": "@@ -544,7 +544,7 @@ bool ConnectSocketDirectly(const CService &addrConnect, const Sock& sock, int nT\n     // Create a sockaddr from the specified service.\n     struct sockaddr_storage sockaddr;\n     socklen_t len = sizeof(sockaddr);\n-    if (sock.Get() == INVALID_SOCKET) {\n+    if (!sock) {\n         LogPrintf(\"Cannot connect to %s: invalid socket\\n\", addrConnect.ToString());\n         return false;\n     }"
      },
      {
        "sha": "2f0fd6b5a6fc04f8bacc93c28f66e1dbbac280bf",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/462799293f9e4fdf234951b1eeda4939f0034ff1/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/462799293f9e4fdf234951b1eeda4939f0034ff1/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=462799293f9e4fdf234951b1eeda4939f0034ff1",
        "patch": "@@ -45,6 +45,11 @@ Sock& Sock::operator=(Sock&& other)\n     return *this;\n }\n \n+Sock::operator bool() const\n+{\n+    return m_socket != INVALID_SOCKET;\n+}\n+\n SOCKET Sock::Get() const { return m_socket; }\n \n SOCKET Sock::Release()"
      },
      {
        "sha": "2272c834a4859d78d2be65a57ddc54f51a9954d1",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/462799293f9e4fdf234951b1eeda4939f0034ff1/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/462799293f9e4fdf234951b1eeda4939f0034ff1/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=462799293f9e4fdf234951b1eeda4939f0034ff1",
        "patch": "@@ -60,6 +60,11 @@ class Sock\n      */\n     virtual Sock& operator=(Sock&& other);\n \n+    /**\n+     * Check whether *this owns a socket.\n+     */\n+    virtual explicit operator bool() const;\n+\n     /**\n      * Get the value of the contained socket.\n      * @return socket or INVALID_SOCKET if empty"
      }
    ]
  },
  {
    "sha": "7cec5ea86c426c34ceab40e7ab2795e844f3ebbc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2VjNWVhODZjNDI2YzM0Y2VhYjQwZTdhYjI3OTVlODQ0ZjNlYmJj",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T13:11:20Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-16T14:32:19Z"
      },
      "message": "net: change GetBindAddress() to take Sock argument\n\nThis avoids the direct call to `getsockname()` and allows mocking.",
      "tree": {
        "sha": "5246bf89f4521a8e60243699284e32c11a7bbf49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5246bf89f4521a8e60243699284e32c11a7bbf49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cec5ea86c426c34ceab40e7ab2795e844f3ebbc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB5n/UACgkQVN8G9ktV\ny79CDR//UXgnYIZ0qP2uj141X07leO/CPiL9H7qb0+uWwfrzZs/eLZjwUXfTRnJ5\nar7KdgJhjjAeniwCFNRGIh2kiG9FNp0LI5PMz76gNbinSiM2f8yxpz2lOAc5Aott\ncUuhaxU9a7vCji3oQB/dREBJ6kRMXTEJByy79LVTgFs0mf8reygaMPDqduRv3YjR\nTovFYTwUmqHt7F3wRpfyGZ3O88NLxovaEabaRfqIanjUdqL6V0iyFb4tNTVZNUpJ\nD//nGKrCyNs3Jmo2w1sSAENdOEO/fhiwsFu9PiKAEw/GTQkVBiV50gkl/qnofhRX\n7FlThZksyJGZWreCu0MiTQB8UZb+n8QcifX2eiQcfVL7iZgucQ/7i31yc6XXd4bL\nWth6SER68LfLgPkO4an1bDIfSsIMnfNDfc+ZnXtuSjzvYFafTkAoeX+IKPqZAwMk\nKb5c3W+yzat+ZfFBUQwhPFxCh1F/5v6xeRwQJ8GFScvXmcM1I5EggE/w7YjCcTYt\nJ+CAhWm7I+8lNOriZ+NhtIr7MHagiBdiyBwFknprpnNlvd/6BMCAk5N4YNaanMOp\nDZ1L+KAqUVUEjFamsA5EBkPhZ3FTZ7Y7YcLotdf0cCPfEuM+N3+CwBWJb0TmyZUP\naNZZjiPMVMK6im+HAJKnvo36WIzj52noB/Ug7pAM8KFG61AqWdCjIahAXfazdrNL\nd+a6hggbA/bLPHwcp8/gF5EdS9QqTSN3PvWoLUjgVDq2HY+Q0dUGTWz3y+HAz8Df\nQaEhHaByuwk/S3uxY0I52uYWjMN4lfAFqMwP81YKEdH4R1xwFdf3S57ckQKZAw6M\n2ZmHS79o8hnYtuI9IMEQdYVL16Is7nxsc9DkwjzZrDMFCfQ7LTPlmf4trp9dAjB4\nDloX/rLoTwBXHIvclLOOr982Av0ZgnII1T+8m+kjEA3ggva8fnmPvFC0CFygKmGd\n50lTL7g1FQFkgLMNdSBe7LxyPvKi4ZzEEn7toYzkd11lnun8f2NINzS5Vc4hXa+Q\nIfbME6OLf4nWFmTwktW8JMb/v7bqykkjzxFd9YJMIqcLjR0Jm9OBgL92KInIrjmg\niQPDdFAypCqd1QSVEDtZhSL8xN5SwyXWqUV6k7Kf3aoh19ud8clXnwe5jah2A0HR\n63vEYo/FG/qd5V3j6ZC8oDQSQDVTnZ6gM94g9LSLKTxHMxGiviTfd/NthnKfkiJh\n93SOUhhH1LNvbavAixKeKXfXsJb/LswDizBBel0VuUCYKUO35feFzbnGuKU4UbSJ\nSqTfXXkizh1eZ/aKTrVu6TTG1CQDHT9emHZHQGgy96IHqtioUyISYPJHOYonD8Wz\nhjj8zP2oaZ658MRh+Y2o13rrcNHK5Q==\n=050/\n-----END PGP SIGNATURE-----",
        "payload": "tree 5246bf89f4521a8e60243699284e32c11a7bbf49\nparent 462799293f9e4fdf234951b1eeda4939f0034ff1\nauthor Vasil Dimov <vd@FreeBSD.org> 1618319480 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618583539 +0200\n\nnet: change GetBindAddress() to take Sock argument\n\nThis avoids the direct call to `getsockname()` and allows mocking.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cec5ea86c426c34ceab40e7ab2795e844f3ebbc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cec5ea86c426c34ceab40e7ab2795e844f3ebbc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cec5ea86c426c34ceab40e7ab2795e844f3ebbc/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "462799293f9e4fdf234951b1eeda4939f0034ff1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/462799293f9e4fdf234951b1eeda4939f0034ff1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/462799293f9e4fdf234951b1eeda4939f0034ff1"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "41d79ffcbd4b5503bdfb798b34b75da281e182b3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cec5ea86c426c34ceab40e7ab2795e844f3ebbc/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cec5ea86c426c34ceab40e7ab2795e844f3ebbc/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=7cec5ea86c426c34ceab40e7ab2795e844f3ebbc",
        "patch": "@@ -361,13 +361,13 @@ bool CConnman::CheckIncomingNonce(uint64_t nonce)\n }\n \n /** Get the bind address for a socket as CAddress */\n-static CAddress GetBindAddress(SOCKET sock)\n+static CAddress GetBindAddress(const Sock& sock)\n {\n     CAddress addr_bind;\n     struct sockaddr_storage sockaddr_bind;\n     socklen_t sockaddr_bind_len = sizeof(sockaddr_bind);\n-    if (sock != INVALID_SOCKET) {\n-        if (!getsockname(sock, (struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n+    if (sock) {\n+        if (!sock.GetSockName((struct sockaddr*)&sockaddr_bind, &sockaddr_bind_len)) {\n             addr_bind.SetSockAddr((const struct sockaddr*)&sockaddr_bind);\n         } else {\n             LogPrint(BCLog::NET, \"Warning: getsockname failed\\n\");\n@@ -481,7 +481,7 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n     NodeId id = GetNewNodeId();\n     uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n     if (!addr_bind.IsValid()) {\n-        addr_bind = GetBindAddress(sock->Get());\n+        addr_bind = GetBindAddress(*sock);\n     }\n     CNode* pnode = new CNode(id, nLocalServices, sock->Release(), addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, addr_bind, pszDest ? pszDest : \"\", conn_type, /* inbound_onion */ false);\n     pnode->AddRef();\n@@ -1061,7 +1061,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n \n     auto sock = std::make_unique<Sock>(hSocket);\n \n-    const CAddress addr_bind = GetBindAddress(hSocket);\n+    const CAddress addr_bind = GetBindAddress(*sock);\n \n     NetPermissionFlags permissionFlags = NetPermissionFlags::PF_NONE;\n     hListenSocket.AddSocketPermissionFlags(permissionFlags);"
      }
    ]
  },
  {
    "sha": "a0e2ff0a087ab59b3c411d4650d241b621b951c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGUyZmYwYTA4N2FiNTliM2M0MTFkNDY1MGQyNDFiNjIxYjk1MWMy",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T14:31:04Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-19T12:41:10Z"
      },
      "message": "net: add new method Sock::Bind() that wraps bind()\n\nThis will help to increase `Sock` usage and make more code mockable.",
      "tree": {
        "sha": "a2537344ea5eb42201e998d4ecff01ff4439a0dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2537344ea5eb42201e998d4ecff01ff4439a0dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0e2ff0a087ab59b3c411d4650d241b621b951c2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB9emcACgkQVN8G9ktV\ny79GgR//c9defyxoC3t5C35zKNsNpNbh8ChNZ6bifiiAfYP18013TCXJMzMvnAtp\nSzT482CFRJ+Vw2whbj8AqXw7mk4POTNJWaZ86zKpmHfICQaDfYzQF9gjPi5qlRaJ\nAjjyT1Nj+zxMXNNHpHE2rOn2kdH8tK+zCfc5G7pKs0pHo038VEU6s8QTN/n4GE/I\nbvoNBBVt71IT1GGi7CKMkPmewu7yZJunDCrlzY3GG2Vaa5tXI6ynq/+AwuDttVme\nEnCFpldDmocBBgYXqgUYtqTU/e32sLBLdh/8PX9sEEcwzOYXBR7IuUZHb6eUgW00\ntTNsr8IIsmc8NSyaGqeIJbRWw3Nq7YjrAyH5LwnYUpekS8kqUtHUekskjfMtWPcH\n1s6qGyE96JjgIoFNdINMDH8fAXtHCYxSE3EdzeaNwW7WfZbfMedNSHnZaiY09GGV\nlZopB1xz8Ay3WbqJsELN/dbcJVxA0iDeB0+ffQ7XmBzEi74VUAto3dIk5WKKVveT\nxlw2Fq38W5sXXkamknt9xtiNq44caIJlT7Xfm3YwGZ6m9HZbE+Uk3jYv4S42CkpK\nA2aVcLegjPHsEYjK98+ByRin8C6jenVt9UUygIdZWQwAe2mpYs+EGzKQbDFluuNr\noS4y+8+2Oqkr7JnXvAQkrcTK0NV6ol4D5GPuOu55XYDKF1BnDpnBLlfHRXLfvkrr\nau8jIXSZdRFvyMxecYiXxruP7d5UNdoCQPsBRFwpHve+jH73XIlPdEdRNAnxUJMJ\nsiWFFd/jaxEt31X8wGThBaPJ6r8Udo8eFibvJWjEaxxletyuScY6lmj1g84BuPg+\nNXMp57WGAONVWEefoGOy0Hh276aWvwsNSO4+X3NbsyNkKnt3yfswTA26xxEYm0br\nOWoUAd0nJqT/ftU1dX0Ut3gMLNNbh18D+CCmOZFVZjTcP4rac8Oo1BcoYAvzmy88\n41wPg3EueYnsFyykbUc37zCzgvyHaJFoG7n4AjZHse/DD/3fmUJOdgi5YKbrlr70\ncTPefAN3jbenbTL8hMn4eBBueNFUyxBwf9rT/trvxKMLdGS/GUH28p1ev4kNeOPI\np/4XQFUa0kdzUb8IHhj5idDeSy7tWaG4HJNLo8c19UNH9G4ERulGsIg3pwtqqtU3\nhlmxNrHJXjUbS5u3tfB3Ndfn3i0ZVrCLNntCysI2gxaLi5ZnDQ8qKtatykOES5g+\nnTqA/FSkWDAqblMw9XqPf/FDY4jsDrtzaGdOr6H5iqY3/Y3voxL5oOp8y75KtLIH\nliAVYRhrPE5kD6RomI2oneMuNWip6VXSadEWwKS3YVmwREVJs90eSiAcQ2v2KfvR\nI3jr0nI+EfBZrGw280Hao0ZNnew4aw==\n=CcMx\n-----END PGP SIGNATURE-----",
        "payload": "tree a2537344ea5eb42201e998d4ecff01ff4439a0dd\nparent 7cec5ea86c426c34ceab40e7ab2795e844f3ebbc\nauthor Vasil Dimov <vd@FreeBSD.org> 1618324264 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618836070 +0200\n\nnet: add new method Sock::Bind() that wraps bind()\n\nThis will help to increase `Sock` usage and make more code mockable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0e2ff0a087ab59b3c411d4650d241b621b951c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0e2ff0a087ab59b3c411d4650d241b621b951c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0e2ff0a087ab59b3c411d4650d241b621b951c2/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cec5ea86c426c34ceab40e7ab2795e844f3ebbc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cec5ea86c426c34ceab40e7ab2795e844f3ebbc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cec5ea86c426c34ceab40e7ab2795e844f3ebbc"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 31,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6ae381ee09d29c7fa5ef3ff5d1fe1215a0e7dc72",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0e2ff0a087ab59b3c411d4650d241b621b951c2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0e2ff0a087ab59b3c411d4650d241b621b951c2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a0e2ff0a087ab59b3c411d4650d241b621b951c2",
        "patch": "@@ -2302,8 +2302,7 @@ bool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError,\n #endif\n     }\n \n-    if (::bind(sock->Get(), (struct sockaddr*)&sockaddr, len) == SOCKET_ERROR)\n-    {\n+    if (sock->Bind(reinterpret_cast<struct sockaddr*>(&sockaddr), len) == SOCKET_ERROR) {\n         int nErr = WSAGetLastError();\n         if (nErr == WSAEADDRINUSE)\n             strError = strprintf(_(\"Unable to bind to %s on this computer. %s is probably already running.\"), addrBind.ToString(), PACKAGE_NAME);"
      },
      {
        "sha": "38c48c14a9f2148303a002c15e837bcbc0510a4e",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0e2ff0a087ab59b3c411d4650d241b621b951c2/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0e2ff0a087ab59b3c411d4650d241b621b951c2/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=a0e2ff0a087ab59b3c411d4650d241b621b951c2",
        "patch": "@@ -152,6 +152,21 @@ int FuzzedSock::Connect(const sockaddr*, socklen_t) const\n     return 0;\n }\n \n+int FuzzedSock::Bind(const sockaddr*, socklen_t) const\n+{\n+    constexpr std::array bind_errnos{\n+        EACCES,\n+        EADDRINUSE,\n+        EADDRNOTAVAIL,\n+        EAGAIN,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, bind_errnos);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n int FuzzedSock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const\n {\n     constexpr std::array getsockopt_errnos{"
      },
      {
        "sha": "11c69a54225383f30142dd4a3587feb38a5e4259",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0e2ff0a087ab59b3c411d4650d241b621b951c2/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0e2ff0a087ab59b3c411d4650d241b621b951c2/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=a0e2ff0a087ab59b3c411d4650d241b621b951c2",
        "patch": "@@ -596,6 +596,8 @@ class FuzzedSock : public Sock\n \n     int Connect(const sockaddr*, socklen_t) const override;\n \n+    int Bind(const sockaddr*, socklen_t) const override;\n+\n     int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;\n \n     int SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt_len) const override;"
      },
      {
        "sha": "d57c9fd878bc50825c970ab1def59c6730f4eb9b",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0e2ff0a087ab59b3c411d4650d241b621b951c2/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0e2ff0a087ab59b3c411d4650d241b621b951c2/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=a0e2ff0a087ab59b3c411d4650d241b621b951c2",
        "patch": "@@ -108,6 +108,8 @@ class StaticContentsSock : public Sock\n \n     int Connect(const sockaddr*, socklen_t) const override { return 0; }\n \n+    int Bind(const sockaddr*, socklen_t) const override { return 0; }\n+\n     int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override\n     {\n         std::memset(opt_val, 0x0, *opt_len);"
      },
      {
        "sha": "e5b1fc1c296a70cdf9d9e821506e1743eda2fc2c",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0e2ff0a087ab59b3c411d4650d241b621b951c2/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0e2ff0a087ab59b3c411d4650d241b621b951c2/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=a0e2ff0a087ab59b3c411d4650d241b621b951c2",
        "patch": "@@ -76,6 +76,11 @@ int Sock::Connect(const sockaddr* addr, socklen_t addr_len) const\n     return connect(m_socket, addr, addr_len);\n }\n \n+int Sock::Bind(const sockaddr* addr, socklen_t addr_len) const\n+{\n+    return bind(m_socket, addr, addr_len);\n+}\n+\n int Sock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const\n {\n     return getsockopt(m_socket, level, opt_name, static_cast<char*>(opt_val), opt_len);"
      },
      {
        "sha": "d5c62786f45da1aae30f97bf84349cf2c31f16f0",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0e2ff0a087ab59b3c411d4650d241b621b951c2/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0e2ff0a087ab59b3c411d4650d241b621b951c2/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=a0e2ff0a087ab59b3c411d4650d241b621b951c2",
        "patch": "@@ -101,6 +101,12 @@ class Sock\n      */\n     virtual int Connect(const sockaddr* addr, socklen_t addr_len) const;\n \n+    /**\n+     * bind(2) wrapper. Equivalent to `bind(this->Get(), addr, addr_len)`. Code that uses this\n+     * wrapper can be unit tested if this method is overridden by a mock Sock implementation.\n+     */\n+    virtual int Bind(const sockaddr* addr, socklen_t addr_len) const;\n+\n     /**\n      * getsockopt(2) wrapper. Equivalent to\n      * `getsockopt(this->Get(), level, opt_name, opt_val, opt_len)`. Code that uses this"
      }
    ]
  },
  {
    "sha": "4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGMyMWM4YjBmYjZmOGM3YzFhOTIzYmI0M2RlMmM0ZTQ1YjRhZTJm",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-13T14:43:04Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-19T12:41:11Z"
      },
      "message": "net: add new method Sock::Listen() that wraps listen()\n\nThis will help to increase `Sock` usage and make more code mockable.",
      "tree": {
        "sha": "cb8cfc77c9d88a4bb86808ce9c273c7716d9ebad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb8cfc77c9d88a4bb86808ce9c273c7716d9ebad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmB9emcACgkQVN8G9ktV\ny79SXSAAkU1tB7edN4ngy/1Fidm6O12EO3UwXwn4Ftiai9wBBA7rTcYLUzYN3WDv\nbNgWU6wceXgDyhVnJB15Rgi5/qjH8H6NPethGS+NXaVrsiBmNELbrRoRR+FzXRzh\nPlhsnstOTXiT2MfGulvMUhq/RXP9eoY7bHVgaFZWfKYGuKTVC8xm7TOKKiErdJuS\nQH7ggt4eCeMk9C56/q4njWKeVPCNJAkrNglSYpTLP92N+vzN4gMWTFdHxdjis51A\n4e23pw39kWnphuESCeO4G7mm8zkMVbUulond3fPjehZLUlsZfRWtAMcidQJGju6V\nxn+TY5OKRRS7XktG2YAe3FTyHuBmYPWyFcUlWkg/MrOl64+h3xZYWDaKO4IcSS9g\nL5+3NotJ89nRmKpDtnlMWbwqPwh9E7USnV8u/LPXhzTe2jNFS1+UyiQOk6/aMmrw\nZ48n2Ewf4Jsl9KNW+l0TbmUVp3et8V2/R7xJ7Qd8fw+15uMC2MfEYgzbnW5tjE3c\npiPSUsSYbBhisAUYMedHBj1uxMR0sy8RgG/1oPTZjFnIXk9hliZ09aZXMGCX9ebF\nIcgv1mUs2V37044FMjgJ2M3bbt660GxLhI4HJF5HtztwUhR8LlQjojcQ6jyugd/y\n2+mqhcL+2R9kj+SSvrrOJYVIIF37Ua/AVtOjgUX+YHxtNa/Cp1g8YAfGifwrQctA\nv3U/zpKkiZYROKSfNYvdSXtVtTM/CmcEiau19TMtP8bulqolrwbQB6fd8bljIFY7\ndw2UDWej5At4++usOWs+gQ8CKPX5lWYw5z5vbWrsotgxhycVqjuUMu16sjzXUpGc\n64QCVhHg7/v1ISKDlcwKcJ75YgH2SRgK2gZqMCf3EioOHTywEi6R3p87uRos4Lud\nys4JNP0eMSRm5er/VaMvLmbCb2fSmd2yyQ/WJk3CZ/1+pTvGW6FPFE2YtUcEx5Q6\n9B8XOpAfMPIVGOc3xIMo+gWdV1RSxL5GyJCuh/a0Ze8ymCDJOnbRy07A3WGgFzlz\n1oVRLK4k514Pq3PVH1sB5JcvHUIM8k3whyH5MRaAdzMP2TflbYuAVqMSrO5qR4ST\ngF/iA1+Ax/I6n2loMEozvJeADHkjk0cjQUPGDmbjjduux8E/UdMpTqReW6s9OvSB\n4tLKIZyNLxDRby8T7pI+Dc9mZoRqXy8mtH5JajsiCcKPwIR/JMGBDrgmGa8zh7Xi\nQz4BPCdMIUI5VWNuDFYkj4wvp4tTm5Faw9Niitr1CpOLWfgRJQD7jdRTMDIkCoWB\nB/78Bf4nMeYNMlGHCOX/t5zqiXbQR5Y/yLf7KZwzRvNPmupvzNyev0YpyxdEzPNY\nAhLLpEojxvmRJ0lruYaORlK5YrK3BQ==\n=IyEp\n-----END PGP SIGNATURE-----",
        "payload": "tree cb8cfc77c9d88a4bb86808ce9c273c7716d9ebad\nparent a0e2ff0a087ab59b3c411d4650d241b621b951c2\nauthor Vasil Dimov <vd@FreeBSD.org> 1618324984 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1618836071 +0200\n\nnet: add new method Sock::Listen() that wraps listen()\n\nThis will help to increase `Sock` usage and make more code mockable.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0e2ff0a087ab59b3c411d4650d241b621b951c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0e2ff0a087ab59b3c411d4650d241b621b951c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0e2ff0a087ab59b3c411d4650d241b621b951c2"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 29,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2fd058917936b89503941c00fcbca6ec7a8edb7f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f",
        "patch": "@@ -2314,7 +2314,7 @@ bool CConnman::BindListenPort(const CService& addrBind, bilingual_str& strError,\n     LogPrintf(\"Bound to %s\\n\", addrBind.ToString());\n \n     // Listen for incoming connections\n-    if (listen(sock->Get(), SOMAXCONN) == SOCKET_ERROR)\n+    if (sock->Listen(SOMAXCONN) == SOCKET_ERROR)\n     {\n         strError = strprintf(_(\"Error: Listening for incoming connections failed (listen returned error %s)\"), NetworkErrorString(WSAGetLastError()));\n         LogPrintf(\"%s\\n\", strError.original);"
      },
      {
        "sha": "3a802f11bc2b5cc0c61084a4d779f73b7d456e87",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f",
        "patch": "@@ -167,6 +167,19 @@ int FuzzedSock::Bind(const sockaddr*, socklen_t) const\n     return 0;\n }\n \n+int FuzzedSock::Listen(int) const\n+{\n+    constexpr std::array listen_errnos{\n+        EINVAL,\n+        EOPNOTSUPP,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, listen_errnos);\n+        return -1;\n+    }\n+    return 0;\n+}\n+\n int FuzzedSock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const\n {\n     constexpr std::array getsockopt_errnos{"
      },
      {
        "sha": "d82842590a8486d21e12f7536742490bc4920719",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f",
        "patch": "@@ -598,6 +598,8 @@ class FuzzedSock : public Sock\n \n     int Bind(const sockaddr*, socklen_t) const override;\n \n+    int Listen(int backlog) const override;\n+\n     int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override;\n \n     int SetSockOpt(int level, int opt_name, const void* opt_val, socklen_t opt_len) const override;"
      },
      {
        "sha": "7f54f9387b77950d412dc1e589356bd61a75917b",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f",
        "patch": "@@ -110,6 +110,8 @@ class StaticContentsSock : public Sock\n \n     int Bind(const sockaddr*, socklen_t) const override { return 0; }\n \n+    int Listen(int) const override { return 0; }\n+\n     int GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const override\n     {\n         std::memset(opt_val, 0x0, *opt_len);"
      },
      {
        "sha": "e560f5b902f2853b41310f0635543b9e8452eb14",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f",
        "patch": "@@ -81,6 +81,11 @@ int Sock::Bind(const sockaddr* addr, socklen_t addr_len) const\n     return bind(m_socket, addr, addr_len);\n }\n \n+int Sock::Listen(int backlog) const\n+{\n+    return listen(m_socket, backlog);\n+}\n+\n int Sock::GetSockOpt(int level, int opt_name, void* opt_val, socklen_t* opt_len) const\n {\n     return getsockopt(m_socket, level, opt_name, static_cast<char*>(opt_val), opt_len);"
      },
      {
        "sha": "0ce2decd8f68176985fd5e6252f4cee107b9525d",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f",
        "patch": "@@ -107,6 +107,12 @@ class Sock\n      */\n     virtual int Bind(const sockaddr* addr, socklen_t addr_len) const;\n \n+    /**\n+     * listen(2) wrapper. Equivalent to `listen(this->Get(), backlog)`. Code that uses this\n+     * wrapper can be unit tested if this method is overridden by a mock Sock implementation.\n+     */\n+    virtual int Listen(int backlog) const;\n+\n     /**\n      * getsockopt(2) wrapper. Equivalent to\n      * `getsockopt(this->Get(), level, opt_name, opt_val, opt_len)`. Code that uses this"
      }
    ]
  },
  {
    "sha": "67097b29c015a8344ff62fa9f284330a2749076a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzA5N2IyOWMwMTVhODM0NGZmNjJmYTlmMjg0MzMwYTI3NDkwNzZh",
    "commit": {
      "author": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-19T09:35:09Z"
      },
      "committer": {
        "name": "Vasil Dimov",
        "email": "vd@FreeBSD.org",
        "date": "2021-04-21T12:50:32Z"
      },
      "message": "net: convert standalone SetSocketNonBlocking() to Sock::SetNonBlocking()\n\nThis further encapsulates syscalls inside the `Sock` class.\n\nCo-authored-by: practicalswift <practicalswift@users.noreply.github.com>",
      "tree": {
        "sha": "efc092e2619895bd5f0952f067cc07e01b34b265",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efc092e2619895bd5f0952f067cc07e01b34b265"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67097b29c015a8344ff62fa9f284330a2749076a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQQzBAABCAAdFiEE5k2NRWFNsHVF2czBVN8G9ktVy78FAmCAH5sACgkQVN8G9ktV\ny7/XTh//V3RHojmarH/kIeIlT8X0PmmOgYfwj94HtOBQ3BxteAzg+RVBV27qdpDX\nWdif58SXgWswURYX992QBt3KQe+GOt6bb2DsLGla2f0jgG4It42h+SDaFG2SC2TB\najrqbbglmw40y85d1VwyuMAO05Q/xFcUz2i8c+r+4K5L+xhteW30WuSOwGbwtuOl\ndNcZOc0KKrbAAqvG70JO0gCsuaccsSzF+qYtA24cPn6b1m2iSl8eGYqmZ6zB45dC\nyMu0Pq3x4MRng6l6bLACwd+H7x6GHQDNr5HrKaVEYwpEcKdIC228rA1gcazaTHIP\nGwQlyZQ05fVw6YyVmkaS8CcGnFRSTjnw7UUgjCU04y/xenjlP+Q5n7H/98fRdMWH\nmJ1AkBYdozW4uuoFeo4on1jBCSNgpjGBR5ssja/qtryAQkxxD7uOIhKwVL5VyTxr\nU8Ekuzd1OnQxbQIIkFpVAqwyJ3FO3Bf5EIKtrzmsMDxny0TA2aOy/kv7zqbdTEkM\n4/PkT+Jun1HB2ROrPMRZwo4EjnlJbMmxeqoZAq6bjrIVdEB9udIdV8nDy/97+xoV\nHLB1Ot9Mw76Led+pn6r3UOV1AW+YDsYjWUMRBNOu1ZE9XRYlm6bW5SBVoI3weF9G\nitYir3249CRAYL5QGNlHyv45qkzNgjSToTO3heleb6/xNu6EIlltWV3VN46N/Vt0\njFab3MPaXqOpNUyWP//zgfPiWgQc950YOGgbAa2i7PQQdJuQ7p0zwPlCNup/oz7q\nZHVXWuZORFIYRrXjO/UghANB8mkK62rVq7iEnM29qenE+05D42LUsFQiK5JwaPKn\n8xfQnwOYn3YQxqQv69t+zbs0yQCDTSkxopXIamP2n74Et4Kf3RJP7O5QBjQh+X/S\nJxzX/INxjVNxXP/glZnt7/J4XKSiTPikRP0JLEodoedHXJ8v9305Rhi+GtQOXm4L\n0GOhsJnxaLPMa2h+aX9s6836ZbWwb1Y9C01WVpR+xUG/3jUirq8TkD4U4+N43i72\n5EUdK+ZirWz8hCeKl3+gIcKr7vdgIIFJrnpPfgFjuDkXk7Nq+DXyRb0+8FtZP1N5\nlN9/O708V4NPAdaa9YKNTjmw5fsfJRpfkWSEmqsJOOM9sQtr1B+bRg0EhdLr98/Q\n/D440MO3CcxqGvZTvxKQoH4rcjDZXcACkv7C0fWIS9xf76YfNqFp7qbh1k/43aRp\nRdEdFv2yjgbywmselg8PKTNk9TfTQMCJ+WIPHTmF89c2kGD23Wkg+q2mTFk5N2Gv\nOnpDorQwpmUFYAtBhERqk6yUY3QiEVNxTkl48GW5LHor2tT3UaygPrDQDBq5IPqX\nDmJVB1knGjGbw9ydgPFDpaoTSvnR5w==\n=NDp4\n-----END PGP SIGNATURE-----",
        "payload": "tree efc092e2619895bd5f0952f067cc07e01b34b265\nparent 4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f\nauthor Vasil Dimov <vd@FreeBSD.org> 1618824909 +0200\ncommitter Vasil Dimov <vd@FreeBSD.org> 1619009432 +0200\n\nnet: convert standalone SetSocketNonBlocking() to Sock::SetNonBlocking()\n\nThis further encapsulates syscalls inside the `Sock` class.\n\nCo-authored-by: practicalswift <practicalswift@users.noreply.github.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67097b29c015a8344ff62fa9f284330a2749076a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67097b29c015a8344ff62fa9f284330a2749076a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67097b29c015a8344ff62fa9f284330a2749076a/comments",
    "author": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4dc21c8b0fb6f8c7c1a923bb43de2c4e45b4ae2f"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 44,
      "deletions": 31
    },
    "files": [
      {
        "sha": "259148aa63d49cbd79e2ad754dad2b8ede4cb5f0",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 30,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67097b29c015a8344ff62fa9f284330a2749076a/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67097b29c015a8344ff62fa9f284330a2749076a/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=67097b29c015a8344ff62fa9f284330a2749076a",
        "patch": "@@ -303,8 +303,7 @@ enum class IntrRecvError {\n  *          read.\n  *\n  * @see This function can be interrupted by calling InterruptSocks5(bool).\n- *      Sockets can be made non-blocking with SetSocketNonBlocking(const\n- *      SOCKET&, bool).\n+ *      Sockets can be made non-blocking with Sock::SetNonBlocking().\n  */\n static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const Sock& sock)\n {\n@@ -520,7 +519,7 @@ std::unique_ptr<Sock> CreateSockTCP(const CService& address_family)\n     }\n \n     // Set the non-blocking option on the socket.\n-    if (!SetSocketNonBlocking(sock->Get(), true)) {\n+    if (!sock->SetNonBlocking()) {\n         LogPrintf(\"Error setting socket to non-blocking: %s\\n\", NetworkErrorString(WSAGetLastError()));\n         return nullptr;\n     }\n@@ -718,33 +717,6 @@ bool LookupSubNet(const std::string& strSubnet, CSubNet& ret, DNSLookupFn dns_lo\n     return false;\n }\n \n-bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking)\n-{\n-    if (fNonBlocking) {\n-#ifdef WIN32\n-        u_long nOne = 1;\n-        if (ioctlsocket(hSocket, FIONBIO, &nOne) == SOCKET_ERROR) {\n-#else\n-        int fFlags = fcntl(hSocket, F_GETFL, 0);\n-        if (fcntl(hSocket, F_SETFL, fFlags | O_NONBLOCK) == SOCKET_ERROR) {\n-#endif\n-            return false;\n-        }\n-    } else {\n-#ifdef WIN32\n-        u_long nZero = 0;\n-        if (ioctlsocket(hSocket, FIONBIO, &nZero) == SOCKET_ERROR) {\n-#else\n-        int fFlags = fcntl(hSocket, F_GETFL, 0);\n-        if (fcntl(hSocket, F_SETFL, fFlags & ~O_NONBLOCK) == SOCKET_ERROR) {\n-#endif\n-            return false;\n-        }\n-    }\n-\n-    return true;\n-}\n-\n void InterruptSocks5(bool interrupt)\n {\n     interruptSocks5Recv = interrupt;"
      },
      {
        "sha": "d0e36a5e924bcc4a52c55672f1c035b7781719e7",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67097b29c015a8344ff62fa9f284330a2749076a/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67097b29c015a8344ff62fa9f284330a2749076a/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=67097b29c015a8344ff62fa9f284330a2749076a",
        "patch": "@@ -221,7 +221,6 @@ bool ConnectSocketDirectly(const CService &addrConnect, const Sock& sock, int nT\n bool ConnectThroughProxy(const proxyType& proxy, const std::string& strDest, uint16_t port, const Sock& sock, int nTimeout, bool& outProxyConnectionFailed);\n \n /** Disable or enable blocking-mode for a socket */\n-bool SetSocketNonBlocking(const SOCKET& hSocket, bool fNonBlocking);\n void InterruptSocks5(bool interrupt);\n \n /**"
      },
      {
        "sha": "f16364a09306d24786218483002dd90e285528d9",
        "filename": "src/test/fuzz/util.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67097b29c015a8344ff62fa9f284330a2749076a/src/test/fuzz/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67097b29c015a8344ff62fa9f284330a2749076a/src/test/fuzz/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.cpp?ref=67097b29c015a8344ff62fa9f284330a2749076a",
        "patch": "@@ -226,6 +226,19 @@ int FuzzedSock::GetSockName(sockaddr* name, socklen_t* name_len) const\n     return 0;\n }\n \n+bool FuzzedSock::SetNonBlocking() const\n+{\n+    constexpr std::array setnonblocking_errnos{\n+        EBADF,\n+        EPERM,\n+    };\n+    if (m_fuzzed_data_provider.ConsumeBool()) {\n+        SetFuzzedErrNo(m_fuzzed_data_provider, setnonblocking_errnos);\n+        return false;\n+    }\n+    return true;\n+}\n+\n bool FuzzedSock::IsSelectable() const\n {\n     return m_selectable;"
      },
      {
        "sha": "4b5ac190bbdc2629b518ccdf0c660cddc6ad5e35",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67097b29c015a8344ff62fa9f284330a2749076a/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67097b29c015a8344ff62fa9f284330a2749076a/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=67097b29c015a8344ff62fa9f284330a2749076a",
        "patch": "@@ -606,6 +606,8 @@ class FuzzedSock : public Sock\n \n     int GetSockName(sockaddr* name, socklen_t* name_len) const override;\n \n+    bool SetNonBlocking() const override;\n+\n     bool IsSelectable() const override;\n \n     bool Wait(std::chrono::milliseconds timeout, Event requested, Event* occurred = nullptr) const override;"
      },
      {
        "sha": "52d6b62579c9fe8330ec23a9ecc145cb575498a8",
        "filename": "src/test/util/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67097b29c015a8344ff62fa9f284330a2749076a/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67097b29c015a8344ff62fa9f284330a2749076a/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=67097b29c015a8344ff62fa9f284330a2749076a",
        "patch": "@@ -126,6 +126,8 @@ class StaticContentsSock : public Sock\n         return 0;\n     }\n \n+    bool SetNonBlocking() const override { return true; }\n+\n     bool IsSelectable() const override { return true; }\n \n     bool Wait(std::chrono::milliseconds timeout,"
      },
      {
        "sha": "0a49bc64603b5eaabf5403c5eeddbfb4509384a7",
        "filename": "src/util/sock.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67097b29c015a8344ff62fa9f284330a2749076a/src/util/sock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67097b29c015a8344ff62fa9f284330a2749076a/src/util/sock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.cpp?ref=67097b29c015a8344ff62fa9f284330a2749076a",
        "patch": "@@ -107,6 +107,25 @@ bool Sock::SetNoDelay() const\n     return SetSockOpt(IPPROTO_TCP, TCP_NODELAY, &on, sizeof(on)) == 0;\n }\n \n+bool Sock::SetNonBlocking() const\n+{\n+#ifdef WIN32\n+    u_long on{1};\n+    if (ioctlsocket(m_socket, FIONBIO, &on) == SOCKET_ERROR) {\n+        return false;\n+    }\n+#else\n+    const int flags{fcntl(m_socket, F_GETFL, 0)};\n+    if (flags == SOCKET_ERROR) {\n+        return false;\n+    }\n+    if (fcntl(m_socket, F_SETFL, flags | O_NONBLOCK) == SOCKET_ERROR) {\n+        return false;\n+    }\n+#endif\n+    return true;\n+}\n+\n bool Sock::IsSelectable() const\n {\n #if defined(USE_POLL) || defined(WIN32)"
      },
      {
        "sha": "9e33b91594d8167819efeebb39e3a77c1c2e0cfd",
        "filename": "src/util/sock.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67097b29c015a8344ff62fa9f284330a2749076a/src/util/sock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67097b29c015a8344ff62fa9f284330a2749076a/src/util/sock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/sock.h?ref=67097b29c015a8344ff62fa9f284330a2749076a",
        "patch": "@@ -140,6 +140,12 @@ class Sock\n      */\n     [[nodiscard]] virtual bool SetNoDelay() const;\n \n+    /**\n+     * Set the non-blocking option on the socket.\n+     * @return true if set successfully\n+     */\n+    [[nodiscard]] virtual bool SetNonBlocking() const;\n+\n     /**\n      * Check if the underlying socket can be used for `select(2)` (or the `Wait()` method).\n      * @return true if selectable"
      }
    ]
  }
]