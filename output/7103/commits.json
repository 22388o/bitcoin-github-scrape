[
  {
    "sha": "4b89f01d727433f02cc8ff72799e0d0a7e6ceafe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Yjg5ZjAxZDcyNzQzM2YwMmNjOGZmNzI3OTllMGQwYTdlNmNlYWZl",
    "commit": {
      "author": {
        "name": "Ryan Havar",
        "email": "ryan@moneypot.com",
        "date": "2015-09-07T23:12:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-28T21:51:41Z"
      },
      "message": "Default fPayAtLeastCustomFee to false\n\nThis allows for much finer control of the transaction fees per kilobyte\nas it prevent small transactions using a fee that is more appropriate\nfor one that is of a kilobyte.\n\nThis also allows controlling the fee per kilobyte over rpc such that:\n\nbitcoin-cli settxfee `bitcoin-cli estimatefee 2`\n\nwould make sense, while currently it grossly fails often by a factor of x3",
      "tree": {
        "sha": "156b72a87ece4c80a792f4ac589f7b1a20c73331",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/156b72a87ece4c80a792f4ac589f7b1a20c73331"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe/comments",
    "author": null,
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d26289c9a7c77c7e5cecaafebe0231cb4d69fbe"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b062226dd9cf0c1b895a8308e06cc37bba684b46",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4b89f01d727433f02cc8ff72799e0d0a7e6ceafe",
        "patch": "@@ -41,7 +41,7 @@ CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n bool fSendFreeTransactions = DEFAULT_SEND_FREE_TRANSACTIONS;\n-bool fPayAtLeastCustomFee = true;\n+bool fPayAtLeastCustomFee = false;\n \n /**\n  * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)"
      }
    ]
  },
  {
    "sha": "fa506c0c9b3928843704c666909c0b0c5af2f9a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUwNmMwYzliMzkyODg0MzcwNGM2NjY5MDljMGIwYzVhZjJmOWEw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-21T10:49:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-11-28T21:52:13Z"
      },
      "message": "[wallet] Add rpc tests to verify fee calculations",
      "tree": {
        "sha": "21b92065661555e3eb35e5934954ef06b6d33252",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21b92065661555e3eb35e5934954ef06b6d33252"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa506c0c9b3928843704c666909c0b0c5af2f9a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa506c0c9b3928843704c666909c0b0c5af2f9a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa506c0c9b3928843704c666909c0b0c5af2f9a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa506c0c9b3928843704c666909c0b0c5af2f9a0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b89f01d727433f02cc8ff72799e0d0a7e6ceafe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b89f01d727433f02cc8ff72799e0d0a7e6ceafe"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 30,
      "deletions": 12
    },
    "files": [
      {
        "sha": "d9d5129f210399d88735d805d8451de08a262942",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa506c0c9b3928843704c666909c0b0c5af2f9a0/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa506c0c9b3928843704c666909c0b0c5af2f9a0/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=fa506c0c9b3928843704c666909c0b0c5af2f9a0",
        "patch": "@@ -67,6 +67,9 @@ def check_json_precision():\n     if satoshis != 2000000000000003:\n         raise RuntimeError(\"JSON encode/decode loses precision\")\n \n+def count_bytes(hex_string):\n+    return len(bytearray.fromhex(hex_string))\n+\n def sync_blocks(rpc_connections, wait=1):\n     \"\"\"\n     Wait until everybody has the same block count"
      },
      {
        "sha": "6f6bc3189527e667b56c4e66cc776e6e5311fd77",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 27,
        "deletions": 12,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa506c0c9b3928843704c666909c0b0c5af2f9a0/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa506c0c9b3928843704c666909c0b0c5af2f9a0/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=fa506c0c9b3928843704c666909c0b0c5af2f9a0",
        "patch": "@@ -24,6 +24,17 @@\n \n class WalletTest (BitcoinTestFramework):\n \n+    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n+        \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n+        fee = balance_with_fee - curr_balance\n+        target_fee = fee_per_byte * tx_size\n+        if fee < target_fee:\n+            raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n+        # allow the node's estimation to be at most 2 bytes off\n+        if fee > fee_per_byte * (tx_size + 2):\n+            raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n+        return curr_balance\n+\n     def setup_chain(self):\n         print(\"Initializing test directory \"+self.options.tmpdir)\n         initialize_chain_clean(self.options.tmpdir, 4)\n@@ -104,33 +115,37 @@ def run_test (self):\n \n         # Send 10 BTC normal\n         address = self.nodes[0].getnewaddress(\"test\")\n-        self.nodes[2].settxfee(Decimal('0.001'))\n+        fee_per_byte = Decimal('0.001') / 1000\n+        self.nodes[2].settxfee(fee_per_byte * 1000)\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('89.99900000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('10.00000000'))\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('90'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('79.99900000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('19.99900000'))\n+        node_2_bal -= Decimal('10')\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n+        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [])\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('69.99800000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('29.99900000'))\n+        node_0_bal += Decimal('10')\n+        node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n+        assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [address])\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000'))\n-        assert_equal(self.nodes[0].getbalance(), Decimal('39.99800000'))\n+        node_2_bal -= Decimal('10')\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal)\n+        node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n \n         # Test ResendWalletTransactions:\n         # Create a couple of transactions, then start up a fourth\n@@ -191,14 +206,14 @@ def run_test (self):\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         self.nodes[1].generate(1) #mine a block, tx should not be in there\n         self.sync_all()\n-        assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000')); #should not be changed because tx was not broadcasted\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal); #should not be changed because tx was not broadcasted\n \n         #now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(txObjNotBroadcasted['hex'])\n         self.nodes[1].generate(1)\n         self.sync_all()\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n-        assert_equal(self.nodes[2].getbalance(), Decimal('61.99800000')); #should not be\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal + Decimal('2')); #should not be\n \n         #create another tx\n         txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2);\n@@ -216,7 +231,7 @@ def run_test (self):\n         sync_blocks(self.nodes)\n \n         #tx should be added to balance because after restarting the nodes tx should be broadcastet\n-        assert_equal(self.nodes[2].getbalance(), Decimal('63.99800000')); #should not be\n+        assert_equal(self.nodes[2].getbalance(), node_2_bal + Decimal('4')); #should not be\n \n         #send a tx with value in a string (PR#6380 +)\n         txId  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), \"2\")"
      }
    ]
  }
]