[
  {
    "sha": "6a93312c88b5aff35105236cd8d13935e95ededc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTkzMzEyYzg4YjVhZmYzNTEwNTIzNmNkOGQxMzkzNWU5NWVkZWRj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-02T11:55:07Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-05T09:38:03Z"
      },
      "message": "Prefer initialization to assignment in constructors",
      "tree": {
        "sha": "b1318fa526b66b59557527458e84b4f218740eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1318fa526b66b59557527458e84b4f218740eb5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a93312c88b5aff35105236cd8d13935e95ededc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a93312c88b5aff35105236cd8d13935e95ededc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a93312c88b5aff35105236cd8d13935e95ededc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a93312c88b5aff35105236cd8d13935e95ededc/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c39fa34bfd90b1de0016ad45c207213bd03ecd75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c39fa34bfd90b1de0016ad45c207213bd03ecd75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c39fa34bfd90b1de0016ad45c207213bd03ecd75"
      }
    ],
    "stats": {
      "total": 81,
      "additions": 19,
      "deletions": 62
    },
    "files": [
      {
        "sha": "096fefad21d223332711caef3b2f3f924922db84",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a93312c88b5aff35105236cd8d13935e95ededc/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a93312c88b5aff35105236cd8d13935e95ededc/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6a93312c88b5aff35105236cd8d13935e95ededc",
        "patch": "@@ -2701,6 +2701,7 @@ int CConnman::GetBestHeight() const\n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n \n CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string& addrNameIn, bool fInboundIn) :\n+    hSocket(hSocketIn),\n     nTimeConnected(GetSystemTimeInSeconds()),\n     addr(addrIn),\n     addrBind(addrBindIn),\n@@ -2715,7 +2716,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nSendVersion(0)\n {\n     nServices = NODE_NONE;\n-    hSocket = hSocketIn;\n     nRecvVersion = INIT_PROTO_VERSION;\n     nLastSend = 0;\n     nLastRecv = 0;"
      },
      {
        "sha": "e7be6eec2bf15c7d5b276552846f37ea972ad78a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a93312c88b5aff35105236cd8d13935e95ededc/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a93312c88b5aff35105236cd8d13935e95ededc/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6a93312c88b5aff35105236cd8d13935e95ededc",
        "patch": "@@ -3218,10 +3218,7 @@ class CompareInvMempoolOrder\n {\n     CTxMemPool *mp;\n public:\n-    explicit CompareInvMempoolOrder(CTxMemPool *_mempool)\n-    {\n-        mp = _mempool;\n-    }\n+    explicit CompareInvMempoolOrder(CTxMemPool *_mempool) : mp(_mempool) {}\n \n     bool operator()(std::set<uint256>::iterator a, std::set<uint256>::iterator b)\n     {"
      },
      {
        "sha": "00a47138ce36edeb58e0328c08c340c7fba70854",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a93312c88b5aff35105236cd8d13935e95ededc/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a93312c88b5aff35105236cd8d13935e95ededc/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=6a93312c88b5aff35105236cd8d13935e95ededc",
        "patch": "@@ -72,10 +72,9 @@ CNetAddr::CNetAddr(const struct in_addr& ipv4Addr)\n     SetRaw(NET_IPV4, (const uint8_t*)&ipv4Addr);\n }\n \n-CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr, const uint32_t scope)\n+CNetAddr::CNetAddr(const struct in6_addr& ipv6Addr, const uint32_t scope) : scopeId(scope)\n {\n     SetRaw(NET_IPV6, (const uint8_t*)&ipv6Addr);\n-    scopeId = scope;\n }\n \n unsigned int CNetAddr::GetByte(int n) const\n@@ -576,16 +575,13 @@ std::string CService::ToString() const\n     return ToStringIPPort();\n }\n \n-CSubNet::CSubNet():\n-    valid(false)\n+CSubNet::CSubNet() : valid(false)\n {\n     memset(netmask, 0, sizeof(netmask));\n }\n \n-CSubNet::CSubNet(const CNetAddr &addr, int32_t mask)\n+CSubNet::CSubNet(const CNetAddr &addr, int32_t mask) : network(addr), valid(true)\n {\n-    valid = true;\n-    network = addr;\n     // Default to /32 (IPv4) or /128 (IPv6), i.e. match single address\n     memset(netmask, 255, sizeof(netmask));\n \n@@ -607,10 +603,8 @@ CSubNet::CSubNet(const CNetAddr &addr, int32_t mask)\n         network.ip[x] &= netmask[x];\n }\n \n-CSubNet::CSubNet(const CNetAddr &addr, const CNetAddr &mask)\n+CSubNet::CSubNet(const CNetAddr &addr, const CNetAddr &mask) : network(addr), valid(true)\n {\n-    valid = true;\n-    network = addr;\n     // Default to /32 (IPv4) or /128 (IPv6), i.e. match single address\n     memset(netmask, 255, sizeof(netmask));\n \n@@ -625,11 +619,9 @@ CSubNet::CSubNet(const CNetAddr &addr, const CNetAddr &mask)\n         network.ip[x] &= netmask[x];\n }\n \n-CSubNet::CSubNet(const CNetAddr &addr):\n-    valid(addr.IsValid())\n+CSubNet::CSubNet(const CNetAddr &addr) : network(addr), valid(addr.IsValid())\n {\n     memset(netmask, 255, sizeof(netmask));\n-    network = addr;\n }\n \n bool CSubNet::Match(const CNetAddr &addr) const"
      },
      {
        "sha": "0a143eeed5aee7fba0c0a6908ba1d8d7acc85934",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a93312c88b5aff35105236cd8d13935e95ededc/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a93312c88b5aff35105236cd8d13935e95ededc/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=6a93312c88b5aff35105236cd8d13935e95ededc",
        "patch": "@@ -175,11 +175,9 @@ class TxConfirmStats\n TxConfirmStats::TxConfirmStats(const std::vector<double>& defaultBuckets,\n                                 const std::map<double, unsigned int>& defaultBucketMap,\n                                unsigned int maxPeriods, double _decay, unsigned int _scale)\n-    : buckets(defaultBuckets), bucketMap(defaultBucketMap)\n+    : buckets(defaultBuckets), bucketMap(defaultBucketMap), decay(_decay), scale(_scale)\n {\n-    decay = _decay;\n     assert(_scale != 0 && \"_scale must be non-zero\");\n-    scale = _scale;\n     confAvg.resize(maxPeriods);\n     for (unsigned int i = 0; i < maxPeriods; i++) {\n         confAvg[i].resize(buckets.size());"
      },
      {
        "sha": "75b1f3105e0a3a6ef39d922121ecf0e8ec297de0",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 15,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a93312c88b5aff35105236cd8d13935e95ededc/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a93312c88b5aff35105236cd8d13935e95ededc/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=6a93312c88b5aff35105236cd8d13935e95ededc",
        "patch": "@@ -15,18 +15,10 @@ std::string COutPoint::ToString() const\n }\n \n CTxIn::CTxIn(COutPoint prevoutIn, CScript scriptSigIn, uint32_t nSequenceIn)\n-{\n-    prevout = prevoutIn;\n-    scriptSig = scriptSigIn;\n-    nSequence = nSequenceIn;\n-}\n+    : prevout(prevoutIn), scriptSig(scriptSigIn), nSequence(nSequenceIn) {}\n \n CTxIn::CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn, uint32_t nSequenceIn)\n-{\n-    prevout = COutPoint(hashPrevTx, nOut);\n-    scriptSig = scriptSigIn;\n-    nSequence = nSequenceIn;\n-}\n+    : prevout(COutPoint(hashPrevTx, nOut)), scriptSig(scriptSigIn), nSequence(nSequenceIn) {}\n \n std::string CTxIn::ToString() const\n {\n@@ -43,11 +35,7 @@ std::string CTxIn::ToString() const\n     return str;\n }\n \n-CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)\n-{\n-    nValue = nValueIn;\n-    scriptPubKey = scriptPubKeyIn;\n-}\n+CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn) : nValue(nValueIn), scriptPubKey(scriptPubKeyIn) {}\n \n std::string CTxOut::ToString() const\n {"
      },
      {
        "sha": "7dac572594bc4898a53e7355943aba8d996509fd",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a93312c88b5aff35105236cd8d13935e95ededc/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a93312c88b5aff35105236cd8d13935e95ededc/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=6a93312c88b5aff35105236cd8d13935e95ededc",
        "patch": "@@ -85,11 +85,11 @@ CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn)\n }\n \n CMessageHeader::CMessageHeader(const MessageStartChars& pchMessageStartIn, const char* pszCommand, unsigned int nMessageSizeIn)\n+    : nMessageSize(nMessageSizeIn)\n {\n     memcpy(pchMessageStart, pchMessageStartIn, MESSAGE_START_SIZE);\n     memset(pchCommand, 0, sizeof(pchCommand));\n     strncpy(pchCommand, pszCommand, COMMAND_SIZE);\n-    nMessageSize = nMessageSizeIn;\n     memset(pchChecksum, 0, CHECKSUM_SIZE);\n }\n "
      },
      {
        "sha": "d9dc5d0ad1590676768ff47020f671e628689a3c",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a93312c88b5aff35105236cd8d13935e95ededc/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a93312c88b5aff35105236cd8d13935e95ededc/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=6a93312c88b5aff35105236cd8d13935e95ededc",
        "patch": "@@ -63,10 +63,7 @@ public Q_SLOTS:\n \n #include <qt/intro.moc>\n \n-FreespaceChecker::FreespaceChecker(Intro *_intro)\n-{\n-    this->intro = _intro;\n-}\n+FreespaceChecker::FreespaceChecker(Intro *_intro) : intro(_intro) {}\n \n void FreespaceChecker::check()\n {"
      },
      {
        "sha": "416e0063d4c31d47d5e224b9dc70c14a3a24fac5",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a93312c88b5aff35105236cd8d13935e95ededc/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a93312c88b5aff35105236cd8d13935e95ededc/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=6a93312c88b5aff35105236cd8d13935e95ededc",
        "patch": "@@ -243,7 +243,7 @@ class CScriptVisitor : public boost::static_visitor<bool>\n private:\n     CScript *script;\n public:\n-    explicit CScriptVisitor(CScript *scriptin) { script = scriptin; }\n+    explicit CScriptVisitor(CScript *scriptin) : script(scriptin) {}\n \n     bool operator()(const CNoDestination &dest) const {\n         script->clear();"
      },
      {
        "sha": "b44a54e052578397579b16a85df1b26ac1ef1bc0",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a93312c88b5aff35105236cd8d13935e95ededc/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a93312c88b5aff35105236cd8d13935e95ededc/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=6a93312c88b5aff35105236cd8d13935e95ededc",
        "patch": "@@ -443,11 +443,10 @@ void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)\n }\n \n \n-BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr)\n+BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn)\n+   : pdb(nullptr), activeTxn(nullptr), fFlushOnClose(fFlushOnCloseIn), env(database.env)\n {\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n-    fFlushOnClose = fFlushOnCloseIn;\n-    env = database.env;\n     if (database.IsDummy()) {\n         return;\n     }"
      },
      {
        "sha": "ab1b2dc8030c9c79eaee84edc9d07d72c06169b5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 17,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a93312c88b5aff35105236cd8d13935e95ededc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a93312c88b5aff35105236cd8d13935e95ededc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6a93312c88b5aff35105236cd8d13935e95ededc",
        "patch": "@@ -4204,26 +4204,12 @@ bool CWallet::BackupWallet(const std::string& strDest)\n     return database->Backup(strDest);\n }\n \n-CKeyPool::CKeyPool()\n-{\n-    nTime = GetTime();\n-    fInternal = false;\n-    m_pre_split = false;\n-}\n+CKeyPool::CKeyPool() : nTime(GetTime()), fInternal(false), m_pre_split(false) {}\n \n CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn)\n-{\n-    nTime = GetTime();\n-    vchPubKey = vchPubKeyIn;\n-    fInternal = internalIn;\n-    m_pre_split = false;\n-}\n+    : nTime(GetTime()), vchPubKey(vchPubKeyIn), fInternal(internalIn), m_pre_split(false) {}\n \n-CWalletKey::CWalletKey(int64_t nExpires)\n-{\n-    nTimeCreated = (nExpires ? GetTime() : 0);\n-    nTimeExpires = nExpires;\n-}\n+CWalletKey::CWalletKey(int64_t nExpires) : nTimeCreated(nExpires ? GetTime() : 0), nTimeExpires(nExpires) {}\n \n void CMerkleTx::SetMerkleBranch(const CBlockIndex* pindex, int posInBlock)\n {"
      }
    ]
  },
  {
    "sha": "3d7db2b35d7d788ebc894edcbf6c069e76727ef6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDdkYjJiMzVkN2Q3ODhlYmM4OTRlZGNiZjZjMDY5ZTc2NzI3ZWY2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-30T09:13:50Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-05T09:38:03Z"
      },
      "message": "Prefer in-class initializers to member initializers in constructors for constant initializers",
      "tree": {
        "sha": "86697e1c329834214bb1bba74a3be76861e29b85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86697e1c329834214bb1bba74a3be76861e29b85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d7db2b35d7d788ebc894edcbf6c069e76727ef6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d7db2b35d7d788ebc894edcbf6c069e76727ef6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d7db2b35d7d788ebc894edcbf6c069e76727ef6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d7db2b35d7d788ebc894edcbf6c069e76727ef6/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a93312c88b5aff35105236cd8d13935e95ededc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a93312c88b5aff35105236cd8d13935e95ededc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a93312c88b5aff35105236cd8d13935e95ededc"
      }
    ],
    "stats": {
      "total": 156,
      "additions": 54,
      "deletions": 102
    },
    "files": [
      {
        "sha": "b22c3292b8a47a834d199f7b6f85eb29743060f1",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 49,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d7db2b35d7d788ebc894edcbf6c069e76727ef6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d7db2b35d7d788ebc894edcbf6c069e76727ef6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3d7db2b35d7d788ebc894edcbf6c069e76727ef6",
        "patch": "@@ -2707,60 +2707,13 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     addrBind(addrBindIn),\n     fInbound(fInboundIn),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n-    addrKnown(5000, 0.001),\n-    filterInventoryKnown(50000, 0.000001),\n     id(idIn),\n     nLocalHostNonce(nLocalHostNonceIn),\n     nLocalServices(nLocalServicesIn),\n-    nMyStartingHeight(nMyStartingHeightIn),\n-    nSendVersion(0)\n-{\n-    nServices = NODE_NONE;\n-    nRecvVersion = INIT_PROTO_VERSION;\n-    nLastSend = 0;\n-    nLastRecv = 0;\n-    nSendBytes = 0;\n-    nRecvBytes = 0;\n-    nTimeOffset = 0;\n+    nMyStartingHeight(nMyStartingHeightIn)\n+{\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n-    nVersion = 0;\n-    strSubVer = \"\";\n-    fWhitelisted = false;\n-    fOneShot = false;\n-    m_manual_connection = false;\n-    fClient = false; // set by version message\n-    m_limited_node = false; // set by version message\n-    fFeeler = false;\n-    fSuccessfullyConnected = false;\n-    fDisconnect = false;\n-    nRefCount = 0;\n-    nSendSize = 0;\n-    nSendOffset = 0;\n-    hashContinue = uint256();\n-    nStartingHeight = -1;\n     filterInventoryKnown.reset();\n-    fSendMempool = false;\n-    fGetAddr = false;\n-    nNextLocalAddrSend = 0;\n-    nNextAddrSend = 0;\n-    nNextInvSend = 0;\n-    fRelayTxes = false;\n-    fSentAddr = false;\n-    pfilter = MakeUnique<CBloomFilter>();\n-    timeLastMempoolReq = 0;\n-    nLastBlockTime = 0;\n-    nLastTXTime = 0;\n-    nPingNonceSent = 0;\n-    nPingUsecStart = 0;\n-    nPingUsecTime = 0;\n-    fPingQueued = false;\n-    nMinPingUsecTime = std::numeric_limits<int64_t>::max();\n-    minFeeFilter = 0;\n-    lastSentFeeFilter = 0;\n-    nextSendTimeFeeFilter = 0;\n-    fPauseRecv = false;\n-    fPauseSend = false;\n-    nProcessQueueSize = 0;\n \n     for (const std::string &msg : getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;"
      },
      {
        "sha": "ecaeb07d1f0498de0f3c8317625ca75e186dba79",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 46,
        "deletions": 46,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d7db2b35d7d788ebc894edcbf6c069e76727ef6/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d7db2b35d7d788ebc894edcbf6c069e76727ef6/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3d7db2b35d7d788ebc894edcbf6c069e76727ef6",
        "patch": "@@ -620,83 +620,83 @@ class CNode\n     friend class CConnman;\n public:\n     // socket\n-    std::atomic<ServiceFlags> nServices;\n+    std::atomic<ServiceFlags> nServices{NODE_NONE};\n     SOCKET hSocket;\n-    size_t nSendSize; // total size of all vSendMsg entries\n-    size_t nSendOffset; // offset inside the first vSendMsg already sent\n-    uint64_t nSendBytes;\n+    size_t nSendSize = 0; // total size of all vSendMsg entries\n+    size_t nSendOffset = 0; // offset inside the first vSendMsg already sent\n+    uint64_t nSendBytes = 0;\n     std::deque<std::vector<unsigned char>> vSendMsg;\n     CCriticalSection cs_vSend;\n     CCriticalSection cs_hSocket;\n     CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;\n     std::list<CNetMessage> vProcessMsg;\n-    size_t nProcessQueueSize;\n+    size_t nProcessQueueSize = 0;\n \n     CCriticalSection cs_sendProcessing;\n \n     std::deque<CInv> vRecvGetData;\n-    uint64_t nRecvBytes;\n-    std::atomic<int> nRecvVersion;\n+    uint64_t nRecvBytes = 0;\n+    std::atomic<int> nRecvVersion{INIT_PROTO_VERSION};\n \n-    std::atomic<int64_t> nLastSend;\n-    std::atomic<int64_t> nLastRecv;\n+    std::atomic<int64_t> nLastSend{0};\n+    std::atomic<int64_t> nLastRecv{0};\n     const int64_t nTimeConnected;\n-    std::atomic<int64_t> nTimeOffset;\n+    std::atomic<int64_t> nTimeOffset{0};\n     // Address of this peer\n     const CAddress addr;\n     // Bind address of our side of the connection\n     const CAddress addrBind;\n-    std::atomic<int> nVersion;\n+    std::atomic<int> nVersion{0};\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n     // the network or wire types and the cleaned string used when displayed or logged.\n     std::string strSubVer, cleanSubVer;\n     CCriticalSection cs_SubVer; // used for both cleanSubVer and strSubVer\n-    bool fWhitelisted; // This peer can bypass DoS banning.\n-    bool fFeeler; // If true this node is being used as a short lived feeler.\n-    bool fOneShot;\n-    bool m_manual_connection;\n-    bool fClient;\n-    bool m_limited_node; //after BIP159\n+    bool fWhitelisted = false; // This peer can bypass DoS banning.\n+    bool fFeeler = false; // If true this node is being used as a short lived feeler.\n+    bool fOneShot = false;\n+    bool m_manual_connection = false;\n+    bool fClient = false;\n+    bool m_limited_node = false; //after BIP159\n     const bool fInbound;\n-    std::atomic_bool fSuccessfullyConnected;\n-    std::atomic_bool fDisconnect;\n+    std::atomic_bool fSuccessfullyConnected{false};\n+    std::atomic_bool fDisconnect{false};\n     // We use fRelayTxes for two purposes -\n     // a) it allows us to not relay tx invs before receiving the peer's version message\n     // b) the peer may tell us in its version message that we should not relay tx invs\n     //    unless it loads a bloom filter.\n-    bool fRelayTxes; //protected by cs_filter\n-    bool fSentAddr;\n+    bool fRelayTxes = false; //protected by cs_filter\n+    bool fSentAddr = false;\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;\n-    std::unique_ptr<CBloomFilter> pfilter;\n-    std::atomic<int> nRefCount;\n+    std::unique_ptr<CBloomFilter> pfilter{MakeUnique<CBloomFilter>()};\n+    std::atomic<int> nRefCount{0};\n \n     const uint64_t nKeyedNetGroup;\n-    std::atomic_bool fPauseRecv;\n-    std::atomic_bool fPauseSend;\n+    std::atomic_bool fPauseRecv{false};\n+    std::atomic_bool fPauseSend{false};\n protected:\n \n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n     mapMsgCmdSize mapRecvBytesPerMsgCmd;\n \n public:\n-    uint256 hashContinue;\n-    std::atomic<int> nStartingHeight;\n+    uint256 hashContinue{};\n+    std::atomic<int> nStartingHeight{-1};\n \n     // flood relay\n     std::vector<CAddress> vAddrToSend;\n-    CRollingBloomFilter addrKnown;\n-    bool fGetAddr;\n+    CRollingBloomFilter addrKnown{5000, 0.001};\n+    bool fGetAddr = false;\n     std::set<uint256> setKnown;\n-    int64_t nNextAddrSend;\n-    int64_t nNextLocalAddrSend;\n+    int64_t nNextAddrSend = 0;\n+    int64_t nNextLocalAddrSend = 0;\n \n     // inventory based relay\n-    CRollingBloomFilter filterInventoryKnown;\n+    CRollingBloomFilter filterInventoryKnown{50000, 0.000001};\n     // Set of transaction ids we still have to announce.\n     // They are sorted by the mempool before relay, so the order is not important.\n     std::set<uint256> setInventoryTxToSend;\n@@ -707,36 +707,36 @@ class CNode\n     CCriticalSection cs_inventory;\n     std::set<uint256> setAskFor;\n     std::multimap<int64_t, CInv> mapAskFor;\n-    int64_t nNextInvSend;\n+    int64_t nNextInvSend = 0;\n     // Used for headers announcements - unfiltered blocks to relay\n     // Also protected by cs_inventory\n     std::vector<uint256> vBlockHashesToAnnounce;\n     // Used for BIP35 mempool sending, also protected by cs_inventory\n-    bool fSendMempool;\n+    bool fSendMempool = false;\n \n     // Last time a \"MEMPOOL\" request was serviced.\n-    std::atomic<int64_t> timeLastMempoolReq;\n+    std::atomic<int64_t> timeLastMempoolReq{0};\n \n     // Block and TXN accept times\n-    std::atomic<int64_t> nLastBlockTime;\n-    std::atomic<int64_t> nLastTXTime;\n+    std::atomic<int64_t> nLastBlockTime{0};\n+    std::atomic<int64_t> nLastTXTime{0};\n \n     // Ping time measurement:\n     // The pong reply we're expecting, or 0 if no pong expected.\n-    std::atomic<uint64_t> nPingNonceSent;\n+    std::atomic<uint64_t> nPingNonceSent{0};\n     // Time (in usec) the last ping was sent, or 0 if no ping was ever sent.\n-    std::atomic<int64_t> nPingUsecStart;\n+    std::atomic<int64_t> nPingUsecStart{0};\n     // Last measured round-trip time.\n-    std::atomic<int64_t> nPingUsecTime;\n+    std::atomic<int64_t> nPingUsecTime{0};\n     // Best measured round-trip time.\n-    std::atomic<int64_t> nMinPingUsecTime;\n+    std::atomic<int64_t> nMinPingUsecTime{std::numeric_limits<int64_t>::max()};\n     // Whether a ping is requested.\n-    std::atomic<bool> fPingQueued;\n+    std::atomic<bool> fPingQueued{false};\n     // Minimum fee rate with which to filter inv's to this node\n-    CAmount minFeeFilter;\n+    CAmount minFeeFilter = 0;\n     CCriticalSection cs_feeFilter;\n-    CAmount lastSentFeeFilter;\n-    int64_t nextSendTimeFeeFilter;\n+    CAmount lastSentFeeFilter = 0;\n+    int64_t nextSendTimeFeeFilter = 0;\n \n     CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const CAddress &addrBindIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n@@ -749,7 +749,7 @@ class CNode\n     // Services offered to this peer\n     const ServiceFlags nLocalServices;\n     const int nMyStartingHeight;\n-    int nSendVersion;\n+    int nSendVersion = 0;\n     std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n \n     mutable CCriticalSection cs_addrName;"
      },
      {
        "sha": "1b6810786bda56e8ccb5e2b7b3f76443c15f9fc3",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d7db2b35d7d788ebc894edcbf6c069e76727ef6/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d7db2b35d7d788ebc894edcbf6c069e76727ef6/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=3d7db2b35d7d788ebc894edcbf6c069e76727ef6",
        "patch": "@@ -444,7 +444,7 @@ void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)\n \n \n BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn)\n-   : pdb(nullptr), activeTxn(nullptr), fFlushOnClose(fFlushOnCloseIn), env(database.env)\n+   : fFlushOnClose(fFlushOnCloseIn), env(database.env)\n {\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n     if (database.IsDummy()) {"
      },
      {
        "sha": "306fff3918723cc9c0d5ee405ef8e11222f52656",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d7db2b35d7d788ebc894edcbf6c069e76727ef6/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d7db2b35d7d788ebc894edcbf6c069e76727ef6/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=3d7db2b35d7d788ebc894edcbf6c069e76727ef6",
        "patch": "@@ -167,9 +167,9 @@ class BerkeleyDatabase\n class BerkeleyBatch\n {\n protected:\n-    Db* pdb;\n+    Db* pdb = nullptr;\n     std::string strFile;\n-    DbTxn* activeTxn;\n+    DbTxn* activeTxn = nullptr;\n     bool fReadOnly;\n     bool fFlushOnClose;\n     BerkeleyEnvironment *env;"
      },
      {
        "sha": "637bd50ce1d0e5dcc535e0f2589441b65638d3f4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d7db2b35d7d788ebc894edcbf6c069e76727ef6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d7db2b35d7d788ebc894edcbf6c069e76727ef6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3d7db2b35d7d788ebc894edcbf6c069e76727ef6",
        "patch": "@@ -4204,10 +4204,9 @@ bool CWallet::BackupWallet(const std::string& strDest)\n     return database->Backup(strDest);\n }\n \n-CKeyPool::CKeyPool() : nTime(GetTime()), fInternal(false), m_pre_split(false) {}\n+CKeyPool::CKeyPool() : nTime(GetTime()), fInternal(false) {}\n \n-CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn)\n-    : nTime(GetTime()), vchPubKey(vchPubKeyIn), fInternal(internalIn), m_pre_split(false) {}\n+CKeyPool::CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn) : nTime(GetTime()), vchPubKey(vchPubKeyIn), fInternal(internalIn) {}\n \n CWalletKey::CWalletKey(int64_t nExpires) : nTimeCreated(nExpires ? GetTime() : 0), nTimeExpires(nExpires) {}\n "
      },
      {
        "sha": "1d1fa477f99c2def577d542a60a55f864242036c",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d7db2b35d7d788ebc894edcbf6c069e76727ef6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d7db2b35d7d788ebc894edcbf6c069e76727ef6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=3d7db2b35d7d788ebc894edcbf6c069e76727ef6",
        "patch": "@@ -117,7 +117,7 @@ class CKeyPool\n     int64_t nTime;\n     CPubKey vchPubKey;\n     bool fInternal; // for change outputs\n-    bool m_pre_split; // For keys generated before keypool split upgrade\n+    bool m_pre_split = false; // For keys generated before keypool split upgrade\n \n     CKeyPool();\n     CKeyPool(const CPubKey& vchPubKeyIn, bool internalIn);"
      }
    ]
  },
  {
    "sha": "a7d8a96fd3622d6aa80f2d1db8ecf5b9d799a425",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2Q4YTk2ZmQzNjIyZDZhYTgwZjJkMWRiOGVjZjViOWQ3OTlhNDI1",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-30T09:14:02Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-05T09:38:03Z"
      },
      "message": "Remove redundant filterInventoryKnown.reset()",
      "tree": {
        "sha": "cd29c5bbaf7e5391a00202e2f9e7ecb8cd10a664",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd29c5bbaf7e5391a00202e2f9e7ecb8cd10a664"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7d8a96fd3622d6aa80f2d1db8ecf5b9d799a425",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d8a96fd3622d6aa80f2d1db8ecf5b9d799a425",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7d8a96fd3622d6aa80f2d1db8ecf5b9d799a425",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d8a96fd3622d6aa80f2d1db8ecf5b9d799a425/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d7db2b35d7d788ebc894edcbf6c069e76727ef6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d7db2b35d7d788ebc894edcbf6c069e76727ef6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d7db2b35d7d788ebc894edcbf6c069e76727ef6"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f67a0513ee65564c6f8122b8028c4cc30734b380",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7d8a96fd3622d6aa80f2d1db8ecf5b9d799a425/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7d8a96fd3622d6aa80f2d1db8ecf5b9d799a425/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a7d8a96fd3622d6aa80f2d1db8ecf5b9d799a425",
        "patch": "@@ -2713,7 +2713,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     nMyStartingHeight(nMyStartingHeightIn)\n {\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n-    filterInventoryKnown.reset();\n \n     for (const std::string &msg : getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;"
      }
    ]
  },
  {
    "sha": "9e65bd423e65e6b2e12bb550caa08366fc3983a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTY1YmQ0MjNlNjVlNmIyZTEyYmI1NTBjYWEwODM2NmZjMzk4M2E4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-30T09:52:07Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-05T09:38:03Z"
      },
      "message": "Add developer note: Prefer initialization to assignment in constructors",
      "tree": {
        "sha": "8e2b8d3a8fd567456f1245511db4f4ce4b78aa92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e2b8d3a8fd567456f1245511db4f4ce4b78aa92"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e65bd423e65e6b2e12bb550caa08366fc3983a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e65bd423e65e6b2e12bb550caa08366fc3983a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e65bd423e65e6b2e12bb550caa08366fc3983a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e65bd423e65e6b2e12bb550caa08366fc3983a8/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7d8a96fd3622d6aa80f2d1db8ecf5b9d799a425",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7d8a96fd3622d6aa80f2d1db8ecf5b9d799a425",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7d8a96fd3622d6aa80f2d1db8ecf5b9d799a425"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "538eb0ee230117ec899aed257a191ccf12dd5d3b",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e65bd423e65e6b2e12bb550caa08366fc3983a8/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e65bd423e65e6b2e12bb550caa08366fc3983a8/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=9e65bd423e65e6b2e12bb550caa08366fc3983a8",
        "patch": "@@ -476,6 +476,21 @@ class A\n }\n ```\n \n+- Prefer initialization to assignment in constructors.\n+\n+  - An initialization explicitly states that initialization, rather than\n+    assignment, is done and can be more elegant and efficient. Prevents\n+    \"use before set\" errors. (C.49 in the C++ Core Guidelines)\n+\n+```\n+class A {\n+    std::string s;\n+public:\n+    A(std::string sIn) : s(sIn) { } // Good\n+    // A(std::string sIn) { s = sIn; } // Bad\n+};\n+```\n+\n - By default, declare single-argument constructors `explicit`.\n \n   - *Rationale*: This is a precaution to avoid unintended conversions that might"
      }
    ]
  },
  {
    "sha": "157ab566a640dc029e8fb8fcef88815e7b9c31e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTdhYjU2NmE2NDBkYzAyOWU4ZmI4ZmNlZjg4ODE1ZTdiOWMzMWU4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-05T09:37:10Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-09-05T09:38:03Z"
      },
      "message": "Pass uint256 hashPrevTx as const reference",
      "tree": {
        "sha": "2da07537d9f283fb37a135b2b4405b5c1a1317e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2da07537d9f283fb37a135b2b4405b5c1a1317e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/157ab566a640dc029e8fb8fcef88815e7b9c31e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/157ab566a640dc029e8fb8fcef88815e7b9c31e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/157ab566a640dc029e8fb8fcef88815e7b9c31e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/157ab566a640dc029e8fb8fcef88815e7b9c31e8/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e65bd423e65e6b2e12bb550caa08366fc3983a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e65bd423e65e6b2e12bb550caa08366fc3983a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e65bd423e65e6b2e12bb550caa08366fc3983a8"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "59f9674aa1a5357dc3804ff126700c2b79e51ae7",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/157ab566a640dc029e8fb8fcef88815e7b9c31e8/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/157ab566a640dc029e8fb8fcef88815e7b9c31e8/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=157ab566a640dc029e8fb8fcef88815e7b9c31e8",
        "patch": "@@ -17,7 +17,7 @@ std::string COutPoint::ToString() const\n CTxIn::CTxIn(COutPoint prevoutIn, CScript scriptSigIn, uint32_t nSequenceIn)\n     : prevout(prevoutIn), scriptSig(scriptSigIn), nSequence(nSequenceIn) {}\n \n-CTxIn::CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn, uint32_t nSequenceIn)\n+CTxIn::CTxIn(const uint256& hashPrevTx, uint32_t nOut, CScript scriptSigIn, uint32_t nSequenceIn)\n     : prevout(COutPoint(hashPrevTx, nOut)), scriptSig(scriptSigIn), nSequence(nSequenceIn) {}\n \n std::string CTxIn::ToString() const"
      },
      {
        "sha": "8d5a5d2790cf11bf157fbf845398340cb8482b66",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/157ab566a640dc029e8fb8fcef88815e7b9c31e8/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/157ab566a640dc029e8fb8fcef88815e7b9c31e8/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=157ab566a640dc029e8fb8fcef88815e7b9c31e8",
        "patch": "@@ -99,7 +99,7 @@ class CTxIn\n     }\n \n     explicit CTxIn(COutPoint prevoutIn, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n-    CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n+    CTxIn(const uint256& hashPrevTx, uint32_t nOut, CScript scriptSigIn=CScript(), uint32_t nSequenceIn=SEQUENCE_FINAL);\n \n     ADD_SERIALIZE_METHODS;\n "
      }
    ]
  }
]