[
  {
    "sha": "b1488c4dcecb9dda9d7c583c1c9e1bc0852c79b2",
    "node_id": "C_kwDOABII59oAKGIxNDg4YzRkY2VjYjlkZGE5ZDdjNTgzYzFjOWUxYmMwODUyYzc5YjI",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-08-15T15:23:02Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-24T15:36:45Z"
      },
      "message": "test: fix reference to block processing test in p2p_segwit.py\n\nThe block test was renamed from `p2p-fullblocks.py` to\n`feature_block.py` in commit ca6523d0c8 (PR #11774).",
      "tree": {
        "sha": "dfa0ee4917ac794e8618142f20fdc271e7fec27d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfa0ee4917ac794e8618142f20fdc271e7fec27d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1488c4dcecb9dda9d7c583c1c9e1bc0852c79b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1488c4dcecb9dda9d7c583c1c9e1bc0852c79b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1488c4dcecb9dda9d7c583c1c9e1bc0852c79b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1488c4dcecb9dda9d7c583c1c9e1bc0852c79b2/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01b5cfb9511a22ce4e1525d5e9f2185c6e4401bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01b5cfb9511a22ce4e1525d5e9f2185c6e4401bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01b5cfb9511a22ce4e1525d5e9f2185c6e4401bd"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0ee6c11e6df5f32519588b5db0b22defc7ab48f0",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1488c4dcecb9dda9d7c583c1c9e1bc0852c79b2/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1488c4dcecb9dda9d7c583c1c9e1bc0852c79b2/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=b1488c4dcecb9dda9d7c583c1c9e1bc0852c79b2",
        "patch": "@@ -8,7 +8,12 @@\n import struct\n import time\n \n-from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, WITNESS_COMMITMENT_HEADER\n+from test_framework.blocktools import (\n+    WITNESS_COMMITMENT_HEADER,\n+    add_witness_commitment,\n+    create_block,\n+    create_coinbase,\n+)\n from test_framework.key import ECKey\n from test_framework.messages import (\n     BIP125_SEQUENCE_NUMBER,\n@@ -860,7 +865,7 @@ def test_block_malleability(self):\n     @subtest  # type: ignore\n     def test_witness_block_size(self):\n         # TODO: Test that non-witness carrying blocks can't exceed 1MB\n-        # Skipping this test for now; this is covered in p2p-fullblocktest.py\n+        # Skipping this test for now; this is covered in feature_block.py\n \n         # Test that witness-bearing blocks are limited at ceil(base + wit/4) <= 1MB.\n         block = self.build_next_block()"
      }
    ]
  },
  {
    "sha": "4eb532ff8b5ea9338e6cb1b927abaa43f8e3c94e",
    "node_id": "C_kwDOABII59oAKDRlYjUzMmZmOGI1ZWE5MzM4ZTZjYjFiOTI3YWJhYTQzZjhlM2M5NGU",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-08-15T19:37:34Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-24T15:36:46Z"
      },
      "message": "test: check for block reject reasons in p2p_segwit.py [1/2]\n\nThis commit adds specific expected reject reasons for segwit blocks\nsent to the node, that are independent of whether multiple script threads\nare activated or not.",
      "tree": {
        "sha": "83ff043bab13750110e9aa2ec5ecdd2234a37d62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83ff043bab13750110e9aa2ec5ecdd2234a37d62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4eb532ff8b5ea9338e6cb1b927abaa43f8e3c94e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eb532ff8b5ea9338e6cb1b927abaa43f8e3c94e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4eb532ff8b5ea9338e6cb1b927abaa43f8e3c94e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eb532ff8b5ea9338e6cb1b927abaa43f8e3c94e/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1488c4dcecb9dda9d7c583c1c9e1bc0852c79b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1488c4dcecb9dda9d7c583c1c9e1bc0852c79b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1488c4dcecb9dda9d7c583c1c9e1bc0852c79b2"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "2fb0826c1ba32c9d00986555a78f7e0492965bcd",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4eb532ff8b5ea9338e6cb1b927abaa43f8e3c94e/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4eb532ff8b5ea9338e6cb1b927abaa43f8e3c94e/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=4eb532ff8b5ea9338e6cb1b927abaa43f8e3c94e",
        "patch": "@@ -790,7 +790,7 @@ def test_witness_commitments(self):\n         block_3.rehash()\n         block_3.solve()\n \n-        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=False, reason='bad-witness-merkle-match')\n \n         # Add a different commitment with different nonce, but in the\n         # right location, and with some funds burned(!).\n@@ -856,7 +856,7 @@ def test_block_malleability(self):\n         # Change the nonce -- should not cause the block to be permanently\n         # failed\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(1)]\n-        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False, reason='bad-witness-merkle-match')\n \n         # Changing the witness reserved value doesn't change the block hash\n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack = [ser_uint256(0)]\n@@ -921,7 +921,7 @@ def test_witness_block_size(self):\n         # limit\n         assert len(block.serialize()) > 2 * 1024 * 1024\n \n-        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False, reason='bad-blk-weight')\n \n         # Now resize the second transaction to make the block fit.\n         cur_length = len(block.vtx[-1].wit.vtxinwit[0].scriptWitness.stack[0])\n@@ -1180,7 +1180,7 @@ def serialize_with_witness(self):\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False, reason='bad-txnmrklroot')\n \n         # Now try using a too short vtxinwit\n         tx2.wit.vtxinwit.pop()\n@@ -1419,7 +1419,7 @@ def test_premature_coinbase_witness_spend(self):\n         self.sync_blocks()\n         block2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block2, [spend_tx])\n-        test_witness_block(self.nodes[0], self.test_node, block2, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block2, accepted=False, reason='bad-txns-premature-spend-of-coinbase')\n \n         # Advancing one more block should allow the spend.\n         self.generate(self.nodes[0], 1)\n@@ -1922,7 +1922,7 @@ def test_witness_sigops(self):\n \n         block_2 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_2, [tx2])\n-        test_witness_block(self.nodes[0], self.test_node, block_2, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_2, accepted=False, reason='bad-blk-sigops')\n \n         # Try dropping the last input in tx2, and add an output that has\n         # too many sigops (contributing to legacy sigop count).\n@@ -1935,7 +1935,7 @@ def test_witness_sigops(self):\n         tx2.rehash()\n         block_3 = self.build_next_block()\n         self.update_witness_block_with_transactions(block_3, [tx2])\n-        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block_3, accepted=False, reason='bad-blk-sigops')\n \n         # If we drop the last checksig in this output, the tx should succeed.\n         block_4 = self.build_next_block()"
      }
    ]
  },
  {
    "sha": "45827fd718d51acffdbeb3bb12d1eb96e3fa8bc0",
    "node_id": "C_kwDOABII59oAKDQ1ODI3ZmQ3MThkNTFhY2ZmZGJlYjNiYjEyZDFlYjk2ZTNmYThiYzA",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-08-15T20:26:57Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-24T15:38:03Z"
      },
      "message": "test: check for block reject reasons in p2p_segwit.py [2/2]\n\nThis commit adds specific expected reject reasons for segwit blocks\nsent to the node, that are only showing up if one script threads\nis used. For this reason, the node is started with the parameter\n`-par=1`.",
      "tree": {
        "sha": "421bc5454dbcaed2a7bca165b6f4ace811e608a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/421bc5454dbcaed2a7bca165b6f4ace811e608a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45827fd718d51acffdbeb3bb12d1eb96e3fa8bc0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45827fd718d51acffdbeb3bb12d1eb96e3fa8bc0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45827fd718d51acffdbeb3bb12d1eb96e3fa8bc0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45827fd718d51acffdbeb3bb12d1eb96e3fa8bc0/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4eb532ff8b5ea9338e6cb1b927abaa43f8e3c94e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4eb532ff8b5ea9338e6cb1b927abaa43f8e3c94e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4eb532ff8b5ea9338e6cb1b927abaa43f8e3c94e"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 25,
      "deletions": 12
    },
    "files": [
      {
        "sha": "a564984663fa1dfa3a4dfcd60067ca55e78bf25a",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 25,
        "deletions": 12,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45827fd718d51acffdbeb3bb12d1eb96e3fa8bc0/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45827fd718d51acffdbeb3bb12d1eb96e3fa8bc0/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=45827fd718d51acffdbeb3bb12d1eb96e3fa8bc0",
        "patch": "@@ -198,7 +198,7 @@ def set_test_params(self):\n         self.num_nodes = 2\n         # This test tests SegWit both pre and post-activation, so use the normal BIP9 activation.\n         self.extra_args = [\n-            [\"-acceptnonstdtxn=1\", f\"-testactivationheight=segwit@{SEGWIT_HEIGHT}\", \"-whitelist=noban@127.0.0.1\"],\n+            [\"-acceptnonstdtxn=1\", f\"-testactivationheight=segwit@{SEGWIT_HEIGHT}\", \"-whitelist=noban@127.0.0.1\", \"-par=1\"],\n             [\"-acceptnonstdtxn=0\", f\"-testactivationheight=segwit@{SEGWIT_HEIGHT}\"],\n         ]\n         self.supports_cli = False\n@@ -509,8 +509,8 @@ def test_v0_outputs_arent_spendable(self):\n             # 'block-validation-failed' (if script check threads > 1) or\n             # 'non-mandatory-script-verify-flag (Witness program was passed an\n             # empty witness)' (otherwise).\n-            # TODO: support multiple acceptable reject reasons.\n-            test_witness_block(self.nodes[0], self.test_node, block, accepted=False, with_witness=False)\n+            test_witness_block(self.nodes[0], self.test_node, block, accepted=False, with_witness=False,\n+                               reason='non-mandatory-script-verify-flag (Witness program was passed an empty witness)')\n \n         self.utxo.pop(0)\n         self.utxo.append(UTXO(txid, 2, value))\n@@ -993,7 +993,8 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx])\n \n         # Extra witness data should not be allowed.\n-        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False,\n+                           reason='non-mandatory-script-verify-flag (Witness provided for non-witness script)')\n \n         # Try extra signature data.  Ok if we're not spending a witness output.\n         block.vtx[1].wit.vtxinwit = []\n@@ -1018,7 +1019,8 @@ def test_extra_witness_data(self):\n         self.update_witness_block_with_transactions(block, [tx2])\n \n         # This has extra witness data, so it should fail.\n-        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False,\n+                           reason='non-mandatory-script-verify-flag (Stack size must be exactly one after execution)')\n \n         # Now get rid of the extra witness, but add extra scriptSig data\n         tx2.vin[0].scriptSig = CScript([OP_TRUE])\n@@ -1030,7 +1032,8 @@ def test_extra_witness_data(self):\n         block.solve()\n \n         # This has extra signature data for a witness input, so it should fail.\n-        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False,\n+                           reason='non-mandatory-script-verify-flag (Witness requires empty scriptSig)')\n \n         # Now get rid of the extra scriptsig on the witness input, and verify\n         # success (even with extra scriptsig data in the non-witness input)\n@@ -1068,7 +1071,8 @@ def test_max_witness_push_length(self):\n         tx2.rehash()\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False,\n+                           reason='non-mandatory-script-verify-flag (Push value size limit exceeded)')\n \n         # Now reduce the length of the stack element\n         tx2.wit.vtxinwit[0].scriptWitness.stack[0] = b'a' * (MAX_SCRIPT_ELEMENT_SIZE)\n@@ -1108,7 +1112,8 @@ def test_max_witness_script_length(self):\n \n         self.update_witness_block_with_transactions(block, [tx, tx2])\n \n-        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False,\n+                           reason='non-mandatory-script-verify-flag (Script is too big)')\n \n         # Try again with one less byte in the witness script\n         witness_script = CScript([b'a' * MAX_SCRIPT_ELEMENT_SIZE] * 19 + [OP_DROP] * 62 + [OP_TRUE])\n@@ -1188,6 +1193,8 @@ def serialize_with_witness(self):\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n+        # This block doesn't result in a specific reject reason, but an iostream exception:\n+        # \"Exception 'CDataStream::read(): end of data: unspecified iostream_category error' (...) caught\"\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n         # Now make one of the intermediate witnesses be incorrect\n@@ -1197,7 +1204,8 @@ def serialize_with_witness(self):\n \n         block.vtx = [block.vtx[0]]\n         self.update_witness_block_with_transactions(block, [tx2])\n-        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False,\n+                           reason='non-mandatory-script-verify-flag (Operation not valid with the current stack size)')\n \n         # Fix the broken witness and the block should be accepted.\n         tx2.wit.vtxinwit[5].scriptWitness.stack = [b'a', witness_script]\n@@ -1568,13 +1576,17 @@ def test_signature_version_1(self):\n                 # Too-large input value\n                 sign_p2pk_witness_input(witness_script, tx, 0, hashtype, prev_utxo.nValue + 1, key)\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=False,\n+                                   reason='non-mandatory-script-verify-flag (Script evaluated without error '\n+                                          'but finished with a false/empty top stack element')\n \n                 # Too-small input value\n                 sign_p2pk_witness_input(witness_script, tx, 0, hashtype, prev_utxo.nValue - 1, key)\n                 block.vtx.pop()  # remove last tx\n                 self.update_witness_block_with_transactions(block, [tx])\n-                test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n+                test_witness_block(self.nodes[0], self.test_node, block, accepted=False,\n+                                   reason='non-mandatory-script-verify-flag (Script evaluated without error '\n+                                          'but finished with a false/empty top stack element')\n \n                 # Now try correct value\n                 sign_p2pk_witness_input(witness_script, tx, 0, hashtype, prev_utxo.nValue, key)\n@@ -1676,7 +1688,8 @@ def test_signature_version_1(self):\n         tx2.vin[0].scriptSig = CScript([signature, pubkey])\n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx, tx2])\n-        test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n+        test_witness_block(self.nodes[0], self.test_node, block, accepted=False,\n+                           reason='non-mandatory-script-verify-flag (Witness requires empty scriptSig)')\n \n         # Move the signature to the witness.\n         block.vtx.pop()"
      }
    ]
  }
]