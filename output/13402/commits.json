[
  {
    "sha": "25bc9615b7480e4ba2c482a6f0e7e3b33f50e6e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNWJjOTYxNWI3NDgwZTRiYTJjNDgyYTZmMGU3ZTNiMzNmNTBlNmUw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-05-11T20:56:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2018-06-05T20:41:25Z"
      },
      "message": "Document validationinterace callback blocking deadlock potential.",
      "tree": {
        "sha": "b22e3476a3148397fa6ff7cfafe3a4da0fffd5c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b22e3476a3148397fa6ff7cfafe3a4da0fffd5c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/25bc9615b7480e4ba2c482a6f0e7e3b33f50e6e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25bc9615b7480e4ba2c482a6f0e7e3b33f50e6e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/25bc9615b7480e4ba2c482a6f0e7e3b33f50e6e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/25bc9615b7480e4ba2c482a6f0e7e3b33f50e6e0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a589f536b5e15daf3ac6ffcc137a146514c81967",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a589f536b5e15daf3ac6ffcc137a146514c81967",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a589f536b5e15daf3ac6ffcc137a146514c81967"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 18,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1a81cd17bb65bbe9537e94b03a34144b55867fb9",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25bc9615b7480e4ba2c482a6f0e7e3b33f50e6e0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25bc9615b7480e4ba2c482a6f0e7e3b33f50e6e0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=25bc9615b7480e4ba2c482a6f0e7e3b33f50e6e0",
        "patch": "@@ -2704,6 +2704,9 @@ bool CChainState::ActivateBestChain(CValidationState &state, const CChainParams&\n             // Block until the validation queue drains. This should largely\n             // never happen in normal operation, however may happen during\n             // reindex, causing memory blowup if we run too far ahead.\n+            // Note that if a validationinterface callback ends up calling\n+            // ActivateBestChain this may lead to a deadlock! We should\n+            // probably have a DEBUG_LOCKORDER test for this in the future.\n             SyncWithValidationInterfaceQueue();\n         }\n "
      },
      {
        "sha": "284ef75c3f04f5da545c7494b2e010b7f67aafc3",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/25bc9615b7480e4ba2c482a6f0e7e3b33f50e6e0/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/25bc9615b7480e4ba2c482a6f0e7e3b33f50e6e0/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=25bc9615b7480e4ba2c482a6f0e7e3b33f50e6e0",
        "patch": "@@ -233,7 +233,8 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * Note that we guarantee that either the proof-of-work is valid on pblock, or\n  * (and possibly also) BlockChecked will have been called.\n  * \n- * Call without cs_main held.\n+ * May not be called with cs_main held. May not be called in a\n+ * validationinterface callback.\n  *\n  * @param[in]   pblock  The block we want to process.\n  * @param[in]   fForceProcessing Process this block even if unrequested; used for non-network block sources and whitelisted peers.\n@@ -245,7 +246,8 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n /**\n  * Process incoming block headers.\n  *\n- * Call without cs_main held.\n+ * May not be called with cs_main held. May not be called in a\n+ * validationinterface callback.\n  *\n  * @param[in]  block The block headers themselves\n  * @param[out] state This may be set to an Error state if any error occurred processing them\n@@ -278,7 +280,12 @@ void ThreadScriptCheck();\n bool IsInitialBlockDownload();\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n-/** Find the best known block, and make it the tip of the block chain */\n+/**\n+ * Find the best known block, and make it the tip of the block chain\n+ *\n+ * May not be called with cs_main held. May not be called in a\n+ * validationinterface callback.\n+ */\n bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>());\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n@@ -445,7 +452,11 @@ inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n /** Find the last common block between the parameter chain and a locator. */\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n \n-/** Mark a block as precious and reorganize. */\n+/** Mark a block as precious and reorganize.\n+ *\n+ * May not be called with cs_main held. May not be called in a\n+ * validationinterface callback.\n+ */\n bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n \n /** Mark a block as invalid. */"
      }
    ]
  }
]