ariard,2019-08-15 22:14:03,Travis is stalling yet another time..,https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-521816320,521816320,
jnewbery,2019-08-15 23:17:51,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-521829833,521829833,
DrahtBot,2019-08-16 00:26:55,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15931](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15931.html) (Remove GetDepthInMainChain dependency on lo",https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-521842286,521842286,
ryanofsky,2019-08-16 10:39:09,Concept ACK. This overlaps (but is compatible) with #9381,https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-521967025,521967025,
ariard,2019-08-16 19:25:39,"Thanks all for reviews, updated with comments corrected at 6cc34fc.",https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-522123948,522123948,
meshcollider,2019-08-16 21:47:59,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-522161854,522161854,
ariard,2019-08-19 14:21:10,"Thanks @Sjors for review, pushed some corrections on de4459c",https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-522596969,522596969,
ariard,2019-08-20 18:57:25,"Updated at 5ef9e95 with @ryanofsky comments. Main changes are a more robust serialization logic and assert for already present txn in AddToWallet. This last one flagged a misbehavior of AddToWallet in ComputeTimeSmart (see commit message), so was worth adding.",https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-523150156,523150156,
jnewbery,2019-08-20 19:47:20,Just nits so far. Still planning on doing a more thorough review.,https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-523167191,523167191,
ariard,2019-08-21 15:19:48,"Rebased 63596cf with @jnewbery nits and comments addressed. Thanks for the review!\n\nStill need to decide on https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316231071 which spotted this https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-523150156",https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-523505122,523505122,
ariard,2019-08-22 21:33:29,Updated at 4fc221d with new commit and test to solve https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315883326,https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-524086380,524086380,
Sjors,2019-08-23 10:50:17,Travis machines 5 and 8 will fail until the next rebase (see #16561).,https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-524269080,524269080,
MarcoFalke,2019-08-23 17:41:56,"Travis should run the latest version and a rebase is not required.\n\nHave you tried running the tests locally with `./configure --enable-debug`?",https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-524401895,524401895,
MarcoFalke,2019-08-23 17:51:07,"```\n./out/x86_64-unknown-linux-gnu/bin/test_bitcoin -t wallet_tests\nRunning 9 test cases...\nAssertion failed: detected inconsistent lock order at sync.cpp:121, details in debug log.\nunknown location(0): fatal error: in ""wallet_tests/ComputeTimeSmart"": signal: SIGABRT (application abort requested)\nwallet/test/wallet_tests.cpp(303): last checkpoint\n",https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-524404798,524404798,
MarcoFalke,2019-08-23 17:53:02,"```\n\n\n2019-08-23T17:36:07Z Bitcoin Core version v0.18.99.0-unk (debug build)\n2019-08-23T17:36:07Z Using 16 MiB out of 32/2 requested for signature cache, able to store 524288 elements\n2019-08-23T17:36:07Z Using 16 MiB out of 32/2 requested for script execution cache, able to store 524288 elements\n2019-08-23T17:36:07Z Opened LevelDB successfully\n2019-08-23T17:36:07Z Using obfuscation ",https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-524405428,524405428,
ariard,2019-08-23 20:03:16,Updated at be2d6d3 with a lock order correction. Thanks to @MarcoFalke for spotting #16700 and finding the root issue with failures,https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-524444343,524444343,
ariard,2019-08-29 16:07:39,"Updated at 442a87c with some @ryanofsky comments to take lock smoother. \nNote, also fix a race condition in the new wallet_reorgsrestore, were order of block announcements after block connection was making test successful or not.",https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-526254932,526254932,
meshcollider,2019-09-05 13:27:31,"Light re-Code Review ACK 442a87cc0ae43ebc9b6654a6165778eecb931f74\n\nI think this is in a good state, thank you @ryanofsky for being so active with review and @ariard for addressing feedback so quickly :)",https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-528362819,528362819,
Sjors,2019-08-16 09:28:10,Nit: why the trailing comma?,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314647502,314647502,src/wallet/wallet.h
Sjors,2019-08-16 09:31:01,Why is the default initialization changed to 0?,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314648430,314648430,src/wallet/wallet.h
Sjors,2019-08-16 09:34:00,"Can we move this backwards compatibility feature entirely to the serialization code, and then make `nIndex` a `uint` (for clarity)?",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314649394,314649394,src/wallet/wallet.h
Sjors,2019-08-16 09:36:17,Mention that `nIndex` is a block height?,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314650144,314650144,src/wallet/wallet.h
practicalswift,2019-08-16 11:34:29,`isConfirmed()` does not seem to be tested as the others. Add a test? :-),https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314683678,314683678,src/wallet/wallet.h
practicalswift,2019-08-16 11:34:49,"Should be ""conflicted""? :-)",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314683814,314683814,src/wallet/wallet.h
ryanofsky,2019-08-16 15:42:13,"> if hashBlock is null it means transaction is abandoned\n\nCould you clarify this part of the comment. Doesn't `1` not `0` mean abandoned?",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314778232,314778232,src/wallet/wallet.h
ryanofsky,2019-08-16 15:53:15,"Comment above about ""if transaction was found in a block"" no longer makes sense without the if condition.\n\nAlso, it seems like now when an abandoned, conflicted, or confirmed transaction is added to the mempool, and this is called, the transaction will now be marked unconfirmed instead of left in the previous state.\n\nThis seems logical, but I'm wondering if it is a change in behavior. It'd",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314782646,314782646,src/wallet/wallet.cpp
ryanofsky,2019-08-16 16:06:31,"> Can we move this backwards compatibility feature entirely to the serialization code, and then make `nIndex` a `uint` (for clarity)?\n\nPersonally -0 on this. Imo, unsigned types provide no safety and are terrible for everything except bitfields.\n",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314787768,314787768,src/wallet/wallet.h
ryanofsky,2019-08-16 16:08:46,"Just a suggestion, but I'd add `= 0` here and `= UNCONFIRMED` on the line below to simplify constructor and deserialization code.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314788614,314788614,src/wallet/wallet.h
ryanofsky,2019-08-16 16:10:54,"> Why is the default initialization changed to 0?\n\nFrom what I can tell in this PR, the convention mostly adhered to in this PR is to stop using -1 and ABANDON_HASH values at runtime, and restrict them only to the serialization code. This seems like a pretty good convention if it's followed consistently. I also think it'd be nice to explicitly say what values the block and index values should ",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314789485,314789485,src/wallet/wallet.h
ryanofsky,2019-08-16 16:14:39,"Can we set 0 here, or change MarkConflicted to set -1? I think it'd be good to be consistent about what conflicted transactions look like.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314790802,314790802,src/wallet/wallet.h
ryanofsky,2019-08-16 16:18:27,"In commit ""Remove SyncTransaction for conflicted txn in CWallet::BlockConnected"" (0e3212ae85c7cf1eb6a8d937ac67d6822f624175)\n\nI don't think I understand this change. Commit description suggests why it is ok, but I don't understand what motivates it. Is it just cleanup? Is it maybe a minor bugfix, or needed for a future change?",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314792223,314792223,src/wallet/wallet.cpp
ariard,2019-08-16 17:42:28,"With these changes, but even before, `nIndex` never referred directly to a block height. When set at -1, it's interpreted as a magic value meaning the `hashBlock` is one of the deepest conflicting tx. This PR intents to scope this logic only to serialization/deserialization.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314822059,314822059,src/wallet/wallet.h
ariard,2019-08-16 17:44:12,"Yes see comment on top of `TxConfirmation`, should be improved ?",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314822720,314822720,src/wallet/wallet.h
ariard,2019-08-16 17:45:34,What do you mean here by moving this backwards compatibility feature entirely to the serialization code ? If changes are right this logic should only lived in serialization code now. ,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314823204,314823204,src/wallet/wallet.h
ariard,2019-08-16 17:48:40,"Removed for now, I've added it for further changes were ABANDON state was dual-set with other states, but drop if for now, would have been too big changes at once.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314824365,314824365,src/wallet/wallet.h
ariard,2019-08-16 17:51:09,You're right that an inconsistency from my part. Corrected.,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314825417,314825417,src/wallet/wallet.h
Sjors,2019-08-16 17:55:03,"If `nIndex` doesn't mean a block height, then why not remove the instance variable altogether? We can still (de)serialize in a backwards compatible way.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314827034,314827034,src/wallet/wallet.h
Sjors,2019-08-16 17:55:36,"See below, it depends on if nIndex has any meaning.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314827251,314827251,src/wallet/wallet.h
ariard,2019-08-16 18:10:59,"Currently, `AbandonTransaction` set `nIndex` as -1 and this value is kept at serialization/deserialization. I'm not sure if it make sense for older client, because an abandoned transaction can be also confirmed/unconfirmed/conflicted at same time. Nevertheless, I've tried to keep same behavior for now, so `hashBlock` set as ABANDON_HASH is used to avoid deserialization ambiguity with conflicted.\",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314833011,314833011,src/wallet/wallet.h
ariard,2019-08-16 18:16:04,done,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314834977,314834977,src/wallet/wallet.h
ariard,2019-08-16 19:01:10,"Clarified in commit message that is a change in behavior where at block disconnection, previous tx state is override by UNCONFIRMED one. I think right now, we don't track at all the fact that tx has been disconnected, and that's why we don't undo conflicts, or make it hard to solve them. The only direct consequence of these changes I can think of is a user having to call abandontransaction a 2nd t",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314851583,314851583,src/wallet/wallet.cpp
ariard,2019-08-16 19:13:57,"Updated commit message. I think this redundant, as conflicts tagging logic is triggered by connection of conflicting transaction. AFAIK, it's not a bugfix but a cleanup. And as it was same issue than major commit, I bundled them together.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314855770,314855770,src/wallet/wallet.cpp
ariard,2019-08-16 19:21:22,Well I think we need to keep `nIndex` at least it's used by RPCs in `WalletTxToJSON` ? Or getting it out of new `TxConfirmation` struct ? ,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314858435,314858435,src/wallet/wallet.h
Sjors,2019-08-16 19:38:33,"I think we should figure out what it means in the RPC, consider deprecating that field, and then having an explicit backwards compatible workaround.\n\nIn the backwards compatiblity tests I wrote it seems `blockindex` is absent for uncofirmned or abandoned transactions. It was `1` for a confirmed transaction.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314863840,314863840,src/wallet/wallet.h
Sjors,2019-08-18 09:43:26,Can you clarify why we keep the first loop at all? Why not call `TransactionRemovedFromMempool` before `SyncTransaction` in the second loop?,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314977051,314977051,src/wallet/wallet.cpp
Sjors,2019-08-18 10:16:15,"Above this comment: `For a CONFIRMED transaction, nIndex is the position inside the block, used in merkle proofs.`\n\nThis had me confused before; I assumed it referred to a block height.\n\nThis serialization comment can be moved to the serialization code, because with this change `nIndex` is never `-1`; only `serializedIndex` is.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314978161,314978161,src/wallet/wallet.h
Sjors,2019-08-18 10:30:35,`TxConfirmation tx_state` is now a confusingly named variable.,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314978711,314978711,src/wallet/wallet.cpp
Sjors,2019-08-18 10:48:19,"I can live with changing it now, but we should drop the comment then.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314979368,314979368,src/wallet/wallet.cpp
Sjors,2019-08-18 11:02:58,"`posInBlock` could be a good rename candidate for `nIndex`, though probably not worth making the diff bigger.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r314979956,314979956,src/wallet/wallet.cpp
ariard,2019-08-19 14:11:36,"Extended commit message, we keep the loop because set of conflicted txn isn't same as txn included in a block.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315231755,315231755,src/wallet/wallet.cpp
ariard,2019-08-19 14:14:24,"Oh I've struggled hard on naming, `TxConfirmation` is struct with tx state + its values (block hash, position in block). If you have any better names, I'll take it :)",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315233217,315233217,src/wallet/wallet.cpp
ariard,2019-08-19 14:19:29,Moved to the deserialization code!,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315235906,315235906,src/wallet/wallet.h
Sjors,2019-08-19 14:37:26,"The variable name `tx_state` is the confusing part, because it's not a TxState",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315245474,315245474,src/wallet/wallet.cpp
ryanofsky,2019-08-19 16:01:01,"In commit ""Encapsulate tx state in a TxConfirmation struct"" (8a7d26dc3c69e219a2db8d52980074951aff55a3)\n\nOn the surface it seems like improved behavior to not consider a transaction conflicted or abandoned when it's in the mempool. So just removing or updating the comment above seems good for that case. If this can mark a transaction not abandoned when it's not actually in the mempool that also",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315289405,315289405,src/wallet/wallet.cpp
ryanofsky,2019-08-19 16:11:38,"In commit ""Encapsulate tx state in a TxConfirmation struct"" (8a7d26dc3c69e219a2db8d52980074951aff55a3)\n\nShould we maybe add\n\n```c++\n} else {\n    assert(wtx.tx_state.nIndex == wtxIn.tx_state.nIndex);\n    assert(wtx.tx_state.hashBlock = wtxIn.tx_state.hashBlock);\n}\n```\n\nMy concern is that the new behavior might be less robust than previous behavior if there is a bug in higher l",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315293956,315293956,src/wallet/wallet.cpp
ryanofsky,2019-08-19 16:19:59,"> The variable name `tx_state` is the confusing part, because it's not a TxState\n\nI think the current naming is ok, but if it I had to choose, I would probably do something like:\n\n```c++\nclass CWalletTx\n{\npublic:\n    enum Status { UNCONFIRMED, CONFIRMED, CONFLICTED, ABANDONED };\n    struct Confirmation {\n        Status status;\n        uint256 block_hash\n        int pos_in_b",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315297321,315297321,src/wallet/wallet.cpp
ryanofsky,2019-08-19 16:29:00,"In commit ""Encapsulate tx state in a TxConfirmation struct"" (8a7d26dc3c69e219a2db8d52980074951aff55a3)\n\nIt seems more safe to reset the whole struct instead of just one member. Maybe `tx_state = TxConfirmation{};`?\n\nI think there may actually be a (theoretical) bug without this. If you unserialized an unconfirmed transaction into a CWalletTx that was _not_ unconfirmed, deserialization code",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315300924,315300924,src/wallet/wallet.h
ryanofsky,2019-08-19 16:51:25,"In commit ""Remove SyncTransaction for conflicted txn in CWallet::BlockConnected"" (3e027c776556c3070a9c3460045a6e397b21ceb8)\n\nCan we drop these `tx_state.nIndex = 0;` assignments or set them in all cases consistently? (There is a missing assignment in the unconfirmed case). I'd have a slight preference for just dropping these and the Init() call above reset everything to default, instead of rep",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315310345,315310345,src/wallet/wallet.h
ariard,2019-08-19 17:22:56,Replaced by `tx_conf` on f9f4926,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315323037,315323037,src/wallet/wallet.cpp
jnewbery,2019-08-20 17:23:39,Change to `SetMerkleBranch()`?,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315810816,315810816,src/wallet/test/wallet_tests.cpp
ariard,2019-08-20 17:27:22,"Well strictly speaking, given that Init set to unconfirmed, it would be more wrongly updating to confirmed. But if hash is set IMO we have database corruption or bug in higher tracking logic. Updated serialization logic with this and beneath to make it more robust.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315812394,315812394,src/wallet/wallet.h
ariard,2019-08-20 17:27:28,Done,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315812435,315812435,src/wallet/wallet.cpp
jnewbery,2019-08-20 17:46:57,Change to `SetMerkleBranch()`?,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315821088,315821088,src/wallet/rpcdump.cpp
jnewbery,2019-08-20 17:55:44,"I think this whole comment can be removed (since you're removing the `SyncTransaction()` call for the conflicting transactions). You could also move the `for (const CTransactionRef& ptx : vtxConflicted)` loop to below the `for (size_t i = 0; i < block.vtx.size(); i++)`, which seems more natural.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315825109,315825109,src/wallet/wallet.cpp
jnewbery,2019-08-20 17:57:44,micronit: place this at the top of the function (so the order of logic matches the order of the arguments),https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315826030,315826030,src/wallet/wallet.cpp
jnewbery,2019-08-20 17:58:24,nit: could join this and the line below to one line to match current code style guide.,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315826312,315826312,src/wallet/wallet.cpp
jnewbery,2019-08-20 18:02:20,"grammar nits:\n\n- s/start in the UNCONFIRMED/start as UNCONFIRMED/\n- s/they rollback/they roll back/\n- s/we update [...] as CONFLICTED/we update [...] to CONFLICTED/\n- s/In tx isn't confirmed/If tx isn't confirmed/\n- s/switch it to ABANDONED thanks to the abandontransaction call/switch it to ABANDONED by using the abandontransaction call/",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315828072,315828072,src/wallet/wallet.h
jnewbery,2019-08-20 18:05:13,"nit: I don't think `block index` is well understood to mean 'the transaction's position in the block'. I think explicitly calling it 'a pair of {block hash, tx index in block}' would be clearer.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315829382,315829382,src/wallet/wallet.h
jnewbery,2019-08-20 18:05:43,"I don't think this is right. When state is `CONFLICTED`, `nIndex` is set to 0",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315829607,315829607,src/wallet/wallet.h
jnewbery,2019-08-20 18:07:07,"nit: in the function calls, `state` comes before `hashBlock` and `nIndex`. I suggest you do the same here for consistency.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315830180,315830180,src/wallet/wallet.h
jnewbery,2019-08-20 18:07:51,nit: code style guide says that data members should be named `m_...`,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315830488,315830488,src/wallet/wallet.h
jnewbery,2019-08-20 18:10:05,"nit: I'd prefer to not have these ternary operators in this very long line, since it makes it very difficult to read. I think it'd be clearer if you instantiated two local variables `serialized_hash` and `serialized_index`, and then use them in this serialization line.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315831474,315831474,src/wallet/wallet.h
jnewbery,2019-08-20 18:10:54,nit: should this be 'any in-wallet ancestor'?,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315831790,315831790,src/wallet/wallet.h
jnewbery,2019-08-20 18:30:00,consider updating this function to also zero out `nIndex` and `hashBlock`,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315840155,315840155,src/wallet/wallet.h
jnewbery,2019-08-20 19:42:34,nit: this function is badly named (and has been since 391dff16fe9ace90fc0f3308a5c63c453370e713 _Do not store Merkle branches in the wallet._). Now would be a good time to rename it to `SetTxConf()` or similar.,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315869597,315869597,src/wallet/wallet.h
jnewbery,2019-08-20 20:17:44,"(re: https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315293956)\n\nI don't like these new asserts. I think they could be triggered under the following scenario:\n\n1. a wallet tx is confirmed in a block\n2. the wallet is shut down\n3. the block chain re-orgs and the tx is included in a different block\n4. the wallet file is loaded on a sync'ed node\n\nAll this code is trying to ",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315883326,315883326,src/wallet/wallet.cpp
ariard,2019-08-21 14:30:49,"Yes that's right, I rewrote comment to new code without thinking it wasn't relevant anymore",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316218507,316218507,src/wallet/wallet.h
ariard,2019-08-21 14:32:21,Yes already corrected at 5ef9e95,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316219351,316219351,src/wallet/wallet.h
ariard,2019-08-21 14:41:01,"Updated, just to be sure a 'in-wallet dependency' is relative to a parent tx on which it relies to be valid ?",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316224229,316224229,src/wallet/wallet.h
ariard,2019-08-21 14:52:46,"If these new asserts get triggered it would mean we have bugs in higher level code, but yes aborting maybe too strong given that this kind of bugs could be due to some likely API misuse in RPCs ? What's about logging them with a warning ?\n\nI'm not in favor of proposed alternative as it may cause hidden inconsistencies if these aforementioned high level bugs are present ",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316231071,316231071,src/wallet/wallet.cpp
ryanofsky,2019-08-21 16:35:15,"I don't feel strongly, but I think asserts are way to go because we should not allow bugs and uncertainty in wallet event processing code. It's hard for me to imagine a scenario where it would be a win to use defensive programming in a place like this.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316284578,316284578,src/wallet/wallet.cpp
ryanofsky,2019-08-21 16:51:44,"In commit ""Encapsulate tx status in a Confirmation struct"" (e591ef7a796d1ca164e791862e20a31b801fdf1b)\n\nThis is a little unclear, maybe replace ""Block disconnection override an abandoned tx as unconfirmed"" with ""At block disconnection, this will change an abandoned transaction to be unconfirmed, whether or not the transaction is added back to the mempool.""\n\nIt might be better to move this c",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316291670,316291670,src/wallet/wallet.cpp
jnewbery,2019-08-21 16:54:18,@ryanofsky - do you agree that the scenario I describe above would trigger the assert?,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316292664,316292664,src/wallet/wallet.cpp
ryanofsky,2019-08-21 17:06:27,"In commit ""Encapsulate tx status in a Confirmation struct"" (e591ef7a796d1ca164e791862e20a31b801fdf1b)\n\nMaybe add a doxygen comment for hashBlock saying it's set to the block of the deepest conflicting transaction when the wallet transaction is in the CONFLICTED state. This information seems to have been lost in latest change to the comments above.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316297799,316297799,src/wallet/wallet.h
jnewbery,2019-08-21 19:07:55,"Oh, I think you've removed too much now. It's still useful to know that `hashBlock` refers to the block hash of the deepest conflicting transaction.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316355243,316355243,src/wallet/wallet.h
ryanofsky,2019-08-21 19:18:19,"Oh, I didn't realize https://github.com/bitcoin/bitcoin/pull/16624#discussion_r315883326 was describing a specific scenario, not just a list of possible events. I could see that scenerio triggering these asserts, and making the change you suggested an improvement and bugfix. It is likely some change is needed here, and the suggested one seems ok.\n\nMore ideally, though, it'd be really nice to h",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316359216,316359216,src/wallet/wallet.cpp
jnewbery,2019-08-21 19:36:15,"> I didn't realize #16624 (comment) was describing a specific scenario\n\nsorry - changed my unordered list to an ordered list and updated wording to make this clearer.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316366261,316366261,src/wallet/wallet.cpp
jnewbery,2019-08-21 19:38:16,"> there would be code on startup that marks reorged transactions UNCONFIRMED before rescanning\n\nYes - I think if the wallet rescans from block at height x, it should first change all transactions that are CONFIRMED at height >x to UNCOFIRMED.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316366957,316366957,src/wallet/wallet.cpp
ariard,2019-08-22 21:29:27,"Yes I've tried to combine abandon state with every other one but would run into issue. IMO, would be better to rework abandontransaction to something like abandoncoins, because confirmation are on the transaction-level, but conflict/abandon at the output one",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316893229,316893229,src/wallet/wallet.cpp
ariard,2019-08-22 21:29:39,Reestablished,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316893298,316893298,src/wallet/wallet.h
ariard,2019-08-22 21:32:26,"I let asserts and move some bits from #15931 to transition status to UNCONFIRMED if blockHash not anymore in chain. Also added a wallet_reorgsrestore test with aforementioned scenario, without new code it triggers asserts ",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r316894190,316894190,src/wallet/wallet.cpp
ryanofsky,2019-08-28 20:54:14,"In commit ""Modify wallet tx status if has been reorged out"" (73b7aa0af12c1110055c0d0c82415f7b92347217)\n\nIt'd be possible to avoid some repetition in this commit by adding a LockChain method instead of a HasChain method:\n\n```c++\nstd::unique_ptr<interfaces::Chain::Lock> LockChain() { return m_chain ? m_chain->lock() : nullptr; }\n```\n\nThis would also allow shortening the ""Even if we d",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r318787529,318787529,src/wallet/wallet.h
ryanofsky,2019-08-28 21:08:10,"In commit ""Modify wallet tx status if has been reorged out"" (73b7aa0af12c1110055c0d0c82415f7b92347217)\n\nDo you think that instead of calling getBlockHeight() and setUnconfirmed() immediately in LoadToWallet as individual transactions are loaded, the calls could happen later after transactions are loaded, in a loop over mapWallet from LoadWallet or CreateWalletFromFile? It seems like this could",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r318793473,318793473,src/wallet/wallet.cpp
ryanofsky,2019-08-28 21:11:10,"In commit ""Add a test wallet_reorgsrestore"" (be2d6d3cd1421d66871396eeef5f6e30b0841889)\n\nReally nice to have this test!",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r318794585,318794585,test/functional/wallet_reorgsrestore.py
ryanofsky,2019-08-28 21:12:50,"In commit ""Add a test wallet_reorgsrestore"" (be2d6d3cd1421d66871396eeef5f6e30b0841889)\n\nspelling longest",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r318795216,318795216,test/functional/wallet_reorgsrestore.py
ryanofsky,2019-08-28 21:17:37,"In commit ""Add a test wallet_reorgsrestore"" (be2d6d3cd1421d66871396eeef5f6e30b0841889)\n\nNot sure, but maybe it would be possible to use return values from generate to verify transactions are in the expected blocks, to be able to check more equality instead of just inequality. On the other hand, maybe the test is more robust this way, so feel free to leave this alone.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r318797000,318797000,test/functional/wallet_reorgsrestore.py
ariard,2019-08-29 16:07:10,"Yes took this one, make it easier",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r319152916,319152916,src/wallet/wallet.h
ariard,2019-08-29 16:08:27,I think the same effect is reached with confirmations depth assertations?,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r319153504,319153504,test/functional/wallet_reorgsrestore.py
ariard,2019-08-29 16:11:16,It could and would make lock less a pain until #16426 but after it we will have the update status code lost in the middle of CreateWalletFromFile...not sure if it's great to ease understanding of wallet bootstrap which is already intertwined a lot,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r319154771,319154771,src/wallet/wallet.cpp
ryanofsky,2019-08-29 17:01:25,"In commit ""Add a test wallet_reorgsrestore"" (442a87cc0ae43ebc9b6654a6165778eecb931f74)\n\nIt might be useful to add comments to explain where the `9` value comes from here and why the new (since 442a87cc0ae43ebc9b6654a6165778eecb931f74) `sync_block` call is necessary below. From https://github.com/bitcoin/bitcoin/pull/16624#issuecomment-526254932 it sounds like there was a race condition without",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r319175528,319175528,test/functional/wallet_reorgsrestore.py
jnewbery,2019-09-05 15:21:44,This is still wrong. index is left as 0 for a CONFLICTED tx.,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r321331127,321331127,src/wallet/wallet.h
jnewbery,2019-09-05 15:22:46,This isn't needed. `setAbandoned()` sets `nIndex` to 0.,https://github.com/bitcoin/bitcoin/pull/16624#discussion_r321331630,321331630,src/wallet/wallet.cpp
jnewbery,2019-09-05 15:36:20,"nit: I think this would be clearer as:\n\n```\n if (wtxIn.isConflicted() || wtxIn.isConfirmed()) {\n    ...\n```",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r321338669,321338669,src/wallet/wallet.cpp
ryanofsky,2021-01-07 16:25:49,"In commit ""Encapsulate tx status in a Confirmation struct"" (a31be09bfd77eed497a8e251d31358e16e2f2eb1)\n\nThis line is removed in the immediate next commit (https://github.com/bitcoin/bitcoin/pull/16624/commits/7e89994133725125dddbfa8d45484e3b9ed51c6e), but technically it has some bugs. Original intent of this code was only ever to send `-walletnotify`notifications, not to update transaction stat",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r553435829,553435829,src/wallet/wallet.cpp
ryanofsky,2021-01-07 16:26:19,"In commit ""Encapsulate tx status in a Confirmation struct"" (a31be09bfd77eed497a8e251d31358e16e2f2eb1)\n\nComment seems slightly off. I think the comment is right that `abandontransaction` would need to be called again in this case, but I don't think it would just be because of this code. The abandoned state would already have been lost previously when the block was connected.",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r553436127,553436127,src/wallet/wallet.cpp
ryanofsky,2021-01-07 16:27:39,"In commit ""Remove SyncTransaction for conflicted txn in CWallet::BlockConnected"" (7e89994133725125dddbfa8d45484e3b9ed51c6e)\n\nDropping this SyncTransaction call was a bug, since it caused `-walletnotify` notifications to be lost. These were restored later in #18982, basically just reverting this commit, but with some updates due to notification code changes in the meantime, and using `CONFIRMED",https://github.com/bitcoin/bitcoin/pull/16624#discussion_r553436927,553436927,src/wallet/wallet.cpp
