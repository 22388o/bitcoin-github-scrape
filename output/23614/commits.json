[
  {
    "sha": "4740fe8212da21e86664355b4c6d0d7d838e4382",
    "node_id": "C_kwDOABII59oAKDQ3NDBmZTgyMTJkYTIxZTg2NjY0MzU1YjRjNmQwZDdkODM4ZTQzODI",
    "commit": {
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-11-26T23:48:41Z"
      },
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-11-29T15:19:55Z"
      },
      "message": "test: Add test for block relay only eviction",
      "tree": {
        "sha": "cc9da3d4a3d0b3b17150b6ddb39a978198b84e4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc9da3d4a3d0b3b17150b6ddb39a978198b84e4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4740fe8212da21e86664355b4c6d0d7d838e4382",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4740fe8212da21e86664355b4c6d0d7d838e4382",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4740fe8212da21e86664355b4c6d0d7d838e4382",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4740fe8212da21e86664355b4c6d0d7d838e4382/comments",
    "author": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "111c3e06b35b7867f2e0f740e988f648ac6c325d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/111c3e06b35b7867f2e0f740e988f648ac6c325d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/111c3e06b35b7867f2e0f740e988f648ac6c325d"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 66,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2a38b62c480597ddb1b30f6dde2f88edd7972bb3",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 4,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4740fe8212da21e86664355b4c6d0d7d838e4382/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4740fe8212da21e86664355b4c6d0d7d838e4382/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=4740fe8212da21e86664355b4c6d0d7d838e4382",
        "patch": "@@ -105,10 +105,10 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     peerLogic->FinalizeNode(dummyNode1);\n }\n \n-static void AddRandomOutboundPeer(std::vector<CNode*>& vNodes, PeerManager& peerLogic, ConnmanTestMsg& connman)\n+static void AddRandomOutboundPeer(std::vector<CNode*>& vNodes, PeerManager& peerLogic, ConnmanTestMsg& connman, ConnectionType connType)\n {\n     CAddress addr(ip(g_insecure_rand_ctx.randbits(32)), NODE_NONE);\n-    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\", ConnectionType::OUTBOUND_FULL_RELAY, /*inbound_onion=*/false));\n+    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK | NODE_WITNESS), INVALID_SOCKET, addr, /*nKeyedNetGroupIn=*/0, /*nLocalHostNonceIn=*/0, CAddress(), /*addrNameIn=*/\"\", connType, /*inbound_onion=*/false));\n     CNode &node = *vNodes.back();\n     node.SetCommonVersion(PROTOCOL_VERSION);\n \n@@ -136,7 +136,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n \n     // Mock some outbound peers\n     for (int i = 0; i < max_outbound_full_relay; ++i) {\n-        AddRandomOutboundPeer(vNodes, *peerLogic, *connman);\n+        AddRandomOutboundPeer(vNodes, *peerLogic, *connman, ConnectionType::OUTBOUND_FULL_RELAY);\n     }\n \n     peerLogic->CheckForStaleTipAndEvictPeers();\n@@ -161,7 +161,7 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     // If we add one more peer, something should get marked for eviction\n     // on the next check (since we're mocking the time to be in the future, the\n     // required time connected check should be satisfied).\n-    AddRandomOutboundPeer(vNodes, *peerLogic, *connman);\n+    AddRandomOutboundPeer(vNodes, *peerLogic, *connman, ConnectionType::OUTBOUND_FULL_RELAY);\n \n     peerLogic->CheckForStaleTipAndEvictPeers();\n     for (int i = 0; i < max_outbound_full_relay; ++i) {\n@@ -190,6 +190,68 @@ BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n     connman->ClearTestNodes();\n }\n \n+BOOST_AUTO_TEST_CASE(block_relay_only_eviction)\n+{\n+    const CChainParams& chainparams = Params();\n+    auto connman = std::make_unique<ConnmanTestMsg>(0x1337, 0x1337, *m_node.addrman);\n+    auto peerLogic = PeerManager::make(chainparams, *connman, *m_node.addrman, nullptr,\n+                                       *m_node.chainman, *m_node.mempool, false);\n+\n+    constexpr int max_outbound_block_relay{MAX_BLOCK_RELAY_ONLY_CONNECTIONS};\n+    constexpr int64_t MINIMUM_CONNECT_TIME{30};\n+    CConnman::Options options;\n+    options.nMaxConnections = DEFAULT_MAX_PEER_CONNECTIONS;\n+    options.m_max_outbound_full_relay = MAX_OUTBOUND_FULL_RELAY_CONNECTIONS;\n+    options.m_max_outbound_block_relay = max_outbound_block_relay;\n+\n+    connman->Init(options);\n+    std::vector<CNode*> vNodes;\n+\n+    // Add block-relay-only peers up to the limit\n+    for (int i = 0; i < max_outbound_block_relay; ++i) {\n+        AddRandomOutboundPeer(vNodes, *peerLogic, *connman, ConnectionType::BLOCK_RELAY);\n+    }\n+    peerLogic->CheckForStaleTipAndEvictPeers();\n+\n+    for (int i = 0; i < max_outbound_block_relay; ++i) {\n+        BOOST_CHECK(vNodes[i]->fDisconnect == false);\n+    }\n+\n+    // Add an extra block-relay-only peer breaking the limit (mocks logic in ThreadOpenConnections)\n+    AddRandomOutboundPeer(vNodes, *peerLogic, *connman, ConnectionType::BLOCK_RELAY);\n+    peerLogic->CheckForStaleTipAndEvictPeers();\n+\n+    // The extra peer should only get marked for eviction after MINIMUM_CONNECT_TIME\n+    for (int i = 0; i < max_outbound_block_relay; ++i) {\n+        BOOST_CHECK(vNodes[i]->fDisconnect == false);\n+    }\n+    BOOST_CHECK(vNodes.back()->fDisconnect == false);\n+\n+    SetMockTime(GetTime() + MINIMUM_CONNECT_TIME + 1);\n+    peerLogic->CheckForStaleTipAndEvictPeers();\n+    for (int i = 0; i < max_outbound_block_relay; ++i) {\n+        BOOST_CHECK(vNodes[i]->fDisconnect == false);\n+    }\n+    BOOST_CHECK(vNodes.back()->fDisconnect == true);\n+\n+    // Update the last block time for the extra peer,\n+    // and check that the next youngest peer gets evicted.\n+    vNodes.back()->fDisconnect = false;\n+    vNodes.back()->nLastBlockTime = GetTime();\n+\n+    peerLogic->CheckForStaleTipAndEvictPeers();\n+    for (int i = 0; i < max_outbound_block_relay - 1; ++i) {\n+        BOOST_CHECK(vNodes[i]->fDisconnect == false);\n+    }\n+    BOOST_CHECK(vNodes[max_outbound_block_relay - 1]->fDisconnect == true);\n+    BOOST_CHECK(vNodes.back()->fDisconnect == false);\n+\n+    for (const CNode* node : vNodes) {\n+        peerLogic->FinalizeNode(*node);\n+    }\n+    connman->ClearTestNodes();\n+}\n+\n BOOST_AUTO_TEST_CASE(peer_discouragement)\n {\n     const CChainParams& chainparams = Params();"
      }
    ]
  }
]