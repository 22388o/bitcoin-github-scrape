[
  {
    "sha": "fe00ca758a0f1ab2db3f7441c04780630a9df11a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTAwY2E3NThhMGYxYWIyZGIzZjc0NDFjMDQ3ODA2MzBhOWRmMTFh",
    "commit": {
      "author": {
        "name": "Andrew C",
        "email": "achow101@gmail.com",
        "date": "2016-03-12T16:41:51Z"
      },
      "committer": {
        "name": "Andrew C",
        "email": "achow101@gmail.com",
        "date": "2016-03-21T13:58:40Z"
      },
      "message": "Create generatetoaddress rpc\n\nCreates the generatetoaddress rpc which is virtually identical to the generate rpc except that it takes an argument for the address to mine to. It does not rely on wallet functionality.\n\nThe mining code shared by generate and generatetoaddress has been moved to another method to reduce duplication.",
      "tree": {
        "sha": "5cf334f3c99ddbb767b93aed4ee1f2ecd5ba73e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cf334f3c99ddbb767b93aed4ee1f2ecd5ba73e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe00ca758a0f1ab2db3f7441c04780630a9df11a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe00ca758a0f1ab2db3f7441c04780630a9df11a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe00ca758a0f1ab2db3f7441c04780630a9df11a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe00ca758a0f1ab2db3f7441c04780630a9df11a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29b2be6ad7898fcb871f6febbd45d0c7940398cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29b2be6ad7898fcb871f6febbd45d0c7940398cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29b2be6ad7898fcb871f6febbd45d0c7940398cd"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 81,
      "deletions": 33
    },
    "files": [
      {
        "sha": "89420b93d7fb211b78b44f1e34196139efc6c2ad",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe00ca758a0f1ab2db3f7441c04780630a9df11a/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe00ca758a0f1ab2db3f7441c04780630a9df11a/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=fe00ca758a0f1ab2db3f7441c04780630a9df11a",
        "patch": "@@ -29,6 +29,9 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getaddednodeinfo\", 0 },\n     { \"generate\", 0 },\n     { \"generate\", 1 },\n+    { \"generatetoaddress\", 0 },\n+    { \"generatetoaddress\", 1 },\n+    { \"generatetoaddress\", 2 },\n     { \"getnetworkhashps\", 0 },\n     { \"getnetworkhashps\", 1 },\n     { \"sendtoaddress\", 1 },"
      },
      {
        "sha": "a2abbb323d5ce88034e683fa0b2c371e43da4d69",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 33,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe00ca758a0f1ab2db3f7441c04780630a9df11a/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe00ca758a0f1ab2db3f7441c04780630a9df11a/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fe00ca758a0f1ab2db3f7441c04780630a9df11a",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"base58.h\"\n #include \"amount.h\"\n #include \"chain.h\"\n #include \"chainparams.h\"\n@@ -93,42 +94,12 @@ UniValue getnetworkhashps(const UniValue& params, bool fHelp)\n     return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n }\n \n-UniValue generate(const UniValue& params, bool fHelp)\n+UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n-        throw runtime_error(\n-            \"generate numblocks ( maxtries )\\n\"\n-            \"\\nMine up to numblocks blocks immediately (before the RPC call returns)\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. numblocks    (numeric, required) How many blocks are generated immediately.\\n\"\n-            \"2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n-            \"\\nResult\\n\"\n-            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n-            \"\\nExamples:\\n\"\n-            \"\\nGenerate 11 blocks\\n\"\n-            + HelpExampleCli(\"generate\", \"11\")\n-        );\n-\n     static const int nInnerLoopCount = 0x10000;\n     int nHeightStart = 0;\n     int nHeightEnd = 0;\n     int nHeight = 0;\n-    int nGenerate = params[0].get_int();\n-    uint64_t nMaxTries = 1000000;\n-    if (params.size() > 1) {\n-        nMaxTries = params[1].get_int();\n-    }\n-\n-    boost::shared_ptr<CReserveScript> coinbaseScript;\n-    GetMainSignals().ScriptForMining(coinbaseScript);\n-\n-    // If the keypool is exhausted, no script is returned at all.  Catch this.\n-    if (!coinbaseScript)\n-        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n-\n-    //throw an error if no script was provided\n-    if (coinbaseScript->reserveScript.empty())\n-        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n \n     {   // Don't keep cs_main locked\n         LOCK(cs_main);\n@@ -164,12 +135,84 @@ UniValue generate(const UniValue& params, bool fHelp)\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n \n-        //mark script as important because it was used at least for one coinbase output\n-        coinbaseScript->KeepScript();\n+        //mark script as important because it was used at least for one coinbase output if the script came from the wallet\n+        if (keepScript)\n+        {\n+            coinbaseScript->KeepScript();\n+        }\n     }\n     return blockHashes;\n }\n \n+UniValue generate(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"generate numblocks ( maxtries )\\n\"\n+            \"\\nMine up to numblocks blocks immediately (before the RPC call returns)\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. numblocks    (numeric, required) How many blocks are generated immediately.\\n\"\n+            \"2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n+            \"\\nResult\\n\"\n+            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nGenerate 11 blocks\\n\"\n+            + HelpExampleCli(\"generate\", \"11\")\n+        );\n+\n+    int nGenerate = params[0].get_int();\n+    uint64_t nMaxTries = 1000000;\n+    if (params.size() > 1) {\n+        nMaxTries = params[1].get_int();\n+    }\n+\n+    boost::shared_ptr<CReserveScript> coinbaseScript;\n+    GetMainSignals().ScriptForMining(coinbaseScript);\n+\n+    // If the keypool is exhausted, no script is returned at all.  Catch this.\n+    if (!coinbaseScript)\n+        throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+\n+    //throw an error if no script was provided\n+    if (coinbaseScript->reserveScript.empty())\n+        throw JSONRPCError(RPC_INTERNAL_ERROR, \"No coinbase script available (mining requires a wallet)\");\n+\n+    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, true);\n+}\n+\n+UniValue generatetoaddress(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 2 || params.size() > 3)\n+        throw runtime_error(\n+            \"generatetoaddress numblocks address (maxtries)\\n\"\n+            \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. numblocks    (numeric, required) How many blocks are generated immediately.\\n\"\n+            \"2. address    (string, required) The address to send the newly generated bitcoin to.\\n\"\n+            \"3. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n+            \"\\nResult\\n\"\n+            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nGenerate 11 blocks to myaddress\\n\"\n+            + HelpExampleCli(\"generatetoaddress\", \"11 \\\"myaddress\\\"\")\n+        );\n+\n+    int nGenerate = params[0].get_int();\n+    uint64_t nMaxTries = 1000000;\n+    if (params.size() > 2) {\n+        nMaxTries = params[2].get_int();\n+    }\n+\n+    CBitcoinAddress address(params[1].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Error: Invalid address\");\n+    \n+    boost::shared_ptr<CReserveScript> coinbaseScript(new CReserveScript());\n+    coinbaseScript->reserveScript = GetScriptForDestination(address.Get());\n+\n+    return generateBlocks(coinbaseScript, nGenerate, nMaxTries, false);\n+}\n+\n UniValue getmininginfo(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 0)"
      },
      {
        "sha": "1303a3bb1331f794fa4228bd4ee845ed8c7fd4a7",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe00ca758a0f1ab2db3f7441c04780630a9df11a/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe00ca758a0f1ab2db3f7441c04780630a9df11a/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fe00ca758a0f1ab2db3f7441c04780630a9df11a",
        "patch": "@@ -299,6 +299,7 @@ static const CRPCCommand vRPCCommands[] =\n \n     /* Coin generation */\n     { \"generating\",         \"generate\",               &generate,               true  },\n+    { \"generating\",         \"generatetoaddress\",      &generatetoaddress,      true  },\n \n     /* Raw transactions */\n     { \"rawtransactions\",    \"createrawtransaction\",   &createrawtransaction,   true  },"
      },
      {
        "sha": "35e114feef3ff10acb32ddddef3ce5ba985bc413",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe00ca758a0f1ab2db3f7441c04780630a9df11a/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe00ca758a0f1ab2db3f7441c04780630a9df11a/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=fe00ca758a0f1ab2db3f7441c04780630a9df11a",
        "patch": "@@ -193,6 +193,7 @@ extern UniValue listbanned(const UniValue& params, bool fHelp);\n extern UniValue clearbanned(const UniValue& params, bool fHelp);\n \n extern UniValue generate(const UniValue& params, bool fHelp);\n+extern UniValue generatetoaddress(const UniValue& params, bool fHelp);\n extern UniValue getnetworkhashps(const UniValue& params, bool fHelp);\n extern UniValue getmininginfo(const UniValue& params, bool fHelp);\n extern UniValue prioritisetransaction(const UniValue& params, bool fHelp);"
      }
    ]
  },
  {
    "sha": "d5c5c713e67368802b6a4ab2b6b69962364c251b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNWM1YzcxM2U2NzM2ODgwMmI2YTRhYjJiNmI2OTk2MjM2NGMyNTFi",
    "commit": {
      "author": {
        "name": "Andrew C",
        "email": "achow101@gmail.com",
        "date": "2016-03-14T21:54:34Z"
      },
      "committer": {
        "name": "Andrew C",
        "email": "achow101@gmail.com",
        "date": "2016-03-21T14:22:29Z"
      },
      "message": "RPC tests for generatetoaddress\n\nAdds two RPC tests for the generatetoaddress RPC, one in the wallet, and one when the wallet is disabled.\n\nThe wallet RPC Test mines Bitcoin to another node's address and checks that that node has received the Bitcoin.\n\nThe RPC test without the wallet mines Bitcoin to an arbitrary address and checks that it works. It then mines to an arbitrary invalid address and checks that that fails.",
      "tree": {
        "sha": "7583238d6eb662ce60ae6ef6280f4b0526c8e3cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7583238d6eb662ce60ae6ef6280f4b0526c8e3cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5c5c713e67368802b6a4ab2b6b69962364c251b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5c5c713e67368802b6a4ab2b6b69962364c251b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5c5c713e67368802b6a4ab2b6b69962364c251b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5c5c713e67368802b6a4ab2b6b69962364c251b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe00ca758a0f1ab2db3f7441c04780630a9df11a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe00ca758a0f1ab2db3f7441c04780630a9df11a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe00ca758a0f1ab2db3f7441c04780630a9df11a"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5af8158467969a20cef184db0d0807b21836b514",
        "filename": "qa/rpc-tests/disablewallet.py",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5c5c713e67368802b6a4ab2b6b69962364c251b/qa/rpc-tests/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5c5c713e67368802b6a4ab2b6b69962364c251b/qa/rpc-tests/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/disablewallet.py?ref=d5c5c713e67368802b6a4ab2b6b69962364c251b",
        "patch": "@@ -29,5 +29,19 @@ def run_test (self):\n         x = self.nodes[0].validateaddress('mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n         assert(x['isvalid'] == True)\n \n+        # Checking mining to an address without a wallet\n+        try:\n+            self.nodes[0].generatetoaddress(1, 'mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n+        except JSONRPCException,e:\n+            assert(\"Invalid address\" not in e.error['message'])\n+            assert(\"ProcessNewBlock, block not accepted\" not in e.error['message'])\n+            assert(\"Couldn't create new block\" not in e.error['message'])\n+\n+        try:\n+            self.nodes[0].generatetoaddress(1, '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n+            raise AssertionError(\"Must not mine to invalid address!\")\n+        except JSONRPCException,e:\n+            assert(\"Invalid address\" in e.error['message'])\n+\n if __name__ == '__main__':\n     DisableWalletTest ().main ()"
      },
      {
        "sha": "df176601a54b31d37b36f4c4badd162207394e3c",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5c5c713e67368802b6a4ab2b6b69962364c251b/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5c5c713e67368802b6a4ab2b6b69962364c251b/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=d5c5c713e67368802b6a4ab2b6b69962364c251b",
        "patch": "@@ -262,6 +262,18 @@ def run_test (self):\n \n         assert(\"not an integer\" in errorString)\n \n+        # Mine a block from node0 to an address from node1\n+        cbAddr = self.nodes[1].getnewaddress()\n+        blkHash = self.nodes[0].generatetoaddress(1, cbAddr)[0]\n+        cbTxId = self.nodes[0].getblock(blkHash)['tx'][0]\n+        self.sync_all()\n+\n+        # Check that the txid and balance is found by node1\n+        try:\n+            self.nodes[1].gettransaction(cbTxId)\n+        except JSONRPCException,e:\n+            assert(\"Invalid or non-wallet transaction id\" not in e.error['message'])\n+\n         #check if wallet or blochchain maintenance changes the balance\n         self.sync_all()\n         blocks = self.nodes[0].generate(2)"
      }
    ]
  }
]