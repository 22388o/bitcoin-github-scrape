[
  {
    "sha": "971bb3e901aad5d4f04a651e3e2a75161d3a4e2a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzFiYjNlOTAxYWFkNWQ0ZjA0YTY1MWUzZTJhNzUxNjFkM2E0ZTJh",
    "commit": {
      "author": {
        "name": "Josh Lehan",
        "email": "krellan@krellan.net",
        "date": "2013-08-22T11:34:33Z"
      },
      "committer": {
        "name": "Josh Lehan",
        "email": "krellan@krellan.net",
        "date": "2013-10-04T08:30:12Z"
      },
      "message": "Added ping time measurement.\nNew RPC \"ping\" command to request ping.\nImplemented \"pong\" message handler.\nNew \"pingtime\" field in getpeerinfo, to provide results to user.\nNew \"pingwait\" field, to show pings still in flight, to better see newly lagging peers.",
      "tree": {
        "sha": "b3c28acdf4f64c005c81af7d77416499ab8feeb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3c28acdf4f64c005c81af7d77416499ab8feeb8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a/comments",
    "author": {
      "login": "Krellan",
      "id": 4563817,
      "node_id": "MDQ6VXNlcjQ1NjM4MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4563817?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Krellan",
      "html_url": "https://github.com/Krellan",
      "followers_url": "https://api.github.com/users/Krellan/followers",
      "following_url": "https://api.github.com/users/Krellan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Krellan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Krellan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Krellan/subscriptions",
      "organizations_url": "https://api.github.com/users/Krellan/orgs",
      "repos_url": "https://api.github.com/users/Krellan/repos",
      "events_url": "https://api.github.com/users/Krellan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Krellan/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Krellan",
      "id": 4563817,
      "node_id": "MDQ6VXNlcjQ1NjM4MTc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4563817?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Krellan",
      "html_url": "https://github.com/Krellan",
      "followers_url": "https://api.github.com/users/Krellan/followers",
      "following_url": "https://api.github.com/users/Krellan/following{/other_user}",
      "gists_url": "https://api.github.com/users/Krellan/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Krellan/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Krellan/subscriptions",
      "organizations_url": "https://api.github.com/users/Krellan/orgs",
      "repos_url": "https://api.github.com/users/Krellan/repos",
      "events_url": "https://api.github.com/users/Krellan/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Krellan/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acb3ebc45506701fdb7e060d8b941a5ba6a1b5ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acb3ebc45506701fdb7e060d8b941a5ba6a1b5ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acb3ebc45506701fdb7e060d8b941a5ba6a1b5ac"
      }
    ],
    "stats": {
      "total": 135,
      "additions": 131,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b0df9c5e288b43a4f52f0abb5787ecc9a0ad2a70",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=971bb3e901aad5d4f04a651e3e2a75161d3a4e2a",
        "patch": "@@ -229,6 +229,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getbestblockhash\",       &getbestblockhash,       true,      false,      false },\n     { \"getconnectioncount\",     &getconnectioncount,     true,      false,      false },\n     { \"getpeerinfo\",            &getpeerinfo,            true,      false,      false },\n+    { \"ping\",                   &ping,                   true,      false,      false },\n     { \"addnode\",                &addnode,                true,      true,       false },\n     { \"getaddednodeinfo\",       &getaddednodeinfo,       true,      true,       false },\n     { \"getdifficulty\",          &getdifficulty,          true,      false,      false },"
      },
      {
        "sha": "f495870b38006155b0e0458fa725c36acea82469",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=971bb3e901aad5d4f04a651e3e2a75161d3a4e2a",
        "patch": "@@ -153,6 +153,7 @@ extern void EnsureWalletIsUnlocked();\n \n extern json_spirit::Value getconnectioncount(const json_spirit::Array& params, bool fHelp); // in rpcnet.cpp\n extern json_spirit::Value getpeerinfo(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value ping(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value addnode(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getaddednodeinfo(const json_spirit::Array& params, bool fHelp);\n "
      },
      {
        "sha": "9cf21a2a1f43b106a36aa9a278c7b67997ebd731",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 81,
        "deletions": 4,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=971bb3e901aad5d4f04a651e3e2a75161d3a4e2a",
        "patch": "@@ -3861,6 +3861,63 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     }\n \n \n+    else if (strCommand == \"pong\")\n+    {\n+        int64 pingUsecEnd = GetTimeMicros();\n+        uint64 nonce = 0;\n+        size_t nAvail = vRecv.in_avail();\n+        bool bPingFinished = false;\n+        std::string sProblem;\n+        \n+        if (nAvail >= sizeof(nonce)) {\n+            vRecv >> nonce;\n+        \n+            // Only process pong message if there is an outstanding ping (old ping without nonce should never pong)\n+            if (pfrom->nPingNonceSent != 0) {\n+                if (nonce == pfrom->nPingNonceSent) {\n+                    // Matching pong received, this ping is no longer outstanding\n+                    bPingFinished = true;\n+                    int64 pingUsecTime = pingUsecEnd - pfrom->nPingUsecStart;\n+                    if (pingUsecTime > 0) {\n+                        // Successful ping time measurement, replace previous\n+                        pfrom->nPingUsecTime = pingUsecTime;\n+                    } else {\n+                        // This should never happen\n+                        sProblem = \"Timing mishap\";\n+                    }\n+                } else {\n+                    // Nonce mismatches are normal when pings are overlapping\n+                    sProblem = \"Nonce mismatch\";\n+                    if (nonce == 0) {\n+                        // This is most likely a bug in another implementation somewhere, cancel this ping\n+                        bPingFinished = true;\n+                        sProblem = \"Nonce zero\";\n+                    }\n+                }\n+            } else {\n+                sProblem = \"Unsolicited pong without ping\";\n+            }\n+        } else {\n+            // This is most likely a bug in another implementation somewhere, cancel this ping\n+            bPingFinished = true;\n+            sProblem = \"Short payload\";\n+        }\n+        \n+        if (!(sProblem.empty())) {\n+            LogPrint(\"net\", \"pong %s %s: %s, %\"PRI64x\" expected, %\"PRI64x\" received, %zu bytes\\n\"\n+                , pfrom->addr.ToString().c_str()\n+                , pfrom->strSubVer.c_str()\n+                , sProblem.c_str()\n+                , pfrom->nPingNonceSent\n+                , nonce\n+                , nAvail);\n+        }\n+        if (bPingFinished) {\n+            pfrom->nPingNonceSent = 0;\n+        }\n+    }\n+    \n+    \n     else if (strCommand == \"alert\")\n     {\n         CAlert alert;\n@@ -4082,14 +4139,34 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         if (pto->nVersion == 0)\n             return true;\n \n-        // Keep-alive ping. We send a nonce of zero because we don't use it anywhere\n-        // right now.\n+        //\n+        // Message: ping\n+        //\n+        bool pingSend = false;\n+        if (pto->fPingQueued) {\n+            // RPC ping request by user\n+            pingSend = true;\n+        }\n         if (pto->nLastSend && GetTime() - pto->nLastSend > 30 * 60 && pto->vSendMsg.empty()) {\n+            // Ping automatically sent as a keepalive\n+            pingSend = true;\n+        }\n+        if (pingSend) {\n             uint64 nonce = 0;\n-            if (pto->nVersion > BIP0031_VERSION)\n+            while (nonce == 0) {\n+                RAND_bytes((unsigned char*)&nonce, sizeof(nonce));\n+            }\n+            pto->nPingNonceSent = nonce;\n+            pto->fPingQueued = false;\n+            if (pto->nVersion > BIP0031_VERSION) {\n+                // Take timestamp as close as possible before transmitting ping\n+                pto->nPingUsecStart = GetTimeMicros();\n                 pto->PushMessage(\"ping\", nonce);\n-            else\n+            } else {\n+                // Peer is too old to support ping command with nonce, pong will never arrive, disable timing\n+                pto->nPingUsecStart = 0;\n                 pto->PushMessage(\"ping\");\n+            }\n         }\n \n         // Start block sync"
      },
      {
        "sha": "5afedb1fd26c4d5cc3e08f47767acccc2cee9f6e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=971bb3e901aad5d4f04a651e3e2a75161d3a4e2a",
        "patch": "@@ -620,6 +620,21 @@ void CNode::copyStats(CNodeStats &stats)\n     X(nSendBytes);\n     X(nRecvBytes);\n     stats.fSyncNode = (this == pnodeSync);\n+    \n+    // It is common for nodes with good ping times to suddenly become lagged,\n+    // due to a new block arriving or other large transfer.\n+    // Merely reporting pingtime might fool the caller into thinking the node was still responsive,\n+    // since pingtime does not update until the ping is complete, which might take a while.\n+    // So, if a ping is taking an unusually long time in flight,\n+    // the caller can immediately detect that this is happening.\n+    int64 nPingUsecWait = 0;\n+    if ((0 != nPingNonceSent) && (0 != nPingUsecStart)) {\n+        nPingUsecWait = GetTimeMicros() - nPingUsecStart;\n+    }\n+    \n+    // Raw ping time is in microseconds, but show it to user as whole seconds (Bitcoin users should be well used to small numbers with many decimal places by now :)\n+    stats.dPingTime = (((double)nPingUsecTime) / 1e6);\n+    stats.dPingWait = (((double)nPingUsecWait) / 1e6);\n }\n #undef X\n "
      },
      {
        "sha": "b57f38fe3aff8c0fd095be2ac97e230878569e1a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=971bb3e901aad5d4f04a651e3e2a75161d3a4e2a",
        "patch": "@@ -119,6 +119,8 @@ class CNodeStats\n     uint64 nSendBytes;\n     uint64 nRecvBytes;\n     bool fSyncNode;\n+    double dPingTime;\n+    double dPingWait;\n };\n \n \n@@ -234,6 +236,12 @@ class CNode\n     CCriticalSection cs_inventory;\n     std::multimap<int64, CInv> mapAskFor;\n \n+    // Ping time measurement\n+    uint64 nPingNonceSent;\n+    int64 nPingUsecStart;\n+    int64 nPingUsecTime;\n+    bool fPingQueued;\n+    \n     CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn = \"\", bool fInboundIn=false) : ssSend(SER_NETWORK, MIN_PROTO_VERSION)\n     {\n         nServices = 0;\n@@ -268,6 +276,10 @@ class CNode\n         fRelayTxes = false;\n         setInventoryKnown.max_size(SendBufferSize() / 1000);\n         pfilter = new CBloomFilter();\n+        nPingNonceSent = 0;\n+        nPingUsecStart = 0;\n+        nPingUsecTime = 0;\n+        fPingQueued = false;\n \n         // Be shy and don't send version until we hear\n         if (hSocket != INVALID_SOCKET && !fInbound)"
      },
      {
        "sha": "7df86cc2db740eed3e05081dbccae9db1e365c18",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/971bb3e901aad5d4f04a651e3e2a75161d3a4e2a/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=971bb3e901aad5d4f04a651e3e2a75161d3a4e2a",
        "patch": "@@ -19,6 +19,24 @@ Value getconnectioncount(const Array& params, bool fHelp)\n     return (int)vNodes.size();\n }\n \n+Value ping(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+            \"ping\\n\"\n+            \"Requests that a ping be sent to all other nodes, to measure ping time.\\n\"\n+            \"Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\\n\"\n+            \"Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\");\n+    \n+    // Request that each node send a ping during next message processing pass\n+    LOCK(cs_vNodes);\n+    BOOST_FOREACH(CNode* pNode, vNodes) {\n+        pNode->fPingQueued = true;\n+    }\n+\n+    return Value::null;\n+}\n+\n static void CopyNodeStats(std::vector<CNodeStats>& vstats)\n {\n     vstats.clear();\n@@ -54,6 +72,9 @@ Value getpeerinfo(const Array& params, bool fHelp)\n         obj.push_back(Pair(\"bytessent\", (boost::int64_t)stats.nSendBytes));\n         obj.push_back(Pair(\"bytesrecv\", (boost::int64_t)stats.nRecvBytes));\n         obj.push_back(Pair(\"conntime\", (boost::int64_t)stats.nTimeConnected));\n+        obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n+        if (stats.dPingWait > 0.0)\n+            obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n         obj.push_back(Pair(\"version\", stats.nVersion));\n         obj.push_back(Pair(\"subver\", stats.strSubVer));\n         obj.push_back(Pair(\"inbound\", stats.fInbound));"
      }
    ]
  }
]