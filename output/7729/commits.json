[
  {
    "sha": "6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTBkMjc0MTJkOWMxYjE2ZTRiZGZjNDA2ZWUxZTdiMGVlNmEyYTUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-21T15:55:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-03-22T20:27:53Z"
      },
      "message": "rpc: introduce 'label' API for wallet\n\nAdd label API to wallet RPC.\n\nThis is one step towards #3816 (\"Remove bolt-on account system\") although it doesn't\nactually remove anything yet.\n\nThese initially mirror the account functions, with the following differences:\n\n- These functions aren't DEPRECATED in the help\n- Help mentions 'label' instead of accounts. In the language used, labels are\n  associated with addresses, instead of addresses associated with labels. (unlike\n  with accounts.)\n- Labels have no balance\n  - No balances in `listlabels`\n  - `listlabels` has no minconf or watchonly argument\n- Like in the GUI, labels can be set on any address, not just receiving addreses\n- Unlike accounts, labels can be deleted.\n  Being unable to delete them is a common annoyance (see #1231).\n  Currently only by reassigning all addresses using `setlabel`, but an explicit\n  call `deletelabel` which assigns all address to the default label may make\n  sense.",
      "tree": {
        "sha": "8d1d56ef7d2f830a871a12d2508f249993ef77a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d1d56ef7d2f830a871a12d2508f249993ef77a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cead84b72d27517338ac3c49eaaed4db07352f41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cead84b72d27517338ac3c49eaaed4db07352f41",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cead84b72d27517338ac3c49eaaed4db07352f41"
      }
    ],
    "stats": {
      "total": 240,
      "additions": 213,
      "deletions": 27
    },
    "files": [
      {
        "sha": "903f891fa8c160aead6dca218d12888df6cb1344",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 187,
        "deletions": 25,
        "changes": 212,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51",
        "patch": "@@ -187,6 +187,11 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     return EncodeDestination(dest);\n }\n \n+void DeleteLabel(CWallet& wallet, std::string label)\n+{\n+    CWalletDB walletdb(wallet.GetDBHandle());\n+    walletdb.EraseAccount(label);\n+}\n \n CTxDestination GetLabelDestination(CWallet* const pwallet, const std::string& label, bool bForceNew=false)\n {\n@@ -208,11 +213,11 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"label\\\"         (string, required) The label name for the address. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created and a new address created  if there is no label by the given name.\\n\"\n+            \"1. \\\"label\\\"         (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n             \"\\nResult:\\n\"\n-            \"\\\"address\\\"          (string) The label bitcoin address\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"getlabeladdress\", \"\")\n             + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n@@ -290,14 +295,14 @@ UniValue setlabel(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"setlabel \\\"address\\\" \\\"label\\\"\\n\"\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n             \"\\nSets the label associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with a label.\\n\"\n-            \"2. \\\"label\\\"           (string, required) The label to assign the address to.\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with a label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n-            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n         );\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n@@ -308,22 +313,24 @@ UniValue setlabel(const JSONRPCRequest& request)\n     }\n \n     std::string label;\n-    if (!request.params[1].isNull())\n+    if (!request.params[1].isNull()) {\n         label = LabelFromValue(request.params[1]);\n+    }\n \n-    // Only add the label if the address is yours.\n     if (IsMine(*pwallet, dest)) {\n-        // Detect when changing the label of an address that is the 'unused current key' of another label:\n+        // Detect when changing the label of an address that is the 'label address' of another label:\n+        // If so, delete the account record for it. Labels, unlike addresses, can be deleted,\n+        // and if we wouldn't do this, the record would stick around forever.\n         if (pwallet->mapAddressBook.count(dest)) {\n             std::string old_label = pwallet->mapAddressBook[dest].name;\n             if (dest == GetLabelDestination(pwallet, old_label)) {\n-                GetLabelDestination(pwallet, old_label, true);\n+                DeleteLabel(*pwallet, old_label);\n             }\n         }\n         pwallet->SetAddressBook(dest, label, \"receive\");\n+    } else {\n+        pwallet->SetAddressBook(dest, label, \"send\");\n     }\n-    else\n-        throw JSONRPCError(RPC_MISC_ERROR, \"setlabel can only be used with own address\");\n \n     return NullUniValue;\n }\n@@ -3809,6 +3816,152 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        for (const std::pair<std::string, std::string>& item : data.destdata) {\n+            ddata.push_back(Pair(item.first, item.second));\n+        }\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        return AddressBookDataToJSON(mi->second, true);\n+    }\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string strLabel = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == strLabel) {\n+            ret.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> setLabels;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            setLabels.insert(entry.second.name);\n+        }\n+    }\n+    UniValue ret(UniValue::VARR);\n+    for (const std::string &name : setLabels) {\n+        ret.push_back(name);\n+    }\n+\n+    return ret;\n+}\n+\n extern UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n extern UniValue importprivkey(const JSONRPCRequest& request);\n@@ -3835,16 +3988,9 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },\n-    { \"wallet\",             \"getlabeladdress\",                  &getlabeladdress,               {\"label\"} },\n-    { \"wallet\",             \"getaccountaddress\",                &getlabeladdress,               {\"account\"} },\n-    { \"wallet\",             \"getaccount\",                       &getaccount,                    {\"address\"} },\n-    { \"wallet\",             \"getaddressesbyaccount\",            &getaddressesbyaccount,         {\"account\"} },\n-    { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },\n     { \"wallet\",             \"getbalance\",                       &getbalance,                    {\"account\",\"minconf\",\"include_watchonly\"} },\n     { \"wallet\",             \"getnewaddress\",                    &getnewaddress,                 {\"label|account\",\"address_type\"} },\n     { \"wallet\",             \"getrawchangeaddress\",              &getrawchangeaddress,           {\"address_type\"} },\n-    { \"wallet\",             \"getreceivedbylabel\",               &getreceivedbylabel,            {\"label\",\"minconf\"} },\n-    { \"wallet\",             \"getreceivedbyaccount\",             &getreceivedbylabel,            {\"account\",\"minconf\"} },\n     { \"wallet\",             \"getreceivedbyaddress\",             &getreceivedbyaddress,          {\"address\",\"minconf\"} },\n     { \"wallet\",             \"gettransaction\",                   &gettransaction,                {\"txid\",\"include_watchonly\"} },\n     { \"wallet\",             \"getunconfirmedbalance\",            &getunconfirmedbalance,         {} },\n@@ -3856,7 +4002,6 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"importprunedfunds\",                &importprunedfunds,             {\"rawtransaction\",\"txoutproof\"} },\n     { \"wallet\",             \"importpubkey\",                     &importpubkey,                  {\"pubkey\",\"label\",\"rescan\"} },\n     { \"wallet\",             \"keypoolrefill\",                    &keypoolrefill,                 {\"newsize\"} },\n-    { \"wallet\",             \"listaccounts\",                     &listaccounts,                  {\"minconf\",\"include_watchonly\"} },\n     { \"wallet\",             \"listaddressgroupings\",             &listaddressgroupings,          {} },\n     { \"wallet\",             \"listlockunspent\",                  &listlockunspent,               {} },\n     { \"wallet\",             \"listreceivedbylabel\",              &listreceivedbylabel,           {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n@@ -3867,12 +4012,9 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"listunspent\",                      &listunspent,                   {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n     { \"wallet\",             \"listwallets\",                      &listwallets,                   {} },\n     { \"wallet\",             \"lockunspent\",                      &lockunspent,                   {\"unlock\",\"transactions\"} },\n-    { \"wallet\",             \"move\",                             &movecmd,                       {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n     { \"wallet\",             \"sendfrom\",                         &sendfrom,                      {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n     { \"wallet\",             \"sendmany\",                         &sendmany,                      {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n     { \"wallet\",             \"sendtoaddress\",                    &sendtoaddress,                 {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"replaceable\",\"conf_target\",\"estimate_mode\"} },\n-    { \"wallet\",             \"setlabel\",                         &setlabel,                      {\"address\",\"label\"} },\n-    { \"wallet\",             \"setaccount\",                       &setlabel,                      {\"address\",\"account\"} },\n     { \"wallet\",             \"settxfee\",                         &settxfee,                      {\"amount\"} },\n     { \"wallet\",             \"signmessage\",                      &signmessage,                   {\"address\",\"message\"} },\n     { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },\n@@ -3882,6 +4024,26 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n     { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n \n+    /** Account functions (deprecated) */\n+    { \"wallet\",             \"getaccountaddress\",                &getlabeladdress,               {\"account\"} },\n+    { \"wallet\",             \"getaccount\",                       &getaccount,                    {\"address\"} },\n+    { \"wallet\",             \"getaddressesbyaccount\",            &getaddressesbyaccount,         {\"account\"} },\n+    { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },\n+    { \"wallet\",             \"getreceivedbyaccount\",             &getreceivedbylabel,            {\"account\",\"minconf\"} },\n+    { \"wallet\",             \"listaccounts\",                     &listaccounts,                  {\"minconf\",\"include_watchonly\"} },\n+    { \"wallet\",             \"listreceivedbyaccount\",            &listreceivedbylabel,           {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"setaccount\",                       &setlabel,                      {\"address\",\"account\"} },\n+    { \"wallet\",             \"move\",                             &movecmd,                       {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n+\n+    /** Label functions (to replace non-balance account functions) */\n+    { \"wallet\",             \"getlabeladdress\",                  &getlabeladdress,               {\"label\"} },\n+    { \"wallet\",             \"getlabel\",                         &getlabel,                      {\"bitcoinaddress\"} },\n+    { \"wallet\",             \"getaddressesbylabel\",              &getaddressesbylabel,           {\"label\"} },\n+    { \"wallet\",             \"getreceivedbylabel\",               &getreceivedbylabel,            {\"label\",\"minconf\"} },\n+    { \"wallet\",             \"listlabels\",                       &listlabels,                    {\"purpose\"} },\n+    { \"wallet\",             \"listreceivedbylabel\",              &listreceivedbylabel,           {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n+    { \"wallet\",             \"setlabel\",                         &setlabel,                      {\"bitcoinaddress\",\"label\"} },\n+\n     { \"generating\",         \"generate\",                         &generate,                      {\"nblocks\",\"maxtries\"} },\n };\n "
      },
      {
        "sha": "1e62bd364738602bad72ca9321076d4f31d639a1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51",
        "patch": "@@ -548,7 +548,7 @@ class CWalletKey\n };\n \n /**\n- * Internal transfers.\n+ * DEPRECATED Internal transfers.\n  * Database key is acentry<account><counter>.\n  */\n class CAccountingEntry\n@@ -1202,7 +1202,7 @@ class CReserveKey final : public CReserveScript\n \n \n /** \n- * Account information.\n+ * DEPRECATED Account information.\n  * Stored in wallet with key \"acc\"+string account name.\n  */\n class CAccount"
      },
      {
        "sha": "bbbe380f8825ca496445573ba77cfde7516491dd",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51",
        "patch": "@@ -161,6 +161,11 @@ bool CWalletDB::WriteAccount(const std::string& strAccount, const CAccount& acco\n     return WriteIC(std::make_pair(std::string(\"acc\"), strAccount), account);\n }\n \n+bool CWalletDB::EraseAccount(const std::string& strAccount)\n+{\n+    return EraseIC(std::make_pair(std::string(\"acc\"), strAccount));\n+}\n+\n bool CWalletDB::WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry)\n {\n     return WriteIC(std::make_pair(std::string(\"acentry\"), std::make_pair(acentry.strAccount, nAccEntryNum)), acentry);"
      },
      {
        "sha": "f365a5b49baf772f589aa0ee25916ed8f0f08f92",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51",
        "patch": "@@ -204,6 +204,7 @@ class CWalletDB\n     bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n     bool ReadAccount(const std::string& strAccount, CAccount& account);\n     bool WriteAccount(const std::string& strAccount, const CAccount& account);\n+    bool EraseAccount(const std::string& strAccount);\n \n     /// Write destination data key,value tuple to database\n     bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);"
      },
      {
        "sha": "8aec305cce878ccd3511caada28d4eda89d8f927",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51",
        "patch": "@@ -15,6 +15,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from collections import defaultdict\n \n class WalletLabelsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -81,6 +82,9 @@ def run_test(self):\n             label.add_receive_address(node.getlabeladdress(label.name))\n             label.verify(node)\n \n+        # Check all labels are returned by listlabels.\n+        assert_equal(node.listlabels(), [label.name for label in labels])\n+\n         # Send a transaction to each label, and make sure this forces\n         # getlabeladdress to generate a new receiving address.\n         for label in labels:\n@@ -128,6 +132,7 @@ def run_test(self):\n                 addresses.append(node.getnewaddress())\n             multisig_address = node.addmultisigaddress(5, addresses, label.name)['address']\n             label.add_address(multisig_address)\n+            label.purpose[multisig_address] = \"send\"\n             label.verify(node)\n             node.sendfrom(\"\", multisig_address, 50)\n         node.generate(101)\n@@ -160,6 +165,8 @@ def __init__(self, name):\n         self.receive_address = None\n         # List of all addresses assigned with this label\n         self.addresses = []\n+        # Map of address to address purpose\n+        self.purpose = defaultdict(lambda: \"receive\")\n \n     def add_address(self, address):\n         assert_equal(address not in self.addresses, True)\n@@ -175,8 +182,19 @@ def verify(self, node):\n             assert_equal(node.getlabeladdress(self.name), self.receive_address)\n \n         for address in self.addresses:\n+            assert_equal(\n+                node.getlabel(address),\n+                {\"name\": self.name,\n+                 \"purpose\": self.purpose[address],\n+                 \"destdata\": {}})\n             assert_equal(node.getaccount(address), self.name)\n \n+        assert_equal(\n+            node.getaddressesbylabel(self.name),\n+            {address: {\n+                \"purpose\": self.purpose[address]\n+            }\n+             for address in self.addresses})\n         assert_equal(\n             set(node.getaddressesbyaccount(self.name)), set(self.addresses))\n "
      }
    ]
  },
  {
    "sha": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWY0MTc4OWU4ZDcyOTNjY2ZkODU5YmM5MGZhMGEzYjI0ODQ3NTJk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-12T18:17:23Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-03-22T20:27:53Z"
      },
      "message": "[wallet] Make setlabel idempotent\n\nPrevent setlabel calls on an address that already has the same label, and which\nis the already the default \"label address\" of that label, from generating a\nnew default address.\n\nThis way calling setlabel on an address that already has the specified label is\na no-op.\n\nChange suggested by Russell Yanofsky <russ@yanofsky.org> in\nhttps://github.com/bitcoin/bitcoin/pull/7729#discussion_r92064042",
      "tree": {
        "sha": "109e8272d52a6a3369df813d4cef50eb9b2ed2d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/109e8272d52a6a3369df813d4cef50eb9b2ed2d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fef41789e8d7293ccfd859bc90fa0a3b2484752d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef41789e8d7293ccfd859bc90fa0a3b2484752d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "abdd4a2ea3febf60d1b124448d5ed2ff97a12b48",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef41789e8d7293ccfd859bc90fa0a3b2484752d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef41789e8d7293ccfd859bc90fa0a3b2484752d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fef41789e8d7293ccfd859bc90fa0a3b2484752d",
        "patch": "@@ -323,7 +323,7 @@ UniValue setlabel(const JSONRPCRequest& request)\n         // and if we wouldn't do this, the record would stick around forever.\n         if (pwallet->mapAddressBook.count(dest)) {\n             std::string old_label = pwallet->mapAddressBook[dest].name;\n-            if (dest == GetLabelDestination(pwallet, old_label)) {\n+            if (old_label != label && dest == GetLabelDestination(pwallet, old_label)) {\n                 DeleteLabel(*pwallet, old_label);\n             }\n         }"
      },
      {
        "sha": "06a3bdd7b88a02d1152c7ee27449ba1a68944e99",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef41789e8d7293ccfd859bc90fa0a3b2484752d/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef41789e8d7293ccfd859bc90fa0a3b2484752d/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=fef41789e8d7293ccfd859bc90fa0a3b2484752d",
        "patch": "@@ -152,9 +152,7 @@ def run_test(self):\n         change_label(node, labels[2].addresses[0], labels[2], labels[2])\n \n         # Check that setlabel can set the label of an address which is\n-        # already the receiving address of the label. It would probably make\n-        # sense for this to be a no-op, but right now it resets the receiving\n-        # address, causing getlabeladdress to return a brand new address.\n+        # already the receiving address of the label. This is a no-op.\n         change_label(node, labels[2].receive_address, labels[2], labels[2])\n \n class Label:\n@@ -210,7 +208,7 @@ def change_label(node, address, old_label, new_label):\n     # address of a different label should reset the receiving address of\n     # the old label, causing getlabeladdress to return a brand new\n     # address.\n-    if address == old_label.receive_address:\n+    if old_label.name != new_label.name and address == old_label.receive_address:\n         new_address = node.getlabeladdress(old_label.name)\n         assert_equal(new_address not in old_label.addresses, True)\n         assert_equal(new_address not in new_label.addresses, True)"
      }
    ]
  }
]