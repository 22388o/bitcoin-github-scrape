jonasschnelli,2016-03-21T16:14:04Z,Concept ACK.\nI just wonder if this makes the wallet code more complex (add another layer).\n\nMy idea was it to duplicate the current wallet implementation (`cp src/wallet src/newwallet`-approach) and add such things there (after removing the accounts-related code). Also the Bip32 and @CodeShark multi-wallet PR could be added there.\n\nThe second wallet could come without API stableness (for the ,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199361174,199361174,
laanwj,2016-03-21T16:17:42Z,"> I just wonder if this makes the wallet code more complex (add another layer).\n\nI disagree:\n- All of this functionality is required anyway to support the GUI.\n- Yes, there is some intentional duplication, but only until the account calls are ripped out, which should be one of the next steps.\n- There are only added RPC calls in rpcwallet.cpp. The `CWallet` class is not complicated by this.\n\",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199362346,199362346,
jonasschnelli,2016-03-21T16:33:16Z,"> As for alternative wallets, they've been proposed since at least 2012 - but none have materialized yet. And none of this change rules them out.\n\nYes. I agree.\nThis PR has a clear value.\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199368604,199368604,
luke-jr,2016-03-21T19:42:09Z,"Note getaccountaddress does not presently get a ""default"" address, it gets an _unused_ address with the label, creating one if necessary. This seems useful _only_ for mining, since no other context can guarantee an address hasn't been ""used"" but not sent to yet. I can't think of a good way to deprecate this, however.\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199444036,199444036,
laanwj,2016-03-22T08:53:51Z,"> it gets an unused address with the label, creating one if necessary.\n\nI wonder if we can find a better (or at least simpler, the `GetAccountAddress` function is pretty terrible) way to do this, now that we're creating a new API anyway. Need to think about this a bit.\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199705726,199705726,
laanwj,2016-03-23T07:10:17Z,"@luke-jr \n\n> I wonder if we can find a better (or at least simpler, the GetAccountAddress function is pretty terrible) way to do this, now that we're creating a new API anyway. Need to think about this a bit.\n\nI thought of the following: you could use two labels, one for the 'active' address, one for the 'normal'. Say `mining_active` and `mining`.\n\nWhen the miner needs an address it will:\n-",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-200219840,200219840,
luke-jr,2016-04-07T07:25:48Z,"That looks like a lot of overhead, and this is a rather time-sensitive call, as the miner is working on stale work until it's done.\n\nAlso, why are there no getreceivedbylabel/listreceivedbylabel? These don't have anything to do with balances.\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206735494,206735494,
laanwj,2016-04-07T14:19:30Z,"> That looks like a lot of overhead, and this is a rather time-sensitive call, as the miner is working on stale work until it's done.\n\nI'd suggest to try it. It shouldn't be much slower.\n\n> Also, why are there no getreceivedbylabel/listreceivedbylabel? These don't have anything to do with balances.\n\nLooks like you're right. `getreceivedbyaccount` doesn't actually return the account balance, ",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206927479,206927479,
sipa,2016-04-07T14:24:05Z,"@luke-jr Wouldn't it be feasible to instead generate a sequence of deterministic addresses for mining, for example using BIP32 derivation with the block height as index?\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206929678,206929678,
luke-jr,2016-04-07T14:37:48Z,"> I'd suggest to try it. It shouldn't be much slower.\n\n@laanwj getreceivedbyaddress at least would loop over all the wtx... and then there's the additional latency from the back and forth of multiple calls. I haven't tried it yet, though.\n\n> Wouldn't it be feasible to instead generate a sequence of deterministic addresses for mining, for example using BIP32 derivation with the block height as ",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206934807,206934807,
sipa,2016-04-07T14:48:27Z,"@luke-jr I mean the mining software can do derivation, and import the keys into the wallet when a block is found.\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206938418,206938418,
MarcoFalke,2016-05-22T12:02:24Z,"The functional test coverage for accounts is minimal or not existent, I think we should move forward with this pull.\n\nNeeds rebase.\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-220828728,220828728,
jonasschnelli,2016-05-22T12:54:32Z,"Re-Concept ACK.\nI think this solution makes more sense than the closed #7830.\nNeeds tests, rebase and release-note mentioning.\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-220830924,220830924,
wallclockbuilder,2016-05-22T16:04:32Z,Needs tests.\n,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-220840308,220840308,
laanwj,2016-06-02T13:13:50Z,"@wallclockbuilder No shit, have you seen the TODOs at the bottom of the opening post?\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-223287263,223287263,
laanwj,2016-06-02T13:15:57Z,"To be clear I posted this to get comments on the API, is there anything left to be done there? I'm going to write tests when it is clear that this is what we want at all.\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-223287825,223287825,
MarcoFalke,2016-07-14T20:05:04Z,> Do not use the deprecated account system and the label system with the same wallet at the same time\n> [...]\n> optional: a flag in the wallet to prevent use of both the account and label API\n\nI would not consider this optional. User will always do what you not want them to do.\n,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-232776422,232776422,
sipa,2016-08-25T12:46:57Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-242373379,242373379,
andrewbaine,2016-09-24T02:38:58Z,"listtransactions has an ""account"" argument where you now you would pass ""*"" if you need to supply non-default args for count, from, and includeWatchOnly. Will there be a way to query for transactions affecting any address with a given label? Could we tack on a ""label"" argument to listtransactions?\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-249340313,249340313,
laanwj,2016-09-24T05:25:44Z,"I think the account argument of listtransactions could simply be re-used as a label argument. As listing transactions to a label has nothing to do with per-label balances there is no need to drop that particular functionality, \n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-249346342,249346342,
andrewbaine,2016-10-03T15:00:33Z,"repurposing the ""account"" argument to be ""label"" makes sense to me\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-251130307,251130307,
jtimon,2016-11-17T22:38:06Z,"Fast review ACK (besides needing rebase and the promised tests).\nThe API is actually more than I expected but still simple enough, I think.\n\n> optional: a flag in the wallet to prevent use of both the account and label API\n\nI'm not sure it's worth to bother. I think we should go ahead and completely remove account functionality within 0.14 instead. But whatever we do, it can be done in a late",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261392305,261392305,
instagibbs,2016-11-18T14:06:38Z,"> labels are associated with addresses, instead of addresses associated with labels\n\nDescription nit: not sure I catch the distinction here.  \n\n> Should there be such a thing as a 'label address'?  \n\nI'd say no unless there is a compelling use-case that can't be replicated another way.\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261539197,261539197,
laanwj,2016-11-21T12:48:36Z,"> It also may be helpful to give a brief motivation in the OP. What's wrong with accounts, and what label fixes about that. Currently it's a list of differences without clear motivation.\n\nSee #3816",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261928077,261928077,
jonasschnelli,2016-11-21T12:53:55Z,utACK a2557ffb80543af5e92c3db03d257fe594b0d910 needs (trivial) rebase for the new `JSONRPCRequest` object passing.,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261929161,261929161,
instagibbs,2016-11-21T13:09:22Z,"@laanwj yes I read the issue, but there are some disagreements in that thread about what the actual issue is(malleability being the first issue noted?). I assume it's along the lines of ""people want to watermark addresses, but bitcoind wallet shouldn't try to be an accounting system for those labels"".",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261933520,261933520,
motatoes,2016-11-22T22:52:56Z,Hi. When is this new feature expected to be rolled out?,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-262390221,262390221,
sipa,2016-11-22T22:54:26Z,"@motatoes Like everything, when it's ready. That may be in 0.14.0 or later.",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-262390495,262390495,
ryanofsky,2016-12-13T00:00:47Z,"@laanwj , I created an RPC test for this change here: https://github.com/ryanofsky/bitcoin/commit/2dac8eb0d915b4c04764eff100d81718b2cd9a90\n\nFeel free to incorporate it in this PR, or I could create a separate one.\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-266593020,266593020,
jtimon,2016-12-16T15:52:05Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-267624474,267624474,
jtimon,2017-03-06T22:42:00Z,"Needs rebase again, sorry for not reviewing after the last rebase.",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-284558409,284558409,
sipa,2017-03-16T19:39:07Z,Concept reACK,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-287168649,287168649,
TheBlueMatt,2017-03-24T21:13:34Z,Needs rebase. Concept ACK,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-289144410,289144410,
ryanofsky,2017-04-07T12:25:27Z,"@laanwj, do you want to cherry pick my unit test into this PR? (https://github.com/ryanofsky/bitcoin/commit/2dac8eb0d915b4c04764eff100d81718b2cd9a90)\n\nIn [IRC recently](https://botbot.me/freenode/bitcoin-core-dev/msg/83565594/), you requested that people ""please review the *API*, not the code,"" and I think the unit test can help with this, because it demonstrates the API in action, covers vari",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-292522820,292522820,
laanwj,2017-04-07T16:03:04Z,"> @laanwj, do you want to cherry pick my unit test into this PR? (ryanofsky@2dac8eb)\n\nYes, I will, thank you!",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-292577814,292577814,
TheBlueMatt,2017-04-23T16:26:44Z,API ACK. Still needs rebase :(,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-296454888,296454888,
gmaxwell,2017-05-19T21:58:01Z,I expected to be able to attach multiple labels to a single address.,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-302820825,302820825,
laanwj,2017-05-20T06:43:22Z,"> I expected to be able to attach multiple labels to a single address.\n\nThat is not possible in the GUI either, in the OP I've defined the scope as:\n\n> The general idea is to offer the same functionality as the GUI label system\n\nSuch functionality could be added in the future.",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-302854998,302854998,
jtimon,2017-05-20T09:26:17Z,Nobody seems to have big problems with the API for a while. Perhaps it's time to rebase and start reviewing the code itself,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-302862044,302862044,
jnewbery,2017-06-12T15:25:35Z,"I wanted to test this so I rebased on master and cherry-picked Russ's test. I've pushed it here: https://github.com/jnewbery/bitcoin/tree/pr7729 . Feel free to reset onto that commit. Note that there were quite a few refactors (multiwallet, namespaces, database wrapper, JSONRPC request, rpc names args), so someone else should probably review the rebase to make sure I haven't missed anything.\n\n",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-307823982,307823982,
jnewbery,2017-06-12T18:40:40Z,"I've made a few more changes to rpcwallet.cpp to reflect more recent style guidelines (no `BOOST_FOREACH` and braces for if statements. I've also committed a fixup commit for the failing test case. @laanwj feel free to squash that if you're happy with it.\n\nOnce you've taken the changes I'll add my review comments.",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-307881106,307881106,
laanwj,2017-06-14T09:19:49Z,@jnewbery Thanks so much! Updated this pull to that branch.,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-308374415,308374415,
jnewbery,2017-06-14T14:45:20Z,needs rebase again! (although this one should be easier - just fixing the `BASE_SCRIPTS` list in test_runner.py),https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-308454179,308454179,
laanwj,2017-06-25T11:18:55Z,"So to summarize above discussion, the following changes should be made:\n- Add `listreceivedbylabel`, listing transactions to addresses that have a certain label\n- Remove the default label address. Discussion confirms my intuition that it's better to get rid of this. \n  - 'acc' database entries, as well as CAccount, would not be necessary for labels. After this change, labels have no metadata",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-310896931,310896931,
jnewbery,2017-07-07T15:52:04Z,"> We already have a command line argument to upgrade the wallet version, -upgradewallet. Wouldn't that be enough\n\nACK - yes this is enough.\n\nThe wallet startup command line arguments always seemed strange to me, and if we were building this from scratch we might implement upgradewallet as an RPC or an external tool. However, it makes sense to use the existing infrastructure.\n\n> Either ",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-313720486,313720486,
mmgen,2017-07-23T11:27:42Z,"@laanwj `importaddress`, `importpubkey` and `importprivkey` have ""label"" arguments that currently set the account for an address. (To delete the old account for an address and create a new one, it's enough to just re-import the address.)  Won't these calls need to be updated as well? I don't see them in your patch.",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-317246483,317246483,
mmgen,2017-07-29T09:39:27Z,"@jnewbery Since I got no reponse from @laanwj, I'll refer you to my above comment. The behavior I mentioned can be easily demonstrated with the following:\n\n	$ bitcoin-cli importaddress n2FgXPKwuFkCXF946EnoxWJDWF2VwQ6q8J 'Label 1'\n	$ bitcoin-cli listaccounts 0 true | grep 'Label 1'\n	 ""Label 1"": 0.00000000,\n	$ bitcoin-cli importaddress n2FgXPKwuFkCXF946EnoxWJDWF2VwQ6q8J 'Label 2'\n	$ bitc",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-318817191,318817191,
jnewbery,2017-07-30T02:39:32Z,"@mmgen : @laanwj is very busy with the 0.15 release right now, so I'm not surprised he hasn't updated this PR. I'm planning on picking this up early in 0.16 and I'll review your comments then. Any help with review/testing then will be very much appreciated!",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-318873687,318873687,
mmgen,2017-07-30T10:59:57Z,@jnewbery Thanks! Will be ready to help when needed.,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-318894146,318894146,
achow101,2017-10-14T19:12:40Z,"Concept ACK, needs rebase.\n\nMaybe this and #11497 should be done together?\n\nEarlier in this thread, it was suggested that the version number be bumped to distinguish between whether to use accounts or wallets. Because of the HD wallets thing with the optional features in the version number, would we want to bump the version number (which would then mean only HD wallets can use labels) or d",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-336660069,336660069,
ryanofsky,2017-10-16T14:51:24Z,Should probably just drop the version number idea now that we have the `-deprecatedrpc` mechanism. Seems like adding versioning to the decision of which rpcs to enable would make the transition more complicated without providing a clear benefit.,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-336911546,336911546,
meshcollider,2017-10-20T09:12:59Z,"I've rebased this on current master here, as well as fixed a few of the nits above: https://github.com/MeshCollider/bitcoin/tree/201710_labels_rebased\nFeel free to use that if it helps, and squash my commits into yours if needed :)\n\nStill to-do summary from comments:\n- Remove `getlabeladdress` RPC\n- Add `listreceivedbylabel` RPC\n- Incorporate #11497 to disable accounts at the same time",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-338151842,338151842,
mmgen,2017-10-20T10:07:34Z,"`importaddress`, `importpubkey` and `importprivkey` have 'label' arguments (see my note above) that currently set the account for the address. After the label API is introduced, will these now set the label, or the account? Since both APIs will continue to exist side-by-side for a time, this could be a source of potential confusion for users. My wallet uses `importaddress` to set the account, whic",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-338164777,338164777,
laanwj,2017-10-20T10:19:35Z,"@mmgen \n> importaddress, importpubkey and importprivkey have 'label' arguments (see my note above) that currently set the account for the address. After the label API is introduced, will these now set the label, or the account?\n\nThe same arguments will be used for label (where it makes sense) to ease the transition and avoid unused holes in the argument list. This is mentioned in the OP.\nF",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-338167442,338167442,
ryanofsky,2017-10-21T17:04:17Z,"Rebased this on top of #11536 in https://github.com/ryanofsky/bitcoin/commits/pr/label. Has 2 commits:\n\n- 6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51 rpc: introduce 'label' API for wallet\n- fef41789e8d7293ccfd859bc90fa0a3b2484752d [wallet] Make setlabel idempotent",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-338417139,338417139,
sipa,2018-01-06T10:51:35Z,Can we haz this for 0.16?,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-355739097,355739097,
ryanofsky,2018-01-06T11:22:21Z,"> Can we haz this for 0.16?\n\nI think the best way to move this forward would be to review and merge #11536, which gets account -> label renaming out of the way so this PR can be small and simple and doesn't need to be constantly rebased.",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-355740559,355740559,
laanwj,2018-01-06T21:36:20Z,"0.17, not 0.16. 0.16 is supposed to be the intermediate segwit wallet\nrelease, I'd strongly prefer to not add any other features for it that\npotentially hold it up longer.\n\nOn Jan 6, 2018 11:51, ""Pieter Wuille"" <notifications@github.com> wrote:\n\n> Can we haz this for 0.16?\n>\n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <htt",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-355779506,355779506,
Sjors,2018-01-18T08:38:43Z,"The rebased version seems quite different from this (or at least from the description), yet is relevant in order to understand #11536. Maybe this PR should be closed and replaced?",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-358575739,358575739,
ryanofsky,2018-01-18T08:54:42Z,"> The rebased version seems quite different from this (or at least from the description), yet is relevant in order to understand #11536. Maybe this PR should be closed and replaced?\n\nThis should not be true. The rebased version Iinked in my comment above https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-338417139, has the exact same code changes as the current version of this PR, plus ",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-358579633,358579633,
Sjors,2018-01-18T09:12:59Z,"Maybe it's only the description of this PR that's out of date. In particular this list suggests that label RPC commands are a subset of the original account commands:\n \n<img width=""675"" alt=""schermafbeelding 2018-01-18 om 10 10 48"" src=""https://user-images.githubusercontent.com/10217/35089669-ec82bf90-fc37-11e7-8927-e651faba2364.png"">\n\nWhereas the actual code and commit messages don't remo",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-358584109,358584109,
ryanofsky,2018-01-18T09:24:35Z,"The description at the top of this PR is slightly out of date. It should be edited to match the description in the actual commit message, which should be fully up to date.\n\n> Whereas the actual code and commit messages don't remove any methods.\n\nI think you are taking ""remove"" in the description too literally. Perhaps it could be rephrased. This PR is adding label functions, not removing e",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-358587097,358587097,
Sjors,2018-03-08T22:09:20Z,Can you add a remark at the top that this (maybe) depends on #11536?,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-371641622,371641622,
ryanofsky,2018-03-23T00:55:30Z,"Rebased PR at https://github.com/ryanofsky/bitcoin/commits/pr/label:\n\n- 6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51 rpc: introduce 'label' API for wallet\n- fef41789e8d7293ccfd859bc90fa0a3b2484752d [wallet] Make setlabel idempotent",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-375504864,375504864,
laanwj,2018-03-23T11:43:30Z,@ryanofsky Thank you! Replaced the branch with that one.,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-375633491,375633491,
laanwj,2018-03-28T10:53:39Z,"> For a future PR we should figure out what to do with the Receive and Transaction tab ""labels"", as these seem to use an independent mechanism.\n\nTransaction tab labels use the same mechanism so it would be a matter of listening to a notification and repainting. Receive requests are stored separately, because they have extra metadata besides a label.",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-376845290,376845290,
Sjors,2018-03-28T11:03:02Z,"Ah yes, I see it. Restarting QT doesn't change or remove a label from Requested payments history for me, as you point out. Switching tabs is enough to update labels in the transactions view.",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-376847600,376847600,
jnewbery,2018-04-04T21:02:00Z,"@laanwj - it seems like you're struggling to find time to maintain this PR.\n\nI'd like to push this forwards and make sure it gets in for v0.17. Would you object if I took ownership?",https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-378743979,378743979,
GSPP,2018-04-05T10:06:41Z,Maybe there should be a call returning all addresses and all labels (a bulk call). If you want to dump all address-label pairs this would involve many RPC calls right now. This bulk call should even (optionally?) include internal addresses such as pool addresses. Simply *all* data. I have had the need many times to reflect over absolutely all wallet contents and such an API call would have been ve,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-378885537,378885537,
jnewbery,2018-04-05T17:39:43Z,I've opened #12892 to supersede this PR. Thanks for all your work @laanwj !,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-379017838,379017838,
MarcoFalke,2018-04-05T17:46:46Z,Indeed thanks to @laanwj  for initiating it and coming up with the original version of the code. And thx to @ryanofsky  and @jnewbery for picking it up.,https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-379019946,379019946,
instagibbs,2016-11-18T14:27:47Z,would `getnewlabeladdress` be wrong? As-is gave me the impression that this was some static address.\n,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88665805,88665805,src/wallet/rpcwallet.cpp
instagibbs,2016-11-18T14:28:21Z,perhaps mention `latest unused` or something similar. \n,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88665910,88665910,src/wallet/rpcwallet.cpp
instagibbs,2016-11-18T14:42:10Z,"I'm not as familiar with accounts as others, but is this type of parameter actually going to be used? When would you want to list labels that go certain directions? I have a feeling labels people choose will reflect this already.\n",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88668316,88668316,src/wallet/rpcwallet.cpp
instagibbs,2016-11-18T14:46:58Z,"it also adds it to the address book if previously unknown, correct?\n",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88669423,88669423,src/wallet/rpcwallet.cpp
laanwj,2016-11-21T12:47:16Z,"The goal of this API is to expose exactly the same functionality that the GUI uses. The GUI distinguishes between different kind of labels (to show sending/receiving addresses), so it should be offered here as well.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887049,88887049,src/wallet/rpcwallet.cpp
laanwj,2016-11-21T12:47:43Z,I still think we should get rid of this.,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887107,88887107,src/wallet/rpcwallet.cpp
laanwj,2016-11-21T12:51:30Z,"Indeed, that is what setting a label does. If there is no labeling information associated with an address it will create that. We don't want to use the term ""address book"" here I think.\n",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887646,88887646,src/wallet/rpcwallet.cpp
ryanofsky,2016-12-12T23:17:30Z,"This condition should be changed to `if (strOldLabel != strLabel && address == GetAccountAddress(strOldLabel))`, so calling setlabel on an address which already has the same label will just be a no-op, instead of creating an unexpected side effect where the label's default label address gets discarded.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r92064042,92064042,src/wallet/rpcwallet.cpp
JeremyRubin,2017-03-28T22:26:10Z,"Is the label optional or required?\n\nIf it's required update L2675 to `if (fHelp || params.size() != 2)` and L2693-2695 to `std::string strLabel = AccountFromValue(params[1]);`, if optional update the docstring.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108552368,108552368,src/wallet/rpcwallet.cpp
JeremyRubin,2017-03-28T22:31:01Z,Braces please!,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108553186,108553186,src/wallet/rpcwallet.cpp
JeremyRubin,2017-03-28T22:34:31Z,Does the order of push_back matter here? Might be cleaner to lump all `if (verbose)` under one branch...,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108553757,108553757,src/wallet/rpcwallet.cpp
JeremyRubin,2017-03-28T22:41:28Z,"It seems like L2529-2534 could be a one or two liner, rather than 4 (and maybe get rid of the whitespace).",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108554842,108554842,src/wallet/rpcwallet.cpp
JeremyRubin,2017-03-28T22:42:28Z,does a builtin for range loop work here?,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108554974,108554974,src/wallet/rpcwallet.cpp
JeremyRubin,2017-03-28T22:43:56Z,Can this not be a for range loop?,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555197,108555197,src/wallet/rpcwallet.cpp
JeremyRubin,2017-03-28T22:45:55Z,can use for range?,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555517,108555517,src/wallet/rpcwallet.cpp
JeremyRubin,2017-03-28T22:46:07Z,can use for range?,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555561,108555561,src/wallet/rpcwallet.cpp
JeremyRubin,2017-03-28T22:47:12Z,validate the purpose string?,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555711,108555711,src/wallet/rpcwallet.cpp
JeremyRubin,2017-03-28T22:51:51Z,"This behavior is probably just to mirror prior behavior, but perhaps a better alternative would be to create a fresh address for the account & allow deleting of account via another mechanism.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108556412,108556412,src/wallet/rpcwallet.cpp
JeremyRubin,2017-03-28T22:54:19Z,What's the correct behavior when address is watchonly?,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108556848,108556848,src/wallet/rpcwallet.cpp
jnewbery,2017-06-14T15:08:15Z,"I think the comment above may need updating to:\n- remove comments about accounting entries (or say they're deprecated)\n- comment that 'acc' database entries are for labels.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121975430,121975430,src/wallet/walletdb.h
jnewbery,2017-06-14T15:47:11Z,"If I'm understanding `AddressBookDataToJSON()` correctly, then the result will also include an array of destdata.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121986789,121986789,src/wallet/rpcwallet.cpp
jnewbery,2017-06-14T16:29:40Z,It'd be nice to eventually rename this function `LabelFromValue()`. That can be done in a follow-up PR.,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121998036,121998036,src/wallet/rpcwallet.cpp
jnewbery,2017-06-14T16:31:36Z,nit: I don't think `An empty string is the same as not providing this argument.` is required,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121998484,121998484,src/wallet/rpcwallet.cpp
jnewbery,2017-06-14T16:37:41Z,I think we should remove the concept of 'label address' and change this section to delete the label when removing the final address from that label.,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121999853,121999853,src/wallet/rpcwallet.cpp
jnewbery,2017-06-14T16:48:55Z,"What happens if `request.params.size() == 1`? Are you supposed to be able to remove a label using this rpc without a second argument? If so, I think you want to call `pwallet->DelAddressBook`.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r122002514,122002514,src/wallet/rpcwallet.cpp
ryanofsky,2017-06-15T17:12:29Z,"Note: This change makes calling setlabel on an address which already has the same label a no-op, see https://github.com/bitcoin/bitcoin/pull/7729#discussion_r92064042.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r122259021,122259021,src/wallet/rpcwallet.cpp
promag,2017-07-07T14:42:15Z,"Nit, rename `ddata` to `dest_data`.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r126163817,126163817,src/wallet/rpcwallet.cpp
promag,2017-07-07T14:45:19Z,"Nit, shouldn't we follow the convention in new code in favor of consistency? In that case rename `strAccount` to `account_name` for instance?",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r126164658,126164658,src/wallet/rpcwallet.cpp
promag,2017-07-07T14:49:50Z,"Agree with @jnewbery, empty value should be an error then.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r126165814,126165814,src/wallet/rpcwallet.cpp
promag,2017-07-07T14:58:14Z,"BTW, why is this argument needed? I mean, the client can filter the result. IMO pagination is more interesting.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r126167993,126167993,src/wallet/rpcwallet.cpp
meshcollider,2017-10-20T06:19:21Z,Is there any difference between setting an empty label vs deleting the label?,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r145885606,145885606,src/wallet/rpcwallet.cpp
laanwj,2017-10-20T10:17:41Z,"Well if you set all addresses with a certain label to the empty label, that label is effectively deleted. Deleting the label is a shortcut to remove it from all addresses.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r145927297,145927297,src/wallet/rpcwallet.cpp
MarcoFalke,2018-03-23T23:06:26Z,"Unrelated change?\n\nIf you really wanted to change that `DummyAddress(Params())` would be a better choice.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r176884083,176884083,src/wallet/rpcwallet.cpp
Sjors,2018-03-28T10:41:34Z,"I'm fine with removing this remark, but note that the behavior of creating a new address still exists (though without an address type param). It might make sense to deprecate that behavior in a followup PR, and require `getnewaddress` if `getlabeladdress` doesn't return anything. That also makes the choice of potentially reusing an address more explicit.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177707930,177707930,src/wallet/rpcwallet.cpp
jnewbery,2018-03-28T14:24:43Z,I don't think `getaddressinfo` should be deprecated. It's not an account rpc,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177767690,177767690,src/wallet/rpcwallet.cpp
jnewbery,2018-03-28T14:27:40Z,"Why rename the arguments/return values to bitcoinaddress everywhere? Seems like a gratuitous API break.\n\n`address` is used in many RPCs for a bitcoin address. Why not continue that convention? (and if you really must change this, current style guidelines call for snake_case for args)",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177768880,177768880,src/wallet/rpcwallet.cpp
jnewbery,2018-03-28T14:29:32Z,"Comment: https://github.com/bitcoin/bitcoin/pull/7729/files#r121986789 not addressed. Result also includes an array of destdata. Please update help text.\n\nEDIT: I think we should just drop the `destdata` from the response. It wasn't available in the old account RPCs, and it appears to me that the only place we add to destdata is in saveReceiveRequest().\n\nWe can always add destdata to the r",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177769646,177769646,src/wallet/rpcwallet.cpp
jnewbery,2018-03-28T14:31:05Z,"Can we make this RPC return an array? We may want to be able to attach multiple labels to addresses in the future (https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-302854998), and making this RPC return an array will allow us to do that without a breaking API change",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177770329,177770329,src/wallet/rpcwallet.cpp
jnewbery,2018-03-28T14:34:02Z,Should we sort the label names before returning?,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177771425,177771425,src/wallet/rpcwallet.cpp
jnewbery,2018-03-28T14:46:59Z,Should this throw an error if the label doesn't exist? Currently it returns an empty object.,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177776131,177776131,src/wallet/rpcwallet.cpp
jnewbery,2018-03-28T15:00:30Z,"The behaviour for this RPC is weird. If called for a label that doesn't exist, it creates a new label, and then adds a new address as the 'label address' for that label. That's not very intuitive, and I think it's a bad experience (for example if a user typos an existing label name). Can we change this so that the rpc returns an error if called with a non-existent label name?",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177781021,177781021,src/wallet/rpcwallet.cpp
jnewbery,2018-03-28T15:03:38Z,nit: standard library imports before project imports please!,https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177782126,177782126,test/functional/wallet_labels.py
ryanofsky,2018-03-28T15:24:23Z,"> Why rename the arguments/return values to bitcoinaddress everywhere? \n\nAgree it would be better to stick to `address`, but just as a historical note, this wasn't a ""gratuitious"" API break when it was originally written in 8571fee617aa22a43d73efa2560cd2ddf55c2478, because it preceded #11536, so the `setlabel` RPC was brand new.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177789614,177789614,src/wallet/rpcwallet.cpp
ryanofsky,2018-03-28T15:31:51Z,"> Can we make this RPC return an array?\n\nIt might be better to not add a `getlabel` RPC at all but instead just return this information in `getaddressinfo` (recently added in #10583).",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177792185,177792185,src/wallet/rpcwallet.cpp
ryanofsky,2018-03-28T15:39:33Z,"> I don't think getaddressinfo should be deprecated. It's not an account rpc\n\nGood catch. getaddressinfo should remain where it was above ""getbalance"". It's my fault for accidentally moving it into this section during a rebase.",https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177794866,177794866,src/wallet/rpcwallet.cpp
