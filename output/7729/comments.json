[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199361174",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199361174",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 199361174,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5OTM2MTE3NA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-21T16:14:04Z",
    "updated_at": "2016-03-21T16:14:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK.\nI just wonder if this makes the wallet code more complex (add another layer).\n\nMy idea was it to duplicate the current wallet implementation (`cp src/wallet src/newwallet`-approach) and add such things there (after removing the accounts-related code). Also the Bip32 and @CodeShark multi-wallet PR could be added there.\n\nThe second wallet could come without API stableness (for the first two releases or so) and could be marked as experimental.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199361174/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199362346",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199362346",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 199362346,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5OTM2MjM0Ng==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-21T16:17:42Z",
    "updated_at": "2016-03-21T16:24:42Z",
    "author_association": "MEMBER",
    "body": "> I just wonder if this makes the wallet code more complex (add another layer).\n\nI disagree:\n- All of this functionality is required anyway to support the GUI.\n- Yes, there is some intentional duplication, but only until the account calls are ripped out, which should be one of the next steps.\n- There are only added RPC calls in rpcwallet.cpp. The `CWallet` class is not complicated by this.\n\nThe point here is to give a non-deprecated equivalent to the 'label' system as used in the GUI, so the subset of the 'account system' that people are still allowed to use. This is a required, but up to now missing part of deprecating the account system.\n\nI'm not trying to rule out any other work that is being done such as multi-wallet support. I think this is pretty much orthogonal. As for alternative wallets, they've been proposed since at least 2012 - but none have materialized yet. And none of this change rules them out.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199362346/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199368604",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199368604",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 199368604,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5OTM2ODYwNA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-21T16:33:16Z",
    "updated_at": "2016-03-21T16:33:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "> As for alternative wallets, they've been proposed since at least 2012 - but none have materialized yet. And none of this change rules them out.\n\nYes. I agree.\nThis PR has a clear value.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199368604/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199444036",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199444036",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 199444036,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5OTQ0NDAzNg==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-21T19:42:09Z",
    "updated_at": "2016-03-21T19:42:09Z",
    "author_association": "MEMBER",
    "body": "Note getaccountaddress does not presently get a \"default\" address, it gets an _unused_ address with the label, creating one if necessary. This seems useful _only_ for mining, since no other context can guarantee an address hasn't been \"used\" but not sent to yet. I can't think of a good way to deprecate this, however.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199444036/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199705726",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-199705726",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 199705726,
    "node_id": "MDEyOklzc3VlQ29tbWVudDE5OTcwNTcyNg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-22T08:53:51Z",
    "updated_at": "2016-03-22T08:54:53Z",
    "author_association": "MEMBER",
    "body": "> it gets an unused address with the label, creating one if necessary.\n\nI wonder if we can find a better (or at least simpler, the `GetAccountAddress` function is pretty terrible) way to do this, now that we're creating a new API anyway. Need to think about this a bit.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/199705726/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200219840",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-200219840",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 200219840,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwMDIxOTg0MA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-03-23T07:10:17Z",
    "updated_at": "2016-03-23T07:16:17Z",
    "author_association": "MEMBER",
    "body": "@luke-jr \n\n> I wonder if we can find a better (or at least simpler, the GetAccountAddress function is pretty terrible) way to do this, now that we're creating a new API anyway. Need to think about this a bit.\n\nI thought of the following: you could use two labels, one for the 'active' address, one for the 'normal'. Say `mining_active` and `mining`.\n\nWhen the miner needs an address it will:\n- _addr_ = `getaddressesbylabel mining_active` (if no address returned, go to \"if so\" directly below and skip the first)\n- `getreceivedbyaddress` - check with wallet that _addr_ has been used before (or maybe add a more convenient RPC call for checking a single address)\n- If so:\n  -  `setlabel <addr> mining`  - move current address to normal label\n  - _addr_ = `getnewaddress mining_active` - generate new address in `mining_active` label\n  - Use _addr_ for mining to\n- If not:\n  - Use _addr_ for mining to\n\nThis is a little bit more involved at the user side, but it avoids special administration (needing to keep around `CAccount` structure per label) at the server side.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/200219840/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206735494",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206735494",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 206735494,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjczNTQ5NA==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-07T07:25:48Z",
    "updated_at": "2016-04-07T07:25:48Z",
    "author_association": "MEMBER",
    "body": "That looks like a lot of overhead, and this is a rather time-sensitive call, as the miner is working on stale work until it's done.\n\nAlso, why are there no getreceivedbylabel/listreceivedbylabel? These don't have anything to do with balances.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206735494/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206927479",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206927479",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 206927479,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjkyNzQ3OQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-07T14:19:30Z",
    "updated_at": "2016-04-07T14:19:30Z",
    "author_association": "MEMBER",
    "body": "> That looks like a lot of overhead, and this is a rather time-sensitive call, as the miner is working on stale work until it's done.\n\nI'd suggest to try it. It shouldn't be much slower.\n\n> Also, why are there no getreceivedbylabel/listreceivedbylabel? These don't have anything to do with balances.\n\nLooks like you're right. `getreceivedbyaccount` doesn't actually return the account balance, but the total number of coins sent to the addresses that make up the account?\n\n`listreceivedbyaccount`  on the other hand goes over the account tally. But I agree if it only were to show actual transactions sent to addresses belonging to a label it'd be ok.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206927479/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206929678",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206929678",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 206929678,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjkyOTY3OA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-07T14:24:05Z",
    "updated_at": "2016-04-07T14:24:05Z",
    "author_association": "MEMBER",
    "body": "@luke-jr Wouldn't it be feasible to instead generate a sequence of deterministic addresses for mining, for example using BIP32 derivation with the block height as index?\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206929678/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206934807",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206934807",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 206934807,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjkzNDgwNw==",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-07T14:37:48Z",
    "updated_at": "2016-04-07T14:37:48Z",
    "author_association": "MEMBER",
    "body": "> I'd suggest to try it. It shouldn't be much slower.\n\n@laanwj getreceivedbyaddress at least would loop over all the wtx... and then there's the additional latency from the back and forth of multiple calls. I haven't tried it yet, though.\n\n> Wouldn't it be feasible to instead generate a sequence of deterministic addresses for mining, for example using BIP32 derivation with the block height as index?\n\n@sipa Perhaps, if the wallet had a way to do this. Using the height seems incompatible with gap limits, though?\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206934807/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206938418",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-206938418",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 206938418,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIwNjkzODQxOA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-04-07T14:48:27Z",
    "updated_at": "2016-04-07T14:48:27Z",
    "author_association": "MEMBER",
    "body": "@luke-jr I mean the mining software can do derivation, and import the keys into the wallet when a block is found.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/206938418/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/220828728",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-220828728",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 220828728,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDgyODcyOA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-22T12:02:24Z",
    "updated_at": "2016-05-22T12:02:24Z",
    "author_association": "MEMBER",
    "body": "The functional test coverage for accounts is minimal or not existent, I think we should move forward with this pull.\n\nNeeds rebase.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/220828728/reactions",
      "total_count": 2,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 1,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/220830924",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-220830924",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 220830924,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDgzMDkyNA==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-22T12:54:32Z",
    "updated_at": "2016-05-22T12:54:32Z",
    "author_association": "CONTRIBUTOR",
    "body": "Re-Concept ACK.\nI think this solution makes more sense than the closed #7830.\nNeeds tests, rebase and release-note mentioning.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/220830924/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/220840308",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-220840308",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 220840308,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMDg0MDMwOA==",
    "user": {
      "login": "wallclockbuilder",
      "id": 2033945,
      "node_id": "MDQ6VXNlcjIwMzM5NDU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2033945?u=519092e723d19ff9ab556fe8220d2016c8e38af6&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/wallclockbuilder",
      "html_url": "https://github.com/wallclockbuilder",
      "followers_url": "https://api.github.com/users/wallclockbuilder/followers",
      "following_url": "https://api.github.com/users/wallclockbuilder/following{/other_user}",
      "gists_url": "https://api.github.com/users/wallclockbuilder/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/wallclockbuilder/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/wallclockbuilder/subscriptions",
      "organizations_url": "https://api.github.com/users/wallclockbuilder/orgs",
      "repos_url": "https://api.github.com/users/wallclockbuilder/repos",
      "events_url": "https://api.github.com/users/wallclockbuilder/events{/privacy}",
      "received_events_url": "https://api.github.com/users/wallclockbuilder/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-05-22T16:04:32Z",
    "updated_at": "2016-05-22T16:04:32Z",
    "author_association": "NONE",
    "body": "Needs tests.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/220840308/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/223287263",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-223287263",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 223287263,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzI4NzI2Mw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-02T13:13:50Z",
    "updated_at": "2016-06-02T13:13:50Z",
    "author_association": "MEMBER",
    "body": "@wallclockbuilder No shit, have you seen the TODOs at the bottom of the opening post?\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/223287263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/223287825",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-223287825",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 223287825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIyMzI4NzgyNQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-06-02T13:15:57Z",
    "updated_at": "2016-06-02T13:16:08Z",
    "author_association": "MEMBER",
    "body": "To be clear I posted this to get comments on the API, is there anything left to be done there? I'm going to write tests when it is clear that this is what we want at all.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/223287825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/232776422",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-232776422",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 232776422,
    "node_id": "MDEyOklzc3VlQ29tbWVudDIzMjc3NjQyMg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-07-14T20:05:04Z",
    "updated_at": "2016-07-14T20:05:04Z",
    "author_association": "MEMBER",
    "body": "> Do not use the deprecated account system and the label system with the same wallet at the same time\n> [...]\n> optional: a flag in the wallet to prevent use of both the account and label API\n\nI would not consider this optional. User will always do what you not want them to do.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/232776422/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/242373379",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-242373379",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 242373379,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0MjM3MzM3OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-08-25T12:46:57Z",
    "updated_at": "2016-08-25T12:46:57Z",
    "author_association": "MEMBER",
    "body": "Concept ACK\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/242373379/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/249340313",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-249340313",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 249340313,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTM0MDMxMw==",
    "user": {
      "login": "andrewbaine",
      "id": 101534,
      "node_id": "MDQ6VXNlcjEwMTUzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/101534?u=45de86da47ec71c8123876c3a1cd606bb6f0ac6b&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewbaine",
      "html_url": "https://github.com/andrewbaine",
      "followers_url": "https://api.github.com/users/andrewbaine/followers",
      "following_url": "https://api.github.com/users/andrewbaine/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewbaine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewbaine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewbaine/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewbaine/orgs",
      "repos_url": "https://api.github.com/users/andrewbaine/repos",
      "events_url": "https://api.github.com/users/andrewbaine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewbaine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-24T02:38:58Z",
    "updated_at": "2016-09-24T02:39:42Z",
    "author_association": "NONE",
    "body": "listtransactions has an \"account\" argument where you now you would pass \"*\" if you need to supply non-default args for count, from, and includeWatchOnly. Will there be a way to query for transactions affecting any address with a given label? Could we tack on a \"label\" argument to listtransactions?\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/249340313/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/249346342",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-249346342",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 249346342,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI0OTM0NjM0Mg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-09-24T05:25:44Z",
    "updated_at": "2016-09-24T05:25:44Z",
    "author_association": "MEMBER",
    "body": "I think the account argument of listtransactions could simply be re-used as a label argument. As listing transactions to a label has nothing to do with per-label balances there is no need to drop that particular functionality, \n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/249346342/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/251130307",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-251130307",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 251130307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI1MTEzMDMwNw==",
    "user": {
      "login": "andrewbaine",
      "id": 101534,
      "node_id": "MDQ6VXNlcjEwMTUzNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/101534?u=45de86da47ec71c8123876c3a1cd606bb6f0ac6b&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/andrewbaine",
      "html_url": "https://github.com/andrewbaine",
      "followers_url": "https://api.github.com/users/andrewbaine/followers",
      "following_url": "https://api.github.com/users/andrewbaine/following{/other_user}",
      "gists_url": "https://api.github.com/users/andrewbaine/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/andrewbaine/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/andrewbaine/subscriptions",
      "organizations_url": "https://api.github.com/users/andrewbaine/orgs",
      "repos_url": "https://api.github.com/users/andrewbaine/repos",
      "events_url": "https://api.github.com/users/andrewbaine/events{/privacy}",
      "received_events_url": "https://api.github.com/users/andrewbaine/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-10-03T15:00:33Z",
    "updated_at": "2016-10-03T15:00:33Z",
    "author_association": "NONE",
    "body": "repurposing the \"account\" argument to be \"label\" makes sense to me\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/251130307/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261392305",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261392305",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 261392305,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTM5MjMwNQ==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-17T22:38:06Z",
    "updated_at": "2016-11-17T22:38:06Z",
    "author_association": "MEMBER",
    "body": "Fast review ACK (besides needing rebase and the promised tests).\nThe API is actually more than I expected but still simple enough, I think.\n\n> optional: a flag in the wallet to prevent use of both the account and label API\n\nI'm not sure it's worth to bother. I think we should go ahead and completely remove account functionality within 0.14 instead. But whatever we do, it can be done in a later PR.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261392305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261539197",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261539197",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 261539197,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTUzOTE5Nw==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-18T14:06:38Z",
    "updated_at": "2016-11-18T14:11:14Z",
    "author_association": "MEMBER",
    "body": "> labels are associated with addresses, instead of addresses associated with labels\n\nDescription nit: not sure I catch the distinction here.  \n\n> Should there be such a thing as a 'label address'?  \n\nI'd say no unless there is a compelling use-case that can't be replicated another way.\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261539197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261928077",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261928077",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 261928077,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTkyODA3Nw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-21T12:48:36Z",
    "updated_at": "2016-11-21T12:48:36Z",
    "author_association": "MEMBER",
    "body": "> It also may be helpful to give a brief motivation in the OP. What's wrong with accounts, and what label fixes about that. Currently it's a list of differences without clear motivation.\r\n\r\nSee #3816",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261928077/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261929161",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261929161",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 261929161,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTkyOTE2MQ==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-21T12:53:55Z",
    "updated_at": "2016-11-21T12:53:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "utACK a2557ffb80543af5e92c3db03d257fe594b0d910 needs (trivial) rebase for the new `JSONRPCRequest` object passing.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261929161/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261933520",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-261933520",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 261933520,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MTkzMzUyMA==",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-21T13:09:22Z",
    "updated_at": "2016-11-21T13:09:38Z",
    "author_association": "MEMBER",
    "body": "@laanwj yes I read the issue, but there are some disagreements in that thread about what the actual issue is(malleability being the first issue noted?). I assume it's along the lines of \"people want to watermark addresses, but bitcoind wallet shouldn't try to be an accounting system for those labels\".",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/261933520/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/262390221",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-262390221",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 262390221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjM5MDIyMQ==",
    "user": {
      "login": "motatoes",
      "id": 1627972,
      "node_id": "MDQ6VXNlcjE2Mjc5NzI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1627972?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/motatoes",
      "html_url": "https://github.com/motatoes",
      "followers_url": "https://api.github.com/users/motatoes/followers",
      "following_url": "https://api.github.com/users/motatoes/following{/other_user}",
      "gists_url": "https://api.github.com/users/motatoes/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/motatoes/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/motatoes/subscriptions",
      "organizations_url": "https://api.github.com/users/motatoes/orgs",
      "repos_url": "https://api.github.com/users/motatoes/repos",
      "events_url": "https://api.github.com/users/motatoes/events{/privacy}",
      "received_events_url": "https://api.github.com/users/motatoes/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-22T22:52:56Z",
    "updated_at": "2016-11-22T22:52:56Z",
    "author_association": "NONE",
    "body": "Hi. When is this new feature expected to be rolled out?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/262390221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/262390495",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-262390495",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 262390495,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2MjM5MDQ5NQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-11-22T22:54:26Z",
    "updated_at": "2016-11-22T22:54:26Z",
    "author_association": "MEMBER",
    "body": "@motatoes Like everything, when it's ready. That may be in 0.14.0 or later.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/262390495/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/266593020",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-266593020",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 266593020,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NjU5MzAyMA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-13T00:00:47Z",
    "updated_at": "2016-12-13T00:00:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "@laanwj , I created an RPC test for this change here: https://github.com/ryanofsky/bitcoin/commit/2dac8eb0d915b4c04764eff100d81718b2cd9a90\r\n\r\nFeel free to incorporate it in this PR, or I could create a separate one.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/266593020/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/267624474",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-267624474",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 267624474,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzYyNDQ3NA==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-16T15:52:05Z",
    "updated_at": "2016-12-16T15:52:05Z",
    "author_association": "MEMBER",
    "body": "Needs rebase",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/267624474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/284558409",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-284558409",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 284558409,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NDU1ODQwOQ==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-06T22:42:00Z",
    "updated_at": "2017-03-06T22:42:00Z",
    "author_association": "MEMBER",
    "body": "Needs rebase again, sorry for not reviewing after the last rebase.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/284558409/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287168649",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-287168649",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 287168649,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4NzE2ODY0OQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-16T19:39:07Z",
    "updated_at": "2017-03-16T19:39:07Z",
    "author_association": "MEMBER",
    "body": "Concept reACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/287168649/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/289144410",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-289144410",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 289144410,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4OTE0NDQxMA==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-24T21:13:34Z",
    "updated_at": "2017-03-24T21:13:34Z",
    "author_association": "CONTRIBUTOR",
    "body": "Needs rebase. Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/289144410/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292522820",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-292522820",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 292522820,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjUyMjgyMA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-07T12:25:27Z",
    "updated_at": "2017-04-07T12:25:27Z",
    "author_association": "CONTRIBUTOR",
    "body": "@laanwj, do you want to cherry pick my unit test into this PR? (https://github.com/ryanofsky/bitcoin/commit/2dac8eb0d915b4c04764eff100d81718b2cd9a90)\r\n\r\nIn [IRC recently](https://botbot.me/freenode/bitcoin-core-dev/msg/83565594/), you requested that people \"please review the *API*, not the code,\" and I think the unit test can help with this, because it demonstrates the API in action, covers various subtleties, and is also well commented.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292522820/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292577814",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-292577814",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 292577814,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MjU3NzgxNA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-07T16:03:04Z",
    "updated_at": "2017-04-07T16:03:04Z",
    "author_association": "MEMBER",
    "body": "> @laanwj, do you want to cherry pick my unit test into this PR? (ryanofsky@2dac8eb)\r\n\r\nYes, I will, thank you!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/292577814/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296454888",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-296454888",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 296454888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5NjQ1NDg4OA==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-23T16:26:44Z",
    "updated_at": "2017-04-23T16:26:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "API ACK. Still needs rebase :(",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/296454888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302820825",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-302820825",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 302820825,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjgyMDgyNQ==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-19T21:58:01Z",
    "updated_at": "2017-05-19T21:58:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "I expected to be able to attach multiple labels to a single address.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302820825/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302854998",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-302854998",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 302854998,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg1NDk5OA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-20T06:43:22Z",
    "updated_at": "2017-05-20T06:43:22Z",
    "author_association": "MEMBER",
    "body": "> I expected to be able to attach multiple labels to a single address.\r\n\r\nThat is not possible in the GUI either, in the OP I've defined the scope as:\r\n\r\n> The general idea is to offer the same functionality as the GUI label system\r\n\r\nSuch functionality could be added in the future.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302854998/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302862044",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-302862044",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 302862044,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwMjg2MjA0NA==",
    "user": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?u=636a89c913ac407f52bb8d57c4fff384b98f421f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-05-20T09:26:17Z",
    "updated_at": "2017-05-20T09:26:17Z",
    "author_association": "MEMBER",
    "body": "Nobody seems to have big problems with the API for a while. Perhaps it's time to rebase and start reviewing the code itself",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/302862044/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307823982",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-307823982",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 307823982,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzgyMzk4Mg==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T15:25:35Z",
    "updated_at": "2017-06-12T15:25:35Z",
    "author_association": "MEMBER",
    "body": "I wanted to test this so I rebased on master and cherry-picked Russ's test. I've pushed it here: https://github.com/jnewbery/bitcoin/tree/pr7729 . Feel free to reset onto that commit. Note that there were quite a few refactors (multiwallet, namespaces, database wrapper, JSONRPC request, rpc names args), so someone else should probably review the rebase to make sure I haven't missed anything.\r\n\r\nNote that the final test in Russ's test script currently fails. I added some trace to the script and see that the address returned by `getlabeladdress` isn't included in the list of addresses returned by `getaddressesbylabel`:\r\n\r\n```\r\n-146-> getaddressesbylabel [\"c\"]\r\n<-146- [0.000135] {\"n1HsWg6ANV5Z8SLojKNyjqCRf5saqQKQed\": {\"purpose\": \"receive\"}, \"mfYMvaXrHp2RUxe1q1PwRgS8AokYjgUSmf\": {\"purpose\": \"receive\"}, \"mhVHLa9KCHGMXHBNpyfAHNZXmwKaaTg6Fj\": {\"purpose\": \"receive\"}}\r\n-147-> getlabeladdress [\"c\"]\r\n<-147- [0.001559] \"mnvNe2eG3hmderC3y5E4SYLNnwWsYrSg1c\"\r\n-148-> getlabel [\"mnvNe2eG3hmderC3y5E4SYLNnwWsYrSg1c\"]\r\n<-148- [0.000136] {\"name\": \"c\", \"destdata\": {}, \"purpose\": \"receive\"}\r\n```\r\n\r\nI haven't yet dug into why that's the case.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307823982/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307881106",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-307881106",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 307881106,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwNzg4MTEwNg==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-12T18:40:40Z",
    "updated_at": "2017-06-12T18:40:40Z",
    "author_association": "MEMBER",
    "body": "I've made a few more changes to rpcwallet.cpp to reflect more recent style guidelines (no `BOOST_FOREACH` and braces for if statements. I've also committed a fixup commit for the failing test case. @laanwj feel free to squash that if you're happy with it.\r\n\r\nOnce you've taken the changes I'll add my review comments.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/307881106/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308374415",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-308374415",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 308374415,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODM3NDQxNQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T09:19:49Z",
    "updated_at": "2017-06-14T09:19:49Z",
    "author_association": "MEMBER",
    "body": "@jnewbery Thanks so much! Updated this pull to that branch.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308374415/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308454179",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-308454179",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 308454179,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMwODQ1NDE3OQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-14T14:45:20Z",
    "updated_at": "2017-06-14T14:45:20Z",
    "author_association": "MEMBER",
    "body": "needs rebase again! (although this one should be easier - just fixing the `BASE_SCRIPTS` list in test_runner.py)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/308454179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310896931",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-310896931",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 310896931,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMDg5NjkzMQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-06-25T11:18:55Z",
    "updated_at": "2017-06-25T11:18:55Z",
    "author_association": "MEMBER",
    "body": "So to summarize above discussion, the following changes should be made:\r\n- Add `listreceivedbylabel`, listing transactions to addresses that have a certain label\r\n- Remove the default label address. Discussion confirms my intuition that it's better to get rid of this. \r\n  - 'acc' database entries, as well as CAccount, would not be necessary for labels. After this change, labels have no metadata, so a lot of code can be simplified.\r\n- `setlabel` on an address that already has the same label should be a no-op\r\n- Documentation changes / nits\r\n\r\n>  RPC which upgrades the wallet to a new version, and on the new version, hide the account RPCs. The enablelabels RPC should describe the implications of moving from accounts to labels. I think this requires a bit more thought and discussion.\r\n\r\nAgree re: versioning. We already have a command line argument to upgrade the wallet version, `-upgradewallet`. Wouldn't that be enough?\r\nEither label or account RPCs could be usable based on the wallet version.\r\nI don't see why a RPC to do the upgrade would be preferable, it's something that will be done at most once.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/310896931/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313720486",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-313720486",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 313720486,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxMzcyMDQ4Ng==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-07T15:52:04Z",
    "updated_at": "2017-07-07T15:52:04Z",
    "author_association": "MEMBER",
    "body": "> We already have a command line argument to upgrade the wallet version, -upgradewallet. Wouldn't that be enough\r\n\r\nACK - yes this is enough.\r\n\r\nThe wallet startup command line arguments always seemed strange to me, and if we were building this from scratch we might implement upgradewallet as an RPC or an external tool. However, it makes sense to use the existing infrastructure.\r\n\r\n> Either label or account RPCs could be usable based on the wallet version.\r\n\r\n\u2705 sounds good to me.\r\n\r\nTwo additional points:\r\n\r\n1. Obviously documentation is key here. The wallet upgrade will effectively remove the accounts from the wallet, so we need to make sure users understand the implication before upgrading.\r\n2. When will we be able to remove the account code entirely? At that point will bitcoind no longer support wallets older than the new version? Is there precedence for how we deprecate wallet features like this?\r\n\r\n> Is this going forward?\r\n\r\nIt feels like we've missed the boat for 0.15. @laanwj - it'd be great to get this in early in the next cycle. I'll have some spare time in the next few weeks. Let me know if there's anything I can do to help here. I'm happy to help write and test the upgrade code.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/313720486/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/317246483",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-317246483",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 317246483,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxNzI0NjQ4Mw==",
    "user": {
      "login": "mmgen",
      "id": 6071028,
      "node_id": "MDQ6VXNlcjYwNzEwMjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6071028?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmgen",
      "html_url": "https://github.com/mmgen",
      "followers_url": "https://api.github.com/users/mmgen/followers",
      "following_url": "https://api.github.com/users/mmgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mmgen/orgs",
      "repos_url": "https://api.github.com/users/mmgen/repos",
      "events_url": "https://api.github.com/users/mmgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-23T11:27:42Z",
    "updated_at": "2017-07-25T10:46:04Z",
    "author_association": "NONE",
    "body": "@laanwj `importaddress`, `importpubkey` and `importprivkey` have \"label\" arguments that currently set the account for an address. (To delete the old account for an address and create a new one, it's enough to just re-import the address.)  Won't these calls need to be updated as well? I don't see them in your patch.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/317246483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318817191",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-318817191",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 318817191,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODgxNzE5MQ==",
    "user": {
      "login": "mmgen",
      "id": 6071028,
      "node_id": "MDQ6VXNlcjYwNzEwMjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6071028?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmgen",
      "html_url": "https://github.com/mmgen",
      "followers_url": "https://api.github.com/users/mmgen/followers",
      "following_url": "https://api.github.com/users/mmgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mmgen/orgs",
      "repos_url": "https://api.github.com/users/mmgen/repos",
      "events_url": "https://api.github.com/users/mmgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-29T09:39:27Z",
    "updated_at": "2017-07-29T09:41:02Z",
    "author_association": "NONE",
    "body": "@jnewbery Since I got no reponse from @laanwj, I'll refer you to my above comment. The behavior I mentioned can be easily demonstrated with the following:\r\n\r\n\t$ bitcoin-cli importaddress n2FgXPKwuFkCXF946EnoxWJDWF2VwQ6q8J 'Label 1'\r\n\t$ bitcoin-cli listaccounts 0 true | grep 'Label 1'\r\n\t \"Label 1\": 0.00000000,\r\n\t$ bitcoin-cli importaddress n2FgXPKwuFkCXF946EnoxWJDWF2VwQ6q8J 'Label 2'\r\n\t$ bitcoin-cli listaccounts 0 true | grep 'Label 1'\r\n\t$ bitcoin-cli listaccounts 0 true | grep 'Label 2'\r\n\t \"Label 2\": 0.00000000,\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318817191/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318873687",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-318873687",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 318873687,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODg3MzY4Nw==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-30T02:39:32Z",
    "updated_at": "2017-07-30T02:39:32Z",
    "author_association": "MEMBER",
    "body": "@mmgen : @laanwj is very busy with the 0.15 release right now, so I'm not surprised he hasn't updated this PR. I'm planning on picking this up early in 0.16 and I'll review your comments then. Any help with review/testing then will be very much appreciated!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318873687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318894146",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-318894146",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 318894146,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMxODg5NDE0Ng==",
    "user": {
      "login": "mmgen",
      "id": 6071028,
      "node_id": "MDQ6VXNlcjYwNzEwMjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6071028?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmgen",
      "html_url": "https://github.com/mmgen",
      "followers_url": "https://api.github.com/users/mmgen/followers",
      "following_url": "https://api.github.com/users/mmgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mmgen/orgs",
      "repos_url": "https://api.github.com/users/mmgen/repos",
      "events_url": "https://api.github.com/users/mmgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-07-30T10:59:57Z",
    "updated_at": "2017-07-30T10:59:57Z",
    "author_association": "NONE",
    "body": "@jnewbery Thanks! Will be ready to help when needed.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/318894146/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/336660069",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-336660069",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 336660069,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjY2MDA2OQ==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-14T19:12:40Z",
    "updated_at": "2017-10-14T19:12:40Z",
    "author_association": "MEMBER",
    "body": "Concept ACK, needs rebase.\r\n\r\nMaybe this and #11497 should be done together?\r\n\r\nEarlier in this thread, it was suggested that the version number be bumped to distinguish between whether to use accounts or wallets. Because of the HD wallets thing with the optional features in the version number, would we want to bump the version number (which would then mean only HD wallets can use labels) or do something else?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/336660069/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/336911546",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-336911546",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 336911546,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzNjkxMTU0Ng==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-16T14:51:24Z",
    "updated_at": "2017-10-16T14:51:24Z",
    "author_association": "CONTRIBUTOR",
    "body": "Should probably just drop the version number idea now that we have the `-deprecatedrpc` mechanism. Seems like adding versioning to the decision of which rpcs to enable would make the transition more complicated without providing a clear benefit.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/336911546/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338151842",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-338151842",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 338151842,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODE1MTg0Mg==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-20T09:12:59Z",
    "updated_at": "2017-10-20T09:17:52Z",
    "author_association": "MEMBER",
    "body": "I've rebased this on current master here, as well as fixed a few of the nits above: https://github.com/MeshCollider/bitcoin/tree/201710_labels_rebased\r\nFeel free to use that if it helps, and squash my commits into yours if needed :)\r\n\r\nStill to-do summary from comments:\r\n- Remove `getlabeladdress` RPC\r\n- Add `listreceivedbylabel` RPC\r\n- Incorporate #11497 to disable accounts at the same time (including renaming of `account` params to `label`)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338151842/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338164777",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-338164777",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 338164777,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODE2NDc3Nw==",
    "user": {
      "login": "mmgen",
      "id": 6071028,
      "node_id": "MDQ6VXNlcjYwNzEwMjg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6071028?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmgen",
      "html_url": "https://github.com/mmgen",
      "followers_url": "https://api.github.com/users/mmgen/followers",
      "following_url": "https://api.github.com/users/mmgen/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmgen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmgen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmgen/subscriptions",
      "organizations_url": "https://api.github.com/users/mmgen/orgs",
      "repos_url": "https://api.github.com/users/mmgen/repos",
      "events_url": "https://api.github.com/users/mmgen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmgen/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-20T10:07:34Z",
    "updated_at": "2017-10-20T10:07:34Z",
    "author_association": "NONE",
    "body": "`importaddress`, `importpubkey` and `importprivkey` have 'label' arguments (see my note above) that currently set the account for the address. After the label API is introduced, will these now set the label, or the account? Since both APIs will continue to exist side-by-side for a time, this could be a source of potential confusion for users. My wallet uses `importaddress` to set the account, which I use as an alias for a given address.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338164777/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338167442",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-338167442",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 338167442,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODE2NzQ0Mg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-20T10:19:35Z",
    "updated_at": "2017-10-20T10:20:15Z",
    "author_association": "MEMBER",
    "body": "@mmgen \r\n> importaddress, importpubkey and importprivkey have 'label' arguments (see my note above) that currently set the account for the address. After the label API is introduced, will these now set the label, or the account?\r\n\r\nThe same arguments will be used for label (where it makes sense) to ease the transition and avoid unused holes in the argument list. This is mentioned in the OP.\r\nFor 0.16 it will be possible to switch between label and account API with a command line argument, but will default to labels. 0.17 will likely drop suppport for accounts completely.\r\n\r\n@MeshCollider \r\n> I've rebased this on current master here, as well as fixed a few of the nits above: \r\n\r\nThanks! Will take that over.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338167442/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338417139",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-338417139",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 338417139,
    "node_id": "MDEyOklzc3VlQ29tbWVudDMzODQxNzEzOQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-10-21T17:04:17Z",
    "updated_at": "2018-03-23T00:51:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased this on top of #11536 in https://github.com/ryanofsky/bitcoin/commits/pr/label. Has 2 commits:\r\n\r\n- 6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51 rpc: introduce 'label' API for wallet\r\n- fef41789e8d7293ccfd859bc90fa0a3b2484752d [wallet] Make setlabel idempotent",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/338417139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/355739097",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-355739097",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 355739097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTczOTA5Nw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-06T10:51:35Z",
    "updated_at": "2018-01-06T10:51:35Z",
    "author_association": "MEMBER",
    "body": "Can we haz this for 0.16?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/355739097/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/355740559",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-355740559",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 355740559,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTc0MDU1OQ==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-06T11:22:21Z",
    "updated_at": "2018-01-06T11:22:21Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Can we haz this for 0.16?\r\n\r\nI think the best way to move this forward would be to review and merge #11536, which gets account -> label renaming out of the way so this PR can be small and simple and doesn't need to be constantly rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/355740559/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/355779506",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-355779506",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 355779506,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1NTc3OTUwNg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-06T21:36:20Z",
    "updated_at": "2018-01-06T21:36:20Z",
    "author_association": "MEMBER",
    "body": "0.17, not 0.16. 0.16 is supposed to be the intermediate segwit wallet\nrelease, I'd strongly prefer to not add any other features for it that\npotentially hold it up longer.\n\nOn Jan 6, 2018 11:51, \"Pieter Wuille\" <notifications@github.com> wrote:\n\n> Can we haz this for 0.16?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-355739097>, or mute\n> the thread\n> <https://github.com/notifications/unsubscribe-auth/AAHutpkOslEiyC81Ta-E4I1OTix7NPwBks5tH1A8gaJpZM4H1S2Y>\n> .\n>\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/355779506/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/358575739",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-358575739",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 358575739,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODU3NTczOQ==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T08:38:43Z",
    "updated_at": "2018-01-18T08:39:20Z",
    "author_association": "MEMBER",
    "body": "The rebased version seems quite different from this (or at least from the description), yet is relevant in order to understand #11536. Maybe this PR should be closed and replaced?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/358575739/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/358579633",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-358579633",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 358579633,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODU3OTYzMw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T08:54:42Z",
    "updated_at": "2018-01-18T08:55:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "> The rebased version seems quite different from this (or at least from the description), yet is relevant in order to understand #11536. Maybe this PR should be closed and replaced?\r\n\r\nThis should not be true. The rebased version Iinked in my comment above https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-338417139, has the exact same code changes as the current version of this PR, plus some additional \"account\" -> \"label\" renames for some \"account\" occurrences missed here. #11536 + #7729 should be a pure superset of #7729.\r\n\r\nIf there are any actual differences that you see, please point them out in #11536 or here so I can fix my branch.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/358579633/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/358584109",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-358584109",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 358584109,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODU4NDEwOQ==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T09:12:59Z",
    "updated_at": "2018-01-18T09:12:59Z",
    "author_association": "MEMBER",
    "body": "Maybe it's only the description of this PR that's out of date. In particular this list suggests that label RPC commands are a subset of the original account commands:\r\n \r\n<img width=\"675\" alt=\"schermafbeelding 2018-01-18 om 10 10 48\" src=\"https://user-images.githubusercontent.com/10217/35089669-ec82bf90-fc37-11e7-8927-e651faba2364.png\">\r\n\r\nWhereas the actual code and commit messages don't remove any methods.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/358584109/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/358587097",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-358587097",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 358587097,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM1ODU4NzA5Nw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-01-18T09:24:35Z",
    "updated_at": "2018-01-18T09:25:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "The description at the top of this PR is slightly out of date. It should be edited to match the description in the actual commit message, which should be fully up to date.\r\n\r\n> Whereas the actual code and commit messages don't remove any methods.\r\n\r\nI think you are taking \"remove\" in the description too literally. Perhaps it could be rephrased. This PR is adding label functions, not removing existing account functions (that meant to be done later in order to preserve compatibility). When the description says \"remove\" it is just referring to not adding a new label function corresponding to an existing account function.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/358587097/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371641622",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-371641622",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 371641622,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3MTY0MTYyMg==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-08T22:09:20Z",
    "updated_at": "2018-03-08T22:09:35Z",
    "author_association": "MEMBER",
    "body": "Can you add a remark at the top that this (maybe) depends on #11536?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/371641622/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/375504864",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-375504864",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 375504864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTUwNDg2NA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T00:55:30Z",
    "updated_at": "2018-03-23T00:55:30Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased PR at https://github.com/ryanofsky/bitcoin/commits/pr/label:\r\n\r\n- 6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51 rpc: introduce 'label' API for wallet\r\n- fef41789e8d7293ccfd859bc90fa0a3b2484752d [wallet] Make setlabel idempotent",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/375504864/reactions",
      "total_count": 5,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 2,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/375633491",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-375633491",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 375633491,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3NTYzMzQ5MQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-23T11:43:30Z",
    "updated_at": "2018-03-23T11:43:30Z",
    "author_association": "MEMBER",
    "body": "@ryanofsky Thank you! Replaced the branch with that one.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/375633491/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/376845290",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-376845290",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 376845290,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Njg0NTI5MA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T10:53:39Z",
    "updated_at": "2018-03-28T10:53:39Z",
    "author_association": "MEMBER",
    "body": "> For a future PR we should figure out what to do with the Receive and Transaction tab \"labels\", as these seem to use an independent mechanism.\r\n\r\nTransaction tab labels use the same mechanism so it would be a matter of listening to a notification and repainting. Receive requests are stored separately, because they have extra metadata besides a label.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/376845290/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/376847600",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-376847600",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 376847600,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3Njg0NzYwMA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-03-28T11:03:02Z",
    "updated_at": "2018-03-28T11:03:02Z",
    "author_association": "MEMBER",
    "body": "Ah yes, I see it. Restarting QT doesn't change or remove a label from Requested payments history for me, as you point out. Switching tabs is enough to update labels in the transactions view.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/376847600/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378743979",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-378743979",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 378743979,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODc0Mzk3OQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-04T21:02:00Z",
    "updated_at": "2018-04-04T21:02:00Z",
    "author_association": "MEMBER",
    "body": "@laanwj - it seems like you're struggling to find time to maintain this PR.\r\n\r\nI'd like to push this forwards and make sure it gets in for v0.17. Would you object if I took ownership?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378743979/reactions",
      "total_count": 3,
      "+1": 3,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378885537",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-378885537",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 378885537,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3ODg4NTUzNw==",
    "user": {
      "login": "GSPP",
      "id": 12032350,
      "node_id": "MDQ6VXNlcjEyMDMyMzUw",
      "avatar_url": "https://avatars.githubusercontent.com/u/12032350?u=fc83a648e8936fbde2cedba674a5edd2fd63ff89&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/GSPP",
      "html_url": "https://github.com/GSPP",
      "followers_url": "https://api.github.com/users/GSPP/followers",
      "following_url": "https://api.github.com/users/GSPP/following{/other_user}",
      "gists_url": "https://api.github.com/users/GSPP/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/GSPP/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/GSPP/subscriptions",
      "organizations_url": "https://api.github.com/users/GSPP/orgs",
      "repos_url": "https://api.github.com/users/GSPP/repos",
      "events_url": "https://api.github.com/users/GSPP/events{/privacy}",
      "received_events_url": "https://api.github.com/users/GSPP/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T10:06:41Z",
    "updated_at": "2018-04-05T10:06:41Z",
    "author_association": "NONE",
    "body": "Maybe there should be a call returning all addresses and all labels (a bulk call). If you want to dump all address-label pairs this would involve many RPC calls right now. This bulk call should even (optionally?) include internal addresses such as pool addresses. Simply *all* data. I have had the need many times to reflect over absolutely all wallet contents and such an API call would have been very welcome.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/378885537/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379017838",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-379017838",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 379017838,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTAxNzgzOA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T17:39:43Z",
    "updated_at": "2018-04-05T17:39:43Z",
    "author_association": "MEMBER",
    "body": "I've opened #12892 to supersede this PR. Thanks for all your work @laanwj !",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379017838/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379019946",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-379019946",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/7729",
    "id": 379019946,
    "node_id": "MDEyOklzc3VlQ29tbWVudDM3OTAxOTk0Ng==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-04-05T17:46:46Z",
    "updated_at": "2018-04-05T17:46:46Z",
    "author_association": "MEMBER",
    "body": "Indeed thanks to @laanwj  for initiating it and coming up with the original version of the code. And thx to @ryanofsky  and @jnewbery for picking it up.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/379019946/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88665805",
    "pull_request_review_id": 9233413,
    "id": 88665805,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NjY1ODA1",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "would `getnewlabeladdress` be wrong? As-is gave me the impression that this was some static address.\n",
    "created_at": "2016-11-18T14:27:47Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88665805",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88665805"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88665805"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88665805/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2506,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88665910",
    "pull_request_review_id": 9233413,
    "id": 88665910,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NjY1OTEw",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 29,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "perhaps mention `latest unused` or something similar. \n",
    "created_at": "2016-11-18T14:28:21Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88665910",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88665910"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88665910"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88665910/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2518,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88668316",
    "pull_request_review_id": 9233413,
    "id": 88668316,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NjY4MzE2",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 146,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not as familiar with accounts as others, but is this type of parameter actually going to be used? When would you want to list labels that go certain directions? I have a feeling labels people choose will reflect this already.\n",
    "created_at": "2016-11-18T14:42:10Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88668316",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88668316"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88668316"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88668316/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2635,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88669423",
    "pull_request_review_id": 9233413,
    "id": 88669423,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4NjY5NDIz",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)\n+        ret.push_back(name);\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 189,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "it also adds it to the address book if previously unknown, correct?\n",
    "created_at": "2016-11-18T14:46:58Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88669423",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88669423"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88669423"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88669423/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2678,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887049",
    "pull_request_review_id": 9444753,
    "id": 88887049,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4ODg3MDQ5",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 146,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The goal of this API is to expose exactly the same functionality that the GUI uses. The GUI distinguishes between different kind of labels (to show sending/receiving addresses), so it should be offered here as well.",
    "created_at": "2016-11-21T12:47:16Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887049",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887049"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887049"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887049/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2635,
    "side": "RIGHT",
    "in_reply_to_id": 88668316
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887107",
    "pull_request_review_id": 9444803,
    "id": 88887107,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4ODg3MTA3",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 29,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I still think we should get rid of this.",
    "created_at": "2016-11-21T12:47:43Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887107",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887107"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887107"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887107/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2518,
    "side": "RIGHT",
    "in_reply_to_id": 88665910
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887646",
    "pull_request_review_id": 9445301,
    "id": 88887646,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDg4ODg3NjQ2",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)\n+        ret.push_back(name);\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 189,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Indeed, that is what setting a label does. If there is no labeling information associated with an address it will create that. We don't want to use the term \"address book\" here I think.\r\n",
    "created_at": "2016-11-21T12:51:30Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887646",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887646"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r88887646"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/88887646/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2678,
    "side": "RIGHT",
    "in_reply_to_id": 88669423
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92064042",
    "pull_request_review_id": 12573775,
    "id": 92064042,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkyMDY0MDQy",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)\n+        ret.push_back(name);\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    string strLabel;\n+    if (params.size() > 1)\n+        strLabel = AccountFromValue(params[1]);\n+\n+    if (IsMine(*pwalletMain, address.Get()))\n+    {\n+        // Detect when changing the label of an address that is the 'label address' of another label:\n+        // If so, delete the account record for it. Labels, unlike addresses can be deleted,\n+        // and we wouldn't do this, the record would stick around forever.\n+        if (pwalletMain->mapAddressBook.count(address.Get()))\n+        {\n+            string strOldLabel = pwalletMain->mapAddressBook[address.Get()].name;\n+            if (address == GetAccountAddress(strOldLabel))",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 216,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This condition should be changed to `if (strOldLabel != strLabel && address == GetAccountAddress(strOldLabel))`, so calling setlabel on an address which already has the same label will just be a no-op, instead of creating an unexpected side effect where the label's default label address gets discarded.",
    "created_at": "2016-12-12T23:17:30Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r92064042",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92064042"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r92064042"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/92064042/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2705,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108552368",
    "pull_request_review_id": 29591055,
    "id": 108552368,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODU1MjM2OA==",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)\n+        ret.push_back(name);\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 192,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is the label optional or required?\r\n\r\nIf it's required update L2675 to `if (fHelp || params.size() != 2)` and L2693-2695 to `std::string strLabel = AccountFromValue(params[1]);`, if optional update the docstring.",
    "created_at": "2017-03-28T22:26:10Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108552368",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108552368"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108552368"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108552368/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3122,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108553186",
    "pull_request_review_id": 29591895,
    "id": 108553186,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODU1MzE4Ng==",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)\n+        ret.push_back(name);\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    string strLabel;\n+    if (params.size() > 1)\n+        strLabel = AccountFromValue(params[1]);\n+\n+    if (IsMine(*pwalletMain, address.Get()))\n+    {\n+        // Detect when changing the label of an address that is the 'label address' of another label:\n+        // If so, delete the account record for it. Labels, unlike addresses can be deleted,\n+        // and we wouldn't do this, the record would stick around forever.\n+        if (pwalletMain->mapAddressBook.count(address.Get()))\n+        {\n+            string strOldLabel = pwalletMain->mapAddressBook[address.Get()].name;\n+            if (address == GetAccountAddress(strOldLabel))\n+                DeleteAccount(strOldLabel);\n+        }\n+        pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n+    }\n+    else\n+        pwalletMain->SetAddressBook(address.Get(), strLabel, \"send\");",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 222,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Braces please!",
    "created_at": "2017-03-28T22:31:01Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108553186",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108553186"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108553186"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108553186/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2711,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108553757",
    "pull_request_review_id": 29591895,
    "id": 108553757,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODU1Mzc1Nw==",
    "diff_hunk": "@@ -2537,13 +2537,13 @@ UniValue getlabeladdress(const UniValue& params, bool fHelp)\n /** Convert CAddressBookData to JSON record.\n  * The verbosity of the output is configurable based on the command.\n  */\n-static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n {\n     UniValue ret(UniValue::VOBJ);\n-    if (includeName)\n+    if (verbose)",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 9,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "e21f890df601ead1169fc2b888202e425d2dff72",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Does the order of push_back matter here? Might be cleaner to lump all `if (verbose)` under one branch...",
    "created_at": "2017-03-28T22:34:31Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108553757",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108553757"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108553757"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108553757/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2543,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108554842",
    "pull_request_review_id": 29591895,
    "id": 108554842,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODU1NDg0Mg==",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 45,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It seems like L2529-2534 could be a one or two liner, rather than 4 (and maybe get rid of the whitespace).",
    "created_at": "2017-03-28T22:41:28Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108554842",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108554842"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108554842"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108554842/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3816,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108554974",
    "pull_request_review_id": 29591895,
    "id": 108554974,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODU1NDk3NA==",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 59,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "does a builtin for range loop work here?",
    "created_at": "2017-03-28T22:42:28Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108554974",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108554974"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108554974"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108554974/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2548,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555197",
    "pull_request_review_id": 29591895,
    "id": 108555197,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODU1NTE5Nw==",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 128,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can this not be a for range loop?",
    "created_at": "2017-03-28T22:43:56Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555197",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555197"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555197"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555197/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2617,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555517",
    "pull_request_review_id": 29591895,
    "id": 108555517,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODU1NTUxNw==",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 170,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "can use for range?",
    "created_at": "2017-03-28T22:45:55Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555517",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555517"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555517"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555517/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2659,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555561",
    "pull_request_review_id": 29591895,
    "id": 108555561,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODU1NTU2MQ==",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 175,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "can use for range?",
    "created_at": "2017-03-28T22:46:07Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555561",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555561"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555561"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555561/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2664,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555711",
    "pull_request_review_id": 29591895,
    "id": 108555711,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODU1NTcxMQ==",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool includeName, bool includeDestData)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (includeName)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (includeDestData) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 167,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "d036fa44112df0c9faf76a1d69767b45a37e391b",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "validate the purpose string?",
    "created_at": "2017-03-28T22:47:12Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555711",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555711"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108555711"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108555711/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2656,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108556412",
    "pull_request_review_id": 29591895,
    "id": 108556412,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODU1NjQxMg==",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)\n+        ret.push_back(name);\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    string strLabel;\n+    if (params.size() > 1)\n+        strLabel = AccountFromValue(params[1]);\n+\n+    if (IsMine(*pwalletMain, address.Get()))\n+    {\n+        // Detect when changing the label of an address that is the 'label address' of another label:",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 210,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "a2557ffb80543af5e92c3db03d257fe594b0d910",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This behavior is probably just to mirror prior behavior, but perhaps a better alternative would be to create a fresh address for the account & allow deleting of account via another mechanism.",
    "created_at": "2017-03-28T22:51:51Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108556412",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108556412"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108556412"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108556412/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3142,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108556848",
    "pull_request_review_id": 29591895,
    "id": 108556848,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwODU1Njg0OA==",
    "diff_hunk": "@@ -2497,6 +2503,216 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n+UniValue getlabeladdress(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose)\n+        ret.push_back(Pair(\"name\", data.name));\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        BOOST_FOREACH(const PAIRTYPE(std::string, std::string) &item, data.destdata)\n+            ddata.push_back(Pair(item.first, item.second));\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n+    if (mi != pwalletMain->mapAddressBook.end())\n+        return AddressBookDataToJSON((*mi).second, true);\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    string strLabel = AccountFromValue(params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    {\n+        if (item.second.name == strLabel)\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false)));\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() > 1)\n+        throw runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    std::string purpose;\n+    if (params.size() > 0)\n+        purpose = params[0].get_str();\n+\n+    std::set<std::string> setLabels;\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose)\n+            setLabels.insert(entry.second.name);\n+    }\n+    UniValue ret(UniValue::VARR);\n+    BOOST_FOREACH(const std::string &name, setLabels)\n+        ret.push_back(name);\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const UniValue& params, bool fHelp)\n+{\n+    if (!EnsureWalletIsAvailable(fHelp))\n+        return NullUniValue;\n+\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+\n+    CBitcoinAddress address(params[0].get_str());\n+    if (!address.IsValid())\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+\n+    string strLabel;\n+    if (params.size() > 1)\n+        strLabel = AccountFromValue(params[1]);\n+\n+    if (IsMine(*pwalletMain, address.Get()))",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 208,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "a2557ffb80543af5e92c3db03d257fe594b0d910",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What's the correct behavior when address is watchonly?",
    "created_at": "2017-03-28T22:54:19Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108556848",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108556848"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r108556848"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/108556848/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2697,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121975430",
    "pull_request_review_id": 44049432,
    "id": 121975430,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTk3NTQzMA==",
    "diff_hunk": "@@ -204,6 +204,7 @@ class CWalletDB\n     bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n     bool ReadAccount(const std::string& strAccount, CAccount& account);\n     bool WriteAccount(const std::string& strAccount, const CAccount& account);\n+    bool EraseAccount(const std::string& strAccount);",
    "path": "src/wallet/walletdb.h",
    "position": 4,
    "original_position": 4,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "21a49c206f839984c9cab3e1dd67aea63f9c2a9c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think the comment above may need updating to:\r\n- remove comments about accounting entries (or say they're deprecated)\r\n- comment that 'acc' database entries are for labels.",
    "created_at": "2017-06-14T15:08:15Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121975430",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121975430"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121975430"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121975430/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 207,
    "original_line": 207,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121986789",
    "pull_request_review_id": 44049432,
    "id": 121986789,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTk4Njc4OQ==",
    "diff_hunk": "@@ -2923,6 +2928,236 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getlabeladdress(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(pwallet, strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        for (const std::pair<std::string, std::string>& item : data.destdata) {\n+            ddata.push_back(Pair(item.first, item.second));\n+        }\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 119,
    "original_position": 85,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "21a49c206f839984c9cab3e1dd67aea63f9c2a9c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If I'm understanding `AddressBookDataToJSON()` correctly, then the result will also include an array of destdata.",
    "created_at": "2017-06-14T15:47:11Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121986789",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121986789"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121986789"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121986789/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3855,
    "original_line": 3855,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121998036",
    "pull_request_review_id": 44049432,
    "id": 121998036,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTk5ODAzNg==",
    "diff_hunk": "@@ -2923,6 +2928,236 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getlabeladdress(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    std::string strLabel = AccountFromValue(request.params[0]);",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 41,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "21a49c206f839984c9cab3e1dd67aea63f9c2a9c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It'd be nice to eventually rename this function `LabelFromValue()`. That can be done in a follow-up PR.",
    "created_at": "2017-06-14T16:29:40Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121998036",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121998036"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121998036"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121998036/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 2955,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121998484",
    "pull_request_review_id": 44049432,
    "id": 121998484,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTk5ODQ4NA==",
    "diff_hunk": "@@ -2923,6 +2928,236 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getlabeladdress(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(pwallet, strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        for (const std::pair<std::string, std::string>& item : data.destdata) {\n+            ddata.push_back(Pair(item.first, item.second));\n+        }\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CBitcoinAddress address(request.params[0].get_str());\n+    if (!address.IsValid()) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(address.Get());\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        return AddressBookDataToJSON((*mi).second, true);\n+    }\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CBitcoinAddress, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == strLabel) {\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 191,
    "original_position": 157,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "21a49c206f839984c9cab3e1dd67aea63f9c2a9c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: I don't think `An empty string is the same as not providing this argument.` is required",
    "created_at": "2017-06-14T16:31:36Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121998484",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121998484"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121998484"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121998484/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3927,
    "original_line": 3927,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121999853",
    "pull_request_review_id": 44049432,
    "id": 121999853,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMTk5OTg1Mw==",
    "diff_hunk": "@@ -2923,6 +2928,236 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getlabeladdress(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(pwallet, strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        for (const std::pair<std::string, std::string>& item : data.destdata) {\n+            ddata.push_back(Pair(item.first, item.second));\n+        }\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CBitcoinAddress address(request.params[0].get_str());\n+    if (!address.IsValid()) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(address.Get());\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        return AddressBookDataToJSON((*mi).second, true);\n+    }\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CBitcoinAddress, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == strLabel) {\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> setLabels;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            setLabels.insert(entry.second.name);\n+        }\n+    }\n+    UniValue ret(UniValue::VARR);\n+    for (const std::string &name : setLabels) {\n+        ret.push_back(name);\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CBitcoinAddress address(request.params[0].get_str());\n+    if (!address.IsValid()) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::string strLabel;\n+    if (request.params.size() > 1){\n+        strLabel = AccountFromValue(request.params[1]);\n+    }\n+\n+    if (IsMine(*pwallet, address.Get()))\n+    {\n+        // Detect when changing the label of an address that is the 'label address' of another label:",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 228,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "21a49c206f839984c9cab3e1dd67aea63f9c2a9c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think we should remove the concept of 'label address' and change this section to delete the label when removing the final address from that label.",
    "created_at": "2017-06-14T16:37:41Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121999853",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121999853"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r121999853"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/121999853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3142,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122002514",
    "pull_request_review_id": 44049432,
    "id": 122002514,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjAwMjUxNA==",
    "diff_hunk": "@@ -2923,6 +2928,236 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getlabeladdress(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(pwallet, strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        for (const std::pair<std::string, std::string>& item : data.destdata) {\n+            ddata.push_back(Pair(item.first, item.second));\n+        }\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CBitcoinAddress address(request.params[0].get_str());\n+    if (!address.IsValid()) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(address.Get());\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        return AddressBookDataToJSON((*mi).second, true);\n+    }\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CBitcoinAddress, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == strLabel) {\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> setLabels;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            setLabels.insert(entry.second.name);\n+        }\n+    }\n+    UniValue ret(UniValue::VARR);\n+    for (const std::string &name : setLabels) {\n+        ret.push_back(name);\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CBitcoinAddress address(request.params[0].get_str());\n+    if (!address.IsValid()) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::string strLabel;\n+    if (request.params.size() > 1){",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 222,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "21a49c206f839984c9cab3e1dd67aea63f9c2a9c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What happens if `request.params.size() == 1`? Are you supposed to be able to remove a label using this rpc without a second argument? If so, I think you want to call `pwallet->DelAddressBook`.",
    "created_at": "2017-06-14T16:48:55Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r122002514",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122002514"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r122002514"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122002514/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3136,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122259021",
    "pull_request_review_id": 44358863,
    "id": 122259021,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyMjI1OTAyMQ==",
    "diff_hunk": "@@ -3146,7 +3146,7 @@ UniValue setlabel(const JSONRPCRequest& request)\n         if (pwallet->mapAddressBook.count(address.Get()))\n         {\n             std::string strOldLabel = pwallet->mapAddressBook[address.Get()].name;\n-            if (address == GetAccountAddress(pwallet, strOldLabel)) {\n+            if (strOldLabel != strLabel && address == GetAccountAddress(pwallet, strOldLabel)) {",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "54a9b2d94a3ee59d60a10408d84276609ed5e661",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Note: This change makes calling setlabel on an address which already has the same label a no-op, see https://github.com/bitcoin/bitcoin/pull/7729#discussion_r92064042.",
    "created_at": "2017-06-15T17:12:29Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r122259021",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122259021"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r122259021"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/122259021/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3148,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126163817",
    "pull_request_review_id": 48625551,
    "id": 126163817,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE2MzgxNw==",
    "diff_hunk": "@@ -2922,6 +2927,236 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getlabeladdress(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(pwallet, strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 94,
    "original_position": 60,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "0e3ef241d18593a9f67d4e5f37c22008cd9dc6b7",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, rename `ddata` to `dest_data`.",
    "created_at": "2017-07-07T14:42:15Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r126163817",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126163817"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r126163817"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126163817/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3830,
    "original_line": 3830,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126164658",
    "pull_request_review_id": 48625551,
    "id": 126164658,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE2NDY1OA==",
    "diff_hunk": "@@ -152,6 +152,11 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     return CBitcoinAddress(keyID).ToString();\n }\n \n+void DeleteAccount(CWallet * const pwallet, std::string strAccount)",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "0e3ef241d18593a9f67d4e5f37c22008cd9dc6b7",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, shouldn't we follow the convention in new code in favor of consistency? In that case rename `strAccount` to `account_name` for instance?",
    "created_at": "2017-07-07T14:45:19Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r126164658",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126164658"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r126164658"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126164658/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 155,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126165814",
    "pull_request_review_id": 48625551,
    "id": 126165814,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE2NTgxNA==",
    "diff_hunk": "@@ -2923,6 +2928,236 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getlabeladdress(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(pwallet, strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        for (const std::pair<std::string, std::string>& item : data.destdata) {\n+            ddata.push_back(Pair(item.first, item.second));\n+        }\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CBitcoinAddress address(request.params[0].get_str());\n+    if (!address.IsValid()) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(address.Get());\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        return AddressBookDataToJSON((*mi).second, true);\n+    }\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CBitcoinAddress, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == strLabel) {\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 191,
    "original_position": 157,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "21a49c206f839984c9cab3e1dd67aea63f9c2a9c",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree with @jnewbery, empty value should be an error then.",
    "created_at": "2017-07-07T14:49:50Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r126165814",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126165814"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r126165814"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126165814/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3927,
    "original_line": 3927,
    "side": "RIGHT",
    "in_reply_to_id": 121998484
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126167993",
    "pull_request_review_id": 48625551,
    "id": 126167993,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEyNjE2Nzk5Mw==",
    "diff_hunk": "@@ -2923,6 +2928,236 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getlabeladdress(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(pwallet, strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        for (const std::pair<std::string, std::string>& item : data.destdata) {\n+            ddata.push_back(Pair(item.first, item.second));\n+        }\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CBitcoinAddress address(request.params[0].get_str());\n+    if (!address.IsValid()) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(address.Get());\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        return AddressBookDataToJSON((*mi).second, true);\n+    }\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CBitcoinAddress, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == strLabel) {\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 191,
    "original_position": 157,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "21a49c206f839984c9cab3e1dd67aea63f9c2a9c",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "BTW, why is this argument needed? I mean, the client can filter the result. IMO pagination is more interesting.",
    "created_at": "2017-07-07T14:58:14Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r126167993",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126167993"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r126167993"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/126167993/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3927,
    "original_line": 3927,
    "side": "RIGHT",
    "in_reply_to_id": 121998484
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145885606",
    "pull_request_review_id": 70751893,
    "id": 145885606,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTg4NTYwNg==",
    "diff_hunk": "@@ -2923,6 +2928,236 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getlabeladdress(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(pwallet, strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        for (const std::pair<std::string, std::string>& item : data.destdata) {\n+            ddata.push_back(Pair(item.first, item.second));\n+        }\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CBitcoinAddress address(request.params[0].get_str());\n+    if (!address.IsValid()) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(address.Get());\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        return AddressBookDataToJSON((*mi).second, true);\n+    }\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CBitcoinAddress, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == strLabel) {\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> setLabels;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            setLabels.insert(entry.second.name);\n+        }\n+    }\n+    UniValue ret(UniValue::VARR);\n+    for (const std::string &name : setLabels) {\n+        ret.push_back(name);\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CBitcoinAddress address(request.params[0].get_str());\n+    if (!address.IsValid()) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::string strLabel;\n+    if (request.params.size() > 1){",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 222,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "21a49c206f839984c9cab3e1dd67aea63f9c2a9c",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is there any difference between setting an empty label vs deleting the label?",
    "created_at": "2017-10-20T06:19:21Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r145885606",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145885606"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r145885606"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145885606/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3136,
    "side": "RIGHT",
    "in_reply_to_id": 122002514
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145927297",
    "pull_request_review_id": 70800087,
    "id": 145927297,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE0NTkyNzI5Nw==",
    "diff_hunk": "@@ -2923,6 +2928,236 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getlabeladdress(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(pwallet, strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        for (const std::pair<std::string, std::string>& item : data.destdata) {\n+            ddata.push_back(Pair(item.first, item.second));\n+        }\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CBitcoinAddress address(request.params[0].get_str());\n+    if (!address.IsValid()) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(address.Get());\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        return AddressBookDataToJSON((*mi).second, true);\n+    }\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CBitcoinAddress, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == strLabel) {\n+            ret.push_back(Pair(item.first.ToString(), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> setLabels;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            setLabels.insert(entry.second.name);\n+        }\n+    }\n+    UniValue ret(UniValue::VARR);\n+    for (const std::string &name : setLabels) {\n+        ret.push_back(name);\n+    }\n+\n+    return ret;\n+}\n+\n+UniValue setlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+        throw std::runtime_error(\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n+            \"\\nSets the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with an label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")\n+            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CBitcoinAddress address(request.params[0].get_str());\n+    if (!address.IsValid()) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::string strLabel;\n+    if (request.params.size() > 1){",
    "path": "src/wallet/rpcwallet.cpp",
    "position": null,
    "original_position": 222,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "21a49c206f839984c9cab3e1dd67aea63f9c2a9c",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Well if you set all addresses with a certain label to the empty label, that label is effectively deleted. Deleting the label is a shortcut to remove it from all addresses.",
    "created_at": "2017-10-20T10:17:41Z",
    "updated_at": "2018-03-23T11:42:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r145927297",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145927297"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r145927297"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/145927297/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 3136,
    "side": "RIGHT",
    "in_reply_to_id": 122002514
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176884083",
    "pull_request_review_id": 106672390,
    "id": 176884083,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Njg4NDA4Mw==",
    "diff_hunk": "@@ -290,14 +295,14 @@ UniValue setlabel(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"setlabel \\\"address\\\" \\\"label\\\"\\n\"\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"\n             \"\\nSets the label associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with a label.\\n\"\n-            \"2. \\\"label\\\"           (string, required) The label to assign the address to.\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address to be associated with a label.\\n\"\n+            \"2. \\\"label\\\"           (string, required) The label to assign to the address.\\n\"\n             \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n-            + HelpExampleRpc(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n+            + HelpExampleCli(\"setlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\" \\\"tabby\\\"\")",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 42,
    "original_position": 42,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Unrelated change?\r\n\r\nIf you really wanted to change that `DummyAddress(Params())` would be a better choice.",
    "created_at": "2018-03-23T23:06:26Z",
    "updated_at": "2018-03-23T23:06:27Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r176884083",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176884083"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r176884083"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/176884083/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 304,
    "original_line": 304,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177707930",
    "pull_request_review_id": 107626321,
    "id": 177707930,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3NzcwNzkzMA==",
    "diff_hunk": "@@ -208,11 +213,11 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"label\\\"         (string, required) The label name for the address. It can also be set to the empty string \\\"\\\" to represent the default label. The label does not need to exist, it will be created and a new address created  if there is no label by the given name.\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 19,
    "original_position": 19,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "6a0d27412d9c1b16e4bdfc406ee1e7b0ee6a2a51",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm fine with removing this remark, but note that the behavior of creating a new address still exists (though without an address type param). It might make sense to deprecate that behavior in a followup PR, and require `getnewaddress` if `getlabeladdress` doesn't return anything. That also makes the choice of potentially reusing an address more explicit.",
    "created_at": "2018-03-28T10:41:34Z",
    "updated_at": "2018-03-28T10:50:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177707930",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177707930"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177707930"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177707930/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 213,
    "original_line": 213,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177767690",
    "pull_request_review_id": 107700437,
    "id": 177767690,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzc2NzY5MA==",
    "diff_hunk": "@@ -3882,6 +4024,26 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n     { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n \n+    /** Account functions (deprecated) */\n+    { \"wallet\",             \"getaccountaddress\",                &getlabeladdress,               {\"account\"} },\n+    { \"wallet\",             \"getaccount\",                       &getaccount,                    {\"address\"} },\n+    { \"wallet\",             \"getaddressesbyaccount\",            &getaddressesbyaccount,         {\"account\"} },\n+    { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 278,
    "original_position": 278,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think `getaddressinfo` should be deprecated. It's not an account rpc",
    "created_at": "2018-03-28T14:24:43Z",
    "updated_at": "2018-03-28T15:05:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177767690",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177767690"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177767690"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177767690/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 4031,
    "original_line": 4031,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177768880",
    "pull_request_review_id": 107700437,
    "id": 177768880,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzc2ODg4MA==",
    "diff_hunk": "@@ -290,14 +295,14 @@ UniValue setlabel(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"setlabel \\\"address\\\" \\\"label\\\"\\n\"\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 32,
    "original_position": 32,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why rename the arguments/return values to bitcoinaddress everywhere? Seems like a gratuitous API break.\r\n\r\n`address` is used in many RPCs for a bitcoin address. Why not continue that convention? (and if you really must change this, current style guidelines call for snake_case for args)",
    "created_at": "2018-03-28T14:27:40Z",
    "updated_at": "2018-03-28T15:05:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177768880",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177768880"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177768880"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177768880/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 298,
    "original_line": 298,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177769646",
    "pull_request_review_id": 107700437,
    "id": 177769646,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzc2OTY0Ng==",
    "diff_hunk": "@@ -2923,6 +2928,236 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     return result;\n }\n \n+UniValue getlabeladdress(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabeladdress \\\"label\\\"\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"       (string, required) The label for the address. It can also be set to the empty string \\\"\\\" to represent the default label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\\"bitcoinaddress\\\"   (string) The 'label address' for the label\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabeladdress\", \"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"\\\"\")\n+            + HelpExampleCli(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+            + HelpExampleRpc(\"getlabeladdress\", \"\\\"mylabel\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    // Parse the label first so we don't generate a key if there's an error\n+    std::string strLabel = AccountFromValue(request.params[0]);\n+\n+    UniValue ret(UniValue::VSTR);\n+\n+    ret = GetAccountAddress(pwallet, strLabel).ToString();\n+    return ret;\n+}\n+\n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        for (const std::pair<std::string, std::string>& item : data.destdata) {\n+            ddata.push_back(Pair(item.first, item.second));\n+        }\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 119,
    "original_position": 85,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "21a49c206f839984c9cab3e1dd67aea63f9c2a9c",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Comment: https://github.com/bitcoin/bitcoin/pull/7729/files#r121986789 not addressed. Result also includes an array of destdata. Please update help text.\r\n\r\nEDIT: I think we should just drop the `destdata` from the response. It wasn't available in the old account RPCs, and it appears to me that the only place we add to destdata is in saveReceiveRequest().\r\n\r\nWe can always add destdata to the response in a later PR if required.",
    "created_at": "2018-03-28T14:29:32Z",
    "updated_at": "2018-04-04T21:18:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177769646",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177769646"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177769646"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177769646/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3855,
    "original_line": 3855,
    "side": "RIGHT",
    "in_reply_to_id": 121986789
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177770329",
    "pull_request_review_id": 107700437,
    "id": 177770329,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzc3MDMyOQ==",
    "diff_hunk": "@@ -3809,6 +3816,152 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        for (const std::pair<std::string, std::string>& item : data.destdata) {\n+            ddata.push_back(Pair(item.first, item.second));\n+        }\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 117,
    "original_position": 117,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Can we make this RPC return an array? We may want to be able to attach multiple labels to addresses in the future (https://github.com/bitcoin/bitcoin/pull/7729#issuecomment-302854998), and making this RPC return an array will allow us to do that without a breaking API change",
    "created_at": "2018-03-28T14:31:05Z",
    "updated_at": "2018-03-28T15:05:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177770329",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177770329"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177770329"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177770329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3853,
    "original_line": 3853,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177771425",
    "pull_request_review_id": 107700437,
    "id": 177771425,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzc3MTQyNQ==",
    "diff_hunk": "@@ -3809,6 +3816,152 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        for (const std::pair<std::string, std::string>& item : data.destdata) {\n+            ddata.push_back(Pair(item.first, item.second));\n+        }\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        return AddressBookDataToJSON(mi->second, true);\n+    }\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string strLabel = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == strLabel) {\n+            ret.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }\n+    return ret;\n+}\n+\n+UniValue listlabels(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() > 1)\n+        throw std::runtime_error(\n+            \"listlabels ( \\\"purpose\\\" )\\n\"\n+            \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"purpose\\\"  (string, optional) Address purpose to list labels for ('send','receive'). An empty string is the same as not providing this argument.\\n\"\n+            \"\\nResult:\\n\"\n+            \"[                      (json array of string)\\n\"\n+            \"  \\\"label\\\",  (string) Label name\\n\"\n+            \"  ...\\n\"\n+            \"]\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nList all labels\\n\"\n+            + HelpExampleCli(\"listlabels\", \"\") +\n+            \"\\nList labels that have receiving addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"receive\") +\n+            \"\\nList labels that have sending addresses\\n\"\n+            + HelpExampleCli(\"listlabels\", \"send\") +\n+            \"\\nAs json rpc call\\n\"\n+            + HelpExampleRpc(\"listlabels\", \"receive\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string purpose;\n+    if (request.params.size() > 0) {\n+        purpose = request.params[0].get_str();\n+    }\n+\n+    std::set<std::string> setLabels;\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (purpose.empty() || entry.second.purpose == purpose){\n+            setLabels.insert(entry.second.name);\n+        }\n+    }\n+    UniValue ret(UniValue::VARR);\n+    for (const std::string &name : setLabels) {",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 222,
    "original_position": 222,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should we sort the label names before returning?",
    "created_at": "2018-03-28T14:34:02Z",
    "updated_at": "2018-03-28T15:05:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177771425",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177771425"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177771425"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177771425/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3958,
    "original_line": 3958,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177776131",
    "pull_request_review_id": 107700437,
    "id": 177776131,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzc3NjEzMQ==",
    "diff_hunk": "@@ -3809,6 +3816,152 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        for (const std::pair<std::string, std::string>& item : data.destdata) {\n+            ddata.push_back(Pair(item.first, item.second));\n+        }\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"\n+            \"    \\\"name\\\": \\\"labelname\\\" (string) The label\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string) Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"  Result is null if there is no record for this address.\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+            + HelpExampleRpc(\"getlabel\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    if (!IsValidDestination(dest)) {\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n+    }\n+\n+    std::map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(dest);\n+    if (mi != pwallet->mapAddressBook.end()) {\n+        return AddressBookDataToJSON(mi->second, true);\n+    }\n+    return NullUniValue;\n+}\n+\n+UniValue getaddressesbylabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getaddressesbylabel \\\"label\\\"\\n\"\n+            \"\\nReturns the list of addresses assigned the specified label.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"label\\\"  (string, required) The label.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{ (json object with addresses as keys)\\n\"\n+            \"  \\\"bitcoinaddress\\\": { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  },...\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+            + HelpExampleRpc(\"getaddressesbylabel\", \"\\\"tabby\\\"\")\n+        );\n+\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+\n+    std::string strLabel = LabelFromValue(request.params[0]);\n+\n+    // Find all addresses that have the given label\n+    UniValue ret(UniValue::VOBJ);\n+    for (const std::pair<CTxDestination, CAddressBookData>& item : pwallet->mapAddressBook) {\n+        if (item.second.name == strLabel) {\n+            ret.push_back(Pair(EncodeDestination(item.first), AddressBookDataToJSON(item.second, false)));\n+        }\n+    }",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 175,
    "original_position": 175,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Should this throw an error if the label doesn't exist? Currently it returns an empty object.",
    "created_at": "2018-03-28T14:46:59Z",
    "updated_at": "2018-03-28T15:05:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177776131",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177776131"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177776131"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177776131/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3911,
    "original_line": 3911,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177781021",
    "pull_request_review_id": 107700437,
    "id": 177781021,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzc4MTAyMQ==",
    "diff_hunk": "@@ -208,11 +213,11 @@ UniValue getlabeladdress(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"getlabeladdress \\\"label\\\"\\n\"\n-            \"\\nReturns the current Bitcoin address for receiving payments to this label.\\n\"\n+            \"\\nReturns the current 'label address' for this label.\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 17,
    "original_position": 17,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "The behaviour for this RPC is weird. If called for a label that doesn't exist, it creates a new label, and then adds a new address as the 'label address' for that label. That's not very intuitive, and I think it's a bad experience (for example if a user typos an existing label name). Can we change this so that the rpc returns an error if called with a non-existent label name?",
    "created_at": "2018-03-28T15:00:30Z",
    "updated_at": "2018-03-28T15:05:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177781021",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177781021"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177781021"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177781021/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 216,
    "original_line": 216,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177782126",
    "pull_request_review_id": 107700437,
    "id": 177782126,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzc4MjEyNg==",
    "diff_hunk": "@@ -15,6 +15,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n+from collections import defaultdict",
    "path": "test/functional/wallet_labels.py",
    "position": 4,
    "original_position": 4,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: standard library imports before project imports please!",
    "created_at": "2018-03-28T15:03:38Z",
    "updated_at": "2018-03-28T15:05:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177782126",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177782126"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177782126"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177782126/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 18,
    "original_line": 18,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177789614",
    "pull_request_review_id": 107727482,
    "id": 177789614,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzc4OTYxNA==",
    "diff_hunk": "@@ -290,14 +295,14 @@ UniValue setlabel(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"setlabel \\\"address\\\" \\\"label\\\"\\n\"\n+            \"setlabel \\\"bitcoinaddress\\\" \\\"label\\\"\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 32,
    "original_position": 32,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Why rename the arguments/return values to bitcoinaddress everywhere? \r\n\r\nAgree it would be better to stick to `address`, but just as a historical note, this wasn't a \"gratuitious\" API break when it was originally written in 8571fee617aa22a43d73efa2560cd2ddf55c2478, because it preceded #11536, so the `setlabel` RPC was brand new.",
    "created_at": "2018-03-28T15:24:23Z",
    "updated_at": "2018-03-28T15:42:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177789614",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177789614"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177789614"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177789614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 298,
    "original_line": 298,
    "side": "RIGHT",
    "in_reply_to_id": 177768880
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177792185",
    "pull_request_review_id": 107727482,
    "id": 177792185,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzc5MjE4NQ==",
    "diff_hunk": "@@ -3809,6 +3816,152 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     return ret;\n }\n \n+/** Convert CAddressBookData to JSON record.\n+ * The verbosity of the output is configurable based on the command.\n+ */\n+static UniValue AddressBookDataToJSON(const CAddressBookData& data, bool verbose)\n+{\n+    UniValue ret(UniValue::VOBJ);\n+    if (verbose) {\n+        ret.push_back(Pair(\"name\", data.name));\n+    }\n+    ret.push_back(Pair(\"purpose\", data.purpose));\n+    if (verbose) {\n+        UniValue ddata(UniValue::VOBJ);\n+        for (const std::pair<std::string, std::string>& item : data.destdata) {\n+            ddata.push_back(Pair(item.first, item.second));\n+        }\n+        ret.push_back(Pair(\"destdata\", ddata));\n+    }\n+    return ret;\n+}\n+\n+UniValue getlabel(const JSONRPCRequest& request)\n+{\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    if (request.fHelp || request.params.size() != 1)\n+        throw std::runtime_error(\n+            \"getlabel \\\"bitcoinaddress\\\"\\n\"\n+            \"\\nReturns the label associated with the given address.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"bitcoinaddress\\\"  (string, required) The bitcoin address for label lookup.\\n\"\n+            \"\\nResult:\\n\"\n+            \"  { (json object with information about address)\\n\"",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 117,
    "original_position": 117,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Can we make this RPC return an array?\r\n\r\nIt might be better to not add a `getlabel` RPC at all but instead just return this information in `getaddressinfo` (recently added in #10583).",
    "created_at": "2018-03-28T15:31:51Z",
    "updated_at": "2018-03-28T15:42:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177792185",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177792185"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177792185"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177792185/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 3853,
    "original_line": 3853,
    "side": "RIGHT",
    "in_reply_to_id": 177770329
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177794866",
    "pull_request_review_id": 107727482,
    "id": 177794866,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDE3Nzc5NDg2Ng==",
    "diff_hunk": "@@ -3882,6 +4024,26 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"removeprunedfunds\",                &removeprunedfunds,             {\"txid\"} },\n     { \"wallet\",             \"rescanblockchain\",                 &rescanblockchain,              {\"start_height\", \"stop_height\"} },\n \n+    /** Account functions (deprecated) */\n+    { \"wallet\",             \"getaccountaddress\",                &getlabeladdress,               {\"account\"} },\n+    { \"wallet\",             \"getaccount\",                       &getaccount,                    {\"address\"} },\n+    { \"wallet\",             \"getaddressesbyaccount\",            &getaddressesbyaccount,         {\"account\"} },\n+    { \"wallet\",             \"getaddressinfo\",                   &getaddressinfo,                {\"address\"} },",
    "path": "src/wallet/rpcwallet.cpp",
    "position": 278,
    "original_position": 278,
    "commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "original_commit_id": "fef41789e8d7293ccfd859bc90fa0a3b2484752d",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> I don't think getaddressinfo should be deprecated. It's not an account rpc\r\n\r\nGood catch. getaddressinfo should remain where it was above \"getbalance\". It's my fault for accidentally moving it into this section during a rebase.",
    "created_at": "2018-03-28T15:39:33Z",
    "updated_at": "2018-03-28T15:42:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177794866",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177794866"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/7729#discussion_r177794866"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/7729"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/177794866/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 4031,
    "original_line": 4031,
    "side": "RIGHT",
    "in_reply_to_id": 177767690
  }
]