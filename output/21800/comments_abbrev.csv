DrahtBot,2021-04-29 05:26:15,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22582](https://github.com/bitcoin/bitcoin/pull/22582) (test: a test to check descendant limits by ritickgoenka)\n* [#225",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-828948454,828948454,
jnewbery,2021-06-07 17:03:39,"Concept ACK. Treating every transaction in the package as each other's ancestor and descendant is a good, conservative heuristic to use, since it can never underestimate the true number of ancestors/descendants. If it's too limiting, we could potentially implement looser limits in future.",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-856107966,856107966,
glozow,2021-06-08 09:07:07,"@harding thank you for the review!!!\n\n> However, the more the results returned by TMPA diverge from the results we'd get from submitting each transaction to our mempool individually, the more I think package validation should be using a different interface than individual transaction validation (e.g., a different parameter to TMPA or a different RPC altogether).\n\nI agree, and they will lik",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-856597823,856597823,
harding,2021-06-08 18:13:19,"@glozow \n\n> Perhaps we can have a regtest-only rawpackage RPC with a `test_accept` parameter (in my opinion users should never have to interact with packages)?\n\nThere's certainly no need for users to interact with packages before there's a reliable package relay mechanism, so starting with regtest-only seems like a good idea to me.  If someone later comes along with a reason it should be u",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-856986331,856986331,
michaelfolkson,2021-06-09 16:21:17,"> For users, yes. I don't think anyone is using it today for L2 testing and I'm not sure it's really well suited to that---testmempoolaccept tells you whether your transaction would be accepted into the current mempool, but L2 testers really want to know whether the transaction will be accepted into a future mempool; a failure now is a reliable harbinger of failure later, but a success now doesn't",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-857845044,857845044,
glozow,2021-06-10 10:55:47,"Incorporated doc suggestions from #22084 (to make it mergeable) and some review comments here, working on adding more edge casey tests that were discussed in PR Review Club last night.",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-858522666,858522666,
ariard,2021-06-13 23:15:38,"> I agree, and they will likely continue to diverge if we add bypass_timelocks and such... Perhaps we can have a regtest-only rawpackage RPC with a test_accept parameter (in my opinion users should never have to interact with packages)? And testmempoolaccept can be for users / L2 testing?\n\nSounds a good idea to introduce a `rawpackage` test-only RPC. I believe switching it to mainet is going t",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-860283889,860283889,
glozow,2021-06-14 17:08:25,"@ariard thanks for the review, I'm very much looking forward to the IRC discussions to better understand what packages we want to support. In your domino bumping example, I'm not entirely sure why we couldn't use several packages of size 2 to bump them?\n\n> MAX_PACKAGE_COUNT to 2 transactions for the initial deployement of package-relay\n\nWe're still a few PRs from package accept with submis",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-860846503,860846503,
Xekyo,2021-06-16 18:34:35,"> If you already have {A,B,C,D} in the mempools, and try to broadcast {E,F,G,H,I,J,K,L) in a single package it's going to be rejected (4 * 8 > DEFAULT_ANCESTOR_LIMITS), though if you broadcast components by pair, it will be accepted.\n\n@ariard: I don't understand the reasoning that leads to ""4 * 8"" here.",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-862616983,862616983,
glozow,2021-07-06 16:49:58,"Bump, this is the next step for package validation logic.\n\nThe heuristic used in this implementation still results in an exact calculation of in-mempool and in-package ancestors for packages of parent + child (the MVP/basic package use case as discussed in the IRC meetings). It can be slightly more restrictive in scenarios such as batched fee bumping, but is extensible if we want to implement ",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-874921861,874921861,
ritickgoenka,2021-07-25 18:18:43,"tACK \n\nRan the tests locally and also tried to tweak the tests to make sure everything was working fine. \n\nWhile checking for ancestors limit for a transaction we are checking the total number of ancestors including itself should be within 25, but when we are checking for descendants limit for a transaction we are checking the total number of descendants excluding itself should be within 2",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-886239343,886239343,
glozow,2021-07-26 10:45:21,"Thanks for the review @ritickgoenka!\n\n> While checking for ancestors limit for a transaction we are checking the total number of ancestors including itself should be within 25, but when we are checking for descendants limit for a transaction we are checking the total number of descendants excluding itself should be within 25. \n\nI don't think this is true. Descendant limits are also inclusi",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-886588979,886588979,
glozow,2021-07-26 10:46:09,Addressed @jnewbery's comments and added another test,https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-886589456,886589456,
ritickgoenka,2021-07-27 13:20:25,"reACK 6d8f687\n\nTested the new test which was added. \nAlso, wrote a new test to check the overestimation of descendant limits and it was working fine.\n\nTested on Ubuntu 18.04",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-887506781,887506781,
tryphe,2021-07-30 01:51:15,"Concept ACK\n\nReally nice work!",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-889569576,889569576,
laanwj,2021-08-05 18:57:47,Code review ACK 5d513c0698dfe088e6dcd77ade59a0b34d92efbd,https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-893704289,893704289,
fanquake,2021-08-06 00:02:09,"https://cirrus-ci.com/task/6628050143019008:\n```bash\nRun tx_pool_standard with args ['/tmp/cirrus-ci-build/ci/scratch/build/bitcoin-x86_64-pc-linux-gnu/src/test/fuzz/fuzz', '-runs=1', '/tmp/cirrus-ci-build/ci/scratch/qa-assets/fuzz_seed_corpus/tx_pool_standard']INFO: Seed: 517370066\nINFO: Loaded 1 modules   (547316 inline 8-bit counters): 547316 [0x556b20760ed8, 0x556b207e68cc), \nINFO: Loa",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-893902886,893902886,
glozow,2021-08-06 09:23:25,Thanks @fanquake. I've pushed a fix for what I expect is the culprit - single transaction ancestor/descendant limits can sometimes be slightly looser due to CPFP carve out; the decision to not return any tx results here would have caused that crash. I've gated `CheckPackageLimits()` to only run when there's more than one transaction.,https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-894129689,894129689,
glozow,2021-08-06 12:11:38,Addressed review comments and added tests for size limits (thanks @ariard for motivating) Ready for review again! ,https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-894217264,894217264,
JeremyRubin,2021-08-08 17:33:40,"utACK accf3d5\n",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-894829834,894829834,
glozow,2021-08-09 08:32:48,"@darosior good point. I agree sigop limits should be properly enforced for packages. At the moment, since the sigops limit is checked in `PreChecks` as you said, the limit is essentially `MAX_STANDARD_TX_SIGOPS_COST` * `MAX_PACKAGE_COUNT`, or 25x the single transaction size. Should that be changed?\n\nFor `CheckPackageLimits`, I'm not sure that sigops are relevant for mempool DoS protections. We",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-895044275,895044275,
darosior,2021-08-09 08:47:14,"> For CheckPackageLimits, I'm not sure that sigops are relevant for mempool DoS protections\n\nThe signature ops check is not about avoiding checking too many signatures in the mempool, but to keep the mempool consistent with what could be included in the next blocks by rational miners.\nMiners have a size budget (and therefore we care about feerate) but also a signature ops budget and we must ",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-895052140,895052140,
glozow,2021-08-09 10:34:52,"> The signature ops check is not about avoiding checking too many signatures in the mempool, but to keep the mempool consistent with what could be included in the next blocks by rational miners.\nMiners have a size budget (and therefore we care about feerate) but also a signature ops budget and we must take care about them too as otherwise our mempool could ""diverge"" (the top of the mempool would",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-895117719,895117719,
fanquake,2021-08-11 02:47:55,"> I've left a bunch of small comments. None are critical, so feel free to ignore or take them in a follow-up PR.\n\nI think there's enough here to warrant a followup.",https://github.com/bitcoin/bitcoin/pull/21800#issuecomment-896457688,896457688,
harding,2021-06-08 02:39:50,"In ""[mempool] extend CalculateMemPoolAncestors for packages""\n\nFeels a bit wrong to me to return the same ""too many (ancestors|descendants) for tx %s [limit: %u]"" error message when we're basing that conclusion on a heuristic rather than a full evaluation.  Maybe return a slightly different string like ""too many *possible* (ancestors|descendants)..."" if `total_count > 1`.  ",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r647068181,647068181,src/txmempool.cpp
Xekyo,2021-06-09 16:13:53,"Thanks, double negations are real brain teasers.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r648467544,648467544,src/validation.cpp
Xekyo,2021-06-09 16:18:40,"Optionally, in the same vein as @harding mentioned in his review:\n```suggestion\n                        errString = strprintf(""potentially too many unconfirmed parents [limit: %u]"", limitAncestorCount);\n```",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r648471295,648471295,src/txmempool.cpp
Xekyo,2021-06-09 16:36:17,"Is it fair to assume that all instances of `SIZE` now refer to virtualsize? Otherwise, this should perhaps be explicitly ""vsize"".",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r648484989,648484989,src/policy/packages.h
glozow,2021-06-10 10:53:44,"Added a ""possibly"" to the beginning of the error strings, gated on `total_count > 1`, so that the existing tests that assert expected error messages don't need to be changed.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649073219,649073219,src/txmempool.cpp
glozow,2021-06-10 10:54:06,"Done, see https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649073219",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649073470,649073470,src/txmempool.cpp
glozow,2021-06-11 09:52:37,You may find #22097 of interest :),https://github.com/bitcoin/bitcoin/pull/21800#discussion_r649848551,649848551,src/policy/packages.h
ariard,2021-06-13 21:21:41,What do you think about `CalculateMemPoolAncestorsSet` to disambiguate clearly from `CalculateMemPoolAncestors` ? Also add a param comment for `entries` (and the fact they might not been inter-dependent) ?,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579050,650579050,src/txmempool.h
ariard,2021-06-13 21:26:41,"by ""inclusive"" do you mean ""for package limits evaluation, assume that the union of ancestors/descendants of each transaction is an ancestor/descendant of every transaction"" or something else?",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579493,650579493,src/txmempool.h
ariard,2021-06-13 21:30:36,Do you mean `PreChecks()` and under?,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579921,650579921,src/validation.cpp
ariard,2021-06-13 21:30:52,Maybe `package_ancestors` to dissociate?,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650579949,650579949,src/validation.cpp
ariard,2021-06-13 21:32:41,"Reject reason could be `package-ancestors/descendants limits`? I think ""too-long"" masks that it can be also a size issue.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650580150,650580150,src/validation.cpp
glozow,2021-06-14 14:23:44,"I should clarify this comment - I mean when we call `addUnchecked` in real package mempool accept, we'll need to recalculate the ancestors for each one as input",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r650994842,650994842,src/validation.cpp
glozow,2021-06-14 14:49:04,"It's documenting the way we apply the limits, e.g. if `ancestorcount` is 25, it means the total number of ancestors, including itself, must be within 25.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651017757,651017757,src/txmempool.h
glozow,2021-06-14 15:52:21,done,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651072189,651072189,src/validation.cpp
glozow,2021-06-14 15:52:47,changed the tx error to `exceeds-ancestor-descendant-limits` and the package error `package-mempool-limits`,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651072541,651072541,src/validation.cpp
glozow,2021-06-14 15:53:53,"Added doxygen comment for `entries` param, but my intention was to overload the `CalculateMemPoolAncestors` function (the fact that the first argument is a vector instead of a single entry should suffice?)",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651073468,651073468,src/txmempool.h
glozow,2021-06-14 15:54:14,fixed,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r651073759,651073759,src/validation.cpp
jnewbery,2021-07-07 10:17:29,"This generic helper function is used for more than mempool acceptance (eg the `getmempoolancestors` RPC calls `CalculateMempoolAncestors(const CTxMemPoolEntry& entry, ...)`, which calls `CalculateMemPoolAncestors(const std::vector<CTxMemPoolEntry::CTxMemPoolEntryRef>& entries, ...)`. I suggest you remove the reference to ""acceptance to mempool"" here.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665238840,665238840,src/txmempool.h
jnewbery,2021-07-07 10:18:12,"I don't understand the ""if there are multiple"" part of this sentence. This function can be called with a single tx, and in that case the tx must not already be in the mempool.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665239317,665239317,src/txmempool.h
jnewbery,2021-07-07 10:19:32,I think this is actually just an out param. The caller shouldn't be calling this function with `setAncestors` already populated. Perhaps an assert should be added to the top of the function that `setAncestors` is empty?,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665240182,665240182,src/txmempool.h
jnewbery,2021-07-07 10:47:29,"There's a silent merge conflict with master: `CTransaction` is no longer imported into rpc_packages.py (since 2ce7b47958c4a10ba20dc86c011d71cda4b070a5).\n\nThis should fix it:\n\n```diff\ndiff --git a/test/functional/rpc_packages.py b/test/functional/rpc_packages.py\nindex 447c3cb08f..a084d0d9cb 100755\n--- a/test/functional/rpc_packages.py\n+++ b/test/functional/rpc_packages.py\n@@ -12,6",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665258130,665258130,test/functional/rpc_packages.py
jnewbery,2021-07-07 10:57:00,"I think this (and other instances) would need to be:\n\n```suggestion\n                                  total_count > 1 ? ""possibly "" : """",\n```\n\notherwise the log would be `possiblyexceeds descendant ...`",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665264021,665264021,src/txmempool.cpp
jnewbery,2021-07-07 11:05:06,What happened to the `Const` here? This used to be `GetMemPoolParentsConst()`.,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665268971,665268971,src/txmempool.cpp
jnewbery,2021-07-07 11:11:03,"I think that `CalculateMemPoolAncestors()` was already doing too much, and this adds just a little bit more complication. Instead of overloading CMPA and having CMPA(tx) call CMPA(package), what do you think about the splitting it into two parts:\n\n- calculate parents (two different functions - one for a single transaction which may have fSearchForParents=false, and one for a package)\n- check",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665272611,665272611,src/txmempool.cpp
jnewbery,2021-07-07 11:15:50,"What do you think about not making these const, and then decrementing from them and checking that we don't go below zero? That would avoid the need for the local variables and make the logic for individual txs and packages more similar.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665275481,665275481,src/txmempool.cpp
JeremyRubin,2021-07-07 20:05:17,"nit: use function signatures with spans when passing a const vec, removes the need to allocate for passing a single tx (can span without allocating from pointer).",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665671316,665671316,src/txmempool.cpp
JeremyRubin,2021-07-07 20:11:00,"I think it is clearer to make these as const personally, decrement until 0 is always confusing to me (is it at 0 or below zero that the error comes in? These are currently uint64_t, so we'd also need to either convert to int64_t or detect wraparound...).",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665674868,665674868,src/txmempool.cpp
JeremyRubin,2021-07-07 20:14:31,Never? Why is this new constraint present? I thought it's safe to use as long as we aren't searching for parents?,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665676930,665676930,src/txmempool.cpp
JeremyRubin,2021-07-07 20:15:14,this assert is pretty scary? why do we not permit >1?,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665677347,665677347,src/txmempool.cpp
JeremyRubin,2021-07-07 20:16:18,"re: @jnewbery's feedback to split, I think that might be right if fsearchforparents should never be used as false with a package? the asserts confuse me...",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665677948,665677948,src/txmempool.cpp
JeremyRubin,2021-07-07 20:16:42,What if it's a package of size 1? Is this code safe? Or only if it's called in non package contexts?,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665678189,665678189,src/txmempool.cpp
JeremyRubin,2021-07-07 20:17:39,"if you update to a span, you get rid of an allocation here!",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r665678766,665678766,src/txmempool.cpp
glozow,2021-07-08 14:15:57,"Sorry, I've clarified this now. CMPA for a vector of transactions always searches for parents. If we call CMPA with multiple transactions (also handling the case if called with a vector of size 1), those transactions shouldn't already be in the mempool.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666235253,666235253,src/txmempool.cpp
glozow,2021-07-08 14:16:18,GONE! 👐 ,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666235587,666235587,src/txmempool.cpp
glozow,2021-07-08 14:17:24,"(Same idea) if we're calling this with multiple transactions, they shouldn't already be in the mempool.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666236601,666236601,src/txmempool.cpp
glozow,2021-07-08 14:19:59,"Done, with Span :D\n\nI've made it so that the CMPA with a vector of transactions doesn't have a `fSearchForParents` param, we just always search for parents. The only call site (other than tests) should be in `MemPoolAccept::AcceptMultipleTransactions()` so the transactions shouldn't already be in the mempool. It wouldn't make sense to use this heuristic on transactions that are already in the ",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666238907,666238907,src/txmempool.cpp
glozow,2021-07-08 14:20:04,Fixed,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666238986,666238986,src/txmempool.cpp
glozow,2021-07-08 14:20:29,Fixed,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666239406,666239406,src/txmempool.cpp
glozow,2021-07-08 14:20:37,Fixed,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666239507,666239507,test/functional/rpc_packages.py
glozow,2021-07-08 14:20:59,"You're right it's just an out param, fixed.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666239846,666239846,src/txmempool.h
glozow,2021-07-08 14:21:54,Took it out. Also kind of different now that the two CMPAs are slightly different,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r666240721,666240721,src/txmempool.h
JeremyRubin,2021-07-09 16:12:38,did you tho? looks same,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r667063611,667063611,src/txmempool.cpp
glozow,2021-07-15 06:58:52,Removed this condition,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r670187216,670187216,src/txmempool.cpp
glozow,2021-07-15 06:59:08,Removed this constraint,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r670187368,670187368,src/txmempool.cpp
glozow,2021-07-15 07:06:37,"Right, removed",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r670191602,670191602,src/txmempool.h
glozow,2021-07-15 07:10:07,"Another problem with editing these variables is we'd need to change the error logging (current log would use the decremented count instead of actual limit), so I've left it as is.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r670193900,670193900,src/txmempool.cpp
jnewbery,2021-07-22 12:55:55,"Current project style is to name functions and methods with UpperCaseCamel:\n\nhttps://github.com/bitcoin/bitcoin/blob/36aee0f3538ec3399a3838041ea5993aba5f518b/doc/developer-notes.md#L92",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674769853,674769853,src/txmempool.cpp
jnewbery,2021-07-22 12:58:56,"```suggestion\n                                          CTxMemPoolEntry::Parents& staged_ancestors,\n```",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674772033,674772033,src/txmempool.h
jnewbery,2021-07-22 13:12:45,"```suggestion\n     * Helper function to calculate all in-mempool ancestors of staged_ancestors (including staged_ancestors themselves) and apply\n```\n\nor similar to document that setAncestors will include the transactions in staged_ancestors.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674782488,674782488,src/txmempool.h
jnewbery,2021-07-22 13:16:28,The `&` jumps from right to left between commits. Perhaps just have this as `setEntries& setAncestors` in commit _MOVEONLY: add helper function for calculating ancestors and checking limits_,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674785456,674785456,src/txmempool.h
jnewbery,2021-07-22 13:35:25,"These conditional log changes make the function less generic (it now knows something semantic about the caller). If you really want this ""possibly "" prefix, you could prepend it in the calling function:\n\n```diff\n     // When multiple transactions are passed in, the ancestors and descendants of all transactions\n     // considered together must be within limits even if they are not interdepe",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674801171,674801171,src/txmempool.cpp
jnewbery,2021-07-22 13:38:07,"Document basic type arguments:\n\n```suggestion\n    return calculateAncestorsAndCheckLimits(entry.GetTxSize(), /* entry_count */ 1, setAncestors, staged_ancestors,\n```",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674803415,674803415,src/txmempool.cpp
jnewbery,2021-07-22 13:41:11,Would it make sense to have an early exit here if `total_size` exceeds `limitAncestorSize` (similar to if the ancestor count exceeds `limitAncestorCount`)?,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674806029,674806029,src/txmempool.cpp
jnewbery,2021-07-22 13:46:26,"This function doesn't need to have a `setAncestors` out param, since the only place that it's called doesn't use it. In fact, you could rename this function to something like `CheckPackageLimits()` to better document what it's used for.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674810604,674810604,src/txmempool.cpp
glozow,2021-07-22 14:25:17,"Not sure. In practice, it wouldn't happen since we would have checked the package limits already",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r674848246,674848246,src/txmempool.cpp
glozow,2021-07-26 10:46:20,Good point - done :),https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676493060,676493060,src/txmempool.cpp
glozow,2021-07-26 10:46:30,Added,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676493156,676493156,src/txmempool.cpp
glozow,2021-07-26 10:47:07,"Good point, added the ""possibly "" prefix outside",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676493617,676493617,src/txmempool.cpp
glozow,2021-07-26 10:47:17,Done,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676493830,676493830,src/txmempool.h
glozow,2021-07-26 10:47:27,Done,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676494012,676494012,src/txmempool.h
glozow,2021-07-26 10:47:35,Done,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676494133,676494133,src/txmempool.cpp
jnewbery,2021-07-26 11:41:42,No need for these new calls to `generate(1)`.,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676527653,676527653,test/functional/rpc_packages.py
jnewbery,2021-07-26 11:46:39,"Might be worth commenting why you're prefixing the error string with ""possibly"" here.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r676530625,676530625,src/txmempool.cpp
fanquake,2021-08-03 07:03:16,Agree,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r681490129,681490129,src/txmempool.cpp
ariard,2021-08-04 15:05:31,"In the future, if packages are allowed to replace in-mempool transactions do we have concerns of the same transaction accounted _twice_ falsifying this check ?\n\nLet's say you have in-mempool { Tx_A } and in-package { Tx_A, Tx_B } where Tx_A is parent of Tx_B. Within this configuration, Tx_A is going to be counted twice, firstly as a `staged_ancestors` member and secondly as a `package` member.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r682704976,682704976,src/txmempool.cpp
ariard,2021-08-04 15:16:25,"Note, I think for the other package policy checks in `CheckPackage` we only return a `PackageValidationResult` without per-transaction results. If we want the package acceptance interface to be consistent, I believe we can leave `results` empty. As such, package policy failure overrides transaction policy one ?\n\nAt least `m_tx_results` doc in `src/validation.h` L216 could be clearer on this po",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r682714869,682714869,src/validation.cpp
ariard,2021-08-04 15:38:52,"I think this check doesn't have new coverage in `rpc_package.py ? I got a success for the following diff:\n```\ndiff --git a/src/txmempool.cpp b/src/txmempool.cpp\nindex 85911e15d..c7fa9fc62 100644\n--- a/src/txmempool.cpp\n+++ b/src/txmempool.cpp\n@@ -173,7 +173,7 @@ bool CTxMemPool::CalculateAncestorsAndCheckLimits(size_t entry_size,\n \n         if (stageit->GetSizeWithDescendants() + e",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r682734547,682734547,src/txmempool.cpp
ariard,2021-08-04 16:29:23,"I think we have topologies of in-mempool transactions and packages bypassing this limit.\n\nLet's say you have in-mempool, independent Tx_A and Tx_B where their virtual sizes are 30 KvB each.\nLet's say you have packages transactions Tx_C and _Tx_D where Tx_C is a child of A and B and Tx_D is a child of Tx_C their virtual sizes are 30 KvB each.\n\nIn `CheckPackageLimits`, Tx_C isn't already i",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r682776019,682776019,src/txmempool.cpp
glozow,2021-08-05 08:48:24,"Yep, this is absolutely a consideration for replacements and duplicates in packages in the future. I agree, we'll want to de-duplicate first (CMPA and CheckPackageLimits wouldn't be called for transactions already in the mempool, since PreChecks looks for `txn-already-in-mempool` before this). Additionally, we'll want to subtract the size/count of transactions being replaced from descendant limits",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683256913,683256913,src/txmempool.cpp
glozow,2021-08-05 08:50:34,That's a good point - perhaps it would be better to copy the error string from the `TxValidationState` into the `PackageValidationState` and always return results empty when we have a package-wide error.,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683258608,683258608,src/validation.cpp
glozow,2021-08-05 08:51:32,"This error should be caught in the mempool_tests unit test?\n\nIt's true, though, that I didn't write tests for the size limits, just did count limits. I can add size limit tests.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683259424,683259424,src/txmempool.cpp
glozow,2021-08-05 08:56:15,"(I will note this down for the future - I think we're on the same page about this, and it's not yet applicable for this PR)",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683263216,683263216,src/txmempool.cpp
glozow,2021-08-05 17:22:24,Done,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683647947,683647947,src/txmempool.cpp
glozow,2021-08-05 17:22:45,Good point :P removed. Added asserts for empty mempool in each of the subtests.,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683648206,683648206,test/functional/rpc_packages.py
glozow,2021-08-05 17:23:44,"Thanks for the suggestion - I got rid of the tx results when there's a package-wide error, and added a comment explaining what to expect for `m_tx_results` in validation.h",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683648914,683648914,src/validation.cpp
glozow,2021-08-05 17:24:38,Added a functional test for size limits - `test_desc_size_limits()` will fail if you apply this diff,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683649480,683649480,src/txmempool.cpp
glozow,2021-08-05 17:27:00,"Hm, I don't think this case bypasses the algorithm. I've implemented this test in the latest push (see `test_anc_size_limits()`) and it passes for me. It's possible I misunderstood your description, but it seems like we're good here?",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683651128,683651128,src/txmempool.cpp
laanwj,2021-08-05 18:39:18,"It's somewhat surprising to have an existing error message prefixed with 'possibly', I checked that it works for the current messages in `CalculateAncestorsAndCheckLimits`, but the validity of this text manipulation seems to be hard to guarantee over future changes to the code.\nBut I don't know a better solution to this, The grammatical correctness of the error message is not super critical.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r683700379,683700379,src/txmempool.cpp
ariard,2021-08-08 09:16:11,"> Additionally, we'll want to subtract the size/count of transactions being replaced from descendant limits before calling this function.\n\nExactly, this is another limit case to be aware of. And even trickier one like an ancestor of a second-stage package member being replaced by a first-stage package member and thus failing the whole package acceptance.\n\nYes, not yet applicable for this P",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r684743188,684743188,src/txmempool.cpp
ariard,2021-08-08 09:56:15,"> This error should be caught in the mempool_tests unit test?\n\nIt should but I don't' get an error for any `mempool_*` unit tests. Won't be surprised there is a hole coverage before to this PR. \n\n> Added a functional test for size limits - test_desc_size_limits() will fail if you apply this diff\n\nThanks for adding one, there is at least one behavior change to cover introduce with this ",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r684747959,684747959,src/txmempool.cpp
ariard,2021-08-08 10:31:18,"Thanks for writing the test, I noticed where my reasoning was flawed! \n\n>  totalSizeWithAncestors is the union Tx_A and Tx_B and its sum of 60 KvB is inferior to 101 KvB. \n\nWe init `totalSizeWithAncestors` with the whole package size from now, instead of the entry only (L164 in `src/txmempool.cpp`). So we have A+B+C+D  and the check against `limitAncestorSize` rejects the package. Maybe th",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r684752492,684752492,src/txmempool.cpp
ariard,2021-08-08 10:45:21,"Note, I still wonder if we need to make CPFP carve-out composable with package acceptance in the future. Otherwise a counterparty can build a branch of descendants from an output A on a multi-party unconfirmed ancestor to block package acceptance on an output B.\n\nI don't think this is required for current LN safety, as least as long as implementation backends don't try to chain their commitmen",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r684754153,684754153,src/validation.cpp
JeremyRubin,2021-08-08 15:13:07,can we use packages to just remove the carve out?,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r684789387,684789387,src/validation.cpp
JeremyRubin,2021-08-08 17:33:13,i think a simpler API would be to have staged always contain all the entries themselves? is there a reason not to (I think the epoch algorithm is relatively lightweight for this).,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r684806036,684806036,src/txmempool.cpp
jnewbery,2021-08-09 09:25:42,"Now that this errString is only used for the `PackageMempoolAcceptResult`, I think you can just drop the ""possibly"" prefix. It may have been useful on individual `MempoolAcceptResult` to disambiguate between failure because a single transaction definitely exceeded the limits and failure because a transaction was in a package that possibly exceeded limits. Now that we're not using it there, I think",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685040048,685040048,src/txmempool.cpp
jnewbery,2021-08-09 09:50:51,"No need for these parens. You can just assign to the individual variables:\n\n```suggestion\n        chain_hex, chain_txns = create_raw_chain(node, first_coin, self.address, self.privkeys)\n```\n\nSame for several other assignments below.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685056148,685056148,test/functional/rpc_packages.py
jnewbery,2021-08-09 09:58:40,"No need to construct a tuple here. In python you can just use an [expression list](https://docs.python.org/3.9/reference/expressions.html#grammar-token-expression-list) in a return statement:\n\n```suggestion\n    return tx, signedtx[""hex""], my_value, tx.vout[0].scriptPubKey.hex()\n```\n\nHowever, both of these are dangerous interfaces with an untyped language like Python, since users of thi",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685061119,685061119,test/functional/test_framework/wallet.py
jnewbery,2021-08-09 10:37:54,"the default `chain_length` parameter seems too specific to the specific packages test. Perhaps remove it and call the function with that specific value:\n\n```suggestion\ndef create_raw_chain(node, first_coin, address, privkeys, chain_length):\n```",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685084219,685084219,test/functional/test_framework/wallet.py
jnewbery,2021-08-09 10:50:31,"`make_chain()` doesn't seem like the right name for this function. I'd expect such a function to return a _chain_ of transactions, rather than an individual transaction.\n\nIt looks like the `n` parameter isn't ever used by any of the callers. Perhaps remove it and update the function documentation to say that the function spends the first output. The function can always be updated in future to ",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685091478,685091478,test/functional/test_framework/wallet.py
ariard,2021-08-09 11:00:20,"Ideally yes, carve-out don't scale for multi-party (n > 2) fee-bumping.\n\nThough extending the carve-out to safely chain CPFPs was argued by Matt on the LDK side (see here https://lightningdevkit.slack.com/archives/CTBLT3CAU/p1625786787422100). Personally, I think this approach is a bit doomed as we can assume first-stage of the CPFP-chain can always be replaced by a valid claim of a counterpar",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685096946,685096946,src/validation.cpp
jnewbery,2021-08-09 11:03:05,"Why do these outputs need to have different (and random) scriptPubKeys? It looks like none of the callers use any of these added outputs, so they could all just spend to the same (arbitrary) spk.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685098476,685098476,test/functional/test_framework/wallet.py
jnewbery,2021-08-09 11:05:07,Is there a reason that you're copying this rather than just mutating `tx` and returning it?,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685099588,685099588,test/functional/test_framework/wallet.py
jnewbery,2021-08-09 11:08:53,"This doesn't need to pass `prevtxs` (since `privkeys` is `None`):\n\n```suggestion\n                mempool_tx = bulk_transaction(small_tx, node, target_weight, None, None)\n```\n\nYou could also make `privkeys` an optional parameter in `bulk_transaction()` that defaults to `None`.\n\nThis means that `spk` and `prevtxs` could go inside the `j == 0` branch, since they're not used in the `j ",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685101671,685101671,test/functional/mempool_package_limits.py
jnewbery,2021-08-09 11:09:30,Perhaps make this an `else` branch to make it very clear that this is the alternative to signing with provided privkeys.,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685102052,685102052,test/functional/test_framework/wallet.py
jnewbery,2021-08-09 11:13:07,"[No need for a space after the key](https://www.python.org/dev/peps/pep-0008/#pet-peeves):\n\n```suggestion\n    outputs = {address: my_value}\n```\n\nSame in `create_child_with_parents()` below",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685104075,685104075,test/functional/test_framework/wallet.py
jnewbery,2021-08-09 11:15:58,"This implicitly assumes that `len(parents_tx)` == `len(locking_scripts)` == `len(values)`. Perhaps assert that explicitly at the top of the function, or change the function signature to take a `parents` parameter which is a list of (tx, value, locking_script) tuples.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685105589,685105589,test/functional/test_framework/wallet.py
jnewbery,2021-08-09 11:32:30,I think it's fine for both outputs to have the same scriptPubKey (and would make the test logic below simpler as well).,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685115251,685115251,test/functional/mempool_package_limits.py
jnewbery,2021-08-09 11:44:23,This isn't needed. `make_chain` already removes the fee from the output values.,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685121977,685121977,test/functional/mempool_package_limits.py
jnewbery,2021-08-09 11:57:30,"This doesn't need to be `0.0002` and works equally well with `0.0001` now that `create_child_with_parents()` always sets the fee to `0.0001` regardless of number of inputs.\n\nRather than using a magic number here, perhaps just grab the output amount from the transaction:\n\n```suggestion\n        pc_value = Decimal(pc_tx.vout[0].nValue) / COIN\n```",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685129826,685129826,test/functional/mempool_package_limits.py
jnewbery,2021-08-09 12:02:24,I have a slight preference for the previous `grandparent_` naming here (I don't think `gp` will be obvious to readers). Also perhaps change this to `txs` so it's clearer that it's multiple transactions.,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685132739,685132739,test/functional/mempool_package_limits.py
jnewbery,2021-08-09 12:03:18,why not `parent_scipts` to go with the other `parent_...` (or even `parent_spks`).,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685133231,685133231,test/functional/mempool_package_limits.py
jnewbery,2021-08-09 12:15:16,"Is it possible to make this test work without using `-acceptnonstdtxn`, perhaps by having `bulk_transaction` just add standard outputs? Since this test is all about mempool policy, it seems better to have the policy of the node being tested to be as close to realistic as possible.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685140674,685140674,test/functional/mempool_package_limits.py
jnewbery,2021-08-09 12:23:01,"In fact, I don't think this string ever gets used (in logging or returned to users). Should `testmempoolaccept` be updated to return the reject reason and debug message for the transaction result and package result (see `ValidationState::ToString()`, which indirectly gets called if `sendrawtransaction` fails).",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685145567,685145567,src/txmempool.cpp
jnewbery,2021-08-09 12:31:21,"If we improved the error messages being returned to the user, we could more precisely check that the package was rejected due to _exceeds ancestor size limits_.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685150952,685150952,test/functional/mempool_package_limits.py
jnewbery,2021-08-09 12:34:21,No need to declare variables in Python,https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685152884,685152884,test/functional/mempool_package_limits.py
jnewbery,2021-08-09 12:43:35,Maybe choose between `tx_small` and `small_tx` and stick to it :),https://github.com/bitcoin/bitcoin/pull/21800#discussion_r685158927,685158927,test/functional/mempool_package_limits.py
glozow,2021-08-11 10:30:28,"I definitely agree, it's a shame to turn off standardness in a policy-based tests. Will try to do this in a followup.",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r686704354,686704354,test/functional/mempool_package_limits.py
ysangkok,2021-08-18 20:59:08,"Users of named tuples are not forced to access them by name, because they are also tuples as the name suggests:\n\n```\n>>> A = namedtuple('A', ['x','y'])\n>>> A(1,2)\nA(x=1, y=2)\n>>> y, x = A(1,2)\n>>> x, y\n(2, 1)\n```\n\nDataclasses seem closer to what you want:\n\n```\n>>> from dataclasses import dataclass\n>>> @dataclass\n... class A:\n...     x: int\n...     y: int\n... ",https://github.com/bitcoin/bitcoin/pull/21800#discussion_r691598949,691598949,test/functional/test_framework/wallet.py
