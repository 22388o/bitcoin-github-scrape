[
  {
    "sha": "f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTViYmY1OGFhZjcyYWFiOGE5YzU4MjdiMWYxNjJmM2I4YWMzOGY0",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-15T06:12:29Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-05T11:37:28Z"
      },
      "message": "misc package validation doc improvements",
      "tree": {
        "sha": "a33edc1aba255f3766b0c6f718d684540b0913e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a33edc1aba255f3766b0c6f718d684540b0913e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3308c61091b6b7cb22569f3abadea6d001295c90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3308c61091b6b7cb22569f3abadea6d001295c90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3308c61091b6b7cb22569f3abadea6d001295c90"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "00e77d89e5ca61f860d6fe9d38012bba0e4159c3",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4",
        "patch": "@@ -903,7 +903,7 @@ static RPCHelpMan testmempoolaccept()\n                 RPCResult{\n                     RPCResult::Type::ARR, \"\", \"The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n                         \"Returns results for each transaction in the same order they were passed in.\\n\"\n-                        \"It is possible for transactions to not be fully validated ('allowed' unset) if another transaction failed.\\n\",\n+                        \"Transactions that cannot be fully validated due to failures in other transactions will not contain an 'allowed' result.\\n\",\n                     {\n                         {RPCResult::Type::OBJ, \"\", \"\",\n                         {"
      },
      {
        "sha": "b80fa9d3280c217addb3622661e5bfd15827af40",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4",
        "patch": "@@ -199,7 +199,8 @@ struct PackageMempoolAcceptResult\n     /**\n     * Map from wtxid to finished MempoolAcceptResults. The client is responsible\n     * for keeping track of the transaction objects themselves. If a result is not\n-    * present, it means validation was unfinished for that transaction.\n+    * present, it means validation was unfinished for that transaction. If there\n+    * was a package-wide error (see result in m_state), m_tx_results will be empty.\n     */\n     std::map<const uint256, const MempoolAcceptResult> m_tx_results;\n \n@@ -227,7 +228,8 @@ MempoolAcceptResult AcceptToMemoryPool(CChainState& active_chainstate, CTxMemPoo\n * @param[in]    txns                Group of transactions which may be independent or contain\n *                                   parent-child dependencies. The transactions must not conflict\n *                                   with each other, i.e., must not spend the same inputs. If any\n-*                                   dependencies exist, parents must appear before children.\n+*                                   dependencies exist, parents must appear anywhere in the list\n+*                                   before their children.\n * @returns a PackageMempoolAcceptResult which includes a MempoolAcceptResult for each transaction.\n * If a transaction fails, validation will exit early and some results may be missing.\n */"
      }
    ]
  },
  {
    "sha": "97dd1c729d2bbedf9527b914c0cc8267b8a7c21b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2RkMWM3MjlkMmJiZWRmOTUyN2I5MTRjMGNjODI2N2I4YTdjMjFi",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-15T05:54:36Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-05T11:37:28Z"
      },
      "message": "MOVEONLY: add helper function for calculating ancestors and checking limits",
      "tree": {
        "sha": "d9629de3c92a5ca4f02dc6632a1d2875c69671a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9629de3c92a5ca4f02dc6632a1d2875c69671a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97dd1c729d2bbedf9527b914c0cc8267b8a7c21b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97dd1c729d2bbedf9527b914c0cc8267b8a7c21b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97dd1c729d2bbedf9527b914c0cc8267b8a7c21b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97dd1c729d2bbedf9527b914c0cc8267b8a7c21b/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f95bbf58aaf72aab8a9c5827b1f162f3b8ac38f4"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 62,
      "deletions": 26
    },
    "files": [
      {
        "sha": "53de2d26184a2df1ffdbd21491c68850c70b7aaf",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 26,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97dd1c729d2bbedf9527b914c0cc8267b8a7c21b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97dd1c729d2bbedf9527b914c0cc8267b8a7c21b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=97dd1c729d2bbedf9527b914c0cc8267b8a7c21b",
        "patch": "@@ -150,33 +150,15 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n         UpdateForDescendants(it, mapMemPoolDescendantsToUpdate, setAlreadyIncluded);\n     }\n }\n-\n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateAncestorsAndCheckLimits(const CTxMemPoolEntry& entry,\n+                                                  setEntries& setAncestors,\n+                                                  CTxMemPoolEntry::Parents &staged_ancestors,\n+                                                  uint64_t limitAncestorCount,\n+                                                  uint64_t limitAncestorSize,\n+                                                  uint64_t limitDescendantCount,\n+                                                  uint64_t limitDescendantSize,\n+                                                  std::string &errString) const\n {\n-    CTxMemPoolEntry::Parents staged_ancestors;\n-    const CTransaction &tx = entry.GetTx();\n-\n-    if (fSearchForParents) {\n-        // Get parents of this transaction that are in the mempool\n-        // GetMemPoolParents() is only valid for entries in the mempool, so we\n-        // iterate mapTx to find parents.\n-        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                staged_ancestors.insert(**piter);\n-                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n-                }\n-            }\n-        }\n-    } else {\n-        // If we're not searching for parents, we require this to be an\n-        // entry in the mempool already.\n-        txiter it = mapTx.iterator_to(entry);\n-        staged_ancestors = it->GetMemPoolParentsConst();\n-    }\n-\n     size_t totalSizeWithAncestors = entry.GetTxSize();\n \n     while (!staged_ancestors.empty()) {\n@@ -216,6 +198,44 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n     return true;\n }\n \n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry,\n+                                           setEntries &setAncestors,\n+                                           uint64_t limitAncestorCount,\n+                                           uint64_t limitAncestorSize,\n+                                           uint64_t limitDescendantCount,\n+                                           uint64_t limitDescendantSize,\n+                                           std::string &errString,\n+                                           bool fSearchForParents /* = true */) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    const CTransaction &tx = entry.GetTx();\n+\n+    if (fSearchForParents) {\n+        // Get parents of this transaction that are in the mempool\n+        // GetMemPoolParents() is only valid for entries in the mempool, so we\n+        // iterate mapTx to find parents.\n+        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+            std::optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + 1 > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }\n+        }\n+    } else {\n+        // If we're not searching for parents, we require this to already be an\n+        // entry in the mempool and use the entry's cached parents.\n+        txiter it = mapTx.iterator_to(entry);\n+        staged_ancestors = it->GetMemPoolParentsConst();\n+    }\n+\n+    return CalculateAncestorsAndCheckLimits(entry, setAncestors, staged_ancestors,\n+                                            limitAncestorCount, limitAncestorSize,\n+                                            limitDescendantCount, limitDescendantSize, errString);\n+}\n+\n void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors)\n {\n     CTxMemPoolEntry::Parents parents = it->GetMemPoolParents();"
      },
      {
        "sha": "76ca83c25c7768db09a84c3e6462bd8f54029f70",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97dd1c729d2bbedf9527b914c0cc8267b8a7c21b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97dd1c729d2bbedf9527b914c0cc8267b8a7c21b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=97dd1c729d2bbedf9527b914c0cc8267b8a7c21b",
        "patch": "@@ -585,6 +585,22 @@ class CTxMemPool\n      */\n     std::set<uint256> m_unbroadcast_txids GUARDED_BY(cs);\n \n+\n+    /**\n+     * Helper function to populate setAncestors with all the ancestors of entry and apply ancestor\n+     * and descendant limits.\n+     * param@[out]  setAncestors        Will be populated with all mempool ancestors of entry.\n+     * param@[in]   staged_ancestors    Should contain mempool parents of entry.\n+     */\n+    bool CalculateAncestorsAndCheckLimits(const CTxMemPoolEntry& entry,\n+                                          setEntries& setAncestors,\n+                                          CTxMemPoolEntry::Parents &staged_ancestors,\n+                                          uint64_t limitAncestorCount,\n+                                          uint64_t limitAncestorSize,\n+                                          uint64_t limitDescendantCount,\n+                                          uint64_t limitDescendantSize,\n+                                          std::string &errString) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n public:\n     indirectmap<COutPoint, const CTransaction*> mapNextTx GUARDED_BY(cs);\n     std::map<uint256, CAmount> mapDeltas GUARDED_BY(cs);"
      }
    ]
  },
  {
    "sha": "f551841d3ec080a2d7a7988c7b35088dff6c5830",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTUxODQxZDNlYzA4MGEyZDdhNzk4OGM3YjM1MDg4ZGZmNmM1ODMw",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-15T06:09:22Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-05T11:37:28Z"
      },
      "message": "[refactor] pass size/count instead of entry to CalculateAncestorsAndCheckLimits\n\nThis does not change existing behavior.\nThe ancestor/descendant limits are inclusive of the entries themselves,\nbut CalculateAncestorsAndCheckLimits() does not need access to them.",
      "tree": {
        "sha": "fa79ebcd5d58be4c5cc7bfbfb05864d6c61c753a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa79ebcd5d58be4c5cc7bfbfb05864d6c61c753a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f551841d3ec080a2d7a7988c7b35088dff6c5830",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f551841d3ec080a2d7a7988c7b35088dff6c5830",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f551841d3ec080a2d7a7988c7b35088dff6c5830",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f551841d3ec080a2d7a7988c7b35088dff6c5830/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97dd1c729d2bbedf9527b914c0cc8267b8a7c21b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97dd1c729d2bbedf9527b914c0cc8267b8a7c21b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97dd1c729d2bbedf9527b914c0cc8267b8a7c21b"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 18,
      "deletions": 12
    },
    "files": [
      {
        "sha": "4a992bf2a44ed640469879ebcb8e2f98997c343d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f551841d3ec080a2d7a7988c7b35088dff6c5830/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f551841d3ec080a2d7a7988c7b35088dff6c5830/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f551841d3ec080a2d7a7988c7b35088dff6c5830",
        "patch": "@@ -150,16 +150,18 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n         UpdateForDescendants(it, mapMemPoolDescendantsToUpdate, setAlreadyIncluded);\n     }\n }\n-bool CTxMemPool::CalculateAncestorsAndCheckLimits(const CTxMemPoolEntry& entry,\n+\n+bool CTxMemPool::CalculateAncestorsAndCheckLimits(size_t entry_size,\n+                                                  size_t entry_count,\n                                                   setEntries& setAncestors,\n-                                                  CTxMemPoolEntry::Parents &staged_ancestors,\n+                                                  CTxMemPoolEntry::Parents& staged_ancestors,\n                                                   uint64_t limitAncestorCount,\n                                                   uint64_t limitAncestorSize,\n                                                   uint64_t limitDescendantCount,\n                                                   uint64_t limitDescendantSize,\n                                                   std::string &errString) const\n {\n-    size_t totalSizeWithAncestors = entry.GetTxSize();\n+    size_t totalSizeWithAncestors = entry_size;\n \n     while (!staged_ancestors.empty()) {\n         const CTxMemPoolEntry& stage = staged_ancestors.begin()->get();\n@@ -169,10 +171,10 @@ bool CTxMemPool::CalculateAncestorsAndCheckLimits(const CTxMemPoolEntry& entry,\n         staged_ancestors.erase(stage);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n-        if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n+        if (stageit->GetSizeWithDescendants() + entry_size > limitDescendantSize) {\n             errString = strprintf(\"exceeds descendant size limit for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantSize);\n             return false;\n-        } else if (stageit->GetCountWithDescendants() + 1 > limitDescendantCount) {\n+        } else if (stageit->GetCountWithDescendants() + entry_count > limitDescendantCount) {\n             errString = strprintf(\"too many descendants for tx %s [limit: %u]\", stageit->GetTx().GetHash().ToString(), limitDescendantCount);\n             return false;\n         } else if (totalSizeWithAncestors > limitAncestorSize) {\n@@ -188,7 +190,7 @@ bool CTxMemPool::CalculateAncestorsAndCheckLimits(const CTxMemPoolEntry& entry,\n             if (setAncestors.count(parent_it) == 0) {\n                 staged_ancestors.insert(parent);\n             }\n-            if (staged_ancestors.size() + setAncestors.size() + 1 > limitAncestorCount) {\n+            if (staged_ancestors.size() + setAncestors.size() + entry_count > limitAncestorCount) {\n                 errString = strprintf(\"too many unconfirmed ancestors [limit: %u]\", limitAncestorCount);\n                 return false;\n             }\n@@ -231,7 +233,8 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry,\n         staged_ancestors = it->GetMemPoolParentsConst();\n     }\n \n-    return CalculateAncestorsAndCheckLimits(entry, setAncestors, staged_ancestors,\n+    return CalculateAncestorsAndCheckLimits(entry.GetTxSize(), /* entry_count */ 1,\n+                                            setAncestors, staged_ancestors,\n                                             limitAncestorCount, limitAncestorSize,\n                                             limitDescendantCount, limitDescendantSize, errString);\n }"
      },
      {
        "sha": "71345ffb5d68a97cbc9c7268542d48e724b2b963",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f551841d3ec080a2d7a7988c7b35088dff6c5830/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f551841d3ec080a2d7a7988c7b35088dff6c5830/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=f551841d3ec080a2d7a7988c7b35088dff6c5830",
        "patch": "@@ -587,12 +587,15 @@ class CTxMemPool\n \n \n     /**\n-     * Helper function to populate setAncestors with all the ancestors of entry and apply ancestor\n-     * and descendant limits.\n-     * param@[out]  setAncestors        Will be populated with all mempool ancestors of entry.\n-     * param@[in]   staged_ancestors    Should contain mempool parents of entry.\n+     * Helper function to calculate all in-mempool ancestors of staged_ancestors and apply ancestor\n+     * and descendant limits (including staged_ancestors thsemselves, entry_size and entry_count).\n+     * param@[in]   entry_size          Virtual size to include in the limits.\n+     * param@[in]   entry_count         How many entries to include in the limits.\n+     * param@[in]   staged_ancestors    Should contain entries in the mempool.\n+     * param@[out]  setAncestors        Will be populated with all mempool ancestors.\n      */\n-    bool CalculateAncestorsAndCheckLimits(const CTxMemPoolEntry& entry,\n+    bool CalculateAncestorsAndCheckLimits(size_t entry_size,\n+                                          size_t entry_count,\n                                           setEntries& setAncestors,\n                                           CTxMemPoolEntry::Parents &staged_ancestors,\n                                           uint64_t limitAncestorCount,"
      }
    ]
  },
  {
    "sha": "c6e016aa139c8363e9b38bbc1ba0dca55700b8a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmUwMTZhYTEzOWM4MzYzZTliMzhiYmMxYmEwZGNhNTU3MDBiOGE3",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-15T06:18:18Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-05T11:37:28Z"
      },
      "message": "[mempool] check ancestor/descendant limits for packages\n\nWhen calculating ancestor/descendant counts for transactions in the\npackage, as a heuristic, count every transaction in the package as an\nancestor and descendant of every other transaction in the package.\n\nThis may overestimate, but will not underestimate, the\nancestor/descendant counts. This shortcut still produces an accurate\ncount for packages of 1 parent + 1 child.",
      "tree": {
        "sha": "961309b2b056b1fdb25284b8e1f9371fc269883f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/961309b2b056b1fdb25284b8e1f9371fc269883f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6e016aa139c8363e9b38bbc1ba0dca55700b8a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6e016aa139c8363e9b38bbc1ba0dca55700b8a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6e016aa139c8363e9b38bbc1ba0dca55700b8a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6e016aa139c8363e9b38bbc1ba0dca55700b8a7/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f551841d3ec080a2d7a7988c7b35088dff6c5830",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f551841d3ec080a2d7a7988c7b35088dff6c5830",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f551841d3ec080a2d7a7988c7b35088dff6c5830"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 58,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d5a888ac670997336ca75a44e01338b57b21c8fe",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6e016aa139c8363e9b38bbc1ba0dca55700b8a7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6e016aa139c8363e9b38bbc1ba0dca55700b8a7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=c6e016aa139c8363e9b38bbc1ba0dca55700b8a7",
        "patch": "@@ -200,6 +200,41 @@ bool CTxMemPool::CalculateAncestorsAndCheckLimits(size_t entry_size,\n     return true;\n }\n \n+bool CTxMemPool::CheckPackageLimits(const Package& package,\n+                                    uint64_t limitAncestorCount,\n+                                    uint64_t limitAncestorSize,\n+                                    uint64_t limitDescendantCount,\n+                                    uint64_t limitDescendantSize,\n+                                    std::string &errString) const\n+{\n+    CTxMemPoolEntry::Parents staged_ancestors;\n+    size_t total_size = 0;\n+    for (const auto& tx : package) {\n+        total_size += GetVirtualTransactionSize(*tx);\n+        for (const auto& input : tx->vin) {\n+            std::optional<txiter> piter = GetIter(input.prevout.hash);\n+            if (piter) {\n+                staged_ancestors.insert(**piter);\n+                if (staged_ancestors.size() + package.size() > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n+            }\n+        }\n+    }\n+    // When multiple transactions are passed in, the ancestors and descendants of all transactions\n+    // considered together must be within limits even if they are not interdependent. This may be\n+    // stricter than the limits for each individual transaction.\n+    setEntries setAncestors;\n+    const auto ret = CalculateAncestorsAndCheckLimits(total_size, package.size(),\n+                                                      setAncestors, staged_ancestors,\n+                                                      limitAncestorCount, limitAncestorSize,\n+                                                      limitDescendantCount, limitDescendantSize, errString);\n+    // It's possible to overestimate the ancestor/descendant totals.\n+    if (!ret) errString.insert(0, \"possibly \");\n+    return ret;\n+}\n+\n bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry,\n                                            setEntries &setAncestors,\n                                            uint64_t limitAncestorCount,"
      },
      {
        "sha": "0a84a6e6b12dfac3eacabc2805697574e506bd0a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6e016aa139c8363e9b38bbc1ba0dca55700b8a7/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6e016aa139c8363e9b38bbc1ba0dca55700b8a7/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=c6e016aa139c8363e9b38bbc1ba0dca55700b8a7",
        "patch": "@@ -18,6 +18,7 @@\n #include <coins.h>\n #include <indirectmap.h>\n #include <policy/feerate.h>\n+#include <policy/packages.h>\n #include <primitives/transaction.h>\n #include <random.h>\n #include <sync.h>\n@@ -700,6 +701,28 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /** Calculate all in-mempool ancestors of a set of transactions not already in the mempool and\n+     * check ancestor and descendant limits. Heuristics are used to estimate the ancestor and\n+     * descendant count of all entries if the package were to be added to the mempool.  The limits\n+     * are applied to the union of all package transactions. For example, if the package has 3\n+     * transactions and limitAncestorCount = 25, the union of all 3 sets of ancestors (including the\n+     * transactions themselves) must be <= 22.\n+     * @param[in]       package                 Transaction package being evaluated for acceptance\n+     *                                          to mempool. The transactions need not be direct\n+     *                                          ancestors/descendants of each other.\n+     * @param[in]       limitAncestorCount      Max number of txns including ancestors.\n+     * @param[in]       limitAncestorSize       Max virtual size including ancestors.\n+     * @param[in]       limitDescendantCount    Max number of txns including descendants.\n+     * @param[in]       limitDescendantSize     Max virtual size including descendants.\n+     * @param[out]      errString               Populated with error reason if a limit is hit.\n+     */\n+    bool CheckPackageLimits(const Package& package,\n+                            uint64_t limitAncestorCount,\n+                            uint64_t limitAncestorSize,\n+                            uint64_t limitDescendantCount,\n+                            uint64_t limitDescendantSize,\n+                            std::string &errString) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n     /** Populate setDescendants with all in-mempool descendants of hash.\n      *  Assumes that setDescendants includes all in-mempool descendants of anything\n      *  already in it.  */"
      }
    ]
  },
  {
    "sha": "3cd663a5d33aa7ef87994e452bced7f192d021a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2Q2NjNhNWQzM2FhN2VmODc5OTRlNDUyYmNlZDdmMTkyZDAyMWEw",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-15T06:29:19Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-06T09:04:59Z"
      },
      "message": "[policy] ancestor/descendant limits for packages",
      "tree": {
        "sha": "553f35c6dc33d1bcf7a402c6fe8e5653553dc883",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/553f35c6dc33d1bcf7a402c6fe8e5653553dc883"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cd663a5d33aa7ef87994e452bced7f192d021a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd663a5d33aa7ef87994e452bced7f192d021a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd663a5d33aa7ef87994e452bced7f192d021a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd663a5d33aa7ef87994e452bced7f192d021a0/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6e016aa139c8363e9b38bbc1ba0dca55700b8a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6e016aa139c8363e9b38bbc1ba0dca55700b8a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6e016aa139c8363e9b38bbc1ba0dca55700b8a7"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ec457da5cc2eb43e9407e5668ff2856604d2c5ce",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cd663a5d33aa7ef87994e452bced7f192d021a0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cd663a5d33aa7ef87994e452bced7f192d021a0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3cd663a5d33aa7ef87994e452bced7f192d021a0",
        "patch": "@@ -1079,6 +1079,19 @@ PackageMempoolAcceptResult MemPoolAccept::AcceptMultipleTransactions(const std::\n         m_viewmempool.PackageAddTransaction(ws.m_ptx);\n     }\n \n+    // Apply package mempool ancestor/descendant limits. Skip if there is only one transaction,\n+    // because it's unnecessary. Also, CPFP carve out can increase the limit for individual\n+    // transactions, but this exemption is not extended to packages in CheckPackageLimits().\n+    std::string err_string;\n+    if (txns.size() > 1 &&\n+        !m_pool.CheckPackageLimits(txns, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants,\n+                                   m_limit_descendant_size, err_string)) {\n+        // All transactions must have individually passed mempool ancestor and descendant limits\n+        // inside of PreChecks(), so this is separate from an individual transaction error.\n+        package_state.Invalid(PackageValidationResult::PCKG_POLICY, \"package-mempool-limits\", err_string);\n+        return PackageMempoolAcceptResult(package_state, std::move(results));\n+    }\n+\n     for (Workspace& ws : workspaces) {\n         PrecomputedTransactionData txdata;\n         if (!PolicyScriptChecks(args, ws, txdata)) {"
      }
    ]
  },
  {
    "sha": "f8253d69d6f02850995a11eeb71fedc22e6f6575",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODI1M2Q2OWQ2ZjAyODUwOTk1YTExZWViNzFmZWRjMjJlNmY2NTc1",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-03T14:30:43Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-06T09:04:59Z"
      },
      "message": "extract/rename helper functions from rpc_packages.py\n\nMOVEONLY; no change in behavior. Rename because there is another helper\nfunciton in chain_transaction in test_framework.util.py",
      "tree": {
        "sha": "dbfdaa167353aaa8a6352bf46298963363629bc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbfdaa167353aaa8a6352bf46298963363629bc5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8253d69d6f02850995a11eeb71fedc22e6f6575",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8253d69d6f02850995a11eeb71fedc22e6f6575",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8253d69d6f02850995a11eeb71fedc22e6f6575",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8253d69d6f02850995a11eeb71fedc22e6f6575/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cd663a5d33aa7ef87994e452bced7f192d021a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd663a5d33aa7ef87994e452bced7f192d021a0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd663a5d33aa7ef87994e452bced7f192d021a0"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 62,
      "deletions": 50
    },
    "files": [
      {
        "sha": "3cb4154601f739cf8cf303597db849989ffc10fe",
        "filename": "test/functional/rpc_packages.py",
        "status": "modified",
        "additions": 9,
        "deletions": 50,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8253d69d6f02850995a11eeb71fedc22e6f6575/test/functional/rpc_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8253d69d6f02850995a11eeb71fedc22e6f6575/test/functional/rpc_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_packages.py?ref=f8253d69d6f02850995a11eeb71fedc22e6f6575",
        "patch": "@@ -22,6 +22,11 @@\n from test_framework.util import (\n     assert_equal,\n )\n+from test_framework.wallet import (\n+    create_child_with_parents,\n+    create_raw_chain,\n+    make_chain,\n+)\n \n class RPCPackagesTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -78,26 +83,6 @@ def run_test(self):\n         self.test_conflicting()\n         self.test_rbf()\n \n-    def chain_transaction(self, parent_txid, parent_value, n=0, parent_locking_script=None):\n-        \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n-        amount = parent_value with a fee deducted.\n-        Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n-        \"\"\"\n-        node = self.nodes[0]\n-        inputs = [{\"txid\": parent_txid, \"vout\": n}]\n-        my_value = parent_value - Decimal(\"0.0001\")\n-        outputs = {self.address : my_value}\n-        rawtx = node.createrawtransaction(inputs, outputs)\n-        prevtxs = [{\n-            \"txid\": parent_txid,\n-            \"vout\": n,\n-            \"scriptPubKey\": parent_locking_script,\n-            \"amount\": parent_value,\n-        }] if parent_locking_script else None\n-        signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys, prevtxs=prevtxs)\n-        assert signedtx[\"complete\"]\n-        tx = tx_from_hex(signedtx[\"hex\"])\n-        return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())\n \n     def test_independent(self):\n         self.log.info(\"Test multiple independent transactions in a package\")\n@@ -148,20 +133,7 @@ def test_independent(self):\n     def test_chain(self):\n         node = self.nodes[0]\n         first_coin = self.coins.pop()\n-\n-        # Chain of 25 transactions\n-        parent_locking_script = None\n-        txid = first_coin[\"txid\"]\n-        chain_hex = []\n-        chain_txns = []\n-        value = first_coin[\"amount\"]\n-\n-        for _ in range(25):\n-            (tx, txhex, value, parent_locking_script) = self.chain_transaction(txid, value, 0, parent_locking_script)\n-            txid = tx.rehash()\n-            chain_hex.append(txhex)\n-            chain_txns.append(tx)\n-\n+        (chain_hex, chain_txns) = create_raw_chain(node, first_coin, self.address, self.privkeys)\n         self.log.info(\"Check that testmempoolaccept requires packages to be sorted by dependency\")\n         assert_equal(node.testmempoolaccept(rawtxs=chain_hex[::-1]),\n                 [{\"txid\": tx.rehash(), \"wtxid\": tx.getwtxid(), \"package-error\": \"package-not-sorted\"} for tx in chain_txns[::-1]])\n@@ -201,7 +173,7 @@ def test_multiple_children(self):\n         child_value = value - Decimal(\"0.0001\")\n \n         # Child A\n-        (_, tx_child_a_hex, _, _) = self.chain_transaction(parent_txid, child_value, 0, parent_locking_script_a)\n+        (_, tx_child_a_hex, _, _) = make_chain(node, self.address, self.privkeys, parent_txid, child_value, 0, parent_locking_script_a)\n         assert not node.testmempoolaccept([tx_child_a_hex])[0][\"allowed\"]\n \n         # Child B\n@@ -226,19 +198,6 @@ def test_multiple_children(self):\n             node.sendrawtransaction(rawtx)\n         assert_equal(testres_single, testres_multiple_ab)\n \n-    def create_child_with_parents(self, parents_tx, values, locking_scripts):\n-        \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n-        num_parents = len(parents_tx)\n-        total_value = sum(values)\n-        inputs = [{\"txid\": tx.rehash(), \"vout\": 0} for tx in parents_tx]\n-        outputs = {self.address : total_value - num_parents * Decimal(\"0.0001\")}\n-        rawtx_child = self.nodes[0].createrawtransaction(inputs, outputs)\n-        prevtxs = []\n-        for i in range(num_parents):\n-            prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\": 0, \"scriptPubKey\": locking_scripts[i], \"amount\": values[i]})\n-        signedtx_child = self.nodes[0].signrawtransactionwithkey(hexstring=rawtx_child, privkeys=self.privkeys, prevtxs=prevtxs)\n-        assert signedtx_child[\"complete\"]\n-        return signedtx_child[\"hex\"]\n \n     def test_multiple_parents(self):\n         node = self.nodes[0]\n@@ -253,12 +212,12 @@ def test_multiple_parents(self):\n             for _ in range(num_parents):\n                 parent_coin = self.coins.pop()\n                 value = parent_coin[\"amount\"]\n-                (tx, txhex, value, parent_locking_script) = self.chain_transaction(parent_coin[\"txid\"], value)\n+                (tx, txhex, value, parent_locking_script) = make_chain(node, self.address, self.privkeys, parent_coin[\"txid\"], value)\n                 package_hex.append(txhex)\n                 parents_tx.append(tx)\n                 values.append(value)\n                 parent_locking_scripts.append(parent_locking_script)\n-            child_hex = self.create_child_with_parents(parents_tx, values, parent_locking_scripts)\n+            child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, parent_locking_scripts)\n             # Package accept should work with the parents in any order (as long as parents come before child)\n             for _ in range(10):\n                 random.shuffle(package_hex)"
      },
      {
        "sha": "e1f159e4eccedf0b6f8f9bf2a891fa54e1f21f59",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8253d69d6f02850995a11eeb71fedc22e6f6575/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8253d69d6f02850995a11eeb71fedc22e6f6575/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=f8253d69d6f02850995a11eeb71fedc22e6f6575",
        "patch": "@@ -16,6 +16,7 @@\n     CTxIn,\n     CTxInWitness,\n     CTxOut,\n+    tx_from_hex,\n )\n from test_framework.script import (\n     CScript,\n@@ -176,3 +177,55 @@ def create_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_\n     def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n+\n+def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_locking_script=None):\n+    \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n+    amount = parent_value with a fee deducted.\n+    Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n+    \"\"\"\n+    inputs = [{\"txid\": parent_txid, \"vout\": n}]\n+    my_value = parent_value - Decimal(\"0.0001\")\n+    outputs = {address : my_value}\n+    rawtx = node.createrawtransaction(inputs, outputs)\n+    prevtxs = [{\n+        \"txid\": parent_txid,\n+        \"vout\": n,\n+        \"scriptPubKey\": parent_locking_script,\n+        \"amount\": parent_value,\n+    }] if parent_locking_script else None\n+    signedtx = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=privkeys, prevtxs=prevtxs)\n+    assert signedtx[\"complete\"]\n+    tx = tx_from_hex(signedtx[\"hex\"])\n+    return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())\n+\n+def create_child_with_parents(node, address, privkeys, parents_tx, values, locking_scripts):\n+    \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n+    num_parents = len(parents_tx)\n+    total_value = sum(values)\n+    inputs = [{\"txid\": tx.rehash(), \"vout\": 0} for tx in parents_tx]\n+    outputs = {address : total_value - num_parents * Decimal(\"0.0001\")}\n+    rawtx_child = node.createrawtransaction(inputs, outputs)\n+    prevtxs = []\n+    for i in range(num_parents):\n+        prevtxs.append({\"txid\": parents_tx[i].rehash(), \"vout\": 0, \"scriptPubKey\": locking_scripts[i], \"amount\": values[i]})\n+    signedtx_child = node.signrawtransactionwithkey(hexstring=rawtx_child, privkeys=privkeys, prevtxs=prevtxs)\n+    assert signedtx_child[\"complete\"]\n+    return signedtx_child[\"hex\"]\n+\n+def create_raw_chain(node, first_coin, address, privkeys, chain_length=25):\n+    \"\"\"Helper function: create a \"chain\" of chain_length transactions. The nth transaction in the\n+    chain is a child of the n-1th transaction and parent of the n+1th transaction.\n+    \"\"\"\n+    parent_locking_script = None\n+    txid = first_coin[\"txid\"]\n+    chain_hex = []\n+    chain_txns = []\n+    value = first_coin[\"amount\"]\n+\n+    for _ in range(chain_length):\n+        (tx, txhex, value, parent_locking_script) = make_chain(node, address, privkeys, txid, value, 0, parent_locking_script)\n+        txid = tx.rehash()\n+        chain_hex.append(txhex)\n+        chain_txns.append(tx)\n+\n+    return (chain_hex, chain_txns)"
      }
    ]
  },
  {
    "sha": "313c09f7b7beddfdb74c284720d209c81dfdb94f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTNjMDlmN2I3YmVkZGZkYjc0YzI4NDcyMGQyMDljODFkZmRiOTRm",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-05T13:01:51Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-06T09:04:59Z"
      },
      "message": "[test] helper function to increase transaction weight",
      "tree": {
        "sha": "750fca2d02074c83ea7083daa677085494bf204a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/750fca2d02074c83ea7083daa677085494bf204a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/313c09f7b7beddfdb74c284720d209c81dfdb94f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/313c09f7b7beddfdb74c284720d209c81dfdb94f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/313c09f7b7beddfdb74c284720d209c81dfdb94f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/313c09f7b7beddfdb74c284720d209c81dfdb94f/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8253d69d6f02850995a11eeb71fedc22e6f6575",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8253d69d6f02850995a11eeb71fedc22e6f6575",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8253d69d6f02850995a11eeb71fedc22e6f6575"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c36415ee91956cf3723d1811b2fbde198767bbf0",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/313c09f7b7beddfdb74c284720d209c81dfdb94f/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/313c09f7b7beddfdb74c284720d209c81dfdb94f/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=313c09f7b7beddfdb74c284720d209c81dfdb94f",
        "patch": "@@ -4,8 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"A limited-functionality wallet, which may replace a real wallet in tests\"\"\"\n \n+from copy import deepcopy\n from decimal import Decimal\n from enum import Enum\n+from random import choice\n from typing import Optional\n from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n from test_framework.key import ECKey\n@@ -28,6 +30,7 @@\n )\n from test_framework.util import (\n     assert_equal,\n+    assert_greater_than_or_equal,\n     satoshi_round,\n )\n \n@@ -229,3 +232,23 @@ def create_raw_chain(node, first_coin, address, privkeys, chain_length=25):\n         chain_txns.append(tx)\n \n     return (chain_hex, chain_txns)\n+\n+def bulk_transaction(tx, node, target_weight, privkeys, prevtxs=None):\n+    \"\"\"Pad a transaction with extra outputs until it reaches a target weight (or higher).\n+    returns CTransaction object\n+    \"\"\"\n+    tx_heavy = deepcopy(tx)\n+    assert_greater_than_or_equal(target_weight, tx_heavy.get_weight())\n+    while tx_heavy.get_weight() < target_weight:\n+        random_spk = \"6a4d0200\"  # OP_RETURN OP_PUSH2 512 bytes\n+        for _ in range(512*2):\n+            random_spk += choice(\"0123456789ABCDEF\")\n+        tx_heavy.vout.append(CTxOut(0, bytes.fromhex(random_spk)))\n+    # Re-sign the transaction\n+    if privkeys:\n+        signed = node.signrawtransactionwithkey(tx_heavy.serialize().hex(), privkeys, prevtxs)\n+        return tx_from_hex(signed[\"hex\"])\n+    # OP_TRUE\n+    tx_heavy.wit.vtxinwit = [CTxInWitness()]\n+    tx_heavy.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+    return tx_heavy"
      }
    ]
  },
  {
    "sha": "2b6b26e57c24d2f0abd442c1c33098e3121572ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjZiMjZlNTdjMjRkMmYwYWJkNDQyYzFjMzMwOThlMzEyMTU3MmNl",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-05T14:30:25Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-06T09:04:59Z"
      },
      "message": "[test] parameterizable fee for make_chain and create_child_with_parents",
      "tree": {
        "sha": "1452720e1ea43be43537a0a068b8ed509fd1f4e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1452720e1ea43be43537a0a068b8ed509fd1f4e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b6b26e57c24d2f0abd442c1c33098e3121572ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b6b26e57c24d2f0abd442c1c33098e3121572ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b6b26e57c24d2f0abd442c1c33098e3121572ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b6b26e57c24d2f0abd442c1c33098e3121572ce/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "313c09f7b7beddfdb74c284720d209c81dfdb94f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/313c09f7b7beddfdb74c284720d209c81dfdb94f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/313c09f7b7beddfdb74c284720d209c81dfdb94f"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "ba5b95f930f85057f03c63b2c76ab6318a4417e4",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b6b26e57c24d2f0abd442c1c33098e3121572ce/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b6b26e57c24d2f0abd442c1c33098e3121572ce/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=2b6b26e57c24d2f0abd442c1c33098e3121572ce",
        "patch": "@@ -34,6 +34,7 @@\n     satoshi_round,\n )\n \n+DEFAULT_FEE = Decimal(\"0.0001\")\n \n class MiniWalletMode(Enum):\n     \"\"\"Determines the transaction type the MiniWallet is creating and spending.\n@@ -181,13 +182,13 @@ def sendrawtransaction(self, *, from_node, tx_hex):\n         from_node.sendrawtransaction(tx_hex)\n         self.scan_tx(from_node.decoderawtransaction(tx_hex))\n \n-def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_locking_script=None):\n+def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_locking_script=None, fee=DEFAULT_FEE):\n     \"\"\"Build a transaction that spends parent_txid.vout[n] and produces one output with\n     amount = parent_value with a fee deducted.\n     Return tuple (CTransaction object, raw hex, nValue, scriptPubKey of the output created).\n     \"\"\"\n     inputs = [{\"txid\": parent_txid, \"vout\": n}]\n-    my_value = parent_value - Decimal(\"0.0001\")\n+    my_value = parent_value - fee\n     outputs = {address : my_value}\n     rawtx = node.createrawtransaction(inputs, outputs)\n     prevtxs = [{\n@@ -201,12 +202,12 @@ def make_chain(node, address, privkeys, parent_txid, parent_value, n=0, parent_l\n     tx = tx_from_hex(signedtx[\"hex\"])\n     return (tx, signedtx[\"hex\"], my_value, tx.vout[0].scriptPubKey.hex())\n \n-def create_child_with_parents(node, address, privkeys, parents_tx, values, locking_scripts):\n+def create_child_with_parents(node, address, privkeys, parents_tx, values, locking_scripts, fee=DEFAULT_FEE):\n     \"\"\"Creates a transaction that spends the first output of each parent in parents_tx.\"\"\"\n     num_parents = len(parents_tx)\n     total_value = sum(values)\n     inputs = [{\"txid\": tx.rehash(), \"vout\": 0} for tx in parents_tx]\n-    outputs = {address : total_value - num_parents * Decimal(\"0.0001\")}\n+    outputs = {address : total_value - fee}\n     rawtx_child = node.createrawtransaction(inputs, outputs)\n     prevtxs = []\n     for i in range(num_parents):"
      }
    ]
  },
  {
    "sha": "accf3d5868460b4b14ab607fd66ac985b086fbb3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2NmM2Q1ODY4NDYwYjRiMTRhYjYwN2ZkNjZhYzk4NWIwODZmYmIz",
    "commit": {
      "author": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-07-15T06:29:26Z"
      },
      "committer": {
        "name": "glozow",
        "email": "gloriajzhao@gmail.com",
        "date": "2021-08-06T09:04:59Z"
      },
      "message": "[test] mempool package ancestor/descendant limits",
      "tree": {
        "sha": "ad914a1dde0bb2a822c7914fade509a6c97a2e74",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad914a1dde0bb2a822c7914fade509a6c97a2e74"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/accf3d5868460b4b14ab607fd66ac985b086fbb3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/accf3d5868460b4b14ab607fd66ac985b086fbb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/accf3d5868460b4b14ab607fd66ac985b086fbb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/accf3d5868460b4b14ab607fd66ac985b086fbb3/comments",
    "author": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b6b26e57c24d2f0abd442c1c33098e3121572ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b6b26e57c24d2f0abd442c1c33098e3121572ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b6b26e57c24d2f0abd442c1c33098e3121572ce"
      }
    ],
    "stats": {
      "total": 476,
      "additions": 476,
      "deletions": 0
    },
    "files": [
      {
        "sha": "749ec6aa77eaa5de0cace0cbc755cceb1b8b08d8",
        "filename": "test/functional/mempool_package_limits.py",
        "status": "added",
        "additions": 475,
        "deletions": 0,
        "changes": 475,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/accf3d5868460b4b14ab607fd66ac985b086fbb3/test/functional/mempool_package_limits.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/accf3d5868460b4b14ab607fd66ac985b086fbb3/test/functional/mempool_package_limits.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_limits.py?ref=accf3d5868460b4b14ab607fd66ac985b086fbb3",
        "patch": "@@ -0,0 +1,475 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for limiting mempool and package ancestors/descendants.\"\"\"\n+\n+from decimal import Decimal\n+\n+from test_framework.address import ADDRESS_BCRT1_P2WSH_OP_TRUE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.messages import (\n+    COIN,\n+    CTransaction,\n+    CTxInWitness,\n+    tx_from_hex,\n+    WITNESS_SCALE_FACTOR,\n+)\n+from test_framework.script import (\n+    CScript,\n+    OP_TRUE,\n+)\n+from test_framework.util import (\n+    assert_equal,\n+)\n+from test_framework.wallet import (\n+    bulk_transaction,\n+    create_child_with_parents,\n+    make_chain,\n+)\n+\n+class MempoolPackageLimitsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+        self.setup_clean_chain = True\n+\n+    def run_test(self):\n+        self.log.info(\"Generate blocks to create UTXOs\")\n+        node = self.nodes[0]\n+        self.privkeys = [node.get_deterministic_priv_key().key]\n+        self.address = node.get_deterministic_priv_key().address\n+        self.coins = []\n+        # The last 100 coinbase transactions are premature\n+        for b in node.generatetoaddress(200, self.address)[:100]:\n+            coinbase = node.getblock(blockhash=b, verbosity=2)[\"tx\"][0]\n+            self.coins.append({\n+                \"txid\": coinbase[\"txid\"],\n+                \"amount\": coinbase[\"vout\"][0][\"value\"],\n+                \"scriptPubKey\": coinbase[\"vout\"][0][\"scriptPubKey\"],\n+            })\n+\n+        self.test_chain_limits()\n+        self.test_desc_count_limits()\n+        self.test_anc_count_limits()\n+        self.test_anc_count_limits_2()\n+        self.test_anc_count_limits_bushy()\n+\n+        # The node will accept our (nonstandard) extra large OP_RETURN outputs\n+        self.restart_node(0, extra_args=[\"-acceptnonstdtxn=1\"])\n+        self.test_anc_size_limits()\n+        self.test_desc_size_limits()\n+\n+    def test_chain_limits_helper(self, mempool_count, package_count):\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        first_coin = self.coins.pop()\n+        spk = None\n+        txid = first_coin[\"txid\"]\n+        chain_hex = []\n+        chain_txns = []\n+        value = first_coin[\"amount\"]\n+\n+        for i in range(mempool_count + package_count):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < mempool_count:\n+                node.sendrawtransaction(txhex)\n+                assert_equal(node.getrawmempool(verbose=True)[txid][\"ancestorcount\"], i + 1)\n+            else:\n+                chain_hex.append(txhex)\n+                chain_txns.append(tx)\n+        testres_too_long = node.testmempoolaccept(rawtxs=chain_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=chain_hex)])\n+\n+    def test_chain_limits(self):\n+        \"\"\"Create chains from mempool and package transactions that are longer than 25,\n+        but only if both in-mempool and in-package transactions are considered together.\n+        This checks that both mempool and in-package transactions are taken into account when\n+        calculating ancestors/descendant limits.\n+        \"\"\"\n+        self.log.info(\"Check that in-package ancestors count for mempool ancestor limits\")\n+\n+        # 24 transactions in the mempool and 2 in the package. The parent in the package has\n+        # 24 in-mempool ancestors and 1 in-package descendant. The child has 0 direct parents\n+        # in the mempool, but 25 in-mempool and in-package ancestors in total.\n+        self.test_chain_limits_helper(24, 2)\n+        # 2 transactions in the mempool and 24 in the package.\n+        self.test_chain_limits_helper(2, 24)\n+        # 13 transactions in the mempool and 13 in the package.\n+        self.test_chain_limits_helper(13, 13)\n+\n+    def test_desc_count_limits(self):\n+        \"\"\"Create an 'A' shaped package with 24 transactions in the mempool and 2 in the package:\n+                    M1\n+                   ^  ^\n+                 M2a  M2b\n+                .       .\n+               .         .\n+              .           .\n+             M12a          ^\n+            ^              M13b\n+           ^                 ^\n+          Pa                  Pb\n+        The top ancestor in the package exceeds descendant limits but only if the in-mempool and in-package\n+        descendants are all considered together (24 including in-mempool descendants and 26 including both\n+        package transactions).\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        self.log.info(\"Check that in-mempool and in-package descendants are calculated properly in packages\")\n+        # Top parent in mempool, M1\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - Decimal(\"0.0002\")) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        assert parent_signed[\"complete\"]\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        package_hex = []\n+\n+        # Chain A\n+        spk = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M2a... M12a\n+                node.sendrawtransaction(txhex)\n+            else: # Pa\n+                package_hex.append(txhex)\n+\n+        # Chain B\n+        value = parent_value - Decimal(\"0.0001\")\n+        rawtx_b = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], {self.address : value})\n+        tx_child_b = tx_from_hex(rawtx_b) # M2b\n+        tx_child_b.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_b.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_b_hex = tx_child_b.serialize().hex()\n+        node.sendrawtransaction(tx_child_b_hex)\n+        spk = tx_child_b.vout[0].scriptPubKey.hex()\n+        txid = tx_child_b.rehash()\n+        for i in range(12):\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            if i < 11: # M3b... M13b\n+                node.sendrawtransaction(txhex)\n+            else: # Pb\n+                package_hex.append(txhex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(2, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits(self):\n+        \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n+        M1a                    M1b\n+         ^                     ^\n+          M2a                M2b\n+           .                 .\n+            .               .\n+             .             .\n+             M12a        M12b\n+               ^         ^\n+                Pa     Pb\n+                 ^    ^\n+                   Pc\n+        The lowest descendant, Pc, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+\n+        # Two chains of 13 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(13):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                if i < 12:\n+                    node.sendrawtransaction(txhex)\n+                else: # Save the 13th transaction for the package\n+                    package_hex.append(txhex)\n+                    parents_tx.append(tx)\n+                    scripts.append(spk)\n+                    values.append(value)\n+\n+        # Child Pc\n+        child_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        package_hex.append(child_hex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(3, len(package_hex))\n+        testres_too_long = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_count_limits_2(self):\n+        \"\"\"Create a 'Y' shaped chain with 24 transactions in the mempool and 2 in the package:\n+        M1a                M1b\n+         ^                ^\n+          M2a            M2b\n+           .            .\n+            .          .\n+             .        .\n+            M12a    M12b\n+               ^    ^\n+                 Pc\n+                 ^\n+                 Pd\n+        The lowest descendant, Pd, exceeds ancestor limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+\n+        self.log.info(\"Check that in-mempool and in-package ancestors are calculated properly in packages\")\n+        # Two chains of 12 transactions each\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            for i in range(12):\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+                txid = tx.rehash()\n+                value -= Decimal(\"0.0001\")\n+                node.sendrawtransaction(txhex)\n+                if i == 11:\n+                    # last 2 transactions will be the parents of Pc\n+                    parents_tx.append(tx)\n+                    values.append(value)\n+                    scripts.append(spk)\n+\n+        # Child Pc\n+        pc_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts)\n+        pc_tx = tx_from_hex(pc_hex)\n+        pc_value = sum(values) - Decimal(\"0.0002\")\n+        pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n+\n+        # Child Pd\n+        (_, pd_hex, _, _) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, 0, pc_spk)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        testres_too_long = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n+        for txres in testres_too_long:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])])\n+\n+    def test_anc_count_limits_bushy(self):\n+        \"\"\"Create a tree with 20 transactions in the mempool and 6 in the package:\n+        M1...M4 M5...M8 M9...M12 M13...M16 M17...M20\n+            ^      ^       ^        ^         ^             (each with 4 parents)\n+            P0     P1      P2      P3        P4\n+             ^     ^       ^       ^         ^              (5 parents)\n+                           PC\n+        Where M(4i+1)...M+(4i+4) are the parents of Pi and P0, P1, P2, P3, and P4 are the parents of PC.\n+        P0... P4 individually only have 4 parents each, and PC has no in-mempool parents. But\n+        combined, PC has 25 in-mempool and in-package parents.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        package_hex = []\n+        parent_txns = []\n+        parent_values = []\n+        scripts = []\n+        for _ in range(5): # Make package transactions P0 ... P4\n+            gp_tx = []\n+            gp_values = []\n+            gp_scripts = []\n+            for _ in range(4): # Make mempool transactions M(4i+1)...M(4i+4)\n+                parent_coin = self.coins.pop()\n+                value = parent_coin[\"amount\"]\n+                txid = parent_coin[\"txid\"]\n+                (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value)\n+                gp_tx.append(tx)\n+                gp_values.append(value)\n+                gp_scripts.append(spk)\n+                node.sendrawtransaction(txhex)\n+            # Package transaction Pi\n+            pi_hex = create_child_with_parents(node, self.address, self.privkeys, gp_tx, gp_values, gp_scripts)\n+            package_hex.append(pi_hex)\n+            pi_tx = tx_from_hex(pi_hex)\n+            parent_txns.append(pi_tx)\n+            parent_values.append(Decimal(pi_tx.vout[0].nValue) / COIN)\n+            scripts.append(pi_tx.vout[0].scriptPubKey.hex())\n+        # Package transaction PC\n+        package_hex.append(create_child_with_parents(node, self.address, self.privkeys, parent_txns, parent_values, scripts))\n+\n+        assert_equal(20, node.getmempoolinfo()[\"size\"])\n+        assert_equal(6, len(package_hex))\n+        testres = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+    def test_anc_size_limits(self):\n+        \"\"\"Test Case with 2 independent transactions in the mempool and a parent + child in the\n+        package, where the package parent is the child of both mempool transactions (30KvB each):\n+              A     B\n+               ^   ^\n+                 C\n+                 ^\n+                 D\n+        The lowest descendant, D, exceeds ancestor size limits, but only if the in-mempool\n+        and in-package ancestors are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        parents_tx = []\n+        values = []\n+        scripts = []\n+        target_weight = WITNESS_SCALE_FACTOR * 1000 * 30 # 30KvB\n+        high_fee = Decimal(\"0.003\") # 10 sats/vB\n+        self.log.info(\"Check that in-mempool and in-package ancestor size limits are calculated properly in packages\")\n+        # Mempool transactions A and B\n+        for _ in range(2):\n+            spk = None\n+            top_coin = self.coins.pop()\n+            txid = top_coin[\"txid\"]\n+            value = top_coin[\"amount\"]\n+            (tx, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk, high_fee)\n+            bulked_tx = bulk_transaction(tx, node, target_weight, self.privkeys)\n+            node.sendrawtransaction(bulked_tx.serialize().hex())\n+            parents_tx.append(bulked_tx)\n+            values.append(Decimal(bulked_tx.vout[0].nValue) / COIN)\n+            scripts.append(bulked_tx.vout[0].scriptPubKey.hex())\n+\n+        # Package transaction C\n+        small_pc_hex = create_child_with_parents(node, self.address, self.privkeys, parents_tx, values, scripts, high_fee)\n+        pc_tx = bulk_transaction(tx_from_hex(small_pc_hex), node, target_weight, self.privkeys)\n+        pc_value = Decimal(pc_tx.vout[0].nValue) / COIN\n+        pc_spk = pc_tx.vout[0].scriptPubKey.hex()\n+        pc_hex = pc_tx.serialize().hex()\n+\n+        # Package transaction D\n+        (small_pd, _, val, spk) = make_chain(node, self.address, self.privkeys, pc_tx.rehash(), pc_value, 0, pc_spk, high_fee)\n+        prevtxs = [{\n+            \"txid\": pc_tx.rehash(),\n+            \"vout\": 0,\n+            \"scriptPubKey\": spk,\n+            \"amount\": val,\n+        }]\n+        pd_tx = bulk_transaction(small_pd, node, target_weight, self.privkeys, prevtxs)\n+        pd_hex = pd_tx.serialize().hex()\n+\n+        assert_equal(2, node.getmempoolinfo()[\"size\"])\n+        testres_too_heavy = node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])\n+        for txres in testres_too_heavy:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=[pc_hex, pd_hex])])\n+\n+    def test_desc_size_limits(self):\n+        \"\"\"Create 3 mempool transactions and 2 package transactions (25KvB each):\n+              Ma\n+             ^ ^\n+            Mb  Mc\n+           ^     ^\n+          Pd      Pe\n+        The top ancestor in the package exceeds descendant size limits but only if the in-mempool\n+        and in-package descendants are all considered together.\n+        \"\"\"\n+        node = self.nodes[0]\n+        assert_equal(0, node.getmempoolinfo()[\"size\"])\n+        target_weight = 21 * 1000 * WITNESS_SCALE_FACTOR\n+        high_fee = Decimal(\"0.0021\") # 10 sats/vB\n+        self.log.info(\"Check that in-mempool and in-package descendant sizes are calculated properly in packages\")\n+        # Top parent in mempool, Ma\n+        first_coin = self.coins.pop()\n+        parent_value = (first_coin[\"amount\"] - high_fee) / 2 # Deduct fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE:  parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        parent_tx = bulk_transaction(tx_from_hex(rawtx), node, target_weight, self.privkeys)\n+        node.sendrawtransaction(parent_tx.serialize().hex())\n+\n+        package_hex = []\n+        for j in range(2): # Two legs (left and right)\n+            # Mempool transaction (Mb and Mc)\n+            mempool_tx = CTransaction()\n+            spk = parent_tx.vout[j].scriptPubKey.hex()\n+            value = Decimal(parent_tx.vout[j].nValue) / COIN\n+            txid = parent_tx.rehash()\n+            prevtxs = [{\n+                \"txid\": txid,\n+                \"vout\": j,\n+                \"scriptPubKey\": spk,\n+                \"amount\": value,\n+            }]\n+            if j == 0: # normal key\n+                (tx_small, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, j, spk, high_fee)\n+                mempool_tx = bulk_transaction(tx_small, node, target_weight, self.privkeys, prevtxs)\n+            else: # OP_TRUE\n+                inputs = [{\"txid\": txid, \"vout\": 1}]\n+                outputs = {self.address: value - high_fee}\n+                small_tx = tx_from_hex(node.createrawtransaction(inputs, outputs))\n+                mempool_tx = bulk_transaction(small_tx, node, target_weight, None, prevtxs)\n+            node.sendrawtransaction(mempool_tx.serialize().hex())\n+\n+            # Package transaction (Pd and Pe)\n+            spk = mempool_tx.vout[0].scriptPubKey.hex()\n+            value = Decimal(mempool_tx.vout[0].nValue) / COIN\n+            txid = mempool_tx.rehash()\n+            (tx_small, _, _, _) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk, high_fee)\n+            prevtxs = [{\n+                \"txid\": txid,\n+                \"vout\": 0,\n+                \"scriptPubKey\": spk,\n+                \"amount\": value,\n+            }]\n+            package_tx = bulk_transaction(tx_small, node, target_weight, self.privkeys, prevtxs)\n+            package_hex.append(package_tx.serialize().hex())\n+\n+        assert_equal(3, node.getmempoolinfo()[\"size\"])\n+        assert_equal(2, len(package_hex))\n+        testres_too_heavy = node.testmempoolaccept(rawtxs=package_hex)\n+        for txres in testres_too_heavy:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n+if __name__ == \"__main__\":\n+    MempoolPackageLimitsTest().main()"
      },
      {
        "sha": "1a1a6a263aa420d1c2335d0a17cb879992196318",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/accf3d5868460b4b14ab607fd66ac985b086fbb3/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/accf3d5868460b4b14ab607fd66ac985b086fbb3/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=accf3d5868460b4b14ab607fd66ac985b086fbb3",
        "patch": "@@ -218,6 +218,7 @@\n     'rpc_createmultisig.py --legacy-wallet',\n     'rpc_createmultisig.py --descriptors',\n     'rpc_packages.py',\n+    'mempool_package_limits.py',\n     'feature_versionbits_warning.py',\n     'rpc_preciousblock.py',\n     'wallet_importprunedfunds.py --legacy-wallet',"
      }
    ]
  }
]