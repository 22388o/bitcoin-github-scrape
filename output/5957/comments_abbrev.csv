jgarzik,2015-04-01T03:56:38Z,Nice.. I've wanted something like 'generate'  Passes quick-glance review.  Will test.\n,https://github.com/bitcoin/bitcoin/pull/5957#issuecomment-88342337,88342337,
fanquake,2015-04-01T07:32:55Z,"Travis failure\n\n```\nRunning testscript wallet.py...\nInitializing test directory /tmp/testFqH6I5\nMining blocks...\nJSONRPC error: value is type \n  File ""/home/travis/build/bitcoin/bitcoin/bitcoin-i686-pc-linux-gnu/qa/rpc-tests/test_framework.py"", line 117, in main\n    self.run_test()\n  File ""/home/travis/build/bitcoin/bitcoin/bitcoin-i686-pc-linux-gnu/qa/rpc-tests/wallet.py"", line 43, in ru",https://github.com/bitcoin/bitcoin/pull/5957#issuecomment-88378557,88378557,
sipa,2015-04-01T20:03:18Z,@fanquake Fixed.\n,https://github.com/bitcoin/bitcoin/pull/5957#issuecomment-88615107,88615107,
laanwj,2015-04-08T10:34:55Z,"This is obviously the right way to go, utACK\n\nEdit: tested ACK\n",https://github.com/bitcoin/bitcoin/pull/5957#issuecomment-90875097,90875097,
gavinandresen,2015-04-09T15:07:48Z,This makes -regtest block generation MUCH slower.\n\nBefore:\n`cd qa/rpc-tests; rm -rf cache; time mempool_resurrect_test.py`  --> 26 seconds.\n\nAfter: --> 2 minutes 10 seconds.\n,https://github.com/bitcoin/bitcoin/pull/5957#issuecomment-91257981,91257981,
laanwj,2015-04-10T06:32:36Z,"Apparently I merged this too soon, sorry.\n\n@sdaftuar noticed that this was giving problems with travis due to the slowdown @gavinandresen remarks on. I've thus reverted the changes to the mining code for now (but not the `generate` RPC call) in 48265f3.\n",https://github.com/bitcoin/bitcoin/pull/5957#issuecomment-91450447,91450447,
jtimon,2015-04-10T09:33:01Z,"Reopened #4793, which also does some code simplifications in miner.cpp.\nI haven't measured regtest performance but it shouldn't make it slower, in fact I expect to make it slightly faster apart from saving some logs produced by CheckProofOfWork (though not all of them yet).\n@gavinandresen  can you test it?\n",https://github.com/bitcoin/bitcoin/pull/5957#issuecomment-91493504,91493504,
dexX7,2015-04-11T11:36:23Z,"While it's sort of easy to mitigate, changing the API of Bitcoin Core (`setgenerate true n`) introduces the risk of breaking system that currently use that API. Imho, similar to the depreciation of accounting system, it would be more gentle, to provide some backwards compability and clearly tag `setgenerate (regtest)` as depreciated, for one version.\n",https://github.com/bitcoin/bitcoin/pull/5957#issuecomment-91830913,91830913,
sipa,2015-04-11T12:46:59Z,"@dexX7 I agree for any production usage of the RPC system, but this is\nregtest specific. Do you have any evidence of the regtest-specific\nsetgenerate being used elsewhere? If so, we can of course temporarily\nmaintain compatibility.\n",https://github.com/bitcoin/bitcoin/pull/5957#issuecomment-91837309,91837309,
dexX7,2015-04-11T13:11:50Z,"I see your point, and I don't have specific use-cases, but there are a few references to `setgenerate`, e.g. in the [Bitcoin developer guide](https://bitcoin.org/en/developer-examples#regtest-mode), the [Bitcoin wiki](https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list) or BitcoinJ's [""how to test applications""](https://bitcoinj.github.io/testing), which may serve as indicator.\n\nTh",https://github.com/bitcoin/bitcoin/pull/5957#issuecomment-91843681,91843681,
sipa,2015-04-11T13:24:32Z,Thanks for pointing that out. I was not  aware that the dev guide mentioned\nthis.\n,https://github.com/bitcoin/bitcoin/pull/5957#issuecomment-91844270,91844270,
msgilligan,2015-04-14T17:13:20Z,Here's the line in `BitcoinClient.java` in the OmniJ / bitcoin-spock project and something we are planning on contributing to bitcoinj to allow people to easily test their apps in RegTest mode:\n\nhttps://github.com/OmniLayer/OmniJ/blob/master/bitcoin-rpc/src/main/java/com/msgilligan/bitcoin/rpc/BitcoinClient.java#L195\n\nIf we are the only external use-case we can handle this change when it happe,https://github.com/bitcoin/bitcoin/pull/5957#issuecomment-92984718,92984718,
laanwj,2015-04-08T10:33:04Z,We should probably change this at some point too to not update the mapArgs. Throughout the program we assume that mapArgs is read-only after initialization. This kind of r/w access would need proper locking around everything. No change needed for this pull but I'm just reminded of it.\n,https://github.com/bitcoin/bitcoin/pull/5957#discussion_r27958516,27958516,src/rpcmining.cpp
jtimon,2015-04-08T16:19:29Z,Can't we directly return CheckProofOfWork() here instead of true and remove the later `UintToArith256(hash) <= hashTarget` check in ScanLoop() [which means you can also remove the uint256 *phash param in ScanHash()] ?\n,https://github.com/bitcoin/bitcoin/pull/5957#discussion_r27985935,27985935,src/miner.cpp
jtimon,2015-04-08T16:20:33Z,Isn't this included here https://github.com/bitcoin/bitcoin/pull/5957/files#diff-4a59b408ad3778278c3aeffa7da33c3cR383   ?\n,https://github.com/bitcoin/bitcoin/pull/5957#discussion_r27986007,27986007,src/miner.cpp
jtimon,2015-04-08T16:36:37Z,"Even without CheckProofOfWork, that check belongs inside ScanHash so you can save the hash parameter and the hash parameter and you can reuse the `arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);` instead of repeating the conversion every time `((uint16_t*)phash)[15] == 0`. At that point, I'm not sure it's worth it to remove the optimization but I'm still not opposed to removi",https://github.com/bitcoin/bitcoin/pull/5957#discussion_r27987670,27987670,src/miner.cpp
sipa,2015-04-08T18:09:36Z,This is about resetting the nonce if it's about to overflow. The other check is about occasionally interrupting the mining loop.\n,https://github.com/bitcoin/bitcoin/pull/5957#discussion_r27996629,27996629,src/miner.cpp
sipa,2015-04-08T18:12:42Z,"Yeah, just CheckProofOfWork would be fine, if we removed its error reporting (which imho we should in any case...), as now regtest mining beyond the first 2016 blocks prints 1000s of error messages to the log for each miner block as a result.\n",https://github.com/bitcoin/bitcoin/pull/5957#discussion_r27996954,27996954,src/miner.cpp
sipa,2015-04-08T18:23:34Z,Agree.\n,https://github.com/bitcoin/bitcoin/pull/5957#discussion_r27998129,27998129,src/rpcmining.cpp
jtimon,2015-04-08T21:05:27Z,Can you at least move the check in ScanLoop inside ScanHash for now?\n,https://github.com/bitcoin/bitcoin/pull/5957#discussion_r28013125,28013125,src/miner.cpp
jtimon,2015-04-08T21:50:13Z,"Sorry, you can prevent the overflow by replacing the middle while(true) loop [the one that first checks if ScanLoop()] with a for loop. Then you can remove this check (from the two places it appears in) and this access to CBlockHeader::nNonce is not required.\nBy the way, you're incrementing CBlockHeader::nNonce in ScanHash, but where are you resetting it to 0? \n",https://github.com/bitcoin/bitcoin/pull/5957#discussion_r28017344,28017344,src/miner.cpp
jtimon,2015-04-08T21:56:13Z,This can be moved inside ScanLoop to avoid code duplication.\n,https://github.com/bitcoin/bitcoin/pull/5957#discussion_r28017873,28017873,src/miner.cpp
sipa,2015-04-08T22:20:57Z,I'm not doing that as long as it produces this much debug output - that makes it effectively unusable for mining a >2016 long block chain. That error output should probably be discussed elsewhere.\n,https://github.com/bitcoin/bitcoin/pull/5957#discussion_r28019878,28019878,src/miner.cpp
sipa,2015-04-08T22:33:52Z,ack\n,https://github.com/bitcoin/bitcoin/pull/5957#discussion_r28020798,28020798,src/miner.cpp
sipa,2015-04-08T22:35:12Z,"The nonce is reset when a new block attempt is created by calling CreateNewBlockWithKey.\n\nI don't understand the rest of the comment, but I'll try to rework it a bit.\n",https://github.com/bitcoin/bitcoin/pull/5957#discussion_r28020880,28020880,src/miner.cpp
sipa,2015-04-08T22:36:40Z,"Wait, I misunderstood. Yes, that seems fine.\n",https://github.com/bitcoin/bitcoin/pull/5957#discussion_r28020978,28020978,src/miner.cpp
jtimon,2015-04-08T22:45:39Z,"Yes, as said in the other PR I plan to solve the warning problem soon as part of the consensus work for blockheader.\nAt that point that check can be directly replaced by CheckProofOfWork, I'm not proposing to do it now.\n",https://github.com/bitcoin/bitcoin/pull/5957#discussion_r28021545,28021545,src/miner.cpp
jtimon,2015-04-08T22:51:18Z,"I mean, it's just a nit and probably the more irrational one of the 3, I would just like to minimize the accesses to nBits and nNonce in the code so that the strictly-pow stuff doesn't take much to read.\nIf you don't make anything about this, thank you for the try.\n",https://github.com/bitcoin/bitcoin/pull/5957#discussion_r28021894,28021894,src/miner.cpp
