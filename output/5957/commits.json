[
  {
    "sha": "0df67f1f7ab4adfe9f0b3ba6276e737b37826464",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGY2N2YxZjdhYjRhZGZlOWYwYjNiYTYyNzZlNzM3YjM3ODI2NDY0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-04-01T02:15:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-04-01T17:25:51Z"
      },
      "message": "Simplify hash loop code",
      "tree": {
        "sha": "378af98b2dda4e0affddd33dbef90abe5bc53370",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/378af98b2dda4e0affddd33dbef90abe5bc53370"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0df67f1f7ab4adfe9f0b3ba6276e737b37826464",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df67f1f7ab4adfe9f0b3ba6276e737b37826464",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0df67f1f7ab4adfe9f0b3ba6276e737b37826464",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df67f1f7ab4adfe9f0b3ba6276e737b37826464/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "15facb4aca75122b6ae0dcc6f6e112127e6a0e59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15facb4aca75122b6ae0dcc6f6e112127e6a0e59",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/15facb4aca75122b6ae0dcc6f6e112127e6a0e59"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 9,
      "deletions": 21
    },
    "files": [
      {
        "sha": "44661fd13ef00fdc719a98cfe31db96344b132ec",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 21,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0df67f1f7ab4adfe9f0b3ba6276e737b37826464/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0df67f1f7ab4adfe9f0b3ba6276e737b37826464/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=0df67f1f7ab4adfe9f0b3ba6276e737b37826464",
        "patch": "@@ -365,33 +365,23 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n \n //\n // ScanHash scans nonces looking for a hash with at least some zero bits.\n-// The nonce is usually preserved between calls, but periodically or if the\n-// nonce is 0xffff0000 or above, the block is rebuilt and nNonce starts over at\n-// zero.\n+// The nonce is usually preserved between calls, but periodically the block is\n+// rebuilt and nNonce starts over at zero.\n //\n-bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phash)\n+bool static ScanHash(CBlockHeader *pblock, uint256 *phash)\n {\n-    // Write the first 76 bytes of the block header to a double-SHA256 state.\n-    CHash256 hasher;\n-    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n-    ss << *pblock;\n-    assert(ss.size() == 80);\n-    hasher.Write((unsigned char*)&ss[0], 76);\n-\n     while (true) {\n-        nNonce++;\n+        pblock->nNonce++;\n \n-        // Write the last 4 bytes of the block header (the nonce) to a copy of\n-        // the double-SHA256 state, and compute the result.\n-        CHash256(hasher).Write((unsigned char*)&nNonce, 4).Finalize((unsigned char*)phash);\n+        *phash = (CHashWriter(SER_GETHASH, 0) << *pblock).GetHash();\n \n         // Return the nonce if the hash has at least some zero bits,\n         // caller will check if it has enough to reach the target\n         if (((uint16_t*)phash)[15] == 0)\n             return true;\n \n-        // If nothing found after trying for a while, return -1\n-        if ((nNonce & 0xfff) == 0)\n+        // If nothing found after trying for a while, return false.\n+        if ((pblock->nNonce & 0xfff) == 0)\n             return false;\n     }\n }\n@@ -478,15 +468,13 @@ void static BitcoinMiner(CWallet *pwallet)\n             int64_t nStart = GetTime();\n             arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n             uint256 hash;\n-            uint32_t nNonce = 0;\n             while (true) {\n                 // Check if something found\n-                if (ScanHash(pblock, nNonce, &hash))\n+                if (ScanHash(pblock, &hash))\n                 {\n                     if (UintToArith256(hash) <= hashTarget)\n                     {\n                         // Found a solution\n-                        pblock->nNonce = nNonce;\n                         assert(hash == pblock->GetHash());\n \n                         SetThreadPriority(THREAD_PRIORITY_NORMAL);\n@@ -508,7 +496,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                 // Regtest mode doesn't require peers\n                 if (vNodes.empty() && Params().MiningRequiresPeers())\n                     break;\n-                if (nNonce >= 0xffff0000)\n+                if (pblock->nNonce >= 0xffff0000)\n                     break;\n                 if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 60)\n                     break;"
      }
    ]
  },
  {
    "sha": "6b04508e37c5dd18cec1cd61cc4356bd208aa991",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjA0NTA4ZTM3YzVkZDE4Y2VjMWNkNjFjYzQzNTZiZDIwOGFhOTkx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-04-01T03:28:28Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-04-01T18:47:10Z"
      },
      "message": "Introduce separate 'generate' RPC call",
      "tree": {
        "sha": "e3a5ac58ed8e891e55638af98db9b33257db57f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3a5ac58ed8e891e55638af98db9b33257db57f3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b04508e37c5dd18cec1cd61cc4356bd208aa991",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b04508e37c5dd18cec1cd61cc4356bd208aa991",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b04508e37c5dd18cec1cd61cc4356bd208aa991",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b04508e37c5dd18cec1cd61cc4356bd208aa991/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0df67f1f7ab4adfe9f0b3ba6276e737b37826464",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df67f1f7ab4adfe9f0b3ba6276e737b37826464",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0df67f1f7ab4adfe9f0b3ba6276e737b37826464"
      }
    ],
    "stats": {
      "total": 304,
      "additions": 162,
      "deletions": 142
    },
    "files": [
      {
        "sha": "2c43bba8652587efa37b744169fae3a6a8fd8b37",
        "filename": "qa/rpc-tests/bipdersig.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -29,22 +29,22 @@ def run_test(self):\n         cnt = self.nodes[0].getblockcount()\n \n         # Mine some old-version blocks\n-        self.nodes[1].setgenerate(True, 100)\n+        self.nodes[1].generate(100)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 100):\n             raise AssertionError(\"Failed to mine 100 version=2 blocks\")\n \n         # Mine 750 new-version blocks\n         for i in xrange(15):\n-            self.nodes[2].setgenerate(True, 50)\n+            self.nodes[2].generate(50)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 850):\n             raise AssertionError(\"Failed to mine 750 version=3 blocks\")\n \n         # TODO: check that new DERSIG rules are not enforced\n \n         # Mine 1 new-version block\n-        self.nodes[2].setgenerate(True, 1)\n+        self.nodes[2].generate(1)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 851):\n             raise AssertionFailure(\"Failed to mine a version=3 blocks\")\n@@ -53,26 +53,26 @@ def run_test(self):\n \n         # Mine 198 new-version blocks\n         for i in xrange(2):\n-            self.nodes[2].setgenerate(True, 99)\n+            self.nodes[2].generate(99)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 1049):\n             raise AssertionError(\"Failed to mine 198 version=3 blocks\")\n \n         # Mine 1 old-version block\n-        self.nodes[1].setgenerate(True, 1)\n+        self.nodes[1].generate(1)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 1050):\n             raise AssertionError(\"Failed to mine a version=2 block after 949 version=3 blocks\")\n \n         # Mine 1 new-version blocks\n-        self.nodes[2].setgenerate(True, 1)\n+        self.nodes[2].generate(1)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 1051):\n             raise AssertionError(\"Failed to mine a version=3 block\")\n \n         # Mine 1 old-version blocks\n         try:\n-            self.nodes[1].setgenerate(True, 1)\n+            self.nodes[1].generate(1)\n             raise AssertionError(\"Succeeded to mine a version=2 block after 950 version=3 blocks\")\n         except JSONRPCException:\n             pass\n@@ -81,7 +81,7 @@ def run_test(self):\n             raise AssertionError(\"Accepted a version=2 block after 950 version=3 blocks\")\n \n         # Mine 1 new-version blocks\n-        self.nodes[2].setgenerate(True, 1)\n+        self.nodes[2].generate(1)\n         self.sync_all()\n         if (self.nodes[0].getblockcount() != cnt + 1052):\n             raise AssertionError(\"Failed to mine a version=3 block\")"
      },
      {
        "sha": "3b6c8dc318cce48aabfa9d0fb71ca7a862b06053",
        "filename": "qa/rpc-tests/conflictedbalance.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/conflictedbalance.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/conflictedbalance.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/conflictedbalance.sh?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -84,11 +84,11 @@ WaitPeers \"$B1ARGS\" 1\n \n # 2 block, 50 XBT each == 100 XBT\n # These will be transactions \"A\" and \"B\"\n-$CLI $B1ARGS setgenerate true 2\n+$CLI $B1ARGS generate 2\n \n WaitBlocks\n # 100 blocks, 0 mature == 0 XBT\n-$CLI $B2ARGS setgenerate true 100\n+$CLI $B2ARGS generate 100\n WaitBlocks\n \n CheckBalance \"$B1ARGS\" 100\n@@ -130,7 +130,7 @@ WaitPeers \"$B1ARGS\" 1\n \n # Having B2 mine the next block puts the mutated\n # transaction C in the chain:\n-$CLI $B2ARGS setgenerate true 1\n+$CLI $B2ARGS generate 1\n WaitBlocks\n \n # B1 should still be able to spend 100, because D is conflicted"
      },
      {
        "sha": "af22ffb1a51b2e2f4fb81bffb75cffe077515abd",
        "filename": "qa/rpc-tests/forknotify.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/forknotify.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -34,12 +34,12 @@ def setup_network(self):\n \n     def run_test(self):\n         # Mine 51 up-version blocks\n-        self.nodes[1].setgenerate(True, 51)\n+        self.nodes[1].generate(51)\n         self.sync_all()\n         # -alertnotify should trigger on the 51'st,\n         # but mine and sync another to give\n         # -alertnotify time to write\n-        self.nodes[1].setgenerate(True, 1)\n+        self.nodes[1].generate(1)\n         self.sync_all()\n \n         with open(self.alert_filename, 'r') as f:\n@@ -49,9 +49,9 @@ def run_test(self):\n             raise AssertionError(\"-alertnotify did not warn of up-version blocks\")\n \n         # Mine more up-version blocks, should not get more alerts:\n-        self.nodes[1].setgenerate(True, 1)\n+        self.nodes[1].generate(1)\n         self.sync_all()\n-        self.nodes[1].setgenerate(True, 1)\n+        self.nodes[1].generate(1)\n         self.sync_all()\n \n         with open(self.alert_filename, 'r') as f:"
      },
      {
        "sha": "64fe49b8359b560ad81006c3011a49640eeaabfc",
        "filename": "qa/rpc-tests/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_longpoll.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -51,7 +51,7 @@ class GetBlockTemplateLPTest(BitcoinTestFramework):\n \n     def run_test(self):\n         print \"Warning: this test will take about 70 seconds in the best case. Be patient.\"\n-        self.nodes[0].setgenerate(True, 10)\n+        self.nodes[0].generate(10)\n         templat = self.nodes[0].getblocktemplate()\n         longpollid = templat['longpollid']\n         # longpollid should not change between successive invocations if nothing else happens\n@@ -66,15 +66,15 @@ def run_test(self):\n         assert(thr.is_alive())\n \n         # Test 2: test that longpoll will terminate if another node generates a block\n-        self.nodes[1].setgenerate(True, 1)  # generate a block on another node\n+        self.nodes[1].generate(1)  # generate a block on another node\n         # check that thread will exit now that new transaction entered mempool\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert(not thr.is_alive())\n \n         # Test 3: test that longpoll will terminate if we generate a block ourselves\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n-        self.nodes[0].setgenerate(True, 1)  # generate a block on another node\n+        self.nodes[0].generate(1)  # generate a block on another node\n         thr.join(5)  # wait 5 seconds or until thread exits\n         assert(not thr.is_alive())\n "
      },
      {
        "sha": "a63f456d6bf465d4a6e1e5db0beaa5c526babbbd",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -95,7 +95,7 @@ class GetBlockTemplateProposalTest(BitcoinTestFramework):\n \n     def run_test(self):\n         node = self.nodes[0]\n-        node.setgenerate(True, 1) # Mine a block to leave initial block download\n+        node.generate(1) # Mine a block to leave initial block download\n         tmpl = node.getblocktemplate()\n         if 'coinbasetxn' not in tmpl:\n             rawcoinbase = encodeUNum(tmpl['height'])"
      },
      {
        "sha": "83a95372852f777955126ce4901dbd9f7adc8850",
        "filename": "qa/rpc-tests/getchaintips.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getchaintips.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -23,8 +23,8 @@ def run_test (self):\n \n         # Split the network and build two chains of different lengths.\n         self.split_network ()\n-        self.nodes[0].setgenerate (True, 10);\n-        self.nodes[2].setgenerate (True, 20);\n+        self.nodes[0].generate(10);\n+        self.nodes[2].generate(20);\n         self.sync_all ()\n \n         tips = self.nodes[1].getchaintips ()"
      },
      {
        "sha": "fd8a8e578567409f9ac6bed376c97ff61b03e66e",
        "filename": "qa/rpc-tests/invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidateblock.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -28,12 +28,12 @@ def setup_network(self):\n     def run_test(self):\n         print \"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\"\n         print \"Mine 4 blocks on Node 0\"\n-        self.nodes[0].setgenerate(True, 4)\n+        self.nodes[0].generate(4)\n         assert(self.nodes[0].getblockcount() == 4)\n         besthash = self.nodes[0].getbestblockhash()\n \n         print \"Mine competing 6 blocks on Node 1\"\n-        self.nodes[1].setgenerate(True, 6)\n+        self.nodes[1].generate(6)\n         assert(self.nodes[1].getblockcount() == 6)\n \n         print \"Connect nodes to force a reorg\"\n@@ -61,7 +61,7 @@ def run_test(self):\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n         assert(self.nodes[2].getblockcount() == 2)\n         print \"..and then mine a block\"\n-        self.nodes[2].setgenerate(True, 1)\n+        self.nodes[2].generate(1)\n         print \"Verify all nodes are at the right height\"\n         time.sleep(5)\n         for i in xrange(3):"
      },
      {
        "sha": "11e3635c0437f99ce8a4090867e353c0f70bc2d2",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -44,7 +44,7 @@ def run_test(self):\n                            {\"txid\":txid},\n                            {\"category\":\"receive\",\"account\":\"\",\"amount\":Decimal(\"0.1\"),\"confirmations\":0})\n         # mine a block, confirmations should change:\n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n         self.sync_all()\n         check_array_result(self.nodes[0].listtransactions(),\n                            {\"txid\":txid},"
      },
      {
        "sha": "853d031de4aa2dd1e6fe321ea3917cd7c9233b9a",
        "filename": "qa/rpc-tests/mempool_coinbase_spends.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/mempool_coinbase_spends.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/mempool_coinbase_spends.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_coinbase_spends.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -41,7 +41,7 @@ def run_test(self):\n \n         # Mine three blocks. After this, nodes[0] blocks\n         # 101, 102, and 103 are spend-able.\n-        new_blocks = self.nodes[1].setgenerate(True, 4)\n+        new_blocks = self.nodes[1].generate(4)\n         self.sync_all()\n \n         node0_address = self.nodes[0].getnewaddress()\n@@ -62,15 +62,15 @@ def run_test(self):\n         # Broadcast and mine spend_102 and 103:\n         spend_102_id = self.nodes[0].sendrawtransaction(spend_102_raw)\n         spend_103_id = self.nodes[0].sendrawtransaction(spend_103_raw)\n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n \n         # Create 102_1 and 103_1:\n         spend_102_1_raw = self.create_tx(spend_102_id, node1_address, 50)\n         spend_103_1_raw = self.create_tx(spend_103_id, node1_address, 50)\n \n         # Broadcast and mine 103_1:\n         spend_103_1_id = self.nodes[0].sendrawtransaction(spend_103_1_raw)\n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n \n         # ... now put spend_101 and spend_102_1 in memory pools:\n         spend_101_id = self.nodes[0].sendrawtransaction(spend_101_raw)"
      },
      {
        "sha": "6f7f577e36cfe50f1e1ed461f6f8a2fc4f900f51",
        "filename": "qa/rpc-tests/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_resurrect_test.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -51,12 +51,12 @@ def run_test(self):\n         spends1_id = [ self.nodes[0].sendrawtransaction(tx) for tx in spends1_raw ]\n \n         blocks = []\n-        blocks.extend(self.nodes[0].setgenerate(True, 1))\n+        blocks.extend(self.nodes[0].generate(1))\n \n         spends2_raw = [ self.create_tx(txid, node0_address, 49.99) for txid in spends1_id ]\n         spends2_id = [ self.nodes[0].sendrawtransaction(tx) for tx in spends2_raw ]\n \n-        blocks.extend(self.nodes[0].setgenerate(True, 1))\n+        blocks.extend(self.nodes[0].generate(1))\n \n         # mempool should be empty, all txns confirmed\n         assert_equal(set(self.nodes[0].getrawmempool()), set())\n@@ -76,7 +76,7 @@ def run_test(self):\n             assert(tx[\"confirmations\"] == 0)\n \n         # Generate another block, they should all get mined\n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n         # mempool should be empty, all txns confirmed\n         assert_equal(set(self.nodes[0].getrawmempool()), set())\n         for txid in spends1_id+spends2_id:"
      },
      {
        "sha": "ab5817c869a647c5d11fbf019681f350ee71320e",
        "filename": "qa/rpc-tests/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_spendcoinbase.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -58,7 +58,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawmempool(), [ spend_101_id ])\n \n         # mine a block, spend_101 should get confirmed\n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n         assert_equal(set(self.nodes[0].getrawmempool()), set())\n \n         # ... and now height 102 can be spent:"
      },
      {
        "sha": "1a681e1aaeee79cdb65ca50327413cdb446ba261",
        "filename": "qa/rpc-tests/receivedby.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/receivedby.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -69,7 +69,7 @@ def run_test(self):\n                            { },\n                            True)\n         #Bury Tx under 10 block so it will be returned by listreceivedbyaddress\n-        self.nodes[1].setgenerate(True, 10)\n+        self.nodes[1].generate(10)\n         self.sync_all()\n         check_array_result(self.nodes[1].listreceivedbyaddress(),\n                            {\"address\":addr},\n@@ -106,7 +106,7 @@ def run_test(self):\n             raise AssertionError(\"Wrong balance returned by getreceivedbyaddress, %0.2f\"%(balance))\n \n         #Bury Tx under 10 block so it will be returned by the default getreceivedbyaddress\n-        self.nodes[1].setgenerate(True, 10)\n+        self.nodes[1].generate(10)\n         self.sync_all()\n         balance = self.nodes[1].getreceivedbyaddress(addr)\n         if balance != Decimal(\"0.1\"):\n@@ -136,7 +136,7 @@ def run_test(self):\n         if balance != balance_by_account:\n             raise AssertionError(\"Wrong balance returned by getreceivedbyaccount, %0.2f\"%(balance))\n \n-        self.nodes[1].setgenerate(True, 10)\n+        self.nodes[1].generate(10)\n         self.sync_all()\n         # listreceivedbyaccount should return updated account balance\n         check_array_result(self.nodes[1].listreceivedbyaccount(),"
      },
      {
        "sha": "9b7008531cbe8d366763202adb91b3373c6a1bf7",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -90,7 +90,7 @@ def run_test(self):\n         self.sync_all()\n \n         # now mine the transactions\n-        newblockhash = self.nodes[1].setgenerate(True, 1)\n+        newblockhash = self.nodes[1].generate(1)\n         self.sync_all()\n \n         #check if the 3 tx show up in the new block"
      },
      {
        "sha": "4eb8bb4842d5a21e0429c9ff26a9b0c96144cec1",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -51,7 +51,7 @@ def run_test(self):\n         # Mine blocks with node2 until the memory pool clears:\n         count_start = self.nodes[2].getblockcount()\n         while len(self.nodes[2].getrawmempool()) > 0:\n-            self.nodes[2].setgenerate(True, 1)\n+            self.nodes[2].generate(1)\n             self.sync_all()\n \n         all_estimates = [ self.nodes[0].estimatefee(i) for i in range(1,20) ]\n@@ -70,7 +70,7 @@ def run_test(self):\n                                                         Decimal(\"0.0\"), min_fee, 20)\n                 tx_kbytes = (len(txhex)/2)/1000.0\n                 fees_per_kb.append(float(fee)/tx_kbytes)\n-            self.nodes[1].setgenerate(True, 1)\n+            self.nodes[1].generate(1)\n             self.sync_all()\n \n         all_estimates = [ self.nodes[0].estimatefee(i) for i in range(1,20) ]\n@@ -81,7 +81,7 @@ def run_test(self):\n \n         # Finish by mining a normal-sized block:\n         while len(self.nodes[0].getrawmempool()) > 0:\n-            self.nodes[0].setgenerate(True, 1)\n+            self.nodes[0].generate(1)\n             self.sync_all()\n \n         final_estimates = [ self.nodes[0].estimatefee(i) for i in range(1,20) ]"
      },
      {
        "sha": "fe9168944bc6c329f98a393d324863de72035b25",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -58,7 +58,7 @@ def run_test(self):\n         \n         # Have node0 mine a block:\n         if (self.options.mine_block):\n-            self.nodes[0].setgenerate(True, 1)\n+            self.nodes[0].generate(1)\n             sync_blocks(self.nodes[0:2])\n \n         tx1 = self.nodes[0].gettransaction(txid1)\n@@ -88,11 +88,11 @@ def run_test(self):\n         # Now give doublespend to miner:\n         mutated_txid = self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n         # ... mine a block...\n-        self.nodes[2].setgenerate(True, 1)\n+        self.nodes[2].generate(1)\n \n         # Reconnect the split network, and sync chain:\n         connect_nodes(self.nodes[1], 2)\n-        self.nodes[2].setgenerate(True, 1)  # Mine another block to make sure we sync\n+        self.nodes[2].generate(1)  # Mine another block to make sure we sync\n         sync_blocks(self.nodes)\n \n         # Re-fetch transaction info:"
      },
      {
        "sha": "9ecee31959a02dc39beed4d1cac7eb125a63ac79",
        "filename": "qa/rpc-tests/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -109,7 +109,7 @@ def initialize_chain(test_dir):\n             for peer in range(4):\n                 for j in range(25):\n                     set_node_times(rpcs, block_time)\n-                    rpcs[peer].setgenerate(True, 1)\n+                    rpcs[peer].generate(1)\n                     block_time += 10*60\n                 # Must sync before next peer starts generating blocks\n                 sync_blocks(rpcs)"
      },
      {
        "sha": "7616625b8a82a4e87bc1cfe557691c33a83319e0",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -40,14 +40,14 @@ def setup_network(self, split=False):\n     def run_test (self):\n         print \"Mining blocks...\"\n \n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n \n         walletinfo = self.nodes[0].getwalletinfo()\n         assert_equal(walletinfo['immature_balance'], 50)\n         assert_equal(walletinfo['balance'], 0)\n \n         self.sync_all()\n-        self.nodes[1].setgenerate(True, 101)\n+        self.nodes[1].generate(101)\n         self.sync_all()\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n@@ -63,11 +63,11 @@ def run_test (self):\n         assert_equal(walletinfo['immature_balance'], 0)\n \n         # Have node0 mine a block, thus they will collect their own fee. \n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n         self.sync_all()\n \n         # Have node1 generate 100 blocks (so node0 can recover the fee)\n-        self.nodes[1].setgenerate(True, 100)\n+        self.nodes[1].generate(100)\n         self.sync_all()\n \n         # node0 should end up with 100 btc in block rewards plus fees, but\n@@ -96,7 +96,7 @@ def run_test (self):\n         self.nodes[1].sendrawtransaction(txns_to_send[1][\"hex\"], True)\n \n         # Have node1 mine a block to confirm transactions:\n-        self.nodes[1].setgenerate(True, 1)\n+        self.nodes[1].generate(1)\n         self.sync_all()\n \n         assert_equal(self.nodes[0].getbalance(), 0)\n@@ -107,28 +107,28 @@ def run_test (self):\n         address = self.nodes[0].getnewaddress(\"test\")\n         self.nodes[2].settxfee(Decimal('0.001'))\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n-        self.nodes[2].setgenerate(True, 1)\n+        self.nodes[2].generate(1)\n         self.sync_all()\n         assert_equal(self.nodes[2].getbalance(), Decimal('89.99900000'))\n         assert_equal(self.nodes[0].getbalance(), Decimal('10.00000000'))\n \n         # Send 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n-        self.nodes[2].setgenerate(True, 1)\n+        self.nodes[2].generate(1)\n         self.sync_all()\n         assert_equal(self.nodes[2].getbalance(), Decimal('79.99900000'))\n         assert_equal(self.nodes[0].getbalance(), Decimal('19.99900000'))\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [])\n-        self.nodes[2].setgenerate(True, 1)\n+        self.nodes[2].generate(1)\n         self.sync_all()\n         assert_equal(self.nodes[2].getbalance(), Decimal('69.99800000'))\n         assert_equal(self.nodes[0].getbalance(), Decimal('29.99900000'))\n \n         # Sendmany 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [address])\n-        self.nodes[2].setgenerate(True, 1)\n+        self.nodes[2].generate(1)\n         self.sync_all()\n         assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000'))\n         assert_equal(self.nodes[0].getbalance(), Decimal('39.99800000'))"
      },
      {
        "sha": "b9fc8622341cc7b65623339ad89c36c5942d1718",
        "filename": "qa/rpc-tests/walletbackup.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/walletbackup.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -77,7 +77,7 @@ def do_one_round(self):\n         # Have the miner (node3) mine a block.\n         # Must sync mempools before mining.\n         sync_mempools(self.nodes)\n-        self.nodes[3].setgenerate(True, 1)\n+        self.nodes[3].generate(1)\n \n     # As above, this mirrors the original bash test.\n     def start_three(self):\n@@ -101,13 +101,13 @@ def erase_three(self):\n \n     def run_test(self):\n         logging.info(\"Generating initial blockchain\")\n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n-        self.nodes[1].setgenerate(True, 1)\n+        self.nodes[1].generate(1)\n         sync_blocks(self.nodes)\n-        self.nodes[2].setgenerate(True, 1)\n+        self.nodes[2].generate(1)\n         sync_blocks(self.nodes)\n-        self.nodes[3].setgenerate(True, 100)\n+        self.nodes[3].generate(100)\n         sync_blocks(self.nodes)\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n@@ -134,7 +134,7 @@ def run_test(self):\n             self.do_one_round()\n \n         # Generate 101 more blocks, so any fees paid mature\n-        self.nodes[3].setgenerate(True, 101)\n+        self.nodes[3].generate(101)\n         self.sync_all()\n \n         balance0 = self.nodes[0].getbalance()"
      },
      {
        "sha": "045614e94c3ff5b8213a99ce4f250907f863fe5b",
        "filename": "qa/rpc-tests/zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/qa/rpc-tests/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zapwallettxes.py?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -23,17 +23,17 @@ def setup_network(self, split=False):\n \n     def run_test (self):\n         print \"Mining blocks...\"\n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n         self.sync_all()\n-        self.nodes[1].setgenerate(True, 101)\n+        self.nodes[1].generate(101)\n         self.sync_all()\n         \n         assert_equal(self.nodes[0].getbalance(), 50)\n         \n         txid0 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)\n         txid1 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 10)\n         self.sync_all()\n-        self.nodes[0].setgenerate(True, 1)\n+        self.nodes[0].generate(1)\n         self.sync_all()\n         \n         txid2 = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 11)"
      },
      {
        "sha": "fdbc47a1c32b1498e02c1d0e29c2db88939f720c",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 32,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -372,8 +372,7 @@ bool static ScanHash(CBlockHeader *pblock, uint256 *phash)\n {\n     while (true) {\n         pblock->nNonce++;\n-\n-        *phash = (CHashWriter(SER_GETHASH, 0) << *pblock).GetHash();\n+        *phash = pblock->GetHash();\n \n         // Return the nonce if the hash has at least some zero bits,\n         // caller will check if it has enough to reach the target\n@@ -425,6 +424,56 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n     return true;\n }\n \n+bool static ScanLoop(CBlock *pblock, CBlockIndex *pindexPrev, CWallet *pwallet, CReserveKey& reservekey)\n+{\n+    UpdateTime(pblock, pindexPrev);\n+    arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n+\n+    uint256 hash;\n+    if (ScanHash(pblock, &hash)) {\n+        if (UintToArith256(hash) <= hashTarget) {\n+            // Found a solution\n+            SetThreadPriority(THREAD_PRIORITY_NORMAL);\n+            LogPrintf(\"BitcoinMiner:\\n\");\n+            LogPrintf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n+            ProcessBlockFound(pblock, *pwallet, reservekey);\n+            SetThreadPriority(THREAD_PRIORITY_LOWEST);\n+\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+bool MineBlock(CWallet *pwallet, uint256& hash)\n+{\n+    CReserveKey reservekey(pwallet);\n+    unsigned int nExtraNonce = 0;\n+\n+    while (true) {\n+        CBlockIndex *pindexPrev = chainActive.Tip(); // Actually needs cs_main...\n+\n+        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n+        if (!pblocktemplate.get()) {\n+            return false;\n+        }\n+\n+        CBlock *pblock = &pblocktemplate->block;\n+        IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n+\n+        while (true) {\n+            if (ScanLoop(pblock, pindexPrev, pwallet, reservekey)) {\n+                hash = pblock->GetHash();\n+                return true;\n+            }\n+            boost::this_thread::interruption_point();\n+            if (pblock->nNonce >= 0xffff0000)\n+                break;\n+        }\n+    }\n+}\n+\n void static BitcoinMiner(CWallet *pwallet)\n {\n     LogPrintf(\"BitcoinMiner started\\n\");\n@@ -448,7 +497,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             // Create new block\n             //\n             unsigned int nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n-            CBlockIndex* pindexPrev = chainActive.Tip();\n+            CBlockIndex* pindexPrev = chainActive.Tip(); // Actually needs cs_main...\n \n             auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n             if (!pblocktemplate.get())\n@@ -466,30 +515,10 @@ void static BitcoinMiner(CWallet *pwallet)\n             // Search\n             //\n             int64_t nStart = GetTime();\n-            arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n-            uint256 hash;\n             while (true) {\n                 // Check if something found\n-                if (ScanHash(pblock, &hash))\n-                {\n-                    if (UintToArith256(hash) <= hashTarget)\n-                    {\n-                        // Found a solution\n-                        assert(hash == pblock->GetHash());\n-\n-                        SetThreadPriority(THREAD_PRIORITY_NORMAL);\n-                        LogPrintf(\"BitcoinMiner:\\n\");\n-                        LogPrintf(\"proof-of-work found  \\n  hash: %s  \\ntarget: %s\\n\", hash.GetHex(), hashTarget.GetHex());\n-                        ProcessBlockFound(pblock, *pwallet, reservekey);\n-                        SetThreadPriority(THREAD_PRIORITY_LOWEST);\n-\n-                        // In regression test mode, stop mining after a block is found.\n-                        if (Params().MineBlocksOnDemand())\n-                            throw boost::thread_interrupted();\n-\n-                        break;\n-                    }\n-                }\n+                if (ScanLoop(pblock, pindexPrev, pwallet, reservekey))\n+                    break;\n \n                 // Check for stop or if block needs to be rebuilt\n                 boost::this_thread::interruption_point();\n@@ -503,13 +532,6 @@ void static BitcoinMiner(CWallet *pwallet)\n                 if (pindexPrev != chainActive.Tip())\n                     break;\n \n-                // Update nTime every few seconds\n-                UpdateTime(pblock, pindexPrev);\n-                if (Params().AllowMinDifficultyBlocks())\n-                {\n-                    // Changing pblock->nTime can change work required on testnet:\n-                    hashTarget.SetCompact(pblock->nBits);\n-                }\n             }\n         }\n     }"
      },
      {
        "sha": "549658ec171a2ecb2e66f7050fc0cdc9b8ecaa47",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -24,6 +24,8 @@ struct CBlockTemplate\n \n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads);\n+/** Create a single block */\n+bool MineBlock(CWallet *pwallet, uint256& hash);\n /** Generate a new block, without valid proof-of-work */\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);"
      },
      {
        "sha": "428e1049dc19b10359b2b7b488630867276ce577",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -29,6 +29,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getaddednodeinfo\", 0 },\n     { \"setgenerate\", 0 },\n     { \"setgenerate\", 1 },\n+    { \"generate\", 0 },\n     { \"getnetworkhashps\", 0 },\n     { \"getnetworkhashps\", 1 },\n     { \"sendtoaddress\", 1 },"
      },
      {
        "sha": "49c5c3ca5831fda9370833de701a12aff7ecaf41",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 49,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -113,6 +113,45 @@ Value getgenerate(const Array& params, bool fHelp)\n     return GetBoolArg(\"-gen\", false);\n }\n \n+Value generate(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 1)\n+        throw runtime_error(\n+            \"generate numblocks\\n\"\n+            \"\\nMine blocks immediately (before the RPC call returns)\\n\"\n+            \"1. numblocks    (numeric) How many blocks are generated immediately.\\n\"\n+            \"\\nResult\\n\"\n+            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nGenerate 11 blocks\\n\"\n+            + HelpExampleCli(\"generate\", \"11\")\n+        );\n+\n+    if (pwalletMain == NULL)\n+        throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n+\n+    int nHeightStart = 0;\n+    int nHeightEnd = 0;\n+    int nHeight = 0;\n+    int nGenerate = params[0].get_int();\n+\n+    {   // Don't keep cs_main locked\n+        LOCK(cs_main);\n+        nHeightStart = chainActive.Height();\n+        nHeight = nHeightStart;\n+        nHeightEnd = nHeightStart+nGenerate;\n+    }\n+    Array blockHashes;\n+    while (nHeight < nHeightEnd) {\n+        uint256 hash;\n+        if (!MineBlock(pwalletMain, hash))\n+            throw JSONRPCError(RPC_INTERNAL_ERROR, \"Wallet keypool empty\");\n+\n+        ++nHeight;\n+        blockHashes.push_back(hash.GetHex());\n+    }\n+    return blockHashes;\n+}\n \n Value setgenerate(const Array& params, bool fHelp)\n {\n@@ -125,9 +164,6 @@ Value setgenerate(const Array& params, bool fHelp)\n             \"\\nArguments:\\n\"\n             \"1. generate         (boolean, required) Set to true to turn on generation, off to turn off.\\n\"\n             \"2. genproclimit     (numeric, optional) Set the processor limit for when generation is on. Can be -1 for unlimited.\\n\"\n-            \"                    Note: in -regtest mode, genproclimit controls how many blocks are generated immediately.\\n\"\n-            \"\\nResult\\n\"\n-            \"[ blockhashes ]     (array, -regtest only) hashes of blocks generated\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nSet the generation on with a limit of one processor\\n\"\n             + HelpExampleCli(\"setgenerate\", \"true 1\") +\n@@ -154,52 +190,9 @@ Value setgenerate(const Array& params, bool fHelp)\n             fGenerate = false;\n     }\n \n-    // -regtest mode: don't return until nGenProcLimit blocks are generated\n-    if (fGenerate && Params().MineBlocksOnDemand())\n-    {\n-        int nHeightStart = 0;\n-        int nHeightEnd = 0;\n-        int nHeight = 0;\n-        int nGenerate = (nGenProcLimit > 0 ? nGenProcLimit : 1);\n-        CReserveKey reservekey(pwalletMain);\n-\n-        {   // Don't keep cs_main locked\n-            LOCK(cs_main);\n-            nHeightStart = chainActive.Height();\n-            nHeight = nHeightStart;\n-            nHeightEnd = nHeightStart+nGenerate;\n-        }\n-        unsigned int nExtraNonce = 0;\n-        Array blockHashes;\n-        while (nHeight < nHeightEnd)\n-        {\n-            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n-            if (!pblocktemplate.get())\n-                throw JSONRPCError(RPC_INTERNAL_ERROR, \"Wallet keypool empty\");\n-            CBlock *pblock = &pblocktemplate->block;\n-            {\n-                LOCK(cs_main);\n-                IncrementExtraNonce(pblock, chainActive.Tip(), nExtraNonce);\n-            }\n-            while (!CheckProofOfWork(pblock->GetHash(), pblock->nBits, Params().GetConsensus())) {\n-                // Yes, there is a chance every nonce could fail to satisfy the -regtest\n-                // target -- 1 in 2^(2^32). That ain't gonna happen.\n-                ++pblock->nNonce;\n-            }\n-            CValidationState state;\n-            if (!ProcessNewBlock(state, NULL, pblock))\n-                throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n-            ++nHeight;\n-            blockHashes.push_back(pblock->GetHash().GetHex());\n-        }\n-        return blockHashes;\n-    }\n-    else // Not -regtest: start generate thread, return immediately\n-    {\n-        mapArgs[\"-gen\"] = (fGenerate ? \"1\" : \"0\");\n-        mapArgs [\"-genproclimit\"] = itostr(nGenProcLimit);\n-        GenerateBitcoins(fGenerate, pwalletMain, nGenProcLimit);\n-    }\n+    mapArgs[\"-gen\"] = (fGenerate ? \"1\" : \"0\");\n+    mapArgs [\"-genproclimit\"] = itostr(nGenProcLimit);\n+    GenerateBitcoins(fGenerate, pwalletMain, nGenProcLimit);\n \n     return Value::null;\n }"
      },
      {
        "sha": "0fd7769a199f0fb167444c2f60f3aaee375df410",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -312,6 +312,7 @@ static const CRPCCommand vRPCCommands[] =\n     /* Coin generation */\n     { \"generating\",         \"getgenerate\",            &getgenerate,            true,      false },\n     { \"generating\",         \"setgenerate\",            &setgenerate,            true,      false },\n+    { \"generating\",         \"generate\",               &generate,               true,      false },\n #endif\n \n     /* Raw transactions */"
      },
      {
        "sha": "e7aaed8bdffa0c6f79b418f61b0f4c8dbceb7497",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b04508e37c5dd18cec1cd61cc4356bd208aa991/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b04508e37c5dd18cec1cd61cc4356bd208aa991/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "patch": "@@ -162,6 +162,7 @@ extern json_spirit::Value importwallet(const json_spirit::Array& params, bool fH\n \n extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value generate(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getnetworkhashps(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getmininginfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value prioritisetransaction(const json_spirit::Array& params, bool fHelp);"
      }
    ]
  },
  {
    "sha": "e2edf95cd3f43331843676e49a82830128a95050",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmVkZjk1Y2QzZjQzMzMxODQzNjc2ZTQ5YTgyODMwMTI4YTk1MDUw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-04-01T03:35:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2015-04-01T18:47:10Z"
      },
      "message": "Bugfix: make CreateNewBlock return pindexPrev",
      "tree": {
        "sha": "45a1f675182b1570704d14b1a7d8125fb5b3b8b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45a1f675182b1570704d14b1a7d8125fb5b3b8b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2edf95cd3f43331843676e49a82830128a95050",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2edf95cd3f43331843676e49a82830128a95050",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2edf95cd3f43331843676e49a82830128a95050",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2edf95cd3f43331843676e49a82830128a95050/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b04508e37c5dd18cec1cd61cc4356bd208aa991",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b04508e37c5dd18cec1cd61cc4356bd208aa991"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 26,
      "deletions": 25
    },
    "files": [
      {
        "sha": "7f01918eeff138ce7e72a59df3b7b3265ca85c8e",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2edf95cd3f43331843676e49a82830128a95050/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2edf95cd3f43331843676e49a82830128a95050/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=e2edf95cd3f43331843676e49a82830128a95050",
        "patch": "@@ -87,7 +87,7 @@ void UpdateTime(CBlockHeader* pblock, const CBlockIndex* pindexPrev)\n         pblock->nBits = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n }\n \n-CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n+CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn, CBlockIndex*& pindexPrev)\n {\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n@@ -132,7 +132,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n     {\n         LOCK2(cs_main, mempool.cs);\n-        CBlockIndex* pindexPrev = chainActive.Tip();\n+        pindexPrev = chainActive.Tip();\n         const int nHeight = pindexPrev->nHeight + 1;\n         CCoinsViewCache view(pcoinsTip);\n \n@@ -385,14 +385,14 @@ bool static ScanHash(CBlockHeader *pblock, uint256 *phash)\n     }\n }\n \n-CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey)\n+CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey, CBlockIndex*& pindexPrev)\n {\n     CPubKey pubkey;\n     if (!reservekey.GetReservedKey(pubkey))\n         return NULL;\n \n     CScript scriptPubKey = CScript() << ToByteVector(pubkey) << OP_CHECKSIG;\n-    return CreateNewBlock(scriptPubKey);\n+    return CreateNewBlock(scriptPubKey, pindexPrev);\n }\n \n static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n@@ -452,9 +452,9 @@ bool MineBlock(CWallet *pwallet, uint256& hash)\n     unsigned int nExtraNonce = 0;\n \n     while (true) {\n-        CBlockIndex *pindexPrev = chainActive.Tip(); // Actually needs cs_main...\n+        CBlockIndex *pindexPrev;\n \n-        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n+        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey, pindexPrev));\n         if (!pblocktemplate.get()) {\n             return false;\n         }\n@@ -497,9 +497,9 @@ void static BitcoinMiner(CWallet *pwallet)\n             // Create new block\n             //\n             unsigned int nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n-            CBlockIndex* pindexPrev = chainActive.Tip(); // Actually needs cs_main...\n+            CBlockIndex* pindexPrev;\n \n-            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n+            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey, pindexPrev));\n             if (!pblocktemplate.get())\n             {\n                 LogPrintf(\"Error in BitcoinMiner: Keypool ran out, please call keypoolrefill before restarting the mining thread\\n\");"
      },
      {
        "sha": "00ad299512f269882186f9c463a447eefeae6e34",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2edf95cd3f43331843676e49a82830128a95050/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2edf95cd3f43331843676e49a82830128a95050/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=e2edf95cd3f43331843676e49a82830128a95050",
        "patch": "@@ -27,8 +27,8 @@ void GenerateBitcoins(bool fGenerate, CWallet* pwallet, int nThreads);\n /** Create a single block */\n bool MineBlock(CWallet *pwallet, uint256& hash);\n /** Generate a new block, without valid proof-of-work */\n-CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n-CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);\n+CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn, CBlockIndex*& pindexPrev);\n+CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey, CBlockIndex*& pindexPrev);\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n void UpdateTime(CBlockHeader* block, const CBlockIndex* pindexPrev);"
      },
      {
        "sha": "6f165028d5efc69a3251de1941bfa2c776439ec5",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2edf95cd3f43331843676e49a82830128a95050/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2edf95cd3f43331843676e49a82830128a95050/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=e2edf95cd3f43331843676e49a82830128a95050",
        "patch": "@@ -475,7 +475,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n \n         // Store the pindexBest used before CreateNewBlock, to avoid races\n         nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n-        CBlockIndex* pindexPrevNew = chainActive.Tip();\n+        CBlockIndex* pindexPrevNew;\n         nStart = GetTime();\n \n         // Create new block\n@@ -485,7 +485,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n             pblocktemplate = NULL;\n         }\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = CreateNewBlock(scriptDummy);\n+        pblocktemplate = CreateNewBlock(scriptDummy, pindexPrevNew);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n "
      },
      {
        "sha": "27c0a08de9d8cacc508943548901cdf8a14367c4",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2edf95cd3f43331843676e49a82830128a95050/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2edf95cd3f43331843676e49a82830128a95050/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=e2edf95cd3f43331843676e49a82830128a95050",
        "patch": "@@ -62,7 +62,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     Checkpoints::fEnabled = false;\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    CBlockIndex* pindexPrev;\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey, pindexPrev));\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n@@ -90,7 +91,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     delete pblocktemplate;\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey, pindexPrev));\n     delete pblocktemplate;\n \n     // block sigops > limit: 1000 CHECKMULTISIG + 1\n@@ -108,7 +109,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey, pindexPrev));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -128,14 +129,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey, pindexPrev));\n     delete pblocktemplate;\n     mempool.clear();\n \n     // orphan in mempool\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey, pindexPrev));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -153,7 +154,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey, pindexPrev));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -164,7 +165,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey, pindexPrev));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -182,7 +183,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey, pindexPrev));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -196,17 +197,17 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey, pindexPrev));\n     delete pblocktemplate;\n     mempool.clear();\n \n     // subsidy changing\n     int nHeight = chainActive.Height();\n     chainActive.Tip()->nHeight = 209999;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey, pindexPrev));\n     delete pblocktemplate;\n     chainActive.Tip()->nHeight = 210000;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey, pindexPrev));\n     delete pblocktemplate;\n     chainActive.Tip()->nHeight = nHeight;\n \n@@ -238,7 +239,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(!IsFinalTx(tx2));\n \n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey, pindexPrev));\n \n     // Neither tx should have make it into the template.\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n@@ -251,7 +252,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 1));\n     BOOST_CHECK(IsFinalTx(tx2));\n \n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey, pindexPrev));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n     delete pblocktemplate;\n "
      }
    ]
  }
]