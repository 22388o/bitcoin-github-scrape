[
  {
    "sha": "0530ba0eae147563921b162ed05347234d8b53c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTMwYmEwZWFlMTQ3NTYzOTIxYjE2MmVkMDUzNDcyMzRkOGI1M2Mw",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-10-08T20:48:07Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-17T11:50:58Z"
      },
      "message": "Add -walletdir parameter to specify custom wallet dir",
      "tree": {
        "sha": "40d494bbef4a50def396d325004aa69bc6ddda01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40d494bbef4a50def396d325004aa69bc6ddda01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0530ba0eae147563921b162ed05347234d8b53c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0530ba0eae147563921b162ed05347234d8b53c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0530ba0eae147563921b162ed05347234d8b53c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0530ba0eae147563921b162ed05347234d8b53c0/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99bc0b428b03b571afbc311b7f18fd3a707ac5af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99bc0b428b03b571afbc311b7f18fd3a707ac5af"
      }
    ],
    "stats": {
      "total": 100,
      "additions": 76,
      "deletions": 24
    },
    "files": [
      {
        "sha": "4b65774fc6f583e42a26a43687ec8777c845aa19",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -168,6 +168,7 @@ BITCOIN_CORE_H = \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n+  wallet/walletutil.h \\\n   warnings.h \\\n   zmq/zmqabstractnotifier.h \\\n   zmq/zmqconfig.h\\\n@@ -249,6 +250,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\\n   wallet/walletdb.cpp \\\n+  wallet/walletutil.cpp \\\n   $(BITCOIN_CORE_H)\n \n # crypto primitives library"
      },
      {
        "sha": "b1f1342aa05d3a061ef6c275c583da879de4635f",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -101,6 +101,10 @@ bool AppInit(int argc, char* argv[])\n             fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n             return false;\n         }\n+        if (gArgs.IsArgSet(\"-walletdir\") && !fs::is_directory(GetWalletDir())) {\n+            fprintf(stderr, \"Error: Specified wallet directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-walletdir\", \"\").c_str());\n+            return false;\n+        }\n         try\n         {\n             gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));"
      },
      {
        "sha": "93174a11ee46e9643c7018a16568f07b7fb94ae3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -1220,6 +1220,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n+    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n "
      },
      {
        "sha": "05af10a529d4b4e9d5152d1fe15aeb2d3fa1a853",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -626,6 +626,11 @@ int main(int argc, char *argv[])\n                               QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-datadir\", \"\"))));\n         return EXIT_FAILURE;\n     }\n+    if (gArgs.IsArgSet(\"-walletdir\") && !fs::is_directory(GetWalletDir())) {\n+        QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n+                              QObject::tr(\"Error: Specified wallet directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-walletdir\", \"\"))));\n+        return EXIT_FAILURE;\n+    }\n     try {\n         gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     } catch (const std::exception& e) {"
      },
      {
        "sha": "79ff27279c185cbd72a3b1cb93483869296056dd",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -11,6 +11,7 @@\n #include <protocol.h>\n #include <util.h>\n #include <utilstrencodings.h>\n+#include <wallet/walletutil.h>\n \n #include <stdint.h>\n \n@@ -257,23 +258,23 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n     return fSuccess;\n }\n \n-bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)\n+bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr)\n {\n     LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(0, 0, 0));\n     LogPrintf(\"Using wallet %s\\n\", walletFile);\n \n     // Wallet file must be a plain filename without a directory\n     if (walletFile != fs::basename(walletFile) + fs::extension(walletFile))\n     {\n-        errorStr = strprintf(_(\"Wallet %s resides outside data directory %s\"), walletFile, dataDir.string());\n+        errorStr = strprintf(_(\"Wallet %s resides outside wallet directory %s\"), walletFile, walletDir.string());\n         return false;\n     }\n \n-    if (!bitdb.Open(dataDir))\n+    if (!bitdb.Open(walletDir))\n     {\n         // try moving the database env out of the way\n-        fs::path pathDatabase = dataDir / \"database\";\n-        fs::path pathDatabaseBak = dataDir / strprintf(\"database.%d.bak\", GetTime());\n+        fs::path pathDatabase = walletDir / \"database\";\n+        fs::path pathDatabaseBak = walletDir / strprintf(\"database.%d.bak\", GetTime());\n         try {\n             fs::rename(pathDatabase, pathDatabaseBak);\n             LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string(), pathDatabaseBak.string());\n@@ -282,18 +283,18 @@ bool CDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataD\n         }\n \n         // try again\n-        if (!bitdb.Open(dataDir)) {\n+        if (!bitdb.Open(walletDir)) {\n             // if it still fails, it probably means we can't even create the database env\n-            errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), GetDataDir());\n+            errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), walletDir);\n             return false;\n         }\n     }\n     return true;\n }\n \n-bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc)\n+bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc)\n {\n-    if (fs::exists(dataDir / walletFile))\n+    if (fs::exists(walletDir / walletFile))\n     {\n         std::string backup_filename;\n         CDBEnv::VerifyResult r = bitdb.Verify(walletFile, recoverFunc, backup_filename);\n@@ -303,7 +304,7 @@ bool CDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& data\n                                      \" Original %s saved as %s in %s; if\"\n                                      \" your balance or transactions are incorrect you should\"\n                                      \" restore from a backup.\"),\n-                                   walletFile, backup_filename, dataDir);\n+                                   walletFile, backup_filename, walletDir);\n         }\n         if (r == CDBEnv::RECOVER_FAIL)\n         {\n@@ -407,7 +408,7 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n \n     {\n         LOCK(env->cs_db);\n-        if (!env->Open(GetDataDir()))\n+        if (!env->Open(GetWalletDir()))\n             throw std::runtime_error(\"CDB: Failed to open database environment.\");\n \n         pdb = env->mapDb[strFilename];\n@@ -695,7 +696,7 @@ bool CWalletDBWrapper::Backup(const std::string& strDest)\n                 env->mapFileUseCount.erase(strFile);\n \n                 // Copy wallet file\n-                fs::path pathSrc = GetDataDir() / strFile;\n+                fs::path pathSrc = GetWalletDir() / strFile;\n                 fs::path pathDest(strDest);\n                 if (fs::is_directory(pathDest))\n                     pathDest /= strFile;"
      },
      {
        "sha": "ed2ee65cacc6d48ed32a1a0817ec46ad4896646a",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -167,9 +167,9 @@ class CDB\n        ideal to be called periodically */\n     static bool PeriodicFlush(CWalletDBWrapper& dbw);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc);\n+    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr, CDBEnv::recoverFunc_type recoverFunc);\n \n public:\n     template <typename K, typename T>"
      },
      {
        "sha": "754ed8a6701bd198b4cbaafb4b09819f5cfca56d",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -9,8 +9,9 @@\n #include <util.h>\n #include <utilmoneystr.h>\n #include <validation.h>\n-#include <wallet/wallet.h>\n #include <wallet/rpcwallet.h>\n+#include <wallet/wallet.h>\n+#include <wallet/walletutil.h>\n \n std::string GetWalletHelpString(bool showDebug)\n {\n@@ -34,6 +35,7 @@ std::string GetWalletHelpString(bool showDebug)\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n     strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n+    strUsage += HelpMessageOpt(\"-walletdir=<dir>\", _(\"Specify directory to hold wallets (default: <datadir>/wallets if it exists, otherwise <datadir>)\"));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n     strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n                                \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n@@ -205,7 +207,7 @@ bool VerifyWallets()\n             return InitError(strprintf(_(\"Error loading wallet %s. Invalid characters in -wallet filename.\"), walletFile));\n         }\n \n-        fs::path wallet_path = fs::absolute(walletFile, GetDataDir());\n+        fs::path wallet_path = fs::absolute(walletFile, GetWalletDir());\n \n         if (fs::exists(wallet_path) && (!fs::is_regular_file(wallet_path) || fs::is_symlink(wallet_path))) {\n             return InitError(strprintf(_(\"Error loading wallet %s. -wallet filename must be a regular file.\"), walletFile));\n@@ -216,7 +218,7 @@ bool VerifyWallets()\n         }\n \n         std::string strError;\n-        if (!CWalletDB::VerifyEnvironment(walletFile, GetDataDir().string(), strError)) {\n+        if (!CWalletDB::VerifyEnvironment(walletFile, GetWalletDir().string(), strError)) {\n             return InitError(strError);\n         }\n \n@@ -230,7 +232,7 @@ bool VerifyWallets()\n         }\n \n         std::string strWarning;\n-        bool dbV = CWalletDB::VerifyDatabaseFile(walletFile, GetDataDir().string(), strWarning, strError);\n+        bool dbV = CWalletDB::VerifyDatabaseFile(walletFile, GetWalletDir().string(), strWarning, strError);\n         if (!strWarning.empty()) {\n             InitWarning(strWarning);\n         }"
      },
      {
        "sha": "9a7861f978ee092ab58dd665dfbe0b9328354837",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -26,6 +26,7 @@\n #include <wallet/feebumper.h>\n #include <wallet/wallet.h>\n #include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n \n #include <init.h>  // For StartShutdown\n "
      },
      {
        "sha": "5116d6419e89813e8b6af53cf67892c3d46f2b2f",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -814,14 +814,14 @@ bool CWalletDB::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDa\n     return true;\n }\n \n-bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr)\n+bool CWalletDB::VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr)\n {\n-    return CDB::VerifyEnvironment(walletFile, dataDir, errorStr);\n+    return CDB::VerifyEnvironment(walletFile, walletDir, errorStr);\n }\n \n-bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr)\n+bool CWalletDB::VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr)\n {\n-    return CDB::VerifyDatabaseFile(walletFile, dataDir, warningStr, errorStr, CWalletDB::Recover);\n+    return CDB::VerifyDatabaseFile(walletFile, walletDir, warningStr, errorStr, CWalletDB::Recover);\n }\n \n bool CWalletDB::WriteDestData(const std::string &address, const std::string &key, const std::string &value)"
      },
      {
        "sha": "e815bcfeda61dc3d0a48512607d9d9738b4088bb",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -226,9 +226,9 @@ class CWalletDB\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& dataDir, std::string& errorStr);\n+    static bool VerifyEnvironment(const std::string& walletFile, const fs::path& walletDir, std::string& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& dataDir, std::string& warningStr, std::string& errorStr);\n+    static bool VerifyDatabaseFile(const std::string& walletFile, const fs::path& walletDir, std::string& warningStr, std::string& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      },
      {
        "sha": "85ac428b25f2040ccab4e7105317345896d77939",
        "filename": "src/wallet/walletutil.cpp",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/walletutil.h\"\n+\n+fs::path GetWalletDir()\n+{\n+    fs::path path;\n+\n+    if (gArgs.IsArgSet(\"-walletdir\")) {\n+        path = fs::system_complete(gArgs.GetArg(\"-walletdir\", \"\"));\n+        if (!fs::is_directory(path)) {\n+            // If the path specified doesn't exist, we return the deliberately\n+            // invalid empty string.\n+            path = \"\";\n+        }\n+    } else {\n+        path = GetDataDir();\n+    }\n+\n+    return path;\n+}"
      },
      {
        "sha": "a94f286a44219d9b6aaada9ce9e1bef16f893ef5",
        "filename": "src/wallet/walletutil.h",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0530ba0eae147563921b162ed05347234d8b53c0/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=0530ba0eae147563921b162ed05347234d8b53c0",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_UTIL_H\n+#define BITCOIN_WALLET_UTIL_H\n+\n+#include \"util.h\"\n+\n+//! Get the path of the wallet directory.\n+fs::path GetWalletDir();\n+\n+#endif // BITCOIN_WALLET_UTIL_H"
      }
    ]
  },
  {
    "sha": "80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGM1Y2JjMTRmZGZjYTk0YWZmMjRjZDU3ZGZmZDUxZDFkNGQxNGJj",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-10-09T08:32:07Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-17T11:50:58Z"
      },
      "message": "Add test for -walletdir",
      "tree": {
        "sha": "07ece6d6ffa03255bde535da058e0ccbe8a2087f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07ece6d6ffa03255bde535da058e0ccbe8a2087f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0530ba0eae147563921b162ed05347234d8b53c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0530ba0eae147563921b162ed05347234d8b53c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0530ba0eae147563921b162ed05347234d8b53c0"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2f30d9f1ad6f807eca325eaa85d0b17f061977d6",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc",
        "patch": "@@ -39,6 +39,19 @@ def run_test(self):\n         os.symlink(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w1'), os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w12'))\n         self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n \n+        # should not initialize if the specified walletdir does not exist\n+        self.assert_start_raises_init_error(0, ['-walletdir=bad'], 'Error: Specified wallet directory \"bad\" does not exist.')\n+\n+        # running the node with specified walletdir should only have the default wallet in it\n+        os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'walletdir'))\n+        self.start_node(0, ['-wallet=w4', '-wallet=w5', '-walletdir=' + os.path.join(self.options.tmpdir, 'node0', 'regtest', 'walletdir')])\n+        assert_equal(set(self.nodes[0].listwallets()), {\"w4\", \"w5\"})\n+        w5 = self.nodes[0].get_wallet_rpc(\"w5\")\n+        w5_info = w5.getwalletinfo()\n+        assert_equal(w5_info['immature_balance'], 0)\n+\n+        self.stop_node(0)\n+\n         self.start_node(0, self.extra_args[0])\n \n         w1 = self.nodes[0].get_wallet_rpc(\"w1\")"
      }
    ]
  },
  {
    "sha": "d9878890e4539d7113fae880f612e68640e69462",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTg3ODg5MGU0NTM5ZDcxMTNmYWU4ODBmNjEyZTY4NjQwZTY5NDYy",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-10-09T08:45:01Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-17T11:50:58Z"
      },
      "message": "Add release notes for -walletdir and wallets/ dir",
      "tree": {
        "sha": "cb14d16dc34625b45d514b9845bed7d3e7fcedaf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb14d16dc34625b45d514b9845bed7d3e7fcedaf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d9878890e4539d7113fae880f612e68640e69462",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9878890e4539d7113fae880f612e68640e69462",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d9878890e4539d7113fae880f612e68640e69462",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9878890e4539d7113fae880f612e68640e69462/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80c5cbc14fdfca94aff24cd57dffd51d1d4d14bc"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "32f1bef62cd9cc9b828b9d4b7551eafe107823db",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d9878890e4539d7113fae880f612e68640e69462/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d9878890e4539d7113fae880f612e68640e69462/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=d9878890e4539d7113fae880f612e68640e69462",
        "patch": "@@ -20,7 +20,7 @@ How to Upgrade\n ==============\n \n If you are running an older version, shut it down. Wait until it has completely\n-shut down (which might take a few minutes for older versions), then run the \n+shut down (which might take a few minutes for older versions), then run the\n installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n@@ -62,6 +62,20 @@ Due to a backward-incompatible change in the wallet database, wallets created\n with version 0.16.0 will be rejected by previous versions. Also, version 0.16.0\n will only create hierarchical deterministic (HD) wallets.\n \n+Custom wallet directories\n+---------------------\n+The ability to specify a directory other than the default data directory in which to store\n+wallets has been added. An existing directory can be specified using the `-walletdir=<dir>`\n+argument. Wallets loaded via `-wallet` arguments must be in this wallet directory. Care should be taken\n+when choosing a wallet directory location, as if  it becomes unavailable during operation,\n+funds may be lost.\n+\n+Default wallet directory change\n+--------------------------\n+On new installations (if the data directory doesn't exist), wallets will now be stored in a\n+new `wallets/` subdirectory inside the data directory. If this `wallets/` subdirectory\n+doesn't exist (i.e. on existing nodes), the current datadir root is used instead, as it was.\n+\n Low-level RPC changes\n ----------------------\n - The deprecated RPC `getinfo` was removed. It is recommended that the more specific RPCs are used:"
      }
    ]
  },
  {
    "sha": "9587a9c12b5d54263787a23c75f570db368318c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTg3YTljMTJiNWQ1NDI2Mzc4N2EyM2M3NWY1NzBkYjM2ODMxOGMx",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-10-27T02:15:40Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-17T11:50:59Z"
      },
      "message": "Default walletdir is wallets/ if it exists",
      "tree": {
        "sha": "8fe3ceaca77bd217c1b7b5adb982502467f5e5c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8fe3ceaca77bd217c1b7b5adb982502467f5e5c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9587a9c12b5d54263787a23c75f570db368318c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9587a9c12b5d54263787a23c75f570db368318c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9587a9c12b5d54263787a23c75f570db368318c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9587a9c12b5d54263787a23c75f570db368318c1/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d9878890e4539d7113fae880f612e68640e69462",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d9878890e4539d7113fae880f612e68640e69462",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d9878890e4539d7113fae880f612e68640e69462"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fbb5215a51efdde112e90021e287e16eb49d0914",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9587a9c12b5d54263787a23c75f570db368318c1/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9587a9c12b5d54263787a23c75f570db368318c1/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=9587a9c12b5d54263787a23c75f570db368318c1",
        "patch": "@@ -17,6 +17,10 @@ fs::path GetWalletDir()\n         }\n     } else {\n         path = GetDataDir();\n+        // If a wallets directory exists, use that, otherwise default to GetDataDir\n+        if (fs::is_directory(path / \"wallets\")) {\n+            path /= \"wallets\";\n+        }\n     }\n \n     return path;"
      }
    ]
  },
  {
    "sha": "8263f6a5ac3f3af102a2819b7e179b00db7e0437",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjYzZjZhNWFjM2YzYWYxMDJhMjgxOWI3ZTE3OWIwMGRiN2UwNDM3",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-10-12T09:04:46Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-17T11:50:59Z"
      },
      "message": "Create walletdir if datadir doesn't exist and fix tests",
      "tree": {
        "sha": "2d08c4f8eeed52a2c1101d0fe1c16556d6da2b73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d08c4f8eeed52a2c1101d0fe1c16556d6da2b73"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8263f6a5ac3f3af102a2819b7e179b00db7e0437",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8263f6a5ac3f3af102a2819b7e179b00db7e0437",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8263f6a5ac3f3af102a2819b7e179b00db7e0437",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8263f6a5ac3f3af102a2819b7e179b00db7e0437/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9587a9c12b5d54263787a23c75f570db368318c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9587a9c12b5d54263787a23c75f570db368318c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9587a9c12b5d54263787a23c75f570db368318c1"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 45,
      "deletions": 34
    },
    "files": [
      {
        "sha": "bc23912d2b098e4b8fccca4e55857a201cbe81fd",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -101,10 +101,6 @@ bool AppInit(int argc, char* argv[])\n             fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n             return false;\n         }\n-        if (gArgs.IsArgSet(\"-walletdir\") && !fs::is_directory(GetWalletDir())) {\n-            fprintf(stderr, \"Error: Specified wallet directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-walletdir\", \"\").c_str());\n-            return false;\n-        }\n         try\n         {\n             gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));"
      },
      {
        "sha": "439eaacfcc9445cb28e213fbf7164bdf893cf72c",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -1220,7 +1220,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n         LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", GetDataDir().string());\n-    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n "
      },
      {
        "sha": "557d7efcec14edba55b6b3eab212a084f61b78a4",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -626,11 +626,6 @@ int main(int argc, char *argv[])\n                               QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-datadir\", \"\"))));\n         return EXIT_FAILURE;\n     }\n-    if (gArgs.IsArgSet(\"-walletdir\") && !fs::is_directory(GetWalletDir())) {\n-        QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n-                              QObject::tr(\"Error: Specified wallet directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(gArgs.GetArg(\"-walletdir\", \"\"))));\n-        return EXIT_FAILURE;\n-    }\n     try {\n         gArgs.ReadConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n     } catch (const std::exception& e) {"
      },
      {
        "sha": "7f8a8394e691a63476906a8bb01170e235bd92e8",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -214,7 +214,10 @@ bool Intro::pickDataDirectory()\n             }\n             dataDir = intro.getDataDirectory();\n             try {\n-                TryCreateDirectories(GUIUtil::qstringToBoostPath(dataDir));\n+                if (TryCreateDirectories(GUIUtil::qstringToBoostPath(dataDir))) {\n+                    // If a new data directory has been created, make wallets subdirectory too\n+                    TryCreateDirectories(GUIUtil::qstringToBoostPath(dataDir) / \"wallets\");\n+                }\n                 break;\n             } catch (const fs::filesystem_error&) {\n                 QMessageBox::critical(0, tr(PACKAGE_NAME),"
      },
      {
        "sha": "d58f39e969b3b070b40ceecee282e90c3b7cf208",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -574,7 +574,10 @@ const fs::path &GetDataDir(bool fNetSpecific)\n     if (fNetSpecific)\n         path /= BaseParams().DataDir();\n \n-    fs::create_directories(path);\n+    if (fs::create_directories(path)) {\n+        // This is the first run, create wallets subdirectory too\n+        fs::create_directories(path / \"wallets\");\n+    }\n \n     return path;\n }"
      },
      {
        "sha": "67c46df87d69cae1ba2c6d4c2c78666011b17099",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -193,6 +193,12 @@ bool VerifyWallets()\n         return true;\n     }\n \n+    if (gArgs.IsArgSet(\"-walletdir\") && !fs::is_directory(GetWalletDir())) {\n+        return InitError(strprintf(_(\"Error: Specified wallet directory \\\"%s\\\" does not exist.\"), gArgs.GetArg(\"-walletdir\", \"\").c_str()));\n+    }\n+\n+    LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());\n+\n     uiInterface.InitMessage(_(\"Verifying wallet(s)...\"));\n \n     // Keep track of each wallet absolute path to detect duplicates."
      },
      {
        "sha": "e7af3c398718640a5a1a2655954e3fab9dd2644f",
        "filename": "test/functional/keypool-topup.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/keypool-topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/keypool-topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-topup.py?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -33,7 +33,7 @@ def run_test(self):\n \n         self.stop_node(1)\n \n-        shutil.copyfile(self.tmpdir + \"/node1/regtest/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n+        shutil.copyfile(self.tmpdir + \"/node1/regtest/wallets/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n         self.start_node(1, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n \n@@ -56,7 +56,7 @@ def run_test(self):\n \n         self.stop_node(1)\n \n-        shutil.copyfile(self.tmpdir + \"/wallet.bak\", self.tmpdir + \"/node1/regtest/wallet.dat\")\n+        shutil.copyfile(self.tmpdir + \"/wallet.bak\", self.tmpdir + \"/node1/regtest/wallets/wallet.dat\")\n \n         self.log.info(\"Verify keypool is restored and balance is correct\")\n "
      },
      {
        "sha": "4a721d11099f62fbf373078781d45372a5cd9a85",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 17,
        "deletions": 8,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -27,28 +27,37 @@ def run_test(self):\n         self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n \n         # should not initialize if wallet file is a directory\n-        os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w11'))\n+        wallet_dir = os.path.join(self.options.tmpdir, 'node0', 'regtest', 'wallets')\n+        os.mkdir(os.path.join(wallet_dir, 'w11'))\n         self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n \n         # should not initialize if one wallet is a copy of another\n-        shutil.copyfile(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w2'),\n-                        os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w22'))\n+        shutil.copyfile(os.path.join(wallet_dir, 'w2'), os.path.join(wallet_dir, 'w22'))\n         self.assert_start_raises_init_error(0, ['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n \n         # should not initialize if wallet file is a symlink\n-        os.symlink(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w1'), os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w12'))\n+        os.symlink(os.path.join(wallet_dir, 'w1'), os.path.join(wallet_dir, 'w12'))\n         self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n \n         # should not initialize if the specified walletdir does not exist\n         self.assert_start_raises_init_error(0, ['-walletdir=bad'], 'Error: Specified wallet directory \"bad\" does not exist.')\n \n-        # running the node with specified walletdir should only have the default wallet in it\n-        os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'walletdir'))\n-        self.start_node(0, ['-wallet=w4', '-wallet=w5', '-walletdir=' + os.path.join(self.options.tmpdir, 'node0', 'regtest', 'walletdir')])\n+        # if wallets/ doesn't exist, datadir should be the default wallet dir\n+        wallet_dir2 = os.path.join(self.options.tmpdir, 'node0', 'regtest', 'walletdir')\n+        os.rename(wallet_dir, wallet_dir2)\n+        self.start_node(0, ['-wallet=w4', '-wallet=w5'])\n+        assert_equal(set(self.nodes[0].listwallets()), {\"w4\", \"w5\"})\n+        w5 = self.nodes[0].get_wallet_rpc(\"w5\")\n+        w5.generate(1)\n+        self.stop_node(0)\n+\n+        # now if wallets/ exists again, but the rootdir is specified as the walletdir, w4 and w5 should still be loaded\n+        os.rename(wallet_dir2, wallet_dir)\n+        self.start_node(0, ['-wallet=w4', '-wallet=w5', '-walletdir=' + os.path.join(self.options.tmpdir, 'node0', 'regtest')])\n         assert_equal(set(self.nodes[0].listwallets()), {\"w4\", \"w5\"})\n         w5 = self.nodes[0].get_wallet_rpc(\"w5\")\n         w5_info = w5.getwalletinfo()\n-        assert_equal(w5_info['immature_balance'], 0)\n+        assert_equal(w5_info['immature_balance'], 50)\n \n         self.stop_node(0)\n "
      },
      {
        "sha": "4590b4c65091218c32870f990e2a0217c076edcc",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -432,7 +432,7 @@ def _initialize_chain(self):\n             self.disable_mocktime()\n             for i in range(MAX_NODES):\n                 os.remove(log_filename(self.options.cachedir, i, \"debug.log\"))\n-                os.remove(log_filename(self.options.cachedir, i, \"db.log\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"wallets/db.log\"))\n                 os.remove(log_filename(self.options.cachedir, i, \"peers.dat\"))\n                 os.remove(log_filename(self.options.cachedir, i, \"fee_estimates.dat\"))\n "
      },
      {
        "sha": "d21656a971656c20dfde84ce4ed6735c6f601d84",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -73,7 +73,7 @@ def run_test (self):\n         # otherwise node1 would auto-recover all funds in flag the keypool keys as used\n         shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/blocks\"))\n         shutil.rmtree(os.path.join(tmpdir, \"node1/regtest/chainstate\"))\n-        shutil.copyfile(os.path.join(tmpdir, \"hd.bak\"), os.path.join(tmpdir, \"node1/regtest/wallet.dat\"))\n+        shutil.copyfile(os.path.join(tmpdir, \"hd.bak\"), os.path.join(tmpdir, \"node1/regtest/wallets/wallet.dat\"))\n         self.start_node(1)\n \n         # Assert that derivation is deterministic"
      },
      {
        "sha": "8ef5620cd8cfc6158d1b6ccf1602adce1f288de0",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8263f6a5ac3f3af102a2819b7e179b00db7e0437/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "patch": "@@ -90,9 +90,9 @@ def stop_three(self):\n         self.stop_node(2)\n \n     def erase_three(self):\n-        os.remove(self.options.tmpdir + \"/node0/regtest/wallet.dat\")\n-        os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n-        os.remove(self.options.tmpdir + \"/node2/regtest/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node0/regtest/wallets/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node1/regtest/wallets/wallet.dat\")\n+        os.remove(self.options.tmpdir + \"/node2/regtest/wallets/wallet.dat\")\n \n     def run_test(self):\n         self.log.info(\"Generating initial blockchain\")\n@@ -154,9 +154,9 @@ def run_test(self):\n         shutil.rmtree(self.options.tmpdir + \"/node2/regtest/chainstate\")\n \n         # Restore wallets from backup\n-        shutil.copyfile(tmpdir + \"/node0/wallet.bak\", tmpdir + \"/node0/regtest/wallet.dat\")\n-        shutil.copyfile(tmpdir + \"/node1/wallet.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        shutil.copyfile(tmpdir + \"/node2/wallet.bak\", tmpdir + \"/node2/regtest/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node0/wallet.bak\", tmpdir + \"/node0/regtest/wallets/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node1/wallet.bak\", tmpdir + \"/node1/regtest/wallets/wallet.dat\")\n+        shutil.copyfile(tmpdir + \"/node2/wallet.bak\", tmpdir + \"/node2/regtest/wallets/wallet.dat\")\n \n         self.log.info(\"Re-starting nodes\")\n         self.start_three()\n@@ -192,10 +192,10 @@ def run_test(self):\n \n         # Backup to source wallet file must fail\n         sourcePaths = [\n-            tmpdir + \"/node0/regtest/wallet.dat\",\n-            tmpdir + \"/node0/./regtest/wallet.dat\",\n-            tmpdir + \"/node0/regtest/\",\n-            tmpdir + \"/node0/regtest\"]\n+            tmpdir + \"/node0/regtest/wallets/wallet.dat\",\n+            tmpdir + \"/node0/./regtest/wallets/wallet.dat\",\n+            tmpdir + \"/node0/regtest/wallets/\",\n+            tmpdir + \"/node0/regtest/wallets\"]\n \n         for sourcePath in sourcePaths:\n             assert_raises_rpc_error(-4, \"backup failed\", self.nodes[0].backupwallet, sourcePath)"
      }
    ]
  },
  {
    "sha": "c1e5d40e166f0b9ad832c14747e77322ab439185",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWU1ZDQwZTE2NmYwYjlhZDgzMmMxNDc0N2U3NzMyMmFiNDM5MTg1",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-10-13T10:19:20Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-17T11:51:00Z"
      },
      "message": "Make debugging test crash easier",
      "tree": {
        "sha": "5ba7abd8a5d011876e385c728e9dc409839a06cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ba7abd8a5d011876e385c728e9dc409839a06cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1e5d40e166f0b9ad832c14747e77322ab439185",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e5d40e166f0b9ad832c14747e77322ab439185",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1e5d40e166f0b9ad832c14747e77322ab439185",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1e5d40e166f0b9ad832c14747e77322ab439185/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8263f6a5ac3f3af102a2819b7e179b00db7e0437",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8263f6a5ac3f3af102a2819b7e179b00db7e0437"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d953e1585cb974a9ac2120559e1b0a95fddf88bd",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1e5d40e166f0b9ad832c14747e77322ab439185/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1e5d40e166f0b9ad832c14747e77322ab439185/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=c1e5d40e166f0b9ad832c14747e77322ab439185",
        "patch": "@@ -300,7 +300,11 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n \n     if len(test_list) > 1 and jobs > 1:\n         # Populate cache\n-        subprocess.check_output([tests_dir + 'create_cache.py'] + flags + [\"--tmpdir=%s/cache\" % tmpdir])\n+        try:\n+            subprocess.check_output([tests_dir + 'create_cache.py'] + flags + [\"--tmpdir=%s/cache\" % tmpdir])\n+        except Exception as e:\n+            print(e.output)\n+            raise e\n \n     #Run Tests\n     job_queue = TestHandler(jobs, tests_dir, tmpdir, test_list, flags)"
      }
    ]
  }
]