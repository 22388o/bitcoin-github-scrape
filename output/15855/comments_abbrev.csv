DrahtBot,2019-04-19T17:43:09Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15931](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15931.html) (Remove GetDepthInMainChain dependency on lo",https://github.com/bitcoin/bitcoin/pull/15855#issuecomment-484968085,484968085,
MarcoFalke,2019-04-22T13:08:55Z,Addressed feedback by @promag ,https://github.com/bitcoin/bitcoin/pull/15855#issuecomment-485413943,485413943,
practicalswift,2019-05-07T16:30:36Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/15855#issuecomment-490153673,490153673,
promag,2019-05-13T15:04:24Z,utACK face05a080c081fc426ff34ecb39ac072710034b.,https://github.com/bitcoin/bitcoin/pull/15855#issuecomment-491860599,491860599,
practicalswift,2019-05-13T18:30:31Z,"@MarcoFalke The added comment makes it easier to understand for human reviewers. That is good, but I still think we would be better off if we used different annotations for the ""opt-out of analysis"" and ""give the compiler a locking guarantee when it fails to understand our code"" use cases:\n\nWhen analysing locks using static analysis etc I want to be able to let `LockAnnotation` imply the stron",https://github.com/bitcoin/bitcoin/pull/15855#issuecomment-491935276,491935276,
MarcoFalke,2019-05-13T18:47:31Z,"> Perhaps --enable-debug builds should do AssertLockHeld(â€¦) as part of the LockAnnotationctor to make sure the LockAnnotation guarantees hold up over time\n\nSounds good. I have addressed your concerns, but this suggestion should go into a follow-up pull request?",https://github.com/bitcoin/bitcoin/pull/15855#issuecomment-491940936,491940936,
practicalswift,2019-05-14T05:25:09Z,utACK fa3c6511435149782545ac0d09d4722dc115d709,https://github.com/bitcoin/bitcoin/pull/15855#issuecomment-492083466,492083466,
promag,2019-04-21T22:50:03Z,Why was this moved?,https://github.com/bitcoin/bitcoin/pull/15855#discussion_r277184092,277184092,src/wallet/test/wallet_tests.cpp
promag,2019-04-21T22:52:34Z,This gives the bad impression `cs_main` is necessary.,https://github.com/bitcoin/bitcoin/pull/15855#discussion_r277184156,277184156,src/test/txvalidationcache_tests.cpp
practicalswift,2019-05-13T16:47:25Z,"I might be missing something but shouldn't `LockAnnotation` be used only when we are holding the mutex but the compiler thread analysis doesn't understand it? In this case we aren't holding `cs_main` here, right?\n\nIf it is used simply to opt-out of thread-safety analysis (when we are not holding the mutex) then `NO_THREAD_SAFETY_ANALYSIS` should be used, no?",https://github.com/bitcoin/bitcoin/pull/15855#discussion_r283437966,283437966,src/wallet/test/wallet_tests.cpp
MarcoFalke,2019-05-13T16:51:48Z,"The tests are single threaded, so taking a lock is equivalent to pretending it is taken.\n\nNot sure how I can use `NO_THREAD_SAFETY_ANALYSIS` to achieve that.",https://github.com/bitcoin/bitcoin/pull/15855#discussion_r283439664,283439664,src/wallet/test/wallet_tests.cpp
practicalswift,2019-05-13T17:04:04Z,"Yes, I know the tests are single-threaded but I think it might be confusing for newcomers if we use `LockAnnotation` to both a.) guarantee to the compiler that the lock is taken (like in `src/interfaces/chain.cpp`), and b.) to opt-out of thread safety analysis when the lock is not taken (like in this file).\n\nJust to make it crystal clear to readers what we are doing we could use different name",https://github.com/bitcoin/bitcoin/pull/15855#discussion_r283444423,283444423,src/wallet/test/wallet_tests.cpp
MarcoFalke,2019-05-13T17:33:32Z,Added a comment instead. Is that fine?,https://github.com/bitcoin/bitcoin/pull/15855#discussion_r283455523,283455523,src/wallet/test/wallet_tests.cpp
