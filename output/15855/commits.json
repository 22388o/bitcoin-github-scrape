[
  {
    "sha": "fa3c6511435149782545ac0d09d4722dc115d709",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTNjNjUxMTQzNTE0OTc4MjU0NWFjMGQwOWQ0NzIyZGMxMTVkNzA5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-04-19T17:19:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-05-13T18:46:01Z"
      },
      "message": "[refactor] interfaces: Add missing LockAnnotation for cs_main",
      "tree": {
        "sha": "4b50c659cd37aa21590050479c8e525ad017d9e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b50c659cd37aa21590050479c8e525ad017d9e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3c6511435149782545ac0d09d4722dc115d709",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjh9gv/RwOsQ7wzKsbd67Bs5TwYtCKPw98Bo5SIctcA2+QB47BJ6pSWQjpyiULJ\nlh8lPfqJW0QT8BV5SzhGZpWX4YVbuQTb84Ksq7HOtfgY+67MPJqjq5hJVHw+IWLF\n9hregB6VQ8QSuMd6ZDfQQKNwd8HURWy7huH//Qlik+bO9kTwg4P8Ztx2+AsSbEsf\nXbej2hjGpthe8eJSblwR/YXDDsydnvqfhuOPCjrhoSBNoeRj5Zhv8Pvky4lo9+7d\nQarNS6KI78veo51KF/Ral49NuDixPzGD/rfbzGm5HGsgdMU5+soMVGmR8V+hJU89\nZ1isBYAUUkK3E9KOGK5qbjDOQULUbQEa0vG7leXnwEs9UNJ6ZpuOafpTgHSoOnjH\nXeK9RUGd3JYHtYtLpdUzZuCqgJa3rbjadDov0ZQPW3LsPubWBg9YAtPfWpVa/kRj\n0dZJhSwfTWsKr7vCSyDZcRNgfdG6vi/VdXifQVLNQr+uGGUQP0oDmycaj/mwQepv\nAAsvwhiQ\n=PS2z\n-----END PGP SIGNATURE-----",
        "payload": "tree 4b50c659cd37aa21590050479c8e525ad017d9e1\nparent 14959753a424f04be118630f691ecab9b0df7e9e\nauthor MarcoFalke <falke.marco@gmail.com> 1555694360 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1557773161 -0400\n\n[refactor] interfaces: Add missing LockAnnotation for cs_main\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3c6511435149782545ac0d09d4722dc115d709",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3c6511435149782545ac0d09d4722dc115d709",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3c6511435149782545ac0d09d4722dc115d709/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "14959753a424f04be118630f691ecab9b0df7e9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14959753a424f04be118630f691ecab9b0df7e9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14959753a424f04be118630f691ecab9b0df7e9e"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 55,
      "deletions": 20
    },
    "files": [
      {
        "sha": "f2b520e893e9eba2c38d1acdff07de452baeb480",
        "filename": "src/bench/bench.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3c6511435149782545ac0d09d4722dc115d709/src/bench/bench.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3c6511435149782545ac0d09d4722dc115d709/src/bench/bench.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench.cpp?ref=fa3c6511435149782545ac0d09d4722dc115d709",
        "patch": "@@ -114,6 +114,7 @@ void benchmark::BenchRunner::RunAll(Printer& printer, uint64_t num_evals, double\n     for (const auto& p : benchmarks()) {\n         TestingSetup test{CBaseChainParams::REGTEST};\n         {\n+            LOCK(cs_main);\n             assert(::ChainActive().Height() == 0);\n             const bool witness_enabled{IsWitnessEnabled(::ChainActive().Tip(), Params().GetConsensus())};\n             assert(witness_enabled);"
      },
      {
        "sha": "80ff13612c04580e8f81f9879c6014010615c3c7",
        "filename": "src/bench/duplicate_inputs.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3c6511435149782545ac0d09d4722dc115d709/src/bench/duplicate_inputs.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3c6511435149782545ac0d09d4722dc115d709/src/bench/duplicate_inputs.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/duplicate_inputs.cpp?ref=fa3c6511435149782545ac0d09d4722dc115d709",
        "patch": "@@ -29,6 +29,7 @@ static void DuplicateInputs(benchmark::State& state)\n     CMutableTransaction coinbaseTx{};\n     CMutableTransaction naughtyTx{};\n \n+    LOCK(cs_main);\n     CBlockIndex* pindexPrev = ::ChainActive().Tip();\n     assert(pindexPrev != nullptr);\n     block.nBits = GetNextWorkRequired(pindexPrev, &block, chainparams.GetConsensus());"
      },
      {
        "sha": "59623284d2a20c0ba10f22441229587a0ec29dd5",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3c6511435149782545ac0d09d4722dc115d709/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3c6511435149782545ac0d09d4722dc115d709/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=fa3c6511435149782545ac0d09d4722dc115d709",
        "patch": "@@ -41,6 +41,7 @@ class LockImpl : public Chain::Lock\n {\n     Optional<int> getHeight() override\n     {\n+        LockAnnotation lock(::cs_main);\n         int height = ::ChainActive().Height();\n         if (height >= 0) {\n             return height;\n@@ -49,6 +50,7 @@ class LockImpl : public Chain::Lock\n     }\n     Optional<int> getBlockHeight(const uint256& hash) override\n     {\n+        LockAnnotation lock(::cs_main);\n         CBlockIndex* block = LookupBlockIndex(hash);\n         if (block && ::ChainActive().Contains(block)) {\n             return block->nHeight;\n@@ -63,29 +65,34 @@ class LockImpl : public Chain::Lock\n     }\n     uint256 getBlockHash(int height) override\n     {\n+        LockAnnotation lock(::cs_main);\n         CBlockIndex* block = ::ChainActive()[height];\n         assert(block != nullptr);\n         return block->GetBlockHash();\n     }\n     int64_t getBlockTime(int height) override\n     {\n+        LockAnnotation lock(::cs_main);\n         CBlockIndex* block = ::ChainActive()[height];\n         assert(block != nullptr);\n         return block->GetBlockTime();\n     }\n     int64_t getBlockMedianTimePast(int height) override\n     {\n+        LockAnnotation lock(::cs_main);\n         CBlockIndex* block = ::ChainActive()[height];\n         assert(block != nullptr);\n         return block->GetMedianTimePast();\n     }\n     bool haveBlockOnDisk(int height) override\n     {\n+        LockAnnotation lock(::cs_main);\n         CBlockIndex* block = ::ChainActive()[height];\n         return block && ((block->nStatus & BLOCK_HAVE_DATA) != 0) && block->nTx > 0;\n     }\n     Optional<int> findFirstBlockWithTimeAndHeight(int64_t time, int height, uint256* hash) override\n     {\n+        LockAnnotation lock(::cs_main);\n         CBlockIndex* block = ::ChainActive().FindEarliestAtLeast(time, height);\n         if (block) {\n             if (hash) *hash = block->GetBlockHash();\n@@ -95,6 +102,7 @@ class LockImpl : public Chain::Lock\n     }\n     Optional<int> findPruned(int start_height, Optional<int> stop_height) override\n     {\n+        LockAnnotation lock(::cs_main);\n         if (::fPruneMode) {\n             CBlockIndex* block = stop_height ? ::ChainActive()[*stop_height] : ::ChainActive().Tip();\n             while (block && block->nHeight >= start_height) {\n@@ -108,6 +116,7 @@ class LockImpl : public Chain::Lock\n     }\n     Optional<int> findFork(const uint256& hash, Optional<int>* height) override\n     {\n+        LockAnnotation lock(::cs_main);\n         const CBlockIndex* block = LookupBlockIndex(hash);\n         const CBlockIndex* fork = block ? ::ChainActive().FindFork(block) : nullptr;\n         if (height) {\n@@ -122,7 +131,11 @@ class LockImpl : public Chain::Lock\n         }\n         return nullopt;\n     }\n-    CBlockLocator getTipLocator() override { return ::ChainActive().GetLocator(); }\n+    CBlockLocator getTipLocator() override\n+    {\n+        LockAnnotation lock(::cs_main);\n+        return ::ChainActive().GetLocator();\n+    }\n     Optional<int> findLocatorFork(const CBlockLocator& locator) override\n     {\n         LockAnnotation lock(::cs_main);"
      },
      {
        "sha": "21209d49947e01e7a5b535f9de3e123b02b4bc2f",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3c6511435149782545ac0d09d4722dc115d709/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3c6511435149782545ac0d09d4722dc115d709/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=fa3c6511435149782545ac0d09d4722dc115d709",
        "patch": "@@ -145,6 +145,8 @@ void TestGUI()\n     }\n     {\n         auto locked_chain = wallet->chain().lock();\n+        LockAnnotation lock(::cs_main);\n+\n         WalletRescanReserver reserver(wallet.get());\n         reserver.reserve();\n         CWallet::ScanResult result = wallet->ScanForWalletTransactions(locked_chain->getBlockHash(0), {} /* stop_block */, reserver, true /* fUpdate */);"
      },
      {
        "sha": "4321d7d16e53f67ac269f473d6b6cf3eef4f5883",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3c6511435149782545ac0d09d4722dc115d709/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3c6511435149782545ac0d09d4722dc115d709/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=fa3c6511435149782545ac0d09d4722dc115d709",
        "patch": "@@ -8,15 +8,15 @@\n #include <consensus/merkle.h>\n #include <consensus/tx_verify.h>\n #include <consensus/validation.h>\n-#include <validation.h>\n #include <miner.h>\n #include <policy/policy.h>\n #include <pubkey.h>\n #include <script/standard.h>\n #include <txmempool.h>\n #include <uint256.h>\n-#include <util/system.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n+#include <validation.h>\n \n #include <test/setup_common.h>\n \n@@ -82,7 +82,7 @@ struct {\n     {2, 0xbbbeb305}, {2, 0xfe1c810a},\n };\n \n-static CBlockIndex CreateBlockIndex(int nHeight)\n+static CBlockIndex CreateBlockIndex(int nHeight) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CBlockIndex index;\n     index.nHeight = nHeight;"
      },
      {
        "sha": "fe30d5f3a720e9b9ce0d341de75570bb36adde1c",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3c6511435149782545ac0d09d4722dc115d709/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3c6511435149782545ac0d09d4722dc115d709/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=fa3c6511435149782545ac0d09d4722dc115d709",
        "patch": "@@ -66,26 +66,38 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n \n     // Test 1: block with both of those transactions should be rejected.\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n-    BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n+    {\n+        LOCK(cs_main);\n+        BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n+    }\n \n     // Test 2: ... and should be rejected if spend1 is in the memory pool\n     BOOST_CHECK(ToMemPool(spends[0]));\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n-    BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n+    {\n+        LOCK(cs_main);\n+        BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n+    }\n     mempool.clear();\n \n     // Test 3: ... and should be rejected if spend2 is in the memory pool\n     BOOST_CHECK(ToMemPool(spends[1]));\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n-    BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n+    {\n+        LOCK(cs_main);\n+        BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() != block.GetHash());\n+    }\n     mempool.clear();\n \n     // Final sanity test: first spend in mempool, second in block, that's OK:\n     std::vector<CMutableTransaction> oneSpend;\n     oneSpend.push_back(spends[0]);\n     BOOST_CHECK(ToMemPool(spends[1]));\n     block = CreateAndProcessBlock(oneSpend, scriptPubKey);\n-    BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() == block.GetHash());\n+    {\n+        LOCK(cs_main);\n+        BOOST_CHECK(::ChainActive().Tip()->GetBlockHash() == block.GetHash());\n+    }\n     // spends[1] should have been removed from the mempool when the\n     // block with spends[0] is accepted:\n     BOOST_CHECK_EQUAL(mempool.size(), 0U);"
      },
      {
        "sha": "64ecc6623aa698a460f86e2b2d14e6915217886c",
        "filename": "src/test/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3c6511435149782545ac0d09d4722dc115d709/src/test/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3c6511435149782545ac0d09d4722dc115d709/src/test/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util.cpp?ref=fa3c6511435149782545ac0d09d4722dc115d709",
        "patch": "@@ -84,6 +84,7 @@ std::shared_ptr<CBlock> PrepareBlock(const CScript& coinbase_scriptPubKey)\n             .CreateNewBlock(coinbase_scriptPubKey)\n             ->block);\n \n+    LOCK(cs_main);\n     block->nTime = ::ChainActive().Tip()->GetMedianTimePast() + 1;\n     block->hashMerkleRoot = BlockMerkleRoot(*block);\n "
      },
      {
        "sha": "5dee034b20557af3dcc196e33669f426934466a1",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3c6511435149782545ac0d09d4722dc115d709/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3c6511435149782545ac0d09d4722dc115d709/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=fa3c6511435149782545ac0d09d4722dc115d709",
        "patch": "@@ -181,6 +181,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n \n     UnregisterValidationInterface(&sub);\n \n+    LOCK(cs_main);\n     BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n "
      },
      {
        "sha": "dcd2350fd8ecdf0288f72425f1236815a530b9bb",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3c6511435149782545ac0d09d4722dc115d709/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3c6511435149782545ac0d09d4722dc115d709/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa3c6511435149782545ac0d09d4722dc115d709",
        "patch": "@@ -3224,7 +3224,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n }\n \n //! Returns last CBlockIndex* that is a checkpoint\n-static CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)\n+static CBlockIndex* GetLastCheckpoint(const CCheckpointData& data) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const MapCheckpoints& checkpoints = data.mapCheckpoints;\n \n@@ -3248,7 +3248,7 @@ static CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)\n  *  in ConnectBlock().\n  *  Note that -reindex-chainstate skips the validation that happens here!\n  */\n-static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n+static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     assert(pindexPrev != nullptr);\n     const int nHeight = pindexPrev->nHeight + 1;"
      },
      {
        "sha": "ad978f0e05ee4e8144d928d9469d5013458e77da",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3c6511435149782545ac0d09d4722dc115d709/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3c6511435149782545ac0d09d4722dc115d709/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa3c6511435149782545ac0d09d4722dc115d709",
        "patch": "@@ -412,7 +412,7 @@ class CVerifyDB {\n /** Replay blocks that aren't fully applied to the database. */\n bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n \n-inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n+inline CBlockIndex* LookupBlockIndex(const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     BlockMap::const_iterator it = mapBlockIndex.find(hash);"
      },
      {
        "sha": "69a78f1fc01795cdaf6fefa69437b77740dd729e",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3c6511435149782545ac0d09d4722dc115d709/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3c6511435149782545ac0d09d4722dc115d709/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fa3c6511435149782545ac0d09d4722dc115d709",
        "patch": "@@ -12,12 +12,12 @@\n \n #include <consensus/validation.h>\n #include <interfaces/chain.h>\n+#include <policy/policy.h>\n #include <rpc/server.h>\n #include <test/setup_common.h>\n #include <validation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/test/wallet_test_fixture.h>\n-#include <policy/policy.h>\n \n #include <boost/test/unit_test.hpp>\n #include <univalue.h>\n@@ -36,16 +36,15 @@ static void AddKey(CWallet& wallet, const CKey& key)\n \n BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n {\n-    auto chain = interfaces::MakeChain();\n-\n     // Cap last block file size, and mine new block in a new block file.\n     CBlockIndex* oldTip = ::ChainActive().Tip();\n     GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n     CBlockIndex* newTip = ::ChainActive().Tip();\n \n-    LockAnnotation lock(::cs_main);\n+    auto chain = interfaces::MakeChain();\n     auto locked_chain = chain->lock();\n+    LockAnnotation lock(::cs_main);\n \n     // Verify ScanForWalletTransactions accommodates a null start block.\n     {\n@@ -116,16 +115,15 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n \n BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n {\n-    auto chain = interfaces::MakeChain();\n-\n     // Cap last block file size, and mine new block in a new block file.\n     CBlockIndex* oldTip = ::ChainActive().Tip();\n     GetBlockFileInfo(oldTip->GetBlockPos().nFile)->nSize = MAX_BLOCKFILE_SIZE;\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n     CBlockIndex* newTip = ::ChainActive().Tip();\n \n-    LockAnnotation lock(::cs_main);\n+    auto chain = interfaces::MakeChain();\n     auto locked_chain = chain->lock();\n+    LockAnnotation lock(::cs_main);\n \n     // Prune the older block file.\n     PruneOneBlockFile(oldTip->GetBlockPos().nFile);\n@@ -177,8 +175,6 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n // than or equal to key birthday.\n BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n {\n-    auto chain = interfaces::MakeChain();\n-\n     // Create two blocks with same timestamp to verify that importwallet rescan\n     // will pick up both blocks, not just the first.\n     const int64_t BLOCK_TIME = ::ChainActive().Tip()->GetBlockTimeMax() + 5;\n@@ -192,7 +188,9 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     SetMockTime(KEY_TIME);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n \n+    auto chain = interfaces::MakeChain();\n     auto locked_chain = chain->lock();\n+    LockAnnotation lock(::cs_main);\n \n     std::string backup_file = (SetDataDir(\"importwallet_rescan\") / \"wallet.backup\").string();\n \n@@ -245,10 +243,14 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n     auto chain = interfaces::MakeChain();\n+\n     CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n+\n     auto locked_chain = chain->lock();\n+    LockAnnotation lock(::cs_main);\n     LOCK(wallet.cs_wallet);\n+\n     wtx.hashBlock = ::ChainActive().Tip()->GetBlockHash();\n     wtx.nIndex = 0;\n \n@@ -375,6 +377,8 @@ class ListCoinsTestingSetup : public TestChain100Setup\n             blocktx = CMutableTransaction(*wallet->mapWallet.at(tx->GetHash()).tx);\n         }\n         CreateAndProcessBlock({CMutableTransaction(blocktx)}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n+\n+        LOCK(cs_main);\n         LOCK(wallet->cs_wallet);\n         auto it = wallet->mapWallet.find(tx->GetHash());\n         BOOST_CHECK(it != wallet->mapWallet.end());"
      }
    ]
  }
]