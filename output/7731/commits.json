[
  {
    "sha": "54bdbc1c595380091e077351dbfb14dd92ef9657",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGJkYmMxYzU5NTM4MDA5MWUwNzczNTFkYmZiMTRkZDkyZWY5NjU3",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-20T19:22:49Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-21T15:56:26Z"
      },
      "message": "Trivial: Fees: Add some constants",
      "tree": {
        "sha": "83a85f155051e1077ccd2bf7961f4dceb766eb95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83a85f155051e1077ccd2bf7961f4dceb766eb95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54bdbc1c595380091e077351dbfb14dd92ef9657",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54bdbc1c595380091e077351dbfb14dd92ef9657",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54bdbc1c595380091e077351dbfb14dd92ef9657",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54bdbc1c595380091e077351dbfb14dd92ef9657/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29b2be6ad7898fcb871f6febbd45d0c7940398cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29b2be6ad7898fcb871f6febbd45d0c7940398cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29b2be6ad7898fcb871f6febbd45d0c7940398cd"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7ecd52b4831fc423250ab75aff84ba7d2a265b3b",
        "filename": "src/amount.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54bdbc1c595380091e077351dbfb14dd92ef9657/src/amount.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54bdbc1c595380091e077351dbfb14dd92ef9657/src/amount.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.cpp?ref=54bdbc1c595380091e077351dbfb14dd92ef9657",
        "patch": "@@ -12,14 +12,14 @@ const std::string CURRENCY_UNIT = \"BTC\";\n CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nSize)\n {\n     if (nSize > 0)\n-        nSatoshisPerK = nFeePaid*1000/nSize;\n+        nSatoshisPerK = nFeePaid * PRECISION_MULTIPLIER / nSize;\n     else\n         nSatoshisPerK = 0;\n }\n \n CAmount CFeeRate::GetFee(size_t nSize) const\n {\n-    CAmount nFee = nSatoshisPerK * nSize / 1000;\n+    CAmount nFee = nSatoshisPerK * nSize / PRECISION_MULTIPLIER;\n \n     if (nFee == 0 && nSize != 0 && nSatoshisPerK > 0)\n         nFee = CAmount(1);"
      },
      {
        "sha": "bf6c229e456204fc80413b6405b45c66c343d5f3",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54bdbc1c595380091e077351dbfb14dd92ef9657/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54bdbc1c595380091e077351dbfb14dd92ef9657/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=54bdbc1c595380091e077351dbfb14dd92ef9657",
        "patch": "@@ -15,6 +15,8 @@ typedef int64_t CAmount;\n \n static const CAmount COIN = 100000000;\n static const CAmount CENT = 1000000;\n+static const size_t KB = 1000;\n+static const size_t PRECISION_MULTIPLIER = KB;\n \n extern const std::string CURRENCY_UNIT;\n \n@@ -36,7 +38,7 @@ inline bool MoneyRange(const CAmount& nValue) { return (nValue >= 0 && nValue <=\n class CFeeRate\n {\n private:\n-    CAmount nSatoshisPerK; // unit is satoshis-per-1,000-bytes\n+    CAmount nSatoshisPerK; //! unit is satoshis-per-PRECISION_MULTIPLIER-bytes\n public:\n     CFeeRate() : nSatoshisPerK(0) { }\n     explicit CFeeRate(const CAmount& _nSatoshisPerK): nSatoshisPerK(_nSatoshisPerK) { }\n@@ -49,7 +51,7 @@ class CFeeRate\n     /**\n      * Return the fee in satoshis for a size of 1000 bytes\n      */\n-    CAmount GetFeePerK() const { return GetFee(1000); }\n+    CAmount GetFeePerK() const { return GetFee(KB); }\n     friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n     friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n     friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }"
      }
    ]
  },
  {
    "sha": "1fb9edd156ad698f332189d8259438daa295020c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmI5ZWRkMTU2YWQ2OThmMzMyMTg5ZDgyNTk0MzhkYWEyOTUwMjBj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-20T20:02:15Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-21T15:56:30Z"
      },
      "message": "Fees: Tests: Check CFeeRate internal precision in mempool_tests.cpp",
      "tree": {
        "sha": "e2e801cd0cc0e0b48bd00b153e5e16c7655d7f33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2e801cd0cc0e0b48bd00b153e5e16c7655d7f33"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fb9edd156ad698f332189d8259438daa295020c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fb9edd156ad698f332189d8259438daa295020c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fb9edd156ad698f332189d8259438daa295020c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fb9edd156ad698f332189d8259438daa295020c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54bdbc1c595380091e077351dbfb14dd92ef9657",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54bdbc1c595380091e077351dbfb14dd92ef9657",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54bdbc1c595380091e077351dbfb14dd92ef9657"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "02744aee304a2c20fadb100fd2cda5a51bc473e6",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fb9edd156ad698f332189d8259438daa295020c/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fb9edd156ad698f332189d8259438daa295020c/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=1fb9edd156ad698f332189d8259438daa295020c",
        "patch": "@@ -566,11 +566,19 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/8);\n     // ... with a 1/4 halflife when mempool is < 1/4 its target size\n \n-    SetMockTime(42 + 7*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n+    unsigned i = 5;\n+    while (pool.GetMinFee(1).GetFeePerK() > (int)(2 * KB)) {\n+        SetMockTime(42 + (++i)*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n+    }\n+    // test increased stored precission in CFeeRate\n+    SetMockTime(42 + i * CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1557); // Change this value when changing PRECISION_MULTIPLIER\n+\n+    SetMockTime(42 + (i+1)*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1000);\n     // ... but feerate should never drop below 1000\n \n-    SetMockTime(42 + 8*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n+    SetMockTime(42 + (i+2)*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 0);\n     // ... unless it has gone all the way to 0 (after getting past 1000/2)\n "
      }
    ]
  },
  {
    "sha": "c8f9626cb86e631ddf79653161ad3635a478fc33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGY5NjI2Y2I4NmU2MzFkZGY3OTY1MzE2MWFkMzYzNWE0NzhmYzMz",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-20T22:04:22Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-21T15:56:30Z"
      },
      "message": "Rpc-tests: Prepare some tests for an increase in CFeeRate precision",
      "tree": {
        "sha": "0fec2c95b72a7ccf2ba00e5666debf737325e87d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0fec2c95b72a7ccf2ba00e5666debf737325e87d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8f9626cb86e631ddf79653161ad3635a478fc33",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8f9626cb86e631ddf79653161ad3635a478fc33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8f9626cb86e631ddf79653161ad3635a478fc33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8f9626cb86e631ddf79653161ad3635a478fc33/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fb9edd156ad698f332189d8259438daa295020c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fb9edd156ad698f332189d8259438daa295020c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fb9edd156ad698f332189d8259438daa295020c"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 14,
      "deletions": 7
    },
    "files": [
      {
        "sha": "34e6ef1887017e4597dade137e1adb629959f6d1",
        "filename": "qa/rpc-tests/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8f9626cb86e631ddf79653161ad3635a478fc33/qa/rpc-tests/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8f9626cb86e631ddf79653161ad3635a478fc33/qa/rpc-tests/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_limit.py?ref=c8f9626cb86e631ddf79653161ad3635a478fc33",
        "patch": "@@ -40,7 +40,7 @@ def run_test(self):\n         txid = self.nodes[0].sendrawtransaction(txFS['hex'])\n \n         relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-        base_fee = relayfee*100\n+        base_fee = relayfee*100 * TIMES_GREATER_PRECISION\n         for i in xrange (4):\n             txids.append([])\n             txids[i] = create_lots_of_big_transactions(self.nodes[0], self.txouts, utxos[30*i:30*i+30], (i+1)*base_fee)"
      },
      {
        "sha": "d6deb08bfccd709fd37628403a63c5cb1743398c",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8f9626cb86e631ddf79653161ad3635a478fc33/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8f9626cb86e631ddf79653161ad3635a478fc33/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=c8f9626cb86e631ddf79653161ad3635a478fc33",
        "patch": "@@ -103,7 +103,7 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n     all_estimates = [ node.estimatefee(i) for i in range(1,26) ]\n     if print_estimates:\n         print([str(all_estimates[e-1]) for e in [1,2,3,6,15,25]])\n-    delta = 1.0e-6 # account for rounding error\n+    delta = (1.0e-6) / TIMES_GREATER_PRECISION # account for rounding error\n     last_e = max(fees_seen)\n     for e in filter(lambda x: x >= 0, all_estimates):\n         # Estimates should be within the bounds of what transactions fees actually were:\n@@ -219,7 +219,7 @@ def transact_and_mine(self, numblocks, mining_node):\n                 from_index = random.randint(1,2)\n                 (txhex, fee) = small_txpuzzle_randfee(self.nodes[from_index], self.confutxo,\n                                                       self.memutxo, Decimal(\"0.005\"), min_fee, min_fee)\n-                tx_kbytes = (len(txhex)/2)/1000.0\n+                tx_kbytes = (len(txhex)/2)/(1000.0 * TIMES_GREATER_PRECISION)\n                 self.fees_per_kb.append(float(fee)/tx_kbytes)\n             sync_mempools(self.nodes[0:3],.1)\n             mined = mining_node.getblock(mining_node.generate(1)[0],True)[\"tx\"]"
      },
      {
        "sha": "25c8f9dcf0420db3dedd2f5a5117db8028f22910",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8f9626cb86e631ddf79653161ad3635a478fc33/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8f9626cb86e631ddf79653161ad3635a478fc33/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=c8f9626cb86e631ddf79653161ad3635a478fc33",
        "patch": "@@ -20,6 +20,12 @@\n from . import coverage\n from .authproxy import AuthServiceProxy, JSONRPCException\n \n+KB = 1000\n+# TODO inline the next two lines in PRECISION_MULTIPLIER\n+TIMES_GREATER_PRECISION = 1\n+DEPRECATED_IMPLICIT_CALLER_PRECISSION = KB\n+PRECISION_MULTIPLIER = DEPRECATED_IMPLICIT_CALLER_PRECISSION * TIMES_GREATER_PRECISION\n+\n COVERAGE_DIR = None\n \n #Set Mocktime default to OFF."
      },
      {
        "sha": "3f92f57a2570a5f525105d557fa5140725d69060",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8f9626cb86e631ddf79653161ad3635a478fc33/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8f9626cb86e631ddf79653161ad3635a478fc33/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=c8f9626cb86e631ddf79653161ad3635a478fc33",
        "patch": "@@ -10,12 +10,13 @@ class WalletTest (BitcoinTestFramework):\n \n     def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n         \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n+        precision_fee = fee_per_byte * TIMES_GREATER_PRECISION\n         fee = balance_with_fee - curr_balance\n-        target_fee = fee_per_byte * tx_size\n+        target_fee = precision_fee * tx_size\n         if fee < target_fee:\n             raise AssertionError(\"Fee of %s BTC too low! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n         # allow the node's estimation to be at most 2 bytes off\n-        if fee > fee_per_byte * (tx_size + 2):\n+        if fee > precision_fee * (tx_size + 2):\n             raise AssertionError(\"Fee of %s BTC too high! (Should be %s BTC)\"%(str(fee), str(target_fee)))\n         return curr_balance\n \n@@ -107,8 +108,8 @@ def run_test (self):\n \n         # Send 10 BTC normal\n         address = self.nodes[0].getnewaddress(\"test\")\n-        fee_per_byte = Decimal('0.001') / 1000\n-        self.nodes[2].settxfee(fee_per_byte * 1000)\n+        fee_per_byte = Decimal('0.001') / KB\n+        self.nodes[2].settxfee(fee_per_byte * KB)\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n         self.sync_all()"
      }
    ]
  },
  {
    "sha": "f8ff32167756bd50235b00a58c223df1a564c171",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGZmMzIxNjc3NTZiZDUwMjM1YjAwYTU4YzIyM2RmMWE1NjRjMTcx",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-20T22:45:59Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-21T16:30:17Z"
      },
      "message": "SUBOPTIMAL: CFeRate Get ready for *2 in some low disruption dumb way",
      "tree": {
        "sha": "f71af4f0c1ac77f72a8f58aa1b09276970f3a1d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f71af4f0c1ac77f72a8f58aa1b09276970f3a1d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8ff32167756bd50235b00a58c223df1a564c171",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8ff32167756bd50235b00a58c223df1a564c171",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8ff32167756bd50235b00a58c223df1a564c171",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8ff32167756bd50235b00a58c223df1a564c171/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8f9626cb86e631ddf79653161ad3635a478fc33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8f9626cb86e631ddf79653161ad3635a478fc33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8f9626cb86e631ddf79653161ad3635a478fc33"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 39,
      "deletions": 8
    },
    "files": [
      {
        "sha": "652168043fdf4aa2cc8902ade88f28d04b7d9f05",
        "filename": "src/amount.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 6,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ff32167756bd50235b00a58c223df1a564c171/src/amount.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ff32167756bd50235b00a58c223df1a564c171/src/amount.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.cpp?ref=f8ff32167756bd50235b00a58c223df1a564c171",
        "patch": "@@ -17,17 +17,42 @@ CFeeRate::CFeeRate(const CAmount& nFeePaid, size_t nSize)\n         nSatoshisPerK = 0;\n }\n \n-CAmount CFeeRate::GetFee(size_t nSize) const\n+CAmount CFeeRate::GetFee(size_t nSize, size_t nPerByteDivisor) const\n {\n-    CAmount nFee = nSatoshisPerK * nSize / PRECISION_MULTIPLIER;\n-\n-    if (nFee == 0 && nSize != 0 && nSatoshisPerK > 0)\n-        nFee = CAmount(1);\n+    size_t extra_divisor = 1;\n+    size_t extra_multiplier = 1;\n+\n+    // Example for thought: PRECISION_MULTIPLIER == KB, but nPerByteDivisor=MB\n+    // We divide less as requested by the caller\n+    if (nPerByteDivisor > PRECISION_MULTIPLIER) {\n+        assert(false); // TODO Unittest required for this execution branch to be executed\n+        assert(nPerByteDivisor % PRECISION_MULTIPLIER == 0); // nPerByteDivisor must be multiple of PRECISION_MULTIPLIER\n+        extra_multiplier = nPerByteDivisor / PRECISION_MULTIPLIER;\n+    }\n+    // Example for thought: PRECISION_MULTIPLIER == MB, but nPerByteDivisor=KB\n+    // In this case we truncate more of what wasn't truncated previously\n+    else if (nPerByteDivisor < PRECISION_MULTIPLIER) {\n+        assert(PRECISION_MULTIPLIER % nPerByteDivisor == 0); // PRECISION_MULTIPLIER must be multiple of nPerByteDivisor\n+        extra_divisor = PRECISION_MULTIPLIER / nPerByteDivisor;\n+    }\n+\n+    CAmount nFee = nSatoshisPerK * nSize / (PRECISION_MULTIPLIER * extra_multiplier / extra_divisor);\n+\n+    // Removing this special case and handling zeroes uniformingly\n+    // from the caller would allow some simplifications in this function\n+    if (nFee == 0 && nSize != 0) {\n+        const size_t nSatoshisPerByteDivisor = nSatoshisPerK * extra_multiplier / extra_divisor;\n+        if (nSatoshisPerByteDivisor > 0)\n+            nFee = CAmount(1);\n+    }\n+    // if (nFee == 0 && nSize != 0 && nSatoshisPerK > 0)\n+    //     nFee = CAmount(1);\n \n     return nFee;\n }\n \n std::string CFeeRate::ToString() const\n {\n-    return strprintf(\"%d.%08d %s/kB\", nSatoshisPerK / COIN, nSatoshisPerK % COIN, CURRENCY_UNIT);\n+    CAmount nFee = GetFee(KB, KB);\n+    return strprintf(\"%d.%08d %s/kB\", nFee / COIN, nFee % COIN, CURRENCY_UNIT);\n }"
      },
      {
        "sha": "774d0f15da226027489bc169db41d8ee27252535",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ff32167756bd50235b00a58c223df1a564c171/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ff32167756bd50235b00a58c223df1a564c171/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=f8ff32167756bd50235b00a58c223df1a564c171",
        "patch": "@@ -46,12 +46,18 @@ class CFeeRate\n     CFeeRate(const CFeeRate& other) { nSatoshisPerK = other.nSatoshisPerK; }\n     /**\n      * Return the fee in satoshis for the given size in bytes.\n+     * @param nPerByteDivisor Can be different from PRECISION_MULTIPLIER to get\n+     * bigger numbers (for example) Default: KB.\n      */\n-    CAmount GetFee(size_t size) const;\n+    CAmount GetFee(size_t size, size_t nPerByteDivisor=KB) const;\n     /**\n      * Return the fee in satoshis for a size of 1000 bytes\n      */\n-    CAmount GetFeePerK() const { return GetFee(KB); }\n+    CAmount GetFeePerK() const { return GetFee(KB, KB); }\n+    /**\n+     * Return the fee in satoshis for a size of PRECISION_MULTIPLIER bytes\n+     */\n+    CAmount GetInternalRate() const { return GetFee(KB, PRECISION_MULTIPLIER); }\n     friend bool operator<(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK < b.nSatoshisPerK; }\n     friend bool operator>(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK > b.nSatoshisPerK; }\n     friend bool operator==(const CFeeRate& a, const CFeeRate& b) { return a.nSatoshisPerK == b.nSatoshisPerK; }"
      }
    ]
  },
  {
    "sha": "14c93b708ea8a0203ab23a7aea5dcf06ee24fc20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGM5M2I3MDhlYThhMDIwM2FiMjNhN2FlYTVkY2YwNmVlMjRmYzIw",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-21T15:16:52Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-03-21T16:30:43Z"
      },
      "message": "Change: Double CFeeRate internal precision",
      "tree": {
        "sha": "bb425e26e73f5da765016ea87c09f6ccdbfeb99d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb425e26e73f5da765016ea87c09f6ccdbfeb99d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14c93b708ea8a0203ab23a7aea5dcf06ee24fc20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14c93b708ea8a0203ab23a7aea5dcf06ee24fc20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14c93b708ea8a0203ab23a7aea5dcf06ee24fc20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14c93b708ea8a0203ab23a7aea5dcf06ee24fc20/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8ff32167756bd50235b00a58c223df1a564c171",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8ff32167756bd50235b00a58c223df1a564c171",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8ff32167756bd50235b00a58c223df1a564c171"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8a3a32df6d039759f36a48c392f06bda4589ffba",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14c93b708ea8a0203ab23a7aea5dcf06ee24fc20/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14c93b708ea8a0203ab23a7aea5dcf06ee24fc20/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=14c93b708ea8a0203ab23a7aea5dcf06ee24fc20",
        "patch": "@@ -22,7 +22,7 @@\n \n KB = 1000\n # TODO inline the next two lines in PRECISION_MULTIPLIER\n-TIMES_GREATER_PRECISION = 1\n+TIMES_GREATER_PRECISION = 2\n DEPRECATED_IMPLICIT_CALLER_PRECISSION = KB\n PRECISION_MULTIPLIER = DEPRECATED_IMPLICIT_CALLER_PRECISSION * TIMES_GREATER_PRECISION\n "
      },
      {
        "sha": "141ecfb836cd63a7c42635dd1d638f91cc7f7ef1",
        "filename": "src/amount.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14c93b708ea8a0203ab23a7aea5dcf06ee24fc20/src/amount.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14c93b708ea8a0203ab23a7aea5dcf06ee24fc20/src/amount.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/amount.h?ref=14c93b708ea8a0203ab23a7aea5dcf06ee24fc20",
        "patch": "@@ -16,7 +16,7 @@ typedef int64_t CAmount;\n static const CAmount COIN = 100000000;\n static const CAmount CENT = 1000000;\n static const size_t KB = 1000;\n-static const size_t PRECISION_MULTIPLIER = KB;\n+static const size_t PRECISION_MULTIPLIER = KB*2;\n \n extern const std::string CURRENCY_UNIT;\n "
      },
      {
        "sha": "8245fa59ba9ca9c5d7f59a1bbe0f15cce88fb424",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14c93b708ea8a0203ab23a7aea5dcf06ee24fc20/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14c93b708ea8a0203ab23a7aea5dcf06ee24fc20/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=14c93b708ea8a0203ab23a7aea5dcf06ee24fc20",
        "patch": "@@ -566,13 +566,13 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     BOOST_CHECK_EQUAL(pool.GetMinFee(pool.DynamicMemoryUsage() * 9 / 2).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/8);\n     // ... with a 1/4 halflife when mempool is < 1/4 its target size\n \n-    unsigned i = 5;\n+    unsigned i = 6;\n     while (pool.GetMinFee(1).GetFeePerK() > (int)(2 * KB)) {\n         SetMockTime(42 + (++i)*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n     }\n     // test increased stored precission in CFeeRate\n     SetMockTime(42 + i * CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n-    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1557); // Change this value when changing PRECISION_MULTIPLIER\n+    BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1554); // Change this value when changing PRECISION_MULTIPLIER\n \n     SetMockTime(42 + (i+1)*CTxMemPool::ROLLING_FEE_HALFLIFE + CTxMemPool::ROLLING_FEE_HALFLIFE/2 + CTxMemPool::ROLLING_FEE_HALFLIFE/4);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), 1000);"
      }
    ]
  }
]