practicalswift,2019-08-08 07:26:15,"Concept ACK\n\nThanks for cleaning this up.\n\nWill review the code.\n\n> I don't think the optimization that the pre-refactor state gave warrants the unwieldy usage.\n\nVery much so. (Also unclear if the pre-refactor state is a meaningful optimisation in practice.)",https://github.com/bitcoin/bitcoin/pull/16566#issuecomment-519401846,519401846,
Sjors,2019-08-08 08:33:07,Concept ACK for improved readability and usability.,https://github.com/bitcoin/bitcoin/pull/16566#issuecomment-519423777,519423777,
laanwj,2019-08-08 09:43:02,"Concept ACK having these as functions seems better than doing the transformation in-place\n\n> Additionally, it clarifies that the locale independency of the case functions is a feature and not a limitation\n\nYes, please do not ever add any locale dependent code to `bitcoind`. Deterministic behavior is the most important thing there (it's okay for `bitcoin-qt` but only for UI purposes). ",https://github.com/bitcoin/bitcoin/pull/16566#issuecomment-519448017,519448017,
luke-jr,2019-08-08 16:00:06,"While there are cases where `Downcase` was unwieldy used, I don't think it is unwieldy as a rule, and there's no real reason to go out of the way to make things less efficient. The new functions can be added without making other code worse.",https://github.com/bitcoin/bitcoin/pull/16566#issuecomment-519580760,519580760,
laanwj,2019-08-08 22:36:17,"> I think we should create a ToLower that returns the result when we actually need it (and even then - as in boost for example - it could make sense to have both functions).\n\nHaving two sets of uppercase/lowercase functions would be overkill, especially given how little they are used. Efficiency isn't a point, either, because where they are used only, like, a single time per invocation of the ",https://github.com/bitcoin/bitcoin/pull/16566#issuecomment-519712083,519712083,
l2a5b1,2019-08-08 23:46:45,"@laanwj thanks, appreciate the feedback.\n\n>  Having two sets of uppercase/lowercase functions would be overkill, especially given how little they are used.\n\nThere are no two sets of uppercase/lowercase functions and it is also not what I did propose.\n\n> The new way is imo not more unwieldy, definitely not if you need to keep the old string.\n\nThe code at the call sites does **not** ",https://github.com/bitcoin/bitcoin/pull/16566#issuecomment-519726458,519726458,
laanwj,2019-08-08 23:56:22,"Right, okay, I'm not going to argue this any further\n\nACK 0481fa25844dc6ec9f6c3fac8428d874d34b0ad0 from me",https://github.com/bitcoin/bitcoin/pull/16566#issuecomment-519728153,519728153,
kallewoof,2019-08-09 00:56:55,"@l2a5b1 \n\nThanks for your feedback. The function (`Downcase()`) is used in one single place, and its behavior is not as anyone would expect, because someone at some point thought in-place replacement would be an optimization worthy of going for. I disagree, and as you can see, others here disagree as well.\n\nGenerally speaking, if you have a choice between straight-forward/expected behavior",https://github.com/bitcoin/bitcoin/pull/16566#issuecomment-519738508,519738508,
practicalswift,2019-08-09 07:21:47,"ACK 0481fa25844dc6ec9f6c3fac8428d874d34b0ad0 -- diff looks correct\n\nAgree fully with @kallewoof and @laanwj regarding the choice between ""straight-forward/expected"" vs ""unexpected-but-optimized"" for code paths that are not performance critical.",https://github.com/bitcoin/bitcoin/pull/16566#issuecomment-519810331,519810331,
l2a5b1,2019-08-09 16:20:54,"@kallewoof thanks! :)\n\nACK 0481fa2 - Although, I think @luke-jr's [feedback](https://github.com/bitcoin/bitcoin/pull/16566#issuecomment-519580760) is spot on; `Downcase` is just an artifact of `ParseNetwork`, which has been happily downcasing `net` via a string argument for over 7 years; and I do recommend to add `ToLower` *when* somebody actually needs it in new work, there is no point in kee",https://github.com/bitcoin/bitcoin/pull/16566#issuecomment-519979739,519979739,
promag,2019-08-12 22:54:30,ACK 0481fa25844dc6ec9f6c3fac8428d874d34b0ad0.,https://github.com/bitcoin/bitcoin/pull/16566#issuecomment-520624319,520624319,
promag,2019-08-08 10:31:56,"Could reserve, same below.",https://github.com/bitcoin/bitcoin/pull/16566#discussion_r311965823,311965823,src/util/strencodings.cpp
promag,2019-08-08 10:34:32,Could be `net = ToLower(net)` and avoid changing the signature? Both are fine though.,https://github.com/bitcoin/bitcoin/pull/16566#discussion_r311966782,311966782,src/netbase.cpp
laanwj,2019-08-08 11:04:21,Changing the signature is an improvement here IMO,https://github.com/bitcoin/bitcoin/pull/16566#discussion_r311977205,311977205,src/netbase.cpp
kallewoof,2019-08-08 13:45:10,What does that mean?,https://github.com/bitcoin/bitcoin/pull/16566#discussion_r312042876,312042876,src/util/strencodings.cpp
promag,2019-08-08 13:49:59,See http://www.cplusplus.com/reference/string/string/reserve/.,https://github.com/bitcoin/bitcoin/pull/16566#discussion_r312045441,312045441,src/util/strencodings.cpp
l2a5b1,2019-08-08 17:16:09,">  I don't think the optimization that the pre-refactor state gave warrants the unwieldy usage.\n\nIt seems to me that the usage of the refactored function is more unwieldy than the pre-refactor state. \n\n`Downcase(net)` straightforwardly downcases the string. The refactored-state needs two variables (`const std::string& net_in`, `std::string net`) and an assignment to achieve the same result",https://github.com/bitcoin/bitcoin/pull/16566#discussion_r312149643,312149643,src/netbase.cpp
l2a5b1,2019-08-08 17:23:07,What is the significant developer benefit of this change and why is the required in preparation for #11413? This function is called at just two call sites and the pre-refactor state expects that the argument is directly transformed.,https://github.com/bitcoin/bitcoin/pull/16566#discussion_r312152510,312152510,src/util/strencodings.cpp
l2a5b1,2019-08-08 18:37:46,Pre-refactor this would just be `Downcase(key)`.,https://github.com/bitcoin/bitcoin/pull/16566#discussion_r312186110,312186110,src/util/system.cpp
practicalswift,2019-08-08 20:36:08,"@promag I don't think using `r.reserve(str.size());` necessarily results in faster execution here. I think it depends on the SSO implementation and the length of `str`.\n\nIf `str.size() <= 15`  I think **not** using `reserve` is faster when using libstdc++ or MSVC. And `str.size() <= 22` for libc++.",https://github.com/bitcoin/bitcoin/pull/16566#discussion_r312231493,312231493,src/util/strencodings.cpp
promag,2019-08-08 20:48:51,"Right, but I'm not particularly worried about performance, i think it improves the code.",https://github.com/bitcoin/bitcoin/pull/16566#discussion_r312236376,312236376,src/util/strencodings.cpp
kallewoof,2019-08-09 00:47:59,"Reserving seems sensible. It would actually slow down the code, @practicalswift ? Crazy. \nI would have never expected that. I'm indifferent on this, though, and opinions are mixed so leaving as is for now.",https://github.com/bitcoin/bitcoin/pull/16566#discussion_r312296087,312296087,src/util/strencodings.cpp
practicalswift,2019-08-14 19:40:58,"@kallewoof You can test this using the following Google Benchmark snippet:\n\n```\n#include <algorithm>\n#include <string>\n\nconstexpr char ToLower(char c) {\n    return (c >= 'A' && c <= 'Z' ? (c - 'A') + 'a' : c);\n}\n\nstd::string ToLower_1(const std::string& str) {\n    std::string r;\n    for (auto ch : str) {\n        r += ToLower((unsigned char)ch);\n    }\n    return r;\n}",https://github.com/bitcoin/bitcoin/pull/16566#discussion_r314049604,314049604,src/util/strencodings.cpp
kallewoof,2019-08-15 06:36:35,"@practicalswift Thanks for that! Very educational. Memory allocations are tricky to optimize, I guess. :)",https://github.com/bitcoin/bitcoin/pull/16566#discussion_r314189528,314189528,src/util/strencodings.cpp
