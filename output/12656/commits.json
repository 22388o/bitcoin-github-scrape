[
  {
    "sha": "65418eaffce16bdf577d507342778747e4746938",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTQxOGVhZmZjZTE2YmRmNTc3ZDUwNzM0Mjc3ODc0N2U0NzQ2OTM4",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2018-03-07T15:59:23Z"
      },
      "committer": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2018-03-14T21:51:06Z"
      },
      "message": "Add gitian-based, vagrant VM build system to enable building on any operating system platform.",
      "tree": {
        "sha": "9a18324a6ff86df4d23574f3ba627eb985017764",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a18324a6ff86df4d23574f3ba627eb985017764"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65418eaffce16bdf577d507342778747e4746938",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65418eaffce16bdf577d507342778747e4746938",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65418eaffce16bdf577d507342778747e4746938",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65418eaffce16bdf577d507342778747e4746938/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29fad97c320c892ab6a480c81e2078ec22ab354b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29fad97c320c892ab6a480c81e2078ec22ab354b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29fad97c320c892ab6a480c81e2078ec22ab354b"
      }
    ],
    "stats": {
      "total": 1022,
      "additions": 1022,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2f5124446269c1fb586799571e870072a7282b4e",
        "filename": "contrib/vagrant/.gitignore",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/vagrant/.gitignore?ref=65418eaffce16bdf577d507342778747e4746938",
        "patch": "@@ -0,0 +1,9 @@\n+cache\n+cache/*\n+output\n+output/*\n+packer_cache\n+packer_cache/\n+.stamp-*\n+.*.manifest\n+.vagrant"
      },
      {
        "sha": "6ee454d261f3281e2637dba86a7ebbda31d680ba",
        "filename": "contrib/vagrant/Makefile",
        "status": "added",
        "additions": 516,
        "deletions": 0,
        "changes": 516,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/vagrant/Makefile?ref=65418eaffce16bdf577d507342778747e4746938",
        "patch": "@@ -0,0 +1,516 @@\n+#\n+# Copyright \u00a9 2011-2018 Bitcoin Developers.\n+#\n+# Permission is hereby granted, free of charge, to any person obtaining a copy\n+# of this software and associated documentation files (the \"Software\"), to deal\n+# in the Software without restriction, including without limitation the rights\n+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+# copies of the Software, and to permit persons to whom the Software is\n+# furnished to do so, subject to the following conditions:\n+#\n+# The above copyright notice and this permission notice shall be included in\n+# all copies or substantial portions of the Software.\n+#\n+# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+# THE SOFTWARE.\n+#\n+\n+MAKEFILE := $(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))\n+\n+PROJECT  := bitcoin\n+\n+SHELL    := $(shell bash --help >/dev/null 2>&1 && echo ba)sh\n+\n+AWK      := $(shell gawk --help >/dev/null 2>&1 && echo g)awk\n+GREP     := $(shell egrep --help >/dev/null 2>&1 && echo e)grep\n+PATCH    := $(shell gpatch --help >/dev/null 2>&1 && echo g)patch\n+SED      := $(shell gsed --help >/dev/null 2>&1 && echo g)sed\n+WGET     := wget --no-check-certificate \\\n+                 --user-agent=$(shell wget --version | \\\n+            $(SED) -n 's,GNU \\(Wget\\) \\([0-9.]*\\).*,\\1/\\2,p')\n+\n+REQUIREMENTS := $(AWK) $(SHELL) diff find $(GREP) gzip $(MAKE) openssl\t\\\n+                packer $(PATCH) $(SED) sort tar vagrant xargs xz\t\\\n+                $(word 1,$(WGET))\n+\n+BUILD_MANIFEST = cd '$(shell dirname '$(MAKEFILE)')'/../.. && \\\n+\tfind $(1) -print0 | \\\n+\txargs -0 -n1 openssl sha256 2>/dev/null | \\\n+\topenssl sha256 | \\\n+\t$(SED) -n 's,^.*\\([0-9a-f]\\{64\\}\\),\\1,p'\n+\n+VALIDATE_MANIFEST = \\\n+\tif [ -f \"$(1)\" ] && echo \"$(2)\" | diff \"$(1)\" - 2>&1 >/dev/null; then \\\n+\t    rm -f \"$(1)\"; \\\n+\tfi\n+\n+# ===----------------------------------------------------------------------===\n+\n+PKGS            :=\n+CACHE_DIR       := cache\n+HOST_CACHE_DIR  := $(CACHE_DIR)\n+GUEST_CACHE_DIR := /vagrant/$(CACHE_DIR)\n+\n+SOURCEFORGE_MIRROR := downloads.sourceforge.net\n+\n+PKG             := osslsigncode-1.7.1.tar.gz\n+$(PKG)_CHECKSUM := cc5a7e0c5baa2a98db93f1d2cc9d86e732e2a8a55fc20bf8e6aa67e2120af37c6be857dfe4b8eb8c82fd40604dbb3c845190b59c7e6b4147f06b710a256b877f\n+$(PKG)_URL      := http://$(SOURCEFORGE_MIRROR)/project/osslsigncode/osslsigncode/$(PKG)\n+PKGS            += $(PKG)\n+\n+PKG             := osslsigncode-Backports-to-1.7.1.patch\n+$(PKG)_CHECKSUM := 182127638206492a609b4f909465b702f7fa89b3cd69f08f86a2efde86dbe597081fb0fd862560fac89e85baf74976c9bcb6b56d17f0e9015ea0c7e33cae1e3a\n+$(PKG)_URL      := http://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n+PKGS            += $(PKG)\n+\n+# ===----------------------------------------------------------------------===\n+\n+VAGRANT_UP = \\\n+\tvagrant up\n+\n+VAGRANT_HALT = \\\n+\tvagrant halt\n+\n+VAGRANT_RELOAD = \\\n+\tvagrant reload\n+\n+VAGRANT_DESTROY = \\\n+\tvagrant destroy --force\n+\n+# ===----------------------------------------------------------------------===\n+\n+.PHONY: all\n+all: linux osx win\n+\n+.PHONY: mostlyclean\n+mostlyclean:\n+\n+.PHONY: clean\n+clean: mostlyclean\n+\t-rm -rf box\n+\t-rm -rf output\n+\t-rm -f .stamp-*\n+\t-$(call VAGRANT_DESTROY)\n+\t-rm -rf .vagrant\n+\n+.PHONY: distclean\n+distclean: clean\n+\t-rm -rf cache\n+\t-rm -rf output-gitian-host-xenial64\n+\t-rm -rf packer_cache\n+\n+.PHONY: maintainer-clean\n+maintainer-clean: distclean\n+\t@echo 'This command is intended for maintainers to use; it'\n+\t@echo 'deletes files that may need special tools to rebuild.'\n+\n+.PHONY: dist\n+dist: all\n+\n+# ===----------------------------------------------------------------------===\n+\n+.PHONY: check-requirements\n+define CHECK_REQUIREMENT\n+\t@if ! $(1) --help &>/dev/null; then \\\n+\t    if ! which $(1) &>/dev/null; then \\\n+\t        echo; \\\n+\t        echo 'Missing requirement: $(1)'; \\\n+\t        echo; \\\n+\t        echo 'Please have a look at \"README\" to ensure'; \\\n+\t        echo 'that your system meets all requirements.'; \\\n+\t        echo; \\\n+\t        exit 1; \\\n+\t    fi; \\\n+\tfi\n+\n+endef\n+define CHECK_REQUIREMENT_VERSION\n+\t@if ! $(1) --version | head -1 | grep ' \\($(2)\\)$$' >/dev/null; then \\\n+\t    echo; \\\n+\t    echo 'Wrong version of requirement: $(1)'; \\\n+\t    echo; \\\n+\t    echo 'Please have a look at \"README\" to ensure'; \\\n+\t    echo 'that your system meets all requirements.'; \\\n+\t    echo; \\\n+\t    exit 1; \\\n+\tfi\n+\n+endef\n+check-requirements: .stamp-check-requirements.h\n+.stamp-check-requirements.h: $(MAKEFILE)\n+\t@echo '[check requirements]'\n+\t$(foreach REQUIREMENT,$(REQUIREMENTS),$(call CHECK_REQUIREMENT,$(REQUIREMENT)))\n+\t$(call CHECK_REQUIREMENT_VERSION,vagrant,[2-9]\\.[0-9]\\.[0-9])\n+\t@touch \"$@\"\n+\n+# ===----------------------------------------------------------------------===\n+\n+.PHONY: download\n+download: $(addprefix download-,$(PKGS)) download-depends\n+\n+.PHONY: download-depends\n+download-depends: .stamp-download-depends.h\n+.stamp-download-depends.h: $(HOST_CACHE_DIR)/src-local.manifest\n+\tmkdir -p cache/gitian/cache/common\n+\tmake -C ../../depends download SOURCES_PATH=\"`pwd`/cache/gitian/cache/common\"\n+\t@touch \"$@\"\n+\n+PKG_CHECKSUM = \\\n+\topenssl sha512 '$(HOST_CACHE_DIR)/$(1)' 2>/dev/null | $(SED) -n 's,^.*\\([0-9a-f]\\{128\\}\\)$$,\\1,p'\n+\n+CHECK_PKG_ARCHIVE = \\\n+\t[ x'$($(1)_CHECKSUM)' == x\"`$$(call PKG_CHECKSUM,$(1))`\" ]\n+\n+DOWNLOAD_PKG_ARCHIVE = \\\n+\tmkdir -p '$(HOST_CACHE_DIR)' && \\\n+\t$(if $($(1)_URL_2), \\\n+\t    ( $(WGET) -T 30 -t 3 -O- '$($(1)_URL)' || $(WGET) -O- '$($(1)_URL_2)' ), \\\n+\t    $(WGET) -O- '$($(1)_URL)') \\\n+\t$(if $($(1)_FIX_GZIP), \\\n+\t    | gzip -d | gzip -9n, \\\n+\t    ) \\\n+\t> '$(HOST_CACHE_DIR)/$(1)'\n+\n+define PKG_RULE\n+.PHONY: download-$(1)\n+download-$(1): $(HOST_CACHE_DIR)/$(1)\n+$(HOST_CACHE_DIR)/$(1): .stamp-check-requirements.h\n+\t@echo -n \"Checking cached package $(1)... \"; \\\n+\tif ! $(call CHECK_PKG_ARCHIVE,$(1)); then \\\n+\t\techo \"failed\"; \\\n+\t     $(call DOWNLOAD_PKG_ARCHIVE,$(1)); \\\n+\t     $(call CHECK_PKG_ARCHIVE,$(1)) \\\n+\t        || { echo 'Wrong checksum!'; exit 1; }; \\\n+\telse \\\n+\t\techo \"ok\"; \\\n+\tfi\n+\n+endef\n+$(foreach PKG,$(PKGS),$(eval $(call PKG_RULE,$(PKG))))\n+\n+# ===----------------------------------------------------------------------===\n+\n+GITIAN_HOST_FILES    := contrib/vagrant/Makefile \\\n+                        contrib/vagrant/gitian-host.json \\\n+                        contrib/vagrant/config/preseed.cfg \\\n+                        contrib/vagrant/config/vagrant.sh \\\n+                        contrib/vagrant/config/sshd.sh \\\n+                        contrib/vagrant/config/packages.sh \\\n+                        contrib/vagrant/config/cleanup.sh \\\n+                        contrib/vagrant/Vagrantfile\n+GITIAN_HOST_FILES    := $(sort $(GITIAN_HOST_FILES))\n+GITIAN_HOST_MANIFEST := $(shell $(call BUILD_MANIFEST,$(GITIAN_HOST_FILES)))\n+\n+_ := $(shell $(call \\\n+\tVALIDATE_MANIFEST, \\\n+\t.stamp-gitian-host.manifest, \\\n+\t$(GITIAN_HOST_MANIFEST) \\\n+))\n+\n+.PHONY: gitian-host\n+gitian-host: .stamp-gitian-host.manifest\n+.stamp-gitian-host.manifest: \\\n+\t.stamp-check-requirements.h \\\n+\t$(foreach FILE,$(GITIAN_HOST_FILES),$(shell echo $(FILE) | $(SED) 's:^contrib/vagrant/::g'))\n+\t\n+\t-$(call VAGRANT_DESTROY)\n+\t\n+\t# Remove any temporary files from interupted builds that would\n+\t# interfere if present.\n+\tif [ -e output-gitian-host-xenial64 ]; then \\\n+\t    rm -rf output-gitian-host-xenial64; \\\n+\tfi\n+\t\n+\tpacker build gitian-host.json\n+\tvagrant box add --name gitian-host-xenial64 --force box/virtualbox/gitian-host-xenial64-0.box\n+\t-rm -rf box\n+\t\n+\t$(call VAGRANT_UP)\n+\t\n+\t-$(call VAGRANT_HALT)\n+\t\n+\techo $(GITIAN_HOST_MANIFEST) > \"$@\"\n+\n+# ===----------------------------------------------------------------------===\n+\n+LXC_BASE_FILES    := contrib/vagrant/Makefile\n+LXC_BASE_FILES    := $(sort $(LXC_BASE_FILES))\n+LXC_BASE_MANIFEST := $(shell $(call BUILD_MANIFEST,$(LXC_BASE_FILES)))\n+\n+_ := $(shell $(call \\\n+\tVALIDATE_MANIFEST, \\\n+\t.stamp-lxc-base.manifest, \\\n+\t$(LXC_BASE_MANIFEST) \\\n+))\n+\n+.PHONY: lxc-base\n+lxc-base: .stamp-lxc-base.manifest\n+.stamp-lxc-base.manifest: \\\n+\t.stamp-gitian-host.manifest \\\n+\t$(foreach FILE,$(LXC_BASE_FILES),$(shell echo $(FILE) | $(SED) 's:^contrib/vagrant/::g'))\n+\t\n+\t$(call VAGRANT_UP)\n+\t\n+\tvagrant ssh --command \"\\\n+\t    if [ -d ~/gitian-builder ]; then \\\n+\t        rm -rf ~/gitian-builder; \\\n+\t    fi\"\n+\tvagrant ssh --command \"\\\n+\t    git clone 'https://github.com/devrandom/gitian-builder' ~/gitian-builder\"\n+\tvagrant ssh --command \"cd ~/gitian-builder && \\\n+\t    git checkout e2172de8\"\n+\tvagrant ssh --command \"cd ~/gitian-builder && \\\n+\t    ln -s $(GUEST_CACHE_DIR) inputs\"\n+\t\n+\tvagrant ssh --command \"\\\n+\t    cd ~/gitian-builder; \\\n+\t    if [ ! -f $(GUEST_CACHE_DIR)/lxc-base/$(LXC_BASE_MANIFEST)/base-vm.tar.gz ]; then \\\n+\t        env LXC_BRIDGE=lxcbr0 LXC_GUEST_IP=10.0.3.2 _HOST_IP=10.0.3.1 \\\n+\t            bin/make-base-vm --lxc --suite trusty --arch amd64 || exit 1; \\\n+\t        for vm in base-*; do \\\n+\t            tar -Srvf base-vm.tar $$vm || exit 1; \\\n+\t            rm -f $$vm; \\\n+\t        done; \\\n+\t        gzip --fast base-vm.tar || exit 1; \\\n+\t        mkdir -p $(GUEST_CACHE_DIR)/lxc-base/$(LXC_BASE_MANIFEST) || exit 1; \\\n+\t        rsync -av --remove-source-files base-vm.tar.gz $(GUEST_CACHE_DIR)/lxc-base/$(LXC_BASE_MANIFEST); \\\n+\t        tar -tf $(GUEST_CACHE_DIR)/lxc-base/$(LXC_BASE_MANIFEST)/base-vm.tar.gz || \\\n+\t            rm -rf $(GUEST_CACHE_DIR)/lxc-base/$(LXC_BASE_MANIFEST); \\\n+\t    fi; \\\n+\t    tar -Sxzvf $(GUEST_CACHE_DIR)/lxc-base/$(LXC_BASE_MANIFEST)/base-vm.tar.gz\"\n+\t\n+ifdef VAGRANT_CYCLE\n+\t-$(call VAGRANT_HALT)\n+endif\n+\t\n+\techo $(LXC_BASE_MANIFEST) > \"$@\"\n+\n+# ===----------------------------------------------------------------------===\n+\n+ifeq ($(shell git log -1 2>&1 >/dev/null && echo true),true)\n+SOURCE_FILES := $(shell \\\n+\tgit ls-tree --name-only --full-tree -r `git log -1 --format=\"%H\"` \\\n+\t    | $(GREP) -v '^contrib/vagrant/' \\\n+\t    | sort)\n+else\n+SOURCE_FILES := $(shell cd ../.. && \\\n+\tfind -L . -type f -print \\\n+\t    | $(SED) 's:^\\./::g' \\\n+\t    | $(GREP) -v '^\\.git/' \\\n+\t    | $(GREP) -v '^contrib/vagrant/' \\\n+\t    | sort)\n+endif\n+\n+SOURCE_MANIFEST := $(shell $(call BUILD_MANIFEST,$(SOURCE_FILES)))\n+\n+_ := $(shell $(call \\\n+\tVALIDATE_MANIFEST, \\\n+\t$(HOST_CACHE_DIR)/src-local.manifest, \\\n+\t$(SOURCE_MANIFEST) \\\n+))\n+\n+.PHONY: bundle-source\n+bundle-source: $(HOST_CACHE_DIR)/src-local.manifest\n+$(HOST_CACHE_DIR)/src-local.manifest: $(HOST_CACHE_DIR)/src-local.tar.xz\n+\t@echo $(SOURCE_MANIFEST) >'$@'\n+$(HOST_CACHE_DIR)/src-local.tar.xz: \\\n+\t$(foreach FILE,$(SOURCE_FILES),$(shell echo $(FILE) | $(SED) 's:^:../../:g'))\n+\t\n+\tmkdir -p '$(HOST_CACHE_DIR)'\n+\trm -f '$(HOST_CACHE_DIR)'/src-local.{tar,tar.xz}\n+\tif git log -1 2>&1 >> /dev/null && [ -z \"$(shell git status --untracked-files=no --porcelain)\" ]; then \\\n+\t    pushd ../../; \\\n+\t    git archive HEAD --format tar --output contrib/vagrant/'$(HOST_CACHE_DIR)'/src-local.tar; \\\n+\t    popd; \\\n+\telse \\\n+\t    COPYFILE_DISABLE=1 tar -C ../.. -rf '$(HOST_CACHE_DIR)'/src-local.tar $(SOURCE_FILES); \\\n+\tfi\n+\txz '$(HOST_CACHE_DIR)'/src-local.tar\n+\techo \"Gitian Builder\" >> '$(HOST_CACHE_DIR)'/src-local.committer-name\n+\techo \"vagrant@vagrant\" >> '$(HOST_CACHE_DIR)'/src-local.committer-email\n+\techo \"Gitian Builder <vagrant@vagrant>\" >> '$(HOST_CACHE_DIR)'/src-local.author\n+\techo date >> '$(HOST_CACHE_DIR)'/src-local.committer-date\n+\tcp '$(HOST_CACHE_DIR)'/src-local.committer-date '$(HOST_CACHE_DIR)'/src-local.author-date\n+\tif git log -1 2>&1 >> /dev/null; then \\\n+\t    if [ -z \"$(shell git status --untracked-files=no --porcelain)\" ]; then \\\n+\t        git show --format=format:\"%cn\" | head -n 1 | tee '$(HOST_CACHE_DIR)'/src-local.committer-name; \\\n+\t        git show --format=format:\"%ce\" | head -n 1 | tee '$(HOST_CACHE_DIR)'/src-local.committer-email; \\\n+\t        git show --format=format:\"%cd\" | head -n 1 | tee '$(HOST_CACHE_DIR)'/src-local.committer-date; \\\n+\t        git show --format=format:\"%an, <%ae>\" | head -n 1 | tee '$(HOST_CACHE_DIR)'/src-local.author; \\\n+\t        git show --format=format:\"%ad\" | head -n 1 | tee '$(HOST_CACHE_DIR)'/src-local.author-date; \\\n+\t    else \\\n+\t        echo `git config user.name`, '<'`git config user.email`'>' >> '$(HOST_CACHE_DIR)'/src-local.author; \\\n+\t    fi; \\\n+\tfi\n+\n+# ===----------------------------------------------------------------------===\n+\n+rightparen=)\n+CLIENT_VERSION_MAJOR := $(shell $(GREP) _CLIENT_VERSION_MAJOR ../../configure.ac | head -n 1 | $(AWK) -F'[ $(rightparen)]' '{print $$2}')\n+CLIENT_VERSION_MINOR := $(shell $(GREP) _CLIENT_VERSION_MINOR ../../configure.ac | head -n 1 | $(AWK) -F'[ $(rightparen)]' '{print $$2}')\n+CLIENT_VERSION_REVISION := $(shell $(GREP) _CLIENT_VERSION_REVISION ../../configure.ac | head -n 1 | $(AWK) -F'[ $(rightparen)]' '{print $$2}')\n+ifeq ($(CLIENT_VERSION_REVISION), 99)\n+SERIES := $(CLIENT_VERSION_MAJOR).$(shell expr 1 + $(CLIENT_VERSION_MINOR))\n+else\n+SERIES := $(CLIENT_VERSION_MAJOR).$(CLIENT_VERSION_MINOR)\n+endif\n+\n+OUTPUT_DIR         := output\n+HOST_OUTPUT_DIR    := $(OUTPUT_DIR)\n+GUEST_OUTPUT_DIR   := /vagrant/$(OUTPUT_DIR)\n+\n+TARGETS            :=\n+\n+PLATFORM           := linux\n+TARGET             := ${PLATFORM}\n+$(TARGET)_NAME     := $(TARGET)-$(SERIES)\n+$(TARGET)_VERSION  := $(SERIES)\n+$(TARGET)_OUTPUT   := $(PROJECT)-$(TARGET)-$($(TARGET)_VERSION)-gitian.zip\n+$(TARGET)_SCRIPT   := contrib/gitian-descriptors/gitian-$(TARGET).yml\n+$(TARGET)_PKGS     :=\n+$(TARGET)_DEPS     := $(HOST_CACHE_DIR)/src-local.tar.xz \\\n+                      .stamp-download-depends.h\n+$(TARGET)_FILES    := $($(TARGET)_SCRIPT) \\\n+                      contrib/vagrant/$(HOST_CACHE_DIR)/src-local.tar.xz\n+$(TARGET)_FILES    += $(foreach PACKAGE, \\\n+                                $($(TARGET)_PKGS), \\\n+                                contrib/vagrant/$(HOST_CACHE_DIR)/$(PACKAGE))\n+$(TARGET)_FILES    := $(sort $($(TARGET)_FILES))\n+$(TARGET)_MANIFEST := $(call BUILD_MANIFEST,$($(TARGET)_FILES))\n+TARGETS            += $(TARGET)\n+\n+PLATFORM           := osx\n+TARGET             := ${PLATFORM}\n+$(TARGET)_NAME     := $(TARGET)-$(SERIES)\n+$(TARGET)_VERSION  := $(SERIES)\n+$(TARGET)_OUTPUT   := $(PROJECT)-$(TARGET)-$($(TARGET)_VERSION)-gitian.zip\n+$(TARGET)_SCRIPT   := contrib/gitian-descriptors/gitian-$(TARGET).yml\n+$(TARGET)_PKGS     := osslsigncode-1.7.1.tar.gz \\\n+                      osslsigncode-Backports-to-1.7.1.patch\n+$(TARGET)_DEPS     := $(HOST_CACHE_DIR)/src-local.tar.xz \\\n+                      .stamp-download-depends.h\n+$(TARGET)_FILES    := $($(TARGET)_SCRIPT) \\\n+                      contrib/vagrant/$(HOST_CACHE_DIR)/src-local.tar.xz\n+$(TARGET)_FILES    += $(foreach PACKAGE, \\\n+                                $($(TARGET)_PKGS), \\\n+                                contrib/vagrant/$(HOST_CACHE_DIR)/$(PACKAGE))\n+$(TARGET)_FILES    := $(sort $($(TARGET)_FILES))\n+$(TARGET)_MANIFEST := $(call BUILD_MANIFEST,$($(TARGET)_FILES))\n+TARGETS            += $(TARGET)\n+\n+PLATFORM           := win\n+TARGET             := ${PLATFORM}\n+$(TARGET)_NAME     := $(TARGET)-$(SERIES)\n+$(TARGET)_VERSION  := $(SERIES)\n+$(TARGET)_OUTPUT   := $(PROJECT)-$(TARGET)-$($(TARGET)_VERSION)-gitian.zip\n+$(TARGET)_SCRIPT   := contrib/gitian-descriptors/gitian-$(TARGET).yml\n+$(TARGET)_PKGS     :=\n+$(TARGET)_DEPS     := $(HOST_CACHE_DIR)/src-local.tar.xz \\\n+                      .stamp-download-depends.h\n+$(TARGET)_FILES    := $($(TARGET)_SCRIPT) \\\n+                      contrib/vagrant/$(HOST_CACHE_DIR)/src-local.tar.xz\n+$(TARGET)_FILES    += $(foreach PACKAGE, \\\n+                                $($(TARGET)_PKGS), \\\n+                                contrib/vagrant/$(HOST_CACHE_DIR)/$(PACKAGE))\n+$(TARGET)_FILES    := $(sort $($(TARGET)_FILES))\n+$(TARGET)_MANIFEST := $(call BUILD_MANIFEST,$($(TARGET)_FILES))\n+TARGETS            += $(TARGET)\n+\n+DEPLOY_SOURCE_BUNDLE = \\\n+\tvagrant ssh --command \"rm -rf ~/'$(1)' || true\"; \\\n+\tvagrant ssh --command \"mkdir -p ~/'$(1)'\" || exit 1; \\\n+\tvagrant ssh --command \"cd ~/'$(1)' && \\\n+\t    tar -xf $(GUEST_CACHE_DIR)/src-local.tar.xz\" || exit 1; \\\n+\tvagrant ssh --command \"cd ~/'$(1)' && \\\n+\t    grep -v 'contrib/vagrant/Makefile' configure.ac >.configure.ac.2 && \\\n+\t    mv .configure.ac.2 configure.ac'\"; \\\n+\tvagrant ssh --command \"cd ~/'$(1)' && \\\n+\t    git init\" || exit 1; \\\n+\tvagrant ssh --command \"cd ~/'$(1)' && \\\n+\t    git config user.name 'Gitian Builder'\" || exit 1; \\\n+\tvagrant ssh --command \"cd ~/'$(1)' && \\\n+\t    git config user.email 'vagrant@vagrant'\" || exit 1; \\\n+\tvagrant ssh --command \"cd ~/'$(1)' && \\\n+\t    find . -not \\\\( -path ./.git -prune \\\\) -type f -print0 | xargs -0 git add -f\" || exit 1; \\\n+\tvagrant ssh --command \"cd ~/'$(1)' && \\\n+\t    env GIT_COMMITTER_NAME='`cat '$(HOST_CACHE_DIR)'/src-local.committer-name`' \\\n+\t        GIT_COMMITTER_EMAIL='`cat '$(HOST_CACHE_DIR)'/src-local.committer-email`' \\\n+\t        GIT_COMMITTER_DATE='`cat '$(HOST_CACHE_DIR)'/src-local.committer-date`' \\\n+\t    git commit --author='`cat '$(HOST_CACHE_DIR)'/src-local.author`' \\\n+\t               --date='`cat '$(HOST_CACHE_DIR)'/src-local.author-date`' \\\n+\t               -m tip\" || exit 1\n+\n+define TARGET_RULE\n+.PHONY: $(1)\n+$(1): $(HOST_OUTPUT_DIR)/$($(1)_OUTPUT)\n+$(HOST_OUTPUT_DIR)/$($(1)_OUTPUT): \\\n+\t.stamp-lxc-base.manifest \\\n+\t$(HOST_CACHE_DIR)/src-local.manifest \\\n+\t$(foreach TARGET,$($(1)_DEPS),$(TARGET)) \\\n+\t$(foreach PACKAGE,$($(1)_PKGS),$(HOST_CACHE_DIR)/$(PACKAGE)) \\\n+\t\n+\tmkdir -p $(HOST_OUTPUT_DIR)\n+\t\n+\t$(call VAGRANT_UP)\n+\t\n+\t$(call DEPLOY_SOURCE_BUNDLE,$(PROJECT))\n+\t\n+\techo `$($(1)_MANIFEST)` > .$(1).manifest\n+\t\n+\tif [ ! -f $(HOST_CACHE_DIR)/$(1)/`cat .$(1).manifest`/$($(1)_OUTPUT) ]; then \\\n+\t    vagrant ssh --command \"rm -f ~/gitian-builder/cache\"; \\\n+\t    vagrant ssh --command \"mkdir -p '$(GUEST_CACHE_DIR)/gitian/cache'\" || exit 1; \\\n+\t    vagrant ssh --command \"cd ~/gitian-builder && \\\n+\t        ln -s '$(GUEST_CACHE_DIR)/gitian/cache' cache\" || exit 1; \\\n+\t    vagrant ssh --command \"cd ~/gitian-builder && \\\n+\t        env LXC_BRIDGE=lxcbr0 LXC_GUEST_IP=10.0.3.2 GITIAN_HOST_IP=10.0.3.1 USE_LXC=1 \\\n+\t            bin/gbuild ../$(PROJECT)/$($(1)_SCRIPT) --memory 2000 --url $(PROJECT)=~/$(PROJECT) --commit $(PROJECT)=master\" || exit 1; \\\n+\t    vagrant ssh --command \"cd ~/gitian-builder/build/out && \\\n+\t        if [ ! -f $($(1)_OUTPUT) ]; then \\\n+\t            zip -r $($(1)_OUTPUT) * || exit 1; \\\n+\t        fi\" || exit 1; \\\n+\t    vagrant ssh --command \"mkdir -p '$(GUEST_CACHE_DIR)/$(1)/'`cat .$(1).manifest`/\" || exit 1; \\\n+\t    vagrant ssh --command \"cd ~/gitian-builder && \\\n+\t        mv build/out/$($(1)_OUTPUT) \\\n+\t           '$(GUEST_CACHE_DIR)/$(1)/'`cat .$(1).manifest`/\" || exit 1; \\\n+\t    vagrant ssh --command \"cd ~/gitian-builder && \\\n+\t        mv result/$(PROJECT)-$($(1)_NAME)-res.yml \\\n+\t           '$(GUEST_CACHE_DIR)/$(1)/'`cat .$(1).manifest`'/$(PROJECT)-$($(1)_NAME)-gitian-res.yml'\" || exit 1; \\\n+\t    vagrant ssh --command \"cd ~/gitian-builder && \\\n+\t        mv var/build.log \\\n+\t           '$(GUEST_CACHE_DIR)/$(1)/'`cat .$(1).manifest`'/$(PROJECT)-$($(1)_NAME)-gitian-build.log'\" || exit 1; \\\n+\t    vagrant ssh --command \"cd ~/gitian-builder && \\\n+\t        mv var/install.log \\\n+\t           '$(GUEST_CACHE_DIR)/$(1)/'`cat .$(1).manifest`'/$(PROJECT)-$($(1)_NAME)-gitian-install.log'\" || exit 1; \\\n+\tfi\n+\t\n+\tcp '$(HOST_CACHE_DIR)/$(1)/'`cat .$(1).manifest`'/$($(1)_OUTPUT)' \\\n+\t   '$(HOST_CACHE_DIR)/'\n+\tcp '$(HOST_CACHE_DIR)/$(1)/'`cat .$(1).manifest`'/$($(1)_OUTPUT)' \\\n+\t   '$(HOST_OUTPUT_DIR)/'\n+\tcp '$(HOST_CACHE_DIR)/$(1)/'`cat .$(1).manifest`'/$(PROJECT)-$($(1)_NAME)-gitian-res.yml' \\\n+\t   '$(HOST_OUTPUT_DIR)/'\n+\tcp '$(HOST_CACHE_DIR)/$(1)/'`cat .$(1).manifest`'/$(PROJECT)-$($(1)_NAME)-gitian-build.log' \\\n+\t   '$(HOST_OUTPUT_DIR)/'\n+\tcp '$(HOST_CACHE_DIR)/$(1)/'`cat .$(1).manifest`'/$(PROJECT)-$($(1)_NAME)-gitian-install.log' \\\n+\t   '$(HOST_OUTPUT_DIR)/'\n+\t\n+\trm -f .$(1).manifest\n+\t\n+\tvagrant ssh --command \"rm -rf ~/$(PROJECT)\"\n+\t\n+ifdef VAGRANT_CYCLE\n+\t-$(call VAGRANT_HALT)\n+endif\n+\n+endef\n+$(foreach TARGET,$(TARGETS),$(eval $(call TARGET_RULE,$(TARGET))))\n+\n+#\n+# End of File\n+#"
      },
      {
        "sha": "42061c01a1c70097d1e4579f29a5adf40abdec95",
        "filename": "contrib/vagrant/README",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/vagrant/README?ref=65418eaffce16bdf577d507342778747e4746938",
        "patch": "@@ -0,0 +1 @@\n+README.md\n\\ No newline at end of file"
      },
      {
        "sha": "ba2a1d03012502ae3bee76e1b4a34f307030d656",
        "filename": "contrib/vagrant/README.md",
        "status": "added",
        "additions": 140,
        "deletions": 0,
        "changes": 140,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/vagrant/README.md?ref=65418eaffce16bdf577d507342778747e4746938",
        "patch": "@@ -0,0 +1,140 @@\n+Automated Gitian builds with Vagrant\n+====================================\n+\n+This directory contains platform-independent scripts for building\n+bitcoind and Bitcoin-Qt using the deterministic Gitian build process.\n+\n+Dependencies\n+------------\n+\n+These build scripts depend on a UNIX-like build environment, the\n+freely available open-source release of Oracle VirtualBox, and\n+HashiCorp's vagrant and packer VM-creation utilities. The makefile\n+will complain if any of the required tools are not found. Use the\n+makefile to find out which requirements are missing:\n+\n+    $ cd contrib/vagrant\n+    $ make check-requirements\n+\n+Instructions\n+------------\n+\n+    $ cd contrib/vagrant && make\n+\n+It really is that simple.\n+\n+Read the remainder of this document for some platform-specific instructions\n+for setting up an appropriate build environment.\n+\n+Mac OS X\n+--------\n+\n+Install the latest versions of VirtualBox and Vagrant. The scripts are\n+known to work with VirtualBox 5.2.8 r121009, Vagrant 2.0.1, and Packer\n+1.1.3 on Mac OS X 10.13.3 High Sierra with XCode 9.2 (9C40b) and the\n+command-line developer tools installed.\n+\n+VirtualBox binaries are available from the VirtualBox website:\n+\n+    https://www.virtualbox.org/wiki/Downloads\n+\n+The Vagrant installer for Mac OS X works:\n+\n+    https://www.vagrantup.com/downloads.html\n+\n+Be sure to install the VirtualBox plugin:\n+\n+    $ vagrant plugin install vagrant-vbguest\n+\n+And the Packer binary needs to be placed in your path:\n+\n+    https://www.packer.io\n+\n+Use MacPorts or homebrew to install any missing dependencies, for example:\n+\n+    $ sudo port install openssl wget xz\n+\n+Then use GNU make to initiate the build:\n+\n+    $ cd contrib/vagrant\n+    $ make\n+\n+Linux\n+-----\n+\n+Existing binaries for VirtualBox, Vagrant, Packer, git, and the\n+various UNIX dependencies provided by your distribution should\n+work. Use the makefile to find out which requirements are missing:\n+\n+    $ cd contrib/vagrant\n+    $ make check-requirements\n+\n+If you cannot find `vagrant` in your distribution's package\n+repositories, you can install a binary release from here:\n+\n+    https://www.vagrantup.com/downloads.html\n+\n+Be sure to install the VirtualBox plugin:\n+\n+    $ vagrant plugin install vagrant-vbguest\n+\n+And for Packer:\n+\n+    https://www.packer.io/downloads.html\n+\n+Once the dependencies are met, use GNU make to initiate the build:\n+\n+    $ cd contrib/vagrant\n+    $ make\n+\n+Windows\n+-------\n+\n+A UNIX-like build environment is required, but due to the peculiarities of the\n+required dependencies, the exact combination you have installed probably won't\n+work. Here are build instructions that are known to work from an updated fresh\n+install of Windows 7:\n+\n+Install Git for Windows (if you need git):\n+\n+    http://msysgit.github.com/\n+\n+You don't need the msys version--we will be installing msys separately.\n+\n+Install ruby using the one-click ruby installer:\n+\n+    http://rubyinstaller.org/downloads/\n+\n+Install ruby development environment, from the same download page.\n+Instructions:\n+\n+    https://github.com/oneclick/rubyinstaller/wiki/Development-Kit\n+\n+Install Virtualbox (extension pack not required):\n+\n+    https://www.virtualbox.org/wiki/Downloads\n+\n+Install the VirtualBox plugin for vagrant:\n+\n+    $ vagrant plugin install vagrant-vbguest\n+\n+Install mingw + msys environment:\n+\n+    http://www.mingw.org/wiki/Getting_Started\n+\n+Install Vagrant via the installer:\n+\n+    https://www.vagrantup.com/downloads.html\n+\n+Install Packer into your path:\n+\n+    https://www.packer.io/downloads.html\n+\n+Use mingw-get to install other required packages.\n+\n+    $ mingw-get install wget\n+\n+Once the dependencies are met, use GNU make to initiate the build:\n+\n+    $ cd contrib/vagrant\n+    $ make"
      },
      {
        "sha": "e79a4e0bd8ba9b2358e14d4e3a42546e964ae1c8",
        "filename": "contrib/vagrant/Vagrantfile",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/Vagrantfile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/Vagrantfile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/vagrant/Vagrantfile?ref=65418eaffce16bdf577d507342778747e4746938",
        "patch": "@@ -0,0 +1,41 @@\n+# -*- mode: ruby -*-\n+# vi: set ft=ruby :\n+\n+#\n+# Copyright \u00a9 2013-2018 Bitcoin Developers.\n+#\n+# Permission is hereby granted, free of charge, to any person obtaining a copy\n+# of this software and associated documentation files (the \"Software\"), to deal\n+# in the Software without restriction, including without limitation the rights\n+# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+# copies of the Software, and to permit persons to whom the Software is\n+# furnished to do so, subject to the following conditions:\n+#\n+# The above copyright notice and this permission notice shall be included in\n+# all copies or substantial portions of the Software.\n+#\n+# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+# THE SOFTWARE.\n+#\n+\n+Vagrant::configure(\"2\") do |config|\n+    # All Vagrant configuration is done here. The most common configuration\n+    # options are documented and commented below. For a complete reference,\n+    # please see the online documentation at vagrantup.com.\n+\n+    # Every Vagrant virtual environment requires a box to build off of.\n+    config.vm.box = \"gitian-host-xenial64\"\n+\n+    config.vm.provider :virtualbox do |vb|\n+        # Set RAM to 2.5GB\n+        vb.memory = 2560\n+\n+        # Set CPUs to 2 for faster compilation\n+        vb.cpus = 2\n+    end\n+end"
      },
      {
        "sha": "e1c876acc427fc6c4a45b292505fb1dd7260e957",
        "filename": "contrib/vagrant/config/cleanup.sh",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/config/cleanup.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/config/cleanup.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/vagrant/config/cleanup.sh?ref=65418eaffce16bdf577d507342778747e4746938",
        "patch": "@@ -0,0 +1,107 @@\n+#!/bin/bash -eux\n+\n+SSH_USER=${SSH_USERNAME:-vagrant}\n+\n+# Make sure udev does not block our network - http://6.ptmc.org/?p=164\n+echo \"==> Cleaning up udev rules\"\n+rm -rf /dev/.udev/\n+rm /lib/udev/rules.d/75-persistent-net-generator.rules\n+\n+echo \"==> Cleaning up leftover dhcp leases\"\n+# Ubuntu 10.04\n+if [ -d \"/var/lib/dhcp3\" ]; then\n+    rm /var/lib/dhcp3/*\n+fi\n+# Ubuntu 12.04 & 14.04\n+if [ -d \"/var/lib/dhcp\" ]; then\n+    rm /var/lib/dhcp/*\n+fi \n+\n+UBUNTU_VERSION=$(lsb_release -sr)\n+if [[ ${UBUNTU_VERSION} == 16.04 ]] || [[ ${UBUNTU_VERSION} == 16.10 ]]; then\n+    # Modified version of\n+    # https://github.com/cbednarski/packer-ubuntu/blob/master/scripts-1604/vm_cleanup.sh#L9-L15\n+    # Instead of eth0 the interface is now called ens5 to mach the PCI\n+    # slot, so we need to change the networking scripts to enable the\n+    # correct interface.\n+    #\n+    # NOTE: After the machine is rebooted Packer will not be able to reconnect\n+    # (Vagrant will be able to) so make sure this is done in your final\n+    # provisioner.\n+    sed -i \"s/ens3/ens5/g\" /etc/network/interfaces\n+fi\n+\n+# Add delay to prevent \"vagrant reload\" from failing\n+echo \"pre-up sleep 2\" >> /etc/network/interfaces\n+\n+echo \"==> Cleaning up tmp\"\n+rm -rf /tmp/*\n+\n+# Cleanup apt cache\n+apt-get -y autoremove --purge\n+apt-get -y clean\n+apt-get -y autoclean\n+\n+echo \"==> Installed packages\"\n+dpkg --get-selections | grep -v deinstall\n+\n+DISK_USAGE_BEFORE_CLEANUP=$(df -h)\n+\n+# Remove Bash history\n+unset HISTFILE\n+rm -f /root/.bash_history\n+rm -f /home/${SSH_USER}/.bash_history\n+\n+# Clean up log files\n+find /var/log -type f | while read f; do echo -ne '' > \"${f}\"; done;\n+\n+echo \"==> Clearing last login information\"\n+>/var/log/lastlog\n+>/var/log/wtmp\n+>/var/log/btmp\n+\n+# NOTE: Shrinking is not part of the build process\n+# so this will only grow the image...\n+\n+# # Whiteout root\n+# count=$(df --sync -kP / | tail -n1  | awk -F ' ' '{print $4}')\n+# let count--\n+# dd if=/dev/zero of=/tmp/whitespace bs=1024 count=$count\n+# rm /tmp/whitespace\n+\n+# # Whiteout /boot\n+# count=$(df --sync -kP /boot | tail -n1 | awk -F ' ' '{print $4}')\n+# let count--\n+# dd if=/dev/zero of=/boot/whitespace bs=1024 count=$count\n+# rm /boot/whitespace\n+\n+# echo '==> Clear out swap and disable until reboot'\n+# set +e\n+# swapuuid=$(/sbin/blkid -o value -l -s UUID -t TYPE=swap)\n+# case \"$?\" in\n+#     2|0) ;;\n+#     *) exit 1 ;;\n+# esac\n+# set -e\n+# if [ \"x${swapuuid}\" != \"x\" ]; then\n+#     # Whiteout the swap partition to reduce box size\n+#     # Swap is disabled till reboot\n+#     swappart=$(readlink -f /dev/disk/by-uuid/$swapuuid)\n+#     /sbin/swapoff \"${swappart}\"\n+#     dd if=/dev/zero of=\"${swappart}\" bs=1M || echo \"dd exit code $? is suppressed\"\n+#     /sbin/mkswap -U \"${swapuuid}\" \"${swappart}\"\n+# fi\n+\n+# # Zero out the free space to save space in the final image\n+# dd if=/dev/zero of=/EMPTY bs=1M  || echo \"dd exit code $? is suppressed\"\n+# rm -f /EMPTY\n+\n+# # Make sure we wait until all the data is written to disk, otherwise\n+# # Packer might quite too early before the large files are deleted\n+# sync\n+\n+# echo \"==> Disk usage before cleanup\"\n+# echo ${DISK_USAGE_BEFORE_CLEANUP}\n+\n+# echo \"==> Disk usage after cleanup\"\n+# df -h"
      },
      {
        "sha": "b73635c6a9677f38eebff5b8168e79b5b54ea48d",
        "filename": "contrib/vagrant/config/packages.sh",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/config/packages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/config/packages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/vagrant/config/packages.sh?ref=65418eaffce16bdf577d507342778747e4746938",
        "patch": "@@ -0,0 +1,31 @@\n+ESSENTIAL_PACKAGES=\"\n+ntp\n+nfs-common\n+\"\n+\n+GITIAN_PACKAGES=\"\n+git\n+apache2\n+apt-cacher-ng\n+bridge-utils\n+python-vm-builder\n+ruby\n+qemu-utils\n+lxc\n+\"\n+\n+export DEBIAN_FRONTEND=noninteractive\n+\n+# Perform ALL security updates for the guest VM distribution.\n+echo \"==> Updating distribution-provided package lists\"\n+apt-get -y update\n+echo \"==> Applying security updates & upgrading default packages\"\n+apt-get -y dist-upgrade\n+\n+# Essential packages are necessary for virtualbox/vagrant integration.\n+echo \"==> Installing packages necessary for virtualbox/vagrant integration\"\n+apt-get -y install $ESSENTIAL_PACKAGES\n+\n+# Gitian packages are necessary for gitian-builder.\n+echo \"==> Installing packages necessary for gitian-builder\"\n+apt-get -y install $GITIAN_PACKAGES"
      },
      {
        "sha": "96a518207a271c28ea4b60680ca19179b48b3358",
        "filename": "contrib/vagrant/config/preseed.cfg",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/config/preseed.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/config/preseed.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/vagrant/config/preseed.cfg?ref=65418eaffce16bdf577d507342778747e4746938",
        "patch": "@@ -0,0 +1,22 @@\n+choose-mirror-bin mirror/http/proxy string\n+d-i debian-installer/framebuffer boolean false\n+d-i debconf/frontend select noninteractive\n+d-i base-installer/kernel/override-image string linux-server\n+d-i clock-setup/utc boolean true\n+d-i clock-setup/utc-auto boolean true\n+d-i finish-install/reboot_in_progress note\n+d-i grub-installer/only_debian boolean true\n+d-i grub-installer/with_other_os boolean true\n+d-i partman-auto/method string regular\n+d-i partman/choose_partition select finish\n+d-i partman/confirm boolean true\n+d-i partman/confirm_nooverwrite boolean true\n+d-i partman/confirm_write_new_label boolean true\n+d-i pkgsel/include string openssh-server\n+d-i pkgsel/install-language-support boolean false\n+d-i pkgsel/update-policy select none\n+d-i pkgsel/upgrade select full-upgrade\n+d-i time/zone string UTC\n+d-i user-setup/allow-password-weak boolean true\n+d-i user-setup/encrypt-home boolean false\n+tasksel tasksel/first multiselect standard, ubuntu-server"
      },
      {
        "sha": "c052f533facab8152aa4ad1ffedd093f9700bb5d",
        "filename": "contrib/vagrant/config/sshd.sh",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/config/sshd.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/config/sshd.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/vagrant/config/sshd.sh?ref=65418eaffce16bdf577d507342778747e4746938",
        "patch": "@@ -0,0 +1,4 @@\n+#!/bin/bash -eux\n+\n+echo \"==> Disabling UseDNS from sshd configuration\"\n+echo \"UseDNS no\" >> /etc/ssh/sshd_config"
      },
      {
        "sha": "e79fe46a1a764b0ebb13771e5b02920eccb43b47",
        "filename": "contrib/vagrant/config/vagrant.sh",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/config/vagrant.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/config/vagrant.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/vagrant/config/vagrant.sh?ref=65418eaffce16bdf577d507342778747e4746938",
        "patch": "@@ -0,0 +1,44 @@\n+#!/bin/bash\n+\n+date > /etc/vagrant_box_build_time\n+\n+SSH_USER=${SSH_USERNAME:-vagrant}\n+SSH_PASS=${SSH_PASSWORD:-vagrant}\n+SSH_USER_HOME=${SSH_USER_HOME:-/home/${SSH_USER}}\n+VAGRANT_INSECURE_KEY=\"ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key\"\n+\n+# Packer passes boolean user variables through as '1', but this might change in\n+# the future, so also check for 'true'.\n+if [ \"$INSTALL_VAGRANT_KEY\" = \"true\" ] || [ \"$INSTALL_VAGRANT_KEY\" = \"1\" ]; then\n+    # Create Vagrant user (if not already present)\n+    if ! id -u $SSH_USER >/dev/null 2>&1; then\n+        echo \"==> Creating $SSH_USER user\"\n+        /usr/sbin/groupadd $SSH_USER\n+        /usr/sbin/useradd $SSH_USER -g $SSH_USER -G sudo -d $SSH_USER_HOME --create-home\n+        echo \"${SSH_USER}:${SSH_PASS}\" | chpasswd\n+    fi\n+\n+    # Set up sudo\n+    echo \"==> Giving ${SSH_USER} sudo powers\"\n+    echo \"${SSH_USER}        ALL=(ALL)       NOPASSWD: ALL\" >> /etc/sudoers.d/vagrant\n+    chmod 440 /etc/sudoers.d/vagrant\n+\n+    # Fix stdin not being a tty\n+    if grep -q -E \"^mesg n$\" /root/.profile && sed -i \"s/^mesg n$/tty -s \\\\&\\\\& mesg n/g\" /root/.profile; then\n+      echo \"==> Fixed stdin not being a tty.\"\n+    fi\n+\n+    echo \"==> Installing vagrant key\"\n+    mkdir $SSH_USER_HOME/.ssh\n+    chmod 700 $SSH_USER_HOME/.ssh\n+    cd $SSH_USER_HOME/.ssh\n+\n+    # https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant.pub\n+    echo \"${VAGRANT_INSECURE_KEY}\" > $SSH_USER_HOME/.ssh/authorized_keys\n+    chmod 600 $SSH_USER_HOME/.ssh/authorized_keys\n+    chown -R $SSH_USER:$SSH_USER $SSH_USER_HOME/.ssh\n+fi\n+\n+# Grub updates have been known to trash vagrant boxen.\n+echo \"==> Holding packages known to disrupt vagrant\"\n+echo 'grub-common hold' | dpkg --set-selections"
      },
      {
        "sha": "1bed987367423336012d775a499b1d3610320625",
        "filename": "contrib/vagrant/gitian-host.json",
        "status": "added",
        "additions": 107,
        "deletions": 0,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/gitian-host.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65418eaffce16bdf577d507342778747e4746938/contrib/vagrant/gitian-host.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/vagrant/gitian-host.json?ref=65418eaffce16bdf577d507342778747e4746938",
        "patch": "@@ -0,0 +1,107 @@\n+{\n+  \"_comment\": \"Build with `packer build gitian-host.json`\",\n+  \"builders\": [\n+    {\n+      \"type\": \"virtualbox-iso\",\n+      \"guest_os_type\": \"Ubuntu_64\",\n+      \"boot_command\": [\n+        \"{{user `boot_command_prefix`}}\",\n+        \"/install/vmlinuz noapic \",\n+        \"file=/floppy/{{user `preseed`}} \",\n+        \"debian-installer={{user `locale`}} auto locale={{user `locale`}} kbd-chooser/method=us \",\n+        \"hostname={{user `hostname`}} \",\n+        \"fb=false debconf/frontend=noninteractive \",\n+        \"keyboard-configuration/modelcode=SKIP \",\n+        \"keyboard-configuration/layout=USA \",\n+        \"keyboard-configuration/variant=USA console-setup/ask_detect=false \",\n+        \"passwd/user-fullname={{user `ssh_fullname`}} \",\n+        \"passwd/user-password={{user `ssh_password`}} \",\n+        \"passwd/user-password-again={{user `ssh_password`}} \",\n+        \"passwd/username={{user `ssh_username`}} \",\n+        \"initrd=/install/initrd.gz -- <enter>\"\n+      ],\n+      \"disk_size\": \"{{user `disk_size`}}\",\n+      \"floppy_files\": [\n+        \"config/{{user `preseed`}}\"\n+      ],\n+      \"guest_additions_mode\": \"attach\",\n+      \"guest_additions_url\": \"https://download.virtualbox.org/virtualbox/{{.Version}}/VBoxGuestAdditions_{{.Version}}.iso\",\n+      \"headless\": \"{{user `headless`}}\",\n+      \"iso_checksum\": \"{{user `iso_checksum`}}\",\n+      \"iso_checksum_type\": \"{{user `iso_checksum_type`}}\",\n+      \"iso_urls\": [\n+        \"{{user `mirror_protocol`}}://{{user `mirror`}}/{{user `mirror_directory`}}/{{user `iso_name`}}\"\n+      ],\n+      \"output_directory\": \"output-{{user `vm_name`}}\",\n+      \"shutdown_command\": \"echo '{{user `ssh_password`}}'|sudo -S shutdown -P now\",\n+      \"ssh_password\": \"{{user `ssh_password`}}\",\n+      \"ssh_username\": \"{{user `ssh_username`}}\",\n+      \"ssh_wait_timeout\": \"10000s\",\n+      \"vm_name\": \"{{user `vm_name`}}\",\n+      \"vboxmanage\": [\n+        [\"modifyvm\", \"{{.Name}}\", \"--memory\", \"{{user `memory`}}\" ],\n+        [\"modifyvm\", \"{{.Name}}\", \"--cpus\", \"{{user `cpus`}}\"]\n+      ]\n+    }\n+  ],\n+  \"post-processors\": [\n+    {\n+      \"keep_input_artifact\": false,\n+      \"output\": \"box/{{.Provider}}/{{user `vm_name`}}-{{user `version`}}.box\",\n+      \"type\": \"vagrant\",\n+      \"vagrantfile_template\": \"{{user `vagrantfile_template`}}\"\n+    }\n+  ],\n+  \"provisioners\": [\n+    {\n+      \"environment_vars\": [\n+        \"UPDATE={{user `update`}}\",\n+        \"INSTALL_VAGRANT_KEY={{user `install_vagrant_key`}}\",\n+        \"SSH_USERNAME={{user `ssh_username`}}\",\n+        \"SSH_PASSWORD={{user `ssh_password`}}\",\n+        \"http_proxy={{user `http_proxy`}}\",\n+        \"https_proxy={{user `https_proxy`}}\",\n+        \"ftp_proxy={{user `ftp_proxy`}}\",\n+        \"rsync_proxy={{user `rsync_proxy`}}\",\n+        \"no_proxy={{user `no_proxy`}}\"\n+      ],\n+      \"execute_command\": \"echo '{{user `ssh_password`}}' | {{.Vars}} sudo -E -S bash '{{.Path}}'\",\n+      \"scripts\": [\n+        \"config/vagrant.sh\",\n+        \"config/sshd.sh\",\n+        \"config/packages.sh\",\n+        \"config/cleanup.sh\"\n+      ],\n+      \"type\": \"shell\"\n+    }\n+  ],\n+  \"variables\": {\n+    \"boot_command_prefix\": \"<enter><wait><f6><esc><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs><bs>\",\n+    \"cpus\": \"2\",\n+    \"disk_size\": \"16384\",\n+    \"ftp_proxy\": \"{{env `ftp_proxy`}}\",\n+    \"headless\": \"true\",\n+    \"http_proxy\": \"{{env `http_proxy`}}\",\n+    \"https_proxy\": \"{{env `https_proxy`}}\",\n+    \"install_vagrant_key\": \"true\",\n+    \"iso_checksum\": \"0a03608988cfd2e50567990dc8be96fb3c501e198e2e6efcb846d89efc7b89f2\",\n+    \"iso_checksum_type\": \"sha256\",\n+    \"iso_name\": \"ubuntu-16.04.4-server-amd64.iso\",\n+    \"locale\": \"en_US\",\n+    \"memory\": \"2560\",\n+    \"mirror\": \"releases.ubuntu.com\",\n+    \"mirror_directory\": \"16.04\",\n+    \"mirror_protocol\": \"http\",\n+    \"no_proxy\": \"{{env `no_proxy`}}\",\n+    \"preseed\" : \"preseed.cfg\",\n+    \"rsync_proxy\": \"{{env `rsync_proxy`}}\",\n+    \"hostname\": \"vagrant\",\n+    \"ssh_fullname\": \"vagrant\",\n+    \"ssh_password\": \"vagrant\",\n+    \"ssh_username\": \"vagrant\",\n+    \"update\": \"true\",\n+    \"vagrantfile_template\": \"Vagrantfile\",\n+    \"version\": \"0\",\n+    \"vm_name\": \"gitian-host-xenial64\"\n+  }\n+}"
      }
    ]
  }
]