TheBlueMatt,2014-10-16T06:31:41Z,utACK...hope no one ever writes a class with unsigned char\* begin() and unsigned char\* end()\n,https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-59319649,59319649,
laanwj,2014-10-16T06:46:43Z,"> hope no one ever writes a class with unsigned char\* begin() and unsigned char\* end()\n\nWhy not? That would still be transparently converted to a std::vector<unsigned char>, right?\n",https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-59320653,59320653,
TheBlueMatt,2014-10-16T07:00:09Z,"OK, hope no one ever writes a class with unsigned char\* begin() and\nunsigned char\* end() and doesnt make those map to a consecutive memory\nregion they want turned into a vector :)\n\nOn 10/16/14 06:46, Wladimir J. van der Laan wrote:\n\n> ```\n> hope no one ever writes a class with unsigned char* begin() and\n> unsigned char* end()\n> ```\n> \n> Why not? That would still be transparently conve",https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-59321631,59321631,
sipa,2014-10-17T00:11:40Z,Rebased on top of #4981.\n,https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-59449927,59449927,
sipa,2014-10-17T01:18:50Z,Also added a move-only commit to move a lot of the larger script methods to the .cpp file.\n,https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-59454492,59454492,
TheBlueMatt,2014-10-18T00:12:07Z,```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA1\n\nutACK commithash c5a758d7cd63c2b3bbfd8daef5d0ebe5d786a705\n-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAEBAgAGBQJUQbA0AAoJEIm7uGY+LmXOcfIP/2KISAfdH5eHoMbR+YEZSPC7\nYmhfuitFgf2Q94itF5K33j1QDtzAIFyNQSrAPRZJrf3aKuoaVGMjB0yOJ5pLqagL\nkfuHlLVXXCZeRxkGn1dp0KSJCzkpMYWgmCh1sFRkoB/9SJYEAF0pW0GNUGlCWoGR\nuqAcwOv+KGv3K2DHDG0vaSa4DFpGPMqAGIF0,https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-59591403,59591403,
theuni,2014-10-18T00:34:01Z,I'm not sure this makes things any clearer. I'll delay judgement until giving it a re-read this weekend.\n,https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-59592448,59592448,
TheBlueMatt,2014-10-18T00:35:44Z,"It makes it marginally clearer, and the move to the .cpp is nice.\n",https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-59592517,59592517,
sipa,2014-10-18T02:21:24Z,"I should probably clarify a bit why I think this is nicer. Previously, there were some different ways of pushing vectors/numbers:\n- operator<<(vector): pushes the vector using OP_0, direct push, OP_PUSHDATA1 or OP_PUSHDATA2, but not using OP_1..OP_16 or OP_1NEGATE.\n- opterator<<(int64_t) pushes the vector representing the number using OP_1NEGATE, OP_0..OP_16 or a direct push.\n- operator<<(CSCri",https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-59596007,59596007,
sipa,2014-10-25T09:46:12Z,Rebased.\n\n@theuni Do you understand my motivation now for this?\n,https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-60477447,60477447,
theuni,2014-10-26T19:01:16Z,"@sipa Yes, It's fine by me. My iffyness stemmed from the fact that this changes behavior somewhat from ""I'll blindly add whatever you tell me to"" to ""just tell me what you want and I'll clean it up"". I'd usually prefer to allow people to shoot themselves in the foot if they're really trying, but this really isn't the place for that.\n\nFwiw, I really meant for the ScriptBinaryData change (what eve",https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-60527874,60527874,
sipa,2014-10-27T11:33:10Z,@laanwj comments?\n,https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-60579639,60579639,
gavinandresen,2014-10-27T17:50:08Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-60637543,60637543,
sipa,2014-10-29T15:22:30Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-60943192,60943192,
sipa,2014-11-04T13:56:00Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-61642253,61642253,
jtimon,2014-11-05T10:54:45Z,Untested ACK\n,https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-61790356,61790356,
sipa,2014-11-06T23:43:31Z,Too risky. Closing.\n,https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-62072503,62072503,
jtimon,2014-11-07T15:05:56Z,Maybe we can push a subset of the changes that is not risky?\n,https://github.com/bitcoin/bitcoin/pull/5091#issuecomment-62156641,62156641,
TheBlueMatt,2014-10-16T05:55:01Z,Why?\n,https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939283,18939283,src/chainparams.cpp
TheBlueMatt,2014-10-16T05:57:34Z,"Tiny nit: Can you drop this else and put in a \n to indicate the end of the standalone ifs? (and maybe make the above three ifs without else, but that is more personal style).\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939341,18939341,src/script/script.h
sipa,2014-10-16T05:58:07Z,"Because the number push operator doesn't work anymore - it uses OP_4 intead of 1-byte push of 0x04. As this is one of the very few cases where you need the byte-level ability, I figured it's just shorter to turn it into a single byte sequence here.\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939347,18939347,src/chainparams.cpp
TheBlueMatt,2014-10-16T05:59:09Z,"As much as begin() and end() are standard, I kinda prefer making this more explicit, if possible?\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939366,18939366,src/script/script.h
TheBlueMatt,2014-10-16T06:01:02Z,"Ugh, ok then...maybe put in a comment of the old code?\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939395,18939395,src/chainparams.cpp
sipa,2014-10-16T06:03:38Z,Why does the old code matter? The coinbase input _is_ just a byte array.\n,https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939442,18939442,src/chainparams.cpp
sipa,2014-10-16T06:04:13Z,"I've changed it a bit, have a look.\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939454,18939454,src/script/script.h
sipa,2014-10-16T06:04:47Z,Any suggestion?\n,https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939461,18939461,src/script/script.h
TheBlueMatt,2014-10-16T06:05:32Z,"I suppose for historical nostalgia? In any case, it matters not.\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939477,18939477,src/chainparams.cpp
TheBlueMatt,2014-10-16T06:07:08Z,"well not using the << syntax, for one. But maybe something even more explicit like ConvertToVectorAndPush?\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939500,18939500,src/script/script.h
sipa,2014-10-16T06:09:55Z,"If we want that, I think we should do it for all of these operator<<'s.\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939540,18939540,src/script/script.h
sipa,2014-10-16T06:10:09Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939547,18939547,src/chainparams.cpp
TheBlueMatt,2014-10-16T06:11:50Z,My concern is only of blind type conversion...it has certainly bitten us in the past.\n,https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939570,18939570,src/script/script.h
sipa,2014-10-16T06:15:11Z,"Yeah, I understand. But I also prefer not to touch hundreds of lines of code. Given that the type passed in must be convertible to a std::vector, this should be pretty safe (and CScript itself is already excluded specifically).\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18939643,18939643,src/script/script.h
laanwj,2014-10-16T06:52:14Z,"As said in #4981, I'm not incredibly happy about this. It seems the kind of magic use of C++ that results in obscure hard-to-debug problems.\n\nI'd like the serialization code (and consensus code in general) to move in the direction of being as human-readable and explicit as possible. \n\nSo in this case I'd prefer having an explicit function that does this conversion to a serializable type.\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18940360,18940360,src/script/script.h
jgarzik,2014-10-16T06:53:23Z,+1 @laanwj \n,https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18940381,18940381,src/script/script.h
sipa,2014-10-16T06:57:42Z,"Sure, no objection against a ToByteVector function. It's probably easier to do that in #4981 though.\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r18940486,18940486,src/script/script.h
sipa,2014-11-06T17:40:27Z,@petertodd I think this would actually be a consensus change...\n,https://github.com/bitcoin/bitcoin/pull/5091#discussion_r19960389,19960389,src/script/interpreter.cpp
TheBlueMatt,2014-11-06T21:28:47Z,"Yep! Well, maybe, probably not. I think this may only matter in the case of a valid signature, so you'd need a valid signature that is representable by a non-push opcode.\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r19976691,19976691,src/script/interpreter.cpp
petertodd,2014-11-06T21:37:00Z,"@TheBlueMatt If STRICTENC was written such that it caused the script to immediately fail, this could matter as CHECKMULTISIG evaluation exits early; the fork would be the difference between a passing CHECKMULTISIG NOT and a failed script.\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r19977320,19977320,src/script/interpreter.cpp
TheBlueMatt,2014-11-06T21:57:53Z,"True, though I think its rather orthogonal to this issue...and we knew (its in the src!) that STRICTENC was not a softfork.\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r19978936,19978936,src/script/interpreter.cpp
petertodd,2014-11-06T22:34:33Z,That's not the point. It's an example of how a very subtle change could have lead to a fork because of a known consensus-critical dependency. Just because you don't know how to exploit it right now doesn't mean you can't.\n,https://github.com/bitcoin/bitcoin/pull/5091#discussion_r19981560,19981560,src/script/interpreter.cpp
TheBlueMatt,2014-11-06T22:36:59Z,"Huh? My point was that STRICTENC is already a hardfork, and while I agree 100% with everything you said in your last statement, its again not connected to the previous discussion.\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r19981708,19981708,src/script/interpreter.cpp
petertodd,2014-11-06T22:45:14Z,"Again, you're comment gives the impression that you're arguing this change is ok, on the basis that it can't be exploited right now. I'm arguing this change isn't ok, because we have solid evidence that it changes behavior that _could_ be used for an exploit. I'm not sure how, and maybe it isn't possible, but it's obviously a risky change.\n\nAdding a separate method to serialize a unsigned char v",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r19982132,19982132,src/script/interpreter.cpp
petertodd,2014-11-06T22:46:57Z,"This is also a good argument for incorporating hashed instruction-by-instruction execution traces into any future OP_EVAL proposal, where failure to match the trace hash exactly fails immediately. Merkelized abstract syntax tree ideas lend themselves naturally to this.\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r19982238,19982238,src/script/interpreter.cpp
TheBlueMatt,2014-11-06T22:49:02Z,"My point was not that this is OK, but that arguing based on STRICTENC is a completely invalid argument. In any case, we clearly agree, so...whatever.\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r19982381,19982381,src/script/interpreter.cpp
petertodd,2014-11-06T23:32:14Z,"There's nothing invalid about arguing that we had a close call. We should follow development practices that prevent close calls, given it's only a matter of time before one of those close calls turns into an actual exploit.\n",https://github.com/bitcoin/bitcoin/pull/5091#discussion_r19984759,19984759,src/script/interpreter.cpp
