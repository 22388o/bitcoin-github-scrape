[
  {
    "sha": "6681fdab3343e2e88f6916a998498ad69989347e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjgxZmRhYjMzNDNlMmU4OGY2OTE2YTk5ODQ5OGFkNjk5ODkzNDdl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-16T05:30:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-04T13:55:38Z"
      },
      "message": "Unify and simplify CScript push methods\n\n* Make CScript::operator<<(const std::vector<unsigned char>&) cover all push\n  operations (including OP_0, OP_1..OP_16 and OP_1NEGATE), and make the push\n  for numbers use that.\n* Convert the uint256, uint160 and CPubKey into a single templated one using\n  the vector push code.\n* Get rid of the int64_t operator<<; better be explicit about what needs pushing,\n  so change all number pushes to use CScriptNum (which, due to the generic\n  vector push now also correctly uses OP_n).\n* Get rid of some unused methods and constructors as a result.",
      "tree": {
        "sha": "c4986ccb09c10f3d7e004f38eb54cfb0ab598385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4986ccb09c10f3d7e004f38eb54cfb0ab598385"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6681fdab3343e2e88f6916a998498ad69989347e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6681fdab3343e2e88f6916a998498ad69989347e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6681fdab3343e2e88f6916a998498ad69989347e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6681fdab3343e2e88f6916a998498ad69989347e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be32b5212b6ab4460080ec5ff55e2bf882259e5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be32b5212b6ab4460080ec5ff55e2bf882259e5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be32b5212b6ab4460080ec5ff55e2bf882259e5e"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 38,
      "deletions": 60
    },
    "files": [
      {
        "sha": "c6aee97b81df52af3a49b7933b00f67e3bff68a6",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6681fdab3343e2e88f6916a998498ad69989347e/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6681fdab3343e2e88f6916a998498ad69989347e/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=6681fdab3343e2e88f6916a998498ad69989347e",
        "patch": "@@ -132,12 +132,14 @@ class CMainParams : public CChainParams {\n          *     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)\n          *     CTxOut(nValue=50.00000000, scriptPubKey=0x5F1DF16B2B704C8A578D0B)\n          *   vMerkleTree: 4a5e1e\n+         *\n+         * The coinbase genesis input consists of a pushes of: number 486604799, number 4 (without using OP_4), and the string \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\".\n          */\n-        const char* pszTimestamp = \"The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n+        const unsigned char pszCoinbase[] = \"\\x04\\xff\\xff\\x00\\x1d\\x01\\x04\\x45The Times 03/Jan/2009 Chancellor on brink of second bailout for banks\";\n         CMutableTransaction txNew;\n         txNew.vin.resize(1);\n         txNew.vout.resize(1);\n-        txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n+        txNew.vin[0].scriptSig = CScript(pszCoinbase, pszCoinbase + 77);\n         txNew.vout[0].nValue = 50 * COIN;\n         txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n         genesis.vtx.push_back(txNew);"
      },
      {
        "sha": "9e527c5f6a47780b2c88b0bac9115510e40f8f5c",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6681fdab3343e2e88f6916a998498ad69989347e/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6681fdab3343e2e88f6916a998498ad69989347e/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=6681fdab3343e2e88f6916a998498ad69989347e",
        "patch": "@@ -61,8 +61,7 @@ CScript ParseScript(std::string s)\n             (starts_with(*w, \"-\") && all(string(w->begin()+1, w->end()), is_digit())))\n         {\n             // Number\n-            int64_t n = atoi64(*w);\n-            result << n;\n+            result << CScriptNum(atoi64(*w));\n         }\n         else if (starts_with(*w, \"0x\") && (w->begin()+2 != w->end()) && IsHex(string(w->begin()+2, w->end())))\n         {"
      },
      {
        "sha": "1ec206f7494a93c7759c04bf0c937318f68d4a75",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6681fdab3343e2e88f6916a998498ad69989347e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6681fdab3343e2e88f6916a998498ad69989347e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6681fdab3343e2e88f6916a998498ad69989347e",
        "patch": "@@ -2437,7 +2437,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n     if (block.nVersion >= 2 && \n         CBlockIndex::IsSuperMajority(2, pindex->pprev, Params().EnforceBlockUpgradeMajority()))\n     {\n-        CScript expect = CScript() << nHeight;\n+        CScript expect = CScript() << CScriptNum(nHeight);\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n             !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n             pindex->nStatus |= BLOCK_FAILED_VALID;"
      },
      {
        "sha": "526d57cec6b3b78ad3bd0e6a1311a4ca9476520f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6681fdab3343e2e88f6916a998498ad69989347e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6681fdab3343e2e88f6916a998498ad69989347e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=6681fdab3343e2e88f6916a998498ad69989347e",
        "patch": "@@ -345,7 +345,7 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n     ++nExtraNonce;\n     unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n     CMutableTransaction txCoinbase(pblock->vtx[0]);\n-    txCoinbase.vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n+    txCoinbase.vin[0].scriptSig = (CScript() << CScriptNum(nHeight) << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n     assert(txCoinbase.vin[0].scriptSig.size() <= 100);\n \n     pblock->vtx[0] = txCoinbase;"
      },
      {
        "sha": "7d0ca0726c87afa8f4ffb87320bb527406f9113f",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6681fdab3343e2e88f6916a998498ad69989347e/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6681fdab3343e2e88f6916a998498ad69989347e/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=6681fdab3343e2e88f6916a998498ad69989347e",
        "patch": "@@ -452,7 +452,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n \n         if (amount > 0)\n         {\n-            CTxOut txout(amount, (CScript)vector<unsigned char>(24, 0));\n+            CTxOut txout(amount, CScript() << vector<unsigned char>(24, 0));\n             txDummy.vout.push_back(txout);\n             if (txout.IsDust(::minRelayTxFee))\n                fDust = true;\n@@ -548,7 +548,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             // Never create dust outputs; if we would, just add the dust to the fee.\n             if (nChange > 0 && nChange < CENT)\n             {\n-                CTxOut txout(nChange, (CScript)vector<unsigned char>(24, 0));\n+                CTxOut txout(nChange, CScript() << vector<unsigned char>(24, 0));\n                 if (txout.IsDust(::minRelayTxFee))\n                 {\n                     nPayFee += nChange;"
      },
      {
        "sha": "05a67519ca08d92923860abf83c41cf67e061464",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6681fdab3343e2e88f6916a998498ad69989347e/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6681fdab3343e2e88f6916a998498ad69989347e/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=6681fdab3343e2e88f6916a998498ad69989347e",
        "patch": "@@ -727,7 +727,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     CScript scriptCode(pbegincodehash, pend);\n \n                     // Drop the signature, since there's no way for a signature to sign itself\n-                    scriptCode.FindAndDelete(CScript(vchSig));\n+                    scriptCode.FindAndDelete(CScript() << vchSig);\n \n                     if (!CheckSignatureEncoding(vchSig, flags)) {\n                         return false;\n@@ -783,7 +783,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     for (int k = 0; k < nSigsCount; k++)\n                     {\n                         valtype& vchSig = stacktop(-isig-k);\n-                        scriptCode.FindAndDelete(CScript(vchSig));\n+                        scriptCode.FindAndDelete(CScript() << vchSig);\n                     }\n \n                     bool fSuccess = true;"
      },
      {
        "sha": "82f38d996b282f9d015d97b660a93d961587dc70",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 21,
        "deletions": 44,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6681fdab3343e2e88f6916a998498ad69989347e/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6681fdab3343e2e88f6916a998498ad69989347e/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=6681fdab3343e2e88f6916a998498ad69989347e",
        "patch": "@@ -341,23 +341,6 @@ class CScriptNum\n /** Serialized script, used inside transaction inputs and outputs */\n class CScript : public std::vector<unsigned char>\n {\n-protected:\n-    CScript& push_int64(int64_t n)\n-    {\n-        if (n == -1 || (n >= 1 && n <= 16))\n-        {\n-            push_back(n + (OP_1 - 1));\n-        }\n-        else if (n == 0)\n-        {\n-            push_back(OP_0);\n-        }\n-        else\n-        {\n-            *this << CScriptNum::serialize(n);\n-        }\n-        return *this;\n-    }\n public:\n     CScript() { }\n     CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }\n@@ -377,15 +360,7 @@ class CScript : public std::vector<unsigned char>\n         return ret;\n     }\n \n-    CScript(int64_t b)        { operator<<(b); }\n-\n-    explicit CScript(opcodetype b)     { operator<<(b); }\n-    explicit CScript(const CScriptNum& b) { operator<<(b); }\n-    explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }\n-\n-\n-    CScript& operator<<(int64_t b) { return push_int64(b); }\n-\n+    // Append a single non-push opcode.\n     CScript& operator<<(opcodetype opcode)\n     {\n         if (opcode < 0 || opcode > 0xff)\n@@ -394,14 +369,33 @@ class CScript : public std::vector<unsigned char>\n         return *this;\n     }\n \n+    // Append a push operation for the passed number.\n     CScript& operator<<(const CScriptNum& b)\n     {\n         *this << b.getvch();\n         return *this;\n     }\n \n+    // Append a push operation for the specified vector, using the shortest possible encoding.\n     CScript& operator<<(const std::vector<unsigned char>& b)\n     {\n+        // Special cases (OP_0, OP_1NEGATE, OP_1..OP_16).\n+        if (b.size() == 0)\n+        {\n+            insert(end(), OP_0);\n+            return *this;\n+        }\n+        if (b.size() == 1 && b[0] == 0x81)\n+        {\n+            insert(end(), OP_1NEGATE);\n+            return *this;\n+        }\n+        if (b.size() == 1 && b[0] >= 1 && b[0] <= 16)\n+        {\n+            insert(end(), b[0] + (OP_1 - 1));\n+            return *this;\n+        }\n+        // Normal pushes.\n         if (b.size() < OP_PUSHDATA1)\n         {\n             insert(end(), (unsigned char)b.size());\n@@ -435,7 +429,6 @@ class CScript : public std::vector<unsigned char>\n         return *this;\n     }\n \n-\n     bool GetOp(iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet)\n     {\n          // Wrapper so it can be called with either iterator or const_iterator\n@@ -516,21 +509,14 @@ class CScript : public std::vector<unsigned char>\n         return true;\n     }\n \n-    // Encode/decode small integers:\n+    // Decode small integers:\n     static int DecodeOP_N(opcodetype opcode)\n     {\n         if (opcode == OP_0)\n             return 0;\n         assert(opcode >= OP_1 && opcode <= OP_16);\n         return (int)opcode - (int)(OP_1 - 1);\n     }\n-    static opcodetype EncodeOP_N(int n)\n-    {\n-        assert(n >= 0 && n <= 16);\n-        if (n == 0)\n-            return OP_0;\n-        return (opcodetype)(OP_1+n-1);\n-    }\n \n     int FindAndDelete(const CScript& b)\n     {\n@@ -550,15 +536,6 @@ class CScript : public std::vector<unsigned char>\n         while (GetOp(pc, opcode));\n         return nFound;\n     }\n-    int Find(opcodetype op) const\n-    {\n-        int nFound = 0;\n-        opcodetype opcode;\n-        for (const_iterator pc = begin(); pc != end() && GetOp(pc, opcode);)\n-            if (opcode == op)\n-                ++nFound;\n-        return nFound;\n-    }\n \n     // Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n     // as 20 sigops. With pay-to-script-hash, that changed:"
      },
      {
        "sha": "c91e45152a1d6dc7c33f37bca0f84f247458eb84",
        "filename": "src/script/standard.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6681fdab3343e2e88f6916a998498ad69989347e/src/script/standard.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6681fdab3343e2e88f6916a998498ad69989347e/src/script/standard.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/standard.cpp?ref=6681fdab3343e2e88f6916a998498ad69989347e",
        "patch": "@@ -310,9 +310,9 @@ CScript GetScriptForMultisig(int nRequired, const std::vector<CPubKey>& keys)\n {\n     CScript script;\n \n-    script << CScript::EncodeOP_N(nRequired);\n+    script << CScriptNum(nRequired);\n     BOOST_FOREACH(const CPubKey& key, keys)\n         script << ToByteVector(key);\n-    script << CScript::EncodeOP_N(keys.size()) << OP_CHECKMULTISIG;\n+    script << CScriptNum(keys.size()) << OP_CHECKMULTISIG;\n     return script;\n }"
      },
      {
        "sha": "00f174d470a86c07a55190b1035954ee690da398",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6681fdab3343e2e88f6916a998498ad69989347e/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6681fdab3343e2e88f6916a998498ad69989347e/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=6681fdab3343e2e88f6916a998498ad69989347e",
        "patch": "@@ -341,7 +341,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     for (int i = 0; i < 3; i++)\n     {\n         CScript t = txTo.vin[i].scriptSig;\n-        txTo.vin[i].scriptSig = (CScript() << 11) + t;\n+        txTo.vin[i].scriptSig = (CScript() << CScriptNum(11)) + t;\n         BOOST_CHECK(!::AreInputsStandard(txTo, coins));\n         txTo.vin[i].scriptSig = t;\n     }"
      },
      {
        "sha": "de625489e1845871a442894bec5856d48e213394",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6681fdab3343e2e88f6916a998498ad69989347e/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6681fdab3343e2e88f6916a998498ad69989347e/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=6681fdab3343e2e88f6916a998498ad69989347e",
        "patch": "@@ -179,7 +179,7 @@ class TestBuilder\n     TestBuilder& Num(int num)\n     {\n         DoPush();\n-        spendTx.vin[0].scriptSig << num;\n+        spendTx.vin[0].scriptSig << CScriptNum(num);\n         return *this;\n     }\n \n@@ -790,7 +790,7 @@ BOOST_AUTO_TEST_CASE(script_standard_push)\n {\n     for (int i=0; i<67000; i++) {\n         CScript script;\n-        script << i;\n+        script << CScriptNum(i);\n         BOOST_CHECK_MESSAGE(script.IsPushOnly(), \"Number \" << i << \" is not pure push.\");\n         BOOST_CHECK_MESSAGE(VerifyScript(script, CScript() << OP_1, SCRIPT_VERIFY_MINIMALDATA, BaseSignatureChecker()), \"Number \" << i << \" push is not minimal data.\");\n     }"
      },
      {
        "sha": "2d9002695a304a88179ad75316796bb6848d71d5",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6681fdab3343e2e88f6916a998498ad69989347e/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6681fdab3343e2e88f6916a998498ad69989347e/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=6681fdab3343e2e88f6916a998498ad69989347e",
        "patch": "@@ -33,7 +33,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n \n     // In case concatenating two scripts ends up with two codeseparators,\n     // or an extra one at the end, this prevents all those possible incompatibilities.\n-    scriptCode.FindAndDelete(CScript(OP_CODESEPARATOR));\n+    scriptCode.FindAndDelete(CScript() << OP_CODESEPARATOR);\n \n     // Blank out other inputs' signatures\n     for (unsigned int i = 0; i < txTmp.vin.size(); i++)"
      }
    ]
  },
  {
    "sha": "6f95254462cd8d82f91cbc36fdab9b951f499f83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Zjk1MjU0NDYyY2Q4ZDgyZjkxY2JjMzZmZGFiOWI5NTFmNDk5Zjgz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-10-17T01:06:43Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-11-04T13:55:38Z"
      },
      "message": "Move some CScript methods to script/script.cpp",
      "tree": {
        "sha": "ee09990db70dca11b1348fe8eba1896557cbbb70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee09990db70dca11b1348fe8eba1896557cbbb70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f95254462cd8d82f91cbc36fdab9b951f499f83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f95254462cd8d82f91cbc36fdab9b951f499f83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f95254462cd8d82f91cbc36fdab9b951f499f83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f95254462cd8d82f91cbc36fdab9b951f499f83/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6681fdab3343e2e88f6916a998498ad69989347e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6681fdab3343e2e88f6916a998498ad69989347e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6681fdab3343e2e88f6916a998498ad69989347e"
      }
    ],
    "stats": {
      "total": 365,
      "additions": 180,
      "deletions": 185
    },
    "files": [
      {
        "sha": "e0a552e8d60e972d42c5fedfe15e09195faeaa84",
        "filename": "src/script/script.cpp",
        "status": "modified",
        "additions": 171,
        "deletions": 0,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f95254462cd8d82f91cbc36fdab9b951f499f83/src/script/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f95254462cd8d82f91cbc36fdab9b951f499f83/src/script/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.cpp?ref=6f95254462cd8d82f91cbc36fdab9b951f499f83",
        "patch": "@@ -20,6 +20,55 @@ inline std::string ValueString(const std::vector<unsigned char>& vch)\n \n using namespace std;\n \n+std::vector<unsigned char> CScriptNum::serialize(const int64_t& value)\n+{\n+    if (value == 0)\n+        return std::vector<unsigned char>();\n+\n+    std::vector<unsigned char> result;\n+    const bool neg = value < 0;\n+    uint64_t absvalue = neg ? -value : value;\n+\n+    while (absvalue) {\n+        result.push_back(absvalue & 0xff);\n+        absvalue >>= 8;\n+    }\n+\n+//    - If the most significant byte is >= 0x80 and the value is positive, push a\n+//    new zero-byte to make the significant byte < 0x80 again.\n+\n+//    - If the most significant byte is >= 0x80 and the value is negative, push a\n+//    new 0x80 byte that will be popped off when converting to an integral.\n+\n+//    - If the most significant byte is < 0x80 and the value is negative, add\n+//    0x80 to it, since it will be subtracted and interpreted as a negative when\n+//    converting to an integral.\n+\n+    if (result.back() & 0x80)\n+        result.push_back(neg ? 0x80 : 0);\n+    else if (neg)\n+        result.back() |= 0x80;\n+\n+    return result;\n+}\n+\n+int64_t CScriptNum::set_vch(const std::vector<unsigned char>& vch)\n+{\n+    if (vch.empty())\n+        return 0;\n+\n+    int64_t result = 0;\n+    for (size_t i = 0; i != vch.size(); ++i)\n+        result |= static_cast<int64_t>(vch[i]) << 8*i;\n+\n+    // If the input vector's most significant byte is 0x80, remove it from\n+    // the result's msb and return a negative.\n+    if (vch.back() & 0x80)\n+        return -((int64_t)(result & ~(0x80ULL << (8 * (vch.size() - 1)))));\n+\n+    return result;\n+}\n+\n const char* GetOpName(opcodetype opcode)\n {\n     switch (opcode)\n@@ -163,6 +212,128 @@ const char* GetOpName(opcodetype opcode)\n     }\n }\n \n+CScript& CScript::operator+=(const CScript& b)\n+{\n+    insert(end(), b.begin(), b.end());\n+    return *this;\n+}\n+\n+CScript& CScript::operator<<(opcodetype opcode)\n+{\n+    if (opcode < 0 || opcode > 0xff)\n+        throw std::runtime_error(\"CScript::operator<<() : invalid opcode\");\n+    insert(end(), (unsigned char)opcode);\n+    return *this;\n+}\n+\n+CScript& CScript::operator<<(const CScriptNum& b)\n+{\n+    *this << b.getvch();\n+    return *this;\n+}\n+\n+CScript& CScript::operator<<(const std::vector<unsigned char>& b)\n+{\n+    // Special cases (OP_0, OP_1NEGATE, OP_1..OP_16).\n+    if (b.size() == 0) {\n+        insert(end(), OP_0);\n+        return *this;\n+    }\n+    if (b.size() == 1 && b[0] == 0x81) {\n+        insert(end(), OP_1NEGATE);\n+        return *this;\n+    }\n+    if (b.size() == 1 && b[0] >= 1 && b[0] <= 16) {\n+        insert(end(), b[0] + (OP_1 - 1));\n+        return *this;\n+    }\n+    // Normal pushes.\n+    if (b.size() < OP_PUSHDATA1) {\n+        insert(end(), (unsigned char)b.size());\n+    } else if (b.size() <= 0xff) {\n+        insert(end(), OP_PUSHDATA1);\n+        insert(end(), (unsigned char)b.size());\n+    } else if (b.size() <= 0xffff) {\n+        insert(end(), OP_PUSHDATA2);\n+        unsigned short nSize = b.size();\n+        insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+    } else {\n+        insert(end(), OP_PUSHDATA4);\n+        unsigned int nSize = b.size();\n+        insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n+    }\n+    insert(end(), b.begin(), b.end());\n+    return *this;\n+}\n+\n+CScript& CScript::operator<<(const CScript& b) {\n+    // I'm not sure if this should push the script or concatenate scripts.\n+    // If there's ever a use for pushing a script onto a script, delete this member fn\n+    assert(!\"Warning: Pushing a CScript onto a CScript with << is probably not intended, use + to concatenate!\");\n+    return *this;\n+}\n+\n+bool CScript::GetOp2(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet) const\n+{\n+    opcodeRet = OP_INVALIDOPCODE;\n+    if (pvchRet)\n+        pvchRet->clear();\n+    if (pc >= end())\n+        return false;\n+\n+    // Read instruction\n+    if (end() - pc < 1)\n+        return false;\n+    unsigned int opcode = *pc++;\n+\n+    // Immediate operand\n+    if (opcode <= OP_PUSHDATA4) {\n+        unsigned int nSize = 0;\n+        if (opcode < OP_PUSHDATA1) {\n+            nSize = opcode;\n+        } else if (opcode == OP_PUSHDATA1) {\n+            if (end() - pc < 1)\n+                return false;\n+            nSize = *pc++;\n+        } else if (opcode == OP_PUSHDATA2) {\n+            if (end() - pc < 2)\n+                return false;\n+            nSize = 0;\n+            memcpy(&nSize, &pc[0], 2);\n+            pc += 2;\n+        } else if (opcode == OP_PUSHDATA4) {\n+            if (end() - pc < 4)\n+                return false;\n+            memcpy(&nSize, &pc[0], 4);\n+            pc += 4;\n+        }\n+        if (end() - pc < 0 || (unsigned int)(end() - pc) < nSize)\n+            return false;\n+        if (pvchRet)\n+            pvchRet->assign(pc, pc + nSize);\n+        pc += nSize;\n+    }\n+\n+    opcodeRet = (opcodetype)opcode;\n+    return true;\n+}\n+\n+int CScript::FindAndDelete(const CScript& b)\n+{\n+    int nFound = 0;\n+    if (b.empty())\n+        return nFound;\n+    iterator pc = begin();\n+    opcodetype opcode;\n+    do {\n+        while (end() - pc >= (long)b.size() && memcmp(&pc[0], &b[0], b.size()) == 0) {\n+            pc = erase(pc, pc + b.size());\n+            ++nFound;\n+        }\n+    } while (GetOp(pc, opcode));\n+    return nFound;\n+}\n+\n unsigned int CScript::GetSigOpCount(bool fAccurate) const\n {\n     unsigned int n = 0;"
      },
      {
        "sha": "1fdbc45554c4211a30dcca368b1e4668d9c40871",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 9,
        "deletions": 185,
        "changes": 194,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f95254462cd8d82f91cbc36fdab9b951f499f83/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f95254462cd8d82f91cbc36fdab9b951f499f83/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=6f95254462cd8d82f91cbc36fdab9b951f499f83",
        "patch": "@@ -282,58 +282,12 @@ class CScriptNum\n         return serialize(m_value);\n     }\n \n-    static std::vector<unsigned char> serialize(const int64_t& value)\n-    {\n-        if(value == 0)\n-            return std::vector<unsigned char>();\n-\n-        std::vector<unsigned char> result;\n-        const bool neg = value < 0;\n-        uint64_t absvalue = neg ? -value : value;\n-\n-        while(absvalue)\n-        {\n-            result.push_back(absvalue & 0xff);\n-            absvalue >>= 8;\n-        }\n-\n-//    - If the most significant byte is >= 0x80 and the value is positive, push a\n-//    new zero-byte to make the significant byte < 0x80 again.\n-\n-//    - If the most significant byte is >= 0x80 and the value is negative, push a\n-//    new 0x80 byte that will be popped off when converting to an integral.\n-\n-//    - If the most significant byte is < 0x80 and the value is negative, add\n-//    0x80 to it, since it will be subtracted and interpreted as a negative when\n-//    converting to an integral.\n-\n-        if (result.back() & 0x80)\n-            result.push_back(neg ? 0x80 : 0);\n-        else if (neg)\n-            result.back() |= 0x80;\n-\n-        return result;\n-    }\n+    static std::vector<unsigned char> serialize(const int64_t& value);\n \n     static const size_t nMaxNumSize = 4;\n \n private:\n-    static int64_t set_vch(const std::vector<unsigned char>& vch)\n-    {\n-      if (vch.empty())\n-          return 0;\n-\n-      int64_t result = 0;\n-      for (size_t i = 0; i != vch.size(); ++i)\n-          result |= static_cast<int64_t>(vch[i]) << 8*i;\n-\n-      // If the input vector's most significant byte is 0x80, remove it from\n-      // the result's msb and return a negative.\n-      if (vch.back() & 0x80)\n-          return -((int64_t)(result & ~(0x80ULL << (8 * (vch.size() - 1)))));\n-\n-      return result;\n-    }\n+    static int64_t set_vch(const std::vector<unsigned char>& vch);\n \n     int64_t m_value;\n };\n@@ -347,11 +301,7 @@ class CScript : public std::vector<unsigned char>\n     CScript(const_iterator pbegin, const_iterator pend) : std::vector<unsigned char>(pbegin, pend) { }\n     CScript(const unsigned char* pbegin, const unsigned char* pend) : std::vector<unsigned char>(pbegin, pend) { }\n \n-    CScript& operator+=(const CScript& b)\n-    {\n-        insert(end(), b.begin(), b.end());\n-        return *this;\n-    }\n+    CScript& operator+=(const CScript& b);\n \n     friend CScript operator+(const CScript& a, const CScript& b)\n     {\n@@ -361,73 +311,15 @@ class CScript : public std::vector<unsigned char>\n     }\n \n     // Append a single non-push opcode.\n-    CScript& operator<<(opcodetype opcode)\n-    {\n-        if (opcode < 0 || opcode > 0xff)\n-            throw std::runtime_error(\"CScript::operator<<() : invalid opcode\");\n-        insert(end(), (unsigned char)opcode);\n-        return *this;\n-    }\n+    CScript& operator<<(opcodetype opcode);\n \n     // Append a push operation for the passed number.\n-    CScript& operator<<(const CScriptNum& b)\n-    {\n-        *this << b.getvch();\n-        return *this;\n-    }\n+    CScript& operator<<(const CScriptNum& b);\n \n     // Append a push operation for the specified vector, using the shortest possible encoding.\n-    CScript& operator<<(const std::vector<unsigned char>& b)\n-    {\n-        // Special cases (OP_0, OP_1NEGATE, OP_1..OP_16).\n-        if (b.size() == 0)\n-        {\n-            insert(end(), OP_0);\n-            return *this;\n-        }\n-        if (b.size() == 1 && b[0] == 0x81)\n-        {\n-            insert(end(), OP_1NEGATE);\n-            return *this;\n-        }\n-        if (b.size() == 1 && b[0] >= 1 && b[0] <= 16)\n-        {\n-            insert(end(), b[0] + (OP_1 - 1));\n-            return *this;\n-        }\n-        // Normal pushes.\n-        if (b.size() < OP_PUSHDATA1)\n-        {\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xff)\n-        {\n-            insert(end(), OP_PUSHDATA1);\n-            insert(end(), (unsigned char)b.size());\n-        }\n-        else if (b.size() <= 0xffff)\n-        {\n-            insert(end(), OP_PUSHDATA2);\n-            unsigned short nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n-        }\n-        else\n-        {\n-            insert(end(), OP_PUSHDATA4);\n-            unsigned int nSize = b.size();\n-            insert(end(), (unsigned char*)&nSize, (unsigned char*)&nSize + sizeof(nSize));\n-        }\n-        insert(end(), b.begin(), b.end());\n-        return *this;\n-    }\n+    CScript& operator<<(const std::vector<unsigned char>& b);\n \n-    CScript& operator<<(const CScript& b)\n-    {\n-        // I'm not sure if this should push the script or concatenate scripts.\n-        // If there's ever a use for pushing a script onto a script, delete this member fn\n-        assert(!\"Warning: Pushing a CScript onto a CScript with << is probably not intended, use + to concatenate!\");\n-        return *this;\n-    }\n+    CScript& operator<<(const CScript& b);\n \n     bool GetOp(iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>& vchRet)\n     {\n@@ -456,58 +348,7 @@ class CScript : public std::vector<unsigned char>\n         return GetOp2(pc, opcodeRet, NULL);\n     }\n \n-    bool GetOp2(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet) const\n-    {\n-        opcodeRet = OP_INVALIDOPCODE;\n-        if (pvchRet)\n-            pvchRet->clear();\n-        if (pc >= end())\n-            return false;\n-\n-        // Read instruction\n-        if (end() - pc < 1)\n-            return false;\n-        unsigned int opcode = *pc++;\n-\n-        // Immediate operand\n-        if (opcode <= OP_PUSHDATA4)\n-        {\n-            unsigned int nSize = 0;\n-            if (opcode < OP_PUSHDATA1)\n-            {\n-                nSize = opcode;\n-            }\n-            else if (opcode == OP_PUSHDATA1)\n-            {\n-                if (end() - pc < 1)\n-                    return false;\n-                nSize = *pc++;\n-            }\n-            else if (opcode == OP_PUSHDATA2)\n-            {\n-                if (end() - pc < 2)\n-                    return false;\n-                nSize = 0;\n-                memcpy(&nSize, &pc[0], 2);\n-                pc += 2;\n-            }\n-            else if (opcode == OP_PUSHDATA4)\n-            {\n-                if (end() - pc < 4)\n-                    return false;\n-                memcpy(&nSize, &pc[0], 4);\n-                pc += 4;\n-            }\n-            if (end() - pc < 0 || (unsigned int)(end() - pc) < nSize)\n-                return false;\n-            if (pvchRet)\n-                pvchRet->assign(pc, pc + nSize);\n-            pc += nSize;\n-        }\n-\n-        opcodeRet = (opcodetype)opcode;\n-        return true;\n-    }\n+    bool GetOp2(const_iterator& pc, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet) const;\n \n     // Decode small integers:\n     static int DecodeOP_N(opcodetype opcode)\n@@ -518,24 +359,7 @@ class CScript : public std::vector<unsigned char>\n         return (int)opcode - (int)(OP_1 - 1);\n     }\n \n-    int FindAndDelete(const CScript& b)\n-    {\n-        int nFound = 0;\n-        if (b.empty())\n-            return nFound;\n-        iterator pc = begin();\n-        opcodetype opcode;\n-        do\n-        {\n-            while (end() - pc >= (long)b.size() && memcmp(&pc[0], &b[0], b.size()) == 0)\n-            {\n-                pc = erase(pc, pc + b.size());\n-                ++nFound;\n-            }\n-        }\n-        while (GetOp(pc, opcode));\n-        return nFound;\n-    }\n+    int FindAndDelete(const CScript& b);\n \n     // Pre-version-0.6, Bitcoin always counted CHECKMULTISIGs\n     // as 20 sigops. With pay-to-script-hash, that changed:"
      }
    ]
  }
]