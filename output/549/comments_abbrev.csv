tcatm,2011-10-03T21:34:52Z,I think this could (and should) easily turned into a more general client. e.g. one that knows how many arguments bitcoin expects (can this be queried via RPC?) and asks for each argument. A blank value for optional arguments will use the default value for all following optional arguments. A first version could just ask for arguments arg1...argn and send execute the RPC when a blank value is entere,https://github.com/bitcoin/bitcoin/pull/549#issuecomment-2279756,2279756,
enmaku,2011-10-03T21:46:56Z,Happy to do the work (when I can find the time) but I have no idea what can be queried via RPC like this. If anyone has an answer (and perhaps some snippet of sample code?) I'd be happy to modify.\n,https://github.com/bitcoin/bitcoin/pull/549#issuecomment-2279986,2279986,
enmaku,2011-10-03T23:13:09Z,https://github.com/enmaku/bitcoin/tree/master/contrib/bitrpc\n\nSupports all the basic commands. I'm sure there's an easier way to run the command in sys.argv[1] without such tremendously long branching but I'm not familiar enough with ServiceProxy. If anyone knows I'd appreciate it.\n,https://github.com/bitcoin/bitcoin/pull/549#issuecomment-2280724,2280724,
sipa,2011-10-04T08:16:58Z,"Maybe we need to add a meta-RPC call that returns (in a machine-parseable format) all supported RPC calls and their argument types, so tools like this do not need to be be updated everytime an RPC call is added?\n",https://github.com/bitcoin/bitcoin/pull/549#issuecomment-2283598,2283598,
tcatm,2011-10-04T10:38:30Z,"The output of `help` can already be parsed. Mandotary arguments are enclosed in <>, optional arguments in []. Lists (sendmany) are enclosed in {}\n",https://github.com/bitcoin/bitcoin/pull/549#issuecomment-2284679,2284679,
enmaku,2011-10-04T14:43:53Z,"I guess my real question is how to use json-rpc's ServiceProxy more dynamically. For example, I create a ServiceProxy object called ""access"" and then I can run things like ""access.getinfo()"" - how can I run something like getinfo() dynamically without already knowing what the procedure is called? Is there some special function like SQL's ""exec"" that would allow me to do something like ""access.exec",https://github.com/bitcoin/bitcoin/pull/549#issuecomment-2287083,2287083,
