[
  {
    "sha": "5ea5368b3a71ab91032ed08b919a4bf740cd676b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWE1MzY4YjNhNzFhYjkxMDMyZWQwOGI5MTlhNGJmNzQwY2Q2NzZi",
    "commit": {
      "author": {
        "name": "Bob McElrath",
        "email": "bob_git@mcelrath.org",
        "date": "2017-01-06T23:23:44Z"
      },
      "committer": {
        "name": "Bob McElrath",
        "email": "bob_git@mcelrath.org",
        "date": "2017-01-19T22:17:37Z"
      },
      "message": "ZMQ example using python3 and asyncio",
      "tree": {
        "sha": "d1d44bb33259f3cf8fc2fa4584eda7fe6906a881",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1d44bb33259f3cf8fc2fa4584eda7fe6906a881"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ea5368b3a71ab91032ed08b919a4bf740cd676b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ea5368b3a71ab91032ed08b919a4bf740cd676b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ea5368b3a71ab91032ed08b919a4bf740cd676b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ea5368b3a71ab91032ed08b919a4bf740cd676b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82274c02ed2d82537dc55f008a29edb1bc09bbc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82274c02ed2d82537dc55f008a29edb1bc09bbc4"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 52,
      "deletions": 0
    },
    "files": [
      {
        "sha": "79cb5b484ce60e122c06044e53003aab5ff2e085",
        "filename": "contrib/zmq/zmq_sub3.py",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ea5368b3a71ab91032ed08b919a4bf740cd676b/contrib/zmq/zmq_sub3.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ea5368b3a71ab91032ed08b919a4bf740cd676b/contrib/zmq/zmq_sub3.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub3.py?ref=5ea5368b3a71ab91032ed08b919a4bf740cd676b",
        "patch": "@@ -0,0 +1,52 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import array\n+import binascii\n+import asyncio, zmq, zmq.asyncio\n+import struct\n+\n+port = 28332\n+\n+zmqContext = zmq.asyncio.Context()\n+\n+async def recv_and_process():\n+    zmqSubSocket = zmqContext.socket(zmq.SUB)\n+    zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashblock\")\n+    zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashtx\")\n+    zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawblock\")\n+    zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawtx\")\n+    zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n+\n+    poller = zmq.asyncio.Poller()\n+    poller.register(zmqSubSocket, zmq.POLLIN)\n+    while True:\n+        s = await poller.poll()\n+        msg = await s[0][0].recv_multipart()\n+        topic = msg[0]\n+        body = msg[1]\n+        sequence = \"Unknown\";\n+        if len(msg[-1]) == 4:\n+          msgSequence = struct.unpack('<I', msg[-1])[-1]\n+          sequence = str(msgSequence)\n+        if topic == b\"hashblock\":\n+            print('- HASH BLOCK ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+        elif topic == b\"hashtx\":\n+            print('- HASH TX  ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+        elif topic == b\"rawblock\":\n+            print('- RAW BLOCK HEADER ('+sequence+') -')\n+            print(binascii.hexlify(body[:80]))\n+        elif topic == b\"rawtx\":\n+            print('- RAW TX ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+\n+try:\n+    loop = zmq.asyncio.ZMQEventLoop()\n+    asyncio.set_event_loop(loop)\n+    loop.run_until_complete(setup())\n+except KeyboardInterrupt:\n+    zmqContext.destroy()"
      }
    ]
  },
  {
    "sha": "5406d510678cf4b1191f1b9a1838524fe5fa13da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDA2ZDUxMDY3OGNmNGIxMTkxZjFiOWExODM4NTI0ZmU1ZmExM2Rh",
    "commit": {
      "author": {
        "name": "Bob McElrath",
        "email": "bob_git@mcelrath.org",
        "date": "2017-01-09T22:07:13Z"
      },
      "committer": {
        "name": "Bob McElrath",
        "email": "bob_git@mcelrath.org",
        "date": "2017-01-19T22:17:37Z"
      },
      "message": "Rewrite to not use Polling wrapper for asyncio, link to python2.7 example",
      "tree": {
        "sha": "385b6aaac9c53a7383724228b7501dfe0702aebc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/385b6aaac9c53a7383724228b7501dfe0702aebc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5406d510678cf4b1191f1b9a1838524fe5fa13da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5406d510678cf4b1191f1b9a1838524fe5fa13da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5406d510678cf4b1191f1b9a1838524fe5fa13da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5406d510678cf4b1191f1b9a1838524fe5fa13da/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "5ea5368b3a71ab91032ed08b919a4bf740cd676b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ea5368b3a71ab91032ed08b919a4bf740cd676b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ea5368b3a71ab91032ed08b919a4bf740cd676b"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 51,
      "deletions": 81
    },
    "files": [
      {
        "sha": "e462198bfea8dd5f95f5db6e5113bc88f0024770",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 51,
        "deletions": 29,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5406d510678cf4b1191f1b9a1838524fe5fa13da/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5406d510678cf4b1191f1b9a1838524fe5fa13da/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=5406d510678cf4b1191f1b9a1838524fe5fa13da",
        "patch": "@@ -1,43 +1,65 @@\n-#!/usr/bin/env python2\n+#!/usr/bin/env python3\n # Copyright (c) 2014-2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+# A blocking example using python 2.7 can be obtained from the git history:\n+# https://github.com/bitcoin/bitcoin/blob/37a7fe9e440b83e2364d5498931253937abe9294/contrib/zmq/zmq_sub.py\n+\n+import array\n import binascii\n-import zmq\n+import asyncio, zmq, zmq.asyncio\n+import signal\n import struct\n \n port = 28332\n \n-zmqContext = zmq.Context()\n-zmqSubSocket = zmqContext.socket(zmq.SUB)\n-zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashblock\")\n-zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashtx\")\n-zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"rawblock\")\n-zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"rawtx\")\n-zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n-\n-try:\n-    while True:\n-        msg = zmqSubSocket.recv_multipart()\n-        topic = str(msg[0])\n+class ZMQHandler():\n+    def __init__(self):\n+        self.loop = zmq.asyncio.install()\n+        self.zmqContext = zmq.asyncio.Context()\n+\n+        self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashblock\")\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashtx\")\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawblock\")\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawtx\")\n+        self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n+\n+    async def handle(self) :\n+        msg = await self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n         body = msg[1]\n         sequence = \"Unknown\";\n         if len(msg[-1]) == 4:\n           msgSequence = struct.unpack('<I', msg[-1])[-1]\n           sequence = str(msgSequence)\n-        if topic == \"hashblock\":\n-            print '- HASH BLOCK ('+sequence+') -'\n-            print binascii.hexlify(body)\n-        elif topic == \"hashtx\":\n-            print '- HASH TX  ('+sequence+') -'\n-            print binascii.hexlify(body)\n-        elif topic == \"rawblock\":\n-            print '- RAW BLOCK HEADER ('+sequence+') -'\n-            print binascii.hexlify(body[:80])\n-        elif topic == \"rawtx\":\n-            print '- RAW TX ('+sequence+') -'\n-            print binascii.hexlify(body)\n-\n-except KeyboardInterrupt:\n-    zmqContext.destroy()\n+        if topic == b\"hashblock\":\n+            print('- HASH BLOCK ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+        elif topic == b\"hashtx\":\n+            print('- HASH TX  ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+        elif topic == b\"rawblock\":\n+            print('- RAW BLOCK HEADER ('+sequence+') -')\n+            print(binascii.hexlify(body[:80]))\n+        elif topic == b\"rawtx\":\n+            print('- RAW TX ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+        # schedule ourselves to receive the next message\n+        asyncio.ensure_future(self.handle())\n+\n+    def start(self):\n+        asyncio.ensure_future(self.handle())\n+        self.loop.run_forever()\n+\n+    def stop(self):\n+        self.loop.stop()\n+        self.zmqContext.destroy()\n+\n+daemon = ZMQHandler()\n+def signal_handler(num, frame):\n+    daemon.stop()\n+    exit(0)\n+signal.signal(signal.SIGINT, signal_handler)\n+daemon.start()"
      },
      {
        "sha": "79cb5b484ce60e122c06044e53003aab5ff2e085",
        "filename": "contrib/zmq/zmq_sub3.py",
        "status": "removed",
        "additions": 0,
        "deletions": 52,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ea5368b3a71ab91032ed08b919a4bf740cd676b/contrib/zmq/zmq_sub3.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ea5368b3a71ab91032ed08b919a4bf740cd676b/contrib/zmq/zmq_sub3.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub3.py?ref=5ea5368b3a71ab91032ed08b919a4bf740cd676b",
        "patch": "@@ -1,52 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2014-2016 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-import array\n-import binascii\n-import asyncio, zmq, zmq.asyncio\n-import struct\n-\n-port = 28332\n-\n-zmqContext = zmq.asyncio.Context()\n-\n-async def recv_and_process():\n-    zmqSubSocket = zmqContext.socket(zmq.SUB)\n-    zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashblock\")\n-    zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashtx\")\n-    zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawblock\")\n-    zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawtx\")\n-    zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n-\n-    poller = zmq.asyncio.Poller()\n-    poller.register(zmqSubSocket, zmq.POLLIN)\n-    while True:\n-        s = await poller.poll()\n-        msg = await s[0][0].recv_multipart()\n-        topic = msg[0]\n-        body = msg[1]\n-        sequence = \"Unknown\";\n-        if len(msg[-1]) == 4:\n-          msgSequence = struct.unpack('<I', msg[-1])[-1]\n-          sequence = str(msgSequence)\n-        if topic == b\"hashblock\":\n-            print('- HASH BLOCK ('+sequence+') -')\n-            print(binascii.hexlify(body))\n-        elif topic == b\"hashtx\":\n-            print('- HASH TX  ('+sequence+') -')\n-            print(binascii.hexlify(body))\n-        elif topic == b\"rawblock\":\n-            print('- RAW BLOCK HEADER ('+sequence+') -')\n-            print(binascii.hexlify(body[:80]))\n-        elif topic == b\"rawtx\":\n-            print('- RAW TX ('+sequence+') -')\n-            print(binascii.hexlify(body))\n-\n-try:\n-    loop = zmq.asyncio.ZMQEventLoop()\n-    asyncio.set_event_loop(loop)\n-    loop.run_until_complete(setup())\n-except KeyboardInterrupt:\n-    zmqContext.destroy()"
      }
    ]
  },
  {
    "sha": "4bb7d1bc4dd388255a8c14b22948b33378359b60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YmI3ZDFiYzRkZDM4ODI1NWE4YzE0YjIyOTQ4YjMzMzc4MzU5YjYw",
    "commit": {
      "author": {
        "name": "Bob McElrath",
        "email": "bob_git@mcelrath.org",
        "date": "2017-01-10T15:54:07Z"
      },
      "committer": {
        "name": "Bob McElrath",
        "email": "bob_git@mcelrath.org",
        "date": "2017-01-19T22:17:37Z"
      },
      "message": "Add python version checks and 3.4 example",
      "tree": {
        "sha": "b0e3f8f2470373d5eb0ac4ca638db23b32bad62f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0e3f8f2470373d5eb0ac4ca638db23b32bad62f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4bb7d1bc4dd388255a8c14b22948b33378359b60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bb7d1bc4dd388255a8c14b22948b33378359b60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4bb7d1bc4dd388255a8c14b22948b33378359b60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bb7d1bc4dd388255a8c14b22948b33378359b60/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "5406d510678cf4b1191f1b9a1838524fe5fa13da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5406d510678cf4b1191f1b9a1838524fe5fa13da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5406d510678cf4b1191f1b9a1838524fe5fa13da"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 76,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4839f401b1f5bf6883e3f2dcf0f035a65c88f5ad",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bb7d1bc4dd388255a8c14b22948b33378359b60/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bb7d1bc4dd388255a8c14b22948b33378359b60/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=4bb7d1bc4dd388255a8c14b22948b33378359b60",
        "patch": "@@ -11,6 +11,11 @@\n import asyncio, zmq, zmq.asyncio\n import signal\n import struct\n+import sys\n+\n+if not (sys.version_info.major >= 3 and sys.version_info.minor >= 5):\n+    print(\"This example only works with Python 3.5 and greater\")\n+    exit(1)\n \n port = 28332\n "
      },
      {
        "sha": "bd0c4fb30c5278bf4b3e7c4faf82c321aa61c1d2",
        "filename": "contrib/zmq/zmq_sub3.4.py",
        "status": "added",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4bb7d1bc4dd388255a8c14b22948b33378359b60/contrib/zmq/zmq_sub3.4.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4bb7d1bc4dd388255a8c14b22948b33378359b60/contrib/zmq/zmq_sub3.4.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub3.4.py?ref=4bb7d1bc4dd388255a8c14b22948b33378359b60",
        "patch": "@@ -0,0 +1,71 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+# A blocking example using python 2.7 can be obtained from the git history:\n+# https://github.com/bitcoin/bitcoin/blob/37a7fe9e440b83e2364d5498931253937abe9294/contrib/zmq/zmq_sub.py\n+\n+import array\n+import binascii\n+import asyncio, zmq, zmq.asyncio\n+import signal\n+import struct\n+import sys\n+\n+if not (sys.version_info.major >= 3 and sys.version_info.minor >= 4):\n+    print(\"This example only works with Python 3.4 and greater\")\n+    exit(1)\n+\n+port = 28332\n+\n+class ZMQHandler():\n+    def __init__(self):\n+        self.loop = zmq.asyncio.install()\n+        self.zmqContext = zmq.asyncio.Context()\n+\n+        self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashblock\")\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashtx\")\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawblock\")\n+        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawtx\")\n+        self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n+\n+    @asyncio.coroutine\n+    def handle(self) :\n+        msg = yield from self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        body = msg[1]\n+        sequence = \"Unknown\";\n+        if len(msg[-1]) == 4:\n+          msgSequence = struct.unpack('<I', msg[-1])[-1]\n+          sequence = str(msgSequence)\n+        if topic == b\"hashblock\":\n+            print('- HASH BLOCK ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+        elif topic == b\"hashtx\":\n+            print('- HASH TX  ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+        elif topic == b\"rawblock\":\n+            print('- RAW BLOCK HEADER ('+sequence+') -')\n+            print(binascii.hexlify(body[:80]))\n+        elif topic == b\"rawtx\":\n+            print('- RAW TX ('+sequence+') -')\n+            print(binascii.hexlify(body))\n+        # schedule ourselves to receive the next message\n+        asyncio.ensure_future(self.handle())\n+\n+    def start(self):\n+        asyncio.ensure_future(self.handle())\n+        self.loop.run_forever()\n+\n+    def stop(self):\n+        self.loop.stop()\n+        self.zmqContext.destroy()\n+\n+daemon = ZMQHandler()\n+def signal_handler(num, frame):\n+    daemon.stop()\n+    exit(0)\n+signal.signal(signal.SIGINT, signal_handler)\n+daemon.start()"
      }
    ]
  },
  {
    "sha": "b471daf85b07d0ca072a8d7ec482a25401a67399",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDcxZGFmODViMDdkMGNhMDcyYThkN2VjNDgyYTI1NDAxYTY3Mzk5",
    "commit": {
      "author": {
        "name": "Bob McElrath",
        "email": "bob_git@mcelrath.org",
        "date": "2017-01-19T22:06:52Z"
      },
      "committer": {
        "name": "Bob McElrath",
        "email": "bob_git@mcelrath.org",
        "date": "2017-01-19T22:17:37Z"
      },
      "message": "Adddress nits, use asyncio signal handling, create_task",
      "tree": {
        "sha": "3a9fb32deb5afb5f2d6a4526b3817591d5c01637",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a9fb32deb5afb5f2d6a4526b3817591d5c01637"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b471daf85b07d0ca072a8d7ec482a25401a67399",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b471daf85b07d0ca072a8d7ec482a25401a67399",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b471daf85b07d0ca072a8d7ec482a25401a67399",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b471daf85b07d0ca072a8d7ec482a25401a67399/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "4bb7d1bc4dd388255a8c14b22948b33378359b60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4bb7d1bc4dd388255a8c14b22948b33378359b60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4bb7d1bc4dd388255a8c14b22948b33378359b60"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 50,
      "deletions": 18
    },
    "files": [
      {
        "sha": "33a6b4ce657e9ef9fea512c8fd94f78a8f55f3d1",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 23,
        "deletions": 9,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b471daf85b07d0ca072a8d7ec482a25401a67399/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b471daf85b07d0ca072a8d7ec482a25401a67399/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=b471daf85b07d0ca072a8d7ec482a25401a67399",
        "patch": "@@ -3,12 +3,29 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-# A blocking example using python 2.7 can be obtained from the git history:\n-# https://github.com/bitcoin/bitcoin/blob/37a7fe9e440b83e2364d5498931253937abe9294/contrib/zmq/zmq_sub.py\n+\"\"\"\n+    ZMQ example using python3's asyncio\n+\n+    Bitcoin should be started with the command line arguments:\n+        bitcoind -testnet -daemon \\\n+                -zmqpubhashblock=tcp://127.0.0.1:28332 \\\n+                -zmqpubrawtx=tcp://127.0.0.1:28332 \\\n+                -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n+                -zmqpubhashblock=tcp://127.0.0.1:28332\n+\n+    We use the asyncio library here.  `self.handle()` installs itself as a\n+    future at the end of the function.  Since it never returns with the event\n+    loop having an empty stack of futures, this creates an infinite loop.  An\n+    alternative is to wrap the contents of `handle` inside `while True`.\n+\n+    A blocking example using python 2.7 can be obtained from the git history:\n+    https://github.com/bitcoin/bitcoin/blob/37a7fe9e440b83e2364d5498931253937abe9294/contrib/zmq/zmq_sub.py\n+\"\"\"\n \n-import array\n import binascii\n-import asyncio, zmq, zmq.asyncio\n+import asyncio\n+import zmq\n+import zmq.asyncio\n import signal\n import struct\n import sys\n@@ -55,16 +72,13 @@ async def handle(self) :\n         asyncio.ensure_future(self.handle())\n \n     def start(self):\n-        asyncio.ensure_future(self.handle())\n+        self.loop.add_signal_handler(signal.SIGINT, self.stop)\n+        self.loop.create_task(self.handle())\n         self.loop.run_forever()\n \n     def stop(self):\n         self.loop.stop()\n         self.zmqContext.destroy()\n \n daemon = ZMQHandler()\n-def signal_handler(num, frame):\n-    daemon.stop()\n-    exit(0)\n-signal.signal(signal.SIGINT, signal_handler)\n daemon.start()"
      },
      {
        "sha": "a2ff64b29b77ef9d1e9cfbfc26faa2cedd005bf3",
        "filename": "contrib/zmq/zmq_sub3.4.py",
        "status": "modified",
        "additions": 27,
        "deletions": 9,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b471daf85b07d0ca072a8d7ec482a25401a67399/contrib/zmq/zmq_sub3.4.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b471daf85b07d0ca072a8d7ec482a25401a67399/contrib/zmq/zmq_sub3.4.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub3.4.py?ref=b471daf85b07d0ca072a8d7ec482a25401a67399",
        "patch": "@@ -3,12 +3,33 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-# A blocking example using python 2.7 can be obtained from the git history:\n-# https://github.com/bitcoin/bitcoin/blob/37a7fe9e440b83e2364d5498931253937abe9294/contrib/zmq/zmq_sub.py\n+\"\"\"\n+    ZMQ example using python3's asyncio\n+\n+    Bitcoin should be started with the command line arguments:\n+        bitcoind -testnet -daemon \\\n+                -zmqpubhashblock=tcp://127.0.0.1:28332 \\\n+                -zmqpubrawtx=tcp://127.0.0.1:28332 \\\n+                -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n+                -zmqpubhashblock=tcp://127.0.0.1:28332\n+\n+    We use the asyncio library here.  `self.handle()` installs itself as a\n+    future at the end of the function.  Since it never returns with the event\n+    loop having an empty stack of futures, this creates an infinite loop.  An\n+    alternative is to wrap the contents of `handle` inside `while True`.\n+\n+    The `@asyncio.coroutine` decorator and the `yield from` syntax found here\n+    was introduced in python 3.4 and has been deprecated in favor of the `async`\n+    and `await` keywords respectively.\n+\n+    A blocking example using python 2.7 can be obtained from the git history:\n+    https://github.com/bitcoin/bitcoin/blob/37a7fe9e440b83e2364d5498931253937abe9294/contrib/zmq/zmq_sub.py\n+\"\"\"\n \n-import array\n import binascii\n-import asyncio, zmq, zmq.asyncio\n+import asyncio\n+import zmq\n+import zmq.asyncio\n import signal\n import struct\n import sys\n@@ -56,16 +77,13 @@ def handle(self) :\n         asyncio.ensure_future(self.handle())\n \n     def start(self):\n-        asyncio.ensure_future(self.handle())\n+        self.loop.add_signal_handler(signal.SIGINT, self.stop)\n+        self.loop.create_task(self.handle())\n         self.loop.run_forever()\n \n     def stop(self):\n         self.loop.stop()\n         self.zmqContext.destroy()\n \n daemon = ZMQHandler()\n-def signal_handler(num, frame):\n-    daemon.stop()\n-    exit(0)\n-signal.signal(signal.SIGINT, signal_handler)\n daemon.start()"
      }
    ]
  }
]