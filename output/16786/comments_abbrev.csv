fanquake,2019-09-03 04:14:12,"This is currently failing on [Travis](https://travis-ci.org/bitcoin/bitcoin/builds/579539398):\n```bash\nwallet/test/wallet_tests.cpp(381): Entering test case ""WatchOnlyPubKeys""\nAssertion failed: lock cs_wallet not held in wallet/wallet.cpp:578; locks held:\nunknown location(0): fatal error: in ""wallet_tests/WatchOnlyPubKeys"": signal: SIGABRT (application abort requested)\nwallet/test/wallet",https://github.com/bitcoin/bitcoin/pull/16786#issuecomment-527297116,527297116,
theStack,2019-09-03 06:58:05,"> This is currently failing on [Travis](https://travis-ci.org/bitcoin/bitcoin/builds/579539398):\n> ...\n> You'll need to add some locking `LOCK(wallet->cs_wallet);`\n\nThanks, done (f74dc7ea05cf466077c6f46910ae4228373656e4). It took me quite a while to reproduce this warning, obviously it only appears compiling with clang (which makes sense after looking at src/threadsafety.h, where all the d",https://github.com/bitcoin/bitcoin/pull/16786#issuecomment-527330791,527330791,
instagibbs,2019-09-03 13:05:23,you should just squash the 2 commits together,https://github.com/bitcoin/bitcoin/pull/16786#issuecomment-527449590,527449590,
theStack,2019-09-17 06:18:09,@instagibbs @achow101 Thanks for your reviews!,https://github.com/bitcoin/bitcoin/pull/16786#issuecomment-532076933,532076933,
Sjors,2019-09-19 10:41:20,"ACK a57a1d4\n\n\nAs an aside, in case anyone wants to test P2PK functionality (on testnet), here's a fun tool: https://github.com/dianerey/bech32p2pkaddress (no need to provide inputs in the Python script, just use `fundrawtransaction` and `signrawtransactionwithwallet`).\n\nWhen you import a pubkey using `importpubkey`, the wallet watches for P2PK transactions as well. It also happily import",https://github.com/bitcoin/bitcoin/pull/16786#issuecomment-533073216,533073216,
theStack,2019-09-19 13:44:38,"@Sjors: Thanks for the review!\n\n> When you import a pubkey using `importpubkey`, the wallet watches for P2PK transactions as well. It also happily imports invalid pubkeys to watch. The same goes for `importaddress 21PUBKEYac` (P2PK script). The wallet also happily signs raw transactions to such keys, which should make anyone appreciate checksums.\n\nAre you sure that `importpubkey` imports i",https://github.com/bitcoin/bitcoin/pull/16786#issuecomment-533137397,533137397,
Sjors,2019-09-19 15:19:24,"Oops, I just changed one character in the pubkey hex thinking that would do the trick, but of course with a compressed pubkey such a tweaked point is most likely still on the curve.\n\n`importpubkey 020000000000000000000000000000000000000000000000000000000000000000` indeed throws. `importaddress 21020000000000000000000000000000000000000000000000000000000000000000ac` does work.",https://github.com/bitcoin/bitcoin/pull/16786#issuecomment-533180728,533180728,
theStack,2019-09-19 17:51:28,"> \n> \n> Oops, I just changed one character in the pubkey hex thinking that would do the trick, but of course with a compressed pubkey such a tweaked point is most likely still on the curve.\n\nOkay :+1: \n\n> \n> `importpubkey 020000000000000000000000000000000000000000000000000000000000000000` indeed throws. `importaddress 210200000000000000000000000000000000000000000000000000000000000000",https://github.com/bitcoin/bitcoin/pull/16786#issuecomment-533239186,533239186,
theStack,2019-10-10 13:58:16,Since there has been no activity for three weeks: is there anything else I can do for this PR?,https://github.com/bitcoin/bitcoin/pull/16786#issuecomment-540598405,540598405,
instagibbs,2019-10-10 14:01:42,"reACK https://github.com/bitcoin/bitcoin/pull/16786/commits/a57a1d42d52fe51e5b413a1fd3a5ef2b7a2120e3\n\njust squashed",https://github.com/bitcoin/bitcoin/pull/16786#issuecomment-540600454,540600454,
instagibbs,2019-09-03 12:59:58,s/`cryptographically correct`/`a point on the curve`/,https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320257616,320257616,src/wallet/test/wallet_tests.cpp
instagibbs,2019-09-03 13:01:25,"Would it just be simpler for this test to zero out the last 32/64 bytes? Is having the shuffled bytes testing anything important\n?",https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320258229,320258229,src/wallet/test/wallet_tests.cpp
instagibbs,2019-09-03 13:02:46,s/add/added/,https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320258828,320258828,src/wallet/test/wallet_tests.cpp
instagibbs,2019-09-03 13:03:11,s/add/added/,https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320259011,320259011,src/wallet/test/wallet_tests.cpp
instagibbs,2019-09-03 13:04:09, maybe also assert what `found_pubkey` ends up being  in this situation,https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320259431,320259431,src/wallet/test/wallet_tests.cpp
theStack,2019-09-03 14:40:43,"Good point -- no, the shuffling doesn't test anything import, for some reason I didn't want to set the PubKey coordinate(s) to a fixed value off the curve. Zeroing out is simpler and saves the loop.",https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320310358,320310358,src/wallet/test/wallet_tests.cpp
theStack,2019-09-03 14:42:42,"`found_pubkey` isn't touched when no PubKey is found, but of course this fact can be tested as well by asserting it to be a newly constructed (and thus invalid) PubKey.",https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320311485,320311485,src/wallet/test/wallet_tests.cpp
achow101,2019-09-03 18:12:32,"nit: braces\n\nAs above, you should also check that `found_pubkey` is the default `CPubKey`.",https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320408999,320408999,src/wallet/test/wallet_tests.cpp
achow101,2019-09-03 18:13:59,Use `BOOST_CHECK` instead of `assert`.,https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320409627,320409627,src/wallet/test/wallet_tests.cpp
achow101,2019-09-03 18:15:08,Should use `!IsCompressed` rather than checking the size directly.,https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320410159,320410159,src/wallet/test/wallet_tests.cpp
theStack,2019-09-03 19:50:18,"Since `GetWatchPubKey` doesn't modify the passed PubKey if it returns `false`, it would still have the same contents as before, so in this case the correct assertion would be `found_pubkey == add_pubkey`. To not confuse the reader (one could wrongly assume that this assert checks for an explicit modification by the function in this case as well), I add the comment `// passed key is unchanged` for ",https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320448669,320448669,src/wallet/test/wallet_tests.cpp
theStack,2019-09-03 22:27:24,Done,https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320504314,320504314,src/wallet/test/wallet_tests.cpp
theStack,2019-09-03 22:27:43,Done,https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320504396,320504396,src/wallet/test/wallet_tests.cpp
theStack,2019-09-03 22:28:02,Done,https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320504479,320504479,src/wallet/test/wallet_tests.cpp
theStack,2019-09-03 22:28:35,Done,https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320504644,320504644,src/wallet/test/wallet_tests.cpp
theStack,2019-09-03 22:29:06,Done,https://github.com/bitcoin/bitcoin/pull/16786#discussion_r320504794,320504794,src/wallet/test/wallet_tests.cpp
achow101,2019-09-16 16:29:35,nit: snake_case,https://github.com/bitcoin/bitcoin/pull/16786#discussion_r324769911,324769911,src/wallet/test/wallet_tests.cpp
theStack,2019-09-17 06:16:28,Done,https://github.com/bitcoin/bitcoin/pull/16786#discussion_r324995806,324995806,src/wallet/test/wallet_tests.cpp
