[
  {
    "sha": "a57a1d42d52fe51e5b413a1fd3a5ef2b7a2120e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTdhMWQ0MmQ1MmZlNTFlNWI0MTNhMWZkM2E1ZWYyYjdhMjEyMGUz",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2019-09-01T20:10:51Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2019-09-16T21:23:48Z"
      },
      "message": "test: add unit test for wallet watch-only methods involving PubKeys\n\nThe motivation for this addition was to unit test the function\nwallet.cpp:ExtractPubKey() (see recent change in commit\n798a589aff64b83a0844688a661f4bd987c3340c) which is however static and only\nindirectly available via the public methods AddWatchOnly(), LoadWatchOnly() and\nRemoveWatchOnly(). Since the first of those methods also stores the addresses\nto the disk, the second, simpler one was chosen which only operates in memory.\n\ntest: add missing wallet lock for test case WatchOnlyPubKeys\n\ntest: test case WatchOnlyPubKeys, suggested review changes by instagibbs\n\ntest: test case WatchOnlyPubKeys, suggested review changes by achow101\n\ntest: test case WatchOnlyPubKeys, s/isPubKeyFullyValid/is_pubkey_fully_valid",
      "tree": {
        "sha": "30c1a237786b8dae3d39d50eb1c0932b0ca7bb8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30c1a237786b8dae3d39d50eb1c0932b0ca7bb8f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a57a1d42d52fe51e5b413a1fd3a5ef2b7a2120e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a57a1d42d52fe51e5b413a1fd3a5ef2b7a2120e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a57a1d42d52fe51e5b413a1fd3a5ef2b7a2120e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a57a1d42d52fe51e5b413a1fd3a5ef2b7a2120e3/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3e672119e80b04f15548b5bfae279cd722eac24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3e672119e80b04f15548b5bfae279cd722eac24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3e672119e80b04f15548b5bfae279cd722eac24"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 78,
      "deletions": 0
    },
    "files": [
      {
        "sha": "66601fd9b72a569deb2cfae5a324f84046c281b3",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a57a1d42d52fe51e5b413a1fd3a5ef2b7a2120e3/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a57a1d42d52fe51e5b413a1fd3a5ef2b7a2120e3/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=a57a1d42d52fe51e5b413a1fd3a5ef2b7a2120e3",
        "patch": "@@ -334,6 +334,84 @@ BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n     BOOST_CHECK_EQUAL(values[1], \"val_rr1\");\n }\n \n+// Test some watch-only wallet methods by the procedure of loading (LoadWatchOnly),\n+// checking (HaveWatchOnly), getting (GetWatchPubKey) and removing (RemoveWatchOnly) a\n+// given PubKey, resp. its corresponding P2PK Script. Results of the the impact on\n+// the address -> PubKey map is dependent on whether the PubKey is a point on the curve\n+static void TestWatchOnlyPubKey(CWallet& wallet, const CPubKey& add_pubkey)\n+{\n+    CScript p2pk = GetScriptForRawPubKey(add_pubkey);\n+    CKeyID add_address = add_pubkey.GetID();\n+    CPubKey found_pubkey;\n+    LOCK(wallet.cs_wallet);\n+\n+    // all Scripts (i.e. also all PubKeys) are added to the general watch-only set\n+    BOOST_CHECK(!wallet.HaveWatchOnly(p2pk));\n+    wallet.LoadWatchOnly(p2pk);\n+    BOOST_CHECK(wallet.HaveWatchOnly(p2pk));\n+\n+    // only PubKeys on the curve shall be added to the watch-only address -> PubKey map\n+    bool is_pubkey_fully_valid = add_pubkey.IsFullyValid();\n+    if (is_pubkey_fully_valid) {\n+        BOOST_CHECK(wallet.GetWatchPubKey(add_address, found_pubkey));\n+        BOOST_CHECK(found_pubkey == add_pubkey);\n+    } else {\n+        BOOST_CHECK(!wallet.GetWatchPubKey(add_address, found_pubkey));\n+        BOOST_CHECK(found_pubkey == CPubKey()); // passed key is unchanged\n+    }\n+\n+    wallet.RemoveWatchOnly(p2pk);\n+    BOOST_CHECK(!wallet.HaveWatchOnly(p2pk));\n+\n+    if (is_pubkey_fully_valid) {\n+        BOOST_CHECK(!wallet.GetWatchPubKey(add_address, found_pubkey));\n+        BOOST_CHECK(found_pubkey == add_pubkey); // passed key is unchanged\n+    }\n+}\n+\n+// Cryptographically invalidate a PubKey whilst keeping length and first byte\n+static void PollutePubKey(CPubKey& pubkey)\n+{\n+    std::vector<unsigned char> pubkey_raw(pubkey.begin(), pubkey.end());\n+    std::fill(pubkey_raw.begin()+1, pubkey_raw.end(), 0);\n+    pubkey = CPubKey(pubkey_raw);\n+    assert(!pubkey.IsFullyValid());\n+    assert(pubkey.IsValid());\n+}\n+\n+// Test watch-only wallet logic for PubKeys\n+BOOST_AUTO_TEST_CASE(WatchOnlyPubKeys)\n+{\n+    CKey key;\n+    CPubKey pubkey;\n+\n+    BOOST_CHECK(!m_wallet.HaveWatchOnly());\n+\n+    // uncompressed valid PubKey\n+    key.MakeNewKey(false);\n+    pubkey = key.GetPubKey();\n+    assert(!pubkey.IsCompressed());\n+    TestWatchOnlyPubKey(m_wallet, pubkey);\n+\n+    // uncompressed cryptographically invalid PubKey\n+    PollutePubKey(pubkey);\n+    TestWatchOnlyPubKey(m_wallet, pubkey);\n+\n+    // compressed valid PubKey\n+    key.MakeNewKey(true);\n+    pubkey = key.GetPubKey();\n+    assert(pubkey.IsCompressed());\n+    TestWatchOnlyPubKey(m_wallet, pubkey);\n+\n+    // compressed cryptographically invalid PubKey\n+    PollutePubKey(pubkey);\n+    TestWatchOnlyPubKey(m_wallet, pubkey);\n+\n+    // invalid empty PubKey\n+    pubkey = CPubKey();\n+    TestWatchOnlyPubKey(m_wallet, pubkey);\n+}\n+\n class ListCoinsTestingSetup : public TestChain100Setup\n {\n public:"
      }
    ]
  }
]