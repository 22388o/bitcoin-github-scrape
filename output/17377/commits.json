[
  {
    "sha": "606422b7adfebfe9f8cda0480f6fda739331848d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDY0MjJiN2FkZmViZmU5ZjhjZGEwNDgwZjZmZGE3MzkzMzE4NDhk",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2019-11-05T11:59:45Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2019-11-05T14:10:29Z"
      },
      "message": "wallet: remove unused variable spk_man in import* RPCs\n\nEach of the following RPC functions define a variable reference\n\"LegacyScriptPubKeyMan& spk_man\" which is not used, leading to compiler\nwarnings:\n- importprivkey\n- importaddress\n- importpubkey\n- importwallet\n- importmulti\n\nThe call to GetLegacyScriptPubKeyMan() still serves the purpose to throw an\nerror if the wallet doesn't have a LegacyScriptPubKeyMan instance. This commit\nintroduces a new function RequireLegacyScriptPubKeyMan() which in turn calls\nGetLegacyScriptPubKeyMan() but discards its return value.",
      "tree": {
        "sha": "3c62f9e68dcf51710760c52fc9dbff1d5cc21a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c62f9e68dcf51710760c52fc9dbff1d5cc21a5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/606422b7adfebfe9f8cda0480f6fda739331848d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/606422b7adfebfe9f8cda0480f6fda739331848d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/606422b7adfebfe9f8cda0480f6fda739331848d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/606422b7adfebfe9f8cda0480f6fda739331848d/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bdda137878904e9401a84e308ac74c93c2ef87c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdda137878904e9401a84e308ac74c93c2ef87c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdda137878904e9401a84e308ac74c93c2ef87c1"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "051cdf1b2ecc4027dbf4628fd688df495a9be85b",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/606422b7adfebfe9f8cda0480f6fda739331848d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/606422b7adfebfe9f8cda0480f6fda739331848d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=606422b7adfebfe9f8cda0480f6fda739331848d",
        "patch": "@@ -96,6 +96,12 @@ static LegacyScriptPubKeyMan& GetLegacyScriptPubKeyMan(CWallet& wallet)\n     return *spk_man;\n }\n \n+// Only check the presence of a LegacyScriptPubKeyMan, throw an error if it doesn't\n+static void RequireLegacyScriptPubKeyMan(CWallet& wallet)\n+{\n+    (void)GetLegacyScriptPubKeyMan(wallet);\n+}\n+\n UniValue importprivkey(const JSONRPCRequest& request)\n {\n     std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n@@ -134,7 +140,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n     }\n \n-    LegacyScriptPubKeyMan& spk_man = GetLegacyScriptPubKeyMan(*wallet);\n+    RequireLegacyScriptPubKeyMan(*wallet);\n \n     WalletRescanReserver reserver(pwallet);\n     bool fRescan = true;\n@@ -262,7 +268,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    LegacyScriptPubKeyMan& spk_man = GetLegacyScriptPubKeyMan(*pwallet);\n+    RequireLegacyScriptPubKeyMan(*pwallet);\n \n     std::string strLabel;\n     if (!request.params[1].isNull())\n@@ -465,7 +471,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    LegacyScriptPubKeyMan& spk_man = GetLegacyScriptPubKeyMan(*wallet);\n+    RequireLegacyScriptPubKeyMan(*wallet);\n \n     std::string strLabel;\n     if (!request.params[1].isNull())\n@@ -549,7 +555,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    LegacyScriptPubKeyMan& spk_man = GetLegacyScriptPubKeyMan(*wallet);\n+    RequireLegacyScriptPubKeyMan(*wallet);\n \n     if (pwallet->chain().havePruned()) {\n         // Exit early and print an error.\n@@ -1346,7 +1352,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     RPCTypeCheck(mainRequest.params, {UniValue::VARR, UniValue::VOBJ});\n \n-    LegacyScriptPubKeyMan& spk_man = GetLegacyScriptPubKeyMan(*wallet);\n+    RequireLegacyScriptPubKeyMan(*wallet);\n \n     const UniValue& requests = mainRequest.params[0];\n "
      }
    ]
  }
]