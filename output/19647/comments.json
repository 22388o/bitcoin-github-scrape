[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667734282",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-667734282",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19647",
    "id": 667734282,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzczNDI4Mg==",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?u=7297e8aaf9188c0cb98bc549a8a02a1dc8d59e4c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-02T22:45:26Z",
    "updated_at": "2020-08-02T22:45:26Z",
    "author_association": "MEMBER",
    "body": "@ajtowns @jnewbery @vasild @JeremyRubin \r\n\r\nMind reviewing?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667734282/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667735326",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-667735326",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19647",
    "id": 667735326,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2NzczNTMyNg==",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-02T22:58:14Z",
    "updated_at": "2020-08-02T22:58:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "this looks correct, concept and like cr ack.\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667735326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667762107",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-667762107",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19647",
    "id": 667762107,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Nzc2MjEwNw==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T01:50:18Z",
    "updated_at": "2020-08-31T19:59:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667762107/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667948870",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-667948870",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19647",
    "id": 667948870,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2Nzk0ODg3MA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T10:37:27Z",
    "updated_at": "2020-08-03T10:37:27Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. Annotating the existing locking logic is always useful.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/667948870/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668009614",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-668009614",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19647",
    "id": 668009614,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODAwOTYxNA==",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?u=7297e8aaf9188c0cb98bc549a8a02a1dc8d59e4c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T13:01:38Z",
    "updated_at": "2020-08-03T13:01:38Z",
    "author_association": "MEMBER",
    "body": "@ajtowns \r\n> Concept ACK. Shouldn't this PR also add `GUARDED_BY(cs)` to all the other non-static, non-atomic data members?\r\n\r\nThis PR split out from #19306 to make it small and easy to review.\r\nMaking other non-static, non-atomic data members `GUARDED_BY(cs)` is a design-change decision that I'd leave out of this PR scope.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668009614/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668097334",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-668097334",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19647",
    "id": 668097334,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODA5NzMzNA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T15:48:36Z",
    "updated_at": "2020-08-03T15:48:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK: thanks for adding thread-safety annotations!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668097334/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668106705",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-668106705",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19647",
    "id": 668106705,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY2ODEwNjcwNQ==",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?u=7297e8aaf9188c0cb98bc549a8a02a1dc8d59e4c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-03T16:06:38Z",
    "updated_at": "2020-08-03T16:06:38Z",
    "author_association": "MEMBER",
    "body": "Updated f084aacb6eb57f638d6314cf44b267b77e84c4e4  -> 343b93b45d468a4c747b0b5f7dd397aaf30081f0 ([pr19647.01](https://github.com/hebasto/bitcoin/commits/pr19647.01) -> [pr19647.02](https://github.com/hebasto/bitcoin/commits/pr19647.02), [diff](https://github.com/hebasto/bitcoin/compare/pr19647.01..pr19647.02)):\r\n\r\n- addressed @ajtowns' [comment](https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464360474):\r\n> `AssertLockHeld` is annotated with `ASSERT_EXCLUSIVE_LOCK` which disables clang's compile time checks that the lock was acquired beforehand. Wouldn't it be better just to rely on the compile time checks?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668106705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/673402636",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-673402636",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19647",
    "id": 673402636,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY3MzQwMjYzNg==",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?u=7297e8aaf9188c0cb98bc549a8a02a1dc8d59e4c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-08-13T10:39:28Z",
    "updated_at": "2020-08-13T10:39:28Z",
    "author_association": "MEMBER",
    "body": "Fellow reviewers! It seems there is a consensus that adding thread safety annotations would be much safer and more convenient after `AssertLockHeldInternal()` improving. Therefore, begging for #19668 review at first :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/673402636/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684687403",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-684687403",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/19647",
    "id": 684687403,
    "node_id": "MDEyOklzc3VlQ29tbWVudDY4NDY4NzQwMw==",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?u=7297e8aaf9188c0cb98bc549a8a02a1dc8d59e4c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-09-01T09:50:03Z",
    "updated_at": "2020-09-01T09:50:03Z",
    "author_association": "MEMBER",
    "body": "Closed in favor of #19854.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/684687403/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464357745",
    "pull_request_review_id": 459955680,
    "id": 464357745,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1Nzc0NQ==",
    "diff_hunk": "@@ -813,17 +815,23 @@ CTransactionRef CTxMemPool::get(const uint256& hash) const\n \n TxMempoolInfo CTxMemPool::info(const GenTxid& gtxid) const\n {\n+    AssertLockNotHeld(cs);\n     LOCK(cs);\n     indexed_transaction_set::const_iterator i = (gtxid.IsWtxid() ? get_iter_from_wtxid(gtxid.GetHash()) : mapTx.find(gtxid.GetHash()));\n     if (i == mapTx.end())\n         return TxMempoolInfo();\n     return GetInfo(i);\n }\n \n-TxMempoolInfo CTxMemPool::info(const uint256& txid) const { return info(GenTxid{false, txid}); }\n+TxMempoolInfo CTxMemPool::info(const uint256& txid) const\n+{\n+    AssertLockNotHeld(cs);",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 31,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "f084aacb6eb57f638d6314cf44b267b77e84c4e4",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Excluding locks in getters makes it impossible to get more than one consistent mempool entry, as the state of the second might change after the first one has been returned.",
    "created_at": "2020-08-03T11:36:19Z",
    "updated_at": "2020-08-03T16:02:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464357745",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464357745"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464357745"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464357745/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 828,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464360474",
    "pull_request_review_id": 459958949,
    "id": 464360474,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM2MDQ3NA==",
    "diff_hunk": "@@ -854,7 +854,8 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n \n void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n {\n-    LOCK(cs);\n+    AssertLockHeld(cs);",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "24668ade194406150991083431ce1ccdeeb7193d",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`AssertLockHeld` is annotated with `ASSERT_EXCLUSIVE_LOCK` which disables clang's compile time checks that the lock was acquired beforehand. Wouldn't it be better just to rely on the compile time checks? As it stands, `AssertLockHeld` could hide bugs (if `ApplyDelta` lost its annotation, it could then be called from somewhere without the lock held and without raising errors if it called other functions expecting cs to be held, or accessed data structures guarded by cs, this would now only be found if someone ran the code with DEBUG_LOCKORDER enabled).\r\n\r\n(Alternatively could introduce a `RequireLockHeld` in sync.h that does the runtime checks while expecting the compile time checks to already be satisfied; but I'm not sure there's much benefit in that)",
    "created_at": "2020-08-03T11:42:19Z",
    "updated_at": "2020-08-03T16:02:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464360474",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464360474"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464360474"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464360474/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 857,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464380249",
    "pull_request_review_id": 459958949,
    "id": 464380249,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM4MDI0OQ==",
    "diff_hunk": "@@ -813,17 +815,23 @@ CTransactionRef CTxMemPool::get(const uint256& hash) const\n \n TxMempoolInfo CTxMemPool::info(const GenTxid& gtxid) const\n {\n+    AssertLockNotHeld(cs);\n     LOCK(cs);\n     indexed_transaction_set::const_iterator i = (gtxid.IsWtxid() ? get_iter_from_wtxid(gtxid.GetHash()) : mapTx.find(gtxid.GetHash()));\n     if (i == mapTx.end())\n         return TxMempoolInfo();\n     return GetInfo(i);\n }\n \n-TxMempoolInfo CTxMemPool::info(const uint256& txid) const { return info(GenTxid{false, txid}); }\n+TxMempoolInfo CTxMemPool::info(const uint256& txid) const\n+{\n+    AssertLockNotHeld(cs);",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 31,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "f084aacb6eb57f638d6314cf44b267b77e84c4e4",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`AssertLockNotHeld` is called immediately in `info(gtxid)` seems unnecessary to repeat it?\r\n\r\nWe've got `infoAll` for a consistent look at all mempool entries (used by DumpMempool), and apparently don't use `info` for consistent views otherwise, so excluding the lock seems okay to me.",
    "created_at": "2020-08-03T12:26:32Z",
    "updated_at": "2020-08-03T16:02:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464380249",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464380249"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464380249"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464380249/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 828,
    "side": "RIGHT",
    "in_reply_to_id": 464357745
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464381841",
    "pull_request_review_id": 459985489,
    "id": 464381841,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM4MTg0MQ==",
    "diff_hunk": "@@ -813,17 +815,23 @@ CTransactionRef CTxMemPool::get(const uint256& hash) const\n \n TxMempoolInfo CTxMemPool::info(const GenTxid& gtxid) const\n {\n+    AssertLockNotHeld(cs);\n     LOCK(cs);\n     indexed_transaction_set::const_iterator i = (gtxid.IsWtxid() ? get_iter_from_wtxid(gtxid.GetHash()) : mapTx.find(gtxid.GetHash()));\n     if (i == mapTx.end())\n         return TxMempoolInfo();\n     return GetInfo(i);\n }\n \n-TxMempoolInfo CTxMemPool::info(const uint256& txid) const { return info(GenTxid{false, txid}); }\n+TxMempoolInfo CTxMemPool::info(const uint256& txid) const\n+{\n+    AssertLockNotHeld(cs);",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 31,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "f084aacb6eb57f638d6314cf44b267b77e84c4e4",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "To get consistent values the external locking of `CTxMemPool::cs` should be used.\r\n\r\nAnyway, this PR does not change locking behavior.",
    "created_at": "2020-08-03T12:29:51Z",
    "updated_at": "2020-08-03T16:02:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464381841",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464381841"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464381841"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464381841/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 828,
    "side": "RIGHT",
    "in_reply_to_id": 464357745
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464395858",
    "pull_request_review_id": 460003600,
    "id": 464395858,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM5NTg1OA==",
    "diff_hunk": "@@ -854,7 +854,8 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n \n void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n {\n-    LOCK(cs);\n+    AssertLockHeld(cs);",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "24668ade194406150991083431ce1ccdeeb7193d",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#assert-capability-and-assert-shared-capability:\r\n> These are attributes on a function or method that does a run-time test to see whether the calling thread holds the given capability.\r\n\r\nHow this could disable clang's compile time checks?\r\n\r\n> ... if `ApplyDelta` lost its annotation, it could then be called from somewhere without the lock held and without raising errors if it called other functions expecting cs to be held...\r\n\r\nWhy `ApplyDelta` could lost its annotation?\r\nLocking a recursive mutex in any site where we think it should be locked seems worse than using a non-recursive mutex with annotated functions and data members, no?\r\n\r\n",
    "created_at": "2020-08-03T12:57:49Z",
    "updated_at": "2020-08-03T16:02:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464395858",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464395858"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464395858"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464395858/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 857,
    "side": "RIGHT",
    "in_reply_to_id": 464360474
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464400811",
    "pull_request_review_id": 460010079,
    "id": 464400811,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQwMDgxMQ==",
    "diff_hunk": "@@ -813,17 +815,23 @@ CTransactionRef CTxMemPool::get(const uint256& hash) const\n \n TxMempoolInfo CTxMemPool::info(const GenTxid& gtxid) const\n {\n+    AssertLockNotHeld(cs);\n     LOCK(cs);\n     indexed_transaction_set::const_iterator i = (gtxid.IsWtxid() ? get_iter_from_wtxid(gtxid.GetHash()) : mapTx.find(gtxid.GetHash()));\n     if (i == mapTx.end())\n         return TxMempoolInfo();\n     return GetInfo(i);\n }\n \n-TxMempoolInfo CTxMemPool::info(const uint256& txid) const { return info(GenTxid{false, txid}); }\n+TxMempoolInfo CTxMemPool::info(const uint256& txid) const\n+{\n+    AssertLockNotHeld(cs);",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 31,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "f084aacb6eb57f638d6314cf44b267b77e84c4e4",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> `AssertLockNotHeld` is called immediately in `info(gtxid)` seems unnecessary to repeat it?\r\n\r\nWhen a thread safety annotation is a part of function member declaration, I found it very convenient having a corresponding `AssertLock{Not}Held()` statement in its definition.\r\n\r\nAlso this assertion would be really helpful when `CTxMemPool::cs` will actually transit from `RecursiveMutex` to `Mutex`.",
    "created_at": "2020-08-03T13:07:11Z",
    "updated_at": "2020-08-03T16:02:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464400811",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464400811"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464400811"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464400811/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 828,
    "side": "RIGHT",
    "in_reply_to_id": 464357745
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464438092",
    "pull_request_review_id": 460058468,
    "id": 464438092,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQzODA5Mg==",
    "diff_hunk": "@@ -854,7 +854,8 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n \n void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n {\n-    LOCK(cs);\n+    AssertLockHeld(cs);",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "24668ade194406150991083431ce1ccdeeb7193d",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> How this could disable clang's compile time checks?\r\n\r\nThey're attributes for a function that does a runtime test and unwinds the stack, ie a function like `f(lock) { if (!lock) throw; }`, at which point it's safe to assume that the lock is held after the function returns, so the compile time checks are no longer necessary, so disabling the compile time checks is the whole point. (That's true for `AssertLockHeldInternal` when `DEBUG_LOCK_ORDER` is defined, but not when it's not defined)\r\n\r\nYou can see this if you change `LOCK(cs)` in `CTxMemPool::isSpent()` to `AssertLockHeld(cs)`. Suddenly dispite the `GUARDED_BY(cs)`, access to `mapNextTx` is allowed at compile time, and you'll only get an error at runtime, and then only if you compile with `DEBUG_LOCK_ORDER`.\r\n\r\nThis feature is needed by net_processing.cpp in `MaybeSetPeerAsAnnouncingHeaderAndIDs` where it passes a lambda to `connman.ForNode` where the lambda needs to know a lock is held to access `lNodesAnnouncingHeaderAndIDs`, but `ForNode` is too general to be able to assure the lambda that the lock is held.\r\n\r\n> Why `ApplyDelta` could lost its annotation?\r\n\r\nSomeone makes a typo; it's not especially likely, but with a `GUARDED_BY` and without `AssertLockHeld` the missing annotation would be caught at compile time.\r\n\r\n> Locking a recursive mutex in any site where we think it should be locked seems worse than using a non-recursive mutex with annotated functions and data members, no?\r\n\r\nNo, no -- your locking changes make sense, just saying that the `AssertLockHeldInternal` annotation isn't helpful here. (There's lots of other places where it's not helpful too)",
    "created_at": "2020-08-03T14:10:06Z",
    "updated_at": "2020-08-03T16:02:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464438092",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464438092"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464438092"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464438092/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 857,
    "side": "RIGHT",
    "in_reply_to_id": 464360474
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464511843",
    "pull_request_review_id": 460153499,
    "id": 464511843,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxMTg0Mw==",
    "diff_hunk": "@@ -854,7 +854,8 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n \n void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n {\n-    LOCK(cs);\n+    AssertLockHeld(cs);",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "24668ade194406150991083431ce1ccdeeb7193d",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "[Updated](https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-668106705).",
    "created_at": "2020-08-03T16:07:39Z",
    "updated_at": "2020-08-03T16:07:39Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464511843",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464511843"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464511843"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/464511843/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 857,
    "side": "RIGHT",
    "in_reply_to_id": 464360474
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468442853",
    "pull_request_review_id": 464892389,
    "id": 468442853,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ0Mjg1Mw==",
    "diff_hunk": "@@ -854,7 +854,6 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n \n void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n {\n-    LOCK(cs);",
    "path": "src/txmempool.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Here and in `CTxMemPool::ClearPrioritisation()`, `CTxMemPool::GetTotalTxSize()` and `CTxMemPool::IsUnbroadcastTx()` I would strongly advise to add `AssertLockHeld(cs)` where `LOCK(cs)` is removed. And in general in every function that is annotated `EXCLUSIVE_LOCKS_REQUIRED()`. It would serve as documentation to the reader and also ensure that the code does not get executed without holding the mutex.\r\n\r\nThe clang compile time checks are good, but I would say not to be the sole protection - they get silenced in an unexpected way if `EXCLUSIVE_LOCKS_REQUIRED()` and `ASSERT_EXCLUSIVE_LOCK()` are both used, do not work with gcc and produce only compile warnings with clang (could be missed if -Werror is not used). I would say they are an addition, but not replacement of run-time asserts.",
    "created_at": "2020-08-11T09:18:55Z",
    "updated_at": "2020-08-11T09:27:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468442853",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468442853"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468442853"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468442853/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 857,
    "original_line": 857,
    "side": "LEFT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468451198",
    "pull_request_review_id": 464902705,
    "id": 468451198,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ1MTE5OA==",
    "diff_hunk": "@@ -854,7 +854,8 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n \n void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n {\n-    LOCK(cs);\n+    AssertLockHeld(cs);",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "24668ade194406150991083431ce1ccdeeb7193d",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Wouldn't it be better just to rely on the compile time checks?\r\n\r\nI find this scary. Those compile time checks do not look mature enough to me - see how the behavior changes depending on the order of the attributes: https://github.com/bitcoin/bitcoin/pull/19668#discussion_r467045878. Also, they do not work with gcc and even with clang produce only a compile time warnings which could be missed if -Werror is not used.",
    "created_at": "2020-08-11T09:33:21Z",
    "updated_at": "2020-08-11T09:33:21Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468451198",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468451198"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468451198"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468451198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 857,
    "side": "RIGHT",
    "in_reply_to_id": 464360474
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468469845",
    "pull_request_review_id": 464926376,
    "id": 468469845,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ2OTg0NQ==",
    "diff_hunk": "@@ -854,7 +854,6 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n \n void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n {\n-    LOCK(cs);",
    "path": "src/txmempool.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "6dbd57fca9d324dd468d0ee627392bd788606bd8\r\n\r\n> they get silenced in an unexpected way\r\n\r\n@vasild do you have a code sample?\r\n\r\n> I would say they are an addition\r\n\r\nAgree.",
    "created_at": "2020-08-11T10:06:37Z",
    "updated_at": "2020-08-11T10:18:43Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468469845",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468469845"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468469845"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468469845/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 857,
    "original_line": 857,
    "side": "LEFT",
    "in_reply_to_id": 468442853
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468471022",
    "pull_request_review_id": 464926376,
    "id": 468471022,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3MTAyMg==",
    "diff_hunk": "@@ -579,6 +579,8 @@ class CTxMemPool\n      */\n     std::map<uint256, uint256> m_unbroadcast_txids GUARDED_BY(cs);\n \n+    void ClearPrioritisation(const uint256 hash) EXCLUSIVE_LOCKS_REQUIRED(cs);",
    "path": "src/txmempool.h",
    "position": 15,
    "original_position": 4,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "3c7d4cb52869d5943c2f36b3b8a91bb60344274c",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "3c7d4cb52869d5943c2f36b3b8a91bb60344274c\r\n\r\nnit, could refactor to `const uint256&?`",
    "created_at": "2020-08-11T10:08:54Z",
    "updated_at": "2020-08-11T10:18:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468471022",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468471022"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468471022"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468471022/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 582,
    "original_line": 582,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468546095",
    "pull_request_review_id": 465021258,
    "id": 468546095,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU0NjA5NQ==",
    "diff_hunk": "@@ -854,7 +854,6 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n \n void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n {\n-    LOCK(cs);",
    "path": "src/txmempool.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "user": {
      "login": "vasild",
      "id": 266751,
      "node_id": "MDQ6VXNlcjI2Njc1MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/266751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/vasild",
      "html_url": "https://github.com/vasild",
      "followers_url": "https://api.github.com/users/vasild/followers",
      "following_url": "https://api.github.com/users/vasild/following{/other_user}",
      "gists_url": "https://api.github.com/users/vasild/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/vasild/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/vasild/subscriptions",
      "organizations_url": "https://api.github.com/users/vasild/orgs",
      "repos_url": "https://api.github.com/users/vasild/repos",
      "events_url": "https://api.github.com/users/vasild/events{/privacy}",
      "received_events_url": "https://api.github.com/users/vasild/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> > they get silenced in an unexpected way\r\n> \r\n> @vasild do you have a code sample?\r\n\r\nYes, see https://github.com/bitcoin/bitcoin/pull/19668#discussion_r467045878. There are two unexpected things:\r\n\r\n1. The warnings differ depending on the order of the attributes (if more than one is specified):\r\n  ```cpp\r\n  void f() EXCLUSIVE_LOCKS_REQUIRED(cs) ASSERT_EXCLUSIVE_LOCK(cs);\r\n  // vs\r\n  void f() ASSERT_EXCLUSIVE_LOCK(cs) EXCLUSIVE_LOCKS_REQUIRED(cs);\r\n  ```\r\n\r\n2. The presence of `ASSERT_EXCLUSIVE_LOCK()` alters the behavior of `EXCLUSIVE_LOCKS_REQUIRED()`.",
    "created_at": "2020-08-11T12:36:19Z",
    "updated_at": "2020-08-11T12:36:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468546095",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468546095"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468546095"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468546095/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 857,
    "original_line": 857,
    "side": "LEFT",
    "in_reply_to_id": 468442853
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468592007",
    "pull_request_review_id": 465081206,
    "id": 468592007,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5MjAwNw==",
    "diff_hunk": "@@ -854,7 +854,6 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n \n void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n {\n-    LOCK(cs);",
    "path": "src/txmempool.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Annotating both `ASSERT_EXCLUSIVE_LOCK` and `EXCLUSIVE_LOCKS_REQUIRED` on the same function makes no sense. The only reason to do the `ASSERT_EXCLUSIVE_LOCK` is if you're relying on the test having succeeded for execution to continue as far as later compile-time checks are concerned, but if you've satisfied `EXCLUSIVE_LOCKS_REQUIRED` already, then there's no need to hint the later compile-time checks, they're already satisfied.",
    "created_at": "2020-08-11T13:47:25Z",
    "updated_at": "2020-08-11T13:47:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468592007",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468592007"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468592007"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468592007/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 857,
    "original_line": 857,
    "side": "LEFT",
    "in_reply_to_id": 468442853
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468595989",
    "pull_request_review_id": 465086292,
    "id": 468595989,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5NTk4OQ==",
    "diff_hunk": "@@ -854,7 +854,6 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n \n void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n {\n-    LOCK(cs);",
    "path": "src/txmempool.cpp",
    "position": 4,
    "original_position": 4,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> It was tedious to check the callers of e.g. `ApplyDelta()` and their callers and their callers etc until finding either `LOCK(cs)` or `AssertLockHeld(cs)` to ensure that the mutex is indeed held in all places where `ApplyDelta()` is called.\r\n\r\nThe whole point of the compile time annotations is to have the compiler do the work of checking that the callers have a `LOCK(cs)`. Note that an `AssertLockHeld(cs)` isn't sufficient -- any time that's called without having the lock already held would also be a bug; and until the `ASSERT_EXCLUSIVE_LOCK` annotation is removed from `AssertLockHeld`, `AssertLockHeld` may in fact prevent the compiler from doing adequate checking...\r\n\r\n\r\n",
    "created_at": "2020-08-11T13:52:40Z",
    "updated_at": "2020-08-11T13:52:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468595989",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468595989"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468595989"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/468595989/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 857,
    "original_line": 857,
    "side": "LEFT",
    "in_reply_to_id": 468442853
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480983533",
    "pull_request_review_id": 479538000,
    "id": 480983533,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4MzUzMw==",
    "diff_hunk": "@@ -854,7 +854,8 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n \n void CTxMemPool::ApplyDelta(const uint256 hash, CAmount &nFeeDelta) const\n {\n-    LOCK(cs);\n+    AssertLockHeld(cs);",
    "path": "src/txmempool.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "343b93b45d468a4c747b0b5f7dd397aaf30081f0",
    "original_commit_id": "24668ade194406150991083431ce1ccdeeb7193d",
    "user": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> `AssertLockHeld` is annotated with `ASSERT_EXCLUSIVE_LOCK` which disables clang's compile time checks that the lock was acquired beforehand.\r\n\r\nIt is fixed in #19668.",
    "created_at": "2020-09-01T09:00:52Z",
    "updated_at": "2020-09-01T09:00:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r480983533",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480983533"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/19647#discussion_r480983533"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/19647"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/480983533/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 857,
    "side": "RIGHT",
    "in_reply_to_id": 464360474
  }
]