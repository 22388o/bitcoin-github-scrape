hebasto,2020-08-02 22:45:26,"@ajtowns @jnewbery @vasild @JeremyRubin \n\nMind reviewing?",https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-667734282,667734282,
JeremyRubin,2020-08-02 22:58:14,"this looks correct, concept and like cr ack.\n\n",https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-667735326,667735326,
DrahtBot,2020-08-03 01:50:18,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-667762107,667762107,
jnewbery,2020-08-03 10:37:27,Concept ACK. Annotating the existing locking logic is always useful.,https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-667948870,667948870,
hebasto,2020-08-03 13:01:38,"@ajtowns \n> Concept ACK. Shouldn't this PR also add `GUARDED_BY(cs)` to all the other non-static, non-atomic data members?\n\nThis PR split out from #19306 to make it small and easy to review.\nMaking other non-static, non-atomic data members `GUARDED_BY(cs)` is a design-change decision that I'd leave out of this PR scope.",https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-668009614,668009614,
practicalswift,2020-08-03 15:48:36,Concept ACK: thanks for adding thread-safety annotations!,https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-668097334,668097334,
hebasto,2020-08-03 16:06:38,"Updated f084aacb6eb57f638d6314cf44b267b77e84c4e4  -> 343b93b45d468a4c747b0b5f7dd397aaf30081f0 ([pr19647.01](https://github.com/hebasto/bitcoin/commits/pr19647.01) -> [pr19647.02](https://github.com/hebasto/bitcoin/commits/pr19647.02), [diff](https://github.com/hebasto/bitcoin/compare/pr19647.01..pr19647.02)):\n\n- addressed @ajtowns' [comment](https://github.com/bitcoin/bitcoin/pull/19647#discus",https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-668106705,668106705,
hebasto,2020-08-13 10:39:28,"Fellow reviewers! It seems there is a consensus that adding thread safety annotations would be much safer and more convenient after `AssertLockHeldInternal()` improving. Therefore, begging for #19668 review at first :)",https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-673402636,673402636,
hebasto,2020-09-01 09:50:03,Closed in favor of #19854.,https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-684687403,684687403,
MarcoFalke,2020-08-03 11:36:19,"Excluding locks in getters makes it impossible to get more than one consistent mempool entry, as the state of the second might change after the first one has been returned.",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464357745,464357745,src/txmempool.cpp
ajtowns,2020-08-03 11:42:19,"`AssertLockHeld` is annotated with `ASSERT_EXCLUSIVE_LOCK` which disables clang's compile time checks that the lock was acquired beforehand. Wouldn't it be better just to rely on the compile time checks? As it stands, `AssertLockHeld` could hide bugs (if `ApplyDelta` lost its annotation, it could then be called from somewhere without the lock held and without raising errors if it called other func",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464360474,464360474,src/txmempool.cpp
ajtowns,2020-08-03 12:26:32,"`AssertLockNotHeld` is called immediately in `info(gtxid)` seems unnecessary to repeat it?\n\nWe've got `infoAll` for a consistent look at all mempool entries (used by DumpMempool), and apparently don't use `info` for consistent views otherwise, so excluding the lock seems okay to me.",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464380249,464380249,src/txmempool.cpp
hebasto,2020-08-03 12:29:51,"To get consistent values the external locking of `CTxMemPool::cs` should be used.\n\nAnyway, this PR does not change locking behavior.",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464381841,464381841,src/txmempool.cpp
hebasto,2020-08-03 12:57:49,"https://clang.llvm.org/docs/ThreadSafetyAnalysis.html#assert-capability-and-assert-shared-capability:\n> These are attributes on a function or method that does a run-time test to see whether the calling thread holds the given capability.\n\nHow this could disable clang's compile time checks?\n\n> ... if `ApplyDelta` lost its annotation, it could then be called from somewhere without the lock ",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464395858,464395858,src/txmempool.cpp
hebasto,2020-08-03 13:07:11,"> `AssertLockNotHeld` is called immediately in `info(gtxid)` seems unnecessary to repeat it?\n\nWhen a thread safety annotation is a part of function member declaration, I found it very convenient having a corresponding `AssertLock{Not}Held()` statement in its definition.\n\nAlso this assertion would be really helpful when `CTxMemPool::cs` will actually transit from `RecursiveMutex` to `Mutex`",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464400811,464400811,src/txmempool.cpp
ajtowns,2020-08-03 14:10:06,"> How this could disable clang's compile time checks?\n\nThey're attributes for a function that does a runtime test and unwinds the stack, ie a function like `f(lock) { if (!lock) throw; }`, at which point it's safe to assume that the lock is held after the function returns, so the compile time checks are no longer necessary, so disabling the compile time checks is the whole point. (That's true ",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464438092,464438092,src/txmempool.cpp
hebasto,2020-08-03 16:07:39,[Updated](https://github.com/bitcoin/bitcoin/pull/19647#issuecomment-668106705).,https://github.com/bitcoin/bitcoin/pull/19647#discussion_r464511843,464511843,src/txmempool.cpp
vasild,2020-08-11 09:18:55,"Here and in `CTxMemPool::ClearPrioritisation()`, `CTxMemPool::GetTotalTxSize()` and `CTxMemPool::IsUnbroadcastTx()` I would strongly advise to add `AssertLockHeld(cs)` where `LOCK(cs)` is removed. And in general in every function that is annotated `EXCLUSIVE_LOCKS_REQUIRED()`. It would serve as documentation to the reader and also ensure that the code does not get executed without holding the mute",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468442853,468442853,src/txmempool.cpp
vasild,2020-08-11 09:33:21,"> Wouldn't it be better just to rely on the compile time checks?\n\nI find this scary. Those compile time checks do not look mature enough to me - see how the behavior changes depending on the order of the attributes: https://github.com/bitcoin/bitcoin/pull/19668#discussion_r467045878. Also, they do not work with gcc and even with clang produce only a compile time warnings which could be missed ",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468451198,468451198,src/txmempool.cpp
promag,2020-08-11 10:06:37,"6dbd57fca9d324dd468d0ee627392bd788606bd8\n\n> they get silenced in an unexpected way\n\n@vasild do you have a code sample?\n\n> I would say they are an addition\n\nAgree.",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468469845,468469845,src/txmempool.cpp
promag,2020-08-11 10:08:54,"3c7d4cb52869d5943c2f36b3b8a91bb60344274c\n\nnit, could refactor to `const uint256&?`",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468471022,468471022,src/txmempool.h
vasild,2020-08-11 12:36:19,"> > they get silenced in an unexpected way\n> \n> @vasild do you have a code sample?\n\nYes, see https://github.com/bitcoin/bitcoin/pull/19668#discussion_r467045878. There are two unexpected things:\n\n1. The warnings differ depending on the order of the attributes (if more than one is specified):\n  ```cpp\n  void f() EXCLUSIVE_LOCKS_REQUIRED(cs) ASSERT_EXCLUSIVE_LOCK(cs);\n  // vs\n  v",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468546095,468546095,src/txmempool.cpp
ajtowns,2020-08-11 13:47:25,"Annotating both `ASSERT_EXCLUSIVE_LOCK` and `EXCLUSIVE_LOCKS_REQUIRED` on the same function makes no sense. The only reason to do the `ASSERT_EXCLUSIVE_LOCK` is if you're relying on the test having succeeded for execution to continue as far as later compile-time checks are concerned, but if you've satisfied `EXCLUSIVE_LOCKS_REQUIRED` already, then there's no need to hint the later compile-time che",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468592007,468592007,src/txmempool.cpp
ajtowns,2020-08-11 13:52:40,"> It was tedious to check the callers of e.g. `ApplyDelta()` and their callers and their callers etc until finding either `LOCK(cs)` or `AssertLockHeld(cs)` to ensure that the mutex is indeed held in all places where `ApplyDelta()` is called.\n\nThe whole point of the compile time annotations is to have the compiler do the work of checking that the callers have a `LOCK(cs)`. Note that an `Assert",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r468595989,468595989,src/txmempool.cpp
hebasto,2020-09-01 09:00:52,"> `AssertLockHeld` is annotated with `ASSERT_EXCLUSIVE_LOCK` which disables clang's compile time checks that the lock was acquired beforehand.\n\nIt is fixed in #19668.",https://github.com/bitcoin/bitcoin/pull/19647#discussion_r480983533,480983533,src/txmempool.cpp
