[
  {
    "sha": "85c82b50d1a84fcf82fd3e0692e81aa41470bf84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWM4MmI1MGQxYTg0ZmNmODJmZDNlMDY5MmU4MWFhNDE0NzBiZjg0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-10T00:48:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-08-10T22:39:36Z"
      },
      "message": "Avoid masking of difficulty adjustment errors by checkpoints\n\nCurrently difficulty adjustment violations are not reported for\nchains that branch off before the last checkpoint. Change this\nby moving the checkpoint check after the difficulty check.",
      "tree": {
        "sha": "9ea6dad062ab5de4d1af2258a3ae1fbcef7da4c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ea6dad062ab5de4d1af2258a3ae1fbcef7da4c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85c82b50d1a84fcf82fd3e0692e81aa41470bf84",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85c82b50d1a84fcf82fd3e0692e81aa41470bf84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85c82b50d1a84fcf82fd3e0692e81aa41470bf84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85c82b50d1a84fcf82fd3e0692e81aa41470bf84/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e526ca6284b9e13be1b912b80dd73a34e739b539",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e526ca6284b9e13be1b912b80dd73a34e739b539",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e526ca6284b9e13be1b912b80dd73a34e739b539"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 15,
      "deletions": 27
    },
    "files": [
      {
        "sha": "28d45195d10709273d7b500e8aac8c3f9c0d154c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 27,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85c82b50d1a84fcf82fd3e0692e81aa41470bf84/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85c82b50d1a84fcf82fd3e0692e81aa41470bf84/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=85c82b50d1a84fcf82fd3e0692e81aa41470bf84",
        "patch": "@@ -2830,22 +2830,6 @@ bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::P\n     return true;\n }\n \n-static bool CheckIndexAgainstCheckpoint(const CBlockIndex* pindexPrev, CValidationState& state, const CChainParams& chainparams, const uint256& hash)\n-{\n-    if (*pindexPrev->phashBlock == chainparams.GetConsensus().hashGenesisBlock)\n-        return true;\n-\n-    int nHeight = pindexPrev->nHeight+1;\n-    // Don't accept any forks from the main chain prior to last checkpoint.\n-    // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our\n-    // MapBlockIndex.\n-    CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(chainparams.Checkpoints());\n-    if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-        return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight), REJECT_CHECKPOINT, \"bad-fork-prior-to-checkpoint\");\n-\n-    return true;\n-}\n-\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {\n     LOCK(cs_main);\n@@ -2911,14 +2895,26 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n /** Context-dependent validity checks.\n  *  By \"context\", we mean only the previous block headers, but not the UTXO\n  *  set; UTXO-related validity checks are done in ConnectBlock(). */\n-static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n+static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n {\n     assert(pindexPrev != NULL);\n     const int nHeight = pindexPrev->nHeight + 1;\n+\n     // Check proof of work\n+    const Consensus::Params& consensusParams = params.GetConsensus();\n     if (block.nBits != GetNextWorkRequired(pindexPrev, &block, consensusParams))\n         return state.DoS(100, false, REJECT_INVALID, \"bad-diffbits\", false, \"incorrect proof of work\");\n \n+    // Check against checkpoints\n+    if (fCheckpointsEnabled) {\n+        // Don't accept any forks from the main chain prior to last checkpoint.\n+        // GetLastCheckpoint finds the last checkpoint in MapCheckpoints that's in our\n+        // MapBlockIndex.\n+        CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint(params.Checkpoints());\n+        if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n+            return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight), REJECT_CHECKPOINT, \"bad-fork-prior-to-checkpoint\");\n+    }\n+\n     // Check timestamp against prev\n     if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n         return state.Invalid(false, REJECT_INVALID, \"time-too-old\", \"block's timestamp is too early\");\n@@ -3049,12 +3045,7 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n         pindexPrev = (*mi).second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n-\n-        assert(pindexPrev);\n-        if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, hash))\n-            return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n-\n-        if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetAdjustedTime()))\n+        if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n     }\n     if (pindex == NULL)\n@@ -3203,16 +3194,13 @@ bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams,\n {\n     AssertLockHeld(cs_main);\n     assert(pindexPrev && pindexPrev == chainActive.Tip());\n-    if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, block.GetHash()))\n-        return error(\"%s: CheckIndexAgainstCheckpoint(): %s\", __func__, state.GetRejectReason().c_str());\n-\n     CCoinsViewCache viewNew(pcoinsTip);\n     CBlockIndex indexDummy(block);\n     indexDummy.pprev = pindexPrev;\n     indexDummy.nHeight = pindexPrev->nHeight + 1;\n \n     // NOTE: CheckBlockHeader is called by CheckBlock\n-    if (!ContextualCheckBlockHeader(block, state, chainparams.GetConsensus(), pindexPrev, GetAdjustedTime()))\n+    if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n         return error(\"%s: Consensus::ContextualCheckBlockHeader: %s\", __func__, FormatStateMessage(state));\n     if (!CheckBlock(block, state, chainparams.GetConsensus(), fCheckPOW, fCheckMerkleRoot))\n         return error(\"%s: Consensus::CheckBlock: %s\", __func__, FormatStateMessage(state));"
      }
    ]
  }
]