[
  {
    "sha": "598e4945872349ead03ff0cddc87c14b925157ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OThlNDk0NTg3MjM0OWVhZDAzZmYwY2RkYzg3YzE0YjkyNTE1N2Vj",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-19T22:17:11Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-11T12:21:17Z"
      },
      "message": "Chainparams: Explicit CChainParams arg for main (pre miner):\n\n-ProcessNewBlock\n-TestBlockValidity",
      "tree": {
        "sha": "24895389627372eadbb9a47e559f596d88cc09c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/24895389627372eadbb9a47e559f596d88cc09c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/598e4945872349ead03ff0cddc87c14b925157ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/598e4945872349ead03ff0cddc87c14b925157ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/598e4945872349ead03ff0cddc87c14b925157ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/598e4945872349ead03ff0cddc87c14b925157ec/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ac70609345a249a74fad61b70f93e8a19245011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ac70609345a249a74fad61b70f93e8a19245011",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ac70609345a249a74fad61b70f93e8a19245011"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 18,
      "deletions": 17
    },
    "files": [
      {
        "sha": "a71fcff17ab8fe0f2cc2d209e2c5285c9e77eaba",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/598e4945872349ead03ff0cddc87c14b925157ec/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/598e4945872349ead03ff0cddc87c14b925157ec/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=598e4945872349ead03ff0cddc87c14b925157ec",
        "patch": "@@ -2915,9 +2915,8 @@ static bool IsSuperMajority(int minVersion, const CBlockIndex* pstart, unsigned\n }\n \n \n-bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp)\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos* dbp)\n {\n-    const CChainParams& chainparams = Params();\n     // Preliminary checks\n     bool checked = CheckBlock(*pblock, state);\n \n@@ -2946,9 +2945,8 @@ bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock*\n     return true;\n }\n \n-bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex * const pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW, bool fCheckMerkleRoot)\n {\n-    const CChainParams& chainparams = Params();\n     AssertLockHeld(cs_main);\n     assert(pindexPrev && pindexPrev == chainActive.Tip());\n     if (fCheckpointsEnabled && !CheckIndexAgainstCheckpoint(pindexPrev, state, chainparams, block.GetHash()))\n@@ -3488,7 +3486,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                 // process in case the block isn't known yet\n                 if (mapBlockIndex.count(hash) == 0 || (mapBlockIndex[hash]->nStatus & BLOCK_HAVE_DATA) == 0) {\n                     CValidationState state;\n-                    if (ProcessNewBlock(state, NULL, &block, true, dbp))\n+                    if (ProcessNewBlock(state, chainparams, NULL, &block, true, dbp))\n                         nLoaded++;\n                     if (state.IsError())\n                         break;\n@@ -3510,7 +3508,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                             LogPrintf(\"%s: Processing out of order child %s of %s\\n\", __func__, block.GetHash().ToString(),\n                                     head.ToString());\n                             CValidationState dummy;\n-                            if (ProcessNewBlock(dummy, NULL, &block, true, &it->second))\n+                            if (ProcessNewBlock(dummy, chainparams, NULL, &block, true, &it->second))\n                             {\n                                 nLoaded++;\n                                 queue.push_back(block.GetHash());\n@@ -4547,7 +4545,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n-        ProcessNewBlock(state, pfrom, &block, forceProcessing, NULL);\n+        ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes"
      },
      {
        "sha": "7c8c2c45f67b32e6fc1c268958417454cc3a1b68",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/598e4945872349ead03ff0cddc87c14b925157ec/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/598e4945872349ead03ff0cddc87c14b925157ec/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=598e4945872349ead03ff0cddc87c14b925157ec",
        "patch": "@@ -31,6 +31,7 @@\n class CBlockIndex;\n class CBlockTreeDB;\n class CBloomFilter;\n+class CChainParams;\n class CInv;\n class CScriptCheck;\n class CTxMemPool;\n@@ -159,7 +160,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * @param[out]  dbp     If pblock is stored to disk (or already there), this will be set to its location.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState &state, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos *dbp);\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, const CNode* pfrom, const CBlock* pblock, bool fForceProcessing, CDiskBlockPos* dbp);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n@@ -378,7 +379,7 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIndex *pindexPrev);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n-bool TestBlockValidity(CValidationState &state, const CBlock& block, CBlockIndex *pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Store block on disk. If dbp is non-NULL, the file is known to already reside on disk */\n bool AcceptBlock(const CBlock& block, CValidationState& state, CBlockIndex **pindex, bool fRequested, CDiskBlockPos* dbp);"
      },
      {
        "sha": "cf5a19de3fe3e762598214ef0837f526ac64ed83",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/598e4945872349ead03ff0cddc87c14b925157ec/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/598e4945872349ead03ff0cddc87c14b925157ec/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=598e4945872349ead03ff0cddc87c14b925157ec",
        "patch": "@@ -351,7 +351,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n \n         CValidationState state;\n-        if (!TestBlockValidity(state, *pblock, pindexPrev, false, false))\n+        if (!TestBlockValidity(state, chainparams, *pblock, pindexPrev, false, false))\n             throw std::runtime_error(\"CreateNewBlock(): TestBlockValidity failed\");\n     }\n \n@@ -432,7 +432,7 @@ static bool ProcessBlockFound(const CBlock* pblock, const CChainParams& chainpar\n \n     // Process this block the same as if we had received it from another node\n     CValidationState state;\n-    if (!ProcessNewBlock(state, NULL, pblock, true, NULL))\n+    if (!ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL))\n         return error(\"BitcoinMiner: ProcessNewBlock, block not accepted\");\n \n     return true;"
      },
      {
        "sha": "2d18792f9e5466836477184fb27db5f7eea1cdc3",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/598e4945872349ead03ff0cddc87c14b925157ec/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/598e4945872349ead03ff0cddc87c14b925157ec/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=598e4945872349ead03ff0cddc87c14b925157ec",
        "patch": "@@ -171,7 +171,7 @@ UniValue generate(const UniValue& params, bool fHelp)\n             ++pblock->nNonce;\n         }\n         CValidationState state;\n-        if (!ProcessNewBlock(state, NULL, pblock, true, NULL))\n+        if (!ProcessNewBlock(state, Params(), NULL, pblock, true, NULL))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -426,7 +426,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n             CValidationState state;\n-            TestBlockValidity(state, block, pindexPrev, false, true);\n+            TestBlockValidity(state, Params(), block, pindexPrev, false, true);\n             return BIP22ValidationResult(state);\n         }\n     }\n@@ -652,7 +652,7 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n     CValidationState state;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(state, NULL, &block, true, NULL);\n+    bool fAccepted = ProcessNewBlock(state, Params(), NULL, &block, true, NULL);\n     UnregisterValidationInterface(&sc);\n     if (fBlockPresent)\n     {"
      },
      {
        "sha": "fb2fecf3a017550d873a1b33cf3e587bd9beb9b3",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/598e4945872349ead03ff0cddc87c14b925157ec/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/598e4945872349ead03ff0cddc87c14b925157ec/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=598e4945872349ead03ff0cddc87c14b925157ec",
        "patch": "@@ -59,6 +59,7 @@ struct {\n // NOTE: These tests rely on CreateNewBlock doing its own self-validation!\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n+    const CChainParams& chainparams = Params(CBaseChainParams::MAIN);\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     CBlockTemplate *pblocktemplate;\n     CMutableTransaction tx,tx2;\n@@ -91,7 +92,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->hashMerkleRoot = pblock->ComputeMerkleRoot();\n         pblock->nNonce = blockinfo[i].nonce;\n         CValidationState state;\n-        BOOST_CHECK(ProcessNewBlock(state, NULL, pblock, true, NULL));\n+        BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL));\n         BOOST_CHECK(state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }"
      },
      {
        "sha": "898dbded419a64477c3e5745aac90421fd8dcac9",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/598e4945872349ead03ff0cddc87c14b925157ec/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/598e4945872349ead03ff0cddc87c14b925157ec/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=598e4945872349ead03ff0cddc87c14b925157ec",
        "patch": "@@ -114,6 +114,7 @@ TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n CBlock\n TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)\n {\n+    const CChainParams& chainparams = Params();\n     CBlockTemplate *pblocktemplate = CreateNewBlock(scriptPubKey);\n     CBlock& block = pblocktemplate->block;\n \n@@ -125,10 +126,10 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     unsigned int extraNonce = 0;\n     IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n \n-    while (!CheckProofOfWork(block.GetHash(), block.nBits, Params(CBaseChainParams::REGTEST).GetConsensus())) ++block.nNonce;\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     CValidationState state;\n-    ProcessNewBlock(state, NULL, &block, true, NULL);\n+    ProcessNewBlock(state, chainparams, NULL, &block, true, NULL);\n \n     CBlock result = block;\n     delete pblocktemplate;"
      }
    ]
  },
  {
    "sha": "6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmM5ZTQwNTZiMmJmNGZmNjU0OWVkNGQ2ZDljY2YyZmE4MjJmZWY0",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-04-17T12:19:52Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2015-11-11T12:21:17Z"
      },
      "message": "Chainparams: Explicit CChainParams arg for miner:\n\n-BitcoinMiner\n-CreateNewBlock\n-GenerateBitcoins\n-ProcessBlockFound",
      "tree": {
        "sha": "560af579e8fada4d2804ce0255071a21d9bbb5d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/560af579e8fada4d2804ce0255071a21d9bbb5d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "598e4945872349ead03ff0cddc87c14b925157ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/598e4945872349ead03ff0cddc87c14b925157ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/598e4945872349ead03ff0cddc87c14b925157ec"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 23,
      "deletions": 24
    },
    "files": [
      {
        "sha": "bc88735bf06f2817358b4a1a910cd5080ed9bca2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4",
        "patch": "@@ -1576,7 +1576,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     scheduler.scheduleEvery(f, nPowTargetSpacing);\n \n     // Generate coins in the background\n-    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), Params());\n+    GenerateBitcoins(GetBoolArg(\"-gen\", false), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), chainparams);\n \n     // ********************************************************* Step 12: finished\n "
      },
      {
        "sha": "bb6b51337271aa396674d781c590ccc53fc54380",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4",
        "patch": "@@ -99,9 +99,8 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n     return nNewTime - nOldTime;\n }\n \n-CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n+CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn)\n {\n-    const CChainParams& chainparams = Params();\n     // Create new block\n     auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n     if(!pblocktemplate.get())\n@@ -110,7 +109,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n     // -regtest only: allow overriding block.nVersion with\n     // -blockversion=N to test forking scenarios\n-    if (Params().MineBlocksOnDemand())\n+    if (chainparams.MineBlocksOnDemand())\n         pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n \n     // Create coinbase tx\n@@ -345,8 +344,8 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         // Fill in header\n         pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n-        UpdateTime(pblock, Params().GetConsensus(), pindexPrev);\n-        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, Params().GetConsensus());\n+        UpdateTime(pblock, chainparams.GetConsensus(), pindexPrev);\n+        pblock->nBits          = GetNextWorkRequired(pindexPrev, pblock, chainparams.GetConsensus());\n         pblock->nNonce         = 0;\n         pblocktemplate->vTxSigOps[0] = GetLegacySigOpCount(pblock->vtx[0]);\n \n@@ -478,7 +477,7 @@ void static BitcoinMiner(const CChainParams& chainparams)\n             unsigned int nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n             CBlockIndex* pindexPrev = chainActive.Tip();\n \n-            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript->reserveScript));\n+            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(chainparams, coinbaseScript->reserveScript));\n             if (!pblocktemplate.get())\n             {\n                 LogPrintf(\"Error in BitcoinMiner: Keypool ran out, please call keypoolrefill before restarting the mining thread\\n\");"
      },
      {
        "sha": "7b544303e0d6b0ba64894fbb04f3cb6d38163a41",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4",
        "patch": "@@ -29,7 +29,7 @@ struct CBlockTemplate\n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, int nThreads, const CChainParams& chainparams);\n /** Generate a new block, without valid proof-of-work */\n-CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n+CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& scriptPubKeyIn);\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, const CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev);"
      },
      {
        "sha": "3fd07fc3749521a2cceb88ee8cda773c529db05f",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4",
        "patch": "@@ -157,7 +157,7 @@ UniValue generate(const UniValue& params, bool fHelp)\n     UniValue blockHashes(UniValue::VARR);\n     while (nHeight < nHeightEnd)\n     {\n-        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(coinbaseScript->reserveScript));\n+        auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlock(Params(), coinbaseScript->reserveScript));\n         if (!pblocktemplate.get())\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Couldn't create new block\");\n         CBlock *pblock = &pblocktemplate->block;\n@@ -510,7 +510,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             pblocktemplate = NULL;\n         }\n         CScript scriptDummy = CScript() << OP_TRUE;\n-        pblocktemplate = CreateNewBlock(scriptDummy);\n+        pblocktemplate = CreateNewBlock(Params(), scriptDummy);\n         if (!pblocktemplate)\n             throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n "
      },
      {
        "sha": "f745b75a82b4d47376931cd6cd47e91812f507cb",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4",
        "patch": "@@ -70,7 +70,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     fCheckpointsEnabled = false;\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n@@ -99,7 +99,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     delete pblocktemplate;\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n \n     // block sigops > limit: 1000 CHECKMULTISIG + 1\n@@ -117,7 +117,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -137,14 +137,14 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n     // orphan in mempool\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -162,7 +162,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -173,7 +173,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -191,7 +191,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n@@ -205,17 +205,17 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n \n     // subsidy changing\n     int nHeight = chainActive.Height();\n     chainActive.Tip()->nHeight = 209999;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     chainActive.Tip()->nHeight = 210000;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     delete pblocktemplate;\n     chainActive.Tip()->nHeight = nHeight;\n \n@@ -247,7 +247,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n \n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n \n     // Neither tx should have make it into the template.\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n@@ -262,7 +262,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     //BOOST_CHECK(CheckFinalTx(tx));\n     //BOOST_CHECK(CheckFinalTx(tx2));\n \n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(chainparams, scriptPubKey));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);\n     delete pblocktemplate;\n "
      },
      {
        "sha": "319e63ba55c1a7df3ed6b353ee8503c64f44cf7d",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=6bc9e4056b2bf4ff6549ed4d6d9ccf2fa822fef4",
        "patch": "@@ -115,7 +115,7 @@ CBlock\n TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)\n {\n     const CChainParams& chainparams = Params();\n-    CBlockTemplate *pblocktemplate = CreateNewBlock(scriptPubKey);\n+    CBlockTemplate *pblocktemplate = CreateNewBlock(chainparams, scriptPubKey);\n     CBlock& block = pblocktemplate->block;\n \n     // Replace mempool-selected txns with just coinbase plus passed-in txns:"
      }
    ]
  }
]