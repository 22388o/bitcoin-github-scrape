BitcoinPullTester,2013-10-11T12:34:25Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/f0bc89e011eda6620ec091523773c82d09398c82 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tes",https://github.com/bitcoin/bitcoin/pull/3072#issuecomment-26133588,26133588,
laanwj,2013-10-11T17:02:49Z,"According to the pull tester this has a build problem on win32, though I but have no clue why.\nI'm missing some include in bitcoinrpc.h, but which one?\n",https://github.com/bitcoin/bitcoin/pull/3072#issuecomment-26153505,26153505,
jgarzik,2013-10-11T17:08:54Z,"@laanwj This seems relevant: http://boost.2283326.n4.nabble.com/boost-asio-UnregisterWaitEx-RegisterWaitForSingleObject-has-not-been-declared-td4633963.html\n\nReview comments:  It would be nice if this were split into smaller chunks.  At a minimum, I would recommend two commits:\n- Code movement of existing RPC client code to new .h and .cpp locations.  No external behavior changes.\n- The rest o",https://github.com/bitcoin/bitcoin/pull/3072#issuecomment-26153905,26153905,
laanwj,2013-10-11T18:53:31Z,"Ok, thanks for a the link re: boost.\n\nSmaller chunks? Usually the question is to squash together the commits not the other way around.\n",https://github.com/bitcoin/bitcoin/pull/3072#issuecomment-26162172,26162172,
jgarzik,2013-10-11T19:04:52Z,"Sure.  It is also possible to go too far with ""everything in one patch""  :)  The ideal is a progression of logical code transformation steps, much like the steps in transforming an algebraic equation or math proof.  Each step must be buildable and testable, so as to not break ""git bisect.""\n\nCode movement is an easy thing to separate out, easy to test as a separate commit, and the commit that fol",https://github.com/bitcoin/bitcoin/pull/3072#issuecomment-26163174,26163174,
laanwj,2013-10-11T20:45:01Z,"I'll make a version without any code movement. That part was an attempt to split off the parts that don't rely on the database/block chain code, but it turned out pointless anyway.\n",https://github.com/bitcoin/bitcoin/pull/3072#issuecomment-26171621,26171621,
laanwj,2013-10-11T21:15:28Z,Closing in favor of #3082\n,https://github.com/bitcoin/bitcoin/pull/3072#issuecomment-26174852,26174852,
sipa,2013-10-12T17:23:18Z,"Hmm, in what way does chainparams depend on leveldb/bdb?\n\nEDIT: transitive dependencies from chainparams I can find: bignum, uint256, util, core, protocol, netbase, sync, version, ui_interface, serialize, script, compat, hash, clientversion, allocators, keystore, key, crypter.\n",https://github.com/bitcoin/bitcoin/pull/3072#issuecomment-26201830,26201830,
laanwj,2013-10-12T22:03:33Z,"Through chainparams it pulls in almost all the implementation files.\n\nThe only way to solve this would be to make util no longer depend on chainparams, or split up util into a part for the rpc client and a part for the server (after all, the rpc client doesn't even need the network-specific directory or any other part of util.cpp that depends on the chain params). \n",https://github.com/bitcoin/bitcoin/pull/3072#issuecomment-26207009,26207009,
sipa,2013-10-13T13:24:37Z,"Ok, with two simple modifications (adding a dummy main(), and moving uiInterface from init.cpp to noui.cpp), the following compile succeeds:\n\n```\ng++ -o blah noui.o allocators.o netbase.o script.o core.o version.o keystore.o key.o util.o \\nprotocol.o sync.o chainparams.o hash.o crypter.o -lcrypto -lboost_system \\n-lboost_thread -lboost_program_options -lboost_filesystem\n```\n\nThe resulting ",https://github.com/bitcoin/bitcoin/pull/3072#issuecomment-26217760,26217760,
laanwj,2013-10-13T14:05:29Z,"But that's still way too much for the bitcoin-rpc client. There is no way in which the RPC client needs the core, script, key, hash, chainparams, sync, protocol or even allocators. The client part doesn't depend on that, it does no handling of keys or blocks.\n\nThe only thing it needs is part of the RPC stuff (what I had split into rpcprotocol.cpp and rpcclient.cpp in this commit), and part of ut",https://github.com/bitcoin/bitcoin/pull/3072#issuecomment-26218440,26218440,
sipa,2013-10-13T14:07:13Z,"@laanwj Agree it's still way too much, and let's merge #3082 first. I was just thinking about modularizing the source code in general :)\n",https://github.com/bitcoin/bitcoin/pull/3072#issuecomment-26218472,26218472,
RayDillinger,2013-10-13T14:58:59Z,"Maybe I'm dim, but how can RPC-client live without protocol? I mean, isn't that what it has to use when it asks a remote bitcoind to do anything? \n",https://github.com/bitcoin/bitcoin/pull/3072#issuecomment-26219461,26219461,
sipa,2013-10-13T15:00:54Z,protocol is the P2P protocol nodes talk to eachother. RPC clients just use JSON over HTTP.\n,https://github.com/bitcoin/bitcoin/pull/3072#issuecomment-26219496,26219496,
Diapolo,2013-10-09T12:09:34Z,Should be Bitcoin-rpc then :).\n,https://github.com/bitcoin/bitcoin/pull/3072#discussion_r6853750,6853750,src/bitcoin-rpc-res.rc
laanwj,2013-10-09T12:19:30Z,"Hah, I did change at least three of them, this description file is kind of redundant isn't it :pig:\n",https://github.com/bitcoin/bitcoin/pull/3072#discussion_r6853941,6853941,src/bitcoin-rpc-res.rc
