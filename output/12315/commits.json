[
  {
    "sha": "45eea40aa88f047111a9b1151fe4d1bad5c560e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NWVlYTQwYWE4OGYwNDcxMTFhOWIxMTUxZmU0ZDFiYWQ1YzU2MGUy",
    "commit": {
      "author": {
        "name": "fivepiece",
        "email": "fivepiece@users.noreply.github.com",
        "date": "2018-01-31T15:48:20Z"
      },
      "committer": {
        "name": "fivepiece",
        "email": "fivepiece@users.noreply.github.com",
        "date": "2018-02-06T23:02:20Z"
      },
      "message": "Bech32 addresses in dumpwallet\n\nOutput bech32 addresses in dumpwallet if address type is not as legacy",
      "tree": {
        "sha": "2f9467f4dca4d6c022fbbf089c6c3cb5585dd775",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f9467f4dca4d6c022fbbf089c6c3cb5585dd775"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/45eea40aa88f047111a9b1151fe4d1bad5c560e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45eea40aa88f047111a9b1151fe4d1bad5c560e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/45eea40aa88f047111a9b1151fe4d1bad5c560e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45eea40aa88f047111a9b1151fe4d1bad5c560e2/comments",
    "author": {
      "login": "fivepiece",
      "id": 5624963,
      "node_id": "MDQ6VXNlcjU2MjQ5NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5624963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fivepiece",
      "html_url": "https://github.com/fivepiece",
      "followers_url": "https://api.github.com/users/fivepiece/followers",
      "following_url": "https://api.github.com/users/fivepiece/following{/other_user}",
      "gists_url": "https://api.github.com/users/fivepiece/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fivepiece/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fivepiece/subscriptions",
      "organizations_url": "https://api.github.com/users/fivepiece/orgs",
      "repos_url": "https://api.github.com/users/fivepiece/repos",
      "events_url": "https://api.github.com/users/fivepiece/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fivepiece/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fivepiece",
      "id": 5624963,
      "node_id": "MDQ6VXNlcjU2MjQ5NjM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5624963?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fivepiece",
      "html_url": "https://github.com/fivepiece",
      "followers_url": "https://api.github.com/users/fivepiece/followers",
      "following_url": "https://api.github.com/users/fivepiece/following{/other_user}",
      "gists_url": "https://api.github.com/users/fivepiece/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fivepiece/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fivepiece/subscriptions",
      "organizations_url": "https://api.github.com/users/fivepiece/orgs",
      "repos_url": "https://api.github.com/users/fivepiece/repos",
      "events_url": "https://api.github.com/users/fivepiece/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fivepiece/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/895fbd768f0c89cea3f78acac58b233d4e3a145e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/895fbd768f0c89cea3f78acac58b233d4e3a145e"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 42,
      "deletions": 7
    },
    "files": [
      {
        "sha": "03fb824e7a0b3e1d841279afb7435f3b913f32e2",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 3,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45eea40aa88f047111a9b1151fe4d1bad5c560e2/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45eea40aa88f047111a9b1151fe4d1bad5c560e2/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=45eea40aa88f047111a9b1151fe4d1bad5c560e2",
        "patch": "@@ -71,6 +71,28 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n+bool GetWalletAddressesForKey(CWallet * const pwallet, const CKeyID &keyid, std::string &strAddr, std::string &strLabel)\n+{\n+    bool fLabelFound = false;\n+    CKey key;\n+    pwallet->GetKey(keyid, key);\n+    for (const auto& dest : GetAllDestinationsForKey(key.GetPubKey())) {\n+        if (pwallet->mapAddressBook.count(dest)) {\n+            if (!strAddr.empty()) {\n+                strAddr += \",\";\n+            }\n+            strAddr += EncodeDestination(dest);\n+            strLabel = EncodeDumpString(pwallet->mapAddressBook[dest].name);\n+            fLabelFound = true;\n+        }\n+    }\n+    if (!fLabelFound) {\n+        strAddr = EncodeDestination(GetDestinationForKey(key.GetPubKey(), g_address_type));\n+    }\n+    return fLabelFound;\n+}\n+\n+\n UniValue importprivkey(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n@@ -729,12 +751,13 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n         const CKeyID &keyid = it->second;\n         std::string strTime = EncodeDumpTime(it->first);\n-        std::string strAddr = EncodeDestination(keyid);\n+        std::string strAddr;\n+        std::string strLabel;\n         CKey key;\n         if (pwallet->GetKey(keyid, key)) {\n             file << strprintf(\"%s %s \", CBitcoinSecret(key).ToString(), strTime);\n-            if (pwallet->mapAddressBook.count(keyid)) {\n-                file << strprintf(\"label=%s\", EncodeDumpString(pwallet->mapAddressBook[keyid].name));\n+            if (GetWalletAddressesForKey(pwallet, keyid, strAddr, strLabel)) {\n+               file << strprintf(\"label=%s\", strLabel);\n             } else if (keyid == masterKeyID) {\n                 file << \"hdmaster=1\";\n             } else if (mapKeyPool.count(keyid)) {"
      },
      {
        "sha": "5e943d048d731f4ab2ae7ae1ae5f36dfc6af9880",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/45eea40aa88f047111a9b1151fe4d1bad5c560e2/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/45eea40aa88f047111a9b1151fe4d1bad5c560e2/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=45eea40aa88f047111a9b1151fe4d1bad5c560e2",
        "patch": "@@ -20,6 +20,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n         found_script_addr = 0\n         found_addr_chg = 0\n         found_addr_rsv = 0\n+        witness_addr_ret = None\n         hd_master_addr_ret = None\n         for line in inputfile:\n             # only read non comment lines\n@@ -47,7 +48,14 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n \n                     # count key types\n                     for addrObj in addrs:\n-                        if addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                        if addrObj['address'] == addr.split(\",\")[0] and addrObj['hdkeypath'] == keypath and keytype == \"label=\":\n+                            # a labled entry in the wallet should contain both a native address\n+                            # and the p2sh-p2wpkh address that was added at wallet setup\n+                            if len(addr.split(\",\")) == 2:\n+                                addr_list = addr.split(\",\")\n+                                # the entry should be of the first key in the wallet\n+                                assert_equal(addrs[0]['address'], addr_list[0])\n+                                witness_addr_ret = addr_list[1]\n                             found_addr += 1\n                             break\n                         elif keytype == \"change=1\":\n@@ -63,7 +71,7 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n                             found_script_addr += 1\n                             break\n \n-        return found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret\n+        return found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_ret, witness_addr_ret\n \n \n class WalletDumpTest(BitcoinTestFramework):\n@@ -83,6 +91,8 @@ def run_test (self):\n         tmpdir = self.options.tmpdir\n \n         # generate 20 addresses to compare against the dump\n+        # but since we add a p2sh-p2wpkh address for the first pubkey in the\n+        # wallet, we will expect 21 addresses in the dump\n         test_addr_count = 20\n         addrs = []\n         for i in range(0,test_addr_count):\n@@ -101,12 +111,13 @@ def run_test (self):\n         result = self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.unencrypted.dump\")\n         assert_equal(result['filename'], os.path.abspath(tmpdir + \"/node0/wallet.unencrypted.dump\"))\n \n-        found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc = \\\n+        found_addr, found_script_addr, found_addr_chg, found_addr_rsv, hd_master_addr_unenc, witness_addr_ret = \\\n             read_dump(tmpdir + \"/node0/wallet.unencrypted.dump\", addrs, script_addrs, None)\n         assert_equal(found_addr, test_addr_count)  # all keys must be in the dump\n         assert_equal(found_script_addr, 2)  # all scripts must be in the dump\n         assert_equal(found_addr_chg, 50)  # 50 blocks where mined\n         assert_equal(found_addr_rsv, 90*2) # 90 keys plus 100% internal keys\n+        assert_equal(witness_addr_ret, witness_addr) # p2sh-p2wsh address added to the first key\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].node_encrypt_wallet('test')\n@@ -116,12 +127,13 @@ def run_test (self):\n         self.nodes[0].keypoolrefill()\n         self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.encrypted.dump\")\n \n-        found_addr, found_script_addr, found_addr_chg, found_addr_rsv, _ = \\\n+        found_addr, found_script_addr, found_addr_chg, found_addr_rsv, _, witness_addr_ret = \\\n             read_dump(tmpdir + \"/node0/wallet.encrypted.dump\", addrs, script_addrs, hd_master_addr_unenc)\n         assert_equal(found_addr, test_addr_count)\n         assert_equal(found_script_addr, 2)\n         assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n         assert_equal(found_addr_rsv, 90*2) \n+        assert_equal(witness_addr_ret, witness_addr)\n \n         # Overwriting should fail\n         assert_raises_rpc_error(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")"
      }
    ]
  }
]