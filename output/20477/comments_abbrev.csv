DrahtBot,2020-11-24 19:48:42,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20196 (net: fix GetListenPort() to derive the proper port by vasild)\n\nIf you consider this pull request important, plea",https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-733196012,733196012,
jonatack,2020-11-24 22:16:30,Thanks for working on adding testing here. I'll try to review this soon.,https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-733264515,733264515,
laanwj,2020-12-03 12:12:56,"Concept ACK. Thanks for adding tests.\n\nI sometimes wonder if it would make sense to move ""semi-internal"" things that are only exposed externally for unit testing, like in this case ""NodeEvictionCandidate"" and ""SelectNodeToEvict"", to a separate set of headers. But not here anyhow.\n",https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-737904003,737904003,
MarcoFalke,2020-12-05 05:35:57,tsan failue can be ignored or fixed by a rebase,https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739130004,739130004,
practicalswift,2020-12-05 10:05:21,@MarcoFalke Thanks! Rebased!,https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739155734,739155734,
MarcoFalke,2020-12-07 11:51:21,needs rebase,https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739869998,739869998,
practicalswift,2020-12-07 12:27:21,"> I understand why you'd want to pass by ref, but there's no benefit to passing by rvalue. This code suggests to me that SelectNodeToEvict() is going to keep ownership of vEvictionCandidates and you're using move semantics to avoid a copy, but that's not actually happening here.\n\nI've now reverted to the original version (alternative 1 below), since [your suggestion](https://github.com/bitcoin",https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739887583,739887583,
jnewbery,2020-12-07 12:37:56,"> since your suggestion and sipa's suggestion are mutually exclusive :)\n\nI don't think they are mutually exclusive. There are two questions here:\n\n1. Should the argument be passed by value or by reference?\n2. If passed by reference, should it be passed by lvalue reference or rvalue reference?\n\nI don't think there's any disagreement about (1). We should pass by reference to avoid a co",https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739892556,739892556,
practicalswift,2020-12-07 12:58:42,"@jnewbery \n\nUpdated accordingly.\n\nPersonally I prefer the `std::vector<NodeEvictionCandidate>&&` alternative in this case since it makes it clear from reading the code at the call site that `vEvictionCandidates` is not intended to be used after the `SelectNodeToEvict` call.\n\nHopefully any use-after-moved-from would be quite obvious.\n\nExample of future patches where the signature ma",https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739902573,739902573,
jnewbery,2020-12-07 13:55:38,"> Personally I prefer the std::vector<NodeEvictionCandidate>&& alternative in this case since it makes it clear from reading the code at the call site that vEvictionCandidates is not intended to be used after the SelectNodeToEvict call.\n\nFine by me!",https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739933084,739933084,
jnewbery,2020-12-07 13:56:59,utACK cadd93f35d1bbf662e348a0dee172cdf4af6a903,https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-739933867,739933867,
practicalswift,2020-12-09 23:39:40,"Thanks for reviewing!\n\nPushed an updated version:\n\nNow skipping the `GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE` and `GUARANTEED_NON_EVICTION_AT_N_CANDIDATES_OR_BELOW` checking which isn't particularly important compared to the other tests.\n\nAlso fixed an incorrect comment.\n\nShould hopefully be ready for final review :)",https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-742132718,742132718,
practicalswift,2020-12-10 22:58:41,"Updated.\n\nAddressed feedback from @MarcoFalke and @jnewbery.\n\nAlso added a combined test which tests the protections based on `nKeyedNetGroup` (4 peers protected), `nMinPingUsecTime` (8 peers protected), `nLastTXTime` (4 peers protected) and `nLastBlockTime` (8 peers protected) jointly.\n\nKindly re-review thoroughly :)",https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-742853209,742853209,
jnewbery,2020-12-11 09:47:26,ACK 6767d63d02cc8a670f3d409db1c78a77fdcb5363,https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-743091962,743091962,
jonatack,2020-12-11 16:13:14,"Will review properly as soon as my laptop is done with the gitian builds for 3 RCs...until then, it's basically unusable.",https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-743284528,743284528,
practicalswift,2020-12-15 15:25:56,Updated to address @dhruv's feedback. Should hopefully be ready for final review. Please re-review :),https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-745364380,745364380,
dhruv,2020-12-15 19:42:56,ACK `1c9b235`,https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-745522711,745522711,
MarcoFalke,2020-12-16 10:04:58,"cr ACK 6767d63d02cc8a670f3d409db1c78a77fdcb5363 ü§†\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\ncr ACK 6767d63d02cc8a670f3d409db1c78a77fdcb5363 ü§†\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgJLwwAljffgO2Xw1Iez563pRA0ztSBIkuzEBPGf9nYifcbQJsf",https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746022436,746022436,
MarcoFalke,2020-12-16 10:06:53,"cr ACK 1c9b235c330fe7b9b71f687ef14cb10fe588172b üë≤\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\ncr ACK 1c9b235c330fe7b9b71f687ef14cb10fe588172b üë≤\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjQWgv/TnEWYjD/Ws2y2WL23agZIEyXZwlxbLCJTWkydKzBnOrP",https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746025413,746025413,
MarcoFalke,2020-12-16 10:07:49,I ACKed both versions. Let me know which one to merge.,https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746026813,746026813,
jnewbery,2020-12-16 10:11:56,"code review ACK 1c9b235c33\n\nEither are fine to merge.",https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746033217,746033217,
jonatack,2020-12-16 10:36:18,wait for meeee üòÄ,https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746065399,746065399,
jonatack,2020-12-16 11:30:09,ACK 1c9b235c330fe7b9b71f modulo a few suggestions,https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746144573,746144573,
practicalswift,2020-12-16 12:01:18,@jonatack Thanks for reviewing! Feedback addressed: please re-review :),https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746181940,746181940,
jonatack,2020-12-16 12:16:28,"ACK fee88237e03c21bf81f21098e6b89ecfa5327cee\n\nThanks for adding this nicely done coverage! Looking forward to more.",https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746201615,746201615,
MarcoFalke,2020-12-16 12:30:37,"ACK fee88237e03c21bf81f21098e6b89ecfa5327cee üêº\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK fee88237e03c21bf81f21098e6b89ecfa5327cee üêº\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiu/Av/RLQ2/lM0mJ7uTlvDebTgk57QGAdIs4rv+t9X7wUizqNhEjFHU2",https://github.com/bitcoin/bitcoin/pull/20477#issuecomment-746217675,746217675,
laanwj,2020-12-03 12:12:21,"Please move this doc-comment to the header, it's an exported function now.",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535175346,535175346,src/net.cpp
dhruv,2020-12-04 00:35:09,"Would it be valuable to break this out into the various reasons the peers are protected from eviction? For example:\n\nIn src/net.h\n```\nconst int PEERS_PROTECTED_BY_NET_GROUP = 4                \n```\n\nIn src/net.cpp\n```\nEraseLastKElements(vEvictionCandidates, CompareNetGroupKeyed, PEERS_PROTECTED_BY_NET_GROUP);\n```\n\nIn src/test/net_tests.cpp:\n```\nGUARANTEED_EVICTION_AT_N_C",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535748838,535748838,src/test/net_tests.cpp
dhruv,2020-12-04 00:42:48,"Is this the highest such number at which non-eviction is guaranteed? If so, could you help me understand how we get 20?",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535751650,535751650,src/test/net_tests.cpp
dhruv,2020-12-04 04:49:36,Would it make sense to use `emplace_back` here?,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r535833762,535833762,src/net.cpp
jnewbery,2020-12-04 14:07:59,This is a silent merge conflict with master. `NODISCARD` should be replaced with `[[nodiscard]]`,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536124248,536124248,src/net.cpp
jnewbery,2020-12-04 14:16:33,"Why is this called with `cs_vNodes` held? Previously, we'd release the lock before running through this logic.",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536129812,536129812,src/net.cpp
jnewbery,2020-12-04 14:19:11,What's the reason for the `std::move` here? Why not just pass this as an lvalue reference?,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536131595,536131595,src/net.cpp
jnewbery,2020-12-04 14:19:19,"Why return a `NodeEvictionCandidate` optional here, when only the NodeId is used? I think it'd be better to return an `Optional<NodeId>`",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536131724,536131724,src/net.cpp
jnewbery,2020-12-04 14:21:49,"This can create duplicate node ids, which isn't possible in the product code.",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536133393,536133393,src/test/net_tests.cpp
jnewbery,2020-12-04 14:23:02,Does this break if there are multiple eviction candidates with the same id?,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536134247,536134247,src/test/net_tests.cpp
jnewbery,2020-12-04 14:24:57,"```suggestion\nconstexpr int GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE{29};\n```",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536135582,536135582,src/test/net_tests.cpp
jnewbery,2020-12-04 14:28:10,"I think if you just constructed the `NodeEvictionCandidate`s with sequential node id numbers, you wouldn't need to do this here.",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536137843,536137843,src/test/net_tests.cpp
practicalswift,2020-12-04 15:01:09,"Good point. It can be moved to the outer scope. Thanks!\n\nContext: https://github.com/bitcoin/bitcoin/pull/19972#discussion_r518136772",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536161068,536161068,src/net.cpp
practicalswift,2020-12-04 16:09:29,Thanks! Fixed!,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209109,536209109,src/net.cpp
practicalswift,2020-12-04 16:09:47,Makes sense. Feedback addressed!,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209322,536209322,src/net.cpp
practicalswift,2020-12-04 16:10:06,Good point. Done!,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209505,536209505,src/net.cpp
practicalswift,2020-12-04 16:10:33,rvalue ref was suggested by @sipa: see  https://github.com/bitcoin/bitcoin/pull/19972#discussion_r517734066 for rationale.,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536209802,536209802,src/net.cpp
practicalswift,2020-12-04 16:12:19,Now setting `id` to `i` directly making it unique. Instead of relying on the caller doing this :),https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536211032,536211032,src/test/net_tests.cpp
practicalswift,2020-12-04 16:13:31,"Yes, the code was relying on the caller making sure the candidate ids are unique. Now doing that in `GetRandomNodeEvictionCandidates` as suggested.",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536211787,536211787,src/test/net_tests.cpp
practicalswift,2020-12-04 16:13:53,That is nicer. Addressed!,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536212035,536212035,src/test/net_tests.cpp
practicalswift,2020-12-04 16:14:17,Good point. Done!,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536212266,536212266,src/test/net_tests.cpp
practicalswift,2020-12-04 22:29:32,"Yes, but I'm afraid I cannot help you with that at the moment: so far it is a purely an empirical/experimental result :D\n\nCounterexamples or proofs welcome! :)",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536421598,536421598,src/test/net_tests.cpp
practicalswift,2020-12-04 22:33:26,"I think that is a good idea but I kind of like that this PR doesn't touch the actual selection code (keeping the diff at a minimum). I'd like to keep it that way but I'd be glad to review a change like the one suggested in a trivial ""introduce constants"" PR:).",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536423191,536423191,src/test/net_tests.cpp
practicalswift,2020-12-04 23:03:04,"I'm afraid that won't be possible until C++20¬π :) See [P0960: ""Allow initializing aggregates from a parenthesized list of values"" ](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0960r0.html).\n\n¬π Assuming you mean without adding a new ctor to `NodeEvictionCandidate`.",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r536434923,536434923,src/net.cpp
jnewbery,2020-12-07 10:45:04,No longer needed since you removed `NODISCARD`,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537405558,537405558,src/net.cpp
jnewbery,2020-12-07 10:54:49,"I understand why you'd want to pass by ref, but there's no benefit to passing by rvalue. This code suggests to me that `SelectNodeToEvict()` is going to keep ownership of `vEvictionCandidates` and you're using move semantics to avoid a copy, but that's not actually happening here.\n\nThere's no harm in using `&&` and `move` here, but it's unnecessary and possibly confusing.",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537411893,537411893,src/net.cpp
jnewbery,2020-12-07 11:11:45,I think this function and the other `IsEvicted()` could use a very short comment to explain the interface (here: returns true if any of the node ids in `node_ids` are selected for eviction).,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537422516,537422516,src/test/net_tests.cpp
practicalswift,2020-12-07 11:47:33,Fixed!,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537443914,537443914,src/net.cpp
practicalswift,2020-12-07 11:47:47,Fixed!,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537444057,537444057,src/test/net_tests.cpp
jnewbery,2020-12-07 12:45:46,"Any reason not to shuffle in place?\n\n```suggestion\nbool IsEvicted(std::vector<NodeEvictionCandidate>& candidates, const std::vector<NodeId> node_ids, FastRandomContext& random_context)\n{\n    Shuffle(candidates.begin(), candidates.end(), random_context);\n    const Optional<NodeId> evicted_node_id = SelectNodeToEvict(candidates);\n```",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r537478449,537478449,src/test/net_tests.cpp
narula,2020-12-09 17:17:51,"Please add some justification for these numbers, even if it's a description of the simulation/test you ran to get them. I don't understand how this 29 is guaranteed and the 20 is guaranteed below. \n\nThis reply makes it sound like it's *not* guaranteed?\n\nhttps://github.com/bitcoin/bitcoin/pull/20477#discussion_r536421598",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539494448,539494448,src/test/net_tests.cpp
narula,2020-12-09 17:26:59,"I think you're not running the following checks if the number of nodes is between the min and the max because of this `continue`. Is that the intention?\n\n~~Edit: ignore me! I'm looking at the wrong for loop.~~\n\nEdit again: Nope, I think I was right the first time...",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539501185,539501185,src/test/net_tests.cpp
narula,2020-12-09 17:51:52,Good discussion in PR review club about it today and @jonatack pointed out justification for the 20 is in `test/functional/p2p_eviction.py`.,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539520484,539520484,src/test/net_tests.cpp
MarcoFalke,2020-12-09 18:02:31,I don't get this either,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539527990,539527990,src/test/net_tests.cpp
troygiorshev,2020-12-09 19:12:08,"I'm a HUGE supporter of the early return pattern (AKA bouncer pattern) that you're using here.  However, maybe this alternative is a little easier to parse.\n\n(Maybe not in this annoyingly narrow GitHub window though...)\n\n```suggestion\n            if (number_of_nodes < GUARANTEED_EVICTION_AT_N_CANDIDATES_OR_ABOVE) {\n            	// Verify correctness of GUARANTEED_NON_EVICTION_AT_N_CAND",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539574518,539574518,src/test/net_tests.cpp
troygiorshev,2020-12-09 19:13:56,"I've proposed an alternative that might be easier to parse.\nhttps://github.com/bitcoin/bitcoin/pull/20477/files#r539574518",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539575650,539575650,src/test/net_tests.cpp
troygiorshev,2020-12-09 19:33:27,"It's ""don't run the checks if the number of nodes is less than the max"".  But, I'm not sure why we would do this...",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539588477,539588477,src/test/net_tests.cpp
practicalswift,2020-12-09 22:42:40,"@narula Oh, good catch! The `continue` should be dropped. I don't remember what the apparently incorrect reasoning behind it was TBH :)\n\nThanks for catching it!",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r539703493,539703493,src/test/net_tests.cpp
jnewbery,2020-12-10 10:29:15,"The comment here says 'four', but the code below is asserting that 8 non-tx-relay candidates are protected.",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540053825,540053825,src/test/net_tests.cpp
MarcoFalke,2020-12-10 13:01:13,nit: could use ranged for loop?,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540149894,540149894,src/test/net_tests.cpp
MarcoFalke,2020-12-10 13:05:02,"how is this different from a less verbose \n```suggestion\n    return node_ids.find(*evicted_node_id) != node_ids.end();\n```",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540152339,540152339,src/test/net_tests.cpp
MarcoFalke,2020-12-10 13:08:16,"style-nit: Adding a trailing comma here would not only make future diffs smaller if they add a new member, but also eat the extraneous whitespace at the beginning of the line.",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540154370,540154370,src/test/net_tests.cpp
practicalswift,2020-12-10 22:00:44,`std::vector` doesn't have a `find` function. Perhaps you were thinking of `std::map` or `std::set`? :),https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540528310,540528310,src/test/net_tests.cpp
practicalswift,2020-12-10 22:01:21,"Oh, of course. A prior version used the index. Thanks!",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540528651,540528651,src/test/net_tests.cpp
practicalswift,2020-12-10 22:01:38,Good point! Thanks!,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540528828,540528828,src/test/net_tests.cpp
practicalswift,2020-12-10 22:53:33,Good catch. There are two `nLastBlockTime` based protections: that's why more than four are protected in practice in this specific test case. Now testing the two different `nLastBlockTime` protections a.) independently and b.) jointly.,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540556849,540556849,src/test/net_tests.cpp
dhruv,2020-12-10 23:36:48,"In the previous version of the test, we tested:\n\n1. No eviction happens with <= 20 peers\n2. An eviction happens with >= 29 peers\n3. If an eviction happens, the protected peers are not evicted\n\nIn the new version, we are checking that the protected peers are not evicted in any situation (3). The last test case covers for (1). However, the test will not alert if an eviction does not happ",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540580372,540580372,src/test/net_tests.cpp
practicalswift,2020-12-11 06:50:12,@dhruv I can re-add it if someone has time to figure out the actual logic behind the constant 29. I haven't had time to back my empirical observation (via simulation) with proper analysis. Help welcome! :),https://github.com/bitcoin/bitcoin/pull/20477#discussion_r540728197,540728197,src/test/net_tests.cpp
dhruv,2020-12-11 15:43:48,"From PR Review club:\n\n**Q: Why is eviction guaranteed if we have at least 29 eviction candidates?**\n\nThe code in net.cpp (https://github.com/bitcoin/bitcoin/blob/fabecce/src/net.cpp#L954-L968) protects at most 28 peers from eviction (4 by net group, 8 by lowest ping time, 4 by last time of novel tx, up to 8 non-tx-relay peers by last novel block time, and 4 more peers by last novel block t",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r541039284,541039284,src/test/net_tests.cpp
jonatack,2020-12-11 16:12:13,"@practicalswift the review club meeting log about your PR is here, if useful: https://bitcoincore.reviews/20477 ",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r541058759,541058759,src/test/net_tests.cpp
practicalswift,2020-12-15 15:24:38,Thanks! Now assert eviction at >= 29 candidates and non-eviction at <= 20 candidates. Please re-review :),https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543441452,543441452,src/test/net_tests.cpp
jnewbery,2020-12-15 16:52:39,"I don't think these <=20/>=29 tests are very useful, will need to be updated whenever any changes are made to the eviction logic, and aren't very realistic (in general, nodes have many more than 29 inbound slots).",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543514057,543514057,src/test/net_tests.cpp
practicalswift,2020-12-15 17:03:18,"I'll happily adjust to the consensus opinion, but I'll let others chime in before changing anything in order to avoid another round of change+revert :)",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543523003,543523003,src/test/net_tests.cpp
dhruv,2020-12-15 19:30:21,"Even if we remove the <=20 assertion, we are already checking non-eviction <=20 (it's implicit in the tests). So the tests will need need to updated when changes are made anyway. I am not sure I understand why that's undesirable.\n\nI think it is useful to test that eviction does indeed happen (not just that protections are provided) when it should. After all, `SelectNodeToEvict` should select a",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r543627802,543627802,src/test/net_tests.cpp
jonatack,2020-12-16 10:48:38,"fbba7d8aada5b1d7a63ad4133 add `#include <optional.h>` header\n\nperhaps call this `SelectConnectionToEvict()` for symmetry with `AttemptToEvictConnection()`, or `SelectPeerToEvict()` as a peer is a node that is not ours",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544197436,544197436,src/net.cpp
jonatack,2020-12-16 10:50:11,fbba7d8aada5b1d7a63ad4 could be const,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544198510,544198510,src/net.cpp
jonatack,2020-12-16 11:07:04,"6767d63d02cc8a670f3d409db1 ref to const?\n```suggestion\nbool IsEvicted(std::vector<NodeEvictionCandidate> candidates, const std::vector<NodeId>& node_ids, FastRandomContext& random_context)\n```",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544209146,544209146,src/test/net_tests.cpp
jonatack,2020-12-16 11:10:19,"6767d63d02cc8a670f3d409 ref to const here as well\n```suggestion\nbool IsEvicted(const int number_of_nodes, std::function<void(NodeEvictionCandidate&)> candidate_setup_fn, const std::vector<NodeId>& node_ids, FastRandomContext& random_context)\n```",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544211318,544211318,src/test/net_tests.cpp
practicalswift,2020-12-16 11:58:08,"Now including `optional.h`.\n\nRegarding the naming: I see your point but given `NodeEvictionCandidate` inputs I think `SelectNodeToEvict` works.",https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544240631,544240631,src/net.cpp
practicalswift,2020-12-16 11:58:48,Good catch! Fixed!,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544241023,544241023,src/net.cpp
practicalswift,2020-12-16 11:58:52,Good catch! Fixed!,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544241063,544241063,src/test/net_tests.cpp
practicalswift,2020-12-16 11:58:58,Good catch! Fixed!,https://github.com/bitcoin/bitcoin/pull/20477#discussion_r544241113,544241113,src/test/net_tests.cpp
