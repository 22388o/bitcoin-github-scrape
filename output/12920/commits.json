[
  {
    "sha": "c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTVhYTRmMjdkNGZjYjFkMTc5ZmIxYjE3MDM0NDc2YTU5MThlYTg1",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-04-09T07:50:19Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-04-11T04:39:41Z"
      },
      "message": "test: Fix sign for expected values\n\nA number of BOOST_CHECK_EQUAL calls would result in warnings about signs.",
      "tree": {
        "sha": "3ff1096edd9b06cab9dc1a172900b5672d670430",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3ff1096edd9b06cab9dc1a172900b5672d670430"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlrNkY0ACgkQV692LbM1\nMyI3sw//QI3jk/YywqusHbistF8nTBCbBASXD1zexvbcoofds4B92Gw20zrNP4JB\nlphQ/cZ2cVKRuqcY/czzAgZm9mYMH5R0pca7bo1fU10JlyvMh4uh+muXsKv4NEIO\ns3IiZCcXIzqkvJOmKTi0wpd7+q7O+xf6PO4i13VCqODB6tZWEwp6VbX+CpeYF+pu\niuM0UWxZXkjrJGSyZnJnknEBopfhuOsVxmCiveh29ZoENg1N8gcEgWPIoAhcwqwM\nRDkXcLJ1bQcMlqNBAA/gcCOm4UlDRUMfKG4xJbkC2YfUKHZX9iqEP7/SfTeogmJR\n66FxSmAD4pjcRqg3p/WKpqNfOGAiEz0/LZuPQRPCiE3dBk9c9tRkM9SRkwBdYU4l\n0n14zZt6gQ28Ihna5/CdCtz98wYQ+lwT26CJgRtRJfVJGixUPYQja6uWWP+7bmi1\nW53Q3qsVKWLD0dMb/xbXvRfocaQu8AjlvivCj6Nygc+cJCPYvDtAhlV2xWJ5TJLJ\nlEhesfKRelM3EnobxXqx4hmg0EjqK8XAcG0XwZzarrjPy27MQc1/giBNKBPgtfmz\neUzBNouuGw+5qCVhmhw/wg9Ylhi3TP61mEAoVyN4yb6zWX2P+d+R84mEYylfQ6VS\neCAg3D2v9e4Miidk0rmv2OKKnB6yPDXiQk6gTpvL/Y0TjEIC6hk=\n=r0DC\n-----END PGP SIGNATURE-----",
        "payload": "tree 3ff1096edd9b06cab9dc1a172900b5672d670430\nparent 27278dffe877ab95488f2e0fada53edb9590487f\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1523260219 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1523421581 +0900\n\ntest: Fix sign for expected values\n\nA number of BOOST_CHECK_EQUAL calls would result in warnings about signs.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27278dffe877ab95488f2e0fada53edb9590487f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27278dffe877ab95488f2e0fada53edb9590487f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27278dffe877ab95488f2e0fada53edb9590487f"
      }
    ],
    "stats": {
      "total": 292,
      "additions": 146,
      "deletions": 146
    },
    "files": [
      {
        "sha": "ee3650d148a02ff605da05f13955f1d26d8fe0de",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 33,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -98,22 +98,22 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n     // Test: Does Addrman respond correctly when empty.\n-    BOOST_CHECK_EQUAL(addrman.size(), 0);\n+    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n     CAddrInfo addr_null = addrman.Select();\n     BOOST_CHECK_EQUAL(addr_null.ToString(), \"[::]:0\");\n \n     // Test: Does Addrman::Add work as expected.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n     BOOST_CHECK(addrman.Add(CAddress(addr1, NODE_NONE), source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1);\n+    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n     CAddrInfo addr_ret1 = addrman.Select();\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: Does IP address deduplication work correctly.\n     //  Expected dup IP should not be added.\n     CService addr1_dup = ResolveService(\"250.1.1.1\", 8333);\n     BOOST_CHECK(!addrman.Add(CAddress(addr1_dup, NODE_NONE), source));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1);\n+    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n \n \n     // Test: New table has one addr and we add a diff addr we should\n@@ -128,7 +128,7 @@ BOOST_AUTO_TEST_CASE(addrman_simple)\n \n     // Test: AddrMan::Clear() should empty the new table.\n     addrman.Clear();\n-    BOOST_CHECK_EQUAL(addrman.size(), 0);\n+    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n     CAddrInfo addr_null2 = addrman.Select();\n     BOOST_CHECK_EQUAL(addr_null2.ToString(), \"[::]:0\");\n \n@@ -146,23 +146,23 @@ BOOST_AUTO_TEST_CASE(addrman_ports)\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0);\n+    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n \n     // Test 7; Addr with same IP but diff port does not replace existing addr.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n     addrman.Add(CAddress(addr1, NODE_NONE), source);\n-    BOOST_CHECK_EQUAL(addrman.size(), 1);\n+    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n \n     CService addr1_port = ResolveService(\"250.1.1.1\", 8334);\n     addrman.Add(CAddress(addr1_port, NODE_NONE), source);\n-    BOOST_CHECK_EQUAL(addrman.size(), 1);\n+    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n     CAddrInfo addr_ret2 = addrman.Select();\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"250.1.1.1:8333\");\n \n     // Test: Add same IP but diff port to tried table, it doesn't get added.\n     //  Perhaps this is not ideal behavior but it is the current behavior.\n     addrman.Good(CAddress(addr1_port, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1);\n+    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n     bool newOnly = true;\n     CAddrInfo addr_ret3 = addrman.Select(newOnly);\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n@@ -178,22 +178,22 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n     // Test: Select from new with 1 addr in new.\n     CService addr1 = ResolveService(\"250.1.1.1\", 8333);\n     addrman.Add(CAddress(addr1, NODE_NONE), source);\n-    BOOST_CHECK_EQUAL(addrman.size(), 1);\n+    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n \n     bool newOnly = true;\n     CAddrInfo addr_ret1 = addrman.Select(newOnly);\n     BOOST_CHECK_EQUAL(addr_ret1.ToString(), \"250.1.1.1:8333\");\n \n     // Test: move addr to tried, select from new expected nothing returned.\n     addrman.Good(CAddress(addr1, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.size(), 1);\n+    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n     CAddrInfo addr_ret2 = addrman.Select(newOnly);\n     BOOST_CHECK_EQUAL(addr_ret2.ToString(), \"[::]:0\");\n \n     CAddrInfo addr_ret3 = addrman.Select();\n     BOOST_CHECK_EQUAL(addr_ret3.ToString(), \"250.1.1.1:8333\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 1);\n+    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n \n \n     // Add three addresses to new table.\n@@ -218,14 +218,14 @@ BOOST_AUTO_TEST_CASE(addrman_select)\n     addrman.Good(CAddress(addr7, NODE_NONE));\n \n     // Test: 6 addrs + 1 addr from last test = 7.\n-    BOOST_CHECK_EQUAL(addrman.size(), 7);\n+    BOOST_CHECK_EQUAL(addrman.size(), 7U);\n \n     // Test: Select pulls from new and tried regardless of port number.\n     std::set<uint16_t> ports;\n     for (int i = 0; i < 20; ++i) {\n         ports.insert(addrman.Select().GetPort());\n     }\n-    BOOST_CHECK_EQUAL(ports.size(), 3);\n+    BOOST_CHECK_EQUAL(ports.size(), 3U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n@@ -234,7 +234,7 @@ BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0);\n+    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n \n     for (unsigned int i = 1; i < 18; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + std::to_string(i));\n@@ -247,11 +247,11 @@ BOOST_AUTO_TEST_CASE(addrman_new_collisions)\n     //Test: new table collision!\n     CService addr1 = ResolveService(\"250.1.1.18\");\n     addrman.Add(CAddress(addr1, NODE_NONE), source);\n-    BOOST_CHECK_EQUAL(addrman.size(), 17);\n+    BOOST_CHECK_EQUAL(addrman.size(), 17U);\n \n     CService addr2 = ResolveService(\"250.1.1.19\");\n     addrman.Add(CAddress(addr2, NODE_NONE), source);\n-    BOOST_CHECK_EQUAL(addrman.size(), 18);\n+    BOOST_CHECK_EQUAL(addrman.size(), 18U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n@@ -260,7 +260,7 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n \n     CNetAddr source = ResolveIP(\"252.2.2.2\");\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0);\n+    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n \n     for (unsigned int i = 1; i < 80; i++) {\n         CService addr = ResolveService(\"250.1.1.\" + std::to_string(i));\n@@ -274,18 +274,18 @@ BOOST_AUTO_TEST_CASE(addrman_tried_collisions)\n     //Test: tried table collision!\n     CService addr1 = ResolveService(\"250.1.1.80\");\n     addrman.Add(CAddress(addr1, NODE_NONE), source);\n-    BOOST_CHECK_EQUAL(addrman.size(), 79);\n+    BOOST_CHECK_EQUAL(addrman.size(), 79U);\n \n     CService addr2 = ResolveService(\"250.1.1.81\");\n     addrman.Add(CAddress(addr2, NODE_NONE), source);\n-    BOOST_CHECK_EQUAL(addrman.size(), 80);\n+    BOOST_CHECK_EQUAL(addrman.size(), 80U);\n }\n \n BOOST_AUTO_TEST_CASE(addrman_find)\n {\n     CAddrManTest addrman;\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0);\n+    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n \n     CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n     CAddress addr2 = CAddress(ResolveService(\"250.1.2.1\", 9999), NODE_NONE);\n@@ -318,7 +318,7 @@ BOOST_AUTO_TEST_CASE(addrman_create)\n {\n     CAddrManTest addrman;\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0);\n+    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n \n     CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n@@ -338,7 +338,7 @@ BOOST_AUTO_TEST_CASE(addrman_delete)\n {\n     CAddrManTest addrman;\n \n-    BOOST_CHECK_EQUAL(addrman.size(), 0);\n+    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n \n     CAddress addr1 = CAddress(ResolveService(\"250.1.2.1\", 8333), NODE_NONE);\n     CNetAddr source1 = ResolveIP(\"250.1.2.1\");\n@@ -347,9 +347,9 @@ BOOST_AUTO_TEST_CASE(addrman_delete)\n     addrman.Create(addr1, source1, &nId);\n \n     // Test: Delete should actually delete the addr.\n-    BOOST_CHECK_EQUAL(addrman.size(), 1);\n+    BOOST_CHECK_EQUAL(addrman.size(), 1U);\n     addrman.Delete(nId);\n-    BOOST_CHECK_EQUAL(addrman.size(), 0);\n+    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n     CAddrInfo* info2 = addrman.Find(addr1);\n     BOOST_CHECK(info2 == nullptr);\n }\n@@ -360,9 +360,9 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n \n     // Test: Sanity check, GetAddr should never return anything if addrman\n     //  is empty.\n-    BOOST_CHECK_EQUAL(addrman.size(), 0);\n+    BOOST_CHECK_EQUAL(addrman.size(), 0U);\n     std::vector<CAddress> vAddr1 = addrman.GetAddr();\n-    BOOST_CHECK_EQUAL(vAddr1.size(), 0);\n+    BOOST_CHECK_EQUAL(vAddr1.size(), 0U);\n \n     CAddress addr1 = CAddress(ResolveService(\"250.250.2.1\", 8333), NODE_NONE);\n     addr1.nTime = GetAdjustedTime(); // Set time so isTerrible = false\n@@ -385,12 +385,12 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n     addrman.Add(addr5, source1);\n \n     // GetAddr returns 23% of addresses, 23% of 5 is 1 rounded down.\n-    BOOST_CHECK_EQUAL(addrman.GetAddr().size(), 1);\n+    BOOST_CHECK_EQUAL(addrman.GetAddr().size(), 1U);\n \n     // Test: Ensure GetAddr works with new and tried addresses.\n     addrman.Good(CAddress(addr1, NODE_NONE));\n     addrman.Good(CAddress(addr2, NODE_NONE));\n-    BOOST_CHECK_EQUAL(addrman.GetAddr().size(), 1);\n+    BOOST_CHECK_EQUAL(addrman.GetAddr().size(), 1U);\n \n     // Test: Ensure GetAddr still returns 23% when addrman has many addrs.\n     for (unsigned int i = 1; i < (8 * 256); i++) {\n@@ -409,9 +409,9 @@ BOOST_AUTO_TEST_CASE(addrman_getaddr)\n \n     size_t percent23 = (addrman.size() * 23) / 100;\n     BOOST_CHECK_EQUAL(vAddr.size(), percent23);\n-    BOOST_CHECK_EQUAL(vAddr.size(), 461);\n+    BOOST_CHECK_EQUAL(vAddr.size(), 461U);\n     // (Addrman.size() < number of addresses added) due to address collisions.\n-    BOOST_CHECK_EQUAL(addrman.size(), 2006);\n+    BOOST_CHECK_EQUAL(addrman.size(), 2006U);\n }\n \n \n@@ -454,7 +454,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     }\n     // Test: IP addresses in the same group (\\16 prefix for IPv4) should\n     //  never get more than 8 buckets\n-    BOOST_CHECK_EQUAL(buckets.size(), 8);\n+    BOOST_CHECK_EQUAL(buckets.size(), 8U);\n \n     buckets.clear();\n     for (int j = 0; j < 255; j++) {\n@@ -466,7 +466,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_tried_bucket)\n     }\n     // Test: IP addresses in the different groups should map to more than\n     //  8 buckets.\n-    BOOST_CHECK_EQUAL(buckets.size(), 160);\n+    BOOST_CHECK_EQUAL(buckets.size(), 160U);\n }\n \n BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n@@ -506,7 +506,7 @@ BOOST_AUTO_TEST_CASE(caddrinfo_get_new_bucket)\n     }\n     // Test: IP addresses in the same group (\\16 prefix for IPv4) should\n     //  always map to the same bucket.\n-    BOOST_CHECK_EQUAL(buckets.size(), 1);\n+    BOOST_CHECK_EQUAL(buckets.size(), 1U);\n \n     buckets.clear();\n     for (int j = 0; j < 4 * 255; j++) {"
      },
      {
        "sha": "67d1229c7010eb1be0839ef3d1390fc331e11291",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -64,10 +64,10 @@ BOOST_AUTO_TEST_CASE(arena_tests)\n     BOOST_CHECK(b.stats().used == 128);\n     b.free(a3);\n     BOOST_CHECK(b.stats().used == 0);\n-    BOOST_CHECK_EQUAL(b.stats().chunks_used, 0);\n+    BOOST_CHECK_EQUAL(b.stats().chunks_used, 0U);\n     BOOST_CHECK(b.stats().total == synth_size);\n     BOOST_CHECK(b.stats().free == synth_size);\n-    BOOST_CHECK_EQUAL(b.stats().chunks_free, 1);\n+    BOOST_CHECK_EQUAL(b.stats().chunks_free, 1U);\n \n     std::vector<void*> addr;\n     BOOST_CHECK(b.alloc(0) == nullptr); // allocating 0 always returns nullptr"
      },
      {
        "sha": "17f3004ef39660fcd0659ad2dc49076a0ad5215c",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -185,7 +185,7 @@ BOOST_AUTO_TEST_CASE(merkle_block_1)\n     CMerkleBlock merkleBlock(block, filter);\n     BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());\n \n-    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 1);\n+    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 1U);\n     std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];\n \n     BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S(\"0x74d681e0e03bafa802c8aa084379aa98d9fcd632ddc2ed9782b586ec87451f20\"));"
      },
      {
        "sha": "de4721644994c9fc4f611a3f18a1417377f15380",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -331,7 +331,7 @@ BOOST_AUTO_TEST_CASE(test_CheckQueue_Memory)\n                 control.Add(vChecks);\n             }\n         }\n-        BOOST_REQUIRE_EQUAL(MemoryCheck::fake_allocated_memory, 0);\n+        BOOST_REQUIRE_EQUAL(MemoryCheck::fake_allocated_memory, 0U);\n     }\n     tg.interrupt_all();\n     tg.join_all();"
      },
      {
        "sha": "a146c69fd2c22879a76ba18975d4bbedb89902e9",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -480,16 +480,16 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     Coin cc1;\n     ss1 >> cc1;\n     BOOST_CHECK_EQUAL(cc1.fCoinBase, false);\n-    BOOST_CHECK_EQUAL(cc1.nHeight, 203998);\n-    BOOST_CHECK_EQUAL(cc1.out.nValue, 60000000000ULL);\n+    BOOST_CHECK_EQUAL(cc1.nHeight, 203998U);\n+    BOOST_CHECK_EQUAL(cc1.out.nValue, CAmount{60000000000});\n     BOOST_CHECK_EQUAL(HexStr(cc1.out.scriptPubKey), HexStr(GetScriptForDestination(CKeyID(uint160(ParseHex(\"816115944e077fe7c803cfa57f29b36bf87c1d35\"))))));\n \n     // Good example\n     CDataStream ss2(ParseHex(\"8ddf77bbd123008c988f1a4a4de2161e0f50aac7f17e7f9555caa4\"), SER_DISK, CLIENT_VERSION);\n     Coin cc2;\n     ss2 >> cc2;\n     BOOST_CHECK_EQUAL(cc2.fCoinBase, true);\n-    BOOST_CHECK_EQUAL(cc2.nHeight, 120891);\n+    BOOST_CHECK_EQUAL(cc2.nHeight, 120891U);\n     BOOST_CHECK_EQUAL(cc2.out.nValue, 110397);\n     BOOST_CHECK_EQUAL(HexStr(cc2.out.scriptPubKey), HexStr(GetScriptForDestination(CKeyID(uint160(ParseHex(\"8c988f1a4a4de2161e0f50aac7f17e7f9555caa4\"))))));\n \n@@ -498,9 +498,9 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     Coin cc3;\n     ss3 >> cc3;\n     BOOST_CHECK_EQUAL(cc3.fCoinBase, false);\n-    BOOST_CHECK_EQUAL(cc3.nHeight, 0);\n+    BOOST_CHECK_EQUAL(cc3.nHeight, 0U);\n     BOOST_CHECK_EQUAL(cc3.out.nValue, 0);\n-    BOOST_CHECK_EQUAL(cc3.out.scriptPubKey.size(), 0);\n+    BOOST_CHECK_EQUAL(cc3.out.scriptPubKey.size(), 0U);\n \n     // scriptPubKey that ends beyond the end of the stream\n     CDataStream ss4(ParseHex(\"000007\"), SER_DISK, CLIENT_VERSION);"
      },
      {
        "sha": "de0d72614b09d1e07a547a5f3fb6a6e1153012e5",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -527,10 +527,10 @@ BOOST_AUTO_TEST_CASE(chacha20_testvector)\n BOOST_AUTO_TEST_CASE(countbits_tests)\n {\n     FastRandomContext ctx;\n-    for (int i = 0; i <= 64; ++i) {\n+    for (unsigned int i = 0; i <= 64; ++i) {\n         if (i == 0) {\n             // Check handling of zero.\n-            BOOST_CHECK_EQUAL(CountBits(0), 0);\n+            BOOST_CHECK_EQUAL(CountBits(0), 0U);\n         } else if (i < 10) {\n             for (uint64_t j = 1 << (i - 1); (j >> i) == 0; ++j) {\n                 // Exhaustively test up to 10 bits"
      },
      {
        "sha": "edc41ec42cf591404327e19ad7577d6067dd51f2",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -210,15 +210,15 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n     // Check that creating an iterator creates a snapshot\n     std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n \n-    for (int x=0x00; x<256; ++x) {\n+    for (unsigned int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n         uint32_t value = x*x;\n         if (x & 1) BOOST_CHECK(dbw.Write(key, value));\n     }\n \n     for (int seek_start : {0x00, 0x80}) {\n         it->Seek((uint8_t)seek_start);\n-        for (int x=seek_start; x<255; ++x) {\n+        for (unsigned int x=seek_start; x<255; ++x) {\n             uint8_t key;\n             uint32_t value;\n             BOOST_CHECK(it->Valid());\n@@ -295,7 +295,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n         snprintf(buf, sizeof(buf), \"%d\", seek_start);\n         StringContentsSerializer seek_key(buf);\n         it->Seek(seek_key);\n-        for (int x=seek_start; x<10; ++x) {\n+        for (unsigned int x=seek_start; x<10; ++x) {\n             for (int y = 0; y < 10; y++) {\n                 snprintf(buf, sizeof(buf), \"%d\", x);\n                 std::string exp_key(buf);"
      },
      {
        "sha": "d7d6c9b5a35037411e04b09ce7c62ab3933a2157",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -25,22 +25,22 @@ BOOST_AUTO_TEST_CASE(murmurhash3)\n     //\n     // The magic number 0xFBA4C795 comes from CBloomFilter::Hash()\n \n-    T(0x00000000, 0x00000000, \"\");\n-    T(0x6a396f08, 0xFBA4C795, \"\");\n-    T(0x81f16f39, 0xffffffff, \"\");\n-\n-    T(0x514e28b7, 0x00000000, \"00\");\n-    T(0xea3f0b17, 0xFBA4C795, \"00\");\n-    T(0xfd6cf10d, 0x00000000, \"ff\");\n-\n-    T(0x16c6b7ab, 0x00000000, \"0011\");\n-    T(0x8eb51c3d, 0x00000000, \"001122\");\n-    T(0xb4471bf8, 0x00000000, \"00112233\");\n-    T(0xe2301fa8, 0x00000000, \"0011223344\");\n-    T(0xfc2e4a15, 0x00000000, \"001122334455\");\n-    T(0xb074502c, 0x00000000, \"00112233445566\");\n-    T(0x8034d2a0, 0x00000000, \"0011223344556677\");\n-    T(0xb4698def, 0x00000000, \"001122334455667788\");\n+    T(0x00000000U, 0x00000000, \"\");\n+    T(0x6a396f08U, 0xFBA4C795, \"\");\n+    T(0x81f16f39U, 0xffffffff, \"\");\n+\n+    T(0x514e28b7U, 0x00000000, \"00\");\n+    T(0xea3f0b17U, 0xFBA4C795, \"00\");\n+    T(0xfd6cf10dU, 0x00000000, \"ff\");\n+\n+    T(0x16c6b7abU, 0x00000000, \"0011\");\n+    T(0x8eb51c3dU, 0x00000000, \"001122\");\n+    T(0xb4471bf8U, 0x00000000, \"00112233\");\n+    T(0xe2301fa8U, 0x00000000, \"0011223344\");\n+    T(0xfc2e4a15U, 0x00000000, \"001122334455\");\n+    T(0xb074502cU, 0x00000000, \"00112233445566\");\n+    T(0x8034d2a0U, 0x00000000, \"0011223344556677\");\n+    T(0xb4698defU, 0x00000000, \"001122334455667788\");\n \n #undef T\n }"
      },
      {
        "sha": "570c205731157ba0338c6a7910c6e1a506333488",
        "filename": "src/test/main_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/main_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/main_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/main_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -55,7 +55,7 @@ BOOST_AUTO_TEST_CASE(subsidy_limit_test)\n         nSum += nSubsidy * 1000;\n         BOOST_CHECK(MoneyRange(nSum));\n     }\n-    BOOST_CHECK_EQUAL(nSum, 2099999997690000ULL);\n+    BOOST_CHECK_EQUAL(nSum, CAmount{2099999997690000});\n }\n \n bool ReturnFalse() { return false; }"
      },
      {
        "sha": "37615d08b3736228a5fd0cf1cc766321a9a431c8",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -89,7 +89,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     poolSize = testPool.size();\n     testPool.removeRecursive(txParent);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize - 5);\n-    BOOST_CHECK_EQUAL(testPool.size(), 0);\n+    BOOST_CHECK_EQUAL(testPool.size(), 0U);\n \n     // Add children and grandchildren, but NOT the parent (simulate the parent being in a block)\n     for (int i = 0; i < 3; i++)\n@@ -102,7 +102,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     poolSize = testPool.size();\n     testPool.removeRecursive(txParent);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize - 6);\n-    BOOST_CHECK_EQUAL(testPool.size(), 0);\n+    BOOST_CHECK_EQUAL(testPool.size(), 0U);\n }\n \n template<typename name>\n@@ -156,7 +156,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx5.vout[0].nValue = 11 * COIN;\n     entry.nTime = 1;\n     pool.addUnchecked(tx5.GetHash(), entry.Fee(10000LL).FromTx(tx5));\n-    BOOST_CHECK_EQUAL(pool.size(), 5);\n+    BOOST_CHECK_EQUAL(pool.size(), 5U);\n \n     std::vector<std::string> sortedOrder;\n     sortedOrder.resize(5);\n@@ -175,7 +175,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx6.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx6.vout[0].nValue = 20 * COIN;\n     pool.addUnchecked(tx6.GetHash(), entry.Fee(0LL).FromTx(tx6));\n-    BOOST_CHECK_EQUAL(pool.size(), 6);\n+    BOOST_CHECK_EQUAL(pool.size(), 6U);\n     // Check that at this point, tx6 is sorted low\n     sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n     CheckSort<descendant_score>(pool, sortedOrder);\n@@ -198,7 +198,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK(setAncestorsCalculated == setAncestors);\n \n     pool.addUnchecked(tx7.GetHash(), entry.FromTx(tx7), setAncestors);\n-    BOOST_CHECK_EQUAL(pool.size(), 7);\n+    BOOST_CHECK_EQUAL(pool.size(), 7U);\n \n     // Now tx6 should be sorted higher (high fee child): tx7, tx6, tx2, ...\n     sortedOrder.erase(sortedOrder.begin());\n@@ -232,7 +232,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     pool.addUnchecked(tx9.GetHash(), entry.Fee(0LL).Time(3).FromTx(tx9), setAncestors);\n \n     // tx9 should be sorted low\n-    BOOST_CHECK_EQUAL(pool.size(), 9);\n+    BOOST_CHECK_EQUAL(pool.size(), 9U);\n     sortedOrder.insert(sortedOrder.begin(), tx9.GetHash().ToString());\n     CheckSort<descendant_score>(pool, sortedOrder);\n \n@@ -279,7 +279,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     CheckSort<descendant_score>(pool, sortedOrder);\n \n     // there should be 10 transactions in the mempool\n-    BOOST_CHECK_EQUAL(pool.size(), 10);\n+    BOOST_CHECK_EQUAL(pool.size(), 10U);\n \n     // Now try removing tx10 and verify the sort order returns to normal\n     pool.removeRecursive(pool.mapTx.find(tx10.GetHash())->GetTx());\n@@ -329,7 +329,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     tx5.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx5.vout[0].nValue = 11 * COIN;\n     pool.addUnchecked(tx5.GetHash(), entry.Fee(10000LL).FromTx(tx5));\n-    BOOST_CHECK_EQUAL(pool.size(), 5);\n+    BOOST_CHECK_EQUAL(pool.size(), 5U);\n \n     std::vector<std::string> sortedOrder;\n     sortedOrder.resize(5);\n@@ -359,7 +359,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     uint64_t tx6Size = GetVirtualTransactionSize(tx6);\n \n     pool.addUnchecked(tx6.GetHash(), entry.Fee(0LL).FromTx(tx6));\n-    BOOST_CHECK_EQUAL(pool.size(), 6);\n+    BOOST_CHECK_EQUAL(pool.size(), 6U);\n     // Ties are broken by hash\n     if (tx3.GetHash() < tx6.GetHash())\n         sortedOrder.push_back(tx6.GetHash().ToString());\n@@ -381,7 +381,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     CAmount fee = (20000/tx2Size)*(tx7Size + tx6Size) - 1;\n \n     pool.addUnchecked(tx7.GetHash(), entry.Fee(fee).FromTx(tx7));\n-    BOOST_CHECK_EQUAL(pool.size(), 7);\n+    BOOST_CHECK_EQUAL(pool.size(), 7U);\n     sortedOrder.insert(sortedOrder.begin()+1, tx7.GetHash().ToString());\n     CheckSort<ancestor_score>(pool, sortedOrder);\n "
      },
      {
        "sha": "2472ea9950d5b01e7b0ecf3e43aa535eea73b2b1",
        "filename": "src/test/merkleblock_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/merkleblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/merkleblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkleblock_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -35,20 +35,20 @@ BOOST_AUTO_TEST_CASE(merkleblock_construct_from_txids_found)\n     BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());\n \n     // vMatchedTxn is only used when bloom filter is specified.\n-    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 0);\n+    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 0U);\n \n     std::vector<uint256> vMatched;\n     std::vector<unsigned int> vIndex;\n \n     BOOST_CHECK_EQUAL(merkleBlock.txn.ExtractMatches(vMatched, vIndex).GetHex(), block.hashMerkleRoot.GetHex());\n-    BOOST_CHECK_EQUAL(vMatched.size(), 2);\n+    BOOST_CHECK_EQUAL(vMatched.size(), 2U);\n \n     // Ordered by occurrence in depth-first tree traversal.\n     BOOST_CHECK_EQUAL(vMatched[0].ToString(), txhash2.ToString());\n-    BOOST_CHECK_EQUAL(vIndex[0], 1);\n+    BOOST_CHECK_EQUAL(vIndex[0], 1U);\n \n     BOOST_CHECK_EQUAL(vMatched[1].ToString(), txhash1.ToString());\n-    BOOST_CHECK_EQUAL(vIndex[1], 8);\n+    BOOST_CHECK_EQUAL(vIndex[1], 8U);\n }\n \n \n@@ -65,14 +65,14 @@ BOOST_AUTO_TEST_CASE(merkleblock_construct_from_txids_not_found)\n     CMerkleBlock merkleBlock(block, txids2);\n \n     BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());\n-    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 0);\n+    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 0U);\n \n     std::vector<uint256> vMatched;\n     std::vector<unsigned int> vIndex;\n \n     BOOST_CHECK_EQUAL(merkleBlock.txn.ExtractMatches(vMatched, vIndex).GetHex(), block.hashMerkleRoot.GetHex());\n-    BOOST_CHECK_EQUAL(vMatched.size(), 0);\n-    BOOST_CHECK_EQUAL(vIndex.size(), 0);\n+    BOOST_CHECK_EQUAL(vMatched.size(), 0U);\n+    BOOST_CHECK_EQUAL(vIndex.size(), 0U);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "c98566f9caa2d4c7843a67315877483c25268325",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -501,15 +501,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // it into the template because we still check IsFinalTx in CreateNewBlock,\n     // but relative locked txs will if inconsistently added to mempool.\n     // For now these will still generate a valid template until BIP68 soft fork\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3U);\n     // However if we advance height by 1 and time by 512, all of them should be mined\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n         chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n     chainActive.Tip()->nHeight++;\n     SetMockTime(chainActive.Tip()->GetMedianTimePast() + 1);\n \n     BOOST_CHECK(pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5U);\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);"
      },
      {
        "sha": "9abfd5ebd8c590458c5360f81c1b44299cab07cd",
        "filename": "src/test/pow_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/pow_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/pow_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pow_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -22,7 +22,7 @@ BOOST_AUTO_TEST_CASE(get_next_work)\n     pindexLast.nHeight = 32255;\n     pindexLast.nTime = 1262152739;  // Block #32255\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00d86a);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00d86aU);\n }\n \n /* Test the constraint on the upper bound for next work */\n@@ -34,7 +34,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_pow_limit)\n     pindexLast.nHeight = 2015;\n     pindexLast.nTime = 1233061996;  // Block #2015\n     pindexLast.nBits = 0x1d00ffff;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00ffff);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00ffffU);\n }\n \n /* Test the constraint on the lower bound for actual time taken */\n@@ -46,7 +46,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_lower_limit_actual)\n     pindexLast.nHeight = 68543;\n     pindexLast.nTime = 1279297671;  // Block #68543\n     pindexLast.nBits = 0x1c05a3f4;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1c0168fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1c0168fdU);\n }\n \n /* Test the constraint on the upper bound for actual time taken */\n@@ -58,7 +58,7 @@ BOOST_AUTO_TEST_CASE(get_next_work_upper_limit_actual)\n     pindexLast.nHeight = 46367;\n     pindexLast.nTime = 1269211443;  // Block #46367\n     pindexLast.nBits = 0x1c387f6f;\n-    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00e1fd);\n+    BOOST_CHECK_EQUAL(CalculateNextWorkRequired(&pindexLast, nLastRetargetTime, chainParams->GetConsensus()), 0x1d00e1fdU);\n }\n \n BOOST_AUTO_TEST_CASE(GetBlockProofEquivalentTime_test)"
      },
      {
        "sha": "80a294d129bb9daf69205e038e325564957f805a",
        "filename": "src/test/random_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/random_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/random_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/random_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -52,7 +52,7 @@ BOOST_AUTO_TEST_CASE(fastrandom_randbits)\n     for (int bits = 0; bits < 63; ++bits) {\n         for (int j = 0; j < 1000; ++j) {\n             uint64_t rangebits = ctx1.randbits(bits);\n-            BOOST_CHECK_EQUAL(rangebits >> bits, 0);\n+            BOOST_CHECK_EQUAL(rangebits >> bits, 0U);\n             uint64_t range = ((uint64_t)1) << bits | rangebits;\n             uint64_t rand = ctx2.randrange(range);\n             BOOST_CHECK(rand < range);"
      },
      {
        "sha": "242e1fb7ff67dcf515d9ef46daf177494ce424fb",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -245,7 +245,7 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n     BOOST_CHECK_NO_THROW(CallRPC(std::string(\"setban 127.0.0.0 remove\")));\n     BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"listbanned\")));\n     ar = r.get_array();\n-    BOOST_CHECK_EQUAL(ar.size(), 0);\n+    BOOST_CHECK_EQUAL(ar.size(), 0U);\n \n     BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"setban 127.0.0.0/24 add 1607731200 true\")));\n     BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"listbanned\")));\n@@ -275,15 +275,15 @@ BOOST_AUTO_TEST_CASE(rpc_ban)\n     BOOST_CHECK_NO_THROW(CallRPC(std::string(\"setban 127.0.0.0/24 remove\")));\n     BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"listbanned\")));\n     ar = r.get_array();\n-    BOOST_CHECK_EQUAL(ar.size(), 0);\n+    BOOST_CHECK_EQUAL(ar.size(), 0U);\n \n     BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"setban 127.0.0.0/255.255.0.0 add\")));\n     BOOST_CHECK_THROW(r = CallRPC(std::string(\"setban 127.0.1.1 add\")), std::runtime_error);\n \n     BOOST_CHECK_NO_THROW(CallRPC(std::string(\"clearbanned\")));\n     BOOST_CHECK_NO_THROW(r = CallRPC(std::string(\"listbanned\")));\n     ar = r.get_array();\n-    BOOST_CHECK_EQUAL(ar.size(), 0);\n+    BOOST_CHECK_EQUAL(ar.size(), 0U);\n \n \n     BOOST_CHECK_THROW(r = CallRPC(std::string(\"setban test add\")), std::runtime_error); //invalid IP"
      },
      {
        "sha": "767c5fdbd274a0e742292fb6a525ae437bd76efc",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -33,15 +33,15 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n     s << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n     BOOST_CHECK(Solver(s, whichType, solutions));\n     BOOST_CHECK_EQUAL(whichType, TX_PUBKEY);\n-    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0]));\n \n     // TX_PUBKEYHASH\n     s.clear();\n     s << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n     BOOST_CHECK(Solver(s, whichType, solutions));\n     BOOST_CHECK_EQUAL(whichType, TX_PUBKEYHASH);\n-    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0].GetID()));\n \n     // TX_SCRIPTHASH\n@@ -50,7 +50,7 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n     s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n     BOOST_CHECK(Solver(s, whichType, solutions));\n     BOOST_CHECK_EQUAL(whichType, TX_SCRIPTHASH);\n-    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(CScriptID(redeemScript)));\n \n     // TX_MULTISIG\n@@ -61,7 +61,7 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n         OP_2 << OP_CHECKMULTISIG;\n     BOOST_CHECK(Solver(s, whichType, solutions));\n     BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n-    BOOST_CHECK_EQUAL(solutions.size(), 4);\n+    BOOST_CHECK_EQUAL(solutions.size(), 4U);\n     BOOST_CHECK(solutions[0] == std::vector<unsigned char>({1}));\n     BOOST_CHECK(solutions[1] == ToByteVector(pubkeys[0]));\n     BOOST_CHECK(solutions[2] == ToByteVector(pubkeys[1]));\n@@ -75,7 +75,7 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n         OP_3 << OP_CHECKMULTISIG;\n     BOOST_CHECK(Solver(s, whichType, solutions));\n     BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n-    BOOST_CHECK_EQUAL(solutions.size(), 5);\n+    BOOST_CHECK_EQUAL(solutions.size(), 5U);\n     BOOST_CHECK(solutions[0] == std::vector<unsigned char>({2}));\n     BOOST_CHECK(solutions[1] == ToByteVector(pubkeys[0]));\n     BOOST_CHECK(solutions[2] == ToByteVector(pubkeys[1]));\n@@ -90,14 +90,14 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n         std::vector<unsigned char>({255});\n     BOOST_CHECK(Solver(s, whichType, solutions));\n     BOOST_CHECK_EQUAL(whichType, TX_NULL_DATA);\n-    BOOST_CHECK_EQUAL(solutions.size(), 0);\n+    BOOST_CHECK_EQUAL(solutions.size(), 0U);\n \n     // TX_WITNESS_V0_KEYHASH\n     s.clear();\n     s << OP_0 << ToByteVector(pubkeys[0].GetID());\n     BOOST_CHECK(Solver(s, whichType, solutions));\n     BOOST_CHECK_EQUAL(whichType, TX_WITNESS_V0_KEYHASH);\n-    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0].GetID()));\n \n     // TX_WITNESS_V0_SCRIPTHASH\n@@ -109,7 +109,7 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n     s << OP_0 << ToByteVector(scriptHash);\n     BOOST_CHECK(Solver(s, whichType, solutions));\n     BOOST_CHECK_EQUAL(whichType, TX_WITNESS_V0_SCRIPTHASH);\n-    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1U);\n     BOOST_CHECK(solutions[0] == ToByteVector(scriptHash));\n \n     // TX_NONSTANDARD\n@@ -264,7 +264,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     s << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n     BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n     BOOST_CHECK_EQUAL(whichType, TX_PUBKEY);\n-    BOOST_CHECK_EQUAL(addresses.size(), 1);\n+    BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n     BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n                 *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());\n@@ -274,7 +274,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     s << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n     BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n     BOOST_CHECK_EQUAL(whichType, TX_PUBKEYHASH);\n-    BOOST_CHECK_EQUAL(addresses.size(), 1);\n+    BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n     BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n                 *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());\n@@ -285,7 +285,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n     s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n     BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n     BOOST_CHECK_EQUAL(whichType, TX_SCRIPTHASH);\n-    BOOST_CHECK_EQUAL(addresses.size(), 1);\n+    BOOST_CHECK_EQUAL(addresses.size(), 1U);\n     BOOST_CHECK_EQUAL(nRequired, 1);\n     BOOST_CHECK(boost::get<CScriptID>(&addresses[0]) &&\n                 *boost::get<CScriptID>(&addresses[0]) == CScriptID(redeemScript));\n@@ -298,7 +298,7 @@ BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n         OP_2 << OP_CHECKMULTISIG;\n     BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n     BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n-    BOOST_CHECK_EQUAL(addresses.size(), 2);\n+    BOOST_CHECK_EQUAL(addresses.size(), 2U);\n     BOOST_CHECK_EQUAL(nRequired, 2);\n     BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n                 *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());"
      },
      {
        "sha": "94164346f327a2e502aea0e4d8e2c0752cdd2d0c",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 27,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -78,18 +78,18 @@ BOOST_AUTO_TEST_CASE(sizes)\n     BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n \n     // Sanity-check GetSerializeSize and c++ type matching\n-    BOOST_CHECK_EQUAL(GetSerializeSize(char(0), 0), 1);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(int8_t(0), 0), 1);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(uint8_t(0), 0), 1);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(int16_t(0), 0), 2);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(uint16_t(0), 0), 2);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(int32_t(0), 0), 4);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(uint32_t(0), 0), 4);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(int64_t(0), 0), 8);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(uint64_t(0), 0), 8);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(float(0), 0), 4);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(double(0), 0), 8);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(char(0), 0), 1U);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int8_t(0), 0), 1U);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint8_t(0), 0), 1U);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int16_t(0), 0), 2U);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint16_t(0), 0), 2U);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int32_t(0), 0), 4U);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint32_t(0), 0), 4U);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(int64_t(0), 0), 8U);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(uint64_t(0), 0), 8U);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(float(0), 0), 4U);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(double(0), 0), 8U);\n+    BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), 0), 1U);\n }\n \n BOOST_AUTO_TEST_CASE(floats_conversion)\n@@ -103,12 +103,12 @@ BOOST_AUTO_TEST_CASE(floats_conversion)\n     BOOST_CHECK_EQUAL(ser_uint32_to_float(0x40800000), 4.0F);\n     BOOST_CHECK_EQUAL(ser_uint32_to_float(0x44444444), 785.066650390625F);\n \n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.0F), 0x00000000);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.5F), 0x3f000000);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(1.0F), 0x3f800000);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(2.0F), 0x40000000);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(4.0F), 0x40800000);\n-    BOOST_CHECK_EQUAL(ser_float_to_uint32(785.066650390625F), 0x44444444);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.0F), 0x00000000U);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(0.5F), 0x3f000000U);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(1.0F), 0x3f800000U);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(2.0F), 0x40000000U);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(4.0F), 0x40800000U);\n+    BOOST_CHECK_EQUAL(ser_float_to_uint32(785.066650390625F), 0x44444444U);\n }\n \n BOOST_AUTO_TEST_CASE(doubles_conversion)\n@@ -299,39 +299,39 @@ BOOST_AUTO_TEST_CASE(insert_delete)\n {\n     // Test inserting/deleting bytes.\n     CDataStream ss(SER_DISK, 0);\n-    BOOST_CHECK_EQUAL(ss.size(), 0);\n+    BOOST_CHECK_EQUAL(ss.size(), 0U);\n \n     ss.write(\"\\x00\\x01\\x02\\xff\", 4);\n-    BOOST_CHECK_EQUAL(ss.size(), 4);\n+    BOOST_CHECK_EQUAL(ss.size(), 4U);\n \n     char c = (char)11;\n \n     // Inserting at beginning/end/middle:\n     ss.insert(ss.begin(), c);\n-    BOOST_CHECK_EQUAL(ss.size(), 5);\n+    BOOST_CHECK_EQUAL(ss.size(), 5U);\n     BOOST_CHECK_EQUAL(ss[0], c);\n     BOOST_CHECK_EQUAL(ss[1], 0);\n \n     ss.insert(ss.end(), c);\n-    BOOST_CHECK_EQUAL(ss.size(), 6);\n+    BOOST_CHECK_EQUAL(ss.size(), 6U);\n     BOOST_CHECK_EQUAL(ss[4], (char)0xff);\n     BOOST_CHECK_EQUAL(ss[5], c);\n \n     ss.insert(ss.begin()+2, c);\n-    BOOST_CHECK_EQUAL(ss.size(), 7);\n+    BOOST_CHECK_EQUAL(ss.size(), 7U);\n     BOOST_CHECK_EQUAL(ss[2], c);\n \n     // Delete at beginning/end/middle\n     ss.erase(ss.begin());\n-    BOOST_CHECK_EQUAL(ss.size(), 6);\n+    BOOST_CHECK_EQUAL(ss.size(), 6U);\n     BOOST_CHECK_EQUAL(ss[0], 0);\n \n     ss.erase(ss.begin()+ss.size()-1);\n-    BOOST_CHECK_EQUAL(ss.size(), 5);\n+    BOOST_CHECK_EQUAL(ss.size(), 5U);\n     BOOST_CHECK_EQUAL(ss[4], (char)0xff);\n \n     ss.erase(ss.begin()+1);\n-    BOOST_CHECK_EQUAL(ss.size(), 4);\n+    BOOST_CHECK_EQUAL(ss.size(), 4U);\n     BOOST_CHECK_EQUAL(ss[0], 0);\n     BOOST_CHECK_EQUAL(ss[1], 1);\n     BOOST_CHECK_EQUAL(ss[2], 2);\n@@ -340,7 +340,7 @@ BOOST_AUTO_TEST_CASE(insert_delete)\n     // Make sure GetAndClear does the right thing:\n     CSerializeData d;\n     ss.GetAndClear(d);\n-    BOOST_CHECK_EQUAL(ss.size(), 0);\n+    BOOST_CHECK_EQUAL(ss.size(), 0U);\n }\n \n BOOST_AUTO_TEST_CASE(class_methods)"
      },
      {
        "sha": "9ece9e70c2873a9b227ac7d986a4515d8f914804",
        "filename": "src/test/torcontrol_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/torcontrol_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/torcontrol_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/torcontrol_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -167,10 +167,10 @@ BOOST_AUTO_TEST_CASE(util_ParseTorReplyMapping)\n     // (needed because string comparison reads the null as end-of-string)\n     BOOST_TEST_MESSAGE(std::string(\"CheckParseTorReplyMapping(Null=\\\"\\\\0\\\")\"));\n     auto ret = ParseTorReplyMapping(\"Null=\\\"\\\\0\\\"\");\n-    BOOST_CHECK_EQUAL(ret.size(), 1);\n+    BOOST_CHECK_EQUAL(ret.size(), 1U);\n     auto r_it = ret.begin();\n     BOOST_CHECK_EQUAL(r_it->first, \"Null\");\n-    BOOST_CHECK_EQUAL(r_it->second.size(), 1);\n+    BOOST_CHECK_EQUAL(r_it->second.size(), 1U);\n     BOOST_CHECK_EQUAL(r_it->second[0], '\\0');\n \n     // A more complex valid grammar. PROTOCOLINFO accepts a VersionLine that"
      },
      {
        "sha": "87976a9a07fcda4d6ce2b657ce1bc14b58515e93",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -88,7 +88,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n     BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n     // spends[1] should have been removed from the mempool when the\n     // block with spends[0] is accepted:\n-    BOOST_CHECK_EQUAL(mempool.size(), 0);\n+    BOOST_CHECK_EQUAL(mempool.size(), 0U);\n }\n \n // Run CheckInputs (using pcoinsTip) on the given transaction, for all script\n@@ -205,7 +205,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         // not caching invalidity (if that changes, delete this test case).\n         std::vector<CScriptCheck> scriptchecks;\n         BOOST_CHECK(CheckInputs(spend_tx, state, pcoinsTip.get(), true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_DERSIG, true, true, ptd_spend_tx, &scriptchecks));\n-        BOOST_CHECK_EQUAL(scriptchecks.size(), 1);\n+        BOOST_CHECK_EQUAL(scriptchecks.size(), 1U);\n \n         // Test that CheckInputs returns true iff DERSIG-enforcing flags are\n         // not present.  Don't add these checks to the cache, so that we can\n@@ -364,7 +364,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         // input was valid)\n         BOOST_CHECK(CheckInputs(tx, state, pcoinsTip.get(), true, SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS, true, true, txdata, &scriptchecks));\n         // Should get 2 script checks back -- caching is on a whole-transaction basis.\n-        BOOST_CHECK_EQUAL(scriptchecks.size(), 2);\n+        BOOST_CHECK_EQUAL(scriptchecks.size(), 2U);\n     }\n }\n "
      },
      {
        "sha": "4729b7c31994a8e752e3d35d8bd00b21f168881c",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c55aa4f27d4fcb1d179fb1b17034476a5918ea85/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=c55aa4f27d4fcb1d179fb1b17034476a5918ea85",
        "patch": "@@ -156,8 +156,8 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         ::importwallet(request);\n \n         LOCK(wallet.cs_wallet);\n-        BOOST_CHECK_EQUAL(wallet.mapWallet.size(), 3);\n-        BOOST_CHECK_EQUAL(coinbaseTxns.size(), 103);\n+        BOOST_CHECK_EQUAL(wallet.mapWallet.size(), 3U);\n+        BOOST_CHECK_EQUAL(coinbaseTxns.size(), 103U);\n         for (size_t i = 0; i < coinbaseTxns.size(); ++i) {\n             bool found = wallet.GetWalletTx(coinbaseTxns[i].GetHash());\n             bool expected = i >= 100;\n@@ -259,7 +259,7 @@ BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n     m_wallet.AddDestData(dest, \"rr1\", \"val_rr1\");\n \n     auto values = m_wallet.GetDestValues(\"rr\");\n-    BOOST_CHECK_EQUAL(values.size(), 2);\n+    BOOST_CHECK_EQUAL(values.size(), 2U);\n     BOOST_CHECK_EQUAL(values[0], \"val_rr0\");\n     BOOST_CHECK_EQUAL(values[1], \"val_rr1\");\n }\n@@ -318,9 +318,9 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n     // Confirm ListCoins initially returns 1 coin grouped under coinbaseKey\n     // address.\n     auto list = wallet->ListCoins();\n-    BOOST_CHECK_EQUAL(list.size(), 1);\n+    BOOST_CHECK_EQUAL(list.size(), 1U);\n     BOOST_CHECK_EQUAL(boost::get<CKeyID>(list.begin()->first).ToString(), coinbaseAddress);\n-    BOOST_CHECK_EQUAL(list.begin()->second.size(), 1);\n+    BOOST_CHECK_EQUAL(list.begin()->second.size(), 1U);\n \n     // Check initial balance from one mature coinbase transaction.\n     BOOST_CHECK_EQUAL(50 * COIN, wallet->GetAvailableBalance());\n@@ -331,16 +331,16 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n     // pubkey.\n     AddTx(CRecipient{GetScriptForRawPubKey({}), 1 * COIN, false /* subtract fee */});\n     list = wallet->ListCoins();\n-    BOOST_CHECK_EQUAL(list.size(), 1);\n+    BOOST_CHECK_EQUAL(list.size(), 1U);\n     BOOST_CHECK_EQUAL(boost::get<CKeyID>(list.begin()->first).ToString(), coinbaseAddress);\n-    BOOST_CHECK_EQUAL(list.begin()->second.size(), 2);\n+    BOOST_CHECK_EQUAL(list.begin()->second.size(), 2U);\n \n     // Lock both coins. Confirm number of available coins drops to 0.\n     {\n         LOCK2(cs_main, wallet->cs_wallet);\n         std::vector<COutput> available;\n         wallet->AvailableCoins(available);\n-        BOOST_CHECK_EQUAL(available.size(), 2);\n+        BOOST_CHECK_EQUAL(available.size(), 2U);\n     }\n     for (const auto& group : list) {\n         for (const auto& coin : group.second) {\n@@ -352,14 +352,14 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n         LOCK2(cs_main, wallet->cs_wallet);\n         std::vector<COutput> available;\n         wallet->AvailableCoins(available);\n-        BOOST_CHECK_EQUAL(available.size(), 0);\n+        BOOST_CHECK_EQUAL(available.size(), 0U);\n     }\n     // Confirm ListCoins still returns same result as before, despite coins\n     // being locked.\n     list = wallet->ListCoins();\n-    BOOST_CHECK_EQUAL(list.size(), 1);\n+    BOOST_CHECK_EQUAL(list.size(), 1U);\n     BOOST_CHECK_EQUAL(boost::get<CKeyID>(list.begin()->first).ToString(), coinbaseAddress);\n-    BOOST_CHECK_EQUAL(list.begin()->second.size(), 2);\n+    BOOST_CHECK_EQUAL(list.begin()->second.size(), 2U);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]