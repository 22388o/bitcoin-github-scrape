[
  {
    "sha": "252ca9c5d8d781c9044b452d608a419a003e5e3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTJjYTljNWQ4ZDc4MWM5MDQ0YjQ1MmQ2MDhhNDE5YTAwM2U1ZTNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-17T16:23:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-14T15:30:49Z"
      },
      "message": "build: bump version to 0.15.0\n\nTree-SHA512: 7cdf0efaafeb47ec25d29fa9dc1c5caa762ee62614288fc849370d89bd64c1e8039175fe44163fb5655db10b567baa028ae514a05ebdaf06432b9698849da195",
      "tree": {
        "sha": "fb3f1a03bb200daa6c55a72fe1123b76befc18d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb3f1a03bb200daa6c55a72fe1123b76befc18d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/252ca9c5d8d781c9044b452d608a419a003e5e3e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZkcIpAAoJEB5K7WKYbNJdti4H/3CUfcdXuc/MnYqCkWOeBUf6\nGkfT9N2UgNKYH5mQ+Glt61DBbKFWKkgVxVRgK8PtzEd7+OBTFDVtwaNuLVupyoiL\nxu2iQ4XvoiIHvF9p4cnjedD9ws+xRBOmZZKQ5GaV35aXptZOhXvC9GOrI136Yerw\nZ4Nievwi5w7VlkzsW7XqiMcSwWJLXtV37MrVtyjb0i9JuzWwupJxOZbf+eK7j+hB\nofQI5W3UjRhP4758j+wHSP/3uUKxGCMBHEGFHTzs0WoovDTmc4mFjIb0QtJ4J02e\nPbWiYrEUPn+OQgC6SbPS0DedxMIx0UWx3/eZGy2rholqq1d3EG9t1rbaV3CUeoo=\n=mlDn\n-----END PGP SIGNATURE-----",
        "payload": "tree fb3f1a03bb200daa6c55a72fe1123b76befc18d4\nparent c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1487348617 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1502724649 +0200\n\nbuild: bump version to 0.15.0\n\nTree-SHA512: 7cdf0efaafeb47ec25d29fa9dc1c5caa762ee62614288fc849370d89bd64c1e8039175fe44163fb5655db10b567baa028ae514a05ebdaf06432b9698849da195\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252ca9c5d8d781c9044b452d608a419a003e5e3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/252ca9c5d8d781c9044b452d608a419a003e5e3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252ca9c5d8d781c9044b452d608a419a003e5e3e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0dfea990e116db0f795c04c14fc0aa4cc2bf8bce",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/252ca9c5d8d781c9044b452d608a419a003e5e3e/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/252ca9c5d8d781c9044b452d608a419a003e5e3e/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=252ca9c5d8d781c9044b452d608a419a003e5e3e",
        "patch": "@@ -1,10 +1,10 @@\n dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n-define(_CLIENT_VERSION_MINOR, 14)\n-define(_CLIENT_VERSION_REVISION, 99)\n+define(_CLIENT_VERSION_MINOR, 15)\n+define(_CLIENT_VERSION_REVISION, 0)\n define(_CLIENT_VERSION_BUILD, 0)\n-define(_CLIENT_VERSION_IS_RELEASE, false)\n+define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2017)\n define(_COPYRIGHT_HOLDERS,[The %s developers])\n define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Core]])"
      }
    ]
  },
  {
    "sha": "30c246b04f1606dab17de592c98d03e5b6fd77aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGMyNDZiMDRmMTYwNmRhYjE3ZGU1OTJjOThkMDNlNWI2ZmQ3N2Fh",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-17T14:19:51Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-18T07:36:28Z"
      },
      "message": "Updating the release notes (minor stylistic changes)",
      "tree": {
        "sha": "95aea1e1ae76e53b391a0895dffa066df990e34d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95aea1e1ae76e53b391a0895dffa066df990e34d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30c246b04f1606dab17de592c98d03e5b6fd77aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30c246b04f1606dab17de592c98d03e5b6fd77aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30c246b04f1606dab17de592c98d03e5b6fd77aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30c246b04f1606dab17de592c98d03e5b6fd77aa/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "252ca9c5d8d781c9044b452d608a419a003e5e3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252ca9c5d8d781c9044b452d608a419a003e5e3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/252ca9c5d8d781c9044b452d608a419a003e5e3e"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9208ed48199c4468ed51671dcccb41881cdb19ac",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30c246b04f1606dab17de592c98d03e5b6fd77aa/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30c246b04f1606dab17de592c98d03e5b6fd77aa/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=30c246b04f1606dab17de592c98d03e5b6fd77aa",
        "patch": "@@ -124,7 +124,7 @@ Bitcoin Core now supports loading multiple, separate wallets (See [PR 8694](http\n \n Multi-wallet is enabled by using more than one `-wallet` argument when starting Bitcoin, either on the command line or in the Bitcoin config file.\n \n-**In Bitcoin-Qt, only the first wallet will be displayed and accessible for creating and signing transactions.** GUI selectable multiple wallets will be supported in a future version. However, even in 0.15 other loaded wallets will continue to remain synchronized to the node's current tip in the background. This can be useful if running a pruned node, since loading a wallet where the most recent sync is beyond the pruned height results in having to download and revalidate the whole blockchain. Continuing to synchronize all wallets in the background avoids this problem.\n+**In Bitcoin-Qt, only the first wallet will be displayed and accessible for creating and signing transactions.** GUI selectable multiple wallets will be supported in a future version. However, even in 0.15 other loaded wallets will remain synchronized to the node's current tip in the background. This can be useful if running a pruned node, since loading a wallet where the most recent sync is beyond the pruned height results in having to download and revalidate the whole blockchain. Continuing to synchronize all wallets in the background avoids this problem.\n \n Bitcoin Core 0.15.0 contains the following changes to the RPC interface and `bitcoin-cli` for multi-wallet:\n \n@@ -217,7 +217,7 @@ Low-level RPC changes\n \n - The `getmempoolancestors`, `getmempooldescendants`, `getmempooolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n \n-- The `dumpwallet` RPC now returns the full absolute path to the dumped wallet. (it\n+- The `dumpwallet` RPC now returns the full absolute path to the dumped wallet. It\n   used to return no value, even if successful (See [PR 9740](https://github.com/bitcoin/bitcoin/pull/9740)).\n \n - In the `getpeerinfo` RPC, the return object for each peer now returns an `addrbind` member, which contains the ip address and port of the connection to the peer. This is in addition to the `addrlocal` member which contains the ip address and port of the local node as reported by the peer (See [PR 10478](https://github.com/bitcoin/bitcoin/pull/10478)).\n@@ -231,7 +231,7 @@ Low-level RPC changes\n - The second argument in the `submitblock` RPC argument has been renamed from `parameters` to `dummy`. This argument never had any effect, and the renaming is simply to communicate this fact to the user (See [PR 10191](https://github.com/bitcoin/bitcoin/pull/10191))\n   (Clients should, however, use positional arguments for `submitblock` in order to be compatible with BIP 22.)\n \n-- The `verbose` argument of `getblock` has been renamed to `verbosity` and now takes an integer from 0-2. Verbose level 0 is equivalent to `verbose=false`. Verbose level 1 is equivalent to `verbose=true`. Verbose level 2 will give the full transaction details of each transaction in the output as given by `getrawtransaction`. The old behavior of using the `verbose` named argument and a boolean value is still maintained for compatibility.\n+- The `verbose` argument of `getblock` has been renamed to `verbosity` and now takes an integer from 0 to 2. Verbose level 0 is equivalent to `verbose=false`. Verbose level 1 is equivalent to `verbose=true`. Verbose level 2 will give the full transaction details of each transaction in the output as given by `getrawtransaction`. The old behavior of using the `verbose` named argument and a boolean value is still maintained for compatibility.\n \n - Error codes have been updated to be more accurate for the following error cases (See [PR 9853](https://github.com/bitcoin/bitcoin/pull/9853)):\n   - `getblock` now returns RPC_MISC_ERROR if the block can't be found on disk (for"
      }
    ]
  },
  {
    "sha": "1c4b9b31355fe86faf45f60e228003527fcee549",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzRiOWIzMTM1NWZlODZmYWY0NWY2MGUyMjgwMDM1MjdmY2VlNTQ5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-18T08:00:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-18T08:01:07Z"
      },
      "message": "Merge #11076: 0.15 release-notes nits: fix redundancy, remove accidental parenthesis & fix range style\n\n30c246b Updating the release notes (minor stylistic changes) (practicalswift)\n\nPull request description:\n\n  0.15 release-notes nits:\n  * Remove accidental parenthesis\n  * Fix redundancy (\"remain\" vs. previous \"continue to remain\")\n  * Fix range style (\"from X to Y\" vs. previous \"from X-Y\")\n\nTree-SHA512: d3621b6cc781e82d0156a559f71b8190c0fb1aed9ae7a8173ac9c57387a1a03fb9b8a6e4c709adadf80bcc2c2eff113dd6aa8471899c0121392c8138218cdb6c",
      "tree": {
        "sha": "95aea1e1ae76e53b391a0895dffa066df990e34d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95aea1e1ae76e53b391a0895dffa066df990e34d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c4b9b31355fe86faf45f60e228003527fcee549",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZlp7DAAoJEB5K7WKYbNJdg/8H/28MGXGIWLmyZEOzjE32MAvO\n6IV0i6XWYJdFSXIwB/nsK04/g1+Jvx8I/3EgGTYU+v2CJSjMDw4bsNAXwvuvfpy3\nV4Rj+ZbSbUVHKwrqqrpDc6VkQs0kg2Iu3wy1lYKYtIYJ4VNwS+lwzmnAeh3dRphq\nm1JQreMOpp9Zjg+2bEe986oUirGG8uM/xmN/N5D2VnycK9LBe8oDOA2+NOHL8afd\nUSmGh5jlulCm1Ji7N5Z4vqJ79tBjWDNKOktZic4fUihPq7SX76EICqGSAwr5SgxU\n/r20aeGc3/KDHWD16MXs9CWPma57xV3hVwgLf52oVdoCsqc/2VrjJH1Q1BPrQjg=\n=R7sQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 95aea1e1ae76e53b391a0895dffa066df990e34d\nparent 252ca9c5d8d781c9044b452d608a419a003e5e3e\nparent 30c246b04f1606dab17de592c98d03e5b6fd77aa\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1503043233 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503043267 +0200\n\nMerge #11076: 0.15 release-notes nits: fix redundancy, remove accidental parenthesis & fix range style\n\n30c246b Updating the release notes (minor stylistic changes) (practicalswift)\n\nPull request description:\n\n  0.15 release-notes nits:\n  * Remove accidental parenthesis\n  * Fix redundancy (\"remain\" vs. previous \"continue to remain\")\n  * Fix range style (\"from X to Y\" vs. previous \"from X-Y\")\n\nTree-SHA512: d3621b6cc781e82d0156a559f71b8190c0fb1aed9ae7a8173ac9c57387a1a03fb9b8a6e4c709adadf80bcc2c2eff113dd6aa8471899c0121392c8138218cdb6c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4b9b31355fe86faf45f60e228003527fcee549",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4b9b31355fe86faf45f60e228003527fcee549",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4b9b31355fe86faf45f60e228003527fcee549/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "252ca9c5d8d781c9044b452d608a419a003e5e3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252ca9c5d8d781c9044b452d608a419a003e5e3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/252ca9c5d8d781c9044b452d608a419a003e5e3e"
      },
      {
        "sha": "30c246b04f1606dab17de592c98d03e5b6fd77aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30c246b04f1606dab17de592c98d03e5b6fd77aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30c246b04f1606dab17de592c98d03e5b6fd77aa"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "9208ed48199c4468ed51671dcccb41881cdb19ac",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c4b9b31355fe86faf45f60e228003527fcee549/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c4b9b31355fe86faf45f60e228003527fcee549/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=1c4b9b31355fe86faf45f60e228003527fcee549",
        "patch": "@@ -124,7 +124,7 @@ Bitcoin Core now supports loading multiple, separate wallets (See [PR 8694](http\n \n Multi-wallet is enabled by using more than one `-wallet` argument when starting Bitcoin, either on the command line or in the Bitcoin config file.\n \n-**In Bitcoin-Qt, only the first wallet will be displayed and accessible for creating and signing transactions.** GUI selectable multiple wallets will be supported in a future version. However, even in 0.15 other loaded wallets will continue to remain synchronized to the node's current tip in the background. This can be useful if running a pruned node, since loading a wallet where the most recent sync is beyond the pruned height results in having to download and revalidate the whole blockchain. Continuing to synchronize all wallets in the background avoids this problem.\n+**In Bitcoin-Qt, only the first wallet will be displayed and accessible for creating and signing transactions.** GUI selectable multiple wallets will be supported in a future version. However, even in 0.15 other loaded wallets will remain synchronized to the node's current tip in the background. This can be useful if running a pruned node, since loading a wallet where the most recent sync is beyond the pruned height results in having to download and revalidate the whole blockchain. Continuing to synchronize all wallets in the background avoids this problem.\n \n Bitcoin Core 0.15.0 contains the following changes to the RPC interface and `bitcoin-cli` for multi-wallet:\n \n@@ -217,7 +217,7 @@ Low-level RPC changes\n \n - The `getmempoolancestors`, `getmempooldescendants`, `getmempooolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n \n-- The `dumpwallet` RPC now returns the full absolute path to the dumped wallet. (it\n+- The `dumpwallet` RPC now returns the full absolute path to the dumped wallet. It\n   used to return no value, even if successful (See [PR 9740](https://github.com/bitcoin/bitcoin/pull/9740)).\n \n - In the `getpeerinfo` RPC, the return object for each peer now returns an `addrbind` member, which contains the ip address and port of the connection to the peer. This is in addition to the `addrlocal` member which contains the ip address and port of the local node as reported by the peer (See [PR 10478](https://github.com/bitcoin/bitcoin/pull/10478)).\n@@ -231,7 +231,7 @@ Low-level RPC changes\n - The second argument in the `submitblock` RPC argument has been renamed from `parameters` to `dummy`. This argument never had any effect, and the renaming is simply to communicate this fact to the user (See [PR 10191](https://github.com/bitcoin/bitcoin/pull/10191))\n   (Clients should, however, use positional arguments for `submitblock` in order to be compatible with BIP 22.)\n \n-- The `verbose` argument of `getblock` has been renamed to `verbosity` and now takes an integer from 0-2. Verbose level 0 is equivalent to `verbose=false`. Verbose level 1 is equivalent to `verbose=true`. Verbose level 2 will give the full transaction details of each transaction in the output as given by `getrawtransaction`. The old behavior of using the `verbose` named argument and a boolean value is still maintained for compatibility.\n+- The `verbose` argument of `getblock` has been renamed to `verbosity` and now takes an integer from 0 to 2. Verbose level 0 is equivalent to `verbose=false`. Verbose level 1 is equivalent to `verbose=true`. Verbose level 2 will give the full transaction details of each transaction in the output as given by `getrawtransaction`. The old behavior of using the `verbose` named argument and a boolean value is still maintained for compatibility.\n \n - Error codes have been updated to be more accurate for the following error cases (See [PR 9853](https://github.com/bitcoin/bitcoin/pull/9853)):\n   - `getblock` now returns RPC_MISC_ERROR if the block can't be found on disk (for"
      }
    ]
  },
  {
    "sha": "008f64f80f30d91bcad6b4133ce98899c1da95aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDhmNjRmODBmMzBkOTFiY2FkNmI0MTMzY2U5ODg5OWMxZGE5NWFh",
    "commit": {
      "author": {
        "name": "Derek Miller",
        "email": "Derek701@users.noreply.github.com",
        "date": "2017-08-18T17:32:02Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-08-18T17:32:02Z"
      },
      "message": "Update release-notes.md\n\nEric Shaw Jr -> Eric Shaw (from GitHub profile)\r\ngubatron -> Angel Leon (from GitHub profile)\r\njonnynewbs -> John Newbery (duplicate)\r\nkeystrike -> James Evans (duplicate)\r\nKibbled Jive Elk Zoo -> KibbledJiveElkZoo (duplicate)\r\nkirit93 -> Kirit Thadaka (from GitHub profile)\r\nNicolasDorier -> Nicolas Dorier (duplicate)",
      "tree": {
        "sha": "c274fa4722b27e3c638becddfd133445fcbcd735",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c274fa4722b27e3c638becddfd133445fcbcd735"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/008f64f80f30d91bcad6b4133ce98899c1da95aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/008f64f80f30d91bcad6b4133ce98899c1da95aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/008f64f80f30d91bcad6b4133ce98899c1da95aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/008f64f80f30d91bcad6b4133ce98899c1da95aa/comments",
    "author": {
      "login": "Derek701",
      "id": 8400096,
      "node_id": "MDQ6VXNlcjg0MDAwOTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8400096?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Derek701",
      "html_url": "https://github.com/Derek701",
      "followers_url": "https://api.github.com/users/Derek701/followers",
      "following_url": "https://api.github.com/users/Derek701/following{/other_user}",
      "gists_url": "https://api.github.com/users/Derek701/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Derek701/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Derek701/subscriptions",
      "organizations_url": "https://api.github.com/users/Derek701/orgs",
      "repos_url": "https://api.github.com/users/Derek701/repos",
      "events_url": "https://api.github.com/users/Derek701/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Derek701/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c4b9b31355fe86faf45f60e228003527fcee549",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4b9b31355fe86faf45f60e228003527fcee549",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4b9b31355fe86faf45f60e228003527fcee549"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 5,
      "deletions": 9
    },
    "files": [
      {
        "sha": "77b343a94ca0ba4cafa393dae503db1ee426ca79",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/008f64f80f30d91bcad6b4133ce98899c1da95aa/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/008f64f80f30d91bcad6b4133ce98899c1da95aa/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=008f64f80f30d91bcad6b4133ce98899c1da95aa",
        "patch": "@@ -8,7 +8,7 @@ Bitcoin Core version *0.15.0* is now available from:\n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n \n-Please report bugs using the issue tracker at github:\n+Please report bugs using the issue tracker at GitHub:\n \n   <https://github.com/bitcoin/bitcoin/issues>\n \n@@ -292,6 +292,7 @@ Thanks to everyone who directly contributed to this release:\n - Allan Doensen\n - Andres G. Aragoneses\n - Andrew Chow\n+- Angel Leon\n - Awemany\n - Bob McElrath\n - Brian McMichael\n@@ -306,15 +307,14 @@ Thanks to everyone who directly contributed to this release:\n - Daniel Cousens\n - darksh1ne\n - Dimitris Tsapakidis\n-- Eric Shaw Jr\n+- Eric Shaw\n - Evan Klitzke\n - fanquake\n - Felix Weis\n - flack\n - Greg Griffith\n - Gregory Maxwell\n - Gregory Sanders\n-- gubatron\n - Ian Kelling\n - Jack Grigg\n - James Evans\n@@ -326,15 +326,12 @@ Thanks to everyone who directly contributed to this release:\n - Johnathan Corgan\n - John Newbery\n - Jonas Schnelli\n-- jonnynewbs\n - Jorge Tim\u00f3n\n - Kalle Alm\n - Karl-Johan Alm\n-- Kewde\n-- keystrike\n+- kewde\n - KibbledJiveElkZoo\n-- Kibbled Jive Elk Zoo\n-- kirit93\n+- Kirit Thadaka\n - kobake\n - Kyle Honeycutt\n - Lawrence Nahum\n@@ -354,7 +351,6 @@ Thanks to everyone who directly contributed to this release:\n - Mikerah\n - Mike van Rossum\n - Mitchell Cash\n-- NicolasDorier\n - Nicolas Dorier\n - Patrick Strateman\n - Pavel Jan\u00edk"
      }
    ]
  },
  {
    "sha": "8f0121c957a02bda283641d5de25c8b07dcadc10",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjAxMjFjOTU3YTAyYmRhMjgzNjQxZDVkZTI1YzhiMDdkY2FkYzEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T06:38:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T06:39:37Z"
      },
      "message": "Merge #11090: Update contributor names in release-notes.md\n\n008f64f Update release-notes.md (Derek Miller)\n\nPull request description:\n\n  Eric Shaw Jr -> Eric Shaw (from GitHub profile)\n  gubatron -> Angel Leon (from GitHub profile)\n  jonnynewbs -> John Newbery (duplicate)\n  keystrike -> James Evans (duplicate)\n  Kibbled Jive Elk Zoo -> KibbledJiveElkZoo (duplicate)\n  kirit93 -> Kirit Thadaka (from GitHub profile)\n  NicolasDorier -> Nicolas Dorier (duplicate)\n\nTree-SHA512: c952e72cc82fd780532488fbd10b35918c9ac686cb6352b752a04ce5694bbdb7c2d3402b3187cdf4e5325e42e98cfacf2a95b565792cfdf7efeef1d369669e36",
      "tree": {
        "sha": "c274fa4722b27e3c638becddfd133445fcbcd735",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c274fa4722b27e3c638becddfd133445fcbcd735"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f0121c957a02bda283641d5de25c8b07dcadc10",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZmoApAAoJEB5K7WKYbNJd1IcH/iQrYFNtucSpBuP70m+FUgqe\n5DWx+ltjCUzVlUmbQbnHzzNDD9Z7JWpLmmHi4mV6Ruh7C9E/DA6RqK3RemL2lYxQ\nIThi/56WShire40IwaIvUIEZkm/b80h+tRUwb3orNeQdQs2D+0LmYGiUwsH80qkn\noAFOg+lJqQujBWjnLIRWYLRs/zjL6PzcgDAPrc/wkGazSNrTdyrPBpIfR2zXBjjd\n7rqgqknLQJcr6C6auln/6seC4ACymjQNnVM92Ds5oBroQpRa1/V1cNyOx1hu3gTt\nG/S8Xqe7AXIfF5Ta/gCahkw2AQNq4Ug5qJdQ4+il1CF3kPPxczNIRaHINMcjyzc=\n=1WsC\n-----END PGP SIGNATURE-----",
        "payload": "tree c274fa4722b27e3c638becddfd133445fcbcd735\nparent 1c4b9b31355fe86faf45f60e228003527fcee549\nparent 008f64f80f30d91bcad6b4133ce98899c1da95aa\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1503297499 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503297577 +0200\n\nMerge #11090: Update contributor names in release-notes.md\n\n008f64f Update release-notes.md (Derek Miller)\n\nPull request description:\n\n  Eric Shaw Jr -> Eric Shaw (from GitHub profile)\n  gubatron -> Angel Leon (from GitHub profile)\n  jonnynewbs -> John Newbery (duplicate)\n  keystrike -> James Evans (duplicate)\n  Kibbled Jive Elk Zoo -> KibbledJiveElkZoo (duplicate)\n  kirit93 -> Kirit Thadaka (from GitHub profile)\n  NicolasDorier -> Nicolas Dorier (duplicate)\n\nTree-SHA512: c952e72cc82fd780532488fbd10b35918c9ac686cb6352b752a04ce5694bbdb7c2d3402b3187cdf4e5325e42e98cfacf2a95b565792cfdf7efeef1d369669e36\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f0121c957a02bda283641d5de25c8b07dcadc10",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f0121c957a02bda283641d5de25c8b07dcadc10",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f0121c957a02bda283641d5de25c8b07dcadc10/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c4b9b31355fe86faf45f60e228003527fcee549",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c4b9b31355fe86faf45f60e228003527fcee549",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c4b9b31355fe86faf45f60e228003527fcee549"
      },
      {
        "sha": "008f64f80f30d91bcad6b4133ce98899c1da95aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/008f64f80f30d91bcad6b4133ce98899c1da95aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/008f64f80f30d91bcad6b4133ce98899c1da95aa"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 5,
      "deletions": 9
    },
    "files": [
      {
        "sha": "77b343a94ca0ba4cafa393dae503db1ee426ca79",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f0121c957a02bda283641d5de25c8b07dcadc10/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f0121c957a02bda283641d5de25c8b07dcadc10/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=8f0121c957a02bda283641d5de25c8b07dcadc10",
        "patch": "@@ -8,7 +8,7 @@ Bitcoin Core version *0.15.0* is now available from:\n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n \n-Please report bugs using the issue tracker at github:\n+Please report bugs using the issue tracker at GitHub:\n \n   <https://github.com/bitcoin/bitcoin/issues>\n \n@@ -292,6 +292,7 @@ Thanks to everyone who directly contributed to this release:\n - Allan Doensen\n - Andres G. Aragoneses\n - Andrew Chow\n+- Angel Leon\n - Awemany\n - Bob McElrath\n - Brian McMichael\n@@ -306,15 +307,14 @@ Thanks to everyone who directly contributed to this release:\n - Daniel Cousens\n - darksh1ne\n - Dimitris Tsapakidis\n-- Eric Shaw Jr\n+- Eric Shaw\n - Evan Klitzke\n - fanquake\n - Felix Weis\n - flack\n - Greg Griffith\n - Gregory Maxwell\n - Gregory Sanders\n-- gubatron\n - Ian Kelling\n - Jack Grigg\n - James Evans\n@@ -326,15 +326,12 @@ Thanks to everyone who directly contributed to this release:\n - Johnathan Corgan\n - John Newbery\n - Jonas Schnelli\n-- jonnynewbs\n - Jorge Tim\u00f3n\n - Kalle Alm\n - Karl-Johan Alm\n-- Kewde\n-- keystrike\n+- kewde\n - KibbledJiveElkZoo\n-- Kibbled Jive Elk Zoo\n-- kirit93\n+- Kirit Thadaka\n - kobake\n - Kyle Honeycutt\n - Lawrence Nahum\n@@ -354,7 +351,6 @@ Thanks to everyone who directly contributed to this release:\n - Mikerah\n - Mike van Rossum\n - Mitchell Cash\n-- NicolasDorier\n - Nicolas Dorier\n - Patrick Strateman\n - Pavel Jan\u00edk"
      }
    ]
  },
  {
    "sha": "cbdd338a75d53061b97daeb8e6f04d22249117cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYmRkMzM4YTc1ZDUzMDYxYjk3ZGFlYjhlNmYwNGQyMjI0OTExN2Nj",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-08-15T17:27:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T07:48:59Z"
      },
      "message": "disable jni in builds\n\nGithub-Pull: #11056\nRebased-From: 844b73e486ca146f3f9f3060e878814752c25fd5\nTree-SHA512: f735853c3d9abbde5032cc55201b0ddc29679e681ba7d3822cbcbeee17c7185ee984b235411224cfb8ff12550de88a0f1367d55ad24bf52c5c03061330849eb2",
      "tree": {
        "sha": "b1678921694c1dc97d6f4b51bfeda3c2ccf730ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1678921694c1dc97d6f4b51bfeda3c2ccf730ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cbdd338a75d53061b97daeb8e6f04d22249117cc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZmpBrAAoJEB5K7WKYbNJdH4oIAKpOvlYuY4nfDu5/c77SBQJj\nOtXmCVZzp51XqGrhZimc7quQpS+cZ/eXmoj5QG2zyZM8Ac7ukH+N2Wd2h+bA4feH\n1bKU+N/lLC9kDugAxaRDe9n6Th5IAPXN05+Xq91HCfWp9IuyHLS7PTikJDJqyJZT\ndQAuDYDdIR0TaTDrj6LdVTkPC4N1dmUN5H4NiXUGJzmYA6H1t8zVZKeOeXTtP6U0\ny23Ev01TziAY5urItuasaVMtq18TpSuOHxpHv9e0hMHxPEV0t19GEKuQjb9e6p4c\nfjVrq8amR5Zf5b3vzD7pSHSH7dJarHMgv7qvtJwgwhR0QRrOIgKtOGMS/yZOXec=\n=x3VD\n-----END PGP SIGNATURE-----",
        "payload": "tree b1678921694c1dc97d6f4b51bfeda3c2ccf730ed\nparent 8f0121c957a02bda283641d5de25c8b07dcadc10\nauthor Gregory Sanders <gsanders87@gmail.com> 1502818040 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503301739 +0200\n\ndisable jni in builds\n\nGithub-Pull: #11056\nRebased-From: 844b73e486ca146f3f9f3060e878814752c25fd5\nTree-SHA512: f735853c3d9abbde5032cc55201b0ddc29679e681ba7d3822cbcbeee17c7185ee984b235411224cfb8ff12550de88a0f1367d55ad24bf52c5c03061330849eb2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbdd338a75d53061b97daeb8e6f04d22249117cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cbdd338a75d53061b97daeb8e6f04d22249117cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbdd338a75d53061b97daeb8e6f04d22249117cc/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f0121c957a02bda283641d5de25c8b07dcadc10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f0121c957a02bda283641d5de25c8b07dcadc10",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f0121c957a02bda283641d5de25c8b07dcadc10"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "70033ac0fc7af336c6d744d2018664373e34ed62",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cbdd338a75d53061b97daeb8e6f04d22249117cc/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cbdd338a75d53061b97daeb8e6f04d22249117cc/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=cbdd338a75d53061b97daeb8e6f04d22249117cc",
        "patch": "@@ -1261,7 +1261,7 @@ if test x$need_bundled_univalue = xyes; then\n   AC_CONFIG_SUBDIRS([src/univalue])\n fi\n \n-ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --with-bignum=no --enable-module-recovery\"\n+ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --with-bignum=no --enable-module-recovery --disable-jni\"\n AC_CONFIG_SUBDIRS([src/secp256k1])\n \n AC_OUTPUT"
      }
    ]
  },
  {
    "sha": "6c2b0085fb4980442a732cb879902d8215ca49d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzJiMDA4NWZiNDk4MDQ0MmE3MzJjYjg3OTkwMmQ4MjE1Y2E0OWQ1",
    "commit": {
      "author": {
        "name": "Jonas Nick",
        "email": "jonasd.nick@gmail.com",
        "date": "2017-08-18T02:35:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T07:49:04Z"
      },
      "message": "Fix combinerawtransaction RPC help result section\n\nGithub-Pull: #11083\nRebased-From: f9ca0fe44ec673695e601045630f151a806e000d\nTree-SHA512: ef94958d7de11e091db456e253fa4a188b0b0e713149bd568aa2de11a8a3c1585b34bbfb78aaac12f969533f05602ed8b1cd16275429d86a80c36bb594ce6526",
      "tree": {
        "sha": "7dd0c052eec829eeb1853dbfb6eb7b38f933fbaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dd0c052eec829eeb1853dbfb6eb7b38f933fbaa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c2b0085fb4980442a732cb879902d8215ca49d5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZmpBwAAoJEB5K7WKYbNJdztkH/0yek9JMSssh0cQm5TrbJYZJ\nEIAGiefkYw4d0KJu2XYmjlNgBBVB0v3mGpu+lRju0cQWIj7W6bVgMjg/3m9DQPcf\n66oEtIt6NNtSFW/xKdtAE0/4zqUlJ9VHA1YsSYSTeP9Qt20FHlrcNHNnAhYDoJhL\nGSZF0RIgNOItOrQ/9VDiz0T4Bsy6TL6lX/StB9alaWFhx8tSIDeMY/2qy2UmsrmK\nhh+d+qr0o1sQBaIOCnX8C3tvpKxoNCe/vtsUZ/q82xHho6qR1mAQE78cYTqe3xIm\nUhUIYwGihZ3TDNSTlZBfkWFx9ZOm48lVC7K+jHuOUy7mOX70oXMcrFc7iL2ULAg=\n=oewY\n-----END PGP SIGNATURE-----",
        "payload": "tree 7dd0c052eec829eeb1853dbfb6eb7b38f933fbaa\nparent cbdd338a75d53061b97daeb8e6f04d22249117cc\nauthor Jonas Nick <jonasd.nick@gmail.com> 1503023730 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503301744 +0200\n\nFix combinerawtransaction RPC help result section\n\nGithub-Pull: #11083\nRebased-From: f9ca0fe44ec673695e601045630f151a806e000d\nTree-SHA512: ef94958d7de11e091db456e253fa4a188b0b0e713149bd568aa2de11a8a3c1585b34bbfb78aaac12f969533f05602ed8b1cd16275429d86a80c36bb594ce6526\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c2b0085fb4980442a732cb879902d8215ca49d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c2b0085fb4980442a732cb879902d8215ca49d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c2b0085fb4980442a732cb879902d8215ca49d5/comments",
    "author": {
      "login": "jonasnick",
      "id": 2582071,
      "node_id": "MDQ6VXNlcjI1ODIwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2582071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasnick",
      "html_url": "https://github.com/jonasnick",
      "followers_url": "https://api.github.com/users/jonasnick/followers",
      "following_url": "https://api.github.com/users/jonasnick/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasnick/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasnick/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasnick/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasnick/orgs",
      "repos_url": "https://api.github.com/users/jonasnick/repos",
      "events_url": "https://api.github.com/users/jonasnick/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasnick/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbdd338a75d53061b97daeb8e6f04d22249117cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbdd338a75d53061b97daeb8e6f04d22249117cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbdd338a75d53061b97daeb8e6f04d22249117cc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0ca1aa66e382926ab584d5e5836062d15ec47305",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c2b0085fb4980442a732cb879902d8215ca49d5/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c2b0085fb4980442a732cb879902d8215ca49d5/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=6c2b0085fb4980442a732cb879902d8215ca49d5",
        "patch": "@@ -572,7 +572,7 @@ UniValue combinerawtransaction(const JSONRPCRequest& request)\n             \"    ]\\n\"\n \n             \"\\nResult:\\n\"\n-            \"\\\"hex\\\" : \\\"value\\\",           (string) The hex-encoded raw transaction with signature(s)\\n\"\n+            \"\\\"hex\\\"            (string) The hex-encoded raw transaction with signature(s)\\n\"\n \n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"combinerawtransaction\", \"[\\\"myhex1\\\", \\\"myhex2\\\", \\\"myhex3\\\"]\")"
      }
    ]
  },
  {
    "sha": "9fe1f6bd898ab1a69fbce2cb9dd93fcbb60b88fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmUxZjZiZDg5OGFiMWE2OWZiY2UyY2I5ZGQ5M2ZjYmI2MGI4OGZk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-08-17T19:54:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T07:49:05Z"
      },
      "message": "Add length check for CExtKey deserialization\n\nGithub-Pull: #11081\nRebased-From: 07685d1bc1b0b815c00a68a5b7b335ffa0d4d90d\nTree-SHA512: 7f6b9ca6714d059d500531eb842c1c25edfa04ecba0ea1d9a28010fced657c066cea67d2016bbaa9b96c431a05ca9c0dcf2ba301898ecf96a65a4e01aac7fae9",
      "tree": {
        "sha": "af96cef135e35ed0adcc9b87d453254976ca1e19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af96cef135e35ed0adcc9b87d453254976ca1e19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fe1f6bd898ab1a69fbce2cb9dd93fcbb60b88fd",
      "comment_count": 1,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZmpBxAAoJEB5K7WKYbNJdwRUH/3b/Bt/Zjzl1QKwahPX3FcPy\npjQNZRdCgeDuRzErtCMX4116kVifH3GpTnZyLa7oTs9PkIN9bR7ctnn4VX8Qgdru\nAZ22CsFnYuLq4sdxCt19mfWQpUyNSNZUNbvjNOAkY14zeYAWy/dGFu11SpNNIWDo\nvfTyZVFGzfib56lbaA+ZLo8+3HTWfJKcGDG6rn6Qn81iGQLMBtRywg1iYJQi9QhC\nhozBCGMZhqJG9YOAByDntJmlDRicfKp3HfCnrB5mPbw+C+KapgJfu9CYaTmoNbmt\naV/VqR95b87zhzpIBn6fdgnCWBrybWGpM7k6ddUBksXBQaK+fISS45Xum8gfoeE=\n=5I0M\n-----END PGP SIGNATURE-----",
        "payload": "tree af96cef135e35ed0adcc9b87d453254976ca1e19\nparent 6c2b0085fb4980442a732cb879902d8215ca49d5\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1502999663 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503301745 +0200\n\nAdd length check for CExtKey deserialization\n\nGithub-Pull: #11081\nRebased-From: 07685d1bc1b0b815c00a68a5b7b335ffa0d4d90d\nTree-SHA512: 7f6b9ca6714d059d500531eb842c1c25edfa04ecba0ea1d9a28010fced657c066cea67d2016bbaa9b96c431a05ca9c0dcf2ba301898ecf96a65a4e01aac7fae9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fe1f6bd898ab1a69fbce2cb9dd93fcbb60b88fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fe1f6bd898ab1a69fbce2cb9dd93fcbb60b88fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fe1f6bd898ab1a69fbce2cb9dd93fcbb60b88fd/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6c2b0085fb4980442a732cb879902d8215ca49d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c2b0085fb4980442a732cb879902d8215ca49d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c2b0085fb4980442a732cb879902d8215ca49d5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "151e63531b131ade8ec5a65a8b0b19653c4401c9",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fe1f6bd898ab1a69fbce2cb9dd93fcbb60b88fd/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fe1f6bd898ab1a69fbce2cb9dd93fcbb60b88fd/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=9fe1f6bd898ab1a69fbce2cb9dd93fcbb60b88fd",
        "patch": "@@ -172,6 +172,8 @@ struct CExtKey {\n     {\n         unsigned int len = ::ReadCompactSize(s);\n         unsigned char code[BIP32_EXTKEY_SIZE];\n+        if (len != BIP32_EXTKEY_SIZE)\n+            throw std::runtime_error(\"Invalid extended key size\\n\");\n         s.read((char *)&code[0], len);\n         Decode(code);\n     }"
      }
    ]
  },
  {
    "sha": "2b59cfb1f719b4cd64be852512ee6a60f5dc7ea1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjU5Y2ZiMWY3MTliNGNkNjRiZTg1MjUxMmVlNmE2MGY1ZGM3ZWEx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-17T17:20:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T07:49:08Z"
      },
      "message": "doc: Update build-openbsd for 6.1\n\n- Bump \"updated for\"\n- Fix link to boost (haenet mirror is broken)\n- Upgrade boost version to 1.64\n\nGithub-Pull: #11080\nRebased-From: 5be6e9b4f9991a5f8ff74aa8aaa4962cb45728b6\nTree-SHA512: 72877bf32e4f38fb530946c065c23edd683a0da379c33fa3eee4fbeb51e2c97171f5d33ebe1e77f25c3e14779d94e8198cc8fbb6e1055a1024638458ef7cc032",
      "tree": {
        "sha": "12853d06e03ca80e98c676eb62854c6fc18eaae8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12853d06e03ca80e98c676eb62854c6fc18eaae8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b59cfb1f719b4cd64be852512ee6a60f5dc7ea1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZmpB0AAoJEB5K7WKYbNJdrsIIAJuSjN6271aa41XwIev7FCEP\n4H1khDXLdCroCgCl2ANRid1QBckX/PSufmC7hopF1/BpiEHJYpyUii+troVv4bw0\nBMwxVHESUHT8XaD3gV9HBRDA9UzLaFwFzsKL27Q86u9N+pH0UjxF1GCSRPtfaJjQ\nS9vatHKeyebGMhRertXgEm/U/ePYudd5vaN5Imy7bFqsmFVcFoy9WD8qmDjAYk8j\n70l4Yi+CAyw1GYa56Ya6Y3t3OA0Fpze08jgUt1mzfWEvsce42PpeGb84g2PkXGj+\ngjJXVad2GRNNXG+fJckonuNEHrEzYBWHufPdrNQuTiezPB3nrVsSlt8rC7ZJy+k=\n=aILc\n-----END PGP SIGNATURE-----",
        "payload": "tree 12853d06e03ca80e98c676eb62854c6fc18eaae8\nparent 9fe1f6bd898ab1a69fbce2cb9dd93fcbb60b88fd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1502990401 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503301748 +0200\n\ndoc: Update build-openbsd for 6.1\n\n- Bump \"updated for\"\n- Fix link to boost (haenet mirror is broken)\n- Upgrade boost version to 1.64\n\nGithub-Pull: #11080\nRebased-From: 5be6e9b4f9991a5f8ff74aa8aaa4962cb45728b6\nTree-SHA512: 72877bf32e4f38fb530946c065c23edd683a0da379c33fa3eee4fbeb51e2c97171f5d33ebe1e77f25c3e14779d94e8198cc8fbb6e1055a1024638458ef7cc032\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b59cfb1f719b4cd64be852512ee6a60f5dc7ea1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b59cfb1f719b4cd64be852512ee6a60f5dc7ea1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b59cfb1f719b4cd64be852512ee6a60f5dc7ea1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fe1f6bd898ab1a69fbce2cb9dd93fcbb60b88fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fe1f6bd898ab1a69fbce2cb9dd93fcbb60b88fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fe1f6bd898ab1a69fbce2cb9dd93fcbb60b88fd"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "cd800464b4274404327aeb7b680e836fbfc0cc7b",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b59cfb1f719b4cd64be852512ee6a60f5dc7ea1/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b59cfb1f719b4cd64be852512ee6a60f5dc7ea1/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=2b59cfb1f719b4cd64be852512ee6a60f5dc7ea1",
        "patch": "@@ -1,6 +1,6 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 6.0)\n+(updated for OpenBSD 6.1)\n \n This guide describes how to build bitcoind and command-line utilities on OpenBSD.\n \n@@ -48,13 +48,13 @@ BOOST_PREFIX=\"${BITCOIN_ROOT}/boost\"\n mkdir -p $BOOST_PREFIX\n \n # Fetch the source and verify that it is not tampered with\n-curl -o boost_1_61_0.tar.bz2 http://heanet.dl.sourceforge.net/project/boost/boost/1.61.0/boost_1_61_0.tar.bz2\n-echo 'a547bd06c2fd9a71ba1d169d9cf0339da7ebf4753849a8f7d6fdb8feee99b640  boost_1_61_0.tar.bz2' | sha256 -c\n-# MUST output: (SHA256) boost_1_61_0.tar.bz2: OK\n-tar -xjf boost_1_61_0.tar.bz2\n+curl -o boost_1_64_0.tar.bz2 https://netcologne.dl.sourceforge.net/project/boost/boost/1.64.0/boost_1_64_0.tar.bz2\n+echo '7bcc5caace97baa948931d712ea5f37038dbb1c5d89b43ad4def4ed7cb683332 boost_1_64_0.tar.bz2' | sha256 -c\n+# MUST output: (SHA256) boost_1_64_0.tar.bz2: OK\n+tar -xjf boost_1_64_0.tar.bz2\n \n-# Boost 1.61 needs one small patch for OpenBSD\n-cd boost_1_61_0\n+# Boost 1.64 needs one small patch for OpenBSD\n+cd boost_1_64_0\n # Also here: https://gist.githubusercontent.com/laanwj/bf359281dc319b8ff2e1/raw/92250de8404b97bb99d72ab898f4a8cb35ae1ea3/patch-boost_test_impl_execution_monitor_ipp.patch\n patch -p0 < /usr/ports/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp\n "
      }
    ]
  },
  {
    "sha": "4ef8374559acfdefb2f81c4a5ab2afe553688a27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWY4Mzc0NTU5YWNmZGVmYjJmODFjNGE1YWIyYWZlNTUzNjg4YTI3",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-14T17:36:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T07:49:10Z"
      },
      "message": "[wallet] Remove keypool_topup_cleanups\n\nUnused function. Mostly reverts c25d90f125d69e33688288eff439eb7be75012e9\n\nc25d90f... was merged as part of PR 11022 but is not required.\n\nGithub-Pull: #11044\nRebased-From: 1221f60c94971c0f66abe5fdf086087a173bb0ac\nTree-SHA512: da229b128bee5f124c009a1a2adfb4fa879366c81789824c426c9ce5209c835888a7e6cfeb1724551320a98cd08406a605372f84487a0d289cd6e02f9ac3ea21",
      "tree": {
        "sha": "8500af144f1b30b350cbd97857693cf653d6b5d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8500af144f1b30b350cbd97857693cf653d6b5d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ef8374559acfdefb2f81c4a5ab2afe553688a27",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZmpB2AAoJEB5K7WKYbNJd678H/RnTZXUA3OBvtATargdhYGba\nmdIv1+2WRVtbbTLdfM4mOKWlT4w3WFIgzO/6CcN0+M+Z+qzuJTqUB16XvyE/E44K\nuKtDi/AvSRc3SefKb/J5krLMNdX7hUnQiJB47tfjgqurhKniW5ZU7Cu9yCeWAAtx\nYpbyIzgA08uc5YoVyYNh15OlKUq2JyUWZQTg59Owb2kLYktKH1wPtnkyoKZmaGci\nYyhhzA+PM5wmfsyDG4vZq4Mh9x+y3krsteCbL3OOcjWhiiSBmwERCf4a+WD6fUGj\neXnHkp9XpdQRM4RxGGFsdOopBWH8qFptBo8OjF7HBkLQ8pW8az6iyV3exk1qu6c=\n=6V0X\n-----END PGP SIGNATURE-----",
        "payload": "tree 8500af144f1b30b350cbd97857693cf653d6b5d2\nparent 2b59cfb1f719b4cd64be852512ee6a60f5dc7ea1\nauthor John Newbery <john@johnnewbery.com> 1502732185 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503301750 +0200\n\n[wallet] Remove keypool_topup_cleanups\n\nUnused function. Mostly reverts c25d90f125d69e33688288eff439eb7be75012e9\n\nc25d90f... was merged as part of PR 11022 but is not required.\n\nGithub-Pull: #11044\nRebased-From: 1221f60c94971c0f66abe5fdf086087a173bb0ac\nTree-SHA512: da229b128bee5f124c009a1a2adfb4fa879366c81789824c426c9ce5209c835888a7e6cfeb1724551320a98cd08406a605372f84487a0d289cd6e02f9ac3ea21\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ef8374559acfdefb2f81c4a5ab2afe553688a27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ef8374559acfdefb2f81c4a5ab2afe553688a27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ef8374559acfdefb2f81c4a5ab2afe553688a27/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b59cfb1f719b4cd64be852512ee6a60f5dc7ea1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b59cfb1f719b4cd64be852512ee6a60f5dc7ea1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b59cfb1f719b4cd64be852512ee6a60f5dc7ea1"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 0,
      "deletions": 7
    },
    "files": [
      {
        "sha": "aa0713ea0363069f51381bc5fb8fed85c3306320",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ef8374559acfdefb2f81c4a5ab2afe553688a27/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ef8374559acfdefb2f81c4a5ab2afe553688a27/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4ef8374559acfdefb2f81c4a5ab2afe553688a27",
        "patch": "@@ -3663,11 +3663,6 @@ void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)\n     }\n }\n \n-bool CWallet::HasUnusedKeys(int min_keys) const\n-{\n-    return setExternalKeyPool.size() >= min_keys && (setInternalKeyPool.size() >= min_keys || !CanSupportFeature(FEATURE_HD_SPLIT));\n-}\n-\n void CWallet::GetScriptForMining(std::shared_ptr<CReserveScript> &script)\n {\n     std::shared_ptr<CReserveKey> rKey = std::make_shared<CReserveKey>(this);"
      },
      {
        "sha": "296bb73219eaa5988dd23ad4cbdd1c3690a58377",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ef8374559acfdefb2f81c4a5ab2afe553688a27/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ef8374559acfdefb2f81c4a5ab2afe553688a27/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=4ef8374559acfdefb2f81c4a5ab2afe553688a27",
        "patch": "@@ -984,8 +984,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     void MarkReserveKeysAsUsed(int64_t keypool_id);\n     const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n-    /** Does the wallet have at least min_keys in the keypool? */\n-    bool HasUnusedKeys(int min_keys) const;\n \n     std::set< std::set<CTxDestination> > GetAddressGroupings();\n     std::map<CTxDestination, CAmount> GetAddressBalances();"
      }
    ]
  },
  {
    "sha": "6ab120cc6ca659bc80e80e09a433f3f39637f941",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWIxMjBjYzZjYTY1OWJjODBlODBlMDlhNDMzZjNmMzk2MzdmOTQx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-14T17:38:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T07:49:12Z"
      },
      "message": "[wallet] Add logging to MarkReserveKeysAsUsed\n\nGithub-Pull: #11044\nRebased-From: 67ceff4039ae038ae16f06128f868a2e8395b59a\nTree-SHA512: 850c5b1010c84e164edf24a83ae36e46309b2eb7a67854bad509265ed590ba67d5f743a8416590da6ecca85fe4bda7f20e8c3152e422638eb7898db11a416af7",
      "tree": {
        "sha": "d28d73c5f84d4e95710c7071e03db222b6843469",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d28d73c5f84d4e95710c7071e03db222b6843469"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ab120cc6ca659bc80e80e09a433f3f39637f941",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZmpB4AAoJEB5K7WKYbNJd/bYH/Ar3LOwGsbJJkVclSDNGlmXh\nwWA4IKrxFi5ajUCLENp4Rk1crs8SRAaiKn+AS7b6EUrQ1oNymq0lgyofNAt3V+GT\nLIXcerzn0/BUXe2f5mqEsZC6/4gjUPx4CFhR5cTtyhAQ1OTbMcAkwnvAqz/4jpMj\nbj2wlyQkxvFlBewPPz0hPYSqpAyROvdkCarBh5aFJ0RwYtQ+K/DL7YmM1aTo9sZk\nDEbrDnk7/lup93k7TXxWZNltQJP8W89pI40NpSTGjMUsFGuuwzSAVyB0IfVgAkjf\nJailRkFG7xbvrEq235SIyPHcQvziHLpkgCOKKZFP4X9KfB8BAph0ao5mXeVVRVw=\n=HVQ2\n-----END PGP SIGNATURE-----",
        "payload": "tree d28d73c5f84d4e95710c7071e03db222b6843469\nparent 4ef8374559acfdefb2f81c4a5ab2afe553688a27\nauthor John Newbery <john@johnnewbery.com> 1502732301 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503301752 +0200\n\n[wallet] Add logging to MarkReserveKeysAsUsed\n\nGithub-Pull: #11044\nRebased-From: 67ceff4039ae038ae16f06128f868a2e8395b59a\nTree-SHA512: 850c5b1010c84e164edf24a83ae36e46309b2eb7a67854bad509265ed590ba67d5f743a8416590da6ecca85fe4bda7f20e8c3152e422638eb7898db11a416af7\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ab120cc6ca659bc80e80e09a433f3f39637f941",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ab120cc6ca659bc80e80e09a433f3f39637f941",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ab120cc6ca659bc80e80e09a433f3f39637f941/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ef8374559acfdefb2f81c4a5ab2afe553688a27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ef8374559acfdefb2f81c4a5ab2afe553688a27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ef8374559acfdefb2f81c4a5ab2afe553688a27"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "680c5ed9b37ab91f6ef7dde1d1dc252368428a9e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ab120cc6ca659bc80e80e09a433f3f39637f941/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ab120cc6ca659bc80e80e09a433f3f39637f941/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6ab120cc6ca659bc80e80e09a433f3f39637f941",
        "patch": "@@ -3659,6 +3659,7 @@ void CWallet::MarkReserveKeysAsUsed(int64_t keypool_id)\n             m_pool_key_to_index.erase(keypool.vchPubKey.GetID());\n         }\n         walletdb.ErasePool(index);\n+        LogPrintf(\"keypool index %d removed\\n\", index);\n         it = setKeyPool->erase(it);\n     }\n }"
      }
    ]
  },
  {
    "sha": "eb9c21ed793127b12b496c95c28ddb13cc8c0427",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjljMjFlZDc5MzEyN2IxMmI0OTZjOTVjMjhkZGIxM2NjOGMwNDI3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-08-10T22:58:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T07:49:14Z"
      },
      "message": "Only return hex field once in getrawtransaction\n\nThe hex is already returned in TxToUniv, no need to give it out a\nsecond independent time in getrawtransaction itself.\n\nGithub-Pull: #11027\nRebased-From: e029c6e709d251809aa04edc08f76a077a2443e7\nTree-SHA512: 4f7892431ddb9b59bcc59756890b97a20d046d1d4898f8a80c564223e1cde1c922da403cea4b8ae79d70741d1a9ff337f077043e5bb538cdc4d34fbe09301240",
      "tree": {
        "sha": "9e682f730a24fc4712a5ac0321c827c4255b342c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e682f730a24fc4712a5ac0321c827c4255b342c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb9c21ed793127b12b496c95c28ddb13cc8c0427",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZmpB6AAoJEB5K7WKYbNJdgKsH+wZsr29613WKsu3kaD2n3Z+x\n8G07q2b3xy2qjfU3SUsxHchzeAp9/WN6HQepsgh7WseCzOYQC6udh2VpJtlb34+W\n4Vr7M2WowzOUEkI+OFtL+xZo1+lV0Iw7BxDKFD1fLQwKkG+bPSNLRdBF15lvu2NP\nWs1BGxWhoeZREneU+pc+SQBC1SDNZ6La0BsqyuLNvm6tGBEuWh6AC+4x79Batnby\nuxgFqzHAjYwNi6urA4q64Rb8K9WlSMUvUg9T/frfqPC+L+7vzNfyZszdI7UcIa9h\ndHVcrdJPRSls5x9vXOVwQGbkELeIAU7Be51eY8ZyPWNwZC5RmzxiRmWOQtvafbY=\n=mqXu\n-----END PGP SIGNATURE-----",
        "payload": "tree 9e682f730a24fc4712a5ac0321c827c4255b342c\nparent 6ab120cc6ca659bc80e80e09a433f3f39637f941\nauthor Andrew Chow <achow101-github@achow101.com> 1502405905 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503301754 +0200\n\nOnly return hex field once in getrawtransaction\n\nThe hex is already returned in TxToUniv, no need to give it out a\nsecond independent time in getrawtransaction itself.\n\nGithub-Pull: #11027\nRebased-From: e029c6e709d251809aa04edc08f76a077a2443e7\nTree-SHA512: 4f7892431ddb9b59bcc59756890b97a20d046d1d4898f8a80c564223e1cde1c922da403cea4b8ae79d70741d1a9ff337f077043e5bb538cdc4d34fbe09301240\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb9c21ed793127b12b496c95c28ddb13cc8c0427",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb9c21ed793127b12b496c95c28ddb13cc8c0427",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb9c21ed793127b12b496c95c28ddb13cc8c0427/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6ab120cc6ca659bc80e80e09a433f3f39637f941",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ab120cc6ca659bc80e80e09a433f3f39637f941",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6ab120cc6ca659bc80e80e09a433f3f39637f941"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 1,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1349d6a2ed0ede342c9922e167e83c68ea8da02d",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb9c21ed793127b12b496c95c28ddb13cc8c0427/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb9c21ed793127b12b496c95c28ddb13cc8c0427/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=eb9c21ed793127b12b496c95c28ddb13cc8c0427",
        "patch": "@@ -160,13 +160,10 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n             : \"No such mempool transaction. Use -txindex to enable blockchain transaction queries\") +\n             \". Use gettransaction for wallet transactions.\");\n \n-    std::string strHex = EncodeHexTx(*tx, RPCSerializationFlags());\n-\n     if (!fVerbose)\n-        return strHex;\n+        return EncodeHexTx(*tx, RPCSerializationFlags());\n \n     UniValue result(UniValue::VOBJ);\n-    result.push_back(Pair(\"hex\", strHex));\n     TxToJSON(*tx, hashBlock, result);\n     return result;\n }"
      }
    ]
  },
  {
    "sha": "07164bbeadd928e26390789231a48bc32b1774c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzE2NGJiZWFkZDkyOGUyNjM5MDc4OTIzMWE0OGJjMzJiMTc3NGM4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-08-11T19:21:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T07:49:16Z"
      },
      "message": "Pass serialization flags and whether to include hex to TxToUniv\n\nGithub-Pull: #11027\nRebased-From: 6bbdafcdc4f9d9e3f9de72ed686c060fb4b8b465\nTree-SHA512: 8ed049a0945c4f56c518aef6d60efebda5cde09ef63d8e472b363821170d71fb4d16414b360824d7537fc7c7b5e5277bbbd092a20899446e97c188ab8df58c1b",
      "tree": {
        "sha": "4fe00ae5269856945b38bbd4c66d27c4e058f062",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4fe00ae5269856945b38bbd4c66d27c4e058f062"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07164bbeadd928e26390789231a48bc32b1774c8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZmpB8AAoJEB5K7WKYbNJd+7IH/if3CSivaGOoa0miiwFL3r+F\nYmNh3squ6KqFkIdiyLS4CYwyZT/Uw/83Fl70HDlt7M65FqSzZu4iznuslekbgysJ\nOHMY6taXjM0L0lGzesMcZwYP7JhqY6S04mU+TmTR+XNuGop9MqwZ95o1sJGP+x5F\nD9dppyb27mN1wDxNOaw9hXWkRq4klLN2xdOcYkgml5VcO/wTtoGnTxi54yYcenFA\nIz16diY1giiEYr7eH/X0J1SR5G0sjQruo4LiaNau37VLfROEdIS42g065Bme9mLC\nplrWO2qjO9thBBKLP190MhOAiuq/Q3NXIPL57bf1JU2eUrZ6UuFVL0g5BCc9fYQ=\n=IPj4\n-----END PGP SIGNATURE-----",
        "payload": "tree 4fe00ae5269856945b38bbd4c66d27c4e058f062\nparent eb9c21ed793127b12b496c95c28ddb13cc8c0427\nauthor Andrew Chow <achow101-github@achow101.com> 1502479274 -0700\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503301756 +0200\n\nPass serialization flags and whether to include hex to TxToUniv\n\nGithub-Pull: #11027\nRebased-From: 6bbdafcdc4f9d9e3f9de72ed686c060fb4b8b465\nTree-SHA512: 8ed049a0945c4f56c518aef6d60efebda5cde09ef63d8e472b363821170d71fb4d16414b360824d7537fc7c7b5e5277bbbd092a20899446e97c188ab8df58c1b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07164bbeadd928e26390789231a48bc32b1774c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07164bbeadd928e26390789231a48bc32b1774c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07164bbeadd928e26390789231a48bc32b1774c8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb9c21ed793127b12b496c95c28ddb13cc8c0427",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb9c21ed793127b12b496c95c28ddb13cc8c0427",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb9c21ed793127b12b496c95c28ddb13cc8c0427"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 8,
      "deletions": 6
    },
    "files": [
      {
        "sha": "ccc72ebb3219280396ce0d65d6ae844ae3771110",
        "filename": "src/core_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07164bbeadd928e26390789231a48bc32b1774c8/src/core_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07164bbeadd928e26390789231a48bc32b1774c8/src/core_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_io.h?ref=07164bbeadd928e26390789231a48bc32b1774c8",
        "patch": "@@ -31,6 +31,6 @@ UniValue ValueFromAmount(const CAmount& amount);\n std::string FormatScript(const CScript& script);\n std::string EncodeHexTx(const CTransaction& tx, const int serializeFlags = 0);\n void ScriptPubKeyToUniv(const CScript& scriptPubKey, UniValue& out, bool fIncludeHex);\n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry);\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex = true, int serialize_flags = 0);\n \n #endif // BITCOIN_CORE_IO_H"
      },
      {
        "sha": "1431fa0c9beed3490a32fe6ffa43c7b619ab1ab6",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07164bbeadd928e26390789231a48bc32b1774c8/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07164bbeadd928e26390789231a48bc32b1774c8/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=07164bbeadd928e26390789231a48bc32b1774c8",
        "patch": "@@ -153,7 +153,7 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n     out.pushKV(\"addresses\", a);\n }\n \n-void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n+void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry, bool include_hex, int serialize_flags)\n {\n     entry.pushKV(\"txid\", tx.GetHash().GetHex());\n     entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n@@ -207,5 +207,7 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n     if (!hashBlock.IsNull())\n         entry.pushKV(\"blockhash\", hashBlock.GetHex());\n \n-    entry.pushKV(\"hex\", EncodeHexTx(tx)); // the hex-encoded transaction. used the name \"hex\" to be consistent with the verbose output of \"getrawtransaction\".\n+    if (include_hex) {\n+        entry.pushKV(\"hex\", EncodeHexTx(tx, serialize_flags)); // the hex-encoded transaction. used the name \"hex\" to be consistent with the verbose output of \"getrawtransaction\".\n+    }\n }"
      },
      {
        "sha": "34bcdf9cccb40b4a80040cec6766d5262981a9e5",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07164bbeadd928e26390789231a48bc32b1774c8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07164bbeadd928e26390789231a48bc32b1774c8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=07164bbeadd928e26390789231a48bc32b1774c8",
        "patch": "@@ -125,7 +125,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n         if(txDetails)\n         {\n             UniValue objTx(UniValue::VOBJ);\n-            TxToUniv(*tx, uint256(), objTx);\n+            TxToUniv(*tx, uint256(), objTx, true, RPCSerializationFlags());\n             txs.push_back(objTx);\n         }\n         else"
      },
      {
        "sha": "55e4746827a1e7e9e66ac851225f0e8d045bdde7",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07164bbeadd928e26390789231a48bc32b1774c8/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07164bbeadd928e26390789231a48bc32b1774c8/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=07164bbeadd928e26390789231a48bc32b1774c8",
        "patch": "@@ -41,7 +41,7 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     // Blockchain contextual information (confirmations and blocktime) is not\n     // available to code in bitcoin-common, so we query them here and push the\n     // data into the returned UniValue.\n-    TxToUniv(tx, uint256(), entry);\n+    TxToUniv(tx, uint256(), entry, true, RPCSerializationFlags());\n \n     if (!hashBlock.IsNull()) {\n         entry.push_back(Pair(\"blockhash\", hashBlock.GetHex()));\n@@ -480,7 +480,7 @@ UniValue decoderawtransaction(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n     UniValue result(UniValue::VOBJ);\n-    TxToUniv(CTransaction(std::move(mtx)), uint256(), result);\n+    TxToUniv(CTransaction(std::move(mtx)), uint256(), result, false);\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "129b03ff62dd5e09b6c6e601218e7079c2387dd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjliMDNmZjYyZGQ1ZTA5YjZjNmU2MDEyMThlNzA3OWMyMzg3ZGQ1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-08-19T19:22:06Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T07:49:18Z"
      },
      "message": "gitian: quick hack to fix version string in releases\n\nRelease version strings were broken in Gitian by 7522. This is a minimal fix\nsuitable for 0.15.\n\nAfter this, we should fix up version handling for good so that gitian packages\nthe correct string in the release tarball, so that git is not required to get\nthe tag name.\n\nGithub-Pull: #11097\nRebased-From: 4452829b104842c547bd100714a241e9f209e1f4\nTree-SHA512: 40071b97b2207b2262aef0b4802cb231ccafbff0ed04b5945a64dceda8bdbb2ea71bf6a546e1d03533612edfdc55dedd413da967cba0b1bbd3f9139ec3572f60",
      "tree": {
        "sha": "714715928357acedd986426918566e14c9e8a8d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/714715928357acedd986426918566e14c9e8a8d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/129b03ff62dd5e09b6c6e601218e7079c2387dd5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZmpB+AAoJEB5K7WKYbNJdwTMH/2mb/YU1lh+CKp98Iex/Ppka\nuchYk/nsyFpLrPY39VLqFVWh1gxMSs+bZRFrx42rddQoyZhUON5SbiYVH4vTUyHV\niT1r80KlPcWlRIHNrd/GKC+R/g0VUjWt5+mGDbYZK9nmsMzotFJjD5AfGQw4f0Oz\n8nYpf/zYFxKLKVgidQxxCL2Sn9fDQlJtB2P8rl6MeI4d+iwyEEv8pxdnGt82g0kN\nR2cHhuglFliv9QqJy8mPQ7WNmoYG7KElQk37DsP9E73mSY3zZ69371xZhZAvTfjb\n5YepoQeLOzPWV7QpShJa1JB14rnTFuiiEr5eea7bYXSFiVLrlpUsNif8q+TRlh0=\n=80Op\n-----END PGP SIGNATURE-----",
        "payload": "tree 714715928357acedd986426918566e14c9e8a8d1\nparent 07164bbeadd928e26390789231a48bc32b1774c8\nauthor Cory Fields <cory-nospam-@coryfields.com> 1503170526 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503301758 +0200\n\ngitian: quick hack to fix version string in releases\n\nRelease version strings were broken in Gitian by 7522. This is a minimal fix\nsuitable for 0.15.\n\nAfter this, we should fix up version handling for good so that gitian packages\nthe correct string in the release tarball, so that git is not required to get\nthe tag name.\n\nGithub-Pull: #11097\nRebased-From: 4452829b104842c547bd100714a241e9f209e1f4\nTree-SHA512: 40071b97b2207b2262aef0b4802cb231ccafbff0ed04b5945a64dceda8bdbb2ea71bf6a546e1d03533612edfdc55dedd413da967cba0b1bbd3f9139ec3572f60\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/129b03ff62dd5e09b6c6e601218e7079c2387dd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/129b03ff62dd5e09b6c6e601218e7079c2387dd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/129b03ff62dd5e09b6c6e601218e7079c2387dd5/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07164bbeadd928e26390789231a48bc32b1774c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07164bbeadd928e26390789231a48bc32b1774c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07164bbeadd928e26390789231a48bc32b1774c8"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 24,
      "deletions": 3
    },
    "files": [
      {
        "sha": "82f4c7e0a82636784ab9f39797bbbe6ca77243dd",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/129b03ff62dd5e09b6c6e601218e7079c2387dd5/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/129b03ff62dd5e09b6c6e601218e7079c2387dd5/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=129b03ff62dd5e09b6c6e601218e7079c2387dd5",
        "patch": "@@ -132,7 +132,6 @@ script: |\n   export PATH=${WRAP_DIR}:${PATH}\n \n   # Create the release tarball using (arbitrarily) the first host\n-  export GIT_DIR=\"$PWD/.git\"\n   ./autogen.sh\n   CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n@@ -145,6 +144,9 @@ script: |\n   find bitcoin-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n   popd\n \n+  # Workaround for tarball not building with the bare tag version (prep)\n+  make -C src obj/build.h\n+\n   ORIGPATH=\"$PATH\"\n   # Extract the release tarball into a dir for each host and build\n   for i in ${HOSTS}; do\n@@ -155,6 +157,11 @@ script: |\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n \n+    # Workaround for tarball not building with the bare tag version\n+    echo '#!/bin/true' >share/genbuild.sh\n+    mkdir src/obj\n+    cp ../src/obj/build.h src/obj/\n+\n     CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\" LDFLAGS=\"${HOST_LDFLAGS}\"\n     make ${MAKEOPTS}\n     make ${MAKEOPTS} -C src check-security"
      },
      {
        "sha": "35dee579afefcd076983c7fb81217e42297104df",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/129b03ff62dd5e09b6c6e601218e7079c2387dd5/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/129b03ff62dd5e09b6c6e601218e7079c2387dd5/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=129b03ff62dd5e09b6c6e601218e7079c2387dd5",
        "patch": "@@ -101,7 +101,6 @@ script: |\n   export PATH=${WRAP_DIR}:${PATH}\n \n   # Create the release tarball using (arbitrarily) the first host\n-  export GIT_DIR=\"$PWD/.git\"\n   ./autogen.sh\n   CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n@@ -115,6 +114,9 @@ script: |\n   find bitcoin-* | sort | tar --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ../$SOURCEDIST\n   popd\n \n+  # Workaround for tarball not building with the bare tag version (prep)\n+  make -C src obj/build.h\n+\n   ORIGPATH=\"$PATH\"\n   # Extract the release tarball into a dir for each host and build\n   for i in ${HOSTS}; do\n@@ -125,6 +127,11 @@ script: |\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n \n+    # Workaround for tarball not building with the bare tag version\n+    echo '#!/bin/true' >share/genbuild.sh\n+    mkdir src/obj\n+    cp ../src/obj/build.h src/obj/\n+\n     CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n     make ${MAKEOPTS}\n     make install-strip DESTDIR=${INSTALLPATH}"
      },
      {
        "sha": "b39611659964611230bdfe257e480a77222d7ce9",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/129b03ff62dd5e09b6c6e601218e7079c2387dd5/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/129b03ff62dd5e09b6c6e601218e7079c2387dd5/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=129b03ff62dd5e09b6c6e601218e7079c2387dd5",
        "patch": "@@ -116,7 +116,6 @@ script: |\n   export PATH=${WRAP_DIR}:${PATH}\n \n   # Create the release tarball using (arbitrarily) the first host\n-  export GIT_DIR=\"$PWD/.git\"\n   ./autogen.sh\n   CONFIG_SITE=${BASEPREFIX}/`echo \"${HOSTS}\" | awk '{print $1;}'`/share/config.site ./configure --prefix=/\n   make dist\n@@ -132,6 +131,9 @@ script: |\n   cp ../$SOURCEDIST $OUTDIR/src\n   popd\n \n+  # Workaround for tarball not building with the bare tag version (prep)\n+  make -C src obj/build.h\n+\n   ORIGPATH=\"$PATH\"\n   # Extract the release tarball into a dir for each host and build\n   for i in ${HOSTS}; do\n@@ -142,6 +144,11 @@ script: |\n     mkdir -p ${INSTALLPATH}\n     tar --strip-components=1 -xf ../$SOURCEDIST\n \n+    # Workaround for tarball not building with the bare tag version\n+    echo '#!/bin/true' >share/genbuild.sh\n+    mkdir src/obj\n+    cp ../src/obj/build.h src/obj/\n+\n     CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\"\n     make ${MAKEOPTS}\n     make ${MAKEOPTS} -C src check-security"
      }
    ]
  },
  {
    "sha": "9c76cf50fb6b306f2ed6c46f7e252c7812de0476",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yzc2Y2Y1MGZiNmIzMDZmMmVkNmM0NmY3ZTI1MmM3ODEyZGUwNDc2",
    "commit": {
      "author": {
        "name": "jbarcelo",
        "email": "jaume.barcelo@gmail.com",
        "date": "2017-08-21T08:41:04Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-08-21T08:41:04Z"
      },
      "message": "Trivial: Fix typo in release-notes.md\n\ngetmempooolentry -> getmempoolentry (twice)",
      "tree": {
        "sha": "412e80861e01d91bc7a08cf2bc30c0b1bdcac7ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/412e80861e01d91bc7a08cf2bc30c0b1bdcac7ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c76cf50fb6b306f2ed6c46f7e252c7812de0476",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c76cf50fb6b306f2ed6c46f7e252c7812de0476",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c76cf50fb6b306f2ed6c46f7e252c7812de0476",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c76cf50fb6b306f2ed6c46f7e252c7812de0476/comments",
    "author": {
      "login": "jbarcelo",
      "id": 1727416,
      "node_id": "MDQ6VXNlcjE3Mjc0MTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1727416?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jbarcelo",
      "html_url": "https://github.com/jbarcelo",
      "followers_url": "https://api.github.com/users/jbarcelo/followers",
      "following_url": "https://api.github.com/users/jbarcelo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jbarcelo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jbarcelo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jbarcelo/subscriptions",
      "organizations_url": "https://api.github.com/users/jbarcelo/orgs",
      "repos_url": "https://api.github.com/users/jbarcelo/repos",
      "events_url": "https://api.github.com/users/jbarcelo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jbarcelo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "129b03ff62dd5e09b6c6e601218e7079c2387dd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/129b03ff62dd5e09b6c6e601218e7079c2387dd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/129b03ff62dd5e09b6c6e601218e7079c2387dd5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "65f2cccc65cc286b0fce8f8dd1889939fbf48352",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c76cf50fb6b306f2ed6c46f7e252c7812de0476/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c76cf50fb6b306f2ed6c46f7e252c7812de0476/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=9c76cf50fb6b306f2ed6c46f7e252c7812de0476",
        "patch": "@@ -155,7 +155,7 @@ In previous versions of Bitcoin Core, a portion of each block could be reserved\n - The `-sendfreetransactions` option has been removed, since almost all miners do not include transactions which do not attach a transaction fee.\n - The `-blockprioritysize` option has been removed.\n - The `estimatepriority` and `estimatesmartpriority` RPCs have been removed.\n-- The `getmempoolancestors`, `getmempooldescendants`, `getmempooolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`.\n+- The `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`.\n - The `prioritisetransaction` RPC no longer takes a `priority_delta` argument, which is replaced by a `dummy` argument for backwards compatibility with clients using positional arguments. The RPC is still used to change the apparent fee-rate of the transaction by using the `fee_delta` argument.\n - `-minrelaytxfee` can now be set to 0. If `minrelaytxfee` is set, then fees smaller than `minrelaytxfee` (per kB) are rejected from relaying, mining and transaction creation. This defaults to 1000 satoshi/kB.\n - The `-printpriority` option has been updated to only output the fee rate and hash of transactions included in a block by the mining code.\n@@ -215,7 +215,7 @@ Low-level RPC changes\n   - `maximumCount` - a number specifying the minimum number of UTXOs\n   - `minimumSumAmount` - a number specifying the minimum sum value of all UTXOs\n \n-- The `getmempoolancestors`, `getmempooldescendants`, `getmempooolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n+- The `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n \n - The `dumpwallet` RPC now returns the full absolute path to the dumped wallet. It\n   used to return no value, even if successful (See [PR 9740](https://github.com/bitcoin/bitcoin/pull/9740))."
      }
    ]
  },
  {
    "sha": "28b978b19e87a7ed802c65f2d6561e61ef7ce911",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGI5NzhiMTllODdhN2VkODAyYzY1ZjJkNjU2MWU2MWVmN2NlOTEx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T08:42:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T08:48:17Z"
      },
      "message": "qt: Update translations pre-rc2\n\nNew locales:\n\n- bn\n- bs\n- de_DE\n- en_AU\n- en_US\n- es_419\n- he_IL\n- id\n- ja_JP\n- my\n- nb_NO\n- nl_NL\n- si\n- te\n- th\n\nTree-SHA512: af4e9d0107122e3da7da8ee4952e01a731ed04f13e83ed1979ace24d29c437a83cc23453d8f0b2160829df02c2ffbff0ce749083f82c4d4695c69a3c7feeebed",
      "tree": {
        "sha": "b55caad640918912b6c2de2cf64b71c79cf61011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b55caad640918912b6c2de2cf64b71c79cf61011"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28b978b19e87a7ed802c65f2d6561e61ef7ce911",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZmp5RAAoJEB5K7WKYbNJdvXoIAIY2wXcqHIR7l1ZN/Mdv7uXr\n57ZUD+2K56oyEDiZyM087Nv2Fx7MMQ8GExAclUix6BAdEwXL2UdtkeKO0ATFbgW6\n/CNd3U6UdN1VkyEscPL4ESW/jxrqBSW0jHIkFs+uIeHSwWY9f1Z9oOumQ8jCuHxn\nYQBWwqTYtqFGyrRvH3+0E2GBqaChjFxd7tjxu+nwNSMU7rswwmuP/WL1V67iOPK1\nggukANaPbqIMPmeG6G3NiHPIEWNiZhegpo1M8qbGf4erYta0rA3f5x43UR72acRJ\ni9Oxo8+OcCVMyf3cUuFRDWCN2FejVoq+ZRhc0RHSxbJJ20jUAG08vDAt1faibsI=\n=1+Bx\n-----END PGP SIGNATURE-----",
        "payload": "tree b55caad640918912b6c2de2cf64b71c79cf61011\nparent 129b03ff62dd5e09b6c6e601218e7079c2387dd5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1503304924 +0000\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503305297 +0200\n\nqt: Update translations pre-rc2\n\nNew locales:\n\n- bn\n- bs\n- de_DE\n- en_AU\n- en_US\n- es_419\n- he_IL\n- id\n- ja_JP\n- my\n- nb_NO\n- nl_NL\n- si\n- te\n- th\n\nTree-SHA512: af4e9d0107122e3da7da8ee4952e01a731ed04f13e83ed1979ace24d29c437a83cc23453d8f0b2160829df02c2ffbff0ce749083f82c4d4695c69a3c7feeebed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b978b19e87a7ed802c65f2d6561e61ef7ce911",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28b978b19e87a7ed802c65f2d6561e61ef7ce911",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b978b19e87a7ed802c65f2d6561e61ef7ce911/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "129b03ff62dd5e09b6c6e601218e7079c2387dd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/129b03ff62dd5e09b6c6e601218e7079c2387dd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/129b03ff62dd5e09b6c6e601218e7079c2387dd5"
      }
    ],
    "stats": {
      "total": 6736,
      "additions": 6727,
      "deletions": 9
    },
    "files": [
      {
        "sha": "7b44ce03833718e0cd9cf56ba5d0d8e94be8b358",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -13,18 +13,24 @@ QT_TS = \\\n   qt/locale/bitcoin_be_BY.ts \\\n   qt/locale/bitcoin_bg_BG.ts \\\n   qt/locale/bitcoin_bg.ts \\\n+  qt/locale/bitcoin_bn.ts \\\n+  qt/locale/bitcoin_bs.ts \\\n   qt/locale/bitcoin_ca_ES.ts \\\n   qt/locale/bitcoin_ca.ts \\\n   qt/locale/bitcoin_ca@valencia.ts \\\n   qt/locale/bitcoin_cs.ts \\\n   qt/locale/bitcoin_cy.ts \\\n   qt/locale/bitcoin_da.ts \\\n+  qt/locale/bitcoin_de_DE.ts \\\n   qt/locale/bitcoin_de.ts \\\n   qt/locale/bitcoin_el_GR.ts \\\n   qt/locale/bitcoin_el.ts \\\n+  qt/locale/bitcoin_en_AU.ts \\\n   qt/locale/bitcoin_en_GB.ts \\\n   qt/locale/bitcoin_en.ts \\\n+  qt/locale/bitcoin_en_US.ts \\\n   qt/locale/bitcoin_eo.ts \\\n+  qt/locale/bitcoin_es_419.ts \\\n   qt/locale/bitcoin_es_AR.ts \\\n   qt/locale/bitcoin_es_CL.ts \\\n   qt/locale/bitcoin_es_CO.ts \\\n@@ -44,13 +50,16 @@ QT_TS = \\\n   qt/locale/bitcoin_fr_FR.ts \\\n   qt/locale/bitcoin_fr.ts \\\n   qt/locale/bitcoin_gl.ts \\\n+  qt/locale/bitcoin_he_IL.ts \\\n   qt/locale/bitcoin_he.ts \\\n   qt/locale/bitcoin_hi_IN.ts \\\n   qt/locale/bitcoin_hr.ts \\\n   qt/locale/bitcoin_hu.ts \\\n   qt/locale/bitcoin_id_ID.ts \\\n+  qt/locale/bitcoin_id.ts \\\n   qt/locale/bitcoin_it_IT.ts \\\n   qt/locale/bitcoin_it.ts \\\n+  qt/locale/bitcoin_ja_JP.ts \\\n   qt/locale/bitcoin_ja.ts \\\n   qt/locale/bitcoin_ka.ts \\\n   qt/locale/bitcoin_kk_KZ.ts \\\n@@ -63,8 +72,11 @@ QT_TS = \\\n   qt/locale/bitcoin_mk_MK.ts \\\n   qt/locale/bitcoin_mn.ts \\\n   qt/locale/bitcoin_ms_MY.ts \\\n+  qt/locale/bitcoin_my.ts \\\n+  qt/locale/bitcoin_nb_NO.ts \\\n   qt/locale/bitcoin_nb.ts \\\n   qt/locale/bitcoin_ne.ts \\\n+  qt/locale/bitcoin_nl_NL.ts \\\n   qt/locale/bitcoin_nl.ts \\\n   qt/locale/bitcoin_pam.ts \\\n   qt/locale/bitcoin_pl.ts \\\n@@ -74,14 +86,17 @@ QT_TS = \\\n   qt/locale/bitcoin_ro.ts \\\n   qt/locale/bitcoin_ru_RU.ts \\\n   qt/locale/bitcoin_ru.ts \\\n+  qt/locale/bitcoin_si.ts \\\n   qt/locale/bitcoin_sk.ts \\\n   qt/locale/bitcoin_sl_SI.ts \\\n   qt/locale/bitcoin_sq.ts \\\n   qt/locale/bitcoin_sr@latin.ts \\\n   qt/locale/bitcoin_sr.ts \\\n   qt/locale/bitcoin_sv.ts \\\n   qt/locale/bitcoin_ta.ts \\\n+  qt/locale/bitcoin_te.ts \\\n   qt/locale/bitcoin_th_TH.ts \\\n+  qt/locale/bitcoin_th.ts \\\n   qt/locale/bitcoin_tr_TR.ts \\\n   qt/locale/bitcoin_tr.ts \\\n   qt/locale/bitcoin_uk.ts \\"
      },
      {
        "sha": "cef81781e292133e542f355ab9114f688a3b6bf1",
        "filename": "src/qt/bitcoin_locale.qrc",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/bitcoin_locale.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/bitcoin_locale.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin_locale.qrc?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -6,18 +6,24 @@\n         <file alias=\"be_BY\">locale/bitcoin_be_BY.qm</file>\n         <file alias=\"bg_BG\">locale/bitcoin_bg_BG.qm</file>\n         <file alias=\"bg\">locale/bitcoin_bg.qm</file>\n+        <file alias=\"bn\">locale/bitcoin_bn.qm</file>\n+        <file alias=\"bs\">locale/bitcoin_bs.qm</file>\n         <file alias=\"ca_ES\">locale/bitcoin_ca_ES.qm</file>\n         <file alias=\"ca\">locale/bitcoin_ca.qm</file>\n         <file alias=\"ca@valencia\">locale/bitcoin_ca@valencia.qm</file>\n         <file alias=\"cs\">locale/bitcoin_cs.qm</file>\n         <file alias=\"cy\">locale/bitcoin_cy.qm</file>\n         <file alias=\"da\">locale/bitcoin_da.qm</file>\n+        <file alias=\"de_DE\">locale/bitcoin_de_DE.qm</file>\n         <file alias=\"de\">locale/bitcoin_de.qm</file>\n         <file alias=\"el_GR\">locale/bitcoin_el_GR.qm</file>\n         <file alias=\"el\">locale/bitcoin_el.qm</file>\n+        <file alias=\"en_AU\">locale/bitcoin_en_AU.qm</file>\n         <file alias=\"en_GB\">locale/bitcoin_en_GB.qm</file>\n         <file alias=\"en\">locale/bitcoin_en.qm</file>\n+        <file alias=\"en_US\">locale/bitcoin_en_US.qm</file>\n         <file alias=\"eo\">locale/bitcoin_eo.qm</file>\n+        <file alias=\"es_419\">locale/bitcoin_es_419.qm</file>\n         <file alias=\"es_AR\">locale/bitcoin_es_AR.qm</file>\n         <file alias=\"es_CL\">locale/bitcoin_es_CL.qm</file>\n         <file alias=\"es_CO\">locale/bitcoin_es_CO.qm</file>\n@@ -37,13 +43,16 @@\n         <file alias=\"fr_FR\">locale/bitcoin_fr_FR.qm</file>\n         <file alias=\"fr\">locale/bitcoin_fr.qm</file>\n         <file alias=\"gl\">locale/bitcoin_gl.qm</file>\n+        <file alias=\"he_IL\">locale/bitcoin_he_IL.qm</file>\n         <file alias=\"he\">locale/bitcoin_he.qm</file>\n         <file alias=\"hi_IN\">locale/bitcoin_hi_IN.qm</file>\n         <file alias=\"hr\">locale/bitcoin_hr.qm</file>\n         <file alias=\"hu\">locale/bitcoin_hu.qm</file>\n         <file alias=\"id_ID\">locale/bitcoin_id_ID.qm</file>\n+        <file alias=\"id\">locale/bitcoin_id.qm</file>\n         <file alias=\"it_IT\">locale/bitcoin_it_IT.qm</file>\n         <file alias=\"it\">locale/bitcoin_it.qm</file>\n+        <file alias=\"ja_JP\">locale/bitcoin_ja_JP.qm</file>\n         <file alias=\"ja\">locale/bitcoin_ja.qm</file>\n         <file alias=\"ka\">locale/bitcoin_ka.qm</file>\n         <file alias=\"kk_KZ\">locale/bitcoin_kk_KZ.qm</file>\n@@ -56,8 +65,11 @@\n         <file alias=\"mk_MK\">locale/bitcoin_mk_MK.qm</file>\n         <file alias=\"mn\">locale/bitcoin_mn.qm</file>\n         <file alias=\"ms_MY\">locale/bitcoin_ms_MY.qm</file>\n+        <file alias=\"my\">locale/bitcoin_my.qm</file>\n+        <file alias=\"nb_NO\">locale/bitcoin_nb_NO.qm</file>\n         <file alias=\"nb\">locale/bitcoin_nb.qm</file>\n         <file alias=\"ne\">locale/bitcoin_ne.qm</file>\n+        <file alias=\"nl_NL\">locale/bitcoin_nl_NL.qm</file>\n         <file alias=\"nl\">locale/bitcoin_nl.qm</file>\n         <file alias=\"pam\">locale/bitcoin_pam.qm</file>\n         <file alias=\"pl\">locale/bitcoin_pl.qm</file>\n@@ -67,14 +79,17 @@\n         <file alias=\"ro\">locale/bitcoin_ro.qm</file>\n         <file alias=\"ru_RU\">locale/bitcoin_ru_RU.qm</file>\n         <file alias=\"ru\">locale/bitcoin_ru.qm</file>\n+        <file alias=\"si\">locale/bitcoin_si.qm</file>\n         <file alias=\"sk\">locale/bitcoin_sk.qm</file>\n         <file alias=\"sl_SI\">locale/bitcoin_sl_SI.qm</file>\n         <file alias=\"sq\">locale/bitcoin_sq.qm</file>\n         <file alias=\"sr@latin\">locale/bitcoin_sr@latin.qm</file>\n         <file alias=\"sr\">locale/bitcoin_sr.qm</file>\n         <file alias=\"sv\">locale/bitcoin_sv.qm</file>\n         <file alias=\"ta\">locale/bitcoin_ta.qm</file>\n+        <file alias=\"te\">locale/bitcoin_te.qm</file>\n         <file alias=\"th_TH\">locale/bitcoin_th_TH.qm</file>\n+        <file alias=\"th\">locale/bitcoin_th.qm</file>\n         <file alias=\"tr_TR\">locale/bitcoin_tr_TR.qm</file>\n         <file alias=\"tr\">locale/bitcoin_tr.qm</file>\n         <file alias=\"uk\">locale/bitcoin_uk.qm</file>"
      },
      {
        "sha": "bd0739757a5eff18bf205708302f4f817f163f8c",
        "filename": "src/qt/locale/bitcoin_bn.ts",
        "status": "added",
        "additions": 187,
        "deletions": 0,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_bn.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_bn.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_bn.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -0,0 +1,187 @@\n+<TS language=\"bn\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    <message>\n+        <source>Right-click to edit address or label</source>\n+        <translation>\u09a0\u09bf\u0995\u09be\u09a8\u09be \u0995\u09bf\u0982\u09ac\u09be \u09b2\u09c7\u09ad\u09c7\u09b2 \u09b8\u09ae\u09cd\u09aa\u09be\u09a6\u09a8\u09be\u09b0 \u099c\u09a8\u09cd\u09af \u09b0\u09be\u0987\u099f-\u0995\u09cd\u09b2\u09bf\u0995 \u0995\u09b0\u09c1\u09a8</translation>\n+    </message>\n+    <message>\n+        <source>Create a new address</source>\n+        <translation>undefined</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>AddressTableModel</name>\n+    <message>\n+        <source>Address</source>\n+        <translation>\u09a0\u09bf\u0995\u09be\u09a8\u09be </translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    </context>\n+<context>\n+    <name>BanTableModel</name>\n+    </context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    <message>\n+        <source>Warning</source>\n+        <translation>\u09b8\u09a4\u09b0\u09cd\u0995\u09a4\u09be</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    </context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    </context>\n+<context>\n+    <name>Intro</name>\n+    </context>\n+<context>\n+    <name>ModalOverlay</name>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    </context>\n+<context>\n+    <name>QObject::QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    <message>\n+        <source>Address</source>\n+        <translation>\u09a0\u09bf\u0995\u09be\u09a8\u09be </translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    </context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    <message>\n+        <source>The entered address is invalid.</source>\n+        <translation>\u09aa\u09cd\u09b0\u09ac\u09c7\u09b6\u0995\u09c3\u09a4 \u09a0\u09bf\u0995\u09be\u09a8\u09be\u099f\u09bf \u09b6\u09c1\u09a6\u09cd\u09a7 \u09a8\u09df\u0964</translation>\n+    </message>\n+    <message>\n+        <source>Please check the signature and try again.</source>\n+        <translation>\u0985\u09a8\u09c1\u0997\u09cd\u09b0\u09b9 \u0995\u09b0\u09c7 \u09b8\u09cd\u09ac\u09be\u0995\u09cd\u09b7\u09b0\u099f\u09bf \u09aa\u09c1\u09a8\u09b0\u09be\u09df \u09aa\u09b0\u09c0\u0995\u09cd\u09b7\u09be \u0995\u09b0\u09c7 \u0986\u09ac\u09be\u09b0\u0993 \u099a\u09c7\u09b7\u09cd\u099f\u09be \u0995\u09b0\u09c1\u09a8\u0964</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    <message>\n+        <source>Address</source>\n+        <translation>\u09a0\u09bf\u0995\u09be\u09a8\u09be </translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    <message>\n+        <source>Block creation options:</source>\n+        <translation>\u09ac\u09cd\u09b2\u0995 \u09a4\u09c8\u09b0\u09bf\u09b0 \u0985\u09aa\u09b6\u09a8\u0997\u09c1\u09b2\u09cb:</translation>\n+    </message>\n+    <message>\n+        <source>Debugging/Testing options:</source>\n+        <translation>\u09a1\u09bf\u09ac\u09be\u0997\u09bf\u0982/\u099f\u09c7\u09b8\u09cd\u099f\u09bf\u0982 \u0985\u09aa\u09b6\u09a8:</translation>\n+    </message>\n+    <message>\n+        <source>Do you want to rebuild the block database now?</source>\n+        <translation>\u0986\u09aa\u09a8\u09bf \u0995\u09bf \u09aa\u09c1\u09a8\u09b0\u09be\u09df \u09ac\u09cd\u09b2\u0995 \u09a1\u09be\u099f\u09be\u09ac\u09c7\u0987\u099c \u098f\u0996\u09a8\u0987 \u09a4\u09c8\u09b0\u09bf \u0995\u09b0\u09a4\u09c7 \u099a\u09be\u09a8?</translation>\n+    </message>\n+    <message>\n+        <source>RPC server options:</source>\n+        <translation>\u0986\u09b0\u09aa\u09bf\u09b8\u09bf \u09b8\u09be\u09b0\u09cd\u09ad\u09be\u09b0 \u0985\u09aa\u09b6\u09a8:</translation>\n+    </message>\n+    <message>\n+        <source>This is experimental software.</source>\n+        <translation>\u098f\u099f\u09bf \u09aa\u09b0\u09c0\u0995\u09cd\u09b7\u09be\u09ae\u09c2\u09b2\u0995 \u09b8\u09ab\u099f\u0993\u09df\u09cd\u09af\u09be\u09b0\u0964</translation>\n+    </message>\n+    <message>\n+        <source>Transaction amount too small</source>\n+        <translation>\u09b2\u09c7\u09a8\u09a6\u09c7\u09a8\u09c7\u09b0 \u09aa\u09b0\u09bf\u09ae\u09be\u09a8 \u0985\u09a8\u09c7\u0995 \u099b\u09cb\u099f</translation>\n+    </message>\n+    <message>\n+        <source>Transaction too large</source>\n+        <translation>\u09b2\u09c7\u09a8\u09a6\u09c7\u09a8\u09b0 \u0985\u0982\u0995 \u0985\u09a8\u09c7\u0995 \u09ac\u09dc</translation>\n+    </message>\n+    <message>\n+        <source>Warning</source>\n+        <translation>\u09b8\u09a4\u09b0\u09cd\u0995\u09a4\u09be</translation>\n+    </message>\n+    <message>\n+        <source>Loading addresses...</source>\n+        <translation>\u09a0\u09bf\u0995\u09be\u09a8\u09be\u0997\u09c1\u09b2\u09cb \u09b2\u09cb\u09a1\u09bf\u0982 \u09b9\u099a\u09cd\u099b\u09c7...</translation>\n+    </message>\n+    </context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "83f0c84f0a6243dba6bf3a225fd7e20c3c186b0b",
        "filename": "src/qt/locale/bitcoin_bs.ts",
        "status": "added",
        "additions": 163,
        "deletions": 0,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_bs.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_bs.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_bs.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -0,0 +1,163 @@\n+<TS language=\"bs\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    </context>\n+<context>\n+    <name>AddressTableModel</name>\n+    </context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    </context>\n+<context>\n+    <name>BanTableModel</name>\n+    </context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    <message>\n+        <source>Bitcoin</source>\n+        <translation>Bitcoin</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    </context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    </context>\n+<context>\n+    <name>Intro</name>\n+    </context>\n+<context>\n+    <name>ModalOverlay</name>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    </context>\n+<context>\n+    <name>QObject::QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    <message>\n+        <source>Alt+A</source>\n+        <translation>Alt+A</translation>\n+    </message>\n+    <message>\n+        <source>Alt+P</source>\n+        <translation>Alt+P</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    <message>\n+        <source>Alt+A</source>\n+        <translation>Alt+A</translation>\n+    </message>\n+    <message>\n+        <source>Alt+P</source>\n+        <translation>Alt+P</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    <message>\n+        <source>All</source>\n+        <translation>Sve</translation>\n+    </message>\n+    <message>\n+        <source>Today</source>\n+        <translation>Danas</translation>\n+    </message>\n+    <message>\n+        <source>This month</source>\n+        <translation>Ovaj mjesec</translation>\n+    </message>\n+    <message>\n+        <source>Last month</source>\n+        <translation>Pro\u0161li mjesec</translation>\n+    </message>\n+    <message>\n+        <source>This year</source>\n+        <translation>Ove godine</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    <message>\n+        <source>Bitcoin Core</source>\n+        <translation>Bitcoin Jezrga</translation>\n+    </message>\n+    </context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "e007e5ae4ee80b5c3032b4f636a8b4847c6ced38",
        "filename": "src/qt/locale/bitcoin_cy.ts",
        "status": "modified",
        "additions": 158,
        "deletions": 2,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_cy.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_cy.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_cy.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -29,10 +29,42 @@\n         <source>&amp;Delete</source>\n         <translation>&amp;Dileu</translation>\n     </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>Anfon cyfeiriadau</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>Derbyn cyfeiriadau</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy Address</source>\n+        <translation>&amp;Cop\u00efo Cyfeiriad</translation>\n+    </message>\n+    <message>\n+        <source>Copy &amp;Label</source>\n+        <translation>Cop\u00efo &amp;Label</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Methu Allforio</translation>\n+    </message>\n     </context>\n <context>\n     <name>AddressTableModel</name>\n-    </context>\n+    <message>\n+        <source>Label</source>\n+        <translation>Label</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Cyfeiriad</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(dim label)</translation>\n+    </message>\n+</context>\n <context>\n     <name>AskPassphraseDialog</name>\n     <message>\n@@ -81,6 +113,14 @@\n         <source>Quit application</source>\n         <translation>Gadael rhaglen</translation>\n     </message>\n+    <message>\n+        <source>&amp;About %1</source>\n+        <translation>&amp;Ynghylch %1</translation>\n+    </message>\n+    <message>\n+        <source>Show information about %1</source>\n+        <translation>Dangos gwybodaeth am %1</translation>\n+    </message>\n     <message>\n         <source>About &amp;Qt</source>\n         <translation>Ynghylch &amp;Qt</translation>\n@@ -220,6 +260,18 @@\n         <source>Date</source>\n         <translation>Dyddiad</translation>\n     </message>\n+    <message>\n+        <source>Copy address</source>\n+        <translation>Cop\u00efo cyfeiriad</translation>\n+    </message>\n+    <message>\n+        <source>Copy label</source>\n+        <translation>Cop\u00efo label</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(dim label)</translation>\n+    </message>\n     </context>\n <context>\n     <name>EditAddressDialog</name>\n@@ -361,16 +413,40 @@\n         <source>&amp;Label:</source>\n         <translation>&amp;Label:</translation>\n     </message>\n+    <message>\n+        <source>Copy label</source>\n+        <translation>Cop\u00efo label</translation>\n+    </message>\n     </context>\n <context>\n     <name>ReceiveRequestDialog</name>\n     <message>\n         <source>Copy &amp;Address</source>\n         <translation>&amp;Cyfeiriad Copi</translation>\n     </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Cyfeiriad</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Label</translation>\n+    </message>\n     </context>\n <context>\n     <name>RecentRequestsTableModel</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>Dyddiad</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Label</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(dim label)</translation>\n+    </message>\n     </context>\n <context>\n     <name>SendCoinsDialog</name>\n@@ -394,7 +470,11 @@\n         <source>Confirm the send action</source>\n         <translation>Cadarnhau'r gweithrediad anfon</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(dim label)</translation>\n+    </message>\n+</context>\n <context>\n     <name>SendCoinsEntry</name>\n     <message>\n@@ -455,15 +535,87 @@\n     </context>\n <context>\n     <name>TransactionDesc</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>Dyddiad</translation>\n+    </message>\n     </context>\n <context>\n     <name>TransactionDescDialog</name>\n     </context>\n <context>\n     <name>TransactionTableModel</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>Dyddiad</translation>\n+    </message>\n+    <message>\n+        <source>Type</source>\n+        <translation>Math</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Label</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(dim label)</translation>\n+    </message>\n     </context>\n <context>\n     <name>TransactionView</name>\n+    <message>\n+        <source>Today</source>\n+        <translation>Heddiw</translation>\n+    </message>\n+    <message>\n+        <source>This week</source>\n+        <translation>Yr wythnos hon</translation>\n+    </message>\n+    <message>\n+        <source>This month</source>\n+        <translation>Y mis hwn</translation>\n+    </message>\n+    <message>\n+        <source>Last month</source>\n+        <translation>Mis diwethaf</translation>\n+    </message>\n+    <message>\n+        <source>This year</source>\n+        <translation>Eleni</translation>\n+    </message>\n+    <message>\n+        <source>Copy address</source>\n+        <translation>Cop\u00efo cyfeiriad</translation>\n+    </message>\n+    <message>\n+        <source>Copy label</source>\n+        <translation>Cop\u00efo label</translation>\n+    </message>\n+    <message>\n+        <source>Edit label</source>\n+        <translation>Golygu label</translation>\n+    </message>\n+    <message>\n+        <source>Date</source>\n+        <translation>Dyddiad</translation>\n+    </message>\n+    <message>\n+        <source>Type</source>\n+        <translation>Math</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Label</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Cyfeiriad</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Methu Allforio</translation>\n+    </message>\n     </context>\n <context>\n     <name>UnitDisplayStatusBarControl</name>\n@@ -476,6 +628,10 @@\n     </context>\n <context>\n     <name>WalletView</name>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>&amp;Allforio</translation>\n+    </message>\n     </context>\n <context>\n     <name>bitcoin-core</name>"
      },
      {
        "sha": "750cadd87b73843bf81ab41160fe30f3182550cf",
        "filename": "src/qt/locale/bitcoin_de_DE.ts",
        "status": "added",
        "additions": 628,
        "deletions": 0,
        "changes": 628,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_de_DE.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_de_DE.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_de_DE.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -0,0 +1,628 @@\n+<TS language=\"de_DE\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    <message>\n+        <source>Right-click to edit address or label</source>\n+        <translation>Rechtsklick um Adresse oder Etikett zu bearbeiten</translation>\n+    </message>\n+    <message>\n+        <source>Create a new address</source>\n+        <translation>Eine neue Adresse erstellen</translation>\n+    </message>\n+    <message>\n+        <source>&amp;New</source>\n+        <translation>&amp;Neu</translation>\n+    </message>\n+    <message>\n+        <source>Copy the currently selected address to the system clipboard</source>\n+        <translation>Ausgew\u00e4hlte Adresse in die Zwischenablage kopieren</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy</source>\n+        <translation>&amp;Kopieren</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;lose</source>\n+        <translation>Schliessen</translation>\n+    </message>\n+    <message>\n+        <source>Delete the currently selected address from the list</source>\n+        <translation>Ausgew\u00e4hlte Adresse aus der Liste l\u00f6schen</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>Daten des aktiven Fensters exportieren</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>&amp;Exportieren</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Delete</source>\n+        <translation>&amp;L\u00f6schen</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>W\u00e4hle die Empf\u00e4ngeradresse</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>W\u00e4hle die Empfangsadresse</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;hoose</source>\n+        <translation>Dies sind deine Bitcoin Adressen zum Senden von Zahlungsmitteln.\n+\u00dcberpr\u00fcfe immer die Menge, sowie die Empf\u00e4nger-Adresse vor dem Senden von Coins.</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>Sendeadresse</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>Empfangsadresse</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy Address</source>\n+        <translation>&amp;Kopiere Adresse</translation>\n+    </message>\n+    <message>\n+        <source>Copy &amp;Label</source>\n+        <translation>Kopiere &amp;Etikett</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Edit</source>\n+        <translation>&amp;Bearbeiten</translation>\n+    </message>\n+    <message>\n+        <source>Export Address List</source>\n+        <translation>Export Adressliste</translation>\n+    </message>\n+    <message>\n+        <source>Comma separated file (*.csv)</source>\n+        <translation>Komma getrenntes Dokument (*.csv)</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Export fehlgeschlagen</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>AddressTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etikett</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adresse</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(kein Etikett)</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    <message>\n+        <source>Passphrase Dialog</source>\n+        <translation>Passwort Dialog</translation>\n+    </message>\n+    <message>\n+        <source>Enter passphrase</source>\n+        <translation>Passwort eingeben</translation>\n+    </message>\n+    <message>\n+        <source>New passphrase</source>\n+        <translation>Neues Passwort</translation>\n+    </message>\n+    <message>\n+        <source>Repeat new passphrase</source>\n+        <translation>Neues Passwort wiederholen</translation>\n+    </message>\n+    <message>\n+        <source>Encrypt wallet</source>\n+        <translation>Brieftasche verschl\u00fcsseln</translation>\n+    </message>\n+    <message>\n+        <source>This operation needs your wallet passphrase to unlock the wallet.</source>\n+        <translation>Diese Aktion ben\u00f6tigt ihr Passwort zum entsperren der Wallet.</translation>\n+    </message>\n+    <message>\n+        <source>Unlock wallet</source>\n+        <translation>Brieftasche entriegeln</translation>\n+    </message>\n+    <message>\n+        <source>Decrypt wallet</source>\n+        <translation>Brieftasche entschl\u00fcsseln</translation>\n+    </message>\n+    <message>\n+        <source>Change passphrase</source>\n+        <translation>Passwort \u00e4ndern</translation>\n+    </message>\n+    <message>\n+        <source>Confirm wallet encryption</source>\n+        <translation>Brieftaschenverschl\u00fcsselung best\u00e4tigen</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encrypted</source>\n+        <translation>Brieftasche verschl\u00fcsselt</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encryption failed</source>\n+        <translation>Brieftaschenverschl\u00fcsselung fehlgeschlagen</translation>\n+    </message>\n+    <message>\n+        <source>Wallet unlock failed</source>\n+        <translation>Brieftasche \u00f6ffnen fehlgeschlagen</translation>\n+    </message>\n+    <message>\n+        <source>The passphrase entered for the wallet decryption was incorrect.</source>\n+        <translation>Inkorrektes Passwort um die Brieftasche zu entschl\u00fcsseln</translation>\n+    </message>\n+    <message>\n+        <source>Wallet decryption failed</source>\n+        <translation>Brieftasche entschl\u00fcsseln fehlgeschlagen</translation>\n+    </message>\n+    <message>\n+        <source>Wallet passphrase was successfully changed.</source>\n+        <translation>Brieftaschen Passwort erfolgreich ge\u00e4ndert</translation>\n+    </message>\n+    <message>\n+        <source>Warning: The Caps Lock key is on!</source>\n+        <translation>Achtung: Die Umschalttaste ist eingeschaltet!</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>BanTableModel</name>\n+    <message>\n+        <source>IP/Netmask</source>\n+        <translation>IP/Netzmaske</translation>\n+    </message>\n+    <message>\n+        <source>Banned Until</source>\n+        <translation>Gesperrt bis</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    <message>\n+        <source>Synchronizing with network...</source>\n+        <translation>\u00dcber das Netzwerk abgleichen...</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Overview</source>\n+        <translation>&amp;\u00dcbersicht</translation>\n+    </message>\n+    <message>\n+        <source>Node</source>\n+        <translation>Knoten</translation>\n+    </message>\n+    <message>\n+        <source>Show general overview of wallet</source>\n+        <translation>Generelle \u00dcbersicht der Brieftasche </translation>\n+    </message>\n+    <message>\n+        <source>&amp;Transactions</source>\n+        <translation>&amp;Transaktionen</translation>\n+    </message>\n+    <message>\n+        <source>Browse transaction history</source>\n+        <translation>Zeige Transaktionsverlauf</translation>\n+    </message>\n+    <message>\n+        <source>Quit application</source>\n+        <translation>Programm beenden</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Options...</source>\n+        <translation>&amp;Einstellungen...</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Encrypt Wallet...</source>\n+        <translation>&amp;Brieftasche verschl\u00fcsseln...</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Backup Wallet...</source>\n+        <translation>&amp;Sicherungskopie der Brieftasche...</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Change Passphrase...</source>\n+        <translation>&amp;Passwort \u00e4ndern...</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Sending addresses...</source>\n+        <translation>&amp;Adressen senden...</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Receiving addresses...</source>\n+        <translation>&amp;Adressen empfangen...</translation>\n+    </message>\n+    <message>\n+        <source>Wallet</source>\n+        <translation>Brieftasche</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Send</source>\n+        <translation>&amp;Senden</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Receive</source>\n+        <translation>&amp;Empfangen</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Settings</source>\n+        <translation>&amp;Einstellungen</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Help</source>\n+        <translation>&amp;Hilfe</translation>\n+    </message>\n+    <message>\n+        <source>Show the list of used sending addresses and labels</source>\n+        <translation>Zeige Liste der benutzten Sendeadressen und -etiketten</translation>\n+    </message>\n+    <message>\n+        <source>Error</source>\n+        <translation>Fehler</translation>\n+    </message>\n+    <message>\n+        <source>Warning</source>\n+        <translation>Achtung</translation>\n+    </message>\n+    <message>\n+        <source>Information</source>\n+        <translation>Information</translation>\n+    </message>\n+    <message>\n+        <source>Sent transaction</source>\n+        <translation>\u00dcberweisung gesendet</translation>\n+    </message>\n+    <message>\n+        <source>Incoming transaction</source>\n+        <translation>\u00dcberweisung empfangen</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>Datum</translation>\n+    </message>\n+    <message>\n+        <source>Confirmations</source>\n+        <translation>Best\u00e4tigungen</translation>\n+    </message>\n+    <message>\n+        <source>Confirmed</source>\n+        <translation>Best\u00e4tigt</translation>\n+    </message>\n+    <message>\n+        <source>Copy address</source>\n+        <translation>Adresse kopieren</translation>\n+    </message>\n+    <message>\n+        <source>Copy label</source>\n+        <translation>Etikett kopieren</translation>\n+    </message>\n+    <message>\n+        <source>Copy amount</source>\n+        <translation>Betrag kopieren</translation>\n+    </message>\n+    <message>\n+        <source>Copy transaction ID</source>\n+        <translation>Transaktions ID kopieren</translation>\n+    </message>\n+    <message>\n+        <source>yes</source>\n+        <translation>Ja</translation>\n+    </message>\n+    <message>\n+        <source>no</source>\n+        <translation>Nein</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(kein Etikett)</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    <message>\n+        <source>Edit Address</source>\n+        <translation>Adresse bearbeiten</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Label</source>\n+        <translation>&amp;Etikett</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Address</source>\n+        <translation>&amp;Adresse</translation>\n+    </message>\n+    <message>\n+        <source>New receiving address</source>\n+        <translation>Neue Empfangsadresse</translation>\n+    </message>\n+    <message>\n+        <source>New sending address</source>\n+        <translation>Neue Sendeadresse</translation>\n+    </message>\n+    <message>\n+        <source>Edit receiving address</source>\n+        <translation>Empfangsadresse bearbeiten</translation>\n+    </message>\n+    <message>\n+        <source>Edit sending address</source>\n+        <translation>Sendeadresse bearbeiten</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    <message>\n+        <source>name</source>\n+        <translation>Name</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    <message>\n+        <source>version</source>\n+        <translation>Version</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>Intro</name>\n+    <message>\n+        <source>Welcome</source>\n+        <translation>Willkommen</translation>\n+    </message>\n+    <message>\n+        <source>Error</source>\n+        <translation>Fehler</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>ModalOverlay</name>\n+    <message>\n+        <source>Form</source>\n+        <translation>Formular</translation>\n+    </message>\n+    <message>\n+        <source>Unknown...</source>\n+        <translation>Unbekannt...</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    <message>\n+        <source>Form</source>\n+        <translation>Formular</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    </context>\n+<context>\n+    <name>QObject::QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    <message>\n+        <source>Copy label</source>\n+        <translation>Etikett kopieren</translation>\n+    </message>\n+    <message>\n+        <source>Copy amount</source>\n+        <translation>Betrag kopieren</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adresse</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etikett</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>Datum</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etikett</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(kein Etikett)</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    <message>\n+        <source>Copy amount</source>\n+        <translation>Betrag kopieren</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(kein Etikett)</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    </context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>Datum</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>Datum</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etikett</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(kein Etikett)</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    <message>\n+        <source>Copy address</source>\n+        <translation>Adresse kopieren</translation>\n+    </message>\n+    <message>\n+        <source>Copy label</source>\n+        <translation>Etikett kopieren</translation>\n+    </message>\n+    <message>\n+        <source>Copy amount</source>\n+        <translation>Betrag kopieren</translation>\n+    </message>\n+    <message>\n+        <source>Copy transaction ID</source>\n+        <translation>Transaktions ID kopieren</translation>\n+    </message>\n+    <message>\n+        <source>Comma separated file (*.csv)</source>\n+        <translation>Komma getrenntes Dokument (*.csv)</translation>\n+    </message>\n+    <message>\n+        <source>Confirmed</source>\n+        <translation>Best\u00e4tigt</translation>\n+    </message>\n+    <message>\n+        <source>Date</source>\n+        <translation>Datum</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etikett</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adresse</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Export fehlgeschlagen</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>&amp;Exportieren</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>Daten des aktiven Fensters exportieren</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    <message>\n+        <source>Information</source>\n+        <translation>Information</translation>\n+    </message>\n+    <message>\n+        <source>Warning</source>\n+        <translation>Achtung</translation>\n+    </message>\n+    <message>\n+        <source>This is the minimum transaction fee you pay on every transaction.</source>\n+        <translation>Das ist die Mindestgeb\u00fchr jeder Transaktion</translation>\n+    </message>\n+    <message>\n+        <source>This is the transaction fee you will pay if you send a transaction.</source>\n+        <translation>Das ist die Geb\u00fchr f\u00fcr die \u00dcberweisung</translation>\n+    </message>\n+    <message>\n+        <source>Transaction amounts must not be negative</source>\n+        <translation>\u00dcberweisungsbetrag kann nicht negativ sein</translation>\n+    </message>\n+    <message>\n+        <source>Transaction must have at least one recipient</source>\n+        <translation>\u00dcberweisung muss mindestens einen Empf\u00e4nger haben </translation>\n+    </message>\n+    <message>\n+        <source>Insufficient funds</source>\n+        <translation>Ungen\u00fcgendes Guthaben</translation>\n+    </message>\n+    <message>\n+        <source>Loading block index...</source>\n+        <translation>Block Verzeichnis laden...</translation>\n+    </message>\n+    <message>\n+        <source>Loading wallet...</source>\n+        <translation>Brieftasche laden...</translation>\n+    </message>\n+    <message>\n+        <source>Done loading</source>\n+        <translation>Laden abgeschlossen</translation>\n+    </message>\n+    <message>\n+        <source>Error</source>\n+        <translation>Fehler</translation>\n+    </message>\n+</context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "b068672ec4d8844da6c4381a67b031cce5b26f37",
        "filename": "src/qt/locale/bitcoin_el_GR.ts",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_el_GR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_el_GR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_el_GR.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -61,6 +61,14 @@\n         <source>Receiving addresses</source>\n         <translation>\u0394\u03b9\u03b5\u03c5\u03b8\u03cd\u03bd\u03c3\u03b5\u03b9\u03c2 \u03bb\u03ae\u03c8\u03b7\u03c2</translation>\n     </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n+        <translation>\u0391\u03c5\u03c4\u03ad\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03bf\u03b9 Bitcoin \u03b4\u03b9\u03b5\u03c5\u03b8\u03cd\u03bd\u03c3\u03b5\u03b9\u03c2 \u03c3\u03b1\u03c2 \u03b3\u03b9\u03b1 \u03bd\u03b1 \u03c3\u03c4\u03ad\u03bb\u03bd\u03b5\u03c4\u03b5 \u03c0\u03bb\u03b7\u03c1\u03c9\u03bc\u03ad\u03c2. \u039d\u03b1 \u03b5\u03bb\u03ad\u03b3\u03c7\u03b5\u03c4\u03b5 \u03c0\u03ac\u03bd\u03c4\u03b1 \u03c4\u03bf \u03c0\u03bf\u03c3\u03cc, \u03ba\u03b1\u03b8\u03ce\u03c2 \u03ba\u03b1\u03b9 \u03c4\u03b7 \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7 \u03c0\u03b1\u03c1\u03b1\u03bb\u03ae\u03c0\u03c4\u03b7 \u03c0\u03c1\u03b9\u03bd \u03c3\u03c4\u03b5\u03af\u03bb\u03b5\u03c4\u03b5 \u03bd\u03bf\u03bc\u03af\u03c3\u03bc\u03b1\u03c4\u03b1.</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.</source>\n+        <translation>\u0391\u03c5\u03c4\u03ad\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03bf\u03b9 Bitcoin \u03b4\u03b9\u03b5\u03c5\u03b8\u03cd\u03bd\u03c3\u03b5\u03b9\u03c2 \u03c3\u03b1\u03c2 \u03b3\u03b9\u03b1 \u03bd\u03b1 \u03bb\u03b1\u03bc\u03b2\u03ac\u03bd\u03b5\u03c4\u03b5 \u03c0\u03bb\u03b7\u03c1\u03c9\u03bc\u03ad\u03c2. \u03a0\u03c1\u03bf\u03c4\u03b5\u03af\u03bd\u03b5\u03c4\u03b5 \u03bd\u03b1 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c4\u03b5 \u03bc\u03b9\u03b1 \u03bd\u03ad\u03b1 \u03b4\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7 \u03c0\u03b1\u03c1\u03b1\u03bb\u03ae\u03c0\u03c4\u03b7 \u03b3\u03b9\u03b1 \u03ba\u03ac\u03b8\u03b5 \u03c3\u03c5\u03bd\u03b1\u03bb\u03bb\u03b1\u03b3\u03ae.</translation>\n+    </message>\n     <message>\n         <source>&amp;Copy Address</source>\n         <translation>&amp;\u0391\u03bd\u03c4\u03b9\u03b3\u03c1\u03b1\u03c6\u03ae \u0394\u03b9\u03b5\u03cd\u03b8\u03c5\u03bd\u03c3\u03b7\u03c2</translation>\n@@ -85,7 +93,11 @@\n         <source>Exporting Failed</source>\n         <translation>\u0391\u03c0\u03bf\u03c4\u03c5\u03c7\u03af\u03b1 \u0395\u03be\u03b1\u03b3\u03c9\u03b3\u03ae\u03c2</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>There was an error trying to save the address list to %1. Please try again.</source>\n+        <translation>\u03a3\u03c6\u03ac\u03bb\u03bc\u03b1 \u03ba\u03b1\u03c4\u03ac \u03c4\u03b7\u03bd \u03c0\u03c1\u03bf\u03c3\u03c0\u03ac\u03b8\u03b5\u03b9\u03b1 \u03b1\u03c0\u03bf\u03b8\u03ae\u03ba\u03b5\u03c5\u03c3\u03b7\u03c2 \u03c4\u03b7\u03c2 \u03bb\u03af\u03c3\u03c4\u03b1\u03c2 \u03b4\u03b9\u03b5\u03c5\u03b8\u03cd\u03bd\u03c3\u03b5\u03c9\u03bd \u03c3\u03c4\u03bf %1. \u03a0\u03b1\u03c1\u03b1\u03ba\u03b1\u03bb\u03ce \u03b4\u03bf\u03ba\u03b9\u03bc\u03ac\u03c3\u03c4\u03b5 \u03be\u03b1\u03bd\u03ac.</translation>\n+    </message>\n+</context>\n <context>\n     <name>AddressTableModel</name>\n     <message>\n@@ -119,6 +131,10 @@\n         <source>Repeat new passphrase</source>\n         <translation>\u0395\u03c0\u03b1\u03bd\u03ad\u03bb\u03b1\u03b2\u03b5 \u03c4\u03bf\u03bd \u03bd\u03ad\u03bf \u03ba\u03c9\u03b4\u03b9\u03ba\u03cc \u03c0\u03c1\u03cc\u03c3\u03b2\u03b1\u03c3\u03b7\u03c2</translation>\n     </message>\n+    <message>\n+        <source>Enter the new passphrase to the wallet.&lt;br/&gt;Please use a passphrase of &lt;b&gt;ten or more random characters&lt;/b&gt;, or &lt;b&gt;eight or more words&lt;/b&gt;.</source>\n+        <translation>\u0395\u03b9\u03c3\u03ac\u03b3\u03b5\u03c4\u03b5 \u03c4\u03bf \u03bd\u03ad\u03bf \u03ba\u03c9\u03b4\u03b9\u03ba\u03cc \u03c0\u03c1\u03cc\u03c3\u03b2\u03b1\u03c3\u03b7\u03c2 \u03c3\u03c4\u03bf \u03c0\u03bf\u03c1\u03c4\u03bf\u03c6\u03cc\u03bb\u03b9. &lt;br/&gt;\u03a0\u03b1\u03c1\u03b1\u03ba\u03b1\u03bb\u03ce \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03b5\u03af\u03c3\u03c4\u03b5 \u03ad\u03bd\u03b1\u03bd \u03ba\u03c9\u03b4\u03b9\u03ba\u03cc \u03bc\u03b5 &lt;b&gt;\u03b4\u03ad\u03ba\u03b1 \u03ae \u03c0\u03b5\u03c1\u03b9\u03c3\u03c3\u03cc\u03c4\u03b5\u03c1\u03bf\u03c5\u03c2 \u03c4\u03c5\u03c7\u03b1\u03af\u03bf\u03c5\u03c2 \u03c7\u03b1\u03c1\u03b1\u03ba\u03c4\u03ae\u03c1\u03b5\u03c2 &lt;/b&gt;, \u03ae &lt;b&gt;\u03bf\u03c7\u03c4\u03ce \u03ae \u03c0\u03b1\u03c1\u03b1\u03c0\u03ac\u03bd\u03c9 \u03bb\u03ad\u03be\u03b5\u03b9\u03c2 &lt;/b&gt;.</translation>\n+    </message>\n     <message>\n         <source>Encrypt wallet</source>\n         <translation>\u039a\u03c1\u03c5\u03c0\u03c4\u03bf\u03b3\u03c1\u03ac\u03c6\u03b7\u03c3\u03b7 \u03c0\u03bf\u03c1\u03c4\u03bf\u03c6\u03bf\u03bb\u03b9\u03bf\u03cd</translation>"
      },
      {
        "sha": "c2efefb50a63fc30018b35d89fa48ec36bfaae28",
        "filename": "src/qt/locale/bitcoin_en_AU.ts",
        "status": "added",
        "additions": 175,
        "deletions": 0,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_en_AU.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_en_AU.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en_AU.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -0,0 +1,175 @@\n+<TS language=\"en_AU\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    </context>\n+<context>\n+    <name>AddressTableModel</name>\n+    </context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    </context>\n+<context>\n+    <name>BanTableModel</name>\n+    </context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    <message>\n+        <source>Synchronizing with network...</source>\n+        <translation>Synchronising with network...</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    </context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    <message>\n+        <source>Start minimized</source>\n+        <translation>Start minimised</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>Intro</name>\n+    </context>\n+<context>\n+    <name>ModalOverlay</name>\n+    <message>\n+        <source>Recent transactions may not yet be visible, and therefore your wallet's balance might be incorrect. This information will be correct once your wallet has finished synchronizing with the bitcoin network, as detailed below.</source>\n+        <translation>Recent transactions may not yet be visible, and therefore your wallet's balance might be incorrect. This information will be correct once your wallet has finished synchronising with the bitcoin network, as detailed below.</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    <message>\n+        <source>Minimize instead of exit the application when the window is closed. When this option is enabled, the application will be closed only after selecting Exit in the menu.</source>\n+        <translation>Minimise instead of exit the application when the window is closed. When this option is enabled, the application will be closed only after selecting Exit in the menu.</translation>\n+    </message>\n+    <message>\n+        <source>Show only a tray icon after minimizing the window.</source>\n+        <translation>Show only a tray icon after minimising the window.</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Minimize to the tray instead of the taskbar</source>\n+        <translation>&amp;Minimise to the tray instead of the taskbar</translation>\n+    </message>\n+    <message>\n+        <source>M&amp;inimize on close</source>\n+        <translation>M&amp;inimise on close</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    <message>\n+        <source>The displayed information may be out of date. Your wallet automatically synchronizes with the Bitcoin network after a connection is established, but this process has not completed yet.</source>\n+        <translation>The displayed information may be out of date. Your wallet automatically synchronises with the Bitcoin network after a connection is established, but this process has not completed yet.</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    <message>\n+        <source>Payment request is not initialized.</source>\n+        <translation>Payment request is not initialised.</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    </context>\n+<context>\n+    <name>QObject::QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    <message>\n+        <source>(Smart fee not initialized yet. This usually takes a few blocks...)</source>\n+        <translation>(Smart fee not initialised yet. This usually takes a few blocks...)</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    </context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    <message>\n+        <source>Error initializing block database</source>\n+        <translation>Error initialising block database</translation>\n+    </message>\n+    <message>\n+        <source>Error initializing wallet database environment %s!</source>\n+        <translation>Error initialising wallet database environment %s!</translation>\n+    </message>\n+    <message>\n+        <source>Initialization sanity check failed. %s is shutting down.</source>\n+        <translation>Initialisation sanity check failed. %s is shutting down.</translation>\n+    </message>\n+    <message>\n+        <source>Randomize credentials for every proxy connection. This enables Tor stream isolation (default: %u)</source>\n+        <translation>Randomise credentials for every proxy connection. This enables Tor stream isolation (default: %u)</translation>\n+    </message>\n+    </context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "65cc0332e3b4bfb4a15e3c47ddfbb7d33087586d",
        "filename": "src/qt/locale/bitcoin_en_US.ts",
        "status": "added",
        "additions": 175,
        "deletions": 0,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_en_US.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_en_US.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en_US.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -0,0 +1,175 @@\n+<TS language=\"en_US\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    <message>\n+        <source>Right-click to edit address or label</source>\n+        <translation>Right-click to edit address or label</translation>\n+    </message>\n+    <message>\n+        <source>Create a new address</source>\n+        <translation>Create a new address</translation>\n+    </message>\n+    <message>\n+        <source>&amp;New</source>\n+        <translation>&amp;New</translation>\n+    </message>\n+    <message>\n+        <source>Copy the currently selected address to the system clipboard</source>\n+        <translation>Copy the currently selected address to the system clipboard</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy</source>\n+        <translation>&amp;Copy</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;lose</source>\n+        <translation>C&amp;lose</translation>\n+    </message>\n+    <message>\n+        <source>Delete the currently selected address from the list</source>\n+        <translation>Delete the currently selected address from the list</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>Export the data in the current tab to a file</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>&amp;Export</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Delete</source>\n+        <translation>&amp;Delete</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>AddressTableModel</name>\n+    </context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    <message>\n+        <source>Passphrase Dialog</source>\n+        <translation>Passphrase Dialog</translation>\n+    </message>\n+    <message>\n+        <source>Enter passphrase</source>\n+        <translation>Enter passphrase</translation>\n+    </message>\n+    <message>\n+        <source>New passphrase</source>\n+        <translation>New passphrase</translation>\n+    </message>\n+    <message>\n+        <source>Repeat new passphrase</source>\n+        <translation>Repeat new passphrase</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>BanTableModel</name>\n+    </context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    </context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    </context>\n+<context>\n+    <name>Intro</name>\n+    </context>\n+<context>\n+    <name>ModalOverlay</name>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    </context>\n+<context>\n+    <name>QObject::QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    </context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    </context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "91ba9478eac14ac4fe8e25868a0d229f87ff9d2d",
        "filename": "src/qt/locale/bitcoin_es_419.ts",
        "status": "added",
        "additions": 167,
        "deletions": 0,
        "changes": 167,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_es_419.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_es_419.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_419.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -0,0 +1,167 @@\n+<TS language=\"es_419\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    <message>\n+        <source>Right-click to edit address or label</source>\n+        <translation>Haga clic para editar la direcci\u00f3n o etiqueta</translation>\n+    </message>\n+    <message>\n+        <source>Create a new address</source>\n+        <translation>Crear una nueva direcci\u00f3n</translation>\n+    </message>\n+    <message>\n+        <source>&amp;New</source>\n+        <translation>&amp;New</translation>\n+    </message>\n+    <message>\n+        <source>Copy the currently selected address to the system clipboard</source>\n+        <translation>Copia la direcci\u00f3n seleccionada al portapapeles del sistema</translation>\n+    </message>\n+    <message>\n+        <source>Delete the currently selected address from the list</source>\n+        <translation>Borrar la direcci\u00f3n que esta seleccionada en la lista</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>Exportar los datos de la actual tabla hacia un archivo</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>Seleccione la direcci\u00f3n a la que enviar\u00e1 las monedas</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>Seleccione la direcci\u00f3n con la que recibir\u00e1 las monedas</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>Enviando direcciones</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>Recibiendo direcciones</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n+        <translation>Estas son sus direcciones de Bitcoin para enviar sus pagos. Siempre revise el monto y la direcci\u00f3n recibida antes de enviar monedas.</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>AddressTableModel</name>\n+    </context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    </context>\n+<context>\n+    <name>BanTableModel</name>\n+    </context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    </context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    </context>\n+<context>\n+    <name>Intro</name>\n+    </context>\n+<context>\n+    <name>ModalOverlay</name>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    </context>\n+<context>\n+    <name>QObject::QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    </context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>Exportar los datos de la actual tabla hacia un archivo</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    </context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "722cc561a572177b82a5fd4be46edaa044f7bd3b",
        "filename": "src/qt/locale/bitcoin_he_IL.ts",
        "status": "added",
        "additions": 203,
        "deletions": 0,
        "changes": 203,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_he_IL.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_he_IL.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_he_IL.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -0,0 +1,203 @@\n+<TS language=\"he_IL\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    <message>\n+        <source>Right-click to edit address or label</source>\n+        <translation>\u05e7\u05dc\u05d9\u05e7 \u05d9\u05de\u05e0\u05d9 \u05db\u05d3\u05d9 \u05dc\u05e2\u05e8\u05d5\u05da \u05db\u05ea\u05d5\u05d1\u05ea \u05d0\u05d5 \u05ea\u05d5\u05d5\u05d9\u05ea</translation>\n+    </message>\n+    <message>\n+        <source>Create a new address</source>\n+        <translation>\u05e6\u05d5\u05e8 \u05db\u05ea\u05d5\u05d1\u05ea \u05d7\u05d3\u05e9\u05d4</translation>\n+    </message>\n+    <message>\n+        <source>&amp;New</source>\n+        <translation>\u05d7\u05d3\u05e9</translation>\n+    </message>\n+    <message>\n+        <source>Copy the currently selected address to the system clipboard</source>\n+        <translation>\u05d4\u05e2\u05ea\u05e7 \u05d0\u05ea \u05d4\u05db\u05ea\u05d5\u05d1\u05ea \u05d4\u05e0\u05d1\u05d7\u05e8\u05ea \u05dc\u05dc\u05d5\u05d7</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy</source>\n+        <translation>\u05d4\u05e2\u05ea\u05e7</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;lose</source>\n+        <translation>\u05e1\u05d2\u05d5\u05e8</translation>\n+    </message>\n+    <message>\n+        <source>Delete the currently selected address from the list</source>\n+        <translation>\u05de\u05d7\u05e7 \u05d0\u05ea \u05d4\u05db\u05ea\u05d5\u05d1\u05ea \u05d4\u05e0\u05d1\u05d7\u05e8\u05ea \u05de\u05d4\u05e8\u05e9\u05d9\u05de\u05d4</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>\u05d9\u05e6\u05d0 \u05d0\u05ea \u05d4\u05de\u05d9\u05d3\u05e2 \u05d1\u05e2\u05de\u05d5\u05d3 \u05d4\u05e0\u05d5\u05db\u05d7\u05d9 \u05dc\u05e7\u05d5\u05d1\u05e5</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>\u05d9\u05d9\u05e6\u05d5\u05d0</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Delete</source>\n+        <translation>\u05de\u05d7\u05e7</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>\u05d1\u05d7\u05e8 \u05d0\u05ea \u05d4\u05db\u05ea\u05d5\u05d1\u05ea \u05db\u05d3\u05d9 \u05dc\u05e9\u05dc\u05d5\u05d7 \u05d0\u05dc\u05d9\u05d4 \u05de\u05d8\u05d1\u05e2\u05d5\u05ea</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>\u05d1\u05d7\u05e8 \u05d0\u05ea \u05d4\u05db\u05ea\u05d5\u05d1\u05ea \u05db\u05d3\u05d9 \u05dc\u05e7\u05d1\u05dc \u05d0\u05dc\u05d9\u05d4 \u05de\u05d8\u05d1\u05e2\u05d5\u05ea</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;hoose</source>\n+        <translation>\u05d1\u05d7\u05e8</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>\u05e9\u05d5\u05dc\u05d7 \u05db\u05ea\u05d5\u05d1\u05d5\u05ea</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>\u05de\u05e7\u05d1\u05dc \u05db\u05ea\u05d5\u05d1\u05d5\u05ea</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n+        <translation>\u05d0\u05dc\u05d5 \u05d4\u05df \u05db\u05ea\u05d5\u05d1\u05d5\u05ea \u05d4\u05d1\u05d9\u05d8\u05e7\u05d5\u05d9\u05df \u05e9\u05dc\u05da \u05dc\u05e9\u05dc\u05d9\u05d7\u05ea \u05ea\u05e9\u05dc\u05d5\u05de\u05d9\u05dd. \u05ea\u05de\u05d9\u05d3 \u05d1\u05d3\u05d5\u05e7 \u05d0\u05ea \u05db\u05ea\u05d5\u05d1\u05ea \u05d4\u05d0\u05e8\u05e0\u05e7 \u05d4\u05de\u05e7\u05d1\u05dc \u05dc\u05e4\u05e0\u05d9 \u05e9\u05dc\u05d9\u05d7\u05ea \u05de\u05d8\u05d1\u05e2\u05d5\u05ea</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.</source>\n+        <translation>\u05d0\u05dc\u05d5 \u05d4\u05df \u05db\u05ea\u05d5\u05d1\u05d5\u05ea \u05d4\u05d1\u05d9\u05d8\u05e7\u05d5\u05d9\u05df \u05e9\u05dc\u05da \u05dc\u05e7\u05d1\u05dc\u05ea \u05ea\u05e9\u05dc\u05d5\u05de\u05d9\u05dd. \u05de\u05d5\u05de\u05dc\u05e5 \u05dc\u05d4\u05e9\u05ea\u05de\u05e9 \u05d1\u05db\u05ea\u05d5\u05d1\u05ea \u05d7\u05d3\u05e9\u05d4 \u05d1\u05db\u05dc \u05d4\u05e2\u05d1\u05e8\u05ea \u05de\u05d8\u05d1\u05e2\u05d5\u05ea</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>AddressTableModel</name>\n+    </context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    </context>\n+<context>\n+    <name>BanTableModel</name>\n+    </context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    <message>\n+        <source>Bitcoin</source>\n+        <translation>\u05d1\u05d9\u05d8\u05e7\u05d5\u05d9\u05df</translation>\n+    </message>\n+    <message>\n+        <source>Wallet</source>\n+        <translation>\u05d0\u05e8\u05e0\u05e7</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    </context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    </context>\n+<context>\n+    <name>Intro</name>\n+    </context>\n+<context>\n+    <name>ModalOverlay</name>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    </context>\n+<context>\n+    <name>QObject::QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    </context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>\u05d9\u05d9\u05e6\u05d5\u05d0</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>\u05d9\u05e6\u05d0 \u05d0\u05ea \u05d4\u05de\u05d9\u05d3\u05e2 \u05d1\u05e2\u05de\u05d5\u05d3 \u05d4\u05e0\u05d5\u05db\u05d7\u05d9 \u05dc\u05e7\u05d5\u05d1\u05e5</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    </context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "1d06445e2c867cc963c418aa674a58d5d107c11a",
        "filename": "src/qt/locale/bitcoin_hi_IN.ts",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_hi_IN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_hi_IN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_hi_IN.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -11,7 +11,7 @@\n     </message>\n     <message>\n         <source>&amp;New</source>\n-        <translation>\u0928\u092f\u093e</translation>\n+        <translation>&amp;NEW</translation>\n     </message>\n     <message>\n         <source>Copy the currently selected address to the system clipboard</source>"
      },
      {
        "sha": "0d4de19e80d21777bbeba8b0ac85b03a7bc766ac",
        "filename": "src/qt/locale/bitcoin_id.ts",
        "status": "added",
        "additions": 171,
        "deletions": 0,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_id.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_id.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_id.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -0,0 +1,171 @@\n+<TS language=\"id\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    <message>\n+        <source>Right-click to edit address or label</source>\n+        <translation>Klik kanan untuk mengubah alamat atau label</translation>\n+    </message>\n+    <message>\n+        <source>Create a new address</source>\n+        <translation>Buat sebuah alamat baru</translation>\n+    </message>\n+    <message>\n+        <source>&amp;New</source>\n+        <translation>&amp;Baru</translation>\n+    </message>\n+    <message>\n+        <source>Copy the currently selected address to the system clipboard</source>\n+        <translation>Salin alamat yang dipilih ke dalam clipboard sistem</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy</source>\n+        <translation>&amp;Salin</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;lose</source>\n+        <translation>&amp;Tutup</translation>\n+    </message>\n+    <message>\n+        <source>Delete the currently selected address from the list</source>\n+        <translation>Hapus alamat yang dipilih dari daftar</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Delete</source>\n+        <translation>&amp;Hapus</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>Pilih alamat untuk mengirim koin kepada</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;hoose</source>\n+        <translation>P&amp;ilih</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>Alamat mengirim</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>Alamat menerima</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy Address</source>\n+        <translation>&amp;Salin Alamat</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>AddressTableModel</name>\n+    </context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    </context>\n+<context>\n+    <name>BanTableModel</name>\n+    </context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    </context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    </context>\n+<context>\n+    <name>Intro</name>\n+    </context>\n+<context>\n+    <name>ModalOverlay</name>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    </context>\n+<context>\n+    <name>QObject::QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    </context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    </context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "d1970597234cec6c8203ed4a34fee34209fa0a11",
        "filename": "src/qt/locale/bitcoin_ja_JP.ts",
        "status": "added",
        "additions": 2645,
        "deletions": 0,
        "changes": 2645,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_ja_JP.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_ja_JP.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ja_JP.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911"
      },
      {
        "sha": "f123d3758bed44dc21b2748df3bc6650a524fced",
        "filename": "src/qt/locale/bitcoin_my.ts",
        "status": "added",
        "additions": 163,
        "deletions": 0,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_my.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_my.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_my.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -0,0 +1,163 @@\n+<TS language=\"my\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    <message>\n+        <source>Right-click to edit address or label</source>\n+        <translation>\u101c\u102d\u1015\u103a\u1005\u102c \u101e\u102d\u102f\u1037\u1019\u101f\u102f\u1010\u103a \u1001\u1031\u102b\u1004\u103a\u1038\u1005\u1009\u103a\u1010\u1015\u103a\u101b\u1014\u103a Right-click \u1014\u103e\u102d\u1015\u103a\u1015\u102b\u104b</translation>\n+    </message>\n+    <message>\n+        <source>Create a new address</source>\n+        <translation>\u101c\u102d\u1015\u103a\u1005\u102c\u1021\u101e\u1005\u103a\u101a\u1030\u1019\u101a\u103a\u104b</translation>\n+    </message>\n+    <message>\n+        <source>&amp;New</source>\n+        <translation>&amp;\u1021\u101e\u1005\u103a</translation>\n+    </message>\n+    <message>\n+        <source>Copy the currently selected address to the system clipboard</source>\n+        <translation>\u101c\u1000\u103a\u101b\u103e\u102d\u101b\u103d\u1031\u1038\u1011\u102c\u1038\u1010\u1032\u1037 \u101c\u102d\u1015\u103a\u1005\u102c\u1000\u102d\u102f clipboard \u1015\u1031\u102b\u103a\u1010\u1004\u103a\u1019\u101a\u103a\u104b</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy</source>\n+        <translation>&amp;\u1000\u1030\u1038\u1019\u101a\u103a</translation>\n+    </message>\n+    <message>\n+        <source>Delete the currently selected address from the list</source>\n+        <translation>\u101c\u1000\u103a\u101b\u103e\u102d\u101b\u103d\u1031\u1038\u1011\u102c\u1038\u1010\u1032\u1037 \u101c\u102d\u1015\u103a\u1005\u102c\u1000\u102d\u102f \u1016\u103b\u1000\u103a\u1019\u101a\u103a\u104b</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>\u101c\u1000\u103a\u101b\u103e\u102d tab \u1019\u103e\u102c\u101b\u103e\u102d\u1010\u1032\u1037\u1012\u1031\u1010\u102c\u1010\u103d\u1031\u1000\u102d\u102f \u1016\u102d\u102f\u1004\u103a\u101c\u103a\u1019\u103e\u102c\u101e\u102d\u1019\u103a\u1038\u1019\u101a\u103a\u104b</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>&amp;\u1011\u102f\u1010\u103a\u101a\u1030\u101e\u102d\u1019\u103a\u1038\u1006\u100a\u103a\u1038</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Delete</source>\n+        <translation>&amp;\u1016\u103b\u1000\u103a</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>AddressTableModel</name>\n+    </context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    </context>\n+<context>\n+    <name>BanTableModel</name>\n+    </context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    </context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    </context>\n+<context>\n+    <name>Intro</name>\n+    </context>\n+<context>\n+    <name>ModalOverlay</name>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    </context>\n+<context>\n+    <name>QObject::QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    </context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>&amp;\u1011\u102f\u1010\u103a\u101a\u1030\u101e\u102d\u1019\u103a\u1038\u1006\u100a\u103a\u1038</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>\u101c\u1000\u103a\u101b\u103e\u102d tab \u1019\u103e\u102c\u101b\u103e\u102d\u1010\u1032\u1037\u1012\u1031\u1010\u102c\u1010\u103d\u1031\u1000\u102d\u102f \u1016\u102d\u102f\u1004\u103a\u101c\u103a\u1019\u103e\u102c\u101e\u102d\u1019\u103a\u1038\u1019\u101a\u103a\u104b</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    </context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "1b8c20443cc437a6d02120dd4fcd109c7b6fccce",
        "filename": "src/qt/locale/bitcoin_nb_NO.ts",
        "status": "added",
        "additions": 575,
        "deletions": 0,
        "changes": 575,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_nb_NO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_nb_NO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nb_NO.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -0,0 +1,575 @@\n+<TS language=\"nb_NO\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    <message>\n+        <source>Right-click to edit address or label</source>\n+        <translation>H\u00f8yreklikk for \u00e5 redigere adresse, eller beskrivelse</translation>\n+    </message>\n+    <message>\n+        <source>Create a new address</source>\n+        <translation>Opprett en ny adresse</translation>\n+    </message>\n+    <message>\n+        <source>&amp;New</source>\n+        <translation>&amp;Ny</translation>\n+    </message>\n+    <message>\n+        <source>Copy the currently selected address to the system clipboard</source>\n+        <translation>Kopier den valgte adressen til utklippstavlen</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy</source>\n+        <translation>&amp;Kopier</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;lose</source>\n+        <translation>&amp;Lukk</translation>\n+    </message>\n+    <message>\n+        <source>Delete the currently selected address from the list</source>\n+        <translation>Slett den valgte adressen fra listen</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>Eksporter data i den valgte fliken til en fil</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>&amp;Eksport</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Delete</source>\n+        <translation>&amp;Slett</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>Velg en adresse \u00e5 sende mynter til</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>Velg adressen som skal motta myntene</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;hoose</source>\n+        <translation>&amp;Velg</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>Avsender adresser</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>Mottager adresser</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n+        <translation>Dette er dine Bitcoin adresser for \u00e5 sende  \u00e5 sende betalinger. Husk \u00e5 sjekke bel\u00f8p og mottager adresser f\u00f8r du sender mynter.</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.</source>\n+        <translation>Dette er dine Bitcoin adresse for \u00e5 motta betalinger. Det er anbefalt \u00e5 bruke en ny mottager adresse for hver transaksjon.</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy Address</source>\n+        <translation>&amp;Kopier adresse</translation>\n+    </message>\n+    <message>\n+        <source>Copy &amp;Label</source>\n+        <translation>Kopier &amp;beskrivelse</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Edit</source>\n+        <translation>R&amp;ediger</translation>\n+    </message>\n+    <message>\n+        <source>Export Address List</source>\n+        <translation>Eksporter adresse listen</translation>\n+    </message>\n+    <message>\n+        <source>Comma separated file (*.csv)</source>\n+        <translation>Komma separert fil (*.csv)</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Eksporten feilet</translation>\n+    </message>\n+    <message>\n+        <source>There was an error trying to save the address list to %1. Please try again.</source>\n+        <translation>Fet oppstod en feil ved lagring av adresselisten til %1. Vennligst pr\u00f8v igjen.</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>AddressTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>Beskrivelse</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adresse</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(ingen beskrivelse)</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    <message>\n+        <source>Passphrase Dialog</source>\n+        <translation>Passord dialog</translation>\n+    </message>\n+    <message>\n+        <source>Enter passphrase</source>\n+        <translation>Oppgi passord setning</translation>\n+    </message>\n+    <message>\n+        <source>New passphrase</source>\n+        <translation>Ny passord setning</translation>\n+    </message>\n+    <message>\n+        <source>Repeat new passphrase</source>\n+        <translation>Repeter passorsetningen</translation>\n+    </message>\n+    <message>\n+        <source>Enter the new passphrase to the wallet.&lt;br/&gt;Please use a passphrase of &lt;b&gt;ten or more random characters&lt;/b&gt;, or &lt;b&gt;eight or more words&lt;/b&gt;.</source>\n+        <translation>Oppgi passordsetningen for lommeboken. &lt;br/&gt;Vennligst bruk en passordsetninge med &lt;b&gt;ti, eller flere tilfeldige tegn &lt;/b&gt;, eller &lt;b&gt;\u00e5tte, eller flere ord&lt;/b&gt;.</translation>\n+    </message>\n+    <message>\n+        <source>Encrypt wallet</source>\n+        <translation>Krypter lommeboken</translation>\n+    </message>\n+    <message>\n+        <source>This operation needs your wallet passphrase to unlock the wallet.</source>\n+        <translation>Denne operasjonen krever passordsetningen for \u00e5 l\u00e5se opp lommeboken.</translation>\n+    </message>\n+    <message>\n+        <source>Unlock wallet</source>\n+        <translation>L\u00e5s opp lommeboken</translation>\n+    </message>\n+    <message>\n+        <source>This operation needs your wallet passphrase to decrypt the wallet.</source>\n+        <translation>Denne operasjonen krever passordsetningen for \u00e5 dekryptere lommeboken.</translation>\n+    </message>\n+    <message>\n+        <source>Decrypt wallet</source>\n+        <translation>Dekrypter lommeboken</translation>\n+    </message>\n+    <message>\n+        <source>Change passphrase</source>\n+        <translation>Endre passordsetningen</translation>\n+    </message>\n+    <message>\n+        <source>Enter the old passphrase and new passphrase to the wallet.</source>\n+        <translation>Oppgi den gamle og den nye passordsetningen for lommeboken.</translation>\n+    </message>\n+    <message>\n+        <source>Confirm wallet encryption</source>\n+        <translation>Bekreft kryptering av lommeboken</translation>\n+    </message>\n+    <message>\n+        <source>Warning: If you encrypt your wallet and lose your passphrase, you will &lt;b&gt;LOSE ALL OF YOUR BITCOINS&lt;/b&gt;!</source>\n+        <translation>Advarsel: Dersom du krypterer lommeboken og mister passordsetningen vil du &lt;b&gt;MISTE ALLE DINE BITCOIN&lt;/b&gt;!</translation>\n+    </message>\n+    <message>\n+        <source>Are you sure you wish to encrypt your wallet?</source>\n+        <translation>Er du sikker p\u00e5 at du vil kryptere lommeboken?</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encrypted</source>\n+        <translation>Lommeboken er kryptert</translation>\n+    </message>\n+    <message>\n+        <source>%1 will close now to finish the encryption process. Remember that encrypting your wallet cannot fully protect your bitcoins from being stolen by malware infecting your computer.</source>\n+        <translation>%1 vil n\u00e5 lukkes for \u00e5 fullf\u00f8re krypteringsprosessen. Husk at \u00e5 kryptere lommeboken ikke kan beskytte dine bitcoin fullstendig fra \u00e5 bli stj\u00e5let av skadelig programvare som har infisert datamaskinen din.</translation>\n+    </message>\n+    <message>\n+        <source>IMPORTANT: Any previous backups you have made of your wallet file should be replaced with the newly generated, encrypted wallet file. For security reasons, previous backups of the unencrypted wallet file will become useless as soon as you start using the new, encrypted wallet.</source>\n+        <translation>VIKTIG: Alle tidligere sikkerhetskopier du har tatt av lommebokfilen b\u00f8r erstattes med den nye krypterte lommebokfilen. Av sikkerhetsgrunner vil tidligere sikkerhetskopier av lommebokfilen bli ubrukelige n\u00e5r du begynner \u00e5 bruke den ny kypterte lommeboken.</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encryption failed</source>\n+        <translation>Lommebokkrypteringen feilet</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encryption failed due to an internal error. Your wallet was not encrypted.</source>\n+        <translation>Lommebokkrypteringen feilet pga. en intern feil. Lommeboken din ble ikke kryptert.</translation>\n+    </message>\n+    <message>\n+        <source>The supplied passphrases do not match.</source>\n+        <translation>De oppgitte passordsetningene er forskjellige.</translation>\n+    </message>\n+    <message>\n+        <source>Wallet unlock failed</source>\n+        <translation>Oppl\u00e5sing av lommeboken feilet</translation>\n+    </message>\n+    <message>\n+        <source>The passphrase entered for the wallet decryption was incorrect.</source>\n+        <translation>Passordsetningen som ble oppgitt for \u00e5 dekryptere lommeboken var feil.</translation>\n+    </message>\n+    <message>\n+        <source>Wallet decryption failed</source>\n+        <translation>Dekryptering av lommeboken feilet</translation>\n+    </message>\n+    <message>\n+        <source>Wallet passphrase was successfully changed.</source>\n+        <translation>Passordsetningen for lommeboken ble endret</translation>\n+    </message>\n+    <message>\n+        <source>Warning: The Caps Lock key is on!</source>\n+        <translation>Advarsel: Caps Lock er p\u00e5!</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>BanTableModel</name>\n+    <message>\n+        <source>IP/Netmask</source>\n+        <translation>IP/Nettmaske</translation>\n+    </message>\n+    <message>\n+        <source>Banned Until</source>\n+        <translation>Utestengt Til</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    <message>\n+        <source>Sign &amp;message...</source>\n+        <translation>Signer &amp;melding</translation>\n+    </message>\n+    <message>\n+        <source>Synchronizing with network...</source>\n+        <translation>Synkroniserer med nettverket</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Overview</source>\n+        <translation>&amp;Oversikt</translation>\n+    </message>\n+    <message>\n+        <source>Node</source>\n+        <translation>Node</translation>\n+    </message>\n+    <message>\n+        <source>Show general overview of wallet</source>\n+        <translation>Vis generell oversikt over lommeboken</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Transactions</source>\n+        <translation>&amp;Transaksjoner</translation>\n+    </message>\n+    <message>\n+        <source>Browse transaction history</source>\n+        <translation>Bla gjennom transaksjoner</translation>\n+    </message>\n+    <message>\n+        <source>E&amp;xit</source>\n+        <translation>&amp;Avslutt</translation>\n+    </message>\n+    <message>\n+        <source>Quit application</source>\n+        <translation>Avslutt program</translation>\n+    </message>\n+    <message>\n+        <source>&amp;About %1</source>\n+        <translation>&amp;Om %1</translation>\n+    </message>\n+    <message>\n+        <source>Show information about %1</source>\n+        <translation>Vis informasjon om %1</translation>\n+    </message>\n+    <message>\n+        <source>About &amp;Qt</source>\n+        <translation>Om &amp;Qt</translation>\n+    </message>\n+    <message>\n+        <source>Show information about Qt</source>\n+        <translation>Vis informasjon om Qt</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Options...</source>\n+        <translation>&amp;Valg</translation>\n+    </message>\n+    <message>\n+        <source>Modify configuration options for %1</source>\n+        <translation>Endre konfigurasjonsalternativer for %1</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Encrypt Wallet...</source>\n+        <translation>&amp;Krypter lommebok...</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Backup Wallet...</source>\n+        <translation>&amp;Sikkerhetskopier lommebok</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Change Passphrase...</source>\n+        <translation>&amp;Endre passordsetning</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Sending addresses...</source>\n+        <translation>&amp;Avsender adresser</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Receiving addresses...</source>\n+        <translation>&amp;Mottager adresser</translation>\n+    </message>\n+    <message>\n+        <source>Open &amp;URI...</source>\n+        <translation>\u00c5pne &amp;URI</translation>\n+    </message>\n+    <message>\n+        <source>Click to disable network activity.</source>\n+        <translation>Klikk for \u00e5 sl\u00e5 av nettverksaktivitet.</translation>\n+    </message>\n+    <message>\n+        <source>Network activity disabled.</source>\n+        <translation>Nettverksaktivitet er sl\u00e5tt av</translation>\n+    </message>\n+    <message>\n+        <source>Click to enable network activity again.</source>\n+        <translation>Klikk for \u00e5 sl\u00e5 p\u00e5 nettverksaktivitet igjen.</translation>\n+    </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Synkroniserer Headers (%1%)...</translation>\n+    </message>\n+    <message>\n+        <source>Reindexing blocks on disk...</source>\n+        <translation>Reindekserer blokker p\u00e5 disken</translation>\n+    </message>\n+    <message>\n+        <source>Send coins to a Bitcoin address</source>\n+        <translation>Send mynter til en Bitcoin adresse</translation>\n+    </message>\n+    <message>\n+        <source>Backup wallet to another location</source>\n+        <translation>Sikkerhetskopier lommeboken til en annen lokasjon</translation>\n+    </message>\n+    <message>\n+        <source>Change the passphrase used for wallet encryption</source>\n+        <translation>Endre passordsetningen for kryptering av lommeboken</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Debug window</source>\n+        <translation>&amp;Feils\u00f8kingsvindu</translation>\n+    </message>\n+    <message>\n+        <source>Open debugging and diagnostic console</source>\n+        <translation>\u00c5pne konsoll for feils\u00f8king og diagnostisering</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Verify message...</source>\n+        <translation>&amp;Verifiser meldingen...</translation>\n+    </message>\n+    <message>\n+        <source>Bitcoin</source>\n+        <translation>Bitcoin</translation>\n+    </message>\n+    <message>\n+        <source>Wallet</source>\n+        <translation>Lommebok</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Send</source>\n+        <translation>&amp;Sende</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Receive</source>\n+        <translation>&amp;Motta</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Show / Hide</source>\n+        <translation>Vi&amp;s / Skjul</translation>\n+    </message>\n+    <message>\n+        <source>Show or hide the main Window</source>\n+        <translation>Vis, eller skjul, hovedvinduet</translation>\n+    </message>\n+    <message>\n+        <source>Encrypt the private keys that belong to your wallet</source>\n+        <translation>Krypter de private n\u00f8klene som tilh\u00f8rer lommeboken din</translation>\n+    </message>\n+    <message>\n+        <source>Sign messages with your Bitcoin addresses to prove you own them</source>\n+        <translation>Signer meldingene med Bitcoin adresse for \u00e5 bevise at diu eier dem</translation>\n+    </message>\n+    <message>\n+        <source>Verify messages to ensure they were signed with specified Bitcoin addresses</source>\n+        <translation>Verifiser meldinger for \u00e5 sikre at de ble signert med en angitt Bitcoin adresse</translation>\n+    </message>\n+    <message>\n+        <source>&amp;File</source>\n+        <translation>&amp;Fil</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Settings</source>\n+        <translation>In&amp;stillinger</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Help</source>\n+        <translation>&amp;Hjelp</translation>\n+    </message>\n+    <message>\n+        <source>Tabs toolbar</source>\n+        <translation>Hjelpelinje for fliker</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(ingen beskrivelse)</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    </context>\n+<context>\n+    <name>Intro</name>\n+    </context>\n+<context>\n+    <name>ModalOverlay</name>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    </context>\n+<context>\n+    <name>QObject::QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adresse</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Beskrivelse</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>Beskrivelse</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(ingen beskrivelse)</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(ingen beskrivelse)</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    </context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>Beskrivelse</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(ingen beskrivelse)</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    <message>\n+        <source>Comma separated file (*.csv)</source>\n+        <translation>Komma separert fil (*.csv)</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Beskrivelse</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adresse</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Eksporten feilet</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>&amp;Eksport</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>Eksporter data i den valgte fliken til en fil</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    </context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "dbd68c0b354ae06fa2fd59188455e20289aba2fc",
        "filename": "src/qt/locale/bitcoin_nl_NL.ts",
        "status": "added",
        "additions": 199,
        "deletions": 0,
        "changes": 199,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_nl_NL.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_nl_NL.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nl_NL.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -0,0 +1,199 @@\n+<TS language=\"nl_NL\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    <message>\n+        <source>Right-click to edit address or label</source>\n+        <translation>Klik met de rechter muisknop om dit adres of label te veranderen</translation>\n+    </message>\n+    <message>\n+        <source>Create a new address</source>\n+        <translation>Maak een nieuw adres aan</translation>\n+    </message>\n+    <message>\n+        <source>&amp;New</source>\n+        <translation>&amp;Nieuw</translation>\n+    </message>\n+    <message>\n+        <source>Copy the currently selected address to the system clipboard</source>\n+        <translation>Kopieer het geselecteerde adres naar het klembord</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy</source>\n+        <translation>&amp;Kopieren</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;lose</source>\n+        <translation>S&amp;luiten</translation>\n+    </message>\n+    <message>\n+        <source>Delete the currently selected address from the list</source>\n+        <translation>Verwijder het geselecteerde adres uit de lijst</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>Exporteer de data in dit tab naar een bestand</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>&amp;Exporteer</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Delete</source>\n+        <translation>&amp;Verwijderen</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>Selecteer het adres om munten naar toe te sturen.</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>Selecteer het adres om munten mee te ontvangen.</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;hoose</source>\n+        <translation>S&amp;electeren</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>Verzendadres</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>Ontvangstadres</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n+        <translation>Dit zijn uw Bitcoin adressen voor het versturen van betalingen. Controleer altijd het bedrag en het ontvangstadres voordat u munten verstuurd.</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.</source>\n+        <translation>Dit zijn uw Bitcoin adressen voor het ontvangen van betalingen. Het wordt aanbevolen om voor elke transactie een nieuw ontvangstadres te gebruiken.</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy Address</source>\n+        <translation>&amp;Adres Kopi\u00ebren</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>AddressTableModel</name>\n+    </context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    </context>\n+<context>\n+    <name>BanTableModel</name>\n+    </context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    </context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    </context>\n+<context>\n+    <name>Intro</name>\n+    </context>\n+<context>\n+    <name>ModalOverlay</name>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    </context>\n+<context>\n+    <name>QObject::QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    </context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>&amp;Exporteer</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>Exporteer de data in dit tab naar een bestand</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    </context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "c7355e626f6dc928c93993ce1b151307e7f02c28",
        "filename": "src/qt/locale/bitcoin_pl.ts",
        "status": "modified",
        "additions": 37,
        "deletions": 1,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_pl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_pl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pl.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -889,6 +889,10 @@\n         <source>Recent transactions may not yet be visible, and therefore your wallet's balance might be incorrect. This information will be correct once your wallet has finished synchronizing with the bitcoin network, as detailed below.</source>\n         <translation>\u015awie\u017ce transakcje mog\u0105 nie by\u0107 jeszcze widoczne, a zatem saldo portfela mo\u017ce by\u0107 nieprawid\u0142owe. Te detale b\u0119d\u0105 poprawne, gdy portfel zako\u0144czy synchronizacj\u0119 z sieci\u0105 bitcoin, zgodnie z poni\u017cszym opisem.</translation>\n     </message>\n+    <message>\n+        <source>Attempting to spend bitcoins that are affected by not-yet-displayed transactions will not be accepted by the network.</source>\n+        <translation>Pr\u00f3ba wydania bitcoin\u00f3w kt\u00f3re nie s\u0105 jeszcze wy\u015bwietlone jako transakcja zostanie odrzucona przez sie\u0107. </translation>\n+    </message>\n     <message>\n         <source>Number of blocks left</source>\n         <translation>Pozosta\u0142o blok\u00f3w</translation>\n@@ -1688,6 +1692,10 @@\n         <source>Type &lt;b&gt;help&lt;/b&gt; for an overview of available commands.</source>\n         <translation>Wpisz &lt;b&gt;help&lt;/b&gt; aby uzyska\u0107 list\u0119 dost\u0119pnych komend</translation>\n     </message>\n+    <message>\n+        <source>Network activity disabled</source>\n+        <translation>Aktywno\u015b\u0107 sieciowa wy\u0142\u0105czona</translation>\n+    </message>\n     <message>\n         <source>%1 B</source>\n         <translation>%1 B</translation>\n@@ -1870,7 +1878,11 @@\n         <source>Message</source>\n         <translation>Wiadomo\u015b\u0107</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Error encoding URI into QR Code.</source>\n+        <translation>B\u0142\u0105d kodowania URI w kod QR</translation>\n+    </message>\n+</context>\n <context>\n     <name>RecentRequestsTableModel</name>\n     <message>\n@@ -2120,6 +2132,14 @@\n         <source>Transaction creation failed!</source>\n         <translation>Utworzenie transakcji nie powiod\u0142o si\u0119!</translation>\n     </message>\n+    <message>\n+        <source>The transaction was rejected with the following reason: %1</source>\n+        <translation>Transakcja zosta\u0142a odrzucona z nast\u0119puj\u0105cym powodem: %1</translation>\n+    </message>\n+    <message>\n+        <source>A fee higher than %1 is considered an absurdly high fee.</source>\n+        <translation>Op\u0142ata wy\u017csza ni\u017c %1 jest uznawana za absurdalnie du\u017c\u0105.</translation>\n+    </message>\n     <message>\n         <source>Payment request expired.</source>\n         <translation>\u017b\u0105danie p\u0142atno\u015bci up\u0142yn\u0119\u0142o.</translation>\n@@ -3278,6 +3298,10 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Set key pool size to &lt;n&gt; (default: %u)</source>\n         <translation>Ustaw rozmiar puli kluczy na &lt;n&gt; (domy\u015blnie: %u)</translation>\n     </message>\n+    <message>\n+        <source>Set maximum BIP141 block weight (default: %d)</source>\n+        <translation>ustawienie maksymalnego rozmiaru bloku BIP141 (domy\u015blnie: %d)</translation>\n+    </message>\n     <message>\n         <source>Set the number of threads to service RPC calls (default: %d)</source>\n         <translation>Ustaw liczb\u0119 w\u0105tk\u00f3w do obs\u0142ugi RPC (domy\u015blnie: %d)</translation>\n@@ -3298,6 +3322,18 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Spend unconfirmed change when sending transactions (default: %u)</source>\n         <translation>Wydawaj niepotwierdzon\u0105 reszt\u0119 podczas wysy\u0142ania transakcji (domy\u015blnie: %u)</translation>\n     </message>\n+    <message>\n+        <source>The wallet will avoid paying less than the minimum relay fee.</source>\n+        <translation>Portfel b\u0119dzie unika\u0142 p\u0142acenia mniejszej ni\u017c przekazana op\u0142aty.</translation>\n+    </message>\n+    <message>\n+        <source>This is the minimum transaction fee you pay on every transaction.</source>\n+        <translation>Minimalna op\u0142ata transakcyjna kt\u00f3r\u0105 p\u0142acisz przy ka\u017cdej transakcji.</translation>\n+    </message>\n+    <message>\n+        <source>This is the transaction fee you will pay if you send a transaction.</source>\n+        <translation>To jest op\u0142ata transakcyjna kt\u00f3r\u0105 zap\u0142acisz je\u015bli wy\u015blesz transakcj\u0119. </translation>\n+    </message>\n     <message>\n         <source>Threshold for disconnecting misbehaving peers (default: %u)</source>\n         <translation>Pr\u00f3g, po kt\u00f3rym nast\u0105pi roz\u0142\u0105czenie w\u0119z\u0142\u00f3w nietrzymaj\u0105cych si\u0119 zasad (domy\u015blnie: %u)</translation>"
      },
      {
        "sha": "7ec31194b0564c59565e54310cdee7a81aa39456",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -3,7 +3,7 @@\n     <name>AddressBookPage</name>\n     <message>\n         <source>Right-click to edit address or label</source>\n-        <translation>Clique com o bot\u00e3o direito para editar o endere\u00e7o ou r\u00f3tulo</translation>\n+        <translation>Clique com o bot\u00e3o direito para editar o endere\u00e7o ou r\u00f3tulocabe\u00e7a</translation>\n     </message>\n     <message>\n         <source>Create a new address</source>\n@@ -327,7 +327,7 @@\n     </message>\n     <message>\n         <source>Syncing Headers (%1%)...</source>\n-        <translation>Sincronizando cabe\u00e7ahos (%1%)...</translation>\n+        <translation>Sincronizando cabe\u00e7alhos (%1%)...</translation>\n     </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n@@ -923,7 +923,7 @@\n     </message>\n     <message>\n         <source>Unknown. Syncing Headers (%1)...</source>\n-        <translation>Desconhecido. Sincroniando cabe\u00e7ahos (%1)...</translation>\n+        <translation>Desconhecido. Sincronizando cabe\u00e7alhos (%1)...</translation>\n     </message>\n </context>\n <context>"
      },
      {
        "sha": "3202c3614c9e1f4a3eb58fd44b6de6f9729887d4",
        "filename": "src/qt/locale/bitcoin_si.ts",
        "status": "added",
        "additions": 319,
        "deletions": 0,
        "changes": 319,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_si.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_si.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_si.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -0,0 +1,319 @@\n+<TS language=\"si\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    <message>\n+        <source>Create a new address</source>\n+        <translation>\u0db1\u0dc0 \u0dbd\u0dd2\u0db4\u0dd2\u0db1\u0dba\u0d9a\u0dca \u0dc3\u0dcf\u0daf\u0db1\u0dca\u0db1</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>\u0d9a\u0dcf\u0dc3\u0dd2 \u0dba\u0dd0\u0dc0\u0dd2\u0dba \u0dba\u0dd4\u0dad\u0dd4 \u0dbd\u0dd2\u0db4\u0dd2\u0db1\u0dba \u0dad\u0ddd\u0dbb\u0db1\u0dca\u0db1</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>\u0d9a\u0dcf\u0dc3\u0dd2 \u0dbd\u0dd0\u0db6\u0dd2\u0dba \u0dba\u0dd4\u0dad\u0dd4 \u0dbd\u0dd2\u0db4\u0dd2\u0db1\u0dba \u0dad\u0ddd\u0dbb\u0db1\u0dca\u0db1</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>\u0dba\u0dc0\u0db1 \u0dbd\u0dd2\u0db4\u0dd2\u0db1</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>\u0dbd\u0db6\u0db1 \u0dbd\u0dd2\u0db4\u0dd2\u0db1</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>AddressTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>\u0dbd\u0dda\u0db6\u0dbd\u0dba</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>\u0dbd\u0dd2\u0db4\u0dd2\u0db1\u0dba</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(\u0dbd\u0dda\u0db6\u0dbd\u0dba\u0d9a\u0dca \u0db1\u0dd0\u0dad)</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    </context>\n+<context>\n+    <name>BanTableModel</name>\n+    </context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    <message>\n+        <source>Warning</source>\n+        <translation>\u0d85\u0dc0\u0dc0\u0dcf\u0daf\u0dba</translation>\n+    </message>\n+    <message>\n+        <source>Information</source>\n+        <translation>\u0dad\u0ddc\u0dbb\u0dad\u0dd4\u0dbb</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    <message>\n+        <source>Quantity:</source>\n+        <translation>\u0db4\u0dca\u200d\u0dbb\u0db8\u0dcf\u0dab\u0dba:</translation>\n+    </message>\n+    <message>\n+        <source>Bytes:</source>\n+        <translation>\u0db6\u0dba\u0dd2\u0da7\u0dca\u0dc3\u0dca:</translation>\n+    </message>\n+    <message>\n+        <source>Amount:</source>\n+        <translation>\u0d85\u0d9c\u0dba:</translation>\n+    </message>\n+    <message>\n+        <source>Fee:</source>\n+        <translation>\u0d9c\u0dcf\u0dc3\u0dca\u0dad\u0dd4\u0dc0:</translation>\n+    </message>\n+    <message>\n+        <source>Amount</source>\n+        <translation>\u0d85\u0d9c\u0dba</translation>\n+    </message>\n+    <message>\n+        <source>Date</source>\n+        <translation>\u0daf\u0dd2\u0db1\u0dba</translation>\n+    </message>\n+    <message>\n+        <source>yes</source>\n+        <translation>\u0d94\u0dc0\u0dca</translation>\n+    </message>\n+    <message>\n+        <source>no</source>\n+        <translation>\u0db1\u0dd0\u0dad</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(\u0dbd\u0dda\u0db6\u0dbd\u0dba\u0d9a\u0dca \u0db1\u0dd0\u0dad)</translation>\n+    </message>\n+    <message>\n+        <source>(change)</source>\n+        <translation>(\u0dc0\u0dd9\u0db1\u0dc3)</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    <message>\n+        <source>name</source>\n+        <translation>\u0db1\u0db8</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    </context>\n+<context>\n+    <name>Intro</name>\n+    <message>\n+        <source>Welcome</source>\n+        <translation>\u0d86\u0dba\u0dd4\u0db6\u0ddd\u0dc0\u0db1\u0dca</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>ModalOverlay</name>\n+    <message>\n+        <source>calculating...</source>\n+        <translation>\u0d9c\u0dab\u0db1\u0db1\u0dba \u0d9a\u0dbb\u0db8\u0dd2\u0db1\u0dca...</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    <message>\n+        <source>URI:</source>\n+        <translation>URI:</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    <message>\n+        <source>MB</source>\n+        <translation>MB</translation>\n+    </message>\n+    <message>\n+        <source>IPv4</source>\n+        <translation>IPv4</translation>\n+    </message>\n+    <message>\n+        <source>IPv6</source>\n+        <translation>IPv6</translation>\n+    </message>\n+    <message>\n+        <source>Tor</source>\n+        <translation>Tor</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    <message>\n+        <source>Amount</source>\n+        <translation>\u0d85\u0d9c\u0dba</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>QObject::QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    <message>\n+        <source>Address</source>\n+        <translation>\u0dbd\u0dd2\u0db4\u0dd2\u0db1\u0dba</translation>\n+    </message>\n+    <message>\n+        <source>Amount</source>\n+        <translation>\u0d85\u0d9c\u0dba</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>\u0dbd\u0dda\u0db6\u0dbd\u0dba</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>\u0daf\u0dd2\u0db1\u0dba</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>\u0dbd\u0dda\u0db6\u0dbd\u0dba</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(\u0dbd\u0dda\u0db6\u0dbd\u0dba\u0d9a\u0dca \u0db1\u0dd0\u0dad)</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    <message>\n+        <source>Quantity:</source>\n+        <translation>\u0db4\u0dca\u200d\u0dbb\u0db8\u0dcf\u0dab\u0dba:</translation>\n+    </message>\n+    <message>\n+        <source>Bytes:</source>\n+        <translation>\u0db6\u0dba\u0dd2\u0da7\u0dca\u0dc3\u0dca:</translation>\n+    </message>\n+    <message>\n+        <source>Amount:</source>\n+        <translation>\u0d85\u0d9c\u0dba:</translation>\n+    </message>\n+    <message>\n+        <source>Fee:</source>\n+        <translation>\u0d9c\u0dcf\u0dc3\u0dca\u0dad\u0dd4\u0dc0:</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(\u0dbd\u0dda\u0db6\u0dbd\u0dba\u0d9a\u0dca \u0db1\u0dd0\u0dad)</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    </context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>\u0daf\u0dd2\u0db1\u0dba</translation>\n+    </message>\n+    <message>\n+        <source>Amount</source>\n+        <translation>\u0d85\u0d9c\u0dba</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>\u0daf\u0dd2\u0db1\u0dba</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>\u0dbd\u0dda\u0db6\u0dbd\u0dba</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(\u0dbd\u0dda\u0db6\u0dbd\u0dba\u0d9a\u0dca \u0db1\u0dd0\u0dad)</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>\u0daf\u0dd2\u0db1\u0dba</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>\u0dbd\u0dda\u0db6\u0dbd\u0dba</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>\u0dbd\u0dd2\u0db4\u0dd2\u0db1\u0dba</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    <message>\n+        <source>Information</source>\n+        <translation>\u0dad\u0ddc\u0dbb\u0dad\u0dd4\u0dbb</translation>\n+    </message>\n+    <message>\n+        <source>Warning</source>\n+        <translation>\u0d85\u0dc0\u0dc0\u0dcf\u0daf\u0dba</translation>\n+    </message>\n+    </context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "9e539a68cac2a6c16538716e83ab64848deb7988",
        "filename": "src/qt/locale/bitcoin_sr@latin.ts",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_sr@latin.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_sr@latin.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sr@latin.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -41,6 +41,38 @@\n         <source>&amp;Delete</source>\n         <translation>&amp;Izbrisati</translation>\n     </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>Izaberite adresu za slanje nov\u010di\u0107a</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>Izaberite adresu za prijem nov\u010di\u0107a</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>Adresa na koju se \u0161alje</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>Adresa na koju se prima</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n+        <translation>Ovo su Va\u0161e Bitcoin adrese na koju se vr\u0161e uplate. Uvek proverite iznos i prijemnu adresu pre slanja nov\u010di\u0107a</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.</source>\n+        <translation>Ovo su Va\u0161e Bitcoin adrese za primanje uplata. Preporu\u010duje se upotreba nove adrese za svaku transakciju.</translation>\n+    </message>\n+    <message>\n+        <source>Copy &amp;Label</source>\n+        <translation>Kopiranje &amp;Oznaka</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Edit</source>\n+        <translation>&amp;Izmena</translation>\n+    </message>\n     </context>\n <context>\n     <name>AddressTableModel</name>\n@@ -137,6 +169,14 @@\n         <source>Quit application</source>\n         <translation>Isklju\u010di aplikaciju</translation>\n     </message>\n+    <message>\n+        <source>&amp;About %1</source>\n+        <translation>&amp;Otprilike %1</translation>\n+    </message>\n+    <message>\n+        <source>Show information about %1</source>\n+        <translation>Prika\u017ei informacije za otprilike %1</translation>\n+    </message>\n     <message>\n         <source>&amp;Options...</source>\n         <translation>&amp;Opcije...</translation>"
      },
      {
        "sha": "290d72a599de59f7d94ad693a58ed99a3f528ce0",
        "filename": "src/qt/locale/bitcoin_te.ts",
        "status": "added",
        "additions": 279,
        "deletions": 0,
        "changes": 279,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_te.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_te.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_te.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -0,0 +1,279 @@\n+<TS language=\"te\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    <message>\n+        <source>Right-click to edit address or label</source>\n+        <translation>\u0c1a\u0c3f\u0c30\u0c41\u0c28\u0c3e\u0c2e\u0c3e \u0c32\u0c47\u0c26\u0c3e \u0c32\u0c47\u0c2c\u0c41\u0c32\u0c4d \u0c38\u0c35\u0c30\u0c3f\u0c02\u0c1a\u0c21\u0c3e\u0c28\u0c3f\u0c15\u0c3f \u0c30\u0c48\u0c1f\u0c4d-\u0c15\u0c4d\u0c32\u0c3f\u0c15\u0c4d \u0c1a\u0c47\u0c2f\u0c02\u0c21\u0c3f</translation>\n+    </message>\n+    <message>\n+        <source>Create a new address</source>\n+        <translation>\u0c15\u0c4d\u0c30\u0c4a\u0c24\u0c4d\u0c24 \u0c1a\u0c3f\u0c30\u0c41\u0c28\u0c3e\u0c2e\u0c3e \u0c38\u0c43\u0c37\u0c4d\u0c1f\u0c3f\u0c02\u0c1a\u0c02\u0c21\u0c3f</translation>\n+    </message>\n+    <message>\n+        <source>&amp;New</source>\n+        <translation>&amp;\u0c15\u0c4d\u0c30\u0c4a\u0c24\u0c4d\u0c24</translation>\n+    </message>\n+    <message>\n+        <source>Copy the currently selected address to the system clipboard</source>\n+        <translation>\u0c2a\u0c4d\u0c30\u0c38\u0c4d\u0c24\u0c41\u0c24\u0c02 \u0c0e\u0c02\u0c1a\u0c41\u0c15\u0c41\u0c28\u0c4d\u0c28 \u0c1a\u0c3f\u0c30\u0c41\u0c28\u0c3e\u0c2e\u0c3e\u0c28\u0c41 \u0c38\u0c3f\u0c38\u0c4d\u0c1f\u0c02 \u0c15\u0c4d\u0c32\u0c3f\u0c2a\u0c4d \u0c2c\u0c4b\u0c30\u0c4d\u0c21\u0c41\u0c15\u0c41 \u0c15\u0c3e\u0c2a\u0c40 \u0c1a\u0c47\u0c2f\u0c02\u0c21\u0c3f</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy</source>\n+        <translation>&amp;\u0c15\u0c3e\u0c2a\u0c3f</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;lose</source>\n+        <translation>C&amp;\u0c15\u0c4b\u0c32\u0c4d\u0c2a\u0c4b\u0c35\u0c41</translation>\n+    </message>\n+    <message>\n+        <source>Delete the currently selected address from the list</source>\n+        <translation>\u0c2a\u0c4d\u0c30\u0c38\u0c4d\u0c24\u0c41\u0c24\u0c02 \u0c0e\u0c02\u0c1a\u0c41\u0c15\u0c41\u0c28\u0c4d\u0c28 \u0c1a\u0c3f\u0c30\u0c41\u0c28\u0c3e\u0c2e\u0c3e \u0c28\u0c41 \u0c1c\u0c3e\u0c2c\u0c3f\u0c24\u0c3e \u0c28\u0c41\u0c02\u0c21\u0c3f \u0c24\u0c40\u0c38\u0c3f\u0c35\u0c47\u0c2f\u0c02\u0c21\u0c3f</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>\u0c2a\u0c02\u0c2a\u0c3f\u0c02\u0c1a\u0c47 \u0c1a\u0c3f\u0c30\u0c41\u0c28\u0c3e\u0c2e\u0c3e\u0c32\u0c41</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>\u0c05\u0c02\u0c26\u0c41\u0c15\u0c41\u0c28\u0c47 \u0c1a\u0c3f\u0c30\u0c41\u0c28\u0c3e\u0c2e\u0c3e\u0c32\u0c41</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n+        <translation>\u0c07\u0c35\u0c3f \u0c2e\u0c40\u0c30\u0c41 \u0c2a\u0c02\u0c2a\u0c47 \u0c1a\u0c46\u0c32\u0c4d\u0c32\u0c3f\u0c02\u0c2a\u0c41\u0c32 \u0c2c\u0c3f\u0c1f\u0c4d\u200c\u0c15\u0c3e\u0c2f\u0c3f\u0c28\u0c4d \u0c1a\u0c3f\u0c30\u0c41\u0c28\u0c3e\u0c2e\u0c3e\u0c32\u0c41. \u0c28\u0c3e\u0c23\u0c47\u0c32\u0c41 \u0c2a\u0c02\u0c2a\u0c47 \u0c2e\u0c41\u0c02\u0c26\u0c41 \u0c2a\u0c4d\u0c30\u0c24\u0c3f\u0c38\u0c3e\u0c30\u0c3f \u0c05\u0c02\u0c26\u0c41\u0c15\u0c41\u0c28\u0c47 \u0c1a\u0c3f\u0c30\u0c41\u0c28\u0c3e\u0c2e\u0c3e \u0c2e\u0c30\u0c3f\u0c2f\u0c41 \u0c1a\u0c46\u0c32\u0c4d\u0c32\u0c3f\u0c02\u0c2a\u0c41 \u0c2e\u0c4a\u0c24\u0c4d\u0c24\u0c02 \u0c38\u0c30\u0c3f\u0c1a\u0c42\u0c38\u0c41\u0c15\u0c4b\u0c02\u0c21\u0c3f.</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.</source>\n+        <translation>\u0c07\u0c35\u0c3f \u0c2e\u0c40\u0c30\u0c41 \u0c05\u0c02\u0c26\u0c41\u0c15\u0c41\u0c28\u0c47 \u0c1a\u0c46\u0c32\u0c4d\u0c32\u0c3f\u0c02\u0c2a\u0c41\u0c32 \u0c2c\u0c3f\u0c1f\u0c4d\u200c\u0c15\u0c3e\u0c2f\u0c3f\u0c28\u0c4d \u0c1a\u0c3f\u0c30\u0c41\u0c28\u0c3e\u0c2e\u0c3e\u0c32\u0c41. \u0c2a\u0c4d\u0c30\u0c24\u0c40 \u0c32\u0c3e\u0c35\u0c3e\u0c26\u0c47\u0c35\u0c40\u0c15\u0c3f \u0c15\u0c4d\u0c30\u0c4a\u0c24\u0c4d\u0c24 \u0c05\u0c02\u0c26\u0c41\u0c15\u0c41\u0c28\u0c47 \u0c1a\u0c3f\u0c30\u0c41\u0c28\u0c3e\u0c2e\u0c3e \u0c35\u0c3e\u0c21\u0c1f\u0c02 \u0c2e\u0c02\u0c1a\u0c3f\u0c26\u0c3f.</translation>\n+    </message>\n+    <message>\n+        <source>Export Address List</source>\n+        <translation>\u0c1a\u0c3f\u0c30\u0c41\u0c28\u0c3e\u0c2e\u0c3e \u0c1c\u0c3e\u0c2c\u0c3f\u0c24\u0c3e\u0c28\u0c41 \u0c0e\u0c17\u0c41\u0c2e\u0c24\u0c3f \u0c1a\u0c47\u0c2f\u0c02\u0c21\u0c3f</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>\u0c0e\u0c17\u0c41\u0c2e\u0c24\u0c3f \u0c35\u0c3f\u0c2b\u0c32\u0c2e\u0c2f\u0c4d\u0c2f\u0c3f\u0c02\u0c26\u0c3f</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>AddressTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>\u0c09\u0c32\u0c4d\u0c32\u0c3e\u0c15\u0c41</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    <message>\n+        <source>Passphrase Dialog</source>\n+        <translation>\u0c38\u0c02\u0c15\u0c47\u0c24\u0c2a\u0c26\u0c2e\u0c41 \u0c21\u0c46\u0c56\u0c32\u0c3e\u0c17\u0c4d</translation>\n+    </message>\n+    <message>\n+        <source>Enter passphrase</source>\n+        <translation>\u0c38\u0c02\u0c15\u0c47\u0c24\u0c2a\u0c26\u0c2e\u0c41 \u0c1a\u0c47\u0c30\u0c4d\u0c1a\u0c02\u0c21\u0c3f</translation>\n+    </message>\n+    <message>\n+        <source>New passphrase</source>\n+        <translation>\u0c15\u0c4d\u0c30\u0c4a\u0c24\u0c4d\u0c24 \u0c38\u0c02\u0c15\u0c47\u0c24\u0c2a\u0c26\u0c2e\u0c41</translation>\n+    </message>\n+    <message>\n+        <source>Repeat new passphrase</source>\n+        <translation>\u0c15\u0c4d\u0c30\u0c4a\u0c24\u0c4d\u0c24 \u0c38\u0c02\u0c15\u0c47\u0c24\u0c2a\u0c26\u0c2e\u0c41 \u0c2e\u0c30\u0c32\u0c3e \u0c07\u0c35\u0c4d\u0c35\u0c02\u0c21\u0c3f</translation>\n+    </message>\n+    <message>\n+        <source>Enter the new passphrase to the wallet.&lt;br/&gt;Please use a passphrase of &lt;b&gt;ten or more random characters&lt;/b&gt;, or &lt;b&gt;eight or more words&lt;/b&gt;.</source>\n+        <translation>\u0c1c\u0c4b\u0c32\u0c46\u0c15\u0c41 \u0c15\u0c4d\u0c30\u0c4a\u0c24\u0c4d\u0c24 \u0c38\u0c02\u0c15\u0c47\u0c24\u0c2a\u0c26\u0c2e\u0c41 \u0c07\u0c35\u0c4d\u0c35\u0c02\u0c21\u0c3f.&lt;br/&gt; &lt;b&gt;\u0c2a\u0c26\u0c3f \u0c32\u0c47\u0c26\u0c3e \u0c0e\u0c15\u0c4d\u0c15\u0c41\u0c35 \u0c2f\u0c3e\u0c26\u0c43\u0c1a\u0c4d\u0c1b\u0c3f\u0c15 \u0c05\u0c15\u0c4d\u0c37\u0c30\u0c3e\u0c32\u0c41&lt;/b&gt;, \u0c32\u0c47\u0c15 &lt;b&gt;\u0c0e\u0c28\u0c3f\u0c2e\u0c3f\u0c26\u0c3f \u0c15\u0c02\u0c1f\u0c47 \u0c0e\u0c15\u0c4d\u0c15\u0c41\u0c35 \u0c2a\u0c26\u0c3e\u0c32\u0c41&lt;/b&gt; \u0c15\u0c32\u0c3f\u0c17\u0c3f \u0c09\u0c28\u0c4d\u0c28\u00a0\u0c38\u0c02\u0c15\u0c47\u0c24\u0c2a\u0c26\u0c2e\u0c41 \u0c26\u0c2f\u0c1a\u0c47\u0c38\u0c3f \u0c35\u0c3e\u0c21\u0c02\u0c21\u0c3f.</translation>\n+    </message>\n+    <message>\n+        <source>Warning: If you encrypt your wallet and lose your passphrase, you will &lt;b&gt;LOSE ALL OF YOUR BITCOINS&lt;/b&gt;!</source>\n+        <translation>\u0c39\u0c46\u0c1a\u0c4d\u0c1a\u0c30\u0c3f\u0c15: \u0c2e\u0c40 \u0c1c\u0c4b\u0c32\u0c46\u0c28\u0c3f \u0c38\u0c02\u0c15\u0c47\u0c24\u0c2a\u0c30\u0c3f\u0c1a\u0c3f \u0c2e\u0c40 \u0c38\u0c02\u0c15\u0c47\u0c24\u0c2a\u0c26\u0c2e\u0c41 \u0c15\u0c4b\u0c32\u0c4d\u0c2a\u0c4b\u0c24\u0c47, &lt;b&gt;\u0c2e\u0c40 \u0c2c\u0c3f\u0c1f\u0c4d\u200c\u0c15\u0c3e\u0c2f\u0c3f\u0c28\u0c4d\u0c32\u0c41 \u0c05\u0c28\u0c4d\u0c28\u0c40 \u0c15\u0c4b\u0c32\u0c4d\u0c2a\u0c4b\u0c24\u0c3e\u0c30\u0c41&lt;/b&gt;</translation>\n+    </message>\n+    <message>\n+        <source>Are you sure you wish to encrypt your wallet?</source>\n+        <translation>\u0c2e\u0c40\u0c30\u0c41 \u0c16\u0c1a\u0c4d\u0c1a\u0c3f\u0c24\u0c02\u0c17\u0c3e \u0c2e\u0c40 \u0c1c\u0c4b\u0c32\u0c46\u0c28\u0c3f \u0c38\u0c02\u0c15\u0c47\u0c24\u0c2a\u0c30\u0c1a\u0c3e\u0c32\u0c28\u0c3f\u00a0\u0c15\u0c4b\u0c30\u0c41\u0c15\u0c41\u0c02\u0c1f\u0c41\u0c28\u0c4d\u0c28\u0c3e\u0c30\u0c3e?</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encrypted</source>\n+        <translation>\u0c1c\u0c4b\u0c32\u0c46 \u0c38\u0c02\u0c15\u0c47\u0c24\u0c2a\u0c30\u0c2c\u0c21\u0c3f\u0c02\u0c26\u0c3f</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encryption failed</source>\n+        <translation>\u0c1c\u0c4b\u0c32\u0c46 \u0c38\u0c02\u0c15\u0c47\u0c24\u0c2a\u0c30\u0c1a\u0c21\u0c02 \u0c35\u0c3f\u0c2b\u0c32\u0c2e\u0c2f\u0c4d\u0c2f\u0c3f\u0c02\u0c26\u0c3f</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>BanTableModel</name>\n+    </context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    <message>\n+        <source>Error</source>\n+        <translation>\u0c32\u0c4b\u0c2a\u0c02</translation>\n+    </message>\n+    <message>\n+        <source>Warning</source>\n+        <translation>\u0c39\u0c46\u0c1a\u0c4d\u0c1a\u0c30\u0c3f\u0c15</translation>\n+    </message>\n+    <message>\n+        <source>Information</source>\n+        <translation>\u0c35\u0c30\u0c4d\u0c24\u0c2e\u0c3e\u0c28\u0c2e\u0c41</translation>\n+    </message>\n+    <message>\n+        <source>Up to date</source>\n+        <translation>\u0c24\u0c3e\u0c1c\u0c3e\u0c17\u0c3e \u0c09\u0c02\u0c26\u0c3f</translation>\n+    </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>\u0c24\u0c4b\u0c1f\u0c3f\u0c35\u0c3e\u0c33\u0c4d\u0c32\u0c24\u0c4b \u0c05\u0c28\u0c41\u0c38\u0c02\u0c27\u0c3e\u0c28\u0c02 \u0c15\u0c41\u0c26\u0c41\u0c30\u0c41\u0c38\u0c4d\u0c24\u0c41\u0c02\u0c26\u0c3f</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    <message>\n+        <source>Coin Selection</source>\n+        <translation>\u0c28\u0c3e\u0c23\u0c46\u0c02 \u0c0e\u0c02\u0c2a\u0c3f\u0c15</translation>\n+    </message>\n+    <message>\n+        <source>Quantity:</source>\n+        <translation>\u0c2a\u0c30\u0c3f\u0c2e\u0c3e\u0c23\u0c02</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    </context>\n+<context>\n+    <name>Intro</name>\n+    <message>\n+        <source>Error</source>\n+        <translation>\u0c32\u0c4b\u0c2a\u0c02</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>ModalOverlay</name>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    </context>\n+<context>\n+    <name>QObject::QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>\u0c09\u0c32\u0c4d\u0c32\u0c3e\u0c15\u0c41</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>\u0c09\u0c32\u0c4d\u0c32\u0c3e\u0c15\u0c41</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    <message>\n+        <source>Quantity:</source>\n+        <translation>\u0c2a\u0c30\u0c3f\u0c2e\u0c3e\u0c23\u0c02</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    </context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>\u0c09\u0c32\u0c4d\u0c32\u0c3e\u0c15\u0c41</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>\u0c09\u0c32\u0c4d\u0c32\u0c3e\u0c15\u0c41</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>\u0c0e\u0c17\u0c41\u0c2e\u0c24\u0c3f \u0c35\u0c3f\u0c2b\u0c32\u0c2e\u0c2f\u0c4d\u0c2f\u0c3f\u0c02\u0c26\u0c3f</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    <message>\n+        <source>Information</source>\n+        <translation>\u0c35\u0c30\u0c4d\u0c24\u0c2e\u0c3e\u0c28\u0c2e\u0c41</translation>\n+    </message>\n+    <message>\n+        <source>Warning</source>\n+        <translation>\u0c39\u0c46\u0c1a\u0c4d\u0c1a\u0c30\u0c3f\u0c15</translation>\n+    </message>\n+    <message>\n+        <source>Error</source>\n+        <translation>\u0c32\u0c4b\u0c2a\u0c02</translation>\n+    </message>\n+</context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "a83f8312a09cc20692a5a1978d55e04d3d78efd7",
        "filename": "src/qt/locale/bitcoin_th.ts",
        "status": "added",
        "additions": 203,
        "deletions": 0,
        "changes": 203,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_th.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_th.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_th.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -0,0 +1,203 @@\n+<TS language=\"th\" version=\"2.1\">\n+<context>\n+    <name>AddressBookPage</name>\n+    <message>\n+        <source>Right-click to edit address or label</source>\n+        <translation>\u0e04\u0e25\u0e34\u0e01\u0e02\u0e27\u0e32\u0e40\u0e1e\u0e37\u0e48\u0e2d\u0e41\u0e01\u0e49\u0e44\u0e02\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e2b\u0e23\u0e37\u0e2d\u0e0a\u0e37\u0e48\u0e2d</translation>\n+    </message>\n+    <message>\n+        <source>Create a new address</source>\n+        <translation>\u0e2a\u0e23\u0e49\u0e32\u0e07\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e2b\u0e21\u0e48</translation>\n+    </message>\n+    <message>\n+        <source>&amp;New</source>\n+        <translation>\u0e43\u0e2b\u0e21\u0e48</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy</source>\n+        <translation>\u0e04\u0e31\u0e14\u0e25\u0e2d\u0e01</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;lose</source>\n+        <translation>\u0e1b\u0e34\u0e14</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>\u0e2a\u0e48\u0e07\u0e2d\u0e2d\u0e01</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Delete</source>\n+        <translation>\u0e25\u0e1a</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e17\u0e35\u0e48\u0e08\u0e30\u0e2a\u0e48\u0e07\u0e40\u0e2b\u0e23\u0e35\u0e22\u0e0d</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e17\u0e35\u0e48\u0e08\u0e30\u0e23\u0e31\u0e1a\u0e40\u0e2b\u0e23\u0e35\u0e22\u0e0d</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;hoose</source>\n+        <translation>\u0e40\u0e25\u0e37\u0e2d\u0e01</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e01\u0e32\u0e23\u0e2a\u0e48\u0e07</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e01\u0e32\u0e23\u0e23\u0e31\u0e1a</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy Address</source>\n+        <translation>\u0e04\u0e31\u0e14\u0e25\u0e2d\u0e01\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48</translation>\n+    </message>\n+    <message>\n+        <source>Copy &amp;Label</source>\n+        <translation>\u0e04\u0e31\u0e14\u0e25\u0e2d\u0e01\u0e0a\u0e37\u0e48\u0e2d</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Edit</source>\n+        <translation>\u0e41\u0e01\u0e49\u0e44\u0e02</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>\u0e01\u0e32\u0e23\u0e2a\u0e48\u0e07\u0e2d\u0e2d\u0e01\u0e25\u0e49\u0e21\u0e40\u0e2b\u0e25\u0e27</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>AddressTableModel</name>\n+    <message>\n+        <source>Address</source>\n+        <translation>\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>AskPassphraseDialog</name>\n+    </context>\n+<context>\n+    <name>BanTableModel</name>\n+    </context>\n+<context>\n+    <name>BitcoinGUI</name>\n+    </context>\n+<context>\n+    <name>CoinControlDialog</name>\n+    </context>\n+<context>\n+    <name>EditAddressDialog</name>\n+    </context>\n+<context>\n+    <name>FreespaceChecker</name>\n+    </context>\n+<context>\n+    <name>HelpMessageDialog</name>\n+    </context>\n+<context>\n+    <name>Intro</name>\n+    </context>\n+<context>\n+    <name>ModalOverlay</name>\n+    </context>\n+<context>\n+    <name>OpenURIDialog</name>\n+    </context>\n+<context>\n+    <name>OptionsDialog</name>\n+    </context>\n+<context>\n+    <name>OverviewPage</name>\n+    </context>\n+<context>\n+    <name>PaymentServer</name>\n+    </context>\n+<context>\n+    <name>PeerTableModel</name>\n+    </context>\n+<context>\n+    <name>QObject</name>\n+    </context>\n+<context>\n+    <name>QObject::QObject</name>\n+    </context>\n+<context>\n+    <name>QRImageWidget</name>\n+    </context>\n+<context>\n+    <name>RPCConsole</name>\n+    </context>\n+<context>\n+    <name>ReceiveCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>ReceiveRequestDialog</name>\n+    <message>\n+        <source>Address</source>\n+        <translation>\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>RecentRequestsTableModel</name>\n+    </context>\n+<context>\n+    <name>SendCoinsDialog</name>\n+    </context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    </context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    </context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    </context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    </context>\n+<context>\n+    <name>SplashScreen</name>\n+    </context>\n+<context>\n+    <name>TrafficGraphWidget</name>\n+    </context>\n+<context>\n+    <name>TransactionDesc</name>\n+    </context>\n+<context>\n+    <name>TransactionDescDialog</name>\n+    </context>\n+<context>\n+    <name>TransactionTableModel</name>\n+    </context>\n+<context>\n+    <name>TransactionView</name>\n+    <message>\n+        <source>Address</source>\n+        <translation>\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>\u0e01\u0e32\u0e23\u0e2a\u0e48\u0e07\u0e2d\u0e2d\u0e01\u0e25\u0e49\u0e21\u0e40\u0e2b\u0e25\u0e27</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>UnitDisplayStatusBarControl</name>\n+    </context>\n+<context>\n+    <name>WalletFrame</name>\n+    </context>\n+<context>\n+    <name>WalletModel</name>\n+    </context>\n+<context>\n+    <name>WalletView</name>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>\u0e2a\u0e48\u0e07\u0e2d\u0e2d\u0e01</translation>\n+    </message>\n+    </context>\n+<context>\n+    <name>bitcoin-core</name>\n+    </context>\n+</TS>\n\\ No newline at end of file"
      },
      {
        "sha": "0a50a38dbff7c2bc659654cd1bde1d9ac154bf45",
        "filename": "src/qt/locale/bitcoin_tr_TR.ts",
        "status": "modified",
        "additions": 185,
        "deletions": 1,
        "changes": 186,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_tr_TR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_tr_TR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_tr_TR.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -41,22 +41,114 @@\n         <source>&amp;Delete</source>\n         <translation>&amp;Sil</translation>\n     </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>koinlerin g\u00f6nderilece\u011fi adresi se\u00e7in</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;hoose</source>\n+        <translation>Se\u00e7im</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>G\u00f6nderilen Adresler</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>Al\u0131nan Adresler</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Edit</source>\n+        <translation>D\u00fczenle</translation>\n+    </message>\n+    <message>\n+        <source>Export Address List</source>\n+        <translation>Adres Listesini D\u0131\u015far Aktar</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>D\u0131\u015fa Aktarma Ba\u015far\u0131s\u0131z</translation>\n+    </message>\n     </context>\n <context>\n     <name>AddressTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>etiket</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>adres</translation>\n+    </message>\n     </context>\n <context>\n     <name>AskPassphraseDialog</name>\n+    <message>\n+        <source>Encrypt wallet</source>\n+        <translation>C\u00fczdan\u0131 \u015eifrele</translation>\n+    </message>\n+    <message>\n+        <source>This operation needs your wallet passphrase to unlock the wallet.</source>\n+        <translation>Bu i\u015flem, c\u00fczdan kilidinizi a\u00e7mak i\u00e7in parolan\u0131za ihtiya\u00e7 duyuyor</translation>\n+    </message>\n+    <message>\n+        <source>Unlock wallet</source>\n+        <translation>C\u00fczdan\u0131 Kilitle</translation>\n+    </message>\n+    <message>\n+        <source>Decrypt wallet</source>\n+        <translation>C\u00fczdan\u0131n \u015eifresini \u00c7\u00f6z</translation>\n+    </message>\n+    <message>\n+        <source>Confirm wallet encryption</source>\n+        <translation>C\u00fczdan \u015eifrelemesini Onaylay\u0131n</translation>\n+    </message>\n+    <message>\n+        <source>Are you sure you wish to encrypt your wallet?</source>\n+        <translation>C\u00fczdan\u0131n\u0131z\u0131 \u015fifrelemek istedi\u011finizden emin misiniz?</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encrypted</source>\n+        <translation>C\u00fczdan \u015eifrelendi</translation>\n+    </message>\n+    <message>\n+        <source>Wallet unlock failed</source>\n+        <translation>C\u00fczdan Kilidi A\u00e7ma Hatas\u0131</translation>\n+    </message>\n     </context>\n <context>\n     <name>BanTableModel</name>\n     </context>\n <context>\n     <name>BitcoinGUI</name>\n+    <message>\n+        <source>E&amp;xit</source>\n+        <translation>\u00c7\u0131k\u0131\u015f</translation>\n+    </message>\n+    <message>\n+        <source>&amp;About %1</source>\n+        <translation>Hakk\u0131nda%1</translation>\n+    </message>\n     <message>\n         <source>&amp;Receiving addresses...</source>\n         <translation>Al\u0131\u015f adresleri</translation>\n     </message>\n+    <message>\n+        <source>Network activity disabled.</source>\n+        <translation>A\u011f etkinli\u011fi devre d\u0131\u015f\u0131.</translation>\n+    </message>\n+    <message>\n+        <source>Error</source>\n+        <translation>Hata</translation>\n+    </message>\n+    <message>\n+        <source>Warning</source>\n+        <translation>Uyar\u0131</translation>\n+    </message>\n+    <message>\n+        <source>Information</source>\n+        <translation>Bilgi</translation>\n+    </message>\n     </context>\n <context>\n     <name>CoinControlDialog</name>\n@@ -80,6 +172,10 @@\n     </context>\n <context>\n     <name>Intro</name>\n+    <message>\n+        <source>Error</source>\n+        <translation>Hata</translation>\n+    </message>\n     </context>\n <context>\n     <name>ModalOverlay</name>\n@@ -120,9 +216,21 @@\n         <source>Copy &amp;Address</source>\n         <translation>&amp;Adresi Kopyala</translation>\n     </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>adres</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>etiket</translation>\n+    </message>\n     </context>\n <context>\n     <name>RecentRequestsTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>etiket</translation>\n+    </message>\n     </context>\n <context>\n     <name>SendCoinsDialog</name>\n@@ -153,9 +261,25 @@\n     </context>\n <context>\n     <name>TransactionTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>etiket</translation>\n+    </message>\n     </context>\n <context>\n     <name>TransactionView</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>etiket</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>adres</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>D\u0131\u015fa Aktarma Ba\u015far\u0131s\u0131z</translation>\n+    </message>\n     </context>\n <context>\n     <name>UnitDisplayStatusBarControl</name>\n@@ -171,5 +295,65 @@\n     </context>\n <context>\n     <name>bitcoin-core</name>\n-    </context>\n+    <message>\n+        <source>Print this help message and exit</source>\n+        <translation>Bu yard\u0131m mesaj\u0131n\u0131 yazd\u0131r ve \u00e7\u0131k\u0131\u015f yap</translation>\n+    </message>\n+    <message>\n+        <source>Print version and exit</source>\n+        <translation>Versiyonu yazd\u0131r ve \u00e7\u0131k\u0131\u015f yap</translation>\n+    </message>\n+    <message>\n+        <source>Verifying blocks...</source>\n+        <translation>Bloklar Onaylan\u0131yor...</translation>\n+    </message>\n+    <message>\n+        <source>Verifying wallet...</source>\n+        <translation>C\u00fczdan Onaylan\u0131yor...</translation>\n+    </message>\n+    <message>\n+        <source>Wallet options:</source>\n+        <translation>C\u00fczdan Ayarlar\u0131</translation>\n+    </message>\n+    <message>\n+        <source>Information</source>\n+        <translation>Bilgi</translation>\n+    </message>\n+    <message>\n+        <source>RPC server options:</source>\n+        <translation>RPC sunucu ayarlar\u0131</translation>\n+    </message>\n+    <message>\n+        <source>Transaction too large</source>\n+        <translation>\u0130\u015flem \u00e7ok b\u00fcy\u00fck</translation>\n+    </message>\n+    <message>\n+        <source>Warning</source>\n+        <translation>Uyar\u0131</translation>\n+    </message>\n+    <message>\n+        <source>Loading addresses...</source>\n+        <translation>Adresler bekleniyor...</translation>\n+    </message>\n+    <message>\n+        <source>Insufficient funds</source>\n+        <translation>Yetersiz Bakiye</translation>\n+    </message>\n+    <message>\n+        <source>Loading wallet...</source>\n+        <translation>C\u00fczdan Bekleniyor...</translation>\n+    </message>\n+    <message>\n+        <source>Cannot write default address</source>\n+        <translation>Varsay\u0131lan adres yaz\u0131lam\u0131yor</translation>\n+    </message>\n+    <message>\n+        <source>Rescanning...</source>\n+        <translation>Tekrar taran\u0131yor...</translation>\n+    </message>\n+    <message>\n+        <source>Error</source>\n+        <translation>Hata</translation>\n+    </message>\n+</context>\n </TS>\n\\ No newline at end of file"
      },
      {
        "sha": "2094d67dd8a2344ef596383232923b251a75e856",
        "filename": "src/qt/locale/bitcoin_zh_CN.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_zh_CN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b978b19e87a7ed802c65f2d6561e61ef7ce911/src/qt/locale/bitcoin_zh_CN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_CN.ts?ref=28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "patch": "@@ -2066,6 +2066,10 @@\n         <source>Dust:</source>\n         <translation>\u5c0f\u989d\uff1a</translation>\n     </message>\n+    <message>\n+        <source>Confirmation time target:</source>\n+        <translation>\u786e\u8ba4\u65f6\u95f4\u76ee\u6807\uff1a</translation>\n+    </message>\n     <message>\n         <source>Clear &amp;All</source>\n         <translation>\u6e05\u9664\u6240\u6709(&amp;A)</translation>"
      }
    ]
  },
  {
    "sha": "0d3e8183fa52e92172ab22069028c300ad9135b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDNlODE4M2ZhNTJlOTIxNzJhYjIyMDY5MDI4YzMwMGFkOTEzNWIx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T10:40:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-21T10:41:18Z"
      },
      "message": "Merge #11102: Trivial: Fix typo in release-notes.md\n\n9c76cf5 Trivial: Fix typo in release-notes.md (jbarcelo)\n\nPull request description:\n\n  getmempooolentry -> getmempoolentry (twice)\n\nTree-SHA512: 4e52d4decf4a6b0ae6ef6f3b52fed2c2fafe63d72a3b5868f172c479a9463f28eaada29b6364a5e5ca5afe021155ee97cc9a23208d2a96c4ecccebccc173bb0e",
      "tree": {
        "sha": "51b7542310ac43c2ba18a6e680c93de5d1dd2b99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51b7542310ac43c2ba18a6e680c93de5d1dd2b99"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d3e8183fa52e92172ab22069028c300ad9135b1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZmrjOAAoJEB5K7WKYbNJdqcQH/0YjUR7NU5roBVHP7c8uBsAH\n/i9dm95oIoSNgx2NJ9yMp59b8R1f+1dQm8l5lh3D3V+fETwwCY6Wiagb9H4lIWnT\nbu/6ME7y2Xdq7Ysjw1KYM7PZ49uxCwOyhfqY12L2lY1O4yk4px/gixM9WaRLNrx8\nxfhQDUyP6ttJWaY1U2Q2YTH2+ApKImoSz3Qy0h4gmGc7yzpmzWVJPSp9M48yBon8\nSc/Eo4cAyyxFg+WCH3rGQ7RoKfRUGORO0W+jJVi5ZDhYjiEZiVGMMF87v9ZqszF9\nmYTrOezI8lsfBS6MNiOpuaP0HDwlx+EAy9Y3qgjtNWlpx5Wz14+NYLVFUklMocg=\n=YDa4\n-----END PGP SIGNATURE-----",
        "payload": "tree 51b7542310ac43c2ba18a6e680c93de5d1dd2b99\nparent 28b978b19e87a7ed802c65f2d6561e61ef7ce911\nparent 9c76cf50fb6b306f2ed6c46f7e252c7812de0476\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1503312046 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503312078 +0200\n\nMerge #11102: Trivial: Fix typo in release-notes.md\n\n9c76cf5 Trivial: Fix typo in release-notes.md (jbarcelo)\n\nPull request description:\n\n  getmempooolentry -> getmempoolentry (twice)\n\nTree-SHA512: 4e52d4decf4a6b0ae6ef6f3b52fed2c2fafe63d72a3b5868f172c479a9463f28eaada29b6364a5e5ca5afe021155ee97cc9a23208d2a96c4ecccebccc173bb0e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d3e8183fa52e92172ab22069028c300ad9135b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d3e8183fa52e92172ab22069028c300ad9135b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d3e8183fa52e92172ab22069028c300ad9135b1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b978b19e87a7ed802c65f2d6561e61ef7ce911",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28b978b19e87a7ed802c65f2d6561e61ef7ce911"
      },
      {
        "sha": "9c76cf50fb6b306f2ed6c46f7e252c7812de0476",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c76cf50fb6b306f2ed6c46f7e252c7812de0476",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c76cf50fb6b306f2ed6c46f7e252c7812de0476"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "65f2cccc65cc286b0fce8f8dd1889939fbf48352",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3e8183fa52e92172ab22069028c300ad9135b1/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3e8183fa52e92172ab22069028c300ad9135b1/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=0d3e8183fa52e92172ab22069028c300ad9135b1",
        "patch": "@@ -155,7 +155,7 @@ In previous versions of Bitcoin Core, a portion of each block could be reserved\n - The `-sendfreetransactions` option has been removed, since almost all miners do not include transactions which do not attach a transaction fee.\n - The `-blockprioritysize` option has been removed.\n - The `estimatepriority` and `estimatesmartpriority` RPCs have been removed.\n-- The `getmempoolancestors`, `getmempooldescendants`, `getmempooolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`.\n+- The `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`.\n - The `prioritisetransaction` RPC no longer takes a `priority_delta` argument, which is replaced by a `dummy` argument for backwards compatibility with clients using positional arguments. The RPC is still used to change the apparent fee-rate of the transaction by using the `fee_delta` argument.\n - `-minrelaytxfee` can now be set to 0. If `minrelaytxfee` is set, then fees smaller than `minrelaytxfee` (per kB) are rejected from relaying, mining and transaction creation. This defaults to 1000 satoshi/kB.\n - The `-printpriority` option has been updated to only output the fee rate and hash of transactions included in a block by the mining code.\n@@ -215,7 +215,7 @@ Low-level RPC changes\n   - `maximumCount` - a number specifying the minimum number of UTXOs\n   - `minimumSumAmount` - a number specifying the minimum sum value of all UTXOs\n \n-- The `getmempoolancestors`, `getmempooldescendants`, `getmempooolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n+- The `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n \n - The `dumpwallet` RPC now returns the full absolute path to the dumped wallet. It\n   used to return no value, even if successful (See [PR 9740](https://github.com/bitcoin/bitcoin/pull/9740))."
      }
    ]
  },
  {
    "sha": "0a6af47ffabbeee29fec5b5d71eaff43a08969da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTZhZjQ3ZmZhYmJlZWUyOWZlYzViNWQ3MWVhZmY0M2EwODk2OWRh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-08-23T14:10:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-28T08:00:15Z"
      },
      "message": "[doc] build-windows: Mention that only trusty works\n\nGithub-Pull: #11119\nRebased-From: fa14b6797088065f890b33c1a2c7f6ee4af20c6c\nTree-SHA512: a790a5d37a06a691f2536763a504ead5b06b94708ba07f3b94bedbb76b0201825be3dcd95343512d7a6211089be2abc3f1e0957ed27055426e6943d4bdb6fbd9",
      "tree": {
        "sha": "33a034fd7f735b113d2ae8f87e9935c7eabcadc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33a034fd7f735b113d2ae8f87e9935c7eabcadc9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a6af47ffabbeee29fec5b5d71eaff43a08969da",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZo82PAAoJEB5K7WKYbNJdIrcIAKRduIo90nxAtZBMhaAxi1bl\naYgdelTz0Dk7ZLPnUUighTz3W26A2uNIuFMxZ3xlKfAAMkM5E5kc7f92eUtTjPGs\n0SmBmK4oNa+tSZMw6sW4MCc4isTNXReRW8dtbMZGxy0/SI8cftsihe/Ehcsg9siX\ngLUqExbibgVVAZgvcx9lD2P4Tm6nBTPsQLNSBb5pG9iY72krYIlBw+HHvfZI4UIj\n0My4/t6fMnI/4EwyH8LZHUwvDUi5cZek339ns9o5N7+19eyocImdC2n/fI5oY8MC\nNDFP9tj1CtEcdODYhKrUGZ1juNXZJqr4Ljxwy21zMubFzDROvA12aq9//Jni6+Y=\n=mTiK\n-----END PGP SIGNATURE-----",
        "payload": "tree 33a034fd7f735b113d2ae8f87e9935c7eabcadc9\nparent 0d3e8183fa52e92172ab22069028c300ad9135b1\nauthor MarcoFalke <falke.marco@gmail.com> 1503497414 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503907215 +0200\n\n[doc] build-windows: Mention that only trusty works\n\nGithub-Pull: #11119\nRebased-From: fa14b6797088065f890b33c1a2c7f6ee4af20c6c\nTree-SHA512: a790a5d37a06a691f2536763a504ead5b06b94708ba07f3b94bedbb76b0201825be3dcd95343512d7a6211089be2abc3f1e0957ed27055426e6943d4bdb6fbd9\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a6af47ffabbeee29fec5b5d71eaff43a08969da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a6af47ffabbeee29fec5b5d71eaff43a08969da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a6af47ffabbeee29fec5b5d71eaff43a08969da/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d3e8183fa52e92172ab22069028c300ad9135b1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d3e8183fa52e92172ab22069028c300ad9135b1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d3e8183fa52e92172ab22069028c300ad9135b1"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ca1a05dfb45d275e631097493bbae59cc4b199d3",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a6af47ffabbeee29fec5b5d71eaff43a08969da/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a6af47ffabbeee29fec5b5d71eaff43a08969da/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=0a6af47ffabbeee29fec5b5d71eaff43a08969da",
        "patch": "@@ -6,6 +6,9 @@ Below are some notes on how to build Bitcoin Core for Windows.\n Most developers use cross-compilation from Ubuntu to build executables for\n Windows. This is also used to build the release binaries.\n \n+Currently only building on Ubuntu Trusty 14.04 is supported.\n+Other versions are unsupported or known to be broken (e.g. Ubuntu Xenial 16.04).\n+\n While there are potentially a number of ways to build on Windows (for example using msys / mingw-w64),\n using the Windows Subsystem For Linux is the most straightforward. If you are building with\n another method, please contribute the instructions here for others who are running versions"
      }
    ]
  },
  {
    "sha": "e51bb71e4a5657f1ea7a046aefe1f24f6674f6ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTFiYjcxZTRhNTY1N2YxZWE3YTA0NmFlZmUxZjI0ZjY2NzRmNmFk",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-08-25T19:46:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-28T08:14:55Z"
      },
      "message": "Fix rounding errors in calculation of minimum change size\n\nGithub-Pull: #11145\nRebased-From: a54c7b94f8825e9b52fec9066fe7c1d5b6f53482\nTree-SHA512: d9abb9794edbf7e52450c63d183a4f28e9a3621a670b7f21af92407be096363b44a356818f2abbea11c168d123c04852bd0b60f1cd9d423aefbf4ae831f8567d",
      "tree": {
        "sha": "b0df2dde6a98cf57c7765abca61769831294b67d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0df2dde6a98cf57c7765abca61769831294b67d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e51bb71e4a5657f1ea7a046aefe1f24f6674f6ad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZo9D/AAoJEB5K7WKYbNJdaHYH/iK0TkOcB9ONaVjD//Yviwwx\nrARwLKlAqaNRL8XDB1BxnxXkQ/P1TdaDa4S0LlOvY1n+0p2xBkDEdNnPOFASzctc\nZ7nPOSW5ZpCqEncH1YzD0U4/M1zv+e2B9OAVB5F6yikXdFmj64UUAOBzwdx9VvMk\nxYXacN17a0GJzf40gLsZ8K/gcxIkF/xqxafZoTvVXkkInX3hTgEs+l7zNvxJMbV9\nzqFhPIv8tI5UzOBB26Uwfi7lIvXeBV9wi59A+zTzwHZJHrCNle12hZ1k1LgNA9xH\nY6QbNco6j7IGaEms0L0MD/P7WgVxg+Ai3rk8XwaQP8ZHh6luWTi3gMPKJKI7XQk=\n=w136\n-----END PGP SIGNATURE-----",
        "payload": "tree b0df2dde6a98cf57c7765abca61769831294b67d\nparent 0a6af47ffabbeee29fec5b5d71eaff43a08969da\nauthor Alex Morcos <morcos@chaincode.com> 1503690367 -0500\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503908095 +0200\n\nFix rounding errors in calculation of minimum change size\n\nGithub-Pull: #11145\nRebased-From: a54c7b94f8825e9b52fec9066fe7c1d5b6f53482\nTree-SHA512: d9abb9794edbf7e52450c63d183a4f28e9a3621a670b7f21af92407be096363b44a356818f2abbea11c168d123c04852bd0b60f1cd9d423aefbf4ae831f8567d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e51bb71e4a5657f1ea7a046aefe1f24f6674f6ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e51bb71e4a5657f1ea7a046aefe1f24f6674f6ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e51bb71e4a5657f1ea7a046aefe1f24f6674f6ad/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a6af47ffabbeee29fec5b5d71eaff43a08969da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a6af47ffabbeee29fec5b5d71eaff43a08969da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a6af47ffabbeee29fec5b5d71eaff43a08969da"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "142e04c7c830d63ec553be00797e4fcf14fa6602",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e51bb71e4a5657f1ea7a046aefe1f24f6674f6ad/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e51bb71e4a5657f1ea7a046aefe1f24f6674f6ad/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e51bb71e4a5657f1ea7a046aefe1f24f6674f6ad",
        "patch": "@@ -2852,13 +2852,15 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     // new inputs. We now know we only need the smaller fee\n                     // (because of reduced tx size) and so we should add a\n                     // change output. Only try this once.\n-                    CAmount fee_needed_for_change = GetMinimumFee(change_prototype_size, coin_control, ::mempool, ::feeEstimator, nullptr);\n-                    CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n-                    CAmount max_excess_fee = fee_needed_for_change + minimum_value_for_change;\n-                    if (nFeeRet > nFeeNeeded + max_excess_fee && nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n-                        pick_new_inputs = false;\n-                        nFeeRet = nFeeNeeded + fee_needed_for_change;\n-                        continue;\n+                    if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n+                        unsigned int tx_size_with_change = nBytes + change_prototype_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n+                        CAmount fee_needed_with_change = GetMinimumFee(tx_size_with_change, coin_control, ::mempool, ::feeEstimator, nullptr);\n+                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n+                        if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n+                            pick_new_inputs = false;\n+                            nFeeRet = fee_needed_with_change;\n+                            continue;\n+                        }\n                     }\n \n                     // If we have change output already, just increase it"
      }
    ]
  },
  {
    "sha": "5b059a833eb57a4dd8458f42aedba85265b2bbf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjA1OWE4MzNlYjU3YTRkZDg0NThmNDJhZWRiYTg1MjY1YjJiYmYz",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2017-08-25T19:49:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-28T08:14:58Z"
      },
      "message": "Output a bit more information for fee calculation report.\n\nGithub-Pull: #11145\nRebased-From: 6af49dddeaeec7f134e86d6f8cf839c55870b7ab\nTree-SHA512: 7245c6f7ed81cf3913e351ff1df7f74f4be7abe0ae8be312e4862c9875e2943b0b11136bc9999191cdf03468fdac5d41e294bb59b657605c22643b102e37c070",
      "tree": {
        "sha": "3484c98b1fe10e0e7dd882e3efde068b14c1d3ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3484c98b1fe10e0e7dd882e3efde068b14c1d3ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b059a833eb57a4dd8458f42aedba85265b2bbf3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZo9ECAAoJEB5K7WKYbNJdmekH+gOvZP4O59fbA1QaZEhsRWZM\nTO7hOYWx97XSLy6X5YE4qYAUG3/5Zg2UcziC0ndC+IRURK0MV0OYX3y3+cMnSXZW\nxrwrlxULwY3DcA48AVB0E0xOeroj8bmrMZ7v7QfmMu5r2eAZZDLZvJYZIK0gTlNa\nosSJeAqfwpx5sBeLlvEF7TlAuU1I7Huwz7qbHUXO+cy5PvqD4bpt8yR0lSG/IMHh\nD0UW4zkp6ahp01X+xmQULe50ZI6W6H+lfjBGIOWaZVLEOKOAWI1j5jzS+BHQ3WzE\naaE448MQ5uKZsdUKM0L666mN2qX1EKaOaRSYy50/VEIf9GAZXl6kJGbfO1raNsQ=\n=KmUX\n-----END PGP SIGNATURE-----",
        "payload": "tree 3484c98b1fe10e0e7dd882e3efde068b14c1d3ce\nparent e51bb71e4a5657f1ea7a046aefe1f24f6674f6ad\nauthor Alex Morcos <morcos@chaincode.com> 1503690584 -0500\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503908098 +0200\n\nOutput a bit more information for fee calculation report.\n\nGithub-Pull: #11145\nRebased-From: 6af49dddeaeec7f134e86d6f8cf839c55870b7ab\nTree-SHA512: 7245c6f7ed81cf3913e351ff1df7f74f4be7abe0ae8be312e4862c9875e2943b0b11136bc9999191cdf03468fdac5d41e294bb59b657605c22643b102e37c070\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b059a833eb57a4dd8458f42aedba85265b2bbf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b059a833eb57a4dd8458f42aedba85265b2bbf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b059a833eb57a4dd8458f42aedba85265b2bbf3/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e51bb71e4a5657f1ea7a046aefe1f24f6674f6ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e51bb71e4a5657f1ea7a046aefe1f24f6674f6ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e51bb71e4a5657f1ea7a046aefe1f24f6674f6ad"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "318c159cfb23311b839d4732d94e8e68eb06fdde",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b059a833eb57a4dd8458f42aedba85265b2bbf3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b059a833eb57a4dd8458f42aedba85265b2bbf3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5b059a833eb57a4dd8458f42aedba85265b2bbf3",
        "patch": "@@ -2670,6 +2670,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n     assert(txNew.nLockTime <= (unsigned int)chainActive.Height());\n     assert(txNew.nLockTime < LOCKTIME_THRESHOLD);\n     FeeCalculation feeCalc;\n+    CAmount nFeeNeeded;\n     unsigned int nBytes;\n     {\n         std::set<CInputCoin> setCoins;\n@@ -2831,7 +2832,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n                     vin.scriptWitness.SetNull();\n                 }\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n+                nFeeNeeded = GetMinimumFee(nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n@@ -2955,8 +2956,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletT\n         }\n     }\n \n-    LogPrintf(\"Fee Calculation: Fee:%d Bytes:%u Tgt:%d (requested %d) Reason:\\\"%s\\\" Decay %.5f: Estimation: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out)\\n\",\n-              nFeeRet, nBytes, feeCalc.returnedTarget, feeCalc.desiredTarget, StringForFeeReason(feeCalc.reason), feeCalc.est.decay,\n+    LogPrintf(\"Fee Calculation: Fee:%d Bytes:%u Needed:%d Tgt:%d (requested %d) Reason:\\\"%s\\\" Decay %.5f: Estimation: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out) Fail: (%g - %g) %.2f%% %.1f/(%.1f %d mem %.1f out)\\n\",\n+              nFeeRet, nBytes, nFeeNeeded, feeCalc.returnedTarget, feeCalc.desiredTarget, StringForFeeReason(feeCalc.reason), feeCalc.est.decay,\n               feeCalc.est.pass.start, feeCalc.est.pass.end,\n               100 * feeCalc.est.pass.withinTarget / (feeCalc.est.pass.totalConfirmed + feeCalc.est.pass.inMempool + feeCalc.est.pass.leftMempool),\n               feeCalc.est.pass.withinTarget, feeCalc.est.pass.totalConfirmed, feeCalc.est.pass.inMempool, feeCalc.est.pass.leftMempool,"
      }
    ]
  },
  {
    "sha": "e8ad101e5b104ca913beb82a77f5b3bfa1a7c5f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGFkMTAxZTViMTA0Y2E5MTNiZWI4MmE3N2Y1YjNiZmExYTdjNWY2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-22T17:32:17Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-28T08:18:58Z"
      },
      "message": "Changing -txindex requires -reindex, not -reindex-chainstate\n\nGithub-Pull: #11108\nRebased-From: cd0ea487422028bec1f5df62ab4c57909c2bcc90\nTree-SHA512: 0fbd50b1343eec14301ee9c2fc76e48dcb1610ce1ddbf3cccbd937e2c0d1bbdfc4920fbc05e7e560c424e0ed7367d6ad3595a1bd38dea669bcbd1c838f522d8e",
      "tree": {
        "sha": "2647f0c48a7d6703c8c2bc90f57ff6bc4cec0dde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2647f0c48a7d6703c8c2bc90f57ff6bc4cec0dde"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8ad101e5b104ca913beb82a77f5b3bfa1a7c5f6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZo9HyAAoJEB5K7WKYbNJdCJMH/1PmeJrY+XD/oFOHhbE6lwiG\nYPjToR7j88DPDmgOMySOqcEQIOwku7ENprwt4yPldOs4Zsnk++kUJaOO6iTC66fa\nf9dHUBqL+qOVeah+/COD19BwRdWoKpmBOUv4hLc68L/sqVgeJ4H8UOeWTQPBJRMY\n7xnxQpOxvLYHdPDUqStC/ymUqX0cUyUWADQB7bfAje3JF7JJMTgCMh9P9wibmbvH\nzzy/sCpC92ZX+EE3P2n/CeHFALOv0C3HtR43wwttbTFfGcGkCciYf8S6LSvI8P8r\n5mi0XPrLslo2PLOi3IBnE8tU3Z+0ykxG2+B7tiZlzo98mCY32+FDTmrlkJYq4t4=\n=hnAB\n-----END PGP SIGNATURE-----",
        "payload": "tree 2647f0c48a7d6703c8c2bc90f57ff6bc4cec0dde\nparent 5b059a833eb57a4dd8458f42aedba85265b2bbf3\nauthor Matt Corallo <git@bluematt.me> 1503423137 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503908338 +0200\n\nChanging -txindex requires -reindex, not -reindex-chainstate\n\nGithub-Pull: #11108\nRebased-From: cd0ea487422028bec1f5df62ab4c57909c2bcc90\nTree-SHA512: 0fbd50b1343eec14301ee9c2fc76e48dcb1610ce1ddbf3cccbd937e2c0d1bbdfc4920fbc05e7e560c424e0ed7367d6ad3595a1bd38dea669bcbd1c838f522d8e\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8ad101e5b104ca913beb82a77f5b3bfa1a7c5f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8ad101e5b104ca913beb82a77f5b3bfa1a7c5f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8ad101e5b104ca913beb82a77f5b3bfa1a7c5f6/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b059a833eb57a4dd8458f42aedba85265b2bbf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b059a833eb57a4dd8458f42aedba85265b2bbf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b059a833eb57a4dd8458f42aedba85265b2bbf3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a708295f43e627ad5284bad1e456af65e2e45ff5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8ad101e5b104ca913beb82a77f5b3bfa1a7c5f6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8ad101e5b104ca913beb82a77f5b3bfa1a7c5f6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e8ad101e5b104ca913beb82a77f5b3bfa1a7c5f6",
        "patch": "@@ -1428,7 +1428,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n                 // Check for changed -txindex state\n                 if (fTxIndex != gArgs.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX)) {\n-                    strLoadError = _(\"You need to rebuild the database using -reindex-chainstate to change -txindex\");\n+                    strLoadError = _(\"You need to rebuild the database using -reindex to change -txindex\");\n                     break;\n                 }\n "
      }
    ]
  },
  {
    "sha": "29a3cb237802a6f240def54cbc74cb2d5375683a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWEzY2IyMzc4MDJhNmYyNDBkZWY1NGNiYzc0Y2IyZDUzNzU2ODNh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-28T08:27:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-28T08:29:10Z"
      },
      "message": "qt: Translation update pre-rc3\n\nTree-SHA512: d813ef923d804722bc161cc62e09ee003b386c0abf2d513ede671e9f14ac4c3df749a9f23ddcba9400fcc335dbef6540e47a212dca8ddc0a3d73aee01f098754",
      "tree": {
        "sha": "0e2e724a286b0ff2c5103134ced436fa3fe62da8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e2e724a286b0ff2c5103134ced436fa3fe62da8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29a3cb237802a6f240def54cbc74cb2d5375683a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZo9RWAAoJEB5K7WKYbNJdL44IAIyO6YD2yk1HyqPIvLSku4+I\nKUhg7GWInhgopTTMmfa1mj3HwsCsxezgt/BnDzqfOkN4Xcbq0XKs0g9XxVlkJTSO\nKHguZfPwJqCu8TIGzbH2iFgg5gdzphUPRcNCLc4fXnPnU7005o751jgTTmnBgXhX\nn7EvV12QIRYxCEvxhoViBWIzGFsRTb5wiq1JlP804S/8m+HMmS598LP9yjAI/aLf\n+sNOGXuyL1Q4S7lq/RYvkUHHEMk+rKHWLQgLvigNL+q+GPysOQ2dVSpxjaqQtPPV\nCwdMsAhQZDBtFj0XxdQN/xKt+qgJbO1HnyIYKS9eKK39aGbSc1WgWX6h/ILVcrs=\n=hugt\n-----END PGP SIGNATURE-----",
        "payload": "tree 0e2e724a286b0ff2c5103134ced436fa3fe62da8\nparent e8ad101e5b104ca913beb82a77f5b3bfa1a7c5f6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1503908839 +0000\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503908950 +0200\n\nqt: Translation update pre-rc3\n\nTree-SHA512: d813ef923d804722bc161cc62e09ee003b386c0abf2d513ede671e9f14ac4c3df749a9f23ddcba9400fcc335dbef6540e47a212dca8ddc0a3d73aee01f098754\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a3cb237802a6f240def54cbc74cb2d5375683a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29a3cb237802a6f240def54cbc74cb2d5375683a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a3cb237802a6f240def54cbc74cb2d5375683a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8ad101e5b104ca913beb82a77f5b3bfa1a7c5f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8ad101e5b104ca913beb82a77f5b3bfa1a7c5f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8ad101e5b104ca913beb82a77f5b3bfa1a7c5f6"
      }
    ],
    "stats": {
      "total": 657,
      "additions": 619,
      "deletions": 38
    },
    "files": [
      {
        "sha": "533572819b8f87a7f852b9e8a75e2084f889ddc1",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=29a3cb237802a6f240def54cbc74cb2d5375683a",
        "patch": "@@ -250,8 +250,6 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n \"You need to rebuild the database using -reindex to go back to unpruned \"\n \"mode.  This will redownload the entire blockchain\"),\n-QT_TRANSLATE_NOOP(\"bitcoin-core\", \"\"\n-\"You need to rebuild the database using -reindex-chainstate to change -txindex\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%d of last 100 blocks have unexpected version\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%s corrupt, salvage failed\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"%s is set very high!\"),\n@@ -416,6 +414,7 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Wallet options:\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning: unknown new rules activated (versionbit %i)\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Whether to operate in a blocks only mode (default: %u)\"),\n+QT_TRANSLATE_NOOP(\"bitcoin-core\", \"You need to rebuild the database using -reindex to change -txindex\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Zapping all transactions from wallet...\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"ZeroMQ notification options:\"),\n };"
      },
      {
        "sha": "89050ee6b5828a0109c0719e58805e92223139ec",
        "filename": "src/qt/locale/bitcoin_en.ts",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_en.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_en.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_en.ts?ref=29a3cb237802a6f240def54cbc74cb2d5375683a",
        "patch": "@@ -3990,7 +3990,7 @@\n <context>\n     <name>bitcoin-core</name>\n     <message>\n-        <location filename=\"../bitcoinstrings.cpp\" line=\"+343\"/>\n+        <location filename=\"../bitcoinstrings.cpp\" line=\"+341\"/>\n         <source>Options:</source>\n         <translation>Options:</translation>\n     </message>\n@@ -4015,7 +4015,7 @@\n         <translation>Accept command line and JSON-RPC commands</translation>\n     </message>\n     <message>\n-        <location line=\"-207\"/>\n+        <location line=\"-205\"/>\n         <source>Distributed under the MIT software license, see the accompanying file %s or %s</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4040,7 +4040,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+150\"/>\n+        <location line=\"+148\"/>\n         <source>Error: A fatal internal error occurred, see debug.log for details</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4065,7 +4065,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-386\"/>\n+        <location line=\"-384\"/>\n         <source>Bitcoin Core</source>\n         <translation type=\"unfinished\">Bitcoin Core</translation>\n     </message>\n@@ -4221,11 +4221,6 @@\n     </message>\n     <message>\n         <location line=\"+11\"/>\n-        <source>You need to rebuild the database using -reindex-chainstate to change -txindex</source>\n-        <translation type=\"unfinished\"></translation>\n-    </message>\n-    <message>\n-        <location line=\"+2\"/>\n         <source>%d of last 100 blocks have unexpected version</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4580,7 +4575,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-389\"/>\n+        <location line=\"-387\"/>\n         <source>Allow JSON-RPC connections from specified source. Valid for &lt;ip&gt; are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4655,7 +4650,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+9\"/>\n+        <location line=\"+7\"/>\n         <source>(default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -4839,6 +4834,11 @@\n         <source>Whether to operate in a blocks only mode (default: %u)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n+    <message>\n+        <location line=\"+1\"/>\n+        <source>You need to rebuild the database using -reindex to change -txindex</source>\n+        <translation type=\"unfinished\"></translation>\n+    </message>\n     <message>\n         <location line=\"+1\"/>\n         <source>Zapping all transactions from wallet...</source>\n@@ -4850,22 +4850,22 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"-76\"/>\n+        <location line=\"-77\"/>\n         <source>Password for JSON-RPC connections</source>\n         <translation>Password for JSON-RPC connections</translation>\n     </message>\n     <message>\n-        <location line=\"-261\"/>\n+        <location line=\"-259\"/>\n         <source>Execute command when the best block changes (%s in cmd is replaced by block hash)</source>\n         <translation>Execute command when the best block changes (%s in cmd is replaced by block hash)</translation>\n     </message>\n     <message>\n-        <location line=\"+184\"/>\n+        <location line=\"+182\"/>\n         <source>Allow DNS lookups for -addnode, -seednode and -connect</source>\n         <translation>Allow DNS lookups for -addnode, -seednode and -connect</translation>\n     </message>\n     <message>\n-        <location line=\"-253\"/>\n+        <location line=\"-251\"/>\n         <source>(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)</source>\n         <translation type=\"unfinished\"></translation>\n     </message>\n@@ -5000,7 +5000,7 @@\n         <translation type=\"unfinished\"></translation>\n     </message>\n     <message>\n-        <location line=\"+13\"/>\n+        <location line=\"+11\"/>\n         <source>%s is set very high!</source>\n         <translation type=\"unfinished\"></translation>\n     </message>"
      },
      {
        "sha": "1413cc1adf58494f757ac5fe1a0ab8d14d493c0f",
        "filename": "src/qt/locale/bitcoin_es_ES.ts",
        "status": "modified",
        "additions": 89,
        "deletions": 5,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_es_ES.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_es_ES.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_ES.ts?ref=29a3cb237802a6f240def54cbc74cb2d5375683a",
        "patch": "@@ -63,11 +63,11 @@\n     </message>\n     <message>\n         <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n-        <translation>Estas son sus direcciones Bitcoin para enviar pagos. Verifique siempre la cantidad y la direcci\u00f3n de recibimiento antes de enviar monedas.</translation>\n+        <translation>Estas son sus direcciones Bitcoin para enviar pagos. Verifique siempre la cantidad y la direcci\u00f3n de recepci\u00f3n antes de enviar monedas.</translation>\n     </message>\n     <message>\n         <source>These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.</source>\n-        <translation>Estas son sus direcciones Bitcoin para recibir pagos. Se recomienda utilizar una nueva direcci\u00f3n de recibimiento para cada transacci\u00f3n</translation>\n+        <translation>Estas son sus direcciones Bitcoin para recibir pagos. Se recomienda utilizar una nueva direcci\u00f3n de recepci\u00f3n para cada transacci\u00f3n</translation>\n     </message>\n     <message>\n         <source>&amp;Copy Address</source>\n@@ -531,6 +531,14 @@\n         <source>Incoming transaction</source>\n         <translation>Transacci\u00f3n entrante</translation>\n     </message>\n+    <message>\n+        <source>HD key generation is &lt;b&gt;enabled&lt;/b&gt;</source>\n+        <translation>La generaci\u00f3n de claves HD est\u00e1 &lt;b&gt;activada&lt;/b&gt;</translation>\n+    </message>\n+    <message>\n+        <source>HD key generation is &lt;b&gt;disabled&lt;/b&gt;</source>\n+        <translation>La generaci\u00f3n de claves HD est\u00e1 &lt;b&gt;desactivada&lt;/b&gt;</translation>\n+    </message>\n     <message>\n         <source>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;unlocked&lt;/b&gt;</source>\n         <translation>El monedero est\u00e1 &lt;b&gt;cifrado&lt;/b&gt; y actualmente &lt;b&gt;desbloqueado&lt;/b&gt;</translation>\n@@ -719,15 +727,15 @@\n     </message>\n     <message>\n         <source>New receiving address</source>\n-        <translation>Nueva direcci\u00f3n de recivimiento</translation>\n+        <translation>Nueva direcci\u00f3n de recepci\u00f3n</translation>\n     </message>\n     <message>\n         <source>New sending address</source>\n         <translation>Nueva direcci\u00f3n de env\u00edo</translation>\n     </message>\n     <message>\n         <source>Edit receiving address</source>\n-        <translation>Editar direcci\u00f3n de recivimiento</translation>\n+        <translation>Editar direcci\u00f3n de recepci\u00f3n</translation>\n     </message>\n     <message>\n         <source>Edit sending address</source>\n@@ -877,6 +885,10 @@\n         <source>Form</source>\n         <translation>Formulario</translation>\n     </message>\n+    <message>\n+        <source>Recent transactions may not yet be visible, and therefore your wallet's balance might be incorrect. This information will be correct once your wallet has finished synchronizing with the bitcoin network, as detailed below.</source>\n+        <translation>Las transacciones recientes podr\u00edan no ser visibles todav\u00eda, por lo que el balance de la cartera podr\u00eda ser incorrecto. Esta informaci\u00f3n ser\u00e1 correcta una vez su cartera se haya terminado de sincronizar con la red bitcoin, como se detalla m\u00e1s abajo.</translation>\n+    </message>\n     <message>\n         <source>Number of blocks left</source>\n         <translation>N\u00famero de bloques restantes</translation>\n@@ -1395,6 +1407,26 @@\n         <source>%1 ms</source>\n         <translation>%1 ms</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n second(s)</source>\n+        <translation><numerusform>%n segundo</numerusform><numerusform>%n segundos</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n minute(s)</source>\n+        <translation><numerusform>%n minuto</numerusform><numerusform>%n minutos</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n hour(s)</source>\n+        <translation><numerusform>%n hora</numerusform><numerusform>%n horas</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n day(s)</source>\n+        <translation><numerusform>%n d\u00eda</numerusform><numerusform>%n d\u00edas</numerusform></translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>%n week(s)</source>\n+        <translation><numerusform>%n semana</numerusform><numerusform>%n semanas</numerusform></translation>\n+    </message>\n     <message>\n         <source>%1 and %2</source>\n         <translation>%1 y %2</translation>\n@@ -1410,7 +1442,15 @@\n         <source>Error: Specified data directory \"%1\" does not exist.</source>\n         <translation>Error: directorio especificado \"%1\" no existe.</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Error: Cannot parse configuration file: %1. Only use key=value syntax.</source>\n+        <translation>Error: no se puede interpretar el archivo de configuraci\u00f3n: %1. Utilize exclusivamente sintaxis clave=valor.</translation>\n+    </message>\n+    <message>\n+        <source>Error: %1</source>\n+        <translation>Error: %1</translation>\n+    </message>\n+</context>\n <context>\n     <name>QRImageWidget</name>\n     <message>\n@@ -1588,6 +1628,10 @@\n         <source>Ping Wait</source>\n         <translation>Espera de Ping</translation>\n     </message>\n+    <message>\n+        <source>Min Ping</source>\n+        <translation>Ping m\u00edn.</translation>\n+    </message>\n     <message>\n         <source>Time Offset</source>\n         <translation>Desplazamiento de tiempo</translation>\n@@ -1648,6 +1692,14 @@\n         <source>1 &amp;year</source>\n         <translation>1 &amp;a\u00f1o</translation>\n     </message>\n+    <message>\n+        <source>&amp;Disconnect</source>\n+        <translation>&amp;Desconectar</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Unban</source>\n+        <translation>&amp;Desbanear</translation>\n+    </message>\n     <message>\n         <source>Welcome to the %1 RPC console.</source>\n         <translation>Bienvenido a la consola RPC %1.</translation>\n@@ -1660,6 +1712,14 @@\n         <source>Type &lt;b&gt;help&lt;/b&gt; for an overview of available commands.</source>\n         <translation>Escriba &lt;b&gt;help&lt;/b&gt; para ver un resumen de los comandos disponibles.</translation>\n     </message>\n+    <message>\n+        <source>WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramification of a command.</source>\n+        <translation>ADVERTENCIA: algunos estafadores han estado pidiendo a los usuarios que escriban comandos aqu\u00ed, robando el contenido de sus carteras. No use esta consola sin entender completamente las ramificaciones del comando.</translation>\n+    </message>\n+    <message>\n+        <source>Network activity disabled</source>\n+        <translation>Actividad de red desactivada</translation>\n+    </message>\n     <message>\n         <source>%1 B</source>\n         <translation>%1 B</translation>\n@@ -2104,6 +2164,10 @@\n         <source>Transaction creation failed!</source>\n         <translation>\u00a1Fall\u00f3 la creaci\u00f3n de transacci\u00f3n!</translation>\n     </message>\n+    <message>\n+        <source>The transaction was rejected with the following reason: %1</source>\n+        <translation>Esta transacci\u00f3n fue rechazada por la siguiente raz\u00f3n: %1</translation>\n+    </message>\n     <message>\n         <source>A fee higher than %1 is considered an absurdly high fee.</source>\n         <translation>Una couta mayor que %1 se considera una cuota irracionalmente alta.</translation>\n@@ -2112,6 +2176,10 @@\n         <source>Payment request expired.</source>\n         <translation>Solicitud de pago caducada.</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n block(s)</source>\n+        <translation><numerusform>%n bloque</numerusform><numerusform>%n bloques</numerusform></translation>\n+    </message>\n     <message>\n         <source>Pay only the required fee of %1</source>\n         <translation>Pagar \u00fanicamente la cuota solicitada de %1</translation>\n@@ -2124,6 +2192,14 @@\n         <source>Warning: Unknown change address</source>\n         <translation>Alerta: direcci\u00f3n cambiada desconocida</translation>\n     </message>\n+    <message>\n+        <source>Confirm custom change address</source>\n+        <translation>Confirmar direcci\u00f3n de cambio personalizada</translation>\n+    </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>La direcci\u00f3n que seleccion\u00f3 para el cambio no es parte de esta cartera. Parte o la totalidad de los fondos de su cartera podr\u00edan ser enviados a esta direcci\u00f3n. \u00bfEst\u00e1 seguro?</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(sin etiqueta)</translation>\n@@ -2385,6 +2461,10 @@\n </context>\n <context>\n     <name>TransactionDesc</name>\n+    <message numerus=\"yes\">\n+        <source>Open for %n more block(s)</source>\n+        <translation><numerusform>Abierto para %n bloque m\u00e1s</numerusform><numerusform>Abierto para %n bloques m\u00e1s</numerusform></translation>\n+    </message>\n     <message>\n         <source>Open until %1</source>\n         <translation>Abierto hasta %1</translation>\n@@ -3658,6 +3738,10 @@\n         <source>Threshold for disconnecting misbehaving peers (default: %u)</source>\n         <translation>Umbral para la desconexi\u00f3n de pares con mal comportamiento (predeterminado: %u)</translation>\n     </message>\n+    <message>\n+        <source>Transaction amounts must not be negative</source>\n+        <translation>Las cantidades de las transacciones no pueden ser negativas.</translation>\n+    </message>\n     <message>\n         <source>Unknown network specified in -onlynet: '%s'</source>\n         <translation>La red especificada en -onlynet '%s' es desconocida</translation>"
      },
      {
        "sha": "c1a66af5c2d2abcbccc73b0e6ea80161f50684c3",
        "filename": "src/qt/locale/bitcoin_he.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_he.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_he.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_he.ts?ref=29a3cb237802a6f240def54cbc74cb2d5375683a",
        "patch": "@@ -1003,6 +1003,10 @@\n         <source>Map port using &amp;UPnP</source>\n         <translation>\u05de\u05d9\u05e4\u05d5\u05d9 \u05e4\u05ea\u05d7\u05d4 \u05d1\u05d0\u05de\u05e6\u05e2\u05d5\u05ea UPnP</translation>\n     </message>\n+    <message>\n+        <source>Connect to the Bitcoin network through a SOCKS5 proxy.</source>\n+        <translation>\u05d4\u05ea\u05d7\u05d1\u05e8 \u05dc\u05e8\u05e9\u05ea \u05d4\u05d1\u05d9\u05d8\u05e7\u05d5\u05d9\u05df \u05d3\u05e8\u05da \u05e4\u05e8\u05d5\u05e7\u05e1\u05d9 SOCKS5.</translation>\n+    </message>\n     <message>\n         <source>Proxy &amp;IP:</source>\n         <translation>\u05db\u05ea\u05d5\u05d1\u05ea \u05d4\u05beIP \u05e9\u05dc \u05d4\u05de&amp;\u05ea\u05d5\u05d5\u05da:</translation>"
      },
      {
        "sha": "54afafac2c34c82d3736c689cb898b9cc8b310d3",
        "filename": "src/qt/locale/bitcoin_lt.ts",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_lt.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_lt.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_lt.ts?ref=29a3cb237802a6f240def54cbc74cb2d5375683a",
        "patch": "@@ -44,6 +44,10 @@\n     </context>\n <context>\n     <name>AddressTableModel</name>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adresas</translation>\n+    </message>\n     </context>\n <context>\n     <name>AskPassphraseDialog</name>\n@@ -113,6 +117,10 @@\n         <source>&amp;About %1</source>\n         <translation>&amp;Apie %1</translation>\n     </message>\n+    <message>\n+        <source>Show information about %1</source>\n+        <translation>Rodyti informacij\u0105 apie %1</translation>\n+    </message>\n     <message>\n         <source>About &amp;Qt</source>\n         <translation>Apie &amp;Qt</translation>\n@@ -245,6 +253,12 @@\n         <source>Catching up...</source>\n         <translation>Vejamasi...</translation>\n     </message>\n+    <message>\n+        <source>Date: %1\n+</source>\n+        <translation>Data: %1\n+</translation>\n+    </message>\n     <message>\n         <source>Sent transaction</source>\n         <translation>Sandoris nusi\u0173stas</translation>\n@@ -716,6 +730,10 @@\n         <source>Copy &amp;Address</source>\n         <translation>&amp;Kopijuoti adres\u0105</translation>\n     </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adresas</translation>\n+    </message>\n     </context>\n <context>\n     <name>RecentRequestsTableModel</name>\n@@ -900,6 +918,10 @@\n     </context>\n <context>\n     <name>TransactionView</name>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adresas</translation>\n+    </message>\n     </context>\n <context>\n     <name>UnitDisplayStatusBarControl</name>"
      },
      {
        "sha": "44038b9497677a2675f6064ecc99c2511018d702",
        "filename": "src/qt/locale/bitcoin_lv_LV.ts",
        "status": "modified",
        "additions": 106,
        "deletions": 2,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_lv_LV.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_lv_LV.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_lv_LV.ts?ref=29a3cb237802a6f240def54cbc74cb2d5375683a",
        "patch": "@@ -37,10 +37,46 @@\n         <source>&amp;Delete</source>\n         <translation>&amp;Dz\u0113st</translation>\n     </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>Izv\u0113lies adresi uz kuru s\u016bt\u012bt bitcoins</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>Izv\u0113lies adresi ar kuru sa\u0146emt bitcoins</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy Address</source>\n+        <translation>&amp;Kop\u0113t adresi</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Edit</source>\n+        <translation>&amp;Redi\u0123\u0113t</translation>\n+    </message>\n+    <message>\n+        <source>Export Address List</source>\n+        <translation>Eksport\u0113t Adre\u0161u Sarakstu</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Eksport\u0113\u0161ana Neizdev\u0101s</translation>\n+    </message>\n     </context>\n <context>\n     <name>AddressTableModel</name>\n-    </context>\n+    <message>\n+        <source>Label</source>\n+        <translation>Nosaukums</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adrese</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(bez nosaukuma)</translation>\n+    </message>\n+</context>\n <context>\n     <name>AskPassphraseDialog</name>\n     <message>\n@@ -59,6 +95,30 @@\n         <source>Repeat new passphrase</source>\n         <translation>Jaun\u0101 parole v\u0113lreiz</translation>\n     </message>\n+    <message>\n+        <source>Encrypt wallet</source>\n+        <translation>\u0160ifr\u0113t maci\u0146u</translation>\n+    </message>\n+    <message>\n+        <source>Unlock wallet</source>\n+        <translation>Atsl\u0113gt maci\u0146u</translation>\n+    </message>\n+    <message>\n+        <source>Decrypt wallet</source>\n+        <translation>At\u0161ifr\u0113t maci\u0146u</translation>\n+    </message>\n+    <message>\n+        <source>Confirm wallet encryption</source>\n+        <translation>Apstiprin\u0101t maci\u0146a \u0161ifr\u0113\u0161anu</translation>\n+    </message>\n+    <message>\n+        <source>Are you sure you wish to encrypt your wallet?</source>\n+        <translation>Vai tu tie\u0161\u0101m v\u0113lies \u0161ifr\u0113t savu maci\u0146u?</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encryption failed</source>\n+        <translation>Maci\u0146a \u0161ifr\u0113\u0161ana neizdev\u0101s</translation>\n+    </message>\n     </context>\n <context>\n     <name>BanTableModel</name>\n@@ -328,6 +388,10 @@\n         <source>Confirmed</source>\n         <translation>Apstiprin\u0101ts</translation>\n     </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(bez nosaukuma)</translation>\n+    </message>\n     </context>\n <context>\n     <name>EditAddressDialog</name>\n@@ -840,9 +904,25 @@\n         <source>&amp;Save Image...</source>\n         <translation>&amp;Saglab\u0101t Att\u0113lu...</translation>\n     </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adrese</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Nosaukums</translation>\n+    </message>\n     </context>\n <context>\n     <name>RecentRequestsTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>Nosaukums</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(bez nosaukuma)</translation>\n+    </message>\n     </context>\n <context>\n     <name>SendCoinsDialog</name>\n@@ -926,7 +1006,11 @@\n         <source>S&amp;end</source>\n         <translation>&amp;S\u016bt\u012bt</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(bez nosaukuma)</translation>\n+    </message>\n+</context>\n <context>\n     <name>SendCoinsEntry</name>\n     <message>\n@@ -1081,9 +1165,29 @@\n     </context>\n <context>\n     <name>TransactionTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>Nosaukums</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(bez nosaukuma)</translation>\n+    </message>\n     </context>\n <context>\n     <name>TransactionView</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>Nosaukums</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adrese</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Eksport\u0113\u0161ana Neizdev\u0101s</translation>\n+    </message>\n     </context>\n <context>\n     <name>UnitDisplayStatusBarControl</name>"
      },
      {
        "sha": "e4ac41730591f307fe4a1eb6c307a0aefa079b15",
        "filename": "src/qt/locale/bitcoin_ms_MY.ts",
        "status": "modified",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_ms_MY.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_ms_MY.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ms_MY.ts?ref=29a3cb237802a6f240def54cbc74cb2d5375683a",
        "patch": "@@ -318,6 +318,22 @@ Alihkan fail data ke dalam tab semasa</translation>\n         <source>Open &amp;URI...</source>\n         <translation>Buka &amp;URI...</translation>\n     </message>\n+    <message>\n+        <source>Click to disable network activity.</source>\n+        <translation>Tekan untuk lumpuhkan rangkaian</translation>\n+    </message>\n+    <message>\n+        <source>Network activity disabled.</source>\n+        <translation>Aktiviti rangkaian dilumpuhkan</translation>\n+    </message>\n+    <message>\n+        <source>Click to enable network activity again.</source>\n+        <translation>Tekan untuk mengaktifkan rangkain semula</translation>\n+    </message>\n+    <message>\n+        <source>Syncing Headers (%1%)...</source>\n+        <translation>Penyelarasn tajuk (%1%)...</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Reindexi blok pada cakera...</translation>\n@@ -330,6 +346,70 @@ Alihkan fail data ke dalam tab semasa</translation>\n         <source>Backup wallet to another location</source>\n         <translation>Wallet sandaran ke lokasi lain</translation>\n     </message>\n+    <message>\n+        <source>Change the passphrase used for wallet encryption</source>\n+        <translation>Tukar kata laluan untuk dompet disulitkan</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Debug window</source>\n+        <translation>Tetingkap Debug</translation>\n+    </message>\n+    <message>\n+        <source>Open debugging and diagnostic console</source>\n+        <translation>buka debug dan konsol diagnostik</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Verify message...</source>\n+        <translation>sahkan mesej</translation>\n+    </message>\n+    <message>\n+        <source>Bitcoin</source>\n+        <translation>Bitcoin</translation>\n+    </message>\n+    <message>\n+        <source>Wallet</source>\n+        <translation>dompet</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Send</source>\n+        <translation>hantar</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Receive</source>\n+        <translation>terima</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Show / Hide</source>\n+        <translation>&amp;tunjuk/sembunyi</translation>\n+    </message>\n+    <message>\n+        <source>Show or hide the main Window</source>\n+        <translation>tunjuk atau sembunyi tetingkap utama</translation>\n+    </message>\n+    <message>\n+        <source>Encrypt the private keys that belong to your wallet</source>\n+        <translation>sulitkan kata laluan milik peribadi anda </translation>\n+    </message>\n+    <message>\n+        <source>Sign messages with your Bitcoin addresses to prove you own them</source>\n+        <translation>Log mesej dengan alamat Bitcoin anda untuk membuktikan anda memilikinya</translation>\n+    </message>\n+    <message>\n+        <source>Verify messages to ensure they were signed with specified Bitcoin addresses</source>\n+        <translation>Sahkan mesej untuk memastikan mereka telah ditandatangani dengan alamat Bitcoin yang ditentukan</translation>\n+    </message>\n+    <message>\n+        <source>&amp;File</source>\n+        <translation>fail</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Settings</source>\n+        <translation>tetapan</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Help</source>\n+        <translation>tolong</translation>\n+    </message>\n     </context>\n <context>\n     <name>CoinControlDialog</name>"
      },
      {
        "sha": "c8b0d17593fb5546179c7847cd413d66b9c9063b",
        "filename": "src/qt/locale/bitcoin_nl.ts",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_nl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_nl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nl.ts?ref=29a3cb237802a6f240def54cbc74cb2d5375683a",
        "patch": "@@ -311,7 +311,7 @@\n     </message>\n     <message>\n         <source>&amp;Receiving addresses...</source>\n-        <translation>&amp;Ontvang adressen...</translation>\n+        <translation>&amp;Ontvangstadressen...</translation>\n     </message>\n     <message>\n         <source>Open &amp;URI...</source>\n@@ -423,7 +423,7 @@\n     </message>\n     <message>\n         <source>Show the list of used receiving addresses and labels</source>\n-        <translation>Toon de lijst met gebruikte ontvangst adressen en labels</translation>\n+        <translation>Toon de lijst met gebruikte ontvangstadressen en labels</translation>\n     </message>\n     <message>\n         <source>Open a bitcoin: URI or payment request</source>\n@@ -1809,7 +1809,7 @@\n     </message>\n     <message>\n         <source>An optional label to associate with the new receiving address.</source>\n-        <translation>Een optioneel label om te associ\u00ebren met het nieuwe ontvangende adres</translation>\n+        <translation>Een optioneel label om te associ\u00ebren met het nieuwe ontvangstadres</translation>\n     </message>\n     <message>\n         <source>Use this form to request payments. All fields are &lt;b&gt;optional&lt;/b&gt;.</source>"
      },
      {
        "sha": "d4650ffcf5bf3891f3b1e01f5d3390419962cf32",
        "filename": "src/qt/locale/bitcoin_pl.ts",
        "status": "modified",
        "additions": 288,
        "deletions": 4,
        "changes": 292,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_pl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_pl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pl.ts?ref=29a3cb237802a6f240def54cbc74cb2d5375683a",
        "patch": "@@ -1305,6 +1305,10 @@\n         <source>Refund from %1</source>\n         <translation>Zwrot z %1</translation>\n     </message>\n+    <message>\n+        <source>Payment request %1 is too large (%2 bytes, allowed %3 bytes).</source>\n+        <translation>\u017b\u0105danie p\u0142atno\u015bci %1 jest zbyt du\u017ce (%2 bajt\u00f3w, dozwolone %3 bajt\u00f3w).</translation>\n+    </message>\n     <message>\n         <source>Error communicating with %1: %2</source>\n         <translation>B\u0142\u0105d komunikacji z %1 : %2</translation>\n@@ -1422,6 +1426,10 @@\n         <source>Error: Specified data directory \"%1\" does not exist.</source>\n         <translation>B\u0142\u0105d: Okre\u015blony folder danych \"%1\" nie istnieje.</translation>\n     </message>\n+    <message>\n+        <source>Error: Cannot parse configuration file: %1. Only use key=value syntax.</source>\n+        <translation>B\u0142\u0105d: Nie mo\u017cna przetworzy\u0107 pliku konfiguracyjnego: %1. U\u017cywaj tylko sk\u0142adni klucz=warto\u015b\u0107.</translation>\n+    </message>\n     <message>\n         <source>Error: %1</source>\n         <translation>B\u0142\u0105d: %1</translation>\n@@ -1692,6 +1700,10 @@\n         <source>Type &lt;b&gt;help&lt;/b&gt; for an overview of available commands.</source>\n         <translation>Wpisz &lt;b&gt;help&lt;/b&gt; aby uzyska\u0107 list\u0119 dost\u0119pnych komend</translation>\n     </message>\n+    <message>\n+        <source>WARNING: Scammers have been active, telling users to type commands here, stealing their wallet contents. Do not use this console without fully understanding the ramification of a command.</source>\n+        <translation>UWAGA: Oszu\u015bci nak\u0142aniaj\u0105 do wpisywania tutaj r\u00f3\u017cnych polece\u0144 aby ukra\u015b\u0107 portfel. Nie u\u017cywaj tej konsoli bez pe\u0142nego zrozumienia wpisywanych polece\u0144.</translation>\n+    </message>\n     <message>\n         <source>Network activity disabled</source>\n         <translation>Aktywno\u015b\u0107 sieciowa wy\u0142\u0105czona</translation>\n@@ -1878,6 +1890,10 @@\n         <source>Message</source>\n         <translation>Wiadomo\u015b\u0107</translation>\n     </message>\n+    <message>\n+        <source>Resulting URI too long, try to reduce the text for label / message.</source>\n+        <translation>Wynikowy URI jest zbyt d\u0142ugi, spr\u00f3buj zmniejszy\u0107 tekst etykiety / wiadomo\u015bci</translation>\n+    </message>\n     <message>\n         <source>Error encoding URI into QR Code.</source>\n         <translation>B\u0142\u0105d kodowania URI w kod QR</translation>\n@@ -2144,10 +2160,18 @@\n         <source>Payment request expired.</source>\n         <translation>\u017b\u0105danie p\u0142atno\u015bci up\u0142yn\u0119\u0142o.</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n block(s)</source>\n+        <translation><numerusform>%n blok</numerusform><numerusform>%n blok\u00f3w</numerusform><numerusform>%n blok\u00f3w</numerusform><numerusform>%n blok\u00f3w</numerusform></translation>\n+    </message>\n     <message>\n         <source>Pay only the required fee of %1</source>\n         <translation>Zap\u0142a\u0107 tylko wymagan\u0105 op\u0142at\u0119 w wysoko\u015bci %1</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>Estimated to begin confirmation within %n block(s).</source>\n+        <translation><numerusform>Przybli\u017cony czas zatwierdzenia: %n blok.</numerusform><numerusform>Przybli\u017cony czas zatwierdzenia: %n bloki.</numerusform><numerusform>Przybli\u017cony czas zatwierdzenia: %n blok\u00f3w.</numerusform><numerusform>Przybli\u017cony czas zatwierdzenia: %n blok\u00f3w.</numerusform></translation>\n+    </message>\n     <message>\n         <source>Warning: Invalid Bitcoin address</source>\n         <translation>Ostrze\u017cenie: nieprawid\u0142owy adres Bitcoin</translation>\n@@ -2156,6 +2180,10 @@\n         <source>Warning: Unknown change address</source>\n         <translation>Ostrze\u017cenie: Nieznany adres reszty</translation>\n     </message>\n+    <message>\n+        <source>Confirm custom change address</source>\n+        <translation>Potwierd\u017a zmian\u0119 adresu w\u0142asnego</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(brak etykiety)</translation>\n@@ -2239,7 +2267,11 @@\n         <source>Memo:</source>\n         <translation>Notatka:</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Enter a label for this address to add it to your address book</source>\n+        <translation>Wprowad\u017a etykiet\u0119 dla tego adresu by doda\u0107 go do ksi\u0105\u017cki adresowej</translation>\n+    </message>\n+</context>\n <context>\n     <name>SendConfirmationDialog</name>\n     <message>\n@@ -2345,6 +2377,10 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Reset all verify message fields</source>\n         <translation>Resetuje wszystkie pola weryfikacji wiadomo\u015bci</translation>\n     </message>\n+    <message>\n+        <source>Click \"Sign Message\" to generate signature</source>\n+        <translation>Kliknij \"Podpisz Wiadomo\u015b\u0107\" \u017ceby uzyska\u0107 podpis</translation>\n+    </message>\n     <message>\n         <source>The entered address is invalid.</source>\n         <translation>Podany adres jest nieprawid\u0142owy.</translation>\n@@ -2353,6 +2389,10 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Please check the address and try again.</source>\n         <translation>Prosz\u0119 sprawdzi\u0107 adres i spr\u00f3bowa\u0107 ponownie.</translation>\n     </message>\n+    <message>\n+        <source>The entered address does not refer to a key.</source>\n+        <translation>Wprowadzony adres nie odnosi si\u0119 do klucza.</translation>\n+    </message>\n     <message>\n         <source>Wallet unlock was cancelled.</source>\n         <translation>Odblokowanie portfela zosta\u0142o anulowane.</translation>\n@@ -2369,6 +2409,22 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Message signed.</source>\n         <translation>Wiadomo\u015b\u0107 podpisana.</translation>\n     </message>\n+    <message>\n+        <source>The signature could not be decoded.</source>\n+        <translation>Podpis nie mo\u017ce zosta\u0107 zdekodowany.</translation>\n+    </message>\n+    <message>\n+        <source>Please check the signature and try again.</source>\n+        <translation>Sprawd\u017a podpis i spr\u00f3buj ponownie.</translation>\n+    </message>\n+    <message>\n+        <source>The signature did not match the message digest.</source>\n+        <translation>Podpis nie odpowiada skr\u00f3towi wiadomo\u015bci.</translation>\n+    </message>\n+    <message>\n+        <source>Message verification failed.</source>\n+        <translation>Weryfikacja wiadomo\u015bci nie powiod\u0142a si\u0119.</translation>\n+    </message>\n     <message>\n         <source>Message verified.</source>\n         <translation>Wiadomo\u015b\u0107 zweryfikowana.</translation>\n@@ -2390,10 +2446,54 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n </context>\n <context>\n     <name>TransactionDesc</name>\n+    <message numerus=\"yes\">\n+        <source>Open for %n more block(s)</source>\n+        <translation><numerusform>Otw\u00f3rz dla %n kolejnego bloku</numerusform><numerusform>Otw\u00f3rz dla %n kolejnych blok\u00f3w</numerusform><numerusform>Otw\u00f3rz dla %n kolejnych blok\u00f3w</numerusform><numerusform>Otw\u00f3rz dla %n kolejnych blok\u00f3w</numerusform></translation>\n+    </message>\n+    <message>\n+        <source>Open until %1</source>\n+        <translation>Otw\u00f3rz do %1</translation>\n+    </message>\n+    <message>\n+        <source>conflicted with a transaction with %1 confirmations</source>\n+        <translation>sprzeczny z transakcj\u0105 posiadaj\u0105c\u0105 %1 potwierdze\u0144</translation>\n+    </message>\n+    <message>\n+        <source>%1/offline</source>\n+        <translation>%1/offline</translation>\n+    </message>\n+    <message>\n+        <source>0/unconfirmed, %1</source>\n+        <translation>0/niezatwierdzone, %1</translation>\n+    </message>\n+    <message>\n+        <source>in memory pool</source>\n+        <translation>w obszarze pami\u0119ci</translation>\n+    </message>\n     <message>\n         <source>abandoned</source>\n         <translation>porzucone</translation>\n     </message>\n+    <message>\n+        <source>%1/unconfirmed</source>\n+        <translation>%1/niezatwierdzone</translation>\n+    </message>\n+    <message>\n+        <source>%1 confirmations</source>\n+        <translation>%1 potwierdze\u0144</translation>\n+    </message>\n+    <message>\n+        <source>Status</source>\n+        <translation>Status</translation>\n+    </message>\n+    <message>\n+        <source>, has not been successfully broadcast yet</source>\n+        <translation>, nie zosta\u0142 jeszcze pomy\u015blnie rozes\u0142any</translation>\n+    </message>\n+    <message numerus=\"yes\">\n+        <source>, broadcast through %n node(s)</source>\n+        <translation><numerusform>, przekazywany przez %n w\u0119z\u0119\u0142</numerusform><numerusform>, przekazywany przez %n w\u0119zy</numerusform><numerusform>, przekazywany przez %n w\u0119z\u0142\u00f3w</numerusform><numerusform>, przekazywany przez %n w\u0119z\u0142\u00f3w</numerusform></translation>\n+    </message>\n     <message>\n         <source>Date</source>\n         <translation>Data</translation>\n@@ -2430,14 +2530,50 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>label</source>\n         <translation>etykieta</translation>\n     </message>\n+    <message>\n+        <source>Credit</source>\n+        <translation>Uznanie</translation>\n+    </message>\n+    <message>\n+        <source>not accepted</source>\n+        <translation>niezaakceptowane</translation>\n+    </message>\n+    <message>\n+        <source>Debit</source>\n+        <translation>Debet</translation>\n+    </message>\n     <message>\n         <source>Transaction fee</source>\n         <translation>Op\u0142ata transakcyjna</translation>\n     </message>\n+    <message>\n+        <source>Net amount</source>\n+        <translation>Kwota netto</translation>\n+    </message>\n     <message>\n         <source>Message</source>\n         <translation>Wiadomo\u015b\u0107</translation>\n     </message>\n+    <message>\n+        <source>Comment</source>\n+        <translation>Komentarz</translation>\n+    </message>\n+    <message>\n+        <source>Transaction ID</source>\n+        <translation>ID transakcji</translation>\n+    </message>\n+    <message>\n+        <source>Transaction total size</source>\n+        <translation>Rozmiar transakcji</translation>\n+    </message>\n+    <message>\n+        <source>Output index</source>\n+        <translation>Indeks wyj\u015bciowy</translation>\n+    </message>\n+    <message>\n+        <source>Debug information</source>\n+        <translation>Informacje debugowania</translation>\n+    </message>\n     <message>\n         <source>Transaction</source>\n         <translation>Transakcja</translation>\n@@ -2465,7 +2601,11 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>This pane shows a detailed description of the transaction</source>\n         <translation>Ten panel pokazuje szczeg\u00f3\u0142owy opis transakcji</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Details for %1</source>\n+        <translation>Szczeg\u00f3\u0142y %1</translation>\n+    </message>\n+</context>\n <context>\n     <name>TransactionTableModel</name>\n     <message>\n@@ -2480,6 +2620,14 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Label</source>\n         <translation>Etykieta</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>Open for %n more block(s)</source>\n+        <translation><numerusform>Otw\u00f3rz dla %n kolejnego bloku</numerusform><numerusform>Otw\u00f3rz dla %n kolejnych blok\u00f3w</numerusform><numerusform>Otw\u00f3rz dla %n kolejnych blok\u00f3w</numerusform><numerusform>Otw\u00f3rz dla %n kolejnych blok\u00f3w</numerusform></translation>\n+    </message>\n+    <message>\n+        <source>Open until %1</source>\n+        <translation>Otw\u00f3rz do %1</translation>\n+    </message>\n     <message>\n         <source>Offline</source>\n         <translation>Offline</translation>\n@@ -2492,26 +2640,70 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Abandoned</source>\n         <translation>Porzucone</translation>\n     </message>\n+    <message>\n+        <source>Confirming (%1 of %2 recommended confirmations)</source>\n+        <translation>Potwierdzanie (%1 z %2 rekomendowanych potwierdze\u0144)</translation>\n+    </message>\n+    <message>\n+        <source>Confirmed (%1 confirmations)</source>\n+        <translation>Zatwierdzony (%1 potwierdze\u0144)</translation>\n+    </message>\n     <message>\n         <source>Conflicted</source>\n         <translation>Skonfliktowane</translation>\n     </message>\n+    <message>\n+        <source>Immature (%1 confirmations, will be available after %2)</source>\n+        <translation>Niedojrza\u0142a (%1 potwierdze\u0144, b\u0119dzie dost\u0119pna po %2)</translation>\n+    </message>\n+    <message>\n+        <source>This block was not received by any other nodes and will probably not be accepted!</source>\n+        <translation>Ten blok nie zosta\u0142 odebrany przez jakikolwiek inny w\u0119ze\u0142 i prawdopodobnie nie zostanie zaakceptowany!</translation>\n+    </message>\n     <message>\n         <source>Generated but not accepted</source>\n         <translation>Wygenerowane ale nie zaakceptowane</translation>\n     </message>\n+    <message>\n+        <source>Received from</source>\n+        <translation>Odebrano od</translation>\n+    </message>\n     <message>\n         <source>Sent to</source>\n         <translation>Wys\u0142ane do</translation>\n     </message>\n+    <message>\n+        <source>Payment to yourself</source>\n+        <translation>P\u0142atno\u015b\u0107 do siebie</translation>\n+    </message>\n+    <message>\n+        <source>Mined</source>\n+        <translation>Wydobyto</translation>\n+    </message>\n     <message>\n         <source>watch-only</source>\n         <translation>tylko-obserwowany</translation>\n     </message>\n+    <message>\n+        <source>(n/a)</source>\n+        <translation>(brak)</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(brak etykiety)</translation>\n     </message>\n+    <message>\n+        <source>Transaction status. Hover over this field to show number of confirmations.</source>\n+        <translation>Status transakcji. Najed\u017a na pole, aby zobaczy\u0107 liczb\u0119 potwierdze\u0144.</translation>\n+    </message>\n+    <message>\n+        <source>Date and time that the transaction was received.</source>\n+        <translation>Data i czas odebrania transakcji.</translation>\n+    </message>\n+    <message>\n+        <source>Type of transaction.</source>\n+        <translation>Rodzaj transakcji.</translation>\n+    </message>\n     </context>\n <context>\n     <name>TransactionView</name>\n@@ -2547,6 +2739,26 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Sent to</source>\n         <translation>Wys\u0142ane do</translation>\n     </message>\n+    <message>\n+        <source>To yourself</source>\n+        <translation>Do siebie</translation>\n+    </message>\n+    <message>\n+        <source>Mined</source>\n+        <translation>Wydobyto</translation>\n+    </message>\n+    <message>\n+        <source>Other</source>\n+        <translation>Inne</translation>\n+    </message>\n+    <message>\n+        <source>Enter address or label to search</source>\n+        <translation>Wprowad\u017a adres albo etykiet\u0119 aby wyszuka\u0107</translation>\n+    </message>\n+    <message>\n+        <source>Abandon transaction</source>\n+        <translation>Porzu\u0107 transakcj\u0119</translation>\n+    </message>\n     <message>\n         <source>Copy address</source>\n         <translation>Kopiuj adres</translation>\n@@ -2563,14 +2775,34 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Copy transaction ID</source>\n         <translation>Skopiuj ID transakcji</translation>\n     </message>\n+    <message>\n+        <source>Copy raw transaction</source>\n+        <translation>Skopiuj surowe dane transakcji</translation>\n+    </message>\n+    <message>\n+        <source>Copy full transaction details</source>\n+        <translation>Skopiuj pe\u0142ne informacje o transakcji</translation>\n+    </message>\n     <message>\n         <source>Edit label</source>\n         <translation>Zmie\u0144 etykiet\u0119</translation>\n     </message>\n+    <message>\n+        <source>Show transaction details</source>\n+        <translation>Poka\u017c szczeg\u00f3\u0142y transakcji</translation>\n+    </message>\n+    <message>\n+        <source>Export Transaction History</source>\n+        <translation>Eksport historii transakcji</translation>\n+    </message>\n     <message>\n         <source>Comma separated file (*.csv)</source>\n         <translation>Plik *.CSV (dane rozdzielane przecinkami)</translation>\n     </message>\n+    <message>\n+        <source>Confirmed</source>\n+        <translation>Potwierdzony</translation>\n+    </message>\n     <message>\n         <source>Date</source>\n         <translation>Data</translation>\n@@ -2587,10 +2819,22 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Address</source>\n         <translation>Adres</translation>\n     </message>\n+    <message>\n+        <source>ID</source>\n+        <translation>ID</translation>\n+    </message>\n     <message>\n         <source>Exporting Failed</source>\n         <translation>Eksportowanie nie powiod\u0142o si\u0119</translation>\n     </message>\n+    <message>\n+        <source>Exporting Successful</source>\n+        <translation>Eksport powi\u00f3d\u0142 si\u0119</translation>\n+    </message>\n+    <message>\n+        <source>The transaction history was successfully saved to %1.</source>\n+        <translation>Historia transakcji zosta\u0142a zapisana do %1.</translation>\n+    </message>\n     <message>\n         <source>Range:</source>\n         <translation>Zakres:</translation>\n@@ -2609,20 +2853,44 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n </context>\n <context>\n     <name>WalletFrame</name>\n-    </context>\n+    <message>\n+        <source>No wallet has been loaded.</source>\n+        <translation>Nie za\u0142adowano \u017cadnego portfela.</translation>\n+    </message>\n+</context>\n <context>\n     <name>WalletModel</name>\n-    </context>\n+    <message>\n+        <source>Send Coins</source>\n+        <translation>Wy\u015blij p\u0142atno\u015b\u0107</translation>\n+    </message>\n+</context>\n <context>\n     <name>WalletView</name>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>&amp;Eksportuj</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>Eksportuj dane z aktywnej karty do pliku</translation>\n+    </message>\n     <message>\n         <source>Backup Wallet</source>\n         <translation>Kopia zapasowa portfela</translation>\n     </message>\n+    <message>\n+        <source>Wallet Data (*.dat)</source>\n+        <translation>Dane Portfela (*.dat)</translation>\n+    </message>\n     <message>\n         <source>Backup Failed</source>\n         <translation>Nie uda\u0142o si\u0119 wykona\u0107 kopii zapasowej</translation>\n     </message>\n+    <message>\n+        <source>There was an error trying to save the wallet data to %1.</source>\n+        <translation>Wyst\u0105pi\u0142 b\u0142\u0105d przy pr\u00f3bie zapisu pliku portfela do %1.</translation>\n+    </message>\n     <message>\n         <source>Backup Successful</source>\n         <translation>Wykonano kopi\u0119 zapasow\u0105</translation>\n@@ -2654,6 +2922,10 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Accept command line and JSON-RPC commands</source>\n         <translation>Akceptuj lini\u0119 polece\u0144 oraz polecenia JSON-RPC</translation>\n     </message>\n+    <message>\n+        <source>Distributed under the MIT software license, see the accompanying file %s or %s</source>\n+        <translation>Rozprowadzane na licencji MIT, zobacz do\u0142\u0105czony plik %s lub %s</translation>\n+    </message>\n     <message>\n         <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n         <translation>Je\u017celi &lt;category&gt; nie zostanie okre\u015blona lub &lt;category&gt; = 1, wy\u015bwietl wszystkie informacje debugowania.</translation>\n@@ -3210,6 +3482,10 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Support filtering of blocks and transaction with bloom filters (default: %u)</source>\n         <translation>Wspieraj filtrowanie blok\u00f3w i transakcji u\u017cywaj\u0105c Filtr\u00f3w Blooma (domy\u015blnie: %u)</translation>\n     </message>\n+    <message>\n+        <source>This product includes software developed by the OpenSSL Project for use in the OpenSSL Toolkit %s and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard.</source>\n+        <translation>Produkt zawiera oprogramowanie stworzone przez OpenSSL Project do u\u017cycia w OpensSSL Toolkit %s, oprogramowanie kryptograficzne napisane przez Eric Young oraz oprogramowanie UPnP napisane przez Thomas Bernard.</translation>\n+    </message>\n     <message>\n         <source>Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.</source>\n         <translation>Ca\u0142kowita d\u0142ugo\u015b\u0107 \u0142a\u0144cucha wersji (%i) przekracza maksymaln\u0105 dopuszczaln\u0105 d\u0142ugo\u015b\u0107 (%i). Zmniejsz ilo\u015b\u0107 lub rozmiar parametru uacomment.</translation>\n@@ -3294,6 +3570,10 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Relay non-P2SH multisig (default: %u)</source>\n         <translation>Przekazuj transakcje multisig inne ni\u017c P2SH (domy\u015blnie: %u)</translation>\n     </message>\n+    <message>\n+        <source>Send transactions with full-RBF opt-in enabled (default: %u)</source>\n+        <translation>Wy\u015blij transakcje z w\u0142\u0105czon\u0105 flag\u0105 full-RBF (domy\u015blnie: %u)</translation>\n+    </message>\n     <message>\n         <source>Set key pool size to &lt;n&gt; (default: %u)</source>\n         <translation>Ustaw rozmiar puli kluczy na &lt;n&gt; (domy\u015blnie: %u)</translation>\n@@ -3322,6 +3602,10 @@ Zwr\u00f3\u0107 uwag\u0119, \u017ce poprawnie zweryfikowana wiadomo\u015b\u0107 potwierdza to, \u017ce nadaw\n         <source>Spend unconfirmed change when sending transactions (default: %u)</source>\n         <translation>Wydawaj niepotwierdzon\u0105 reszt\u0119 podczas wysy\u0142ania transakcji (domy\u015blnie: %u)</translation>\n     </message>\n+    <message>\n+        <source>Starting network threads...</source>\n+        <translation>Uruchamianie w\u0105tk\u00f3w sieciowych...</translation>\n+    </message>\n     <message>\n         <source>The wallet will avoid paying less than the minimum relay fee.</source>\n         <translation>Portfel b\u0119dzie unika\u0142 p\u0142acenia mniejszej ni\u017c przekazana op\u0142aty.</translation>"
      },
      {
        "sha": "c0648b0da1dfc01be9a45bf4fb9944cee0dd44dd",
        "filename": "src/qt/locale/bitcoin_pt_BR.ts",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_pt_BR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_pt_BR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_BR.ts?ref=29a3cb237802a6f240def54cbc74cb2d5375683a",
        "patch": "@@ -3,11 +3,11 @@\n     <name>AddressBookPage</name>\n     <message>\n         <source>Right-click to edit address or label</source>\n-        <translation>Clique com o bot\u00e3o direito para editar o endere\u00e7o ou r\u00f3tulocabe\u00e7a</translation>\n+        <translation>Clique com o bot\u00e3o direito para editar o endere\u00e7o ou r\u00f3tulo</translation>\n     </message>\n     <message>\n         <source>Create a new address</source>\n-        <translation>Criar novo endere\u00e7o</translation>\n+        <translation>Criar um novo endere\u00e7o</translation>\n     </message>\n     <message>\n         <source>&amp;New</source>\n@@ -3835,7 +3835,7 @@\n     </message>\n     <message>\n         <source>Starting network threads...</source>\n-        <translation>Iniciando an\u00e1lise da rede...</translation>\n+        <translation>Iniciando atividades da rede...</translation>\n     </message>\n     <message>\n         <source>The wallet will avoid paying less than the minimum relay fee.</source>\n@@ -3855,11 +3855,11 @@\n     </message>\n     <message>\n         <source>Transaction amounts must not be negative</source>\n-        <translation>As quantidades das transa\u00e7\u00f5es devem ser positivas.</translation>\n+        <translation>As quantidades das transa\u00e7\u00f5es n\u00e3o podem serem negativas</translation>\n     </message>\n     <message>\n         <source>Transaction has too long of a mempool chain</source>\n-        <translation>A transa\u00e7\u00e3o demorou muito na mem\u00f3ria</translation>\n+        <translation>A transa\u00e7\u00e3o demorou muito para ser confirmada na mempool chain</translation>\n     </message>\n     <message>\n         <source>Transaction must have at least one recipient</source>\n@@ -3879,7 +3879,7 @@\n     </message>\n     <message>\n         <source>Add a node to connect to and attempt to keep the connection open</source>\n-        <translation>Adicionar um cliente para se conectar e tentar manter a conex\u00e3o ativa</translation>\n+        <translation>Adicionar um n\u00f3dulo para se conectar e tentar manter a conex\u00e3o ativa</translation>\n     </message>\n     <message>\n         <source>Loading wallet...</source>"
      },
      {
        "sha": "2862d2feb4c00eba9d26b1f6d3a977ecfd379be3",
        "filename": "src/qt/locale/bitcoin_sv.ts",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_sv.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3cb237802a6f240def54cbc74cb2d5375683a/src/qt/locale/bitcoin_sv.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_sv.ts?ref=29a3cb237802a6f240def54cbc74cb2d5375683a",
        "patch": "@@ -1361,6 +1361,10 @@ Var v\u00e4nlig och f\u00f6rs\u00f6k igen.</translation>\n         <source>Node/Service</source>\n         <translation>Nod/Tj\u00e4nst</translation>\n     </message>\n+    <message>\n+        <source>NodeId</source>\n+        <translation>Nod-ID</translation>\n+    </message>\n     <message>\n         <source>Ping</source>\n         <translation>Ping</translation>"
      }
    ]
  },
  {
    "sha": "a461cf4e373b043ed37917d6b1dda4812278841e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDYxY2Y0ZTM3M2IwNDNlZDM3OTE3ZDZiMWRkYTQ4MTIyNzg4NDFl",
    "commit": {
      "author": {
        "name": "kallewoof",
        "email": "kalle.alm@gmail.com",
        "date": "2017-08-28T15:00:43Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-08-28T15:00:43Z"
      },
      "message": "Update release-notes.md",
      "tree": {
        "sha": "7225f3e57931653e3fde11504e95b810a3e85934",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7225f3e57931653e3fde11504e95b810a3e85934"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a461cf4e373b043ed37917d6b1dda4812278841e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a461cf4e373b043ed37917d6b1dda4812278841e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a461cf4e373b043ed37917d6b1dda4812278841e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a461cf4e373b043ed37917d6b1dda4812278841e/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29a3cb237802a6f240def54cbc74cb2d5375683a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a3cb237802a6f240def54cbc74cb2d5375683a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29a3cb237802a6f240def54cbc74cb2d5375683a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "01670aa64c191cc9ae50602a9f80b0b77f0a5bfe",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a461cf4e373b043ed37917d6b1dda4812278841e/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a461cf4e373b043ed37917d6b1dda4812278841e/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=a461cf4e373b043ed37917d6b1dda4812278841e",
        "patch": "@@ -327,7 +327,6 @@ Thanks to everyone who directly contributed to this release:\n - John Newbery\n - Jonas Schnelli\n - Jorge Tim\u00f3n\n-- Kalle Alm\n - Karl-Johan Alm\n - kewde\n - KibbledJiveElkZoo"
      }
    ]
  },
  {
    "sha": "48790e0efaf46d155606ef461f7cc11555ea8876",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODc5MGUwZWZhZjQ2ZDE1NTYwNmVmNDYxZjdjYzExNTU1ZWE4ODc2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-28T15:05:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-28T15:05:28Z"
      },
      "message": "Merge #11180: [release-notes.md] Remove alias\n\na461cf4 Update release-notes.md (kallewoof)\n\nPull request description:\n\n  They're the same person.\n\nTree-SHA512: dcdcf18d57db87445ce09d5e20ea17b0cb0653e749028b2662d708e2798e38296f0598210fb196bf3255a6bfd0837724e56419c39ebe9564406f11296c40be68",
      "tree": {
        "sha": "7225f3e57931653e3fde11504e95b810a3e85934",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7225f3e57931653e3fde11504e95b810a3e85934"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48790e0efaf46d155606ef461f7cc11555ea8876",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZpDE5AAoJEB5K7WKYbNJdiN8H/Rfp0zU0mMVYXuw9iDJxL08h\nw35GwJTBSszvBW9GobicV+7jLFbyj9kG16/ix+i9BHOp7lJ7hqczxDBH/oPv5oIO\nRuv33LX32EqGeNc8OrYC3xmJWatg7XFYhHKGzRkKYRbBt9/6nTNyKoSFHfCy96/j\nivtabz8jbjo19q6Fi8Qqt+fWXDg23h/tC4uuSOxZ27Qqoe/oM3GIRtZ6bgUkIvEG\n69HwqkAPME0OwTXahf8R/HA8hIuU6TFmKkd2tj+FMtCAmF88shGaIqgksjB9vHR0\n9vsB/FPltKWQE17FnUFuwnU3pCT1trQysiZBVQnoZsfBqtsqf093KTi3072XqT8=\n=eVqk\n-----END PGP SIGNATURE-----",
        "payload": "tree 7225f3e57931653e3fde11504e95b810a3e85934\nparent 29a3cb237802a6f240def54cbc74cb2d5375683a\nparent a461cf4e373b043ed37917d6b1dda4812278841e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1503932720 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1503932728 +0200\n\nMerge #11180: [release-notes.md] Remove alias\n\na461cf4 Update release-notes.md (kallewoof)\n\nPull request description:\n\n  They're the same person.\n\nTree-SHA512: dcdcf18d57db87445ce09d5e20ea17b0cb0653e749028b2662d708e2798e38296f0598210fb196bf3255a6bfd0837724e56419c39ebe9564406f11296c40be68\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48790e0efaf46d155606ef461f7cc11555ea8876",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48790e0efaf46d155606ef461f7cc11555ea8876",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48790e0efaf46d155606ef461f7cc11555ea8876/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29a3cb237802a6f240def54cbc74cb2d5375683a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a3cb237802a6f240def54cbc74cb2d5375683a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29a3cb237802a6f240def54cbc74cb2d5375683a"
      },
      {
        "sha": "a461cf4e373b043ed37917d6b1dda4812278841e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a461cf4e373b043ed37917d6b1dda4812278841e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a461cf4e373b043ed37917d6b1dda4812278841e"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "01670aa64c191cc9ae50602a9f80b0b77f0a5bfe",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48790e0efaf46d155606ef461f7cc11555ea8876/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48790e0efaf46d155606ef461f7cc11555ea8876/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=48790e0efaf46d155606ef461f7cc11555ea8876",
        "patch": "@@ -327,7 +327,6 @@ Thanks to everyone who directly contributed to this release:\n - John Newbery\n - Jonas Schnelli\n - Jorge Tim\u00f3n\n-- Kalle Alm\n - Karl-Johan Alm\n - kewde\n - KibbledJiveElkZoo"
      }
    ]
  },
  {
    "sha": "fad16a90b2c210f745b75cc72a20287b054644af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQxNmE5MGIyYzIxMGY3NDViNzVjYzcyYTIwMjg3YjA1NDY0NGFm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-01T13:14:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-01T13:14:37Z"
      },
      "message": "doc: Add missing contributors to release notes\n\nGuido Vranken via commit 9fe1f6b",
      "tree": {
        "sha": "8b9a5e96931cf0458f1901f6e7057fa5b30a1e4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b9a5e96931cf0458f1901f6e7057fa5b30a1e4d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad16a90b2c210f745b75cc72a20287b054644af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad16a90b2c210f745b75cc72a20287b054644af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad16a90b2c210f745b75cc72a20287b054644af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad16a90b2c210f745b75cc72a20287b054644af/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48790e0efaf46d155606ef461f7cc11555ea8876",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48790e0efaf46d155606ef461f7cc11555ea8876",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48790e0efaf46d155606ef461f7cc11555ea8876"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5130c3e788c6fc9a2368cb0532b5b0693ed90067",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad16a90b2c210f745b75cc72a20287b054644af/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad16a90b2c210f745b75cc72a20287b054644af/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fad16a90b2c210f745b75cc72a20287b054644af",
        "patch": "@@ -312,6 +312,7 @@ Thanks to everyone who directly contributed to this release:\n - fanquake\n - Felix Weis\n - flack\n+- Guido Vranken\n - Greg Griffith\n - Gregory Maxwell\n - Gregory Sanders"
      }
    ]
  },
  {
    "sha": "58f1e54cbfae6dab82d9192e3147c860f5a29c8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGYxZTU0Y2JmYWU2ZGFiODJkOTE5MmUzMTQ3Yzg2MGY1YTI5Yzhj",
    "commit": {
      "author": {
        "name": "Janus Troelsen",
        "email": "ysangkok@gmail.com",
        "date": "2017-09-06T10:30:44Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-09-06T10:30:44Z"
      },
      "message": "Release Notes: Fix SHA256-with-SSE4 PR link",
      "tree": {
        "sha": "377719a484675be240c553924064bcaa8516bc5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/377719a484675be240c553924064bcaa8516bc5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58f1e54cbfae6dab82d9192e3147c860f5a29c8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58f1e54cbfae6dab82d9192e3147c860f5a29c8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58f1e54cbfae6dab82d9192e3147c860f5a29c8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58f1e54cbfae6dab82d9192e3147c860f5a29c8c/comments",
    "author": {
      "login": "ysangkok",
      "id": 284023,
      "node_id": "MDQ6VXNlcjI4NDAyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/284023?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ysangkok",
      "html_url": "https://github.com/ysangkok",
      "followers_url": "https://api.github.com/users/ysangkok/followers",
      "following_url": "https://api.github.com/users/ysangkok/following{/other_user}",
      "gists_url": "https://api.github.com/users/ysangkok/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ysangkok/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ysangkok/subscriptions",
      "organizations_url": "https://api.github.com/users/ysangkok/orgs",
      "repos_url": "https://api.github.com/users/ysangkok/repos",
      "events_url": "https://api.github.com/users/ysangkok/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ysangkok/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48790e0efaf46d155606ef461f7cc11555ea8876",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48790e0efaf46d155606ef461f7cc11555ea8876",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48790e0efaf46d155606ef461f7cc11555ea8876"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3d70077e48f131986860db0d46b391da14d16063",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58f1e54cbfae6dab82d9192e3147c860f5a29c8c/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58f1e54cbfae6dab82d9192e3147c860f5a29c8c/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=58f1e54cbfae6dab82d9192e3147c860f5a29c8c",
        "patch": "@@ -86,7 +86,7 @@ Initial Block Download, startup, transaction and block validation much faster:\n   this results in new block validation being 40-50% faster.\n - LevelDB has been upgraded to version 1.20 (See [PR 10544](https://github.com/bitcoin/bitcoin/pull/10544)). This version contains hardware acceleration for CRC\n   on architectures supporting SSE 4.2. As a result, synchronization and block validation are now faster.\n-- SHA256 hashing has been optimized for architectures supporting SSE 4 (See [PR 10182](https://github.com/bitcoin/bitcoin/pull/10182)). SHA256 is around\n+- SHA256 hashing has been optimized for architectures supporting SSE 4 (See [PR 10821](https://github.com/bitcoin/bitcoin/pull/10821)). SHA256 is around\n   50% faster on supported hardware, which results in around 5% faster IBD and block\n   validation. In version 0.15, SHA256 hardware optimization is disabled in release builds by\n   default, but can be enabled by using `--enable-experimental-asm` when building."
      }
    ]
  },
  {
    "sha": "134d824193a06f2201682b0a82e3df0b7a5eb3ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzRkODI0MTkzYTA2ZjIyMDE2ODJiMGE4MmUzZGYwYjdhNWViM2Nh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-06T16:38:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-06T16:38:29Z"
      },
      "message": "Merge #11255: Release Notes: Fix SHA256-with-SSE4 PR link\n\n58f1e54cb Release Notes: Fix SHA256-with-SSE4 PR link (Janus Troelsen)\n\nPull request description:\n\nTree-SHA512: 7f3dc2a1fb1e602fa947f4a00e39f4958eabeb47800b5b85a2035568258f0679c026d7ffe377c9256a97019b174868db82fd4aaac9c218bed145ba86f56330b1",
      "tree": {
        "sha": "377719a484675be240c553924064bcaa8516bc5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/377719a484675be240c553924064bcaa8516bc5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/134d824193a06f2201682b0a82e3df0b7a5eb3ca",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJZsCSFAAoJEB5K7WKYbNJdTFEIAL9MofTF3JnkSihVOpHRRJ1c\nd7Rp854NiSmSXBpfy3rt8NR5OKQrw270BVroAGxujhMaFM8m5R9wjrsw9O9DG4Gp\nxca68DGU0CDrw5u2EjuMBehMcSNV/DSqK6p1T24p4PC9Twg2o1m/iFcBMH/D7YJU\nUnLBrn0LpEla7vpWp9DGwF6WTuNJB23mG9InrtPwAwXRVi/k40giHTYgMzvw3TWX\nw/lB1AGwqOnjIXdiU7soHxxlZF3SEwHJkPbdhZDx8IRlQkFkgoeQZOFCDrtCAV1E\n/yXMmr9Vo/c642rXUK9d/HLtc97QcF4uBHW/iYGhfcKwot+nihntwyVguu5N8KI=\n=AOcw\n-----END PGP SIGNATURE-----",
        "payload": "tree 377719a484675be240c553924064bcaa8516bc5a\nparent 48790e0efaf46d155606ef461f7cc11555ea8876\nparent 58f1e54cbfae6dab82d9192e3147c860f5a29c8c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1504715888 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1504715909 +0200\n\nMerge #11255: Release Notes: Fix SHA256-with-SSE4 PR link\n\n58f1e54cb Release Notes: Fix SHA256-with-SSE4 PR link (Janus Troelsen)\n\nPull request description:\n\nTree-SHA512: 7f3dc2a1fb1e602fa947f4a00e39f4958eabeb47800b5b85a2035568258f0679c026d7ffe377c9256a97019b174868db82fd4aaac9c218bed145ba86f56330b1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/134d824193a06f2201682b0a82e3df0b7a5eb3ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/134d824193a06f2201682b0a82e3df0b7a5eb3ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/134d824193a06f2201682b0a82e3df0b7a5eb3ca/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48790e0efaf46d155606ef461f7cc11555ea8876",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48790e0efaf46d155606ef461f7cc11555ea8876",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48790e0efaf46d155606ef461f7cc11555ea8876"
      },
      {
        "sha": "58f1e54cbfae6dab82d9192e3147c860f5a29c8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58f1e54cbfae6dab82d9192e3147c860f5a29c8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58f1e54cbfae6dab82d9192e3147c860f5a29c8c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3d70077e48f131986860db0d46b391da14d16063",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/134d824193a06f2201682b0a82e3df0b7a5eb3ca/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/134d824193a06f2201682b0a82e3df0b7a5eb3ca/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=134d824193a06f2201682b0a82e3df0b7a5eb3ca",
        "patch": "@@ -86,7 +86,7 @@ Initial Block Download, startup, transaction and block validation much faster:\n   this results in new block validation being 40-50% faster.\n - LevelDB has been upgraded to version 1.20 (See [PR 10544](https://github.com/bitcoin/bitcoin/pull/10544)). This version contains hardware acceleration for CRC\n   on architectures supporting SSE 4.2. As a result, synchronization and block validation are now faster.\n-- SHA256 hashing has been optimized for architectures supporting SSE 4 (See [PR 10182](https://github.com/bitcoin/bitcoin/pull/10182)). SHA256 is around\n+- SHA256 hashing has been optimized for architectures supporting SSE 4 (See [PR 10821](https://github.com/bitcoin/bitcoin/pull/10821)). SHA256 is around\n   50% faster on supported hardware, which results in around 5% faster IBD and block\n   validation. In version 0.15, SHA256 hardware optimization is disabled in release builds by\n   default, but can be enabled by using `--enable-experimental-asm` when building."
      }
    ]
  },
  {
    "sha": "d4c9d00e7e79958dea9586f927778dba2be8230a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNGM5ZDAwZTdlNzk5NThkZWE5NTg2ZjkyNzc3OGRiYTJiZTgyMzBh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-07T21:51:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-07T21:52:48Z"
      },
      "message": "doc: Add PRs list to release notes\n\nTree-SHA512: 1dd5e19a2ece38002da1d4bcf017a0a1a3ab2dc8b31fe7b3e7ebc6fef58de4547abbff3fb6555496da1ecf1f9a0cc941f980b053a0376a776e8301de3834aac1",
      "tree": {
        "sha": "1489dede976060a8d14dcb1a8cdb9de2ec50e402",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1489dede976060a8d14dcb1a8cdb9de2ec50e402"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d4c9d00e7e79958dea9586f927778dba2be8230a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJZsb+yAAoJEB5K7WKYbNJdSaoH/RchggBUuRyqXfoegJ64XFWZ\npBobKRiztS7NHezxg+C4mPNS+so5fnRfKpRi0D/ZA1r3CojZ/FTem5h+cIlaLtwE\n0emCUa7LreCW94t3lnGTbhITsg2Py0CttKkjN23JJInvSDfexohuRs+HQlIEj982\nkk4dbommxZF/In9Jx8M6AhLO47HSXqfgUyUBgnZE3ZVbpf/hdUCwwhwuaRxdvduj\ncEi4IcMim1c9dWfvQgB8Q1nRB4qTavj5Xry2x+a6tEzWaHHghkLtJCDn41VPrzxO\n2QZDiZWwXxgav0QuRzD8Cb6xGpCGI9j6a/sqSadpdci+xVrPnjtb6OlHBqDdCm4=\n=iIjY\n-----END PGP SIGNATURE-----",
        "payload": "tree 1489dede976060a8d14dcb1a8cdb9de2ec50e402\nparent 134d824193a06f2201682b0a82e3df0b7a5eb3ca\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1504821072 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1504821168 +0200\n\ndoc: Add PRs list to release notes\n\nTree-SHA512: 1dd5e19a2ece38002da1d4bcf017a0a1a3ab2dc8b31fe7b3e7ebc6fef58de4547abbff3fb6555496da1ecf1f9a0cc941f980b053a0376a776e8301de3834aac1\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4c9d00e7e79958dea9586f927778dba2be8230a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d4c9d00e7e79958dea9586f927778dba2be8230a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4c9d00e7e79958dea9586f927778dba2be8230a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "134d824193a06f2201682b0a82e3df0b7a5eb3ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/134d824193a06f2201682b0a82e3df0b7a5eb3ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/134d824193a06f2201682b0a82e3df0b7a5eb3ca"
      }
    ],
    "stats": {
      "total": 473,
      "additions": 473,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dcaf971223b6ca771d47896044876273f2a87ffe",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 473,
        "deletions": 0,
        "changes": 473,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d4c9d00e7e79958dea9586f927778dba2be8230a/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d4c9d00e7e79958dea9586f927778dba2be8230a/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=d4c9d00e7e79958dea9586f927778dba2be8230a",
        "patch": "@@ -279,6 +279,479 @@ Low-level RPC changes\n   - `bumpfee` now returns RPC_WALLET_ERROR if the change output is too small to bump the\n   fee. Previously returned RPC_MISC_ERROR.\n \n+0.15.0 Change log\n+=================\n+\n+### RPC and other APIs\n+- #9485 `61a640e` ZMQ example using python3 and asyncio (mcelrath)\n+- #9894 `0496e15` remove 'label' filter for rpc command help (instagibbs)\n+- #9853 `02bd6e9` Fix error codes from various RPCs (jnewbery)\n+- #9842 `598ef9c` Fix RPC failure testing (continuation of #9707) (jnewbery)\n+- #10038 `d34995a` Add mallocinfo mode to `getmemoryinfo` RPC (laanwj)\n+- #9500 `3568b30` [Qt][RPC] Autocomplete commands for 'help' command in debug console (achow101)\n+- #10056 `e6156a0` [zmq] Call va_end() on va_start()ed args (kallewoof)\n+- #10086 `7438cea` Trivial: move rpcserialversion into RPC option group (jlopp)\n+- #10150 `350b224` [rpc] Add logging rpc (jnewbery)\n+- #10208 `393160c` [wallet] Rescan abortability (kallewoof)\n+- #10143 `a987def` [net] Allow disconnectnode RPC to be called with node id (jnewbery)\n+- #10281 `0e8499c` doc: Add RPC interface guidelines (laanwj)\n+- #9733 `d4732f3` Add getchaintxstats RPC (sipa)\n+- #10310 `f4b15e2` [doc] Add hint about getmempoolentry to getrawmempool help (kallewoof)\n+- #8704 `96c850c` [RPC] Transaction details in getblock (achow101)\n+- #8952 `9390845` Add query options to listunspent RPC call (pedrobranco)\n+- #10413 `08ac35a` Fix docs (there's no rpc command setpaytxfee) (RHavar)\n+- #8384 `e317c0d` Add witness data output to TxInError messages (instagibbs)\n+- #9571 `4677151` RPC: getblockchaininfo returns BIP signaling statistics  (pinheadmz)\n+- #10450 `ef2d062` Fix bumpfee rpc \"errors\" return value (ryanofsky)\n+- #10475 `39039b1` [RPC] getmempoolinfo mempoolminfee is a BTC/KB feerate (instagibbs)\n+- #10478 `296928e` rpc: Add listen address to incoming connections in `getpeerinfo` (laanwj)\n+- #10403 `08d0390` Fix importmulti failure to return rescan errors (ryanofsky)\n+- #9740 `9fec4da` Add friendly output to dumpwallet (aideca)\n+- #10426 `16f6c98` Replace bytes_serialized with bogosize (sipa)\n+- #10252 `980deaf` RPC/Mining: Restore API compatibility for prioritisetransaction (luke-jr)\n+- #9672 `46311e7` Opt-into-RBF for RPC & bitcoin-tx (luke-jr)\n+- #10481 `9c248e3` Decodehextx scripts sanity check  (achow101)\n+- #10488 `fa1f106` Note that the prioritizetransaction dummy value is deprecated, and has no meaning (TheBlueMatt)\n+- #9738 `c94b89e` gettxoutproof() should return consistent result (jnewbery)\n+- #10191 `00350bd` [trivial] Rename unused RPC arguments 'dummy' (jnewbery)\n+- #10627 `b62b4c8` fixed listunspent rpc convert parameter (tnakagawa)\n+- #10412 `bef02fb` Improve wallet rescan API (ryanofsky)\n+- #10400 `1680ee0` [RPC] Add an uptime command that displays the amount of time (in seconds) bitcoind has been running (rvelhote)\n+- #10683 `d81bec7` rpc: Move the `generate` RPC call to rpcwallet (laanwj)\n+- #10710 `30bc0f6` REST/RPC example update (Mirobit)\n+- #10747 `9edda0c` [rpc] fix verbose argument for getblock in bitcoin-cli (jnewbery)\n+- #10589 `104f5f2` More economical fee estimates for RBF and RPC options to control (morcos)\n+- #10543 `b27b004` Change API to estimaterawfee (morcos)\n+- #10807 `afd2fca` getbalance example covers at least 6 confirms (instagibbs)\n+- #10707 `75b5643` Better API for estimatesmartfee RPC  (morcos)\n+- #10784 `9e8d6a3` Do not allow users to get keys from keypool without reserving them (TheBlueMatt)\n+- #10857 `d445a2c` [RPC] Add a deprecation warning to getinfo's output (achow101)\n+- #10571 `adf170d` [RPC]Move transaction combining from signrawtransaction to new RPC (achow101)\n+- #10783 `041dad9` [RPC] Various rpc argument fixes (instagibbs)\n+- #9622 `6ef3c7e` [rpc] listsinceblock should include lost transactions when parameter is a reorg'd block (kallewoof)\n+- #10799 `8537187` Prevent user from specifying conflicting parameters to fundrawtx (TheBlueMatt)\n+- #10931 `0b11a07` Fix misleading \"Method not found\" multiwallet errors (ryanofsky)\n+- #10788 `f66c596` [RPC] Fix addwitnessaddress by replacing ismine with producesignature (achow101)\n+- #10999 `627c3c0` Fix amounts formatting in `decoderawtransaction` (laanwj)\n+- #11002 `4268426` [wallet] return correct error code from resendwallettransaction (jnewbery)\n+- #11029 `96a63a3` [RPC] trivial: gettxout no longer shows version of tx (FelixWeis)\n+- #11083 `6c2b008` Fix combinerawtransaction RPC help result section (jonasnick)\n+- #11027 `07164bb` [RPC] Only return hex field once in getrawtransaction (achow101)\n+- #10698 `5af6572` Be consistent in calling transactions \"replaceable\" for Opt-In RBF (TheBlueMatt)\n+\n+### Block and transaction handling\n+- #9801 `a8c5751` Removed redundant parameter from mempool.PrioritiseTransaction (gubatron)\n+- #9819 `1efc99c` Remove harmless read of unusued priority estimates (morcos)\n+- #9822 `b7547fa` Remove block file location upgrade code (benma)\n+- #9602 `30ff3a2` Remove coin age priority and free transactions - implementation (morcos)\n+- #9548 `47510ad` Remove min reasonable fee (morcos)\n+- #10249 `c73af54` Switch CCoinsMap from boost to std unordered_map (sipa)\n+- #9966 `2a183de` Control mempool persistence using a command line parameter (jnewbery)\n+- #10199 `318ea50` Better fee estimates (morcos)\n+- #10196 `bee3529` Bugfix: PrioritiseTransaction updates the mempool tx counter (sdaftuar)\n+- #10195 `1088b02` Switch chainstate db and cache to per-txout model (sipa)\n+- #10284 `c2ab38b` Always log debug information for fee calculation in CreateTransaction (morcos)\n+- #10503 `efbcf2b` Use REJECT_DUPLICATE for already known and conflicted txn (sipa)\n+- #10537 `b3eb0d6` Few Minor per-utxo assert-semantics re-adds and tweak (TheBlueMatt)\n+- #10626 `8c841a3` doc: Remove outdated minrelaytxfee comment (MarcoFalke)\n+- #10559 `234ffc6` Change semantics of HaveCoinInCache to match HaveCoin (morcos)\n+- #10581 `7878353` Simplify return values of GetCoin/HaveCoin(InCache) (sipa)\n+- #10684 `a381f6a` Remove no longer used mempool.exists(outpoint) (morcos)\n+- #10148 `d4e551a` Use non-atomic flushing with block replay (sipa)\n+- #10685 `30c2130` Clarify CCoinsViewMemPool documentation (TheBlueMatt)\n+- #10558 `90a002e` Address nits from per-utxo change (morcos)\n+- #10706 `6859ad2` Improve wallet fee logic and fix GUI bugs (morcos)\n+- #10526 `754aa02` Force on-the-fly compaction during pertxout upgrade (sipa)\n+- #10985 `d896d5c` Add undocumented -forcecompactdb to force LevelDB compactions (sipa)\n+- #10292 `e4bbd3d` Improved efficiency in COutPoint constructors (mm-s)\n+- #10290 `8d6d43e` Add -stopatheight for benchmarking (sipa)\n+\n+### P2P protocol and network code\n+- #9726 `7639d38` netbase: Do not print an error on connection timeouts through proxy (laanwj)\n+- #9805 `5b583ef` Add seed.btc.petertodd.org to mainnet DNS seeds (petertodd)\n+- #9861 `22f609f` Trivial: Debug log ambiguity fix for peer addrs (keystrike)\n+- #9774 `90cb2a2` Enable host lookups for -proxy and -onion parameters (jmcorgan)\n+- #9558 `7b585cf` Clarify assumptions made about when BlockCheck is called (TheBlueMatt)\n+- #10135 `e19586a` [p2p] Send the correct error code in reject messages (jnewbery)\n+- #9665 `eab00d9` Use cached [compact] blocks to respond to getdata messages (TheBlueMatt)\n+- #10215 `a077a90` Check interruptNet during dnsseed lookups (TheBlueMatt)\n+- #10234 `faf2dea` [net] listbanned RPC and QT should show correct banned subnets (jnewbery)\n+- #10134 `314ebdf` [qa] Fixes segwit block relay test after inv-direct-fetch was disabled (sdaftuar)\n+- #10351 `3f57c55` removed unused code in INV message (Greg-Griffith)\n+- #10061 `ae78609` [net] Added SetSocketNoDelay() utility function (tjps)\n+- #10408 `28c6e8d` Net: Improvements to Tor control port parser (str4d)\n+- #10460 `5c63d66` Broadcast address every day, not 9 hours (sipa)\n+- #10471 `400fdd0` Denote functions CNode::GetRecvVersion() and CNode::GetRefCount()  as const (pavlosantoniou)\n+- #10345 `67700b3` [P2P] Timeout for headers sync (sdaftuar)\n+- #10564 `8d9f45e` Return early in IsBanned (gmaxwell)\n+- #10587 `de8db47` Net: Fix resource leak in ReadBinaryFile(...) (practicalswift)\n+- #9549 `b33ca14` [net] Avoid possibility of NULL pointer dereference in MarkBlockAsInFlight(...) (practicalswift)\n+- #10446 `2772dc9` net: avoid extra dns query per seed (theuni)\n+- #10824 `9dd6a2b` Avoid unnecessary work in SetNetworkActive (promag)\n+- #10948 `df3a6f4` p2p: Hardcoded seeds update pre-0.15 branch (laanwj)\n+- #10977 `02f4c4a` [net] Fix use of uninitialized value in getnetworkinfo(const JSONRPCRequest&) (practicalswift)\n+- #10982 `c8b62c7` Disconnect network service bits 6 and 8 until Aug 1, 2018 (TheBlueMatt)\n+- #11012 `0e5cff6` Make sure to clean up mapBlockSource if we've already seen the block (theuni)\n+\n+### Validation\n+- #9725 `67023e9` CValidationInterface Cleanups (TheBlueMatt)\n+- #10178 `2584925` Remove CValidationInterface::UpdatedTransaction (TheBlueMatt)\n+- #10201 `a6548a4` pass Consensus::Params& to functions in validation.cpp and make them static (mariodian)\n+- #10297 `431a548` Simplify DisconnectBlock arguments/return value (sipa)\n+- #10464 `f94b7d5` Introduce static DoWarning (simplify UpdateTip) (jtimon)\n+- #10569 `2e7d8f8` Fix stopatheight (achow101)\n+- #10192 `2935b46` Cache full script execution results in addition to signatures (TheBlueMatt)\n+- #10179 `21ed30a` Give CValidationInterface Support for calling notifications on the CScheduler Thread (TheBlueMatt)\n+- #10557 `66270a4` Make check to distinguish between orphan txs and old txs more efficient (morcos)\n+- #10775 `7c2400c` nCheckDepth chain height fix (romanornr)\n+- #10821 `16240f4` Add SSE4 optimized SHA256 (sipa)\n+- #10854 `04d395e` Avoid using sizes on non-fixed-width types to derive protocol constants (gmaxwell)\n+- #10945 `2a50b11` Update defaultAssumeValid according to release-process.md (gmaxwell)\n+- #10986 `2361208` Update chain transaction statistics (sipa)\n+- #11028 `6bdf4b3` Avoid masking of difficulty adjustment errors by checkpoints (sipa)\n+- #9533 `cb598cf` Allow non-power-of-2 signature cache sizes (sipa)\n+- #9208 `acd9957` Improve DisconnectTip performance (sdaftuar)\n+- #10618 `f90603a` Remove confusing MAX_BLOCK_BASE_SIZE (gmaxwell)\n+- #10758 `bd92424` Fix some chainstate-init-order bugs (TheBlueMatt)\n+- #10550 `b7296bc` Don't return stale data from CCoinsViewCache::Cursor() (ryanofsky)\n+- #10998 `2507fd5` Fix upgrade cancel warnings (TheBlueMatt)\n+- #9868 `cbdb473` Abstract out the command line options for block assembly (sipa)\n+\n+### Build system\n+- #9727 `5f0556d` Remove fallbacks for boost_filesystem < v3 (laanwj)\n+- #9788 `50a2265` gitian: bump descriptors for master (theuni)\n+- #9794 `7ca2f54` Minor update to qrencode package builder (mitchellcash)\n+- #9514 `2cc0df1` release: Windows signing script (theuni)\n+- #9921 `8b789d8` build: Probe MSG_DONTWAIT in the same way as MSG_NOSIGNAL (laanwj)\n+- #10011 `32d1b34` build: Fix typo s/HAVE_DONTWAIT/HAVE_MSG_DONTWAIT (laanwj)\n+- #9946 `90dd9e6` Fix build errors if spaces in path or parent directory (pinheadmz)\n+- #10136 `81da4c7` build: Disable Wshadow warning (laanwj)\n+- #10166 `64962ae` Ignore Doxyfile generated from Doxyfile.in template (paveljanik)\n+- #10239 `0416ea9` Make Boost use std::atomic internally (sipa)\n+- #10228 `27faa6c` build: regenerate bitcoin-config.h as necessary (theuni)\n+- #10273 `8979f45` [scripts] Minor improvements to `macdeployqtplus` script (chrisgavin)\n+- #10325 `a26280b` 0.15.0 Depends Updates (fanquake)\n+- #10328 `79aeff6` Update contrib/debian to latest Ubuntu PPA upload (TheBlueMatt)\n+- #7522 `d25449f` Bugfix: Only use git for build info if the repository is actually the right one (luke-jr)\n+- #10489 `e654d61` build: silence gcc7's implicit fallthrough warning (theuni)\n+- #10549 `ad1a13e` Avoid printing generic and duplicated \"checking for QT\" during ./configure (drizzt)\n+- #10628 `8465b68` [depends] expat 2.2.1 (fanquake)\n+- #10806 `db825d2` build: verify that the assembler can handle crc32 functions (theuni)\n+- #10766 `b4d03be` Building Environment: Set ARFLAGS to cr (ReneNyffenegger)\n+- #10803 `91edda8` Explicitly search for bdb5.3 (pstratem)\n+- #10855 `81560b0` random: only use getentropy on openbsd (theuni)\n+- #10508 `1caafa6` Run Qt wallet tests on travis (ryanofsky)\n+- #10851 `e222618` depends: fix fontconfig with newer glibc (theuni)\n+- #10971 `88b1e4b` build: fix missing sse42 in depends builds (theuni)\n+- #11097 `129b03f` gitian: quick hack to fix version string in releases (theuni)\n+- #10039 `919aaf6` Fix compile errors with Qt 5.3.2 and Boost 1.55.0 (ryanofsky)\n+- #10168 `7032021` Fix build warning from #error text (jnewbery)\n+- #10301 `318392c` Check if sys/random.h is required for getentropy (jameshilliard)\n+\n+### GUI\n+- #9724 `1a9fd5c` Qt/Intro: Add explanation of IBD process (luke-jr)\n+- #9834 `b00ba62` qt: clean up initialize/shutdown signals (benma)\n+- #9481 `ce01e62` [Qt] Show more significant warning if we fall back to the default fee (jonasschnelli)\n+- #9974 `b9f930b` Add basic Qt wallet test (ryanofsky)\n+- #9690 `a387d3a` Change 'Clear' button string to 'Reset' (da2x)\n+- #9592 `9c7b7cf` [Qt] Add checkbox in the GUI to opt-in to RBF when creating a transaction (ryanofsky)\n+- #10098 `2b477e6` Make qt wallet test compatible with qt4 (ryanofsky)\n+- #9890 `1fa4ae6` Add a button to open the config file in a text editor (ericshawlinux)\n+- #10156 `51833a1` Fix for issues with startup and multiple monitors on windows (AllanDoensen)\n+- #10177 `de01da7` Changed \"Send\" button default status from true to false (KibbledJiveElkZoo)\n+- #10221 `e96486c` Stop treating coinbase outputs differently in GUI: show them at 1conf (TheBlueMatt)\n+- #10231 `987a6c0` [Qt] Reduce a significant cs_main lock freeze (jonasschnelli)\n+- #10242 `f6f3b58` [qt] Don't call method on null WalletModel object (ryanofsky)\n+- #10093 `a3e756b` [Qt] Don't add arguments of sensitive command to console window (jonasschnelli)\n+- #10362 `95546c8` [GUI] Add OSX keystroke to RPCConsole info (spencerlievens)\n+- #9697 `962cd3f` [Qt] simple fee bumper with user verification (jonasschnelli)\n+- #10390 `e477516` [wallet] remove minimum total fee option (instagibbs)\n+- #10420 `4314544` Add Qt tests for wallet spends & bumpfee (ryanofsky)\n+- #10454 `c1c9a95` Fix broken q4 test build (ryanofsky)\n+- #10449 `64beb13` Overhaul Qt fee bumper (jonasschnelli)\n+- #10582 `7c72fb9` Pass in smart fee slider value to coin control dialog (morcos)\n+- #10673 `4c72cc3` [qt] Avoid potential null pointer dereference in TransactionView::exportClicked() (practicalswift)\n+- #10769 `8fdd23a` [Qt] replace fee slider with a Dropdown, extend conf. targets (jonasschnelli)\n+- #10870 `412b466` [Qt] Use wallet 0 in rpc console if running with multiple wallets (jonasschnelli)\n+- #10988 `a9dd111` qt: Increase BLOCK_CHAIN_SIZE constants (laanwj)\n+- #10644 `e292140` Slightly overhaul NSI pixmaps (jonasschnelli)\n+- #10660 `0c3542e` Allow to cancel the txdb upgrade via splashscreen keypress 'q' (jonasschnelli)\n+\n+### Wallet\n+- #9359 `f7ec7cf` Add test for CWalletTx::GetImmatureCredit() returning stale values (ryanofsky)\n+- #9576 `56ab672` [wallet] Remove redundant initialization (practicalswift)\n+- #9333 `fa625b0` Document CWalletTx::mapValue entries and remove erase of nonexistent \"version\" entry (ryanofsky)\n+- #9906 `72fb515` Disallow copy constructor CReserveKeys (instagibbs)\n+- #9369 `3178b2c` Factor out CWallet::nTimeSmart computation into a method (ryanofsky)\n+- #9830 `afcd7c0` Add safe flag to listunspent result (NicolasDorier)\n+- #9993 `c49355c` Initialize nRelockTime (pstratem)\n+- #9818 `3d857f3` Save watch only key timestamps when reimporting keys (ryanofsky)\n+- #9294 `f34cdcb` Use internal HD chain for change outputs (hd split) (jonasschnelli)\n+- #10164 `e183ea2` Wallet: reduce excess logic InMempool() (kewde)\n+- #10186 `c9ff4f8` Remove SYNC_TRANSACTION_NOT_IN_BLOCK magic number (jnewbery)\n+- #10226 `64c45aa` wallet: Use boost to more portably ensure -wallet specifies only a filename (luke-jr)\n+- #9827 `c91ca0a` Improve ScanForWalletTransactions return value (ryanofsky)\n+- #9951 `fa1ac28` Wallet database handling abstractions/simplifications (laanwj)\n+- #10265 `c29a0d4` [wallet] [moveonly] Check non-null pindex before potentially referencing (kallewoof)\n+- #10283 `a550f6e` Cleanup: reduce to one GetMinimumFee call signature (morcos)\n+- #10294 `e2b99b1` [Wallet] unset change position when there is no change (instagibbs)\n+- #10115 `d3dce0e` Avoid reading the old hd master key during wallet encryption (TheBlueMatt)\n+- #10341 `18c9deb` rpc/wallet: Workaround older UniValue which returns a std::string temporary for get_str (luke-jr)\n+- #10308 `94e5227` [wallet] Securely erase potentially sensitive keys/values (tjps)\n+- #10257 `ea1fd43` [test] Add test for getmemoryinfo (jimmysong)\n+- #10295 `ce8176d` [qt] Move some WalletModel functions into CWallet (ryanofsky)\n+- #10506 `7cc2c67` Fix bumpfee test after #10449 (ryanofsky)\n+- #10500 `098b01d` Avoid CWalletTx copies in GetAddressBalances and GetAddressGroupings (ryanofsky)\n+- #10455 `0747d33` Simplify feebumper minimum fee code slightly (ryanofsky)\n+- #10522 `2805d60` [wallet] Remove unused variables (practicalswift)\n+- #8694 `177433a` Basic multiwallet support (luke-jr)\n+- #10598 `7a74f88` Supress struct/class mismatch warnings introduced in #10284 (paveljanik)\n+- #9343 `209eef6` Don't create change at dust limit (morcos)\n+- #10744 `ed88e31` Use method name via __func__ macro (darksh1ne)\n+- #10712 `e8b9523` Add change output if necessary to reduce excess fee (morcos)\n+- #10816 `1c011ff` Properly forbid -salvagewallet and -zapwallettxes for multi wallet (morcos)\n+- #10235 `5cfdda2` Track keypool entries as internal vs external in memory (TheBlueMatt)\n+- #10330 `bf0a08b` [wallet] fix zapwallettxes interaction with persistent mempool (jnewbery)\n+- #10831 `0b01935` Batch flushing operations to the walletdb during top up and increase keypool size (gmaxwell)\n+- #10795 `7b6e8bc` No longer ever reuse keypool indexes (TheBlueMatt)\n+- #10849 `bde4f93` Multiwallet: simplest endpoint support (jonasschnelli)\n+- #10817 `9022aa3` Redefine Dust and add a discard_rate (morcos)\n+- #10883 `bf3b742` Rename -usewallet to -rpcwallet (morcos)\n+- #10604 `420238d` [wallet] [tests] Add listwallets RPC, include wallet name in `getwalletinfo` and add multiwallet test (jnewbery)\n+- #10885 `70888a3` Reject invalid wallets (promag)\n+- #10949 `af56397` Clarify help message for -discardfee (morcos)\n+- #10942 `2e857bb` Eliminate fee overpaying edge case when subtracting fee from recipients (morcos)\n+- #10995 `fa64636` Fix resendwallettransactions assert failure if -walletbroadcast=0 (TheBlueMatt)\n+- #11022 `653a46d` Basic keypool topup (jnewbery)\n+- #11081 `9fe1f6b` Add length check for CExtKey deserialization (jonasschnelli, guidovranken)\n+- #11044 `4ef8374` [wallet] Keypool topup cleanups (jnewbery)\n+- #11145 `e51bb71` Fix rounding bug in calculation of minimum change (morcos)\n+- #9605 `779f2f9` Use CScheduler for wallet flushing, remove ThreadFlushWalletDB (TheBlueMatt)\n+- #10108 `4e3efd4` ApproximateBestSubset should take inputs by reference, not value (RHavar)\n+\n+### Tests and QA\n+- #9744 `8efd1c8` Remove unused module from rpc-tests (34ro)\n+- #9657 `7ff4a53` Improve rpc-tests.py (jnewbery)\n+- #9766 `7146d96` Add --exclude option to rpc-tests.py (jnewbery)\n+- #9577 `d6064a8` Fix docstrings in qa tests (jnewbery)\n+- #9823 `a13a417` qa: Set correct path for binaries in rpc tests (MarcoFalke)\n+- #9847 `6206252` Extra test vector for BIP32 (sipa)\n+- #9350 `88c2ae3` [Trivial] Adding label for amount inside of tx_valid/tx_invalid.json (Christewart)\n+- #9888 `36afd4d` travis: Verify commits only for one target (MarcoFalke)\n+- #9904 `58861ad` test: Fail if InitBlockIndex fails (laanwj)\n+- #9828 `67c5cc1` Avoid -Wshadow warnings in wallet_tests (ryanofsky)\n+- #9832 `48c3429` [qa] assert_start_raises_init_error (NicolasDorier)\n+- #9739 `9d5fcbf` Fix BIP68 activation test (jnewbery)\n+- #9547 `d32581c` bench: Assert that division by zero is unreachable (practicalswift)\n+- #9843 `c78adbf` Fix segwit getblocktemplate test (jnewbery)\n+- #9929 `d5ce14e` tests: Delete unused function _rpchost_to_args (laanwj)\n+- #9555 `19be26a` [test] Avoid reading a potentially uninitialized variable in tx_invalid-test (transaction_tests.cpp) (practicalswift)\n+- #9945 `ac23a7c` Improve logging in bctest.py if there is a formatting mismatch (jnewbery)\n+- #9768 `8910b47` [qa] Add logging to test_framework.py (jnewbery)\n+- #9972 `21833f9` Fix extended rpc tests broken by #9768 (jnewbery)\n+- #9977 `857d1e1` QA: getblocktemplate_longpoll.py should always use >0 fee tx (sdaftuar)\n+- #9970 `3cc13ea` Improve readability of segwit.py, smartfees.py (sdaftuar)\n+- #9497 `2c781fb` CCheckQueue Unit Tests (JeremyRubin)\n+- #10024 `9225de2` [trivial] Use log.info() instead of print() in remaining functional test cases (jnewbery)\n+- #9956 `3192e52` Reorganise qa directory (jnewbery)\n+- #10017 `02d64bd` combine_logs.py - aggregates log files from multiple bitcoinds during functional tests (jnewbery)\n+- #10047 `dfef6b6` [tests] Remove unused variables and imports (practicalswift)\n+- #9701 `a230b05` Make bumpfee tests less fragile (ryanofsky)\n+- #10053 `ca20923` [test] Allow functional test cases to be skipped (jnewbery)\n+- #10052 `a0b1e57` [test] Run extended tests once daily in Travis (jnewbery)\n+- #10069 `1118493` [QA] Fix typo in fundrawtransaction test (NicolasDorier)\n+- #10083 `c044f03` [QA] Renaming rawTx into rawtx (NicolasDorier)\n+- #10073 `b1a4f27` Actually run assumevalid.py (jnewbery)\n+- #9780 `c412fd8` Suppress noisy output from qa tests in Travis (jnewbery)\n+- #10096 `79af9fb` Check that all test scripts in test/functional are being run (jnewbery)\n+- #10076 `5b029aa` [qa] combine_logs: Use ordered list for logfiles (MarcoFalke)\n+- #10107 `f2734c2` Remove unused variable. Remove accidental trailing semicolons in Python code (practicalswift)\n+- #10109 `8ac8041` Remove SingleNodeConnCB (jnewbery)\n+- #10114 `edc62c9` [tests] sync_with_ping should assert that ping hasn't timed out (jnewbery)\n+- #10128 `427d2fd` Speed Up CuckooCache tests (JeremyRubin)\n+- #10072 `12af74b` Remove sources of unreliablility in extended functional tests (jnewbery)\n+- #10077 `ebfd653` [qa] Add setnetworkactive smoke test (MarcoFalke)\n+- #10152 `080d7c7` [trivial] remove unused line in Travis config (jnewbery)\n+- #10159 `df1ca9e` [tests] color test results and sort alphabetically (jnewbery)\n+- #10124 `88799ea` [test] Suppress test logging spam (jnewbery)\n+- #10142 `ed09dd3` Run bitcoin_test-qt under minimal QPA platform (ryanofsky)\n+- #9949 `a27dbc5` [bench] Avoid function call arguments which are pointers to uninitialized values (practicalswift)\n+- #10187 `b44adf9` tests: Fix test_runner return value in case of skipped test (laanwj)\n+- #10197 `d86bb07` [tests] Functional test warnings (jnewbery)\n+- #10219 `9111df9` Tests: Order Python Tests Differently (jimmysong)\n+- #10229 `f3db4c6` Tests: Add test for getdifficulty (jimmysong)\n+- #10224 `2723bcd` [test] Add test for getaddednodeinfo (jimmysong)\n+- #10023 `c530c15` [tests] remove maxblocksinflight.py (functionality covered by other test) (jnewbery)\n+- #10097 `1b25b6d` Move zmq test skipping logic into individual test case (jnewbery)\n+- #10272 `54e2d87` [Tests] Prevent warning: variable 'x' is uninitialized (paveljanik)\n+- #10225 `e0a7e19` [test] Add aborttrescan tests (kallewoof)\n+- #10278 `8254a8a` [test] Add Unit Test for GetListenPort (jimmysong)\n+- #10280 `47535d7` [test] Unit test amount.h/amount.cpp (jimmysong)\n+- #10256 `80c3a73` [test] Add test for gettxout to wallet.py (jimmysong)\n+- #10264 `492d22f` [test] Add tests for getconnectioncount, getnettotals and ping (jimmysong)\n+- #10169 `8f3e384` [tests] Remove func test code duplication (jnewbery)\n+- #10198 `dc8fc0c` [tests] Remove is_network_split from functional test framework (jnewbery)\n+- #10255 `3c5e6c9` [test] Add test for listaddressgroupings (jimmysong)\n+- #10137 `75171f0` Remove unused import. Remove accidental trailing semicolons (practicalswift)\n+- #10307 `83073de` [tests] allow zmq test to be run in out-of-tree builds (jnewbery)\n+- #10344 `e927483` [tests] Fix abandonconflict.py intermittency (jnewbery)\n+- #10318 `170bc2c` [tests] fix wait_for_inv() (jnewbery)\n+- #10171 `fff72de` [tests] Add node methods to test framework (jnewbery)\n+- #10352 `23d78c4` test: Add elapsed time to RPC tracing (laanwj)\n+- #10342 `6a796b2` [tests] Improve mempool_persist test (jnewbery)\n+- #10287 `776ba23` [tests] Update Unit Test for addrman.h/addrman.cpp (jimmysong)\n+- #10365 `7ee5236` [tests] increase timeouts in sendheaders test (jnewbery)\n+- #10361 `f6241b3` qa: disablewallet: Check that wallet is really disabled (MarcoFalke)\n+- #10371 `4b766fc` [tests] Clean up addrman_tests.cpp (jimmysong)\n+- #10253 `87abe20` [test] Add test for getnetworkhashps (jimmysong)\n+- #10376 `8bd16ee` [tests] fix disconnect_ban intermittency (jnewbery)\n+- #10374 `5411997` qa: Warn when specified test is not found (MarcoFalke)\n+- #10405 `0542978` tests: Correct testcase in script_tests.json for large number OP_EQUAL (laanwj)\n+- #10429 `6b99daf` tests: fix spurious addrman test failure (theuni)\n+- #10433 `8e57256` [tests] improve tmpdir structure (jnewbery)\n+- #10415 `217b416` [tests] Speed up fuzzing by ~200x when using afl-fuzz (practicalswift)\n+- #10445 `b4b057a` Add test for empty chain and reorg consistency for gettxoutsetinfo (gmaxwell)\n+- #10423 `1aefc94` [tests] skipped tests should clean up after themselves (jnewbery)\n+- #10359 `329fc1d` [tests] functional tests should call BitcoinTestFramework start/stop node methods (jnewbery)\n+- #10514 `e103b3f` Bugfix: missing == 0 after randrange (sipa)\n+- #10515 `c871f32` [test] Add test for getchaintxstats (jimmysong)\n+- #10509 `bea5b00` Remove xvfb configuration from travis (ryanofsky)\n+- #10535 `30853e1` [qa] fundrawtx: Fix shutdown race (MarcoFalke)\n+- #9909 `300f8e7` tests: Add FindEarliestAtLeast test for edge cases (ryanofsky)\n+- #10331 `75e898c` Share config between util and functional tests (jnewbery)\n+- #10321 `e801084` Use FastRandomContext for all tests (sipa)\n+- #10524 `6c2d81f` [tests] Remove printf(...) (practicalswift)\n+- #10547 `71ab6e5` [tests] Use FastRandomContext instead of boost::random::{mt19937,uniform_int_distribution} (practicalswift)\n+- #10551 `6702617` [Tests] Wallet encryption functional tests (achow101)\n+- #10555 `643fa0b` [tests] various improvements to zmq_test.py (jnewbery)\n+- #10533 `d083bd9` [tests] Use cookie auth instead of rpcuser and rpcpassword (achow101)\n+- #10632 `c68a9a6` qa: Add stopatheight test (MarcoFalke)\n+- #10636 `4bc853b` [qa] util: Check return code after closing bitcoind proc (MarcoFalke)\n+- #10662 `e0a7801` Initialize randomness in benchmarks (achow101)\n+- #10612 `7c87a9c` The young person's guide to the test_framework (jnewbery)\n+- #10659 `acb1153` [qa] blockchain: Pass on closed connection during generate call (MarcoFalke)\n+- #10690 `416af3e` [qa] Bugfix: allow overriding extra_args in ComparisonTestFramework (sdaftuar)\n+- #10556 `65cc7aa` Move stop/start functions from utils.py into BitcoinTestFramework (jnewbery)\n+- #10704 `dd07f47` [tests] nits in dbcrash.py (jnewbery)\n+- #10743 `be82498` [test] don't run dbcrash.py on Travis (jnewbery)\n+- #10761 `d3b5870` [tests] fix replace_by_fee.py (jnewbery)\n+- #10759 `1d4805c` Fix multi_rpc test for hosts that dont default to utf8 (TheBlueMatt)\n+- #10190 `e4f226a` [tests] mining functional tests (including regression test for submitblock) (jnewbery)\n+- #10739 `1fc783f` test: Move variable `state` down where it is used (paveljanik)\n+- #9980 `fee0d80` Fix mem access violation merkleblock (Christewart)\n+- #10893 `0c173a1` [QA] Avoid running multiwallet.py twice (jonasschnelli)\n+- #10927 `9d5e8f9` test: Make sure wallet.backup is created in temp path (laanwj)\n+- #10899 `f29d5db` [test] Qt: Use _putenv_s instead of setenv on Windows builds (brianmcmichael)\n+- #10912 `5c8eb79` [tests] Fix incorrect memory_cleanse(\u2026) call in crypto_tests.cpp (practicalswift)\n+- #11001 `fa8a063` [tests] Test disconnecting unsupported service bits logic (jnewbery)\n+- #10695 `929fd72` [qa] Rewrite BIP65/BIP66 functional tests (sdaftuar)\n+- #10963 `ecd2135` [bench] Restore format state of cout after printing with std::fixed/setprecision (practicalswift)\n+- #11025 `e5d26e4` qa: Fix inv race in example_test (MarcoFalke)\n+- #10765 `2c811e0` Tests: address placement should be deterministic by default (ReneNyffenegger)\n+- #11000 `ac016e1` test: Add resendwallettransactions functional tests (promag)\n+- #11032 `aeb3175` [qa] Fix block message processing error in sendheaders.py (sdaftuar)\n+- #10105 `0b9fb68` [tests] fixup - make all Travis test runs quiet, non just cron job runs (jnewbery)\n+- #10222 `6ce7337` [tests] test_runner - check unicode (jnewbery)\n+- #10327 `35da2ae` [tests] remove import-abort-rescan.py (jnewbery)\n+- #11023 `bf74d37` [tests] Add option to attach a python debugger if functional test fails (jnewbery)\n+- #10565 `8c2098a` [coverage] Remove subtrees and benchmarks from coverage report (achow101)\n+\n+### Miscellaneous\n+- #9871 `be8ba2c` Add a tree sha512 hash to merge commits (sipa)\n+- #9821 `d19d45a` util: Specific GetOSRandom for Linux/FreeBSD/OpenBSD (laanwj)\n+- #9903 `ba80a68` Docs: add details to -rpcclienttimeout doc (ian-kelling)\n+- #9910 `53c300f` Docs: correct and elaborate -rpcbind doc (ian-kelling)\n+- #9905 `01b7cda` [contrib] gh-merge: Move second sha512 check to the end (MarcoFalke)\n+- #9880 `4df8213` Verify Tree-SHA512s in merge commits, enforce sigs are not SHA1 (TheBlueMatt)\n+- #9932 `00c13ea` Fix verify-commits on travis and always check top commit's tree (TheBlueMatt)\n+- #9952 `6996e06` Add historical release notes for 0.14.0 (laanwj)\n+- #9940 `fa99663` Fix verify-commits on OSX, update for new bad Tree-SHA512, point travis to different keyservers (TheBlueMatt)\n+- #9963 `8040ae6` util: Properly handle errors during log message formatting (laanwj)\n+- #9984 `cce056d` devtools: Make github-merge compute SHA512 from git, instead of worktree (laanwj)\n+- #9995 `8bcf934` [doc] clarify blockchain size and pruning (askmike)\n+- #9734 `0c17afc` Add updating of chainTxData to release process (sipa)\n+- #10063 `530fcbd` add missing spaces so that markdown recognizes headline (flack)\n+- #10085 `db1ae54` Docs: remove 'noconnect' option (jlopp)\n+- #10090 `8e4f7e7` Update bitcoin.conf with example for pruning (coinables)\n+- #9424 `1a5aaab` Change LogAcceptCategory to use uint32_t rather than sets of strings (gmaxwell)\n+- #10036 `fbf36ca` Fix init README format to render correctly on github (jlopp)\n+- #10058 `a2cd0b0` No need to use OpenSSL malloc/free (tjps)\n+- #10123 `471ed00` Allow debug logs to be excluded from specified component (jnewbery)\n+- #10104 `fadf078` linearize script: Option to use RPC cookie (achow101)\n+- #10162 `a3a2160` [trivial] Log calls to getblocktemplate (jnewbery)\n+- #10155 `928695b` build: Deduplicate version numbers (laanwj)\n+- #10211 `a86255b` [doc] Contributor fixes & new \"finding reviewers\" section (kallewoof)\n+- #10250 `1428f30` Fix some empty vector references (sipa)\n+- #10270 `95f5e44` Remove Clang workaround for Boost 1.46 (fanquake)\n+- #10263 `cb007e4` Trivial: fix fee estimate write error log message (CryptAxe)\n+- #9670 `bd9ec0e` contrib: github-merge improvements (laanwj)\n+- #10260 `1d75597` [doc] Minor corrections to osx dependencies (fanquake)\n+- #10189 `750c5a5` devtools/net: add a verifier for scriptable changes. Use it to make CNode::id private (theuni)\n+- #10322 `bc64b5a` Use hardware timestamps in RNG seeding (sipa)\n+- #10381 `7f2b9e0` Shadowing warnings are not enabled by default, update doc accordingly (paveljanik)\n+- #10380 `b6ee855` [doc] Removing comments about dirty entries on txmempool (madeo)\n+- #10383 `d0c37ee` [logging] log system time and mock time (jnewbery)\n+- #10404 `b45a52a` doc: Add logging to FinalizeNode() (sdaftuar)\n+- #10388 `526e839` Output line to debug.log when IsInitialBlockDownload latches to false (morcos)\n+- #10372 `15254e9` Add perf counter data to GetStrongRandBytes state in scheduler (TheBlueMatt)\n+- #10461 `55b72f3` Update style guide (sipa)\n+- #10486 `10e8c0a` devtools: Retry after signing fails in github-merge (laanwj)\n+- #10447 `f259263` Make bitcoind invalid argument error message specific (laanwj)\n+- #10495 `6a38b79` contrib: Update location of seeds.txt (laanwj)\n+- #10469 `b6b150b` Fixing typo in rpcdump.cpp help message (keystrike)\n+- #10451 `27b9931` contrib/init/bitcoind.openrcconf: Don't disable wallet by default (luke-jr)\n+- #10323 `00d3692` Update to latest libsecp256k1 master (sipa)\n+- #10422 `cec9e1e` Fix timestamp in fee estimate debug message (morcos)\n+- #10566 `5d034ee` [docs] Use the \"domain name setup\" image (previously unused) in the gitian docs (practicalswift)\n+- #10534 `a514ac3` Clarify prevector::erase and avoid swap-to-clear (sipa)\n+- #10575 `22ec768` Header include guideline (sipa)\n+- #10480 `fbf5d3b` Improve commit-check-script.sh (sipa)\n+- #10502 `1ad3d4e` scripted-diff: Remove BOOST_FOREACH, Q_FOREACH and PAIRTYPE (jtimon)\n+- #10377 `b63be2c` Use rdrand as entropy source on supported platforms (sipa)\n+- #9895 `228c319` Turn TryCreateDirectory() into TryCreateDirectories() (benma)\n+- #10602 `d76e84a` Make clang-format use C++11 features (e.g. A<A<int>> instead of A<A<int> >) (practicalswift)\n+- #10623 `c38f540` doc: Add 0.14.2 release notes (MarcoFalke)\n+- #10276 `b750b33` contrib/verifybinaries: allow filtering by platform (knocte)\n+- #10248 `01c4b14` Rewrite addrdb with less duplication using CHashVerifier (sipa)\n+- #10577 `232508f` Add an explanation of quickly hashing onto a non-power of two range (gmaxwell)\n+- #10608 `eee398f` Add a comment explaining the use of MAX_BLOCK_BASE_SIZE (gmaxwell)\n+- #10728 `7397af9` fix typo in help text for removeprunedfunds (AkioNak)\n+- #10193 `6dbcc74` scripted-diff: Remove #include <boost/foreach.hpp> (jtimon)\n+- #10676 `379aed0` document script-based return fields for validateaddress (instagibbs)\n+- #10651 `cef4b5c` Verify binaries from bitcoincore.org and bitcoin.org (TheBlueMatt)\n+- #10786 `ca4c545` Add PR description to merge commit in github-merge.py (sipa)\n+- #10812 `c5904e8` [utils] Allow bitcoin-cli's -rpcconnect option to be used with square brackets (jnewbery)\n+- #10842 `3895e25` Fix incorrect Doxygen tag (@ince \u2192 @since). Doxygen parameter name matching (practicalswift)\n+- #10681 `df0793f` add gdb attach process to test README (instagibbs)\n+- #10789 `1124328` Punctuation/grammer fixes in rpcwallet.cpp (stevendlander)\n+- #10655 `78f307b` Properly document target_confirmations in listsinceblock (RHavar)\n+- #10917 `5c003cb` developer-notes: add reference to snake_case and PascalCase (benma)\n+- #11003 `4b5a7ce` Docs: Capitalize bullet points in CONTRIBUTING guide (eklitzke)\n+- #10968 `98aa3f6` Add instructions for parallel gitian builds (coblee)\n+- #11076 `1c4b9b3` 0.15 release-notes nits: fix redundancy, remove accidental parenthesis & fix range style (practicalswift)\n+- #11090 `8f0121c` Update contributor names in release-notes.md (Derek701)\n+- #11056 `cbdd338` disable jni in builds (instagibbs)\n+- #11080 `2b59cfb` doc: Update build-openbsd for 6.1 (laanwj)\n+- #11119 `0a6af47` [doc] build-windows: Mention that only trusty works (MarcoFalke)\n+- #11108 `e8ad101` Changing -txindex requires -reindex, not -reindex-chainstate (TheBlueMatt)\n+- #9792 `342b9bc` FastRandomContext improvements and switch to ChaCha20 (sipa)\n+- #9505 `67ed40e` Prevector Quick Destruct (JeremyRubin)\n+- #10820 `ef37f20` Use cpuid intrinsics instead of asm code (sipa)\n+- #9999 `a328904` [LevelDB] Plug leveldb logs to bitcoin logs (NicolasDorier)\n+- #9693 `c5e9e42` Prevent integer overflow in ReadVarInt (gmaxwell)\n+- #10129 `351d0ad` scheduler: fix sub-second precision with boost < 1.50 (theuni)\n+- #10153 `fade788` logging: Fix off-by-one for shrinkdebugfile default (MarcoFalke)\n+- #10305 `c45da32` Fix potential NPD introduced in b297426c (TheBlueMatt)\n+- #10338 `daf3e7d` Maintain state across GetStrongRandBytes calls (sipa)\n+- #10544 `a4fe077` Update to LevelDB 1.20 (sipa)\n+- #10614 `cafe24f` random: fix crash on some 64bit platforms (theuni)\n+- #10714 `2a09a38` Avoid printing incorrect block indexing time due to uninitialized variable (practicalswift)\n+- #10837 `8bc6d1f` Fix resource leak on error in GetDevURandom (corebob)\n+- #10832 `89bb036` init: Factor out AppInitLockDataDirectory and fix startup core dump issue (laanwj)\n+- #10914 `b995a37` Add missing lock in CScheduler::AreThreadsServicingQueue() (TheBlueMatt)\n+- #10958 `659c096` Update to latest Bitcoin patches for LevelDB (sipa)\n+- #10919 `c1c671f` Fix more init bugs (TheBlueMatt)\n+\n Credits\n =======\n "
      }
    ]
  },
  {
    "sha": "adcc788f2a894ad836a9ca8ddcabf06ddae5559e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGNjNzg4ZjJhODk0YWQ4MzZhOWNhOGRkY2FiZjA2ZGRhZTU1NTll",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-07T22:37:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-07T22:38:04Z"
      },
      "message": "Merge #11279: doc: Add missing contributors to release notes\n\nfad16a90b doc: Add missing contributors to release notes (MarcoFalke)\n\nPull request description:\n\n  Guido Vranken via commit 9fe1f6b\n\nTree-SHA512: 9f5c860ed8e23ad679e8c9e9392a66b7ee25c7be84d256855ef65caf335a8e819c7146be47d90686e61450d2501ed96b04b813860725856619088a4378dbfa90",
      "tree": {
        "sha": "3aa77d9e1c50db5298167e33e30a059e0dc51729",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3aa77d9e1c50db5298167e33e30a059e0dc51729"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adcc788f2a894ad836a9ca8ddcabf06ddae5559e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJZscpMAAoJEB5K7WKYbNJde2kH/il0v2htxHUk2zQzpzV2XGVF\nbkezkihmLaM+brqt3PDtDdzm6y49plJl6h7TTbrrXjGOONz6erUZQ1Q0omRyIOxE\nl9N903IcYZpJDX+bP4BrS48eftVbT5aZl/Psuk4Pn0NvHgUnktvr6V0UKBT9o3Li\nIyiKXepCl9AgT/SWaNX49Z92JYCtta50uFLVyh0LymkHocNYytF8s5WPHdqeGBEK\nmWyZqGgVsz2x37Ac9L9BWdj5Fy9xqBZSbWH7chylcBhsWwKNRJqKFIL84KtvfauR\n6UK60Lc+2Ap7viJmZJbt4M7UXr1SWsZrJqz2wYd3nD7+2kcFdoXJvt9kurTTKcY=\n=cQAQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 3aa77d9e1c50db5298167e33e30a059e0dc51729\nparent d4c9d00e7e79958dea9586f927778dba2be8230a\nparent fad16a90b2c210f745b75cc72a20287b054644af\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1504823869 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1504823884 +0200\n\nMerge #11279: doc: Add missing contributors to release notes\n\nfad16a90b doc: Add missing contributors to release notes (MarcoFalke)\n\nPull request description:\n\n  Guido Vranken via commit 9fe1f6b\n\nTree-SHA512: 9f5c860ed8e23ad679e8c9e9392a66b7ee25c7be84d256855ef65caf335a8e819c7146be47d90686e61450d2501ed96b04b813860725856619088a4378dbfa90\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adcc788f2a894ad836a9ca8ddcabf06ddae5559e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/adcc788f2a894ad836a9ca8ddcabf06ddae5559e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adcc788f2a894ad836a9ca8ddcabf06ddae5559e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d4c9d00e7e79958dea9586f927778dba2be8230a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d4c9d00e7e79958dea9586f927778dba2be8230a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d4c9d00e7e79958dea9586f927778dba2be8230a"
      },
      {
        "sha": "fad16a90b2c210f745b75cc72a20287b054644af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad16a90b2c210f745b75cc72a20287b054644af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad16a90b2c210f745b75cc72a20287b054644af"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5a391462c7275a078efbeb2280e485cdb28ee99a",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adcc788f2a894ad836a9ca8ddcabf06ddae5559e/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adcc788f2a894ad836a9ca8ddcabf06ddae5559e/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=adcc788f2a894ad836a9ca8ddcabf06ddae5559e",
        "patch": "@@ -785,6 +785,7 @@ Thanks to everyone who directly contributed to this release:\n - fanquake\n - Felix Weis\n - flack\n+- Guido Vranken\n - Greg Griffith\n - Gregory Maxwell\n - Gregory Sanders"
      }
    ]
  },
  {
    "sha": "0ced455b99154aa875ca07378c63167f13006360",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2VkNDU1Yjk5MTU0YWE4NzVjYTA3Mzc4YzYzMTY3ZjEzMDA2MzYw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-07T20:17:58Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-08T23:20:13Z"
      },
      "message": "travis: filter out pyenv",
      "tree": {
        "sha": "09a1d05692784f4ab4657dbfa9e334e5caea822b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09a1d05692784f4ab4657dbfa9e334e5caea822b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ced455b99154aa875ca07378c63167f13006360",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ced455b99154aa875ca07378c63167f13006360",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ced455b99154aa875ca07378c63167f13006360",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ced455b99154aa875ca07378c63167f13006360/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "252ca9c5d8d781c9044b452d608a419a003e5e3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/252ca9c5d8d781c9044b452d608a419a003e5e3e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/252ca9c5d8d781c9044b452d608a419a003e5e3e"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3220e76b063b8b19d8cb5615f6df63b7d781753c",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ced455b99154aa875ca07378c63167f13006360/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ced455b99154aa875ca07378c63167f13006360/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=0ced455b99154aa875ca07378c63167f13006360",
        "patch": "@@ -38,6 +38,7 @@ env:\n \n before_install:\n     - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/python/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n+    - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/pyenv/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n install:\n     - if [ -n \"$DPKG_ADD_ARCH\" ]; then sudo dpkg --add-architecture \"$DPKG_ADD_ARCH\" ; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi"
      }
    ]
  },
  {
    "sha": "5f2cf88c2311ebb178dacd9776f237b16b3a4e5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZjJjZjg4YzIzMTFlYmIxNzhkYWNkOTc3NmYyMzdiMTZiM2E0ZTVh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-08T23:53:05Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-09-08T23:54:01Z"
      },
      "message": "Merge #11292: travis: filter out pyenv\n\n0ced455b9 travis: filter out pyenv (Cory Fields)\n\nPull request description:\n\n  Backport of #11271\n\nTree-SHA512: 34fa201051e4bc3600c2ee6121380c93f03a0639361e4955cdc22af0f95b787a3eb590a5246133377357c803dbb5d17a543672b382de8afa2226e480b63e7555",
      "tree": {
        "sha": "cf4a43d4348f216a2c47653f4ac03090fd62fd5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf4a43d4348f216a2c47653f4ac03090fd62fd5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f2cf88c2311ebb178dacd9776f237b16b3a4e5a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZsy2ZAAoJEKY26XYx92fgsEcP/icx5tbnhs7GbQYfOEW61RtA\nKcBvhSFb3bjhUr3sKVpSg4ngzSweFg0ViFLDz5g7Cwu9u6nvomy2Br9MDr3DkRKy\ni8jbtAKVtisoH/Ka6+XeK/cJ2dAjxKlZuoDOIorLXN32X7eyS2ebgzJo2Ym5RRt2\ngXzehSdO21Hopu5guZt+UsFqkUqUxVFPzZH59FpQousr3y6VBVUHXNPti+shjqAE\n8rTXsmJKwm+Qavwg8YGYVFrFSpl/O573qLj1FuFjU4cs0PkZfEvH6T1rypELv8Js\n8brNwPuYvJ/B/7TUZjz+xAojQFVjcunRpDR98+Ew8ubPotdjZdQhl78ajHKcOGKI\nTDX2+e28RgA8sgouaqqeMv9xDWfu0ZeVofSFU3+e5bRc+8mcUJW7ceQ/kW0GgtXt\nQzTVSSa2B/Zg2YwxtZDpW+Z6iF5Qpxa05il/53OXivz0OFO2LihLSzo/oS7bTTWg\npKuKkBsAgLshL1FU82ee29kAGrO6TIXZFSkG+4k8RT+1BEaYq1hX9Y98O0dDKrsf\nzArzAEmFZZEokQiXcXbG8p9Xg9+jQlmE8Bs2Emv3nKVh1Wr1RYZ+b4CYA+K4ZCOT\nihA+iEbWcEaN0Dbp09MoORWHFQ3OqzmcH4jBJcL6zf3ND989gi8CHzZdNIUxBTmU\nrvzFekHDfVkjLCej8qDb\n=7y3I\n-----END PGP SIGNATURE-----",
        "payload": "tree cf4a43d4348f216a2c47653f4ac03090fd62fd5d\nparent adcc788f2a894ad836a9ca8ddcabf06ddae5559e\nparent 0ced455b99154aa875ca07378c63167f13006360\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1504914785 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1504914841 -0700\n\nMerge #11292: travis: filter out pyenv\n\n0ced455b9 travis: filter out pyenv (Cory Fields)\n\nPull request description:\n\n  Backport of #11271\n\nTree-SHA512: 34fa201051e4bc3600c2ee6121380c93f03a0639361e4955cdc22af0f95b787a3eb590a5246133377357c803dbb5d17a543672b382de8afa2226e480b63e7555\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f2cf88c2311ebb178dacd9776f237b16b3a4e5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f2cf88c2311ebb178dacd9776f237b16b3a4e5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f2cf88c2311ebb178dacd9776f237b16b3a4e5a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "adcc788f2a894ad836a9ca8ddcabf06ddae5559e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adcc788f2a894ad836a9ca8ddcabf06ddae5559e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adcc788f2a894ad836a9ca8ddcabf06ddae5559e"
      },
      {
        "sha": "0ced455b99154aa875ca07378c63167f13006360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ced455b99154aa875ca07378c63167f13006360",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ced455b99154aa875ca07378c63167f13006360"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3220e76b063b8b19d8cb5615f6df63b7d781753c",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f2cf88c2311ebb178dacd9776f237b16b3a4e5a/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f2cf88c2311ebb178dacd9776f237b16b3a4e5a/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=5f2cf88c2311ebb178dacd9776f237b16b3a4e5a",
        "patch": "@@ -38,6 +38,7 @@ env:\n \n before_install:\n     - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/python/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n+    - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/pyenv/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n install:\n     - if [ -n \"$DPKG_ADD_ARCH\" ]; then sudo dpkg --add-architecture \"$DPKG_ADD_ARCH\" ; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi"
      }
    ]
  },
  {
    "sha": "fa120bd01c7fc27eb9d3e4ecbf4b4ccc3b728686",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTEyMGJkMDFjN2ZjMjdlYjlkM2U0ZWNiZjRiNGNjYzNiNzI4Njg2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-10T02:26:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-10T02:24:12Z"
      },
      "message": "doc: Old fee_estimates.dat are discarded by 0.15.0",
      "tree": {
        "sha": "d669676ad0330d9580a3a5d8c52a27f22e81e92b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d669676ad0330d9580a3a5d8c52a27f22e81e92b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa120bd01c7fc27eb9d3e4ecbf4b4ccc3b728686",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa120bd01c7fc27eb9d3e4ecbf4b4ccc3b728686",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa120bd01c7fc27eb9d3e4ecbf4b4ccc3b728686",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa120bd01c7fc27eb9d3e4ecbf4b4ccc3b728686/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f2cf88c2311ebb178dacd9776f237b16b3a4e5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f2cf88c2311ebb178dacd9776f237b16b3a4e5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f2cf88c2311ebb178dacd9776f237b16b3a4e5a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3d25dd2317f67fbe13ccf15b3faae435c5dbe0cd",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa120bd01c7fc27eb9d3e4ecbf4b4ccc3b728686/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa120bd01c7fc27eb9d3e4ecbf4b4ccc3b728686/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fa120bd01c7fc27eb9d3e4ecbf4b4ccc3b728686",
        "patch": "@@ -21,13 +21,17 @@ How to Upgrade\n \n If you are running an older version, shut it down. Wait until it has completely\n shut down (which might take a few minutes for older versions), then run the \n-installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac)\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n The first time you run version 0.15.0, your chainstate database will be converted to a\n new format, which will take anywhere from a few minutes to half an hour,\n depending on the speed of your machine.\n \n+The file format of `fee_estimates.dat` changed in version 0.15.0. Hence, a\n+downgrade from version 0.15.0 or upgrade to version 0.15.0 will cause all fee\n+estimates to be discarded.\n+\n Note that the block database format also changed in version 0.8.0 and there is no\n automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n directly from 0.7.x and earlier without redownloading the blockchain is not supported."
      }
    ]
  },
  {
    "sha": "3751912e8e044958d5ccea847a3f8eab0b026dc1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzUxOTEyZThlMDQ0OTU4ZDVjY2VhODQ3YTNmOGVhYjBiMDI2ZGMx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-10T22:12:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-10T22:13:03Z"
      },
      "message": "Merge #11295: doc: Old fee_estimates.dat are discarded by 0.15.0\n\nfa120bd01 doc: Old fee_estimates.dat are discarded by 0.15.0 (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: b4b1cb3efa307a7a0c37b8cc0a35f8fd31c8268747be59efba6530c36ba6423d9fb37e752782c7ebd5bc22a4aa1d2730b0e9ab560239fb2874afd42197ed9fd0",
      "tree": {
        "sha": "d669676ad0330d9580a3a5d8c52a27f22e81e92b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d669676ad0330d9580a3a5d8c52a27f22e81e92b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3751912e8e044958d5ccea847a3f8eab0b026dc1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJZtbjvAAoJEB5K7WKYbNJdTwAH/1SWio5/tpvIybp6fYSK7fMf\ncsUosIeD9+BDaaqxlVApipSxClJcqXM4ju+dMcW4UqE2jTbemXrvWQX7YD5Q0E4O\nmorjGRXeqeKG4QkjMAXmrF7qdqvHh+dnMAr+GrFZzTVCUHesSjohGU3KsTTTM9E7\nnvV9g3+HM99Pn5Ney2di/Z948zsNktF6aAnLvUpGH0iixI08ql/9ay4xal4/pJg7\n+f6VBGd5qn4AA2Bj9x/WpNbmMjEAgGx1xMClMmNl0IXYhBRhuv0LUeTGjp998HPy\nrXM0NwM/FWjCht6N8+vq1gDU5l/W2VVgPc1VsNG0d+sRerVWIQqOvgJeNj1vyyw=\n=+tXM\n-----END PGP SIGNATURE-----",
        "payload": "tree d669676ad0330d9580a3a5d8c52a27f22e81e92b\nparent 5f2cf88c2311ebb178dacd9776f237b16b3a4e5a\nparent fa120bd01c7fc27eb9d3e4ecbf4b4ccc3b728686\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1505081560 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1505081583 +0200\n\nMerge #11295: doc: Old fee_estimates.dat are discarded by 0.15.0\n\nfa120bd01 doc: Old fee_estimates.dat are discarded by 0.15.0 (MarcoFalke)\n\nPull request description:\n\nTree-SHA512: b4b1cb3efa307a7a0c37b8cc0a35f8fd31c8268747be59efba6530c36ba6423d9fb37e752782c7ebd5bc22a4aa1d2730b0e9ab560239fb2874afd42197ed9fd0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3751912e8e044958d5ccea847a3f8eab0b026dc1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3751912e8e044958d5ccea847a3f8eab0b026dc1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3751912e8e044958d5ccea847a3f8eab0b026dc1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f2cf88c2311ebb178dacd9776f237b16b3a4e5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f2cf88c2311ebb178dacd9776f237b16b3a4e5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f2cf88c2311ebb178dacd9776f237b16b3a4e5a"
      },
      {
        "sha": "fa120bd01c7fc27eb9d3e4ecbf4b4ccc3b728686",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa120bd01c7fc27eb9d3e4ecbf4b4ccc3b728686",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa120bd01c7fc27eb9d3e4ecbf4b4ccc3b728686"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3d25dd2317f67fbe13ccf15b3faae435c5dbe0cd",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3751912e8e044958d5ccea847a3f8eab0b026dc1/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3751912e8e044958d5ccea847a3f8eab0b026dc1/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=3751912e8e044958d5ccea847a3f8eab0b026dc1",
        "patch": "@@ -21,13 +21,17 @@ How to Upgrade\n \n If you are running an older version, shut it down. Wait until it has completely\n shut down (which might take a few minutes for older versions), then run the \n-installer (on Windows) or just copy over /Applications/Bitcoin-Qt (on Mac)\n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n The first time you run version 0.15.0, your chainstate database will be converted to a\n new format, which will take anywhere from a few minutes to half an hour,\n depending on the speed of your machine.\n \n+The file format of `fee_estimates.dat` changed in version 0.15.0. Hence, a\n+downgrade from version 0.15.0 or upgrade to version 0.15.0 will cause all fee\n+estimates to be discarded.\n+\n Note that the block database format also changed in version 0.8.0 and there is no\n automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n directly from 0.7.x and earlier without redownloading the blockchain is not supported."
      }
    ]
  },
  {
    "sha": "7c53587101eaf206a6a6a11a9398d43f139eadcf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzUzNTg3MTAxZWFmMjA2YTZhNmExMWE5Mzk4ZDQzZjEzOWVhZGNm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-14T14:16:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-14T14:17:21Z"
      },
      "message": "doc: Clean out release notes on 0.15 branch\n\nPrepare for 0.15.1\n\nTree-SHA512: d306369ebf2090dd3f74ead6ca6b9f3f2d56bcde6eb6aaab22ac38a5f7ab6cdf3da1142ad6fe266f793f27bbed4247397375f6177f2c7ccc1a57de9acaa5a181",
      "tree": {
        "sha": "9ab14f648fbe35288905e49c20e3138ddc22769e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ab14f648fbe35288905e49c20e3138ddc22769e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c53587101eaf206a6a6a11a9398d43f139eadcf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZuo9xAAoJEB5K7WKYbNJdPf8H/1jvXsh9xA+3nXKBde3+LWjJ\n/SYwufTbDOBiXs9yekXUu4CUUhGIZmwBcaAMcpYGNBQ2qCVPMGMclBBKvo1azzGQ\nqbu+7Y1sJ78LzuR6tO6LlRRum+aDBx83PKNBB1NYpbBftEZTAEmHyU/BdYBJjutX\nU+rlsgRHxKMuxsUC9jQWv2npBrMDfWEBZQzTCHNIuEV1bRxEcmqXgTPp7EZFDnnm\npXh1eBMWi1lJASJe0dugiCdu38qUb1z0lbn80eENNsazcg7a9NetAJJvCTvHHt2Q\nWxrlXd2SsTsDwJim3i6mvCuE332jzunrrb8SFrmxiH1sFKJr5KJ7KAgyKSGv6pc=\n=O1i+\n-----END PGP SIGNATURE-----",
        "payload": "tree 9ab14f648fbe35288905e49c20e3138ddc22769e\nparent 3751912e8e044958d5ccea847a3f8eab0b026dc1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1505398607 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1505398641 +0200\n\ndoc: Clean out release notes on 0.15 branch\n\nPrepare for 0.15.1\n\nTree-SHA512: d306369ebf2090dd3f74ead6ca6b9f3f2d56bcde6eb6aaab22ac38a5f7ab6cdf3da1142ad6fe266f793f27bbed4247397375f6177f2c7ccc1a57de9acaa5a181\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c53587101eaf206a6a6a11a9398d43f139eadcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c53587101eaf206a6a6a11a9398d43f139eadcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c53587101eaf206a6a6a11a9398d43f139eadcf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3751912e8e044958d5ccea847a3f8eab0b026dc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3751912e8e044958d5ccea847a3f8eab0b026dc1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3751912e8e044958d5ccea847a3f8eab0b026dc1"
      }
    ],
    "stats": {
      "total": 799,
      "additions": 7,
      "deletions": 792
    },
    "files": [
      {
        "sha": "9bf9e63c5c53fbcf18576e5f225ed1876b546a20",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 7,
        "deletions": 792,
        "changes": 799,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c53587101eaf206a6a6a11a9398d43f139eadcf/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c53587101eaf206a6a6a11a9398d43f139eadcf/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=7c53587101eaf206a6a6a11a9398d43f139eadcf",
        "patch": "@@ -1,9 +1,9 @@\n (note: this is a temporary file, to be added-to by anybody, and moved to\n release-notes at release time)\n \n-Bitcoin Core version *0.15.0* is now available from:\n+Bitcoin Core version *0.15.1* is now available from:\n \n-  <https://bitcoin.org/bin/bitcoin-core-0.15.0/>\n+  <https://bitcoin.org/bin/bitcoin-core-0.15.1/>\n \n This is a new major version release, including new features, various bugfixes\n and performance improvements, as well as updated translations.\n@@ -24,9 +24,9 @@ shut down (which might take a few minutes for older versions), then run the\n installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n or `bitcoind`/`bitcoin-qt` (on Linux).\n \n-The first time you run version 0.15.0, your chainstate database will be converted to a\n-new format, which will take anywhere from a few minutes to half an hour,\n-depending on the speed of your machine.\n+The first time you run version 0.15.0 or higher, your chainstate database will\n+be converted to a new format, which will take anywhere from a few minutes to\n+half an hour, depending on the speed of your machine.\n \n The file format of `fee_estimates.dat` changed in version 0.15.0. Hence, a\n downgrade from version 0.15.0 or upgrade to version 0.15.0 will cause all fee\n@@ -60,801 +60,16 @@ frequently tested on them.\n Notable changes\n ===============\n \n-Performance Improvements\n-------------------------\n \n-Version 0.15 contains a number of significant performance improvements, which make\n-Initial Block Download, startup, transaction and block validation much faster:\n \n-- The chainstate database (which is used for tracking UTXOs) has been changed\n-  from a per-transaction model to a per-output model (See [PR 10195](https://github.com/bitcoin/bitcoin/pull/10195)). Advantages of this model\n-  are that it:\n-    - avoids the CPU overhead of deserializing and serializing the unused outputs;\n-    - has more predictable memory usage;\n-    - uses simpler code;\n-    - is adaptable to various future cache flushing strategies.\n-\n-  As a result, validating the blockchain during Initial Block Download (IBD) and reindex\n-  is ~30-40% faster, uses 10-20% less memory, and flushes to disk far less frequently.\n-  The only downside is that the on-disk database is 15% larger. During the conversion from the previous format\n-  a few extra gigabytes may be used.\n-- Earlier versions experienced a spike in memory usage while flushing UTXO updates to disk.\n-  As a result, only half of the available memory was actually used as cache, and the other half was\n-  reserved to accommodate flushing. This is no longer the case (See [PR 10148](https://github.com/bitcoin/bitcoin/pull/10148)), and the entirety of\n-  the available cache (see `-dbcache`) is now actually used as cache. This reduces the flushing\n-  frequency by a factor 2 or more.\n-- In previous versions, signature validation for transactions has been cached when the\n-  transaction is accepted to the mempool. Version 0.15 extends this to cache the entire script\n-  validity (See [PR 10192](https://github.com/bitcoin/bitcoin/pull/10192)). This means that if a transaction in a block has already been accepted to the\n-  mempool, the scriptSig does not need to be re-evaluated. Empirical tests show that\n-  this results in new block validation being 40-50% faster.\n-- LevelDB has been upgraded to version 1.20 (See [PR 10544](https://github.com/bitcoin/bitcoin/pull/10544)). This version contains hardware acceleration for CRC\n-  on architectures supporting SSE 4.2. As a result, synchronization and block validation are now faster.\n-- SHA256 hashing has been optimized for architectures supporting SSE 4 (See [PR 10821](https://github.com/bitcoin/bitcoin/pull/10821)). SHA256 is around\n-  50% faster on supported hardware, which results in around 5% faster IBD and block\n-  validation. In version 0.15, SHA256 hardware optimization is disabled in release builds by\n-  default, but can be enabled by using `--enable-experimental-asm` when building.\n-- Refill of the keypool no longer flushes the wallet between each key which resulted in a ~20x speedup in creating a new wallet. Part of this speedup was used to increase the default keypool to 1000 keys to make recovery more robust. (See [PR 10831](https://github.com/bitcoin/bitcoin/pull/10831)).\n-\n-Fee Estimation Improvements\n----------------------------\n-\n-Fee estimation has been significantly improved in version 0.15, with more accurate fee estimates used by the wallet and a wider range of options for advanced users of the `estimatesmartfee` and `estimaterawfee` RPCs (See [PR 10199](https://github.com/bitcoin/bitcoin/pull/10199)).\n-\n-### Changes to internal logic and wallet behavior\n-\n-- Internally, estimates are now tracked on 3 different time horizons. This allows for longer targets and means estimates adjust more quickly to changes in conditions.\n-- Estimates can now be *conservative* or *economical*. *Conservative* estimates use longer time horizons to produce an estimate which is less susceptible to rapid changes in fee conditions. *Economical* estimates use shorter time horizons and will be more affected by short-term changes in fee conditions. Economical estimates may be considerably lower during periods of low transaction activity (for example over weekends), but may result in transactions being unconfirmed if prevailing fees increase rapidly.\n-- By default, the wallet will use conservative fee estimates to increase the reliability of transactions being confirmed within the desired target. For transactions that are marked as replaceable, the wallet will use an economical estimate by default, since the fee can be 'bumped' if the fee conditions change rapidly (See [PR 10589](https://github.com/bitcoin/bitcoin/pull/10589)).\n-- Estimates can now be made for confirmation targets up to 1008 blocks (one week).\n-- More data on historical fee rates is stored, leading to more precise fee estimates.\n-- Transactions which leave the mempool due to eviction or other non-confirmed reasons are now taken into account by the fee estimation logic, leading to more accurate fee estimates.\n-- The fee estimation logic will make sure enough data has been gathered to return a meaningful estimate. If there is insufficient data, a fallback default fee is used.\n-\n-### Changes to fee estimate RPCs\n-\n-- The `estimatefee` RPC is now deprecated in favor of using only `estimatesmartfee` (which is the implementation used by the GUI)\n-- The `estimatesmartfee` RPC interface has been changed (See [PR 10707](https://github.com/bitcoin/bitcoin/pull/10707)):\n-    - The `nblocks` argument has been renamed to `conf_target` (to be consistent with other RPC methods).\n-    - An `estimate_mode` argument has been added. This argument takes one of the following strings: `CONSERVATIVE`, `ECONOMICAL` or `UNSET` (which defaults to `CONSERVATIVE`).\n-    - The RPC return object now contains an `errors` member, which returns errors encountered during processing.\n-    - If Bitcoin Core has not been running for long enough and has not seen enough blocks or transactions to produce an accurate fee estimation, an error will be returned (previously a value of -1 was used to indicate an error, which could be confused for a feerate).\n-- A new `estimaterawfee` RPC is added to provide raw fee data. External clients can query and use this data in their own fee estimation logic.\n-\n-Multi-wallet support\n---------------------\n-\n-Bitcoin Core now supports loading multiple, separate wallets (See [PR 8694](https://github.com/bitcoin/bitcoin/pull/8694), [PR 10849](https://github.com/bitcoin/bitcoin/pull/10849)). The wallets are completely separated, with individual balances, keys and received transactions.\n-\n-Multi-wallet is enabled by using more than one `-wallet` argument when starting Bitcoin, either on the command line or in the Bitcoin config file.\n-\n-**In Bitcoin-Qt, only the first wallet will be displayed and accessible for creating and signing transactions.** GUI selectable multiple wallets will be supported in a future version. However, even in 0.15 other loaded wallets will remain synchronized to the node's current tip in the background. This can be useful if running a pruned node, since loading a wallet where the most recent sync is beyond the pruned height results in having to download and revalidate the whole blockchain. Continuing to synchronize all wallets in the background avoids this problem.\n-\n-Bitcoin Core 0.15.0 contains the following changes to the RPC interface and `bitcoin-cli` for multi-wallet:\n-\n-* When running Bitcoin Core with a single wallet, there are **no** changes to the RPC interface or `bitcoin-cli`. All RPC calls and `bitcoin-cli` commands continue to work as before.\n-* When running Bitcoin Core with multi-wallet, all *node-level* RPC methods continue to work as before. HTTP RPC requests should be send to the normal `<RPC IP address>:<RPC port>/` endpoint, and `bitcoin-cli` commands should be run as before. A *node-level* RPC method is any method which does not require access to the wallet.\n-* When running Bitcoin Core with multi-wallet, *wallet-level* RPC methods must specify the wallet for which they're intended in every request. HTTP RPC requests should be send to the `<RPC IP address>:<RPC port>/wallet/<wallet name>/` endpoint, for example `127.0.0.1:8332/wallet/wallet1.dat/`. `bitcoin-cli` commands should be run with a `-rpcwallet` option, for example `bitcoin-cli -rpcwallet=wallet1.dat getbalance`.\n-* A new *node-level* `listwallets` RPC method is added to display which wallets are currently loaded. The names returned by this method are the same as those used in the HTTP endpoint and for the `rpcwallet` argument.\n-\n-Note that while multi-wallet is now fully supported, the RPC multi-wallet interface should be considered unstable for version 0.15.0, and there may backwards-incompatible changes in future versions.\n-\n-Replace-by-fee control in the GUI\n----------------------------------\n-\n-Bitcoin Core has supported creating opt-in replace-by-fee (RBF) transactions\n-since version 0.12.0, and since version 0.14.0 has included a `bumpfee` RPC method to\n-replace unconfirmed opt-in RBF transactions with a new transaction that pays\n-a higher fee.\n-\n-In version 0.15, creating an opt-in RBF transaction and replacing the unconfirmed\n-transaction with a higher-fee transaction are both supported in the GUI (See [PR 9592](https://github.com/bitcoin/bitcoin/pull/9592)).\n-\n-Removal of Coin Age Priority\n-----------------------------\n-\n-In previous versions of Bitcoin Core, a portion of each block could be reserved for transactions based on the age and value of UTXOs they spent. This concept (Coin Age Priority) is a policy choice by miners, and there are no consensus rules around the inclusion of Coin Age Priority transactions in blocks. In practice, only a few miners continue to use Coin Age Priority for transaction selection in blocks. Bitcoin Core 0.15 removes all remaining support for Coin Age Priority (See [PR 9602](https://github.com/bitcoin/bitcoin/pull/9602)). This has the following implications:\n-\n-- The concept of *free transactions* has been removed. High Coin Age Priority transactions would previously be allowed to be relayed even if they didn't attach a miner fee. This is no longer possible since there is no concept of Coin Age Priority. The `-limitfreerelay` and `-relaypriority` options which controlled relay of free transactions have therefore been removed.\n-- The `-sendfreetransactions` option has been removed, since almost all miners do not include transactions which do not attach a transaction fee.\n-- The `-blockprioritysize` option has been removed.\n-- The `estimatepriority` and `estimatesmartpriority` RPCs have been removed.\n-- The `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`.\n-- The `prioritisetransaction` RPC no longer takes a `priority_delta` argument, which is replaced by a `dummy` argument for backwards compatibility with clients using positional arguments. The RPC is still used to change the apparent fee-rate of the transaction by using the `fee_delta` argument.\n-- `-minrelaytxfee` can now be set to 0. If `minrelaytxfee` is set, then fees smaller than `minrelaytxfee` (per kB) are rejected from relaying, mining and transaction creation. This defaults to 1000 satoshi/kB.\n-- The `-printpriority` option has been updated to only output the fee rate and hash of transactions included in a block by the mining code.\n-\n-Mempool Persistence Across Restarts\n------------------------------------\n-\n-Version 0.14 introduced mempool persistence across restarts (the mempool is saved to a `mempool.dat` file in the data directory prior to shutdown and restores the mempool when the node is restarted). Version 0.15 allows this feature to be switched on or off using the `-persistmempool` command-line option (See [PR 9966](https://github.com/bitcoin/bitcoin/pull/9966)). By default, the option is set to true, and the mempool is saved on shutdown and reloaded on startup. If set to false, the `mempool.dat` file will not be loaded on startup or saved on shutdown.\n-\n-New RPC methods\n----------------\n-\n-Version 0.15 introduces several new RPC methods:\n-\n-- `abortrescan` stops current wallet rescan, e.g. when triggered by an `importprivkey` call (See [PR 10208](https://github.com/bitcoin/bitcoin/pull/10208)).\n-- `combinerawtransaction` accepts a JSON array of raw transactions and combines them into a single raw transaction (See [PR 10571](https://github.com/bitcoin/bitcoin/pull/10571)).\n-- `estimaterawfee` returns raw fee data so that customized logic can be implemented to analyze the data and calculate estimates. See [Fee Estimation Improvements](#fee-estimation-improvements) for full details on changes to the fee estimation logic and interface.\n-- `getchaintxstats` returns statistics about the total number and rate of transactions\n-  in the chain (See [PR 9733](https://github.com/bitcoin/bitcoin/pull/9733)).\n-- `listwallets` lists wallets which are currently loaded. See the *Multi-wallet* section\n-  of these release notes for full details (See [Multi-wallet support](#multi-wallet-support)).\n-- `uptime` returns the total runtime of the `bitcoind` server since its last start (See [PR 10400](https://github.com/bitcoin/bitcoin/pull/10400)).\n-\n-Low-level RPC changes\n----------------------\n-\n-- When using Bitcoin Core in multi-wallet mode, RPC requests for wallet methods must specify\n-  the wallet that they're intended for. See [Multi-wallet support](#multi-wallet-support) for full details.\n-\n-- The new database model no longer stores information about transaction\n-  versions of unspent outputs (See [Performance improvements](#performance-improvements)). This means that:\n-  - The `gettxout` RPC no longer has a `version` field in the response.\n-  - The `gettxoutsetinfo` RPC reports `hash_serialized_2` instead of `hash_serialized`,\n-    which does not commit to the transaction versions of unspent outputs, but does\n-    commit to the height and coinbase information.\n-  - The `getutxos` REST path no longer reports the `txvers` field in JSON format,\n-    and always reports 0 for transaction versions in the binary format\n-\n-- The `estimatefee` RPC is deprecated. Clients should switch to using the `estimatesmartfee` RPC, which returns better fee estimates. See [Fee Estimation Improvements](#fee-estimation-improvements) for full details on changes to the fee estimation logic and interface.\n-\n-- The `gettxoutsetinfo` response now contains `disk_size` and `bogosize` instead of\n-  `bytes_serialized`. The first is a more accurate estimate of actual disk usage, but\n-  is not deterministic. The second is unrelated to disk usage, but is a\n-  database-independent metric of UTXO set size: it counts every UTXO entry as 50 + the\n-  length of its scriptPubKey (See [PR 10426](https://github.com/bitcoin/bitcoin/pull/10426)).\n-\n-- `signrawtransaction` can no longer be used to combine multiple transactions into a single transaction. Instead, use the new `combinerawtransaction` RPC (See [PR 10571](https://github.com/bitcoin/bitcoin/pull/10571)).\n-\n-- `fundrawtransaction` no longer accepts a `reserveChangeKey` option. This option used to allow RPC users to fund a raw transaction using an key from the keypool for the change address without removing it from the available keys in the keypool. The key could then be re-used for a `getnewaddress` call, which could potentially result in confusing or dangerous behaviour (See [PR 10784](https://github.com/bitcoin/bitcoin/pull/10784)).\n-\n-- `estimatepriority` and `estimatesmartpriority` have been removed. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n-\n-- The `listunspent` RPC now takes a `query_options` argument (see [PR 8952](https://github.com/bitcoin/bitcoin/pull/8952)), which is a JSON object\n-  containing one or more of the following members:\n-  - `minimumAmount` - a number specifying the minimum value of each UTXO\n-  - `maximumAmount` - a number specifying the maximum value of each UTXO\n-  - `maximumCount` - a number specifying the minimum number of UTXOs\n-  - `minimumSumAmount` - a number specifying the minimum sum value of all UTXOs\n-\n-- The `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n-\n-- The `dumpwallet` RPC now returns the full absolute path to the dumped wallet. It\n-  used to return no value, even if successful (See [PR 9740](https://github.com/bitcoin/bitcoin/pull/9740)).\n-\n-- In the `getpeerinfo` RPC, the return object for each peer now returns an `addrbind` member, which contains the ip address and port of the connection to the peer. This is in addition to the `addrlocal` member which contains the ip address and port of the local node as reported by the peer (See [PR 10478](https://github.com/bitcoin/bitcoin/pull/10478)).\n-\n-- The `disconnectnode` RPC can now disconnect a node specified by node ID (as well as by IP address/port). To disconnect a node based on node ID, call the RPC with the new `nodeid` argument (See [PR 10143](https://github.com/bitcoin/bitcoin/pull/10143)).\n-\n-- The second argument in `prioritisetransaction` has been renamed from `priority_delta` to `dummy` since Bitcoin Core no longer has a concept of coin age priority. The `dummy` argument has no functional effect, but is retained for positional argument compatibility. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n-\n-- The `resendwallettransactions` RPC throws an error if the `-walletbroadcast` option is set to false (See [PR 10995](https://github.com/bitcoin/bitcoin/pull/10995)).\n-\n-- The second argument in the `submitblock` RPC argument has been renamed from `parameters` to `dummy`. This argument never had any effect, and the renaming is simply to communicate this fact to the user (See [PR 10191](https://github.com/bitcoin/bitcoin/pull/10191))\n-  (Clients should, however, use positional arguments for `submitblock` in order to be compatible with BIP 22.)\n-\n-- The `verbose` argument of `getblock` has been renamed to `verbosity` and now takes an integer from 0 to 2. Verbose level 0 is equivalent to `verbose=false`. Verbose level 1 is equivalent to `verbose=true`. Verbose level 2 will give the full transaction details of each transaction in the output as given by `getrawtransaction`. The old behavior of using the `verbose` named argument and a boolean value is still maintained for compatibility.\n-\n-- Error codes have been updated to be more accurate for the following error cases (See [PR 9853](https://github.com/bitcoin/bitcoin/pull/9853)):\n-  - `getblock` now returns RPC_MISC_ERROR if the block can't be found on disk (for\n-  example if the block has been pruned). Previously returned RPC_INTERNAL_ERROR.\n-  - `pruneblockchain` now returns RPC_MISC_ERROR if the blocks cannot be pruned\n-  because the node is not in pruned mode. Previously returned RPC_METHOD_NOT_FOUND.\n-  - `pruneblockchain` now returns RPC_INVALID_PARAMETER if the blocks cannot be pruned\n-  because the supplied timestamp is too late. Previously returned RPC_INTERNAL_ERROR.\n-  - `pruneblockchain` now returns RPC_MISC_ERROR if the blocks cannot be pruned\n-  because the blockchain is too short. Previously returned RPC_INTERNAL_ERROR.\n-  - `setban` now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the supplied IP address\n-  or subnet is invalid. Previously returned RPC_CLIENT_NODE_ALREADY_ADDED.\n-  - `setban` now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the user tries to unban\n-  a node that has not previously been banned. Previously returned RPC_MISC_ERROR.\n-  - `removeprunedfunds` now returns RPC_WALLET_ERROR if `bitcoind` is unable to remove\n-  the transaction. Previously returned RPC_INTERNAL_ERROR.\n-  - `removeprunedfunds` now returns RPC_INVALID_PARAMETER if the transaction does not\n-  exist in the wallet. Previously returned RPC_INTERNAL_ERROR.\n-  - `fundrawtransaction` now returns RPC_INVALID_ADDRESS_OR_KEY if an invalid change\n-  address is provided. Previously returned RPC_INVALID_PARAMETER.\n-  - `fundrawtransaction` now returns RPC_WALLET_ERROR if `bitcoind` is unable to create\n-  the transaction. The error message provides further details. Previously returned\n-  RPC_INTERNAL_ERROR.\n-  - `bumpfee` now returns RPC_INVALID_PARAMETER if the provided transaction has\n-  descendants in the wallet. Previously returned RPC_MISC_ERROR.\n-  - `bumpfee` now returns RPC_INVALID_PARAMETER if the provided transaction has\n-  descendants in the mempool. Previously returned RPC_MISC_ERROR.\n-  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has\n-  has been mined or conflicts with a mined transaction. Previously returned\n-  RPC_INVALID_ADDRESS_OR_KEY.\n-  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction is not\n-  BIP 125 replaceable. Previously returned RPC_INVALID_ADDRESS_OR_KEY.\n-  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has already\n-  been bumped by a different transaction. Previously returned RPC_INVALID_REQUEST.\n-  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction contains\n-  inputs which don't belong to this wallet. Previously returned RPC_INVALID_ADDRESS_OR_KEY.\n-  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has multiple change\n-  outputs. Previously returned RPC_MISC_ERROR.\n-  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has no change\n-  output. Previously returned RPC_MISC_ERROR.\n-  - `bumpfee` now returns RPC_WALLET_ERROR if the fee is too high. Previously returned\n-  RPC_MISC_ERROR.\n-  - `bumpfee` now returns RPC_WALLET_ERROR if the fee is too low. Previously returned\n-  RPC_MISC_ERROR.\n-  - `bumpfee` now returns RPC_WALLET_ERROR if the change output is too small to bump the\n-  fee. Previously returned RPC_MISC_ERROR.\n-\n-0.15.0 Change log\n+0.15.1 Change log\n =================\n \n-### RPC and other APIs\n-- #9485 `61a640e` ZMQ example using python3 and asyncio (mcelrath)\n-- #9894 `0496e15` remove 'label' filter for rpc command help (instagibbs)\n-- #9853 `02bd6e9` Fix error codes from various RPCs (jnewbery)\n-- #9842 `598ef9c` Fix RPC failure testing (continuation of #9707) (jnewbery)\n-- #10038 `d34995a` Add mallocinfo mode to `getmemoryinfo` RPC (laanwj)\n-- #9500 `3568b30` [Qt][RPC] Autocomplete commands for 'help' command in debug console (achow101)\n-- #10056 `e6156a0` [zmq] Call va_end() on va_start()ed args (kallewoof)\n-- #10086 `7438cea` Trivial: move rpcserialversion into RPC option group (jlopp)\n-- #10150 `350b224` [rpc] Add logging rpc (jnewbery)\n-- #10208 `393160c` [wallet] Rescan abortability (kallewoof)\n-- #10143 `a987def` [net] Allow disconnectnode RPC to be called with node id (jnewbery)\n-- #10281 `0e8499c` doc: Add RPC interface guidelines (laanwj)\n-- #9733 `d4732f3` Add getchaintxstats RPC (sipa)\n-- #10310 `f4b15e2` [doc] Add hint about getmempoolentry to getrawmempool help (kallewoof)\n-- #8704 `96c850c` [RPC] Transaction details in getblock (achow101)\n-- #8952 `9390845` Add query options to listunspent RPC call (pedrobranco)\n-- #10413 `08ac35a` Fix docs (there's no rpc command setpaytxfee) (RHavar)\n-- #8384 `e317c0d` Add witness data output to TxInError messages (instagibbs)\n-- #9571 `4677151` RPC: getblockchaininfo returns BIP signaling statistics  (pinheadmz)\n-- #10450 `ef2d062` Fix bumpfee rpc \"errors\" return value (ryanofsky)\n-- #10475 `39039b1` [RPC] getmempoolinfo mempoolminfee is a BTC/KB feerate (instagibbs)\n-- #10478 `296928e` rpc: Add listen address to incoming connections in `getpeerinfo` (laanwj)\n-- #10403 `08d0390` Fix importmulti failure to return rescan errors (ryanofsky)\n-- #9740 `9fec4da` Add friendly output to dumpwallet (aideca)\n-- #10426 `16f6c98` Replace bytes_serialized with bogosize (sipa)\n-- #10252 `980deaf` RPC/Mining: Restore API compatibility for prioritisetransaction (luke-jr)\n-- #9672 `46311e7` Opt-into-RBF for RPC & bitcoin-tx (luke-jr)\n-- #10481 `9c248e3` Decodehextx scripts sanity check  (achow101)\n-- #10488 `fa1f106` Note that the prioritizetransaction dummy value is deprecated, and has no meaning (TheBlueMatt)\n-- #9738 `c94b89e` gettxoutproof() should return consistent result (jnewbery)\n-- #10191 `00350bd` [trivial] Rename unused RPC arguments 'dummy' (jnewbery)\n-- #10627 `b62b4c8` fixed listunspent rpc convert parameter (tnakagawa)\n-- #10412 `bef02fb` Improve wallet rescan API (ryanofsky)\n-- #10400 `1680ee0` [RPC] Add an uptime command that displays the amount of time (in seconds) bitcoind has been running (rvelhote)\n-- #10683 `d81bec7` rpc: Move the `generate` RPC call to rpcwallet (laanwj)\n-- #10710 `30bc0f6` REST/RPC example update (Mirobit)\n-- #10747 `9edda0c` [rpc] fix verbose argument for getblock in bitcoin-cli (jnewbery)\n-- #10589 `104f5f2` More economical fee estimates for RBF and RPC options to control (morcos)\n-- #10543 `b27b004` Change API to estimaterawfee (morcos)\n-- #10807 `afd2fca` getbalance example covers at least 6 confirms (instagibbs)\n-- #10707 `75b5643` Better API for estimatesmartfee RPC  (morcos)\n-- #10784 `9e8d6a3` Do not allow users to get keys from keypool without reserving them (TheBlueMatt)\n-- #10857 `d445a2c` [RPC] Add a deprecation warning to getinfo's output (achow101)\n-- #10571 `adf170d` [RPC]Move transaction combining from signrawtransaction to new RPC (achow101)\n-- #10783 `041dad9` [RPC] Various rpc argument fixes (instagibbs)\n-- #9622 `6ef3c7e` [rpc] listsinceblock should include lost transactions when parameter is a reorg'd block (kallewoof)\n-- #10799 `8537187` Prevent user from specifying conflicting parameters to fundrawtx (TheBlueMatt)\n-- #10931 `0b11a07` Fix misleading \"Method not found\" multiwallet errors (ryanofsky)\n-- #10788 `f66c596` [RPC] Fix addwitnessaddress by replacing ismine with producesignature (achow101)\n-- #10999 `627c3c0` Fix amounts formatting in `decoderawtransaction` (laanwj)\n-- #11002 `4268426` [wallet] return correct error code from resendwallettransaction (jnewbery)\n-- #11029 `96a63a3` [RPC] trivial: gettxout no longer shows version of tx (FelixWeis)\n-- #11083 `6c2b008` Fix combinerawtransaction RPC help result section (jonasnick)\n-- #11027 `07164bb` [RPC] Only return hex field once in getrawtransaction (achow101)\n-- #10698 `5af6572` Be consistent in calling transactions \"replaceable\" for Opt-In RBF (TheBlueMatt)\n-\n-### Block and transaction handling\n-- #9801 `a8c5751` Removed redundant parameter from mempool.PrioritiseTransaction (gubatron)\n-- #9819 `1efc99c` Remove harmless read of unusued priority estimates (morcos)\n-- #9822 `b7547fa` Remove block file location upgrade code (benma)\n-- #9602 `30ff3a2` Remove coin age priority and free transactions - implementation (morcos)\n-- #9548 `47510ad` Remove min reasonable fee (morcos)\n-- #10249 `c73af54` Switch CCoinsMap from boost to std unordered_map (sipa)\n-- #9966 `2a183de` Control mempool persistence using a command line parameter (jnewbery)\n-- #10199 `318ea50` Better fee estimates (morcos)\n-- #10196 `bee3529` Bugfix: PrioritiseTransaction updates the mempool tx counter (sdaftuar)\n-- #10195 `1088b02` Switch chainstate db and cache to per-txout model (sipa)\n-- #10284 `c2ab38b` Always log debug information for fee calculation in CreateTransaction (morcos)\n-- #10503 `efbcf2b` Use REJECT_DUPLICATE for already known and conflicted txn (sipa)\n-- #10537 `b3eb0d6` Few Minor per-utxo assert-semantics re-adds and tweak (TheBlueMatt)\n-- #10626 `8c841a3` doc: Remove outdated minrelaytxfee comment (MarcoFalke)\n-- #10559 `234ffc6` Change semantics of HaveCoinInCache to match HaveCoin (morcos)\n-- #10581 `7878353` Simplify return values of GetCoin/HaveCoin(InCache) (sipa)\n-- #10684 `a381f6a` Remove no longer used mempool.exists(outpoint) (morcos)\n-- #10148 `d4e551a` Use non-atomic flushing with block replay (sipa)\n-- #10685 `30c2130` Clarify CCoinsViewMemPool documentation (TheBlueMatt)\n-- #10558 `90a002e` Address nits from per-utxo change (morcos)\n-- #10706 `6859ad2` Improve wallet fee logic and fix GUI bugs (morcos)\n-- #10526 `754aa02` Force on-the-fly compaction during pertxout upgrade (sipa)\n-- #10985 `d896d5c` Add undocumented -forcecompactdb to force LevelDB compactions (sipa)\n-- #10292 `e4bbd3d` Improved efficiency in COutPoint constructors (mm-s)\n-- #10290 `8d6d43e` Add -stopatheight for benchmarking (sipa)\n-\n-### P2P protocol and network code\n-- #9726 `7639d38` netbase: Do not print an error on connection timeouts through proxy (laanwj)\n-- #9805 `5b583ef` Add seed.btc.petertodd.org to mainnet DNS seeds (petertodd)\n-- #9861 `22f609f` Trivial: Debug log ambiguity fix for peer addrs (keystrike)\n-- #9774 `90cb2a2` Enable host lookups for -proxy and -onion parameters (jmcorgan)\n-- #9558 `7b585cf` Clarify assumptions made about when BlockCheck is called (TheBlueMatt)\n-- #10135 `e19586a` [p2p] Send the correct error code in reject messages (jnewbery)\n-- #9665 `eab00d9` Use cached [compact] blocks to respond to getdata messages (TheBlueMatt)\n-- #10215 `a077a90` Check interruptNet during dnsseed lookups (TheBlueMatt)\n-- #10234 `faf2dea` [net] listbanned RPC and QT should show correct banned subnets (jnewbery)\n-- #10134 `314ebdf` [qa] Fixes segwit block relay test after inv-direct-fetch was disabled (sdaftuar)\n-- #10351 `3f57c55` removed unused code in INV message (Greg-Griffith)\n-- #10061 `ae78609` [net] Added SetSocketNoDelay() utility function (tjps)\n-- #10408 `28c6e8d` Net: Improvements to Tor control port parser (str4d)\n-- #10460 `5c63d66` Broadcast address every day, not 9 hours (sipa)\n-- #10471 `400fdd0` Denote functions CNode::GetRecvVersion() and CNode::GetRefCount()  as const (pavlosantoniou)\n-- #10345 `67700b3` [P2P] Timeout for headers sync (sdaftuar)\n-- #10564 `8d9f45e` Return early in IsBanned (gmaxwell)\n-- #10587 `de8db47` Net: Fix resource leak in ReadBinaryFile(...) (practicalswift)\n-- #9549 `b33ca14` [net] Avoid possibility of NULL pointer dereference in MarkBlockAsInFlight(...) (practicalswift)\n-- #10446 `2772dc9` net: avoid extra dns query per seed (theuni)\n-- #10824 `9dd6a2b` Avoid unnecessary work in SetNetworkActive (promag)\n-- #10948 `df3a6f4` p2p: Hardcoded seeds update pre-0.15 branch (laanwj)\n-- #10977 `02f4c4a` [net] Fix use of uninitialized value in getnetworkinfo(const JSONRPCRequest&) (practicalswift)\n-- #10982 `c8b62c7` Disconnect network service bits 6 and 8 until Aug 1, 2018 (TheBlueMatt)\n-- #11012 `0e5cff6` Make sure to clean up mapBlockSource if we've already seen the block (theuni)\n-\n-### Validation\n-- #9725 `67023e9` CValidationInterface Cleanups (TheBlueMatt)\n-- #10178 `2584925` Remove CValidationInterface::UpdatedTransaction (TheBlueMatt)\n-- #10201 `a6548a4` pass Consensus::Params& to functions in validation.cpp and make them static (mariodian)\n-- #10297 `431a548` Simplify DisconnectBlock arguments/return value (sipa)\n-- #10464 `f94b7d5` Introduce static DoWarning (simplify UpdateTip) (jtimon)\n-- #10569 `2e7d8f8` Fix stopatheight (achow101)\n-- #10192 `2935b46` Cache full script execution results in addition to signatures (TheBlueMatt)\n-- #10179 `21ed30a` Give CValidationInterface Support for calling notifications on the CScheduler Thread (TheBlueMatt)\n-- #10557 `66270a4` Make check to distinguish between orphan txs and old txs more efficient (morcos)\n-- #10775 `7c2400c` nCheckDepth chain height fix (romanornr)\n-- #10821 `16240f4` Add SSE4 optimized SHA256 (sipa)\n-- #10854 `04d395e` Avoid using sizes on non-fixed-width types to derive protocol constants (gmaxwell)\n-- #10945 `2a50b11` Update defaultAssumeValid according to release-process.md (gmaxwell)\n-- #10986 `2361208` Update chain transaction statistics (sipa)\n-- #11028 `6bdf4b3` Avoid masking of difficulty adjustment errors by checkpoints (sipa)\n-- #9533 `cb598cf` Allow non-power-of-2 signature cache sizes (sipa)\n-- #9208 `acd9957` Improve DisconnectTip performance (sdaftuar)\n-- #10618 `f90603a` Remove confusing MAX_BLOCK_BASE_SIZE (gmaxwell)\n-- #10758 `bd92424` Fix some chainstate-init-order bugs (TheBlueMatt)\n-- #10550 `b7296bc` Don't return stale data from CCoinsViewCache::Cursor() (ryanofsky)\n-- #10998 `2507fd5` Fix upgrade cancel warnings (TheBlueMatt)\n-- #9868 `cbdb473` Abstract out the command line options for block assembly (sipa)\n-\n-### Build system\n-- #9727 `5f0556d` Remove fallbacks for boost_filesystem < v3 (laanwj)\n-- #9788 `50a2265` gitian: bump descriptors for master (theuni)\n-- #9794 `7ca2f54` Minor update to qrencode package builder (mitchellcash)\n-- #9514 `2cc0df1` release: Windows signing script (theuni)\n-- #9921 `8b789d8` build: Probe MSG_DONTWAIT in the same way as MSG_NOSIGNAL (laanwj)\n-- #10011 `32d1b34` build: Fix typo s/HAVE_DONTWAIT/HAVE_MSG_DONTWAIT (laanwj)\n-- #9946 `90dd9e6` Fix build errors if spaces in path or parent directory (pinheadmz)\n-- #10136 `81da4c7` build: Disable Wshadow warning (laanwj)\n-- #10166 `64962ae` Ignore Doxyfile generated from Doxyfile.in template (paveljanik)\n-- #10239 `0416ea9` Make Boost use std::atomic internally (sipa)\n-- #10228 `27faa6c` build: regenerate bitcoin-config.h as necessary (theuni)\n-- #10273 `8979f45` [scripts] Minor improvements to `macdeployqtplus` script (chrisgavin)\n-- #10325 `a26280b` 0.15.0 Depends Updates (fanquake)\n-- #10328 `79aeff6` Update contrib/debian to latest Ubuntu PPA upload (TheBlueMatt)\n-- #7522 `d25449f` Bugfix: Only use git for build info if the repository is actually the right one (luke-jr)\n-- #10489 `e654d61` build: silence gcc7's implicit fallthrough warning (theuni)\n-- #10549 `ad1a13e` Avoid printing generic and duplicated \"checking for QT\" during ./configure (drizzt)\n-- #10628 `8465b68` [depends] expat 2.2.1 (fanquake)\n-- #10806 `db825d2` build: verify that the assembler can handle crc32 functions (theuni)\n-- #10766 `b4d03be` Building Environment: Set ARFLAGS to cr (ReneNyffenegger)\n-- #10803 `91edda8` Explicitly search for bdb5.3 (pstratem)\n-- #10855 `81560b0` random: only use getentropy on openbsd (theuni)\n-- #10508 `1caafa6` Run Qt wallet tests on travis (ryanofsky)\n-- #10851 `e222618` depends: fix fontconfig with newer glibc (theuni)\n-- #10971 `88b1e4b` build: fix missing sse42 in depends builds (theuni)\n-- #11097 `129b03f` gitian: quick hack to fix version string in releases (theuni)\n-- #10039 `919aaf6` Fix compile errors with Qt 5.3.2 and Boost 1.55.0 (ryanofsky)\n-- #10168 `7032021` Fix build warning from #error text (jnewbery)\n-- #10301 `318392c` Check if sys/random.h is required for getentropy (jameshilliard)\n-\n-### GUI\n-- #9724 `1a9fd5c` Qt/Intro: Add explanation of IBD process (luke-jr)\n-- #9834 `b00ba62` qt: clean up initialize/shutdown signals (benma)\n-- #9481 `ce01e62` [Qt] Show more significant warning if we fall back to the default fee (jonasschnelli)\n-- #9974 `b9f930b` Add basic Qt wallet test (ryanofsky)\n-- #9690 `a387d3a` Change 'Clear' button string to 'Reset' (da2x)\n-- #9592 `9c7b7cf` [Qt] Add checkbox in the GUI to opt-in to RBF when creating a transaction (ryanofsky)\n-- #10098 `2b477e6` Make qt wallet test compatible with qt4 (ryanofsky)\n-- #9890 `1fa4ae6` Add a button to open the config file in a text editor (ericshawlinux)\n-- #10156 `51833a1` Fix for issues with startup and multiple monitors on windows (AllanDoensen)\n-- #10177 `de01da7` Changed \"Send\" button default status from true to false (KibbledJiveElkZoo)\n-- #10221 `e96486c` Stop treating coinbase outputs differently in GUI: show them at 1conf (TheBlueMatt)\n-- #10231 `987a6c0` [Qt] Reduce a significant cs_main lock freeze (jonasschnelli)\n-- #10242 `f6f3b58` [qt] Don't call method on null WalletModel object (ryanofsky)\n-- #10093 `a3e756b` [Qt] Don't add arguments of sensitive command to console window (jonasschnelli)\n-- #10362 `95546c8` [GUI] Add OSX keystroke to RPCConsole info (spencerlievens)\n-- #9697 `962cd3f` [Qt] simple fee bumper with user verification (jonasschnelli)\n-- #10390 `e477516` [wallet] remove minimum total fee option (instagibbs)\n-- #10420 `4314544` Add Qt tests for wallet spends & bumpfee (ryanofsky)\n-- #10454 `c1c9a95` Fix broken q4 test build (ryanofsky)\n-- #10449 `64beb13` Overhaul Qt fee bumper (jonasschnelli)\n-- #10582 `7c72fb9` Pass in smart fee slider value to coin control dialog (morcos)\n-- #10673 `4c72cc3` [qt] Avoid potential null pointer dereference in TransactionView::exportClicked() (practicalswift)\n-- #10769 `8fdd23a` [Qt] replace fee slider with a Dropdown, extend conf. targets (jonasschnelli)\n-- #10870 `412b466` [Qt] Use wallet 0 in rpc console if running with multiple wallets (jonasschnelli)\n-- #10988 `a9dd111` qt: Increase BLOCK_CHAIN_SIZE constants (laanwj)\n-- #10644 `e292140` Slightly overhaul NSI pixmaps (jonasschnelli)\n-- #10660 `0c3542e` Allow to cancel the txdb upgrade via splashscreen keypress 'q' (jonasschnelli)\n-\n-### Wallet\n-- #9359 `f7ec7cf` Add test for CWalletTx::GetImmatureCredit() returning stale values (ryanofsky)\n-- #9576 `56ab672` [wallet] Remove redundant initialization (practicalswift)\n-- #9333 `fa625b0` Document CWalletTx::mapValue entries and remove erase of nonexistent \"version\" entry (ryanofsky)\n-- #9906 `72fb515` Disallow copy constructor CReserveKeys (instagibbs)\n-- #9369 `3178b2c` Factor out CWallet::nTimeSmart computation into a method (ryanofsky)\n-- #9830 `afcd7c0` Add safe flag to listunspent result (NicolasDorier)\n-- #9993 `c49355c` Initialize nRelockTime (pstratem)\n-- #9818 `3d857f3` Save watch only key timestamps when reimporting keys (ryanofsky)\n-- #9294 `f34cdcb` Use internal HD chain for change outputs (hd split) (jonasschnelli)\n-- #10164 `e183ea2` Wallet: reduce excess logic InMempool() (kewde)\n-- #10186 `c9ff4f8` Remove SYNC_TRANSACTION_NOT_IN_BLOCK magic number (jnewbery)\n-- #10226 `64c45aa` wallet: Use boost to more portably ensure -wallet specifies only a filename (luke-jr)\n-- #9827 `c91ca0a` Improve ScanForWalletTransactions return value (ryanofsky)\n-- #9951 `fa1ac28` Wallet database handling abstractions/simplifications (laanwj)\n-- #10265 `c29a0d4` [wallet] [moveonly] Check non-null pindex before potentially referencing (kallewoof)\n-- #10283 `a550f6e` Cleanup: reduce to one GetMinimumFee call signature (morcos)\n-- #10294 `e2b99b1` [Wallet] unset change position when there is no change (instagibbs)\n-- #10115 `d3dce0e` Avoid reading the old hd master key during wallet encryption (TheBlueMatt)\n-- #10341 `18c9deb` rpc/wallet: Workaround older UniValue which returns a std::string temporary for get_str (luke-jr)\n-- #10308 `94e5227` [wallet] Securely erase potentially sensitive keys/values (tjps)\n-- #10257 `ea1fd43` [test] Add test for getmemoryinfo (jimmysong)\n-- #10295 `ce8176d` [qt] Move some WalletModel functions into CWallet (ryanofsky)\n-- #10506 `7cc2c67` Fix bumpfee test after #10449 (ryanofsky)\n-- #10500 `098b01d` Avoid CWalletTx copies in GetAddressBalances and GetAddressGroupings (ryanofsky)\n-- #10455 `0747d33` Simplify feebumper minimum fee code slightly (ryanofsky)\n-- #10522 `2805d60` [wallet] Remove unused variables (practicalswift)\n-- #8694 `177433a` Basic multiwallet support (luke-jr)\n-- #10598 `7a74f88` Supress struct/class mismatch warnings introduced in #10284 (paveljanik)\n-- #9343 `209eef6` Don't create change at dust limit (morcos)\n-- #10744 `ed88e31` Use method name via __func__ macro (darksh1ne)\n-- #10712 `e8b9523` Add change output if necessary to reduce excess fee (morcos)\n-- #10816 `1c011ff` Properly forbid -salvagewallet and -zapwallettxes for multi wallet (morcos)\n-- #10235 `5cfdda2` Track keypool entries as internal vs external in memory (TheBlueMatt)\n-- #10330 `bf0a08b` [wallet] fix zapwallettxes interaction with persistent mempool (jnewbery)\n-- #10831 `0b01935` Batch flushing operations to the walletdb during top up and increase keypool size (gmaxwell)\n-- #10795 `7b6e8bc` No longer ever reuse keypool indexes (TheBlueMatt)\n-- #10849 `bde4f93` Multiwallet: simplest endpoint support (jonasschnelli)\n-- #10817 `9022aa3` Redefine Dust and add a discard_rate (morcos)\n-- #10883 `bf3b742` Rename -usewallet to -rpcwallet (morcos)\n-- #10604 `420238d` [wallet] [tests] Add listwallets RPC, include wallet name in `getwalletinfo` and add multiwallet test (jnewbery)\n-- #10885 `70888a3` Reject invalid wallets (promag)\n-- #10949 `af56397` Clarify help message for -discardfee (morcos)\n-- #10942 `2e857bb` Eliminate fee overpaying edge case when subtracting fee from recipients (morcos)\n-- #10995 `fa64636` Fix resendwallettransactions assert failure if -walletbroadcast=0 (TheBlueMatt)\n-- #11022 `653a46d` Basic keypool topup (jnewbery)\n-- #11081 `9fe1f6b` Add length check for CExtKey deserialization (jonasschnelli, guidovranken)\n-- #11044 `4ef8374` [wallet] Keypool topup cleanups (jnewbery)\n-- #11145 `e51bb71` Fix rounding bug in calculation of minimum change (morcos)\n-- #9605 `779f2f9` Use CScheduler for wallet flushing, remove ThreadFlushWalletDB (TheBlueMatt)\n-- #10108 `4e3efd4` ApproximateBestSubset should take inputs by reference, not value (RHavar)\n-\n-### Tests and QA\n-- #9744 `8efd1c8` Remove unused module from rpc-tests (34ro)\n-- #9657 `7ff4a53` Improve rpc-tests.py (jnewbery)\n-- #9766 `7146d96` Add --exclude option to rpc-tests.py (jnewbery)\n-- #9577 `d6064a8` Fix docstrings in qa tests (jnewbery)\n-- #9823 `a13a417` qa: Set correct path for binaries in rpc tests (MarcoFalke)\n-- #9847 `6206252` Extra test vector for BIP32 (sipa)\n-- #9350 `88c2ae3` [Trivial] Adding label for amount inside of tx_valid/tx_invalid.json (Christewart)\n-- #9888 `36afd4d` travis: Verify commits only for one target (MarcoFalke)\n-- #9904 `58861ad` test: Fail if InitBlockIndex fails (laanwj)\n-- #9828 `67c5cc1` Avoid -Wshadow warnings in wallet_tests (ryanofsky)\n-- #9832 `48c3429` [qa] assert_start_raises_init_error (NicolasDorier)\n-- #9739 `9d5fcbf` Fix BIP68 activation test (jnewbery)\n-- #9547 `d32581c` bench: Assert that division by zero is unreachable (practicalswift)\n-- #9843 `c78adbf` Fix segwit getblocktemplate test (jnewbery)\n-- #9929 `d5ce14e` tests: Delete unused function _rpchost_to_args (laanwj)\n-- #9555 `19be26a` [test] Avoid reading a potentially uninitialized variable in tx_invalid-test (transaction_tests.cpp) (practicalswift)\n-- #9945 `ac23a7c` Improve logging in bctest.py if there is a formatting mismatch (jnewbery)\n-- #9768 `8910b47` [qa] Add logging to test_framework.py (jnewbery)\n-- #9972 `21833f9` Fix extended rpc tests broken by #9768 (jnewbery)\n-- #9977 `857d1e1` QA: getblocktemplate_longpoll.py should always use >0 fee tx (sdaftuar)\n-- #9970 `3cc13ea` Improve readability of segwit.py, smartfees.py (sdaftuar)\n-- #9497 `2c781fb` CCheckQueue Unit Tests (JeremyRubin)\n-- #10024 `9225de2` [trivial] Use log.info() instead of print() in remaining functional test cases (jnewbery)\n-- #9956 `3192e52` Reorganise qa directory (jnewbery)\n-- #10017 `02d64bd` combine_logs.py - aggregates log files from multiple bitcoinds during functional tests (jnewbery)\n-- #10047 `dfef6b6` [tests] Remove unused variables and imports (practicalswift)\n-- #9701 `a230b05` Make bumpfee tests less fragile (ryanofsky)\n-- #10053 `ca20923` [test] Allow functional test cases to be skipped (jnewbery)\n-- #10052 `a0b1e57` [test] Run extended tests once daily in Travis (jnewbery)\n-- #10069 `1118493` [QA] Fix typo in fundrawtransaction test (NicolasDorier)\n-- #10083 `c044f03` [QA] Renaming rawTx into rawtx (NicolasDorier)\n-- #10073 `b1a4f27` Actually run assumevalid.py (jnewbery)\n-- #9780 `c412fd8` Suppress noisy output from qa tests in Travis (jnewbery)\n-- #10096 `79af9fb` Check that all test scripts in test/functional are being run (jnewbery)\n-- #10076 `5b029aa` [qa] combine_logs: Use ordered list for logfiles (MarcoFalke)\n-- #10107 `f2734c2` Remove unused variable. Remove accidental trailing semicolons in Python code (practicalswift)\n-- #10109 `8ac8041` Remove SingleNodeConnCB (jnewbery)\n-- #10114 `edc62c9` [tests] sync_with_ping should assert that ping hasn't timed out (jnewbery)\n-- #10128 `427d2fd` Speed Up CuckooCache tests (JeremyRubin)\n-- #10072 `12af74b` Remove sources of unreliablility in extended functional tests (jnewbery)\n-- #10077 `ebfd653` [qa] Add setnetworkactive smoke test (MarcoFalke)\n-- #10152 `080d7c7` [trivial] remove unused line in Travis config (jnewbery)\n-- #10159 `df1ca9e` [tests] color test results and sort alphabetically (jnewbery)\n-- #10124 `88799ea` [test] Suppress test logging spam (jnewbery)\n-- #10142 `ed09dd3` Run bitcoin_test-qt under minimal QPA platform (ryanofsky)\n-- #9949 `a27dbc5` [bench] Avoid function call arguments which are pointers to uninitialized values (practicalswift)\n-- #10187 `b44adf9` tests: Fix test_runner return value in case of skipped test (laanwj)\n-- #10197 `d86bb07` [tests] Functional test warnings (jnewbery)\n-- #10219 `9111df9` Tests: Order Python Tests Differently (jimmysong)\n-- #10229 `f3db4c6` Tests: Add test for getdifficulty (jimmysong)\n-- #10224 `2723bcd` [test] Add test for getaddednodeinfo (jimmysong)\n-- #10023 `c530c15` [tests] remove maxblocksinflight.py (functionality covered by other test) (jnewbery)\n-- #10097 `1b25b6d` Move zmq test skipping logic into individual test case (jnewbery)\n-- #10272 `54e2d87` [Tests] Prevent warning: variable 'x' is uninitialized (paveljanik)\n-- #10225 `e0a7e19` [test] Add aborttrescan tests (kallewoof)\n-- #10278 `8254a8a` [test] Add Unit Test for GetListenPort (jimmysong)\n-- #10280 `47535d7` [test] Unit test amount.h/amount.cpp (jimmysong)\n-- #10256 `80c3a73` [test] Add test for gettxout to wallet.py (jimmysong)\n-- #10264 `492d22f` [test] Add tests for getconnectioncount, getnettotals and ping (jimmysong)\n-- #10169 `8f3e384` [tests] Remove func test code duplication (jnewbery)\n-- #10198 `dc8fc0c` [tests] Remove is_network_split from functional test framework (jnewbery)\n-- #10255 `3c5e6c9` [test] Add test for listaddressgroupings (jimmysong)\n-- #10137 `75171f0` Remove unused import. Remove accidental trailing semicolons (practicalswift)\n-- #10307 `83073de` [tests] allow zmq test to be run in out-of-tree builds (jnewbery)\n-- #10344 `e927483` [tests] Fix abandonconflict.py intermittency (jnewbery)\n-- #10318 `170bc2c` [tests] fix wait_for_inv() (jnewbery)\n-- #10171 `fff72de` [tests] Add node methods to test framework (jnewbery)\n-- #10352 `23d78c4` test: Add elapsed time to RPC tracing (laanwj)\n-- #10342 `6a796b2` [tests] Improve mempool_persist test (jnewbery)\n-- #10287 `776ba23` [tests] Update Unit Test for addrman.h/addrman.cpp (jimmysong)\n-- #10365 `7ee5236` [tests] increase timeouts in sendheaders test (jnewbery)\n-- #10361 `f6241b3` qa: disablewallet: Check that wallet is really disabled (MarcoFalke)\n-- #10371 `4b766fc` [tests] Clean up addrman_tests.cpp (jimmysong)\n-- #10253 `87abe20` [test] Add test for getnetworkhashps (jimmysong)\n-- #10376 `8bd16ee` [tests] fix disconnect_ban intermittency (jnewbery)\n-- #10374 `5411997` qa: Warn when specified test is not found (MarcoFalke)\n-- #10405 `0542978` tests: Correct testcase in script_tests.json for large number OP_EQUAL (laanwj)\n-- #10429 `6b99daf` tests: fix spurious addrman test failure (theuni)\n-- #10433 `8e57256` [tests] improve tmpdir structure (jnewbery)\n-- #10415 `217b416` [tests] Speed up fuzzing by ~200x when using afl-fuzz (practicalswift)\n-- #10445 `b4b057a` Add test for empty chain and reorg consistency for gettxoutsetinfo (gmaxwell)\n-- #10423 `1aefc94` [tests] skipped tests should clean up after themselves (jnewbery)\n-- #10359 `329fc1d` [tests] functional tests should call BitcoinTestFramework start/stop node methods (jnewbery)\n-- #10514 `e103b3f` Bugfix: missing == 0 after randrange (sipa)\n-- #10515 `c871f32` [test] Add test for getchaintxstats (jimmysong)\n-- #10509 `bea5b00` Remove xvfb configuration from travis (ryanofsky)\n-- #10535 `30853e1` [qa] fundrawtx: Fix shutdown race (MarcoFalke)\n-- #9909 `300f8e7` tests: Add FindEarliestAtLeast test for edge cases (ryanofsky)\n-- #10331 `75e898c` Share config between util and functional tests (jnewbery)\n-- #10321 `e801084` Use FastRandomContext for all tests (sipa)\n-- #10524 `6c2d81f` [tests] Remove printf(...) (practicalswift)\n-- #10547 `71ab6e5` [tests] Use FastRandomContext instead of boost::random::{mt19937,uniform_int_distribution} (practicalswift)\n-- #10551 `6702617` [Tests] Wallet encryption functional tests (achow101)\n-- #10555 `643fa0b` [tests] various improvements to zmq_test.py (jnewbery)\n-- #10533 `d083bd9` [tests] Use cookie auth instead of rpcuser and rpcpassword (achow101)\n-- #10632 `c68a9a6` qa: Add stopatheight test (MarcoFalke)\n-- #10636 `4bc853b` [qa] util: Check return code after closing bitcoind proc (MarcoFalke)\n-- #10662 `e0a7801` Initialize randomness in benchmarks (achow101)\n-- #10612 `7c87a9c` The young person's guide to the test_framework (jnewbery)\n-- #10659 `acb1153` [qa] blockchain: Pass on closed connection during generate call (MarcoFalke)\n-- #10690 `416af3e` [qa] Bugfix: allow overriding extra_args in ComparisonTestFramework (sdaftuar)\n-- #10556 `65cc7aa` Move stop/start functions from utils.py into BitcoinTestFramework (jnewbery)\n-- #10704 `dd07f47` [tests] nits in dbcrash.py (jnewbery)\n-- #10743 `be82498` [test] don't run dbcrash.py on Travis (jnewbery)\n-- #10761 `d3b5870` [tests] fix replace_by_fee.py (jnewbery)\n-- #10759 `1d4805c` Fix multi_rpc test for hosts that dont default to utf8 (TheBlueMatt)\n-- #10190 `e4f226a` [tests] mining functional tests (including regression test for submitblock) (jnewbery)\n-- #10739 `1fc783f` test: Move variable `state` down where it is used (paveljanik)\n-- #9980 `fee0d80` Fix mem access violation merkleblock (Christewart)\n-- #10893 `0c173a1` [QA] Avoid running multiwallet.py twice (jonasschnelli)\n-- #10927 `9d5e8f9` test: Make sure wallet.backup is created in temp path (laanwj)\n-- #10899 `f29d5db` [test] Qt: Use _putenv_s instead of setenv on Windows builds (brianmcmichael)\n-- #10912 `5c8eb79` [tests] Fix incorrect memory_cleanse(\u2026) call in crypto_tests.cpp (practicalswift)\n-- #11001 `fa8a063` [tests] Test disconnecting unsupported service bits logic (jnewbery)\n-- #10695 `929fd72` [qa] Rewrite BIP65/BIP66 functional tests (sdaftuar)\n-- #10963 `ecd2135` [bench] Restore format state of cout after printing with std::fixed/setprecision (practicalswift)\n-- #11025 `e5d26e4` qa: Fix inv race in example_test (MarcoFalke)\n-- #10765 `2c811e0` Tests: address placement should be deterministic by default (ReneNyffenegger)\n-- #11000 `ac016e1` test: Add resendwallettransactions functional tests (promag)\n-- #11032 `aeb3175` [qa] Fix block message processing error in sendheaders.py (sdaftuar)\n-- #10105 `0b9fb68` [tests] fixup - make all Travis test runs quiet, non just cron job runs (jnewbery)\n-- #10222 `6ce7337` [tests] test_runner - check unicode (jnewbery)\n-- #10327 `35da2ae` [tests] remove import-abort-rescan.py (jnewbery)\n-- #11023 `bf74d37` [tests] Add option to attach a python debugger if functional test fails (jnewbery)\n-- #10565 `8c2098a` [coverage] Remove subtrees and benchmarks from coverage report (achow101)\n-\n-### Miscellaneous\n-- #9871 `be8ba2c` Add a tree sha512 hash to merge commits (sipa)\n-- #9821 `d19d45a` util: Specific GetOSRandom for Linux/FreeBSD/OpenBSD (laanwj)\n-- #9903 `ba80a68` Docs: add details to -rpcclienttimeout doc (ian-kelling)\n-- #9910 `53c300f` Docs: correct and elaborate -rpcbind doc (ian-kelling)\n-- #9905 `01b7cda` [contrib] gh-merge: Move second sha512 check to the end (MarcoFalke)\n-- #9880 `4df8213` Verify Tree-SHA512s in merge commits, enforce sigs are not SHA1 (TheBlueMatt)\n-- #9932 `00c13ea` Fix verify-commits on travis and always check top commit's tree (TheBlueMatt)\n-- #9952 `6996e06` Add historical release notes for 0.14.0 (laanwj)\n-- #9940 `fa99663` Fix verify-commits on OSX, update for new bad Tree-SHA512, point travis to different keyservers (TheBlueMatt)\n-- #9963 `8040ae6` util: Properly handle errors during log message formatting (laanwj)\n-- #9984 `cce056d` devtools: Make github-merge compute SHA512 from git, instead of worktree (laanwj)\n-- #9995 `8bcf934` [doc] clarify blockchain size and pruning (askmike)\n-- #9734 `0c17afc` Add updating of chainTxData to release process (sipa)\n-- #10063 `530fcbd` add missing spaces so that markdown recognizes headline (flack)\n-- #10085 `db1ae54` Docs: remove 'noconnect' option (jlopp)\n-- #10090 `8e4f7e7` Update bitcoin.conf with example for pruning (coinables)\n-- #9424 `1a5aaab` Change LogAcceptCategory to use uint32_t rather than sets of strings (gmaxwell)\n-- #10036 `fbf36ca` Fix init README format to render correctly on github (jlopp)\n-- #10058 `a2cd0b0` No need to use OpenSSL malloc/free (tjps)\n-- #10123 `471ed00` Allow debug logs to be excluded from specified component (jnewbery)\n-- #10104 `fadf078` linearize script: Option to use RPC cookie (achow101)\n-- #10162 `a3a2160` [trivial] Log calls to getblocktemplate (jnewbery)\n-- #10155 `928695b` build: Deduplicate version numbers (laanwj)\n-- #10211 `a86255b` [doc] Contributor fixes & new \"finding reviewers\" section (kallewoof)\n-- #10250 `1428f30` Fix some empty vector references (sipa)\n-- #10270 `95f5e44` Remove Clang workaround for Boost 1.46 (fanquake)\n-- #10263 `cb007e4` Trivial: fix fee estimate write error log message (CryptAxe)\n-- #9670 `bd9ec0e` contrib: github-merge improvements (laanwj)\n-- #10260 `1d75597` [doc] Minor corrections to osx dependencies (fanquake)\n-- #10189 `750c5a5` devtools/net: add a verifier for scriptable changes. Use it to make CNode::id private (theuni)\n-- #10322 `bc64b5a` Use hardware timestamps in RNG seeding (sipa)\n-- #10381 `7f2b9e0` Shadowing warnings are not enabled by default, update doc accordingly (paveljanik)\n-- #10380 `b6ee855` [doc] Removing comments about dirty entries on txmempool (madeo)\n-- #10383 `d0c37ee` [logging] log system time and mock time (jnewbery)\n-- #10404 `b45a52a` doc: Add logging to FinalizeNode() (sdaftuar)\n-- #10388 `526e839` Output line to debug.log when IsInitialBlockDownload latches to false (morcos)\n-- #10372 `15254e9` Add perf counter data to GetStrongRandBytes state in scheduler (TheBlueMatt)\n-- #10461 `55b72f3` Update style guide (sipa)\n-- #10486 `10e8c0a` devtools: Retry after signing fails in github-merge (laanwj)\n-- #10447 `f259263` Make bitcoind invalid argument error message specific (laanwj)\n-- #10495 `6a38b79` contrib: Update location of seeds.txt (laanwj)\n-- #10469 `b6b150b` Fixing typo in rpcdump.cpp help message (keystrike)\n-- #10451 `27b9931` contrib/init/bitcoind.openrcconf: Don't disable wallet by default (luke-jr)\n-- #10323 `00d3692` Update to latest libsecp256k1 master (sipa)\n-- #10422 `cec9e1e` Fix timestamp in fee estimate debug message (morcos)\n-- #10566 `5d034ee` [docs] Use the \"domain name setup\" image (previously unused) in the gitian docs (practicalswift)\n-- #10534 `a514ac3` Clarify prevector::erase and avoid swap-to-clear (sipa)\n-- #10575 `22ec768` Header include guideline (sipa)\n-- #10480 `fbf5d3b` Improve commit-check-script.sh (sipa)\n-- #10502 `1ad3d4e` scripted-diff: Remove BOOST_FOREACH, Q_FOREACH and PAIRTYPE (jtimon)\n-- #10377 `b63be2c` Use rdrand as entropy source on supported platforms (sipa)\n-- #9895 `228c319` Turn TryCreateDirectory() into TryCreateDirectories() (benma)\n-- #10602 `d76e84a` Make clang-format use C++11 features (e.g. A<A<int>> instead of A<A<int> >) (practicalswift)\n-- #10623 `c38f540` doc: Add 0.14.2 release notes (MarcoFalke)\n-- #10276 `b750b33` contrib/verifybinaries: allow filtering by platform (knocte)\n-- #10248 `01c4b14` Rewrite addrdb with less duplication using CHashVerifier (sipa)\n-- #10577 `232508f` Add an explanation of quickly hashing onto a non-power of two range (gmaxwell)\n-- #10608 `eee398f` Add a comment explaining the use of MAX_BLOCK_BASE_SIZE (gmaxwell)\n-- #10728 `7397af9` fix typo in help text for removeprunedfunds (AkioNak)\n-- #10193 `6dbcc74` scripted-diff: Remove #include <boost/foreach.hpp> (jtimon)\n-- #10676 `379aed0` document script-based return fields for validateaddress (instagibbs)\n-- #10651 `cef4b5c` Verify binaries from bitcoincore.org and bitcoin.org (TheBlueMatt)\n-- #10786 `ca4c545` Add PR description to merge commit in github-merge.py (sipa)\n-- #10812 `c5904e8` [utils] Allow bitcoin-cli's -rpcconnect option to be used with square brackets (jnewbery)\n-- #10842 `3895e25` Fix incorrect Doxygen tag (@ince \u2192 @since). Doxygen parameter name matching (practicalswift)\n-- #10681 `df0793f` add gdb attach process to test README (instagibbs)\n-- #10789 `1124328` Punctuation/grammer fixes in rpcwallet.cpp (stevendlander)\n-- #10655 `78f307b` Properly document target_confirmations in listsinceblock (RHavar)\n-- #10917 `5c003cb` developer-notes: add reference to snake_case and PascalCase (benma)\n-- #11003 `4b5a7ce` Docs: Capitalize bullet points in CONTRIBUTING guide (eklitzke)\n-- #10968 `98aa3f6` Add instructions for parallel gitian builds (coblee)\n-- #11076 `1c4b9b3` 0.15 release-notes nits: fix redundancy, remove accidental parenthesis & fix range style (practicalswift)\n-- #11090 `8f0121c` Update contributor names in release-notes.md (Derek701)\n-- #11056 `cbdd338` disable jni in builds (instagibbs)\n-- #11080 `2b59cfb` doc: Update build-openbsd for 6.1 (laanwj)\n-- #11119 `0a6af47` [doc] build-windows: Mention that only trusty works (MarcoFalke)\n-- #11108 `e8ad101` Changing -txindex requires -reindex, not -reindex-chainstate (TheBlueMatt)\n-- #9792 `342b9bc` FastRandomContext improvements and switch to ChaCha20 (sipa)\n-- #9505 `67ed40e` Prevector Quick Destruct (JeremyRubin)\n-- #10820 `ef37f20` Use cpuid intrinsics instead of asm code (sipa)\n-- #9999 `a328904` [LevelDB] Plug leveldb logs to bitcoin logs (NicolasDorier)\n-- #9693 `c5e9e42` Prevent integer overflow in ReadVarInt (gmaxwell)\n-- #10129 `351d0ad` scheduler: fix sub-second precision with boost < 1.50 (theuni)\n-- #10153 `fade788` logging: Fix off-by-one for shrinkdebugfile default (MarcoFalke)\n-- #10305 `c45da32` Fix potential NPD introduced in b297426c (TheBlueMatt)\n-- #10338 `daf3e7d` Maintain state across GetStrongRandBytes calls (sipa)\n-- #10544 `a4fe077` Update to LevelDB 1.20 (sipa)\n-- #10614 `cafe24f` random: fix crash on some 64bit platforms (theuni)\n-- #10714 `2a09a38` Avoid printing incorrect block indexing time due to uninitialized variable (practicalswift)\n-- #10837 `8bc6d1f` Fix resource leak on error in GetDevURandom (corebob)\n-- #10832 `89bb036` init: Factor out AppInitLockDataDirectory and fix startup core dump issue (laanwj)\n-- #10914 `b995a37` Add missing lock in CScheduler::AreThreadsServicingQueue() (TheBlueMatt)\n-- #10958 `659c096` Update to latest Bitcoin patches for LevelDB (sipa)\n-- #10919 `c1c671f` Fix more init bugs (TheBlueMatt)\n-\n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-- \u30ed\u30cf\u30f3 \u30c0\u30eb\n-- Ahmad Kazi\n-- aideca\n-- Akio Nakamura\n-- Alex Morcos\n-- Allan Doensen\n-- Andres G. Aragoneses\n-- Andrew Chow\n-- Angel Leon\n-- Awemany\n-- Bob McElrath\n-- Brian McMichael\n-- BtcDrak\n-- Charlie Lee\n-- Chris Gavin\n-- Chris Stewart\n-- Cory Fields\n-- CryptAxe\n-- Dag Robole\n-- Daniel Aleksandersen\n-- Daniel Cousens\n-- darksh1ne\n-- Dimitris Tsapakidis\n-- Eric Shaw\n-- Evan Klitzke\n-- fanquake\n-- Felix Weis\n-- flack\n-- Guido Vranken\n-- Greg Griffith\n-- Gregory Maxwell\n-- Gregory Sanders\n-- Ian Kelling\n-- Jack Grigg\n-- James Evans\n-- James Hilliard\n-- Jameson Lopp\n-- Jeremy Rubin\n-- Jimmy Song\n-- Jo\u00e3o Barbosa\n-- Johnathan Corgan\n-- John Newbery\n-- Jonas Schnelli\n-- Jorge Tim\u00f3n\n-- Karl-Johan Alm\n-- kewde\n-- KibbledJiveElkZoo\n-- Kirit Thadaka\n-- kobake\n-- Kyle Honeycutt\n-- Lawrence Nahum\n-- Luke Dashjr\n-- Marco Falke\n-- Marcos Mayorga\n-- Marijn Stollenga\n-- Mario Dian\n-- Mark Friedenbach\n-- Marko Bencun\n-- Masahiko Hyuga\n-- Matt Corallo\n-- Matthew Zipkin\n-- Matthias Grundmann\n-- Michael Goldstein\n-- Michael Rotarius\n-- Mikerah\n-- Mike van Rossum\n-- Mitchell Cash\n-- Nicolas Dorier\n-- Patrick Strateman\n-- Pavel Jan\u00edk\n-- Pavlos Antoniou\n-- Pavol Rusnak\n-- Pedro Branco\n-- Peter Todd\n-- Pieter Wuille\n-- practicalswift\n-- Ren\u00e9 Nyffenegger\n-- Ricardo Velhote\n-- romanornr\n-- Russell Yanofsky\n-- Rusty Russell\n-- Ryan Havar\n-- shaolinfry\n-- Shigeya Suzuki\n-- Simone Madeo\n-- Spencer Lievens\n-- Steven D. Lander\n-- Suhas Daftuar\n-- Takashi Mitsuta\n-- Thomas Snider\n-- Timothy Redaelli\n-- tintinweb\n-- tnaka\n-- Warren Togami\n-- Wladimir J. van der Laan\n+(fill this in)\n \n As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "46c8d23dad216d990564014f4c8000b79fd36f4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmM4ZDIzZGFkMjE2ZDk5MDU2NDAxNGY0YzgwMDBiNzlmZDM2ZjRl",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-14T19:32:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-15T07:56:11Z"
      },
      "message": "Fix Qt 0.14.2->0.15.0 segfault if \"total at least\" is selected\n\nA button was removed, so now button(1) is nullptr\n\nGithub-Pull: #11332\nRebased-From: cdaf3a1f9e93be273ebf3e470dc709828c55476c\nTree-SHA512: 0a49bf4e9ab08e5869170c8a212da60c9a6b90c36427d788de384aa4be6d87bb5e00a21edf78eed34f81bbc554b6f15565bb9b493dafcbfe9d6f4664d7424d9d",
      "tree": {
        "sha": "d4fbfd986579e0e3f44ea00811db03939eb256b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4fbfd986579e0e3f44ea00811db03939eb256b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46c8d23dad216d990564014f4c8000b79fd36f4e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZu4ebAAoJEB5K7WKYbNJdpvkIAJ9IpfPMS7YrFRpVhVip71dd\nPtOcxP6NoPYlWe5hr6/raYEXderPh6S/d4bdO+Gipjk92/vEjjZjUOwWK3YAY1zX\nHdEpeN4T5nMQIDzszT1E4pw99TBKfkVZ5DNgiUtaIgQri0RbDgHyNbwHpcZDxSUx\nMjB5z2JmWTQPQBYzgBoxoOd6gQsja6ZOBu0vL4Bl/rZ6x3zUNDpG+gwfXVpxTV2B\neAEhoOMt8hPg0uVyCYaTGjaMjQ/fgsWhx6ouF/a+An2DhdVHJus5qA84k+T9Hl4T\nQjaY5hPI7AeQ4P8zDDyij3bq6cXFZEoaaV7MILkLemHBTME5fn5UxOhdtTKAUvE=\n=r8NA\n-----END PGP SIGNATURE-----",
        "payload": "tree d4fbfd986579e0e3f44ea00811db03939eb256b7\nparent 7c53587101eaf206a6a6a11a9398d43f139eadcf\nauthor Matt Corallo <git@bluematt.me> 1505417544 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1505462171 +0200\n\nFix Qt 0.14.2->0.15.0 segfault if \"total at least\" is selected\n\nA button was removed, so now button(1) is nullptr\n\nGithub-Pull: #11332\nRebased-From: cdaf3a1f9e93be273ebf3e470dc709828c55476c\nTree-SHA512: 0a49bf4e9ab08e5869170c8a212da60c9a6b90c36427d788de384aa4be6d87bb5e00a21edf78eed34f81bbc554b6f15565bb9b493dafcbfe9d6f4664d7424d9d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c8d23dad216d990564014f4c8000b79fd36f4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46c8d23dad216d990564014f4c8000b79fd36f4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c8d23dad216d990564014f4c8000b79fd36f4e/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c53587101eaf206a6a6a11a9398d43f139eadcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c53587101eaf206a6a6a11a9398d43f139eadcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c53587101eaf206a6a6a11a9398d43f139eadcf"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "38a475227e55ce5a83b386878d40501139c48e83",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c8d23dad216d990564014f4c8000b79fd36f4e/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c8d23dad216d990564014f4c8000b79fd36f4e/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=46c8d23dad216d990564014f4c8000b79fd36f4e",
        "patch": "@@ -128,7 +128,7 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n     ui->groupFee->setId(ui->radioCustomFee, 1);\n     ui->groupFee->button((int)std::max(0, std::min(1, settings.value(\"nFeeRadio\").toInt())))->setChecked(true);\n     ui->groupCustomFee->setId(ui->radioCustomPerKilobyte, 0);\n-    ui->groupCustomFee->button((int)std::max(0, std::min(1, settings.value(\"nCustomFeeRadio\").toInt())))->setChecked(true);\n+    ui->groupCustomFee->button(0)->setChecked(true);\n     ui->customFee->setValue(settings.value(\"nTransactionFee\").toLongLong());\n     ui->checkBoxMinimumFee->setChecked(settings.value(\"fPayOnlyMinFee\").toBool());\n     minimizeFeeSection(settings.value(\"fFeeSectionMinimized\").toBool());"
      }
    ]
  },
  {
    "sha": "843233277d312f9878c464fb05451b90937b01fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDMyMzMyNzdkMzEyZjk4NzhjNDY0ZmIwNTQ1MWI5MDkzN2IwMWZj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-15T12:58:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-15T12:59:07Z"
      },
      "message": "build: Bump version to 0.15.0.1\n\nTree-SHA512: 7ee9ff3941737aae3086cabcd792c6a00054e911045b4ee198bdc03ffed01328bce504bf7d4fb177e78da8c01812d1a5081dca13e767433aa9ac441e979102e6",
      "tree": {
        "sha": "01013ac0b65f2284e08035ae907db88f2b37a5ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01013ac0b65f2284e08035ae907db88f2b37a5ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/843233277d312f9878c464fb05451b90937b01fc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZu86bAAoJEB5K7WKYbNJdLm0IAMRG7HuleXCOZWYerw4L/OCJ\nR1OjQFcnLfsGwTXsj0idXUBfuxHUI+6vXt2azbSqe3Zllj2ZhUq33GTTZ2nJIdZm\nZT0IZQLdzIH/xqW3MBYbPCXY6szswwc7P6zCRQoVTc7m0U1afwczXHjgAXE8MuJt\nCM+by6TPj7CxSG7c3TGBqDEPYGX4NItUjFJoMTDPopfuK+ySANwxbTxKkNbldeNU\nO+vLPDwrmZasWmpsBsdlqGuqA07hOvUo439yUksnSL/MkySQly3kNDoZskMRB7iS\nr60+12ViN+unaQoEF/fkuRjXlIIJFqfAfbdnDmG+2eAd6XzzWtTe0rJopDgm1NM=\n=2LlJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 01013ac0b65f2284e08035ae907db88f2b37a5ba\nparent 46c8d23dad216d990564014f4c8000b79fd36f4e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1505480329 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1505480347 +0200\n\nbuild: Bump version to 0.15.0.1\n\nTree-SHA512: 7ee9ff3941737aae3086cabcd792c6a00054e911045b4ee198bdc03ffed01328bce504bf7d4fb177e78da8c01812d1a5081dca13e767433aa9ac441e979102e6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/843233277d312f9878c464fb05451b90937b01fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/843233277d312f9878c464fb05451b90937b01fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/843233277d312f9878c464fb05451b90937b01fc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46c8d23dad216d990564014f4c8000b79fd36f4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c8d23dad216d990564014f4c8000b79fd36f4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46c8d23dad216d990564014f4c8000b79fd36f4e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "71e22dc28cc6d2bc381455d03357a72588443345",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/843233277d312f9878c464fb05451b90937b01fc/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/843233277d312f9878c464fb05451b90937b01fc/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=843233277d312f9878c464fb05451b90937b01fc",
        "patch": "@@ -3,7 +3,7 @@ AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n define(_CLIENT_VERSION_MINOR, 15)\n define(_CLIENT_VERSION_REVISION, 0)\n-define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_BUILD, 1)\n define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2017)\n define(_COPYRIGHT_HOLDERS,[The %s developers])"
      }
    ]
  },
  {
    "sha": "7123b95bea5b4bb9419ecab316adaca5ed1ef1bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTIzYjk1YmVhNWI0YmI5NDE5ZWNhYjMxNmFkYWNhNWVkMWVmMWJk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-15T13:20:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-15T13:20:37Z"
      },
      "message": "doc: Bump manpages to 0.15.0.1\n\nTree-SHA512: 8097788934031d0ef47ebac8ddda10e4d124c14e8d0ccee697faba971a68ad7bfcc2f838ae53b1110719ade879743187d170c4d2e69446343c6e2e89febf633c",
      "tree": {
        "sha": "b2f36981b4425f20aa18efbb518c47d1ac817db1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2f36981b4425f20aa18efbb518c47d1ac817db1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7123b95bea5b4bb9419ecab316adaca5ed1ef1bd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZu9OlAAoJEB5K7WKYbNJdW3oIAKqERThQwHFmgDnR8a4lh3NM\n32joG2VkwA5ZjY/1k2V+Kvts7flZETuxFGGbZCPjeegdrrFHOhczMEnQrGTiA6tx\nzR+aa9DbwiCT98N2n8iEfFX8/vb5Rv+RfbOiXz+VHjJ746MInCaZvZ/jUn8BI1xS\nZ7/Sr6lDWNgsaHTsJw9pazrGZNZsx/1S4DgwBicTfGHbjc7xa+qBEAVXpC4X0HIf\nGuHWQojz+JC/g76sugpBBKrZuwsn2eJspLG/bgMPYWPlcg1axNjboDIq3yOhnPdw\n75j83+48MPhpRmpM0Gh8aFeWGsCOd3BskcP5nGzO8dxPxhoTtRv06t08e1vxYhM=\n=6zbp\n-----END PGP SIGNATURE-----",
        "payload": "tree b2f36981b4425f20aa18efbb518c47d1ac817db1\nparent 843233277d312f9878c464fb05451b90937b01fc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1505481620 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1505481637 +0200\n\ndoc: Bump manpages to 0.15.0.1\n\nTree-SHA512: 8097788934031d0ef47ebac8ddda10e4d124c14e8d0ccee697faba971a68ad7bfcc2f838ae53b1110719ade879743187d170c4d2e69446343c6e2e89febf633c\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7123b95bea5b4bb9419ecab316adaca5ed1ef1bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7123b95bea5b4bb9419ecab316adaca5ed1ef1bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7123b95bea5b4bb9419ecab316adaca5ed1ef1bd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "843233277d312f9878c464fb05451b90937b01fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/843233277d312f9878c464fb05451b90937b01fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/843233277d312f9878c464fb05451b90937b01fc"
      }
    ],
    "stats": {
      "total": 248,
      "additions": 145,
      "deletions": 103
    },
    "files": [
      {
        "sha": "c4512c07d25b561506dde8fcf2b2d31b6424ca62",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7123b95bea5b4bb9419ecab316adaca5ed1ef1bd/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7123b95bea5b4bb9419ecab316adaca5ed1ef1bd/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=7123b95bea5b4bb9419ecab316adaca5ed1ef1bd",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n-.TH BITCOIN-CLI \"1\" \"February 2017\" \"bitcoin-cli v0.14.99.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.\n+.TH BITCOIN-CLI \"1\" \"September 2017\" \"bitcoin-cli v0.15.0.1\" \"User Commands\"\n .SH NAME\n-bitcoin-cli \\- manual page for bitcoin-cli v0.14.99.0\n+bitcoin-cli \\- manual page for bitcoin-cli v0.15.0.1\n .SH DESCRIPTION\n-Bitcoin Core RPC client version v0.14.99.0\n+Bitcoin Core RPC client version v0.15.0.1\\-dirty\n .SS \"Usage:\"\n .TP\n bitcoin\\-cli [options] <command> [params]\n@@ -64,12 +64,19 @@ Password for JSON\\-RPC connections\n .HP\n \\fB\\-rpcclienttimeout=\\fR<n>\n .IP\n-Timeout during HTTP requests (default: 900)\n+Timeout in seconds during HTTP requests, or 0 for no timeout. (default:\n+900)\n .HP\n \\fB\\-stdin\\fR\n .IP\n Read extra arguments from standard input, one per line until EOF/Ctrl\\-D\n (recommended for sensitive information such as passphrases)\n+.HP\n+\\fB\\-rpcwallet=\\fR<walletname>\n+.IP\n+Send RPC for non\\-default wallet on RPC server (argument is wallet\n+filename in bitcoind directory, required if bitcoind/\\-Qt runs\n+with multiple wallets)\n .SH COPYRIGHT\n Copyright (C) 2009-2017 The Bitcoin Core developers\n "
      },
      {
        "sha": "f83b0b0644fc4382729892054c20bf92ccd1ee78",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 62,
        "deletions": 47,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7123b95bea5b4bb9419ecab316adaca5ed1ef1bd/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7123b95bea5b4bb9419ecab316adaca5ed1ef1bd/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=7123b95bea5b4bb9419ecab316adaca5ed1ef1bd",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n-.TH BITCOIN-QT \"1\" \"February 2017\" \"bitcoin-qt v0.14.99.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.\n+.TH BITCOIN-QT \"1\" \"September 2017\" \"bitcoin-qt v0.15.0.1\" \"User Commands\"\n .SH NAME\n-bitcoin-qt \\- manual page for bitcoin-qt v0.14.99.0\n+bitcoin-qt \\- manual page for bitcoin-qt v0.15.0.1\n .SH DESCRIPTION\n-Bitcoin Core version v0.14.99.0 (64\\-bit)\n+Bitcoin Core version v0.15.0.1\\-dirty (64\\-bit)\n Usage:\n .IP\n bitcoin\\-qt [command\\-line options]\n@@ -32,9 +32,9 @@ block hash)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90,\n+0000000000000000003b9ce759c2a087d52abc4266f8f4ebd6d768b89defa50a,\n testnet:\n-00000000000128796ee387cf110ccb9d2f36cffaf7f73079c995377c65ac0dcc)\n+0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n .HP\n \\fB\\-conf=\\fR<file>\n .IP\n@@ -46,7 +46,7 @@ Specify data directory\n .HP\n \\fB\\-dbcache=\\fR<n>\n .IP\n-Set database cache size in megabytes (4 to 16384, default: 300)\n+Set database cache size in megabytes (4 to 16384, default: 450)\n .HP\n \\fB\\-loadblock=\\fR<file>\n .IP\n@@ -65,14 +65,18 @@ Keep the transaction memory pool below <n> megabytes (default: 300)\n Do not keep transactions in the mempool longer than <n> hours (default:\n 336)\n .HP\n+\\fB\\-persistmempool\\fR\n+.IP\n+Whether to save the mempool on shutdown and load on restart (default: 1)\n+.HP\n \\fB\\-blockreconstructionextratxn=\\fR<n>\n .IP\n Extra transactions to keep in memory for compact block reconstructions\n (default: 100)\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-2\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-6\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-pid=\\fR<file>\n@@ -131,8 +135,8 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node(s); \\fB\\-noconnect\\fR or \\fB\\-connect\\fR=\\fI\\,0\\/\\fR alone to\n-disable automatic connections\n+Connect only to the specified node(s); \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n+connections\n .HP\n \\fB\\-discover\\fR\n .IP\n@@ -146,7 +150,7 @@ Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (def\n \\fB\\-dnsseed\\fR\n .IP\n Query for peer addresses via DNS lookup, if low on addresses (default: 1\n-unless \\fB\\-connect\\fR/\\-noconnect)\n+unless \\fB\\-connect\\fR used)\n .HP\n \\fB\\-externalip=\\fR<ip>\n .IP\n@@ -158,8 +162,7 @@ Always query for peer addresses via DNS lookup (default: 0)\n .HP\n \\fB\\-listen\\fR\n .IP\n-Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or\n-\\fB\\-connect\\fR/\\-noconnect)\n+Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n .HP\n \\fB\\-listenonion\\fR\n .IP\n@@ -214,11 +217,6 @@ Connect through SOCKS5 proxy\n Randomize credentials for every proxy connection. This enables Tor\n stream isolation (default: 1)\n .HP\n-\\fB\\-rpcserialversion\\fR\n-.IP\n-Sets the serialization of raw transaction or block hex returned in\n-non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n-.HP\n \\fB\\-seednode=\\fR<ip>\n .IP\n Connect to a node to retrieve peer addresses, and disconnect\n@@ -253,16 +251,6 @@ times. Whitelisted peers cannot be DoS banned and their\n transactions are always relayed, even if they are already in the\n mempool, useful e.g. for a gateway\n .HP\n-\\fB\\-whitelistrelay\\fR\n-.IP\n-Accept relayed transactions received from whitelisted peers even when\n-not relaying transactions (default: 1)\n-.HP\n-\\fB\\-whitelistforcerelay\\fR\n-.IP\n-Force relay of transactions from whitelisted peers even if they violate\n-local relay policy (default: 1)\n-.HP\n \\fB\\-maxuploadtarget=\\fR<n>\n .IP\n Tries to keep outbound traffic under the given target (in MiB per 24h),\n@@ -276,13 +264,21 @@ Do not load the wallet and disable wallet RPC calls\n .HP\n \\fB\\-keypool=\\fR<n>\n .IP\n-Set key pool size to <n> (default: 100)\n+Set key pool size to <n> (default: 1000)\n .HP\n \\fB\\-fallbackfee=\\fR<amt>\n .IP\n A fee rate (in BTC/kB) that will be used when fee estimation has\n insufficient data (default: 0.0002)\n .HP\n+\\fB\\-discardfee=\\fR<amt>\n+.IP\n+The fee rate (in BTC/kB) that indicates your tolerance for discarding\n+change by adding it to the fee (default: 0.0001). Note: An output\n+is discarded if it is dust at this rate, but we will always\n+discard up to the dust relay fee and a discard fee above that is\n+limited by the fee estimate for the longest target\n+.HP\n \\fB\\-mintxfee=\\fR<amt>\n .IP\n Fees (in BTC/kB) smaller than this are considered zero fee for\n@@ -370,10 +366,16 @@ Append comment to the user agent string\n .IP\n Output debugging information (default: 0, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n-output all debugging information.<category> can be: addrman,\n-alert, bench, cmpctblock, coindb, db, http, libevent, lock,\n-mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc,\n-selectcoins, tor, zmq, qt.\n+output all debugging information. <category> can be: net, tor,\n+mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n+selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej,\n+libevent, coindb, qt, leveldb.\n+.HP\n+\\fB\\-debugexclude=\\fR<category>\n+.IP\n+Exclude debugging information for a category. Can be used in conjunction\n+with \\fB\\-debug\\fR=\\fI\\,1\\/\\fR to output debug logs for all categories except one\n+or more specified categories.\n .HP\n \\fB\\-help\\-debug\\fR\n .IP\n@@ -387,11 +389,6 @@ Include IP addresses in debug output (default: 0)\n .IP\n Prepend debug output with timestamp (default: 1)\n .HP\n-\\fB\\-minrelaytxfee=\\fR<amt>\n-.IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for relaying,\n-mining and transaction creation (default: 0.00001)\n-.HP\n \\fB\\-maxtxfee=\\fR<amt>\n .IP\n Maximum total fees (in BTC) to use in a single wallet transaction or raw\n@@ -431,6 +428,21 @@ Maximum size of data in data carrier transactions we relay and mine\n \\fB\\-mempoolreplacement\\fR\n .IP\n Enable transaction replacement in the memory pool (default: 1)\n+.HP\n+\\fB\\-minrelaytxfee=\\fR<amt>\n+.IP\n+Fees (in BTC/kB) smaller than this are considered zero fee for relaying,\n+mining and transaction creation (default: 0.00001)\n+.HP\n+\\fB\\-whitelistrelay\\fR\n+.IP\n+Accept relayed transactions received from whitelisted peers even when\n+not relaying transactions (default: 1)\n+.HP\n+\\fB\\-whitelistforcerelay\\fR\n+.IP\n+Force relay of transactions from whitelisted peers even if they violate\n+local relay policy (default: 1)\n .PP\n Block creation options:\n .HP\n@@ -442,11 +454,6 @@ Set maximum BIP141 block weight (default: 3000000)\n .IP\n Set maximum block size in bytes (default: 750000)\n .HP\n-\\fB\\-blockprioritysize=\\fR<n>\n-.IP\n-Set maximum size of high\\-priority/low\\-fee transactions in bytes\n-(default: 0)\n-.HP\n \\fB\\-blockmintxfee=\\fR<amt>\n .IP\n Set lowest fee rate (in BTC/kB) for transactions to be included in block\n@@ -462,11 +469,14 @@ Accept command line and JSON\\-RPC commands\n .IP\n Accept public REST requests (default: 0)\n .HP\n-\\fB\\-rpcbind=\\fR<addr>\n+\\fB\\-rpcbind=\\fR<addr>[:port]\n .IP\n-Bind to given address to listen for JSON\\-RPC connections. Use\n-[host]:port notation for IPv6. This option can be specified\n-multiple times (default: bind to all interfaces)\n+Bind to given address to listen for JSON\\-RPC connections. This option is\n+ignored unless \\fB\\-rpcallowip\\fR is also passed. Port is optional and\n+overrides \\fB\\-rpcport\\fR. Use [host]:port notation for IPv6. This\n+option can be specified multiple times (default: 127.0.0.1 and\n+::1 i.e., localhost, or if \\fB\\-rpcallowip\\fR has been specified,\n+0.0.0.0 and :: i.e., all addresses)\n .HP\n \\fB\\-rpccookiefile=\\fR<loc>\n .IP\n@@ -501,6 +511,11 @@ single IP (e.g. 1.2.3.4), a network/netmask (e.g.\n 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This\n option can be specified multiple times\n .HP\n+\\fB\\-rpcserialversion\\fR\n+.IP\n+Sets the serialization of raw transaction or block hex returned in\n+non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n+.HP\n \\fB\\-rpcthreads=\\fR<n>\n .IP\n Set the number of threads to service RPC calls (default: 4)"
      },
      {
        "sha": "82f124aaacd129f1b976336f9e775d0e9aa52a58",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7123b95bea5b4bb9419ecab316adaca5ed1ef1bd/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7123b95bea5b4bb9419ecab316adaca5ed1ef1bd/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=7123b95bea5b4bb9419ecab316adaca5ed1ef1bd",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n-.TH BITCOIN-TX \"1\" \"February 2017\" \"bitcoin-tx v0.14.99.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.\n+.TH BITCOIN-TX \"1\" \"September 2017\" \"bitcoin-tx v0.15.0.1\" \"User Commands\"\n .SH NAME\n-bitcoin-tx \\- manual page for bitcoin-tx v0.14.99.0\n+bitcoin-tx \\- manual page for bitcoin-tx v0.15.0.1\n .SH DESCRIPTION\n-Bitcoin Core bitcoin\\-tx utility version v0.14.99.0\n+Bitcoin Core bitcoin\\-tx utility version v0.15.0.1\\-dirty\n .SS \"Usage:\"\n .TP\n bitcoin\\-tx [options] <hex\\-tx> [commands]\n@@ -63,6 +63,11 @@ nversion=N\n .IP\n Set TX version to N\n .IP\n+replaceable(=N)\n+.IP\n+Set RBF opt\\-in sequence number for input N (if not provided, opt\\-in all\n+available inputs)\n+.IP\n outaddr=VALUE:ADDRESS\n .IP\n Add address\\-based output to TX"
      },
      {
        "sha": "4a88d7a179d2b5c58057b31bbcc978d5cea56b54",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 62,
        "deletions": 47,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7123b95bea5b4bb9419ecab316adaca5ed1ef1bd/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7123b95bea5b4bb9419ecab316adaca5ed1ef1bd/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=7123b95bea5b4bb9419ecab316adaca5ed1ef1bd",
        "patch": "@@ -1,9 +1,9 @@\n-.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.4.\n-.TH BITCOIND \"1\" \"February 2017\" \"bitcoind v0.14.99.0\" \"User Commands\"\n+.\\\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.47.3.\n+.TH BITCOIND \"1\" \"September 2017\" \"bitcoind v0.15.0.1\" \"User Commands\"\n .SH NAME\n-bitcoind \\- manual page for bitcoind v0.14.99.0\n+bitcoind \\- manual page for bitcoind v0.15.0.1\n .SH DESCRIPTION\n-Bitcoin Core Daemon version v0.14.99.0\n+Bitcoin Core Daemon version v0.15.0.1\\-dirty\n .SS \"Usage:\"\n .TP\n bitcoind [options]\n@@ -33,9 +33,9 @@ block hash)\n If this block is in the chain assume that it and its ancestors are valid\n and potentially skip their script verification (0 to verify all,\n default:\n-00000000000000000013176bf8d7dfeab4e1db31dc93bc311b436e82ab226b90,\n+0000000000000000003b9ce759c2a087d52abc4266f8f4ebd6d768b89defa50a,\n testnet:\n-00000000000128796ee387cf110ccb9d2f36cffaf7f73079c995377c65ac0dcc)\n+0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)\n .HP\n \\fB\\-conf=\\fR<file>\n .IP\n@@ -51,7 +51,7 @@ Specify data directory\n .HP\n \\fB\\-dbcache=\\fR<n>\n .IP\n-Set database cache size in megabytes (4 to 16384, default: 300)\n+Set database cache size in megabytes (4 to 16384, default: 450)\n .HP\n \\fB\\-loadblock=\\fR<file>\n .IP\n@@ -70,14 +70,18 @@ Keep the transaction memory pool below <n> megabytes (default: 300)\n Do not keep transactions in the mempool longer than <n> hours (default:\n 336)\n .HP\n+\\fB\\-persistmempool\\fR\n+.IP\n+Whether to save the mempool on shutdown and load on restart (default: 1)\n+.HP\n \\fB\\-blockreconstructionextratxn=\\fR<n>\n .IP\n Extra transactions to keep in memory for compact block reconstructions\n (default: 100)\n .HP\n \\fB\\-par=\\fR<n>\n .IP\n-Set the number of script verification threads (\\fB\\-2\\fR to 16, 0 = auto, <0 =\n+Set the number of script verification threads (\\fB\\-6\\fR to 16, 0 = auto, <0 =\n leave that many cores free, default: 0)\n .HP\n \\fB\\-pid=\\fR<file>\n@@ -136,8 +140,8 @@ for IPv6\n .HP\n \\fB\\-connect=\\fR<ip>\n .IP\n-Connect only to the specified node(s); \\fB\\-noconnect\\fR or \\fB\\-connect\\fR=\\fI\\,0\\/\\fR alone to\n-disable automatic connections\n+Connect only to the specified node(s); \\fB\\-connect\\fR=\\fI\\,0\\/\\fR disables automatic\n+connections\n .HP\n \\fB\\-discover\\fR\n .IP\n@@ -151,7 +155,7 @@ Allow DNS lookups for \\fB\\-addnode\\fR, \\fB\\-seednode\\fR and \\fB\\-connect\\fR (def\n \\fB\\-dnsseed\\fR\n .IP\n Query for peer addresses via DNS lookup, if low on addresses (default: 1\n-unless \\fB\\-connect\\fR/\\-noconnect)\n+unless \\fB\\-connect\\fR used)\n .HP\n \\fB\\-externalip=\\fR<ip>\n .IP\n@@ -163,8 +167,7 @@ Always query for peer addresses via DNS lookup (default: 0)\n .HP\n \\fB\\-listen\\fR\n .IP\n-Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or\n-\\fB\\-connect\\fR/\\-noconnect)\n+Accept connections from outside (default: 1 if no \\fB\\-proxy\\fR or \\fB\\-connect\\fR)\n .HP\n \\fB\\-listenonion\\fR\n .IP\n@@ -219,11 +222,6 @@ Connect through SOCKS5 proxy\n Randomize credentials for every proxy connection. This enables Tor\n stream isolation (default: 1)\n .HP\n-\\fB\\-rpcserialversion\\fR\n-.IP\n-Sets the serialization of raw transaction or block hex returned in\n-non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n-.HP\n \\fB\\-seednode=\\fR<ip>\n .IP\n Connect to a node to retrieve peer addresses, and disconnect\n@@ -258,16 +256,6 @@ times. Whitelisted peers cannot be DoS banned and their\n transactions are always relayed, even if they are already in the\n mempool, useful e.g. for a gateway\n .HP\n-\\fB\\-whitelistrelay\\fR\n-.IP\n-Accept relayed transactions received from whitelisted peers even when\n-not relaying transactions (default: 1)\n-.HP\n-\\fB\\-whitelistforcerelay\\fR\n-.IP\n-Force relay of transactions from whitelisted peers even if they violate\n-local relay policy (default: 1)\n-.HP\n \\fB\\-maxuploadtarget=\\fR<n>\n .IP\n Tries to keep outbound traffic under the given target (in MiB per 24h),\n@@ -281,13 +269,21 @@ Do not load the wallet and disable wallet RPC calls\n .HP\n \\fB\\-keypool=\\fR<n>\n .IP\n-Set key pool size to <n> (default: 100)\n+Set key pool size to <n> (default: 1000)\n .HP\n \\fB\\-fallbackfee=\\fR<amt>\n .IP\n A fee rate (in BTC/kB) that will be used when fee estimation has\n insufficient data (default: 0.0002)\n .HP\n+\\fB\\-discardfee=\\fR<amt>\n+.IP\n+The fee rate (in BTC/kB) that indicates your tolerance for discarding\n+change by adding it to the fee (default: 0.0001). Note: An output\n+is discarded if it is dust at this rate, but we will always\n+discard up to the dust relay fee and a discard fee above that is\n+limited by the fee estimate for the longest target\n+.HP\n \\fB\\-mintxfee=\\fR<amt>\n .IP\n Fees (in BTC/kB) smaller than this are considered zero fee for\n@@ -375,10 +371,16 @@ Append comment to the user agent string\n .IP\n Output debugging information (default: 0, supplying <category> is\n optional). If <category> is not supplied or if <category> = 1,\n-output all debugging information.<category> can be: addrman,\n-alert, bench, cmpctblock, coindb, db, http, libevent, lock,\n-mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc,\n-selectcoins, tor, zmq.\n+output all debugging information. <category> can be: net, tor,\n+mempool, http, bench, zmq, db, rpc, estimatefee, addrman,\n+selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej,\n+libevent, coindb, qt, leveldb.\n+.HP\n+\\fB\\-debugexclude=\\fR<category>\n+.IP\n+Exclude debugging information for a category. Can be used in conjunction\n+with \\fB\\-debug\\fR=\\fI\\,1\\/\\fR to output debug logs for all categories except one\n+or more specified categories.\n .HP\n \\fB\\-help\\-debug\\fR\n .IP\n@@ -392,11 +394,6 @@ Include IP addresses in debug output (default: 0)\n .IP\n Prepend debug output with timestamp (default: 1)\n .HP\n-\\fB\\-minrelaytxfee=\\fR<amt>\n-.IP\n-Fees (in BTC/kB) smaller than this are considered zero fee for relaying,\n-mining and transaction creation (default: 0.00001)\n-.HP\n \\fB\\-maxtxfee=\\fR<amt>\n .IP\n Maximum total fees (in BTC) to use in a single wallet transaction or raw\n@@ -436,6 +433,21 @@ Maximum size of data in data carrier transactions we relay and mine\n \\fB\\-mempoolreplacement\\fR\n .IP\n Enable transaction replacement in the memory pool (default: 1)\n+.HP\n+\\fB\\-minrelaytxfee=\\fR<amt>\n+.IP\n+Fees (in BTC/kB) smaller than this are considered zero fee for relaying,\n+mining and transaction creation (default: 0.00001)\n+.HP\n+\\fB\\-whitelistrelay\\fR\n+.IP\n+Accept relayed transactions received from whitelisted peers even when\n+not relaying transactions (default: 1)\n+.HP\n+\\fB\\-whitelistforcerelay\\fR\n+.IP\n+Force relay of transactions from whitelisted peers even if they violate\n+local relay policy (default: 1)\n .PP\n Block creation options:\n .HP\n@@ -447,11 +459,6 @@ Set maximum BIP141 block weight (default: 3000000)\n .IP\n Set maximum block size in bytes (default: 750000)\n .HP\n-\\fB\\-blockprioritysize=\\fR<n>\n-.IP\n-Set maximum size of high\\-priority/low\\-fee transactions in bytes\n-(default: 0)\n-.HP\n \\fB\\-blockmintxfee=\\fR<amt>\n .IP\n Set lowest fee rate (in BTC/kB) for transactions to be included in block\n@@ -467,11 +474,14 @@ Accept command line and JSON\\-RPC commands\n .IP\n Accept public REST requests (default: 0)\n .HP\n-\\fB\\-rpcbind=\\fR<addr>\n+\\fB\\-rpcbind=\\fR<addr>[:port]\n .IP\n-Bind to given address to listen for JSON\\-RPC connections. Use\n-[host]:port notation for IPv6. This option can be specified\n-multiple times (default: bind to all interfaces)\n+Bind to given address to listen for JSON\\-RPC connections. This option is\n+ignored unless \\fB\\-rpcallowip\\fR is also passed. Port is optional and\n+overrides \\fB\\-rpcport\\fR. Use [host]:port notation for IPv6. This\n+option can be specified multiple times (default: 127.0.0.1 and\n+::1 i.e., localhost, or if \\fB\\-rpcallowip\\fR has been specified,\n+0.0.0.0 and :: i.e., all addresses)\n .HP\n \\fB\\-rpccookiefile=\\fR<loc>\n .IP\n@@ -506,6 +516,11 @@ single IP (e.g. 1.2.3.4), a network/netmask (e.g.\n 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This\n option can be specified multiple times\n .HP\n+\\fB\\-rpcserialversion\\fR\n+.IP\n+Sets the serialization of raw transaction or block hex returned in\n+non\\-verbose mode, non\\-segwit(0) or segwit(1) (default: 1)\n+.HP\n \\fB\\-rpcthreads=\\fR<n>\n .IP\n Set the number of threads to service RPC calls (default: 4)"
      }
    ]
  },
  {
    "sha": "f266f2668bf8fd73015bf8265f0d00f5e858b577",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjY2ZjI2NjhiZjhmZDczMDE1YmY4MjY1ZjBkMDBmNWU4NThiNTc3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-15T13:37:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-15T13:38:06Z"
      },
      "message": "qt: Translations update pre-0.15.0.1\n\nTree-SHA512: 942fbba8a959ec5430afeecbb663731944fd646fa3b997252e599d835faff12f329d1b70509b161275c3c88845de031357c8317d7f7c801e24be488912cf4035",
      "tree": {
        "sha": "d4e7dbba654f46a3b56466a02845879547f92cb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4e7dbba654f46a3b56466a02845879547f92cb4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f266f2668bf8fd73015bf8265f0d00f5e858b577",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZu9e+AAoJEB5K7WKYbNJdhukH/A6tg3BTjQ7TxqTK59X1mqTe\nlnaJ4VowZ5Utzrj4I8VfKoT/K2/7zLd/PSk9gIft0LBXs1pKC0jAWBwzpZDCKgiR\nYHwnspF5LoGkz1fO9sXwBqFxDIFASqLqQE89+UYlxG5TdV3gjZVprhNZQiWTLeTH\nllTzZSGXRb2YOimDh8RUKjslHU087JnCSvCJvc8qPs4u/XUHETCRHZjeJfmUVvaQ\nzxEwEecXU43m50Eg5KDHlIeWvFaW2Ym9NGjABZx/fokLr6FQcJKxldk4k1BMEES1\n2WkfYg1D59+FwUXiPqQDYi7PwvJfTUjY9j9TxpVIZiZxI8N2Vs2bismRd8jNjHk=\n=PXkV\n-----END PGP SIGNATURE-----",
        "payload": "tree d4e7dbba654f46a3b56466a02845879547f92cb4\nparent 7123b95bea5b4bb9419ecab316adaca5ed1ef1bd\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1505482642 +0000\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1505482686 +0200\n\nqt: Translations update pre-0.15.0.1\n\nTree-SHA512: 942fbba8a959ec5430afeecbb663731944fd646fa3b997252e599d835faff12f329d1b70509b161275c3c88845de031357c8317d7f7c801e24be488912cf4035\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f266f2668bf8fd73015bf8265f0d00f5e858b577",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f266f2668bf8fd73015bf8265f0d00f5e858b577",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f266f2668bf8fd73015bf8265f0d00f5e858b577/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7123b95bea5b4bb9419ecab316adaca5ed1ef1bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7123b95bea5b4bb9419ecab316adaca5ed1ef1bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7123b95bea5b4bb9419ecab316adaca5ed1ef1bd"
      }
    ],
    "stats": {
      "total": 2017,
      "additions": 1897,
      "deletions": 120
    },
    "files": [
      {
        "sha": "d6f4ee2f744ce8f3621d757c9399505a709589d9",
        "filename": "src/qt/locale/bitcoin_de.ts",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_de.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_de.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_de.ts?ref=f266f2668bf8fd73015bf8265f0d00f5e858b577",
        "patch": "@@ -3067,7 +3067,7 @@\n     </message>\n     <message>\n         <source>Accept relayed transactions received from whitelisted peers even when not relaying transactions (default: %d)</source>\n-        <translation>Geben Sie immer die Transaktionen, die Sie von freigegebenen Peers erhalten haben, weiter (Voreinstellung: %d)</translation>\n+        <translation>Immer \u00fcbermittelte Transaktionen von freigegebenen Peers akzeptieren, auch wenn keine Transaktionen \u00fcbermittelt werden (Standard: %d)</translation>\n     </message>\n     <message>\n         <source>Bind to given address and always listen on it. Use [host]:port notation for IPv6</source>"
      },
      {
        "sha": "aaeccb825969fd93d6d6748da1f1f9f16ba80b17",
        "filename": "src/qt/locale/bitcoin_es_ES.ts",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_es_ES.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_es_ES.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_es_ES.ts?ref=f266f2668bf8fd73015bf8265f0d00f5e858b577",
        "patch": "@@ -3,43 +3,43 @@\n     <name>AddressBookPage</name>\n     <message>\n         <source>Right-click to edit address or label</source>\n-        <translation>Haz clic derecho para editar la direcci\u00f3n o etiqueta</translation>\n+        <translation>Haga clic en el bot\u00f3n derecho para editar la direcci\u00f3n o etiqueta</translation>\n     </message>\n     <message>\n         <source>Create a new address</source>\n-        <translation>Crear una nueva direcci\u00f3n</translation>\n+        <translation>Cree una nueva direcci\u00f3n</translation>\n     </message>\n     <message>\n         <source>&amp;New</source>\n-        <translation>&amp;Nuevo</translation>\n+        <translation> Y Nuevo</translation>\n     </message>\n     <message>\n         <source>Copy the currently selected address to the system clipboard</source>\n-        <translation>Copiar la direcci\u00f3n seleccionada al portapapeles del sistema</translation>\n+        <translation>Copie la direcci\u00f3n seleccionada al portapapeles del sistema</translation>\n     </message>\n     <message>\n         <source>&amp;Copy</source>\n-        <translation>&amp;Copiar</translation>\n+        <translation>Y Copiar</translation>\n     </message>\n     <message>\n         <source>C&amp;lose</source>\n         <translation>C&amp;errar</translation>\n     </message>\n     <message>\n         <source>Delete the currently selected address from the list</source>\n-        <translation>Eliminar la direcci\u00f3n seleccionada de la lista</translation>\n+        <translation>Elimine la direcci\u00f3n seleccionada de la lista</translation>\n     </message>\n     <message>\n         <source>Export the data in the current tab to a file</source>\n-        <translation>Exportar los datos en la ficha actual a un archivo</translation>\n+        <translation>Exporte los datos en la ficha actual a un archivo</translation>\n     </message>\n     <message>\n         <source>&amp;Export</source>\n-        <translation>&amp;Exportar</translation>\n+        <translation>Y Exportar</translation>\n     </message>\n     <message>\n         <source>&amp;Delete</source>\n-        <translation>&amp;Eliminar</translation>\n+        <translation>Y Eliminar</translation>\n     </message>\n     <message>\n         <source>Choose the address to send coins to</source>\n@@ -55,15 +55,15 @@\n     </message>\n     <message>\n         <source>Sending addresses</source>\n-        <translation>Enviando direcciones</translation>\n+        <translation>Direcciones para hacer pagos</translation>\n     </message>\n     <message>\n         <source>Receiving addresses</source>\n-        <translation>Recibiendo direcciones</translation>\n+        <translation>Direcciones para recibir pagos</translation>\n     </message>\n     <message>\n         <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n-        <translation>Estas son sus direcciones Bitcoin para enviar pagos. Verifique siempre la cantidad y la direcci\u00f3n de recepci\u00f3n antes de enviar monedas.</translation>\n+        <translation>Estas son sus direcciones Bitcoin para enviar pagos. Verifique siempre la cantidad y la direcci\u00f3n de destino antes de enviar monedas.</translation>\n     </message>\n     <message>\n         <source>These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.</source>\n@@ -87,15 +87,15 @@\n     </message>\n     <message>\n         <source>Comma separated file (*.csv)</source>\n-        <translation>Archivo separado de coma (*.csv)</translation>\n+        <translation>Archivo separado mediante coma (*.csv)</translation>\n     </message>\n     <message>\n         <source>Exporting Failed</source>\n-        <translation>Fall\u00f3 la exportaci\u00f3n</translation>\n+        <translation>No se ha podido completar la exportaci\u00f3n</translation>\n     </message>\n     <message>\n         <source>There was an error trying to save the address list to %1. Please try again.</source>\n-        <translation>Hab\u00eda un error intentando guardar la lista de direcciones en %1. Por favor int\u00e9ntelo de nuevo.</translation>\n+        <translation>Se ha producido un error intentando guardar la lista de direcciones en %1. Por favor int\u00e9ntelo de nuevo.</translation>\n     </message>\n </context>\n <context>\n@@ -117,15 +117,15 @@\n     <name>AskPassphraseDialog</name>\n     <message>\n         <source>Passphrase Dialog</source>\n-        <translation>Di\u00e1logo de contrase\u00f1a</translation>\n+        <translation>Cuadro de di\u00e1logo de la frase de contrase\u00f1a</translation>\n     </message>\n     <message>\n         <source>Enter passphrase</source>\n-        <translation>Introducir contrase\u00f1a</translation>\n+        <translation>Introduzca frase de contrase\u00f1a</translation>\n     </message>\n     <message>\n         <source>New passphrase</source>\n-        <translation>Nueva contrase\u00f1a</translation>\n+        <translation>Repita la nueva frase de contrase\u00f1a</translation>\n     </message>\n     <message>\n         <source>Repeat new passphrase</source>\n@@ -137,7 +137,7 @@\n     </message>\n     <message>\n         <source>Encrypt wallet</source>\n-        <translation>Monedero encriptado</translation>\n+        <translation>Encripte el Monedero</translation>\n     </message>\n     <message>\n         <source>This operation needs your wallet passphrase to unlock the wallet.</source>"
      },
      {
        "sha": "15afc2e665c5da70dbe1ecd9ae0daea6285eaa6e",
        "filename": "src/qt/locale/bitcoin_hu.ts",
        "status": "modified",
        "additions": 1531,
        "deletions": 90,
        "changes": 1621,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_hu.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_hu.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_hu.ts?ref=f266f2668bf8fd73015bf8265f0d00f5e858b577",
        "patch": "@@ -41,18 +41,74 @@\n         <source>&amp;Delete</source>\n         <translation>&amp;T\u00f6rl\u00e9s</translation>\n     </message>\n+    <message>\n+        <source>Choose the address to send coins to</source>\n+        <translation>V\u00e1lassza ki a c\u00edmet k\u00fcld\u00e9shez</translation>\n+    </message>\n+    <message>\n+        <source>Choose the address to receive coins with</source>\n+        <translation>V\u00e1lassza ki a c\u00edmet fogad\u00e1shoz</translation>\n+    </message>\n+    <message>\n+        <source>C&amp;hoose</source>\n+        <translation>K&amp;iv\u00e1laszt</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>K\u00fcld\u00e9si c\u00edm</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>Fogad\u00e1si c\u00edm</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n+        <translation>Ezek a Bitcoin c\u00edmeid kifizet\u00e9sek k\u00fcld\u00e9s\u00e9hez. Mind\u00edg ellen\u0151rizd az \u00f6sszeget \u00e9s a fogad\u00f3 c\u00edmet miel\u0151tt coinokat k\u00fclden\u00e9l.</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.</source>\n+        <translation>Ezek a Bitcoin c\u00edmeid kifizet\u00e9sek fogad\u00e1s\u00e1hoz. Aj\u00e1nlott \u00faj c\u00edmet haszn\u00e1lni minden \u00faj fogad\u00e1shoz.</translation>\n+    </message>\n     <message>\n         <source>&amp;Copy Address</source>\n         <translation>&amp;C\u00edm m\u00e1sol\u00e1sa</translation>\n     </message>\n+    <message>\n+        <source>Copy &amp;Label</source>\n+        <translation>M\u00e1sol\u00e1s \u00e9s C\u00edmk\u00e9z\u00e9s</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Edit</source>\n+        <translation>Szerkeszt\u00e9s</translation>\n+    </message>\n+    <message>\n+        <source>Export Address List</source>\n+        <translation>C\u00edmlista export\u00e1l\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Comma separated file (*.csv)</source>\n+        <translation>Vessz\u0151vel elv\u00e1lasztott adatokat tartalmaz\u00f3 f\u00e1jl</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Hiba az export\u00e1l\u00e1s sor\u00e1n</translation>\n+    </message>\n     </context>\n <context>\n     <name>AddressTableModel</name>\n     <message>\n         <source>Label</source>\n         <translation>C\u00edmke</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Address</source>\n+        <translation>C\u00edm</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(nincs c\u00edmke)</translation>\n+    </message>\n+</context>\n <context>\n     <name>AskPassphraseDialog</name>\n     <message>\n@@ -71,11 +127,96 @@\n         <source>Repeat new passphrase</source>\n         <translation>\u00daj jelsz\u00f3 \u00fajra</translation>\n     </message>\n+    <message>\n+        <source>Enter the new passphrase to the wallet.&lt;br/&gt;Please use a passphrase of &lt;b&gt;ten or more random characters&lt;/b&gt;, or &lt;b&gt;eight or more words&lt;/b&gt;.</source>\n+        <translation>G\u00e9pelje be az \u00faj kulcsmondatot a p\u00e9nzt\u00e1rc\u00e1hoz.&lt;br/&gt;\n+K\u00e9rem a kulcsmondatban haszn\u00e1ljon &lt;b&gt; t\u00edz vagy t\u00f6bb v\u00e9letlenszer\u0171 karaktert &lt;/b&gt;, vagy &lt;b&gt; nyolc vagy t\u00f6bb sz\u00f3t &lt;/b&gt;.</translation>\n+    </message>\n+    <message>\n+        <source>Encrypt wallet</source>\n+        <translation>T\u00e1rca titkos\u00edt\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>This operation needs your wallet passphrase to unlock the wallet.</source>\n+        <translation>Ehhez a m\u0171velethez sz\u00fcks\u00e9g van a t\u00e1rc\u00e1hoz tartoz\u00f3 kulcsmondathoz, hogy kinyithassa azt.</translation>\n+    </message>\n+    <message>\n+        <source>Unlock wallet</source>\n+        <translation>T\u00e1rca kinyit\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>This operation needs your wallet passphrase to decrypt the wallet.</source>\n+        <translation>Ehhez a m\u0171velethez sz\u00fcks\u00e9g van a t\u00e1rc\u00e1hoz tartoz\u00f3 kulcsmondathoz, hogy a titkos\u00edt\u00e1s megsz\u0171nj\u00f6n.</translation>\n+    </message>\n     <message>\n         <source>Decrypt wallet</source>\n         <translation>T\u00e1rca dek\u00f3dol\u00e1sa</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Change passphrase</source>\n+        <translation>Kulcsmondat megv\u00e1ltoztat\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Enter the old passphrase and new passphrase to the wallet.</source>\n+        <translation>G\u00e9pelje be a t\u00e1rc\u00e1hoz tartoz\u00f3 r\u00e9gi, \u00e9s \u00faj kulcsmondatot</translation>\n+    </message>\n+    <message>\n+        <source>Confirm wallet encryption</source>\n+        <translation>T\u00e1rca titkos\u00edt\u00e1s\u00e1nak meger\u0151s\u00edt\u00e9se</translation>\n+    </message>\n+    <message>\n+        <source>Warning: If you encrypt your wallet and lose your passphrase, you will &lt;b&gt;LOSE ALL OF YOUR BITCOINS&lt;/b&gt;!</source>\n+        <translation>Figyelem: Ha titkos\u00edtja a t\u00e1rc\u00e1j\u00e1t \u00e9s elvesz\u00edti a jelszav\u00e1t, akkor &lt;b&gt;AZ \u00d6SSZES BITCOINJA ELVESZIK&lt;/b&gt;!</translation>\n+    </message>\n+    <message>\n+        <source>Are you sure you wish to encrypt your wallet?</source>\n+        <translation>Biztosan titkos\u00edtani akarja a t\u00e1rc\u00e1t?</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encrypted</source>\n+        <translation>T\u00e1rca titkos\u00edtva</translation>\n+    </message>\n+    <message>\n+        <source>%1 will close now to finish the encryption process. Remember that encrypting your wallet cannot fully protect your bitcoins from being stolen by malware infecting your computer.</source>\n+        <translation>A %1 most bez\u00e1r, hogy befejezze a titkos\u00edt\u00e1st. Ne feledje, hogy a t\u00e1rca titkos\u00edt\u00e1sa nem ny\u00fajt teljes v\u00e9delmet azzal szemben, hogy k\u00e1rt\u00e9kony programok megfert\u0151zz\u00e9k a sz\u00e1m\u00edt\u00f3g\u00e9p\u00e9t \u00e9s ellopj\u00e1k a bitcoinjait.</translation>\n+    </message>\n+    <message>\n+        <source>IMPORTANT: Any previous backups you have made of your wallet file should be replaced with the newly generated, encrypted wallet file. For security reasons, previous backups of the unencrypted wallet file will become useless as soon as you start using the new, encrypted wallet.</source>\n+        <translation>FONTOS: A t\u00e1rca-f\u00e1jl minden kor\u00e1bbi biztons\u00e1gi ment\u00e9s\u00e9t cser\u00e9lje le ezzel az \u00fajonnan gener\u00e1lt, titkos\u00edtott t\u00e1rca-f\u00e1jllal. Biztons\u00e1gi okokb\u00f3l a t\u00e1rca-f\u00e1jl kor\u00e1bbi, titkos\u00edt\u00e1s n\u00e9lk\u00fcli ment\u00e9sei haszn\u00e1lhatatlann\u00e1 v\u00e1lnak, amint elkezdi haszn\u00e1lni az \u00faj, titkos\u00edtott t\u00e1rc\u00e1t.</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encryption failed</source>\n+        <translation>A t\u00e1rca titkos\u00edt\u00e1sa sikertelen.</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encryption failed due to an internal error. Your wallet was not encrypted.</source>\n+        <translation>T\u00e1rca titkos\u00edt\u00e1sa bels\u0151 hiba miatt sikertelen. A t\u00e1rc\u00e1d nem lett titkos\u00edtva.</translation>\n+    </message>\n+    <message>\n+        <source>The supplied passphrases do not match.</source>\n+        <translation>A megadott jelszavak nem egyeznek.</translation>\n+    </message>\n+    <message>\n+        <source>Wallet unlock failed</source>\n+        <translation>T\u00e1rca megnyit\u00e1sa sikertelen</translation>\n+    </message>\n+    <message>\n+        <source>The passphrase entered for the wallet decryption was incorrect.</source>\n+        <translation>A t\u00e1rca titkos\u00edt\u00e1s\u00e1nak felold\u00e1s\u00e1hoz megadott jelsz\u00f3 helytelen.</translation>\n+    </message>\n+    <message>\n+        <source>Wallet decryption failed</source>\n+        <translation>T\u00e1rca titkos\u00edt\u00e1s\u00e1nak felold\u00e1sa sikertelen</translation>\n+    </message>\n+    <message>\n+        <source>Wallet passphrase was successfully changed.</source>\n+        <translation>T\u00e1rca jelszava sikeresen megv\u00e1ltoztatva.</translation>\n+    </message>\n+    <message>\n+        <source>Warning: The Caps Lock key is on!</source>\n+        <translation>Vigy\u00e1zat: a Caps Lock be van kapcsolva!</translation>\n+    </message>\n+</context>\n <context>\n     <name>BanTableModel</name>\n     <message>\n@@ -129,6 +270,10 @@\n         <source>&amp;About %1</source>\n         <translation>&amp;A %1-r\u00f3l</translation>\n     </message>\n+    <message>\n+        <source>Show information about %1</source>\n+        <translation>%1 inform\u00e1ci\u00f3 megjelen\u00edt\u00e9se</translation>\n+    </message>\n     <message>\n         <source>About &amp;Qt</source>\n         <translation>A &amp;Qt-r\u00f3l</translation>\n@@ -141,6 +286,10 @@\n         <source>&amp;Options...</source>\n         <translation>&amp;Opci\u00f3k...</translation>\n     </message>\n+    <message>\n+        <source>Modify configuration options for %1</source>\n+        <translation>%1 be\u00e1ll\u00edt\u00e1sok m\u00f3dos\u00edt\u00e1sa</translation>\n+    </message>\n     <message>\n         <source>&amp;Encrypt Wallet...</source>\n         <translation>T\u00e1rca &amp;titkos\u00edt\u00e1sa...</translation>\n@@ -165,6 +314,18 @@\n         <source>Open &amp;URI...</source>\n         <translation>&amp;URI azonos\u00edt\u00f3 megnyit\u00e1sa...</translation>\n     </message>\n+    <message>\n+        <source>Click to disable network activity.</source>\n+        <translation>Kattintson a h\u00e1l\u00f3zati tev\u00e9kenys\u00e9g letilt\u00e1s\u00e1hoz.</translation>\n+    </message>\n+    <message>\n+        <source>Network activity disabled.</source>\n+        <translation>H\u00e1l\u00f3zati tev\u00e9kenys\u00e9g letiltva.</translation>\n+    </message>\n+    <message>\n+        <source>Click to enable network activity again.</source>\n+        <translation>Kattintson a h\u00e1l\u00f3zati tev\u00e9kenys\u00e9g \u00fajb\u00f3li enged\u00e9lyez\u00e9s\u00e9hez.</translation>\n+    </message>\n     <message>\n         <source>Reindexing blocks on disk...</source>\n         <translation>Lemezen l\u00e9v\u0151 blokkok \u00fajraindexel\u00e9se...</translation>\n@@ -269,6 +430,14 @@\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation><numerusform>%n akt\u00edv kapcsolat a Bitcoin h\u00e1l\u00f3zathoz</numerusform><numerusform>%n akt\u00edv kapcsolat a Bitcoin h\u00e1l\u00f3zathoz</numerusform></translation>\n     </message>\n+    <message>\n+        <source>Indexing blocks on disk...</source>\n+        <translation>Lemezen l\u00e9v\u0151 blokkok indexel\u00e9se...</translation>\n+    </message>\n+    <message>\n+        <source>Processing blocks on disk...</source>\n+        <translation>Lemezen l\u00e9v\u0151 blokkok feldolgoz\u00e1sa...</translation>\n+    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>%n blokk feldolgozva a tranzakci\u00f3 el\u0151zm\u00e9nyb\u0151l.</numerusform><numerusform>%n blokk feldolgozva a tranzakci\u00f3 el\u0151zm\u00e9nyb\u0151l.</numerusform></translation>\n@@ -301,6 +470,18 @@\n         <source>Up to date</source>\n         <translation>Naprak\u00e9sz</translation>\n     </message>\n+    <message>\n+        <source>Show the %1 help message to get a list with possible Bitcoin command-line options</source>\n+        <translation>A %1 s\u00fag\u00f3 megjelen\u00edt\u00e9se a Bitcoin lehets\u00e9ges parancssori kapcsol\u00f3inak list\u00e1j\u00e1val</translation>\n+    </message>\n+    <message>\n+        <source>%1 client</source>\n+        <translation>%1 kliens</translation>\n+    </message>\n+    <message>\n+        <source>Connecting to peers...</source>\n+        <translation>Csatlakoz\u00e1s p\u00e1rokhoz...</translation>\n+    </message>\n     <message>\n         <source>Catching up...</source>\n         <translation>Friss\u00edt\u00e9s...</translation>\n@@ -343,6 +524,14 @@\n         <source>Incoming transaction</source>\n         <translation>Be\u00e9rkez\u0151 tranzakci\u00f3</translation>\n     </message>\n+    <message>\n+        <source>HD key generation is &lt;b&gt;enabled&lt;/b&gt;</source>\n+        <translation>HD kulcs gener\u00e1l\u00e1s &lt;b&gt;enged\u00e9lyezett&lt;/b&gt;</translation>\n+    </message>\n+    <message>\n+        <source>HD key generation is &lt;b&gt;disabled&lt;/b&gt;</source>\n+        <translation>HD kulcs gener\u00e1l\u00e1s &lt;b&gt;tiltva&lt;/b&gt;</translation>\n+    </message>\n     <message>\n         <source>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;unlocked&lt;/b&gt;</source>\n         <translation>A t\u00e1rca &lt;b&gt;titkos\u00edtva&lt;/b&gt; \u00e9s jelenleg &lt;b&gt;nyitva&lt;/b&gt;.</translation>\n@@ -351,7 +540,11 @@\n         <source>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;locked&lt;/b&gt;</source>\n         <translation>T\u00e1rca &lt;b&gt;k\u00f3dolva&lt;/b&gt; \u00e9s jelenleg &lt;b&gt;z\u00e1rva&lt;/b&gt;.</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>A fatal error occurred. Bitcoin can no longer continue safely and will quit.</source>\n+        <translation>V\u00e9gzetes hiba t\u00f6rt\u00e9nt. A Bitcoin m\u0171k\u00f6d\u00e9se nem biztons\u00e1gos \u00e9s hamarosan le\u00e1ll.</translation>\n+    </message>\n+</context>\n <context>\n     <name>CoinControlDialog</name>\n     <message>\n@@ -422,7 +615,83 @@\n         <source>Confirmed</source>\n         <translation>Meger\u0151s\u00edtve</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Copy address</source>\n+        <translation>C\u00edm m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Copy label</source>\n+        <translation>C\u00edmke m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Copy amount</source>\n+        <translation>\u00d6sszeg m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Copy transaction ID</source>\n+        <translation>Tranzakci\u00f3 azonos\u00edt\u00f3 m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Lock unspent</source>\n+        <translation>Elk\u00f6ltetlen \u00f6sszeg z\u00e1rol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Unlock unspent</source>\n+        <translation>Elk\u00f6ltetlen \u00f6sszeg z\u00e1rol\u00e1s\u00e1nak a felold\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Copy quantity</source>\n+        <translation>Mennyis\u00e9g m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Copy fee</source>\n+        <translation>D\u00edj m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Copy bytes</source>\n+        <translation>Byte-ok m\u00e1sol\u00e1sa </translation>\n+    </message>\n+    <message>\n+        <source>Copy dust</source>\n+        <translation>Porszemek m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Copy change</source>\n+        <translation>Visszaj\u00e1r\u00f3 m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>(%1 locked)</source>\n+        <translation>(%1 z\u00e1rolva)</translation>\n+    </message>\n+    <message>\n+        <source>yes</source>\n+        <translation>igen</translation>\n+    </message>\n+    <message>\n+        <source>no</source>\n+        <translation>nem</translation>\n+    </message>\n+    <message>\n+        <source>This label turns red if any recipient receives an amount smaller than the current dust threshold.</source>\n+        <translation>Ez a c\u00edmke pirosra v\u00e1ltozik, ha b\u00e1rmely fogad\u00f3hoz, a porszem hat\u00e1r\u00e9rt\u00e9kn\u00e9l kevesebb \u00f6sszeg \u00e9rkezik.</translation>\n+    </message>\n+    <message>\n+        <source>Can vary +/- %1 satoshi(s) per input.</source>\n+        <translation>Megadott \u00e9rt\u00e9kenk\u00e9nt  +/- %1 satoshi-val v\u00e1ltozhat.</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(nincs c\u00edmke)</translation>\n+    </message>\n+    <message>\n+        <source>change from %1 (%2)</source>\n+        <translation>visszaj\u00e1r\u00f3 %1-b\u0151l (%2)</translation>\n+    </message>\n+    <message>\n+        <source>(change)</source>\n+        <translation>(visszaj\u00e1r\u00f3)</translation>\n+    </message>\n+</context>\n <context>\n     <name>EditAddressDialog</name>\n     <message>\n@@ -445,7 +714,39 @@\n         <source>&amp;Address</source>\n         <translation>&amp;C\u00edm</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>New receiving address</source>\n+        <translation>\u00daj fogad\u00f3 c\u00edm</translation>\n+    </message>\n+    <message>\n+        <source>New sending address</source>\n+        <translation>\u00daj k\u00fcld\u0151 c\u00edm</translation>\n+    </message>\n+    <message>\n+        <source>Edit receiving address</source>\n+        <translation>Fogad\u00f3 c\u00edm szerkeszt\u00e9se</translation>\n+    </message>\n+    <message>\n+        <source>Edit sending address</source>\n+        <translation>K\u00fcld\u0151 c\u00edm szerkeszt\u00e9se</translation>\n+    </message>\n+    <message>\n+        <source>The entered address \"%1\" is not a valid Bitcoin address.</source>\n+        <translation>A megadott \"%1\" c\u00edm nem egy \u00e9rv\u00e9nyes Bitcoin-c\u00edm.</translation>\n+    </message>\n+    <message>\n+        <source>The entered address \"%1\" is already in the address book.</source>\n+        <translation>A megadott \"%1\" c\u00edm m\u00e1r szerepel a c\u00edmjegyz\u00e9kben.</translation>\n+    </message>\n+    <message>\n+        <source>Could not unlock wallet.</source>\n+        <translation>T\u00e1rca felold\u00e1sa sikertelen</translation>\n+    </message>\n+    <message>\n+        <source>New key generation failed.</source>\n+        <translation>\u00daj kulcs gener\u00e1l\u00e1sa sikertelen.</translation>\n+    </message>\n+</context>\n <context>\n     <name>FreespaceChecker</name>\n     <message>\n@@ -475,6 +776,10 @@\n         <source>(%1-bit)</source>\n         <translation>(%1-bit)</translation>\n     </message>\n+    <message>\n+        <source>About %1</source>\n+        <translation>A %1 -r\u00f3l</translation>\n+    </message>\n     <message>\n         <source>Command-line options</source>\n         <translation>Parancssoros opci\u00f3k</translation>\n@@ -487,13 +792,49 @@\n         <source>command-line options</source>\n         <translation>parancssoros opci\u00f3k</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>UI Options:</source>\n+        <translation>Kezel\u0151fel\u00fclet be\u00e1ll\u00edt\u00e1sai:</translation>\n+    </message>\n+    <message>\n+        <source>Choose data directory on startup (default: %u)</source>\n+        <translation>Adatk\u00f6nyvt\u00e1r kiv\u00e1laszt\u00e1sa indul\u00e1skor (alap\u00e9rtelmezett:  %u)</translation>\n+    </message>\n+    <message>\n+        <source>Set language, for example \"de_DE\" (default: system locale)</source>\n+        <translation>Nyelvbe\u00e1ll\u00edt\u00e1s, p\u00e9ld\u00e1ul \"de_DE\" (alap\u00e9rtelmezett: rendszer nyelve)</translation>\n+    </message>\n+    <message>\n+        <source>Start minimized</source>\n+        <translation>Ind\u00edt\u00e1s lekicsiny\u00edtve</translation>\n+    </message>\n+    <message>\n+        <source>Set SSL root certificates for payment request (default: -system-)</source>\n+        <translation>SLL gy\u00f6k\u00e9r-igazol\u00e1sok megad\u00e1sa fizet\u00e9si k\u00e9relmekhez (alap\u00e9rtelmezett: -system-)</translation>\n+    </message>\n+    <message>\n+        <source>Show splash screen on startup (default: %u)</source>\n+        <translation>Ind\u00edt\u00f3k\u00e9perny\u0151 mutat\u00e1sa indul\u00e1skor (alap\u00e9rtelmezett:  %u)</translation>\n+    </message>\n+    <message>\n+        <source>Reset all settings changed in the GUI</source>\n+        <translation>A grafikus fel\u00fclet \u00f6sszes megv\u00e1ltoztatott be\u00e1ll\u00edt\u00e1s\u00e1nak a vissza\u00e1ll\u00edt\u00e1sa</translation>\n+    </message>\n+</context>\n <context>\n     <name>Intro</name>\n     <message>\n         <source>Welcome</source>\n         <translation>\u00dcdv\u00f6zl\u00fcnk</translation>\n     </message>\n+    <message>\n+        <source>Welcome to %1.</source>\n+        <translation>\u00dcdv\u00f6zl\u00fcnk a %1 -ban.</translation>\n+    </message>\n+    <message>\n+        <source>As this is the first time the program is launched, you can choose where %1 will store its data.</source>\n+        <translation>Mivel ez a program els\u0151 indul\u00e1sa, megv\u00e1ltoztathatja, hogy a %1 hova mentse az adatokat.</translation>\n+    </message>\n     <message>\n         <source>Use the default data directory</source>\n         <translation>Az alap\u00e9rtelmezett adat k\u00f6nyvt\u00e1r haszn\u00e1lata</translation>\n@@ -521,15 +862,51 @@\n         <source>Form</source>\n         <translation>\u0170rlap</translation>\n     </message>\n+    <message>\n+        <source>Recent transactions may not yet be visible, and therefore your wallet's balance might be incorrect. This information will be correct once your wallet has finished synchronizing with the bitcoin network, as detailed below.</source>\n+        <translation>A legut\u00f3bbi tranzakci\u00f3k m\u00e9g lehet, hogy nem l\u00e1tszanak, ez\u00e9rt el\u0151fordulhat, hogy a p\u00e9nzt\u00e1rca egyenlege nem a val\u00f3s \u00e1llapotot mutatja. Ha a p\u00e9nzt\u00e1rca befejezte a szinkroniz\u00e1ci\u00f3t a bitcoin h\u00e1l\u00f3zattal, ut\u00e1na m\u00e1r az aktu\u00e1lis egyenleget fogja mutatni, amint alant r\u00e9szletesen l\u00e1tszik.</translation>\n+    </message>\n+    <message>\n+        <source>Attempting to spend bitcoins that are affected by not-yet-displayed transactions will not be accepted by the network.</source>\n+        <translation>A h\u00e1l\u00f3zat nem fogadja el azoknak a bitcoinoknak az elk\u00f6lt\u00e9s\u00e9t, amelyek \u00e9rintettek a m\u00e9g nem l\u00e1tsz\u00f3d\u00f3 tranzakci\u00f3kban.</translation>\n+    </message>\n+    <message>\n+        <source>Number of blocks left</source>\n+        <translation>H\u00e1tral\u00e9v\u0151 blokkok sz\u00e1ma</translation>\n+    </message>\n+    <message>\n+        <source>Unknown...</source>\n+        <translation>Ismeretlen...</translation>\n+    </message>\n     <message>\n         <source>Last block time</source>\n         <translation>Utols\u00f3 blokk ideje</translation>\n     </message>\n+    <message>\n+        <source>Progress</source>\n+        <translation>Folyamat</translation>\n+    </message>\n+    <message>\n+        <source>Progress increase per hour</source>\n+        <translation>A folyamat el\u0151rehalad\u00e1sa \u00f3r\u00e1nk\u00e9nt</translation>\n+    </message>\n+    <message>\n+        <source>calculating...</source>\n+        <translation>sz\u00e1m\u00edt\u00e1s folyamatban...</translation>\n+    </message>\n+    <message>\n+        <source>Estimated time left until synced</source>\n+        <translation>Hozz\u00e1vet\u0151legesen a h\u00e1tral\u00e9v\u0151 id\u0151 a szinkroniz\u00e1ci\u00f3 befejez\u00e9s\u00e9ig</translation>\n+    </message>\n     <message>\n         <source>Hide</source>\n         <translation>Elrejt\u00e9s</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Unknown. Syncing Headers (%1)...</source>\n+        <translation>Ismeretlen. Fejl\u00e9cek szinkroniz\u00e1l\u00e1sa (%1)...</translation>\n+    </message>\n+</context>\n <context>\n     <name>OpenURIDialog</name>\n     <message>\n@@ -548,7 +925,11 @@\n         <source>Select payment request file</source>\n         <translation>Fizet\u00e9si k\u00e9relmi f\u00e1jl kiv\u00e1laszt\u00e1sa</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Select payment request file to open</source>\n+        <translation>V\u00e1lassza ki a megnyitni k\u00edv\u00e1nt fizet\u00e9si k\u00e9relem f\u00e1jlt</translation>\n+    </message>\n+</context>\n <context>\n     <name>OptionsDialog</name>\n     <message>\n@@ -559,6 +940,14 @@\n         <source>&amp;Main</source>\n         <translation>&amp;F\u0151</translation>\n     </message>\n+    <message>\n+        <source>Automatically start %1 after logging in to the system.</source>\n+        <translation>%1 automatikus ind\u00edt\u00e1sa  a rendszerbe val\u00f3 bel\u00e9p\u00e9s ut\u00e1n.</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Start %1 on system login</source>\n+        <translation>&amp;Induljon el a %1 a rendszerbe val\u00f3 bel\u00e9p\u00e9skor</translation>\n+    </message>\n     <message>\n         <source>Size of &amp;database cache</source>\n         <translation>A&amp;datb\u00e1zis gyors\u00edt\u00f3t\u00e1r m\u00e9rete</translation>\n@@ -567,6 +956,10 @@\n         <source>MB</source>\n         <translation>MB</translation>\n     </message>\n+    <message>\n+        <source>Number of script &amp;verification threads</source>\n+        <translation>A szkript &amp;igazol\u00e1si sz\u00e1lak sz\u00e1ma</translation>\n+    </message>\n     <message>\n         <source>Accept connections from outside</source>\n         <translation>K\u00fcls\u0151 kapcsolatok elfogad\u00e1sa</translation>\n@@ -579,10 +972,22 @@\n         <source>IP address of the proxy (e.g. IPv4: 127.0.0.1 / IPv6: ::1)</source>\n         <translation>A proxy IP c\u00edme (pl.: IPv4: 127.0.0.1 / IPv6: ::1)</translation>\n     </message>\n+    <message>\n+        <source>Minimize instead of exit the application when the window is closed. When this option is enabled, the application will be closed only after selecting Exit in the menu.</source>\n+        <translation>Az alkalmaz\u00e1sb\u00f3l val\u00f3 kil\u00e9p\u00e9s helyett az eszk\u00f6zt\u00e1rba kicsiny\u00edti az alkalmaz\u00e1st az ablak bez\u00e1r\u00e1sakor. Ez esetben az alkalmaz\u00e1s csak a Kil\u00e9p\u00e9s men\u00fcponttal z\u00e1rhat\u00f3 be.</translation>\n+    </message>\n+    <message>\n+        <source>Third party URLs (e.g. a block explorer) that appear in the transactions tab as context menu items. %s in the URL is replaced by transaction hash. Multiple URLs are separated by vertical bar |.</source>\n+        <translation>Harmadik f\u00e9lt\u0151l sz\u00e1rmaz\u00f3 URL-ek (pl. egy blokk felfedez\u0151) amelyek a tranzakci\u00f3s f\u00fcl\u00f6n jelennek meg mint a k\u00f6rnyezet\u00e9rz\u00e9keny men\u00fc t\u00e9telei. %s az URL-ben helyettes\u00edtve a tranzakci\u00f3s hash-el. T\u00f6bb URL eset\u00e9n, f\u00fcgg\u0151leges vonal v\u00e1lasztja el \u0151ket.</translation>\n+    </message>\n     <message>\n         <source>Third party transaction URLs</source>\n         <translation>Harmadik f\u00e9l tranzakci\u00f3 URL-ek</translation>\n     </message>\n+    <message>\n+        <source>Active command-line options that override above options:</source>\n+        <translation>Akt\u00edv parancssori be\u00e1ll\u00edt\u00e1sok, melyek fel\u00fcl\u00edrj\u00e1k a fenti be\u00e1ll\u00edt\u00e1sokat:</translation>\n+    </message>\n     <message>\n         <source>Reset all client options to default.</source>\n         <translation>Minden kliensbe\u00e1ll\u00edt\u00e1s alap\u00e9rtelmezettre \u00e1ll\u00edt\u00e1sa.</translation>\n@@ -595,6 +1000,10 @@\n         <source>&amp;Network</source>\n         <translation>&amp;H\u00e1l\u00f3zat</translation>\n     </message>\n+    <message>\n+        <source>(0 = auto, &lt;0 = leave that many cores free)</source>\n+        <translation>(0 = automatikus, &lt;0 = ennyi processzormagot hagyjon szabadon)</translation>\n+    </message>\n     <message>\n         <source>W&amp;allet</source>\n         <translation>T&amp;\u00e1rca</translation>\n@@ -603,6 +1012,18 @@\n         <source>Expert</source>\n         <translation>Szak\u00e9rt\u0151</translation>\n     </message>\n+    <message>\n+        <source>Enable coin &amp;control features</source>\n+        <translation>P\u00e9nzk\u00fcld\u00e9s be\u00e1ll\u00edt\u00e1sainak enged\u00e9lyez\u00e9se</translation>\n+    </message>\n+    <message>\n+        <source>If you disable the spending of unconfirmed change, the change from a transaction cannot be used until that transaction has at least one confirmation. This also affects how your balance is computed.</source>\n+        <translation>Ha letiltja a j\u00f3v\u00e1hagyatlan v\u00e1ltoz\u00e1sok elk\u00f6lt\u00e9s\u00e9t, akkor egy tranzakci\u00f3b\u00f3l sz\u00e1rmaz\u00f3 v\u00e1ltoz\u00e1st nem lehet haszn\u00e1lni, am\u00edg legal\u00e1bb egy j\u00f3v\u00e1hagy\u00e1s nem t\u00f6rt\u00e9nik. Ez befoly\u00e1solja az egyenleg\u00e9nek a kisz\u00e1m\u00edt\u00e1s\u00e1t is.</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Spend unconfirmed change</source>\n+        <translation>&amp;K\u00f6lt\u00e9se a a j\u00f3v\u00e1hagyatlan v\u00e1ltoz\u00e1snak</translation>\n+    </message>\n     <message>\n         <source>Automatically open the Bitcoin client port on the router. This only works when your router supports UPnP and it is enabled.</source>\n         <translation>A Bitcoin-kliens portj\u00e1nak automatikus megnyit\u00e1sa a routeren. Ez csak akkor m\u0171k\u00f6dik, ha a routered t\u00e1mogatja az UPnP-t \u00e9s az enged\u00e9lyezve is van rajta.</translation>\n@@ -615,6 +1036,10 @@\n         <source>Connect to the Bitcoin network through a SOCKS5 proxy.</source>\n         <translation>Csatlakoz\u00e1s a Bitcoin h\u00e1l\u00f3zat\u00e1hoz SOCKS5 proxyn kereszt\u00fcl</translation>\n     </message>\n+    <message>\n+        <source>&amp;Connect through SOCKS5 proxy (default proxy):</source>\n+        <translation>&amp;Kapcsol\u00f3d\u00e1s SOCKS5 proxyn kereszt\u00fcl (alap\u00e9rtelmezett proxy):</translation>\n+    </message>\n     <message>\n         <source>Proxy &amp;IP:</source>\n         <translation>Proxy &amp;IP:</translation>\n@@ -627,6 +1052,10 @@\n         <source>Port of the proxy (e.g. 9050)</source>\n         <translation>Proxy portja (pl.: 9050)</translation>\n     </message>\n+    <message>\n+        <source>Used for reaching peers via:</source>\n+        <translation>P\u00e1rok el\u00e9r\u00e9s\u00e9re haszn\u00e1ljuk ezen kereszt\u00fcl:</translation>\n+    </message>\n     <message>\n         <source>IPv4</source>\n         <translation>IPv4</translation>\n@@ -639,10 +1068,26 @@\n         <source>Tor</source>\n         <translation>Tor</translation>\n     </message>\n+    <message>\n+        <source>Connect to the Bitcoin network through a separate SOCKS5 proxy for Tor hidden services.</source>\n+        <translation>Csatlakoz\u00e1s a Bitcoin h\u00e1l\u00f3zathoz k\u00fcl\u00f6n SOCKS5 proxy haszn\u00e1lat\u00e1val a Tor rejtett szolg\u00e1ltat\u00e1sainak el\u00e9r\u00e9s\u00e9hez.</translation>\n+    </message>\n+    <message>\n+        <source>Use separate SOCKS5 proxy to reach peers via Tor hidden services:</source>\n+        <translation>M\u00e1s SOCKS5 proxy haszn\u00e1lata a p\u00e1rok el\u00e9r\u00e9s\u00e9hez, a Tor rejtett szolg\u00e1ltat\u00e1sain kereszt\u00fcl:</translation>\n+    </message>\n     <message>\n         <source>&amp;Window</source>\n         <translation>&amp;Ablak</translation>\n     </message>\n+    <message>\n+        <source>&amp;Hide the icon from the system tray.</source>\n+        <translation>&amp;Rejtse el az ikont a rendszer t\u00e1lc\u00e1r\u00f3l.</translation>\n+    </message>\n+    <message>\n+        <source>Hide tray icon</source>\n+        <translation>T\u00e1lcaikon elrejt\u00e9se</translation>\n+    </message>\n     <message>\n         <source>Show only a tray icon after minimizing the window.</source>\n         <translation>Kicsiny\u00edt\u00e9s ut\u00e1n csak eszk\u00f6zt\u00e1r-ikont mutass</translation>\n@@ -663,6 +1108,10 @@\n         <source>User Interface &amp;language:</source>\n         <translation>Felhaszn\u00e1l\u00f3fel\u00fclet nye&amp;lve:</translation>\n     </message>\n+    <message>\n+        <source>The user interface language can be set here. This setting will take effect after restarting %1.</source>\n+        <translation>A felhaszn\u00e1l\u00f3i fel\u00fclet nyelv\u00e9t tudja itt be\u00e1ll\u00edtani. Ez a be\u00e1ll\u00edt\u00e1s csak a %1 \u00fajraind\u00edt\u00e1sa ut\u00e1n l\u00e9p \u00e9letbe.</translation>\n+    </message>\n     <message>\n         <source>&amp;Unit to show amounts in:</source>\n         <translation>&amp;M\u00e9rt\u00e9kegys\u00e9g:</translation>\n@@ -671,6 +1120,10 @@\n         <source>Choose the default subdivision unit to show in the interface and when sending coins.</source>\n         <translation>V\u00e1laszd ki az interf\u00e9szen \u00e9s \u00e9rm\u00e9k k\u00fcld\u00e9sekor megjelen\u00edtend\u0151 alap\u00e9rtelmezett alegys\u00e9get.</translation>\n     </message>\n+    <message>\n+        <source>Whether to show coin control features or not.</source>\n+        <translation>Mutassa a p\u00e9nzk\u00fcld\u00e9s be\u00e1ll\u00edt\u00e1sait vagy ne.</translation>\n+    </message>\n     <message>\n         <source>&amp;OK</source>\n         <translation>&amp;OK</translation>\n@@ -695,6 +1148,14 @@\n         <source>Client restart required to activate changes.</source>\n         <translation>A v\u00e1ltoztat\u00e1sok aktiv\u00e1l\u00e1sahoz \u00fajra kell ind\u00edtani a klienst.</translation>\n     </message>\n+    <message>\n+        <source>Client will be shut down. Do you want to proceed?</source>\n+        <translation>A kliens le fog \u00e1llni. Szeretn\u00e9 folytatni?</translation>\n+    </message>\n+    <message>\n+        <source>This change would require a client restart.</source>\n+        <translation>Ehhez a v\u00e1ltoztat\u00e1shoz \u00fajra kellene ind\u00edtani a klienst.</translation>\n+    </message>\n     <message>\n         <source>The supplied proxy address is invalid.</source>\n         <translation>A megadott proxy c\u00edm nem \u00e9rv\u00e9nyes.</translation>\n@@ -750,6 +1211,10 @@\n         <source>Your current total balance</source>\n         <translation>Aktu\u00e1lis egyenleged</translation>\n     </message>\n+    <message>\n+        <source>Your current balance in watch-only addresses</source>\n+        <translation>A csak megfigyelt c\u00edmeinek az egyenlege</translation>\n+    </message>\n     <message>\n         <source>Spendable:</source>\n         <translation>Elk\u00f6lthet\u0151:</translation>\n@@ -758,17 +1223,121 @@\n         <source>Recent transactions</source>\n         <translation>A legut\u00f3bbi tranzakci\u00f3k</translation>\n     </message>\n-    </context>\n-<context>\n-    <name>PaymentServer</name>\n-    </context>\n-<context>\n-    <name>PeerTableModel</name>\n     <message>\n-        <source>User Agent</source>\n-        <translation>User Agent</translation>\n+        <source>Unconfirmed transactions to watch-only addresses</source>\n+        <translation>A csak megfigyelt c\u00edmek hiteles\u00edtetlen tranzakci\u00f3i</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Mined balance in watch-only addresses that has not yet matured</source>\n+        <translation>A csak megfigyelt c\u00edmek b\u00e1ny\u00e1szott, m\u00e9g \u00e9retlen egyenlege</translation>\n+    </message>\n+    <message>\n+        <source>Current total balance in watch-only addresses</source>\n+        <translation>A csak megfigyelt c\u00edmek jelenlegi teljes egyenlege</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>PaymentServer</name>\n+    <message>\n+        <source>Payment request error</source>\n+        <translation>Hiba t\u00f6rt\u00e9nt a fizet\u00e9si k\u00e9relem sor\u00e1n</translation>\n+    </message>\n+    <message>\n+        <source>Cannot start bitcoin: click-to-pay handler</source>\n+        <translation>A bitcoin nem tud elindulni: click-to-pay kezel\u0151</translation>\n+    </message>\n+    <message>\n+        <source>URI handling</source>\n+        <translation>URI kezel\u00e9s</translation>\n+    </message>\n+    <message>\n+        <source>Invalid payment address %1</source>\n+        <translation>\u00c9rv\u00e9nytelen fizet\u00e9si c\u00edm %1</translation>\n+    </message>\n+    <message>\n+        <source>URI cannot be parsed! This can be caused by an invalid Bitcoin address or malformed URI parameters.</source>\n+        <translation>Nem siker\u00fclt az URI elemz\u00e9se! Ezt okozhatja \u00e9rv\u00e9nytelen Bitcoin c\u00edm, vagy rossz URI param\u00e9terez\u00e9s.</translation>\n+    </message>\n+    <message>\n+        <source>Payment request file handling</source>\n+        <translation>Fizet\u00e9s k\u00e9relmi f\u00e1jl kezel\u00e9se</translation>\n+    </message>\n+    <message>\n+        <source>Payment request file cannot be read! This can be caused by an invalid payment request file.</source>\n+        <translation>Nem siker\u00fclt beolvasni a fizet\u00e9si k\u00e9relmi f\u00e1jlt! Ezt \u00e9rv\u00e9nytelen fizet\u00e9si k\u00e9relmi f\u00e1jl okozhatja.</translation>\n+    </message>\n+    <message>\n+        <source>Payment request rejected</source>\n+        <translation>A fizet\u00e9si k\u00e9relem visszautas\u00edtva</translation>\n+    </message>\n+    <message>\n+        <source>Payment request network doesn't match client network.</source>\n+        <translation>A fizet\u00e9si k\u00e9relmi h\u00e1l\u00f3zat nem egyezik a kliens h\u00e1l\u00f3zat\u00e1val.</translation>\n+    </message>\n+    <message>\n+        <source>Payment request expired.</source>\n+        <translation>A fizet\u00e9si k\u00e9relem lej\u00e1rt.</translation>\n+    </message>\n+    <message>\n+        <source>Payment request is not initialized.</source>\n+        <translation>A fizet\u00e9si k\u00e9relem nem inicializ\u00e1l\u00f3dott</translation>\n+    </message>\n+    <message>\n+        <source>Invalid payment request.</source>\n+        <translation>\u00c9rv\u00e9nytelen fizet\u00e9si k\u00e9relem</translation>\n+    </message>\n+    <message>\n+        <source>Requested payment amount of %1 is too small (considered dust).</source>\n+        <translation>A %1 fizet\u00e9sre k\u00e9rt \u00f6sszege t\u00fal kev\u00e9s (porszemnek min\u0151s\u00fcl).</translation>\n+    </message>\n+    <message>\n+        <source>Refund from %1</source>\n+        <translation>Visszat\u00e9r\u00edt\u00e9s a %1 -t\u00f3l</translation>\n+    </message>\n+    <message>\n+        <source>Payment request %1 is too large (%2 bytes, allowed %3 bytes).</source>\n+        <translation>A fizet\u00e9si k\u00e9relem %1 t\u00fal nagy (%2 byte, csak %3 byte enged\u00e9lyezett).</translation>\n+    </message>\n+    <message>\n+        <source>Error communicating with %1: %2</source>\n+        <translation>Hiba a kommuni\u00e1ci\u00f3 sor\u00e1n %1 -el: %2</translation>\n+    </message>\n+    <message>\n+        <source>Payment request cannot be parsed!</source>\n+        <translation>Nem siker\u00fclt elemezni a fizet\u00e9si k\u00e9relmet!</translation>\n+    </message>\n+    <message>\n+        <source>Bad response from server %1</source>\n+        <translation>Rossz v\u00e1lasz a kiszolg\u00e1l\u00f3t\u00f3l %1</translation>\n+    </message>\n+    <message>\n+        <source>Network request error</source>\n+        <translation>H\u00e1l\u00f3zati k\u00e9relem hiba</translation>\n+    </message>\n+    <message>\n+        <source>Payment acknowledged</source>\n+        <translation>Fizet\u00e9s elfogadva</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>PeerTableModel</name>\n+    <message>\n+        <source>User Agent</source>\n+        <translation>User Agent</translation>\n+    </message>\n+    <message>\n+        <source>Node/Service</source>\n+        <translation>Csom\u00f3pont/Szolg\u00e1ltat\u00e1s</translation>\n+    </message>\n+    <message>\n+        <source>NodeId</source>\n+        <translation>Csom\u00f3pont Azonos\u00edt\u00f3</translation>\n+    </message>\n+    <message>\n+        <source>Ping</source>\n+        <translation>Ping</translation>\n+    </message>\n+</context>\n <context>\n     <name>QObject</name>\n     <message>\n@@ -811,13 +1380,41 @@\n         <source>%1 and %2</source>\n         <translation>%1 \u00e9s %2</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>%1 didn't yet exit safely...</source>\n+        <translation>%1 m\u00e9g nem l\u00e9pett ki biztons\u00e1gosan...</translation>\n+    </message>\n+</context>\n <context>\n     <name>QObject::QObject</name>\n-    </context>\n+    <message>\n+        <source>Error: Specified data directory \"%1\" does not exist.</source>\n+        <translation>Hiba: A megadott \"%1\" adatk\u00f6nyvt\u00e1r nem l\u00e9tezik. </translation>\n+    </message>\n+    <message>\n+        <source>Error: %1</source>\n+        <translation>Hiba: %1</translation>\n+    </message>\n+</context>\n <context>\n     <name>QRImageWidget</name>\n-    </context>\n+    <message>\n+        <source>&amp;Save Image...</source>\n+        <translation>&amp;K\u00e9p Ment\u00e9se</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy Image</source>\n+        <translation>&amp;K\u00e9p M\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Save QR Code</source>\n+        <translation>QR K\u00f3d Ment\u00e9se</translation>\n+    </message>\n+    <message>\n+        <source>PNG Image (*.png)</source>\n+        <translation>PNG k\u00e9p (*.png)</translation>\n+    </message>\n+</context>\n <context>\n     <name>RPCConsole</name>\n     <message>\n@@ -844,6 +1441,10 @@\n         <source>Using BerkeleyDB version</source>\n         <translation>Haszn\u00e1lt BerkeleyDB verzi\u00f3</translation>\n     </message>\n+    <message>\n+        <source>Datadir</source>\n+        <translation>Adatk\u00f6nyvt\u00e1r</translation>\n+    </message>\n     <message>\n         <source>Startup time</source>\n         <translation>Bekapcsol\u00e1s ideje</translation>\n@@ -868,6 +1469,14 @@\n         <source>Current number of blocks</source>\n         <translation>Aktu\u00e1lis blokkok sz\u00e1ma</translation>\n     </message>\n+    <message>\n+        <source>Memory Pool</source>\n+        <translation>Mem\u00f3ria Halom</translation>\n+    </message>\n+    <message>\n+        <source>Current number of transactions</source>\n+        <translation>Jelenlegi tranzakci\u00f3k sz\u00e1ma</translation>\n+    </message>\n     <message>\n         <source>Memory usage</source>\n         <translation>Mem\u00f3riahaszn\u00e1lat</translation>\n@@ -892,14 +1501,46 @@\n         <source>Select a peer to view detailed information.</source>\n         <translation>Peer kijel\u00f6l\u00e9se a r\u00e9szletes inform\u00e1ci\u00f3k\u00e9rt</translation>\n     </message>\n+    <message>\n+        <source>Whitelisted</source>\n+        <translation>Enged\u00e9lyezett</translation>\n+    </message>\n+    <message>\n+        <source>Direction</source>\n+        <translation>Ir\u00e1ny</translation>\n+    </message>\n     <message>\n         <source>Version</source>\n         <translation>Verzi\u00f3</translation>\n     </message>\n+    <message>\n+        <source>Starting Block</source>\n+        <translation>Kezd\u0151 Blokk</translation>\n+    </message>\n+    <message>\n+        <source>Synced Headers</source>\n+        <translation>Szinkroniz\u00e1lt Fejl\u00e9cek</translation>\n+    </message>\n+    <message>\n+        <source>Synced Blocks</source>\n+        <translation>Szinkroniz\u00e1lt Blokkok</translation>\n+    </message>\n     <message>\n         <source>User Agent</source>\n         <translation>User Agent</translation>\n     </message>\n+    <message>\n+        <source>Open the %1 debug log file from the current data directory. This can take a few seconds for large log files.</source>\n+        <translation>A %1 debug log f\u00e1jl megnyit\u00e1sa a jelenlegi k\u00f6nyvt\u00e1rb\u00f3l. Ez n\u00e9h\u00e1ny m\u00e1sodpercig eltarthat nagyobb log f\u00e1jlok eset\u00e9n.</translation>\n+    </message>\n+    <message>\n+        <source>Decrease font size</source>\n+        <translation>Bet\u0171m\u00e9ret kicsiny\u00edt\u00e9se</translation>\n+    </message>\n+    <message>\n+        <source>Increase font size</source>\n+        <translation>Bet\u0171m\u00e9ret n\u00f6vel\u00e9se</translation>\n+    </message>\n     <message>\n         <source>Services</source>\n         <translation>Szolg\u00e1ltat\u00e1sok</translation>\n@@ -920,6 +1561,22 @@\n         <source>Ping Time</source>\n         <translation>Ping id\u0151</translation>\n     </message>\n+    <message>\n+        <source>The duration of a currently outstanding ping.</source>\n+        <translation>A jelenlegi kiv\u00e1l\u00f3 ping id\u0151tartama.</translation>\n+    </message>\n+    <message>\n+        <source>Ping Wait</source>\n+        <translation>Ping V\u00e1rakoz\u00e1s</translation>\n+    </message>\n+    <message>\n+        <source>Min Ping</source>\n+        <translation>Minimum Ping</translation>\n+    </message>\n+    <message>\n+        <source>Time Offset</source>\n+        <translation>Id\u0151 Eltol\u00f3d\u00e1s</translation>\n+    </message>\n     <message>\n         <source>Last block time</source>\n         <translation>Utols\u00f3 blokk ideje</translation>\n@@ -976,6 +1633,22 @@\n         <source>1 &amp;year</source>\n         <translation>1 &amp;\u00e9v</translation>\n     </message>\n+    <message>\n+        <source>&amp;Disconnect</source>\n+        <translation>&amp;Sz\u00e9tkapcsol</translation>\n+    </message>\n+    <message>\n+        <source>Ban for</source>\n+        <translation>Kitilt\u00e1s oka</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Unban</source>\n+        <translation>&amp;Feloldja a kitilt\u00e1st</translation>\n+    </message>\n+    <message>\n+        <source>Welcome to the %1 RPC console.</source>\n+        <translation>\u00dcdv a %1 RPC konzolj\u00e1ban.</translation>\n+    </message>\n     <message>\n         <source>Use up and down arrows to navigate history, and &lt;b&gt;Ctrl-L&lt;/b&gt; to clear screen.</source>\n         <translation>Navig\u00e1lhat a fel \u00e9s le nyilakkal, \u00e9s &lt;b&gt;Ctrl-L&lt;/b&gt; -vel t\u00f6r\u00f6lheti a k\u00e9perny\u0151t.</translation>\n@@ -984,6 +1657,10 @@\n         <source>Type &lt;b&gt;help&lt;/b&gt; for an overview of available commands.</source>\n         <translation>\u00cdrd be azt, hogy &lt;b&gt;help&lt;/b&gt; az el\u00e9rhet\u0151 parancsok \u00e1ttekint\u00e9s\u00e9hez.</translation>\n     </message>\n+    <message>\n+        <source>Network activity disabled</source>\n+        <translation>H\u00e1l\u00f3zati tev\u00e9kenys\u00e9g letiltva.</translation>\n+    </message>\n     <message>\n         <source>%1 B</source>\n         <translation>%1 B</translation>\n@@ -1000,6 +1677,10 @@\n         <source>%1 GB</source>\n         <translation>%1 GB</translation>\n     </message>\n+    <message>\n+        <source>(node id: %1)</source>\n+        <translation>(csom\u00f3pont azonos\u00edt\u00f3: %1)</translation>\n+    </message>\n     <message>\n         <source>via %1</source>\n         <translation>%1 \u00e1ltal</translation>\n@@ -1043,6 +1724,30 @@\n         <source>&amp;Message:</source>\n         <translation>&amp;\u00dczenet:</translation>\n     </message>\n+    <message>\n+        <source>Reuse one of the previously used receiving addresses. Reusing addresses has security and privacy issues. Do not use this unless re-generating a payment request made before.</source>\n+        <translation>Egy el\u0151z\u0151leg haszn\u00e1lt fogad\u00f3 c\u00edm \u00fajrafelhaszn\u00e1l\u00e1sa. A c\u00edmek \u00fajrafelhaszn\u00e1l\u00e1sa biztons\u00e1gi \u00e9s adatv\u00e9delmi probl\u00e9m\u00e1t jelent. Ne haszn\u00e1lja ezt a funkci\u00f3t, kiv\u00e9ve, ha egy kor\u00e1bbi fizet\u00e9si k\u00e9relmet szeretne megism\u00e9telni.</translation>\n+    </message>\n+    <message>\n+        <source>R&amp;euse an existing receiving address (not recommended)</source>\n+        <translation>&amp;\u00dajrafelhaszn\u00e1l egy l\u00e9tez\u0151 fogad\u00f3 c\u00edmet (nem aj\u00e1nlott)</translation>\n+    </message>\n+    <message>\n+        <source>An optional message to attach to the payment request, which will be displayed when the request is opened. Note: The message will not be sent with the payment over the Bitcoin network.</source>\n+        <translation>Egy opcion\u00e1lis \u00fczenet csatol\u00e1sa a fizet\u00e9si k\u00e9relemhez, amely megjelenik a k\u00e9relem megnyit\u00e1sakor. Megjegyz\u00e9s: Az \u00fczenet nem lesz elk\u00fcldve a fizets\u00e9ggel a Bitcoin h\u00e1l\u00f3zaton kereszt\u00fcl.</translation>\n+    </message>\n+    <message>\n+        <source>An optional label to associate with the new receiving address.</source>\n+        <translation>Egy opcion\u00e1lis c\u00edmke, amit hozz\u00e1 lehet rendelni az \u00faj fogad\u00f3 c\u00edmhez.</translation>\n+    </message>\n+    <message>\n+        <source>Use this form to request payments. All fields are &lt;b&gt;optional&lt;/b&gt;.</source>\n+        <translation>Haszn\u00e1lja ezt az \u0171rlapot fizet\u00e9si k\u00e9relmekhez. Minden mez\u0151 &lt;b&gt;opcion\u00e1lis&lt;/b&gt; </translation>\n+    </message>\n+    <message>\n+        <source>An optional amount to request. Leave this empty or zero to not request a specific amount.</source>\n+        <translation>Egy opcion\u00e1lisan k\u00e9rhet\u0151 \u00f6sszeg. Hagyja \u00fcresen, vagy \u00edrjon be null\u00e1t, ha nem k\u00edv\u00e1nja haszn\u00e1lni.</translation>\n+    </message>\n     <message>\n         <source>Clear all fields of the form.</source>\n         <translation>Minden mez\u0151 t\u00f6rl\u00e9se</translation>\n@@ -1059,6 +1764,10 @@\n         <source>&amp;Request payment</source>\n         <translation>&amp;Fizet\u00e9s k\u00e9r\u00e9se</translation>\n     </message>\n+    <message>\n+        <source>Show the selected request (does the same as double clicking an entry)</source>\n+        <translation>Mutassa meg a kiv\u00e1lasztott k\u00e9relmet (ugyanaz, mint a duplaklikk)</translation>\n+    </message>\n     <message>\n         <source>Show</source>\n         <translation>Mutat</translation>\n@@ -1071,7 +1780,23 @@\n         <source>Remove</source>\n         <translation>Elt\u00e1vol\u00edt\u00e1s</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Copy URI</source>\n+        <translation>URI m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Copy label</source>\n+        <translation>C\u00edmke m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Copy message</source>\n+        <translation>\u00dczenet m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Copy amount</source>\n+        <translation>\u00d6sszeg m\u00e1sol\u00e1sa</translation>\n+    </message>\n+</context>\n <context>\n     <name>ReceiveRequestDialog</name>\n     <message>\n@@ -1090,24 +1815,84 @@\n         <source>&amp;Save Image...</source>\n         <translation>&amp;K\u00e9p ment\u00e9se</translation>\n     </message>\n+    <message>\n+        <source>Request payment to %1</source>\n+        <translation>Fizet\u00e9s k\u00e9r\u00e9se a %1 -hez</translation>\n+    </message>\n+    <message>\n+        <source>Payment information</source>\n+        <translation>Fizet\u00e9si inform\u00e1ci\u00f3</translation>\n+    </message>\n+    <message>\n+        <source>URI</source>\n+        <translation>URI</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>C\u00edm</translation>\n+    </message>\n+    <message>\n+        <source>Amount</source>\n+        <translation>\u00d6sszeg</translation>\n+    </message>\n     <message>\n         <source>Label</source>\n         <translation>C\u00edmke</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Message</source>\n+        <translation>\u00dczenet</translation>\n+    </message>\n+    <message>\n+        <source>Resulting URI too long, try to reduce the text for label / message.</source>\n+        <translation>A keletkezett URI t\u00fal hossz\u00fa, pr\u00f3b\u00e1lja meg cs\u00f6kkenteni a cimke / \u00fczenet sz\u00f6veg\u00e9nek m\u00e9ret\u00e9t.</translation>\n+    </message>\n+    <message>\n+        <source>Error encoding URI into QR Code.</source>\n+        <translation>Hiba l\u00e9pett fel az URI QR k\u00f3dd\u00e1 alak\u00edt\u00e1sakor.</translation>\n+    </message>\n+</context>\n <context>\n     <name>RecentRequestsTableModel</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>D\u00e1tum</translation>\n+    </message>\n     <message>\n         <source>Label</source>\n         <translation>C\u00edmke</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Message</source>\n+        <translation>\u00dczenet</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(nincs c\u00edmke)</translation>\n+    </message>\n+    <message>\n+        <source>(no message)</source>\n+        <translation>(nincs \u00fczenet)</translation>\n+    </message>\n+    <message>\n+        <source>(no amount requested)</source>\n+        <translation>(nem k\u00e9rt \u00f6sszeget)</translation>\n+    </message>\n+    <message>\n+        <source>Requested</source>\n+        <translation>K\u00e9rt</translation>\n+    </message>\n+</context>\n <context>\n     <name>SendCoinsDialog</name>\n     <message>\n         <source>Send Coins</source>\n         <translation>\u00c9rm\u00e9k k\u00fcld\u00e9se</translation>\n     </message>\n+    <message>\n+        <source>Coin Control Features</source>\n+        <translation>P\u00e9nzk\u00fcld\u00e9s be\u00e1ll\u00edt\u00e1sai</translation>\n+    </message>\n     <message>\n         <source>Inputs...</source>\n         <translation>Bemenetek...</translation>\n@@ -1144,6 +1929,14 @@\n         <source>Change:</source>\n         <translation>Visszaj\u00e1r\u00f3:</translation>\n     </message>\n+    <message>\n+        <source>If this is activated, but the change address is empty or invalid, change will be sent to a newly generated address.</source>\n+        <translation>Ha ezt a be\u00e1ll\u00edt\u00e1st enged\u00e9lyezi, de a visszaj\u00e1r\u00f3 c\u00edm \u00e9rv\u00e9nytelen, a visszaj\u00e1r\u00f3 egy \u00fajonnan gener\u00e1lt c\u00edmre lesz k\u00fcldve.</translation>\n+    </message>\n+    <message>\n+        <source>Custom change address</source>\n+        <translation>Egyedi visszaj\u00e1r\u00f3 c\u00edm</translation>\n+    </message>\n     <message>\n         <source>Transaction Fee:</source>\n         <translation>Tranzakci\u00f3s d\u00edj</translation>\n@@ -1152,6 +1945,10 @@\n         <source>Choose...</source>\n         <translation>V\u00e1lassz...</translation>\n     </message>\n+    <message>\n+        <source>collapse fee-settings</source>\n+        <translation>d\u00edj be\u00e1ll\u00edt\u00e1sok bez\u00e1r\u00e1sa</translation>\n+    </message>\n     <message>\n         <source>per kilobyte</source>\n         <translation>kilob\u00e1jtonk\u00e9nt</translation>\n@@ -1208,123 +2005,307 @@\n         <source>S&amp;end</source>\n         <translation>&amp;K\u00fcld\u00e9s</translation>\n     </message>\n-    </context>\n-<context>\n-    <name>SendCoinsEntry</name>\n     <message>\n-        <source>A&amp;mount:</source>\n-        <translation>\u00d6sszeg:</translation>\n+        <source>Copy quantity</source>\n+        <translation>Mennyis\u00e9g m\u00e1sol\u00e1sa</translation>\n     </message>\n     <message>\n-        <source>Pay &amp;To:</source>\n-        <translation>C\u00edmzett:</translation>\n+        <source>Copy amount</source>\n+        <translation>\u00d6sszeg m\u00e1sol\u00e1sa</translation>\n     </message>\n     <message>\n-        <source>&amp;Label:</source>\n-        <translation>C\u00edmke:</translation>\n+        <source>Copy fee</source>\n+        <translation>D\u00edj m\u00e1sol\u00e1sa</translation>\n     </message>\n     <message>\n-        <source>Choose previously used address</source>\n-        <translation>V\u00e1lassz egy kor\u00e1bban m\u00e1r haszn\u00e1lt c\u00edmet</translation>\n+        <source>Copy bytes</source>\n+        <translation>Byte-ok m\u00e1sol\u00e1sa </translation>\n     </message>\n     <message>\n-        <source>Alt+A</source>\n-        <translation>Alt+A</translation>\n+        <source>Copy dust</source>\n+        <translation>Porszemek m\u00e1sol\u00e1sa</translation>\n     </message>\n     <message>\n-        <source>Paste address from clipboard</source>\n-        <translation>C\u00edm beilleszt\u00e9se a v\u00e1g\u00f3lapr\u00f3l</translation>\n+        <source>Copy change</source>\n+        <translation>Visszaj\u00e1r\u00f3 m\u00e1sol\u00e1sa</translation>\n     </message>\n     <message>\n-        <source>Alt+P</source>\n-        <translation>Alt+P</translation>\n+        <source>Are you sure you want to send?</source>\n+        <translation>Biztosan el akarja k\u00fcldeni?</translation>\n     </message>\n     <message>\n-        <source>Remove this entry</source>\n-        <translation>Ez a bejegyz\u00e9s elt\u00e1vol\u00edt\u00e1sa</translation>\n+        <source>added as transaction fee</source>\n+        <translation>hozz\u00e1adva, mint tranzakci\u00f3s d\u00edj</translation>\n     </message>\n     <message>\n-        <source>Message:</source>\n-        <translation>\u00dczenet:</translation>\n+        <source>Total Amount %1</source>\n+        <translation>Teljes \u00d6sszeg %1</translation>\n     </message>\n     <message>\n-        <source>Pay To:</source>\n-        <translation>C\u00edmzett:</translation>\n+        <source>or</source>\n+        <translation>vagy</translation>\n     </message>\n     <message>\n-        <source>Memo:</source>\n-        <translation>Jegyzet:</translation>\n+        <source>Confirm send coins</source>\n+        <translation>\u00d6sszeg k\u00fcld\u00e9s\u00e9nek meger\u0151s\u00edt\u00e9se</translation>\n     </message>\n-    </context>\n-<context>\n-    <name>SendConfirmationDialog</name>\n-    </context>\n-<context>\n-    <name>ShutdownWindow</name>\n     <message>\n-        <source>Do not shut down the computer until this window disappears.</source>\n-        <translation>Ne \u00e1ll\u00edtsd le a sz\u00e1m\u00edt\u00f3g\u00e9pet am\u00edg ez az ablak el nem t\u0171nik.</translation>\n+        <source>The recipient address is not valid. Please recheck.</source>\n+        <translation>A fogad\u00f3 c\u00edme \u00e9rv\u00e9nytelen. K\u00e9rem ellen\u0151rizze.</translation>\n     </message>\n-</context>\n-<context>\n-    <name>SignVerifyMessageDialog</name>\n     <message>\n-        <source>Signatures - Sign / Verify a Message</source>\n-        <translation>Al\u00e1\u00edr\u00e1sok - \u00fczenet al\u00e1\u00edr\u00e1sa/ellen\u0151rz\u00e9se</translation>\n+        <source>The amount to pay must be larger than 0.</source>\n+        <translation>A fizetend\u0151 \u00f6sszegnek nagyobbnak kell lennie 0-n\u00e1l.</translation>\n     </message>\n     <message>\n-        <source>&amp;Sign Message</source>\n-        <translation>\u00dczenet al\u00e1\u00edr\u00e1sa...</translation>\n+        <source>The amount exceeds your balance.</source>\n+        <translation>Az \u00f6sszeg meghaladja az egyenleg\u00e9t.</translation>\n     </message>\n     <message>\n-        <source>Choose previously used address</source>\n-        <translation>V\u00e1lassz egy kor\u00e1bban m\u00e1r haszn\u00e1lt c\u00edmet</translation>\n+        <source>The total exceeds your balance when the %1 transaction fee is included.</source>\n+        <translation>A k\u00fcldeni k\u00edv\u00e1nt \u00f6sszeg \u00e9s a %1 tranzakci\u00f3s d\u00edj egy\u00fctt meghaladja az egyenleg\u00e9n rendelkez\u00e9sre \u00e1ll\u00f3 \u00f6sszeget.</translation>\n     </message>\n     <message>\n-        <source>Alt+A</source>\n-        <translation>Alt+A</translation>\n+        <source>Duplicate address found: addresses should only be used once each.</source>\n+        <translation>T\u00f6bbsz\u00f6r szerepel ugyanaz a c\u00edm: egy c\u00edmet csak egyszer haszn\u00e1ljon.</translation>\n     </message>\n     <message>\n-        <source>Paste address from clipboard</source>\n-        <translation>C\u00edm beilleszt\u00e9se a v\u00e1g\u00f3lapr\u00f3l</translation>\n+        <source>Transaction creation failed!</source>\n+        <translation>Tranzakci\u00f3 l\u00e9trehoz\u00e1sa sikertelen!</translation>\n     </message>\n     <message>\n-        <source>Alt+P</source>\n-        <translation>Alt+P</translation>\n+        <source>The transaction was rejected with the following reason: %1</source>\n+        <translation>Tranzakci\u00f3 visszautas\u00edtva a k\u00f6vetkez\u0151 indokkal: %1</translation>\n     </message>\n     <message>\n-        <source>Enter the message you want to sign here</source>\n-        <translation>Ide \u00edrja az al\u00e1\u00edrand\u00f3 \u00fczenetet</translation>\n+        <source>A fee higher than %1 is considered an absurdly high fee.</source>\n+        <translation>Magasabb d\u00edj mint %1 abszurd magas d\u00edjnak sz\u00e1m\u00edt.</translation>\n     </message>\n     <message>\n-        <source>Signature</source>\n-        <translation>Al\u00e1\u00edr\u00e1s</translation>\n+        <source>Payment request expired.</source>\n+        <translation>A fizet\u00e9si k\u00e9relem lej\u00e1rt.</translation>\n     </message>\n     <message>\n-        <source>Copy the current signature to the system clipboard</source>\n-        <translation>A jelenleg kiv\u00e1lasztott al\u00e1\u00edr\u00e1s m\u00e1sol\u00e1sa a rendszer-v\u00e1g\u00f3lapra</translation>\n+        <source>Pay only the required fee of %1</source>\n+        <translation>Csak a sz\u00fcks\u00e9ges %1 d\u00edj fizet\u00e9se</translation>\n     </message>\n     <message>\n-        <source>Sign the message to prove you own this Bitcoin address</source>\n-        <translation>\u00dczenet </translation>\n+        <source>Warning: Invalid Bitcoin address</source>\n+        <translation>Figyelmeztet\u00e9s: \u00c9rv\u00e9nytelen Bitcoin c\u00edm</translation>\n     </message>\n     <message>\n-        <source>Sign &amp;Message</source>\n-        <translation>\u00dczenet &amp;al\u00e1\u00edr\u00e1sa</translation>\n+        <source>Warning: Unknown change address</source>\n+        <translation>Figyelmeztet\u00e9s: Ismeretlen visszaj\u00e1r\u00f3 c\u00edm</translation>\n     </message>\n     <message>\n-        <source>Clear &amp;All</source>\n-        <translation>Mindent &amp;t\u00f6r\u00f6l</translation>\n+        <source>Confirm custom change address</source>\n+        <translation>Egyedi visszaj\u00e1r\u00f3 c\u00edm j\u00f3v\u00e1hagy\u00e1sa</translation>\n     </message>\n     <message>\n-        <source>&amp;Verify Message</source>\n-        <translation>\u00dczenet ellen\u0151rz\u00e9se</translation>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>A c\u00edm, amelyet a visszaj\u00e1r\u00f3nak megadott, nincs ebben a t\u00e1rc\u00e1ban. B\u00e1rmennyi vagy minden \u00f6sszeg elk\u00fcldhet\u0151 a t\u00e1rc\u00e1j\u00e1b\u00f3l erre a c\u00edmre. Biztos benne?</translation>\n     </message>\n     <message>\n-        <source>Verify &amp;Message</source>\n+        <source>(no label)</source>\n+        <translation>(nincs c\u00edmke)</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>SendCoinsEntry</name>\n+    <message>\n+        <source>A&amp;mount:</source>\n+        <translation>\u00d6sszeg:</translation>\n+    </message>\n+    <message>\n+        <source>Pay &amp;To:</source>\n+        <translation>C\u00edmzett:</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Label:</source>\n+        <translation>C\u00edmke:</translation>\n+    </message>\n+    <message>\n+        <source>Choose previously used address</source>\n+        <translation>V\u00e1lassz egy kor\u00e1bban m\u00e1r haszn\u00e1lt c\u00edmet</translation>\n+    </message>\n+    <message>\n+        <source>The Bitcoin address to send the payment to</source>\n+        <translation>Erre a Bitcoin c\u00edmre k\u00fcldje az \u00f6sszeget</translation>\n+    </message>\n+    <message>\n+        <source>Alt+A</source>\n+        <translation>Alt+A</translation>\n+    </message>\n+    <message>\n+        <source>Paste address from clipboard</source>\n+        <translation>C\u00edm beilleszt\u00e9se a v\u00e1g\u00f3lapr\u00f3l</translation>\n+    </message>\n+    <message>\n+        <source>Alt+P</source>\n+        <translation>Alt+P</translation>\n+    </message>\n+    <message>\n+        <source>Remove this entry</source>\n+        <translation>Ez a bejegyz\u00e9s elt\u00e1vol\u00edt\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>S&amp;ubtract fee from amount</source>\n+        <translation>&amp;Vonja le a d\u00edjat az \u00f6sszegb\u0151l</translation>\n+    </message>\n+    <message>\n+        <source>Message:</source>\n+        <translation>\u00dczenet:</translation>\n+    </message>\n+    <message>\n+        <source>Enter a label for this address to add it to the list of used addresses</source>\n+        <translation>Adjon egy c\u00edmk\u00e9t ehhez a c\u00edmhez, hogy beker\u00fclj\u00f6n a haszn\u00e1lt c\u00edmek k\u00f6z\u00e9</translation>\n+    </message>\n+    <message>\n+        <source>Pay To:</source>\n+        <translation>C\u00edmzett:</translation>\n+    </message>\n+    <message>\n+        <source>Memo:</source>\n+        <translation>Jegyzet:</translation>\n+    </message>\n+    <message>\n+        <source>Enter a label for this address to add it to your address book</source>\n+        <translation>Adjon egy c\u00edmk\u00e9t ehhez a c\u00edmhez, hogy beker\u00fclj\u00f6n a c\u00edmt\u00e1r\u00e1ba</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>SendConfirmationDialog</name>\n+    <message>\n+        <source>Yes</source>\n+        <translation>Igen</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>ShutdownWindow</name>\n+    <message>\n+        <source>%1 is shutting down...</source>\n+        <translation>A %1 le\u00e1ll...</translation>\n+    </message>\n+    <message>\n+        <source>Do not shut down the computer until this window disappears.</source>\n+        <translation>Ne \u00e1ll\u00edtsd le a sz\u00e1m\u00edt\u00f3g\u00e9pet am\u00edg ez az ablak el nem t\u0171nik.</translation>\n+    </message>\n+</context>\n+<context>\n+    <name>SignVerifyMessageDialog</name>\n+    <message>\n+        <source>Signatures - Sign / Verify a Message</source>\n+        <translation>Al\u00e1\u00edr\u00e1sok - \u00fczenet al\u00e1\u00edr\u00e1sa/ellen\u0151rz\u00e9se</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Sign Message</source>\n+        <translation>\u00dczenet al\u00e1\u00edr\u00e1sa...</translation>\n+    </message>\n+    <message>\n+        <source>The Bitcoin address to sign the message with</source>\n+        <translation>Bitcoin c\u00edm, amivel al\u00e1 k\u00edv\u00e1nja \u00edrni az \u00fczenetet</translation>\n+    </message>\n+    <message>\n+        <source>Choose previously used address</source>\n+        <translation>V\u00e1lassz egy kor\u00e1bban m\u00e1r haszn\u00e1lt c\u00edmet</translation>\n+    </message>\n+    <message>\n+        <source>Alt+A</source>\n+        <translation>Alt+A</translation>\n+    </message>\n+    <message>\n+        <source>Paste address from clipboard</source>\n+        <translation>C\u00edm beilleszt\u00e9se a v\u00e1g\u00f3lapr\u00f3l</translation>\n+    </message>\n+    <message>\n+        <source>Alt+P</source>\n+        <translation>Alt+P</translation>\n+    </message>\n+    <message>\n+        <source>Enter the message you want to sign here</source>\n+        <translation>Ide \u00edrja az al\u00e1\u00edrand\u00f3 \u00fczenetet</translation>\n+    </message>\n+    <message>\n+        <source>Signature</source>\n+        <translation>Al\u00e1\u00edr\u00e1s</translation>\n+    </message>\n+    <message>\n+        <source>Copy the current signature to the system clipboard</source>\n+        <translation>A jelenleg kiv\u00e1lasztott al\u00e1\u00edr\u00e1s m\u00e1sol\u00e1sa a rendszer-v\u00e1g\u00f3lapra</translation>\n+    </message>\n+    <message>\n+        <source>Sign the message to prove you own this Bitcoin address</source>\n+        <translation>\u00dczenet </translation>\n+    </message>\n+    <message>\n+        <source>Sign &amp;Message</source>\n+        <translation>\u00dczenet &amp;al\u00e1\u00edr\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Clear &amp;All</source>\n+        <translation>Mindent &amp;t\u00f6r\u00f6l</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Verify Message</source>\n         <translation>\u00dczenet ellen\u0151rz\u00e9se</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>The Bitcoin address the message was signed with</source>\n+        <translation>Bitcoin c\u00edm, amivel al\u00e1\u00edrta az \u00fczenetet</translation>\n+    </message>\n+    <message>\n+        <source>Verify the message to ensure it was signed with the specified Bitcoin address</source>\n+        <translation>Ellen\u0151rizze az \u00fczenetet, hogy val\u00f3ban a megjel\u00f6lt Bitcoin c\u00edmmel van-e al\u00e1\u00edrva</translation>\n+    </message>\n+    <message>\n+        <source>Verify &amp;Message</source>\n+        <translation>\u00dczenet ellen\u0151rz\u00e9se</translation>\n+    </message>\n+    <message>\n+        <source>Click \"Sign Message\" to generate signature</source>\n+        <translation>Klikkeljen az \"\u00dczenet Al\u00e1\u00edr\u00e1sa\" -ra, hogy al\u00e1\u00edr\u00e1st gener\u00e1ljon</translation>\n+    </message>\n+    <message>\n+        <source>The entered address is invalid.</source>\n+        <translation>A megadott c\u00edm nem \u00e9rv\u00e9nyes.</translation>\n+    </message>\n+    <message>\n+        <source>Please check the address and try again.</source>\n+        <translation>K\u00e9rem ellen\u0151rizze a c\u00edmet \u00e9s pr\u00f3b\u00e1lja meg \u00fajra.</translation>\n+    </message>\n+    <message>\n+        <source>Wallet unlock was cancelled.</source>\n+        <translation>T\u00e1rca megnyit\u00e1sa megszak\u00edtva</translation>\n+    </message>\n+    <message>\n+        <source>Private key for the entered address is not available.</source>\n+        <translation>A megadott c\u00edm priv\u00e1t kulcsa nem tal\u00e1lhat\u00f3.</translation>\n+    </message>\n+    <message>\n+        <source>Message signing failed.</source>\n+        <translation>\u00dczenet al\u00e1\u00edr\u00e1sa sikertelen.</translation>\n+    </message>\n+    <message>\n+        <source>Message signed.</source>\n+        <translation>\u00dczenet al\u00e1\u00edrva.</translation>\n+    </message>\n+    <message>\n+        <source>The signature could not be decoded.</source>\n+        <translation>Az al\u00e1\u00edr\u00e1st nem siker\u00fclt dek\u00f3dolni.</translation>\n+    </message>\n+    <message>\n+        <source>Please check the signature and try again.</source>\n+        <translation>K\u00e9rem ellen\u0151rizze az al\u00e1\u00edr\u00e1st \u00e9s pr\u00f3b\u00e1lja \u00fajra.</translation>\n+    </message>\n+    <message>\n+        <source>Message verification failed.</source>\n+        <translation>Az \u00fczenet igazol\u00e1sa sikertelen.</translation>\n+    </message>\n+    <message>\n+        <source>Message verified.</source>\n+        <translation>\u00dczenet ellen\u0151rizve.</translation>\n+    </message>\n+</context>\n <context>\n     <name>SplashScreen</name>\n     <message>\n@@ -1341,7 +2322,147 @@\n </context>\n <context>\n     <name>TransactionDesc</name>\n-    </context>\n+    <message>\n+        <source>Open until %1</source>\n+        <translation>%1 -ig megnyitva</translation>\n+    </message>\n+    <message>\n+        <source>%1/offline</source>\n+        <translation>%1/offline</translation>\n+    </message>\n+    <message>\n+        <source>0/unconfirmed, %1</source>\n+        <translation>0/meger\u0151s\u00edtetlen, %1</translation>\n+    </message>\n+    <message>\n+        <source>in memory pool</source>\n+        <translation>a mem\u00f3ria halomban</translation>\n+    </message>\n+    <message>\n+        <source>not in memory pool</source>\n+        <translation>nincs a mem\u00f3ria halomban</translation>\n+    </message>\n+    <message>\n+        <source>abandoned</source>\n+        <translation>elhagyott</translation>\n+    </message>\n+    <message>\n+        <source>%1/unconfirmed</source>\n+        <translation>%1/meger\u0151s\u00edtetlen</translation>\n+    </message>\n+    <message>\n+        <source>%1 confirmations</source>\n+        <translation>%1 meger\u0151s\u00edt\u00e9s</translation>\n+    </message>\n+    <message>\n+        <source>Status</source>\n+        <translation>\u00c1llapot</translation>\n+    </message>\n+    <message>\n+        <source>, has not been successfully broadcast yet</source>\n+        <translation>, m\u00e9g nem siker\u00fclt k\u00f6zvet\u00edteni</translation>\n+    </message>\n+    <message>\n+        <source>Date</source>\n+        <translation>D\u00e1tum</translation>\n+    </message>\n+    <message>\n+        <source>Source</source>\n+        <translation>Forr\u00e1s</translation>\n+    </message>\n+    <message>\n+        <source>Generated</source>\n+        <translation>Gener\u00e1lva</translation>\n+    </message>\n+    <message>\n+        <source>From</source>\n+        <translation>K\u00fcld\u0151: </translation>\n+    </message>\n+    <message>\n+        <source>unknown</source>\n+        <translation>ismeretlen</translation>\n+    </message>\n+    <message>\n+        <source>To</source>\n+        <translation>C\u00edmzett</translation>\n+    </message>\n+    <message>\n+        <source>own address</source>\n+        <translation>saj\u00e1t c\u00edm</translation>\n+    </message>\n+    <message>\n+        <source>watch-only</source>\n+        <translation>csak megfigyel\u00e9s</translation>\n+    </message>\n+    <message>\n+        <source>label</source>\n+        <translation>c\u00edmke</translation>\n+    </message>\n+    <message>\n+        <source>Credit</source>\n+        <translation>J\u00f3v\u00e1\u00edr\u00e1s</translation>\n+    </message>\n+    <message>\n+        <source>not accepted</source>\n+        <translation>elutas\u00edtva</translation>\n+    </message>\n+    <message>\n+        <source>Debit</source>\n+        <translation>Terhel\u00e9s</translation>\n+    </message>\n+    <message>\n+        <source>Total debit</source>\n+        <translation>Teljes terhel\u00e9s</translation>\n+    </message>\n+    <message>\n+        <source>Transaction fee</source>\n+        <translation>Tranzakci\u00f3s d\u00edj</translation>\n+    </message>\n+    <message>\n+        <source>Net amount</source>\n+        <translation>Nett\u00f3 \u00f6sszeg</translation>\n+    </message>\n+    <message>\n+        <source>Message</source>\n+        <translation>\u00dczenet</translation>\n+    </message>\n+    <message>\n+        <source>Comment</source>\n+        <translation>Megjegyz\u00e9s</translation>\n+    </message>\n+    <message>\n+        <source>Transaction ID</source>\n+        <translation>Tranzakci\u00f3 Azonos\u00edt\u00f3</translation>\n+    </message>\n+    <message>\n+        <source>Merchant</source>\n+        <translation>Keresked\u0151</translation>\n+    </message>\n+    <message>\n+        <source>Debug information</source>\n+        <translation>Debug inform\u00e1ci\u00f3</translation>\n+    </message>\n+    <message>\n+        <source>Transaction</source>\n+        <translation>Tranzakci\u00f3</translation>\n+    </message>\n+    <message>\n+        <source>Inputs</source>\n+        <translation>Bemenetek</translation>\n+    </message>\n+    <message>\n+        <source>Amount</source>\n+        <translation>\u00d6sszeg</translation>\n+    </message>\n+    <message>\n+        <source>true</source>\n+        <translation>igaz</translation>\n+    </message>\n+    <message>\n+        <source>false</source>\n+        <translation>hamis</translation>\n+    </message>\n+</context>\n <context>\n     <name>TransactionDescDialog</name>\n     <message>\n@@ -1351,17 +2472,237 @@\n     </context>\n <context>\n     <name>TransactionTableModel</name>\n+    <message>\n+        <source>Date</source>\n+        <translation>D\u00e1tum</translation>\n+    </message>\n+    <message>\n+        <source>Type</source>\n+        <translation>T\u00edpus</translation>\n+    </message>\n     <message>\n         <source>Label</source>\n         <translation>C\u00edmke</translation>\n     </message>\n+    <message>\n+        <source>Open until %1</source>\n+        <translation>%1 -ig megnyitva</translation>\n+    </message>\n+    <message>\n+        <source>Offline</source>\n+        <translation>Offline</translation>\n+    </message>\n+    <message>\n+        <source>Unconfirmed</source>\n+        <translation>Meger\u0151s\u00edtetlen</translation>\n+    </message>\n+    <message>\n+        <source>Abandoned</source>\n+        <translation>Elhagyott</translation>\n+    </message>\n+    <message>\n+        <source>Confirming (%1 of %2 recommended confirmations)</source>\n+        <translation>Meger\u0151s\u00edt\u00e9s (%1 az aj\u00e1nlott %2 meger\u0151s\u00edt\u00e9sb\u0151l)</translation>\n+    </message>\n+    <message>\n+        <source>Confirmed (%1 confirmations)</source>\n+        <translation>Meger\u0151s\u00edtve (%1 meger\u0151s\u00edt\u00e9s)</translation>\n+    </message>\n+    <message>\n+        <source>Conflicted</source>\n+        <translation>Konfliktusos</translation>\n+    </message>\n+    <message>\n+        <source>Immature (%1 confirmations, will be available after %2)</source>\n+        <translation>\u00c9retlen (%1 meger\u0151s\u00edt\u00e9s, %2 ut\u00e1n lesz el\u00e9rhet\u0151)</translation>\n+    </message>\n+    <message>\n+        <source>This block was not received by any other nodes and will probably not be accepted!</source>\n+        <translation>Ezt a blokkot egyetlen m\u00e1sik csom\u00f3pont sem kapta meg, \u00edgy val\u00f3sz\u00edn\u0171leg nem lesz elfogadva!</translation>\n+    </message>\n+    <message>\n+        <source>Generated but not accepted</source>\n+        <translation>Gener\u00e1lva, de nincs elfogadva</translation>\n+    </message>\n+    <message>\n+        <source>Received from</source>\n+        <translation>Fogadva innen</translation>\n+    </message>\n+    <message>\n+        <source>Sent to</source>\n+        <translation>Elk\u00fcldve ide</translation>\n+    </message>\n+    <message>\n+        <source>Payment to yourself</source>\n+        <translation>Magadnak kifizetve</translation>\n+    </message>\n+    <message>\n+        <source>Mined</source>\n+        <translation>Kib\u00e1ny\u00e1szva</translation>\n+    </message>\n+    <message>\n+        <source>watch-only</source>\n+        <translation>csak megfigyel\u00e9s</translation>\n+    </message>\n+    <message>\n+        <source>(n/a)</source>\n+        <translation>(nincs adat)</translation>\n+    </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(nincs c\u00edmke)</translation>\n+    </message>\n+    <message>\n+        <source>Transaction status. Hover over this field to show number of confirmations.</source>\n+        <translation>Tranzakci\u00f3 \u00e1llapota. H\u00fazza ide az egeret, hogy l\u00e1ssa a meger\u0151s\u00edt\u00e9sek sz\u00e1m\u00e1t.</translation>\n+    </message>\n+    <message>\n+        <source>Date and time that the transaction was received.</source>\n+        <translation>Tranzakci\u00f3 fogad\u00e1s\u00e1nak d\u00e1tuma \u00e9s id\u0151pontja.</translation>\n+    </message>\n+    <message>\n+        <source>Type of transaction.</source>\n+        <translation>Tranzakci\u00f3 t\u00edpusa.</translation>\n+    </message>\n+    <message>\n+        <source>Whether or not a watch-only address is involved in this transaction.</source>\n+        <translation>Egy csak megfigyelt c\u00edm \u00e9rintett vagy nem ebben a tranzakci\u00f3ban.</translation>\n+    </message>\n     </context>\n <context>\n     <name>TransactionView</name>\n+    <message>\n+        <source>All</source>\n+        <translation>Mind</translation>\n+    </message>\n+    <message>\n+        <source>Today</source>\n+        <translation>Ma</translation>\n+    </message>\n+    <message>\n+        <source>This week</source>\n+        <translation>Ezen a h\u00e9ten</translation>\n+    </message>\n+    <message>\n+        <source>This month</source>\n+        <translation>Ebben a h\u00f3napban</translation>\n+    </message>\n+    <message>\n+        <source>Last month</source>\n+        <translation>M\u00falt h\u00f3napban</translation>\n+    </message>\n+    <message>\n+        <source>This year</source>\n+        <translation>Ebben az \u00e9vben</translation>\n+    </message>\n+    <message>\n+        <source>Range...</source>\n+        <translation>Tartom\u00e1ny...</translation>\n+    </message>\n+    <message>\n+        <source>Sent to</source>\n+        <translation>Elk\u00fcldve ide</translation>\n+    </message>\n+    <message>\n+        <source>To yourself</source>\n+        <translation>Mag\u00e1nak</translation>\n+    </message>\n+    <message>\n+        <source>Mined</source>\n+        <translation>Kib\u00e1ny\u00e1szva</translation>\n+    </message>\n+    <message>\n+        <source>Other</source>\n+        <translation>M\u00e1s</translation>\n+    </message>\n+    <message>\n+        <source>Enter address or label to search</source>\n+        <translation>\u00cdrja be a keresend\u0151 c\u00edmet vagy c\u00edmk\u00e9t</translation>\n+    </message>\n+    <message>\n+        <source>Min amount</source>\n+        <translation>Minim\u00e1lis \u00f6sszeg</translation>\n+    </message>\n+    <message>\n+        <source>Copy address</source>\n+        <translation>C\u00edm m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Copy label</source>\n+        <translation>C\u00edmke m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Copy amount</source>\n+        <translation>\u00d6sszeg m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Copy transaction ID</source>\n+        <translation>Tranzakci\u00f3 azonos\u00edt\u00f3 m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Copy full transaction details</source>\n+        <translation>Tranzakci\u00f3 r\u00e9szleteinek teljes m\u00e1sol\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Edit label</source>\n+        <translation>C\u00edmke szerkeszt\u00e9se</translation>\n+    </message>\n+    <message>\n+        <source>Show transaction details</source>\n+        <translation>Tranzakci\u00f3 r\u00e9szletesen</translation>\n+    </message>\n+    <message>\n+        <source>Export Transaction History</source>\n+        <translation>Tranzakci\u00f3s el\u0151zm\u00e9nyek export\u00e1l\u00e1sa</translation>\n+    </message>\n+    <message>\n+        <source>Comma separated file (*.csv)</source>\n+        <translation>Vessz\u0151vel elv\u00e1lasztott adatokat tartalmaz\u00f3 f\u00e1jl</translation>\n+    </message>\n+    <message>\n+        <source>Confirmed</source>\n+        <translation>Meger\u0151s\u00edtve</translation>\n+    </message>\n+    <message>\n+        <source>Watch-only</source>\n+        <translation>Csak megfigyel\u00e9s</translation>\n+    </message>\n+    <message>\n+        <source>Date</source>\n+        <translation>D\u00e1tum</translation>\n+    </message>\n+    <message>\n+        <source>Type</source>\n+        <translation>T\u00edpus</translation>\n+    </message>\n     <message>\n         <source>Label</source>\n         <translation>C\u00edmke</translation>\n     </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>C\u00edm</translation>\n+    </message>\n+    <message>\n+        <source>ID</source>\n+        <translation>Azonos\u00edt\u00f3</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Hiba az export\u00e1l\u00e1s sor\u00e1n</translation>\n+    </message>\n+    <message>\n+        <source>There was an error trying to save the transaction history to %1.</source>\n+        <translation>Hiba t\u00f6rt\u00e9nt a tranzakci\u00f3s el\u0151zm\u00e9nyek %1 helyre val\u00f3 ment\u00e9sekor. </translation>\n+    </message>\n+    <message>\n+        <source>Exporting Successful</source>\n+        <translation>Sikeres Export\u00e1l\u00e1s</translation>\n+    </message>\n+    <message>\n+        <source>Range:</source>\n+        <translation>Tartom\u00e1ny:</translation>\n+    </message>\n     </context>\n <context>\n     <name>UnitDisplayStatusBarControl</name>\n@@ -1371,10 +2712,42 @@\n     </context>\n <context>\n     <name>WalletModel</name>\n-    </context>\n+    <message>\n+        <source>Send Coins</source>\n+        <translation>\u00c9rm\u00e9k K\u00fcld\u00e9se</translation>\n+    </message>\n+</context>\n <context>\n     <name>WalletView</name>\n-    </context>\n+    <message>\n+        <source>&amp;Export</source>\n+        <translation>&amp;Export\u00e1l\u00e1s</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>Jelenlegi n\u00e9zet adatainak export\u00e1l\u00e1sa f\u00e1jlba</translation>\n+    </message>\n+    <message>\n+        <source>Backup Wallet</source>\n+        <translation>Biztons\u00e1gi m\u00e1solat k\u00e9sz\u00edt\u00e9se a T\u00e1rc\u00e1r\u00f3l</translation>\n+    </message>\n+    <message>\n+        <source>Wallet Data (*.dat)</source>\n+        <translation>T\u00e1rca F\u00e1jl (*.dat)</translation>\n+    </message>\n+    <message>\n+        <source>Backup Failed</source>\n+        <translation>Biztons\u00e1gi m\u00e1solat k\u00e9sz\u00edt\u00e9se sikertelen</translation>\n+    </message>\n+    <message>\n+        <source>Backup Successful</source>\n+        <translation>Sikeres biztons\u00e1gi ment\u00e9s</translation>\n+    </message>\n+    <message>\n+        <source>The wallet data was successfully saved to %1.</source>\n+        <translation>A t\u00e1rca adatai sikeresen elmentve %1.</translation>\n+    </message>\n+</context>\n <context>\n     <name>bitcoin-core</name>\n     <message>\n@@ -1400,6 +2773,14 @@\n         <translation>Parancssoros \u00e9s JSON-RPC parancsok elfogad\u00e1sa\n </translation>\n     </message>\n+    <message>\n+        <source>Distributed under the MIT software license, see the accompanying file %s or %s</source>\n+        <translation>MIT szoftver licenc alapj\u00e1n terjesztve, tekintse meg a hozz\u00e1tartoz\u00f3 f\u00e1jlt %s or %s</translation>\n+    </message>\n+    <message>\n+        <source>Error: A fatal internal error occurred, see debug.log for details</source>\n+        <translation>Hiba: Fat\u00e1lis bels\u0151 hiba t\u00f6rt\u00e9nt, n\u00e9zze meg a debug.log -ot a r\u00e9szletek\u00e9rt</translation>\n+    </message>\n     <message>\n         <source>Run in the background as a daemon and accept commands</source>\n         <translation>H\u00e1tt\u00e9rben futtat\u00e1s daemonk\u00e9nt \u00e9s parancsok elfogad\u00e1sa\n@@ -1409,6 +2790,10 @@\n         <source>Bitcoin Core</source>\n         <translation>Bitcoin Core</translation>\n     </message>\n+    <message>\n+        <source>The %s developers</source>\n+        <translation>A %s fejleszt\u0151k</translation>\n+    </message>\n     <message>\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Parancs, amit akkor hajt v\u00e9gre, amikor egy t\u00e1rca-tranzakci\u00f3 megv\u00e1ltozik  (%s a parancsban lecser\u00e9l\u0151dik a blokk TxID-re)</translation>\n@@ -1543,10 +2928,18 @@\n         <source>Loading addresses...</source>\n         <translation>C\u00edmek bet\u00f6lt\u00e9se...</translation>\n     </message>\n+    <message>\n+        <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n+        <translation>Figyelem: Ismeretlen blokkokat b\u00e1ny\u00e1sznak! Lehets\u00e9ges, hogy ismeretlen szab\u00e1lyok \u00e9rv\u00e9nyesek.</translation>\n+    </message>\n     <message>\n         <source>(default: %s)</source>\n         <translation>(alap\u00e9rtelmezett: %s)</translation>\n     </message>\n+    <message>\n+        <source>How many blocks to check at startup (default: %u, 0 = all)</source>\n+        <translation>H\u00e1ny blokkot ellen\u0151rizzen indul\u00e1skor (alap\u00e9rtelmezett: %u, 0 = mindet)</translation>\n+    </message>\n     <message>\n         <source>Include IP addresses in debug output (default: %u)</source>\n         <translation>IP-c\u00edmek megjelen\u00edt\u00e9se a napl\u00f3ban (alap\u00e9rtelmezett: %u)</translation>\n@@ -1555,6 +2948,54 @@\n         <source>Invalid -proxy address: '%s'</source>\n         <translation>\u00c9rv\u00e9nytelen -proxy c\u00edm: '%s'</translation>\n     </message>\n+    <message>\n+        <source>Maximum per-connection receive buffer, &lt;n&gt;*1000 bytes (default: %u)</source>\n+        <translation>Kapcsolatonk\u00e9nti maximum fogad\u00f3 buffer, &lt;n&gt;*1000 byte (alap\u00e9rtelmezett: %u)</translation>\n+    </message>\n+    <message>\n+        <source>Maximum per-connection send buffer, &lt;n&gt;*1000 bytes (default: %u)</source>\n+        <translation>Kapcsolatonk\u00e9nti maximum k\u00fcld\u0151 buffer, &lt;n&gt;*1000 byte (alap\u00e9rtelmezett: %u)</translation>\n+    </message>\n+    <message>\n+        <source>Set key pool size to &lt;n&gt; (default: %u)</source>\n+        <translation>Kulcs halmaz m\u00e9ret\u00e9nek a be\u00e1ll\u00edt\u00e1sa &lt;n&gt;(alap\u00e9rtelmezett: %u) </translation>\n+    </message>\n+    <message>\n+        <source>Specify configuration file (default: %s)</source>\n+        <translation>Konfigur\u00e1ci\u00f3s f\u00e1jl megad\u00e1sa (alap\u00e9rtelmezett: %s)</translation>\n+    </message>\n+    <message>\n+        <source>Specify connection timeout in milliseconds (minimum: 1, default: %d)</source>\n+        <translation>Csatlakoz\u00e1s id\u0151t\u00fall\u00e9p\u00e9se milliszekundumban (minimum: 1, alap\u00e9rtelmezett: %d)</translation>\n+    </message>\n+    <message>\n+        <source>Specify pid file (default: %s)</source>\n+        <translation>Pid-f\u00e1jl megad\u00e1sa (alap\u00e9rtelmezett: %s)</translation>\n+    </message>\n+    <message>\n+        <source>Spend unconfirmed change when sending transactions (default: %u)</source>\n+        <translation>Tranzakci\u00f3k k\u00fcld\u00e9sekor a j\u00f3v\u00e1hagyatlan visszaj\u00e1r\u00f3 elk\u00f6lt\u00e9se (alap\u00e9rtelmez\u00e9s: %u)</translation>\n+    </message>\n+    <message>\n+        <source>Starting network threads...</source>\n+        <translation>H\u00e1l\u00f3zati sz\u00e1lak ind\u00edt\u00e1sa...</translation>\n+    </message>\n+    <message>\n+        <source>This is the minimum transaction fee you pay on every transaction.</source>\n+        <translation>Ez a minimum tranzakci\u00f3s d\u00edj, amelyet tranzakci\u00f3nk\u00e9nt kifizet.</translation>\n+    </message>\n+    <message>\n+        <source>This is the transaction fee you will pay if you send a transaction.</source>\n+        <translation>Ez a tranzakci\u00f3 d\u00edja, amelyet kifizet, ha tranzakci\u00f3t ind\u00edt.</translation>\n+    </message>\n+    <message>\n+        <source>Transaction amounts must not be negative</source>\n+        <translation>Tranzakci\u00f3 \u00f6sszege nem lehet negat\u00edv</translation>\n+    </message>\n+    <message>\n+        <source>Transaction must have at least one recipient</source>\n+        <translation>Legal\u00e1bb egy c\u00edmzett kell a tranzakci\u00f3hoz</translation>\n+    </message>\n     <message>\n         <source>Unknown network specified in -onlynet: '%s'</source>\n         <translation>Ismeretlen h\u00e1l\u00f3zat lett megadva -onlynet: '%s'</translation>"
      },
      {
        "sha": "62e4e7b0db4979e0332b8d64c1525fe0b2fb9862",
        "filename": "src/qt/locale/bitcoin_it.ts",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_it.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_it.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_it.ts?ref=f266f2668bf8fd73015bf8265f0d00f5e858b577",
        "patch": "@@ -3,7 +3,7 @@\n     <name>AddressBookPage</name>\n     <message>\n         <source>Right-click to edit address or label</source>\n-        <translation>Tasto destro per modificare l'indirizzo o l'etichetta</translation>\n+        <translation>Fare clic con il tasto destro del mouse per modificare l'indirizzo o l'etichetta</translation>\n     </message>\n     <message>\n         <source>Create a new address</source>\n@@ -881,6 +881,10 @@\n         <source>Form</source>\n         <translation>Modulo</translation>\n     </message>\n+    <message>\n+        <source>Recent transactions may not yet be visible, and therefore your wallet's balance might be incorrect. This information will be correct once your wallet has finished synchronizing with the bitcoin network, as detailed below.</source>\n+        <translation>Transazioni recenti potrebbero non essere visibili ancora, perci\u00f2 il saldo del tuo portafoglio potrebbe non essere corretto. Questa informazione risulter\u00e0 corretta quando il tuo portafoglio avr\u00e0 terminato la sincronizzazione con la rete bitcoin, come indicato in dettaglio pi\u00f9 sotto.</translation>\n+    </message>\n     <message>\n         <source>Number of blocks left</source>\n         <translation>Numero di blocchi mancanti</translation>\n@@ -1431,6 +1435,14 @@ Per specificare pi\u00f9 URL separarli con una barra verticale \"|\".</translation>\n </context>\n <context>\n     <name>QObject::QObject</name>\n+    <message>\n+        <source>Error: Specified data directory \"%1\" does not exist.</source>\n+        <translation>Errore: La cartella dati \"%1\" specificata non esiste.</translation>\n+    </message>\n+    <message>\n+        <source>Error: Cannot parse configuration file: %1. Only use key=value syntax.</source>\n+        <translation>Errore: impossibile interpretare il file di configurazione: %1. Usare esclusivamente la sintassi chiave=valore.</translation>\n+    </message>\n     <message>\n         <source>Error: %1</source>\n         <translation>Errore: %1</translation>\n@@ -2165,6 +2177,10 @@ Per specificare pi\u00f9 URL separarli con una barra verticale \"|\".</translation>\n         <source>Pay only the required fee of %1</source>\n         <translation> Paga solamente la commissione richiesta di %1</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>Estimated to begin confirmation within %n block(s).</source>\n+        <translation><numerusform>Inizio delle conferme stimato entro %n blocchi.</numerusform><numerusform>Inizio delle conferme stimato entro %n blocchi.</numerusform></translation>\n+    </message>\n     <message>\n         <source>Warning: Invalid Bitcoin address</source>\n         <translation>Attenzione: Indirizzo Bitcoin non valido</translation>\n@@ -2592,6 +2608,10 @@ Per specificare pi\u00f9 URL separarli con una barra verticale \"|\".</translation>\n         <source>Unconfirmed</source>\n         <translation>Non confermata</translation>\n     </message>\n+    <message>\n+        <source>Abandoned</source>\n+        <translation>Abbandonato</translation>\n+    </message>\n     <message>\n         <source>Confirmed (%1 confirmations)</source>\n         <translation>Confermata (%1 conferme)</translation>\n@@ -2608,6 +2628,10 @@ Per specificare pi\u00f9 URL separarli con una barra verticale \"|\".</translation>\n         <source>Received with</source>\n         <translation>Ricevuto tramite</translation>\n     </message>\n+    <message>\n+        <source>Received from</source>\n+        <translation>Ricevuto da</translation>\n+    </message>\n     <message>\n         <source>Sent to</source>\n         <translation>Inviato a</translation>\n@@ -2715,6 +2739,10 @@ Per specificare pi\u00f9 URL separarli con una barra verticale \"|\".</translation>\n         <source>Min amount</source>\n         <translation>Importo minimo</translation>\n     </message>\n+    <message>\n+        <source>Abandon transaction</source>\n+        <translation>Abbandona transazione </translation>\n+    </message>\n     <message>\n         <source>Copy address</source>\n         <translation>Copia indirizzo</translation>"
      },
      {
        "sha": "46862dfe81c870017814077688ced4bc2278f152",
        "filename": "src/qt/locale/bitcoin_nb.ts",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_nb.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_nb.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nb.ts?ref=f266f2668bf8fd73015bf8265f0d00f5e858b577",
        "patch": "@@ -433,6 +433,14 @@\n         <source>%n active connection(s) to Bitcoin network</source>\n         <translation><numerusform>%n aktiv forbindelse til Bitcoin-nettverket</numerusform><numerusform>%n aktive forbindelser til Bitcoin-nettverket</numerusform></translation>\n     </message>\n+    <message>\n+        <source>Indexing blocks on disk...</source>\n+        <translation>Indekserer blokker p\u00e5 disk...</translation>\n+    </message>\n+    <message>\n+        <source>Processing blocks on disk...</source>\n+        <translation>Prosesserer blokker p\u00e5 disk...</translation>\n+    </message>\n     <message numerus=\"yes\">\n         <source>Processed %n block(s) of transaction history.</source>\n         <translation><numerusform>Lastet %n blokk med transaksjonshistorikk.</numerusform><numerusform>Lastet %n blokker med transaksjonshistorikk.</numerusform></translation>"
      },
      {
        "sha": "3b6616473fd7a3843afe54e91b57897bb8cb215a",
        "filename": "src/qt/locale/bitcoin_nl.ts",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_nl.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_nl.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_nl.ts?ref=f266f2668bf8fd73015bf8265f0d00f5e858b577",
        "patch": "@@ -3455,7 +3455,7 @@\n     </message>\n     <message>\n         <source>Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)</source>\n-        <translation>Transactiekosten (in %s/kB) kleiner dan dit worden beschouw dat geen transactiekosten in rekening worden gebracht voor doorgeven, mijnen en transactiecreatie (standaard: %s)</translation>\n+        <translation>Transactiekosten (in %s/kB) kleiner dan dit worden beschouw dat geen transactiekosten in rekening worden gebracht voor doorgeven, delven en transactiecreatie (standaard: %s)</translation>\n     </message>\n     <message>\n         <source>If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)</source>\n@@ -3663,7 +3663,7 @@\n     </message>\n     <message>\n         <source>Equivalent bytes per sigop in transactions for relay and mining (default: %u)</source>\n-        <translation>Equivalent byter per sigop in transactions voor doorsturen en mijnen (standaard: %u)</translation>\n+        <translation>Equivalente bytes per sigop in transacties voor doorsturen en delven (standaard: %u)</translation>\n     </message>\n     <message>\n         <source>Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)</source>"
      },
      {
        "sha": "03f52d752fefd4bab363e218ae8c9c84d3c22478",
        "filename": "src/qt/locale/bitcoin_pt_PT.ts",
        "status": "modified",
        "additions": 50,
        "deletions": 2,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_pt_PT.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_pt_PT.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_pt_PT.ts?ref=f266f2668bf8fd73015bf8265f0d00f5e858b577",
        "patch": "@@ -2161,10 +2161,18 @@\n         <source>The total exceeds your balance when the %1 transaction fee is included.</source>\n         <translation>O total excede o seu saldo quando a taxa de transa\u00e7\u00e3o %1 est\u00e1 inclu\u00edda.</translation>\n     </message>\n+    <message>\n+        <source>Duplicate address found: addresses should only be used once each.</source>\n+        <translation>Endere\u00e7o duplicado encontrado: os endere\u00e7os devem ser usados \u200b\u200bapenas uma vez.</translation>\n+    </message>\n     <message>\n         <source>Transaction creation failed!</source>\n         <translation>A cria\u00e7\u00e3o da transa\u00e7\u00e3o falhou!</translation>\n     </message>\n+    <message>\n+        <source>The transaction was rejected with the following reason: %1</source>\n+        <translation>A transa\u00e7\u00e3o foi rejeitada pelo seguinte motivo: %1</translation>\n+    </message>\n     <message>\n         <source>A fee higher than %1 is considered an absurdly high fee.</source>\n         <translation>Uma taxa superior a %1 \u00e9 considerada uma taxa altamente absurda.</translation>\n@@ -2173,10 +2181,18 @@\n         <source>Payment request expired.</source>\n         <translation>Pedido de pagamento expirado.</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>%n block(s)</source>\n+        <translation><numerusform>%n bloco</numerusform><numerusform>%n blocos</numerusform></translation>\n+    </message>\n     <message>\n         <source>Pay only the required fee of %1</source>\n         <translation>Pague apenas a taxa obrigat\u00f3ria de %1</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>Estimated to begin confirmation within %n block(s).</source>\n+        <translation><numerusform>Estimativa para iniciar a confirma\u00e7\u00e3o dentro de %n bloco.</numerusform><numerusform>Estimativa para iniciar a confirma\u00e7\u00e3o dentro de %n blocos.</numerusform></translation>\n+    </message>\n     <message>\n         <source>Warning: Invalid Bitcoin address</source>\n         <translation>Aviso: endere\u00e7o Bitcoin inv\u00e1lido</translation>\n@@ -2189,6 +2205,10 @@\n         <source>Confirm custom change address</source>\n         <translation>Confirmar endere\u00e7o de troco personalizado</translation>\n     </message>\n+    <message>\n+        <source>The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?</source>\n+        <translation>O endere\u00e7o que voc\u00ea selecionou para alterar n\u00e3o faz parte desta carteira. Qualquer ou todos os fundos em sua carteira podem ser enviados para este endere\u00e7o. Voc\u00ea tem certeza?</translation>\n+    </message>\n     <message>\n         <source>(no label)</source>\n         <translation>(sem etiqueta)</translation>\n@@ -2272,7 +2292,11 @@\n         <source>Memo:</source>\n         <translation>Memorando:</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Enter a label for this address to add it to your address book</source>\n+        <translation>Digite um r\u00f3tulo para este endere\u00e7o para adicion\u00e1-lo ao seu cat\u00e1logo de endere\u00e7os</translation>\n+    </message>\n+</context>\n <context>\n     <name>SendConfirmationDialog</name>\n     <message>\n@@ -2446,6 +2470,10 @@\n </context>\n <context>\n     <name>TransactionDesc</name>\n+    <message numerus=\"yes\">\n+        <source>Open for %n more block(s)</source>\n+        <translation><numerusform>Abrir para %n ou mais bloco</numerusform><numerusform>Abrir para %n ou mais blocos</numerusform></translation>\n+    </message>\n     <message>\n         <source>Open until %1</source>\n         <translation>Aberto at\u00e9 %1</translation>\n@@ -2486,6 +2514,10 @@\n         <source>, has not been successfully broadcast yet</source>\n         <translation>, ainda n\u00e3o foi transmitido com sucesso</translation>\n     </message>\n+    <message numerus=\"yes\">\n+        <source>, broadcast through %n node(s)</source>\n+        <translation><numerusform>, transmitido atrav\u00e9s de %n n\u00f3</numerusform><numerusform>, transmitido atrav\u00e9s de %n n\u00f3s</numerusform></translation>\n+    </message>\n     <message>\n         <source>Date</source>\n         <translation>Data</translation>\n@@ -2743,6 +2775,10 @@\n         <source>Other</source>\n         <translation>Outras</translation>\n     </message>\n+    <message>\n+        <source>Enter address or label to search</source>\n+        <translation>Digite o endere\u00e7o ou o r\u00f3tulo para pesquisar</translation>\n+    </message>\n     <message>\n         <source>Min amount</source>\n         <translation>Valor m\u00edn.</translation>\n@@ -2845,7 +2881,11 @@\n </context>\n <context>\n     <name>WalletFrame</name>\n-    </context>\n+    <message>\n+        <source>No wallet has been loaded.</source>\n+        <translation>Nenhuma carteira foi carregada</translation>\n+    </message>\n+</context>\n <context>\n     <name>WalletModel</name>\n     <message>\n@@ -2970,6 +3010,10 @@\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>Executar o comando quando uma transa\u00e7\u00e3o da carteira muda (no comando, %s \u00e9 substitu\u00eddo pela Id. da Transa\u00e7\u00e3o)</translation>\n     </message>\n+    <message>\n+        <source>Please check that your computer's date and time are correct! If your clock is wrong, %s will not work properly.</source>\n+        <translation>Por favor verifique que a data e hora do seu computador est\u00e3o certos! Se o rel\u00f3gio n\u00e3o estiver certo, o %s n\u00e3o funcionar\u00e1 corretamente.</translation>\n+    </message>\n     <message>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation>Defina o n\u00famero de processos de verifica\u00e7\u00e3o (%u at\u00e9 %d, 0 = autom\u00e1tico, &lt;0 = ldisponibiliza esse n\u00famero de n\u00facleos livres, por defeito: %d)</translation>\n@@ -3498,6 +3542,10 @@\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>Aten\u00e7\u00e3o: Vers\u00f5es desconhecidas de blocos est\u00e3o a ser mineradas! \u00c9 poss\u00edvel que regras desconhecias est\u00e3o a ser efetuadas</translation>\n     </message>\n+    <message>\n+        <source>%s is set very high!</source>\n+        <translation>%s est\u00e1 demasiado elevado!</translation>\n+    </message>\n     <message>\n         <source>(default: %s)</source>\n         <translation>(predefini\u00e7\u00e3o: %s)</translation>"
      },
      {
        "sha": "de23b8a1a730a026c68cc43f7e2cc0729e13be8e",
        "filename": "src/qt/locale/bitcoin_ro_RO.ts",
        "status": "modified",
        "additions": 108,
        "deletions": 0,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_ro_RO.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_ro_RO.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_ro_RO.ts?ref=f266f2668bf8fd73015bf8265f0d00f5e858b577",
        "patch": "@@ -41,9 +41,61 @@\n         <source>&amp;Delete</source>\n         <translation>&amp;\u015eterge</translation>\n     </message>\n+    <message>\n+        <source>C&amp;hoose</source>\n+        <translation>&amp;Alege\u0163i</translation>\n+    </message>\n+    <message>\n+        <source>Sending addresses</source>\n+        <translation>Adresa destinatarului</translation>\n+    </message>\n+    <message>\n+        <source>Receiving addresses</source>\n+        <translation>Adresa de primire</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for sending payments. Always check the amount and the receiving address before sending coins.</source>\n+        <translation>Acestea sunt adresele tale Bitcoin pentru efectuarea platilor. Intotdeauna verifica atent suma de plata si adresa beneficiarului inainte de a trimite monede.</translation>\n+    </message>\n+    <message>\n+        <source>These are your Bitcoin addresses for receiving payments. It is recommended to use a new receiving address for each transaction.</source>\n+        <translation>Acestea sunt adresele tale Bitcoin pentru receptionarea platilor. Este recomandat sa folosesti mereu o adresa noua pentru primirea platilor.</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Copy Address</source>\n+        <translation>&amp;Copiaz\u0103 adresa</translation>\n+    </message>\n+    <message>\n+        <source>Copy &amp;Label</source>\n+        <translation>Copiaza si eticheteaza</translation>\n+    </message>\n+    <message>\n+        <source>&amp;Edit</source>\n+        <translation>&amp;Editare</translation>\n+    </message>\n+    <message>\n+        <source>Export Address List</source>\n+        <translation>Export\u0103 list\u0103 de adrese</translation>\n+    </message>\n+    <message>\n+        <source>Comma separated file (*.csv)</source>\n+        <translation>Fisier .csv cu separator - virgula</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Exportarea a e\u0219uat</translation>\n+    </message>\n     </context>\n <context>\n     <name>AddressTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etichet\u0103</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adres\u0103</translation>\n+    </message>\n     </context>\n <context>\n     <name>AskPassphraseDialog</name>\n@@ -63,6 +115,30 @@\n         <source>Repeat new passphrase</source>\n         <translation>Repeta\u0163i noua fraz\u0103 de acces</translation>\n     </message>\n+    <message>\n+        <source>Encrypt wallet</source>\n+        <translation>Criptare portofel</translation>\n+    </message>\n+    <message>\n+        <source>Unlock wallet</source>\n+        <translation>Deblocare portofel</translation>\n+    </message>\n+    <message>\n+        <source>Decrypt wallet</source>\n+        <translation>Decriptare portofel</translation>\n+    </message>\n+    <message>\n+        <source>Change passphrase</source>\n+        <translation>Schimb\u0103 parola</translation>\n+    </message>\n+    <message>\n+        <source>Confirm wallet encryption</source>\n+        <translation>Confirma\u0163i criptarea portofelului</translation>\n+    </message>\n+    <message>\n+        <source>Wallet encrypted</source>\n+        <translation>Portofel criptat</translation>\n+    </message>\n     </context>\n <context>\n     <name>BanTableModel</name>\n@@ -1230,13 +1306,25 @@\n         <source>&amp;Save Image...</source>\n         <translation>&amp;Salveaz\u0103 imaginea...</translation>\n     </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adres\u0103</translation>\n+    </message>\n     <message>\n         <source>Amount</source>\n         <translation>Cantitate</translation>\n     </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etichet\u0103</translation>\n+    </message>\n     </context>\n <context>\n     <name>RecentRequestsTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etichet\u0103</translation>\n+    </message>\n     </context>\n <context>\n     <name>SendCoinsDialog</name>\n@@ -1547,9 +1635,29 @@\n     </context>\n <context>\n     <name>TransactionTableModel</name>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etichet\u0103</translation>\n+    </message>\n     </context>\n <context>\n     <name>TransactionView</name>\n+    <message>\n+        <source>Comma separated file (*.csv)</source>\n+        <translation>Fisier .csv cu separator - virgula</translation>\n+    </message>\n+    <message>\n+        <source>Label</source>\n+        <translation>Etichet\u0103</translation>\n+    </message>\n+    <message>\n+        <source>Address</source>\n+        <translation>Adres\u0103</translation>\n+    </message>\n+    <message>\n+        <source>Exporting Failed</source>\n+        <translation>Exportarea a e\u0219uat</translation>\n+    </message>\n     </context>\n <context>\n     <name>UnitDisplayStatusBarControl</name>"
      },
      {
        "sha": "2bed5ece23f43f8dc454ee6d039e2798029c7044",
        "filename": "src/qt/locale/bitcoin_th.ts",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_th.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_th.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_th.ts?ref=f266f2668bf8fd73015bf8265f0d00f5e858b577",
        "patch": "@@ -13,6 +13,10 @@\n         <source>&amp;New</source>\n         <translation>\u0e43\u0e2b\u0e21\u0e48</translation>\n     </message>\n+    <message>\n+        <source>Copy the currently selected address to the system clipboard</source>\n+        <translation>\u0e04\u0e31\u0e14\u0e25\u0e2d\u0e01\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e17\u0e35\u0e48\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e2d\u0e22\u0e39\u0e48\u0e44\u0e1b\u0e22\u0e31\u0e07\u0e04\u0e25\u0e34\u0e1a\u0e1a\u0e2d\u0e23\u0e4c\u0e14\u0e02\u0e2d\u0e07\u0e23\u0e30\u0e1a\u0e1a</translation>\n+    </message>\n     <message>\n         <source>&amp;Copy</source>\n         <translation>\u0e04\u0e31\u0e14\u0e25\u0e2d\u0e01</translation>\n@@ -21,6 +25,14 @@\n         <source>C&amp;lose</source>\n         <translation>\u0e1b\u0e34\u0e14</translation>\n     </message>\n+    <message>\n+        <source>Delete the currently selected address from the list</source>\n+        <translation>\u0e25\u0e1a\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e17\u0e35\u0e48\u0e40\u0e25\u0e37\u0e2d\u0e01\u0e44\u0e27\u0e49\u0e2d\u0e2d\u0e01\u0e08\u0e32\u0e01\u0e23\u0e32\u0e22\u0e01\u0e32\u0e23</translation>\n+    </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>\u0e2a\u0e48\u0e07\u0e2d\u0e2d\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e41\u0e16\u0e1a\u0e19\u0e35\u0e49\u0e44\u0e1b\u0e43\u0e19\u0e44\u0e1f\u0e25\u0e4c</translation>\n+    </message>\n     <message>\n         <source>&amp;Export</source>\n         <translation>\u0e2a\u0e48\u0e07\u0e2d\u0e2d\u0e01</translation>\n@@ -196,6 +208,10 @@\n         <source>&amp;Export</source>\n         <translation>\u0e2a\u0e48\u0e07\u0e2d\u0e2d\u0e01</translation>\n     </message>\n+    <message>\n+        <source>Export the data in the current tab to a file</source>\n+        <translation>\u0e2a\u0e48\u0e07\u0e2d\u0e2d\u0e01\u0e02\u0e49\u0e2d\u0e21\u0e39\u0e25\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e43\u0e19\u0e41\u0e16\u0e1a\u0e19\u0e35\u0e49\u0e44\u0e1b\u0e43\u0e19\u0e44\u0e1f\u0e25\u0e4c</translation>\n+    </message>\n     </context>\n <context>\n     <name>bitcoin-core</name>"
      },
      {
        "sha": "c97cab823082a61e56fe6a10a871b812664db07f",
        "filename": "src/qt/locale/bitcoin_tr_TR.ts",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_tr_TR.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_tr_TR.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_tr_TR.ts?ref=f266f2668bf8fd73015bf8265f0d00f5e858b577",
        "patch": "@@ -80,7 +80,11 @@\n         <source>Address</source>\n         <translation>adres</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(etiket yok)</translation>\n+    </message>\n+</context>\n <context>\n     <name>AskPassphraseDialog</name>\n     <message>\n@@ -152,6 +156,10 @@\n     </context>\n <context>\n     <name>CoinControlDialog</name>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(etiket yok)</translation>\n+    </message>\n     </context>\n <context>\n     <name>EditAddressDialog</name>\n@@ -231,10 +239,18 @@\n         <source>Label</source>\n         <translation>etiket</translation>\n     </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(etiket yok)</translation>\n+    </message>\n     </context>\n <context>\n     <name>SendCoinsDialog</name>\n-    </context>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(etiket yok)</translation>\n+    </message>\n+</context>\n <context>\n     <name>SendCoinsEntry</name>\n     </context>\n@@ -265,6 +281,10 @@\n         <source>Label</source>\n         <translation>etiket</translation>\n     </message>\n+    <message>\n+        <source>(no label)</source>\n+        <translation>(etiket yok)</translation>\n+    </message>\n     </context>\n <context>\n     <name>TransactionView</name>"
      },
      {
        "sha": "754b49fd455ee1a1bcde88c7a6e7f0eb8beb086a",
        "filename": "src/qt/locale/bitcoin_zh_CN.ts",
        "status": "modified",
        "additions": 111,
        "deletions": 3,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_zh_CN.ts",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f266f2668bf8fd73015bf8265f0d00f5e858b577/src/qt/locale/bitcoin_zh_CN.ts",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/locale/bitcoin_zh_CN.ts?ref=f266f2668bf8fd73015bf8265f0d00f5e858b577",
        "patch": "@@ -197,7 +197,7 @@\n     </message>\n     <message>\n         <source>The supplied passphrases do not match.</source>\n-        <translation>\u63d0\u4f9b\u7684\u5bc6\u7801\u4e0dyi'zhi\u3002</translation>\n+        <translation>\u63d0\u4f9b\u7684\u5bc6\u7801\u4e0d\u4e00\u81f4\u3002</translation>\n     </message>\n     <message>\n         <source>Wallet unlock failed</source>\n@@ -531,6 +531,14 @@\n         <source>Incoming transaction</source>\n         <translation>\u6d41\u5165\u4ea4\u6613</translation>\n     </message>\n+    <message>\n+        <source>HD key generation is &lt;b&gt;enabled&lt;/b&gt;</source>\n+        <translation>HD\u5bc6\u94a5\u751f\u6210&lt;b&gt;\u542f\u7528&lt;/b&gt;</translation>\n+    </message>\n+    <message>\n+        <source>HD key generation is &lt;b&gt;disabled&lt;/b&gt;</source>\n+        <translation>HD\u5bc6\u94a5\u751f\u6210&lt;b&gt;\u7981\u7528&lt;/b&gt;</translation>\n+    </message>\n     <message>\n         <source>Wallet is &lt;b&gt;encrypted&lt;/b&gt; and currently &lt;b&gt;unlocked&lt;/b&gt;</source>\n         <translation>\u94b1\u5305\u5df2\u88ab&lt;b&gt;\u52a0\u5bc6&lt;/b&gt;\uff0c\u5f53\u524d\u4e3a&lt;b&gt;\u89e3\u9501&lt;/b&gt;\u72b6\u6001</translation>\n@@ -918,7 +926,11 @@\n         <source>Hide</source>\n         <translation>\u9690\u85cf</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Unknown. Syncing Headers (%1)...</source>\n+        <translation>\u672a\u77e5\u72b6\u6001\u3002\u540c\u6b65\u533a\u5757\u5934\uff08%1\uff09</translation>\n+    </message>\n+</context>\n <context>\n     <name>OpenURIDialog</name>\n     <message>\n@@ -2638,7 +2650,11 @@\n         <source>This pane shows a detailed description of the transaction</source>\n         <translation>\u5f53\u524d\u9762\u677f\u663e\u793a\u4e86\u4ea4\u6613\u7684\u8be6\u7ec6\u4fe1\u606f</translation>\n     </message>\n-    </context>\n+    <message>\n+        <source>Details for %1</source>\n+        <translation>%1 \u8be6\u60c5</translation>\n+    </message>\n+</context>\n <context>\n     <name>TransactionTableModel</name>\n     <message>\n@@ -2665,6 +2681,10 @@\n         <source>Unconfirmed</source>\n         <translation>\u672a\u786e\u8ba4\u7684 </translation>\n     </message>\n+    <message>\n+        <source>Abandoned</source>\n+        <translation>\u5df2\u4e22\u5f03</translation>\n+    </message>\n     <message>\n         <source>Confirming (%1 of %2 recommended confirmations)</source>\n         <translation>\u786e\u8ba4\u4e2d (\u63a8\u8350 %2\u4e2a\u786e\u8ba4\uff0c\u5df2\u7ecf\u6709 %1\u4e2a\u786e\u8ba4)</translation>\n@@ -2982,6 +3002,10 @@\n         <translation>\u63a5\u53d7\u547d\u4ee4\u884c\u548c JSON-RPC \u547d\u4ee4\n </translation>\n     </message>\n+    <message>\n+        <source>Distributed under the MIT software license, see the accompanying file %s or %s</source>\n+        <translation>\u5728MIT\u534f\u8bae\u4e0b\u5206\u53d1\uff0c\u53c2\u89c1\u9644\u5e26\u7684 %s \u6587\u4ef6\u6216 %s</translation>\n+    </message>\n     <message>\n         <source>If &lt;category&gt; is not supplied or if &lt;category&gt; = 1, output all debugging information.</source>\n         <translation>\u5982\u679c&lt;category&gt;\u672a\u63d0\u4f9b\u6216&lt;category&gt; = 1\uff0c\u8f93\u51fa\u6240\u6709\u8c03\u8bd5\u4fe1\u606f\u3002</translation>\n@@ -3040,14 +3064,34 @@\n         <source>Bind to given address and always listen on it. Use [host]:port notation for IPv6</source>\n         <translation>\u7ed1\u5b9a\u6307\u5b9a\u7684IP\u5730\u5740\u5f00\u59cb\u76d1\u542c\u3002IPv6\u5730\u5740\u8bf7\u4f7f\u7528[host]:port \u683c\u5f0f</translation>\n     </message>\n+    <message>\n+        <source>Cannot obtain a lock on data directory %s. %s is probably already running.</source>\n+        <translation>\u65e0\u6cd5\u7ed9\u6570\u636e\u76ee\u5f55 %s \u4e0a\u9501\u3002%s \u53ef\u80fd\u5df2\u7ecf\u5728\u8fd0\u884c\u3002</translation>\n+    </message>\n     <message>\n         <source>Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup</source>\n         <translation>\u5220\u9664\u94b1\u5305\u7684\u6240\u6709\u4ea4\u6613\u8bb0\u5f55\uff0c\u4e14\u53ea\u6709\u7528 -rescan\u53c2\u6570\u542f\u52a8\u5ba2\u6237\u7aef\u624d\u80fd\u91cd\u65b0\u53d6\u56de\u4ea4\u6613\u8bb0\u5f55 </translation>\n     </message>\n+    <message>\n+        <source>Error reading %s! All keys read correctly, but transaction data or address book entries might be missing or incorrect.</source>\n+        <translation>\u8bfb\u53d6 %s \u65f6\u53d1\u751f\u9519\u8bef\uff01\u6240\u6709\u7684\u5bc6\u94a5\u90fd\u53ef\u4ee5\u6b63\u786e\u8bfb\u53d6\uff0c\u4f46\u662f\u4ea4\u6613\u8bb0\u5f55\u6216\u5730\u5740\u7c3f\u6570\u636e\u53ef\u80fd\u5df2\u7ecf\u4e22\u5931\u6216\u51fa\u9519\u3002</translation>\n+    </message>\n     <message>\n         <source>Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)</source>\n         <translation>\u5f53\u6700\u4f73\u533a\u5757\u53d8\u5316\u65f6\u6267\u884c\u547d\u4ee4 (\u547d\u4ee4\u884c\u4e2d\u7684 %s \u4f1a\u88ab\u66ff\u6362\u6210\u533a\u5757\u54c8\u5e0c\u503c)</translation>\n     </message>\n+    <message>\n+        <source>Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)</source>\n+        <translation>\u6700\u5927\u7684\u5355\u6b21\u94b1\u5305\u6216\u539f\u59cb\u8f6c\u8d26\u8d39\u7528\uff08%s\uff09\uff0c\u8bbe\u7f6e\u592a\u4f4e\u53ef\u80fd\u5bfc\u81f4\u5927\u5c3a\u5bf8\u4ea4\u6613\u5931\u8d25\uff08\u9ed8\u8ba4\uff1a%s\uff09</translation>\n+    </message>\n+    <message>\n+        <source>Please check that your computer's date and time are correct! If your clock is wrong, %s will not work properly.</source>\n+        <translation>\u8bf7\u68c0\u67e5\u7535\u8111\u7684\u65e5\u671f\u65f6\u95f4\u8bbe\u7f6e\u662f\u5426\u6b63\u786e\uff01\u65f6\u95f4\u9519\u8bef\u53ef\u80fd\u4f1a\u5bfc\u81f4 %s \u8fd0\u884c\u5f02\u5e38\u3002</translation>\n+    </message>\n+    <message>\n+        <source>Please contribute if you find %s useful. Visit %s for further information about the software.</source>\n+        <translation>\u5982\u679c\u4f60\u8ba4\u4e3a%s\u5bf9\u4f60\u6bd4\u8f83\u6709\u7528\u7684\u8bdd\uff0c\u8bf7\u5bf9\u6211\u4eec\u8fdb\u884c\u4e00\u4e9b\u6350\u8d60\u652f\u6301\u3002\u8bf7\u8bbf\u95ee%s\u7f51\u7ad9\u6765\u83b7\u53d6\u6709\u5173\u8fd9\u4e2a\u8f6f\u4ef6\u7684\u66f4\u591a\u4fe1\u606f\u3002</translation>\n+    </message>\n     <message>\n         <source>Set the number of script verification threads (%u to %d, 0 = auto, &lt;0 = leave that many cores free, default: %d)</source>\n         <translation>\u8bbe\u7f6e\u811a\u672c\u9a8c\u8bc1\u7684\u7a0b\u5e8f (%u \u5230 %d, 0 = \u81ea\u52a8, &lt;0 = \u4fdd\u7559\u81ea\u7531\u7684\u6838\u5fc3, \u9ed8\u8ba4\u503c: %d)</translation>\n@@ -3060,6 +3104,10 @@\n         <source>Use UPnP to map the listening port (default: 1 when listening and no -proxy)</source>\n         <translation>\u4f7f\u7528UPnP\u66b4\u9732\u672c\u673a\u76d1\u542c\u7aef\u53e3\uff08\u9ed8\u8ba4\uff1a1 \u5f53\u6b63\u5728\u76d1\u542c\u4e14\u4e0d\u4f7f\u7528\u4ee3\u7406\uff09</translation>\n     </message>\n+    <message>\n+        <source>%s corrupt, salvage failed</source>\n+        <translation>%s \u5df2\u635f\u574f\uff0c\u62a2\u6551\u5907\u4efd\u5931\u8d25</translation>\n+    </message>\n     <message>\n         <source>-maxmempool must be at least %d MB</source>\n         <translation>-maxmempool \u6700\u5c0f\u4e3a%d MB</translation>\n@@ -3072,6 +3120,10 @@\n         <source>Append comment to the user agent string</source>\n         <translation>\u4e3a\u7528\u6237\u4ee3\u7406\u5b57\u7b26\u4e32\u9644\u52a0\u8bf4\u660e</translation>\n     </message>\n+    <message>\n+        <source>Attempt to recover private keys from a corrupt wallet on startup</source>\n+        <translation>\u542f\u52a8\u65f6\u5c1d\u8bd5\u4ece\u5df2\u635f\u574f\u7684\u94b1\u5305\u6587\u4ef6\u4e2d\u6062\u590d\u79c1\u94a5</translation>\n+    </message>\n     <message>\n         <source>Block creation options:</source>\n         <translation>\u6570\u636e\u5757\u521b\u5efa\u9009\u9879\uff1a</translation>\n@@ -3080,6 +3132,10 @@\n         <source>Cannot resolve -%s address: '%s'</source>\n         <translation>\u65e0\u6cd5\u89e3\u6790 - %s \u5730\u5740\uff1a '%s'</translation>\n     </message>\n+    <message>\n+        <source>Chain selection options:</source>\n+        <translation>\u533a\u5757\u94fe\u9009\u62e9\u9009\u9879:</translation>\n+    </message>\n     <message>\n         <source>Connection options:</source>\n         <translation>\u8fde\u63a5\u9009\u9879\uff1a</translation>\n@@ -3136,6 +3192,14 @@\n         <source>Error loading %s</source>\n         <translation>\u8f7d\u5165 %s \u65f6\u53d1\u751f\u9519\u8bef</translation>\n     </message>\n+    <message>\n+        <source>Error loading %s: Wallet corrupted</source>\n+        <translation>%s \u52a0\u8f7d\u51fa\u9519\uff1a\u94b1\u5305\u635f\u574f</translation>\n+    </message>\n+    <message>\n+        <source>Error loading %s: Wallet requires newer version of %s</source>\n+        <translation>%s \u52a0\u8f7d\u9519\u8bef\uff1a\u8bf7\u5347\u7ea7\u5230\u6700\u65b0\u7248 %s</translation>\n+    </message>\n     <message>\n         <source>Error loading block database</source>\n         <translation>\u5bfc\u5165\u6570\u636e\u5757\u6570\u636e\u5e93\u51fa\u9519</translation>\n@@ -3164,6 +3228,10 @@\n         <source>Invalid -onion address: '%s'</source>\n         <translation>\u65e0\u6548\u7684 -onion \u5730\u5740\uff1a\u201c%s\u201d</translation>\n     </message>\n+    <message>\n+        <source>Invalid amount for -%s=&lt;amount&gt;: '%s'</source>\n+        <translation>\u975e\u6cd5\u91d1\u989d -%s=&lt;amount&gt;: '%s'</translation>\n+    </message>\n     <message>\n         <source>Invalid amount for -fallbackfee=&lt;amount&gt;: '%s'</source>\n         <translation>-fallbackfee \u7684\u65e0\u6548\u6570\u989d=&lt;amount&gt;: '%s'</translation>\n@@ -3172,6 +3240,10 @@\n         <source>Keep the transaction memory pool below &lt;n&gt; megabytes (default: %u)</source>\n         <translation>\u4fdd\u6301\u4ea4\u6613\u5185\u5b58\u6c60\u5927\u5c0f\u4f4e\u4e8e&lt;n&gt;MB\uff08\u9ed8\u8ba4\uff1a%u\uff09</translation>\n     </message>\n+    <message>\n+        <source>Loading banlist...</source>\n+        <translation>\u52a0\u8f7d\u9ed1\u540d\u5355</translation>\n+    </message>\n     <message>\n         <source>Location of the auth cookie (default: data dir)</source>\n         <translation>\u8ba4\u8bc1Cookie\u7684\u4f4d\u7f6e (\u9ed8\u8ba4: data\u76ee\u5f55)</translation>\n@@ -3184,6 +3256,10 @@\n         <source>Only connect to nodes in network &lt;net&gt; (ipv4, ipv6 or onion)</source>\n         <translation>\u53ea\u8fde\u63a5 &lt;net&gt;\u7f51\u7edc\u4e2d\u7684\u8282\u70b9 (ipv4, ipv6 \u6216 onion) </translation>\n     </message>\n+    <message>\n+        <source>Print this help message and exit</source>\n+        <translation>\u6253\u5370\u51fa\u8fd9\u6bb5\u5e2e\u52a9\u4fe1\u606f\u5e76\u9000\u51fa</translation>\n+    </message>\n     <message>\n         <source>Print version and exit</source>\n         <translation>\u6253\u5370\u7248\u672c\u4fe1\u606f\u5e76\u9000\u51fa</translation>\n@@ -3196,6 +3272,10 @@\n         <source>Prune mode is incompatible with -txindex.</source>\n         <translation>\u4fee\u526a\u6a21\u5f0f\u4e0e -txindex \u4e0d\u517c\u5bb9\u3002</translation>\n     </message>\n+    <message>\n+        <source>Rebuild chain state from the currently indexed blocks</source>\n+        <translation>\u4ece\u5f53\u524d\u7d22\u5f15\u7684\u533a\u5757\u4e2d\u91cd\u5efa\u94fe\u72b6\u6001</translation>\n+    </message>\n     <message>\n         <source>Set database cache size in megabytes (%d to %d, default: %d)</source>\n         <translation>\u8bbe\u7f6e\u4ee5MB\u4e3a\u5355\u4f4d\u7684\u6570\u636e\u5e93\u7f13\u5b58\u5927\u5c0f(%d \u5230 %d, \u9ed8\u8ba4\u503c: %d)</translation>\n@@ -3212,6 +3292,10 @@\n         <source>The source code is available from %s.</source>\n         <translation>\u6e90\u4ee3\u7801\u53ef\u4ee5\u5728 %s \u83b7\u5f97\u3002</translation>\n     </message>\n+    <message>\n+        <source>Unable to bind to %s on this computer. %s is probably already running.</source>\n+        <translation>\u65e0\u6cd5\u5728\u672c\u673a\u7ed1\u5b9a %s \u7aef\u53e3\u3002%s \u53ef\u80fd\u5df2\u7ecf\u5728\u8fd0\u884c\u3002</translation>\n+    </message>\n     <message>\n         <source>Unsupported argument -benchmark ignored, use -debug=bench.</source>\n         <translation>\u5ffd\u7565\u4e0d\u652f\u6301\u7684\u9009\u9879 -benchmark\uff0c\u4f7f\u7528 -debug=bench</translation>\n@@ -3513,6 +3597,10 @@\n         <source>Support filtering of blocks and transaction with bloom filters (default: %u)</source>\n         <translation>\u652f\u6301\u7528 Bloom \u8fc7\u6ee4\u5668\u6765\u8fc7\u6ee4\u533a\u5757\u548c\u4ea4\u6613(\u9ed8\u8ba4\u503c: %u)</translation>\n     </message>\n+    <message>\n+        <source>This is the transaction fee you may pay when fee estimates are not available.</source>\n+        <translation>\u8fd9\u662f\u5728\u8d39\u7528\u4f30\u8ba1\u4e0d\u53ef\u7528\u65f6\u4f60\u53ef\u80fd\u4f1a\u652f\u4ed8\u7684\u4ea4\u6613\u8d39\u3002</translation>\n+    </message>\n     <message>\n         <source>Total length of network version string (%i) exceeds maximum length (%i). Reduce the number or size of uacomments.</source>\n         <translation>\u7f51\u7edc\u7248\u672c\u5b57\u7b26\u4e32\u7684\u603b\u957f\u5ea6 (%i) \u8d85\u8fc7\u6700\u5927\u957f\u5ea6 (%i) \u4e86\u3002\u8bf7\u51cf\u5c11 uacomment \u53c2\u6570\u7684\u6570\u76ee\u6216\u957f\u5ea6\u3002</translation>\n@@ -3537,6 +3625,10 @@\n         <source>Warning: Unknown block versions being mined! It's possible unknown rules are in effect</source>\n         <translation>\u8b66\u544a: \u672a\u77e5\u7684\u533a\u5757\u7248\u672c\u88ab\u6316\u6398\uff01\u672a\u77e5\u89c4\u5219\u53ef\u80fd\u5df2\u751f\u6548</translation>\n     </message>\n+    <message>\n+        <source>%s is set very high!</source>\n+        <translation>%s\u975e\u5e38\u9ad8\uff01</translation>\n+    </message>\n     <message>\n         <source>(default: %s)</source>\n         <translation>(\u9ed8\u8ba4: %s) </translation>\n@@ -3597,6 +3689,10 @@\n         <source>Set key pool size to &lt;n&gt; (default: %u)</source>\n         <translation>\u8bbe\u7f6e\u79c1\u94a5\u6c60\u5927\u5c0f\u4e3a &lt;n&gt; (\u9ed8\u8ba4\uff1a%u) </translation>\n     </message>\n+    <message>\n+        <source>Set maximum BIP141 block weight (default: %d)</source>\n+        <translation>\u8bbe\u7f6eBIP141\u6700\u5927\u533a\u5757\u6743\u91cd (\u9ed8\u8ba4: %d)</translation>\n+    </message>\n     <message>\n         <source>Set the number of threads to service RPC calls (default: %d)</source>\n         <translation>\u8bbe\u7f6eRPC\u670d\u52a1\u7ebf\u7a0b\u6570 (\u9ed8\u8ba4: %d) </translation>\n@@ -3621,10 +3717,22 @@\n         <source>Starting network threads...</source>\n         <translation>\u6b63\u5728\u542f\u52a8\u7f51\u7edc\u7ebf\u7a0b...</translation>\n     </message>\n+    <message>\n+        <source>This is the transaction fee you will pay if you send a transaction.</source>\n+        <translation>\u5982\u679c\u53d1\u9001\u4ea4\u6613\uff0c\u8fd9\u662f\u4f60\u4ea4\u6613\u4ed8\u6b3e\u65f6\u6240\u8981\u4ed8\u7684\u624b\u7eed\u8d39\u3002</translation>\n+    </message>\n     <message>\n         <source>Threshold for disconnecting misbehaving peers (default: %u)</source>\n         <translation>\u65ad\u5f00 \u975e\u793c\u8282\u70b9\u7684\u9600\u503c (\u9ed8\u8ba4: %u) </translation>\n     </message>\n+    <message>\n+        <source>Transaction amounts must not be negative</source>\n+        <translation>\u4ea4\u6613\u91d1\u989d\u4e0d\u4e0d\u53ef\u4e3a\u8d1f\u6570</translation>\n+    </message>\n+    <message>\n+        <source>Transaction must have at least one recipient</source>\n+        <translation>\u4ea4\u6613\u5fc5\u987b\u5305\u542b\u81f3\u5c11\u4e00\u4e2a\u63a5\u6536\u4eba</translation>\n+    </message>\n     <message>\n         <source>Unknown network specified in -onlynet: '%s'</source>\n         <translation>-onlynet \u6307\u5b9a\u7684\u662f\u672a\u77e5\u7f51\u7edc\uff1a%s</translation>"
      }
    ]
  },
  {
    "sha": "fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYjdiNTI5Mzg0NGVhNmFkYzVkY2Y1YWQwYTBjNTg5MGI0NDk1OTM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-15T13:59:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-15T14:00:59Z"
      },
      "message": "doc: Release notes for 0.15.0.1\n\nTree-SHA512: ce2e874659ea59fa3f1f34a02ed910f655db2ec5b030ef40f89dca0b90932a3b579768db4e7f30773ca9cbbf72891369efe34fdbf111669c3bb583e8c69eda85",
      "tree": {
        "sha": "06a27b7ff4e68cee839bd350c0a5d71d64eef911",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06a27b7ff4e68cee839bd350c0a5d71d64eef911"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZu90bAAoJEB5K7WKYbNJdA/cIAIA64zqRDooXzNdDLk62GqZU\n3tMkIZSNcDFFkqlu0Zren6f4NUI5goAbkn9EG6VGauv+DjmSq6AhWGuKkvvHIqAP\nVnJIHC4U8jDt0LLqNJYXiQy/BEItGhA8CExQJ6/2NsYQsFHoV/As3+t5bti10Zqb\nREUxZ0DTQ8rx21YycvFEWhWY+samcHnZINCn6lwMfQN57G4zAGwZeEC5pHO0QATZ\nZMYxMxeHpV98AqNoFll1Rd4ZCvUWC+qdRMC7pj02/wFmBYdHk2oub5rG4oLMlVtd\nl6ChJQnOY3D1N3djOpJqMVDBqAPicbO5aLxf9fGRN0NyXwdQhSxI0lqzNrn5Fas=\n=SeIl\n-----END PGP SIGNATURE-----",
        "payload": "tree 06a27b7ff4e68cee839bd350c0a5d71d64eef911\nparent f266f2668bf8fd73015bf8265f0d00f5e858b577\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1505483983 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1505484059 +0200\n\ndoc: Release notes for 0.15.0.1\n\nTree-SHA512: ce2e874659ea59fa3f1f34a02ed910f655db2ec5b030ef40f89dca0b90932a3b579768db4e7f30773ca9cbbf72891369efe34fdbf111669c3bb583e8c69eda85\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f266f2668bf8fd73015bf8265f0d00f5e858b577",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f266f2668bf8fd73015bf8265f0d00f5e858b577",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f266f2668bf8fd73015bf8265f0d00f5e858b577"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 18,
      "deletions": 10
    },
    "files": [
      {
        "sha": "32bf667734fdabd63e7e547b6f37d53b6af66601",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 18,
        "deletions": 10,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
        "patch": "@@ -1,12 +1,8 @@\n-(note: this is a temporary file, to be added-to by anybody, and moved to\n-release-notes at release time)\n+Bitcoin Core version *0.15.0.1* is now available from:\n \n-Bitcoin Core version *0.15.1* is now available from:\n+  <https://bitcoin.org/bin/bitcoin-core-0.15.0.1/>\n \n-  <https://bitcoin.org/bin/bitcoin-core-0.15.1/>\n-\n-This is a new major version release, including new features, various bugfixes\n-and performance improvements, as well as updated translations.\n+This is a minor bug fix for 0.15.0.\n \n Please report bugs using the issue tracker at GitHub:\n \n@@ -60,16 +56,28 @@ frequently tested on them.\n Notable changes\n ===============\n \n+GUI startup crash issue\n+-------------------------\n+\n+After upgrade to 0.15.0, some clients would crash at startup because a custom\n+fee setting was configured that no longer exists in the GUI. This is a minimal\n+patch to avoid this issue from occuring.\n+\n+0.15.0.1 Change log\n+====================\n \n+-  #11332 `46c8d23` Fix possible crash with invalid nCustomFeeRadio in QSettings (achow101, TheBlueMatt)\n \n-0.15.1 Change log\n-=================\n+Also the manpages were updated, as this was forgotten for 0.15.0.\n \n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-(fill this in)\n+- Andrew Chow\n+- Matt Corallo\n+- Jonas Schnelli\n+- Wladimir J. van der Laan\n \n As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "9e8aae31c103e1d76365c34ce1fe1dd68e93912b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZThhYWUzMWMxMDNlMWQ3NjM2NWMzNGNlMWZlMWRkNjhlOTM5MTJi",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2017-08-09T08:24:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:15:46Z"
      },
      "message": "[wallet] Close DB on error.\n\nGithub-Pull: #11017\nRebased-From: 03bc719a85cb4928cb4b43d0bc4142f72cb01b23",
      "tree": {
        "sha": "af144ee78e4268ed975ace9a411c30ab5578100d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af144ee78e4268ed975ace9a411c30ab5578100d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e8aae31c103e1d76365c34ce1fe1dd68e93912b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e8aae31c103e1d76365c34ce1fe1dd68e93912b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e8aae31c103e1d76365c34ce1fe1dd68e93912b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e8aae31c103e1d76365c34ce1fe1dd68e93912b/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d2fe4866fae36743e521b8db773e328ef86d12b3",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e8aae31c103e1d76365c34ce1fe1dd68e93912b/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e8aae31c103e1d76365c34ce1fe1dd68e93912b/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=9e8aae31c103e1d76365c34ce1fe1dd68e93912b",
        "patch": "@@ -101,8 +101,10 @@ bool CDBEnv::Open(const fs::path& pathIn)\n                              DB_RECOVER |\n                              nEnvFlags,\n                          S_IRUSR | S_IWUSR);\n-    if (ret != 0)\n+    if (ret != 0) {\n+        dbenv->close(0);\n         return error(\"CDBEnv::Open: Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+    }\n \n     fDbEnvInit = true;\n     fMockDb = false;\n@@ -196,9 +198,9 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n                             DB_BTREE,           // Database type\n                             DB_CREATE,          // Flags\n                             0);\n-    if (ret > 0)\n-    {\n+    if (ret > 0) {\n         LogPrintf(\"Cannot create database file %s\\n\", filename);\n+        pdbCopy->close(0);\n         return false;\n     }\n \n@@ -536,8 +538,10 @@ bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n                         env->CloseDb(strFile);\n                         if (pdbCopy->close(0))\n                             fSuccess = false;\n-                        delete pdbCopy;\n+                    } else {\n+                        pdbCopy->close(0);\n                     }\n+                    delete pdbCopy;\n                 }\n                 if (fSuccess) {\n                     Db dbA(env->dbenv, 0);"
      }
    ]
  },
  {
    "sha": "fc2aa09cf382f024f461e103f2500e95ddb692e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzJhYTA5Y2YzODJmMDI0ZjQ2MWUxMDNmMjUwMGU5NWRkYjY5MmU1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-02T18:30:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:18:17Z"
      },
      "message": "[tests] Introduce TestNode\n\nTestNode is a class responsible for all state related to a bitcoind node\nunder test. It stores local state, is responsible for tracking the\nbitcoind process and delegates unrecognised messages to the RPC\nconnection.\n\nThis commit changes start_nodes and stop_nodes to start and stop the\nbitcoind nodes in parallel, making test setup and teardown much faster.\n\nGithub-Pull: #10711\nRebased-From: 7897338918dac072e788b8ab2919d4559f311bef",
      "tree": {
        "sha": "b0148b97dda0141ef4fccf84120b74816079cfdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b0148b97dda0141ef4fccf84120b74816079cfdd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc2aa09cf382f024f461e103f2500e95ddb692e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc2aa09cf382f024f461e103f2500e95ddb692e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc2aa09cf382f024f461e103f2500e95ddb692e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc2aa09cf382f024f461e103f2500e95ddb692e5/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939"
      }
    ],
    "stats": {
      "total": 290,
      "additions": 193,
      "deletions": 97
    },
    "files": [
      {
        "sha": "0812e1b0df90932d24a208f77621116523ff7bf7",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -139,13 +139,13 @@ def _test_stopatheight(self):\n         self.nodes[0].generate(6)\n         assert_equal(self.nodes[0].getblockcount(), 206)\n         self.log.debug('Node should not stop at this height')\n-        assert_raises(subprocess.TimeoutExpired, lambda: self.bitcoind_processes[0].wait(timeout=3))\n+        assert_raises(subprocess.TimeoutExpired, lambda: self.nodes[0].process.wait(timeout=3))\n         try:\n             self.nodes[0].generate(1)\n         except (ConnectionError, http.client.BadStatusLine):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')\n-        self.bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.nodes[0].process.wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n         self.nodes[0] = self.start_node(0, self.options.tmpdir)\n         assert_equal(self.nodes[0].getblockcount(), 207)\n "
      },
      {
        "sha": "3c488f609a3e0cdf8cf8b229206132dec1cb12b6",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -41,8 +41,7 @@ def setup_network(self, split=False):\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n         # Encrypt wallet for test_locked_wallet_fails test\n-        self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n-        self.bitcoind_processes[1].wait()\n+        self.nodes[1].node_encrypt_wallet(WALLET_PASSPHRASE)\n         self.nodes[1] = self.start_node(1, self.options.tmpdir, extra_args[1])\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n "
      },
      {
        "sha": "f2f4efcf28f14ace9753329d335a141fb5c8cb2b",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -451,8 +451,7 @@ def run_test(self):\n         self.stop_node(0)\n         self.stop_node(2)\n         self.stop_node(3)\n-        self.nodes[1].encryptwallet(\"test\")\n-        self.bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.nodes[1].node_encrypt_wallet(\"test\")\n \n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n         # This test is not meant to test fee estimation and we'd like"
      },
      {
        "sha": "cca30e2688e4d8ad8ba551520bfafe6bafbdafb7",
        "filename": "test/functional/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_longpoll.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -17,7 +17,7 @@ def __init__(self, node):\n         self.longpollid = templat['longpollid']\n         # create a new connection to the node, we can't use the same\n         # connection from two threads\n-        self.node = get_rpc_proxy(node.url, 1, timeout=600)\n+        self.node = get_rpc_proxy(node.url, 1, timeout=600, coveragedir=node.coverage_dir)\n \n     def run(self):\n         self.node.getblocktemplate({'longpollid':self.longpollid})"
      },
      {
        "sha": "3e7bb0ee072057f463d195847e066c387c4d12a0",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -17,8 +17,7 @@ def run_test(self):\n         assert(addr_before_encrypting_data['hdmasterkeyid'] == wallet_info_old['hdmasterkeyid'])\n         \n         # Encrypt wallet and wait to terminate\n-        nodes[0].encryptwallet('test')\n-        self.bitcoind_processes[0].wait()\n+        nodes[0].node_encrypt_wallet('test')\n         # Restart node 0\n         nodes[0] = self.start_node(0, self.options.tmpdir)\n         # Keep creating keys"
      },
      {
        "sha": "fc6e8e325f605f5d494580551747b70ade4e9fc3",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -35,11 +35,15 @@ def run_test(self):\n \n         self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n \n-        w1 = self.nodes[0] / \"wallet/w1\"\n+        w1 = self.nodes[0].get_wallet_rpc(\"w1\")\n+        w2 = self.nodes[0].get_wallet_rpc(\"w2\")\n+        w3 = self.nodes[0].get_wallet_rpc(\"w3\")\n+        wallet_bad = self.nodes[0].get_wallet_rpc(\"bad\")\n+\n         w1.generate(1)\n \n         # accessing invalid wallet fails\n-        assert_raises_jsonrpc(-18, \"Requested wallet does not exist or is not loaded\", (self.nodes[0] / \"wallet/bad\").getwalletinfo)\n+        assert_raises_jsonrpc(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n \n         # accessing wallet RPC without using wallet endpoint fails\n         assert_raises_jsonrpc(-19, \"Wallet file not specified\", self.nodes[0].getwalletinfo)\n@@ -50,14 +54,12 @@ def run_test(self):\n         w1_name = w1_info['walletname']\n         assert_equal(w1_name, \"w1\")\n \n-        # check w1 wallet balance\n-        w2 = self.nodes[0] / \"wallet/w2\"\n+        # check w2 wallet balance\n         w2_info = w2.getwalletinfo()\n         assert_equal(w2_info['immature_balance'], 0)\n         w2_name = w2_info['walletname']\n         assert_equal(w2_name, \"w2\")\n \n-        w3 = self.nodes[0] / \"wallet/w3\"\n         w3_name = w3.getwalletinfo()['walletname']\n         assert_equal(w3_name, \"w3\")\n "
      },
      {
        "sha": "20808207b2bc80729f99d94872fdaa5da300c01a",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -37,7 +37,7 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n-        pid = self.bitcoind_processes[0].pid\n+        pid = self.nodes[0].process.pid\n         assert_equal(set(get_bind_addrs(pid)), set(expected))\n         self.stop_nodes()\n \n@@ -49,7 +49,7 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n         self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n         # connect to node through non-loopback interface\n-        node = get_rpc_proxy(rpc_url(get_datadir_path(self.options.tmpdir, 0), 0, \"%s:%d\" % (rpchost, rpcport)), 0)\n+        node = get_rpc_proxy(rpc_url(get_datadir_path(self.options.tmpdir, 0), 0, \"%s:%d\" % (rpchost, rpcport)), 0, coveragedir=self.options.coveragedir)\n         node.getnetworkinfo()\n         self.stop_nodes()\n "
      },
      {
        "sha": "7903bb00451b5531a51de1222aa17b9837016a32",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 40,
        "deletions": 75,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -5,35 +5,30 @@\n \"\"\"Base class for RPC testing.\"\"\"\n \n from collections import deque\n-import errno\n from enum import Enum\n-import http.client\n import logging\n import optparse\n import os\n import pdb\n import shutil\n-import subprocess\n import sys\n import tempfile\n import time\n import traceback\n \n from .authproxy import JSONRPCException\n from . import coverage\n+from .test_node import TestNode\n from .util import (\n     MAX_NODES,\n     PortSeed,\n     assert_equal,\n     check_json_precision,\n     connect_nodes_bi,\n     disconnect_nodes,\n-    get_rpc_proxy,\n     initialize_datadir,\n-    get_datadir_path,\n     log_filename,\n     p2p_port,\n-    rpc_url,\n     set_node_times,\n     sync_blocks,\n     sync_mempools,\n@@ -70,7 +65,6 @@ def __init__(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = []\n-        self.bitcoind_processes = {}\n         self.mocktime = 0\n \n     def add_options(self, parser):\n@@ -213,64 +207,62 @@ def main(self):\n     def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n         \"\"\"Start a bitcoind and return RPC connection to it\"\"\"\n \n-        datadir = os.path.join(dirname, \"node\" + str(i))\n+        if extra_args is None:\n+            extra_args = []\n         if binary is None:\n             binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-        args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(self.mocktime), \"-uacomment=testnode%d\" % i]\n-        if extra_args is not None:\n-            args.extend(extra_args)\n-        self.bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n-        self.log.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-        self._wait_for_bitcoind_start(self.bitcoind_processes[i], datadir, i, rpchost)\n-        self.log.debug(\"initialize_chain: RPC successfully started\")\n-        proxy = get_rpc_proxy(rpc_url(datadir, i, rpchost), i, timeout=timewait)\n+        node = TestNode(i, dirname, extra_args, rpchost, timewait, binary, stderr, self.mocktime, coverage_dir=self.options.coveragedir)\n+        node.start()\n+        node.wait_for_rpc_connection()\n \n-        if self.options.coveragedir:\n-            coverage.write_all_rpc_commands(self.options.coveragedir, proxy)\n+        if self.options.coveragedir is not None:\n+            coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n \n-        return proxy\n+        return node\n \n     def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n         \"\"\"Start multiple bitcoinds, return RPC connections to them\"\"\"\n \n         if extra_args is None:\n-            extra_args = [None] * num_nodes\n+            extra_args = [[]] * num_nodes\n         if binary is None:\n             binary = [None] * num_nodes\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(binary), num_nodes)\n-        rpcs = []\n+        nodes = []\n         try:\n             for i in range(num_nodes):\n-                rpcs.append(self.start_node(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i]))\n+                nodes.append(TestNode(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n+                nodes[i].start()\n+            for node in nodes:\n+                node.wait_for_rpc_connection()\n         except:\n             # If one node failed to start, stop the others\n-            # TODO: abusing self.nodes in this way is a little hacky.\n-            # Eventually we should do a better job of tracking nodes\n-            self.nodes.extend(rpcs)\n             self.stop_nodes()\n-            self.nodes = []\n             raise\n-        return rpcs\n+\n+        if self.options.coveragedir is not None:\n+            for node in nodes:\n+                coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n+\n+        return nodes\n \n     def stop_node(self, i):\n         \"\"\"Stop a bitcoind test node\"\"\"\n-\n-        self.log.debug(\"Stopping node %d\" % i)\n-        try:\n-            self.nodes[i].stop()\n-        except http.client.CannotSendRequest as e:\n-            self.log.exception(\"Unable to stop node\")\n-        return_code = self.bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-        del self.bitcoind_processes[i]\n-        assert_equal(return_code, 0)\n+        self.nodes[i].stop_node()\n+        while not self.nodes[i].is_node_stopped():\n+            time.sleep(0.1)\n \n     def stop_nodes(self):\n         \"\"\"Stop multiple bitcoind test nodes\"\"\"\n+        for node in self.nodes:\n+            # Issue RPC to stop nodes\n+            node.stop_node()\n \n-        for i in range(len(self.nodes)):\n-            self.stop_node(i)\n-        assert not self.bitcoind_processes.values()  # All connections must be gone now\n+        for node in self.nodes:\n+            # Wait for nodes to stop\n+            while not node.is_node_stopped():\n+                time.sleep(0.1)\n \n     def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_msg=None):\n         with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n@@ -279,6 +271,8 @@ def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_m\n                 self.stop_node(i)\n             except Exception as e:\n                 assert 'bitcoind exited' in str(e)  # node must have shutdown\n+                self.nodes[i].running = False\n+                self.nodes[i].process = None\n                 if expected_msg is not None:\n                     log_stderr.seek(0)\n                     stderr = log_stderr.read().decode('utf-8')\n@@ -292,7 +286,7 @@ def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_m\n                 raise AssertionError(assert_msg)\n \n     def wait_for_node_exit(self, i, timeout):\n-        self.bitcoind_processes[i].wait(timeout)\n+        self.nodes[i].process.wait(timeout)\n \n     def split_network(self):\n         \"\"\"\n@@ -389,18 +383,13 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.bitcoind_processes[i] = subprocess.Popen(args)\n-                self.log.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-                self._wait_for_bitcoind_start(self.bitcoind_processes[i], datadir, i)\n-                self.log.debug(\"initialize_chain: RPC successfully started\")\n+                self.nodes.append(TestNode(i, cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n+                self.nodes[i].args = args\n+                self.nodes[i].start()\n \n-            self.nodes = []\n-            for i in range(MAX_NODES):\n-                try:\n-                    self.nodes.append(get_rpc_proxy(rpc_url(get_datadir_path(cachedir, i), i), i))\n-                except:\n-                    self.log.exception(\"Error connecting to node %d\" % i)\n-                    sys.exit(1)\n+            # Wait for RPC connections to be ready\n+            for node in self.nodes:\n+                node.wait_for_rpc_connection()\n \n             # Create a 200-block-long chain; each of the 4 first nodes\n             # gets 25 mature blocks and 25 immature.\n@@ -444,30 +433,6 @@ def _initialize_chain_clean(self, test_dir, num_nodes):\n         for i in range(num_nodes):\n             initialize_datadir(test_dir, i)\n \n-    def _wait_for_bitcoind_start(self, process, datadir, i, rpchost=None):\n-        \"\"\"Wait for bitcoind to start.\n-\n-        This means that RPC is accessible and fully initialized.\n-        Raise an exception if bitcoind exits during initialization.\"\"\"\n-        while True:\n-            if process.poll() is not None:\n-                raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n-            try:\n-                # Check if .cookie file to be created\n-                rpc = get_rpc_proxy(rpc_url(datadir, i, rpchost), i, coveragedir=self.options.coveragedir)\n-                rpc.getblockcount()\n-                break  # break out of loop on success\n-            except IOError as e:\n-                if e.errno != errno.ECONNREFUSED:  # Port not yet open?\n-                    raise  # unknown IO error\n-            except JSONRPCException as e:  # Initialization phase\n-                if e.error['code'] != -28:  # RPC in warmup?\n-                    raise  # unknown JSON RPC exception\n-            except ValueError as e:  # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n-                if \"No RPC credentials\" not in str(e):\n-                    raise\n-            time.sleep(0.25)\n-\n class ComparisonTestFramework(BitcoinTestFramework):\n     \"\"\"Test framework for doing p2p comparison testing\n "
      },
      {
        "sha": "66f89d43f4fcbcac6c0d3676fdc16fdeadeacd1c",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "added",
        "additions": 134,
        "deletions": 0,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -0,0 +1,134 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Class for bitcoind node under test\"\"\"\n+\n+import errno\n+import http.client\n+import logging\n+import os\n+import subprocess\n+import time\n+\n+from .util import (\n+    assert_equal,\n+    get_rpc_proxy,\n+    rpc_url,\n+)\n+from .authproxy import JSONRPCException\n+\n+class TestNode():\n+    \"\"\"A class for representing a bitcoind node under test.\n+\n+    This class contains:\n+\n+    - state about the node (whether it's running, etc)\n+    - a Python subprocess.Popen object representing the running process\n+    - an RPC connection to the node\n+\n+    To make things easier for the test writer, a bit of magic is happening under the covers.\n+    Any unrecognised messages will be dispatched to the RPC connection.\"\"\"\n+\n+    def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mocktime, coverage_dir):\n+        self.index = i\n+        self.datadir = os.path.join(dirname, \"node\" + str(i))\n+        self.rpchost = rpchost\n+        self.rpc_timeout = timewait\n+        if binary is None:\n+            self.binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n+        else:\n+            self.binary = binary\n+        self.stderr = stderr\n+        self.coverage_dir = coverage_dir\n+        # Most callers will just need to add extra args to the standard list below. For those callers that need more flexibity, they can just set the args property directly.\n+        self.extra_args = extra_args\n+        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n+\n+        self.running = False\n+        self.process = None\n+        self.rpc_connected = False\n+        self.rpc = None\n+        self.url = None\n+        self.log = logging.getLogger('TestFramework.node%d' % i)\n+\n+    def __getattr__(self, *args, **kwargs):\n+        \"\"\"Dispatches any unrecognised messages to the RPC connection.\"\"\"\n+        assert self.rpc_connected and self.rpc is not None, \"Error: no RPC connection\"\n+        return self.rpc.__getattr__(*args, **kwargs)\n+\n+    def start(self):\n+        \"\"\"Start the node.\"\"\"\n+        self.process = subprocess.Popen(self.args + self.extra_args, stderr=self.stderr)\n+        self.running = True\n+        self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n+\n+    def wait_for_rpc_connection(self):\n+        \"\"\"Sets up an RPC connection to the bitcoind process. Returns False if unable to connect.\"\"\"\n+\n+        # Wait for up to 10 seconds for the RPC server to respond\n+        for _ in range(40):\n+            assert not self.process.poll(), \"bitcoind exited with status %i during initialization\" % self.process.returncode\n+            try:\n+                self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, coveragedir=self.coverage_dir)\n+                self.rpc.getblockcount()\n+                # If the call to getblockcount() succeeds then the RPC connection is up\n+                self.rpc_connected = True\n+                self.url = self.rpc.url\n+                self.log.debug(\"RPC successfully started\")\n+                return\n+            except IOError as e:\n+                if e.errno != errno.ECONNREFUSED:  # Port not yet open?\n+                    raise  # unknown IO error\n+            except JSONRPCException as e:  # Initialization phase\n+                if e.error['code'] != -28:  # RPC in warmup?\n+                    raise  # unknown JSON RPC exception\n+            except ValueError as e:  # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n+                if \"No RPC credentials\" not in str(e):\n+                    raise\n+            time.sleep(0.25)\n+        raise AssertionError(\"Unable to connect to bitcoind\")\n+\n+    def get_wallet_rpc(self, wallet_name):\n+        assert self.rpc_connected\n+        assert self.rpc\n+        wallet_path = \"wallet/%s\" % wallet_name\n+        return self.rpc / wallet_path\n+\n+    def stop_node(self):\n+        \"\"\"Stop the node.\"\"\"\n+        if not self.running:\n+            return\n+        self.log.debug(\"Stopping node\")\n+        try:\n+            self.stop()\n+        except http.client.CannotSendRequest:\n+            self.log.exception(\"Unable to stop node.\")\n+\n+    def is_node_stopped(self):\n+        \"\"\"Checks whether the node has stopped.\n+\n+        Returns True if the node has stopped. False otherwise.\n+        This method is responsible for freeing resources (self.process).\"\"\"\n+        if not self.running:\n+            return True\n+        return_code = self.process.poll()\n+        if return_code is not None:\n+            # process has stopped. Assert that it didn't return an error code.\n+            assert_equal(return_code, 0)\n+            self.running = False\n+            self.process = None\n+            self.log.debug(\"Node stopped\")\n+            return True\n+        return False\n+\n+    def node_encrypt_wallet(self, passphrase):\n+        \"\"\"\"Encrypts the wallet.\n+\n+        This causes bitcoind to shutdown, so this method takes\n+        care of cleaning up resources.\"\"\"\n+        self.encryptwallet(passphrase)\n+        while not self.is_node_stopped():\n+            time.sleep(0.1)\n+        self.rpc = None\n+        self.rpc_connected = False"
      },
      {
        "sha": "4098fd86152acd44f77df05c6ba56bec908a18bb",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -204,7 +204,7 @@ def rpc_port(n):\n     return PORT_MIN + PORT_RANGE + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n def rpc_url(datadir, i, rpchost=None):\n-    rpc_u, rpc_p = get_auth_cookie(datadir, i)\n+    rpc_u, rpc_p = get_auth_cookie(datadir)\n     host = '127.0.0.1'\n     port = rpc_port(i)\n     if rpchost:\n@@ -232,7 +232,7 @@ def initialize_datadir(dirname, n):\n def get_datadir_path(dirname, n):\n     return os.path.join(dirname, \"node\" + str(n))\n \n-def get_auth_cookie(datadir, n):\n+def get_auth_cookie(datadir):\n     user = None\n     password = None\n     if os.path.isfile(os.path.join(datadir, \"bitcoin.conf\")):"
      },
      {
        "sha": "61ad00330bd74225714c0b7f6e5384990679d2e9",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -94,8 +94,7 @@ def run_test (self):\n         assert_equal(found_addr_rsv, 90*2) # 90 keys plus 100% internal keys\n \n         #encrypt wallet, restart, unlock and dump\n-        self.nodes[0].encryptwallet('test')\n-        self.bitcoind_processes[0].wait()\n+        self.nodes[0].node_encrypt_wallet('test')\n         self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:"
      },
      {
        "sha": "8fea4140db7591b32800de4e82471fcd44fe9228",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc2aa09cf382f024f461e103f2500e95ddb692e5/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "patch": "@@ -30,8 +30,7 @@ def run_test(self):\n         assert_equal(len(privkey), 52)\n \n         # Encrypt the wallet\n-        self.nodes[0].encryptwallet(passphrase)\n-        self.bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.nodes[0].node_encrypt_wallet(passphrase)\n         self.nodes[0] = self.start_node(0, self.options.tmpdir)\n \n         # Test that the wallet is encrypted"
      }
    ]
  },
  {
    "sha": "50bd3f626d7ce35d52543b88a2e512074f9df134",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MGJkM2Y2MjZkN2NlMzVkNTI1NDNiODhhMmU1MTIwNzRmOWRmMTM0",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-07-30T21:36:33Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:19:35Z"
      },
      "message": "Avoid returning a BIP9Stats object with uninitialized values\n\nUninitialized data potentially used in `rpc/blockchain.cpp`:\n\n```\nstatic UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Consensus::DeploymentPos id)\n{\n    ...\n    const ThresholdState thresholdState = VersionBitsTipState(consensusParams, id);\n    ...\n    if (THRESHOLD_STARTED == thresholdState)\n    {\n        UniValue statsUV(UniValue::VOBJ);\n        BIP9Stats statsStruct = VersionBitsTipStatistics(consensusParams, id);\n        statsUV.push_back(Pair(\"period\", statsStruct.period));\n        statsUV.push_back(Pair(\"threshold\", statsStruct.threshold));\n        statsUV.push_back(Pair(\"elapsed\", statsStruct.elapsed));\n        statsUV.push_back(Pair(\"count\", statsStruct.count));\n        statsUV.push_back(Pair(\"possible\", statsStruct.possible));\n        rv.push_back(Pair(\"statistics\", statsUV));\n    }\n    ...\n    return rv;\n}\n```\n\nGithub-Pull: #10957\nRebased-From: 3eb53b867153c957529484b5338d27e69de027c1",
      "tree": {
        "sha": "0d72d3ba11f107b39578ddc48c42e3b47800c0e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d72d3ba11f107b39578ddc48c42e3b47800c0e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50bd3f626d7ce35d52543b88a2e512074f9df134",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50bd3f626d7ce35d52543b88a2e512074f9df134",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50bd3f626d7ce35d52543b88a2e512074f9df134",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50bd3f626d7ce35d52543b88a2e512074f9df134/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e8aae31c103e1d76365c34ce1fe1dd68e93912b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e8aae31c103e1d76365c34ce1fe1dd68e93912b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e8aae31c103e1d76365c34ce1fe1dd68e93912b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "59588023ad77793fdab28c8371ece94062a3804b",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50bd3f626d7ce35d52543b88a2e512074f9df134/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50bd3f626d7ce35d52543b88a2e512074f9df134/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=50bd3f626d7ce35d52543b88a2e512074f9df134",
        "patch": "@@ -107,7 +107,7 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n // return the numerical statistics of blocks signalling the specified BIP9 condition in this current period\n BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const\n {\n-    BIP9Stats stats;\n+    BIP9Stats stats = {};\n \n     stats.period = Period(params);\n     stats.threshold = Threshold(params);"
      }
    ]
  },
  {
    "sha": "c276c1e1d1fb18771d9efabaf5a476d29c901d5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjc2YzFlMWQxZmIxODc3MWQ5ZWZhYmFmNWE0NzZkMjljOTAxZDVk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-18T20:09:58Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:23:41Z"
      },
      "message": "test: Increase initial RPC timeout to 60 seconds\n\nWhen running the tests locally with a parallelism of 4 on an otherwise\nbusy system, RPC can take quite a wait to come up.\n\nChange the timeout to 60 seconds just to be safe.\n\nGithub-Pull: #11091\nRebased-From: c1470a058f21bf98d83b9dc345c61626b87035cc",
      "tree": {
        "sha": "236c33e6b6b74048e67a12207146b79da2f87a40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/236c33e6b6b74048e67a12207146b79da2f87a40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c276c1e1d1fb18771d9efabaf5a476d29c901d5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c276c1e1d1fb18771d9efabaf5a476d29c901d5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c276c1e1d1fb18771d9efabaf5a476d29c901d5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c276c1e1d1fb18771d9efabaf5a476d29c901d5d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc2aa09cf382f024f461e103f2500e95ddb692e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc2aa09cf382f024f461e103f2500e95ddb692e5"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4b5dc9a792a4898a04af996f5b31751d8064274c",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c276c1e1d1fb18771d9efabaf5a476d29c901d5d/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c276c1e1d1fb18771d9efabaf5a476d29c901d5d/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=c276c1e1d1fb18771d9efabaf5a476d29c901d5d",
        "patch": "@@ -65,9 +65,9 @@ def start(self):\n \n     def wait_for_rpc_connection(self):\n         \"\"\"Sets up an RPC connection to the bitcoind process. Returns False if unable to connect.\"\"\"\n-\n-        # Wait for up to 10 seconds for the RPC server to respond\n-        for _ in range(40):\n+        timeout_s = 60 # Wait for up to 60 seconds for the RPC server to respond\n+        poll_per_s = 4 # Poll at a rate of four times per second\n+        for _ in range(timeout_s*poll_per_s):\n             assert not self.process.poll(), \"bitcoind exited with status %i during initialization\" % self.process.returncode\n             try:\n                 self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, coveragedir=self.coverage_dir)\n@@ -86,7 +86,7 @@ def wait_for_rpc_connection(self):\n             except ValueError as e:  # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n                 if \"No RPC credentials\" not in str(e):\n                     raise\n-            time.sleep(0.25)\n+            time.sleep(1.0 / poll_per_s)\n         raise AssertionError(\"Unable to connect to bitcoind\")\n \n     def get_wallet_rpc(self, wallet_name):"
      }
    ]
  },
  {
    "sha": "1d80d1e319b41e5187d5949b3c22c35df182ba3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDgwZDFlMzE5YjQxZTUxODdkNTk0OWIzYzIyYzM1ZGYxODJiYTNj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-16T19:46:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:29:34Z"
      },
      "message": "[tests] fix timeout issues from TestNode\n\nFixes a couple of bugs from the introduction of TestNode:\n\n- test scripts were no longer able to specify a custom timeout for\nstarting a node. Therefore tests with nodes that take a long time to\nstart up (eg pruning.py) would fail.\n- the test for whether a node has failed on start up was broken\nby changing 'assert x is None' to 'assert not x'. Since\nsubprocess.poll() can return None (indicating the node is still running)\nor 0 (indicating the node exited with return code 0), this was a\nregression.\n\nGithub-Pull: #11077\nRebased-From: 2b4ea520b717b3ca894adbac17796786667764d3",
      "tree": {
        "sha": "747875429f86e40ba789710935ed52618a6832fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/747875429f86e40ba789710935ed52618a6832fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d80d1e319b41e5187d5949b3c22c35df182ba3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d80d1e319b41e5187d5949b3c22c35df182ba3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d80d1e319b41e5187d5949b3c22c35df182ba3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d80d1e319b41e5187d5949b3c22c35df182ba3c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c276c1e1d1fb18771d9efabaf5a476d29c901d5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c276c1e1d1fb18771d9efabaf5a476d29c901d5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c276c1e1d1fb18771d9efabaf5a476d29c901d5d"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "a7fcc411c345be7cff5df679af019f790611bbe1",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d80d1e319b41e5187d5949b3c22c35df182ba3c/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d80d1e319b41e5187d5949b3c22c35df182ba3c/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=1d80d1e319b41e5187d5949b3c22c35df182ba3c",
        "patch": "@@ -64,7 +64,8 @@ def __init__(self):\n         self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n \n     def setup_network(self):\n-        self.setup_nodes()\n+        # Need a bit of extra time for the nodes to start up for this test\n+        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=90)\n         # Leave them unconnected, we'll use submitblock directly in this test\n \n     def restart_node(self, node_index, expected_tip):\n@@ -74,10 +75,10 @@ def restart_node(self, node_index, expected_tip):\n         after 60 seconds. Returns the utxo hash of the given node.\"\"\"\n \n         time_start = time.time()\n-        while time.time() - time_start < 60:\n+        while time.time() - time_start < 120:\n             try:\n                 # Any of these RPC calls could throw due to node crash\n-                self.nodes[node_index] = self.start_node(node_index, self.options.tmpdir, self.extra_args[node_index])\n+                self.nodes[node_index] = self.start_node(node_index, self.options.tmpdir, self.extra_args[node_index], timewait=90)\n                 self.nodes[node_index].waitforblock(expected_tip)\n                 utxo_hash = self.nodes[node_index].gettxoutsetinfo()['hash_serialized_2']\n                 return utxo_hash"
      },
      {
        "sha": "a803df5b4986019cf5f4a6f535f7585134fdc397",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d80d1e319b41e5187d5949b3c22c35df182ba3c/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d80d1e319b41e5187d5949b3c22c35df182ba3c/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=1d80d1e319b41e5187d5949b3c22c35df182ba3c",
        "patch": "@@ -34,7 +34,11 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n         self.index = i\n         self.datadir = os.path.join(dirname, \"node\" + str(i))\n         self.rpchost = rpchost\n-        self.rpc_timeout = timewait\n+        if timewait:\n+            self.rpc_timeout = timewait\n+        else:\n+            # Wait for up to 60 seconds for the RPC server to respond\n+            self.rpc_timeout = 60\n         if binary is None:\n             self.binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n         else:\n@@ -65,10 +69,10 @@ def start(self):\n \n     def wait_for_rpc_connection(self):\n         \"\"\"Sets up an RPC connection to the bitcoind process. Returns False if unable to connect.\"\"\"\n-        timeout_s = 60 # Wait for up to 60 seconds for the RPC server to respond\n-        poll_per_s = 4 # Poll at a rate of four times per second\n-        for _ in range(timeout_s*poll_per_s):\n-            assert not self.process.poll(), \"bitcoind exited with status %i during initialization\" % self.process.returncode\n+        # Poll at a rate of four times per second\n+        poll_per_s = 4\n+        for _ in range(poll_per_s * self.rpc_timeout):\n+            assert self.process.poll() is None, \"bitcoind exited with status %i during initialization\" % self.process.returncode\n             try:\n                 self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, coveragedir=self.coverage_dir)\n                 self.rpc.getblockcount()"
      }
    ]
  },
  {
    "sha": "5398f205e3ba1f7542deeba420f9e198bcb635f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1Mzk4ZjIwNWUzYmExZjc1NDJkZWViYTQyMGY5ZTE5OGJjYjYzNWY1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-08-16T16:17:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:29:48Z"
      },
      "message": "qa: Move wait_until to util\n\nGithub-Pull: #11068\nRebased-From: 08ce33f8e95efa81b37ddc6b3350462c61bbfd51",
      "tree": {
        "sha": "c6192e754c839184b61de07d113924ef1cf8acf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6192e754c839184b61de07d113924ef1cf8acf3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5398f205e3ba1f7542deeba420f9e198bcb635f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5398f205e3ba1f7542deeba420f9e198bcb635f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5398f205e3ba1f7542deeba420f9e198bcb635f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5398f205e3ba1f7542deeba420f9e198bcb635f5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d80d1e319b41e5187d5949b3c22c35df182ba3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d80d1e319b41e5187d5949b3c22c35df182ba3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d80d1e319b41e5187d5949b3c22c35df182ba3c"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 78,
      "deletions": 89
    },
    "files": [
      {
        "sha": "65ae8de554b64f36a71969efd036d385a6ed8738",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -109,7 +109,7 @@ def run_test(self):\n         node0.send_and_ping(msg_block(block))\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        assert wait_until(lambda: \"reject\" in node0.last_message.keys())\n+        wait_until(lambda: \"reject\" in node0.last_message.keys(), lock=mininode_lock)\n         with mininode_lock:\n             assert_equal(node0.last_message[\"reject\"].code, REJECT_OBSOLETE)\n             assert_equal(node0.last_message[\"reject\"].reason, b'bad-version(0x00000003)')\n@@ -138,7 +138,7 @@ def run_test(self):\n         node0.send_and_ping(msg_block(block))\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        assert wait_until (lambda: \"reject\" in node0.last_message.keys())\n+        wait_until(lambda: \"reject\" in node0.last_message.keys(), lock=mininode_lock)\n         with mininode_lock:\n             assert node0.last_message[\"reject\"].code in [REJECT_INVALID, REJECT_NONSTANDARD]\n             assert_equal(node0.last_message[\"reject\"].data, block.sha256)"
      },
      {
        "sha": "9775970893091240f6ba57a9c5310a83dca6ab4b",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -98,7 +98,7 @@ def run_test(self):\n         node0.send_and_ping(msg_block(block))\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        assert wait_until(lambda: \"reject\" in node0.last_message.keys())\n+        wait_until(lambda: \"reject\" in node0.last_message.keys(), lock=mininode_lock)\n         with mininode_lock:\n             assert_equal(node0.last_message[\"reject\"].code, REJECT_OBSOLETE)\n             assert_equal(node0.last_message[\"reject\"].reason, b'bad-version(0x00000002)')\n@@ -128,7 +128,7 @@ def run_test(self):\n         node0.send_and_ping(msg_block(block))\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        assert wait_until (lambda: \"reject\" in node0.last_message.keys())\n+        wait_until(lambda: \"reject\" in node0.last_message.keys(), lock=mininode_lock)\n         with mininode_lock:\n             # We can receive different reject messages depending on whether\n             # bitcoind is running with multiple script check threads. If script"
      },
      {
        "sha": "19723226d3ca2dd4a3b1877f533879756c4d14dc",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -5,11 +5,13 @@\n \"\"\"Test node disconnect and ban behavior\"\"\"\n import time\n \n-from test_framework.mininode import wait_until\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal,\n-                                 assert_raises_jsonrpc,\n-                                 connect_nodes_bi)\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    connect_nodes_bi,\n+    wait_until,\n+)\n \n class DisconnectBanTest(BitcoinTestFramework):\n \n@@ -24,7 +26,7 @@ def run_test(self):\n         self.log.info(\"setban: successfully ban single IP address\")\n         assert_equal(len(self.nodes[1].getpeerinfo()), 2)  # node1 should have 2 connections to node0 at this point\n         self.nodes[1].setban(\"127.0.0.1\", \"add\")\n-        assert wait_until(lambda: len(self.nodes[1].getpeerinfo()) == 0, timeout=10)\n+        wait_until(lambda: len(self.nodes[1].getpeerinfo()) == 0, timeout=10)\n         assert_equal(len(self.nodes[1].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n \n@@ -90,7 +92,7 @@ def run_test(self):\n         self.log.info(\"disconnectnode: successfully disconnect node by address\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']\n         self.nodes[0].disconnectnode(address=address1)\n-        assert wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n         assert not [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n         self.log.info(\"disconnectnode: successfully reconnect node\")\n@@ -101,7 +103,7 @@ def run_test(self):\n         self.log.info(\"disconnectnode: successfully disconnect node by node id\")\n         id1 = self.nodes[0].getpeerinfo()[0]['id']\n         self.nodes[0].disconnectnode(nodeid=id1)\n-        assert wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n         assert not [node for node in self.nodes[0].getpeerinfo() if node['id'] == id1]\n \n if __name__ == '__main__':"
      },
      {
        "sha": "a54b5278e48d0e86b894abdf85fb7e11391a9f9e",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -23,13 +23,13 @@\n     mininode_lock,\n     msg_block,\n     msg_getdata,\n-    wait_until,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     connect_nodes,\n     p2p_port,\n+    wait_until,\n )\n \n # NodeConnCB is a class containing callbacks to be executed when a P2P\n@@ -209,7 +209,7 @@ def run_test(self):\n \n         # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n         # NodeConnCB objects.\n-        assert wait_until(lambda: sorted(blocks) == sorted(list(node2.block_receive_map.keys())), timeout=5)\n+        wait_until(lambda: sorted(blocks) == sorted(list(node2.block_receive_map.keys())), timeout=5, lock=mininode_lock)\n \n         self.log.info(\"Check that each block was received only once\")\n         # The network thread uses a global lock on data access to the NodeConn objects when sending and receiving"
      },
      {
        "sha": "807edeb7a83227a78b1ccaf4e7aec0da63e3bb21",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -32,7 +32,6 @@\n \"\"\"\n import time\n \n-from test_framework.mininode import wait_until\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n@@ -69,7 +68,7 @@ def run_test(self):\n         self.nodes.append(self.start_node(1, self.options.tmpdir))\n         # Give bitcoind a second to reload the mempool\n         time.sleep(1)\n-        assert wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n+        wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0 with -persistmempool=0. Verify that it doesn't load its mempool.dat file.\")\n@@ -84,7 +83,7 @@ def run_test(self):\n         self.stop_nodes()\n         self.nodes = []\n         self.nodes.append(self.start_node(0, self.options.tmpdir))\n-        assert wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n+        wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n \n if __name__ == '__main__':\n     MempoolPersistTest().main()"
      },
      {
        "sha": "c5c264765a3f0e243284904505c4875c3e546538",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 16,
        "deletions": 31,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -70,27 +70,23 @@ def send_header_for_blocks(self, new_blocks):\n     def request_headers_and_sync(self, locator, hashstop=0):\n         self.clear_block_announcement()\n         self.get_headers(locator, hashstop)\n-        assert wait_until(self.received_block_announcement, timeout=30)\n+        wait_until(self.received_block_announcement, timeout=30, lock=mininode_lock)\n         self.clear_block_announcement()\n \n     # Block until a block announcement for a particular block hash is\n     # received.\n     def wait_for_block_announcement(self, block_hash, timeout=30):\n         def received_hash():\n             return (block_hash in self.announced_blockhashes)\n-        return wait_until(received_hash, timeout=timeout)\n+        wait_until(received_hash, timeout=timeout, lock=mininode_lock)\n \n     def send_await_disconnect(self, message, timeout=30):\n         \"\"\"Sends a message to the node and wait for disconnect.\n \n         This is used when we want to send a message into the node that we expect\n         will get us disconnected, eg an invalid block.\"\"\"\n         self.send_message(message)\n-        success = wait_until(lambda: not self.connected, timeout=timeout)\n-        if not success:\n-            logger.error(\"send_await_disconnect failed!\")\n-            raise AssertionError(\"send_await_disconnect failed!\")\n-        return success\n+        wait_until(lambda: not self.connected, timeout=timeout, lock=mininode_lock)\n \n class CompactBlocksTest(BitcoinTestFramework):\n     def __init__(self):\n@@ -150,9 +146,7 @@ def test_sendcmpct(self, node, test_node, preferred_version, old_node=None):\n         # Make sure we get a SENDCMPCT message from our peer\n         def received_sendcmpct():\n             return (len(test_node.last_sendcmpct) > 0)\n-        got_message = wait_until(received_sendcmpct, timeout=30)\n-        assert(received_sendcmpct())\n-        assert(got_message)\n+        wait_until(received_sendcmpct, timeout=30, lock=mininode_lock)\n         with mininode_lock:\n             # Check that the first version received is the preferred one\n             assert_equal(test_node.last_sendcmpct[0].version, preferred_version)\n@@ -167,7 +161,6 @@ def check_announcement_of_new_block(node, peer, predicate):\n             block_hash = int(node.generate(1)[0], 16)\n             peer.wait_for_block_announcement(block_hash, timeout=30)\n             assert(peer.block_announced)\n-            assert(got_message)\n \n             with mininode_lock:\n                 assert predicate(peer), (\n@@ -282,7 +275,7 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n \n         # Wait until we've seen the block announcement for the resulting tip\n         tip = int(node.getbestblockhash(), 16)\n-        assert(test_node.wait_for_block_announcement(tip))\n+        test_node.wait_for_block_announcement(tip)\n \n         # Make sure we will receive a fast-announce compact block\n         self.request_cb_announcements(test_node, node, version)\n@@ -297,8 +290,7 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n         block.rehash()\n \n         # Wait until the block was announced (via compact blocks)\n-        wait_until(test_node.received_block_announcement, timeout=30)\n-        assert(test_node.received_block_announcement())\n+        wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n \n         # Now fetch and check the compact block\n         header_and_shortids = None\n@@ -314,8 +306,7 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n             inv = CInv(4, block_hash)  # 4 == \"CompactBlock\"\n             test_node.send_message(msg_getdata([inv]))\n \n-        wait_until(test_node.received_block_announcement, timeout=30)\n-        assert(test_node.received_block_announcement())\n+        wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n \n         # Now fetch and check the compact block\n         header_and_shortids = None\n@@ -386,13 +377,11 @@ def test_compactblock_requests(self, node, test_node, version, segwit):\n \n             if announce == \"inv\":\n                 test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n-                success = wait_until(lambda: \"getheaders\" in test_node.last_message, timeout=30)\n-                assert(success)\n+                wait_until(lambda: \"getheaders\" in test_node.last_message, timeout=30, lock=mininode_lock)\n                 test_node.send_header_for_blocks([block])\n             else:\n                 test_node.send_header_for_blocks([block])\n-            success = wait_until(lambda: \"getdata\" in test_node.last_message, timeout=30)\n-            assert(success)\n+            wait_until(lambda: \"getdata\" in test_node.last_message, timeout=30, lock=mininode_lock)\n             assert_equal(len(test_node.last_message[\"getdata\"].inv), 1)\n             assert_equal(test_node.last_message[\"getdata\"].inv[0].type, 4)\n             assert_equal(test_node.last_message[\"getdata\"].inv[0].hash, block.sha256)\n@@ -571,8 +560,7 @@ def test_incorrect_blocktxn_response(self, node, test_node, version):\n         assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n \n         # We should receive a getdata request\n-        success = wait_until(lambda: \"getdata\" in test_node.last_message, timeout=10)\n-        assert(success)\n+        wait_until(lambda: \"getdata\" in test_node.last_message, timeout=10, lock=mininode_lock)\n         assert_equal(len(test_node.last_message[\"getdata\"].inv), 1)\n         assert(test_node.last_message[\"getdata\"].inv[0].type == 2 or test_node.last_message[\"getdata\"].inv[0].type == 2|MSG_WITNESS_FLAG)\n         assert_equal(test_node.last_message[\"getdata\"].inv[0].hash, block.sha256)\n@@ -599,8 +587,7 @@ def test_getblocktxn_handler(self, node, test_node, version):\n             num_to_request = random.randint(1, len(block.vtx))\n             msg.block_txn_request.from_absolute(sorted(random.sample(range(len(block.vtx)), num_to_request)))\n             test_node.send_message(msg)\n-            success = wait_until(lambda: \"blocktxn\" in test_node.last_message, timeout=10)\n-            assert(success)\n+            wait_until(lambda: \"blocktxn\" in test_node.last_message, timeout=10, lock=mininode_lock)\n \n             [tx.calc_sha256() for tx in block.vtx]\n             with mininode_lock:\n@@ -639,22 +626,20 @@ def test_compactblocks_not_at_tip(self, node, test_node):\n         for i in range(MAX_CMPCTBLOCK_DEPTH + 1):\n             test_node.clear_block_announcement()\n             new_blocks.append(node.generate(1)[0])\n-            wait_until(test_node.received_block_announcement, timeout=30)\n+            wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n \n         test_node.clear_block_announcement()\n         test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n-        success = wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30)\n-        assert(success)\n+        wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30, lock=mininode_lock)\n \n         test_node.clear_block_announcement()\n         node.generate(1)\n-        wait_until(test_node.received_block_announcement, timeout=30)\n+        wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n         test_node.clear_block_announcement()\n         with mininode_lock:\n             test_node.last_message.pop(\"block\", None)\n         test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n-        success = wait_until(lambda: \"block\" in test_node.last_message, timeout=30)\n-        assert(success)\n+        wait_until(lambda: \"block\" in test_node.last_message, timeout=30, lock=mininode_lock)\n         with mininode_lock:\n             test_node.last_message[\"block\"].block.calc_sha256()\n             assert_equal(test_node.last_message[\"block\"].block.sha256, int(new_blocks[0], 16))\n@@ -705,7 +690,7 @@ def test_end_to_end_block_relay(self, node, listeners):\n         node.submitblock(ToHex(block))\n \n         for l in listeners:\n-            wait_until(lambda: l.received_block_announcement(), timeout=30)\n+            wait_until(lambda: l.received_block_announcement(), timeout=30, lock=mininode_lock)\n         with mininode_lock:\n             for l in listeners:\n                 assert \"cmpctblock\" in l.last_message"
      },
      {
        "sha": "f0d4d9a8b86cc0bcf1a8f78c6e0dc8e4255b38d8",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -119,11 +119,11 @@ def run_test(self):\n \n         NetworkThread().start()  # Start up network handling in another thread\n \n-        assert wait_until(lambda: no_version_bannode.ever_connected, timeout=10)\n-        assert wait_until(lambda: no_version_idlenode.ever_connected, timeout=10)\n-        assert wait_until(lambda: no_verack_idlenode.version_received, timeout=10)\n-        assert wait_until(lambda: unsupported_service_bit5_node.ever_connected, timeout=10)\n-        assert wait_until(lambda: unsupported_service_bit7_node.ever_connected, timeout=10)\n+        wait_until(lambda: no_version_bannode.ever_connected, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: no_version_idlenode.ever_connected, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: no_verack_idlenode.version_received, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: unsupported_service_bit5_node.ever_connected, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: unsupported_service_bit7_node.ever_connected, timeout=10, lock=mininode_lock)\n \n         # Mine a block and make sure that it's not sent to the connected nodes\n         self.nodes[0].generate(1)\n@@ -158,8 +158,8 @@ def run_test(self):\n         allowed_service_bit5_node.add_connection(connections[5])\n         allowed_service_bit7_node.add_connection(connections[6])\n \n-        assert wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], timeout=10)\n-        assert wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], timeout=10)\n+        wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], timeout=10, lock=mininode_lock)\n+        wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], timeout=10, lock=mininode_lock)\n \n if __name__ == '__main__':\n     P2PLeakTest().main()"
      },
      {
        "sha": "6451b097c07d33e9022195eeac34c50b44355390",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -128,7 +128,7 @@ def check_last_announcement(self, headers=None, inv=None):\n         expect_headers = headers if headers != None else []\n         expect_inv = inv if inv != None else []\n         test_function = lambda: self.block_announced\n-        assert(wait_until(test_function, timeout=60))\n+        wait_until(test_function, timeout=60, lock=mininode_lock)\n         with mininode_lock:\n             self.block_announced = False\n \n@@ -155,12 +155,12 @@ def wait_for_getdata(self, hash_list, timeout=60):\n             return\n \n         test_function = lambda: \"getdata\" in self.last_message and [x.hash for x in self.last_message[\"getdata\"].inv] == hash_list\n-        assert(wait_until(test_function, timeout=timeout))\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         return\n \n     def wait_for_block_announcement(self, block_hash, timeout=60):\n         test_function = lambda: self.last_blockhash_announced == block_hash\n-        assert(wait_until(test_function, timeout=timeout))\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         return\n \n     def send_header_for_blocks(self, new_blocks):"
      },
      {
        "sha": "bfbc0c3b034095e7ffb22a80e37748d318d63e0a",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -19,7 +19,7 @@\n \n from .mininode import *\n from .blockstore import BlockStore, TxStore\n-from .util import p2p_port\n+from .util import p2p_port, wait_until\n \n import logging\n \n@@ -189,15 +189,15 @@ def clear_all_connections(self):\n     def wait_for_disconnections(self):\n         def disconnected():\n             return all(node.closed for node in self.test_nodes)\n-        return wait_until(disconnected, timeout=10)\n+        wait_until(disconnected, timeout=10, lock=mininode_lock)\n \n     def wait_for_verack(self):\n         return all(node.wait_for_verack() for node in self.test_nodes)\n \n     def wait_for_pings(self, counter):\n         def received_pongs():\n             return all(node.received_ping_response(counter) for node in self.test_nodes)\n-        return wait_until(received_pongs)\n+        wait_until(received_pongs, lock=mininode_lock)\n \n     # sync_blocks: Wait for all connections to request the blockhash given\n     # then send get_headers to find out the tip of each node, and synchronize\n@@ -210,8 +210,7 @@ def blocks_requested():\n             )\n \n         # --> error if not requested\n-        if not wait_until(blocks_requested, attempts=20*num_blocks):\n-            raise AssertionError(\"Not all nodes requested block\")\n+        wait_until(blocks_requested, attempts=20*num_blocks, lock=mininode_lock)\n \n         # Send getheaders message\n         [ c.cb.send_getheaders() for c in self.connections ]\n@@ -231,8 +230,7 @@ def transaction_requested():\n             )\n \n         # --> error if not requested\n-        if not wait_until(transaction_requested, attempts=20*num_events):\n-            raise AssertionError(\"Not all nodes requested transaction\")\n+        wait_until(transaction_requested, attempts=20*num_events, lock=mininode_lock)\n \n         # Get the mempool\n         [ c.cb.send_mempool() for c in self.connections ]"
      },
      {
        "sha": "d0753276db2b61172a791b40bd3b6c6aac1ddfb4",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 8,
        "deletions": 25,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -35,7 +35,7 @@\n from threading import RLock, Thread\n \n from test_framework.siphash import siphash256\n-from test_framework.util import hex_str_to_bytes, bytes_to_hex_str\n+from test_framework.util import hex_str_to_bytes, bytes_to_hex_str, wait_until\n \n BIP0031_VERSION = 60000\n MY_VERSION = 70014  # past bip-31 for ping/pong\n@@ -1358,23 +1358,6 @@ def __repr__(self):\n         return \"msg_reject: %s %d %s [%064x]\" \\\n             % (self.message, self.code, self.reason, self.data)\n \n-# Helper function\n-def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf')):\n-    if attempts == float('inf') and timeout == float('inf'):\n-        timeout = 60\n-    attempt = 0\n-    elapsed = 0\n-\n-    while attempt < attempts and elapsed < timeout:\n-        with mininode_lock:\n-            if predicate():\n-                return True\n-        attempt += 1\n-        elapsed += 0.05\n-        time.sleep(0.05)\n-\n-    return False\n-\n class msg_feefilter(object):\n     command = b\"feefilter\"\n \n@@ -1591,21 +1574,21 @@ def add_connection(self, conn):\n \n     def wait_for_disconnect(self, timeout=60):\n         test_function = lambda: not self.connected\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     # Message receiving helper methods\n \n     def wait_for_block(self, blockhash, timeout=60):\n         test_function = lambda: self.last_message.get(\"block\") and self.last_message[\"block\"].block.rehash() == blockhash\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_getdata(self, timeout=60):\n         test_function = lambda: self.last_message.get(\"getdata\")\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_getheaders(self, timeout=60):\n         test_function = lambda: self.last_message.get(\"getheaders\")\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_inv(self, expected_inv, timeout=60):\n         \"\"\"Waits for an INV message and checks that the first inv object in the message was as expected.\"\"\"\n@@ -1614,11 +1597,11 @@ def wait_for_inv(self, expected_inv, timeout=60):\n         test_function = lambda: self.last_message.get(\"inv\") and \\\n                                 self.last_message[\"inv\"].inv[0].type == expected_inv[0].type and \\\n                                 self.last_message[\"inv\"].inv[0].hash == expected_inv[0].hash\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_verack(self, timeout=60):\n         test_function = lambda: self.message_count[\"verack\"]\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     # Message sending helper functions\n \n@@ -1636,7 +1619,7 @@ def send_and_ping(self, message):\n     def sync_with_ping(self, timeout=60):\n         self.send_message(msg_ping(nonce=self.ping_counter))\n         test_function = lambda: self.last_message.get(\"pong\") and self.last_message[\"pong\"].nonce == self.ping_counter\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         self.ping_counter += 1\n         return True\n "
      },
      {
        "sha": "a14cda07d0cbd7b23f1bb9ec9fe5cf94bff90895",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5398f205e3ba1f7542deeba420f9e198bcb635f5/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "patch": "@@ -157,6 +157,28 @@ def str_to_b64str(string):\n def satoshi_round(amount):\n     return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n \n+def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf'), lock=None):\n+    if attempts == float('inf') and timeout == float('inf'):\n+        timeout = 60\n+    attempt = 0\n+    timeout += time.time()\n+\n+    while attempt < attempts and time.time() < timeout:\n+        if lock:\n+            with lock:\n+                if predicate():\n+                    return\n+        else:\n+            if predicate():\n+                return\n+        attempt += 1\n+        time.sleep(0.05)\n+\n+    # Print the cause of the timeout\n+    assert_greater_than(attempts, attempt)\n+    assert_greater_than(timeout, time.time())\n+    raise RuntimeError('Unreachable')\n+\n # RPC/P2P connection constants and functions\n ############################################\n "
      }
    ]
  },
  {
    "sha": "016b9ada2111aaf41f3336c0179a1347355bc9e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTZiOWFkYTIxMTFhYWY0MWYzMzM2YzAxNzlhMTM0NzM1NWJjOWU2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-11T17:01:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:31:40Z"
      },
      "message": "[tests] add TestNodeCLI class for calling bitcoin-cli for a node\n\nGithub-Pull: #10798\nRebased-From: b23549f6e677a8e22953568704eac7ea0c2c1289",
      "tree": {
        "sha": "e16642ab0b6e3ff9c3a2adfd89416a2d83322b3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e16642ab0b6e3ff9c3a2adfd89416a2d83322b3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/016b9ada2111aaf41f3336c0179a1347355bc9e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/016b9ada2111aaf41f3336c0179a1347355bc9e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/016b9ada2111aaf41f3336c0179a1347355bc9e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/016b9ada2111aaf41f3336c0179a1347355bc9e6/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5398f205e3ba1f7542deeba420f9e198bcb635f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5398f205e3ba1f7542deeba420f9e198bcb635f5"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 30,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7c1325e691473de83f49d5a7560294a0bb7c0f44",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 29,
        "deletions": 0,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/016b9ada2111aaf41f3336c0179a1347355bc9e6/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/016b9ada2111aaf41f3336c0179a1347355bc9e6/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=016b9ada2111aaf41f3336c0179a1347355bc9e6",
        "patch": "@@ -4,8 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Class for bitcoind node under test\"\"\"\n \n+import decimal\n import errno\n import http.client\n+import json\n import logging\n import os\n import subprocess\n@@ -49,6 +51,8 @@ def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mo\n         self.extra_args = extra_args\n         self.args = [self.binary, \"-datadir=\" + self.datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n \n+        self.cli = TestNodeCLI(os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), self.datadir)\n+\n         self.running = False\n         self.process = None\n         self.rpc_connected = False\n@@ -136,3 +140,28 @@ def node_encrypt_wallet(self, passphrase):\n             time.sleep(0.1)\n         self.rpc = None\n         self.rpc_connected = False\n+\n+class TestNodeCLI():\n+    \"\"\"Interface to bitcoin-cli for an individual node\"\"\"\n+\n+    def __init__(self, binary, datadir):\n+        self.binary = binary\n+        self.datadir = datadir\n+\n+    def __getattr__(self, command):\n+        def dispatcher(*args, **kwargs):\n+            return self.send_cli(command, *args, **kwargs)\n+        return dispatcher\n+\n+    def send_cli(self, command, *args, **kwargs):\n+        \"\"\"Run bitcoin-cli command. Deserializes returned string as python object.\"\"\"\n+\n+        pos_args = [str(arg) for arg in args]\n+        named_args = [str(key) + \"=\" + str(value) for (key, value) in kwargs.items()]\n+        assert not (pos_args and named_args), \"Cannot use positional arguments and named arguments in the same bitcoin-cli call\"\n+        p_args = [self.binary, \"-datadir=\" + self.datadir]\n+        if named_args:\n+            p_args += [\"-named\"]\n+        p_args += [command] + pos_args + named_args\n+        cli_output = subprocess.check_output(p_args, universal_newlines=True)\n+        return json.loads(cli_output, parse_float=decimal.Decimal)"
      },
      {
        "sha": "01236b607e6125be8b57760b17e5bb6c25e7e290",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/016b9ada2111aaf41f3336c0179a1347355bc9e6/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/016b9ada2111aaf41f3336c0179a1347355bc9e6/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=016b9ada2111aaf41f3336c0179a1347355bc9e6",
        "patch": "@@ -279,6 +279,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n     #Set env vars\n     if \"BITCOIND\" not in os.environ:\n         os.environ[\"BITCOIND\"] = build_dir + '/src/bitcoind' + exeext\n+        os.environ[\"BITCOINCLI\"] = build_dir + '/src/bitcoin-cli' + exeext\n \n     tests_dir = src_dir + '/test/functional/'\n "
      }
    ]
  },
  {
    "sha": "716066dbea0e448b78838a692c4627a9e32fcec2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTYwNjZkYmVhMGU0NDhiNzg4MzhhNjkyYzQ2MjdhOWUzMmZjZWMy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-11T17:02:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:31:44Z"
      },
      "message": "[tests] Add bitcoin_cli.py test script\n\nGithub-Pull: #10798\nRebased-From: c6ec4358a797b7a11283238a0cf0b4531def9e92",
      "tree": {
        "sha": "099a395c0a0a11aa6c22290cf7cbab67b15da9ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/099a395c0a0a11aa6c22290cf7cbab67b15da9ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/716066dbea0e448b78838a692c4627a9e32fcec2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/716066dbea0e448b78838a692c4627a9e32fcec2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/716066dbea0e448b78838a692c4627a9e32fcec2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/716066dbea0e448b78838a692c4627a9e32fcec2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "016b9ada2111aaf41f3336c0179a1347355bc9e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/016b9ada2111aaf41f3336c0179a1347355bc9e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/016b9ada2111aaf41f3336c0179a1347355bc9e6"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 27,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1033202092680ebda9abc873731866b3bd962ca8",
        "filename": "test/functional/bitcoin_cli.py",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/716066dbea0e448b78838a692c4627a9e32fcec2/test/functional/bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/716066dbea0e448b78838a692c4627a9e32fcec2/test/functional/bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bitcoin_cli.py?ref=716066dbea0e448b78838a692c4627a9e32fcec2",
        "patch": "@@ -0,0 +1,26 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test bitcoin-cli\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class TestBitcoinCli(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        \"\"\"Main test logic\"\"\"\n+\n+        self.log.info(\"Compare responses from getinfo RPC and `bitcoin-cli getinfo`\")\n+        cli_get_info = self.nodes[0].cli.getinfo()\n+        rpc_get_info = self.nodes[0].getinfo()\n+\n+        assert_equal(cli_get_info, rpc_get_info)\n+\n+if __name__ == '__main__':\n+    TestBitcoinCli().main()"
      },
      {
        "sha": "fae4f66d70cde46fd9e16c039ea75e5dfd173705",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/716066dbea0e448b78838a692c4627a9e32fcec2/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/716066dbea0e448b78838a692c4627a9e32fcec2/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=716066dbea0e448b78838a692c4627a9e32fcec2",
        "patch": "@@ -81,6 +81,7 @@\n     # vv Tests less than 30s vv\n     'keypool-topup.py',\n     'zmq_test.py',\n+    'bitcoin_cli.py',\n     'mempool_resurrect_test.py',\n     'txn_doublespend.py --mineblock',\n     'txn_clone.py',"
      }
    ]
  },
  {
    "sha": "b278a43646c8fb331a1b830b09a60ec2544dd6b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjc4YTQzNjQ2YzhmYjMzMWExYjgzMGIwOWE2MGVjMjU0NGRkNmI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-08-25T10:39:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:34:30Z"
      },
      "message": "rpc: Write authcookie atomically\n\nUse POSIX rename atomicity at the `bitcoind` side to create a working\ncookie atomically:\n\n- Write `.cookie.tmp`, close file\n- Rename `.cookie.tmp` to `.cookie`\n\nThis avoids clients reading invalid/partial cookies as in #11129.\n\nGithub-Pull: #11131\nRebased-From: 82dd7195e1fb943f9cd45a48188f9678219c0206",
      "tree": {
        "sha": "829882527cd8fb64d62bc9ec2e745aaf1d9223ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/829882527cd8fb64d62bc9ec2e745aaf1d9223ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b278a43646c8fb331a1b830b09a60ec2544dd6b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b278a43646c8fb331a1b830b09a60ec2544dd6b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b278a43646c8fb331a1b830b09a60ec2544dd6b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b278a43646c8fb331a1b830b09a60ec2544dd6b6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50bd3f626d7ce35d52543b88a2e512074f9df134",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50bd3f626d7ce35d52543b88a2e512074f9df134",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50bd3f626d7ce35d52543b88a2e512074f9df134"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 16,
      "deletions": 7
    },
    "files": [
      {
        "sha": "dc6bcec382fb26f57fcc95da986d0cd5a66685da",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b278a43646c8fb331a1b830b09a60ec2544dd6b6/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b278a43646c8fb331a1b830b09a60ec2544dd6b6/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=b278a43646c8fb331a1b830b09a60ec2544dd6b6",
        "patch": "@@ -66,9 +66,14 @@ static const std::string COOKIEAUTH_USER = \"__cookie__\";\n /** Default name for auth cookie file */\n static const std::string COOKIEAUTH_FILE = \".cookie\";\n \n-fs::path GetAuthCookieFile()\n+/** Get name of RPC authentication cookie file */\n+static fs::path GetAuthCookieFile(bool temp=false)\n {\n-    fs::path path(gArgs.GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE));\n+    std::string arg = gArgs.GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE);\n+    if (temp) {\n+        arg += \".tmp\";\n+    }\n+    fs::path path(arg);\n     if (!path.is_complete()) path = GetDataDir() / path;\n     return path;\n }\n@@ -84,14 +89,20 @@ bool GenerateAuthCookie(std::string *cookie_out)\n      * these are set to 077 in init.cpp unless overridden with -sysperms.\n      */\n     std::ofstream file;\n-    fs::path filepath = GetAuthCookieFile();\n-    file.open(filepath.string().c_str());\n+    fs::path filepath_tmp = GetAuthCookieFile(true);\n+    file.open(filepath_tmp.string().c_str());\n     if (!file.is_open()) {\n-        LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath.string());\n+        LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath_tmp.string());\n         return false;\n     }\n     file << cookie;\n     file.close();\n+\n+    fs::path filepath = GetAuthCookieFile(false);\n+    if (!RenameOver(filepath_tmp, filepath)) {\n+        LogPrintf(\"Unable to rename cookie authentication file %s to %s\\n\", filepath_tmp.string(), filepath.string());\n+        return false;\n+    }\n     LogPrintf(\"Generated RPC authentication cookie %s\\n\", filepath.string());\n \n     if (cookie_out)"
      },
      {
        "sha": "5c9c64f67d1ce47b9b3131ad8972c42759a11ab7",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b278a43646c8fb331a1b830b09a60ec2544dd6b6/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b278a43646c8fb331a1b830b09a60ec2544dd6b6/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=b278a43646c8fb331a1b830b09a60ec2544dd6b6",
        "patch": "@@ -91,8 +91,6 @@ UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const Un\n std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n UniValue JSONRPCError(int code, const std::string& message);\n \n-/** Get name of RPC authentication cookie file */\n-fs::path GetAuthCookieFile();\n /** Generate a new RPC authentication cookie and write it to disk */\n bool GenerateAuthCookie(std::string *cookie_out);\n /** Read the RPC authentication cookie from disk */"
      }
    ]
  },
  {
    "sha": "2cb720ae6122101c83a8836da057a5a7cba5b5df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2I3MjBhZTYxMjIxMDFjODNhODgzNmRhMDU3YTVhN2NiYTViNWRm",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-24T18:12:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:35:39Z"
      },
      "message": "Acquire cs_main lock before cs_wallet during wallet initialization\n\nCWallet::MarkConflicted may acquire the cs_main lock after\nCWalletDB::LoadWallet acquires the cs_wallet lock during wallet initialization.\n(CWalletDB::LoadWallet calls ReadKeyValue which calls CWallet::LoadToWallet\nwhich calls CWallet::MarkConflicted). This is the opposite order that cs_main\nand cs_wallet locks are acquired in the rest of the code, and so leads to\nPOTENTIAL DEADLOCK DETECTED errors if bitcoin is built with -DDEBUG_LOCKORDER.\n\nThis commit changes CWallet::LoadWallet (which calls CWalletDB::LoadWallet) to\nacquire both locks in the standard order. It also fixes some tests that were\nacquiring wallet and main locks out of order and failed with the new locking in\nCWallet::LoadWallet.\n\nError was reported by Luke Dashjr <luke-jr@utopios.org> in\nhttps://botbot.me/freenode/bitcoin-core-dev/msg/90244330/\n\nGithub-Pull: #11126\nRebased-From: de9a1db2ed14e0c75ffd82dc031f7ad30c56d195",
      "tree": {
        "sha": "f2493a881014fbfde03c34d2df004801363089e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2493a881014fbfde03c34d2df004801363089e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cb720ae6122101c83a8836da057a5a7cba5b5df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cb720ae6122101c83a8836da057a5a7cba5b5df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cb720ae6122101c83a8836da057a5a7cba5b5df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cb720ae6122101c83a8836da057a5a7cba5b5df/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b278a43646c8fb331a1b830b09a60ec2544dd6b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b278a43646c8fb331a1b830b09a60ec2544dd6b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b278a43646c8fb331a1b830b09a60ec2544dd6b6"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "5ebacd57d3ab897f3bb8c5fe7d2fe221eaf96d0f",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb720ae6122101c83a8836da057a5a7cba5b5df/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb720ae6122101c83a8836da057a5a7cba5b5df/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=2cb720ae6122101c83a8836da057a5a7cba5b5df",
        "patch": "@@ -364,6 +364,12 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n     empty_wallet();\n }\n \n+static void AddKey(CWallet& wallet, const CKey& key)\n+{\n+    LOCK(wallet.cs_wallet);\n+    wallet.AddKeyPubKey(key, key.GetPubKey());\n+}\n+\n BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n {\n     LOCK(cs_main);\n@@ -379,8 +385,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // and new block files.\n     {\n         CWallet wallet;\n-        LOCK(wallet.cs_wallet);\n-        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        AddKey(wallet, coinbaseKey);\n         BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n     }\n@@ -393,8 +398,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // file.\n     {\n         CWallet wallet;\n-        LOCK(wallet.cs_wallet);\n-        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        AddKey(wallet, coinbaseKey);\n         BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n@@ -599,8 +603,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         wallet.reset(new CWallet(std::unique_ptr<CWalletDBWrapper>(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"))));\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n-        LOCK(wallet->cs_wallet);\n-        wallet->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        AddKey(*wallet, coinbaseKey);\n         wallet->ScanForWalletTransactions(chainActive.Genesis());\n     }\n \n@@ -635,7 +638,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n {\n     std::string coinbaseAddress = coinbaseKey.GetPubKey().GetID().ToString();\n-    LOCK(wallet->cs_wallet);\n+    LOCK2(cs_main, wallet->cs_wallet);\n \n     // Confirm ListCoins initially returns 1 coin grouped under coinbaseKey\n     // address."
      },
      {
        "sha": "bf8981e4e871846ca66b763ad08a889b83bf81db",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cb720ae6122101c83a8836da057a5a7cba5b5df/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cb720ae6122101c83a8836da057a5a7cba5b5df/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2cb720ae6122101c83a8836da057a5a7cba5b5df",
        "patch": "@@ -3101,13 +3101,14 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_c\n \n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n+    LOCK2(cs_main, cs_wallet);\n+\n     fFirstRunRet = false;\n     DBErrors nLoadWalletRet = CWalletDB(*dbw,\"cr+\").LoadWallet(this);\n     if (nLoadWalletRet == DB_NEED_REWRITE)\n     {\n         if (dbw->Rewrite(\"\\x04pool\"))\n         {\n-            LOCK(cs_wallet);\n             setInternalKeyPool.clear();\n             setExternalKeyPool.clear();\n             m_pool_key_to_index.clear();"
      }
    ]
  },
  {
    "sha": "2a5d099e47c896a7a3bd0015ca179587257b7792",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYTVkMDk5ZTQ3Yzg5NmE3YTNiZDAwMTVjYTE3OTU4NzI1N2I3Nzky",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2017-07-18T00:19:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:40:05Z"
      },
      "message": "RPC: gettxout: Slightly improve doc and tests\n\nGithub-Pull: #10859\nRebased-From: 6d2d2eb49389d70a5db327e133c9c90748f82d5f",
      "tree": {
        "sha": "7772865032536e165e4e6bd9e315023b3565d031",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7772865032536e165e4e6bd9e315023b3565d031"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2a5d099e47c896a7a3bd0015ca179587257b7792",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5d099e47c896a7a3bd0015ca179587257b7792",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2a5d099e47c896a7a3bd0015ca179587257b7792",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5d099e47c896a7a3bd0015ca179587257b7792/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "716066dbea0e448b78838a692c4627a9e32fcec2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/716066dbea0e448b78838a692c4627a9e32fcec2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/716066dbea0e448b78838a692c4627a9e32fcec2"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 14,
      "deletions": 5
    },
    "files": [
      {
        "sha": "720eb068bf65780366965d285355e16bfb497512",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5d099e47c896a7a3bd0015ca179587257b7792/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5d099e47c896a7a3bd0015ca179587257b7792/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=2a5d099e47c896a7a3bd0015ca179587257b7792",
        "patch": "@@ -944,9 +944,10 @@ UniValue gettxout(const JSONRPCRequest& request)\n             \"gettxout \\\"txid\\\" n ( include_mempool )\\n\"\n             \"\\nReturns details about an unspent transaction output.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"       (string, required) The transaction id\\n\"\n-            \"2. n              (numeric, required) vout number\\n\"\n-            \"3. include_mempool  (boolean, optional) Whether to include the mempool\\n\"\n+            \"1. \\\"txid\\\"             (string, required) The transaction id\\n\"\n+            \"2. \\\"n\\\"                (numeric, required) vout number\\n\"\n+            \"3. \\\"include_mempool\\\"  (boolean, optional) Whether to include the mempool. Default: true.\"\n+            \"     Note that an unspent output that is spent in the mempool won't appear.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\""
      },
      {
        "sha": "a37c457bc813476a6d02fe828366e887fd5aae4c",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2a5d099e47c896a7a3bd0015ca179587257b7792/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2a5d099e47c896a7a3bd0015ca179587257b7792/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=2a5d099e47c896a7a3bd0015ca179587257b7792",
        "patch": "@@ -56,6 +56,15 @@ def run_test(self):\n         assert_equal(len(self.nodes[1].listunspent()), 1)\n         assert_equal(len(self.nodes[2].listunspent()), 0)\n \n+        self.log.info(\"test gettxout\")\n+        confirmed_txid, confirmed_index = utxos[0][\"txid\"], utxos[0][\"vout\"]\n+        # First, outputs that are unspent both in the chain and in the\n+        # mempool should appear with or without include_mempool\n+        txout = self.nodes[0].gettxout(txid=confirmed_txid, n=confirmed_index, include_mempool=False)\n+        assert_equal(txout['value'], 50)\n+        txout = self.nodes[0].gettxout(txid=confirmed_txid, n=confirmed_index, include_mempool=True)\n+        assert_equal(txout['value'], 50)\n+        \n         # Send 21 BTC from 0 to 2 using sendtoaddress call.\n         # Locked memory should use at least 32 bytes to sign each transaction\n         self.log.info(\"test getmemoryinfo\")\n@@ -65,10 +74,9 @@ def run_test(self):\n         memory_after = self.nodes[0].getmemoryinfo()\n         assert(memory_before['locked']['used'] + 64 <= memory_after['locked']['used'])\n \n-        self.log.info(\"test gettxout\")\n+        self.log.info(\"test gettxout (second part)\")\n         # utxo spent in mempool should be visible if you exclude mempool\n         # but invisible if you include mempool\n-        confirmed_txid, confirmed_index = utxos[0][\"txid\"], utxos[0][\"vout\"]\n         txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, False)\n         assert_equal(txout['value'], 50)\n         txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, True)"
      }
    ]
  },
  {
    "sha": "847c75ec6447f58b6c4f3732a10551f1faddbb0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDdjNzVlYzY0NDdmNThiNmM0ZjM3MzJhMTA1NTFmMWZhZGRiYjBi",
    "commit": {
      "author": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-08-25T22:20:33Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:41:34Z"
      },
      "message": "Add getmininginfo functional test\n\nGithub-Pull: #11150\nRebased-From: 4f2905b76b502a9de235dbe739e5fe504ef5bc22",
      "tree": {
        "sha": "58976fd15ba781c15d2d38107fd6e9197ead70a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58976fd15ba781c15d2d38107fd6e9197ead70a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/847c75ec6447f58b6c4f3732a10551f1faddbb0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/847c75ec6447f58b6c4f3732a10551f1faddbb0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/847c75ec6447f58b6c4f3732a10551f1faddbb0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/847c75ec6447f58b6c4f3732a10551f1faddbb0b/comments",
    "author": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a5d099e47c896a7a3bd0015ca179587257b7792",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a5d099e47c896a7a3bd0015ca179587257b7792",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a5d099e47c896a7a3bd0015ca179587257b7792"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 17,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f3d1f3e90afb9bccb5d4fea57cc2f93747b0842d",
        "filename": "test/functional/mining.py",
        "status": "modified",
        "additions": 17,
        "deletions": 3,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/847c75ec6447f58b6c4f3732a10551f1faddbb0b/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/847c75ec6447f58b6c4f3732a10551f1faddbb0b/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=847c75ec6447f58b6c4f3732a10551f1faddbb0b",
        "patch": "@@ -4,16 +4,18 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mining RPCs\n \n+- getmininginfo\n - getblocktemplate proposal mode\n - submitblock\"\"\"\n \n-from binascii import b2a_hex\n import copy\n+from binascii import b2a_hex\n+from decimal import Decimal\n \n from test_framework.blocktools import create_coinbase\n-from test_framework.test_framework import BitcoinTestFramework\n from test_framework.mininode import CBlock\n-from test_framework.util import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n@@ -33,6 +35,18 @@ def __init__(self):\n \n     def run_test(self):\n         node = self.nodes[0]\n+\n+        self.log.info('getmininginfo')\n+        mining_info = node.getmininginfo()\n+        assert_equal(mining_info['blocks'], 200)\n+        assert_equal(mining_info['chain'], 'regtest')\n+        assert_equal(mining_info['currentblocksize'], 0)\n+        assert_equal(mining_info['currentblocktx'], 0)\n+        assert_equal(mining_info['currentblockweight'], 0)\n+        assert_equal(mining_info['difficulty'], Decimal('4.656542373906925E-10'))\n+        assert_equal(mining_info['networkhashps'], Decimal('0.003333333333333334'))\n+        assert_equal(mining_info['pooledtx'], 0)\n+\n         # Mine a block to leave initial block download\n         node.generate(1)\n         tmpl = node.getblocktemplate()"
      }
    ]
  },
  {
    "sha": "11a5992c90d4cc9a3823ea08dab2c078bcbf15d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWE1OTkyYzkwZDRjYzlhMzgyM2VhMDhkYWIyYzA3OGJjYmYxNWQy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-23T19:49:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:42:57Z"
      },
      "message": "[tests] fix - use rpc_timeout as rpc timeout\n\nGithub-Pull: #11121\nRebased-From: be2a2ab6a67beef97e3c3cf42bd5eeea6c4e55cf",
      "tree": {
        "sha": "8650c8035ae9a4b6f76ac52be4e79f1697f56fdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8650c8035ae9a4b6f76ac52be4e79f1697f56fdf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "847c75ec6447f58b6c4f3732a10551f1faddbb0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/847c75ec6447f58b6c4f3732a10551f1faddbb0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/847c75ec6447f58b6c4f3732a10551f1faddbb0b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "553c7c9d20225b724642888b732a37f7c95154d0",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=11a5992c90d4cc9a3823ea08dab2c078bcbf15d2",
        "patch": "@@ -78,7 +78,7 @@ def wait_for_rpc_connection(self):\n         for _ in range(poll_per_s * self.rpc_timeout):\n             assert self.process.poll() is None, \"bitcoind exited with status %i during initialization\" % self.process.returncode\n             try:\n-                self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, coveragedir=self.coverage_dir)\n+                self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, timeout=self.rpc_timeout, coveragedir=self.coverage_dir)\n                 self.rpc.getblockcount()\n                 # If the call to getblockcount() succeeds then the RPC connection is up\n                 self.rpc_connected = True"
      }
    ]
  },
  {
    "sha": "4d3ba18386c7a09086d06c8b640c19343ff34188",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDNiYTE4Mzg2YzdhMDkwODZkMDZjOGI2NDBjMTkzNDNmZjM0MTg4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-09T20:35:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:43:15Z"
      },
      "message": "[tests] TestNode: separate add_node from start_node\n\nSeparates the act of creating a TestNode object from starting the node.\nThe test_framework now keeps track of its list of TestNodes, and test\nwriters can call start_node() and stop_node() without having to update\nthe self.nodes list.\n\nGithub-Pull: #11121\nRebased-From: 36b626867087e9fae6d85f926248997ebff327b7",
      "tree": {
        "sha": "93de2e0a806af1d76f8b36faf1bf3f3a5677a684",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93de2e0a806af1d76f8b36faf1bf3f3a5677a684"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d3ba18386c7a09086d06c8b640c19343ff34188",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d3ba18386c7a09086d06c8b640c19343ff34188",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d3ba18386c7a09086d06c8b640c19343ff34188",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d3ba18386c7a09086d06c8b640c19343ff34188/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11a5992c90d4cc9a3823ea08dab2c078bcbf15d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11a5992c90d4cc9a3823ea08dab2c078bcbf15d2"
      }
    ],
    "stats": {
      "total": 399,
      "additions": 202,
      "deletions": 197
    },
    "files": [
      {
        "sha": "1db04337a96f4d9c7c2cb2b51f9f0f4d9e7a7734",
        "filename": "test/functional/abandonconflict.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/abandonconflict.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -74,7 +74,7 @@ def run_test(self):\n         # Restart the node with a higher min relay fee so the parent tx is no longer in mempool\n         # TODO: redo with eviction\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n+        self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n \n         # Verify txs no longer in either node's mempool\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n@@ -101,7 +101,7 @@ def run_test(self):\n \n         # Verify that even with a low min relay fee, the tx is not reaccepted from wallet on startup once abandoned\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"])\n+        self.start_node(0, extra_args=[\"-minrelaytxfee=0.00001\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(self.nodes[0].getbalance(), balance)\n \n@@ -121,7 +121,7 @@ def run_test(self):\n \n         # Remove using high relay fee again\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n+        self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         newbalance = self.nodes[0].getbalance()\n         assert_equal(newbalance, balance - Decimal(\"24.9996\"))"
      },
      {
        "sha": "63e6a384a45d2a7235bebad2b155997a5aae94f7",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -60,10 +60,11 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self):\n+        self.add_nodes(3, self.options.tmpdir)\n         # Start node0. We don't start the other nodes yet since\n         # we need to pre-mine a block with an invalid transaction\n         # signature so we can pass in the block hash as assumevalid.\n-        self.nodes = [self.start_node(0, self.options.tmpdir)]\n+        self.start_node(0)\n \n     def send_blocks_until_disconnected(self, node):\n         \"\"\"Keep sending blocks to the node until we're disconnected.\"\"\"\n@@ -162,15 +163,13 @@ def run_test(self):\n             height += 1\n \n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                     [\"-assumevalid=\" + hex(block102.sha256)]))\n+        self.start_node(1, extra_args=[\"-assumevalid=\" + hex(block102.sha256)])\n         node1 = BaseNode()  # connects to node1\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], node1))\n         node1.add_connection(connections[1])\n         node1.wait_for_verack()\n \n-        self.nodes.append(self.start_node(2, self.options.tmpdir,\n-                                     [\"-assumevalid=\" + hex(block102.sha256)]))\n+        self.start_node(2, extra_args=[\"-assumevalid=\" + hex(block102.sha256)])\n         node2 = BaseNode()  # connects to node2\n         connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n         node2.add_connection(connections[2])"
      },
      {
        "sha": "ad16482550ce16ea5636ee53df1e2e12770af466",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -241,6 +241,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         # Restart all\n         self.test.clear_all_connections()\n         self.stop_nodes()\n+        self.nodes = []\n         shutil.rmtree(self.options.tmpdir + \"/node0\")\n         self.setup_chain()\n         self.setup_network()"
      },
      {
        "sha": "a3a6cf2fb868966ae46b577a070ddfd69412d1aa",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -146,7 +146,7 @@ def _test_stopatheight(self):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')\n         self.nodes[0].process.wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0)\n         assert_equal(self.nodes[0].getblockcount(), 207)\n \n "
      },
      {
        "sha": "59c65f18e89deaeb70034accc603245fb89a7cb0",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -34,21 +34,18 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]\n+                           for i in range(self.num_nodes)]\n \n-    def setup_network(self, split=False):\n-        extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]\n-                      for i in range(self.num_nodes)]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n-\n+    def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test\n         self.nodes[1].node_encrypt_wallet(WALLET_PASSPHRASE)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, extra_args[1])\n+        self.start_node(1)\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()\n \n-    def run_test(self):\n         peer_node, rbf_node = self.nodes\n         rbf_node_address = rbf_node.getnewaddress()\n "
      },
      {
        "sha": "1a5754b3f7396d6ba0342476c85700ad6fb5f4fb",
        "filename": "test/functional/create_cache.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/create_cache.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -18,7 +18,6 @@ def __init__(self):\n \n         # Test network and test nodes are not required:\n         self.num_nodes = 0\n-        self.nodes = []\n \n     def setup_network(self):\n         pass"
      },
      {
        "sha": "d39369105bf6d5becfc54e1c137a7b7fc6415987",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -65,7 +65,8 @@ def __init__(self):\n \n     def setup_network(self):\n         # Need a bit of extra time for the nodes to start up for this test\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=90)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=90)\n+        self.start_nodes()\n         # Leave them unconnected, we'll use submitblock directly in this test\n \n     def restart_node(self, node_index, expected_tip):\n@@ -78,7 +79,7 @@ def restart_node(self, node_index, expected_tip):\n         while time.time() - time_start < 120:\n             try:\n                 # Any of these RPC calls could throw due to node crash\n-                self.nodes[node_index] = self.start_node(node_index, self.options.tmpdir, self.extra_args[node_index], timewait=90)\n+                self.start_node(node_index)\n                 self.nodes[node_index].waitforblock(expected_tip)\n                 utxo_hash = self.nodes[node_index].gettxoutsetinfo()['hash_serialized_2']\n                 return utxo_hash"
      },
      {
        "sha": "cc8901c40ca5248041233792d6c1a9a4cdeed7a5",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -68,8 +68,8 @@ def run_test(self):\n         assert_equal(len(self.nodes[1].listbanned()), 3)\n \n         self.stop_node(1)\n+        self.start_node(1)\n \n-        self.nodes[1] = self.start_node(1, self.options.tmpdir)\n         listAfterShutdown = self.nodes[1].listbanned()\n         assert_equal(\"127.0.0.0/24\", listAfterShutdown[0]['address'])\n         assert_equal(\"127.0.0.0/32\", listAfterShutdown[1]['address'])"
      },
      {
        "sha": "3a2a927098e0fb0c486a9647e61a2a4f7d4316bf",
        "filename": "test/functional/forknotify.py",
        "status": "modified",
        "additions": 3,
        "deletions": 10,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -7,7 +7,6 @@\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n \n class ForkNotifyTest(BitcoinTestFramework):\n \n@@ -17,18 +16,12 @@ def __init__(self):\n         self.setup_clean_chain = False\n \n     def setup_network(self):\n-        self.nodes = []\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         with open(self.alert_filename, 'w', encoding='utf8'):\n             pass  # Just open then close to create zero-length file\n-        self.nodes.append(self.start_node(0, self.options.tmpdir,\n-                            [\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]))\n-        # Node1 mines block.version=211 blocks\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                [\"-blockversion=211\"]))\n-        connect_nodes(self.nodes[1], 0)\n-\n-        self.sync_all()\n+        self.extra_args = [[\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"],\n+                           [\"-blockversion=211\"]]\n+        super().setup_network()\n \n     def run_test(self):\n         # Mine 51 up-version blocks"
      },
      {
        "sha": "242b6eed108cf996aa9391b626b9ad41403cb1b5",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -449,11 +449,11 @@ def run_test(self):\n         ############################################################\n         # locked wallet test\n         self.stop_node(0)\n+        self.nodes[1].node_encrypt_wallet(\"test\")\n         self.stop_node(2)\n         self.stop_node(3)\n-        self.nodes[1].node_encrypt_wallet(\"test\")\n \n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.start_nodes()\n         # This test is not meant to test fee estimation and we'd like\n         # to be sure all txs are sent at a consistent desired feerate\n         for node in self.nodes:"
      },
      {
        "sha": "be52d5c8472d09a51d0972ddedaf2027e8892a31",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -121,7 +121,8 @@ def setup_network(self):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n "
      },
      {
        "sha": "6aae95549de9359c742b3f5fe4d3c35226a8d654",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -429,7 +429,7 @@ def run_test (self):\n \n         # restart nodes to check for proper serialization/deserialization of watch only address\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(2, self.options.tmpdir)\n+        self.start_nodes()\n         address_assert = self.nodes[1].validateaddress(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)"
      },
      {
        "sha": "f14a449b59192d555de753d053524e832ec756d0",
        "filename": "test/functional/keypool-topup.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/keypool-topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/keypool-topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-topup.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -35,7 +35,7 @@ def run_test(self):\n         self.stop_node(1)\n \n         shutil.copyfile(self.tmpdir + \"/node1/regtest/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n-        self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n+        self.start_node(1, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         self.log.info(\"Generate keys for wallet\")\n@@ -61,7 +61,7 @@ def run_test(self):\n \n         self.log.info(\"Verify keypool is restored and balance is correct\")\n \n-        self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n+        self.start_node(1, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()\n "
      },
      {
        "sha": "0f84b5c0550170f4f74d4dd29af56efceb866bb6",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -19,7 +19,7 @@ def run_test(self):\n         # Encrypt wallet and wait to terminate\n         nodes[0].node_encrypt_wallet('test')\n         # Restart node 0\n-        nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].validateaddress(addr)"
      },
      {
        "sha": "9b970284171d98daa703048649d9493758ce59e9",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -20,11 +20,7 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n-\n-    def setup_nodes(self):\n-        #This test requires mocktime\n         self.enable_mocktime()\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         # Simple send, 0 to 1:"
      },
      {
        "sha": "6bd6a9e34f45ad0e37cd173b037280dff3e728ac",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -147,7 +147,7 @@ def run_test(self):\n         #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n         self.log.info(\"Restarting nodes with -whitelist=127.0.0.1\")\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n+        self.start_node(0, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n \n         #recreate/reconnect a test node\n         test_nodes = [TestNode()]"
      },
      {
        "sha": "dc5a3263ffa4a3568ecb8baf4862d38ad9e02073",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -63,26 +63,23 @@ def run_test(self):\n \n         self.log.debug(\"Stop-start node0 and node1. Verify that node0 has the transactions in its mempool and node1 does not.\")\n         self.stop_nodes()\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir))\n+        self.start_node(0)\n+        self.start_node(1)\n         # Give bitcoind a second to reload the mempool\n         time.sleep(1)\n         wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0 with -persistmempool=0. Verify that it doesn't load its mempool.dat file.\")\n         self.stop_nodes()\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-persistmempool=0\"]))\n+        self.start_node(0, extra_args=[\"-persistmempool=0\"])\n         # Give bitcoind a second to reload the mempool\n         time.sleep(1)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0. Verify that it has the transactions in its mempool.\")\n         self.stop_nodes()\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir))\n+        self.start_node(0)\n         wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n \n if __name__ == '__main__':"
      },
      {
        "sha": "7381a9fd54d82a52f37e220547286465058a2b9b",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -23,17 +23,17 @@ def run_test(self):\n         self.stop_node(0)\n \n         # should not initialize if there are duplicate wallets\n-        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n+        self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n \n         # should not initialize if wallet file is a directory\n         os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w11'))\n-        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n+        self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n \n         # should not initialize if wallet file is a symlink\n         os.symlink(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w1'), os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w12'))\n-        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n+        self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n \n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n+        self.start_node(0, self.extra_args[0])\n \n         w1 = self.nodes[0].get_wallet_rpc(\"w1\")\n         w2 = self.nodes[0].get_wallet_rpc(\"w2\")"
      },
      {
        "sha": "9189f5ef23f857cf5a56e27b927d8f280eb55a24",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -1496,7 +1496,7 @@ def test_upgrade_after_activation(self, node_id):\n \n         # Restart with the new binary\n         self.stop_node(node_id)\n-        self.nodes[node_id] = self.start_node(node_id, self.options.tmpdir)\n+        self.start_node(node_id, extra_args=[])\n         connect_nodes(self.nodes[0], node_id)\n \n         sync_blocks(self.nodes)"
      },
      {
        "sha": "a7aacf908d1ede0bdf82fe513e5e50d0c83f6ed6",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -112,7 +112,7 @@ def run_test(self):\n         # Empty out the alert file\n         with open(self.alert_filename, 'w', encoding='utf8') as _:\n             pass\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.start_nodes()\n \n         # Connecting one block should be enough to generate an error.\n         self.nodes[0].generate(1)\n@@ -123,7 +123,7 @@ def run_test(self):\n         self.test_versionbits_in_alert_file()\n \n         # Test framework expects the node to still be running...\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.start_nodes()\n \n if __name__ == '__main__':\n     VersionBitsWarningTest().main()"
      },
      {
        "sha": "7f5a3810f4d4618ef359135a852bea4b3f7aaea7",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -89,7 +89,8 @@ def setup_nodes(self):\n             ]\n         if self.have_ipv6:\n             args[3] = ['-listen', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n+        self.start_nodes()\n \n     def node_test(self, node, proxies, auth, test_onion=True):\n         rv = []"
      },
      {
        "sha": "fe406e89adc2b694bdc29ec878243e781b7857bb",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 15,
        "deletions": 9,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -56,6 +56,10 @@ def setup_network(self):\n         connect_nodes(self.nodes[0], 4)\n         sync_blocks(self.nodes[0:5])\n \n+    def setup_nodes(self):\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=900)\n+        self.start_nodes()\n+\n     def create_big_chain(self):\n         # Start by creating some coinbases we can spend later\n         self.nodes[1].generate(200)\n@@ -98,7 +102,7 @@ def create_chain_with_staleblocks(self):\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n             # Stopping node 0 also clears its mempool, so it doesn't have node1's transactions to accidentally mine\n             self.stop_node(0)\n-            self.nodes[0]=self.start_node(0, self.options.tmpdir, self.full_node_default_args, timewait=900)\n+            self.start_node(0, extra_args=self.full_node_default_args)\n             # Mine 24 blocks in node 1\n             for i in range(24):\n                 if j == 0:\n@@ -126,7 +130,7 @@ def reorg_test(self):\n         # Reboot node 1 to clear its mempool (hopefully make the invalidate faster)\n         # Lower the block max size so we don't keep mining all our big mempool transactions (from disconnected blocks)\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n+        self.start_node(1, extra_args=[\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"])\n \n         height = self.nodes[1].getblockcount()\n         self.log.info(\"Current block height: %d\" % height)\n@@ -149,7 +153,7 @@ def reorg_test(self):\n \n         # Reboot node1 to clear those giant tx's from mempool\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n+        self.start_node(1, extra_args=[\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"])\n \n         self.log.info(\"Generating new longer chain of 300 more blocks\")\n         self.nodes[1].generate(300)\n@@ -227,13 +231,15 @@ def reorg_back(self):\n \n     def manual_test(self, node_number, use_timestamp):\n         # at this point, node has 995 blocks and has not yet run in prune mode\n-        node = self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, timewait=900)\n+        self.start_node(node_number)\n+        node = self.nodes[node_number]\n         assert_equal(node.getblockcount(), 995)\n         assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n-        self.stop_node(node_number)\n \n         # now re-start in manual pruning mode\n-        node = self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, [\"-prune=1\"], timewait=900)\n+        self.stop_node(node_number)\n+        self.start_node(node_number, extra_args=[\"-prune=1\"])\n+        node = self.nodes[node_number]\n         assert_equal(node.getblockcount(), 995)\n \n         def height(index):\n@@ -307,15 +313,15 @@ def has_block(index):\n \n         # stop node, start back up with auto-prune at 550MB, make sure still runs\n         self.stop_node(node_number)\n-        self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, [\"-prune=550\"], timewait=900)\n+        self.start_node(node_number, extra_args=[\"-prune=550\"])\n \n         self.log.info(\"Success\")\n \n     def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         self.log.info(\"Stop and start pruning node to trigger wallet rescan\")\n         self.stop_node(2)\n-        self.nodes[2] = self.start_node(2, self.options.tmpdir, [\"-prune=550\"])\n+        self.start_node(2, extra_args=[\"-prune=550\"])\n         self.log.info(\"Success\")\n \n         # check that wallet loads successfully when restarting a pruned node after IBD.\n@@ -325,7 +331,7 @@ def wallet_test(self):\n         nds = [self.nodes[0], self.nodes[5]]\n         sync_blocks(nds, wait=5, timeout=300)\n         self.stop_node(5) #stop and start to trigger rescan\n-        self.nodes[5] = self.start_node(5, self.options.tmpdir, [\"-prune=550\"])\n+        self.start_node(5, extra_args=[\"-prune=550\"])\n         self.log.info(\"Success\")\n \n     def run_test(self):"
      },
      {
        "sha": "b1658341699875b4bc8762f9752315eb9c651983",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -28,11 +28,7 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n-\n-    def setup_nodes(self):\n-        #This test requires mocktime\n         self.enable_mocktime()\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         '''"
      },
      {
        "sha": "0d2a1065920611c09437acf603efb269ea2e2350",
        "filename": "test/functional/reindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/reindex.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -25,7 +25,7 @@ def reindex(self, justchainstate=False):\n         blockcount = self.nodes[0].getblockcount()\n         self.stop_nodes()\n         extra_args = [[\"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"]]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.start_nodes(extra_args)\n         while self.nodes[0].getblockcount() < blockcount:\n             time.sleep(0.1)\n         assert_equal(self.nodes[0].getblockcount(), blockcount)"
      },
      {
        "sha": "db6f6eec45896324a5f8f97b0c9523479e91a3a3",
        "filename": "test/functional/resendwallettransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/resendwallettransactions.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -20,7 +20,7 @@ def run_test(self):\n \n         # Should return an empty array if there aren't unconfirmed wallet transactions.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0, extra_args=[])\n         assert_equal(self.nodes[0].resendwallettransactions(), [])\n \n         # Should return an array with the unconfirmed wallet transaction."
      },
      {
        "sha": "e9d64af204cda63c9dcdef3fb34b735f63fd8a41",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -20,23 +20,22 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        pass\n-\n-    def setup_nodes(self):\n-        pass\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, None)\n \n     def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n         '''\n         Start a node with requested rpcallowip and rpcbind parameters,\n         then try to connect, and check if the set of bound addresses\n         matches the expected set.\n         '''\n+        self.log.info(\"Bind test for %s\" % str(addresses))\n         expected = [(addr_to_hex(addr), port) for (addr, port) in expected]\n         base_args = ['-disablewallet', '-nolisten']\n         if allow_ips:\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n+        self.nodes[0].rpchost = connect_to\n+        self.start_node(0, base_args + binds)\n         pid = self.nodes[0].process.pid\n         assert_equal(set(get_bind_addrs(pid)), set(expected))\n         self.stop_nodes()\n@@ -46,8 +45,10 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         Start a node with rpcallow IP, and request getnetworkinfo\n         at a non-localhost IP.\n         '''\n+        self.log.info(\"Allow IP test for %s:%d\" % (rpchost, rpcport))\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n+        self.nodes[0].rpchost = None\n+        self.start_nodes([base_args])\n         # connect to node through non-loopback interface\n         node = get_rpc_proxy(rpc_url(get_datadir_path(self.options.tmpdir, 0), 0, \"%s:%d\" % (rpchost, rpcport)), 0, coveragedir=self.options.coveragedir)\n         node.getnetworkinfo()"
      },
      {
        "sha": "6eb6658466449d0dd0eec8be4ef569f0d2e00de3",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 45,
        "deletions": 44,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -153,57 +153,16 @@ def setup_network(self):\n         But first we need to use one node to create a lot of outputs\n         which we will use to generate our transactions.\n         \"\"\"\n-        self.nodes = []\n+        self.add_nodes(3, self.options.tmpdir, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n+                                                           [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n+                                                           [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n         # Use node0 to mine blocks for input splitting\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n-                                                              \"-whitelist=127.0.0.1\"]))\n-\n-        self.log.info(\"This test is time consuming, please be patient\")\n-        self.log.info(\"Splitting inputs so we can generate tx's\")\n-        self.txouts = []\n-        self.txouts2 = []\n-        # Split a coinbase into two transaction puzzle outputs\n-        split_inputs(self.nodes[0], self.nodes[0].listunspent(0), self.txouts, True)\n-\n-        # Mine\n-        while (len(self.nodes[0].getrawmempool()) > 0):\n-            self.nodes[0].generate(1)\n-\n-        # Repeatedly split those 2 outputs, doubling twice for each rep\n-        # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n-        reps = 0\n-        while (reps < 5):\n-            #Double txouts to txouts2\n-            while (len(self.txouts)>0):\n-                split_inputs(self.nodes[0], self.txouts, self.txouts2)\n-            while (len(self.nodes[0].getrawmempool()) > 0):\n-                self.nodes[0].generate(1)\n-            #Double txouts2 to txouts\n-            while (len(self.txouts2)>0):\n-                split_inputs(self.nodes[0], self.txouts2, self.txouts)\n-            while (len(self.nodes[0].getrawmempool()) > 0):\n-                self.nodes[0].generate(1)\n-            reps += 1\n-        self.log.info(\"Finished splitting\")\n-\n-        # Now we can connect the other nodes, didn't want to connect them earlier\n-        # so the estimates would not be affected by the splitting transactions\n         # Node1 mines small blocks but that are bigger than the expected transaction rate.\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n         # (17k is room enough for 110 or so transactions)\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                     [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"]))\n-        connect_nodes(self.nodes[1], 0)\n-\n         # Node2 is a stingy miner, that\n         # produces too small blocks (room for only 55 or so transactions)\n-        node2args = [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]\n \n-        self.nodes.append(self.start_node(2, self.options.tmpdir, node2args))\n-        connect_nodes(self.nodes[0], 2)\n-        connect_nodes(self.nodes[2], 1)\n-\n-        self.sync_all()\n \n     def transact_and_mine(self, numblocks, mining_node):\n         min_fee = Decimal(\"0.00001\")\n@@ -232,9 +191,51 @@ def transact_and_mine(self, numblocks, mining_node):\n             self.memutxo = newmem\n \n     def run_test(self):\n+        self.log.info(\"This test is time consuming, please be patient\")\n+        self.log.info(\"Splitting inputs so we can generate tx's\")\n+\n         # Make log handler available to helper functions\n         global log\n         log = self.log\n+\n+        # Start node0\n+        self.start_node(0)\n+        self.txouts = []\n+        self.txouts2 = []\n+        # Split a coinbase into two transaction puzzle outputs\n+        split_inputs(self.nodes[0], self.nodes[0].listunspent(0), self.txouts, True)\n+\n+        # Mine\n+        while (len(self.nodes[0].getrawmempool()) > 0):\n+            self.nodes[0].generate(1)\n+\n+        # Repeatedly split those 2 outputs, doubling twice for each rep\n+        # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n+        reps = 0\n+        while (reps < 5):\n+            #Double txouts to txouts2\n+            while (len(self.txouts)>0):\n+                split_inputs(self.nodes[0], self.txouts, self.txouts2)\n+            while (len(self.nodes[0].getrawmempool()) > 0):\n+                self.nodes[0].generate(1)\n+            #Double txouts2 to txouts\n+            while (len(self.txouts2)>0):\n+                split_inputs(self.nodes[0], self.txouts2, self.txouts)\n+            while (len(self.nodes[0].getrawmempool()) > 0):\n+                self.nodes[0].generate(1)\n+            reps += 1\n+        self.log.info(\"Finished splitting\")\n+\n+        # Now we can connect the other nodes, didn't want to connect them earlier\n+        # so the estimates would not be affected by the splitting transactions\n+        self.start_node(1)\n+        self.start_node(2)\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[2], 1)\n+\n+        self.sync_all()\n+\n         self.fees_per_kb = []\n         self.memutxo = []\n         self.confutxo = self.txouts # Start with the set of confirmed txouts after splitting"
      },
      {
        "sha": "a14ff9c292e031c2089e7a5f7d894b66b8606de2",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 33,
        "deletions": 32,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -91,7 +91,8 @@ def setup_nodes(self):\n         extra_args = None\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.start_nodes()\n \n     def run_test(self):\n         raise NotImplementedError\n@@ -204,49 +205,49 @@ def main(self):\n \n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n-    def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-        \"\"\"Start a bitcoind and return RPC connection to it\"\"\"\n+    def add_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+        \"\"\"Instantiate TestNode objects\"\"\"\n \n         if extra_args is None:\n-            extra_args = []\n+            extra_args = [[]] * num_nodes\n         if binary is None:\n-            binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-        node = TestNode(i, dirname, extra_args, rpchost, timewait, binary, stderr, self.mocktime, coverage_dir=self.options.coveragedir)\n-        node.start()\n+            binary = [None] * num_nodes\n+        assert_equal(len(extra_args), num_nodes)\n+        assert_equal(len(binary), num_nodes)\n+        for i in range(num_nodes):\n+            self.nodes.append(TestNode(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n+\n+    def start_node(self, i, extra_args=None, stderr=None):\n+        \"\"\"Start a bitcoind\"\"\"\n+\n+        node = self.nodes[i]\n+\n+        node.start(extra_args, stderr)\n         node.wait_for_rpc_connection()\n \n         if self.options.coveragedir is not None:\n             coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n \n-        return node\n-\n-    def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-        \"\"\"Start multiple bitcoinds, return RPC connections to them\"\"\"\n+    def start_nodes(self, extra_args=None):\n+        \"\"\"Start multiple bitcoinds\"\"\"\n \n         if extra_args is None:\n-            extra_args = [[]] * num_nodes\n-        if binary is None:\n-            binary = [None] * num_nodes\n-        assert_equal(len(extra_args), num_nodes)\n-        assert_equal(len(binary), num_nodes)\n-        nodes = []\n+            extra_args = [None] * self.num_nodes\n+        assert_equal(len(extra_args), self.num_nodes)\n         try:\n-            for i in range(num_nodes):\n-                nodes.append(TestNode(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n-                nodes[i].start()\n-            for node in nodes:\n+            for i, node in enumerate(self.nodes):\n+                node.start(extra_args[i])\n+            for node in self.nodes:\n                 node.wait_for_rpc_connection()\n         except:\n             # If one node failed to start, stop the others\n             self.stop_nodes()\n             raise\n \n         if self.options.coveragedir is not None:\n-            for node in nodes:\n+            for node in self.nodes:\n                 coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n \n-        return nodes\n-\n     def stop_node(self, i):\n         \"\"\"Stop a bitcoind test node\"\"\"\n         self.nodes[i].stop_node()\n@@ -264,10 +265,10 @@ def stop_nodes(self):\n             while not node.is_node_stopped():\n                 time.sleep(0.1)\n \n-    def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_msg=None):\n+    def assert_start_raises_init_error(self, i, extra_args=None, expected_msg=None):\n         with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n             try:\n-                self.start_node(i, dirname, extra_args, stderr=log_stderr)\n+                self.start_node(i, extra_args, stderr=log_stderr)\n                 self.stop_node(i)\n             except Exception as e:\n                 assert 'bitcoind exited' in str(e)  # node must have shutdown\n@@ -385,7 +386,7 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n                 self.nodes.append(TestNode(i, cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n                 self.nodes[i].args = args\n-                self.nodes[i].start()\n+                self.start_node(i)\n \n             # Wait for RPC connections to be ready\n             for node in self.nodes:\n@@ -455,13 +456,13 @@ def add_options(self, parser):\n                           help=\"bitcoind binary to use for reference nodes (if any)\")\n \n     def setup_network(self):\n-        extra_args = [['-whitelist=127.0.0.1']]*self.num_nodes\n+        extra_args = [['-whitelist=127.0.0.1']] * self.num_nodes\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.nodes = self.start_nodes(\n-            self.num_nodes, self.options.tmpdir, extra_args,\n-            binary=[self.options.testbinary] +\n-            [self.options.refbinary] * (self.num_nodes - 1))\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args,\n+                       binary=[self.options.testbinary] +\n+                       [self.options.refbinary] * (self.num_nodes - 1))\n+        self.start_nodes()\n \n class SkipTest(Exception):\n     \"\"\"This exception is raised to skip a test\"\"\""
      },
      {
        "sha": "efb3ac9d16599cd8415293a4f8400ad3f12ecd1c",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -65,9 +65,13 @@ def __getattr__(self, *args, **kwargs):\n         assert self.rpc_connected and self.rpc is not None, \"Error: no RPC connection\"\n         return self.rpc.__getattr__(*args, **kwargs)\n \n-    def start(self):\n+    def start(self, extra_args=None, stderr=None):\n         \"\"\"Start the node.\"\"\"\n-        self.process = subprocess.Popen(self.args + self.extra_args, stderr=self.stderr)\n+        if extra_args is None:\n+            extra_args = self.extra_args\n+        if stderr is None:\n+            stderr = self.stderr\n+        self.process = subprocess.Popen(self.args + extra_args, stderr=stderr)\n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n "
      },
      {
        "sha": "a588e2386ffe8b705181bf2011451facd1138567",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -68,7 +68,8 @@ def setup_network(self, split=False):\n         # longer than the default 30 seconds due to an expensive\n         # CWallet::TopUpKeyPool call, and the encryptwallet RPC made later in\n         # the test often takes even longer.\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n+        self.start_nodes()\n \n     def run_test (self):\n         tmpdir = self.options.tmpdir\n@@ -95,7 +96,7 @@ def run_test (self):\n \n         #encrypt wallet, restart, unlock and dump\n         self.nodes[0].node_encrypt_wallet('test')\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n+        self.start_node(0)\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()"
      },
      {
        "sha": "2f38e6fee846f65ab1cc8e19fd3d425ce035a55c",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -31,7 +31,7 @@ def run_test(self):\n \n         # Encrypt the wallet\n         self.nodes[0].node_encrypt_wallet(passphrase)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0)\n \n         # Test that the wallet is encrypted\n         assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)"
      },
      {
        "sha": "13b9dd9a906f696ffb63ebb9c34e248644ddb9b9",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -25,8 +25,8 @@ def run_test (self):\n \n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n-        self.assert_start_raises_init_error(1, self.options.tmpdir, ['-usehd=0'], 'already existing HD wallet')\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.assert_start_raises_init_error(1, ['-usehd=0'], 'already existing HD wallet')\n+        self.start_node(1)\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         # Make sure we use hd, keep masterkeyid\n@@ -76,7 +76,7 @@ def run_test (self):\n         shutil.rmtree(tmpdir + \"/node1/regtest/blocks\")\n         shutil.rmtree(tmpdir + \"/node1/regtest/chainstate\")\n         shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.start_node(1)\n \n         # Assert that derivation is deterministic\n         hd_add_2 = None\n@@ -91,7 +91,7 @@ def run_test (self):\n \n         # Needs rescan\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1] + ['-rescan'])\n+        self.start_node(1, extra_args=self.extra_args[1] + ['-rescan'])\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n \n         # send a tx and make sure its using the internal chain for the changeoutput"
      },
      {
        "sha": "17896101498c8fccd062a275aa229b8c8500a0ce",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 35,
        "deletions": 26,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -21,11 +21,14 @@ def __init__(self):\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n \n     def setup_network(self):\n-        self.nodes = self.start_nodes(3, self.options.tmpdir, self.extra_args[:3])\n+        self.add_nodes(4, self.options.tmpdir, self.extra_args)\n+        self.start_node(0)\n+        self.start_node(1)\n+        self.start_node(2)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n     def run_test(self):\n \n@@ -42,9 +45,9 @@ def run_test(self):\n         assert_equal(walletinfo['immature_balance'], 50)\n         assert_equal(walletinfo['balance'], 0)\n \n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         self.nodes[1].generate(101)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n         assert_equal(self.nodes[1].getbalance(), 50)\n@@ -96,7 +99,7 @@ def run_test(self):\n \n         # Have node0 mine a block, thus it will collect its own fee.\n         self.nodes[0].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # Exercise locking of unspent outputs\n         unspent_0 = self.nodes[2].listunspent()[0]\n@@ -109,7 +112,7 @@ def run_test(self):\n \n         # Have node1 generate 100 blocks (so node0 can recover the fee)\n         self.nodes[1].generate(100)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # node0 should end up with 100 btc in block rewards plus fees, but\n         # minus the 21 plus fees sent to node2\n@@ -138,7 +141,7 @@ def run_test(self):\n \n         # Have node1 mine a block to confirm transactions:\n         self.nodes[1].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         assert_equal(self.nodes[0].getbalance(), 0)\n         assert_equal(self.nodes[2].getbalance(), 94)\n@@ -150,30 +153,30 @@ def run_test(self):\n         self.nodes[2].settxfee(fee_per_byte * 1000)\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('84'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n         assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [])\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_0_bal += Decimal('10')\n         node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [address])\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n@@ -184,9 +187,9 @@ def run_test(self):\n         # EXPECT: nodes[3] should have those transactions in its mempool.\n         txid1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         txid2 = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n-        sync_mempools(self.nodes)\n+        sync_mempools(self.nodes[0:2])\n \n-        self.nodes.append(self.start_node(3, self.options.tmpdir, self.extra_args[3]))\n+        self.start_node(3)\n         connect_nodes_bi(self.nodes, 0, 3)\n         sync_blocks(self.nodes)\n \n@@ -230,22 +233,24 @@ def run_test(self):\n \n         #do some -walletbroadcast tests\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(3, self.options.tmpdir, [[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"]])\n+        self.start_node(0, [\"-walletbroadcast=0\"])\n+        self.start_node(1, [\"-walletbroadcast=0\"])\n+        self.start_node(2, [\"-walletbroadcast=0\"])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2)\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         self.nodes[1].generate(1) #mine a block, tx should not be in there\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         assert_equal(self.nodes[2].getbalance(), node_2_bal) #should not be changed because tx was not broadcasted\n \n         #now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(txObjNotBroadcasted['hex'])\n         self.nodes[1].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal += 2\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n@@ -255,14 +260,16 @@ def run_test(self):\n \n         #restart the nodes with -walletbroadcast=1\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(3, self.options.tmpdir)\n+        self.start_node(0)\n+        self.start_node(1)\n+        self.start_node(2)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        sync_blocks(self.nodes)\n+        sync_blocks(self.nodes[0:3])\n \n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        sync_blocks(self.nodes[0:3])\n         node_2_bal += 2\n \n         #tx should be added to balance because after restarting the nodes tx should be broadcastet\n@@ -293,7 +300,7 @@ def run_test(self):\n         address_to_import = self.nodes[2].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # 2. Import address from node2 to node1\n         self.nodes[1].importaddress(address_to_import)\n@@ -319,15 +326,15 @@ def run_test(self):\n         cbAddr = self.nodes[1].getnewaddress()\n         blkHash = self.nodes[0].generatetoaddress(1, cbAddr)[0]\n         cbTxId = self.nodes[0].getblock(blkHash)['tx'][0]\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # Check that the txid and balance is found by node1\n         self.nodes[1].gettransaction(cbTxId)\n \n         # check if wallet or blockchain maintenance changes the balance\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         blocks = self.nodes[0].generate(2)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         balance_nodes = [self.nodes[i].getbalance() for i in range(3)]\n         block_count = self.nodes[0].getblockcount()\n \n@@ -358,7 +365,9 @@ def run_test(self):\n             self.log.info(\"check \" + m)\n             self.stop_nodes()\n             # set lower ancestor limit for later\n-            self.nodes = self.start_nodes(3, self.options.tmpdir, [[m, \"-limitancestorcount=\"+str(chainlimit)]] * 3)\n+            self.start_node(0, [m, \"-limitancestorcount=\"+str(chainlimit)])\n+            self.start_node(1, [m, \"-limitancestorcount=\"+str(chainlimit)])\n+            self.start_node(2, [m, \"-limitancestorcount=\"+str(chainlimit)])\n             while m == '-reindex' and [block_count] * 3 != [self.nodes[i].getblockcount() for i in range(3)]:\n                 # reindex will leave rpc warm up \"early\"; Wait for it to finish\n                 time.sleep(0.1)\n@@ -406,7 +415,7 @@ def run_test(self):\n         # Try with walletrejectlongchains\n         # Double chain limit but require combining inputs, so we pass SelectCoinsMinConf\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n+        self.start_node(0, extra_args=[\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n \n         # wait for loadmempool\n         timeout = 10"
      },
      {
        "sha": "688cd6d0c866376c3db657ebdb3068f57a070988",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -78,9 +78,9 @@ def do_one_round(self):\n \n     # As above, this mirrors the original bash test.\n     def start_three(self):\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir)\n-        self.nodes[2] = self.start_node(2, self.options.tmpdir)\n+        self.start_node(0)\n+        self.start_node(1)\n+        self.start_node(2)\n         connect_nodes(self.nodes[0], 3)\n         connect_nodes(self.nodes[1], 3)\n         connect_nodes(self.nodes[2], 3)"
      },
      {
        "sha": "1005a4b95fc06c693b2ae0d3f5596703920b7881",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -48,23 +48,23 @@ def run_test(self):\n \n         # Stop-start node0. Both confirmed and unconfirmed transactions remain in the wallet.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0)\n \n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n         assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n         # Stop node0 and restart with zapwallettxes and persistmempool. The unconfirmed\n         # transaction is zapped from the wallet, but is re-added when the mempool is reloaded.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n+        self.start_node(0, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n \n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n         assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n         # Stop node0 and restart with zapwallettxes, but not persistmempool.\n         # The unconfirmed transaction is zapped and is no longer in the wallet.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-zapwallettxes=2\"])\n+        self.start_node(0, [\"-zapwallettxes=2\"])\n \n         # tx1 is still be available because it was confirmed\n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)"
      },
      {
        "sha": "603b7a1b948401c581d6821fd05177219392cd79",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d3ba18386c7a09086d06c8b640c19343ff34188/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=4d3ba18386c7a09086d06c8b640c19343ff34188",
        "patch": "@@ -41,8 +41,9 @@ def setup_nodes(self):\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n         ip_address = \"tcp://127.0.0.1:28332\"\n         self.zmqSubSocket.connect(ip_address)\n-        extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n+        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.start_nodes()\n \n     def run_test(self):\n         try:"
      }
    ]
  },
  {
    "sha": "bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjVlN2NiMzA4YjU4YTFjMTZkYjEyNzVkZmNhMWEzMWUyYmJhNzFm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-24T15:37:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:43:29Z"
      },
      "message": "[tests] Avoid passing around member variables in test_framework\n\nGithub-Pull: #11121\nRebased-From: 6cf094a0229d051ab8a15189c8a0bc6011919e72",
      "tree": {
        "sha": "c2cb3f348525b7ee868231c45baf10bab9d80f9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2cb3f348525b7ee868231c45baf10bab9d80f9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d3ba18386c7a09086d06c8b640c19343ff34188",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d3ba18386c7a09086d06c8b640c19343ff34188",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d3ba18386c7a09086d06c8b640c19343ff34188"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 37,
      "deletions": 37
    },
    "files": [
      {
        "sha": "ec485281d4d937627b71bd2d8592fb605a0692d0",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -60,7 +60,7 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self):\n-        self.add_nodes(3, self.options.tmpdir)\n+        self.add_nodes(3)\n         # Start node0. We don't start the other nodes yet since\n         # we need to pre-mine a block with an invalid transaction\n         # signature so we can pass in the block hash as assumevalid."
      },
      {
        "sha": "b0c6d39c494d5073f18c960d454a872327c47ecd",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -65,7 +65,7 @@ def __init__(self):\n \n     def setup_network(self):\n         # Need a bit of extra time for the nodes to start up for this test\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=90)\n+        self.add_nodes(self.num_nodes, timewait=90)\n         self.start_nodes()\n         # Leave them unconnected, we'll use submitblock directly in this test\n "
      },
      {
        "sha": "e85086fbc16c8eb79aff4303ba17a384cea5f2ff",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -121,7 +121,7 @@ def setup_network(self):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n-        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)"
      },
      {
        "sha": "adbbda278daca644f6086361e2da8551cca66749",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -89,7 +89,7 @@ def setup_nodes(self):\n             ]\n         if self.have_ipv6:\n             args[3] = ['-listen', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n+        self.add_nodes(self.num_nodes, extra_args=args)\n         self.start_nodes()\n \n     def node_test(self, node, proxies, auth, test_onion=True):"
      },
      {
        "sha": "9690428769f87db1fb8d8cb18528778b9ab94d85",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -57,7 +57,7 @@ def setup_network(self):\n         sync_blocks(self.nodes[0:5])\n \n     def setup_nodes(self):\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=900)\n+        self.add_nodes(self.num_nodes, self.extra_args, timewait=900)\n         self.start_nodes()\n \n     def create_big_chain(self):"
      },
      {
        "sha": "a7661421ff9abe8bcfe219d0ab908faadc8da294",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -20,7 +20,7 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, None)\n+        self.add_nodes(self.num_nodes, None)\n \n     def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n         '''"
      },
      {
        "sha": "caf35926522c93cd36e70471515e739da4d6ea1d",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -153,9 +153,9 @@ def setup_network(self):\n         But first we need to use one node to create a lot of outputs\n         which we will use to generate our transactions.\n         \"\"\"\n-        self.add_nodes(3, self.options.tmpdir, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n-                                                           [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n-                                                           [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n+        self.add_nodes(3, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n+                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n+                                      [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n         # Use node0 to mine blocks for input splitting\n         # Node1 mines small blocks but that are bigger than the expected transaction rate.\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,"
      },
      {
        "sha": "5e3644a9142b68bde9b72c4a53d8233fec86ac35",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 25,
        "deletions": 25,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -73,9 +73,9 @@ def add_options(self, parser):\n     def setup_chain(self):\n         self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n         if self.setup_clean_chain:\n-            self._initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n+            self._initialize_chain_clean()\n         else:\n-            self._initialize_chain(self.options.tmpdir, self.num_nodes, self.options.cachedir)\n+            self._initialize_chain()\n \n     def setup_network(self):\n         self.setup_nodes()\n@@ -91,7 +91,7 @@ def setup_nodes(self):\n         extra_args = None\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n \n     def run_test(self):\n@@ -205,7 +205,7 @@ def main(self):\n \n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n-    def add_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n+    def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, binary=None):\n         \"\"\"Instantiate TestNode objects\"\"\"\n \n         if extra_args is None:\n@@ -215,7 +215,7 @@ def add_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(binary), num_nodes)\n         for i in range(num_nodes):\n-            self.nodes.append(TestNode(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n+            self.nodes.append(TestNode(i, self.options.tmpdir, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n \n     def start_node(self, i, extra_args=None, stderr=None):\n         \"\"\"Start a bitcoind\"\"\"\n@@ -357,16 +357,16 @@ def _start_logging(self):\n             rpc_handler.setLevel(logging.DEBUG)\n             rpc_logger.addHandler(rpc_handler)\n \n-    def _initialize_chain(self, test_dir, num_nodes, cachedir):\n+    def _initialize_chain(self):\n         \"\"\"Initialize a pre-mined blockchain for use by the test.\n \n         Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n         Afterward, create num_nodes copies from the cache.\"\"\"\n \n-        assert num_nodes <= MAX_NODES\n+        assert self.num_nodes <= MAX_NODES\n         create_cache = False\n         for i in range(MAX_NODES):\n-            if not os.path.isdir(os.path.join(cachedir, 'node' + str(i))):\n+            if not os.path.isdir(os.path.join(self.options.cachedir, 'node' + str(i))):\n                 create_cache = True\n                 break\n \n@@ -375,16 +375,16 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n \n             # find and delete old cache directories if any exist\n             for i in range(MAX_NODES):\n-                if os.path.isdir(os.path.join(cachedir, \"node\" + str(i))):\n-                    shutil.rmtree(os.path.join(cachedir, \"node\" + str(i)))\n+                if os.path.isdir(os.path.join(self.options.cachedir, \"node\" + str(i))):\n+                    shutil.rmtree(os.path.join(self.options.cachedir, \"node\" + str(i)))\n \n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n-                datadir = initialize_datadir(cachedir, i)\n+                datadir = initialize_datadir(self.options.cachedir, i)\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.nodes.append(TestNode(i, cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n+                self.nodes.append(TestNode(i, self.options.cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n                 self.nodes[i].args = args\n                 self.start_node(i)\n \n@@ -415,24 +415,24 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n             self.nodes = []\n             self.disable_mocktime()\n             for i in range(MAX_NODES):\n-                os.remove(log_filename(cachedir, i, \"debug.log\"))\n-                os.remove(log_filename(cachedir, i, \"db.log\"))\n-                os.remove(log_filename(cachedir, i, \"peers.dat\"))\n-                os.remove(log_filename(cachedir, i, \"fee_estimates.dat\"))\n-\n-        for i in range(num_nodes):\n-            from_dir = os.path.join(cachedir, \"node\" + str(i))\n-            to_dir = os.path.join(test_dir, \"node\" + str(i))\n+                os.remove(log_filename(self.options.cachedir, i, \"debug.log\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"db.log\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"peers.dat\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"fee_estimates.dat\"))\n+\n+        for i in range(self.num_nodes):\n+            from_dir = os.path.join(self.options.cachedir, \"node\" + str(i))\n+            to_dir = os.path.join(self.options.tmpdir, \"node\" + str(i))\n             shutil.copytree(from_dir, to_dir)\n-            initialize_datadir(test_dir, i)  # Overwrite port/rpcport in bitcoin.conf\n+            initialize_datadir(self.options.tmpdir, i)  # Overwrite port/rpcport in bitcoin.conf\n \n-    def _initialize_chain_clean(self, test_dir, num_nodes):\n+    def _initialize_chain_clean(self):\n         \"\"\"Initialize empty blockchain for use by the test.\n \n         Create an empty blockchain and num_nodes wallets.\n         Useful if a test case wants complete control over initialization.\"\"\"\n-        for i in range(num_nodes):\n-            initialize_datadir(test_dir, i)\n+        for i in range(self.num_nodes):\n+            initialize_datadir(self.options.tmpdir, i)\n \n class ComparisonTestFramework(BitcoinTestFramework):\n     \"\"\"Test framework for doing p2p comparison testing\n@@ -459,7 +459,7 @@ def setup_network(self):\n         extra_args = [['-whitelist=127.0.0.1']] * self.num_nodes\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, extra_args,\n+        self.add_nodes(self.num_nodes, extra_args,\n                        binary=[self.options.testbinary] +\n                        [self.options.refbinary] * (self.num_nodes - 1))\n         self.start_nodes()"
      },
      {
        "sha": "e0381b9809f9cd899935104cadeb1f5a529f4313",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -68,7 +68,7 @@ def setup_network(self, split=False):\n         # longer than the default 30 seconds due to an expensive\n         # CWallet::TopUpKeyPool call, and the encryptwallet RPC made later in\n         # the test often takes even longer.\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n+        self.add_nodes(self.num_nodes, self.extra_args, timewait=60)\n         self.start_nodes()\n \n     def run_test (self):"
      },
      {
        "sha": "7190de94b6706f1d4c0b925cb97d28988c7fce19",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -21,7 +21,7 @@ def __init__(self):\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n \n     def setup_network(self):\n-        self.add_nodes(4, self.options.tmpdir, self.extra_args)\n+        self.add_nodes(4, self.extra_args)\n         self.start_node(0)\n         self.start_node(1)\n         self.start_node(2)"
      },
      {
        "sha": "b5a22ea07fc8f6b5d7050d03413bb9ce061382e5",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "patch": "@@ -42,7 +42,7 @@ def setup_nodes(self):\n         ip_address = \"tcp://127.0.0.1:28332\"\n         self.zmqSubSocket.connect(ip_address)\n         self.extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n-        self.add_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n \n     def run_test(self):"
      }
    ]
  },
  {
    "sha": "801d2ae9247be5870344c8b4ed5c372ab8930408",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDFkMmFlOTI0N2JlNTg3MDM0NGM4YjRlZDVjMzcyYWI4OTMwNDA4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-06-09T22:21:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:43:43Z"
      },
      "message": "[tests] don't override __init__() in individual tests\n\nAlmost all test scripts currently need to override the __init__()\nmethod. When they do that they need to call into super().__init__() as\nthe base class does some generic initialization.\n\nThis commit makes the base class __init__() call into set_test_params()\nmethod. Individual test cases can override set_test_params() to setup\ntheir test parameters.\n\nGithub-Pull: #11121\nRebased-From: 5448a1471d6fc638a2220ea5a2f3782172efe14c",
      "tree": {
        "sha": "2326b26745fcdb556b9a937b5e8fe116fd21a9ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2326b26745fcdb556b9a937b5e8fe116fd21a9ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/801d2ae9247be5870344c8b4ed5c372ab8930408",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/801d2ae9247be5870344c8b4ed5c372ab8930408",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/801d2ae9247be5870344c8b4ed5c372ab8930408",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/801d2ae9247be5870344c8b4ed5c372ab8930408/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb5e7cb308b58a1c16db1275dfca1a31e2bba71f"
      }
    ],
    "stats": {
      "total": 467,
      "additions": 145,
      "deletions": 322
    },
    "files": [
      {
        "sha": "2558bd017d6a210f4040e88ddf529220129e4b84",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -24,8 +24,8 @@ don't have test cases for.\n - Use a module-level docstring to describe what the test is testing, and how it\n   is testing it.\n - When subclassing the BitcoinTestFramwork, place overrides for the\n-  `__init__()`, and `setup_xxxx()` methods at the top of the subclass, then\n-  locally-defined helper methods, then the `run_test()` method.\n+  `set_test_params()`, `add_options()` and `setup_xxxx()` methods at the top of\n+  the subclass, then locally-defined helper methods, then the `run_test()` method.\n \n #### General test-writing advice\n \n@@ -36,7 +36,7 @@ don't have test cases for.\n - Avoid stop-starting the nodes multiple times during the test if possible. A\n   stop-start takes several seconds, so doing it several times blows up the\n   runtime of the test.\n-- Set the `self.setup_clean_chain` variable in `__init__()` to control whether\n+- Set the `self.setup_clean_chain` variable in `set_test_params()` to control whether\n   or not to use the cached data directories. The cached data directories\n   contain a 200-block pre-mined blockchain and wallets for four nodes. Each node\n   has 25 mature blocks (25x50=1250 BTC) in its wallet."
      },
      {
        "sha": "e8dbc864698aa3ead772fe78da08d5ef74bcc595",
        "filename": "test/functional/abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/abandonconflict.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -14,10 +14,8 @@\n from test_framework.util import *\n \n class AbandonConflictTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n     def run_test(self):"
      },
      {
        "sha": "beaf8c70558613e040dd9c089f422d255e38327b",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -54,8 +54,7 @@ def send_header_for_blocks(self, new_blocks):\n         self.send_message(headers_message)\n \n class AssumeValidTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "2cd6df6e37a823a03aa4f42c9f2105f7608e4392",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -60,9 +60,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     return tx\n \n class BIP65Test(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-promiscuousmempoolflags=1', '-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True"
      },
      {
        "sha": "7e6a4f44086696eb2f9f4811bd4ee8832abf64a2",
        "filename": "test/functional/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-112-113-p2p.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -92,9 +92,9 @@ def all_rlt_txs(txarray):\n     return txs\n \n class BIP68_112_113Test(ComparisonTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4']]\n \n     def run_test(self):"
      },
      {
        "sha": "39012adf9533d25bb6d1e01afc7e94c6bc38cb21",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -17,10 +17,8 @@\n NOT_FINAL_ERROR = \"64: non-BIP68-final\"\n \n class BIP68Test(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[], [\"-acceptnonstdtxn=0\"]]\n \n     def run_test(self):"
      },
      {
        "sha": "904789301a1088d0e996c7fc0201f8a04e01a238",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -28,11 +28,10 @@\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n \n class BIP9SoftForksTest(ComparisonTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-whitelist=127.0.0.1']]\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n         self.test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "c620d3e155d14b80aa14feee4f0fd6e39feb6efa",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -48,9 +48,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     return tx\n \n class BIP66Test(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-promiscuousmempoolflags=1', '-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True"
      },
      {
        "sha": "5d04de9940c4b990453415ded48c529941119a3e",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -30,12 +30,8 @@\n     assert_is_hash_string,\n )\n \n-\n class BlockchainTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-stopatheight=207']]\n "
      },
      {
        "sha": "ede0df29d8d7befa3c9bc15f3abcaec32234f629",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -30,8 +30,7 @@\n \n \n class BumpFeeTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n         self.extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]"
      },
      {
        "sha": "7d4d1a529b762b95075cfc2f24c64c53908a6c24",
        "filename": "test/functional/create_cache.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/create_cache.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -12,11 +12,9 @@\n from test_framework.test_framework import BitcoinTestFramework\n \n class CreateCache(BitcoinTestFramework):\n+    # Test network and test nodes are not required:\n \n-    def __init__(self):\n-        super().__init__()\n-\n-        # Test network and test nodes are not required:\n+    def set_test_params(self):\n         self.num_nodes = 0\n \n     def setup_network(self):"
      },
      {
        "sha": "71424f641b55d609c8e75e6e9e4e7b2d47da9e4d",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -43,8 +43,7 @@\n     pass\n \n class ChainstateWriteCrashTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n "
      },
      {
        "sha": "6611da8831472cf45310115009a63c07e42e4199",
        "filename": "test/functional/decodescript.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/decodescript.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -10,9 +10,7 @@\n from io import BytesIO\n \n class DecodeScriptTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "c1d37963bc60527603fe2fffeaa704a40c9a3f4c",
        "filename": "test/functional/disablewallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disablewallet.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -11,11 +11,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n class DisableWalletTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-disablewallet\"]]"
      },
      {
        "sha": "a6445b9b35e42554c62c76471275e399d040baed",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -14,11 +14,8 @@\n )\n \n class DisconnectBanTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n \n     def run_test(self):\n         self.log.info(\"Test setban and listbanned RPCs\")"
      },
      {
        "sha": "de8934f74b7612c41e8d2f6d02a5f01f11311669",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -73,15 +73,11 @@ def custom_function():\n class ExampleTest(BitcoinTestFramework):\n     # Each functional test is a subclass of the BitcoinTestFramework class.\n \n-    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # Override the set_test_params(), add_options(), setup_chain(), setup_network()\n     # and setup_nodes() methods to customize the test setup as required.\n \n-    def __init__(self):\n-        \"\"\"Initialize the test\n-\n-        Call super().__init__() first, and then override any test parameters\n-        for your individual test.\"\"\"\n-        super().__init__()\n+    def set_test_params(self):\n+        \"\"\"Override any test parameters for your individual test.\"\"\"\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # Use self.extra_args to change command-line arguments for the nodes"
      },
      {
        "sha": "afcad1f9cc3fa055cfafc2505b10d28cdacb932f",
        "filename": "test/functional/forknotify.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -9,11 +9,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n \n class ForkNotifyTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n \n     def setup_network(self):\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")"
      },
      {
        "sha": "dec3d41bfc5f24bfb767a9e024330eb417decfc7",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -14,13 +14,9 @@ def get_unspent(listunspent, amount):\n             return utx\n     raise AssertionError('Could not find unspent with amount={}'.format(amount))\n \n-\n class RawTransactionsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n \n     def setup_network(self, split=False):\n         self.setup_nodes()"
      },
      {
        "sha": "85d2560244e579891d217fedfc077951c8b3a710",
        "filename": "test/functional/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_longpoll.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -23,11 +23,6 @@ def run(self):\n         self.node.getblocktemplate({'longpollid':self.longpollid})\n \n class GetBlockTemplateLPTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)"
      },
      {
        "sha": "00fc23c6b0d3f54e761ef92b690fbc896330f0cd",
        "filename": "test/functional/getchaintips.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getchaintips.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -14,13 +14,7 @@\n from test_framework.util import assert_equal\n \n class GetChainTipsTest (BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def run_test (self):\n-\n         tips = self.nodes[0].getchaintips ()\n         assert_equal (len (tips), 1)\n         assert_equal (tips[0]['branchlen'], 0)"
      },
      {
        "sha": "c7682cb49df422df050939a9cb729ecf528f5811",
        "filename": "test/functional/httpbasics.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/httpbasics.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -11,10 +11,8 @@\n import urllib.parse\n \n class HTTPBasicsTest (BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 3\n-        self.setup_clean_chain = False\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "02d7428120bea956e44c148822d35cba64fa4b14",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -111,8 +111,7 @@ def check(self, txid=None, amount=None, confirmations=None):\n \n \n class ImportRescanTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n \n     def setup_network(self):"
      },
      {
        "sha": "4c519f40d54e3219af54a7c4e18b1e71164ed654",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -7,8 +7,7 @@\n from test_framework.util import *\n \n class ImportMultiTest (BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n "
      },
      {
        "sha": "df90e9ec177ba30ac682a759771b9430acea7979",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -6,11 +6,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n class ImportPrunedFundsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "dd3daf1e07bda1c55e8839215e7ad519309b322c",
        "filename": "test/functional/invalidateblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidateblock.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -8,9 +8,7 @@\n from test_framework.util import *\n \n class InvalidateTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "9f44b44927c0cb3d6331bc9340bfa5490d3e24eb",
        "filename": "test/functional/invalidblockrequest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidblockrequest.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -23,9 +23,9 @@ class InvalidBlockRequestTest(ComparisonTestFramework):\n \n     ''' Can either run this test as 1 node with expected answers, or two and compare them. \n         Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "a22bd8f8cdc3db99c95a8b118f1504e898f30bd1",
        "filename": "test/functional/invalidtxrequest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidtxrequest.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -19,9 +19,9 @@ class InvalidTxRequestTest(ComparisonTestFramework):\n \n     ''' Can either run this test as 1 node with expected answers, or two and compare them. \n         Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "8302e3ef606544c01849e1f64c2c66c6ccc1d3e3",
        "filename": "test/functional/keypool-topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/keypool-topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/keypool-topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-topup.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -20,8 +20,7 @@\n )\n \n class KeypoolRestoreTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolmin=20']]"
      },
      {
        "sha": "b823ca63bb80c35c3a6630a9b47533c67ecc7022",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -8,6 +8,8 @@\n from test_framework.util import *\n \n class KeyPoolTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n \n     def run_test(self):\n         nodes = self.nodes\n@@ -78,10 +80,5 @@ def run_test(self):\n         assert_equal(wi['keypoolsize_hd_internal'], 100)\n         assert_equal(wi['keypoolsize'], 100)\n \n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n-        self.num_nodes = 1\n-\n if __name__ == '__main__':\n     KeyPoolTest().main()"
      },
      {
        "sha": "ed1315e805b1640432af450c5fe7b976f9f8d712",
        "filename": "test/functional/listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listsinceblock.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -8,11 +8,8 @@\n from test_framework.util import assert_equal\n \n class ListSinceBlockTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n \n     def run_test(self):\n         self.nodes[2].generate(101)"
      },
      {
        "sha": "5ee85a0dac665384f80b1827bc737be8feeeb222",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -16,10 +16,7 @@ def txFromHex(hexstring):\n     return tx\n \n class ListTransactionsTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.enable_mocktime()\n \n     def run_test(self):"
      },
      {
        "sha": "1f402798e7e01e05a60e5565d77867ea3101efec",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -31,8 +31,7 @@ def on_block(self, conn, message):\n \n class MaxUploadTest(BitcoinTestFramework):\n  \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxuploadtarget=800\", \"-blockmaxsize=999000\"]]"
      },
      {
        "sha": "e24dc5a464b366004a01470a4e6c73533131388f",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -8,9 +8,7 @@\n from test_framework.util import *\n \n class MempoolLimitTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxmempool=5\", \"-spendzeroconfchange=0\"]]"
      },
      {
        "sha": "2dedadf8ce4a2b6f5b81289ff9dedbccff032335",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -12,10 +12,8 @@\n MAX_DESCENDANTS = 25\n \n class MempoolPackagesTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n \n     # Build a transaction that spends parent_txid:vout"
      },
      {
        "sha": "01f65b137363dffd6fd98e7c177d8460aa079f6e",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -36,12 +36,8 @@\n from test_framework.util import *\n \n class MempoolPersistTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        # We need 3 nodes for this test. Node1 does not have a persistent mempool.\n+    def set_test_params(self):\n         self.num_nodes = 3\n-        self.setup_clean_chain = False\n         self.extra_args = [[], [\"-persistmempool=0\"], []]\n \n     def run_test(self):"
      },
      {
        "sha": "7dfddd3230df1e32a7e5b1f35b4db985197e888b",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -13,10 +13,8 @@\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-checkmempool\"]] * 2\n \n     alert_filename = None  # Set by setup_network"
      },
      {
        "sha": "1263c9306b6377d542db0302600a4a0ddc57e507",
        "filename": "test/functional/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect_test.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -9,12 +9,8 @@\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n-        self.setup_clean_chain = False\n-        # Just need one node for this test\n         self.extra_args = [[\"-checkmempool\"]]\n \n     def run_test(self):"
      },
      {
        "sha": "58ccd3e3734f6d9f42d67bbd029bdaeeeb19eca8",
        "filename": "test/functional/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spendcoinbase.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -17,11 +17,8 @@\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolSpendCoinbaseTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-checkmempool\"]]\n \n     def run_test(self):"
      },
      {
        "sha": "2125c6e17bc27f9e7bfe38520e6f24190745dcbd",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -8,11 +8,8 @@\n from test_framework.util import *\n \n class MerkleBlockTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]\n "
      },
      {
        "sha": "93f98388960f5d83d5bee6446004f2025ced0d26",
        "filename": "test/functional/mining.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -27,9 +27,7 @@ def assert_template(node, block, expect, rehash=True):\n     assert_equal(rsp, expect)\n \n class MiningTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n "
      },
      {
        "sha": "a2b346f27429acc9712591b6c167164345af00a7",
        "filename": "test/functional/multi_rpc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multi_rpc.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -12,10 +12,7 @@\n import urllib.parse\n \n class HTTPBasicsTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 2\n \n     def setup_chain(self):"
      },
      {
        "sha": "e5453e9aaddcf4608342286be5e5688def47b11b",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -12,9 +12,7 @@\n from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n class MultiWalletTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3']]"
      },
      {
        "sha": "37ea6824d570e82ddc5656a681a230b08f91f669",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -17,10 +17,8 @@\n     p2p_port,\n )\n \n-\n class NetTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "60d0d876df70f452e443ba3ecf235e0fd256345d",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -37,8 +37,7 @@ def trueDummy(tx):\n \n class NULLDUMMYTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-walletprematurewitness']]"
      },
      {
        "sha": "293bc055393ea1539eb9ea6508128d5fc833f0a3",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -60,8 +60,7 @@ def add_options(self, parser):\n                           default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n                           help=\"bitcoind binary to test\")\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-whitelist=127.0.0.1\"]]"
      },
      {
        "sha": "9c91c0045307fbeeba242d3134348f4357613515",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -89,8 +89,7 @@ def send_await_disconnect(self, message, timeout=30):\n         wait_until(lambda: not self.connected, timeout=timeout, lock=mininode_lock)\n \n class CompactBlocksTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         # Node0 = pre-segwit, node1 = segwit-aware\n         self.num_nodes = 2"
      },
      {
        "sha": "8c92365ceda611f19c4e6286f3389f21542d50de",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -37,11 +37,8 @@ def clear_invs(self):\n             self.txinvs = []\n \n class FeeFilterTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n \n     def run_test(self):\n         node1 = self.nodes[1]"
      },
      {
        "sha": "cb7bbaf7e563b183c07e3ec2b2bf09840c139576",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -49,12 +49,11 @@ def normal_serialize(self):\n         return r\n \n class FullBlockTest(ComparisonTestFramework):\n-\n     # Can either run this test as 1 node with expected answers, or two and compare them.\n     # Change the \"outcome\" variable from each TestInstance object to only do the comparison.\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n         self.block_heights = {}\n         self.coinbase_key = CECKey()\n         self.coinbase_key.set_secretbytes(b\"horsebattery\")"
      },
      {
        "sha": "f27086c97eb2d883dfb5c968d6333373c847381a",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -92,8 +92,7 @@ def on_version(self, conn, message):\n         conn.send_message(msg_getaddr())\n \n class P2PLeakTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-banscore='+str(banscore)]]\n "
      },
      {
        "sha": "40fcde2605716979490a62681df46ab5d3f28ed9",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -13,9 +13,7 @@\n from test_framework.util import *\n \n class P2PMempoolTests(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-peerbloomfilters=0\"]]"
      },
      {
        "sha": "8c2d2f0272c32545c71bce57bd2bcab7d6071231",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -33,8 +33,7 @@ def get_virtual_size(witness_block):\n     return vsize\n \n class TestNode(NodeConnCB):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.getdataset = set()\n \n     def on_getdata(self, conn, message):\n@@ -109,9 +108,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n \n \n class SegWitTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         self.extra_args = [[\"-whitelist=127.0.0.1\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]"
      },
      {
        "sha": "51d4769efc3fb023135199ffbeee77bbb364c30a",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -33,8 +33,7 @@ def on_version(self, conn, message):\n         pass\n \n class TimeoutsTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "5dfac6dd10e016c95460d125c8df33b3872da79a",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -28,8 +28,7 @@ def on_inv(self, conn, message):\n         pass\n \n class VersionBitsWarningTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "40d7bb14edcecd1162131bb7b4a2757ca02be50a",
        "filename": "test/functional/preciousblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/preciousblock.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -35,8 +35,7 @@ def node_sync_via_rpc(nodes):\n             unidirectional_node_sync_via_rpc(node_src, node_dest)\n \n class PreciousTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "7ad368acd4b8df665283e91004639c9db4e39124",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -9,9 +9,7 @@\n from test_framework.mininode import COIN, MAX_BLOCK_BASE_SIZE\n \n class PrioritiseTransactionTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[\"-printpriority=1\"], [\"-printpriority=1\"]]"
      },
      {
        "sha": "26cb645da431eed4f0103669f1f732e8f3db2489",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -41,13 +41,7 @@\n \n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n \n-\n class ProxyTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def setup_nodes(self):\n         self.have_ipv6 = test_ipv6_local()\n         # Create two proxies on different ports"
      },
      {
        "sha": "a4afbd46d73f7144d0ad20dd4fa4e1954d0d90e2",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -26,9 +26,7 @@ def calc_usage(blockdir):\n     return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f)) / (1024. * 1024.)\n \n class PruneTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 6\n "
      },
      {
        "sha": "51dda09ac4156877253ca379a9c92a88558c9286",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -17,9 +17,7 @@\n \n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "48eb1c51b51c638bf28f355040f40cb00904c32a",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -23,11 +23,7 @@ def get_sub_array_from_array(object_array, to_match):\n     return []\n \n class ReceivedByTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.enable_mocktime()\n \n     def run_test(self):"
      },
      {
        "sha": "1f684a1afe3bf01dc15308e9e3ee9eaf5160988f",
        "filename": "test/functional/reindex.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/reindex.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -15,8 +15,7 @@\n \n class ReindexTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "220e889686630aa68f17dce6f5eec63d312aa621",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -61,10 +61,8 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n class ReplaceByFeeTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n-        self.setup_clean_chain = False\n         self.extra_args= [[\"-maxorphantx=1000\",\n                            \"-whitelist=127.0.0.1\",\n                            \"-limitancestorcount=50\","
      },
      {
        "sha": "d6ba5913912d371c6765c47696927e0c7004d6ef",
        "filename": "test/functional/resendwallettransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/resendwallettransactions.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -8,11 +8,9 @@\n from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n class ResendWalletTransactionsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.extra_args = [['--walletbroadcast=false']]\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.extra_args = [['--walletbroadcast=false']]\n \n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled."
      },
      {
        "sha": "437111a4d7fd576aa7b9f6d9104371952334a88c",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -43,8 +43,7 @@ def http_post_call(host, port, path, requestdata = '', response_object = 0):\n class RESTTest (BitcoinTestFramework):\n     FORMAT_SEPARATOR = \".\"\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "0cf64beebd408a90b058d531e09a01954dcb4ca1",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -11,11 +11,8 @@\n from test_framework.util import *\n from test_framework.netutil import *\n \n-\n class RPCBindTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "da61cc66e6854c8f989c3bd14bf349e43874d0fd",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -10,15 +10,8 @@\n     assert_raises_jsonrpc,\n )\n \n-\n class NamedArgumentTest(BitcoinTestFramework):\n-    \"\"\"\n-    Test named arguments on RPC calls.\n-    \"\"\"\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 1\n \n     def run_test(self):"
      },
      {
        "sha": "c08fbd3e7751b6c688157cdfc82fa9d8dcda1fc9",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -75,9 +75,7 @@ def find_unspent(node, min_value):\n             return utxo\n \n class SegWitTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\"],"
      },
      {
        "sha": "fe577dc20a2dbd662f22c95acc188334dbfda5fc",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -174,8 +174,7 @@ def send_getblocks(self, locator):\n         self.send_message(getblocks_message)\n \n class SendHeadersTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "5fdfeceb76a0941ff2feb4da232190e775a92f90",
        "filename": "test/functional/signmessages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signmessages.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -7,9 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n \n class SignMessagesTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "b47ef939558a272da9d147e9c99c8541501ff5fb",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -9,8 +9,7 @@\n \n \n class SignRawTransactionsTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "76632fc57848ac31ff914ec98aa06eb7e7f0476f",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -141,11 +141,8 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n \n \n class EstimateFeeTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 3\n-        self.setup_clean_chain = False\n \n     def setup_network(self):\n         \"\"\""
      },
      {
        "sha": "d860bc5594c649cd23abd180e3c017c12b855595",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 50,
        "deletions": 39,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -48,58 +48,30 @@ class TestStatus(Enum):\n class BitcoinTestFramework(object):\n     \"\"\"Base class for a bitcoin test script.\n \n-    Individual bitcoin test scripts should subclass this class and override the following methods:\n+    Individual bitcoin test scripts should subclass this class and override the run_test() method.\n \n-    - __init__()\n+    Individual tests can also override the following methods to customize the test setup:\n+\n+    - set_test_params()\n     - add_options()\n     - setup_chain()\n     - setup_network()\n-    - run_test()\n+    - setup_nodes()\n \n-    The main() method should not be overridden.\n+    The __init__() and main() methods should not be overridden.\n \n     This class also contains various public and private helper methods.\"\"\"\n \n-    # Methods to override in subclass test scripts.\n     def __init__(self):\n+        \"\"\"Sets test framework defaults. Do not override this method. Instead, override the set_test_params() method\"\"\"\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = []\n         self.mocktime = 0\n-\n-    def add_options(self, parser):\n-        pass\n-\n-    def setup_chain(self):\n-        self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n-        if self.setup_clean_chain:\n-            self._initialize_chain_clean()\n-        else:\n-            self._initialize_chain()\n-\n-    def setup_network(self):\n-        self.setup_nodes()\n-\n-        # Connect the nodes as a \"chain\".  This allows us\n-        # to split the network between nodes 1 and 2 to get\n-        # two halves that can work on competing chains.\n-        for i in range(self.num_nodes - 1):\n-            connect_nodes_bi(self.nodes, i, i + 1)\n-        self.sync_all()\n-\n-    def setup_nodes(self):\n-        extra_args = None\n-        if hasattr(self, \"extra_args\"):\n-            extra_args = self.extra_args\n-        self.add_nodes(self.num_nodes, extra_args)\n-        self.start_nodes()\n-\n-    def run_test(self):\n-        raise NotImplementedError\n-\n-    # Main function. This should not be overridden by the subclass test scripts.\n+        self.set_test_params()\n \n     def main(self):\n+        \"\"\"Main function. This should not be overridden by the subclass test scripts.\"\"\"\n \n         parser = optparse.OptionParser(usage=\"%prog [options]\")\n         parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n@@ -203,6 +175,46 @@ def main(self):\n             logging.shutdown()\n             sys.exit(TEST_EXIT_FAILED)\n \n+    # Methods to override in subclass test scripts.\n+    def set_test_params(self):\n+        \"\"\"Override this method to change default values for number of nodes, topology, etc\"\"\"\n+        pass\n+\n+    def add_options(self, parser):\n+        \"\"\"Override this method to add command-line options to the test\"\"\"\n+        pass\n+\n+    def setup_chain(self):\n+        \"\"\"Override this method to customize blockchain setup\"\"\"\n+        self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n+        if self.setup_clean_chain:\n+            self._initialize_chain_clean()\n+        else:\n+            self._initialize_chain()\n+\n+    def setup_network(self):\n+        \"\"\"Override this method to customize test network topology\"\"\"\n+        self.setup_nodes()\n+\n+        # Connect the nodes as a \"chain\".  This allows us\n+        # to split the network between nodes 1 and 2 to get\n+        # two halves that can work on competing chains.\n+        for i in range(self.num_nodes - 1):\n+            connect_nodes_bi(self.nodes, i, i + 1)\n+        self.sync_all()\n+\n+    def setup_nodes(self):\n+        \"\"\"Override this method to customize test node setup\"\"\"\n+        extra_args = None\n+        if hasattr(self, \"extra_args\"):\n+            extra_args = self.extra_args\n+        self.add_nodes(self.num_nodes, extra_args)\n+        self.start_nodes()\n+\n+    def run_test(self):\n+        \"\"\"Override this method to define test logic\"\"\"\n+        raise NotImplementedError\n+\n     # Public helper methods. These can be accessed by the subclass test scripts.\n \n     def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, binary=None):\n@@ -442,8 +454,7 @@ class ComparisonTestFramework(BitcoinTestFramework):\n     - 2 binaries: 1 test binary, 1 ref binary\n     - n>2 binaries: 1 test binary, n-1 ref binaries\"\"\"\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n "
      },
      {
        "sha": "fc133050b0d7700ac69e3f010fc5076670097e0d",
        "filename": "test/functional/txn_clone.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_clone.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -8,12 +8,6 @@\n from test_framework.util import *\n \n class TxnMallTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                           help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "ff24fac254ead6b9f4a361bd2e376a41650668c4",
        "filename": "test/functional/txn_doublespend.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_doublespend.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -9,11 +9,6 @@\n \n class TxnMallTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                           help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "78236b239374a794703e9635666828586b0a7045",
        "filename": "test/functional/uptime.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/uptime.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/uptime.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/uptime.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -13,9 +13,7 @@\n \n \n class UptimeTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n "
      },
      {
        "sha": "40726d2a760909af1c8fb221e18aa5b9cff49073",
        "filename": "test/functional/wallet-accounts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-accounts.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -17,9 +17,7 @@\n from test_framework.util import assert_equal\n \n class WalletAccountsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[]]"
      },
      {
        "sha": "39b7164d6e6e3e80335de02a0f81b6439d48ea9a",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -56,10 +56,7 @@ def read_dump(file_name, addrs, hd_master_addr_old):\n \n \n class WalletDumpTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-keypool=90\"]]\n "
      },
      {
        "sha": "f63bb2ea5e1c984be6a48d4a5b87642c2f8909e3",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -13,9 +13,7 @@\n )\n \n class WalletEncryptionTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "68b5e5b8d48a9b23a8b0efba8cbc7b8794454676",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -11,11 +11,8 @@\n )\n import shutil\n \n-\n class WalletHDTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=0']]"
      },
      {
        "sha": "79727f9be62da2a6482b4c81c7de468e71ee452f",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 7,
        "deletions": 11,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -7,17 +7,8 @@\n from test_framework.util import *\n \n class WalletTest(BitcoinTestFramework):\n-\n-    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n-        \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n-        fee = balance_with_fee - curr_balance\n-        assert_fee_amount(fee, tx_size, fee_per_byte * 1000)\n-        return curr_balance\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n \n     def setup_network(self):\n@@ -30,8 +21,13 @@ def setup_network(self):\n         connect_nodes_bi(self.nodes,0,2)\n         self.sync_all([self.nodes[0:3]])\n \n-    def run_test(self):\n+    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n+        \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n+        fee = balance_with_fee - curr_balance\n+        assert_fee_amount(fee, tx_size, fee_per_byte * 1000)\n+        return curr_balance\n \n+    def run_test(self):\n         # Check that there's no UTXO on none of the nodes\n         assert_equal(len(self.nodes[0].listunspent()), 0)\n         assert_equal(len(self.nodes[1].listunspent()), 0)"
      },
      {
        "sha": "36714164a8327e9a83cd62b99da854c7d7e3393c",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -37,11 +37,8 @@\n from test_framework.util import *\n \n class WalletBackupTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 4\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n "
      },
      {
        "sha": "c001517a6d4f60449663a8642b5cd08a0b975a27",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -20,9 +20,7 @@\n                                  )\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "3f2668ee8724db13627f0e8ad33a9186f3e5ab34",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/801d2ae9247be5870344c8b4ed5c372ab8930408/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=801d2ae9247be5870344c8b4ed5c372ab8930408",
        "patch": "@@ -13,9 +13,7 @@\n                                  )\n \n class ZMQTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n \n     def setup_nodes(self):"
      }
    ]
  },
  {
    "sha": "82bf6fc6d48a232cc0ceb54b136d86914f49013c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmJmNmZjNmQ0OGEyMzJjYzBjZWI1NGIxMzZkODY5MTRmNDkwMTNj",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-24T15:11:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:44:16Z"
      },
      "message": "[tests] Functional tests must explicitly set num_nodes\n\nGithub-Pull: #11121\nRebased-From: 7148b74dc39110f53c665b94fa9d994c6ad6dc1c",
      "tree": {
        "sha": "d9709ea3cb26287e192aed77e65ca17cfb9c9a39",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9709ea3cb26287e192aed77e65ca17cfb9c9a39"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82bf6fc6d48a232cc0ceb54b136d86914f49013c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82bf6fc6d48a232cc0ceb54b136d86914f49013c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82bf6fc6d48a232cc0ceb54b136d86914f49013c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82bf6fc6d48a232cc0ceb54b136d86914f49013c/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "801d2ae9247be5870344c8b4ed5c372ab8930408",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/801d2ae9247be5870344c8b4ed5c372ab8930408",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/801d2ae9247be5870344c8b4ed5c372ab8930408"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 31,
      "deletions": 7
    },
    "files": [
      {
        "sha": "936aceb89aa73da63472c80b1f64a584b6be62a8",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -77,7 +77,9 @@ class ExampleTest(BitcoinTestFramework):\n     # and setup_nodes() methods to customize the test setup as required.\n \n     def set_test_params(self):\n-        \"\"\"Override any test parameters for your individual test.\"\"\"\n+        \"\"\"Override test parameters for your individual test.\n+\n+        This method must be overridden and num_nodes must be exlicitly set.\"\"\"\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # Use self.extra_args to change command-line arguments for the nodes"
      },
      {
        "sha": "3326b58c457144e2077f1a126ece8aaa2b59b4fa",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -16,6 +16,7 @@ def get_unspent(listunspent, amount):\n \n class RawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n \n     def setup_network(self, split=False):"
      },
      {
        "sha": "89768bd2fb530ad31addf78c4ca8954c35dfdc45",
        "filename": "test/functional/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_longpoll.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -23,6 +23,9 @@ def run(self):\n         self.node.getblocktemplate({'longpollid':self.longpollid})\n \n class GetBlockTemplateLPTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")\n         self.nodes[0].generate(10)"
      },
      {
        "sha": "21b67bfc64f9c3c33b79f47a912f94e6fa7da03d",
        "filename": "test/functional/getchaintips.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getchaintips.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -14,6 +14,9 @@\n from test_framework.util import assert_equal\n \n class GetChainTipsTest (BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 4\n+\n     def run_test (self):\n         tips = self.nodes[0].getchaintips ()\n         assert_equal (len (tips), 1)"
      },
      {
        "sha": "6f428388ecbbd91bf9dfc27ef0822b8b98cd41f3",
        "filename": "test/functional/listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listsinceblock.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -9,6 +9,7 @@\n \n class ListSinceBlockTest (BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n \n     def run_test(self):"
      },
      {
        "sha": "e4522cc3b5c7cb9878edf04ed8dab99ba0387d80",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -17,6 +17,7 @@ def txFromHex(hexstring):\n \n class ListTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 2\n         self.enable_mocktime()\n \n     def run_test(self):"
      },
      {
        "sha": "a58334b2a540e7cf693d0c521040259de33efd32",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -9,6 +9,7 @@\n \n class MerkleBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]"
      },
      {
        "sha": "9bb72c819945b9415ee00f0ca58e1e4f360604f5",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -34,6 +34,7 @@ def get_virtual_size(witness_block):\n \n class TestNode(NodeConnCB):\n     def set_test_params(self):\n+        self.num_nodes = 3\n         self.getdataset = set()\n \n     def on_getdata(self, conn, message):"
      },
      {
        "sha": "81b99d1bf4484a787d91f29db9880242ae90909e",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -42,6 +42,9 @@\n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n \n class ProxyTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 4\n+\n     def setup_nodes(self):\n         self.have_ipv6 = test_ipv6_local()\n         # Create two proxies on different ports"
      },
      {
        "sha": "db6fc86b82fe404850115ec9dc873827f7b91105",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -24,6 +24,7 @@ def get_sub_array_from_array(object_array, to_match):\n \n class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 2\n         self.enable_mocktime()\n \n     def run_test(self):"
      },
      {
        "sha": "103651f1752b87c9d7d15ea960452b66df4d29bc",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -48,11 +48,10 @@ class TestStatus(Enum):\n class BitcoinTestFramework(object):\n     \"\"\"Base class for a bitcoin test script.\n \n-    Individual bitcoin test scripts should subclass this class and override the run_test() method.\n+    Individual bitcoin test scripts should subclass this class and override the set_test_params() and run_test() methods.\n \n     Individual tests can also override the following methods to customize the test setup:\n \n-    - set_test_params()\n     - add_options()\n     - setup_chain()\n     - setup_network()\n@@ -64,12 +63,13 @@ class BitcoinTestFramework(object):\n \n     def __init__(self):\n         \"\"\"Sets test framework defaults. Do not override this method. Instead, override the set_test_params() method\"\"\"\n-        self.num_nodes = 4\n         self.setup_clean_chain = False\n         self.nodes = []\n         self.mocktime = 0\n         self.set_test_params()\n \n+        assert hasattr(self, \"num_nodes\"), \"Test must set self.num_nodes in set_test_params()\"\n+\n     def main(self):\n         \"\"\"Main function. This should not be overridden by the subclass test scripts.\"\"\"\n \n@@ -177,8 +177,8 @@ def main(self):\n \n     # Methods to override in subclass test scripts.\n     def set_test_params(self):\n-        \"\"\"Override this method to change default values for number of nodes, topology, etc\"\"\"\n-        pass\n+        \"\"\"Tests must this method to change default values for number of nodes, topology, etc\"\"\"\n+        raise NotImplementedError\n \n     def add_options(self, parser):\n         \"\"\"Override this method to add command-line options to the test\"\"\"\n@@ -212,7 +212,7 @@ def setup_nodes(self):\n         self.start_nodes()\n \n     def run_test(self):\n-        \"\"\"Override this method to define test logic\"\"\"\n+        \"\"\"Tests must override this method to define test logic\"\"\"\n         raise NotImplementedError\n \n     # Public helper methods. These can be accessed by the subclass test scripts."
      },
      {
        "sha": "740bb2d4c5c061828a124eccc33677e64aa21d3c",
        "filename": "test/functional/txn_clone.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_clone.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -8,6 +8,9 @@\n from test_framework.util import *\n \n class TxnMallTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 4\n+\n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n                           help=\"Test double-spend of 1-confirmed transaction\")"
      },
      {
        "sha": "69629ef95196ebd765422d597e34a69dbcfd154b",
        "filename": "test/functional/txn_doublespend.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_doublespend.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -8,6 +8,8 @@\n from test_framework.util import *\n \n class TxnMallTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 4\n \n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\","
      },
      {
        "sha": "de3aa8a875544e365ead9ab120df624d1f789d37",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -8,6 +8,7 @@\n \n class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n "
      },
      {
        "sha": "15ea26afa1605f453bd1dc8fb46d033377b47c68",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82bf6fc6d48a232cc0ceb54b136d86914f49013c/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "patch": "@@ -38,6 +38,7 @@\n \n class WalletBackupTest(BitcoinTestFramework):\n     def set_test_params(self):\n+        self.num_nodes = 4\n         self.setup_clean_chain = True\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]"
      }
    ]
  },
  {
    "sha": "cef03198dcdca63d88bf8f50edcc79fa6b268261",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWYwMzE5OGRjZGNhNjNkODhiZjhmNTBlZGNjNzlmYTZiMjY4MjYx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-01T18:24:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:45:11Z"
      },
      "message": "[tests] fixups from set_test_params()\n\nGithub-Pull: #11215\nRebased-From: 3918d93f3cd2305dc12cb964aebba0fc1f8720b4",
      "tree": {
        "sha": "35491cdc00bfbfeae908c809f2eb20da542cd2f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35491cdc00bfbfeae908c809f2eb20da542cd2f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cef03198dcdca63d88bf8f50edcc79fa6b268261",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef03198dcdca63d88bf8f50edcc79fa6b268261",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cef03198dcdca63d88bf8f50edcc79fa6b268261",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef03198dcdca63d88bf8f50edcc79fa6b268261/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82bf6fc6d48a232cc0ceb54b136d86914f49013c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82bf6fc6d48a232cc0ceb54b136d86914f49013c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7acfede3f7a5f3d8087c050c38ec57ba7211cb4b",
        "filename": "test/functional/bitcoin_cli.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cef03198dcdca63d88bf8f50edcc79fa6b268261/test/functional/bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cef03198dcdca63d88bf8f50edcc79fa6b268261/test/functional/bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bitcoin_cli.py?ref=cef03198dcdca63d88bf8f50edcc79fa6b268261",
        "patch": "@@ -8,8 +8,7 @@\n \n class TestBitcoinCli(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "228e1505983c6411ce53d43c4a9fb7c472284ee9",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cef03198dcdca63d88bf8f50edcc79fa6b268261/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cef03198dcdca63d88bf8f50edcc79fa6b268261/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=cef03198dcdca63d88bf8f50edcc79fa6b268261",
        "patch": "@@ -85,7 +85,7 @@ def set_test_params(self):\n         # Use self.extra_args to change command-line arguments for the nodes\n         self.extra_args = [[], [\"-logips\"], []]\n \n-        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+        # self.log.info(\"I've finished set_test_params\")  # Oops! Can't run self.log before run_test()\n \n     # Use add_options() to add specific command-line options for your test.\n     # In practice this is not used very much, since the tests are mostly written"
      }
    ]
  },
  {
    "sha": "7310f1f2eb5900a9d07e2c6427a71d161762000a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MzEwZjFmMmViNTkwMGE5ZDA3ZTJjNjQyN2E3MWQxNjE3NjIwMDBh",
    "commit": {
      "author": {
        "name": "Daniel Edgecumbe",
        "email": "esotericnonsense@danedgecumbe.com",
        "date": "2017-08-30T18:14:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:46:51Z"
      },
      "message": "[Qt] Fix display of package name on 'open config file' tooltip\n\nGithub-Pull: #11198\nRebased-From: 14ccd4d8d1847d64903224562ad3c7eb795b3781",
      "tree": {
        "sha": "d7b0cf3ff98e855946aaccd798d21e2ccc68503c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7b0cf3ff98e855946aaccd798d21e2ccc68503c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7310f1f2eb5900a9d07e2c6427a71d161762000a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7310f1f2eb5900a9d07e2c6427a71d161762000a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7310f1f2eb5900a9d07e2c6427a71d161762000a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7310f1f2eb5900a9d07e2c6427a71d161762000a/comments",
    "author": {
      "login": "esotericnonsense",
      "id": 7999704,
      "node_id": "MDQ6VXNlcjc5OTk3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7999704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/esotericnonsense",
      "html_url": "https://github.com/esotericnonsense",
      "followers_url": "https://api.github.com/users/esotericnonsense/followers",
      "following_url": "https://api.github.com/users/esotericnonsense/following{/other_user}",
      "gists_url": "https://api.github.com/users/esotericnonsense/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/esotericnonsense/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/esotericnonsense/subscriptions",
      "organizations_url": "https://api.github.com/users/esotericnonsense/orgs",
      "repos_url": "https://api.github.com/users/esotericnonsense/repos",
      "events_url": "https://api.github.com/users/esotericnonsense/events{/privacy}",
      "received_events_url": "https://api.github.com/users/esotericnonsense/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2cb720ae6122101c83a8836da057a5a7cba5b5df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cb720ae6122101c83a8836da057a5a7cba5b5df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2cb720ae6122101c83a8836da057a5a7cba5b5df"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "550884ed8e4f2f01dfb4211e75be21d2120460fe",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7310f1f2eb5900a9d07e2c6427a71d161762000a/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7310f1f2eb5900a9d07e2c6427a71d161762000a/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=7310f1f2eb5900a9d07e2c6427a71d161762000a",
        "patch": "@@ -80,6 +80,8 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     ui->bitcoinAtStartup->setToolTip(ui->bitcoinAtStartup->toolTip().arg(tr(PACKAGE_NAME)));\n     ui->bitcoinAtStartup->setText(ui->bitcoinAtStartup->text().arg(tr(PACKAGE_NAME)));\n \n+    ui->openBitcoinConfButton->setToolTip(ui->openBitcoinConfButton->toolTip().arg(tr(PACKAGE_NAME)));\n+\n     ui->lang->setToolTip(ui->lang->toolTip().arg(tr(PACKAGE_NAME)));\n     ui->lang->addItem(QString(\"(\") + tr(\"default\") + QString(\")\"), QVariant(\"\"));\n     for (const QString &langStr : translations.entryList())"
      }
    ]
  },
  {
    "sha": "44241765e3c8caa9248949cbe0fbc1c3072319c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDI0MTc2NWUzYzhjYWE5MjQ4OTQ5Y2JlMGZiYzFjMzA3MjMxOWMw",
    "commit": {
      "author": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-09-05T16:55:37Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:49:02Z"
      },
      "message": "Improve signmessages functional test\n\nThis patch improves branch coverage of the test, making sure a\nmessage can not be verified with the wrong address or signature.\n\nGithub-Pull: #11241\nRebased-From: b3d6fc654770e3b4d2f82e8d77e531df9e522982",
      "tree": {
        "sha": "c3223b8d2b866895a20734aa84f3a982a573dad2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3223b8d2b866895a20734aa84f3a982a573dad2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44241765e3c8caa9248949cbe0fbc1c3072319c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44241765e3c8caa9248949cbe0fbc1c3072319c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44241765e3c8caa9248949cbe0fbc1c3072319c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44241765e3c8caa9248949cbe0fbc1c3072319c0/comments",
    "author": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cef03198dcdca63d88bf8f50edcc79fa6b268261",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef03198dcdca63d88bf8f50edcc79fa6b268261",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cef03198dcdca63d88bf8f50edcc79fa6b268261"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "52ba6a5ad761844cf9b0480a767a6be2e8fcf4a2",
        "filename": "test/functional/signmessages.py",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44241765e3c8caa9248949cbe0fbc1c3072319c0/test/functional/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44241765e3c8caa9248949cbe0fbc1c3072319c0/test/functional/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signmessages.py?ref=44241765e3c8caa9248949cbe0fbc1c3072319c0",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test RPC commands for signing and verifying messages.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n \n class SignMessagesTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -14,20 +15,24 @@ def set_test_params(self):\n     def run_test(self):\n         message = 'This is just a test message'\n \n-        # Test the signing with a privkey\n-        privKey = 'cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N'\n+        self.log.info('test signing with priv_key')\n+        priv_key = 'cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N'\n         address = 'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB'\n-        signature = self.nodes[0].signmessagewithprivkey(privKey, message)\n-\n-        # Verify the message\n+        expected_signature = 'INbVnW4e6PeRmsv2Qgu8NuopvrVjkcxob+sX8OcZG0SALhWybUjzMLPdAsXI46YZGb0KQTRii+wWIQzRpG/U+S0='\n+        signature = self.nodes[0].signmessagewithprivkey(priv_key, message)\n+        assert_equal(expected_signature, signature)\n         assert(self.nodes[0].verifymessage(address, signature, message))\n \n-        # Test the signing with an address with wallet\n+        self.log.info('test signing with an address with wallet')\n         address = self.nodes[0].getnewaddress()\n         signature = self.nodes[0].signmessage(address, message)\n-\n-        # Verify the message\n         assert(self.nodes[0].verifymessage(address, signature, message))\n \n+        self.log.info('test verifying with another address should not work')\n+        other_address = self.nodes[0].getnewaddress()\n+        other_signature = self.nodes[0].signmessage(other_address, message)\n+        assert(not self.nodes[0].verifymessage(other_address, signature, message))\n+        assert(not self.nodes[0].verifymessage(address, other_signature, message))\n+\n if __name__ == '__main__':\n     SignMessagesTest().main()"
      }
    ]
  },
  {
    "sha": "f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMGI2Nzk1NGYwNmU3MWViMmY0ZGYwMTI1YjcwNzVkOGIzNmUwYzZm",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-09-05T03:02:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:50:43Z"
      },
      "message": "Remove redundant testutil files\n\nGithub-Pull: #11234\nRebased-From: d1138e36208dac87a27f415f39c70377636e93f1",
      "tree": {
        "sha": "01985f0c46ef72d56f4014c4da117d658c86ef4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01985f0c46ef72d56f4014c4da117d658c86ef4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44241765e3c8caa9248949cbe0fbc1c3072319c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44241765e3c8caa9248949cbe0fbc1c3072319c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44241765e3c8caa9248949cbe0fbc1c3072319c0"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 3,
      "deletions": 40
    },
    "files": [
      {
        "sha": "ea2ed17472ee59c47f12e8a0f0c602ce1e048de4",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
        "patch": "@@ -25,12 +25,10 @@ TEST_QT_H = \\\n   qt/test/wallettests.h\n \n TEST_BITCOIN_CPP = \\\n-  test/test_bitcoin.cpp \\\n-  test/testutil.cpp\n+  test/test_bitcoin.cpp\n \n TEST_BITCOIN_H = \\\n-  test/test_bitcoin.h \\\n-  test/testutil.h\n+  test/test_bitcoin.h\n \n qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_TEST_INCLUDES) $(PROTOBUF_CFLAGS)"
      },
      {
        "sha": "01ab0134fee5ece92a9d81e17b9c913798f1ebe8",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
        "patch": "@@ -74,8 +74,6 @@ BITCOIN_TESTS =\\\n   test/test_bitcoin.cpp \\\n   test/test_bitcoin.h \\\n   test/test_bitcoin_main.cpp \\\n-  test/testutil.cpp \\\n-  test/testutil.h \\\n   test/timedata_tests.cpp \\\n   test/torcontrol_tests.cpp \\\n   test/transaction_tests.cpp \\"
      },
      {
        "sha": "c1f71a6b4eaba6b23940aff27863a191fa5edc99",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
        "patch": "@@ -11,7 +11,6 @@\n #include \"rpc/register.h\"\n #include \"rpc/server.h\"\n #include \"rpcconsole.h\"\n-#include \"test/testutil.h\"\n #include \"test/test_bitcoin.h\"\n #include \"univalue.h\"\n #include \"util.h\""
      },
      {
        "sha": "194f62ca118357c756db76a7c7b555ab62782cf2",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
        "patch": "@@ -22,8 +22,6 @@\n #include \"rpc/register.h\"\n #include \"script/sigcache.h\"\n \n-#include \"test/testutil.h\"\n-\n #include <memory>\n \n uint256 insecure_rand_seed = GetRandHash();\n@@ -61,7 +59,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n \n         RegisterAllCoreRPCCommands(tableRPC);\n         ClearDatadirCache();\n-        pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(100000)));\n+        pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(100000)));\n         fs::create_directories(pathTemp);\n         gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n "
      },
      {
        "sha": "591d0bf30271240f9184ed472d04ab6c6096c851",
        "filename": "src/test/testutil.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44241765e3c8caa9248949cbe0fbc1c3072319c0/src/test/testutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44241765e3c8caa9248949cbe0fbc1c3072319c0/src/test/testutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.cpp?ref=44241765e3c8caa9248949cbe0fbc1c3072319c0",
        "patch": "@@ -1,15 +0,0 @@\n-// Copyright (c) 2009-2016 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"testutil.h\"\n-\n-#ifdef WIN32\n-#include <shlobj.h>\n-#endif\n-\n-#include \"fs.h\"\n-\n-fs::path GetTempPath() {\n-    return fs::temp_directory_path();\n-}"
      },
      {
        "sha": "cbe784d6400b9dd4cc4339ae6803f9c1d2bb13fd",
        "filename": "src/test/testutil.h",
        "status": "removed",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44241765e3c8caa9248949cbe0fbc1c3072319c0/src/test/testutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44241765e3c8caa9248949cbe0fbc1c3072319c0/src/test/testutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.h?ref=44241765e3c8caa9248949cbe0fbc1c3072319c0",
        "patch": "@@ -1,15 +0,0 @@\n-// Copyright (c) 2009-2016 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-/**\n- * Utility functions shared by unit tests\n- */\n-#ifndef BITCOIN_TEST_TESTUTIL_H\n-#define BITCOIN_TEST_TESTUTIL_H\n-\n-#include \"fs.h\"\n-\n-fs::path GetTempPath();\n-\n-#endif // BITCOIN_TEST_TESTUTIL_H"
      }
    ]
  },
  {
    "sha": "47c02a8ae8b406a1a7d7004b2a0337a1f32420e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2MwMmE4YWU4YjQwNmExYTdkNzAwNGIyYTAzMzdhMWYzMjQyMGU5",
    "commit": {
      "author": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2017-08-30T07:32:54Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:52:28Z"
      },
      "message": "qt: Use IsMine to validate custom change address\n\n(cherry picked from commit c41224dfd51c896341bbf2fa23e160bf5ffe27c3)\n\nGithub-Pull: #11247\nRebased-From: a1ea1cfbd8d4fc976f0ab2423d395e03ded6eedd",
      "tree": {
        "sha": "6caba5c6f953a53b79792e004b107a8f3eb24894",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6caba5c6f953a53b79792e004b107a8f3eb24894"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47c02a8ae8b406a1a7d7004b2a0337a1f32420e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47c02a8ae8b406a1a7d7004b2a0337a1f32420e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47c02a8ae8b406a1a7d7004b2a0337a1f32420e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47c02a8ae8b406a1a7d7004b2a0337a1f32420e9/comments",
    "author": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7310f1f2eb5900a9d07e2c6427a71d161762000a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7310f1f2eb5900a9d07e2c6427a71d161762000a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7310f1f2eb5900a9d07e2c6427a71d161762000a"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 7,
      "deletions": 9
    },
    "files": [
      {
        "sha": "7732c7398818baa50267d66054dfc22520fabcc5",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47c02a8ae8b406a1a7d7004b2a0337a1f32420e9/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47c02a8ae8b406a1a7d7004b2a0337a1f32420e9/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=47c02a8ae8b406a1a7d7004b2a0337a1f32420e9",
        "patch": "@@ -789,18 +789,16 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n         }\n         else // Valid address\n         {\n-            CKeyID keyid;\n-            addr.GetKeyID(keyid);\n-            if (!model->havePrivKey(keyid)) // Unknown change address\n-            {\n+            const CTxDestination dest = addr.Get();\n+            if (!model->IsSpendable(dest)) {\n                 ui->labelCoinControlChangeLabel->setText(tr(\"Warning: Unknown change address\"));\n \n                 // confirmation dialog\n                 QMessageBox::StandardButton btnRetVal = QMessageBox::question(this, tr(\"Confirm custom change address\"), tr(\"The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?\"),\n                     QMessageBox::Yes | QMessageBox::Cancel, QMessageBox::Cancel);\n \n                 if(btnRetVal == QMessageBox::Yes)\n-                    CoinControlDialog::coinControl->destChange = addr.Get();\n+                    CoinControlDialog::coinControl->destChange = dest;\n                 else\n                 {\n                     ui->lineEditCoinControlChange->setText(\"\");\n@@ -819,7 +817,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n                 else\n                     ui->labelCoinControlChangeLabel->setText(tr(\"(no label)\"));\n \n-                CoinControlDialog::coinControl->destChange = addr.Get();\n+                CoinControlDialog::coinControl->destChange = dest;\n             }\n         }\n     }"
      },
      {
        "sha": "aedbf22e4d1d3c637fcae04ef17217af49c39f42",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47c02a8ae8b406a1a7d7004b2a0337a1f32420e9/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47c02a8ae8b406a1a7d7004b2a0337a1f32420e9/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=47c02a8ae8b406a1a7d7004b2a0337a1f32420e9",
        "patch": "@@ -561,9 +561,9 @@ bool WalletModel::getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n     return wallet->GetPubKey(address, vchPubKeyOut);\n }\n \n-bool WalletModel::havePrivKey(const CKeyID &address) const\n+bool WalletModel::IsSpendable(const CTxDestination& dest) const\n {\n-    return wallet->HaveKey(address);\n+    return IsMine(*wallet, dest) & ISMINE_SPENDABLE;\n }\n \n bool WalletModel::getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const"
      },
      {
        "sha": "05733f82727a6be6d695685e71297e5deb98c6a4",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47c02a8ae8b406a1a7d7004b2a0337a1f32420e9/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47c02a8ae8b406a1a7d7004b2a0337a1f32420e9/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=47c02a8ae8b406a1a7d7004b2a0337a1f32420e9",
        "patch": "@@ -190,7 +190,7 @@ class WalletModel : public QObject\n     UnlockContext requestUnlock();\n \n     bool getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n-    bool havePrivKey(const CKeyID &address) const;\n+    bool IsSpendable(const CTxDestination& dest) const;\n     bool getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const;\n     void getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs);\n     bool isSpent(const COutPoint& outpoint) const;"
      }
    ]
  },
  {
    "sha": "f3f78917769b9bc65c133a160dba7df18a33b27d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmM2Y3ODkxNzc2OWI5YmM2NWMxMzNhMTYwZGJhN2RmMThhMzNiMjdk",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-08-30T23:15:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:53:16Z"
      },
      "message": "Stop test_bitcoin-qt touching ~/.bitcoin\n\nGithub-Pull: #11210\nRebased-From: dea086f498097d19a2c9acbfc753c9c2d68dbb03",
      "tree": {
        "sha": "ebbfb982fa6615cc5cd7aa28974a22166ff5f91d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebbfb982fa6615cc5cd7aa28974a22166ff5f91d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3f78917769b9bc65c133a160dba7df18a33b27d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f78917769b9bc65c133a160dba7df18a33b27d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f78917769b9bc65c133a160dba7df18a33b27d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f78917769b9bc65c133a160dba7df18a33b27d/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0b67954f06e71eb2f4df0125b7075d8b36e0c6f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "98a6605190f4805d59ed8a40b07b62b8bc2b5ef3",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f78917769b9bc65c133a160dba7df18a33b27d/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f78917769b9bc65c133a160dba7df18a33b27d/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=f3f78917769b9bc65c133a160dba7df18a33b27d",
        "patch": "@@ -36,11 +36,6 @@ void RPCNestedTests::rpcNestedTests()\n     // do some test setup\n     // could be moved to a more generic place when we add more tests on QT level\n     tableRPC.appendCommand(\"rpcNestedTest\", &vRPCCommands[0]);\n-    ClearDatadirCache();\n-    std::string path = QDir::tempPath().toStdString() + \"/\" + strprintf(\"test_bitcoin_qt_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n-    QDir dir(QString::fromStdString(path));\n-    dir.mkpath(\".\");\n-    gArgs.ForceSetArg(\"-datadir\", path);\n     //mempool.setSanityCheck(1.0);\n \n     TestingSetup test;\n@@ -135,6 +130,4 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n #endif\n-\n-    fs::remove_all(fs::path(path));\n }"
      },
      {
        "sha": "b5790e4e2be8023c49cd1e5bb13290a5e290f85b",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3f78917769b9bc65c133a160dba7df18a33b27d/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3f78917769b9bc65c133a160dba7df18a33b27d/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=f3f78917769b9bc65c133a160dba7df18a33b27d",
        "patch": "@@ -53,6 +53,10 @@ int main(int argc, char *argv[])\n     SetupNetworking();\n     SelectParams(CBaseChainParams::MAIN);\n     noui_connect();\n+    ClearDatadirCache();\n+    fs::path pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin-qt_%lu_%i\", (unsigned long)GetTime(), (int)GetRand(100000));\n+    fs::create_directories(pathTemp);\n+    gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n \n     bool fInvalid = false;\n \n@@ -97,5 +101,7 @@ int main(int argc, char *argv[])\n     }\n #endif\n \n+    fs::remove_all(pathTemp);\n+\n     return fInvalid;\n }"
      }
    ]
  },
  {
    "sha": "eeb24a3a0157c41a0aae1d5561cf490abe378585",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWIyNGEzYTAxNTdjNDFhMGFhZTFkNTU2MWNmNDkwYWJlMzc4NTg1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-08-16T15:52:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:53:35Z"
      },
      "message": "[qa] TestNode: Add wait_until_stopped helper method\n\nGithub-Pull: #11067\nRebased-From: faa8d9581affde35a8242c63fca8a52004d4f943",
      "tree": {
        "sha": "a23aa52ed3ae8d1c1d68d0adf196706ba30db298",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a23aa52ed3ae8d1c1d68d0adf196706ba30db298"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eeb24a3a0157c41a0aae1d5561cf490abe378585",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeb24a3a0157c41a0aae1d5561cf490abe378585",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eeb24a3a0157c41a0aae1d5561cf490abe378585",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeb24a3a0157c41a0aae1d5561cf490abe378585/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3f78917769b9bc65c133a160dba7df18a33b27d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3f78917769b9bc65c133a160dba7df18a33b27d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3f78917769b9bc65c133a160dba7df18a33b27d"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 24,
      "deletions": 22
    },
    "files": [
      {
        "sha": "50be9262e4f9cf9b95a2c397c11c55dc5905d817",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=eeb24a3a0157c41a0aae1d5561cf490abe378585",
        "patch": "@@ -21,7 +21,7 @@\n import http.client\n import subprocess\n \n-from test_framework.test_framework import (BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises,\n@@ -141,7 +141,7 @@ def _test_stopatheight(self):\n         except (ConnectionError, http.client.BadStatusLine):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')\n-        self.nodes[0].process.wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+        self.nodes[0].wait_until_stopped()\n         self.start_node(0)\n         assert_equal(self.nodes[0].getblockcount(), 207)\n "
      },
      {
        "sha": "42d95dd5204e646369ed04f3cf5967830b4cca44",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=eeb24a3a0157c41a0aae1d5561cf490abe378585",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the fundrawtransaction RPC.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n "
      },
      {
        "sha": "a53eb517998dcdb22db84d6a561f475d15572217",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=eeb24a3a0157c41a0aae1d5561cf490abe378585",
        "patch": "@@ -43,8 +43,6 @@ class TestStatus(Enum):\n TEST_EXIT_FAILED = 1\n TEST_EXIT_SKIPPED = 77\n \n-BITCOIND_PROC_WAIT_TIMEOUT = 60\n-\n class BitcoinTestFramework(object):\n     \"\"\"Base class for a bitcoin test script.\n \n@@ -263,8 +261,7 @@ def start_nodes(self, extra_args=None):\n     def stop_node(self, i):\n         \"\"\"Stop a bitcoind test node\"\"\"\n         self.nodes[i].stop_node()\n-        while not self.nodes[i].is_node_stopped():\n-            time.sleep(0.1)\n+        self.nodes[i].wait_until_stopped()\n \n     def stop_nodes(self):\n         \"\"\"Stop multiple bitcoind test nodes\"\"\"\n@@ -274,8 +271,7 @@ def stop_nodes(self):\n \n         for node in self.nodes:\n             # Wait for nodes to stop\n-            while not node.is_node_stopped():\n-                time.sleep(0.1)\n+            node.wait_until_stopped()\n \n     def assert_start_raises_init_error(self, i, extra_args=None, expected_msg=None):\n         with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:"
      },
      {
        "sha": "f58a372a144a0f5748d8dd1cb4ca1464f59537fd",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=eeb24a3a0157c41a0aae1d5561cf490abe378585",
        "patch": "@@ -17,9 +17,12 @@\n     assert_equal,\n     get_rpc_proxy,\n     rpc_url,\n+    wait_until,\n )\n from .authproxy import JSONRPCException\n \n+BITCOIND_PROC_WAIT_TIMEOUT = 60\n+\n class TestNode():\n     \"\"\"A class for representing a bitcoind node under test.\n \n@@ -125,25 +128,28 @@ def is_node_stopped(self):\n         if not self.running:\n             return True\n         return_code = self.process.poll()\n-        if return_code is not None:\n-            # process has stopped. Assert that it didn't return an error code.\n-            assert_equal(return_code, 0)\n-            self.running = False\n-            self.process = None\n-            self.log.debug(\"Node stopped\")\n-            return True\n-        return False\n+        if return_code is None:\n+            return False\n+\n+        # process has stopped. Assert that it didn't return an error code.\n+        assert_equal(return_code, 0)\n+        self.running = False\n+        self.process = None\n+        self.rpc_connected = False\n+        self.rpc = None\n+        self.log.debug(\"Node stopped\")\n+        return True\n+\n+    def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n+        wait_until(self.is_node_stopped, timeout=timeout)\n \n     def node_encrypt_wallet(self, passphrase):\n         \"\"\"\"Encrypts the wallet.\n \n         This causes bitcoind to shutdown, so this method takes\n         care of cleaning up resources.\"\"\"\n         self.encryptwallet(passphrase)\n-        while not self.is_node_stopped():\n-            time.sleep(0.1)\n-        self.rpc = None\n-        self.rpc_connected = False\n+        self.wait_until_stopped()\n \n class TestNodeCLI():\n     \"\"\"Interface to bitcoin-cli for an individual node\"\"\""
      },
      {
        "sha": "ce1e7744e903fe60062413ac106ee3248bd77175",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeb24a3a0157c41a0aae1d5561cf490abe378585/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=eeb24a3a0157c41a0aae1d5561cf490abe378585",
        "patch": "@@ -6,7 +6,7 @@\n \n import time\n \n-from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_jsonrpc,"
      }
    ]
  },
  {
    "sha": "812c87004311732da2fc8840a483be80c7a443ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTJjODcwMDQzMTE3MzJkYTJmYzg4NDBhNDgzYmU4MGM3YTQ0M2Nh",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-06T15:52:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T17:09:43Z"
      },
      "message": "[test] Improve assert_raises_jsonrpc docstring\n\nGithub-Pull: #11125\nRebased-From: e1274947d4574bb83a020d0e178f0e5db7fc6282",
      "tree": {
        "sha": "eefe52ad7e60d9a9031ae317378947a1480cbe57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eefe52ad7e60d9a9031ae317378947a1480cbe57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/812c87004311732da2fc8840a483be80c7a443ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/812c87004311732da2fc8840a483be80c7a443ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/812c87004311732da2fc8840a483be80c7a443ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/812c87004311732da2fc8840a483be80c7a443ca/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eeb24a3a0157c41a0aae1d5561cf490abe378585",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeb24a3a0157c41a0aae1d5561cf490abe378585",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eeb24a3a0157c41a0aae1d5561cf490abe378585"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "a5bc495dfaf86a255e3c0469b1b1a4d834992732",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/812c87004311732da2fc8840a483be80c7a443ca/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/812c87004311732da2fc8840a483be80c7a443ca/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=812c87004311732da2fc8840a483be80c7a443ca",
        "patch": "@@ -62,13 +62,13 @@ def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n \n     Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException\n     and verifies that the error code and message are as expected. Throws AssertionError if\n-    no JSONRPCException was returned or if the error code/message are not as expected.\n+    no JSONRPCException was raised or if the error code/message are not as expected.\n \n     Args:\n         code (int), optional: the error code returned by the RPC call (defined\n             in src/rpc/protocol.h). Set to None if checking the error code is not required.\n         message (string), optional: [a substring of] the error string returned by the\n-            RPC call. Set to None if checking the error string is not required\n+            RPC call. Set to None if checking the error string is not required.\n         fun (function): the function to call. This should be the name of an RPC.\n         args*: positional arguments for the function.\n         kwds**: named arguments for the function."
      }
    ]
  },
  {
    "sha": "e0bfd28de28efb1ffa84e89d76c144824dae987f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGJmZDI4ZGUyOGVmYjFmZmE4NGU4OWQ3NmMxNDQ4MjRkYWU5ODdm",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-06T16:07:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T17:09:52Z"
      },
      "message": "[test] Add support for custom arguments to TestNodeCLI\n\nGithub-Pull: #11125\nRebased-From: 5c18a84b9a49e3f9dacf0502dbf7d5d755f38da6",
      "tree": {
        "sha": "0dfc909d1f7ac566487e5f33f1817e4528056137",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0dfc909d1f7ac566487e5f33f1817e4528056137"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0bfd28de28efb1ffa84e89d76c144824dae987f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0bfd28de28efb1ffa84e89d76c144824dae987f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0bfd28de28efb1ffa84e89d76c144824dae987f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0bfd28de28efb1ffa84e89d76c144824dae987f/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "812c87004311732da2fc8840a483be80c7a443ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/812c87004311732da2fc8840a483be80c7a443ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/812c87004311732da2fc8840a483be80c7a443ca"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "363025740a53648bac2a0fd73048302d6cb6b487",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0bfd28de28efb1ffa84e89d76c144824dae987f/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0bfd28de28efb1ffa84e89d76c144824dae987f/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=e0bfd28de28efb1ffa84e89d76c144824dae987f",
        "patch": "@@ -155,8 +155,16 @@ class TestNodeCLI():\n     \"\"\"Interface to bitcoin-cli for an individual node\"\"\"\n \n     def __init__(self, binary, datadir):\n+        self.args = []\n         self.binary = binary\n         self.datadir = datadir\n+        self.input = None\n+\n+    def __call__(self, *args, input=None):\n+        # TestNodeCLI is callable with bitcoin-cli command-line args\n+        self.args = [str(arg) for arg in args]\n+        self.input = input\n+        return self\n \n     def __getattr__(self, command):\n         def dispatcher(*args, **kwargs):\n@@ -169,9 +177,9 @@ def send_cli(self, command, *args, **kwargs):\n         pos_args = [str(arg) for arg in args]\n         named_args = [str(key) + \"=\" + str(value) for (key, value) in kwargs.items()]\n         assert not (pos_args and named_args), \"Cannot use positional arguments and named arguments in the same bitcoin-cli call\"\n-        p_args = [self.binary, \"-datadir=\" + self.datadir]\n+        p_args = [self.binary, \"-datadir=\" + self.datadir] + self.args\n         if named_args:\n             p_args += [\"-named\"]\n         p_args += [command] + pos_args + named_args\n-        cli_output = subprocess.check_output(p_args, universal_newlines=True)\n+        cli_output = subprocess.check_output(p_args, input=self.input, universal_newlines=True)\n         return json.loads(cli_output, parse_float=decimal.Decimal)"
      }
    ]
  },
  {
    "sha": "e38211f5e8900ee9027c671d7c655958e4dbe8e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzgyMTFmNWU4OTAwZWU5MDI3YzY3MWQ3YzY1NTk1OGU0ZGJlOGU3",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-06T15:35:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T17:10:05Z"
      },
      "message": "[test] Add assert_raises_process_error to assert process errors\n\nGithub-Pull: #11125\nRebased-From: 232e3e8471edb346c09f906c996b2f350cabc72a",
      "tree": {
        "sha": "8c8269263a6b54105bd9997f5539fa7a81539a95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c8269263a6b54105bd9997f5539fa7a81539a95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e38211f5e8900ee9027c671d7c655958e4dbe8e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e38211f5e8900ee9027c671d7c655958e4dbe8e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e38211f5e8900ee9027c671d7c655958e4dbe8e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e38211f5e8900ee9027c671d7c655958e4dbe8e7/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0bfd28de28efb1ffa84e89d76c144824dae987f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0bfd28de28efb1ffa84e89d76c144824dae987f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0bfd28de28efb1ffa84e89d76c144824dae987f"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b2d8199d12b87a49d013f8240984aed1abd368c6",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e38211f5e8900ee9027c671d7c655958e4dbe8e7/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e38211f5e8900ee9027c671d7c655958e4dbe8e7/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=e38211f5e8900ee9027c671d7c655958e4dbe8e7",
        "patch": "@@ -12,6 +12,7 @@\n import os\n import random\n import re\n+from subprocess import CalledProcessError\n import time\n \n from . import coverage\n@@ -57,6 +58,30 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n+def assert_raises_process_error(returncode, output, fun, *args, **kwds):\n+    \"\"\"Execute a process and asserts the process return code and output.\n+\n+    Calls function `fun` with arguments `args` and `kwds`. Catches a CalledProcessError\n+    and verifies that the return code and output are as expected. Throws AssertionError if\n+    no CalledProcessError was raised or if the return code and output are not as expected.\n+\n+    Args:\n+        returncode (int): the process return code.\n+        output (string): [a substring of] the process output.\n+        fun (function): the function to call. This should execute a process.\n+        args*: positional arguments for the function.\n+        kwds**: named arguments for the function.\n+    \"\"\"\n+    try:\n+        fun(*args, **kwds)\n+    except CalledProcessError as e:\n+        if returncode != e.returncode:\n+            raise AssertionError(\"Unexpected returncode %i\" % e.returncode)\n+        if output not in e.output:\n+            raise AssertionError(\"Expected substring not found:\" + e.output)\n+    else:\n+        raise AssertionError(\"No exception raised\")\n+\n def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n     \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n "
      }
    ]
  },
  {
    "sha": "2b97b36e5d37c6935dce112f90213f4f49cd88ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjk3YjM2ZTVkMzdjNjkzNWRjZTExMmY5MDIxM2Y0ZjQ5Y2Q4OGFk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-09-06T15:36:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T17:10:21Z"
      },
      "message": "[test] Replace check_output with low level version\n\nGithub-Pull: #11125\nRebased-From: ce379b47b92d6c04250c21719bb1abfb41c586ad",
      "tree": {
        "sha": "639ef57856c3572124ed2824ff258762c56e8af5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/639ef57856c3572124ed2824ff258762c56e8af5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b97b36e5d37c6935dce112f90213f4f49cd88ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b97b36e5d37c6935dce112f90213f4f49cd88ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b97b36e5d37c6935dce112f90213f4f49cd88ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b97b36e5d37c6935dce112f90213f4f49cd88ad/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e38211f5e8900ee9027c671d7c655958e4dbe8e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e38211f5e8900ee9027c671d7c655958e4dbe8e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e38211f5e8900ee9027c671d7c655958e4dbe8e7"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "12dab57a022d48c2e31dbb45380b6d8828caeaec",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b97b36e5d37c6935dce112f90213f4f49cd88ad/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b97b36e5d37c6935dce112f90213f4f49cd88ad/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=2b97b36e5d37c6935dce112f90213f4f49cd88ad",
        "patch": "@@ -181,5 +181,10 @@ def send_cli(self, command, *args, **kwargs):\n         if named_args:\n             p_args += [\"-named\"]\n         p_args += [command] + pos_args + named_args\n-        cli_output = subprocess.check_output(p_args, input=self.input, universal_newlines=True)\n-        return json.loads(cli_output, parse_float=decimal.Decimal)\n+        process = subprocess.Popen(p_args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n+        cli_stdout, cli_stderr = process.communicate(input=self.input)\n+        returncode = process.poll()\n+        if returncode:\n+            # Ignore cli_stdout, raise with cli_stderr\n+            raise subprocess.CalledProcessError(returncode, self.binary, output=cli_stderr)\n+        return json.loads(cli_stdout, parse_float=decimal.Decimal)"
      }
    ]
  },
  {
    "sha": "2e31b1d48d4da31bf32e1e4123c7e5d662490826",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTMxYjFkNDhkNGRhMzFiZjMyZTFlNDEyM2M3ZTVkNjYyNDkwODI2",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-09-05T22:49:36Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T17:19:46Z"
      },
      "message": "Fix division by zero in time remaining\n\nGithub-Pull: #11237\nRebased-From: 3b69a08c53c2ef738f32c270fdacf1e4ed5a4c97",
      "tree": {
        "sha": "4f724420b8cea2c67c506020a55b3d9473b29415",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f724420b8cea2c67c506020a55b3d9473b29415"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e31b1d48d4da31bf32e1e4123c7e5d662490826",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e31b1d48d4da31bf32e1e4123c7e5d662490826",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e31b1d48d4da31bf32e1e4123c7e5d662490826",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e31b1d48d4da31bf32e1e4123c7e5d662490826/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47c02a8ae8b406a1a7d7004b2a0337a1f32420e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47c02a8ae8b406a1a7d7004b2a0337a1f32420e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47c02a8ae8b406a1a7d7004b2a0337a1f32420e9"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4f357e297d79e6cd89a0ed27abe43553beeb6b21",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e31b1d48d4da31bf32e1e4123c7e5d662490826/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e31b1d48d4da31bf32e1e4123c7e5d662490826/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=2e31b1d48d4da31bf32e1e4123c7e5d662490826",
        "patch": "@@ -99,15 +99,18 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n                 progressDelta = progressStart-sample.second;\n                 timeDelta = blockProcessTime[0].first - sample.first;\n                 progressPerHour = progressDelta/(double)timeDelta*1000*3600;\n-                remainingMSecs = remainingProgress / progressDelta * timeDelta;\n+                remainingMSecs = (progressDelta > 0) ? remainingProgress / progressDelta * timeDelta : -1;\n                 break;\n             }\n         }\n         // show progress increase per hour\n         ui->progressIncreasePerH->setText(QString::number(progressPerHour*100, 'f', 2)+\"%\");\n \n-        // show expected remaining time\n-        ui->expectedTimeLeft->setText(GUIUtil::formatNiceTimeOffset(remainingMSecs/1000.0));\n+        if(remainingMSecs >= 0) {\t\n+            ui->expectedTimeLeft->setText(GUIUtil::formatNiceTimeOffset(remainingMSecs / 1000.0));\n+        } else {\n+            ui->expectedTimeLeft->setText(QObject::tr(\"unknown\"));\n+        }\n \n         static const int MAX_SAMPLES = 5000;\n         if (blockProcessTime.count() > MAX_SAMPLES)\n@@ -169,4 +172,4 @@ void ModalOverlay::closeClicked()\n {\n     showHide(true);\n     userClosed = true;\n-}\n+}\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "921542e0bde120cc5e36e6c400b9fcd486c73cdf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjE1NDJlMGJkZTEyMGNjNWUzNmU2YzQwMGI5ZmNkNDg2YzczY2Rm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-07T16:16:34Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T17:23:55Z"
      },
      "message": "rpc: update cli for estimatefee argument rename\n\nThe first argument of estimatesmartfee was renamed from nblocks to\nconf_target in 06bcdb8da64502a64df03f3c89fbc6ccb72cd349. Update the\nclient-side table as well.\n\nGithub-Pull: #11267\nRebased-From: 24697c40ee6739b812259140042d426c81179977",
      "tree": {
        "sha": "278666f7aced93efef9dad23dba77414f047d474",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/278666f7aced93efef9dad23dba77414f047d474"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/921542e0bde120cc5e36e6c400b9fcd486c73cdf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/921542e0bde120cc5e36e6c400b9fcd486c73cdf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/921542e0bde120cc5e36e6c400b9fcd486c73cdf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/921542e0bde120cc5e36e6c400b9fcd486c73cdf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e31b1d48d4da31bf32e1e4123c7e5d662490826",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e31b1d48d4da31bf32e1e4123c7e5d662490826",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e31b1d48d4da31bf32e1e4123c7e5d662490826"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7c1c4c55a750c14045833d0f0c19f20005873eba",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/921542e0bde120cc5e36e6c400b9fcd486c73cdf/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/921542e0bde120cc5e36e6c400b9fcd486c73cdf/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=921542e0bde120cc5e36e6c400b9fcd486c73cdf",
        "patch": "@@ -116,7 +116,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"getrawmempool\", 0, \"verbose\" },\n     { \"estimatefee\", 0, \"nblocks\" },\n     { \"estimatesmartfee\", 0, \"nblocks\" },\n-    { \"estimaterawfee\", 0, \"nblocks\" },\n+    { \"estimaterawfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 1, \"threshold\" },\n     { \"prioritisetransaction\", 1, \"dummy\" },\n     { \"prioritisetransaction\", 2, \"fee_delta\" },"
      }
    ]
  },
  {
    "sha": "b1a6c946838fb070fe3079084b800836c7d5ddfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWE2Yzk0NjgzOGZiMDcwZmUzMDc5MDg0YjgwMDgzNmM3ZDVkZGZh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-07T17:15:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T17:30:27Z"
      },
      "message": "rpc: make estimatesmartfee argument naming consistent with documentation\n\nGithub-Pull: #11267\nRebased-From: 5acd82de9ad6df8cab922da66d49b8ff2bd35439",
      "tree": {
        "sha": "f26c16e2d4f541b1b821d94b63fe0826c840c7b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f26c16e2d4f541b1b821d94b63fe0826c840c7b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1a6c946838fb070fe3079084b800836c7d5ddfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1a6c946838fb070fe3079084b800836c7d5ddfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1a6c946838fb070fe3079084b800836c7d5ddfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1a6c946838fb070fe3079084b800836c7d5ddfa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "921542e0bde120cc5e36e6c400b9fcd486c73cdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/921542e0bde120cc5e36e6c400b9fcd486c73cdf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/921542e0bde120cc5e36e6c400b9fcd486c73cdf"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "406ad2f6ec6032f65be8fbe170b85d35247e7c99",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1a6c946838fb070fe3079084b800836c7d5ddfa/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1a6c946838fb070fe3079084b800836c7d5ddfa/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=b1a6c946838fb070fe3079084b800836c7d5ddfa",
        "patch": "@@ -115,7 +115,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },\n     { \"estimatefee\", 0, \"nblocks\" },\n-    { \"estimatesmartfee\", 0, \"nblocks\" },\n+    { \"estimatesmartfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 1, \"threshold\" },\n     { \"prioritisetransaction\", 1, \"dummy\" },"
      }
    ]
  },
  {
    "sha": "19d63e8a939abb89385fc5758771351cbe650ffe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOWQ2M2U4YTkzOWFiYjg5Mzg1ZmM1NzU4NzcxMzUxY2JlNjUwZmZl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-09-15T04:07:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T17:51:35Z"
      },
      "message": "Remove custom fee radio group\n\nRemoves the extraneous custom fee radio group and its single radio\nbutton. The radio button is replaced with a label that has the\nradio button's text.\n\nGithub-Pull: #11334\nRebased-From: e53fa4a1ca58ef46416c4a96542722601fb75c5a",
      "tree": {
        "sha": "3c4134efe84c3550f6ec978f5e2615df29314f5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c4134efe84c3550f6ec978f5e2615df29314f5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19d63e8a939abb89385fc5758771351cbe650ffe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19d63e8a939abb89385fc5758771351cbe650ffe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19d63e8a939abb89385fc5758771351cbe650ffe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19d63e8a939abb89385fc5758771351cbe650ffe/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1a6c946838fb070fe3079084b800836c7d5ddfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1a6c946838fb070fe3079084b800836c7d5ddfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1a6c946838fb070fe3079084b800836c7d5ddfa"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 3,
      "deletions": 20
    },
    "files": [
      {
        "sha": "a0e48334c1b5b4394ed5f7b96a1a1ee3e5eaed1e",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19d63e8a939abb89385fc5758771351cbe650ffe/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19d63e8a939abb89385fc5758771351cbe650ffe/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=19d63e8a939abb89385fc5758771351cbe650ffe",
        "patch": "@@ -846,19 +846,13 @@\n                <item>\n                 <layout class=\"QHBoxLayout\" name=\"horizontalLayoutFee13\">\n                  <item>\n-                  <widget class=\"QRadioButton\" name=\"radioCustomPerKilobyte\">\n+                  <widget class=\"QLabel\" name=\"labelCustomPerKilobyte\">\n                    <property name=\"toolTip\">\n                     <string>If the custom fee is set to 1000 satoshis and the transaction is only 250 bytes, then &quot;per kilobyte&quot; only pays 250 satoshis in fee, while &quot;total at least&quot; pays 1000 satoshis. For transactions bigger than a kilobyte both pay by kilobyte.</string>\n                    </property>\n                    <property name=\"text\">\n                     <string>per kilobyte</string>\n                    </property>\n-                   <property name=\"checked\">\n-                    <bool>true</bool>\n-                   </property>\n-                   <attribute name=\"buttonGroup\">\n-                    <string notr=\"true\">groupCustomFee</string>\n-                   </attribute>\n                   </widget>\n                  </item>\n                  <item>\n@@ -1285,6 +1279,5 @@\n  <connections/>\n  <buttongroups>\n   <buttongroup name=\"groupFee\"/>\n-  <buttongroup name=\"groupCustomFee\"/>\n  </buttongroups>\n </ui>"
      },
      {
        "sha": "96adae73daf6849091eabdd5ef28828d2e8d6e4f",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 12,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19d63e8a939abb89385fc5758771351cbe650ffe/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19d63e8a939abb89385fc5758771351cbe650ffe/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=19d63e8a939abb89385fc5758771351cbe650ffe",
        "patch": "@@ -114,10 +114,6 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n         settings.setValue(\"nFeeRadio\", 1); // custom\n     if (!settings.contains(\"nFeeRadio\"))\n         settings.setValue(\"nFeeRadio\", 0); // recommended\n-    if (!settings.contains(\"nCustomFeeRadio\") && settings.contains(\"nTransactionFee\") && settings.value(\"nTransactionFee\").toLongLong() > 0) // compatibility\n-        settings.setValue(\"nCustomFeeRadio\", 1); // total at least\n-    if (!settings.contains(\"nCustomFeeRadio\"))\n-        settings.setValue(\"nCustomFeeRadio\", 0); // per kilobyte\n     if (!settings.contains(\"nSmartFeeSliderPosition\"))\n         settings.setValue(\"nSmartFeeSliderPosition\", 0);\n     if (!settings.contains(\"nTransactionFee\"))\n@@ -127,8 +123,6 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n     ui->groupFee->setId(ui->radioSmartFee, 0);\n     ui->groupFee->setId(ui->radioCustomFee, 1);\n     ui->groupFee->button((int)std::max(0, std::min(1, settings.value(\"nFeeRadio\").toInt())))->setChecked(true);\n-    ui->groupCustomFee->setId(ui->radioCustomPerKilobyte, 0);\n-    ui->groupCustomFee->button(0)->setChecked(true);\n     ui->customFee->setValue(settings.value(\"nTransactionFee\").toLongLong());\n     ui->checkBoxMinimumFee->setChecked(settings.value(\"fPayOnlyMinFee\").toBool());\n     minimizeFeeSection(settings.value(\"fFeeSectionMinimized\").toBool());\n@@ -178,7 +172,6 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(updateFeeSectionControls()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(coinControlUpdateLabels()));\n-        connect(ui->groupCustomFee, SIGNAL(buttonClicked(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->customFee, SIGNAL(valueChanged()), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(setMinimumFee()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateFeeSectionControls()));\n@@ -214,7 +207,6 @@ SendCoinsDialog::~SendCoinsDialog()\n     QSettings settings;\n     settings.setValue(\"fFeeSectionMinimized\", fFeeMinimized);\n     settings.setValue(\"nFeeRadio\", ui->groupFee->checkedId());\n-    settings.setValue(\"nCustomFeeRadio\", ui->groupCustomFee->checkedId());\n     settings.setValue(\"nConfTarget\", getConfTargetForIndex(ui->confTargetSelector->currentIndex()));\n     settings.setValue(\"nTransactionFee\", (qint64)ui->customFee->value());\n     settings.setValue(\"fPayOnlyMinFee\", ui->checkBoxMinimumFee->isChecked());\n@@ -609,7 +601,6 @@ void SendCoinsDialog::on_buttonMinimizeFee_clicked()\n \n void SendCoinsDialog::setMinimumFee()\n {\n-    ui->radioCustomPerKilobyte->setChecked(true);\n     ui->customFee->setValue(CWallet::GetRequiredFee(1000));\n }\n \n@@ -622,7 +613,7 @@ void SendCoinsDialog::updateFeeSectionControls()\n     ui->labelFeeEstimation      ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->checkBoxMinimumFee      ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->labelMinFeeWarning      ->setEnabled(ui->radioCustomFee->isChecked());\n-    ui->radioCustomPerKilobyte  ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n+    ui->labelCustomPerKilobyte  ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n     ui->customFee               ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n }\n \n@@ -634,8 +625,7 @@ void SendCoinsDialog::updateFeeMinimizedLabel()\n     if (ui->radioSmartFee->isChecked())\n         ui->labelFeeMinimized->setText(ui->labelSmartFee->text());\n     else {\n-        ui->labelFeeMinimized->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), ui->customFee->value()) +\n-            ((ui->radioCustomPerKilobyte->isChecked()) ? \"/kB\" : \"\"));\n+        ui->labelFeeMinimized->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), ui->customFee->value()) + \"/kB\");\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "6642558078deaae2bdf1d85ed2156eb23ba004b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjQyNTU4MDc4ZGVhYWUyYmRmMWQ4NWVkMjE1NmViMjNiYTAwNGIw",
    "commit": {
      "author": {
        "name": "Lucas Betschart",
        "email": "lucasbetschart@gmail.com",
        "date": "2017-08-06T20:55:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T18:03:42Z"
      },
      "message": "[Qt] Add delay before filtering transactions\nFixes 3141\n\nGithub-Pull: #11015\nRebased-From: 7b137acedd5e2ff3fe5395a927c546a528b0cac6",
      "tree": {
        "sha": "8808e91fade3204dc70893a5a377c5be95104c4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8808e91fade3204dc70893a5a377c5be95104c4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6642558078deaae2bdf1d85ed2156eb23ba004b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6642558078deaae2bdf1d85ed2156eb23ba004b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6642558078deaae2bdf1d85ed2156eb23ba004b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6642558078deaae2bdf1d85ed2156eb23ba004b0/comments",
    "author": {
      "login": "lclc",
      "id": 1846033,
      "node_id": "MDQ6VXNlcjE4NDYwMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1846033?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lclc",
      "html_url": "https://github.com/lclc",
      "followers_url": "https://api.github.com/users/lclc/followers",
      "following_url": "https://api.github.com/users/lclc/following{/other_user}",
      "gists_url": "https://api.github.com/users/lclc/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lclc/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lclc/subscriptions",
      "organizations_url": "https://api.github.com/users/lclc/orgs",
      "repos_url": "https://api.github.com/users/lclc/repos",
      "events_url": "https://api.github.com/users/lclc/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lclc/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19d63e8a939abb89385fc5758771351cbe650ffe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19d63e8a939abb89385fc5758771351cbe650ffe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19d63e8a939abb89385fc5758771351cbe650ffe"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 22,
      "deletions": 9
    },
    "files": [
      {
        "sha": "39dfdb587c2a6c1d0288a400d8dbb7e4551bfa8b",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 7,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6642558078deaae2bdf1d85ed2156eb23ba004b0/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6642558078deaae2bdf1d85ed2156eb23ba004b0/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=6642558078deaae2bdf1d85ed2156eb23ba004b0",
        "patch": "@@ -33,6 +33,7 @@\n #include <QScrollBar>\n #include <QSignalMapper>\n #include <QTableView>\n+#include <QTimer>\n #include <QUrl>\n #include <QVBoxLayout>\n \n@@ -112,6 +113,17 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     amountWidget->setValidator(new QDoubleValidator(0, 1e20, 8, this));\n     hlayout->addWidget(amountWidget);\n \n+    // Delay before filtering transactions in ms\n+    static const int input_filter_delay = 200;\n+\n+    QTimer* amount_typing_delay = new QTimer(this);\n+    amount_typing_delay->setSingleShot(true);\n+    amount_typing_delay->setInterval(input_filter_delay);\n+\n+    QTimer* prefix_typing_delay = new QTimer(this);\n+    prefix_typing_delay->setSingleShot(true);\n+    prefix_typing_delay->setInterval(input_filter_delay);\n+\n     QVBoxLayout *vlayout = new QVBoxLayout(this);\n     vlayout->setContentsMargins(0,0,0,0);\n     vlayout->setSpacing(0);\n@@ -173,8 +185,10 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     connect(dateWidget, SIGNAL(activated(int)), this, SLOT(chooseDate(int)));\n     connect(typeWidget, SIGNAL(activated(int)), this, SLOT(chooseType(int)));\n     connect(watchOnlyWidget, SIGNAL(activated(int)), this, SLOT(chooseWatchonly(int)));\n-    connect(addressWidget, SIGNAL(textChanged(QString)), this, SLOT(changedPrefix(QString)));\n-    connect(amountWidget, SIGNAL(textChanged(QString)), this, SLOT(changedAmount(QString)));\n+    connect(amountWidget, SIGNAL(textChanged(QString)), amount_typing_delay, SLOT(start()));\n+    connect(amount_typing_delay, SIGNAL(timeout()), this, SLOT(changedAmount()));\n+    connect(addressWidget, SIGNAL(textChanged(QString)), prefix_typing_delay, SLOT(start()));\n+    connect(prefix_typing_delay, SIGNAL(timeout()), this, SLOT(changedPrefix()));\n \n     connect(view, SIGNAL(doubleClicked(QModelIndex)), this, SIGNAL(doubleClicked(QModelIndex)));\n     connect(view, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(contextualMenu(QPoint)));\n@@ -312,20 +326,19 @@ void TransactionView::chooseWatchonly(int idx)\n         (TransactionFilterProxy::WatchOnlyFilter)watchOnlyWidget->itemData(idx).toInt());\n }\n \n-void TransactionView::changedPrefix(const QString &prefix)\n+void TransactionView::changedPrefix()\n {\n     if(!transactionProxyModel)\n         return;\n-    transactionProxyModel->setAddressPrefix(prefix);\n+    transactionProxyModel->setAddressPrefix(addressWidget->text());\n }\n \n-void TransactionView::changedAmount(const QString &amount)\n+void TransactionView::changedAmount()\n {\n     if(!transactionProxyModel)\n         return;\n     CAmount amount_parsed = 0;\n-    if(BitcoinUnits::parse(model->getOptionsModel()->getDisplayUnit(), amount, &amount_parsed))\n-    {\n+    if (BitcoinUnits::parse(model->getOptionsModel()->getDisplayUnit(), amountWidget->text(), &amount_parsed)) {\n         transactionProxyModel->setMinAmount(amount_parsed);\n     }\n     else"
      },
      {
        "sha": "5b4cfd4a88d3822eb1c3559317a53374fd6b651e",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6642558078deaae2bdf1d85ed2156eb23ba004b0/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6642558078deaae2bdf1d85ed2156eb23ba004b0/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=6642558078deaae2bdf1d85ed2156eb23ba004b0",
        "patch": "@@ -112,8 +112,8 @@ public Q_SLOTS:\n     void chooseDate(int idx);\n     void chooseType(int idx);\n     void chooseWatchonly(int idx);\n-    void changedPrefix(const QString &prefix);\n-    void changedAmount(const QString &amount);\n+    void changedAmount();\n+    void changedPrefix();\n     void exportClicked();\n     void focusTransaction(const QModelIndex&);\n "
      }
    ]
  },
  {
    "sha": "8d13b4298c1ca83db0a65c8c8a93bd3be9135754",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDEzYjQyOThjMWNhODNkYjBhNjVjOGM4YTkzYmQzYmU5MTM1NzU0",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-09-15T04:38:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T18:12:07Z"
      },
      "message": "Replace save|restoreWindowGeometry with Qt functions\n\nGithub-Pull: #11335\nRebased-From: 13baf7217bf8394ae02efc376208ae86eac4d0f6",
      "tree": {
        "sha": "8795198b85493731df606d2f5825251b87407540",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8795198b85493731df606d2f5825251b87407540"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d13b4298c1ca83db0a65c8c8a93bd3be9135754",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d13b4298c1ca83db0a65c8c8a93bd3be9135754",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d13b4298c1ca83db0a65c8c8a93bd3be9135754",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d13b4298c1ca83db0a65c8c8a93bd3be9135754/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6642558078deaae2bdf1d85ed2156eb23ba004b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6642558078deaae2bdf1d85ed2156eb23ba004b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6642558078deaae2bdf1d85ed2156eb23ba004b0"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 15,
      "deletions": 36
    },
    "files": [
      {
        "sha": "56373563b81b4b37cf68a773c837453171d7e8b0",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d13b4298c1ca83db0a65c8c8a93bd3be9135754/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d13b4298c1ca83db0a65c8c8a93bd3be9135754/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=8d13b4298c1ca83db0a65c8c8a93bd3be9135754",
        "patch": "@@ -123,7 +123,11 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *_platformStyle, const NetworkStyle *\n     spinnerFrame(0),\n     platformStyle(_platformStyle)\n {\n-    GUIUtil::restoreWindowGeometry(\"nWindow\", QSize(850, 550), this);\n+    QSettings settings;\n+    if (!restoreGeometry(settings.value(\"MainWindowGeometry\").toByteArray())) {\n+        // Restore failed (perhaps missing setting), center the window\n+        move(QApplication::desktop()->availableGeometry().center() - frameGeometry().center());\n+    }\n \n     QString windowTitle = tr(PACKAGE_NAME) + \" - \";\n #ifdef ENABLE_WALLET\n@@ -261,7 +265,8 @@ BitcoinGUI::~BitcoinGUI()\n     // Unsubscribe from notifications from core\n     unsubscribeFromCoreSignals();\n \n-    GUIUtil::saveWindowGeometry(\"nWindow\", this);\n+    QSettings settings;\n+    settings.setValue(\"MainWindowGeometry\", saveGeometry());\n     if(trayIcon) // Hide tray icon, as deleting will let it linger until quit (on Ubuntu)\n         trayIcon->hide();\n #ifdef Q_OS_MAC"
      },
      {
        "sha": "69c3e06869639ec25d7e39261bc13cb193997d44",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d13b4298c1ca83db0a65c8c8a93bd3be9135754/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d13b4298c1ca83db0a65c8c8a93bd3be9135754/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=8d13b4298c1ca83db0a65c8c8a93bd3be9135754",
        "patch": "@@ -842,32 +842,6 @@ bool SetStartOnSystemStartup(bool fAutoStart) { return false; }\n \n #endif\n \n-void saveWindowGeometry(const QString& strSetting, QWidget *parent)\n-{\n-    QSettings settings;\n-    settings.setValue(strSetting + \"Pos\", parent->pos());\n-    settings.setValue(strSetting + \"Size\", parent->size());\n-}\n-\n-void restoreWindowGeometry(const QString& strSetting, const QSize& defaultSize, QWidget *parent)\n-{\n-    QSettings settings;\n-    QPoint pos = settings.value(strSetting + \"Pos\").toPoint();\n-    QSize size = settings.value(strSetting + \"Size\", defaultSize).toSize();\n-\n-    parent->resize(size);\n-    parent->move(pos);\n-\n-    if ((!pos.x() && !pos.y()) || (QApplication::desktop()->screenNumber(parent) == -1))\n-    {\n-        QRect screen = QApplication::desktop()->screenGeometry();\n-        QPoint defaultPos((screen.width() - defaultSize.width()) / 2,\n-                          (screen.height() - defaultSize.height()) / 2);\n-        parent->resize(defaultSize);\n-        parent->move(defaultPos);\n-    }\n-}\n-\n void setClipboard(const QString& str)\n {\n     QApplication::clipboard()->setText(str, QClipboard::Clipboard);"
      },
      {
        "sha": "d10818d0c88e9804497266e5eb738d3948e484e0",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d13b4298c1ca83db0a65c8c8a93bd3be9135754/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d13b4298c1ca83db0a65c8c8a93bd3be9135754/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=8d13b4298c1ca83db0a65c8c8a93bd3be9135754",
        "patch": "@@ -179,11 +179,6 @@ namespace GUIUtil\n     bool GetStartOnSystemStartup();\n     bool SetStartOnSystemStartup(bool fAutoStart);\n \n-    /** Save window size and position */\n-    void saveWindowGeometry(const QString& strSetting, QWidget *parent);\n-    /** Restore window size and position */\n-    void restoreWindowGeometry(const QString& strSetting, const QSize &defaultSizeIn, QWidget *parent);\n-\n     /* Convert QString to OS specific boost path through UTF-8 */\n     fs::path qstringToBoostPath(const QString &path);\n "
      },
      {
        "sha": "d895fc16630c96c621bd2c358adcb7499d156781",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d13b4298c1ca83db0a65c8c8a93bd3be9135754/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d13b4298c1ca83db0a65c8c8a93bd3be9135754/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=8d13b4298c1ca83db0a65c8c8a93bd3be9135754",
        "patch": "@@ -28,6 +28,7 @@\n #include <wallet/wallet.h>\n #endif\n \n+#include <QDesktopWidget>\n #include <QKeyEvent>\n #include <QMenu>\n #include <QMessageBox>\n@@ -428,7 +429,11 @@ RPCConsole::RPCConsole(const PlatformStyle *_platformStyle, QWidget *parent) :\n     consoleFontSize(0)\n {\n     ui->setupUi(this);\n-    GUIUtil::restoreWindowGeometry(\"nRPCConsoleWindow\", this->size(), this);\n+    QSettings settings;\n+    if (!restoreGeometry(settings.value(\"RPCConsoleWindowGeometry\").toByteArray())) {\n+        // Restore failed (perhaps missing setting), center the window\n+        move(QApplication::desktop()->availableGeometry().center() - frameGeometry().center());\n+    }\n \n     ui->openDebugLogfileButton->setToolTip(ui->openDebugLogfileButton->toolTip().arg(tr(PACKAGE_NAME)));\n \n@@ -466,14 +471,14 @@ RPCConsole::RPCConsole(const PlatformStyle *_platformStyle, QWidget *parent) :\n     ui->detailWidget->hide();\n     ui->peerHeading->setText(tr(\"Select a peer to view detailed information.\"));\n \n-    QSettings settings;\n     consoleFontSize = settings.value(fontSizeSettingsKey, QFontInfo(QFont()).pointSize()).toInt();\n     clear();\n }\n \n RPCConsole::~RPCConsole()\n {\n-    GUIUtil::saveWindowGeometry(\"nRPCConsoleWindow\", this);\n+    QSettings settings;\n+    settings.setValue(\"RPCConsoleWindowGeometry\", saveGeometry());\n     RPCUnsetTimerInterface(rpcTimerInterface);\n     delete rpcTimerInterface;\n     delete ui;"
      }
    ]
  },
  {
    "sha": "75997c3b35db39031a222e2d63da83e67cc9397c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTk5N2MzYjM1ZGIzOTAzMWEyMjJlMmQ2M2RhODNlNjdjYzkzOTdj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-21T00:19:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T18:12:07Z"
      },
      "message": "Disallow uncompressed pubkeys in bitcoin-tx [multisig] output adds\n\nGithub-Pull: #11377\nRebased-From: 28d4542a0ac77a30a242d0568e580a5b437f53fa",
      "tree": {
        "sha": "a55618c338b8275925bb301abd2fd3a86927a760",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a55618c338b8275925bb301abd2fd3a86927a760"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75997c3b35db39031a222e2d63da83e67cc9397c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75997c3b35db39031a222e2d63da83e67cc9397c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75997c3b35db39031a222e2d63da83e67cc9397c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75997c3b35db39031a222e2d63da83e67cc9397c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d13b4298c1ca83db0a65c8c8a93bd3be9135754",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d13b4298c1ca83db0a65c8c8a93bd3be9135754",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d13b4298c1ca83db0a65c8c8a93bd3be9135754"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 53,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3b62a106031c86f431981d4bae5f5447ef0efea1",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75997c3b35db39031a222e2d63da83e67cc9397c/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75997c3b35db39031a222e2d63da83e67cc9397c/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=75997c3b35db39031a222e2d63da83e67cc9397c",
        "patch": "@@ -249,6 +249,7 @@ EXTRA_DIST += \\\n     test/util/data/txcreatemultisig3.json \\\n     test/util/data/txcreatemultisig4.hex \\\n     test/util/data/txcreatemultisig4.json \\\n+    test/util/data/txcreatemultisig5.json \\\n     test/util/data/txcreateoutpubkey1.hex \\\n     test/util/data/txcreateoutpubkey1.json \\\n     test/util/data/txcreateoutpubkey2.hex \\"
      },
      {
        "sha": "0f2c19bd5df7206814499f232993bd76b5798c42",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75997c3b35db39031a222e2d63da83e67cc9397c/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75997c3b35db39031a222e2d63da83e67cc9397c/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=75997c3b35db39031a222e2d63da83e67cc9397c",
        "patch": "@@ -310,6 +310,9 @@ static void MutateTxAddOutPubKey(CMutableTransaction& tx, const std::string& str\n     }\n \n     if (bSegWit) {\n+        if (!pubkey.IsCompressed()) {\n+            throw std::runtime_error(\"Uncompressed pubkeys are not useable for SegWit outputs\");\n+        }\n         // Call GetScriptForWitness() to build a P2WSH scriptPubKey\n         scriptPubKey = GetScriptForWitness(scriptPubKey);\n     }\n@@ -377,6 +380,11 @@ static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& s\n     CScript scriptPubKey = GetScriptForMultisig(required, pubkeys);\n \n     if (bSegWit) {\n+        for (CPubKey& pubkey : pubkeys) {\n+            if (!pubkey.IsCompressed()) {\n+                throw std::runtime_error(\"Uncompressed pubkeys are not useable for SegWit outputs\");\n+            }\n+        }\n         // Call GetScriptForWitness() to build a P2WSH scriptPubKey\n         scriptPubKey = GetScriptForWitness(scriptPubKey);\n     }"
      },
      {
        "sha": "89b28bba6ced9ccd0633221405bc27cfaeac23dd",
        "filename": "test/util/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75997c3b35db39031a222e2d63da83e67cc9397c/test/util/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75997c3b35db39031a222e2d63da83e67cc9397c/test/util/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/bitcoin-util-test.json?ref=75997c3b35db39031a222e2d63da83e67cc9397c",
        "patch": "@@ -261,6 +261,13 @@\n     \"output_cmp\": \"txcreateoutpubkey3.json\",\n     \"description\": \"Creates a new transaction with a single pay-to-pub-key output, wrapped in P2SH (output as json)\"\n   },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-json\", \"-create\", \"outpubkey=0:047d1368ba7ae01c94bc32293efd70bd7e3be7aa7912d07d0b1c659c1008d179b8642f5fb90f47580feb29f045e216ff5a4716d3a0fed36da414d332046303c44a:WS\", \"nversion=1\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"error: Uncompressed pubkeys are not useable for SegWit outputs\",\n+    \"description\": \"Creates a new transaction with a single pay-to-pub-key output, wrapped in P2SH (output as json)\"\n+  },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\",\n@@ -388,5 +395,16 @@\n     \"args\": [\"-json\", \"-create\", \"outmultisig=1:2:3:02a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff397:021ac43c7ff740014c3b33737ede99c967e4764553d1b2b83db77c83b8715fa72d:02df2089105c77f266fa11a9d33f05c735234075f2e8780824c6b709415f9fb485:WS\", \"nversion=1\"],\n     \"output_cmp\": \"txcreatemultisig4.json\",\n     \"description\": \"Creates a new transaction with a single 2-of-3 multisig in a P2WSH output, wrapped in P2SH (output in json)\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-json\", \"-create\", \"outmultisig=1:2:3:02a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff397:021ac43c7ff740014c3b33737ede99c967e4764553d1b2b83db77c83b8715fa72d:047d1368ba7ae01c94bc32293efd70bd7e3be7aa7912d07d0b1c659c1008d179b8642f5fb90f47580feb29f045e216ff5a4716d3a0fed36da414d332046303c44a:S\"],\n+    \"output_cmp\": \"txcreatemultisig5.json\",\n+    \"description\": \"Uncompressed pubkeys should work just fine for non-witness outputs\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-json\", \"-create\", \"outmultisig=1:2:3:02a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff397:021ac43c7ff740014c3b33737ede99c967e4764553d1b2b83db77c83b8715fa72d:047d1368ba7ae01c94bc32293efd70bd7e3be7aa7912d07d0b1c659c1008d179b8642f5fb90f47580feb29f045e216ff5a4716d3a0fed36da414d332046303c44a:WS\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"error: Uncompressed pubkeys are not useable for SegWit outputs\",\n+    \"description\": \"Ensure adding witness outputs with uncompressed pubkeys fails\"\n   }\n ]"
      },
      {
        "sha": "20e9bb077bbf5bc85bc4a60876e7061dbd7e6960",
        "filename": "test/util/data/txcreatemultisig5.json",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75997c3b35db39031a222e2d63da83e67cc9397c/test/util/data/txcreatemultisig5.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75997c3b35db39031a222e2d63da83e67cc9397c/test/util/data/txcreatemultisig5.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatemultisig5.json?ref=75997c3b35db39031a222e2d63da83e67cc9397c",
        "patch": "@@ -0,0 +1,26 @@\n+{\n+    \"txid\": \"813cf75e1f08debd242ef7c8192b7d478fb651355209369499a0de779ba7eb2f\",\n+    \"hash\": \"813cf75e1f08debd242ef7c8192b7d478fb651355209369499a0de779ba7eb2f\",\n+    \"version\": 2,\n+    \"size\": 42,\n+    \"vsize\": 42,\n+    \"locktime\": 0,\n+    \"vin\": [\n+    ],\n+    \"vout\": [\n+        {\n+            \"value\": 1.00000000,\n+            \"n\": 0,\n+            \"scriptPubKey\": {\n+                \"asm\": \"OP_HASH160 a4051c02398868af83f28f083208fae99a769263 OP_EQUAL\",\n+                \"hex\": \"a914a4051c02398868af83f28f083208fae99a76926387\",\n+                \"reqSigs\": 1,\n+                \"type\": \"scripthash\",\n+                \"addresses\": [\n+                    \"3GeGs1eHUxPz5YyuFe9WPpXid2UsUb5Jos\"\n+                ]\n+            }\n+        }\n+    ],\n+    \"hex\": \"02000000000100e1f5050000000017a914a4051c02398868af83f28f083208fae99a7692638700000000\"\n+}"
      }
    ]
  },
  {
    "sha": "8b61aee69026b03dfd5ebdb29c8d27a2b87462d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YjYxYWVlNjkwMjZiMDNkZmQ1ZWJkYjI5YzhkMjdhMmI4NzQ2MmQx",
    "commit": {
      "author": {
        "name": "Paul Berg",
        "email": "paul.berg@inl.gov",
        "date": "2017-09-13T07:24:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T18:18:01Z"
      },
      "message": "Put back inadvertently removed copyright notices\n\nIn an abundance of caution this restores \"Bitcoin Developers\" to the COPYING file in\ncase there were contributors before that point in time that would object to the\ncurrent label.  It's harmless and more pedantically correct.\n\n[Change extracted from the Bitcoin-abc repository, commit message by gmaxwell]\n\nSigned-off-by: Gregory Maxwell <greg@xiph.org>\n\nGithub-Pull: #11318\nRebased-From: d552ed678c2632bafeab695c639f5fe185dc9853",
      "tree": {
        "sha": "854f64dee26c689874b86a80d24f23264598cb64",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/854f64dee26c689874b86a80d24f23264598cb64"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b61aee69026b03dfd5ebdb29c8d27a2b87462d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b61aee69026b03dfd5ebdb29c8d27a2b87462d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b61aee69026b03dfd5ebdb29c8d27a2b87462d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b61aee69026b03dfd5ebdb29c8d27a2b87462d1/comments",
    "author": {
      "login": "paulberg",
      "id": 3239883,
      "node_id": "MDQ6VXNlcjMyMzk4ODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3239883?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paulberg",
      "html_url": "https://github.com/paulberg",
      "followers_url": "https://api.github.com/users/paulberg/followers",
      "following_url": "https://api.github.com/users/paulberg/following{/other_user}",
      "gists_url": "https://api.github.com/users/paulberg/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paulberg/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paulberg/subscriptions",
      "organizations_url": "https://api.github.com/users/paulberg/orgs",
      "repos_url": "https://api.github.com/users/paulberg/repos",
      "events_url": "https://api.github.com/users/paulberg/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paulberg/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75997c3b35db39031a222e2d63da83e67cc9397c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75997c3b35db39031a222e2d63da83e67cc9397c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75997c3b35db39031a222e2d63da83e67cc9397c"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "45d51c3c7851ed2043b6b540f31fcd0d54dc861f",
        "filename": "COPYING",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b61aee69026b03dfd5ebdb29c8d27a2b87462d1/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b61aee69026b03dfd5ebdb29c8d27a2b87462d1/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/COPYING?ref=8b61aee69026b03dfd5ebdb29c8d27a2b87462d1",
        "patch": "@@ -1,6 +1,7 @@\n The MIT License (MIT)\n \n Copyright (c) 2009-2017 The Bitcoin Core developers\n+Copyright (c) 2009-2017 Bitcoin Developers\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
      }
    ]
  },
  {
    "sha": "62d18cdb893fea92680a6f382bb8b3e8ca157bcf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MmQxOGNkYjg5M2ZlYTkyNjgwYTZmMzgyYmI4YjNlOGNhMTU3YmNm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T16:09:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T18:28:38Z"
      },
      "message": "doc: Prepare release notes for 0.15.1",
      "tree": {
        "sha": "ced5bfc1f3924363eb8179cfed4588c7ac54f32a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ced5bfc1f3924363eb8179cfed4588c7ac54f32a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/62d18cdb893fea92680a6f382bb8b3e8ca157bcf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62d18cdb893fea92680a6f382bb8b3e8ca157bcf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/62d18cdb893fea92680a6f382bb8b3e8ca157bcf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62d18cdb893fea92680a6f382bb8b3e8ca157bcf/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b61aee69026b03dfd5ebdb29c8d27a2b87462d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b61aee69026b03dfd5ebdb29c8d27a2b87462d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b61aee69026b03dfd5ebdb29c8d27a2b87462d1"
      }
    ],
    "stats": {
      "total": 993,
      "additions": 975,
      "deletions": 18
    },
    "files": [
      {
        "sha": "ef8de316a505ed080e336f89553d57b848c6ec43",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 10,
        "deletions": 18,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62d18cdb893fea92680a6f382bb8b3e8ca157bcf/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62d18cdb893fea92680a6f382bb8b3e8ca157bcf/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=62d18cdb893fea92680a6f382bb8b3e8ca157bcf",
        "patch": "@@ -1,8 +1,12 @@\n-Bitcoin Core version *0.15.0.1* is now available from:\n+(note: this is a temporary file, to be added-to by anybody, and moved to\n+release-notes at release time)\n \n-  <https://bitcoin.org/bin/bitcoin-core-0.15.0.1/>\n+Bitcoin Core version *0.15.1* is now available from:\n \n-This is a minor bug fix for 0.15.0.\n+  <https://bitcoin.org/bin/bitcoin-core-0.15.1/>\n+\n+This is a new minor version release, including various bugfixes and\n+performance improvements, as well as updated translations.\n \n Please report bugs using the issue tracker at GitHub:\n \n@@ -56,28 +60,16 @@ frequently tested on them.\n Notable changes\n ===============\n \n-GUI startup crash issue\n--------------------------\n-\n-After upgrade to 0.15.0, some clients would crash at startup because a custom\n-fee setting was configured that no longer exists in the GUI. This is a minimal\n-patch to avoid this issue from occuring.\n-\n-0.15.0.1 Change log\n-====================\n \n--  #11332 `46c8d23` Fix possible crash with invalid nCustomFeeRadio in QSettings (achow101, TheBlueMatt)\n \n-Also the manpages were updated, as this was forgotten for 0.15.0.\n+0.15.1 Change log\n+=================\n \n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-- Andrew Chow\n-- Matt Corallo\n-- Jonas Schnelli\n-- Wladimir J. van der Laan\n+(fill this in)\n \n As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "53ab02cbb0242957ba3697655d848a9461ab7455",
        "filename": "doc/release-notes/release-notes-0.15.0.1.md",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62d18cdb893fea92680a6f382bb8b3e8ca157bcf/doc/release-notes/release-notes-0.15.0.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62d18cdb893fea92680a6f382bb8b3e8ca157bcf/doc/release-notes/release-notes-0.15.0.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.15.0.1.md?ref=62d18cdb893fea92680a6f382bb8b3e8ca157bcf",
        "patch": "@@ -0,0 +1,87 @@\n+Bitcoin Core version *0.15.0.1* is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.15.0.1/>\n+\n+and\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.15.0.1/>\n+\n+This is a minor bug fix for 0.15.0.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the \n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+The first time you run version 0.15.0 or higher, your chainstate database will\n+be converted to a new format, which will take anywhere from a few minutes to\n+half an hour, depending on the speed of your machine.\n+\n+The file format of `fee_estimates.dat` changed in version 0.15.0. Hence, a\n+downgrade from version 0.15.0 or upgrade to version 0.15.0 will cause all fee\n+estimates to be discarded.\n+\n+Note that the block database format also changed in version 0.8.0 and there is no\n+automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n+directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n+However, as usual, old wallet versions are still supported.\n+\n+Downgrading warning\n+-------------------\n+\n+The chainstate database for this release is not compatible with previous\n+releases, so if you run 0.15 and then decide to switch back to any\n+older version, you will need to run the old release with the `-reindex-chainstate`\n+option to rebuild the chainstate data structures in the old format.\n+\n+If your node has pruning enabled, this will entail re-downloading and\n+processing the entire blockchain.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is extensively tested on multiple operating systems using\n+the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+frequently tested on them.\n+\n+Notable changes\n+===============\n+\n+GUI startup crash issue\n+-------------------------\n+\n+After upgrade to 0.15.0, some clients would crash at startup because a custom\n+fee setting was configured that no longer exists in the GUI. This is a minimal\n+patch to avoid this issue from occuring.\n+\n+0.15.0.1 Change log\n+====================\n+\n+-  #11332 `46c8d23` Fix possible crash with invalid nCustomFeeRadio in QSettings (achow101, TheBlueMatt)\n+\n+Also the manpages were updated, as this was forgotten for 0.15.0.\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Andrew Chow\n+- Matt Corallo\n+- Jonas Schnelli\n+- Wladimir J. van der Laan\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "29816cacf73024538d20e24a261fa9565b05801f",
        "filename": "doc/release-notes/release-notes-0.15.0.md",
        "status": "added",
        "additions": 878,
        "deletions": 0,
        "changes": 878,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/62d18cdb893fea92680a6f382bb8b3e8ca157bcf/doc/release-notes/release-notes-0.15.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/62d18cdb893fea92680a6f382bb8b3e8ca157bcf/doc/release-notes/release-notes-0.15.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.15.0.md?ref=62d18cdb893fea92680a6f382bb8b3e8ca157bcf",
        "patch": "@@ -0,0 +1,878 @@\n+Bitcoin Core version *0.15.0* is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.15.0/>\n+\n+This is a new major version release, including new features, various bugfixes\n+and performance improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the \n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+The first time you run version 0.15.0, your chainstate database will be converted to a\n+new format, which will take anywhere from a few minutes to half an hour,\n+depending on the speed of your machine.\n+\n+The file format of `fee_estimates.dat` changed in version 0.15.0. Hence, a\n+downgrade from version 0.15.0 or upgrade to version 0.15.0 will cause all fee\n+estimates to be discarded.\n+\n+Note that the block database format also changed in version 0.8.0 and there is no\n+automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n+directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n+However, as usual, old wallet versions are still supported.\n+\n+Downgrading warning\n+-------------------\n+\n+The chainstate database for this release is not compatible with previous\n+releases, so if you run 0.15 and then decide to switch back to any\n+older version, you will need to run the old release with the `-reindex-chainstate`\n+option to rebuild the chainstate data structures in the old format.\n+\n+If your node has pruning enabled, this will entail re-downloading and\n+processing the entire blockchain.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is extensively tested on multiple operating systems using\n+the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+frequently tested on them.\n+\n+Notes for 0.15.0\n+================\n+\n+Current SegWit support\n+----------------------\n+\n+Version 0.15.0 supports adding a segregated witness address via the `addwitnessaddress` RPC, but\n+please note that this is a testing/expert RPC, which does not guarantee recovery from backup. Only use\n+this RPC if you know what you are doing. More complete wallet support for segregated witness is coming\n+in a next version.\n+\n+Rescanning with encrypted wallets\n+---------------------------------\n+\n+As in previous versions, when using an encrypted HD wallet, the keypool cannot be topped up without unlocking\n+the wallet. This means that currently, in order to recover from a backup of an encrypted HD wallet, the user\n+must unlock the wallet with a really long timeout and manually trigger a rescan, otherwise they risk missing\n+some keys when auto-topup cannot run. Unfortunately there is no `rescan` RPC in this version, that will be\n+included in a future version, so for now a rescan can be triggered using one of the `import*` commands, using\n+a dummy address generated by another (trusted) wallet.\n+\n+Notable changes\n+===============\n+\n+Performance Improvements\n+------------------------\n+\n+Version 0.15 contains a number of significant performance improvements, which make\n+Initial Block Download, startup, transaction and block validation much faster:\n+\n+- The chainstate database (which is used for tracking UTXOs) has been changed\n+  from a per-transaction model to a per-output model (See [PR 10195](https://github.com/bitcoin/bitcoin/pull/10195)). Advantages of this model\n+  are that it:\n+    - avoids the CPU overhead of deserializing and serializing the unused outputs;\n+    - has more predictable memory usage;\n+    - uses simpler code;\n+    - is adaptable to various future cache flushing strategies.\n+\n+  As a result, validating the blockchain during Initial Block Download (IBD) and reindex\n+  is ~30-40% faster, uses 10-20% less memory, and flushes to disk far less frequently.\n+  The only downside is that the on-disk database is 15% larger. During the conversion from the previous format\n+  a few extra gigabytes may be used.\n+- Earlier versions experienced a spike in memory usage while flushing UTXO updates to disk.\n+  As a result, only half of the available memory was actually used as cache, and the other half was\n+  reserved to accommodate flushing. This is no longer the case (See [PR 10148](https://github.com/bitcoin/bitcoin/pull/10148)), and the entirety of\n+  the available cache (see `-dbcache`) is now actually used as cache. This reduces the flushing\n+  frequency by a factor 2 or more.\n+- In previous versions, signature validation for transactions has been cached when the\n+  transaction is accepted to the mempool. Version 0.15 extends this to cache the entire script\n+  validity (See [PR 10192](https://github.com/bitcoin/bitcoin/pull/10192)). This means that if a transaction in a block has already been accepted to the\n+  mempool, the scriptSig does not need to be re-evaluated. Empirical tests show that\n+  this results in new block validation being 40-50% faster.\n+- LevelDB has been upgraded to version 1.20 (See [PR 10544](https://github.com/bitcoin/bitcoin/pull/10544)). This version contains hardware acceleration for CRC\n+  on architectures supporting SSE 4.2. As a result, synchronization and block validation are now faster.\n+- SHA256 hashing has been optimized for architectures supporting SSE 4 (See [PR 10821](https://github.com/bitcoin/bitcoin/pull/10821)). SHA256 is around\n+  50% faster on supported hardware, which results in around 5% faster IBD and block\n+  validation. In version 0.15, SHA256 hardware optimization is disabled in release builds by\n+  default, but can be enabled by using `--enable-experimental-asm` when building.\n+- Refill of the keypool no longer flushes the wallet between each key which resulted in a ~20x speedup in creating a new wallet. Part of this speedup was used to increase the default keypool to 1000 keys to make recovery more robust. (See [PR 10831](https://github.com/bitcoin/bitcoin/pull/10831)).\n+\n+Fee Estimation Improvements\n+---------------------------\n+\n+Fee estimation has been significantly improved in version 0.15, with more accurate fee estimates used by the wallet and a wider range of options for advanced users of the `estimatesmartfee` and `estimaterawfee` RPCs (See [PR 10199](https://github.com/bitcoin/bitcoin/pull/10199)).\n+\n+### Changes to internal logic and wallet behavior\n+\n+- Internally, estimates are now tracked on 3 different time horizons. This allows for longer targets and means estimates adjust more quickly to changes in conditions.\n+- Estimates can now be *conservative* or *economical*. *Conservative* estimates use longer time horizons to produce an estimate which is less susceptible to rapid changes in fee conditions. *Economical* estimates use shorter time horizons and will be more affected by short-term changes in fee conditions. Economical estimates may be considerably lower during periods of low transaction activity (for example over weekends), but may result in transactions being unconfirmed if prevailing fees increase rapidly.\n+- By default, the wallet will use conservative fee estimates to increase the reliability of transactions being confirmed within the desired target. For transactions that are marked as replaceable, the wallet will use an economical estimate by default, since the fee can be 'bumped' if the fee conditions change rapidly (See [PR 10589](https://github.com/bitcoin/bitcoin/pull/10589)).\n+- Estimates can now be made for confirmation targets up to 1008 blocks (one week).\n+- More data on historical fee rates is stored, leading to more precise fee estimates.\n+- Transactions which leave the mempool due to eviction or other non-confirmed reasons are now taken into account by the fee estimation logic, leading to more accurate fee estimates.\n+- The fee estimation logic will make sure enough data has been gathered to return a meaningful estimate. If there is insufficient data, a fallback default fee is used.\n+\n+### Changes to fee estimate RPCs\n+\n+- The `estimatefee` RPC is now deprecated in favor of using only `estimatesmartfee` (which is the implementation used by the GUI)\n+- The `estimatesmartfee` RPC interface has been changed (See [PR 10707](https://github.com/bitcoin/bitcoin/pull/10707)):\n+    - The `nblocks` argument has been renamed to `conf_target` (to be consistent with other RPC methods).\n+    - An `estimate_mode` argument has been added. This argument takes one of the following strings: `CONSERVATIVE`, `ECONOMICAL` or `UNSET` (which defaults to `CONSERVATIVE`).\n+    - The RPC return object now contains an `errors` member, which returns errors encountered during processing.\n+    - If Bitcoin Core has not been running for long enough and has not seen enough blocks or transactions to produce an accurate fee estimation, an error will be returned (previously a value of -1 was used to indicate an error, which could be confused for a feerate).\n+- A new `estimaterawfee` RPC is added to provide raw fee data. External clients can query and use this data in their own fee estimation logic.\n+\n+Multi-wallet support\n+--------------------\n+\n+Bitcoin Core now supports loading multiple, separate wallets (See [PR 8694](https://github.com/bitcoin/bitcoin/pull/8694), [PR 10849](https://github.com/bitcoin/bitcoin/pull/10849)). The wallets are completely separated, with individual balances, keys and received transactions.\n+\n+Multi-wallet is enabled by using more than one `-wallet` argument when starting Bitcoin, either on the command line or in the Bitcoin config file.\n+\n+**In Bitcoin-Qt, only the first wallet will be displayed and accessible for creating and signing transactions.** GUI selectable multiple wallets will be supported in a future version. However, even in 0.15 other loaded wallets will remain synchronized to the node's current tip in the background. This can be useful if running a pruned node, since loading a wallet where the most recent sync is beyond the pruned height results in having to download and revalidate the whole blockchain. Continuing to synchronize all wallets in the background avoids this problem.\n+\n+Bitcoin Core 0.15.0 contains the following changes to the RPC interface and `bitcoin-cli` for multi-wallet:\n+\n+* When running Bitcoin Core with a single wallet, there are **no** changes to the RPC interface or `bitcoin-cli`. All RPC calls and `bitcoin-cli` commands continue to work as before.\n+* When running Bitcoin Core with multi-wallet, all *node-level* RPC methods continue to work as before. HTTP RPC requests should be send to the normal `<RPC IP address>:<RPC port>/` endpoint, and `bitcoin-cli` commands should be run as before. A *node-level* RPC method is any method which does not require access to the wallet.\n+* When running Bitcoin Core with multi-wallet, *wallet-level* RPC methods must specify the wallet for which they're intended in every request. HTTP RPC requests should be send to the `<RPC IP address>:<RPC port>/wallet/<wallet name>/` endpoint, for example `127.0.0.1:8332/wallet/wallet1.dat/`. `bitcoin-cli` commands should be run with a `-rpcwallet` option, for example `bitcoin-cli -rpcwallet=wallet1.dat getbalance`.\n+* A new *node-level* `listwallets` RPC method is added to display which wallets are currently loaded. The names returned by this method are the same as those used in the HTTP endpoint and for the `rpcwallet` argument.\n+\n+Note that while multi-wallet is now fully supported, the RPC multi-wallet interface should be considered unstable for version 0.15.0, and there may backwards-incompatible changes in future versions.\n+\n+Replace-by-fee control in the GUI\n+---------------------------------\n+\n+Bitcoin Core has supported creating opt-in replace-by-fee (RBF) transactions\n+since version 0.12.0, and since version 0.14.0 has included a `bumpfee` RPC method to\n+replace unconfirmed opt-in RBF transactions with a new transaction that pays\n+a higher fee.\n+\n+In version 0.15, creating an opt-in RBF transaction and replacing the unconfirmed\n+transaction with a higher-fee transaction are both supported in the GUI (See [PR 9592](https://github.com/bitcoin/bitcoin/pull/9592)).\n+\n+Removal of Coin Age Priority\n+----------------------------\n+\n+In previous versions of Bitcoin Core, a portion of each block could be reserved for transactions based on the age and value of UTXOs they spent. This concept (Coin Age Priority) is a policy choice by miners, and there are no consensus rules around the inclusion of Coin Age Priority transactions in blocks. In practice, only a few miners continue to use Coin Age Priority for transaction selection in blocks. Bitcoin Core 0.15 removes all remaining support for Coin Age Priority (See [PR 9602](https://github.com/bitcoin/bitcoin/pull/9602)). This has the following implications:\n+\n+- The concept of *free transactions* has been removed. High Coin Age Priority transactions would previously be allowed to be relayed even if they didn't attach a miner fee. This is no longer possible since there is no concept of Coin Age Priority. The `-limitfreerelay` and `-relaypriority` options which controlled relay of free transactions have therefore been removed.\n+- The `-sendfreetransactions` option has been removed, since almost all miners do not include transactions which do not attach a transaction fee.\n+- The `-blockprioritysize` option has been removed.\n+- The `estimatepriority` and `estimatesmartpriority` RPCs have been removed.\n+- The `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`.\n+- The `prioritisetransaction` RPC no longer takes a `priority_delta` argument, which is replaced by a `dummy` argument for backwards compatibility with clients using positional arguments. The RPC is still used to change the apparent fee-rate of the transaction by using the `fee_delta` argument.\n+- `-minrelaytxfee` can now be set to 0. If `minrelaytxfee` is set, then fees smaller than `minrelaytxfee` (per kB) are rejected from relaying, mining and transaction creation. This defaults to 1000 satoshi/kB.\n+- The `-printpriority` option has been updated to only output the fee rate and hash of transactions included in a block by the mining code.\n+\n+Mempool Persistence Across Restarts\n+-----------------------------------\n+\n+Version 0.14 introduced mempool persistence across restarts (the mempool is saved to a `mempool.dat` file in the data directory prior to shutdown and restores the mempool when the node is restarted). Version 0.15 allows this feature to be switched on or off using the `-persistmempool` command-line option (See [PR 9966](https://github.com/bitcoin/bitcoin/pull/9966)). By default, the option is set to true, and the mempool is saved on shutdown and reloaded on startup. If set to false, the `mempool.dat` file will not be loaded on startup or saved on shutdown.\n+\n+New RPC methods\n+---------------\n+\n+Version 0.15 introduces several new RPC methods:\n+\n+- `abortrescan` stops current wallet rescan, e.g. when triggered by an `importprivkey` call (See [PR 10208](https://github.com/bitcoin/bitcoin/pull/10208)).\n+- `combinerawtransaction` accepts a JSON array of raw transactions and combines them into a single raw transaction (See [PR 10571](https://github.com/bitcoin/bitcoin/pull/10571)).\n+- `estimaterawfee` returns raw fee data so that customized logic can be implemented to analyze the data and calculate estimates. See [Fee Estimation Improvements](#fee-estimation-improvements) for full details on changes to the fee estimation logic and interface.\n+- `getchaintxstats` returns statistics about the total number and rate of transactions\n+  in the chain (See [PR 9733](https://github.com/bitcoin/bitcoin/pull/9733)).\n+- `listwallets` lists wallets which are currently loaded. See the *Multi-wallet* section\n+  of these release notes for full details (See [Multi-wallet support](#multi-wallet-support)).\n+- `uptime` returns the total runtime of the `bitcoind` server since its last start (See [PR 10400](https://github.com/bitcoin/bitcoin/pull/10400)).\n+\n+Low-level RPC changes\n+---------------------\n+\n+- When using Bitcoin Core in multi-wallet mode, RPC requests for wallet methods must specify\n+  the wallet that they're intended for. See [Multi-wallet support](#multi-wallet-support) for full details.\n+\n+- The new database model no longer stores information about transaction\n+  versions of unspent outputs (See [Performance improvements](#performance-improvements)). This means that:\n+  - The `gettxout` RPC no longer has a `version` field in the response.\n+  - The `gettxoutsetinfo` RPC reports `hash_serialized_2` instead of `hash_serialized`,\n+    which does not commit to the transaction versions of unspent outputs, but does\n+    commit to the height and coinbase information.\n+  - The `getutxos` REST path no longer reports the `txvers` field in JSON format,\n+    and always reports 0 for transaction versions in the binary format\n+\n+- The `estimatefee` RPC is deprecated. Clients should switch to using the `estimatesmartfee` RPC, which returns better fee estimates. See [Fee Estimation Improvements](#fee-estimation-improvements) for full details on changes to the fee estimation logic and interface.\n+\n+- The `gettxoutsetinfo` response now contains `disk_size` and `bogosize` instead of\n+  `bytes_serialized`. The first is a more accurate estimate of actual disk usage, but\n+  is not deterministic. The second is unrelated to disk usage, but is a\n+  database-independent metric of UTXO set size: it counts every UTXO entry as 50 + the\n+  length of its scriptPubKey (See [PR 10426](https://github.com/bitcoin/bitcoin/pull/10426)).\n+\n+- `signrawtransaction` can no longer be used to combine multiple transactions into a single transaction. Instead, use the new `combinerawtransaction` RPC (See [PR 10571](https://github.com/bitcoin/bitcoin/pull/10571)).\n+\n+- `fundrawtransaction` no longer accepts a `reserveChangeKey` option. This option used to allow RPC users to fund a raw transaction using an key from the keypool for the change address without removing it from the available keys in the keypool. The key could then be re-used for a `getnewaddress` call, which could potentially result in confusing or dangerous behaviour (See [PR 10784](https://github.com/bitcoin/bitcoin/pull/10784)).\n+\n+- `estimatepriority` and `estimatesmartpriority` have been removed. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n+\n+- The `listunspent` RPC now takes a `query_options` argument (see [PR 8952](https://github.com/bitcoin/bitcoin/pull/8952)), which is a JSON object\n+  containing one or more of the following members:\n+  - `minimumAmount` - a number specifying the minimum value of each UTXO\n+  - `maximumAmount` - a number specifying the maximum value of each UTXO\n+  - `maximumCount` - a number specifying the minimum number of UTXOs\n+  - `minimumSumAmount` - a number specifying the minimum sum value of all UTXOs\n+\n+- The `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n+\n+- The `dumpwallet` RPC now returns the full absolute path to the dumped wallet. It\n+  used to return no value, even if successful (See [PR 9740](https://github.com/bitcoin/bitcoin/pull/9740)).\n+\n+- In the `getpeerinfo` RPC, the return object for each peer now returns an `addrbind` member, which contains the ip address and port of the connection to the peer. This is in addition to the `addrlocal` member which contains the ip address and port of the local node as reported by the peer (See [PR 10478](https://github.com/bitcoin/bitcoin/pull/10478)).\n+\n+- The `disconnectnode` RPC can now disconnect a node specified by node ID (as well as by IP address/port). To disconnect a node based on node ID, call the RPC with the new `nodeid` argument (See [PR 10143](https://github.com/bitcoin/bitcoin/pull/10143)).\n+\n+- The second argument in `prioritisetransaction` has been renamed from `priority_delta` to `dummy` since Bitcoin Core no longer has a concept of coin age priority. The `dummy` argument has no functional effect, but is retained for positional argument compatibility. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n+\n+- The `resendwallettransactions` RPC throws an error if the `-walletbroadcast` option is set to false (See [PR 10995](https://github.com/bitcoin/bitcoin/pull/10995)).\n+\n+- The second argument in the `submitblock` RPC argument has been renamed from `parameters` to `dummy`. This argument never had any effect, and the renaming is simply to communicate this fact to the user (See [PR 10191](https://github.com/bitcoin/bitcoin/pull/10191))\n+  (Clients should, however, use positional arguments for `submitblock` in order to be compatible with BIP 22.)\n+\n+- The `verbose` argument of `getblock` has been renamed to `verbosity` and now takes an integer from 0 to 2. Verbose level 0 is equivalent to `verbose=false`. Verbose level 1 is equivalent to `verbose=true`. Verbose level 2 will give the full transaction details of each transaction in the output as given by `getrawtransaction`. The old behavior of using the `verbose` named argument and a boolean value is still maintained for compatibility.\n+\n+- Error codes have been updated to be more accurate for the following error cases (See [PR 9853](https://github.com/bitcoin/bitcoin/pull/9853)):\n+  - `getblock` now returns RPC_MISC_ERROR if the block can't be found on disk (for\n+  example if the block has been pruned). Previously returned RPC_INTERNAL_ERROR.\n+  - `pruneblockchain` now returns RPC_MISC_ERROR if the blocks cannot be pruned\n+  because the node is not in pruned mode. Previously returned RPC_METHOD_NOT_FOUND.\n+  - `pruneblockchain` now returns RPC_INVALID_PARAMETER if the blocks cannot be pruned\n+  because the supplied timestamp is too late. Previously returned RPC_INTERNAL_ERROR.\n+  - `pruneblockchain` now returns RPC_MISC_ERROR if the blocks cannot be pruned\n+  because the blockchain is too short. Previously returned RPC_INTERNAL_ERROR.\n+  - `setban` now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the supplied IP address\n+  or subnet is invalid. Previously returned RPC_CLIENT_NODE_ALREADY_ADDED.\n+  - `setban` now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the user tries to unban\n+  a node that has not previously been banned. Previously returned RPC_MISC_ERROR.\n+  - `removeprunedfunds` now returns RPC_WALLET_ERROR if `bitcoind` is unable to remove\n+  the transaction. Previously returned RPC_INTERNAL_ERROR.\n+  - `removeprunedfunds` now returns RPC_INVALID_PARAMETER if the transaction does not\n+  exist in the wallet. Previously returned RPC_INTERNAL_ERROR.\n+  - `fundrawtransaction` now returns RPC_INVALID_ADDRESS_OR_KEY if an invalid change\n+  address is provided. Previously returned RPC_INVALID_PARAMETER.\n+  - `fundrawtransaction` now returns RPC_WALLET_ERROR if `bitcoind` is unable to create\n+  the transaction. The error message provides further details. Previously returned\n+  RPC_INTERNAL_ERROR.\n+  - `bumpfee` now returns RPC_INVALID_PARAMETER if the provided transaction has\n+  descendants in the wallet. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_INVALID_PARAMETER if the provided transaction has\n+  descendants in the mempool. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has\n+  has been mined or conflicts with a mined transaction. Previously returned\n+  RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction is not\n+  BIP 125 replaceable. Previously returned RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has already\n+  been bumped by a different transaction. Previously returned RPC_INVALID_REQUEST.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction contains\n+  inputs which don't belong to this wallet. Previously returned RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has multiple change\n+  outputs. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has no change\n+  output. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the fee is too high. Previously returned\n+  RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the fee is too low. Previously returned\n+  RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the change output is too small to bump the\n+  fee. Previously returned RPC_MISC_ERROR.\n+\n+0.15.0 Change log\n+=================\n+\n+### RPC and other APIs\n+- #9485 `61a640e` ZMQ example using python3 and asyncio (mcelrath)\n+- #9894 `0496e15` remove 'label' filter for rpc command help (instagibbs)\n+- #9853 `02bd6e9` Fix error codes from various RPCs (jnewbery)\n+- #9842 `598ef9c` Fix RPC failure testing (continuation of #9707) (jnewbery)\n+- #10038 `d34995a` Add mallocinfo mode to `getmemoryinfo` RPC (laanwj)\n+- #9500 `3568b30` [Qt][RPC] Autocomplete commands for 'help' command in debug console (achow101)\n+- #10056 `e6156a0` [zmq] Call va_end() on va_start()ed args (kallewoof)\n+- #10086 `7438cea` Trivial: move rpcserialversion into RPC option group (jlopp)\n+- #10150 `350b224` [rpc] Add logging rpc (jnewbery)\n+- #10208 `393160c` [wallet] Rescan abortability (kallewoof)\n+- #10143 `a987def` [net] Allow disconnectnode RPC to be called with node id (jnewbery)\n+- #10281 `0e8499c` doc: Add RPC interface guidelines (laanwj)\n+- #9733 `d4732f3` Add getchaintxstats RPC (sipa)\n+- #10310 `f4b15e2` [doc] Add hint about getmempoolentry to getrawmempool help (kallewoof)\n+- #8704 `96c850c` [RPC] Transaction details in getblock (achow101)\n+- #8952 `9390845` Add query options to listunspent RPC call (pedrobranco)\n+- #10413 `08ac35a` Fix docs (there's no rpc command setpaytxfee) (RHavar)\n+- #8384 `e317c0d` Add witness data output to TxInError messages (instagibbs)\n+- #9571 `4677151` RPC: getblockchaininfo returns BIP signaling statistics  (pinheadmz)\n+- #10450 `ef2d062` Fix bumpfee rpc \"errors\" return value (ryanofsky)\n+- #10475 `39039b1` [RPC] getmempoolinfo mempoolminfee is a BTC/KB feerate (instagibbs)\n+- #10478 `296928e` rpc: Add listen address to incoming connections in `getpeerinfo` (laanwj)\n+- #10403 `08d0390` Fix importmulti failure to return rescan errors (ryanofsky)\n+- #9740 `9fec4da` Add friendly output to dumpwallet (aideca)\n+- #10426 `16f6c98` Replace bytes_serialized with bogosize (sipa)\n+- #10252 `980deaf` RPC/Mining: Restore API compatibility for prioritisetransaction (luke-jr)\n+- #9672 `46311e7` Opt-into-RBF for RPC & bitcoin-tx (luke-jr)\n+- #10481 `9c248e3` Decodehextx scripts sanity check  (achow101)\n+- #10488 `fa1f106` Note that the prioritizetransaction dummy value is deprecated, and has no meaning (TheBlueMatt)\n+- #9738 `c94b89e` gettxoutproof() should return consistent result (jnewbery)\n+- #10191 `00350bd` [trivial] Rename unused RPC arguments 'dummy' (jnewbery)\n+- #10627 `b62b4c8` fixed listunspent rpc convert parameter (tnakagawa)\n+- #10412 `bef02fb` Improve wallet rescan API (ryanofsky)\n+- #10400 `1680ee0` [RPC] Add an uptime command that displays the amount of time (in seconds) bitcoind has been running (rvelhote)\n+- #10683 `d81bec7` rpc: Move the `generate` RPC call to rpcwallet (laanwj)\n+- #10710 `30bc0f6` REST/RPC example update (Mirobit)\n+- #10747 `9edda0c` [rpc] fix verbose argument for getblock in bitcoin-cli (jnewbery)\n+- #10589 `104f5f2` More economical fee estimates for RBF and RPC options to control (morcos)\n+- #10543 `b27b004` Change API to estimaterawfee (morcos)\n+- #10807 `afd2fca` getbalance example covers at least 6 confirms (instagibbs)\n+- #10707 `75b5643` Better API for estimatesmartfee RPC  (morcos)\n+- #10784 `9e8d6a3` Do not allow users to get keys from keypool without reserving them (TheBlueMatt)\n+- #10857 `d445a2c` [RPC] Add a deprecation warning to getinfo's output (achow101)\n+- #10571 `adf170d` [RPC]Move transaction combining from signrawtransaction to new RPC (achow101)\n+- #10783 `041dad9` [RPC] Various rpc argument fixes (instagibbs)\n+- #9622 `6ef3c7e` [rpc] listsinceblock should include lost transactions when parameter is a reorg'd block (kallewoof)\n+- #10799 `8537187` Prevent user from specifying conflicting parameters to fundrawtx (TheBlueMatt)\n+- #10931 `0b11a07` Fix misleading \"Method not found\" multiwallet errors (ryanofsky)\n+- #10788 `f66c596` [RPC] Fix addwitnessaddress by replacing ismine with producesignature (achow101)\n+- #10999 `627c3c0` Fix amounts formatting in `decoderawtransaction` (laanwj)\n+- #11002 `4268426` [wallet] return correct error code from resendwallettransaction (jnewbery)\n+- #11029 `96a63a3` [RPC] trivial: gettxout no longer shows version of tx (FelixWeis)\n+- #11083 `6c2b008` Fix combinerawtransaction RPC help result section (jonasnick)\n+- #11027 `07164bb` [RPC] Only return hex field once in getrawtransaction (achow101)\n+- #10698 `5af6572` Be consistent in calling transactions \"replaceable\" for Opt-In RBF (TheBlueMatt)\n+\n+### Block and transaction handling\n+- #9801 `a8c5751` Removed redundant parameter from mempool.PrioritiseTransaction (gubatron)\n+- #9819 `1efc99c` Remove harmless read of unusued priority estimates (morcos)\n+- #9822 `b7547fa` Remove block file location upgrade code (benma)\n+- #9602 `30ff3a2` Remove coin age priority and free transactions - implementation (morcos)\n+- #9548 `47510ad` Remove min reasonable fee (morcos)\n+- #10249 `c73af54` Switch CCoinsMap from boost to std unordered_map (sipa)\n+- #9966 `2a183de` Control mempool persistence using a command line parameter (jnewbery)\n+- #10199 `318ea50` Better fee estimates (morcos)\n+- #10196 `bee3529` Bugfix: PrioritiseTransaction updates the mempool tx counter (sdaftuar)\n+- #10195 `1088b02` Switch chainstate db and cache to per-txout model (sipa)\n+- #10284 `c2ab38b` Always log debug information for fee calculation in CreateTransaction (morcos)\n+- #10503 `efbcf2b` Use REJECT_DUPLICATE for already known and conflicted txn (sipa)\n+- #10537 `b3eb0d6` Few Minor per-utxo assert-semantics re-adds and tweak (TheBlueMatt)\n+- #10626 `8c841a3` doc: Remove outdated minrelaytxfee comment (MarcoFalke)\n+- #10559 `234ffc6` Change semantics of HaveCoinInCache to match HaveCoin (morcos)\n+- #10581 `7878353` Simplify return values of GetCoin/HaveCoin(InCache) (sipa)\n+- #10684 `a381f6a` Remove no longer used mempool.exists(outpoint) (morcos)\n+- #10148 `d4e551a` Use non-atomic flushing with block replay (sipa)\n+- #10685 `30c2130` Clarify CCoinsViewMemPool documentation (TheBlueMatt)\n+- #10558 `90a002e` Address nits from per-utxo change (morcos)\n+- #10706 `6859ad2` Improve wallet fee logic and fix GUI bugs (morcos)\n+- #10526 `754aa02` Force on-the-fly compaction during pertxout upgrade (sipa)\n+- #10985 `d896d5c` Add undocumented -forcecompactdb to force LevelDB compactions (sipa)\n+- #10292 `e4bbd3d` Improved efficiency in COutPoint constructors (mm-s)\n+- #10290 `8d6d43e` Add -stopatheight for benchmarking (sipa)\n+\n+### P2P protocol and network code\n+- #9726 `7639d38` netbase: Do not print an error on connection timeouts through proxy (laanwj)\n+- #9805 `5b583ef` Add seed.btc.petertodd.org to mainnet DNS seeds (petertodd)\n+- #9861 `22f609f` Trivial: Debug log ambiguity fix for peer addrs (keystrike)\n+- #9774 `90cb2a2` Enable host lookups for -proxy and -onion parameters (jmcorgan)\n+- #9558 `7b585cf` Clarify assumptions made about when BlockCheck is called (TheBlueMatt)\n+- #10135 `e19586a` [p2p] Send the correct error code in reject messages (jnewbery)\n+- #9665 `eab00d9` Use cached [compact] blocks to respond to getdata messages (TheBlueMatt)\n+- #10215 `a077a90` Check interruptNet during dnsseed lookups (TheBlueMatt)\n+- #10234 `faf2dea` [net] listbanned RPC and QT should show correct banned subnets (jnewbery)\n+- #10134 `314ebdf` [qa] Fixes segwit block relay test after inv-direct-fetch was disabled (sdaftuar)\n+- #10351 `3f57c55` removed unused code in INV message (Greg-Griffith)\n+- #10061 `ae78609` [net] Added SetSocketNoDelay() utility function (tjps)\n+- #10408 `28c6e8d` Net: Improvements to Tor control port parser (str4d)\n+- #10460 `5c63d66` Broadcast address every day, not 9 hours (sipa)\n+- #10471 `400fdd0` Denote functions CNode::GetRecvVersion() and CNode::GetRefCount()  as const (pavlosantoniou)\n+- #10345 `67700b3` [P2P] Timeout for headers sync (sdaftuar)\n+- #10564 `8d9f45e` Return early in IsBanned (gmaxwell)\n+- #10587 `de8db47` Net: Fix resource leak in ReadBinaryFile(...) (practicalswift)\n+- #9549 `b33ca14` [net] Avoid possibility of NULL pointer dereference in MarkBlockAsInFlight(...) (practicalswift)\n+- #10446 `2772dc9` net: avoid extra dns query per seed (theuni)\n+- #10824 `9dd6a2b` Avoid unnecessary work in SetNetworkActive (promag)\n+- #10948 `df3a6f4` p2p: Hardcoded seeds update pre-0.15 branch (laanwj)\n+- #10977 `02f4c4a` [net] Fix use of uninitialized value in getnetworkinfo(const JSONRPCRequest&) (practicalswift)\n+- #10982 `c8b62c7` Disconnect network service bits 6 and 8 until Aug 1, 2018 (TheBlueMatt)\n+- #11012 `0e5cff6` Make sure to clean up mapBlockSource if we've already seen the block (theuni)\n+\n+### Validation\n+- #9725 `67023e9` CValidationInterface Cleanups (TheBlueMatt)\n+- #10178 `2584925` Remove CValidationInterface::UpdatedTransaction (TheBlueMatt)\n+- #10201 `a6548a4` pass Consensus::Params& to functions in validation.cpp and make them static (mariodian)\n+- #10297 `431a548` Simplify DisconnectBlock arguments/return value (sipa)\n+- #10464 `f94b7d5` Introduce static DoWarning (simplify UpdateTip) (jtimon)\n+- #10569 `2e7d8f8` Fix stopatheight (achow101)\n+- #10192 `2935b46` Cache full script execution results in addition to signatures (TheBlueMatt)\n+- #10179 `21ed30a` Give CValidationInterface Support for calling notifications on the CScheduler Thread (TheBlueMatt)\n+- #10557 `66270a4` Make check to distinguish between orphan txs and old txs more efficient (morcos)\n+- #10775 `7c2400c` nCheckDepth chain height fix (romanornr)\n+- #10821 `16240f4` Add SSE4 optimized SHA256 (sipa)\n+- #10854 `04d395e` Avoid using sizes on non-fixed-width types to derive protocol constants (gmaxwell)\n+- #10945 `2a50b11` Update defaultAssumeValid according to release-process.md (gmaxwell)\n+- #10986 `2361208` Update chain transaction statistics (sipa)\n+- #11028 `6bdf4b3` Avoid masking of difficulty adjustment errors by checkpoints (sipa)\n+- #9533 `cb598cf` Allow non-power-of-2 signature cache sizes (sipa)\n+- #9208 `acd9957` Improve DisconnectTip performance (sdaftuar)\n+- #10618 `f90603a` Remove confusing MAX_BLOCK_BASE_SIZE (gmaxwell)\n+- #10758 `bd92424` Fix some chainstate-init-order bugs (TheBlueMatt)\n+- #10550 `b7296bc` Don't return stale data from CCoinsViewCache::Cursor() (ryanofsky)\n+- #10998 `2507fd5` Fix upgrade cancel warnings (TheBlueMatt)\n+- #9868 `cbdb473` Abstract out the command line options for block assembly (sipa)\n+\n+### Build system\n+- #9727 `5f0556d` Remove fallbacks for boost_filesystem < v3 (laanwj)\n+- #9788 `50a2265` gitian: bump descriptors for master (theuni)\n+- #9794 `7ca2f54` Minor update to qrencode package builder (mitchellcash)\n+- #9514 `2cc0df1` release: Windows signing script (theuni)\n+- #9921 `8b789d8` build: Probe MSG_DONTWAIT in the same way as MSG_NOSIGNAL (laanwj)\n+- #10011 `32d1b34` build: Fix typo s/HAVE_DONTWAIT/HAVE_MSG_DONTWAIT (laanwj)\n+- #9946 `90dd9e6` Fix build errors if spaces in path or parent directory (pinheadmz)\n+- #10136 `81da4c7` build: Disable Wshadow warning (laanwj)\n+- #10166 `64962ae` Ignore Doxyfile generated from Doxyfile.in template (paveljanik)\n+- #10239 `0416ea9` Make Boost use std::atomic internally (sipa)\n+- #10228 `27faa6c` build: regenerate bitcoin-config.h as necessary (theuni)\n+- #10273 `8979f45` [scripts] Minor improvements to `macdeployqtplus` script (chrisgavin)\n+- #10325 `a26280b` 0.15.0 Depends Updates (fanquake)\n+- #10328 `79aeff6` Update contrib/debian to latest Ubuntu PPA upload (TheBlueMatt)\n+- #7522 `d25449f` Bugfix: Only use git for build info if the repository is actually the right one (luke-jr)\n+- #10489 `e654d61` build: silence gcc7's implicit fallthrough warning (theuni)\n+- #10549 `ad1a13e` Avoid printing generic and duplicated \"checking for QT\" during ./configure (drizzt)\n+- #10628 `8465b68` [depends] expat 2.2.1 (fanquake)\n+- #10806 `db825d2` build: verify that the assembler can handle crc32 functions (theuni)\n+- #10766 `b4d03be` Building Environment: Set ARFLAGS to cr (ReneNyffenegger)\n+- #10803 `91edda8` Explicitly search for bdb5.3 (pstratem)\n+- #10855 `81560b0` random: only use getentropy on openbsd (theuni)\n+- #10508 `1caafa6` Run Qt wallet tests on travis (ryanofsky)\n+- #10851 `e222618` depends: fix fontconfig with newer glibc (theuni)\n+- #10971 `88b1e4b` build: fix missing sse42 in depends builds (theuni)\n+- #11097 `129b03f` gitian: quick hack to fix version string in releases (theuni)\n+- #10039 `919aaf6` Fix compile errors with Qt 5.3.2 and Boost 1.55.0 (ryanofsky)\n+- #10168 `7032021` Fix build warning from #error text (jnewbery)\n+- #10301 `318392c` Check if sys/random.h is required for getentropy (jameshilliard)\n+\n+### GUI\n+- #9724 `1a9fd5c` Qt/Intro: Add explanation of IBD process (luke-jr)\n+- #9834 `b00ba62` qt: clean up initialize/shutdown signals (benma)\n+- #9481 `ce01e62` [Qt] Show more significant warning if we fall back to the default fee (jonasschnelli)\n+- #9974 `b9f930b` Add basic Qt wallet test (ryanofsky)\n+- #9690 `a387d3a` Change 'Clear' button string to 'Reset' (da2x)\n+- #9592 `9c7b7cf` [Qt] Add checkbox in the GUI to opt-in to RBF when creating a transaction (ryanofsky)\n+- #10098 `2b477e6` Make qt wallet test compatible with qt4 (ryanofsky)\n+- #9890 `1fa4ae6` Add a button to open the config file in a text editor (ericshawlinux)\n+- #10156 `51833a1` Fix for issues with startup and multiple monitors on windows (AllanDoensen)\n+- #10177 `de01da7` Changed \"Send\" button default status from true to false (KibbledJiveElkZoo)\n+- #10221 `e96486c` Stop treating coinbase outputs differently in GUI: show them at 1conf (TheBlueMatt)\n+- #10231 `987a6c0` [Qt] Reduce a significant cs_main lock freeze (jonasschnelli)\n+- #10242 `f6f3b58` [qt] Don't call method on null WalletModel object (ryanofsky)\n+- #10093 `a3e756b` [Qt] Don't add arguments of sensitive command to console window (jonasschnelli)\n+- #10362 `95546c8` [GUI] Add OSX keystroke to RPCConsole info (spencerlievens)\n+- #9697 `962cd3f` [Qt] simple fee bumper with user verification (jonasschnelli)\n+- #10390 `e477516` [wallet] remove minimum total fee option (instagibbs)\n+- #10420 `4314544` Add Qt tests for wallet spends & bumpfee (ryanofsky)\n+- #10454 `c1c9a95` Fix broken q4 test build (ryanofsky)\n+- #10449 `64beb13` Overhaul Qt fee bumper (jonasschnelli)\n+- #10582 `7c72fb9` Pass in smart fee slider value to coin control dialog (morcos)\n+- #10673 `4c72cc3` [qt] Avoid potential null pointer dereference in TransactionView::exportClicked() (practicalswift)\n+- #10769 `8fdd23a` [Qt] replace fee slider with a Dropdown, extend conf. targets (jonasschnelli)\n+- #10870 `412b466` [Qt] Use wallet 0 in rpc console if running with multiple wallets (jonasschnelli)\n+- #10988 `a9dd111` qt: Increase BLOCK_CHAIN_SIZE constants (laanwj)\n+- #10644 `e292140` Slightly overhaul NSI pixmaps (jonasschnelli)\n+- #10660 `0c3542e` Allow to cancel the txdb upgrade via splashscreen keypress 'q' (jonasschnelli)\n+\n+### Wallet\n+- #9359 `f7ec7cf` Add test for CWalletTx::GetImmatureCredit() returning stale values (ryanofsky)\n+- #9576 `56ab672` [wallet] Remove redundant initialization (practicalswift)\n+- #9333 `fa625b0` Document CWalletTx::mapValue entries and remove erase of nonexistent \"version\" entry (ryanofsky)\n+- #9906 `72fb515` Disallow copy constructor CReserveKeys (instagibbs)\n+- #9369 `3178b2c` Factor out CWallet::nTimeSmart computation into a method (ryanofsky)\n+- #9830 `afcd7c0` Add safe flag to listunspent result (NicolasDorier)\n+- #9993 `c49355c` Initialize nRelockTime (pstratem)\n+- #9818 `3d857f3` Save watch only key timestamps when reimporting keys (ryanofsky)\n+- #9294 `f34cdcb` Use internal HD chain for change outputs (hd split) (jonasschnelli)\n+- #10164 `e183ea2` Wallet: reduce excess logic InMempool() (kewde)\n+- #10186 `c9ff4f8` Remove SYNC_TRANSACTION_NOT_IN_BLOCK magic number (jnewbery)\n+- #10226 `64c45aa` wallet: Use boost to more portably ensure -wallet specifies only a filename (luke-jr)\n+- #9827 `c91ca0a` Improve ScanForWalletTransactions return value (ryanofsky)\n+- #9951 `fa1ac28` Wallet database handling abstractions/simplifications (laanwj)\n+- #10265 `c29a0d4` [wallet] [moveonly] Check non-null pindex before potentially referencing (kallewoof)\n+- #10283 `a550f6e` Cleanup: reduce to one GetMinimumFee call signature (morcos)\n+- #10294 `e2b99b1` [Wallet] unset change position when there is no change (instagibbs)\n+- #10115 `d3dce0e` Avoid reading the old hd master key during wallet encryption (TheBlueMatt)\n+- #10341 `18c9deb` rpc/wallet: Workaround older UniValue which returns a std::string temporary for get_str (luke-jr)\n+- #10308 `94e5227` [wallet] Securely erase potentially sensitive keys/values (tjps)\n+- #10257 `ea1fd43` [test] Add test for getmemoryinfo (jimmysong)\n+- #10295 `ce8176d` [qt] Move some WalletModel functions into CWallet (ryanofsky)\n+- #10506 `7cc2c67` Fix bumpfee test after #10449 (ryanofsky)\n+- #10500 `098b01d` Avoid CWalletTx copies in GetAddressBalances and GetAddressGroupings (ryanofsky)\n+- #10455 `0747d33` Simplify feebumper minimum fee code slightly (ryanofsky)\n+- #10522 `2805d60` [wallet] Remove unused variables (practicalswift)\n+- #8694 `177433a` Basic multiwallet support (luke-jr)\n+- #10598 `7a74f88` Supress struct/class mismatch warnings introduced in #10284 (paveljanik)\n+- #9343 `209eef6` Don't create change at dust limit (morcos)\n+- #10744 `ed88e31` Use method name via __func__ macro (darksh1ne)\n+- #10712 `e8b9523` Add change output if necessary to reduce excess fee (morcos)\n+- #10816 `1c011ff` Properly forbid -salvagewallet and -zapwallettxes for multi wallet (morcos)\n+- #10235 `5cfdda2` Track keypool entries as internal vs external in memory (TheBlueMatt)\n+- #10330 `bf0a08b` [wallet] fix zapwallettxes interaction with persistent mempool (jnewbery)\n+- #10831 `0b01935` Batch flushing operations to the walletdb during top up and increase keypool size (gmaxwell)\n+- #10795 `7b6e8bc` No longer ever reuse keypool indexes (TheBlueMatt)\n+- #10849 `bde4f93` Multiwallet: simplest endpoint support (jonasschnelli)\n+- #10817 `9022aa3` Redefine Dust and add a discard_rate (morcos)\n+- #10883 `bf3b742` Rename -usewallet to -rpcwallet (morcos)\n+- #10604 `420238d` [wallet] [tests] Add listwallets RPC, include wallet name in `getwalletinfo` and add multiwallet test (jnewbery)\n+- #10885 `70888a3` Reject invalid wallets (promag)\n+- #10949 `af56397` Clarify help message for -discardfee (morcos)\n+- #10942 `2e857bb` Eliminate fee overpaying edge case when subtracting fee from recipients (morcos)\n+- #10995 `fa64636` Fix resendwallettransactions assert failure if -walletbroadcast=0 (TheBlueMatt)\n+- #11022 `653a46d` Basic keypool topup (jnewbery)\n+- #11081 `9fe1f6b` Add length check for CExtKey deserialization (jonasschnelli, guidovranken)\n+- #11044 `4ef8374` [wallet] Keypool topup cleanups (jnewbery)\n+- #11145 `e51bb71` Fix rounding bug in calculation of minimum change (morcos)\n+- #9605 `779f2f9` Use CScheduler for wallet flushing, remove ThreadFlushWalletDB (TheBlueMatt)\n+- #10108 `4e3efd4` ApproximateBestSubset should take inputs by reference, not value (RHavar)\n+\n+### Tests and QA\n+- #9744 `8efd1c8` Remove unused module from rpc-tests (34ro)\n+- #9657 `7ff4a53` Improve rpc-tests.py (jnewbery)\n+- #9766 `7146d96` Add --exclude option to rpc-tests.py (jnewbery)\n+- #9577 `d6064a8` Fix docstrings in qa tests (jnewbery)\n+- #9823 `a13a417` qa: Set correct path for binaries in rpc tests (MarcoFalke)\n+- #9847 `6206252` Extra test vector for BIP32 (sipa)\n+- #9350 `88c2ae3` [Trivial] Adding label for amount inside of tx_valid/tx_invalid.json (Christewart)\n+- #9888 `36afd4d` travis: Verify commits only for one target (MarcoFalke)\n+- #9904 `58861ad` test: Fail if InitBlockIndex fails (laanwj)\n+- #9828 `67c5cc1` Avoid -Wshadow warnings in wallet_tests (ryanofsky)\n+- #9832 `48c3429` [qa] assert_start_raises_init_error (NicolasDorier)\n+- #9739 `9d5fcbf` Fix BIP68 activation test (jnewbery)\n+- #9547 `d32581c` bench: Assert that division by zero is unreachable (practicalswift)\n+- #9843 `c78adbf` Fix segwit getblocktemplate test (jnewbery)\n+- #9929 `d5ce14e` tests: Delete unused function _rpchost_to_args (laanwj)\n+- #9555 `19be26a` [test] Avoid reading a potentially uninitialized variable in tx_invalid-test (transaction_tests.cpp) (practicalswift)\n+- #9945 `ac23a7c` Improve logging in bctest.py if there is a formatting mismatch (jnewbery)\n+- #9768 `8910b47` [qa] Add logging to test_framework.py (jnewbery)\n+- #9972 `21833f9` Fix extended rpc tests broken by #9768 (jnewbery)\n+- #9977 `857d1e1` QA: getblocktemplate_longpoll.py should always use >0 fee tx (sdaftuar)\n+- #9970 `3cc13ea` Improve readability of segwit.py, smartfees.py (sdaftuar)\n+- #9497 `2c781fb` CCheckQueue Unit Tests (JeremyRubin)\n+- #10024 `9225de2` [trivial] Use log.info() instead of print() in remaining functional test cases (jnewbery)\n+- #9956 `3192e52` Reorganise qa directory (jnewbery)\n+- #10017 `02d64bd` combine_logs.py - aggregates log files from multiple bitcoinds during functional tests (jnewbery)\n+- #10047 `dfef6b6` [tests] Remove unused variables and imports (practicalswift)\n+- #9701 `a230b05` Make bumpfee tests less fragile (ryanofsky)\n+- #10053 `ca20923` [test] Allow functional test cases to be skipped (jnewbery)\n+- #10052 `a0b1e57` [test] Run extended tests once daily in Travis (jnewbery)\n+- #10069 `1118493` [QA] Fix typo in fundrawtransaction test (NicolasDorier)\n+- #10083 `c044f03` [QA] Renaming rawTx into rawtx (NicolasDorier)\n+- #10073 `b1a4f27` Actually run assumevalid.py (jnewbery)\n+- #9780 `c412fd8` Suppress noisy output from qa tests in Travis (jnewbery)\n+- #10096 `79af9fb` Check that all test scripts in test/functional are being run (jnewbery)\n+- #10076 `5b029aa` [qa] combine_logs: Use ordered list for logfiles (MarcoFalke)\n+- #10107 `f2734c2` Remove unused variable. Remove accidental trailing semicolons in Python code (practicalswift)\n+- #10109 `8ac8041` Remove SingleNodeConnCB (jnewbery)\n+- #10114 `edc62c9` [tests] sync_with_ping should assert that ping hasn't timed out (jnewbery)\n+- #10128 `427d2fd` Speed Up CuckooCache tests (JeremyRubin)\n+- #10072 `12af74b` Remove sources of unreliablility in extended functional tests (jnewbery)\n+- #10077 `ebfd653` [qa] Add setnetworkactive smoke test (MarcoFalke)\n+- #10152 `080d7c7` [trivial] remove unused line in Travis config (jnewbery)\n+- #10159 `df1ca9e` [tests] color test results and sort alphabetically (jnewbery)\n+- #10124 `88799ea` [test] Suppress test logging spam (jnewbery)\n+- #10142 `ed09dd3` Run bitcoin_test-qt under minimal QPA platform (ryanofsky)\n+- #9949 `a27dbc5` [bench] Avoid function call arguments which are pointers to uninitialized values (practicalswift)\n+- #10187 `b44adf9` tests: Fix test_runner return value in case of skipped test (laanwj)\n+- #10197 `d86bb07` [tests] Functional test warnings (jnewbery)\n+- #10219 `9111df9` Tests: Order Python Tests Differently (jimmysong)\n+- #10229 `f3db4c6` Tests: Add test for getdifficulty (jimmysong)\n+- #10224 `2723bcd` [test] Add test for getaddednodeinfo (jimmysong)\n+- #10023 `c530c15` [tests] remove maxblocksinflight.py (functionality covered by other test) (jnewbery)\n+- #10097 `1b25b6d` Move zmq test skipping logic into individual test case (jnewbery)\n+- #10272 `54e2d87` [Tests] Prevent warning: variable 'x' is uninitialized (paveljanik)\n+- #10225 `e0a7e19` [test] Add aborttrescan tests (kallewoof)\n+- #10278 `8254a8a` [test] Add Unit Test for GetListenPort (jimmysong)\n+- #10280 `47535d7` [test] Unit test amount.h/amount.cpp (jimmysong)\n+- #10256 `80c3a73` [test] Add test for gettxout to wallet.py (jimmysong)\n+- #10264 `492d22f` [test] Add tests for getconnectioncount, getnettotals and ping (jimmysong)\n+- #10169 `8f3e384` [tests] Remove func test code duplication (jnewbery)\n+- #10198 `dc8fc0c` [tests] Remove is_network_split from functional test framework (jnewbery)\n+- #10255 `3c5e6c9` [test] Add test for listaddressgroupings (jimmysong)\n+- #10137 `75171f0` Remove unused import. Remove accidental trailing semicolons (practicalswift)\n+- #10307 `83073de` [tests] allow zmq test to be run in out-of-tree builds (jnewbery)\n+- #10344 `e927483` [tests] Fix abandonconflict.py intermittency (jnewbery)\n+- #10318 `170bc2c` [tests] fix wait_for_inv() (jnewbery)\n+- #10171 `fff72de` [tests] Add node methods to test framework (jnewbery)\n+- #10352 `23d78c4` test: Add elapsed time to RPC tracing (laanwj)\n+- #10342 `6a796b2` [tests] Improve mempool_persist test (jnewbery)\n+- #10287 `776ba23` [tests] Update Unit Test for addrman.h/addrman.cpp (jimmysong)\n+- #10365 `7ee5236` [tests] increase timeouts in sendheaders test (jnewbery)\n+- #10361 `f6241b3` qa: disablewallet: Check that wallet is really disabled (MarcoFalke)\n+- #10371 `4b766fc` [tests] Clean up addrman_tests.cpp (jimmysong)\n+- #10253 `87abe20` [test] Add test for getnetworkhashps (jimmysong)\n+- #10376 `8bd16ee` [tests] fix disconnect_ban intermittency (jnewbery)\n+- #10374 `5411997` qa: Warn when specified test is not found (MarcoFalke)\n+- #10405 `0542978` tests: Correct testcase in script_tests.json for large number OP_EQUAL (laanwj)\n+- #10429 `6b99daf` tests: fix spurious addrman test failure (theuni)\n+- #10433 `8e57256` [tests] improve tmpdir structure (jnewbery)\n+- #10415 `217b416` [tests] Speed up fuzzing by ~200x when using afl-fuzz (practicalswift)\n+- #10445 `b4b057a` Add test for empty chain and reorg consistency for gettxoutsetinfo (gmaxwell)\n+- #10423 `1aefc94` [tests] skipped tests should clean up after themselves (jnewbery)\n+- #10359 `329fc1d` [tests] functional tests should call BitcoinTestFramework start/stop node methods (jnewbery)\n+- #10514 `e103b3f` Bugfix: missing == 0 after randrange (sipa)\n+- #10515 `c871f32` [test] Add test for getchaintxstats (jimmysong)\n+- #10509 `bea5b00` Remove xvfb configuration from travis (ryanofsky)\n+- #10535 `30853e1` [qa] fundrawtx: Fix shutdown race (MarcoFalke)\n+- #9909 `300f8e7` tests: Add FindEarliestAtLeast test for edge cases (ryanofsky)\n+- #10331 `75e898c` Share config between util and functional tests (jnewbery)\n+- #10321 `e801084` Use FastRandomContext for all tests (sipa)\n+- #10524 `6c2d81f` [tests] Remove printf(...) (practicalswift)\n+- #10547 `71ab6e5` [tests] Use FastRandomContext instead of boost::random::{mt19937,uniform_int_distribution} (practicalswift)\n+- #10551 `6702617` [Tests] Wallet encryption functional tests (achow101)\n+- #10555 `643fa0b` [tests] various improvements to zmq_test.py (jnewbery)\n+- #10533 `d083bd9` [tests] Use cookie auth instead of rpcuser and rpcpassword (achow101)\n+- #10632 `c68a9a6` qa: Add stopatheight test (MarcoFalke)\n+- #10636 `4bc853b` [qa] util: Check return code after closing bitcoind proc (MarcoFalke)\n+- #10662 `e0a7801` Initialize randomness in benchmarks (achow101)\n+- #10612 `7c87a9c` The young person's guide to the test_framework (jnewbery)\n+- #10659 `acb1153` [qa] blockchain: Pass on closed connection during generate call (MarcoFalke)\n+- #10690 `416af3e` [qa] Bugfix: allow overriding extra_args in ComparisonTestFramework (sdaftuar)\n+- #10556 `65cc7aa` Move stop/start functions from utils.py into BitcoinTestFramework (jnewbery)\n+- #10704 `dd07f47` [tests] nits in dbcrash.py (jnewbery)\n+- #10743 `be82498` [test] don't run dbcrash.py on Travis (jnewbery)\n+- #10761 `d3b5870` [tests] fix replace_by_fee.py (jnewbery)\n+- #10759 `1d4805c` Fix multi_rpc test for hosts that dont default to utf8 (TheBlueMatt)\n+- #10190 `e4f226a` [tests] mining functional tests (including regression test for submitblock) (jnewbery)\n+- #10739 `1fc783f` test: Move variable `state` down where it is used (paveljanik)\n+- #9980 `fee0d80` Fix mem access violation merkleblock (Christewart)\n+- #10893 `0c173a1` [QA] Avoid running multiwallet.py twice (jonasschnelli)\n+- #10927 `9d5e8f9` test: Make sure wallet.backup is created in temp path (laanwj)\n+- #10899 `f29d5db` [test] Qt: Use _putenv_s instead of setenv on Windows builds (brianmcmichael)\n+- #10912 `5c8eb79` [tests] Fix incorrect memory_cleanse(\u2026) call in crypto_tests.cpp (practicalswift)\n+- #11001 `fa8a063` [tests] Test disconnecting unsupported service bits logic (jnewbery)\n+- #10695 `929fd72` [qa] Rewrite BIP65/BIP66 functional tests (sdaftuar)\n+- #10963 `ecd2135` [bench] Restore format state of cout after printing with std::fixed/setprecision (practicalswift)\n+- #11025 `e5d26e4` qa: Fix inv race in example_test (MarcoFalke)\n+- #10765 `2c811e0` Tests: address placement should be deterministic by default (ReneNyffenegger)\n+- #11000 `ac016e1` test: Add resendwallettransactions functional tests (promag)\n+- #11032 `aeb3175` [qa] Fix block message processing error in sendheaders.py (sdaftuar)\n+- #10105 `0b9fb68` [tests] fixup - make all Travis test runs quiet, non just cron job runs (jnewbery)\n+- #10222 `6ce7337` [tests] test_runner - check unicode (jnewbery)\n+- #10327 `35da2ae` [tests] remove import-abort-rescan.py (jnewbery)\n+- #11023 `bf74d37` [tests] Add option to attach a python debugger if functional test fails (jnewbery)\n+- #10565 `8c2098a` [coverage] Remove subtrees and benchmarks from coverage report (achow101)\n+\n+### Miscellaneous\n+- #9871 `be8ba2c` Add a tree sha512 hash to merge commits (sipa)\n+- #9821 `d19d45a` util: Specific GetOSRandom for Linux/FreeBSD/OpenBSD (laanwj)\n+- #9903 `ba80a68` Docs: add details to -rpcclienttimeout doc (ian-kelling)\n+- #9910 `53c300f` Docs: correct and elaborate -rpcbind doc (ian-kelling)\n+- #9905 `01b7cda` [contrib] gh-merge: Move second sha512 check to the end (MarcoFalke)\n+- #9880 `4df8213` Verify Tree-SHA512s in merge commits, enforce sigs are not SHA1 (TheBlueMatt)\n+- #9932 `00c13ea` Fix verify-commits on travis and always check top commit's tree (TheBlueMatt)\n+- #9952 `6996e06` Add historical release notes for 0.14.0 (laanwj)\n+- #9940 `fa99663` Fix verify-commits on OSX, update for new bad Tree-SHA512, point travis to different keyservers (TheBlueMatt)\n+- #9963 `8040ae6` util: Properly handle errors during log message formatting (laanwj)\n+- #9984 `cce056d` devtools: Make github-merge compute SHA512 from git, instead of worktree (laanwj)\n+- #9995 `8bcf934` [doc] clarify blockchain size and pruning (askmike)\n+- #9734 `0c17afc` Add updating of chainTxData to release process (sipa)\n+- #10063 `530fcbd` add missing spaces so that markdown recognizes headline (flack)\n+- #10085 `db1ae54` Docs: remove 'noconnect' option (jlopp)\n+- #10090 `8e4f7e7` Update bitcoin.conf with example for pruning (coinables)\n+- #9424 `1a5aaab` Change LogAcceptCategory to use uint32_t rather than sets of strings (gmaxwell)\n+- #10036 `fbf36ca` Fix init README format to render correctly on github (jlopp)\n+- #10058 `a2cd0b0` No need to use OpenSSL malloc/free (tjps)\n+- #10123 `471ed00` Allow debug logs to be excluded from specified component (jnewbery)\n+- #10104 `fadf078` linearize script: Option to use RPC cookie (achow101)\n+- #10162 `a3a2160` [trivial] Log calls to getblocktemplate (jnewbery)\n+- #10155 `928695b` build: Deduplicate version numbers (laanwj)\n+- #10211 `a86255b` [doc] Contributor fixes & new \"finding reviewers\" section (kallewoof)\n+- #10250 `1428f30` Fix some empty vector references (sipa)\n+- #10270 `95f5e44` Remove Clang workaround for Boost 1.46 (fanquake)\n+- #10263 `cb007e4` Trivial: fix fee estimate write error log message (CryptAxe)\n+- #9670 `bd9ec0e` contrib: github-merge improvements (laanwj)\n+- #10260 `1d75597` [doc] Minor corrections to osx dependencies (fanquake)\n+- #10189 `750c5a5` devtools/net: add a verifier for scriptable changes. Use it to make CNode::id private (theuni)\n+- #10322 `bc64b5a` Use hardware timestamps in RNG seeding (sipa)\n+- #10381 `7f2b9e0` Shadowing warnings are not enabled by default, update doc accordingly (paveljanik)\n+- #10380 `b6ee855` [doc] Removing comments about dirty entries on txmempool (madeo)\n+- #10383 `d0c37ee` [logging] log system time and mock time (jnewbery)\n+- #10404 `b45a52a` doc: Add logging to FinalizeNode() (sdaftuar)\n+- #10388 `526e839` Output line to debug.log when IsInitialBlockDownload latches to false (morcos)\n+- #10372 `15254e9` Add perf counter data to GetStrongRandBytes state in scheduler (TheBlueMatt)\n+- #10461 `55b72f3` Update style guide (sipa)\n+- #10486 `10e8c0a` devtools: Retry after signing fails in github-merge (laanwj)\n+- #10447 `f259263` Make bitcoind invalid argument error message specific (laanwj)\n+- #10495 `6a38b79` contrib: Update location of seeds.txt (laanwj)\n+- #10469 `b6b150b` Fixing typo in rpcdump.cpp help message (keystrike)\n+- #10451 `27b9931` contrib/init/bitcoind.openrcconf: Don't disable wallet by default (luke-jr)\n+- #10323 `00d3692` Update to latest libsecp256k1 master (sipa)\n+- #10422 `cec9e1e` Fix timestamp in fee estimate debug message (morcos)\n+- #10566 `5d034ee` [docs] Use the \"domain name setup\" image (previously unused) in the gitian docs (practicalswift)\n+- #10534 `a514ac3` Clarify prevector::erase and avoid swap-to-clear (sipa)\n+- #10575 `22ec768` Header include guideline (sipa)\n+- #10480 `fbf5d3b` Improve commit-check-script.sh (sipa)\n+- #10502 `1ad3d4e` scripted-diff: Remove BOOST_FOREACH, Q_FOREACH and PAIRTYPE (jtimon)\n+- #10377 `b63be2c` Use rdrand as entropy source on supported platforms (sipa)\n+- #9895 `228c319` Turn TryCreateDirectory() into TryCreateDirectories() (benma)\n+- #10602 `d76e84a` Make clang-format use C++11 features (e.g. A<A<int>> instead of A<A<int> >) (practicalswift)\n+- #10623 `c38f540` doc: Add 0.14.2 release notes (MarcoFalke)\n+- #10276 `b750b33` contrib/verifybinaries: allow filtering by platform (knocte)\n+- #10248 `01c4b14` Rewrite addrdb with less duplication using CHashVerifier (sipa)\n+- #10577 `232508f` Add an explanation of quickly hashing onto a non-power of two range (gmaxwell)\n+- #10608 `eee398f` Add a comment explaining the use of MAX_BLOCK_BASE_SIZE (gmaxwell)\n+- #10728 `7397af9` fix typo in help text for removeprunedfunds (AkioNak)\n+- #10193 `6dbcc74` scripted-diff: Remove #include <boost/foreach.hpp> (jtimon)\n+- #10676 `379aed0` document script-based return fields for validateaddress (instagibbs)\n+- #10651 `cef4b5c` Verify binaries from bitcoincore.org and bitcoin.org (TheBlueMatt)\n+- #10786 `ca4c545` Add PR description to merge commit in github-merge.py (sipa)\n+- #10812 `c5904e8` [utils] Allow bitcoin-cli's -rpcconnect option to be used with square brackets (jnewbery)\n+- #10842 `3895e25` Fix incorrect Doxygen tag (@ince \u2192 @since). Doxygen parameter name matching (practicalswift)\n+- #10681 `df0793f` add gdb attach process to test README (instagibbs)\n+- #10789 `1124328` Punctuation/grammer fixes in rpcwallet.cpp (stevendlander)\n+- #10655 `78f307b` Properly document target_confirmations in listsinceblock (RHavar)\n+- #10917 `5c003cb` developer-notes: add reference to snake_case and PascalCase (benma)\n+- #11003 `4b5a7ce` Docs: Capitalize bullet points in CONTRIBUTING guide (eklitzke)\n+- #10968 `98aa3f6` Add instructions for parallel gitian builds (coblee)\n+- #11076 `1c4b9b3` 0.15 release-notes nits: fix redundancy, remove accidental parenthesis & fix range style (practicalswift)\n+- #11090 `8f0121c` Update contributor names in release-notes.md (Derek701)\n+- #11056 `cbdd338` disable jni in builds (instagibbs)\n+- #11080 `2b59cfb` doc: Update build-openbsd for 6.1 (laanwj)\n+- #11119 `0a6af47` [doc] build-windows: Mention that only trusty works (MarcoFalke)\n+- #11108 `e8ad101` Changing -txindex requires -reindex, not -reindex-chainstate (TheBlueMatt)\n+- #9792 `342b9bc` FastRandomContext improvements and switch to ChaCha20 (sipa)\n+- #9505 `67ed40e` Prevector Quick Destruct (JeremyRubin)\n+- #10820 `ef37f20` Use cpuid intrinsics instead of asm code (sipa)\n+- #9999 `a328904` [LevelDB] Plug leveldb logs to bitcoin logs (NicolasDorier)\n+- #9693 `c5e9e42` Prevent integer overflow in ReadVarInt (gmaxwell)\n+- #10129 `351d0ad` scheduler: fix sub-second precision with boost < 1.50 (theuni)\n+- #10153 `fade788` logging: Fix off-by-one for shrinkdebugfile default (MarcoFalke)\n+- #10305 `c45da32` Fix potential NPD introduced in b297426c (TheBlueMatt)\n+- #10338 `daf3e7d` Maintain state across GetStrongRandBytes calls (sipa)\n+- #10544 `a4fe077` Update to LevelDB 1.20 (sipa)\n+- #10614 `cafe24f` random: fix crash on some 64bit platforms (theuni)\n+- #10714 `2a09a38` Avoid printing incorrect block indexing time due to uninitialized variable (practicalswift)\n+- #10837 `8bc6d1f` Fix resource leak on error in GetDevURandom (corebob)\n+- #10832 `89bb036` init: Factor out AppInitLockDataDirectory and fix startup core dump issue (laanwj)\n+- #10914 `b995a37` Add missing lock in CScheduler::AreThreadsServicingQueue() (TheBlueMatt)\n+- #10958 `659c096` Update to latest Bitcoin patches for LevelDB (sipa)\n+- #10919 `c1c671f` Fix more init bugs (TheBlueMatt)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- \u30ed\u30cf\u30f3 \u30c0\u30eb\n+- Ahmad Kazi\n+- aideca\n+- Akio Nakamura\n+- Alex Morcos\n+- Allan Doensen\n+- Andres G. Aragoneses\n+- Andrew Chow\n+- Angel Leon\n+- Awemany\n+- Bob McElrath\n+- Brian McMichael\n+- BtcDrak\n+- Charlie Lee\n+- Chris Gavin\n+- Chris Stewart\n+- Cory Fields\n+- CryptAxe\n+- Dag Robole\n+- Daniel Aleksandersen\n+- Daniel Cousens\n+- darksh1ne\n+- Dimitris Tsapakidis\n+- Eric Shaw\n+- Evan Klitzke\n+- fanquake\n+- Felix Weis\n+- flack\n+- Guido Vranken\n+- Greg Griffith\n+- Gregory Maxwell\n+- Gregory Sanders\n+- Ian Kelling\n+- Jack Grigg\n+- James Evans\n+- James Hilliard\n+- Jameson Lopp\n+- Jeremy Rubin\n+- Jimmy Song\n+- Jo\u00e3o Barbosa\n+- Johnathan Corgan\n+- John Newbery\n+- Jonas Schnelli\n+- Jorge Tim\u00f3n\n+- Karl-Johan Alm\n+- kewde\n+- KibbledJiveElkZoo\n+- Kirit Thadaka\n+- kobake\n+- Kyle Honeycutt\n+- Lawrence Nahum\n+- Luke Dashjr\n+- Marco Falke\n+- Marcos Mayorga\n+- Marijn Stollenga\n+- Mario Dian\n+- Mark Friedenbach\n+- Marko Bencun\n+- Masahiko Hyuga\n+- Matt Corallo\n+- Matthew Zipkin\n+- Matthias Grundmann\n+- Michael Goldstein\n+- Michael Rotarius\n+- Mikerah\n+- Mike van Rossum\n+- Mitchell Cash\n+- Nicolas Dorier\n+- Patrick Strateman\n+- Pavel Jan\u00edk\n+- Pavlos Antoniou\n+- Pavol Rusnak\n+- Pedro Branco\n+- Peter Todd\n+- Pieter Wuille\n+- practicalswift\n+- Ren\u00e9 Nyffenegger\n+- Ricardo Velhote\n+- romanornr\n+- Russell Yanofsky\n+- Rusty Russell\n+- Ryan Havar\n+- shaolinfry\n+- Shigeya Suzuki\n+- Simone Madeo\n+- Spencer Lievens\n+- Steven D. Lander\n+- Suhas Daftuar\n+- Takashi Mitsuta\n+- Thomas Snider\n+- Timothy Redaelli\n+- tintinweb\n+- tnaka\n+- Warren Togami\n+- Wladimir J. van der Laan\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "d8dd8e7356b4109cfde48d2667ea4da29c849cf8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOGRkOGU3MzU2YjQxMDljZmRlNDhkMjY2N2VhNGRhMjljODQ5Y2Y4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-04T15:45:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:08Z"
      },
      "message": "[tests] fixup dbcrash interaction with add_nodes()\n\nGithub-Pull: #11230\nRebased-From: 8fdb6f9126fe1e13b60de11fd34c204247679ef4",
      "tree": {
        "sha": "a1257847751e4b9ea06cf681d1b76e8e6533dfc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1257847751e4b9ea06cf681d1b76e8e6533dfc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8dd8e7356b4109cfde48d2667ea4da29c849cf8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8dd8e7356b4109cfde48d2667ea4da29c849cf8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8dd8e7356b4109cfde48d2667ea4da29c849cf8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8dd8e7356b4109cfde48d2667ea4da29c849cf8/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b97b36e5d37c6935dce112f90213f4f49cd88ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b97b36e5d37c6935dce112f90213f4f49cd88ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b97b36e5d37c6935dce112f90213f4f49cd88ad"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "24b9765b4e3773ab8830f7950da1adbb15fad601",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8dd8e7356b4109cfde48d2667ea4da29c849cf8/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8dd8e7356b4109cfde48d2667ea4da29c849cf8/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=d8dd8e7356b4109cfde48d2667ea4da29c849cf8",
        "patch": "@@ -64,7 +64,7 @@ def set_test_params(self):\n \n     def setup_network(self):\n         # Need a bit of extra time for the nodes to start up for this test\n-        self.add_nodes(self.num_nodes, timewait=90)\n+        self.add_nodes(self.num_nodes, extra_args=self.extra_args, timewait=90)\n         self.start_nodes()\n         # Leave them unconnected, we'll use submitblock directly in this test\n "
      }
    ]
  },
  {
    "sha": "b6468d3c420f73627956fc94c9743d26d75af8b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNjQ2OGQzYzQyMGY3MzYyNzk1NmZjOTRjOTc0M2QyNmQ3NWFmOGIw",
    "commit": {
      "author": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-09-12T21:41:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:08Z"
      },
      "message": "Add listwallets RPC test to multiwallet.py\n\nGithub-Pull: #11310\nRebased-From: fb1f3258225a7052f4fc9e3f2accc3811c53e221",
      "tree": {
        "sha": "8e8410429891a6a56cb320a0f7d2ec57eb45876c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e8410429891a6a56cb320a0f7d2ec57eb45876c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6468d3c420f73627956fc94c9743d26d75af8b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6468d3c420f73627956fc94c9743d26d75af8b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6468d3c420f73627956fc94c9743d26d75af8b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6468d3c420f73627956fc94c9743d26d75af8b0/comments",
    "author": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8dd8e7356b4109cfde48d2667ea4da29c849cf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8dd8e7356b4109cfde48d2667ea4da29c849cf8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8dd8e7356b4109cfde48d2667ea4da29c849cf8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b4e15a332219c36c81df953885b96db436461504",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6468d3c420f73627956fc94c9743d26d75af8b0/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6468d3c420f73627956fc94c9743d26d75af8b0/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=b6468d3c420f73627956fc94c9743d26d75af8b0",
        "patch": "@@ -18,6 +18,8 @@ def set_test_params(self):\n         self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3']]\n \n     def run_test(self):\n+        assert_equal(set(self.nodes[0].listwallets()), {\"w1\", \"w2\", \"w3\"})\n+\n         self.stop_node(0)\n \n         # should not initialize if there are duplicate wallets"
      }
    ]
  },
  {
    "sha": "2e1ac70df97be758a2a9869104a81cb454008174",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTFhYzcwZGY5N2JlNzU4YTJhOTg2OTEwNGE4MWNiNDU0MDA4MTc0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-09-12T15:20:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:08Z"
      },
      "message": "[qa] zapwallettxes: Wait up to 3s for mempool reload\n\nGithub-Pull: #11308\nRebased-From: fadd0c16b6bd62e9d663d906755320ae089e02d3",
      "tree": {
        "sha": "38b8dc9442eb37a6ad1660f4e8f38b120c54b77c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38b8dc9442eb37a6ad1660f4e8f38b120c54b77c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e1ac70df97be758a2a9869104a81cb454008174",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e1ac70df97be758a2a9869104a81cb454008174",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e1ac70df97be758a2a9869104a81cb454008174",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e1ac70df97be758a2a9869104a81cb454008174/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6468d3c420f73627956fc94c9743d26d75af8b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6468d3c420f73627956fc94c9743d26d75af8b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6468d3c420f73627956fc94c9743d26d75af8b0"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 7,
      "deletions": 3
    },
    "files": [
      {
        "sha": "83b11035c89ec5a7a02828c2cfb9f3fe7df18f27",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e1ac70df97be758a2a9869104a81cb454008174/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e1ac70df97be758a2a9869104a81cb454008174/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=2e1ac70df97be758a2a9869104a81cb454008174",
        "patch": "@@ -15,9 +15,11 @@\n   been zapped.\n \"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal,\n-                                 assert_raises_jsonrpc,\n-                                 )\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    wait_until,\n+)\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n     def set_test_params(self):\n@@ -56,6 +58,8 @@ def run_test(self):\n         self.stop_node(0)\n         self.start_node(0, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n \n+        wait_until(lambda: self.nodes[0].getmempoolinfo()['size'] == 1, timeout=3)\n+\n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n         assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n "
      }
    ]
  },
  {
    "sha": "f1ced0d7761d1316c6b522b2b426e79833e4cbae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWNlZDBkNzc2MWQxMzE2YzZiNTIyYjJiNDI2ZTc5ODMzZTRjYmFl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-08-17T15:35:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "[tests] Make p2p-leaktests.py more robust\n\nGithub-Pull: #11078\nRebased-From: 0063d2c3dce9d9c1678197d2c65ee878793d1ef9",
      "tree": {
        "sha": "d31db5026a73908737b3597b2e60001c4f59fed4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d31db5026a73908737b3597b2e60001c4f59fed4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1ced0d7761d1316c6b522b2b426e79833e4cbae",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ced0d7761d1316c6b522b2b426e79833e4cbae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ced0d7761d1316c6b522b2b426e79833e4cbae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ced0d7761d1316c6b522b2b426e79833e4cbae/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e1ac70df97be758a2a9869104a81cb454008174",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e1ac70df97be758a2a9869104a81cb454008174",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e1ac70df97be758a2a9869104a81cb454008174"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1dc8f72cd63246a4e96c590eece563c26fac04d5",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ced0d7761d1316c6b522b2b426e79833e4cbae/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ced0d7761d1316c6b522b2b426e79833e4cbae/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=f1ced0d7761d1316c6b522b2b426e79833e4cbae",
        "patch": "@@ -139,6 +139,9 @@ def run_test(self):\n \n         [conn.disconnect_node() for conn in connections]\n \n+        # Wait until all connections are closed\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)\n+\n         # Make sure no unexpected messages came in\n         assert(no_version_bannode.unexpected_msg == False)\n         assert(no_version_idlenode.unexpected_msg == False)\n@@ -157,8 +160,10 @@ def run_test(self):\n         allowed_service_bit5_node.add_connection(connections[5])\n         allowed_service_bit7_node.add_connection(connections[6])\n \n-        wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], timeout=10, lock=mininode_lock)\n-        wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], timeout=10, lock=mininode_lock)\n+        NetworkThread().start()  # Network thread stopped when all previous NodeConnCBs disconnected. Restart it\n+\n+        wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], lock=mininode_lock)\n+        wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], lock=mininode_lock)\n \n if __name__ == '__main__':\n     P2PLeakTest().main()"
      },
      {
        "sha": "59245302303c4647f808715f5fd776a25f58a34d",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ced0d7761d1316c6b522b2b426e79833e4cbae/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ced0d7761d1316c6b522b2b426e79833e4cbae/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=f1ced0d7761d1316c6b522b2b426e79833e4cbae",
        "patch": "@@ -1837,6 +1837,7 @@ def run(self):\n                     disconnected.append(obj)\n             [ obj.handle_close() for obj in disconnected ]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n+        logger.debug(\"Network thread closing\")\n \n \n # An exception we can raise if we detect a potential disconnect"
      }
    ]
  },
  {
    "sha": "f9cf7b589f430b2d7c52e477b6d62f29d748c38e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWNmN2I1ODlmNDMwYjJkN2M1MmU0NzdiNmQ2MmYyOWQ3NDhjMzhl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-09-15T18:36:12Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "[tests] Check connectivity before sending in assumevalid.py\n\nassumevalid.py would try to send over a closed P2P connection in a loop,\nhitting the following failure many times:\n\nTestFramework.mininode (ERROR): Cannot send message. No connection to node!\n\nThe test still passes, but this is a lot of noise in the test log.\n\nJust check that the connection is open before trying to send.\n\nGithub-Pull: #11345\nRebased-From: e9e9391083721ca9733cc00a1907384f83b6435e",
      "tree": {
        "sha": "1e5e2eee186531531cf2b51bc5bbdaa6c7f609d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1e5e2eee186531531cf2b51bc5bbdaa6c7f609d3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9cf7b589f430b2d7c52e477b6d62f29d748c38e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9cf7b589f430b2d7c52e477b6d62f29d748c38e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9cf7b589f430b2d7c52e477b6d62f29d748c38e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9cf7b589f430b2d7c52e477b6d62f29d748c38e/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1ced0d7761d1316c6b522b2b426e79833e4cbae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ced0d7761d1316c6b522b2b426e79833e4cbae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ced0d7761d1316c6b522b2b426e79833e4cbae"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "65685c48b7eef7e314375a751964057b2e3f1bdf",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cf7b589f430b2d7c52e477b6d62f29d748c38e/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cf7b589f430b2d7c52e477b6d62f29d748c38e/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=f9cf7b589f430b2d7c52e477b6d62f29d748c38e",
        "patch": "@@ -68,6 +68,8 @@ def setup_network(self):\n     def send_blocks_until_disconnected(self, node):\n         \"\"\"Keep sending blocks to the node until we're disconnected.\"\"\"\n         for i in range(len(self.blocks)):\n+            if not node.connection:\n+                break\n             try:\n                 node.send_message(msg_block(self.blocks[i]))\n             except IOError as e:"
      }
    ]
  },
  {
    "sha": "794a80eee335a10d239aed7fdbdd013bce45161d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTRhODBlZWUzMzVhMTBkMjM5YWVkN2ZkYmRkMDEzYmNlNDUxNjFk",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-08-18T21:40:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "[script] Unit tests for script/standard functions\n\nGithub-Pull: #11116\nRebased-From: d7afe2d1577eb3f6775301c81b94a191e0db99d9",
      "tree": {
        "sha": "261e83618a2e715e7626c84d9fc21fa14cfc41bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/261e83618a2e715e7626c84d9fc21fa14cfc41bb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/794a80eee335a10d239aed7fdbdd013bce45161d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/794a80eee335a10d239aed7fdbdd013bce45161d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/794a80eee335a10d239aed7fdbdd013bce45161d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/794a80eee335a10d239aed7fdbdd013bce45161d/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9cf7b589f430b2d7c52e477b6d62f29d748c38e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9cf7b589f430b2d7c52e477b6d62f29d748c38e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9cf7b589f430b2d7c52e477b6d62f29d748c38e"
      }
    ],
    "stats": {
      "total": 477,
      "additions": 386,
      "deletions": 91
    },
    "files": [
      {
        "sha": "3a932f460d697cc27707789b2dd708fc5fce8776",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a80eee335a10d239aed7fdbdd013bce45161d/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a80eee335a10d239aed7fdbdd013bce45161d/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=794a80eee335a10d239aed7fdbdd013bce45161d",
        "patch": "@@ -65,6 +65,7 @@ BITCOIN_TESTS =\\\n   test/scheduler_tests.cpp \\\n   test/script_P2SH_tests.cpp \\\n   test/script_tests.cpp \\\n+  test/script_standard_tests.cpp \\\n   test/scriptnum_tests.cpp \\\n   test/serialize_tests.cpp \\\n   test/sighash_tests.cpp \\"
      },
      {
        "sha": "de7f3b48f5d6fb4036905b078bb8ec320d42bbc5",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 91,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a80eee335a10d239aed7fdbdd013bce45161d/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a80eee335a10d239aed7fdbdd013bce45161d/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=794a80eee335a10d239aed7fdbdd013bce45161d",
        "patch": "@@ -16,8 +16,6 @@\n \n #include <boost/test/unit_test.hpp>\n \n-typedef std::vector<unsigned char> valtype;\n-\n BOOST_FIXTURE_TEST_SUITE(multisig_tests, BasicTestingSetup)\n \n CScript\n@@ -173,95 +171,6 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n         BOOST_CHECK(!::IsStandard(malformed[i], whichType));\n }\n \n-BOOST_AUTO_TEST_CASE(multisig_Solver1)\n-{\n-    // Tests Solver() that returns lists of keys that are\n-    // required to satisfy a ScriptPubKey\n-    //\n-    // Also tests IsMine() and ExtractDestination()\n-    //\n-    // Note: ExtractDestination for the multisignature transactions\n-    // always returns false for this release, even if you have\n-    // one key that would satisfy an (a|b) or 2-of-3 keys needed\n-    // to spend an escrow transaction.\n-    //\n-    CBasicKeyStore keystore, emptykeystore, partialkeystore;\n-    CKey key[3];\n-    CTxDestination keyaddr[3];\n-    for (int i = 0; i < 3; i++)\n-    {\n-        key[i].MakeNewKey(true);\n-        keystore.AddKey(key[i]);\n-        keyaddr[i] = key[i].GetPubKey().GetID();\n-    }\n-    partialkeystore.AddKey(key[0]);\n-\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK(solutions.size() == 1);\n-        CTxDestination addr;\n-        BOOST_CHECK(ExtractDestination(s, addr));\n-        BOOST_CHECK(addr == keyaddr[0]);\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n-    }\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << OP_DUP << OP_HASH160 << ToByteVector(key[0].GetPubKey().GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK(solutions.size() == 1);\n-        CTxDestination addr;\n-        BOOST_CHECK(ExtractDestination(s, addr));\n-        BOOST_CHECK(addr == keyaddr[0]);\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n-    }\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK_EQUAL(solutions.size(), 4U);\n-        CTxDestination addr;\n-        BOOST_CHECK(!ExtractDestination(s, addr));\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n-        BOOST_CHECK(!IsMine(partialkeystore, s));\n-    }\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK_EQUAL(solutions.size(), 4U);\n-        std::vector<CTxDestination> addrs;\n-        int nRequired;\n-        BOOST_CHECK(ExtractDestinations(s, whichType, addrs, nRequired));\n-        BOOST_CHECK(addrs[0] == keyaddr[0]);\n-        BOOST_CHECK(addrs[1] == keyaddr[1]);\n-        BOOST_CHECK(nRequired == 1);\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n-        BOOST_CHECK(!IsMine(partialkeystore, s));\n-    }\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK(solutions.size() == 5);\n-    }\n-}\n-\n BOOST_AUTO_TEST_CASE(multisig_Sign)\n {\n     // Test SignSignature() (and therefore the version of Solver() that signs transactions)"
      },
      {
        "sha": "e6a63ad54eb3005c15be93cd72bf80b27e063ef3",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "added",
        "additions": 385,
        "deletions": 0,
        "changes": 385,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/794a80eee335a10d239aed7fdbdd013bce45161d/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/794a80eee335a10d239aed7fdbdd013bce45161d/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=794a80eee335a10d239aed7fdbdd013bce45161d",
        "patch": "@@ -0,0 +1,385 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"key.h\"\n+#include \"script/script.h\"\n+#include \"script/script_error.h\"\n+#include \"script/standard.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(script_standard_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n+{\n+    CKey keys[3];\n+    CPubKey pubkeys[3];\n+    for (int i = 0; i < 3; i++) {\n+        keys[i].MakeNewKey(true);\n+        pubkeys[i] = keys[i].GetPubKey();\n+    }\n+\n+    CScript s;\n+    txnouttype whichType;\n+    std::vector<std::vector<unsigned char> > solutions;\n+\n+    // TX_PUBKEY\n+    s.clear();\n+    s << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_PUBKEY);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0]));\n+\n+    // TX_PUBKEYHASH\n+    s.clear();\n+    s << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_PUBKEYHASH);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0].GetID()));\n+\n+    // TX_SCRIPTHASH\n+    CScript redeemScript(s); // initialize with leftover P2PKH script\n+    s.clear();\n+    s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_SCRIPTHASH);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(CScriptID(redeemScript)));\n+\n+    // TX_MULTISIG\n+    s.clear();\n+    s << OP_1 <<\n+        ToByteVector(pubkeys[0]) <<\n+        ToByteVector(pubkeys[1]) <<\n+        OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n+    BOOST_CHECK_EQUAL(solutions.size(), 4);\n+    BOOST_CHECK(solutions[0] == std::vector<unsigned char>({1}));\n+    BOOST_CHECK(solutions[1] == ToByteVector(pubkeys[0]));\n+    BOOST_CHECK(solutions[2] == ToByteVector(pubkeys[1]));\n+    BOOST_CHECK(solutions[3] == std::vector<unsigned char>({2}));\n+\n+    s.clear();\n+    s << OP_2 <<\n+        ToByteVector(pubkeys[0]) <<\n+        ToByteVector(pubkeys[1]) <<\n+        ToByteVector(pubkeys[2]) <<\n+        OP_3 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n+    BOOST_CHECK_EQUAL(solutions.size(), 5);\n+    BOOST_CHECK(solutions[0] == std::vector<unsigned char>({2}));\n+    BOOST_CHECK(solutions[1] == ToByteVector(pubkeys[0]));\n+    BOOST_CHECK(solutions[2] == ToByteVector(pubkeys[1]));\n+    BOOST_CHECK(solutions[3] == ToByteVector(pubkeys[2]));\n+    BOOST_CHECK(solutions[4] == std::vector<unsigned char>({3}));\n+\n+    // TX_NULL_DATA\n+    solutions.clear();\n+    s.clear();\n+    s << OP_RETURN <<\n+        std::vector<unsigned char>({0}) <<\n+        std::vector<unsigned char>({75}) <<\n+        std::vector<unsigned char>({255});\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_NULL_DATA);\n+    BOOST_CHECK_EQUAL(solutions.size(), 0);\n+\n+    // TX_WITNESS_V0_KEYHASH\n+    solutions.clear();\n+    s.clear();\n+    s << OP_0 << ToByteVector(pubkeys[0].GetID());\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_WITNESS_V0_KEYHASH);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0].GetID()));\n+\n+    // TX_WITNESS_V0_SCRIPTHASH\n+    uint256 scriptHash;\n+    CSHA256().Write(&redeemScript[0], redeemScript.size()).Finalize(scriptHash.begin());\n+\n+    solutions.clear();\n+    s.clear();\n+    s << OP_0 << ToByteVector(scriptHash);\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_WITNESS_V0_SCRIPTHASH);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(scriptHash));\n+\n+    // TX_NONSTANDARD\n+    solutions.clear();\n+    s.clear();\n+    s << OP_9 << OP_ADD << OP_11 << OP_EQUAL;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_NONSTANDARD);\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)\n+{\n+    CKey key;\n+    CPubKey pubkey;\n+    key.MakeNewKey(true);\n+    pubkey = key.GetPubKey();\n+\n+    CScript s;\n+    txnouttype whichType;\n+    std::vector<std::vector<unsigned char> > solutions;\n+\n+    // TX_PUBKEY with incorrectly sized pubkey\n+    s.clear();\n+    s << std::vector<unsigned char>(30, 0x01) << OP_CHECKSIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_PUBKEYHASH with incorrectly sized key hash\n+    s.clear();\n+    s << OP_DUP << OP_HASH160 << ToByteVector(pubkey) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_SCRIPTHASH with incorrectly sized script hash\n+    s.clear();\n+    s << OP_HASH160 << std::vector<unsigned char>(21, 0x01) << OP_EQUAL;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_MULTISIG 0/2\n+    s.clear();\n+    s << OP_0 << ToByteVector(pubkey) << OP_1 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_MULTISIG 2/1\n+    s.clear();\n+    s << OP_2 << ToByteVector(pubkey) << OP_1 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_MULTISIG n = 2 with 1 pubkey\n+    s.clear();\n+    s << OP_1 << ToByteVector(pubkey) << OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_MULTISIG n = 1 with 0 pubkeys\n+    s.clear();\n+    s << OP_1 << OP_1 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_NULL_DATA with other opcodes\n+    s.clear();\n+    s << OP_RETURN << std::vector<unsigned char>({75}) << OP_ADD;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_WITNESS with unknown version\n+    s.clear();\n+    s << OP_1 << ToByteVector(pubkey);\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_WITNESS with incorrect program size\n+    s.clear();\n+    s << OP_0 << std::vector<unsigned char>(19, 0x01);\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n+{\n+    CKey key;\n+    CPubKey pubkey;\n+    key.MakeNewKey(true);\n+    pubkey = key.GetPubKey();\n+\n+    CScript s;\n+    CTxDestination address;\n+\n+    // TX_PUBKEY\n+    s.clear();\n+    s << ToByteVector(pubkey) << OP_CHECKSIG;\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    BOOST_CHECK(boost::get<CKeyID>(&address) &&\n+                *boost::get<CKeyID>(&address) == pubkey.GetID());\n+\n+    // TX_PUBKEYHASH\n+    s.clear();\n+    s << OP_DUP << OP_HASH160 << ToByteVector(pubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    BOOST_CHECK(boost::get<CKeyID>(&address) &&\n+                *boost::get<CKeyID>(&address) == pubkey.GetID());\n+\n+    // TX_SCRIPTHASH\n+    CScript redeemScript(s); // initialize with leftover P2PKH script\n+    s.clear();\n+    s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    BOOST_CHECK(boost::get<CScriptID>(&address) &&\n+                *boost::get<CScriptID>(&address) == CScriptID(redeemScript));\n+\n+    // TX_MULTISIG\n+    s.clear();\n+    s << OP_1 << ToByteVector(pubkey) << OP_1 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!ExtractDestination(s, address));\n+\n+    // TX_NULL_DATA\n+    s.clear();\n+    s << OP_RETURN << std::vector<unsigned char>({75});\n+    BOOST_CHECK(!ExtractDestination(s, address));\n+\n+    // TX_WITNESS_V0_KEYHASH\n+    s.clear();\n+    s << OP_0 << ToByteVector(pubkey);\n+    BOOST_CHECK(!ExtractDestination(s, address));\n+\n+    // TX_WITNESS_V0_SCRIPTHASH\n+    s.clear();\n+    s << OP_0 << ToByteVector(CScriptID(redeemScript));\n+    BOOST_CHECK(!ExtractDestination(s, address));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n+{\n+    CKey keys[3];\n+    CPubKey pubkeys[3];\n+    for (int i = 0; i < 3; i++) {\n+        keys[i].MakeNewKey(true);\n+        pubkeys[i] = keys[i].GetPubKey();\n+    }\n+\n+    CScript s;\n+    txnouttype whichType;\n+    std::vector<CTxDestination> addresses;\n+    int nRequired;\n+\n+    // TX_PUBKEY\n+    s.clear();\n+    s << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n+    BOOST_CHECK_EQUAL(whichType, TX_PUBKEY);\n+    BOOST_CHECK_EQUAL(addresses.size(), 1);\n+    BOOST_CHECK_EQUAL(nRequired, 1);\n+    BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n+                *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());\n+\n+    // TX_PUBKEYHASH\n+    s.clear();\n+    s << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n+    BOOST_CHECK_EQUAL(whichType, TX_PUBKEYHASH);\n+    BOOST_CHECK_EQUAL(addresses.size(), 1);\n+    BOOST_CHECK_EQUAL(nRequired, 1);\n+    BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n+                *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());\n+\n+    // TX_SCRIPTHASH\n+    CScript redeemScript(s); // initialize with leftover P2PKH script\n+    s.clear();\n+    s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n+    BOOST_CHECK_EQUAL(whichType, TX_SCRIPTHASH);\n+    BOOST_CHECK_EQUAL(addresses.size(), 1);\n+    BOOST_CHECK_EQUAL(nRequired, 1);\n+    BOOST_CHECK(boost::get<CScriptID>(&addresses[0]) &&\n+                *boost::get<CScriptID>(&addresses[0]) == CScriptID(redeemScript));\n+\n+    // TX_MULTISIG\n+    s.clear();\n+    s << OP_2 <<\n+        ToByteVector(pubkeys[0]) <<\n+        ToByteVector(pubkeys[1]) <<\n+        OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n+    BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n+    BOOST_CHECK_EQUAL(addresses.size(), 2);\n+    BOOST_CHECK_EQUAL(nRequired, 2);\n+    BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n+                *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());\n+    BOOST_CHECK(boost::get<CKeyID>(&addresses[1]) &&\n+                *boost::get<CKeyID>(&addresses[1]) == pubkeys[1].GetID());\n+\n+    // TX_NULL_DATA\n+    s.clear();\n+    s << OP_RETURN << std::vector<unsigned char>({75});\n+    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n+\n+    // TX_WITNESS_V0_KEYHASH\n+    s.clear();\n+    s << OP_0 << ToByteVector(pubkeys[0].GetID());\n+    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n+\n+    // TX_WITNESS_V0_SCRIPTHASH\n+    s.clear();\n+    s << OP_0 << ToByteVector(CScriptID(redeemScript));\n+    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)\n+{\n+    CKey keys[3];\n+    CPubKey pubkeys[3];\n+    for (int i = 0; i < 3; i++) {\n+        keys[i].MakeNewKey(true);\n+        pubkeys[i] = keys[i].GetPubKey();\n+    }\n+\n+    CScript expected, result;\n+\n+    // CKeyID\n+    expected.clear();\n+    expected << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    result = GetScriptForDestination(pubkeys[0].GetID());\n+    BOOST_CHECK(result == expected);\n+\n+    // CScriptID\n+    CScript redeemScript(result);\n+    expected.clear();\n+    expected << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+    result = GetScriptForDestination(CScriptID(redeemScript));\n+    BOOST_CHECK(result == expected);\n+\n+    // CNoDestination\n+    expected.clear();\n+    result = GetScriptForDestination(CNoDestination());\n+    BOOST_CHECK(result == expected);\n+\n+    // GetScriptForRawPubKey\n+    expected.clear();\n+    expected << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+    result = GetScriptForRawPubKey(pubkeys[0]);\n+    BOOST_CHECK(result == expected);\n+\n+    // GetScriptForMultisig\n+    expected.clear();\n+    expected << OP_2 <<\n+        ToByteVector(pubkeys[0]) <<\n+        ToByteVector(pubkeys[1]) <<\n+        ToByteVector(pubkeys[2]) <<\n+        OP_3 << OP_CHECKMULTISIG;\n+    result = GetScriptForMultisig(2, std::vector<CPubKey>(pubkeys, pubkeys + 3));\n+    BOOST_CHECK(result == expected);\n+\n+    // GetScriptForWitness\n+    CScript witnessScript;\n+\n+    witnessScript << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+    expected.clear();\n+    expected << OP_0 << ToByteVector(pubkeys[0].GetID());\n+    result = GetScriptForWitness(witnessScript);\n+    BOOST_CHECK(result == expected);\n+\n+    witnessScript.clear();\n+    witnessScript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    result = GetScriptForWitness(witnessScript);\n+    BOOST_CHECK(result == expected);\n+\n+    witnessScript.clear();\n+    witnessScript << OP_1 << ToByteVector(pubkeys[0]) << OP_1 << OP_CHECKMULTISIG;\n+\n+    uint256 scriptHash;\n+    CSHA256().Write(&witnessScript[0], witnessScript.size()).Finalize(scriptHash.begin());\n+\n+    expected.clear();\n+    expected << OP_0 << ToByteVector(scriptHash);\n+    result = GetScriptForWitness(witnessScript);\n+    BOOST_CHECK(result == expected);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "2c4ff35a8fce0c40884886a93c1bf12395fb105d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzRmZjM1YThmY2UwYzQwODg0ODg2YTkzYzFiZjEyMzk1ZmIxMDVk",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jimpo@coinbase.com",
        "date": "2017-08-23T00:47:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "[script] Unit tests for IsMine\n\nDoes not test watch-only addresses.\n\nGithub-Pull: #11116\nRebased-From: 7a1e873b27b790c965d9927ecd465710dc103136",
      "tree": {
        "sha": "83c0326b9efe09f938ec91d2af50069f4f049f8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/83c0326b9efe09f938ec91d2af50069f4f049f8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c4ff35a8fce0c40884886a93c1bf12395fb105d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c4ff35a8fce0c40884886a93c1bf12395fb105d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c4ff35a8fce0c40884886a93c1bf12395fb105d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c4ff35a8fce0c40884886a93c1bf12395fb105d/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "794a80eee335a10d239aed7fdbdd013bce45161d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/794a80eee335a10d239aed7fdbdd013bce45161d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/794a80eee335a10d239aed7fdbdd013bce45161d"
      }
    ],
    "stats": {
      "total": 369,
      "additions": 363,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c3aade1774767085b6e6502e3397f9b0b18f9b13",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c4ff35a8fce0c40884886a93c1bf12395fb105d/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c4ff35a8fce0c40884886a93c1bf12395fb105d/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=2c4ff35a8fce0c40884886a93c1bf12395fb105d",
        "patch": "@@ -46,6 +46,8 @@ isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest, bool& i\n \n isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool& isInvalid, SigVersion sigversion)\n {\n+    isInvalid = false;\n+\n     std::vector<valtype> vSolutions;\n     txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions)) {"
      },
      {
        "sha": "3d17a0dbb6c6ab03c8e9a60d4bc71c069dfa2ee5",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "modified",
        "additions": 361,
        "deletions": 6,
        "changes": 367,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c4ff35a8fce0c40884886a93c1bf12395fb105d/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c4ff35a8fce0c40884886a93c1bf12395fb105d/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=2c4ff35a8fce0c40884886a93c1bf12395fb105d",
        "patch": "@@ -3,6 +3,8 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"key.h\"\n+#include \"keystore.h\"\n+#include \"script/ismine.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n #include \"script/standard.h\"\n@@ -81,7 +83,6 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n     BOOST_CHECK(solutions[4] == std::vector<unsigned char>({3}));\n \n     // TX_NULL_DATA\n-    solutions.clear();\n     s.clear();\n     s << OP_RETURN <<\n         std::vector<unsigned char>({0}) <<\n@@ -92,7 +93,6 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n     BOOST_CHECK_EQUAL(solutions.size(), 0);\n \n     // TX_WITNESS_V0_KEYHASH\n-    solutions.clear();\n     s.clear();\n     s << OP_0 << ToByteVector(pubkeys[0].GetID());\n     BOOST_CHECK(Solver(s, whichType, solutions));\n@@ -102,9 +102,9 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n \n     // TX_WITNESS_V0_SCRIPTHASH\n     uint256 scriptHash;\n-    CSHA256().Write(&redeemScript[0], redeemScript.size()).Finalize(scriptHash.begin());\n+    CSHA256().Write(&redeemScript[0], redeemScript.size())\n+        .Finalize(scriptHash.begin());\n \n-    solutions.clear();\n     s.clear();\n     s << OP_0 << ToByteVector(scriptHash);\n     BOOST_CHECK(Solver(s, whichType, solutions));\n@@ -113,7 +113,6 @@ BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n     BOOST_CHECK(solutions[0] == ToByteVector(scriptHash));\n \n     // TX_NONSTANDARD\n-    solutions.clear();\n     s.clear();\n     s << OP_9 << OP_ADD << OP_11 << OP_EQUAL;\n     BOOST_CHECK(!Solver(s, whichType, solutions));\n@@ -374,12 +373,368 @@ BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)\n     witnessScript << OP_1 << ToByteVector(pubkeys[0]) << OP_1 << OP_CHECKMULTISIG;\n \n     uint256 scriptHash;\n-    CSHA256().Write(&witnessScript[0], witnessScript.size()).Finalize(scriptHash.begin());\n+    CSHA256().Write(&witnessScript[0], witnessScript.size())\n+        .Finalize(scriptHash.begin());\n \n     expected.clear();\n     expected << OP_0 << ToByteVector(scriptHash);\n     result = GetScriptForWitness(witnessScript);\n     BOOST_CHECK(result == expected);\n }\n \n+BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n+{\n+    CKey keys[2];\n+    CPubKey pubkeys[2];\n+    for (int i = 0; i < 2; i++) {\n+        keys[i].MakeNewKey(true);\n+        pubkeys[i] = keys[i].GetPubKey();\n+    }\n+\n+    CKey uncompressedKey;\n+    uncompressedKey.MakeNewKey(false);\n+    CPubKey uncompressedPubkey = uncompressedKey.GetPubKey();\n+\n+    CScript scriptPubKey;\n+    isminetype result;\n+    bool isInvalid;\n+\n+    // P2PK compressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey.clear();\n+        scriptPubKey << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key\n+        keystore.AddKey(keys[0]);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2PK uncompressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey.clear();\n+        scriptPubKey << ToByteVector(uncompressedPubkey) << OP_CHECKSIG;\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key\n+        keystore.AddKey(uncompressedKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2PKH compressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key\n+        keystore.AddKey(keys[0]);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2PKH uncompressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(uncompressedPubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key\n+        keystore.AddKey(uncompressedKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2SH\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript redeemScript;\n+        redeemScript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+\n+        // Keystore does not have redeemScript or key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has redeemScript but no key\n+        keystore.AddCScript(redeemScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has redeemScript and key\n+        keystore.AddKey(keys[0]);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2WPKH compressed\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(keys[0]);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_0 << ToByteVector(pubkeys[0].GetID());\n+\n+        // Keystore has key, but no P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key and P2SH redeemScript\n+        keystore.AddCScript(scriptPubKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2WPKH uncompressed\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(uncompressedKey);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_0 << ToByteVector(uncompressedPubkey.GetID());\n+\n+        // Keystore has key, but no P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key and P2SH redeemScript\n+        keystore.AddCScript(scriptPubKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(isInvalid);\n+    }\n+\n+    // scriptPubKey multisig\n+    {\n+        CBasicKeyStore keystore;\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_2 <<\n+            ToByteVector(uncompressedPubkey) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        // Keystore does not have any keys\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has 1/2 keys\n+        keystore.AddKey(uncompressedKey);\n+\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has 2/2 keys\n+        keystore.AddKey(keys[1]);\n+\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2SH multisig\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(uncompressedKey);\n+        keystore.AddKey(keys[1]);\n+\n+        CScript redeemScript;\n+        redeemScript << OP_2 <<\n+            ToByteVector(uncompressedPubkey) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+\n+        // Keystore has no redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has redeemScript\n+        keystore.AddCScript(redeemScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2WSH multisig with compressed keys\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(keys[0]);\n+        keystore.AddKey(keys[1]);\n+\n+        CScript witnessScript;\n+        witnessScript << OP_2 <<\n+            ToByteVector(pubkeys[0]) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        uint256 scriptHash;\n+        CSHA256().Write(&witnessScript[0], witnessScript.size())\n+            .Finalize(scriptHash.begin());\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_0 << ToByteVector(scriptHash);\n+\n+        // Keystore has keys, but no witnessScript or P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys and witnessScript, but no P2SH redeemScript\n+        keystore.AddCScript(witnessScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys, witnessScript, P2SH redeemScript\n+        keystore.AddCScript(scriptPubKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2WSH multisig with uncompressed key\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(uncompressedKey);\n+        keystore.AddKey(keys[1]);\n+\n+        CScript witnessScript;\n+        witnessScript << OP_2 <<\n+            ToByteVector(uncompressedPubkey) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        uint256 scriptHash;\n+        CSHA256().Write(&witnessScript[0], witnessScript.size())\n+            .Finalize(scriptHash.begin());\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_0 << ToByteVector(scriptHash);\n+\n+        // Keystore has keys, but no witnessScript or P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys and witnessScript, but no P2SH redeemScript\n+        keystore.AddCScript(witnessScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys, witnessScript, P2SH redeemScript\n+        keystore.AddCScript(scriptPubKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(isInvalid);\n+    }\n+\n+    // P2WSH multisig wrapped in P2SH\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript witnessScript;\n+        witnessScript << OP_2 <<\n+            ToByteVector(pubkeys[0]) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        uint256 scriptHash;\n+        CSHA256().Write(&witnessScript[0], witnessScript.size())\n+            .Finalize(scriptHash.begin());\n+\n+        CScript redeemScript;\n+        redeemScript << OP_0 << ToByteVector(scriptHash);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+\n+        // Keystore has no witnessScript, P2SH redeemScript, or keys\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has witnessScript and P2SH redeemScript, but no keys\n+        keystore.AddCScript(redeemScript);\n+        keystore.AddCScript(witnessScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys, witnessScript, P2SH redeemScript\n+        keystore.AddKey(keys[0]);\n+        keystore.AddKey(keys[1]);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // OP_RETURN\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(keys[0]);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_RETURN << ToByteVector(pubkeys[0]);\n+\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // Nonstandard\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(keys[0]);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_9 << OP_ADD << OP_11 << OP_EQUAL;\n+\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDYwNWQ5ZGQ0OThhMWZhNzEzZTZhOTE2MzQ3YTdjODg3ZjJjMmI4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-06-08T00:08:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "Tests for zmqpubrawtx and zmqpubrawblock\n\nGithub-Pull: #10552\nRebased-From: d3677ab757ea57b21d8aed24d5bc3c4bfe9bb68c",
      "tree": {
        "sha": "9d82d1c7eb05740f00930e2eed607a568bbed06d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d82d1c7eb05740f00930e2eed607a568bbed06d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4605d9dd498a1fa713e6a916347a7c887f2c2b8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c4ff35a8fce0c40884886a93c1bf12395fb105d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c4ff35a8fce0c40884886a93c1bf12395fb105d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c4ff35a8fce0c40884886a93c1bf12395fb105d"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 54,
      "deletions": 6
    },
    "files": [
      {
        "sha": "64966adb9738fc0814c480f6ad4d5b9800ff63dc",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4605d9dd498a1fa713e6a916347a7c887f2c2b8/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4605d9dd498a1fa713e6a916347a7c887f2c2b8/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
        "patch": "@@ -7,6 +7,7 @@\n from base64 import b64encode\n from binascii import hexlify, unhexlify\n from decimal import Decimal, ROUND_DOWN\n+import hashlib\n import json\n import logging\n import os\n@@ -173,6 +174,13 @@ def count_bytes(hex_string):\n def bytes_to_hex_str(byte_str):\n     return hexlify(byte_str).decode('ascii')\n \n+def hash256(byte_str):\n+    sha256 = hashlib.sha256()\n+    sha256.update(byte_str)\n+    sha256d = hashlib.sha256()\n+    sha256d.update(sha256.digest())\n+    return sha256d.digest()[::-1]\n+\n def hex_str_to_bytes(hex_str):\n     return unhexlify(hex_str.encode('ascii'))\n "
      },
      {
        "sha": "382ef5bae2891df08c627e9878a0aaf45205feef",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 46,
        "deletions": 6,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4605d9dd498a1fa713e6a916347a7c887f2c2b8/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4605d9dd498a1fa713e6a916347a7c887f2c2b8/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
        "patch": "@@ -10,7 +10,8 @@\n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n from test_framework.util import (assert_equal,\n                                  bytes_to_hex_str,\n-                                 )\n+                                 hash256,\n+                                )\n \n class ZMQTest (BitcoinTestFramework):\n     def set_test_params(self):\n@@ -37,9 +38,12 @@ def setup_nodes(self):\n         self.zmqSubSocket.set(zmq.RCVTIMEO, 60000)\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawblock\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawtx\")\n         ip_address = \"tcp://127.0.0.1:28332\"\n         self.zmqSubSocket.connect(ip_address)\n-        self.extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n+        self.extra_args = [['-zmqpubhashblock=%s' % ip_address, '-zmqpubhashtx=%s' % ip_address,\n+                       '-zmqpubrawblock=%s' % ip_address, '-zmqpubrawtx=%s' % ip_address], []]\n         self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n \n@@ -59,28 +63,51 @@ def _zmq_test(self):\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n         assert_equal(topic, b\"hashtx\")\n-        body = msg[1]\n+        txhash = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, 0)  # must be sequence 0 on hashtx\n \n+        # rawtx\n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawtx\")\n+        body = msg[1]\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, 0) # must be sequence 0 on rawtx\n+\n+        # Check that the rawtx hashes to the hashtx\n+        assert_equal(hash256(body), txhash)\n+\n         self.log.info(\"Wait for block\")\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n+        assert_equal(topic, b\"hashblock\")\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, 0)  # must be sequence 0 on hashblock\n         blkhash = bytes_to_hex_str(body)\n-\n         assert_equal(genhashes[0], blkhash)  # blockhash from generate must be equal to the hash received over zmq\n \n+        # rawblock\n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawblock\")\n+        body = msg[1]\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, 0) #must be sequence 0 on rawblock\n+\n+        # Check the hash of the rawblock's header matches generate\n+        assert_equal(genhashes[0], bytes_to_hex_str(hash256(body[:80])))\n+\n         self.log.info(\"Generate 10 blocks (and 10 coinbase txes)\")\n         n = 10\n         genhashes = self.nodes[1].generate(n)\n         self.sync_all()\n \n         zmqHashes = []\n+        zmqRawHashed = []\n         blockcount = 0\n-        for x in range(n * 2):\n+        for x in range(n * 4):\n             msg = self.zmqSubSocket.recv_multipart()\n             topic = msg[0]\n             body = msg[1]\n@@ -89,9 +116,14 @@ def _zmq_test(self):\n                 msgSequence = struct.unpack('<I', msg[-1])[-1]\n                 assert_equal(msgSequence, blockcount + 1)\n                 blockcount += 1\n+            if topic == b\"rawblock\":\n+                zmqRawHashed.append(bytes_to_hex_str(hash256(body[:80])))\n+                msgSequence = struct.unpack('<I', msg[-1])[-1]\n+                assert_equal(msgSequence, blockcount)\n \n         for x in range(n):\n             assert_equal(genhashes[x], zmqHashes[x])  # blockhash from generate must be equal to the hash received over zmq\n+            assert_equal(genhashes[x], zmqRawHashed[x])\n \n         self.log.info(\"Wait for tx from second node\")\n         # test tx from a second node\n@@ -101,13 +133,21 @@ def _zmq_test(self):\n         # now we should receive a zmq msg because the tx was broadcast\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n-        body = msg[1]\n         assert_equal(topic, b\"hashtx\")\n+        body = msg[1]\n         hashZMQ = bytes_to_hex_str(body)\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, blockcount + 1)\n \n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawtx\")\n+        body = msg[1]\n+        hashedZMQ = bytes_to_hex_str(hash256(body))\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, blockcount+1)\n         assert_equal(hashRPC, hashZMQ)  # txid from sendtoaddress must be equal to the hash received over zmq\n+        assert_equal(hashRPC, hashedZMQ)\n \n if __name__ == '__main__':\n     ZMQTest().main()"
      }
    ]
  },
  {
    "sha": "2f0b30a58a07a3e30faa82a27525025158754db2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjBiMzBhNThhMDdhM2UzMGZhYTgyYTI3NTI1MDI1MTU4NzU0ZGIy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-09-13T13:17:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "qa: Treat mininode p2p exceptions as fatal\n\nGithub-Pull: #11319\nRebased-From: a7820422e0b182db6f1df8904242e5d76d6c73fa",
      "tree": {
        "sha": "4551800f3d8c006e8072ead5f5a9facf9f02f613",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4551800f3d8c006e8072ead5f5a9facf9f02f613"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f0b30a58a07a3e30faa82a27525025158754db2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f0b30a58a07a3e30faa82a27525025158754db2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f0b30a58a07a3e30faa82a27525025158754db2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f0b30a58a07a3e30faa82a27525025158754db2/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4605d9dd498a1fa713e6a916347a7c887f2c2b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4605d9dd498a1fa713e6a916347a7c887f2c2b8"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "843b67cd5cace954b04f84ea5ee53b8d1160f0f0",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f0b30a58a07a3e30faa82a27525025158754db2/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f0b30a58a07a3e30faa82a27525025158754db2/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=2f0b30a58a07a3e30faa82a27525025158754db2",
        "patch": "@@ -1505,6 +1505,7 @@ def deliver(self, conn, message):\n             except:\n                 print(\"ERROR delivering %s (%s)\" % (repr(message),\n                                                     sys.exc_info()[0]))\n+                raise\n \n     def set_deliver_sleep_time(self, value):\n         with mininode_lock:\n@@ -1708,13 +1709,10 @@ def handle_close(self):\n         self.cb.on_close(self)\n \n     def handle_read(self):\n-        try:\n-            t = self.recv(8192)\n-            if len(t) > 0:\n-                self.recvbuf += t\n-                self.got_data()\n-        except:\n-            pass\n+        t = self.recv(8192)\n+        if len(t) > 0:\n+            self.recvbuf += t\n+            self.got_data()\n \n     def readable(self):\n         return True\n@@ -1780,8 +1778,10 @@ def got_data(self):\n                     self.got_message(t)\n                 else:\n                     logger.warning(\"Received unknown command from %s:%d: '%s' %s\" % (self.dstaddr, self.dstport, command, repr(msg)))\n+                    raise ValueError(\"Unknown command: '%s'\" % (command))\n         except Exception as e:\n             logger.exception('got_data:', repr(e))\n+            raise\n \n     def send_message(self, message, pushbuf=False):\n         if self.state != \"connected\" and not pushbuf:"
      }
    ]
  },
  {
    "sha": "8d2e51d86253881abadb5b11f93b12e3761f6232",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDJlNTFkODYyNTM4ODFhYmFkYjViMTFmOTNiMTJlMzc2MWY2MjMy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-09-13T13:21:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "qa: Fix bug introduced in p2p-segwit.py\n\nChanging __init__() -> set_test_params() in the tests should not have\napplied to NodeConnCB-derived objects.\n\nGithub-Pull: #11319\nRebased-From: f97ab35fa9687fd5c110ad6cca5be5b4a5c2142d",
      "tree": {
        "sha": "77d0d523336ab8b35c6c1d251c583707d2dfc11a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77d0d523336ab8b35c6c1d251c583707d2dfc11a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d2e51d86253881abadb5b11f93b12e3761f6232",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2e51d86253881abadb5b11f93b12e3761f6232",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d2e51d86253881abadb5b11f93b12e3761f6232",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2e51d86253881abadb5b11f93b12e3761f6232/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2f0b30a58a07a3e30faa82a27525025158754db2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f0b30a58a07a3e30faa82a27525025158754db2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f0b30a58a07a3e30faa82a27525025158754db2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "9105f0ee06c5aaff55011d1eecf03194876a2c07",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d2e51d86253881abadb5b11f93b12e3761f6232/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d2e51d86253881abadb5b11f93b12e3761f6232/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=8d2e51d86253881abadb5b11f93b12e3761f6232",
        "patch": "@@ -33,8 +33,8 @@ def get_virtual_size(witness_block):\n     return vsize\n \n class TestNode(NodeConnCB):\n-    def set_test_params(self):\n-        self.num_nodes = 3\n+    def __init__(self):\n+        super().__init__()\n         self.getdataset = set()\n \n     def on_getdata(self, conn, message):"
      }
    ]
  },
  {
    "sha": "a36f3320a94aa70328e133d53146fc1ef57e1e34",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMzZmMzMyMGE5NGFhNzAzMjhlMTMzZDUzMTQ2ZmMxZWY1N2UxZTM0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-29T21:33:50Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "Verify DBWrapper iterators are taking snapshots\n\nThe LevelDB docs seem to indicate that an iterator will not take\nsnapshots (even providing instructions on how to do so yourself).\nIn several of the places we use them, we assume snapshots to have\nbeen taken.\n\nIn order to make sure LevelDB doesn't change out from under us\n(and to prevent the next person who reads the docs from having the\nsame fright I did), verify that snapshots are taken in our tests.\n\nGithub-Pull: #11422\nRebased-From: bb8376bbc3d96af727444f90e5f60d47105609dc",
      "tree": {
        "sha": "e4c32f07df05ef0f4a113f030a104d0c7cb16237",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4c32f07df05ef0f4a113f030a104d0c7cb16237"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a36f3320a94aa70328e133d53146fc1ef57e1e34",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a36f3320a94aa70328e133d53146fc1ef57e1e34",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a36f3320a94aa70328e133d53146fc1ef57e1e34",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a36f3320a94aa70328e133d53146fc1ef57e1e34/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d2e51d86253881abadb5b11f93b12e3761f6232",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d2e51d86253881abadb5b11f93b12e3761f6232",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d2e51d86253881abadb5b11f93b12e3761f6232"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 14,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d90fe5027705f1389211fa8f6d8f51fb3e744d3c",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a36f3320a94aa70328e133d53146fc1ef57e1e34/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a36f3320a94aa70328e133d53146fc1ef57e1e34/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=a36f3320a94aa70328e133d53146fc1ef57e1e34",
        "patch": "@@ -204,19 +204,31 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n         uint32_t value = x*x;\n-        BOOST_CHECK(dbw.Write(key, value));\n+        if (!(x & 1)) BOOST_CHECK(dbw.Write(key, value));\n     }\n \n+    // Check that creating an iterator creates a snapshot\n     std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n+\n+    for (int x=0x00; x<256; ++x) {\n+        uint8_t key = x;\n+        uint32_t value = x*x;\n+        if (x & 1) BOOST_CHECK(dbw.Write(key, value));\n+    }\n+\n     for (int seek_start : {0x00, 0x80}) {\n         it->Seek((uint8_t)seek_start);\n-        for (int x=seek_start; x<256; ++x) {\n+        for (int x=seek_start; x<255; ++x) {\n             uint8_t key;\n             uint32_t value;\n             BOOST_CHECK(it->Valid());\n             if (!it->Valid()) // Avoid spurious errors about invalid iterator's key and value in case of failure\n                 break;\n             BOOST_CHECK(it->GetKey(key));\n+            if (x & 1) {\n+                BOOST_CHECK_EQUAL(key, x + 1);\n+                continue;\n+            }\n             BOOST_CHECK(it->GetValue(value));\n             BOOST_CHECK_EQUAL(key, x);\n             BOOST_CHECK_EQUAL(value, x*x);"
      }
    ]
  },
  {
    "sha": "a825d4af5e3ca353bce421e966ddcb9fc643075c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODI1ZDRhZjVlM2NhMzUzYmNlNDIxZTk2NmRkY2I5ZmM2NDMwNzVj",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-09-25T10:14:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "Fix bip68-sequence rpc test\n\nGithub-Pull: #11399\nRebased-From: 49f869fe91716785b3276925d64bf8955feff69f",
      "tree": {
        "sha": "346a850dc1da7900f262a15e11797050c3c124be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/346a850dc1da7900f262a15e11797050c3c124be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a825d4af5e3ca353bce421e966ddcb9fc643075c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a825d4af5e3ca353bce421e966ddcb9fc643075c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a825d4af5e3ca353bce421e966ddcb9fc643075c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a825d4af5e3ca353bce421e966ddcb9fc643075c/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a36f3320a94aa70328e133d53146fc1ef57e1e34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a36f3320a94aa70328e133d53146fc1ef57e1e34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a36f3320a94aa70328e133d53146fc1ef57e1e34"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1391b9ed466f15d55804ae02bf4ad9339d4e4fd6",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a825d4af5e3ca353bce421e966ddcb9fc643075c/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a825d4af5e3ca353bce421e966ddcb9fc643075c/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=a825d4af5e3ca353bce421e966ddcb9fc643075c",
        "patch": "@@ -369,11 +369,14 @@ def test_bip68_not_consensus(self):\n \n     def activateCSV(self):\n         # activation should happen at block height 432 (3 periods)\n+        # getblockchaininfo will show CSV as active at block 431 (144 * 3 -1) since it's returning whether CSV is active for the next block.\n         min_activation_height = 432\n         height = self.nodes[0].getblockcount()\n-        assert(height < min_activation_height)\n-        self.nodes[0].generate(min_activation_height-height)\n-        assert(get_bip9_status(self.nodes[0], 'csv')['status'] == 'active')\n+        assert_greater_than(min_activation_height - height, 2)\n+        self.nodes[0].generate(min_activation_height - height - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"locked_in\")\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"active\")\n         sync_blocks(self.nodes)\n \n     # Use self.nodes[1] to test that version 2 transactions are standard."
      }
    ]
  },
  {
    "sha": "806c78f014f6be9e12afb181d85e135f3b44e33e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDZjNzhmMDE0ZjZiZTllMTJhZmIxODFkODVlMTM1ZjNiNDRlMzNl",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-09-26T21:24:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-03T20:03:09Z"
      },
      "message": "add functional test for mempoolreplacement command line arg\n\nGithub-Pull: #11407\nRebased-From: 1088b5322d0e7a8366a285e2baa49c766a9ba5bd",
      "tree": {
        "sha": "112f3d3f45e3287351883b72915754050c794f9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/112f3d3f45e3287351883b72915754050c794f9c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/806c78f014f6be9e12afb181d85e135f3b44e33e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/806c78f014f6be9e12afb181d85e135f3b44e33e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/806c78f014f6be9e12afb181d85e135f3b44e33e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/806c78f014f6be9e12afb181d85e135f3b44e33e/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a825d4af5e3ca353bce421e966ddcb9fc643075c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a825d4af5e3ca353bce421e966ddcb9fc643075c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a825d4af5e3ca353bce421e966ddcb9fc643075c"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 15,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5e1f33991b4bbf6221c51264be626e6257f19b78",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/806c78f014f6be9e12afb181d85e135f3b44e33e/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/806c78f014f6be9e12afb181d85e135f3b44e33e/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=806c78f014f6be9e12afb181d85e135f3b44e33e",
        "patch": "@@ -62,13 +62,14 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n class ReplaceByFeeTest(BitcoinTestFramework):\n \n     def set_test_params(self):\n-        self.num_nodes = 1\n+        self.num_nodes = 2\n         self.extra_args= [[\"-maxorphantx=1000\",\n                            \"-whitelist=127.0.0.1\",\n                            \"-limitancestorcount=50\",\n                            \"-limitancestorsize=101\",\n                            \"-limitdescendantcount=200\",\n-                           \"-limitdescendantsize=101\"]]\n+                           \"-limitdescendantsize=101\"],\n+                           [\"-mempoolreplacement=0\"]]\n \n     def run_test(self):\n         make_utxo(self.nodes[0], 1*COIN)\n@@ -115,6 +116,8 @@ def test_simple_doublespend(self):\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n+        self.sync_all([self.nodes])\n+\n         # Should fail because we haven't changed the fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -123,12 +126,17 @@ def test_simple_doublespend(self):\n \n         # This will raise an exception due to insufficient fee\n         assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        # This will raise an exception due to transaction replacement being disabled\n+        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n \n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx1b_hex = txToHex(tx1b)\n+        # Replacement still disabled even with \"enough fee\"\n+        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        # Works when enabled\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n \n         mempool = self.nodes[0].getrawmempool()\n@@ -138,6 +146,11 @@ def test_simple_doublespend(self):\n \n         assert_equal(tx1b_hex, self.nodes[0].getrawtransaction(tx1b_txid))\n \n+        # Second node is running mempoolreplacement=0, will not replace originally-seen txn\n+        mempool = self.nodes[1].getrawmempool()\n+        assert tx1a_txid in mempool\n+        assert tx1b_txid not in mempool\n+\n     def test_doublespend_chain(self):\n         \"\"\"Doublespend of a long chain\"\"\"\n "
      }
    ]
  },
  {
    "sha": "6b4d9f273607bcacaa65a7a030eef5cc9d6bb6e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjRkOWYyNzM2MDdiY2FjYWE2NWE3YTAzMGVlZjVjYzlkNmJiNmU4",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-09-03T12:43:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-04T09:47:44Z"
      },
      "message": "wallet: update stored witness in AddToWallet\n\nReplace witness-stripped wallet transactions with full transactions;\nthis can happen when upgrading from a pre-segwit wallet to a segwit-\naware wallet.\n\nGithub-Pull: #11225\nRebased-From: d01a9682b126a5f83c7311e652e6e62f2c2e1d20",
      "tree": {
        "sha": "533adb0369c613f550c8b5a88ca8953a3e0cafb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/533adb0369c613f550c8b5a88ca8953a3e0cafb4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b4d9f273607bcacaa65a7a030eef5cc9d6bb6e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b4d9f273607bcacaa65a7a030eef5cc9d6bb6e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b4d9f273607bcacaa65a7a030eef5cc9d6bb6e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b4d9f273607bcacaa65a7a030eef5cc9d6bb6e8/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62d18cdb893fea92680a6f382bb8b3e8ca157bcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62d18cdb893fea92680a6f382bb8b3e8ca157bcf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62d18cdb893fea92680a6f382bb8b3e8ca157bcf"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5e833ebee70e81dc3c1f5c0abcf36ba21188a0ba",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b4d9f273607bcacaa65a7a030eef5cc9d6bb6e8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b4d9f273607bcacaa65a7a030eef5cc9d6bb6e8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6b4d9f273607bcacaa65a7a030eef5cc9d6bb6e8",
        "patch": "@@ -969,6 +969,15 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n             wtx.fFromMe = wtxIn.fFromMe;\n             fUpdated = true;\n         }\n+        // If we have a witness-stripped version of this transaction, and we\n+        // see a new version with a witness, then we must be upgrading a pre-segwit\n+        // wallet.  Store the new version of the transaction with the witness,\n+        // as the stripped-version must be invalid.\n+        // TODO: Store all versions of the transaction, instead of just one.\n+        if (wtxIn.tx->HasWitness() && !wtx.tx->HasWitness()) {\n+            wtx.SetTx(wtxIn.tx);\n+            fUpdated = true;\n+        }\n     }\n \n     //// debug print"
      }
    ]
  },
  {
    "sha": "0fe2a9a196b2f81fed2ea84a5979e95f37094b22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmUyYTlhMTk2YjJmODFmZWQyZWE4NGE1OTc5ZTk1ZjM3MDk0YjIy",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-09-06T00:32:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-04T09:48:39Z"
      },
      "message": "when clearing addrman clear mapInfo and mapAddr\n\nGithub-Pull: #11252\nRebased-From: b86a42077a134888c53bfd406b87bf0a39c78264",
      "tree": {
        "sha": "46cc1ce5432977c499d98808f6299a35fad3b3a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46cc1ce5432977c499d98808f6299a35fad3b3a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fe2a9a196b2f81fed2ea84a5979e95f37094b22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fe2a9a196b2f81fed2ea84a5979e95f37094b22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fe2a9a196b2f81fed2ea84a5979e95f37094b22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fe2a9a196b2f81fed2ea84a5979e95f37094b22/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b4d9f273607bcacaa65a7a030eef5cc9d6bb6e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b4d9f273607bcacaa65a7a030eef5cc9d6bb6e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b4d9f273607bcacaa65a7a030eef5cc9d6bb6e8"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "18f3062287306d15c06b00e72a91855148872c08",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fe2a9a196b2f81fed2ea84a5979e95f37094b22/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fe2a9a196b2f81fed2ea84a5979e95f37094b22/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=0fe2a9a196b2f81fed2ea84a5979e95f37094b22",
        "patch": "@@ -472,6 +472,8 @@ class CAddrMan\n         nTried = 0;\n         nNew = 0;\n         nLastGood = 1; //Initially at 1 so that \"never\" is strictly worse.\n+        mapInfo.clear();\n+        mapAddr.clear();\n     }\n \n     CAddrMan()"
      }
    ]
  },
  {
    "sha": "6a62c745a9ce7d08667ab544ee3627e035e9d0ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTYyYzc0NWE5Y2U3ZDA4NjY3YWI1NDRlZTM2MjdlMDM1ZTlkMGNl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-15T09:50:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-04T09:53:18Z"
      },
      "message": "qt: Backup former GUI settings on `-resetguisettings`\n\nWrites the GUI settings to `guisettings.bak` in the data directory\nbefore wiping them. This can be used to retroactively troubleshoot\nissues (e.g. #11262) where `-resetguisettings` solves the problem.\n\nGithub-Pull: #11338\nRebased-From: 723aa1b8752c1d6c6c0a76059c532ebe2f406fc1",
      "tree": {
        "sha": "d4829e2f6cf3d5c7e577be235d99c1b0fe79ef11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4829e2f6cf3d5c7e577be235d99c1b0fe79ef11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a62c745a9ce7d08667ab544ee3627e035e9d0ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a62c745a9ce7d08667ab544ee3627e035e9d0ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a62c745a9ce7d08667ab544ee3627e035e9d0ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a62c745a9ce7d08667ab544ee3627e035e9d0ce/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fe2a9a196b2f81fed2ea84a5979e95f37094b22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fe2a9a196b2f81fed2ea84a5979e95f37094b22",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fe2a9a196b2f81fed2ea84a5979e95f37094b22"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 23,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3d603445fbfcd7d75a8541f0c7f41c6ee289840e",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a62c745a9ce7d08667ab544ee3627e035e9d0ce/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a62c745a9ce7d08667ab544ee3627e035e9d0ce/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=6a62c745a9ce7d08667ab544ee3627e035e9d0ce",
        "patch": "@@ -15,6 +15,7 @@\n * wallet.dat: personal wallet (BDB) with keys and transactions\n * .cookie: session RPC authentication cookie (written at start when cookie authentication is used, deleted on shutdown): since 0.12.0\n * onion_private_key: cached Tor hidden service private key for `-listenonion`: since 0.12.0\n+* guisettings.ini.bak: backup of former GUI settings after `-resetguisettings` is used\n \n Only used in pre-0.8.0\n ---------------------"
      },
      {
        "sha": "a2dd52d9cbe4b9e2125b0e0541b1be74aa143442",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a62c745a9ce7d08667ab544ee3627e035e9d0ce/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a62c745a9ce7d08667ab544ee3627e035e9d0ce/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=6a62c745a9ce7d08667ab544ee3627e035e9d0ce",
        "patch": "@@ -151,10 +151,32 @@ void OptionsModel::Init(bool resetSettings)\n     language = settings.value(\"language\").toString();\n }\n \n+/** Helper function to copy contents from one QSettings to another.\n+ * By using allKeys this also covers nested settings in a hierarchy.\n+ */\n+static void CopySettings(QSettings& dst, const QSettings& src)\n+{\n+    for (const QString& key : src.allKeys()) {\n+        dst.setValue(key, src.value(key));\n+    }\n+}\n+\n+/** Back up a QSettings to an ini-formatted file. */\n+static void BackupSettings(const fs::path& filename, const QSettings& src)\n+{\n+    qWarning() << \"Backing up GUI settings to\" << GUIUtil::boostPathToQString(filename);\n+    QSettings dst(GUIUtil::boostPathToQString(filename), QSettings::IniFormat);\n+    dst.clear();\n+    CopySettings(dst, src);\n+}\n+\n void OptionsModel::Reset()\n {\n     QSettings settings;\n \n+    // Backup old settings to chain-specific datadir for troubleshooting\n+    BackupSettings(GetDataDir(true) / \"guisettings.ini.bak\", settings);\n+\n     // Save the strDataDir setting\n     QString dataDir = Intro::getDefaultDataDirectory();\n     dataDir = settings.value(\"strDataDir\", dataDir).toString();"
      }
    ]
  },
  {
    "sha": "b6c0209aaf372a21090c0a3eed973022af14ece0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNmMwMjA5YWFmMzcyYTIxMDkwYzBhM2VlZDk3MzAyMmFmMTRlY2Uw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-02T22:24:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-04T09:54:36Z"
      },
      "message": "Fix validationinterface build on super old boost/clang\n\nThis should fix all the non-dependancy issues for termux builds.\nSee Github issue #11388.\n\nGithub-Pull: #11440\nRebased-From: 96c2ce9d343147608c197bc2333138b82141340f",
      "tree": {
        "sha": "d726b9d54887130d7de298efe3a7509bc6318681",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d726b9d54887130d7de298efe3a7509bc6318681"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b6c0209aaf372a21090c0a3eed973022af14ece0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c0209aaf372a21090c0a3eed973022af14ece0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b6c0209aaf372a21090c0a3eed973022af14ece0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c0209aaf372a21090c0a3eed973022af14ece0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a62c745a9ce7d08667ab544ee3627e035e9d0ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a62c745a9ce7d08667ab544ee3627e035e9d0ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a62c745a9ce7d08667ab544ee3627e035e9d0ce"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "cd2fecd2245590431ffa61298efc4f6b0b574b56",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b6c0209aaf372a21090c0a3eed973022af14ece0/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b6c0209aaf372a21090c0a3eed973022af14ece0/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=b6c0209aaf372a21090c0a3eed973022af14ece0",
        "patch": "@@ -4,7 +4,9 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+\n #include \"init.h\"\n+#include \"primitives/block.h\"\n #include \"scheduler.h\"\n #include \"sync.h\"\n #include \"util.h\""
      }
    ]
  },
  {
    "sha": "e169349f8c25d8998492b38500c1fee1074ed6fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTY5MzQ5ZjhjMjVkODk5ODQ5MmIzODUwMGMxZmVlMTA3NGVkNmZl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-01T09:19:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-04T09:59:33Z"
      },
      "message": "qa: Restore bitcoin-util-test py2 compatibility\n\nGithub-Pull: #11433\nRebased-From: fafff1220cf798e25f02cdd8affb70506dd366cc",
      "tree": {
        "sha": "733117b510b3c09e2aa4cec8b73e7e7e2d4a1319",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/733117b510b3c09e2aa4cec8b73e7e7e2d4a1319"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e169349f8c25d8998492b38500c1fee1074ed6fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e169349f8c25d8998492b38500c1fee1074ed6fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e169349f8c25d8998492b38500c1fee1074ed6fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e169349f8c25d8998492b38500c1fee1074ed6fe/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "806c78f014f6be9e12afb181d85e135f3b44e33e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/806c78f014f6be9e12afb181d85e135f3b44e33e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/806c78f014f6be9e12afb181d85e135f3b44e33e"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 11,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b48bfc76b78592aacff61bc3204f7165ee5d671d",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e169349f8c25d8998492b38500c1fee1074ed6fe/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e169349f8c25d8998492b38500c1fee1074ed6fe/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=e169349f8c25d8998492b38500c1fee1074ed6fe",
        "patch": "@@ -147,7 +147,7 @@ bitcoin_test_clean : FORCE\n \n check-local:\n \t@echo \"Running test/util/bitcoin-util-test.py...\"\n-\t$(top_builddir)/test/util/bitcoin-util-test.py\n+\t$(PYTHON) $(top_builddir)/test/util/bitcoin-util-test.py\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n if EMBEDDED_UNIVALUE\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check"
      },
      {
        "sha": "ef34955d90904c2176b8eef443d54b1b0ae957a5",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e169349f8c25d8998492b38500c1fee1074ed6fe/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e169349f8c25d8998492b38500c1fee1074ed6fe/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=e169349f8c25d8998492b38500c1fee1074ed6fe",
        "patch": "@@ -9,9 +9,14 @@\n \n Can also be run manually.\"\"\"\n \n+from __future__ import division,print_function,unicode_literals\n+\n import argparse\n import binascii\n-import configparser\n+try:\n+    import configparser\n+except ImportError:\n+    import ConfigParser as configparser\n import difflib\n import json\n import logging\n@@ -22,7 +27,9 @@\n \n def main():\n     config = configparser.ConfigParser()\n-    config.read_file(open(os.path.dirname(__file__) + \"/../config.ini\"))\n+    config.optionxform = str\n+    config.readfp(open(os.path.join(os.path.dirname(__file__), \"../config.ini\")))\n+    env_conf = dict(config.items('environment'))\n \n     parser = argparse.ArgumentParser(description=__doc__)\n     parser.add_argument('-v', '--verbose', action='store_true')\n@@ -37,7 +44,7 @@ def main():\n     # Add the format/level to the logger\n     logging.basicConfig(format=formatter, level=level)\n \n-    bctester(config[\"environment\"][\"SRCDIR\"] + \"/test/util/data\", \"bitcoin-util-test.json\", config[\"environment\"])\n+    bctester(os.path.join(env_conf[\"SRCDIR\"], \"test/util/data\"), \"bitcoin-util-test.json\", env_conf)\n \n def bctester(testDir, input_basename, buildenv):\n     \"\"\" Loads and parses the input file, runs all tests and reports results\"\"\""
      }
    ]
  },
  {
    "sha": "019c492490077a7581ab526b4208439200cbff24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTljNDkyNDkwMDc3YTc1ODFhYjUyNmI0MjA4NDM5MjAwY2JmZjI0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-02T11:35:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-04T12:29:07Z"
      },
      "message": "qa: Fix lcov for out-of-tree builds\n\nGithub-Pull: #11443\nRebased-From: fae60e338639b3a09d2f26d8eb5feb3bb576b1fd",
      "tree": {
        "sha": "7fa3066c94e421b80cadcd2fd39117b62ad6910a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fa3066c94e421b80cadcd2fd39117b62ad6910a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/019c492490077a7581ab526b4208439200cbff24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/019c492490077a7581ab526b4208439200cbff24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/019c492490077a7581ab526b4208439200cbff24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/019c492490077a7581ab526b4208439200cbff24/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e169349f8c25d8998492b38500c1fee1074ed6fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e169349f8c25d8998492b38500c1fee1074ed6fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e169349f8c25d8998492b38500c1fee1074ed6fe"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e8aa7d5ae121cc5561d0f7d17f86b8fc177a2349",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/019c492490077a7581ab526b4208439200cbff24/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/019c492490077a7581ab526b4208439200cbff24/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=019c492490077a7581ab526b4208439200cbff24",
        "patch": "@@ -1231,6 +1231,7 @@ AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AC_CONFIG_FILES([doc/Doxyfile])\n+AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])\n "
      }
    ]
  },
  {
    "sha": "a43be5bcdb27a68abe9bb5fec57185a1b6652479",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDNiZTViY2RiMjdhNjhhYmU5YmI1ZmVjNTcxODVhMWI2NjUyNDc5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-07T08:50:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-04T13:11:24Z"
      },
      "message": "rpc: Prevent `dumpwallet` from overwriting files\n\nPrevent arbitrary files from being overwritten. There have been reports\nthat users have overwritten wallet files this way. It may also avoid\nother security issues.\n\nFixes #9934. Adds mention to release notes and adds a test.\n\nGithub-Pull: #9937\nRebased-From: 0cd9273fd959c6742574259d026039f7da0309a2",
      "tree": {
        "sha": "41a6954250a13e353d05f1bcddcc122382a9bcef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41a6954250a13e353d05f1bcddcc122382a9bcef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a43be5bcdb27a68abe9bb5fec57185a1b6652479",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a43be5bcdb27a68abe9bb5fec57185a1b6652479",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a43be5bcdb27a68abe9bb5fec57185a1b6652479",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a43be5bcdb27a68abe9bb5fec57185a1b6652479/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6c0209aaf372a21090c0a3eed973022af14ece0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6c0209aaf372a21090c0a3eed973022af14ece0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6c0209aaf372a21090c0a3eed973022af14ece0"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 19,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0235e1c606ecd071e3021ea52fd16145c295efd5",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a43be5bcdb27a68abe9bb5fec57185a1b6652479/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a43be5bcdb27a68abe9bb5fec57185a1b6652479/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=a43be5bcdb27a68abe9bb5fec57185a1b6652479",
        "patch": "@@ -65,6 +65,9 @@ Notable changes\n 0.15.1 Change log\n =================\n \n+- `dumpwallet` no longer allows overwriting files. This is a security measure\n+  as well as prevents dangerous user mistakes.\n+\n Credits\n =======\n "
      },
      {
        "sha": "e56485e29621b47a2c0bceaef47cc1081ddb510e",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a43be5bcdb27a68abe9bb5fec57185a1b6652479/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a43be5bcdb27a68abe9bb5fec57185a1b6652479/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a43be5bcdb27a68abe9bb5fec57185a1b6652479",
        "patch": "@@ -595,7 +595,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"dumpwallet \\\"filename\\\"\\n\"\n-            \"\\nDumps all wallet keys in a human-readable format.\\n\"\n+            \"\\nDumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"filename\\\"    (string, required) The filename with path (either absolute or relative to bitcoind)\\n\"\n             \"\\nResult:\\n\"\n@@ -611,9 +611,19 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    std::ofstream file;\n     boost::filesystem::path filepath = request.params[0].get_str();\n     filepath = boost::filesystem::absolute(filepath);\n+\n+    /* Prevent arbitrary files from being overwritten. There have been reports\n+     * that users have overwritten wallet files this way:\n+     * https://github.com/bitcoin/bitcoin/issues/9934\n+     * It may also avoid other security issues.\n+     */\n+    if (boost::filesystem::exists(filepath)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, filepath.string() + \" already exists. If you are sure this is what you want, move it out of the way first\");\n+    }\n+\n+    std::ofstream file;\n     file.open(filepath.string().c_str());\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");"
      },
      {
        "sha": "016bd95925a968af6480b98e89aa8cf8c8b2aa12",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a43be5bcdb27a68abe9bb5fec57185a1b6652479/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a43be5bcdb27a68abe9bb5fec57185a1b6652479/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=a43be5bcdb27a68abe9bb5fec57185a1b6652479",
        "patch": "@@ -7,7 +7,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import (assert_equal, assert_raises_jsonrpc)\n \n \n def read_dump(file_name, addrs, hd_master_addr_old):\n@@ -108,5 +108,8 @@ def run_test (self):\n         assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n         assert_equal(found_addr_rsv, 90*2) \n \n+        # Overwriting should fail\n+        assert_raises_jsonrpc(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n+\n if __name__ == '__main__':\n     WalletDumpTest().main ()"
      }
    ]
  },
  {
    "sha": "dea3b87dd974edc18961005e66395c9238f0ab16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWEzYjg3ZGQ5NzRlZGMxODk2MTAwNWU2NjM5NWM5MjM4ZjBhYjE2",
    "commit": {
      "author": {
        "name": "Donal OConnor",
        "email": "donaloconnor@gmail.com",
        "date": "2017-09-05T20:26:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-05T16:56:54Z"
      },
      "message": "Add new step to clean $PATH var by removing /mnt specific Window's %PATH% paths that cause issues with the make system\n\nGithub-Pull: #11437\nRebased-From: 4f890ba6bc8caba5394c7a5388d7f07959ced78b",
      "tree": {
        "sha": "314e3f498da899dd4852d6483de73d8690e76da9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/314e3f498da899dd4852d6483de73d8690e76da9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dea3b87dd974edc18961005e66395c9238f0ab16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dea3b87dd974edc18961005e66395c9238f0ab16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dea3b87dd974edc18961005e66395c9238f0ab16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dea3b87dd974edc18961005e66395c9238f0ab16/comments",
    "author": {
      "login": "donaloconnor",
      "id": 6394033,
      "node_id": "MDQ6VXNlcjYzOTQwMzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6394033?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/donaloconnor",
      "html_url": "https://github.com/donaloconnor",
      "followers_url": "https://api.github.com/users/donaloconnor/followers",
      "following_url": "https://api.github.com/users/donaloconnor/following{/other_user}",
      "gists_url": "https://api.github.com/users/donaloconnor/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/donaloconnor/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/donaloconnor/subscriptions",
      "organizations_url": "https://api.github.com/users/donaloconnor/orgs",
      "repos_url": "https://api.github.com/users/donaloconnor/repos",
      "events_url": "https://api.github.com/users/donaloconnor/events{/privacy}",
      "received_events_url": "https://api.github.com/users/donaloconnor/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a43be5bcdb27a68abe9bb5fec57185a1b6652479",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a43be5bcdb27a68abe9bb5fec57185a1b6652479",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a43be5bcdb27a68abe9bb5fec57185a1b6652479"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "24ca8fd41f2f04df0fcb970eb924fca08a382b53",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dea3b87dd974edc18961005e66395c9238f0ab16/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dea3b87dd974edc18961005e66395c9238f0ab16/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=dea3b87dd974edc18961005e66395c9238f0ab16",
        "patch": "@@ -70,6 +70,7 @@ To build executables for Windows 64-bit, install the following dependencies:\n \n Then build using:\n \n+    PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n     make HOST=x86_64-w64-mingw32\n     cd ..\n@@ -85,6 +86,7 @@ To build executables for Windows 32-bit, install the following dependencies:\n \n Then build using:\n \n+    PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n     make HOST=i686-w64-mingw32\n     cd .."
      }
    ]
  },
  {
    "sha": "27e861a9b394857b0005347962ced92ac65e5dac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2U4NjFhOWIzOTQ4NTdiMDAwNTM0Nzk2MmNlZDkyYWM2NWU1ZGFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-09-23T08:36:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-09T20:31:41Z"
      },
      "message": "net: Improve and document SOCKS code\n\nMake the SOCKS code more consistent, and document the constants used.\n\nGithub-Pull: #11397\nRebased-From: 22f816ef4dd57785627d801c247714cace7fc5b5",
      "tree": {
        "sha": "8ff949e129cc87e388ada1a389a109e7ed7093e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ff949e129cc87e388ada1a389a109e7ed7093e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27e861a9b394857b0005347962ced92ac65e5dac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27e861a9b394857b0005347962ced92ac65e5dac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27e861a9b394857b0005347962ced92ac65e5dac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27e861a9b394857b0005347962ced92ac65e5dac/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dea3b87dd974edc18961005e66395c9238f0ab16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dea3b87dd974edc18961005e66395c9238f0ab16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dea3b87dd974edc18961005e66395c9238f0ab16"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 89,
      "deletions": 36
    },
    "files": [
      {
        "sha": "914124cb178183bd7ae726e610d97cdc6b410c74",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 36,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27e861a9b394857b0005347962ced92ac65e5dac/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27e861a9b394857b0005347962ced92ac65e5dac/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=27e861a9b394857b0005347962ced92ac65e5dac",
        "patch": "@@ -184,6 +184,48 @@ struct timeval MillisToTimeval(int64_t nTimeout)\n     return timeout;\n }\n \n+/** SOCKS version */\n+enum SOCKSVersion: uint8_t {\n+    SOCKS4 = 0x04,\n+    SOCKS5 = 0x05\n+};\n+\n+/** Values defined for METHOD in RFC1928 */\n+enum SOCKS5Method: uint8_t {\n+    NOAUTH = 0x00,        //! No authentication required\n+    GSSAPI = 0x01,        //! GSSAPI\n+    USER_PASS = 0x02,     //! Username/password\n+    NO_ACCEPTABLE = 0xff, //! No acceptable methods\n+};\n+\n+/** Values defined for CMD in RFC1928 */\n+enum SOCKS5Command: uint8_t {\n+    CONNECT = 0x01,\n+    BIND = 0x02,\n+    UDP_ASSOCIATE = 0x03\n+};\n+\n+/** Values defined for REP in RFC1928 */\n+enum SOCKS5Reply: uint8_t {\n+    SUCCEEDED = 0x00,        //! Succeeded\n+    GENFAILURE = 0x01,       //! General failure\n+    NOTALLOWED = 0x02,       //! Connection not allowed by ruleset\n+    NETUNREACHABLE = 0x03,   //! Network unreachable\n+    HOSTUNREACHABLE = 0x04,  //! Network unreachable\n+    CONNREFUSED = 0x05,      //! Connection refused\n+    TTLEXPIRED = 0x06,       //! TTL expired\n+    CMDUNSUPPORTED = 0x07,   //! Command not supported\n+    ATYPEUNSUPPORTED = 0x08, //! Address type not supported\n+};\n+\n+/** Values defined for ATYPE in RFC1928 */\n+enum SOCKS5Atyp: uint8_t {\n+    IPV4 = 0x01,\n+    DOMAINNAME = 0x03,\n+    IPV6 = 0x04,\n+};\n+\n+/** Status codes that can be returned by InterruptibleRecv */\n enum class IntrRecvError {\n     OK,\n     Timeout,\n@@ -203,15 +245,15 @@ enum class IntrRecvError {\n  *\n  * @note This function requires that hSocket is in non-blocking mode.\n  */\n-static IntrRecvError InterruptibleRecv(char* data, size_t len, int timeout, const SOCKET& hSocket)\n+static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const SOCKET& hSocket)\n {\n     int64_t curTime = GetTimeMillis();\n     int64_t endTime = curTime + timeout;\n     // Maximum time to wait in one select call. It will take up until this time (in millis)\n     // to break off in case of an interruption.\n     const int64_t maxWait = 1000;\n     while (len > 0 && curTime < endTime) {\n-        ssize_t ret = recv(hSocket, data, len, 0); // Optimistically try the recv first\n+        ssize_t ret = recv(hSocket, (char*)data, len, 0); // Optimistically try the recv first\n         if (ret > 0) {\n             len -= ret;\n             data += ret;\n@@ -242,24 +284,35 @@ static IntrRecvError InterruptibleRecv(char* data, size_t len, int timeout, cons\n     return len == 0 ? IntrRecvError::OK : IntrRecvError::Timeout;\n }\n \n+/** Credentials for proxy authentication */\n struct ProxyCredentials\n {\n     std::string username;\n     std::string password;\n };\n \n-std::string Socks5ErrorString(int err)\n+/** Convert SOCKS5 reply to a an error message */\n+std::string Socks5ErrorString(uint8_t err)\n {\n     switch(err) {\n-        case 0x01: return \"general failure\";\n-        case 0x02: return \"connection not allowed\";\n-        case 0x03: return \"network unreachable\";\n-        case 0x04: return \"host unreachable\";\n-        case 0x05: return \"connection refused\";\n-        case 0x06: return \"TTL expired\";\n-        case 0x07: return \"protocol error\";\n-        case 0x08: return \"address type not supported\";\n-        default:   return \"unknown\";\n+        case SOCKS5Reply::GENFAILURE:\n+            return \"general failure\";\n+        case SOCKS5Reply::NOTALLOWED:\n+            return \"connection not allowed\";\n+        case SOCKS5Reply::NETUNREACHABLE:\n+            return \"network unreachable\";\n+        case SOCKS5Reply::HOSTUNREACHABLE:\n+            return \"host unreachable\";\n+        case SOCKS5Reply::CONNREFUSED:\n+            return \"connection refused\";\n+        case SOCKS5Reply::TTLEXPIRED:\n+            return \"TTL expired\";\n+        case SOCKS5Reply::CMDUNSUPPORTED:\n+            return \"protocol error\";\n+        case SOCKS5Reply::ATYPEUNSUPPORTED:\n+            return \"address type not supported\";\n+        default:\n+            return \"unknown\";\n     }\n }\n \n@@ -274,34 +327,34 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     }\n     // Accepted authentication methods\n     std::vector<uint8_t> vSocks5Init;\n-    vSocks5Init.push_back(0x05);\n+    vSocks5Init.push_back(SOCKSVersion::SOCKS5);\n     if (auth) {\n-        vSocks5Init.push_back(0x02); // # METHODS\n-        vSocks5Init.push_back(0x00); // X'00' NO AUTHENTICATION REQUIRED\n-        vSocks5Init.push_back(0x02); // X'02' USERNAME/PASSWORD (RFC1929)\n+        vSocks5Init.push_back(0x02); // Number of methods\n+        vSocks5Init.push_back(SOCKS5Method::NOAUTH);\n+        vSocks5Init.push_back(SOCKS5Method::USER_PASS);\n     } else {\n-        vSocks5Init.push_back(0x01); // # METHODS\n-        vSocks5Init.push_back(0x00); // X'00' NO AUTHENTICATION REQUIRED\n+        vSocks5Init.push_back(0x01); // Number of methods\n+        vSocks5Init.push_back(SOCKS5Method::NOAUTH);\n     }\n     ssize_t ret = send(hSocket, (const char*)vSocks5Init.data(), vSocks5Init.size(), MSG_NOSIGNAL);\n     if (ret != (ssize_t)vSocks5Init.size()) {\n         CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n-    char pchRet1[2];\n+    uint8_t pchRet1[2];\n     if ((recvr = InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: InterruptibleRecv() timeout or other failure\\n\", strDest, port);\n         return false;\n     }\n-    if (pchRet1[0] != 0x05) {\n+    if (pchRet1[0] != SOCKSVersion::SOCKS5) {\n         CloseSocket(hSocket);\n         return error(\"Proxy failed to initialize\");\n     }\n-    if (pchRet1[1] == 0x02 && auth) {\n+    if (pchRet1[1] == SOCKS5Method::USER_PASS && auth) {\n         // Perform username/password authentication (as described in RFC1929)\n         std::vector<uint8_t> vAuth;\n-        vAuth.push_back(0x01);\n+        vAuth.push_back(0x01); // Current (and only) version of user/pass subnegotiation\n         if (auth->username.size() > 255 || auth->password.size() > 255)\n             return error(\"Proxy username or password too long\");\n         vAuth.push_back(auth->username.size());\n@@ -314,7 +367,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             return error(\"Error sending authentication to proxy\");\n         }\n         LogPrint(BCLog::PROXY, \"SOCKS5 sending proxy authentication %s:%s\\n\", auth->username, auth->password);\n-        char pchRetA[2];\n+        uint8_t pchRetA[2];\n         if ((recvr = InterruptibleRecv(pchRetA, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n             CloseSocket(hSocket);\n             return error(\"Error reading proxy authentication response\");\n@@ -323,17 +376,17 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             CloseSocket(hSocket);\n             return error(\"Proxy authentication unsuccessful\");\n         }\n-    } else if (pchRet1[1] == 0x00) {\n+    } else if (pchRet1[1] == SOCKS5Method::NOAUTH) {\n         // Perform no authentication\n     } else {\n         CloseSocket(hSocket);\n         return error(\"Proxy requested wrong authentication method %02x\", pchRet1[1]);\n     }\n     std::vector<uint8_t> vSocks5;\n-    vSocks5.push_back(0x05); // VER protocol version\n-    vSocks5.push_back(0x01); // CMD CONNECT\n-    vSocks5.push_back(0x00); // RSV Reserved\n-    vSocks5.push_back(0x03); // ATYP DOMAINNAME\n+    vSocks5.push_back(SOCKSVersion::SOCKS5); // VER protocol version\n+    vSocks5.push_back(SOCKS5Command::CONNECT); // CMD CONNECT\n+    vSocks5.push_back(0x00); // RSV Reserved must be 0\n+    vSocks5.push_back(SOCKS5Atyp::DOMAINNAME); // ATYP DOMAINNAME\n     vSocks5.push_back(strDest.size()); // Length<=255 is checked at beginning of function\n     vSocks5.insert(vSocks5.end(), strDest.begin(), strDest.end());\n     vSocks5.push_back((port >> 8) & 0xFF);\n@@ -343,7 +396,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n-    char pchRet2[4];\n+    uint8_t pchRet2[4];\n     if ((recvr = InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         if (recvr == IntrRecvError::Timeout) {\n@@ -355,26 +408,26 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             return error(\"Error while reading proxy response\");\n         }\n     }\n-    if (pchRet2[0] != 0x05) {\n+    if (pchRet2[0] != SOCKSVersion::SOCKS5) {\n         CloseSocket(hSocket);\n         return error(\"Proxy failed to accept request\");\n     }\n-    if (pchRet2[1] != 0x00) {\n+    if (pchRet2[1] != SOCKS5Reply::SUCCEEDED) {\n         // Failures to connect to a peer that are not proxy errors\n         CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: %s\\n\", strDest, port, Socks5ErrorString(pchRet2[1]));\n         return false;\n     }\n-    if (pchRet2[2] != 0x00) {\n+    if (pchRet2[2] != 0x00) { // Reserved field must be 0\n         CloseSocket(hSocket);\n         return error(\"Error: malformed proxy response\");\n     }\n-    char pchRet3[256];\n+    uint8_t pchRet3[256];\n     switch (pchRet2[3])\n     {\n-        case 0x01: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case 0x04: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case 0x03:\n+        case SOCKS5Atyp::IPV4: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case SOCKS5Atyp::IPV6: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case SOCKS5Atyp::DOMAINNAME:\n         {\n             recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n             if (recvr != IntrRecvError::OK) {"
      }
    ]
  },
  {
    "sha": "c94527a973611d7bc230af37d946d0c2d8b3ad13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTQ1MjdhOTczNjExZDdiYzIzMGFmMzdkOTQ2ZDBjMmQ4YjNhZDEz",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-02T11:16:04Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-09T20:31:41Z"
      },
      "message": "[Docs] Update Windows build instructions for using WSL and Ubuntu 17.04\n\nGithub-Pull: #11437\nRebased-From: 696ce46306e40f48dc4b2d7010812d564a43289d",
      "tree": {
        "sha": "6896929121d8a443762569e5b2bb84490e6b9110",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6896929121d8a443762569e5b2bb84490e6b9110"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c94527a973611d7bc230af37d946d0c2d8b3ad13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c94527a973611d7bc230af37d946d0c2d8b3ad13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c94527a973611d7bc230af37d946d0c2d8b3ad13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c94527a973611d7bc230af37d946d0c2d8b3ad13/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27e861a9b394857b0005347962ced92ac65e5dac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27e861a9b394857b0005347962ced92ac65e5dac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27e861a9b394857b0005347962ced92ac65e5dac"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 13,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7527a418584b54a67dd83e4b062ad87a86fccc48",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c94527a973611d7bc230af37d946d0c2d8b3ad13/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c94527a973611d7bc230af37d946d0c2d8b3ad13/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=c94527a973611d7bc230af37d946d0c2d8b3ad13",
        "patch": "@@ -4,10 +4,11 @@ WINDOWS BUILD NOTES\n Below are some notes on how to build Bitcoin Core for Windows.\n \n Most developers use cross-compilation from Ubuntu to build executables for\n-Windows. This is also used to build the release binaries.\n+Windows. Cross-compilation is also used to build the release binaries.\n \n-Currently only building on Ubuntu Trusty 14.04 is supported.\n-Other versions are unsupported or known to be broken (e.g. Ubuntu Xenial 16.04).\n+Currently only building on Ubuntu Trusty 14.04 or Ubuntu Zesty 17.04 or later is supported.\n+Building on Ubuntu Xenial 16.04 is known to be broken, see extensive discussion in issue [8732](https://github.com/bitcoin/bitcoin/issues/8732).\n+While it may be possible to do so with work arounds, it's potentially dangerous and not recommended.\n \n While there are potentially a number of ways to build on Windows (for example using msys / mingw-w64),\n using the Windows Subsystem For Linux is the most straightforward. If you are building with\n@@ -62,6 +63,14 @@ A host toolchain (`build-essential`) is necessary because some dependency\n packages (such as `protobuf`) need to build host utilities that are used in the\n build process.\n \n+\n+If you're building on Ubuntu 17.04 or later, run these two commands, selecting the 'posix' variant for both,\n+to work around issues with mingw-w64. See issue [8732](https://github.com/bitcoin/bitcoin/issues/8732) for more information.\n+```\n+sudo update-alternatives --config x86_64-w64-mingw32-g++\n+sudo update-alternatives --config x86_64-w64-mingw32-gcc\n+```\n+\n ## Building for 64-bit Windows\n \n To build executables for Windows 64-bit, install the following dependencies:\n@@ -82,7 +91,7 @@ Then build using:\n \n To build executables for Windows 32-bit, install the following dependencies:\n \n-    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev \n+    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev\n \n Then build using:\n "
      }
    ]
  },
  {
    "sha": "405e069d3b8c71b0f5161d9dfb2334a0bb988f2e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MDVlMDY5ZDNiOGM3MWIwZjUxNjFkOWRmYjIzMzRhMGJiOTg4ZjJl",
    "commit": {
      "author": {
        "name": "Dusty Williams",
        "email": "dusty.wil@gmail.com",
        "date": "2017-10-09T03:18:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-09T20:31:41Z"
      },
      "message": "Update importprivkey named args documentation\n\nFixes #11462. Updated documentation for importprivkey function to use the correct name for the first argument.\nAlso updates a call to importprivkey to use named args in functional test.\n\nGithub-Pull: #11465\nRebased-From: aa57590d7c5eab1df5443e8ac9ed53ad0db46c02",
      "tree": {
        "sha": "799cfbf80fa3752ebb3b8ff79149bcde521122e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/799cfbf80fa3752ebb3b8ff79149bcde521122e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/405e069d3b8c71b0f5161d9dfb2334a0bb988f2e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/405e069d3b8c71b0f5161d9dfb2334a0bb988f2e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/405e069d3b8c71b0f5161d9dfb2334a0bb988f2e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/405e069d3b8c71b0f5161d9dfb2334a0bb988f2e/comments",
    "author": {
      "login": "dusty-wil",
      "id": 16580885,
      "node_id": "MDQ6VXNlcjE2NTgwODg1",
      "avatar_url": "https://avatars.githubusercontent.com/u/16580885?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dusty-wil",
      "html_url": "https://github.com/dusty-wil",
      "followers_url": "https://api.github.com/users/dusty-wil/followers",
      "following_url": "https://api.github.com/users/dusty-wil/following{/other_user}",
      "gists_url": "https://api.github.com/users/dusty-wil/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dusty-wil/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dusty-wil/subscriptions",
      "organizations_url": "https://api.github.com/users/dusty-wil/orgs",
      "repos_url": "https://api.github.com/users/dusty-wil/repos",
      "events_url": "https://api.github.com/users/dusty-wil/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dusty-wil/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c94527a973611d7bc230af37d946d0c2d8b3ad13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c94527a973611d7bc230af37d946d0c2d8b3ad13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c94527a973611d7bc230af37d946d0c2d8b3ad13"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8e0e4a8e14efabf0500bf4ff6b325119bd3d5822",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/405e069d3b8c71b0f5161d9dfb2334a0bb988f2e/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/405e069d3b8c71b0f5161d9dfb2334a0bb988f2e/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=405e069d3b8c71b0f5161d9dfb2334a0bb988f2e",
        "patch": "@@ -79,10 +79,10 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n+            \"importprivkey \\\"privkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"1. \\\"privkey\\\"          (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\""
      },
      {
        "sha": "198a2058aaced537ae667f70c82280eb473dd53a",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/405e069d3b8c71b0f5161d9dfb2334a0bb988f2e/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/405e069d3b8c71b0f5161d9dfb2334a0bb988f2e/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=405e069d3b8c71b0f5161d9dfb2334a0bb988f2e",
        "patch": "@@ -82,8 +82,8 @@ def run_test(self):\n         assert_equal(balance2, Decimal('0.05'))\n \n         #Import with private key with no rescan\n-        self.nodes[1].importprivkey(address3_privkey, \"add3\", False)\n-        result3 = self.nodes[1].importprunedfunds(rawtxn3, proof3)\n+        self.nodes[1].importprivkey(privkey=address3_privkey, label=\"add3\", rescan=False)\n+        self.nodes[1].importprunedfunds(rawtxn3, proof3)\n         balance3 = self.nodes[1].getbalance(\"add3\", 0, False)\n         assert_equal(balance3, Decimal('0.025'))\n         balance3 = self.nodes[1].getbalance(\"*\", 0, True)"
      }
    ]
  },
  {
    "sha": "51bad9195eb435200626beccbaf6b60774a4a894",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWJhZDkxOTVlYjQzNTIwMDYyNmJlY2NiYWY2YjYwNzc0YTRhODk0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-11T16:28:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-11T16:29:55Z"
      },
      "message": "Merge #11445: [qa] 0.15.1 Backports\n\n019c492 qa: Fix lcov for out-of-tree builds (MarcoFalke)\ne169349 qa: Restore bitcoin-util-test py2 compatibility (MarcoFalke)\n806c78f add functional test for mempoolreplacement command line arg (Gregory Sanders)\na825d4a Fix bip68-sequence rpc test (Johnson Lau)\na36f332 Verify DBWrapper iterators are taking snapshots (Matt Corallo)\n8d2e51d qa: Fix bug introduced in p2p-segwit.py (Suhas Daftuar)\n2f0b30a qa: Treat mininode p2p exceptions as fatal (Suhas Daftuar)\ne4605d9 Tests for zmqpubrawtx and zmqpubrawblock (Andrew Chow)\n2c4ff35 [script] Unit tests for IsMine (Jim Posen)\n794a80e [script] Unit tests for script/standard functions (Jim Posen)\nf9cf7b5 [tests] Check connectivity before sending in assumevalid.py (John Newbery)\nf1ced0d [tests] Make p2p-leaktests.py more robust (John Newbery)\n2e1ac70 [qa] zapwallettxes: Wait up to 3s for mempool reload (MarcoFalke)\nb6468d3 Add listwallets RPC test to multiwallet.py (Cristian Mircea Messel)\nd8dd8e7 [tests] fixup dbcrash interaction with add_nodes() (John Newbery)\n2b97b36 [test] Replace check_output with low level version (Jo\u00e3o Barbosa)\ne38211f [test] Add assert_raises_process_error to assert process errors (Jo\u00e3o Barbosa)\ne0bfd28 [test] Add support for custom arguments to TestNodeCLI (Jo\u00e3o Barbosa)\n812c870 [test] Improve assert_raises_jsonrpc docstring (Jo\u00e3o Barbosa)\neeb24a3 [qa] TestNode: Add wait_until_stopped helper method (MarcoFalke)\nf3f7891 Stop test_bitcoin-qt touching ~/.bitcoin (MeshCollider)\nf0b6795 Remove redundant testutil files (MeshCollider)\n4424176 Improve signmessages functional test (Cristian Mircea Messel)\ncef0319 [tests] fixups from set_test_params() (John Newbery)\n82bf6fc [tests] Functional tests must explicitly set num_nodes (John Newbery)\n801d2ae [tests] don't override __init__() in individual tests (John Newbery)\nbb5e7cb [tests] Avoid passing around member variables in test_framework (John Newbery)\n4d3ba18 [tests] TestNode: separate add_node from start_node (John Newbery)\n11a5992 [tests] fix - use rpc_timeout as rpc timeout (John Newbery)\n847c75e Add getmininginfo functional test (Cristian Mircea Messel)\n2a5d099 RPC: gettxout: Slightly improve doc and tests (Jorge Tim\u00f3n)\n716066d [tests] Add bitcoin_cli.py test script (John Newbery)\n016b9ad [tests] add TestNodeCLI class for calling bitcoin-cli for a node (John Newbery)\n5398f20 qa: Move wait_until to util (MarcoFalke)\n1d80d1e [tests] fix timeout issues from TestNode (John Newbery)\nc276c1e test: Increase initial RPC timeout to 60 seconds (Wladimir J. van der Laan)\nfc2aa09 [tests] Introduce TestNode (John Newbery)\n\nPull request description:\n\n  This includes test related backports for 0.15.1. The motivation is twofold:\n\n  * Make backporting new tests written for current master easier\n  * Fix the most common test issues that happen(ed) frequently on travis\n\n  Even though this includes the new TestNode class, which comes with a lot\n  of refactoring, I believe that the issues caused by refactoring are found\n  and fixed by now.\n\nTree-SHA512: 6a0c4e5246da83ff0b3f7d2cb8df358d105ed548fb3857e5d882f26cc336553aa07b39e38c281879bf82f95078298b775334f9a60c0b23140f77c50174bd8347",
      "tree": {
        "sha": "7fa3066c94e421b80cadcd2fd39117b62ad6910a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fa3066c94e421b80cadcd2fd39117b62ad6910a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51bad9195eb435200626beccbaf6b60774a4a894",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ3kcDAAoJEB5K7WKYbNJdAoIH+wdEIrq+GMhKjzyKpeZfKHU4\nqsK3pD67D2WLXsP8AKXm+cnsakU7BO3mbvHJMVVDldPff6Ff/B94MvOAlSjub2pe\nKylzBGin5cgcbHEJB5108xvwYduL7ztBcg6tdVsPIbiT4QffzbO/zdUug+wb/YWm\nA0ALPXvBMnM0AB1ObJJflJMD5GHLgHTVjVgO+TA9Ve13IHsgxNpbEnRY3ZsyogQO\nE9ARg0kyRQpbgDeTTiGKFcVbiTXT+4RmwrT5CeVPmvqSVuuclyw1jsJAmRfDik8c\nxnN+/6pp8X182fwpWX51wGwazuMphpgvUTu74DxQj0WAFFg0owpxmh6VNKiEwqY=\n=YIjd\n-----END PGP SIGNATURE-----",
        "payload": "tree 7fa3066c94e421b80cadcd2fd39117b62ad6910a\nparent fb7b5293844ea6adc5dcf5ad0a0c5890b4495939\nparent 019c492490077a7581ab526b4208439200cbff24\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1507739321 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1507739395 +0200\n\nMerge #11445: [qa] 0.15.1 Backports\n\n019c492 qa: Fix lcov for out-of-tree builds (MarcoFalke)\ne169349 qa: Restore bitcoin-util-test py2 compatibility (MarcoFalke)\n806c78f add functional test for mempoolreplacement command line arg (Gregory Sanders)\na825d4a Fix bip68-sequence rpc test (Johnson Lau)\na36f332 Verify DBWrapper iterators are taking snapshots (Matt Corallo)\n8d2e51d qa: Fix bug introduced in p2p-segwit.py (Suhas Daftuar)\n2f0b30a qa: Treat mininode p2p exceptions as fatal (Suhas Daftuar)\ne4605d9 Tests for zmqpubrawtx and zmqpubrawblock (Andrew Chow)\n2c4ff35 [script] Unit tests for IsMine (Jim Posen)\n794a80e [script] Unit tests for script/standard functions (Jim Posen)\nf9cf7b5 [tests] Check connectivity before sending in assumevalid.py (John Newbery)\nf1ced0d [tests] Make p2p-leaktests.py more robust (John Newbery)\n2e1ac70 [qa] zapwallettxes: Wait up to 3s for mempool reload (MarcoFalke)\nb6468d3 Add listwallets RPC test to multiwallet.py (Cristian Mircea Messel)\nd8dd8e7 [tests] fixup dbcrash interaction with add_nodes() (John Newbery)\n2b97b36 [test] Replace check_output with low level version (Jo\u00e3o Barbosa)\ne38211f [test] Add assert_raises_process_error to assert process errors (Jo\u00e3o Barbosa)\ne0bfd28 [test] Add support for custom arguments to TestNodeCLI (Jo\u00e3o Barbosa)\n812c870 [test] Improve assert_raises_jsonrpc docstring (Jo\u00e3o Barbosa)\neeb24a3 [qa] TestNode: Add wait_until_stopped helper method (MarcoFalke)\nf3f7891 Stop test_bitcoin-qt touching ~/.bitcoin (MeshCollider)\nf0b6795 Remove redundant testutil files (MeshCollider)\n4424176 Improve signmessages functional test (Cristian Mircea Messel)\ncef0319 [tests] fixups from set_test_params() (John Newbery)\n82bf6fc [tests] Functional tests must explicitly set num_nodes (John Newbery)\n801d2ae [tests] don't override __init__() in individual tests (John Newbery)\nbb5e7cb [tests] Avoid passing around member variables in test_framework (John Newbery)\n4d3ba18 [tests] TestNode: separate add_node from start_node (John Newbery)\n11a5992 [tests] fix - use rpc_timeout as rpc timeout (John Newbery)\n847c75e Add getmininginfo functional test (Cristian Mircea Messel)\n2a5d099 RPC: gettxout: Slightly improve doc and tests (Jorge Tim\u00f3n)\n716066d [tests] Add bitcoin_cli.py test script (John Newbery)\n016b9ad [tests] add TestNodeCLI class for calling bitcoin-cli for a node (John Newbery)\n5398f20 qa: Move wait_until to util (MarcoFalke)\n1d80d1e [tests] fix timeout issues from TestNode (John Newbery)\nc276c1e test: Increase initial RPC timeout to 60 seconds (Wladimir J. van der Laan)\nfc2aa09 [tests] Introduce TestNode (John Newbery)\n\nPull request description:\n\n  This includes test related backports for 0.15.1. The motivation is twofold:\n\n  * Make backporting new tests written for current master easier\n  * Fix the most common test issues that happen(ed) frequently on travis\n\n  Even though this includes the new TestNode class, which comes with a lot\n  of refactoring, I believe that the issues caused by refactoring are found\n  and fixed by now.\n\nTree-SHA512: 6a0c4e5246da83ff0b3f7d2cb8df358d105ed548fb3857e5d882f26cc336553aa07b39e38c281879bf82f95078298b775334f9a60c0b23140f77c50174bd8347\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51bad9195eb435200626beccbaf6b60774a4a894",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51bad9195eb435200626beccbaf6b60774a4a894",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51bad9195eb435200626beccbaf6b60774a4a894/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939"
      },
      {
        "sha": "019c492490077a7581ab526b4208439200cbff24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/019c492490077a7581ab526b4208439200cbff24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/019c492490077a7581ab526b4208439200cbff24"
      }
    ],
    "stats": {
      "total": 2538,
      "additions": 1658,
      "deletions": 880
    },
    "files": [
      {
        "sha": "e8aa7d5ae121cc5561d0f7d17f86b8fc177a2349",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -1231,6 +1231,7 @@ AC_SUBST(QR_LIBS)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AC_CONFIG_FILES([doc/Doxyfile])\n+AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])\n "
      },
      {
        "sha": "ea2ed17472ee59c47f12e8a0f0c602ce1e048de4",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -25,12 +25,10 @@ TEST_QT_H = \\\n   qt/test/wallettests.h\n \n TEST_BITCOIN_CPP = \\\n-  test/test_bitcoin.cpp \\\n-  test/testutil.cpp\n+  test/test_bitcoin.cpp\n \n TEST_BITCOIN_H = \\\n-  test/test_bitcoin.h \\\n-  test/testutil.h\n+  test/test_bitcoin.h\n \n qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_QT_INCLUDES) \\\n   $(QT_INCLUDES) $(QT_TEST_INCLUDES) $(PROTOBUF_CFLAGS)"
      },
      {
        "sha": "b48bfc76b78592aacff61bc3204f7165ee5d671d",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -65,6 +65,7 @@ BITCOIN_TESTS =\\\n   test/scheduler_tests.cpp \\\n   test/script_P2SH_tests.cpp \\\n   test/script_tests.cpp \\\n+  test/script_standard_tests.cpp \\\n   test/scriptnum_tests.cpp \\\n   test/serialize_tests.cpp \\\n   test/sighash_tests.cpp \\\n@@ -74,8 +75,6 @@ BITCOIN_TESTS =\\\n   test/test_bitcoin.cpp \\\n   test/test_bitcoin.h \\\n   test/test_bitcoin_main.cpp \\\n-  test/testutil.cpp \\\n-  test/testutil.h \\\n   test/timedata_tests.cpp \\\n   test/torcontrol_tests.cpp \\\n   test/transaction_tests.cpp \\\n@@ -148,7 +147,7 @@ bitcoin_test_clean : FORCE\n \n check-local:\n \t@echo \"Running test/util/bitcoin-util-test.py...\"\n-\t$(top_builddir)/test/util/bitcoin-util-test.py\n+\t$(PYTHON) $(top_builddir)/test/util/bitcoin-util-test.py\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n if EMBEDDED_UNIVALUE\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check"
      },
      {
        "sha": "98a6605190f4805d59ed8a40b07b62b8bc2b5ef3",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -11,7 +11,6 @@\n #include \"rpc/register.h\"\n #include \"rpc/server.h\"\n #include \"rpcconsole.h\"\n-#include \"test/testutil.h\"\n #include \"test/test_bitcoin.h\"\n #include \"univalue.h\"\n #include \"util.h\"\n@@ -37,11 +36,6 @@ void RPCNestedTests::rpcNestedTests()\n     // do some test setup\n     // could be moved to a more generic place when we add more tests on QT level\n     tableRPC.appendCommand(\"rpcNestedTest\", &vRPCCommands[0]);\n-    ClearDatadirCache();\n-    std::string path = QDir::tempPath().toStdString() + \"/\" + strprintf(\"test_bitcoin_qt_%lu_%i\", (unsigned long)GetTime(), (int)(GetRand(100000)));\n-    QDir dir(QString::fromStdString(path));\n-    dir.mkpath(\".\");\n-    gArgs.ForceSetArg(\"-datadir\", path);\n     //mempool.setSanityCheck(1.0);\n \n     TestingSetup test;\n@@ -136,6 +130,4 @@ void RPCNestedTests::rpcNestedTests()\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc,,abc)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n     QVERIFY_EXCEPTION_THROWN(RPCConsole::RPCExecuteCommandLine(result, \"rpcNestedTest(abc,,)\"), std::runtime_error); //don't tollerate empty arguments when using ,\n #endif\n-\n-    fs::remove_all(fs::path(path));\n }"
      },
      {
        "sha": "b5790e4e2be8023c49cd1e5bb13290a5e290f85b",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -53,6 +53,10 @@ int main(int argc, char *argv[])\n     SetupNetworking();\n     SelectParams(CBaseChainParams::MAIN);\n     noui_connect();\n+    ClearDatadirCache();\n+    fs::path pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin-qt_%lu_%i\", (unsigned long)GetTime(), (int)GetRand(100000));\n+    fs::create_directories(pathTemp);\n+    gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n \n     bool fInvalid = false;\n \n@@ -97,5 +101,7 @@ int main(int argc, char *argv[])\n     }\n #endif\n \n+    fs::remove_all(pathTemp);\n+\n     return fInvalid;\n }"
      },
      {
        "sha": "720eb068bf65780366965d285355e16bfb497512",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -944,9 +944,10 @@ UniValue gettxout(const JSONRPCRequest& request)\n             \"gettxout \\\"txid\\\" n ( include_mempool )\\n\"\n             \"\\nReturns details about an unspent transaction output.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"txid\\\"       (string, required) The transaction id\\n\"\n-            \"2. n              (numeric, required) vout number\\n\"\n-            \"3. include_mempool  (boolean, optional) Whether to include the mempool\\n\"\n+            \"1. \\\"txid\\\"             (string, required) The transaction id\\n\"\n+            \"2. \\\"n\\\"                (numeric, required) vout number\\n\"\n+            \"3. \\\"include_mempool\\\"  (boolean, optional) Whether to include the mempool. Default: true.\"\n+            \"     Note that an unspent output that is spent in the mempool won't appear.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\""
      },
      {
        "sha": "c3aade1774767085b6e6502e3397f9b0b18f9b13",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -46,6 +46,8 @@ isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest, bool& i\n \n isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool& isInvalid, SigVersion sigversion)\n {\n+    isInvalid = false;\n+\n     std::vector<valtype> vSolutions;\n     txnouttype whichType;\n     if (!Solver(scriptPubKey, whichType, vSolutions)) {"
      },
      {
        "sha": "d90fe5027705f1389211fa8f6d8f51fb3e744d3c",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -204,19 +204,31 @@ BOOST_AUTO_TEST_CASE(iterator_ordering)\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n         uint32_t value = x*x;\n-        BOOST_CHECK(dbw.Write(key, value));\n+        if (!(x & 1)) BOOST_CHECK(dbw.Write(key, value));\n     }\n \n+    // Check that creating an iterator creates a snapshot\n     std::unique_ptr<CDBIterator> it(const_cast<CDBWrapper&>(dbw).NewIterator());\n+\n+    for (int x=0x00; x<256; ++x) {\n+        uint8_t key = x;\n+        uint32_t value = x*x;\n+        if (x & 1) BOOST_CHECK(dbw.Write(key, value));\n+    }\n+\n     for (int seek_start : {0x00, 0x80}) {\n         it->Seek((uint8_t)seek_start);\n-        for (int x=seek_start; x<256; ++x) {\n+        for (int x=seek_start; x<255; ++x) {\n             uint8_t key;\n             uint32_t value;\n             BOOST_CHECK(it->Valid());\n             if (!it->Valid()) // Avoid spurious errors about invalid iterator's key and value in case of failure\n                 break;\n             BOOST_CHECK(it->GetKey(key));\n+            if (x & 1) {\n+                BOOST_CHECK_EQUAL(key, x + 1);\n+                continue;\n+            }\n             BOOST_CHECK(it->GetValue(value));\n             BOOST_CHECK_EQUAL(key, x);\n             BOOST_CHECK_EQUAL(value, x*x);"
      },
      {
        "sha": "de7f3b48f5d6fb4036905b078bb8ec320d42bbc5",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 91,
        "changes": 91,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -16,8 +16,6 @@\n \n #include <boost/test/unit_test.hpp>\n \n-typedef std::vector<unsigned char> valtype;\n-\n BOOST_FIXTURE_TEST_SUITE(multisig_tests, BasicTestingSetup)\n \n CScript\n@@ -173,95 +171,6 @@ BOOST_AUTO_TEST_CASE(multisig_IsStandard)\n         BOOST_CHECK(!::IsStandard(malformed[i], whichType));\n }\n \n-BOOST_AUTO_TEST_CASE(multisig_Solver1)\n-{\n-    // Tests Solver() that returns lists of keys that are\n-    // required to satisfy a ScriptPubKey\n-    //\n-    // Also tests IsMine() and ExtractDestination()\n-    //\n-    // Note: ExtractDestination for the multisignature transactions\n-    // always returns false for this release, even if you have\n-    // one key that would satisfy an (a|b) or 2-of-3 keys needed\n-    // to spend an escrow transaction.\n-    //\n-    CBasicKeyStore keystore, emptykeystore, partialkeystore;\n-    CKey key[3];\n-    CTxDestination keyaddr[3];\n-    for (int i = 0; i < 3; i++)\n-    {\n-        key[i].MakeNewKey(true);\n-        keystore.AddKey(key[i]);\n-        keyaddr[i] = key[i].GetPubKey().GetID();\n-    }\n-    partialkeystore.AddKey(key[0]);\n-\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK(solutions.size() == 1);\n-        CTxDestination addr;\n-        BOOST_CHECK(ExtractDestination(s, addr));\n-        BOOST_CHECK(addr == keyaddr[0]);\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n-    }\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << OP_DUP << OP_HASH160 << ToByteVector(key[0].GetPubKey().GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK(solutions.size() == 1);\n-        CTxDestination addr;\n-        BOOST_CHECK(ExtractDestination(s, addr));\n-        BOOST_CHECK(addr == keyaddr[0]);\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n-    }\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK_EQUAL(solutions.size(), 4U);\n-        CTxDestination addr;\n-        BOOST_CHECK(!ExtractDestination(s, addr));\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n-        BOOST_CHECK(!IsMine(partialkeystore, s));\n-    }\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << OP_1 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << OP_2 << OP_CHECKMULTISIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK_EQUAL(solutions.size(), 4U);\n-        std::vector<CTxDestination> addrs;\n-        int nRequired;\n-        BOOST_CHECK(ExtractDestinations(s, whichType, addrs, nRequired));\n-        BOOST_CHECK(addrs[0] == keyaddr[0]);\n-        BOOST_CHECK(addrs[1] == keyaddr[1]);\n-        BOOST_CHECK(nRequired == 1);\n-        BOOST_CHECK(IsMine(keystore, s));\n-        BOOST_CHECK(!IsMine(emptykeystore, s));\n-        BOOST_CHECK(!IsMine(partialkeystore, s));\n-    }\n-    {\n-        std::vector<valtype> solutions;\n-        txnouttype whichType;\n-        CScript s;\n-        s << OP_2 << ToByteVector(key[0].GetPubKey()) << ToByteVector(key[1].GetPubKey()) << ToByteVector(key[2].GetPubKey()) << OP_3 << OP_CHECKMULTISIG;\n-        BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK(solutions.size() == 5);\n-    }\n-}\n-\n BOOST_AUTO_TEST_CASE(multisig_Sign)\n {\n     // Test SignSignature() (and therefore the version of Solver() that signs transactions)"
      },
      {
        "sha": "3d17a0dbb6c6ab03c8e9a60d4bc71c069dfa2ee5",
        "filename": "src/test/script_standard_tests.cpp",
        "status": "added",
        "additions": 740,
        "deletions": 0,
        "changes": 740,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/src/test/script_standard_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/src/test/script_standard_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_standard_tests.cpp?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -0,0 +1,740 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"key.h\"\n+#include \"keystore.h\"\n+#include \"script/ismine.h\"\n+#include \"script/script.h\"\n+#include \"script/script_error.h\"\n+#include \"script/standard.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+\n+BOOST_FIXTURE_TEST_SUITE(script_standard_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(script_standard_Solver_success)\n+{\n+    CKey keys[3];\n+    CPubKey pubkeys[3];\n+    for (int i = 0; i < 3; i++) {\n+        keys[i].MakeNewKey(true);\n+        pubkeys[i] = keys[i].GetPubKey();\n+    }\n+\n+    CScript s;\n+    txnouttype whichType;\n+    std::vector<std::vector<unsigned char> > solutions;\n+\n+    // TX_PUBKEY\n+    s.clear();\n+    s << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_PUBKEY);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0]));\n+\n+    // TX_PUBKEYHASH\n+    s.clear();\n+    s << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_PUBKEYHASH);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0].GetID()));\n+\n+    // TX_SCRIPTHASH\n+    CScript redeemScript(s); // initialize with leftover P2PKH script\n+    s.clear();\n+    s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_SCRIPTHASH);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(CScriptID(redeemScript)));\n+\n+    // TX_MULTISIG\n+    s.clear();\n+    s << OP_1 <<\n+        ToByteVector(pubkeys[0]) <<\n+        ToByteVector(pubkeys[1]) <<\n+        OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n+    BOOST_CHECK_EQUAL(solutions.size(), 4);\n+    BOOST_CHECK(solutions[0] == std::vector<unsigned char>({1}));\n+    BOOST_CHECK(solutions[1] == ToByteVector(pubkeys[0]));\n+    BOOST_CHECK(solutions[2] == ToByteVector(pubkeys[1]));\n+    BOOST_CHECK(solutions[3] == std::vector<unsigned char>({2}));\n+\n+    s.clear();\n+    s << OP_2 <<\n+        ToByteVector(pubkeys[0]) <<\n+        ToByteVector(pubkeys[1]) <<\n+        ToByteVector(pubkeys[2]) <<\n+        OP_3 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n+    BOOST_CHECK_EQUAL(solutions.size(), 5);\n+    BOOST_CHECK(solutions[0] == std::vector<unsigned char>({2}));\n+    BOOST_CHECK(solutions[1] == ToByteVector(pubkeys[0]));\n+    BOOST_CHECK(solutions[2] == ToByteVector(pubkeys[1]));\n+    BOOST_CHECK(solutions[3] == ToByteVector(pubkeys[2]));\n+    BOOST_CHECK(solutions[4] == std::vector<unsigned char>({3}));\n+\n+    // TX_NULL_DATA\n+    s.clear();\n+    s << OP_RETURN <<\n+        std::vector<unsigned char>({0}) <<\n+        std::vector<unsigned char>({75}) <<\n+        std::vector<unsigned char>({255});\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_NULL_DATA);\n+    BOOST_CHECK_EQUAL(solutions.size(), 0);\n+\n+    // TX_WITNESS_V0_KEYHASH\n+    s.clear();\n+    s << OP_0 << ToByteVector(pubkeys[0].GetID());\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_WITNESS_V0_KEYHASH);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(pubkeys[0].GetID()));\n+\n+    // TX_WITNESS_V0_SCRIPTHASH\n+    uint256 scriptHash;\n+    CSHA256().Write(&redeemScript[0], redeemScript.size())\n+        .Finalize(scriptHash.begin());\n+\n+    s.clear();\n+    s << OP_0 << ToByteVector(scriptHash);\n+    BOOST_CHECK(Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_WITNESS_V0_SCRIPTHASH);\n+    BOOST_CHECK_EQUAL(solutions.size(), 1);\n+    BOOST_CHECK(solutions[0] == ToByteVector(scriptHash));\n+\n+    // TX_NONSTANDARD\n+    s.clear();\n+    s << OP_9 << OP_ADD << OP_11 << OP_EQUAL;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+    BOOST_CHECK_EQUAL(whichType, TX_NONSTANDARD);\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_standard_Solver_failure)\n+{\n+    CKey key;\n+    CPubKey pubkey;\n+    key.MakeNewKey(true);\n+    pubkey = key.GetPubKey();\n+\n+    CScript s;\n+    txnouttype whichType;\n+    std::vector<std::vector<unsigned char> > solutions;\n+\n+    // TX_PUBKEY with incorrectly sized pubkey\n+    s.clear();\n+    s << std::vector<unsigned char>(30, 0x01) << OP_CHECKSIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_PUBKEYHASH with incorrectly sized key hash\n+    s.clear();\n+    s << OP_DUP << OP_HASH160 << ToByteVector(pubkey) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_SCRIPTHASH with incorrectly sized script hash\n+    s.clear();\n+    s << OP_HASH160 << std::vector<unsigned char>(21, 0x01) << OP_EQUAL;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_MULTISIG 0/2\n+    s.clear();\n+    s << OP_0 << ToByteVector(pubkey) << OP_1 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_MULTISIG 2/1\n+    s.clear();\n+    s << OP_2 << ToByteVector(pubkey) << OP_1 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_MULTISIG n = 2 with 1 pubkey\n+    s.clear();\n+    s << OP_1 << ToByteVector(pubkey) << OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_MULTISIG n = 1 with 0 pubkeys\n+    s.clear();\n+    s << OP_1 << OP_1 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_NULL_DATA with other opcodes\n+    s.clear();\n+    s << OP_RETURN << std::vector<unsigned char>({75}) << OP_ADD;\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_WITNESS with unknown version\n+    s.clear();\n+    s << OP_1 << ToByteVector(pubkey);\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+\n+    // TX_WITNESS with incorrect program size\n+    s.clear();\n+    s << OP_0 << std::vector<unsigned char>(19, 0x01);\n+    BOOST_CHECK(!Solver(s, whichType, solutions));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_standard_ExtractDestination)\n+{\n+    CKey key;\n+    CPubKey pubkey;\n+    key.MakeNewKey(true);\n+    pubkey = key.GetPubKey();\n+\n+    CScript s;\n+    CTxDestination address;\n+\n+    // TX_PUBKEY\n+    s.clear();\n+    s << ToByteVector(pubkey) << OP_CHECKSIG;\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    BOOST_CHECK(boost::get<CKeyID>(&address) &&\n+                *boost::get<CKeyID>(&address) == pubkey.GetID());\n+\n+    // TX_PUBKEYHASH\n+    s.clear();\n+    s << OP_DUP << OP_HASH160 << ToByteVector(pubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    BOOST_CHECK(boost::get<CKeyID>(&address) &&\n+                *boost::get<CKeyID>(&address) == pubkey.GetID());\n+\n+    // TX_SCRIPTHASH\n+    CScript redeemScript(s); // initialize with leftover P2PKH script\n+    s.clear();\n+    s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+    BOOST_CHECK(ExtractDestination(s, address));\n+    BOOST_CHECK(boost::get<CScriptID>(&address) &&\n+                *boost::get<CScriptID>(&address) == CScriptID(redeemScript));\n+\n+    // TX_MULTISIG\n+    s.clear();\n+    s << OP_1 << ToByteVector(pubkey) << OP_1 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(!ExtractDestination(s, address));\n+\n+    // TX_NULL_DATA\n+    s.clear();\n+    s << OP_RETURN << std::vector<unsigned char>({75});\n+    BOOST_CHECK(!ExtractDestination(s, address));\n+\n+    // TX_WITNESS_V0_KEYHASH\n+    s.clear();\n+    s << OP_0 << ToByteVector(pubkey);\n+    BOOST_CHECK(!ExtractDestination(s, address));\n+\n+    // TX_WITNESS_V0_SCRIPTHASH\n+    s.clear();\n+    s << OP_0 << ToByteVector(CScriptID(redeemScript));\n+    BOOST_CHECK(!ExtractDestination(s, address));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_standard_ExtractDestinations)\n+{\n+    CKey keys[3];\n+    CPubKey pubkeys[3];\n+    for (int i = 0; i < 3; i++) {\n+        keys[i].MakeNewKey(true);\n+        pubkeys[i] = keys[i].GetPubKey();\n+    }\n+\n+    CScript s;\n+    txnouttype whichType;\n+    std::vector<CTxDestination> addresses;\n+    int nRequired;\n+\n+    // TX_PUBKEY\n+    s.clear();\n+    s << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n+    BOOST_CHECK_EQUAL(whichType, TX_PUBKEY);\n+    BOOST_CHECK_EQUAL(addresses.size(), 1);\n+    BOOST_CHECK_EQUAL(nRequired, 1);\n+    BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n+                *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());\n+\n+    // TX_PUBKEYHASH\n+    s.clear();\n+    s << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n+    BOOST_CHECK_EQUAL(whichType, TX_PUBKEYHASH);\n+    BOOST_CHECK_EQUAL(addresses.size(), 1);\n+    BOOST_CHECK_EQUAL(nRequired, 1);\n+    BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n+                *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());\n+\n+    // TX_SCRIPTHASH\n+    CScript redeemScript(s); // initialize with leftover P2PKH script\n+    s.clear();\n+    s << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n+    BOOST_CHECK_EQUAL(whichType, TX_SCRIPTHASH);\n+    BOOST_CHECK_EQUAL(addresses.size(), 1);\n+    BOOST_CHECK_EQUAL(nRequired, 1);\n+    BOOST_CHECK(boost::get<CScriptID>(&addresses[0]) &&\n+                *boost::get<CScriptID>(&addresses[0]) == CScriptID(redeemScript));\n+\n+    // TX_MULTISIG\n+    s.clear();\n+    s << OP_2 <<\n+        ToByteVector(pubkeys[0]) <<\n+        ToByteVector(pubkeys[1]) <<\n+        OP_2 << OP_CHECKMULTISIG;\n+    BOOST_CHECK(ExtractDestinations(s, whichType, addresses, nRequired));\n+    BOOST_CHECK_EQUAL(whichType, TX_MULTISIG);\n+    BOOST_CHECK_EQUAL(addresses.size(), 2);\n+    BOOST_CHECK_EQUAL(nRequired, 2);\n+    BOOST_CHECK(boost::get<CKeyID>(&addresses[0]) &&\n+                *boost::get<CKeyID>(&addresses[0]) == pubkeys[0].GetID());\n+    BOOST_CHECK(boost::get<CKeyID>(&addresses[1]) &&\n+                *boost::get<CKeyID>(&addresses[1]) == pubkeys[1].GetID());\n+\n+    // TX_NULL_DATA\n+    s.clear();\n+    s << OP_RETURN << std::vector<unsigned char>({75});\n+    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n+\n+    // TX_WITNESS_V0_KEYHASH\n+    s.clear();\n+    s << OP_0 << ToByteVector(pubkeys[0].GetID());\n+    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n+\n+    // TX_WITNESS_V0_SCRIPTHASH\n+    s.clear();\n+    s << OP_0 << ToByteVector(CScriptID(redeemScript));\n+    BOOST_CHECK(!ExtractDestinations(s, whichType, addresses, nRequired));\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_standard_GetScriptFor_)\n+{\n+    CKey keys[3];\n+    CPubKey pubkeys[3];\n+    for (int i = 0; i < 3; i++) {\n+        keys[i].MakeNewKey(true);\n+        pubkeys[i] = keys[i].GetPubKey();\n+    }\n+\n+    CScript expected, result;\n+\n+    // CKeyID\n+    expected.clear();\n+    expected << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    result = GetScriptForDestination(pubkeys[0].GetID());\n+    BOOST_CHECK(result == expected);\n+\n+    // CScriptID\n+    CScript redeemScript(result);\n+    expected.clear();\n+    expected << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+    result = GetScriptForDestination(CScriptID(redeemScript));\n+    BOOST_CHECK(result == expected);\n+\n+    // CNoDestination\n+    expected.clear();\n+    result = GetScriptForDestination(CNoDestination());\n+    BOOST_CHECK(result == expected);\n+\n+    // GetScriptForRawPubKey\n+    expected.clear();\n+    expected << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+    result = GetScriptForRawPubKey(pubkeys[0]);\n+    BOOST_CHECK(result == expected);\n+\n+    // GetScriptForMultisig\n+    expected.clear();\n+    expected << OP_2 <<\n+        ToByteVector(pubkeys[0]) <<\n+        ToByteVector(pubkeys[1]) <<\n+        ToByteVector(pubkeys[2]) <<\n+        OP_3 << OP_CHECKMULTISIG;\n+    result = GetScriptForMultisig(2, std::vector<CPubKey>(pubkeys, pubkeys + 3));\n+    BOOST_CHECK(result == expected);\n+\n+    // GetScriptForWitness\n+    CScript witnessScript;\n+\n+    witnessScript << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+    expected.clear();\n+    expected << OP_0 << ToByteVector(pubkeys[0].GetID());\n+    result = GetScriptForWitness(witnessScript);\n+    BOOST_CHECK(result == expected);\n+\n+    witnessScript.clear();\n+    witnessScript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    result = GetScriptForWitness(witnessScript);\n+    BOOST_CHECK(result == expected);\n+\n+    witnessScript.clear();\n+    witnessScript << OP_1 << ToByteVector(pubkeys[0]) << OP_1 << OP_CHECKMULTISIG;\n+\n+    uint256 scriptHash;\n+    CSHA256().Write(&witnessScript[0], witnessScript.size())\n+        .Finalize(scriptHash.begin());\n+\n+    expected.clear();\n+    expected << OP_0 << ToByteVector(scriptHash);\n+    result = GetScriptForWitness(witnessScript);\n+    BOOST_CHECK(result == expected);\n+}\n+\n+BOOST_AUTO_TEST_CASE(script_standard_IsMine)\n+{\n+    CKey keys[2];\n+    CPubKey pubkeys[2];\n+    for (int i = 0; i < 2; i++) {\n+        keys[i].MakeNewKey(true);\n+        pubkeys[i] = keys[i].GetPubKey();\n+    }\n+\n+    CKey uncompressedKey;\n+    uncompressedKey.MakeNewKey(false);\n+    CPubKey uncompressedPubkey = uncompressedKey.GetPubKey();\n+\n+    CScript scriptPubKey;\n+    isminetype result;\n+    bool isInvalid;\n+\n+    // P2PK compressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey.clear();\n+        scriptPubKey << ToByteVector(pubkeys[0]) << OP_CHECKSIG;\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key\n+        keystore.AddKey(keys[0]);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2PK uncompressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey.clear();\n+        scriptPubKey << ToByteVector(uncompressedPubkey) << OP_CHECKSIG;\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key\n+        keystore.AddKey(uncompressedKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2PKH compressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key\n+        keystore.AddKey(keys[0]);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2PKH uncompressed\n+    {\n+        CBasicKeyStore keystore;\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_DUP << OP_HASH160 << ToByteVector(uncompressedPubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+\n+        // Keystore does not have key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key\n+        keystore.AddKey(uncompressedKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2SH\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript redeemScript;\n+        redeemScript << OP_DUP << OP_HASH160 << ToByteVector(pubkeys[0].GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+\n+        // Keystore does not have redeemScript or key\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has redeemScript but no key\n+        keystore.AddCScript(redeemScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has redeemScript and key\n+        keystore.AddKey(keys[0]);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2WPKH compressed\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(keys[0]);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_0 << ToByteVector(pubkeys[0].GetID());\n+\n+        // Keystore has key, but no P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key and P2SH redeemScript\n+        keystore.AddCScript(scriptPubKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2WPKH uncompressed\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(uncompressedKey);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_0 << ToByteVector(uncompressedPubkey.GetID());\n+\n+        // Keystore has key, but no P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has key and P2SH redeemScript\n+        keystore.AddCScript(scriptPubKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(isInvalid);\n+    }\n+\n+    // scriptPubKey multisig\n+    {\n+        CBasicKeyStore keystore;\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_2 <<\n+            ToByteVector(uncompressedPubkey) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        // Keystore does not have any keys\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has 1/2 keys\n+        keystore.AddKey(uncompressedKey);\n+\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has 2/2 keys\n+        keystore.AddKey(keys[1]);\n+\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2SH multisig\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(uncompressedKey);\n+        keystore.AddKey(keys[1]);\n+\n+        CScript redeemScript;\n+        redeemScript << OP_2 <<\n+            ToByteVector(uncompressedPubkey) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+\n+        // Keystore has no redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has redeemScript\n+        keystore.AddCScript(redeemScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2WSH multisig with compressed keys\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(keys[0]);\n+        keystore.AddKey(keys[1]);\n+\n+        CScript witnessScript;\n+        witnessScript << OP_2 <<\n+            ToByteVector(pubkeys[0]) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        uint256 scriptHash;\n+        CSHA256().Write(&witnessScript[0], witnessScript.size())\n+            .Finalize(scriptHash.begin());\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_0 << ToByteVector(scriptHash);\n+\n+        // Keystore has keys, but no witnessScript or P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys and witnessScript, but no P2SH redeemScript\n+        keystore.AddCScript(witnessScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys, witnessScript, P2SH redeemScript\n+        keystore.AddCScript(scriptPubKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // P2WSH multisig with uncompressed key\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(uncompressedKey);\n+        keystore.AddKey(keys[1]);\n+\n+        CScript witnessScript;\n+        witnessScript << OP_2 <<\n+            ToByteVector(uncompressedPubkey) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        uint256 scriptHash;\n+        CSHA256().Write(&witnessScript[0], witnessScript.size())\n+            .Finalize(scriptHash.begin());\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_0 << ToByteVector(scriptHash);\n+\n+        // Keystore has keys, but no witnessScript or P2SH redeemScript\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys and witnessScript, but no P2SH redeemScript\n+        keystore.AddCScript(witnessScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys, witnessScript, P2SH redeemScript\n+        keystore.AddCScript(scriptPubKey);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(isInvalid);\n+    }\n+\n+    // P2WSH multisig wrapped in P2SH\n+    {\n+        CBasicKeyStore keystore;\n+\n+        CScript witnessScript;\n+        witnessScript << OP_2 <<\n+            ToByteVector(pubkeys[0]) <<\n+            ToByteVector(pubkeys[1]) <<\n+            OP_2 << OP_CHECKMULTISIG;\n+\n+        uint256 scriptHash;\n+        CSHA256().Write(&witnessScript[0], witnessScript.size())\n+            .Finalize(scriptHash.begin());\n+\n+        CScript redeemScript;\n+        redeemScript << OP_0 << ToByteVector(scriptHash);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+\n+        // Keystore has no witnessScript, P2SH redeemScript, or keys\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has witnessScript and P2SH redeemScript, but no keys\n+        keystore.AddCScript(redeemScript);\n+        keystore.AddCScript(witnessScript);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+\n+        // Keystore has keys, witnessScript, P2SH redeemScript\n+        keystore.AddKey(keys[0]);\n+        keystore.AddKey(keys[1]);\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_SPENDABLE);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // OP_RETURN\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(keys[0]);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_RETURN << ToByteVector(pubkeys[0]);\n+\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+\n+    // Nonstandard\n+    {\n+        CBasicKeyStore keystore;\n+        keystore.AddKey(keys[0]);\n+\n+        scriptPubKey.clear();\n+        scriptPubKey << OP_9 << OP_ADD << OP_11 << OP_EQUAL;\n+\n+        result = IsMine(keystore, scriptPubKey, isInvalid);\n+        BOOST_CHECK_EQUAL(result, ISMINE_NO);\n+        BOOST_CHECK(!isInvalid);\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "194f62ca118357c756db76a7c7b555ab62782cf2",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -22,8 +22,6 @@\n #include \"rpc/register.h\"\n #include \"script/sigcache.h\"\n \n-#include \"test/testutil.h\"\n-\n #include <memory>\n \n uint256 insecure_rand_seed = GetRandHash();\n@@ -61,7 +59,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n \n         RegisterAllCoreRPCCommands(tableRPC);\n         ClearDatadirCache();\n-        pathTemp = GetTempPath() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(100000)));\n+        pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(100000)));\n         fs::create_directories(pathTemp);\n         gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n "
      },
      {
        "sha": "591d0bf30271240f9184ed472d04ab6c6096c851",
        "filename": "src/test/testutil.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939/src/test/testutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939/src/test/testutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.cpp?ref=fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
        "patch": "@@ -1,15 +0,0 @@\n-// Copyright (c) 2009-2016 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"testutil.h\"\n-\n-#ifdef WIN32\n-#include <shlobj.h>\n-#endif\n-\n-#include \"fs.h\"\n-\n-fs::path GetTempPath() {\n-    return fs::temp_directory_path();\n-}"
      },
      {
        "sha": "cbe784d6400b9dd4cc4339ae6803f9c1d2bb13fd",
        "filename": "src/test/testutil.h",
        "status": "removed",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939/src/test/testutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fb7b5293844ea6adc5dcf5ad0a0c5890b4495939/src/test/testutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/testutil.h?ref=fb7b5293844ea6adc5dcf5ad0a0c5890b4495939",
        "patch": "@@ -1,15 +0,0 @@\n-// Copyright (c) 2009-2016 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-/**\n- * Utility functions shared by unit tests\n- */\n-#ifndef BITCOIN_TEST_TESTUTIL_H\n-#define BITCOIN_TEST_TESTUTIL_H\n-\n-#include \"fs.h\"\n-\n-fs::path GetTempPath();\n-\n-#endif // BITCOIN_TEST_TESTUTIL_H"
      },
      {
        "sha": "2558bd017d6a210f4040e88ddf529220129e4b84",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -24,8 +24,8 @@ don't have test cases for.\n - Use a module-level docstring to describe what the test is testing, and how it\n   is testing it.\n - When subclassing the BitcoinTestFramwork, place overrides for the\n-  `__init__()`, and `setup_xxxx()` methods at the top of the subclass, then\n-  locally-defined helper methods, then the `run_test()` method.\n+  `set_test_params()`, `add_options()` and `setup_xxxx()` methods at the top of\n+  the subclass, then locally-defined helper methods, then the `run_test()` method.\n \n #### General test-writing advice\n \n@@ -36,7 +36,7 @@ don't have test cases for.\n - Avoid stop-starting the nodes multiple times during the test if possible. A\n   stop-start takes several seconds, so doing it several times blows up the\n   runtime of the test.\n-- Set the `self.setup_clean_chain` variable in `__init__()` to control whether\n+- Set the `self.setup_clean_chain` variable in `set_test_params()` to control whether\n   or not to use the cached data directories. The cached data directories\n   contain a 200-block pre-mined blockchain and wallets for four nodes. Each node\n   has 25 mature blocks (25x50=1250 BTC) in its wallet."
      },
      {
        "sha": "e8dbc864698aa3ead772fe78da08d5ef74bcc595",
        "filename": "test/functional/abandonconflict.py",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/abandonconflict.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -14,10 +14,8 @@\n from test_framework.util import *\n \n class AbandonConflictTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n     def run_test(self):\n@@ -74,7 +72,7 @@ def run_test(self):\n         # Restart the node with a higher min relay fee so the parent tx is no longer in mempool\n         # TODO: redo with eviction\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n+        self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n \n         # Verify txs no longer in either node's mempool\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n@@ -101,7 +99,7 @@ def run_test(self):\n \n         # Verify that even with a low min relay fee, the tx is not reaccepted from wallet on startup once abandoned\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"])\n+        self.start_node(0, extra_args=[\"-minrelaytxfee=0.00001\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         assert_equal(self.nodes[0].getbalance(), balance)\n \n@@ -121,7 +119,7 @@ def run_test(self):\n \n         # Remove using high relay fee again\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.0001\"])\n+        self.start_node(0, extra_args=[\"-minrelaytxfee=0.0001\"])\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n         newbalance = self.nodes[0].getbalance()\n         assert_equal(newbalance, balance - Decimal(\"24.9996\"))"
      },
      {
        "sha": "65685c48b7eef7e314375a751964057b2e3f1bdf",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -54,20 +54,22 @@ def send_header_for_blocks(self, new_blocks):\n         self.send_message(headers_message)\n \n class AssumeValidTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n     def setup_network(self):\n+        self.add_nodes(3)\n         # Start node0. We don't start the other nodes yet since\n         # we need to pre-mine a block with an invalid transaction\n         # signature so we can pass in the block hash as assumevalid.\n-        self.nodes = [self.start_node(0, self.options.tmpdir)]\n+        self.start_node(0)\n \n     def send_blocks_until_disconnected(self, node):\n         \"\"\"Keep sending blocks to the node until we're disconnected.\"\"\"\n         for i in range(len(self.blocks)):\n+            if not node.connection:\n+                break\n             try:\n                 node.send_message(msg_block(self.blocks[i]))\n             except IOError as e:\n@@ -162,15 +164,13 @@ def run_test(self):\n             height += 1\n \n         # Start node1 and node2 with assumevalid so they accept a block with a bad signature.\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                     [\"-assumevalid=\" + hex(block102.sha256)]))\n+        self.start_node(1, extra_args=[\"-assumevalid=\" + hex(block102.sha256)])\n         node1 = BaseNode()  # connects to node1\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], node1))\n         node1.add_connection(connections[1])\n         node1.wait_for_verack()\n \n-        self.nodes.append(self.start_node(2, self.options.tmpdir,\n-                                     [\"-assumevalid=\" + hex(block102.sha256)]))\n+        self.start_node(2, extra_args=[\"-assumevalid=\" + hex(block102.sha256)])\n         node2 = BaseNode()  # connects to node2\n         connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], node2))\n         node2.add_connection(connections[2])"
      },
      {
        "sha": "2cd6df6e37a823a03aa4f42c9f2105f7608e4392",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -60,9 +60,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     return tx\n \n class BIP65Test(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-promiscuousmempoolflags=1', '-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n@@ -109,7 +107,7 @@ def run_test(self):\n         node0.send_and_ping(msg_block(block))\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        assert wait_until(lambda: \"reject\" in node0.last_message.keys())\n+        wait_until(lambda: \"reject\" in node0.last_message.keys(), lock=mininode_lock)\n         with mininode_lock:\n             assert_equal(node0.last_message[\"reject\"].code, REJECT_OBSOLETE)\n             assert_equal(node0.last_message[\"reject\"].reason, b'bad-version(0x00000003)')\n@@ -138,7 +136,7 @@ def run_test(self):\n         node0.send_and_ping(msg_block(block))\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        assert wait_until (lambda: \"reject\" in node0.last_message.keys())\n+        wait_until(lambda: \"reject\" in node0.last_message.keys(), lock=mininode_lock)\n         with mininode_lock:\n             assert node0.last_message[\"reject\"].code in [REJECT_INVALID, REJECT_NONSTANDARD]\n             assert_equal(node0.last_message[\"reject\"].data, block.sha256)"
      },
      {
        "sha": "7e6a4f44086696eb2f9f4811bd4ee8832abf64a2",
        "filename": "test/functional/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-112-113-p2p.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -92,9 +92,9 @@ def all_rlt_txs(txarray):\n     return txs\n \n class BIP68_112_113Test(ComparisonTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4']]\n \n     def run_test(self):"
      },
      {
        "sha": "1391b9ed466f15d55804ae02bf4ad9339d4e4fd6",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -17,10 +17,8 @@\n NOT_FINAL_ERROR = \"64: non-BIP68-final\"\n \n class BIP68Test(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[], [\"-acceptnonstdtxn=0\"]]\n \n     def run_test(self):\n@@ -371,11 +369,14 @@ def test_bip68_not_consensus(self):\n \n     def activateCSV(self):\n         # activation should happen at block height 432 (3 periods)\n+        # getblockchaininfo will show CSV as active at block 431 (144 * 3 -1) since it's returning whether CSV is active for the next block.\n         min_activation_height = 432\n         height = self.nodes[0].getblockcount()\n-        assert(height < min_activation_height)\n-        self.nodes[0].generate(min_activation_height-height)\n-        assert(get_bip9_status(self.nodes[0], 'csv')['status'] == 'active')\n+        assert_greater_than(min_activation_height - height, 2)\n+        self.nodes[0].generate(min_activation_height - height - 2)\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"locked_in\")\n+        self.nodes[0].generate(1)\n+        assert_equal(get_bip9_status(self.nodes[0], 'csv')['status'], \"active\")\n         sync_blocks(self.nodes)\n \n     # Use self.nodes[1] to test that version 2 transactions are standard."
      },
      {
        "sha": "904789301a1088d0e996c7fc0201f8a04e01a238",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -28,11 +28,10 @@\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n \n class BIP9SoftForksTest(ComparisonTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-whitelist=127.0.0.1']]\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n         self.test = TestManager(self, self.options.tmpdir)\n@@ -241,6 +240,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         # Restart all\n         self.test.clear_all_connections()\n         self.stop_nodes()\n+        self.nodes = []\n         shutil.rmtree(self.options.tmpdir + \"/node0\")\n         self.setup_chain()\n         self.setup_network()"
      },
      {
        "sha": "c620d3e155d14b80aa14feee4f0fd6e39feb6efa",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -48,9 +48,7 @@ def create_transaction(node, coinbase, to_address, amount):\n     return tx\n \n class BIP66Test(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-promiscuousmempoolflags=1', '-whitelist=127.0.0.1']]\n         self.setup_clean_chain = True\n@@ -98,7 +96,7 @@ def run_test(self):\n         node0.send_and_ping(msg_block(block))\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        assert wait_until(lambda: \"reject\" in node0.last_message.keys())\n+        wait_until(lambda: \"reject\" in node0.last_message.keys(), lock=mininode_lock)\n         with mininode_lock:\n             assert_equal(node0.last_message[\"reject\"].code, REJECT_OBSOLETE)\n             assert_equal(node0.last_message[\"reject\"].reason, b'bad-version(0x00000002)')\n@@ -128,7 +126,7 @@ def run_test(self):\n         node0.send_and_ping(msg_block(block))\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), tip)\n \n-        assert wait_until (lambda: \"reject\" in node0.last_message.keys())\n+        wait_until(lambda: \"reject\" in node0.last_message.keys(), lock=mininode_lock)\n         with mininode_lock:\n             # We can receive different reject messages depending on whether\n             # bitcoind is running with multiple script check threads. If script"
      },
      {
        "sha": "7acfede3f7a5f3d8087c050c38ec57ba7211cb4b",
        "filename": "test/functional/bitcoin_cli.py",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bitcoin_cli.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -0,0 +1,25 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test bitcoin-cli\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n+\n+class TestBitcoinCli(BitcoinTestFramework):\n+\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def run_test(self):\n+        \"\"\"Main test logic\"\"\"\n+\n+        self.log.info(\"Compare responses from getinfo RPC and `bitcoin-cli getinfo`\")\n+        cli_get_info = self.nodes[0].cli.getinfo()\n+        rpc_get_info = self.nodes[0].getinfo()\n+\n+        assert_equal(cli_get_info, rpc_get_info)\n+\n+if __name__ == '__main__':\n+    TestBitcoinCli().main()"
      },
      {
        "sha": "50be9262e4f9cf9b95a2c397c11c55dc5905d817",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -21,7 +21,7 @@\n import http.client\n import subprocess\n \n-from test_framework.test_framework import (BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT)\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises,\n@@ -30,12 +30,8 @@\n     assert_is_hash_string,\n )\n \n-\n class BlockchainTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-stopatheight=207']]\n \n@@ -139,14 +135,14 @@ def _test_stopatheight(self):\n         self.nodes[0].generate(6)\n         assert_equal(self.nodes[0].getblockcount(), 206)\n         self.log.debug('Node should not stop at this height')\n-        assert_raises(subprocess.TimeoutExpired, lambda: self.bitcoind_processes[0].wait(timeout=3))\n+        assert_raises(subprocess.TimeoutExpired, lambda: self.nodes[0].process.wait(timeout=3))\n         try:\n             self.nodes[0].generate(1)\n         except (ConnectionError, http.client.BadStatusLine):\n             pass  # The node already shut down before response\n         self.log.debug('Node should stop at this height...')\n-        self.bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.nodes[0].wait_until_stopped()\n+        self.start_node(0)\n         assert_equal(self.nodes[0].getblockcount(), 207)\n \n "
      },
      {
        "sha": "ede0df29d8d7befa3c9bc15f3abcaec32234f629",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 6,
        "deletions": 11,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -30,26 +30,21 @@\n \n \n class BumpFeeTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n+        self.extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]\n+                           for i in range(self.num_nodes)]\n \n-    def setup_network(self, split=False):\n-        extra_args = [[\"-prematurewitness\", \"-walletprematurewitness\", \"-walletrbf={}\".format(i)]\n-                      for i in range(self.num_nodes)]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n-\n+    def run_test(self):\n         # Encrypt wallet for test_locked_wallet_fails test\n-        self.nodes[1].encryptwallet(WALLET_PASSPHRASE)\n-        self.bitcoind_processes[1].wait()\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, extra_args[1])\n+        self.nodes[1].node_encrypt_wallet(WALLET_PASSPHRASE)\n+        self.start_node(1)\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()\n \n-    def run_test(self):\n         peer_node, rbf_node = self.nodes\n         rbf_node_address = rbf_node.getnewaddress()\n "
      },
      {
        "sha": "7d4d1a529b762b95075cfc2f24c64c53908a6c24",
        "filename": "test/functional/create_cache.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/create_cache.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/create_cache.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/create_cache.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -12,13 +12,10 @@\n from test_framework.test_framework import BitcoinTestFramework\n \n class CreateCache(BitcoinTestFramework):\n+    # Test network and test nodes are not required:\n \n-    def __init__(self):\n-        super().__init__()\n-\n-        # Test network and test nodes are not required:\n+    def set_test_params(self):\n         self.num_nodes = 0\n-        self.nodes = []\n \n     def setup_network(self):\n         pass"
      },
      {
        "sha": "24b9765b4e3773ab8830f7950da1adbb15fad601",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -43,8 +43,7 @@\n     pass\n \n class ChainstateWriteCrashTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 4\n         self.setup_clean_chain = False\n \n@@ -64,7 +63,9 @@ def __init__(self):\n         self.extra_args = [self.node0_args, self.node1_args, self.node2_args, self.node3_args]\n \n     def setup_network(self):\n-        self.setup_nodes()\n+        # Need a bit of extra time for the nodes to start up for this test\n+        self.add_nodes(self.num_nodes, extra_args=self.extra_args, timewait=90)\n+        self.start_nodes()\n         # Leave them unconnected, we'll use submitblock directly in this test\n \n     def restart_node(self, node_index, expected_tip):\n@@ -74,10 +75,10 @@ def restart_node(self, node_index, expected_tip):\n         after 60 seconds. Returns the utxo hash of the given node.\"\"\"\n \n         time_start = time.time()\n-        while time.time() - time_start < 60:\n+        while time.time() - time_start < 120:\n             try:\n                 # Any of these RPC calls could throw due to node crash\n-                self.nodes[node_index] = self.start_node(node_index, self.options.tmpdir, self.extra_args[node_index])\n+                self.start_node(node_index)\n                 self.nodes[node_index].waitforblock(expected_tip)\n                 utxo_hash = self.nodes[node_index].gettxoutsetinfo()['hash_serialized_2']\n                 return utxo_hash"
      },
      {
        "sha": "6611da8831472cf45310115009a63c07e42e4199",
        "filename": "test/functional/decodescript.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/decodescript.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -10,9 +10,7 @@\n from io import BytesIO\n \n class DecodeScriptTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "c1d37963bc60527603fe2fffeaa704a40c9a3f4c",
        "filename": "test/functional/disablewallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disablewallet.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -11,11 +11,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n class DisableWalletTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-disablewallet\"]]"
      },
      {
        "sha": "a6445b9b35e42554c62c76471275e399d040baed",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -5,26 +5,25 @@\n \"\"\"Test node disconnect and ban behavior\"\"\"\n import time\n \n-from test_framework.mininode import wait_until\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal,\n-                                 assert_raises_jsonrpc,\n-                                 connect_nodes_bi)\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    connect_nodes_bi,\n+    wait_until,\n+)\n \n class DisconnectBanTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n \n     def run_test(self):\n         self.log.info(\"Test setban and listbanned RPCs\")\n \n         self.log.info(\"setban: successfully ban single IP address\")\n         assert_equal(len(self.nodes[1].getpeerinfo()), 2)  # node1 should have 2 connections to node0 at this point\n         self.nodes[1].setban(\"127.0.0.1\", \"add\")\n-        assert wait_until(lambda: len(self.nodes[1].getpeerinfo()) == 0, timeout=10)\n+        wait_until(lambda: len(self.nodes[1].getpeerinfo()) == 0, timeout=10)\n         assert_equal(len(self.nodes[1].getpeerinfo()), 0)  # all nodes must be disconnected at this point\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n \n@@ -66,8 +65,8 @@ def run_test(self):\n         assert_equal(len(self.nodes[1].listbanned()), 3)\n \n         self.stop_node(1)\n+        self.start_node(1)\n \n-        self.nodes[1] = self.start_node(1, self.options.tmpdir)\n         listAfterShutdown = self.nodes[1].listbanned()\n         assert_equal(\"127.0.0.0/24\", listAfterShutdown[0]['address'])\n         assert_equal(\"127.0.0.0/32\", listAfterShutdown[1]['address'])\n@@ -90,7 +89,7 @@ def run_test(self):\n         self.log.info(\"disconnectnode: successfully disconnect node by address\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']\n         self.nodes[0].disconnectnode(address=address1)\n-        assert wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n         assert not [node for node in self.nodes[0].getpeerinfo() if node['addr'] == address1]\n \n         self.log.info(\"disconnectnode: successfully reconnect node\")\n@@ -101,7 +100,7 @@ def run_test(self):\n         self.log.info(\"disconnectnode: successfully disconnect node by node id\")\n         id1 = self.nodes[0].getpeerinfo()[0]['id']\n         self.nodes[0].disconnectnode(nodeid=id1)\n-        assert wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 1, timeout=10)\n         assert not [node for node in self.nodes[0].getpeerinfo() if node['id'] == id1]\n \n if __name__ == '__main__':"
      },
      {
        "sha": "228e1505983c6411ce53d43c4a9fb7c472284ee9",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 7,
        "deletions": 9,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -23,13 +23,13 @@\n     mininode_lock,\n     msg_block,\n     msg_getdata,\n-    wait_until,\n )\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     connect_nodes,\n     p2p_port,\n+    wait_until,\n )\n \n # NodeConnCB is a class containing callbacks to be executed when a P2P\n@@ -73,21 +73,19 @@ def custom_function():\n class ExampleTest(BitcoinTestFramework):\n     # Each functional test is a subclass of the BitcoinTestFramework class.\n \n-    # Override the __init__(), add_options(), setup_chain(), setup_network()\n+    # Override the set_test_params(), add_options(), setup_chain(), setup_network()\n     # and setup_nodes() methods to customize the test setup as required.\n \n-    def __init__(self):\n-        \"\"\"Initialize the test\n+    def set_test_params(self):\n+        \"\"\"Override test parameters for your individual test.\n \n-        Call super().__init__() first, and then override any test parameters\n-        for your individual test.\"\"\"\n-        super().__init__()\n+        This method must be overridden and num_nodes must be exlicitly set.\"\"\"\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         # Use self.extra_args to change command-line arguments for the nodes\n         self.extra_args = [[], [\"-logips\"], []]\n \n-        # self.log.info(\"I've finished __init__\")  # Oops! Can't run self.log before run_test()\n+        # self.log.info(\"I've finished set_test_params\")  # Oops! Can't run self.log before run_test()\n \n     # Use add_options() to add specific command-line options for your test.\n     # In practice this is not used very much, since the tests are mostly written\n@@ -209,7 +207,7 @@ def run_test(self):\n \n         # wait_until() will loop until a predicate condition is met. Use it to test properties of the\n         # NodeConnCB objects.\n-        assert wait_until(lambda: sorted(blocks) == sorted(list(node2.block_receive_map.keys())), timeout=5)\n+        wait_until(lambda: sorted(blocks) == sorted(list(node2.block_receive_map.keys())), timeout=5, lock=mininode_lock)\n \n         self.log.info(\"Check that each block was received only once\")\n         # The network thread uses a global lock on data access to the NodeConn objects when sending and receiving"
      },
      {
        "sha": "afcad1f9cc3fa055cfafc2505b10d28cdacb932f",
        "filename": "test/functional/forknotify.py",
        "status": "modified",
        "additions": 4,
        "deletions": 14,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -7,28 +7,18 @@\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n \n class ForkNotifyTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n \n     def setup_network(self):\n-        self.nodes = []\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n         with open(self.alert_filename, 'w', encoding='utf8'):\n             pass  # Just open then close to create zero-length file\n-        self.nodes.append(self.start_node(0, self.options.tmpdir,\n-                            [\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]))\n-        # Node1 mines block.version=211 blocks\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                [\"-blockversion=211\"]))\n-        connect_nodes(self.nodes[1], 0)\n-\n-        self.sync_all()\n+        self.extra_args = [[\"-blockversion=2\", \"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"],\n+                           [\"-blockversion=211\"]]\n+        super().setup_network()\n \n     def run_test(self):\n         # Mine 51 up-version blocks"
      },
      {
        "sha": "42d95dd5204e646369ed04f3cf5967830b4cca44",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the fundrawtransaction RPC.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n \n@@ -14,13 +14,10 @@ def get_unspent(listunspent, amount):\n             return utx\n     raise AssertionError('Could not find unspent with amount={}'.format(amount))\n \n-\n class RawTransactionsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = True\n+    def set_test_params(self):\n         self.num_nodes = 4\n+        self.setup_clean_chain = True\n \n     def setup_network(self, split=False):\n         self.setup_nodes()\n@@ -449,12 +446,11 @@ def run_test(self):\n         ############################################################\n         # locked wallet test\n         self.stop_node(0)\n+        self.nodes[1].node_encrypt_wallet(\"test\")\n         self.stop_node(2)\n         self.stop_node(3)\n-        self.nodes[1].encryptwallet(\"test\")\n-        self.bitcoind_processes[1].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n \n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.start_nodes()\n         # This test is not meant to test fee estimation and we'd like\n         # to be sure all txs are sent at a consistent desired feerate\n         for node in self.nodes:"
      },
      {
        "sha": "89768bd2fb530ad31addf78c4ca8954c35dfdc45",
        "filename": "test/functional/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_longpoll.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -17,16 +17,14 @@ def __init__(self, node):\n         self.longpollid = templat['longpollid']\n         # create a new connection to the node, we can't use the same\n         # connection from two threads\n-        self.node = get_rpc_proxy(node.url, 1, timeout=600)\n+        self.node = get_rpc_proxy(node.url, 1, timeout=600, coveragedir=node.coverage_dir)\n \n     def run(self):\n         self.node.getblocktemplate({'longpollid':self.longpollid})\n \n class GetBlockTemplateLPTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n+        self.num_nodes = 2\n \n     def run_test(self):\n         self.log.info(\"Warning: this test will take about 70 seconds in the best case. Be patient.\")"
      },
      {
        "sha": "21b67bfc64f9c3c33b79f47a912f94e6fa7da03d",
        "filename": "test/functional/getchaintips.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getchaintips.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -14,13 +14,10 @@\n from test_framework.util import assert_equal\n \n class GetChainTipsTest (BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 4\n-        self.setup_clean_chain = False\n \n     def run_test (self):\n-\n         tips = self.nodes[0].getchaintips ()\n         assert_equal (len (tips), 1)\n         assert_equal (tips[0]['branchlen'], 0)"
      },
      {
        "sha": "c7682cb49df422df050939a9cb729ecf528f5811",
        "filename": "test/functional/httpbasics.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/httpbasics.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -11,10 +11,8 @@\n import urllib.parse\n \n class HTTPBasicsTest (BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 3\n-        self.setup_clean_chain = False\n \n     def setup_network(self):\n         self.setup_nodes()"
      },
      {
        "sha": "02d7428120bea956e44c148822d35cba64fa4b14",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -111,8 +111,7 @@ def check(self, txid=None, amount=None, confirmations=None):\n \n \n class ImportRescanTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2 + len(IMPORT_NODES)\n \n     def setup_network(self):\n@@ -121,7 +120,8 @@ def setup_network(self):\n             if import_node.prune:\n                 extra_args[i] += [\"-prune=1\"]\n \n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.add_nodes(self.num_nodes, extra_args)\n+        self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n "
      },
      {
        "sha": "4c519f40d54e3219af54a7c4e18b1e71164ed654",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -7,8 +7,7 @@\n from test_framework.util import *\n \n class ImportMultiTest (BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n \n@@ -429,7 +428,7 @@ def run_test (self):\n \n         # restart nodes to check for proper serialization/deserialization of watch only address\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(2, self.options.tmpdir)\n+        self.start_nodes()\n         address_assert = self.nodes[1].validateaddress(watchonly_address)\n         assert_equal(address_assert['iswatchonly'], True)\n         assert_equal(address_assert['ismine'], False)"
      },
      {
        "sha": "df90e9ec177ba30ac682a759771b9430acea7979",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -6,11 +6,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n-\n class ImportPrunedFundsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "dd3daf1e07bda1c55e8839215e7ad519309b322c",
        "filename": "test/functional/invalidateblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidateblock.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -8,9 +8,7 @@\n from test_framework.util import *\n \n class InvalidateTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "9f44b44927c0cb3d6331bc9340bfa5490d3e24eb",
        "filename": "test/functional/invalidblockrequest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidblockrequest.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -23,9 +23,9 @@ class InvalidBlockRequestTest(ComparisonTestFramework):\n \n     ''' Can either run this test as 1 node with expected answers, or two and compare them. \n         Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "a22bd8f8cdc3db99c95a8b118f1504e898f30bd1",
        "filename": "test/functional/invalidtxrequest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidtxrequest.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -19,9 +19,9 @@ class InvalidTxRequestTest(ComparisonTestFramework):\n \n     ''' Can either run this test as 1 node with expected answers, or two and compare them. \n         Change the \"outcome\" variable from each TestInstance object to only do the comparison. '''\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "8302e3ef606544c01849e1f64c2c66c6ccc1d3e3",
        "filename": "test/functional/keypool-topup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/keypool-topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/keypool-topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-topup.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -20,8 +20,7 @@\n )\n \n class KeypoolRestoreTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=100', '-keypoolmin=20']]\n@@ -35,7 +34,7 @@ def run_test(self):\n         self.stop_node(1)\n \n         shutil.copyfile(self.tmpdir + \"/node1/regtest/wallet.dat\", self.tmpdir + \"/wallet.bak\")\n-        self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n+        self.start_node(1, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         self.log.info(\"Generate keys for wallet\")\n@@ -61,7 +60,7 @@ def run_test(self):\n \n         self.log.info(\"Verify keypool is restored and balance is correct\")\n \n-        self.nodes[1] = self.start_node(1, self.tmpdir, self.extra_args[1])\n+        self.start_node(1, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n         self.sync_all()\n "
      },
      {
        "sha": "b823ca63bb80c35c3a6630a9b47533c67ecc7022",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -8,6 +8,8 @@\n from test_framework.util import *\n \n class KeyPoolTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n \n     def run_test(self):\n         nodes = self.nodes\n@@ -17,10 +19,9 @@ def run_test(self):\n         assert(addr_before_encrypting_data['hdmasterkeyid'] == wallet_info_old['hdmasterkeyid'])\n         \n         # Encrypt wallet and wait to terminate\n-        nodes[0].encryptwallet('test')\n-        self.bitcoind_processes[0].wait()\n+        nodes[0].node_encrypt_wallet('test')\n         # Restart node 0\n-        nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0)\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].validateaddress(addr)\n@@ -79,10 +80,5 @@ def run_test(self):\n         assert_equal(wi['keypoolsize_hd_internal'], 100)\n         assert_equal(wi['keypoolsize'], 100)\n \n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n-        self.num_nodes = 1\n-\n if __name__ == '__main__':\n     KeyPoolTest().main()"
      },
      {
        "sha": "6f428388ecbbd91bf9dfc27ef0822b8b98cd41f3",
        "filename": "test/functional/listsinceblock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listsinceblock.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -8,11 +8,9 @@\n from test_framework.util import assert_equal\n \n class ListSinceBlockTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = True\n+    def set_test_params(self):\n         self.num_nodes = 4\n+        self.setup_clean_chain = True\n \n     def run_test(self):\n         self.nodes[2].generate(101)"
      },
      {
        "sha": "e4522cc3b5c7cb9878edf04ed8dab99ba0387d80",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -16,15 +16,9 @@ def txFromHex(hexstring):\n     return tx\n \n class ListTransactionsTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n-    def setup_nodes(self):\n-        #This test requires mocktime\n+    def set_test_params(self):\n+        self.num_nodes = 2\n         self.enable_mocktime()\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         # Simple send, 0 to 1:"
      },
      {
        "sha": "1f402798e7e01e05a60e5565d77867ea3101efec",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -31,8 +31,7 @@ def on_block(self, conn, message):\n \n class MaxUploadTest(BitcoinTestFramework):\n  \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxuploadtarget=800\", \"-blockmaxsize=999000\"]]\n@@ -147,7 +146,7 @@ def run_test(self):\n         #stop and start node 0 with 1MB maxuploadtarget, whitelist 127.0.0.1\n         self.log.info(\"Restarting nodes with -whitelist=127.0.0.1\")\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n+        self.start_node(0, [\"-whitelist=127.0.0.1\", \"-maxuploadtarget=1\", \"-blockmaxsize=999000\"])\n \n         #recreate/reconnect a test node\n         test_nodes = [TestNode()]"
      },
      {
        "sha": "e24dc5a464b366004a01470a4e6c73533131388f",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -8,9 +8,7 @@\n from test_framework.util import *\n \n class MempoolLimitTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-maxmempool=5\", \"-spendzeroconfchange=0\"]]"
      },
      {
        "sha": "2dedadf8ce4a2b6f5b81289ff9dedbccff032335",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -12,10 +12,8 @@\n MAX_DESCENDANTS = 25\n \n class MempoolPackagesTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n \n     # Build a transaction that spends parent_txid:vout"
      },
      {
        "sha": "01f65b137363dffd6fd98e7c177d8460aa079f6e",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 7,
        "deletions": 15,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -32,17 +32,12 @@\n \"\"\"\n import time\n \n-from test_framework.mininode import wait_until\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n class MempoolPersistTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        # We need 3 nodes for this test. Node1 does not have a persistent mempool.\n+    def set_test_params(self):\n         self.num_nodes = 3\n-        self.setup_clean_chain = False\n         self.extra_args = [[], [\"-persistmempool=0\"], []]\n \n     def run_test(self):\n@@ -64,27 +59,24 @@ def run_test(self):\n \n         self.log.debug(\"Stop-start node0 and node1. Verify that node0 has the transactions in its mempool and node1 does not.\")\n         self.stop_nodes()\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir))\n-        self.nodes.append(self.start_node(1, self.options.tmpdir))\n+        self.start_node(0)\n+        self.start_node(1)\n         # Give bitcoind a second to reload the mempool\n         time.sleep(1)\n-        assert wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n+        wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n         assert_equal(len(self.nodes[1].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0 with -persistmempool=0. Verify that it doesn't load its mempool.dat file.\")\n         self.stop_nodes()\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-persistmempool=0\"]))\n+        self.start_node(0, extra_args=[\"-persistmempool=0\"])\n         # Give bitcoind a second to reload the mempool\n         time.sleep(1)\n         assert_equal(len(self.nodes[0].getrawmempool()), 0)\n \n         self.log.debug(\"Stop-start node0. Verify that it has the transactions in its mempool.\")\n         self.stop_nodes()\n-        self.nodes = []\n-        self.nodes.append(self.start_node(0, self.options.tmpdir))\n-        assert wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n+        self.start_node(0)\n+        wait_until(lambda: len(self.nodes[0].getrawmempool()) == 5)\n \n if __name__ == '__main__':\n     MempoolPersistTest().main()"
      },
      {
        "sha": "7dfddd3230df1e32a7e5b1f35b4db985197e888b",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -13,10 +13,8 @@\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-checkmempool\"]] * 2\n \n     alert_filename = None  # Set by setup_network"
      },
      {
        "sha": "1263c9306b6377d542db0302600a4a0ddc57e507",
        "filename": "test/functional/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect_test.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -9,12 +9,8 @@\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n-        self.setup_clean_chain = False\n-        # Just need one node for this test\n         self.extra_args = [[\"-checkmempool\"]]\n \n     def run_test(self):"
      },
      {
        "sha": "58ccd3e3734f6d9f42d67bbd029bdaeeeb19eca8",
        "filename": "test/functional/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spendcoinbase.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -17,11 +17,8 @@\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolSpendCoinbaseTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n-        self.setup_clean_chain = False\n         self.extra_args = [[\"-checkmempool\"]]\n \n     def run_test(self):"
      },
      {
        "sha": "a58334b2a540e7cf693d0c521040259de33efd32",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -8,11 +8,9 @@\n from test_framework.util import *\n \n class MerkleBlockTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = True\n+    def set_test_params(self):\n         self.num_nodes = 4\n+        self.setup_clean_chain = True\n         # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n         self.extra_args = [[], [], [], [\"-txindex\"]]\n "
      },
      {
        "sha": "93f98388960f5d83d5bee6446004f2025ced0d26",
        "filename": "test/functional/mining.py",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -4,16 +4,18 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mining RPCs\n \n+- getmininginfo\n - getblocktemplate proposal mode\n - submitblock\"\"\"\n \n-from binascii import b2a_hex\n import copy\n+from binascii import b2a_hex\n+from decimal import Decimal\n \n from test_framework.blocktools import create_coinbase\n-from test_framework.test_framework import BitcoinTestFramework\n from test_framework.mininode import CBlock\n-from test_framework.util import *\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n@@ -25,14 +27,24 @@ def assert_template(node, block, expect, rehash=True):\n     assert_equal(rsp, expect)\n \n class MiningTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n \n     def run_test(self):\n         node = self.nodes[0]\n+\n+        self.log.info('getmininginfo')\n+        mining_info = node.getmininginfo()\n+        assert_equal(mining_info['blocks'], 200)\n+        assert_equal(mining_info['chain'], 'regtest')\n+        assert_equal(mining_info['currentblocksize'], 0)\n+        assert_equal(mining_info['currentblocktx'], 0)\n+        assert_equal(mining_info['currentblockweight'], 0)\n+        assert_equal(mining_info['difficulty'], Decimal('4.656542373906925E-10'))\n+        assert_equal(mining_info['networkhashps'], Decimal('0.003333333333333334'))\n+        assert_equal(mining_info['pooledtx'], 0)\n+\n         # Mine a block to leave initial block download\n         node.generate(1)\n         tmpl = node.getblocktemplate()"
      },
      {
        "sha": "a2b346f27429acc9712591b6c167164345af00a7",
        "filename": "test/functional/multi_rpc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multi_rpc.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -12,10 +12,7 @@\n import urllib.parse\n \n class HTTPBasicsTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 2\n \n     def setup_chain(self):"
      },
      {
        "sha": "b4e15a332219c36c81df953885b96db436461504",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -12,34 +12,38 @@\n from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n class MultiWalletTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [['-wallet=w1', '-wallet=w2', '-wallet=w3']]\n \n     def run_test(self):\n+        assert_equal(set(self.nodes[0].listwallets()), {\"w1\", \"w2\", \"w3\"})\n+\n         self.stop_node(0)\n \n         # should not initialize if there are duplicate wallets\n-        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n+        self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n \n         # should not initialize if wallet file is a directory\n         os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w11'))\n-        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n+        self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n \n         # should not initialize if wallet file is a symlink\n         os.symlink(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w1'), os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w12'))\n-        self.assert_start_raises_init_error(0, self.options.tmpdir, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n+        self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n \n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n+        self.start_node(0, self.extra_args[0])\n+\n+        w1 = self.nodes[0].get_wallet_rpc(\"w1\")\n+        w2 = self.nodes[0].get_wallet_rpc(\"w2\")\n+        w3 = self.nodes[0].get_wallet_rpc(\"w3\")\n+        wallet_bad = self.nodes[0].get_wallet_rpc(\"bad\")\n \n-        w1 = self.nodes[0] / \"wallet/w1\"\n         w1.generate(1)\n \n         # accessing invalid wallet fails\n-        assert_raises_jsonrpc(-18, \"Requested wallet does not exist or is not loaded\", (self.nodes[0] / \"wallet/bad\").getwalletinfo)\n+        assert_raises_jsonrpc(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n \n         # accessing wallet RPC without using wallet endpoint fails\n         assert_raises_jsonrpc(-19, \"Wallet file not specified\", self.nodes[0].getwalletinfo)\n@@ -50,14 +54,12 @@ def run_test(self):\n         w1_name = w1_info['walletname']\n         assert_equal(w1_name, \"w1\")\n \n-        # check w1 wallet balance\n-        w2 = self.nodes[0] / \"wallet/w2\"\n+        # check w2 wallet balance\n         w2_info = w2.getwalletinfo()\n         assert_equal(w2_info['immature_balance'], 0)\n         w2_name = w2_info['walletname']\n         assert_equal(w2_name, \"w2\")\n \n-        w3 = self.nodes[0] / \"wallet/w3\"\n         w3_name = w3.getwalletinfo()['walletname']\n         assert_equal(w3_name, \"w3\")\n "
      },
      {
        "sha": "37ea6824d570e82ddc5656a681a230b08f91f669",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -17,10 +17,8 @@\n     p2p_port,\n )\n \n-\n class NetTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "60d0d876df70f452e443ba3ecf235e0fd256345d",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -37,8 +37,7 @@ def trueDummy(tx):\n \n class NULLDUMMYTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n         self.extra_args = [['-whitelist=127.0.0.1', '-walletprematurewitness']]"
      },
      {
        "sha": "293bc055393ea1539eb9ea6508128d5fc833f0a3",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -60,8 +60,7 @@ def add_options(self, parser):\n                           default=os.getenv(\"BITCOIND\", \"bitcoind\"),\n                           help=\"bitcoind binary to test\")\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[], [\"-whitelist=127.0.0.1\"]]"
      },
      {
        "sha": "9c91c0045307fbeeba242d3134348f4357613515",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 17,
        "deletions": 33,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -70,31 +70,26 @@ def send_header_for_blocks(self, new_blocks):\n     def request_headers_and_sync(self, locator, hashstop=0):\n         self.clear_block_announcement()\n         self.get_headers(locator, hashstop)\n-        assert wait_until(self.received_block_announcement, timeout=30)\n+        wait_until(self.received_block_announcement, timeout=30, lock=mininode_lock)\n         self.clear_block_announcement()\n \n     # Block until a block announcement for a particular block hash is\n     # received.\n     def wait_for_block_announcement(self, block_hash, timeout=30):\n         def received_hash():\n             return (block_hash in self.announced_blockhashes)\n-        return wait_until(received_hash, timeout=timeout)\n+        wait_until(received_hash, timeout=timeout, lock=mininode_lock)\n \n     def send_await_disconnect(self, message, timeout=30):\n         \"\"\"Sends a message to the node and wait for disconnect.\n \n         This is used when we want to send a message into the node that we expect\n         will get us disconnected, eg an invalid block.\"\"\"\n         self.send_message(message)\n-        success = wait_until(lambda: not self.connected, timeout=timeout)\n-        if not success:\n-            logger.error(\"send_await_disconnect failed!\")\n-            raise AssertionError(\"send_await_disconnect failed!\")\n-        return success\n+        wait_until(lambda: not self.connected, timeout=timeout, lock=mininode_lock)\n \n class CompactBlocksTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         # Node0 = pre-segwit, node1 = segwit-aware\n         self.num_nodes = 2\n@@ -150,9 +145,7 @@ def test_sendcmpct(self, node, test_node, preferred_version, old_node=None):\n         # Make sure we get a SENDCMPCT message from our peer\n         def received_sendcmpct():\n             return (len(test_node.last_sendcmpct) > 0)\n-        got_message = wait_until(received_sendcmpct, timeout=30)\n-        assert(received_sendcmpct())\n-        assert(got_message)\n+        wait_until(received_sendcmpct, timeout=30, lock=mininode_lock)\n         with mininode_lock:\n             # Check that the first version received is the preferred one\n             assert_equal(test_node.last_sendcmpct[0].version, preferred_version)\n@@ -167,7 +160,6 @@ def check_announcement_of_new_block(node, peer, predicate):\n             block_hash = int(node.generate(1)[0], 16)\n             peer.wait_for_block_announcement(block_hash, timeout=30)\n             assert(peer.block_announced)\n-            assert(got_message)\n \n             with mininode_lock:\n                 assert predicate(peer), (\n@@ -282,7 +274,7 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n \n         # Wait until we've seen the block announcement for the resulting tip\n         tip = int(node.getbestblockhash(), 16)\n-        assert(test_node.wait_for_block_announcement(tip))\n+        test_node.wait_for_block_announcement(tip)\n \n         # Make sure we will receive a fast-announce compact block\n         self.request_cb_announcements(test_node, node, version)\n@@ -297,8 +289,7 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n         block.rehash()\n \n         # Wait until the block was announced (via compact blocks)\n-        wait_until(test_node.received_block_announcement, timeout=30)\n-        assert(test_node.received_block_announcement())\n+        wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n \n         # Now fetch and check the compact block\n         header_and_shortids = None\n@@ -314,8 +305,7 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n             inv = CInv(4, block_hash)  # 4 == \"CompactBlock\"\n             test_node.send_message(msg_getdata([inv]))\n \n-        wait_until(test_node.received_block_announcement, timeout=30)\n-        assert(test_node.received_block_announcement())\n+        wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n \n         # Now fetch and check the compact block\n         header_and_shortids = None\n@@ -386,13 +376,11 @@ def test_compactblock_requests(self, node, test_node, version, segwit):\n \n             if announce == \"inv\":\n                 test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n-                success = wait_until(lambda: \"getheaders\" in test_node.last_message, timeout=30)\n-                assert(success)\n+                wait_until(lambda: \"getheaders\" in test_node.last_message, timeout=30, lock=mininode_lock)\n                 test_node.send_header_for_blocks([block])\n             else:\n                 test_node.send_header_for_blocks([block])\n-            success = wait_until(lambda: \"getdata\" in test_node.last_message, timeout=30)\n-            assert(success)\n+            wait_until(lambda: \"getdata\" in test_node.last_message, timeout=30, lock=mininode_lock)\n             assert_equal(len(test_node.last_message[\"getdata\"].inv), 1)\n             assert_equal(test_node.last_message[\"getdata\"].inv[0].type, 4)\n             assert_equal(test_node.last_message[\"getdata\"].inv[0].hash, block.sha256)\n@@ -571,8 +559,7 @@ def test_incorrect_blocktxn_response(self, node, test_node, version):\n         assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n \n         # We should receive a getdata request\n-        success = wait_until(lambda: \"getdata\" in test_node.last_message, timeout=10)\n-        assert(success)\n+        wait_until(lambda: \"getdata\" in test_node.last_message, timeout=10, lock=mininode_lock)\n         assert_equal(len(test_node.last_message[\"getdata\"].inv), 1)\n         assert(test_node.last_message[\"getdata\"].inv[0].type == 2 or test_node.last_message[\"getdata\"].inv[0].type == 2|MSG_WITNESS_FLAG)\n         assert_equal(test_node.last_message[\"getdata\"].inv[0].hash, block.sha256)\n@@ -599,8 +586,7 @@ def test_getblocktxn_handler(self, node, test_node, version):\n             num_to_request = random.randint(1, len(block.vtx))\n             msg.block_txn_request.from_absolute(sorted(random.sample(range(len(block.vtx)), num_to_request)))\n             test_node.send_message(msg)\n-            success = wait_until(lambda: \"blocktxn\" in test_node.last_message, timeout=10)\n-            assert(success)\n+            wait_until(lambda: \"blocktxn\" in test_node.last_message, timeout=10, lock=mininode_lock)\n \n             [tx.calc_sha256() for tx in block.vtx]\n             with mininode_lock:\n@@ -639,22 +625,20 @@ def test_compactblocks_not_at_tip(self, node, test_node):\n         for i in range(MAX_CMPCTBLOCK_DEPTH + 1):\n             test_node.clear_block_announcement()\n             new_blocks.append(node.generate(1)[0])\n-            wait_until(test_node.received_block_announcement, timeout=30)\n+            wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n \n         test_node.clear_block_announcement()\n         test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n-        success = wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30)\n-        assert(success)\n+        wait_until(lambda: \"cmpctblock\" in test_node.last_message, timeout=30, lock=mininode_lock)\n \n         test_node.clear_block_announcement()\n         node.generate(1)\n-        wait_until(test_node.received_block_announcement, timeout=30)\n+        wait_until(test_node.received_block_announcement, timeout=30, lock=mininode_lock)\n         test_node.clear_block_announcement()\n         with mininode_lock:\n             test_node.last_message.pop(\"block\", None)\n         test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n-        success = wait_until(lambda: \"block\" in test_node.last_message, timeout=30)\n-        assert(success)\n+        wait_until(lambda: \"block\" in test_node.last_message, timeout=30, lock=mininode_lock)\n         with mininode_lock:\n             test_node.last_message[\"block\"].block.calc_sha256()\n             assert_equal(test_node.last_message[\"block\"].block.sha256, int(new_blocks[0], 16))\n@@ -705,7 +689,7 @@ def test_end_to_end_block_relay(self, node, listeners):\n         node.submitblock(ToHex(block))\n \n         for l in listeners:\n-            wait_until(lambda: l.received_block_announcement(), timeout=30)\n+            wait_until(lambda: l.received_block_announcement(), timeout=30, lock=mininode_lock)\n         with mininode_lock:\n             for l in listeners:\n                 assert \"cmpctblock\" in l.last_message"
      },
      {
        "sha": "8c92365ceda611f19c4e6286f3389f21542d50de",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -37,11 +37,8 @@ def clear_invs(self):\n             self.txinvs = []\n \n class FeeFilterTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n-        self.setup_clean_chain = False\n \n     def run_test(self):\n         node1 = self.nodes[1]"
      },
      {
        "sha": "cb7bbaf7e563b183c07e3ec2b2bf09840c139576",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -49,12 +49,11 @@ def normal_serialize(self):\n         return r\n \n class FullBlockTest(ComparisonTestFramework):\n-\n     # Can either run this test as 1 node with expected answers, or two and compare them.\n     # Change the \"outcome\" variable from each TestInstance object to only do the comparison.\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.setup_clean_chain = True\n         self.block_heights = {}\n         self.coinbase_key = CECKey()\n         self.coinbase_key.set_secretbytes(b\"horsebattery\")"
      },
      {
        "sha": "1dc8f72cd63246a4e96c590eece563c26fac04d5",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -92,8 +92,7 @@ def on_version(self, conn, message):\n         conn.send_message(msg_getaddr())\n \n class P2PLeakTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [['-banscore='+str(banscore)]]\n \n@@ -119,11 +118,11 @@ def run_test(self):\n \n         NetworkThread().start()  # Start up network handling in another thread\n \n-        assert wait_until(lambda: no_version_bannode.ever_connected, timeout=10)\n-        assert wait_until(lambda: no_version_idlenode.ever_connected, timeout=10)\n-        assert wait_until(lambda: no_verack_idlenode.version_received, timeout=10)\n-        assert wait_until(lambda: unsupported_service_bit5_node.ever_connected, timeout=10)\n-        assert wait_until(lambda: unsupported_service_bit7_node.ever_connected, timeout=10)\n+        wait_until(lambda: no_version_bannode.ever_connected, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: no_version_idlenode.ever_connected, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: no_verack_idlenode.version_received, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: unsupported_service_bit5_node.ever_connected, timeout=10, lock=mininode_lock)\n+        wait_until(lambda: unsupported_service_bit7_node.ever_connected, timeout=10, lock=mininode_lock)\n \n         # Mine a block and make sure that it's not sent to the connected nodes\n         self.nodes[0].generate(1)\n@@ -140,6 +139,9 @@ def run_test(self):\n \n         [conn.disconnect_node() for conn in connections]\n \n+        # Wait until all connections are closed\n+        wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)\n+\n         # Make sure no unexpected messages came in\n         assert(no_version_bannode.unexpected_msg == False)\n         assert(no_version_idlenode.unexpected_msg == False)\n@@ -158,8 +160,10 @@ def run_test(self):\n         allowed_service_bit5_node.add_connection(connections[5])\n         allowed_service_bit7_node.add_connection(connections[6])\n \n-        assert wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], timeout=10)\n-        assert wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], timeout=10)\n+        NetworkThread().start()  # Network thread stopped when all previous NodeConnCBs disconnected. Restart it\n+\n+        wait_until(lambda: allowed_service_bit5_node.message_count[\"verack\"], lock=mininode_lock)\n+        wait_until(lambda: allowed_service_bit7_node.message_count[\"verack\"], lock=mininode_lock)\n \n if __name__ == '__main__':\n     P2PLeakTest().main()"
      },
      {
        "sha": "40fcde2605716979490a62681df46ab5d3f28ed9",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -13,9 +13,7 @@\n from test_framework.util import *\n \n class P2PMempoolTests(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[\"-peerbloomfilters=0\"]]"
      },
      {
        "sha": "9105f0ee06c5aaff55011d1eecf03194876a2c07",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -109,9 +109,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n \n \n class SegWitTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         self.extra_args = [[\"-whitelist=127.0.0.1\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"], [\"-whitelist=127.0.0.1\", \"-vbparams=segwit:0:0\"]]\n@@ -1496,7 +1494,7 @@ def test_upgrade_after_activation(self, node_id):\n \n         # Restart with the new binary\n         self.stop_node(node_id)\n-        self.nodes[node_id] = self.start_node(node_id, self.options.tmpdir)\n+        self.start_node(node_id, extra_args=[])\n         connect_nodes(self.nodes[0], node_id)\n \n         sync_blocks(self.nodes)"
      },
      {
        "sha": "51d4769efc3fb023135199ffbeee77bbb364c30a",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -33,8 +33,7 @@ def on_version(self, conn, message):\n         pass\n \n class TimeoutsTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "5dfac6dd10e016c95460d125c8df33b3872da79a",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -28,8 +28,7 @@ def on_inv(self, conn, message):\n         pass\n \n class VersionBitsWarningTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n@@ -112,7 +111,7 @@ def run_test(self):\n         # Empty out the alert file\n         with open(self.alert_filename, 'w', encoding='utf8') as _:\n             pass\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.start_nodes()\n \n         # Connecting one block should be enough to generate an error.\n         self.nodes[0].generate(1)\n@@ -123,7 +122,7 @@ def run_test(self):\n         self.test_versionbits_in_alert_file()\n \n         # Test framework expects the node to still be running...\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.start_nodes()\n \n if __name__ == '__main__':\n     VersionBitsWarningTest().main()"
      },
      {
        "sha": "40d7bb14edcecd1162131bb7b4a2757ca02be50a",
        "filename": "test/functional/preciousblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/preciousblock.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -35,8 +35,7 @@ def node_sync_via_rpc(nodes):\n             unidirectional_node_sync_via_rpc(node_src, node_dest)\n \n class PreciousTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "7ad368acd4b8df665283e91004639c9db4e39124",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -9,9 +9,7 @@\n from test_framework.mininode import COIN, MAX_BLOCK_BASE_SIZE\n \n class PrioritiseTransactionTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [[\"-printpriority=1\"], [\"-printpriority=1\"]]"
      },
      {
        "sha": "81b99d1bf4484a787d91f29db9880242ae90909e",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -41,12 +41,9 @@\n \n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n \n-\n class ProxyTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 4\n-        self.setup_clean_chain = False\n \n     def setup_nodes(self):\n         self.have_ipv6 = test_ipv6_local()\n@@ -89,7 +86,8 @@ def setup_nodes(self):\n             ]\n         if self.have_ipv6:\n             args[3] = ['-listen', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n+        self.add_nodes(self.num_nodes, extra_args=args)\n+        self.start_nodes()\n \n     def node_test(self, node, proxies, auth, test_onion=True):\n         rv = []"
      },
      {
        "sha": "a4afbd46d73f7144d0ad20dd4fa4e1954d0d90e2",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -26,9 +26,7 @@ def calc_usage(blockdir):\n     return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f)) / (1024. * 1024.)\n \n class PruneTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 6\n \n@@ -56,6 +54,10 @@ def setup_network(self):\n         connect_nodes(self.nodes[0], 4)\n         sync_blocks(self.nodes[0:5])\n \n+    def setup_nodes(self):\n+        self.add_nodes(self.num_nodes, self.extra_args, timewait=900)\n+        self.start_nodes()\n+\n     def create_big_chain(self):\n         # Start by creating some coinbases we can spend later\n         self.nodes[1].generate(200)\n@@ -98,7 +100,7 @@ def create_chain_with_staleblocks(self):\n             # Node 2 stays connected, so it hears about the stale blocks and then reorg's when node0 reconnects\n             # Stopping node 0 also clears its mempool, so it doesn't have node1's transactions to accidentally mine\n             self.stop_node(0)\n-            self.nodes[0]=self.start_node(0, self.options.tmpdir, self.full_node_default_args, timewait=900)\n+            self.start_node(0, extra_args=self.full_node_default_args)\n             # Mine 24 blocks in node 1\n             for i in range(24):\n                 if j == 0:\n@@ -126,7 +128,7 @@ def reorg_test(self):\n         # Reboot node 1 to clear its mempool (hopefully make the invalidate faster)\n         # Lower the block max size so we don't keep mining all our big mempool transactions (from disconnected blocks)\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n+        self.start_node(1, extra_args=[\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"])\n \n         height = self.nodes[1].getblockcount()\n         self.log.info(\"Current block height: %d\" % height)\n@@ -149,7 +151,7 @@ def reorg_test(self):\n \n         # Reboot node1 to clear those giant tx's from mempool\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n+        self.start_node(1, extra_args=[\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"])\n \n         self.log.info(\"Generating new longer chain of 300 more blocks\")\n         self.nodes[1].generate(300)\n@@ -227,13 +229,15 @@ def reorg_back(self):\n \n     def manual_test(self, node_number, use_timestamp):\n         # at this point, node has 995 blocks and has not yet run in prune mode\n-        node = self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, timewait=900)\n+        self.start_node(node_number)\n+        node = self.nodes[node_number]\n         assert_equal(node.getblockcount(), 995)\n         assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n-        self.stop_node(node_number)\n \n         # now re-start in manual pruning mode\n-        node = self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, [\"-prune=1\"], timewait=900)\n+        self.stop_node(node_number)\n+        self.start_node(node_number, extra_args=[\"-prune=1\"])\n+        node = self.nodes[node_number]\n         assert_equal(node.getblockcount(), 995)\n \n         def height(index):\n@@ -307,15 +311,15 @@ def has_block(index):\n \n         # stop node, start back up with auto-prune at 550MB, make sure still runs\n         self.stop_node(node_number)\n-        self.nodes[node_number] = self.start_node(node_number, self.options.tmpdir, [\"-prune=550\"], timewait=900)\n+        self.start_node(node_number, extra_args=[\"-prune=550\"])\n \n         self.log.info(\"Success\")\n \n     def wallet_test(self):\n         # check that the pruning node's wallet is still in good shape\n         self.log.info(\"Stop and start pruning node to trigger wallet rescan\")\n         self.stop_node(2)\n-        self.nodes[2] = self.start_node(2, self.options.tmpdir, [\"-prune=550\"])\n+        self.start_node(2, extra_args=[\"-prune=550\"])\n         self.log.info(\"Success\")\n \n         # check that wallet loads successfully when restarting a pruned node after IBD.\n@@ -325,7 +329,7 @@ def wallet_test(self):\n         nds = [self.nodes[0], self.nodes[5]]\n         sync_blocks(nds, wait=5, timeout=300)\n         self.stop_node(5) #stop and start to trigger rescan\n-        self.nodes[5] = self.start_node(5, self.options.tmpdir, [\"-prune=550\"])\n+        self.start_node(5, extra_args=[\"-prune=550\"])\n         self.log.info(\"Success\")\n \n     def run_test(self):"
      },
      {
        "sha": "51dda09ac4156877253ca379a9c92a88558c9286",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -17,9 +17,7 @@\n \n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "db6fc86b82fe404850115ec9dc873827f7b91105",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 2,
        "deletions": 9,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -23,16 +23,9 @@ def get_sub_array_from_array(object_array, to_match):\n     return []\n \n class ReceivedByTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 4\n-        self.setup_clean_chain = False\n-\n-    def setup_nodes(self):\n-        #This test requires mocktime\n+    def set_test_params(self):\n+        self.num_nodes = 2\n         self.enable_mocktime()\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         '''"
      },
      {
        "sha": "1f684a1afe3bf01dc15308e9e3ee9eaf5160988f",
        "filename": "test/functional/reindex.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/reindex.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -15,8 +15,7 @@\n \n class ReindexTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n@@ -25,7 +24,7 @@ def reindex(self, justchainstate=False):\n         blockcount = self.nodes[0].getblockcount()\n         self.stop_nodes()\n         extra_args = [[\"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"]]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.start_nodes(extra_args)\n         while self.nodes[0].getblockcount() < blockcount:\n             time.sleep(0.1)\n         assert_equal(self.nodes[0].getblockcount(), blockcount)"
      },
      {
        "sha": "5e1f33991b4bbf6221c51264be626e6257f19b78",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -61,16 +61,15 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n \n class ReplaceByFeeTest(BitcoinTestFramework):\n \n-    def __init__(self):\n-        super().__init__()\n-        self.num_nodes = 1\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n+        self.num_nodes = 2\n         self.extra_args= [[\"-maxorphantx=1000\",\n                            \"-whitelist=127.0.0.1\",\n                            \"-limitancestorcount=50\",\n                            \"-limitancestorsize=101\",\n                            \"-limitdescendantcount=200\",\n-                           \"-limitdescendantsize=101\"]]\n+                           \"-limitdescendantsize=101\"],\n+                           [\"-mempoolreplacement=0\"]]\n \n     def run_test(self):\n         make_utxo(self.nodes[0], 1*COIN)\n@@ -117,6 +116,8 @@ def test_simple_doublespend(self):\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n+        self.sync_all([self.nodes])\n+\n         # Should fail because we haven't changed the fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n@@ -125,12 +126,17 @@ def test_simple_doublespend(self):\n \n         # This will raise an exception due to insufficient fee\n         assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        # This will raise an exception due to transaction replacement being disabled\n+        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n \n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx1b_hex = txToHex(tx1b)\n+        # Replacement still disabled even with \"enough fee\"\n+        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        # Works when enabled\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n \n         mempool = self.nodes[0].getrawmempool()\n@@ -140,6 +146,11 @@ def test_simple_doublespend(self):\n \n         assert_equal(tx1b_hex, self.nodes[0].getrawtransaction(tx1b_txid))\n \n+        # Second node is running mempoolreplacement=0, will not replace originally-seen txn\n+        mempool = self.nodes[1].getrawmempool()\n+        assert tx1a_txid in mempool\n+        assert tx1b_txid not in mempool\n+\n     def test_doublespend_chain(self):\n         \"\"\"Doublespend of a long chain\"\"\"\n "
      },
      {
        "sha": "d6ba5913912d371c6765c47696927e0c7004d6ef",
        "filename": "test/functional/resendwallettransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/resendwallettransactions.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -8,19 +8,17 @@\n from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n class ResendWalletTransactionsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.extra_args = [['--walletbroadcast=false']]\n+    def set_test_params(self):\n         self.num_nodes = 1\n+        self.extra_args = [['--walletbroadcast=false']]\n \n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled.\n         assert_raises_jsonrpc(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)\n \n         # Should return an empty array if there aren't unconfirmed wallet transactions.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0, extra_args=[])\n         assert_equal(self.nodes[0].resendwallettransactions(), [])\n \n         # Should return an array with the unconfirmed wallet transaction."
      },
      {
        "sha": "437111a4d7fd576aa7b9f6d9104371952334a88c",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -43,8 +43,7 @@ def http_post_call(host, port, path, requestdata = '', response_object = 0):\n class RESTTest (BitcoinTestFramework):\n     FORMAT_SEPARATOR = \".\"\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n "
      },
      {
        "sha": "0cf64beebd408a90b058d531e09a01954dcb4ca1",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -11,33 +11,29 @@\n from test_framework.util import *\n from test_framework.netutil import *\n \n-\n class RPCBindTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        pass\n-\n-    def setup_nodes(self):\n-        pass\n+        self.add_nodes(self.num_nodes, None)\n \n     def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n         '''\n         Start a node with requested rpcallowip and rpcbind parameters,\n         then try to connect, and check if the set of bound addresses\n         matches the expected set.\n         '''\n+        self.log.info(\"Bind test for %s\" % str(addresses))\n         expected = [(addr_to_hex(addr), port) for (addr, port) in expected]\n         base_args = ['-disablewallet', '-nolisten']\n         if allow_ips:\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n-        pid = self.bitcoind_processes[0].pid\n+        self.nodes[0].rpchost = connect_to\n+        self.start_node(0, base_args + binds)\n+        pid = self.nodes[0].process.pid\n         assert_equal(set(get_bind_addrs(pid)), set(expected))\n         self.stop_nodes()\n \n@@ -46,10 +42,12 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         Start a node with rpcallow IP, and request getnetworkinfo\n         at a non-localhost IP.\n         '''\n+        self.log.info(\"Allow IP test for %s:%d\" % (rpchost, rpcport))\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n+        self.nodes[0].rpchost = None\n+        self.start_nodes([base_args])\n         # connect to node through non-loopback interface\n-        node = get_rpc_proxy(rpc_url(get_datadir_path(self.options.tmpdir, 0), 0, \"%s:%d\" % (rpchost, rpcport)), 0)\n+        node = get_rpc_proxy(rpc_url(get_datadir_path(self.options.tmpdir, 0), 0, \"%s:%d\" % (rpchost, rpcport)), 0, coveragedir=self.options.coveragedir)\n         node.getnetworkinfo()\n         self.stop_nodes()\n "
      },
      {
        "sha": "da61cc66e6854c8f989c3bd14bf349e43874d0fd",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -10,15 +10,8 @@\n     assert_raises_jsonrpc,\n )\n \n-\n class NamedArgumentTest(BitcoinTestFramework):\n-    \"\"\"\n-    Test named arguments on RPC calls.\n-    \"\"\"\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 1\n \n     def run_test(self):"
      },
      {
        "sha": "c08fbd3e7751b6c688157cdfc82fa9d8dcda1fc9",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -75,9 +75,7 @@ def find_unspent(node, min_value):\n             return utxo\n \n class SegWitTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n         self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\"],"
      },
      {
        "sha": "fe577dc20a2dbd662f22c95acc188334dbfda5fc",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -128,7 +128,7 @@ def check_last_announcement(self, headers=None, inv=None):\n         expect_headers = headers if headers != None else []\n         expect_inv = inv if inv != None else []\n         test_function = lambda: self.block_announced\n-        assert(wait_until(test_function, timeout=60))\n+        wait_until(test_function, timeout=60, lock=mininode_lock)\n         with mininode_lock:\n             self.block_announced = False\n \n@@ -155,12 +155,12 @@ def wait_for_getdata(self, hash_list, timeout=60):\n             return\n \n         test_function = lambda: \"getdata\" in self.last_message and [x.hash for x in self.last_message[\"getdata\"].inv] == hash_list\n-        assert(wait_until(test_function, timeout=timeout))\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         return\n \n     def wait_for_block_announcement(self, block_hash, timeout=60):\n         test_function = lambda: self.last_blockhash_announced == block_hash\n-        assert(wait_until(test_function, timeout=timeout))\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         return\n \n     def send_header_for_blocks(self, new_blocks):\n@@ -174,8 +174,7 @@ def send_getblocks(self, locator):\n         self.send_message(getblocks_message)\n \n class SendHeadersTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n "
      },
      {
        "sha": "52ba6a5ad761844cf9b0480a767a6be2e8fcf4a2",
        "filename": "test/functional/signmessages.py",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signmessages.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -5,31 +5,34 @@\n \"\"\"Test RPC commands for signing and verifying messages.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal\n \n class SignMessagesTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n     def run_test(self):\n         message = 'This is just a test message'\n \n-        # Test the signing with a privkey\n-        privKey = 'cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N'\n+        self.log.info('test signing with priv_key')\n+        priv_key = 'cUeKHd5orzT3mz8P9pxyREHfsWtVfgsfDjiZZBcjUBAaGk1BTj7N'\n         address = 'mpLQjfK79b7CCV4VMJWEWAj5Mpx8Up5zxB'\n-        signature = self.nodes[0].signmessagewithprivkey(privKey, message)\n-\n-        # Verify the message\n+        expected_signature = 'INbVnW4e6PeRmsv2Qgu8NuopvrVjkcxob+sX8OcZG0SALhWybUjzMLPdAsXI46YZGb0KQTRii+wWIQzRpG/U+S0='\n+        signature = self.nodes[0].signmessagewithprivkey(priv_key, message)\n+        assert_equal(expected_signature, signature)\n         assert(self.nodes[0].verifymessage(address, signature, message))\n \n-        # Test the signing with an address with wallet\n+        self.log.info('test signing with an address with wallet')\n         address = self.nodes[0].getnewaddress()\n         signature = self.nodes[0].signmessage(address, message)\n-\n-        # Verify the message\n         assert(self.nodes[0].verifymessage(address, signature, message))\n \n+        self.log.info('test verifying with another address should not work')\n+        other_address = self.nodes[0].getnewaddress()\n+        other_signature = self.nodes[0].signmessage(other_address, message)\n+        assert(not self.nodes[0].verifymessage(other_address, signature, message))\n+        assert(not self.nodes[0].verifymessage(address, other_signature, message))\n+\n if __name__ == '__main__':\n     SignMessagesTest().main()"
      },
      {
        "sha": "b47ef939558a272da9d147e9c99c8541501ff5fb",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -9,8 +9,7 @@\n \n \n class SignRawTransactionsTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n "
      },
      {
        "sha": "76632fc57848ac31ff914ec98aa06eb7e7f0476f",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 46,
        "deletions": 48,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -141,69 +141,25 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n \n \n class EstimateFeeTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 3\n-        self.setup_clean_chain = False\n \n     def setup_network(self):\n         \"\"\"\n         We'll setup the network to have 3 nodes that all mine with different parameters.\n         But first we need to use one node to create a lot of outputs\n         which we will use to generate our transactions.\n         \"\"\"\n-        self.nodes = []\n+        self.add_nodes(3, extra_args=[[\"-maxorphantx=1000\", \"-whitelist=127.0.0.1\"],\n+                                      [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"],\n+                                      [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]])\n         # Use node0 to mine blocks for input splitting\n-        self.nodes.append(self.start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n-                                                              \"-whitelist=127.0.0.1\"]))\n-\n-        self.log.info(\"This test is time consuming, please be patient\")\n-        self.log.info(\"Splitting inputs so we can generate tx's\")\n-        self.txouts = []\n-        self.txouts2 = []\n-        # Split a coinbase into two transaction puzzle outputs\n-        split_inputs(self.nodes[0], self.nodes[0].listunspent(0), self.txouts, True)\n-\n-        # Mine\n-        while (len(self.nodes[0].getrawmempool()) > 0):\n-            self.nodes[0].generate(1)\n-\n-        # Repeatedly split those 2 outputs, doubling twice for each rep\n-        # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n-        reps = 0\n-        while (reps < 5):\n-            #Double txouts to txouts2\n-            while (len(self.txouts)>0):\n-                split_inputs(self.nodes[0], self.txouts, self.txouts2)\n-            while (len(self.nodes[0].getrawmempool()) > 0):\n-                self.nodes[0].generate(1)\n-            #Double txouts2 to txouts\n-            while (len(self.txouts2)>0):\n-                split_inputs(self.nodes[0], self.txouts2, self.txouts)\n-            while (len(self.nodes[0].getrawmempool()) > 0):\n-                self.nodes[0].generate(1)\n-            reps += 1\n-        self.log.info(\"Finished splitting\")\n-\n-        # Now we can connect the other nodes, didn't want to connect them earlier\n-        # so the estimates would not be affected by the splitting transactions\n         # Node1 mines small blocks but that are bigger than the expected transaction rate.\n         # NOTE: the CreateNewBlock code starts counting block size at 1,000 bytes,\n         # (17k is room enough for 110 or so transactions)\n-        self.nodes.append(self.start_node(1, self.options.tmpdir,\n-                                     [\"-blockmaxsize=17000\", \"-maxorphantx=1000\"]))\n-        connect_nodes(self.nodes[1], 0)\n-\n         # Node2 is a stingy miner, that\n         # produces too small blocks (room for only 55 or so transactions)\n-        node2args = [\"-blockmaxsize=8000\", \"-maxorphantx=1000\"]\n \n-        self.nodes.append(self.start_node(2, self.options.tmpdir, node2args))\n-        connect_nodes(self.nodes[0], 2)\n-        connect_nodes(self.nodes[2], 1)\n-\n-        self.sync_all()\n \n     def transact_and_mine(self, numblocks, mining_node):\n         min_fee = Decimal(\"0.00001\")\n@@ -232,9 +188,51 @@ def transact_and_mine(self, numblocks, mining_node):\n             self.memutxo = newmem\n \n     def run_test(self):\n+        self.log.info(\"This test is time consuming, please be patient\")\n+        self.log.info(\"Splitting inputs so we can generate tx's\")\n+\n         # Make log handler available to helper functions\n         global log\n         log = self.log\n+\n+        # Start node0\n+        self.start_node(0)\n+        self.txouts = []\n+        self.txouts2 = []\n+        # Split a coinbase into two transaction puzzle outputs\n+        split_inputs(self.nodes[0], self.nodes[0].listunspent(0), self.txouts, True)\n+\n+        # Mine\n+        while (len(self.nodes[0].getrawmempool()) > 0):\n+            self.nodes[0].generate(1)\n+\n+        # Repeatedly split those 2 outputs, doubling twice for each rep\n+        # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n+        reps = 0\n+        while (reps < 5):\n+            #Double txouts to txouts2\n+            while (len(self.txouts)>0):\n+                split_inputs(self.nodes[0], self.txouts, self.txouts2)\n+            while (len(self.nodes[0].getrawmempool()) > 0):\n+                self.nodes[0].generate(1)\n+            #Double txouts2 to txouts\n+            while (len(self.txouts2)>0):\n+                split_inputs(self.nodes[0], self.txouts2, self.txouts)\n+            while (len(self.nodes[0].getrawmempool()) > 0):\n+                self.nodes[0].generate(1)\n+            reps += 1\n+        self.log.info(\"Finished splitting\")\n+\n+        # Now we can connect the other nodes, didn't want to connect them earlier\n+        # so the estimates would not be affected by the splitting transactions\n+        self.start_node(1)\n+        self.start_node(2)\n+        connect_nodes(self.nodes[1], 0)\n+        connect_nodes(self.nodes[0], 2)\n+        connect_nodes(self.nodes[2], 1)\n+\n+        self.sync_all()\n+\n         self.fees_per_kb = []\n         self.memutxo = []\n         self.confutxo = self.txouts # Start with the set of confirmed txouts after splitting"
      },
      {
        "sha": "bfbc0c3b034095e7ffb22a80e37748d318d63e0a",
        "filename": "test/functional/test_framework/comptool.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/comptool.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -19,7 +19,7 @@\n \n from .mininode import *\n from .blockstore import BlockStore, TxStore\n-from .util import p2p_port\n+from .util import p2p_port, wait_until\n \n import logging\n \n@@ -189,15 +189,15 @@ def clear_all_connections(self):\n     def wait_for_disconnections(self):\n         def disconnected():\n             return all(node.closed for node in self.test_nodes)\n-        return wait_until(disconnected, timeout=10)\n+        wait_until(disconnected, timeout=10, lock=mininode_lock)\n \n     def wait_for_verack(self):\n         return all(node.wait_for_verack() for node in self.test_nodes)\n \n     def wait_for_pings(self, counter):\n         def received_pongs():\n             return all(node.received_ping_response(counter) for node in self.test_nodes)\n-        return wait_until(received_pongs)\n+        wait_until(received_pongs, lock=mininode_lock)\n \n     # sync_blocks: Wait for all connections to request the blockhash given\n     # then send get_headers to find out the tip of each node, and synchronize\n@@ -210,8 +210,7 @@ def blocks_requested():\n             )\n \n         # --> error if not requested\n-        if not wait_until(blocks_requested, attempts=20*num_blocks):\n-            raise AssertionError(\"Not all nodes requested block\")\n+        wait_until(blocks_requested, attempts=20*num_blocks, lock=mininode_lock)\n \n         # Send getheaders message\n         [ c.cb.send_getheaders() for c in self.connections ]\n@@ -231,8 +230,7 @@ def transaction_requested():\n             )\n \n         # --> error if not requested\n-        if not wait_until(transaction_requested, attempts=20*num_events):\n-            raise AssertionError(\"Not all nodes requested transaction\")\n+        wait_until(transaction_requested, attempts=20*num_events, lock=mininode_lock)\n \n         # Get the mempool\n         [ c.cb.send_mempool() for c in self.connections ]"
      },
      {
        "sha": "843b67cd5cace954b04f84ea5ee53b8d1160f0f0",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 16,
        "deletions": 32,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -35,7 +35,7 @@\n from threading import RLock, Thread\n \n from test_framework.siphash import siphash256\n-from test_framework.util import hex_str_to_bytes, bytes_to_hex_str\n+from test_framework.util import hex_str_to_bytes, bytes_to_hex_str, wait_until\n \n BIP0031_VERSION = 60000\n MY_VERSION = 70014  # past bip-31 for ping/pong\n@@ -1358,23 +1358,6 @@ def __repr__(self):\n         return \"msg_reject: %s %d %s [%064x]\" \\\n             % (self.message, self.code, self.reason, self.data)\n \n-# Helper function\n-def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf')):\n-    if attempts == float('inf') and timeout == float('inf'):\n-        timeout = 60\n-    attempt = 0\n-    elapsed = 0\n-\n-    while attempt < attempts and elapsed < timeout:\n-        with mininode_lock:\n-            if predicate():\n-                return True\n-        attempt += 1\n-        elapsed += 0.05\n-        time.sleep(0.05)\n-\n-    return False\n-\n class msg_feefilter(object):\n     command = b\"feefilter\"\n \n@@ -1522,6 +1505,7 @@ def deliver(self, conn, message):\n             except:\n                 print(\"ERROR delivering %s (%s)\" % (repr(message),\n                                                     sys.exc_info()[0]))\n+                raise\n \n     def set_deliver_sleep_time(self, value):\n         with mininode_lock:\n@@ -1591,21 +1575,21 @@ def add_connection(self, conn):\n \n     def wait_for_disconnect(self, timeout=60):\n         test_function = lambda: not self.connected\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     # Message receiving helper methods\n \n     def wait_for_block(self, blockhash, timeout=60):\n         test_function = lambda: self.last_message.get(\"block\") and self.last_message[\"block\"].block.rehash() == blockhash\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_getdata(self, timeout=60):\n         test_function = lambda: self.last_message.get(\"getdata\")\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_getheaders(self, timeout=60):\n         test_function = lambda: self.last_message.get(\"getheaders\")\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_inv(self, expected_inv, timeout=60):\n         \"\"\"Waits for an INV message and checks that the first inv object in the message was as expected.\"\"\"\n@@ -1614,11 +1598,11 @@ def wait_for_inv(self, expected_inv, timeout=60):\n         test_function = lambda: self.last_message.get(\"inv\") and \\\n                                 self.last_message[\"inv\"].inv[0].type == expected_inv[0].type and \\\n                                 self.last_message[\"inv\"].inv[0].hash == expected_inv[0].hash\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     def wait_for_verack(self, timeout=60):\n         test_function = lambda: self.message_count[\"verack\"]\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n \n     # Message sending helper functions\n \n@@ -1636,7 +1620,7 @@ def send_and_ping(self, message):\n     def sync_with_ping(self, timeout=60):\n         self.send_message(msg_ping(nonce=self.ping_counter))\n         test_function = lambda: self.last_message.get(\"pong\") and self.last_message[\"pong\"].nonce == self.ping_counter\n-        assert wait_until(test_function, timeout=timeout)\n+        wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         self.ping_counter += 1\n         return True\n \n@@ -1725,13 +1709,10 @@ def handle_close(self):\n         self.cb.on_close(self)\n \n     def handle_read(self):\n-        try:\n-            t = self.recv(8192)\n-            if len(t) > 0:\n-                self.recvbuf += t\n-                self.got_data()\n-        except:\n-            pass\n+        t = self.recv(8192)\n+        if len(t) > 0:\n+            self.recvbuf += t\n+            self.got_data()\n \n     def readable(self):\n         return True\n@@ -1797,8 +1778,10 @@ def got_data(self):\n                     self.got_message(t)\n                 else:\n                     logger.warning(\"Received unknown command from %s:%d: '%s' %s\" % (self.dstaddr, self.dstport, command, repr(msg)))\n+                    raise ValueError(\"Unknown command: '%s'\" % (command))\n         except Exception as e:\n             logger.exception('got_data:', repr(e))\n+            raise\n \n     def send_message(self, message, pushbuf=False):\n         if self.state != \"connected\" and not pushbuf:\n@@ -1854,6 +1837,7 @@ def run(self):\n                     disconnected.append(obj)\n             [ obj.handle_close() for obj in disconnected ]\n             asyncore.loop(0.1, use_poll=True, map=mininode_socket_map, count=1)\n+        logger.debug(\"Network thread closing\")\n \n \n # An exception we can raise if we detect a potential disconnect"
      },
      {
        "sha": "a53eb517998dcdb22db84d6a561f475d15572217",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 121,
        "deletions": 148,
        "changes": 269,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -5,35 +5,30 @@\n \"\"\"Base class for RPC testing.\"\"\"\n \n from collections import deque\n-import errno\n from enum import Enum\n-import http.client\n import logging\n import optparse\n import os\n import pdb\n import shutil\n-import subprocess\n import sys\n import tempfile\n import time\n import traceback\n \n from .authproxy import JSONRPCException\n from . import coverage\n+from .test_node import TestNode\n from .util import (\n     MAX_NODES,\n     PortSeed,\n     assert_equal,\n     check_json_precision,\n     connect_nodes_bi,\n     disconnect_nodes,\n-    get_rpc_proxy,\n     initialize_datadir,\n-    get_datadir_path,\n     log_filename,\n     p2p_port,\n-    rpc_url,\n     set_node_times,\n     sync_blocks,\n     sync_mempools,\n@@ -48,63 +43,33 @@ class TestStatus(Enum):\n TEST_EXIT_FAILED = 1\n TEST_EXIT_SKIPPED = 77\n \n-BITCOIND_PROC_WAIT_TIMEOUT = 60\n-\n class BitcoinTestFramework(object):\n     \"\"\"Base class for a bitcoin test script.\n \n-    Individual bitcoin test scripts should subclass this class and override the following methods:\n+    Individual bitcoin test scripts should subclass this class and override the set_test_params() and run_test() methods.\n+\n+    Individual tests can also override the following methods to customize the test setup:\n \n-    - __init__()\n     - add_options()\n     - setup_chain()\n     - setup_network()\n-    - run_test()\n+    - setup_nodes()\n \n-    The main() method should not be overridden.\n+    The __init__() and main() methods should not be overridden.\n \n     This class also contains various public and private helper methods.\"\"\"\n \n-    # Methods to override in subclass test scripts.\n     def __init__(self):\n-        self.num_nodes = 4\n+        \"\"\"Sets test framework defaults. Do not override this method. Instead, override the set_test_params() method\"\"\"\n         self.setup_clean_chain = False\n         self.nodes = []\n-        self.bitcoind_processes = {}\n         self.mocktime = 0\n+        self.set_test_params()\n \n-    def add_options(self, parser):\n-        pass\n-\n-    def setup_chain(self):\n-        self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n-        if self.setup_clean_chain:\n-            self._initialize_chain_clean(self.options.tmpdir, self.num_nodes)\n-        else:\n-            self._initialize_chain(self.options.tmpdir, self.num_nodes, self.options.cachedir)\n-\n-    def setup_network(self):\n-        self.setup_nodes()\n-\n-        # Connect the nodes as a \"chain\".  This allows us\n-        # to split the network between nodes 1 and 2 to get\n-        # two halves that can work on competing chains.\n-        for i in range(self.num_nodes - 1):\n-            connect_nodes_bi(self.nodes, i, i + 1)\n-        self.sync_all()\n-\n-    def setup_nodes(self):\n-        extra_args = None\n-        if hasattr(self, \"extra_args\"):\n-            extra_args = self.extra_args\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n-\n-    def run_test(self):\n-        raise NotImplementedError\n-\n-    # Main function. This should not be overridden by the subclass test scripts.\n+        assert hasattr(self, \"num_nodes\"), \"Test must set self.num_nodes in set_test_params()\"\n \n     def main(self):\n+        \"\"\"Main function. This should not be overridden by the subclass test scripts.\"\"\"\n \n         parser = optparse.OptionParser(usage=\"%prog [options]\")\n         parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n@@ -208,77 +173,115 @@ def main(self):\n             logging.shutdown()\n             sys.exit(TEST_EXIT_FAILED)\n \n-    # Public helper methods. These can be accessed by the subclass test scripts.\n+    # Methods to override in subclass test scripts.\n+    def set_test_params(self):\n+        \"\"\"Tests must this method to change default values for number of nodes, topology, etc\"\"\"\n+        raise NotImplementedError\n \n-    def start_node(self, i, dirname, extra_args=None, rpchost=None, timewait=None, binary=None, stderr=None):\n-        \"\"\"Start a bitcoind and return RPC connection to it\"\"\"\n+    def add_options(self, parser):\n+        \"\"\"Override this method to add command-line options to the test\"\"\"\n+        pass\n \n-        datadir = os.path.join(dirname, \"node\" + str(i))\n-        if binary is None:\n-            binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-        args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(self.mocktime), \"-uacomment=testnode%d\" % i]\n-        if extra_args is not None:\n-            args.extend(extra_args)\n-        self.bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n-        self.log.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-        self._wait_for_bitcoind_start(self.bitcoind_processes[i], datadir, i, rpchost)\n-        self.log.debug(\"initialize_chain: RPC successfully started\")\n-        proxy = get_rpc_proxy(rpc_url(datadir, i, rpchost), i, timeout=timewait)\n+    def setup_chain(self):\n+        \"\"\"Override this method to customize blockchain setup\"\"\"\n+        self.log.info(\"Initializing test directory \" + self.options.tmpdir)\n+        if self.setup_clean_chain:\n+            self._initialize_chain_clean()\n+        else:\n+            self._initialize_chain()\n \n-        if self.options.coveragedir:\n-            coverage.write_all_rpc_commands(self.options.coveragedir, proxy)\n+    def setup_network(self):\n+        \"\"\"Override this method to customize test network topology\"\"\"\n+        self.setup_nodes()\n+\n+        # Connect the nodes as a \"chain\".  This allows us\n+        # to split the network between nodes 1 and 2 to get\n+        # two halves that can work on competing chains.\n+        for i in range(self.num_nodes - 1):\n+            connect_nodes_bi(self.nodes, i, i + 1)\n+        self.sync_all()\n+\n+    def setup_nodes(self):\n+        \"\"\"Override this method to customize test node setup\"\"\"\n+        extra_args = None\n+        if hasattr(self, \"extra_args\"):\n+            extra_args = self.extra_args\n+        self.add_nodes(self.num_nodes, extra_args)\n+        self.start_nodes()\n+\n+    def run_test(self):\n+        \"\"\"Tests must override this method to define test logic\"\"\"\n+        raise NotImplementedError\n \n-        return proxy\n+    # Public helper methods. These can be accessed by the subclass test scripts.\n \n-    def start_nodes(self, num_nodes, dirname, extra_args=None, rpchost=None, timewait=None, binary=None):\n-        \"\"\"Start multiple bitcoinds, return RPC connections to them\"\"\"\n+    def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, binary=None):\n+        \"\"\"Instantiate TestNode objects\"\"\"\n \n         if extra_args is None:\n-            extra_args = [None] * num_nodes\n+            extra_args = [[]] * num_nodes\n         if binary is None:\n             binary = [None] * num_nodes\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(binary), num_nodes)\n-        rpcs = []\n+        for i in range(num_nodes):\n+            self.nodes.append(TestNode(i, self.options.tmpdir, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir))\n+\n+    def start_node(self, i, extra_args=None, stderr=None):\n+        \"\"\"Start a bitcoind\"\"\"\n+\n+        node = self.nodes[i]\n+\n+        node.start(extra_args, stderr)\n+        node.wait_for_rpc_connection()\n+\n+        if self.options.coveragedir is not None:\n+            coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n+\n+    def start_nodes(self, extra_args=None):\n+        \"\"\"Start multiple bitcoinds\"\"\"\n+\n+        if extra_args is None:\n+            extra_args = [None] * self.num_nodes\n+        assert_equal(len(extra_args), self.num_nodes)\n         try:\n-            for i in range(num_nodes):\n-                rpcs.append(self.start_node(i, dirname, extra_args[i], rpchost, timewait=timewait, binary=binary[i]))\n+            for i, node in enumerate(self.nodes):\n+                node.start(extra_args[i])\n+            for node in self.nodes:\n+                node.wait_for_rpc_connection()\n         except:\n             # If one node failed to start, stop the others\n-            # TODO: abusing self.nodes in this way is a little hacky.\n-            # Eventually we should do a better job of tracking nodes\n-            self.nodes.extend(rpcs)\n             self.stop_nodes()\n-            self.nodes = []\n             raise\n-        return rpcs\n+\n+        if self.options.coveragedir is not None:\n+            for node in self.nodes:\n+                coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n \n     def stop_node(self, i):\n         \"\"\"Stop a bitcoind test node\"\"\"\n-\n-        self.log.debug(\"Stopping node %d\" % i)\n-        try:\n-            self.nodes[i].stop()\n-        except http.client.CannotSendRequest as e:\n-            self.log.exception(\"Unable to stop node\")\n-        return_code = self.bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-        del self.bitcoind_processes[i]\n-        assert_equal(return_code, 0)\n+        self.nodes[i].stop_node()\n+        self.nodes[i].wait_until_stopped()\n \n     def stop_nodes(self):\n         \"\"\"Stop multiple bitcoind test nodes\"\"\"\n+        for node in self.nodes:\n+            # Issue RPC to stop nodes\n+            node.stop_node()\n \n-        for i in range(len(self.nodes)):\n-            self.stop_node(i)\n-        assert not self.bitcoind_processes.values()  # All connections must be gone now\n+        for node in self.nodes:\n+            # Wait for nodes to stop\n+            node.wait_until_stopped()\n \n-    def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_msg=None):\n+    def assert_start_raises_init_error(self, i, extra_args=None, expected_msg=None):\n         with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n             try:\n-                self.start_node(i, dirname, extra_args, stderr=log_stderr)\n+                self.start_node(i, extra_args, stderr=log_stderr)\n                 self.stop_node(i)\n             except Exception as e:\n                 assert 'bitcoind exited' in str(e)  # node must have shutdown\n+                self.nodes[i].running = False\n+                self.nodes[i].process = None\n                 if expected_msg is not None:\n                     log_stderr.seek(0)\n                     stderr = log_stderr.read().decode('utf-8')\n@@ -292,7 +295,7 @@ def assert_start_raises_init_error(self, i, dirname, extra_args=None, expected_m\n                 raise AssertionError(assert_msg)\n \n     def wait_for_node_exit(self, i, timeout):\n-        self.bitcoind_processes[i].wait(timeout)\n+        self.nodes[i].process.wait(timeout)\n \n     def split_network(self):\n         \"\"\"\n@@ -362,16 +365,16 @@ def _start_logging(self):\n             rpc_handler.setLevel(logging.DEBUG)\n             rpc_logger.addHandler(rpc_handler)\n \n-    def _initialize_chain(self, test_dir, num_nodes, cachedir):\n+    def _initialize_chain(self):\n         \"\"\"Initialize a pre-mined blockchain for use by the test.\n \n         Create a cache of a 200-block-long chain (with wallet) for MAX_NODES\n         Afterward, create num_nodes copies from the cache.\"\"\"\n \n-        assert num_nodes <= MAX_NODES\n+        assert self.num_nodes <= MAX_NODES\n         create_cache = False\n         for i in range(MAX_NODES):\n-            if not os.path.isdir(os.path.join(cachedir, 'node' + str(i))):\n+            if not os.path.isdir(os.path.join(self.options.cachedir, 'node' + str(i))):\n                 create_cache = True\n                 break\n \n@@ -380,27 +383,22 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n \n             # find and delete old cache directories if any exist\n             for i in range(MAX_NODES):\n-                if os.path.isdir(os.path.join(cachedir, \"node\" + str(i))):\n-                    shutil.rmtree(os.path.join(cachedir, \"node\" + str(i)))\n+                if os.path.isdir(os.path.join(self.options.cachedir, \"node\" + str(i))):\n+                    shutil.rmtree(os.path.join(self.options.cachedir, \"node\" + str(i)))\n \n             # Create cache directories, run bitcoinds:\n             for i in range(MAX_NODES):\n-                datadir = initialize_datadir(cachedir, i)\n+                datadir = initialize_datadir(self.options.cachedir, i)\n                 args = [os.getenv(\"BITCOIND\", \"bitcoind\"), \"-server\", \"-keypool=1\", \"-datadir=\" + datadir, \"-discover=0\"]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.bitcoind_processes[i] = subprocess.Popen(args)\n-                self.log.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n-                self._wait_for_bitcoind_start(self.bitcoind_processes[i], datadir, i)\n-                self.log.debug(\"initialize_chain: RPC successfully started\")\n+                self.nodes.append(TestNode(i, self.options.cachedir, extra_args=[], rpchost=None, timewait=None, binary=None, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n+                self.nodes[i].args = args\n+                self.start_node(i)\n \n-            self.nodes = []\n-            for i in range(MAX_NODES):\n-                try:\n-                    self.nodes.append(get_rpc_proxy(rpc_url(get_datadir_path(cachedir, i), i), i))\n-                except:\n-                    self.log.exception(\"Error connecting to node %d\" % i)\n-                    sys.exit(1)\n+            # Wait for RPC connections to be ready\n+            for node in self.nodes:\n+                node.wait_for_rpc_connection()\n \n             # Create a 200-block-long chain; each of the 4 first nodes\n             # gets 25 mature blocks and 25 immature.\n@@ -425,48 +423,24 @@ def _initialize_chain(self, test_dir, num_nodes, cachedir):\n             self.nodes = []\n             self.disable_mocktime()\n             for i in range(MAX_NODES):\n-                os.remove(log_filename(cachedir, i, \"debug.log\"))\n-                os.remove(log_filename(cachedir, i, \"db.log\"))\n-                os.remove(log_filename(cachedir, i, \"peers.dat\"))\n-                os.remove(log_filename(cachedir, i, \"fee_estimates.dat\"))\n-\n-        for i in range(num_nodes):\n-            from_dir = os.path.join(cachedir, \"node\" + str(i))\n-            to_dir = os.path.join(test_dir, \"node\" + str(i))\n+                os.remove(log_filename(self.options.cachedir, i, \"debug.log\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"db.log\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"peers.dat\"))\n+                os.remove(log_filename(self.options.cachedir, i, \"fee_estimates.dat\"))\n+\n+        for i in range(self.num_nodes):\n+            from_dir = os.path.join(self.options.cachedir, \"node\" + str(i))\n+            to_dir = os.path.join(self.options.tmpdir, \"node\" + str(i))\n             shutil.copytree(from_dir, to_dir)\n-            initialize_datadir(test_dir, i)  # Overwrite port/rpcport in bitcoin.conf\n+            initialize_datadir(self.options.tmpdir, i)  # Overwrite port/rpcport in bitcoin.conf\n \n-    def _initialize_chain_clean(self, test_dir, num_nodes):\n+    def _initialize_chain_clean(self):\n         \"\"\"Initialize empty blockchain for use by the test.\n \n         Create an empty blockchain and num_nodes wallets.\n         Useful if a test case wants complete control over initialization.\"\"\"\n-        for i in range(num_nodes):\n-            initialize_datadir(test_dir, i)\n-\n-    def _wait_for_bitcoind_start(self, process, datadir, i, rpchost=None):\n-        \"\"\"Wait for bitcoind to start.\n-\n-        This means that RPC is accessible and fully initialized.\n-        Raise an exception if bitcoind exits during initialization.\"\"\"\n-        while True:\n-            if process.poll() is not None:\n-                raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n-            try:\n-                # Check if .cookie file to be created\n-                rpc = get_rpc_proxy(rpc_url(datadir, i, rpchost), i, coveragedir=self.options.coveragedir)\n-                rpc.getblockcount()\n-                break  # break out of loop on success\n-            except IOError as e:\n-                if e.errno != errno.ECONNREFUSED:  # Port not yet open?\n-                    raise  # unknown IO error\n-            except JSONRPCException as e:  # Initialization phase\n-                if e.error['code'] != -28:  # RPC in warmup?\n-                    raise  # unknown JSON RPC exception\n-            except ValueError as e:  # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n-                if \"No RPC credentials\" not in str(e):\n-                    raise\n-            time.sleep(0.25)\n+        for i in range(self.num_nodes):\n+            initialize_datadir(self.options.tmpdir, i)\n \n class ComparisonTestFramework(BitcoinTestFramework):\n     \"\"\"Test framework for doing p2p comparison testing\n@@ -476,8 +450,7 @@ class ComparisonTestFramework(BitcoinTestFramework):\n     - 2 binaries: 1 test binary, 1 ref binary\n     - n>2 binaries: 1 test binary, n-1 ref binaries\"\"\"\n \n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n \n@@ -490,13 +463,13 @@ def add_options(self, parser):\n                           help=\"bitcoind binary to use for reference nodes (if any)\")\n \n     def setup_network(self):\n-        extra_args = [['-whitelist=127.0.0.1']]*self.num_nodes\n+        extra_args = [['-whitelist=127.0.0.1']] * self.num_nodes\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n-        self.nodes = self.start_nodes(\n-            self.num_nodes, self.options.tmpdir, extra_args,\n-            binary=[self.options.testbinary] +\n-            [self.options.refbinary] * (self.num_nodes - 1))\n+        self.add_nodes(self.num_nodes, extra_args,\n+                       binary=[self.options.testbinary] +\n+                       [self.options.refbinary] * (self.num_nodes - 1))\n+        self.start_nodes()\n \n class SkipTest(Exception):\n     \"\"\"This exception is raised to skip a test\"\"\""
      },
      {
        "sha": "12dab57a022d48c2e31dbb45380b6d8828caeaec",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "added",
        "additions": 190,
        "deletions": 0,
        "changes": 190,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -0,0 +1,190 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Class for bitcoind node under test\"\"\"\n+\n+import decimal\n+import errno\n+import http.client\n+import json\n+import logging\n+import os\n+import subprocess\n+import time\n+\n+from .util import (\n+    assert_equal,\n+    get_rpc_proxy,\n+    rpc_url,\n+    wait_until,\n+)\n+from .authproxy import JSONRPCException\n+\n+BITCOIND_PROC_WAIT_TIMEOUT = 60\n+\n+class TestNode():\n+    \"\"\"A class for representing a bitcoind node under test.\n+\n+    This class contains:\n+\n+    - state about the node (whether it's running, etc)\n+    - a Python subprocess.Popen object representing the running process\n+    - an RPC connection to the node\n+\n+    To make things easier for the test writer, a bit of magic is happening under the covers.\n+    Any unrecognised messages will be dispatched to the RPC connection.\"\"\"\n+\n+    def __init__(self, i, dirname, extra_args, rpchost, timewait, binary, stderr, mocktime, coverage_dir):\n+        self.index = i\n+        self.datadir = os.path.join(dirname, \"node\" + str(i))\n+        self.rpchost = rpchost\n+        if timewait:\n+            self.rpc_timeout = timewait\n+        else:\n+            # Wait for up to 60 seconds for the RPC server to respond\n+            self.rpc_timeout = 60\n+        if binary is None:\n+            self.binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n+        else:\n+            self.binary = binary\n+        self.stderr = stderr\n+        self.coverage_dir = coverage_dir\n+        # Most callers will just need to add extra args to the standard list below. For those callers that need more flexibity, they can just set the args property directly.\n+        self.extra_args = extra_args\n+        self.args = [self.binary, \"-datadir=\" + self.datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(mocktime), \"-uacomment=testnode%d\" % i]\n+\n+        self.cli = TestNodeCLI(os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), self.datadir)\n+\n+        self.running = False\n+        self.process = None\n+        self.rpc_connected = False\n+        self.rpc = None\n+        self.url = None\n+        self.log = logging.getLogger('TestFramework.node%d' % i)\n+\n+    def __getattr__(self, *args, **kwargs):\n+        \"\"\"Dispatches any unrecognised messages to the RPC connection.\"\"\"\n+        assert self.rpc_connected and self.rpc is not None, \"Error: no RPC connection\"\n+        return self.rpc.__getattr__(*args, **kwargs)\n+\n+    def start(self, extra_args=None, stderr=None):\n+        \"\"\"Start the node.\"\"\"\n+        if extra_args is None:\n+            extra_args = self.extra_args\n+        if stderr is None:\n+            stderr = self.stderr\n+        self.process = subprocess.Popen(self.args + extra_args, stderr=stderr)\n+        self.running = True\n+        self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n+\n+    def wait_for_rpc_connection(self):\n+        \"\"\"Sets up an RPC connection to the bitcoind process. Returns False if unable to connect.\"\"\"\n+        # Poll at a rate of four times per second\n+        poll_per_s = 4\n+        for _ in range(poll_per_s * self.rpc_timeout):\n+            assert self.process.poll() is None, \"bitcoind exited with status %i during initialization\" % self.process.returncode\n+            try:\n+                self.rpc = get_rpc_proxy(rpc_url(self.datadir, self.index, self.rpchost), self.index, timeout=self.rpc_timeout, coveragedir=self.coverage_dir)\n+                self.rpc.getblockcount()\n+                # If the call to getblockcount() succeeds then the RPC connection is up\n+                self.rpc_connected = True\n+                self.url = self.rpc.url\n+                self.log.debug(\"RPC successfully started\")\n+                return\n+            except IOError as e:\n+                if e.errno != errno.ECONNREFUSED:  # Port not yet open?\n+                    raise  # unknown IO error\n+            except JSONRPCException as e:  # Initialization phase\n+                if e.error['code'] != -28:  # RPC in warmup?\n+                    raise  # unknown JSON RPC exception\n+            except ValueError as e:  # cookie file not found and no rpcuser or rpcassword. bitcoind still starting\n+                if \"No RPC credentials\" not in str(e):\n+                    raise\n+            time.sleep(1.0 / poll_per_s)\n+        raise AssertionError(\"Unable to connect to bitcoind\")\n+\n+    def get_wallet_rpc(self, wallet_name):\n+        assert self.rpc_connected\n+        assert self.rpc\n+        wallet_path = \"wallet/%s\" % wallet_name\n+        return self.rpc / wallet_path\n+\n+    def stop_node(self):\n+        \"\"\"Stop the node.\"\"\"\n+        if not self.running:\n+            return\n+        self.log.debug(\"Stopping node\")\n+        try:\n+            self.stop()\n+        except http.client.CannotSendRequest:\n+            self.log.exception(\"Unable to stop node.\")\n+\n+    def is_node_stopped(self):\n+        \"\"\"Checks whether the node has stopped.\n+\n+        Returns True if the node has stopped. False otherwise.\n+        This method is responsible for freeing resources (self.process).\"\"\"\n+        if not self.running:\n+            return True\n+        return_code = self.process.poll()\n+        if return_code is None:\n+            return False\n+\n+        # process has stopped. Assert that it didn't return an error code.\n+        assert_equal(return_code, 0)\n+        self.running = False\n+        self.process = None\n+        self.rpc_connected = False\n+        self.rpc = None\n+        self.log.debug(\"Node stopped\")\n+        return True\n+\n+    def wait_until_stopped(self, timeout=BITCOIND_PROC_WAIT_TIMEOUT):\n+        wait_until(self.is_node_stopped, timeout=timeout)\n+\n+    def node_encrypt_wallet(self, passphrase):\n+        \"\"\"\"Encrypts the wallet.\n+\n+        This causes bitcoind to shutdown, so this method takes\n+        care of cleaning up resources.\"\"\"\n+        self.encryptwallet(passphrase)\n+        self.wait_until_stopped()\n+\n+class TestNodeCLI():\n+    \"\"\"Interface to bitcoin-cli for an individual node\"\"\"\n+\n+    def __init__(self, binary, datadir):\n+        self.args = []\n+        self.binary = binary\n+        self.datadir = datadir\n+        self.input = None\n+\n+    def __call__(self, *args, input=None):\n+        # TestNodeCLI is callable with bitcoin-cli command-line args\n+        self.args = [str(arg) for arg in args]\n+        self.input = input\n+        return self\n+\n+    def __getattr__(self, command):\n+        def dispatcher(*args, **kwargs):\n+            return self.send_cli(command, *args, **kwargs)\n+        return dispatcher\n+\n+    def send_cli(self, command, *args, **kwargs):\n+        \"\"\"Run bitcoin-cli command. Deserializes returned string as python object.\"\"\"\n+\n+        pos_args = [str(arg) for arg in args]\n+        named_args = [str(key) + \"=\" + str(value) for (key, value) in kwargs.items()]\n+        assert not (pos_args and named_args), \"Cannot use positional arguments and named arguments in the same bitcoin-cli call\"\n+        p_args = [self.binary, \"-datadir=\" + self.datadir] + self.args\n+        if named_args:\n+            p_args += [\"-named\"]\n+        p_args += [command] + pos_args + named_args\n+        process = subprocess.Popen(p_args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n+        cli_stdout, cli_stderr = process.communicate(input=self.input)\n+        returncode = process.poll()\n+        if returncode:\n+            # Ignore cli_stdout, raise with cli_stderr\n+            raise subprocess.CalledProcessError(returncode, self.binary, output=cli_stderr)\n+        return json.loads(cli_stdout, parse_float=decimal.Decimal)"
      },
      {
        "sha": "64966adb9738fc0814c480f6ad4d5b9800ff63dc",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 59,
        "deletions": 4,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -7,11 +7,13 @@\n from base64 import b64encode\n from binascii import hexlify, unhexlify\n from decimal import Decimal, ROUND_DOWN\n+import hashlib\n import json\n import logging\n import os\n import random\n import re\n+from subprocess import CalledProcessError\n import time\n \n from . import coverage\n@@ -57,18 +59,42 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n+def assert_raises_process_error(returncode, output, fun, *args, **kwds):\n+    \"\"\"Execute a process and asserts the process return code and output.\n+\n+    Calls function `fun` with arguments `args` and `kwds`. Catches a CalledProcessError\n+    and verifies that the return code and output are as expected. Throws AssertionError if\n+    no CalledProcessError was raised or if the return code and output are not as expected.\n+\n+    Args:\n+        returncode (int): the process return code.\n+        output (string): [a substring of] the process output.\n+        fun (function): the function to call. This should execute a process.\n+        args*: positional arguments for the function.\n+        kwds**: named arguments for the function.\n+    \"\"\"\n+    try:\n+        fun(*args, **kwds)\n+    except CalledProcessError as e:\n+        if returncode != e.returncode:\n+            raise AssertionError(\"Unexpected returncode %i\" % e.returncode)\n+        if output not in e.output:\n+            raise AssertionError(\"Expected substring not found:\" + e.output)\n+    else:\n+        raise AssertionError(\"No exception raised\")\n+\n def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n     \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n \n     Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException\n     and verifies that the error code and message are as expected. Throws AssertionError if\n-    no JSONRPCException was returned or if the error code/message are not as expected.\n+    no JSONRPCException was raised or if the error code/message are not as expected.\n \n     Args:\n         code (int), optional: the error code returned by the RPC call (defined\n             in src/rpc/protocol.h). Set to None if checking the error code is not required.\n         message (string), optional: [a substring of] the error string returned by the\n-            RPC call. Set to None if checking the error string is not required\n+            RPC call. Set to None if checking the error string is not required.\n         fun (function): the function to call. This should be the name of an RPC.\n         args*: positional arguments for the function.\n         kwds**: named arguments for the function.\n@@ -148,6 +174,13 @@ def count_bytes(hex_string):\n def bytes_to_hex_str(byte_str):\n     return hexlify(byte_str).decode('ascii')\n \n+def hash256(byte_str):\n+    sha256 = hashlib.sha256()\n+    sha256.update(byte_str)\n+    sha256d = hashlib.sha256()\n+    sha256d.update(sha256.digest())\n+    return sha256d.digest()[::-1]\n+\n def hex_str_to_bytes(hex_str):\n     return unhexlify(hex_str.encode('ascii'))\n \n@@ -157,6 +190,28 @@ def str_to_b64str(string):\n def satoshi_round(amount):\n     return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n \n+def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf'), lock=None):\n+    if attempts == float('inf') and timeout == float('inf'):\n+        timeout = 60\n+    attempt = 0\n+    timeout += time.time()\n+\n+    while attempt < attempts and time.time() < timeout:\n+        if lock:\n+            with lock:\n+                if predicate():\n+                    return\n+        else:\n+            if predicate():\n+                return\n+        attempt += 1\n+        time.sleep(0.05)\n+\n+    # Print the cause of the timeout\n+    assert_greater_than(attempts, attempt)\n+    assert_greater_than(timeout, time.time())\n+    raise RuntimeError('Unreachable')\n+\n # RPC/P2P connection constants and functions\n ############################################\n \n@@ -204,7 +259,7 @@ def rpc_port(n):\n     return PORT_MIN + PORT_RANGE + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n def rpc_url(datadir, i, rpchost=None):\n-    rpc_u, rpc_p = get_auth_cookie(datadir, i)\n+    rpc_u, rpc_p = get_auth_cookie(datadir)\n     host = '127.0.0.1'\n     port = rpc_port(i)\n     if rpchost:\n@@ -232,7 +287,7 @@ def initialize_datadir(dirname, n):\n def get_datadir_path(dirname, n):\n     return os.path.join(dirname, \"node\" + str(n))\n \n-def get_auth_cookie(datadir, n):\n+def get_auth_cookie(datadir):\n     user = None\n     password = None\n     if os.path.isfile(os.path.join(datadir, \"bitcoin.conf\")):"
      },
      {
        "sha": "fae4f66d70cde46fd9e16c039ea75e5dfd173705",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -81,6 +81,7 @@\n     # vv Tests less than 30s vv\n     'keypool-topup.py',\n     'zmq_test.py',\n+    'bitcoin_cli.py',\n     'mempool_resurrect_test.py',\n     'txn_doublespend.py --mineblock',\n     'txn_clone.py',\n@@ -279,6 +280,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, tmpdir, jobs=1, enable_cove\n     #Set env vars\n     if \"BITCOIND\" not in os.environ:\n         os.environ[\"BITCOIND\"] = build_dir + '/src/bitcoind' + exeext\n+        os.environ[\"BITCOINCLI\"] = build_dir + '/src/bitcoin-cli' + exeext\n \n     tests_dir = src_dir + '/test/functional/'\n "
      },
      {
        "sha": "740bb2d4c5c061828a124eccc33677e64aa21d3c",
        "filename": "test/functional/txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_clone.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -8,11 +8,8 @@\n from test_framework.util import *\n \n class TxnMallTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 4\n-        self.setup_clean_chain = False\n \n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\","
      },
      {
        "sha": "69629ef95196ebd765422d597e34a69dbcfd154b",
        "filename": "test/functional/txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_doublespend.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -8,11 +8,8 @@\n from test_framework.util import *\n \n class TxnMallTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 4\n-        self.setup_clean_chain = False\n \n     def add_options(self, parser):\n         parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\","
      },
      {
        "sha": "78236b239374a794703e9635666828586b0a7045",
        "filename": "test/functional/uptime.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/uptime.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/uptime.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/uptime.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -13,9 +13,7 @@\n \n \n class UptimeTest(BitcoinTestFramework):\n-    def __init__(self):\n-        super().__init__()\n-\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n "
      },
      {
        "sha": "40726d2a760909af1c8fb221e18aa5b9cff49073",
        "filename": "test/functional/wallet-accounts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-accounts.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -17,9 +17,7 @@\n from test_framework.util import assert_equal\n \n class WalletAccountsTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n         self.extra_args = [[]]"
      },
      {
        "sha": "39b7164d6e6e3e80335de02a0f81b6439d48ea9a",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -56,10 +56,7 @@ def read_dump(file_name, addrs, hd_master_addr_old):\n \n \n class WalletDumpTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = False\n+    def set_test_params(self):\n         self.num_nodes = 1\n         self.extra_args = [[\"-keypool=90\"]]\n \n@@ -68,7 +65,8 @@ def setup_network(self, split=False):\n         # longer than the default 30 seconds due to an expensive\n         # CWallet::TopUpKeyPool call, and the encryptwallet RPC made later in\n         # the test often takes even longer.\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args, timewait=60)\n+        self.add_nodes(self.num_nodes, self.extra_args, timewait=60)\n+        self.start_nodes()\n \n     def run_test (self):\n         tmpdir = self.options.tmpdir\n@@ -94,9 +92,8 @@ def run_test (self):\n         assert_equal(found_addr_rsv, 90*2) # 90 keys plus 100% internal keys\n \n         #encrypt wallet, restart, unlock and dump\n-        self.nodes[0].encryptwallet('test')\n-        self.bitcoind_processes[0].wait()\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, self.extra_args[0])\n+        self.nodes[0].node_encrypt_wallet('test')\n+        self.start_node(0)\n         self.nodes[0].walletpassphrase('test', 10)\n         # Should be a no-op:\n         self.nodes[0].keypoolrefill()"
      },
      {
        "sha": "ce1e7744e903fe60062413ac106ee3248bd77175",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -6,16 +6,14 @@\n \n import time\n \n-from test_framework.test_framework import BitcoinTestFramework, BITCOIND_PROC_WAIT_TIMEOUT\n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_raises_jsonrpc,\n )\n \n class WalletEncryptionTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n@@ -30,9 +28,8 @@ def run_test(self):\n         assert_equal(len(privkey), 52)\n \n         # Encrypt the wallet\n-        self.nodes[0].encryptwallet(passphrase)\n-        self.bitcoind_processes[0].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.nodes[0].node_encrypt_wallet(passphrase)\n+        self.start_node(0)\n \n         # Test that the wallet is encrypted\n         assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)"
      },
      {
        "sha": "68b5e5b8d48a9b23a8b0efba8cbc7b8794454676",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -11,11 +11,8 @@\n )\n import shutil\n \n-\n class WalletHDTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n         self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=0']]\n@@ -25,8 +22,8 @@ def run_test (self):\n \n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n-        self.assert_start_raises_init_error(1, self.options.tmpdir, ['-usehd=0'], 'already existing HD wallet')\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.assert_start_raises_init_error(1, ['-usehd=0'], 'already existing HD wallet')\n+        self.start_node(1)\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         # Make sure we use hd, keep masterkeyid\n@@ -76,7 +73,7 @@ def run_test (self):\n         shutil.rmtree(tmpdir + \"/node1/regtest/blocks\")\n         shutil.rmtree(tmpdir + \"/node1/regtest/chainstate\")\n         shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1])\n+        self.start_node(1)\n \n         # Assert that derivation is deterministic\n         hd_add_2 = None\n@@ -91,7 +88,7 @@ def run_test (self):\n \n         # Needs rescan\n         self.stop_node(1)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir, self.extra_args[1] + ['-rescan'])\n+        self.start_node(1, extra_args=self.extra_args[1] + ['-rescan'])\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n \n         # send a tx and make sure its using the internal chain for the changeoutput"
      },
      {
        "sha": "de3aa8a875544e365ead9ab120df624d1f789d37",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 53,
        "deletions": 39,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -7,28 +7,28 @@\n from test_framework.util import *\n \n class WalletTest(BitcoinTestFramework):\n-\n-    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n-        \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n-        fee = balance_with_fee - curr_balance\n-        assert_fee_amount(fee, tx_size, fee_per_byte * 1000)\n-        return curr_balance\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = True\n+    def set_test_params(self):\n         self.num_nodes = 4\n+        self.setup_clean_chain = True\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n \n     def setup_network(self):\n-        self.nodes = self.start_nodes(3, self.options.tmpdir, self.extra_args[:3])\n+        self.add_nodes(4, self.extra_args)\n+        self.start_node(0)\n+        self.start_node(1)\n+        self.start_node(2)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n-    def run_test(self):\n+    def check_fee_amount(self, curr_balance, balance_with_fee, fee_per_byte, tx_size):\n+        \"\"\"Return curr_balance after asserting the fee was in range\"\"\"\n+        fee = balance_with_fee - curr_balance\n+        assert_fee_amount(fee, tx_size, fee_per_byte * 1000)\n+        return curr_balance\n \n+    def run_test(self):\n         # Check that there's no UTXO on none of the nodes\n         assert_equal(len(self.nodes[0].listunspent()), 0)\n         assert_equal(len(self.nodes[1].listunspent()), 0)\n@@ -42,9 +42,9 @@ def run_test(self):\n         assert_equal(walletinfo['immature_balance'], 50)\n         assert_equal(walletinfo['balance'], 0)\n \n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         self.nodes[1].generate(101)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n         assert_equal(self.nodes[1].getbalance(), 50)\n@@ -56,6 +56,15 @@ def run_test(self):\n         assert_equal(len(self.nodes[1].listunspent()), 1)\n         assert_equal(len(self.nodes[2].listunspent()), 0)\n \n+        self.log.info(\"test gettxout\")\n+        confirmed_txid, confirmed_index = utxos[0][\"txid\"], utxos[0][\"vout\"]\n+        # First, outputs that are unspent both in the chain and in the\n+        # mempool should appear with or without include_mempool\n+        txout = self.nodes[0].gettxout(txid=confirmed_txid, n=confirmed_index, include_mempool=False)\n+        assert_equal(txout['value'], 50)\n+        txout = self.nodes[0].gettxout(txid=confirmed_txid, n=confirmed_index, include_mempool=True)\n+        assert_equal(txout['value'], 50)\n+        \n         # Send 21 BTC from 0 to 2 using sendtoaddress call.\n         # Locked memory should use at least 32 bytes to sign each transaction\n         self.log.info(\"test getmemoryinfo\")\n@@ -65,10 +74,9 @@ def run_test(self):\n         memory_after = self.nodes[0].getmemoryinfo()\n         assert(memory_before['locked']['used'] + 64 <= memory_after['locked']['used'])\n \n-        self.log.info(\"test gettxout\")\n+        self.log.info(\"test gettxout (second part)\")\n         # utxo spent in mempool should be visible if you exclude mempool\n         # but invisible if you include mempool\n-        confirmed_txid, confirmed_index = utxos[0][\"txid\"], utxos[0][\"vout\"]\n         txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, False)\n         assert_equal(txout['value'], 50)\n         txout = self.nodes[0].gettxout(confirmed_txid, confirmed_index, True)\n@@ -88,7 +96,7 @@ def run_test(self):\n \n         # Have node0 mine a block, thus it will collect its own fee.\n         self.nodes[0].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # Exercise locking of unspent outputs\n         unspent_0 = self.nodes[2].listunspent()[0]\n@@ -101,7 +109,7 @@ def run_test(self):\n \n         # Have node1 generate 100 blocks (so node0 can recover the fee)\n         self.nodes[1].generate(100)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # node0 should end up with 100 btc in block rewards plus fees, but\n         # minus the 21 plus fees sent to node2\n@@ -130,7 +138,7 @@ def run_test(self):\n \n         # Have node1 mine a block to confirm transactions:\n         self.nodes[1].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         assert_equal(self.nodes[0].getbalance(), 0)\n         assert_equal(self.nodes[2].getbalance(), 94)\n@@ -142,30 +150,30 @@ def run_test(self):\n         self.nodes[2].settxfee(fee_per_byte * 1000)\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", False)\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), Decimal('84'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n         assert_equal(self.nodes[0].getbalance(), Decimal('10'))\n \n         # Send 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendtoaddress(address, 10, \"\", \"\", True)\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), Decimal('20'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n \n         # Sendmany 10 BTC\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [])\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_0_bal += Decimal('10')\n         node_2_bal = self.check_fee_amount(self.nodes[2].getbalance(), node_2_bal - Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n         assert_equal(self.nodes[0].getbalance(), node_0_bal)\n \n         # Sendmany 10 BTC with subtract fee from amount\n         txid = self.nodes[2].sendmany('from1', {address: 10}, 0, \"\", [address])\n         self.nodes[2].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal -= Decimal('10')\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, count_bytes(self.nodes[2].getrawtransaction(txid)))\n@@ -176,9 +184,9 @@ def run_test(self):\n         # EXPECT: nodes[3] should have those transactions in its mempool.\n         txid1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n         txid2 = self.nodes[1].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n-        sync_mempools(self.nodes)\n+        sync_mempools(self.nodes[0:2])\n \n-        self.nodes.append(self.start_node(3, self.options.tmpdir, self.extra_args[3]))\n+        self.start_node(3)\n         connect_nodes_bi(self.nodes, 0, 3)\n         sync_blocks(self.nodes)\n \n@@ -222,22 +230,24 @@ def run_test(self):\n \n         #do some -walletbroadcast tests\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(3, self.options.tmpdir, [[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"]])\n+        self.start_node(0, [\"-walletbroadcast=0\"])\n+        self.start_node(1, [\"-walletbroadcast=0\"])\n+        self.start_node(2, [\"-walletbroadcast=0\"])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2)\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         self.nodes[1].generate(1) #mine a block, tx should not be in there\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         assert_equal(self.nodes[2].getbalance(), node_2_bal) #should not be changed because tx was not broadcasted\n \n         #now broadcast from another node, mine a block, sync, and check the balance\n         self.nodes[1].sendrawtransaction(txObjNotBroadcasted['hex'])\n         self.nodes[1].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         node_2_bal += 2\n         txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n@@ -247,14 +257,16 @@ def run_test(self):\n \n         #restart the nodes with -walletbroadcast=1\n         self.stop_nodes()\n-        self.nodes = self.start_nodes(3, self.options.tmpdir)\n+        self.start_node(0)\n+        self.start_node(1)\n+        self.start_node(2)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        sync_blocks(self.nodes)\n+        sync_blocks(self.nodes[0:3])\n \n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        sync_blocks(self.nodes[0:3])\n         node_2_bal += 2\n \n         #tx should be added to balance because after restarting the nodes tx should be broadcastet\n@@ -285,7 +297,7 @@ def run_test(self):\n         address_to_import = self.nodes[2].getnewaddress()\n         txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n         self.nodes[0].generate(1)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # 2. Import address from node2 to node1\n         self.nodes[1].importaddress(address_to_import)\n@@ -311,15 +323,15 @@ def run_test(self):\n         cbAddr = self.nodes[1].getnewaddress()\n         blkHash = self.nodes[0].generatetoaddress(1, cbAddr)[0]\n         cbTxId = self.nodes[0].getblock(blkHash)['tx'][0]\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n \n         # Check that the txid and balance is found by node1\n         self.nodes[1].gettransaction(cbTxId)\n \n         # check if wallet or blockchain maintenance changes the balance\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         blocks = self.nodes[0].generate(2)\n-        self.sync_all()\n+        self.sync_all([self.nodes[0:3]])\n         balance_nodes = [self.nodes[i].getbalance() for i in range(3)]\n         block_count = self.nodes[0].getblockcount()\n \n@@ -350,7 +362,9 @@ def run_test(self):\n             self.log.info(\"check \" + m)\n             self.stop_nodes()\n             # set lower ancestor limit for later\n-            self.nodes = self.start_nodes(3, self.options.tmpdir, [[m, \"-limitancestorcount=\"+str(chainlimit)]] * 3)\n+            self.start_node(0, [m, \"-limitancestorcount=\"+str(chainlimit)])\n+            self.start_node(1, [m, \"-limitancestorcount=\"+str(chainlimit)])\n+            self.start_node(2, [m, \"-limitancestorcount=\"+str(chainlimit)])\n             while m == '-reindex' and [block_count] * 3 != [self.nodes[i].getblockcount() for i in range(3)]:\n                 # reindex will leave rpc warm up \"early\"; Wait for it to finish\n                 time.sleep(0.1)\n@@ -398,7 +412,7 @@ def run_test(self):\n         # Try with walletrejectlongchains\n         # Double chain limit but require combining inputs, so we pass SelectCoinsMinConf\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n+        self.start_node(0, extra_args=[\"-walletrejectlongchains\", \"-limitancestorcount=\"+str(2*chainlimit)])\n \n         # wait for loadmempool\n         timeout = 10"
      },
      {
        "sha": "15ea26afa1605f453bd1dc8fb46d033377b47c68",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -37,11 +37,9 @@\n from test_framework.util import *\n \n class WalletBackupTest(BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n-        self.setup_clean_chain = True\n+    def set_test_params(self):\n         self.num_nodes = 4\n+        self.setup_clean_chain = True\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n \n@@ -78,9 +76,9 @@ def do_one_round(self):\n \n     # As above, this mirrors the original bash test.\n     def start_three(self):\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n-        self.nodes[1] = self.start_node(1, self.options.tmpdir)\n-        self.nodes[2] = self.start_node(2, self.options.tmpdir)\n+        self.start_node(0)\n+        self.start_node(1)\n+        self.start_node(2)\n         connect_nodes(self.nodes[0], 3)\n         connect_nodes(self.nodes[1], 3)\n         connect_nodes(self.nodes[2], 3)"
      },
      {
        "sha": "83b11035c89ec5a7a02828c2cfb9f3fe7df18f27",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -15,14 +15,14 @@\n   been zapped.\n \"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal,\n-                                 assert_raises_jsonrpc,\n-                                 )\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    wait_until,\n+)\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n@@ -48,23 +48,25 @@ def run_test(self):\n \n         # Stop-start node0. Both confirmed and unconfirmed transactions remain in the wallet.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir)\n+        self.start_node(0)\n \n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n         assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n         # Stop node0 and restart with zapwallettxes and persistmempool. The unconfirmed\n         # transaction is zapped from the wallet, but is re-added when the mempool is reloaded.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n+        self.start_node(0, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n+\n+        wait_until(lambda: self.nodes[0].getmempoolinfo()['size'] == 1, timeout=3)\n \n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n         assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n \n         # Stop node0 and restart with zapwallettxes, but not persistmempool.\n         # The unconfirmed transaction is zapped and is no longer in the wallet.\n         self.stop_node(0)\n-        self.nodes[0] = self.start_node(0, self.options.tmpdir, [\"-zapwallettxes=2\"])\n+        self.start_node(0, [\"-zapwallettxes=2\"])\n \n         # tx1 is still be available because it was confirmed\n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)"
      },
      {
        "sha": "382ef5bae2891df08c627e9878a0aaf45205feef",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 49,
        "deletions": 10,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -10,12 +10,11 @@\n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n from test_framework.util import (assert_equal,\n                                  bytes_to_hex_str,\n-                                 )\n+                                 hash256,\n+                                )\n \n class ZMQTest (BitcoinTestFramework):\n-\n-    def __init__(self):\n-        super().__init__()\n+    def set_test_params(self):\n         self.num_nodes = 2\n \n     def setup_nodes(self):\n@@ -39,10 +38,14 @@ def setup_nodes(self):\n         self.zmqSubSocket.set(zmq.RCVTIMEO, 60000)\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawblock\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"rawtx\")\n         ip_address = \"tcp://127.0.0.1:28332\"\n         self.zmqSubSocket.connect(ip_address)\n-        extra_args = [['-zmqpubhashtx=%s' % ip_address, '-zmqpubhashblock=%s' % ip_address], []]\n-        self.nodes = self.start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.extra_args = [['-zmqpubhashblock=%s' % ip_address, '-zmqpubhashtx=%s' % ip_address,\n+                       '-zmqpubrawblock=%s' % ip_address, '-zmqpubrawtx=%s' % ip_address], []]\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+        self.start_nodes()\n \n     def run_test(self):\n         try:\n@@ -60,28 +63,51 @@ def _zmq_test(self):\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n         assert_equal(topic, b\"hashtx\")\n-        body = msg[1]\n+        txhash = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, 0)  # must be sequence 0 on hashtx\n \n+        # rawtx\n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawtx\")\n+        body = msg[1]\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, 0) # must be sequence 0 on rawtx\n+\n+        # Check that the rawtx hashes to the hashtx\n+        assert_equal(hash256(body), txhash)\n+\n         self.log.info(\"Wait for block\")\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n+        assert_equal(topic, b\"hashblock\")\n         body = msg[1]\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, 0)  # must be sequence 0 on hashblock\n         blkhash = bytes_to_hex_str(body)\n-\n         assert_equal(genhashes[0], blkhash)  # blockhash from generate must be equal to the hash received over zmq\n \n+        # rawblock\n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawblock\")\n+        body = msg[1]\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, 0) #must be sequence 0 on rawblock\n+\n+        # Check the hash of the rawblock's header matches generate\n+        assert_equal(genhashes[0], bytes_to_hex_str(hash256(body[:80])))\n+\n         self.log.info(\"Generate 10 blocks (and 10 coinbase txes)\")\n         n = 10\n         genhashes = self.nodes[1].generate(n)\n         self.sync_all()\n \n         zmqHashes = []\n+        zmqRawHashed = []\n         blockcount = 0\n-        for x in range(n * 2):\n+        for x in range(n * 4):\n             msg = self.zmqSubSocket.recv_multipart()\n             topic = msg[0]\n             body = msg[1]\n@@ -90,9 +116,14 @@ def _zmq_test(self):\n                 msgSequence = struct.unpack('<I', msg[-1])[-1]\n                 assert_equal(msgSequence, blockcount + 1)\n                 blockcount += 1\n+            if topic == b\"rawblock\":\n+                zmqRawHashed.append(bytes_to_hex_str(hash256(body[:80])))\n+                msgSequence = struct.unpack('<I', msg[-1])[-1]\n+                assert_equal(msgSequence, blockcount)\n \n         for x in range(n):\n             assert_equal(genhashes[x], zmqHashes[x])  # blockhash from generate must be equal to the hash received over zmq\n+            assert_equal(genhashes[x], zmqRawHashed[x])\n \n         self.log.info(\"Wait for tx from second node\")\n         # test tx from a second node\n@@ -102,13 +133,21 @@ def _zmq_test(self):\n         # now we should receive a zmq msg because the tx was broadcast\n         msg = self.zmqSubSocket.recv_multipart()\n         topic = msg[0]\n-        body = msg[1]\n         assert_equal(topic, b\"hashtx\")\n+        body = msg[1]\n         hashZMQ = bytes_to_hex_str(body)\n         msgSequence = struct.unpack('<I', msg[-1])[-1]\n         assert_equal(msgSequence, blockcount + 1)\n \n+        msg = self.zmqSubSocket.recv_multipart()\n+        topic = msg[0]\n+        assert_equal(topic, b\"rawtx\")\n+        body = msg[1]\n+        hashedZMQ = bytes_to_hex_str(hash256(body))\n+        msgSequence = struct.unpack('<I', msg[-1])[-1]\n+        assert_equal(msgSequence, blockcount+1)\n         assert_equal(hashRPC, hashZMQ)  # txid from sendtoaddress must be equal to the hash received over zmq\n+        assert_equal(hashRPC, hashedZMQ)\n \n if __name__ == '__main__':\n     ZMQTest().main()"
      },
      {
        "sha": "ef34955d90904c2176b8eef443d54b1b0ae957a5",
        "filename": "test/util/bitcoin-util-test.py",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51bad9195eb435200626beccbaf6b60774a4a894/test/util/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51bad9195eb435200626beccbaf6b60774a4a894/test/util/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/bitcoin-util-test.py?ref=51bad9195eb435200626beccbaf6b60774a4a894",
        "patch": "@@ -9,9 +9,14 @@\n \n Can also be run manually.\"\"\"\n \n+from __future__ import division,print_function,unicode_literals\n+\n import argparse\n import binascii\n-import configparser\n+try:\n+    import configparser\n+except ImportError:\n+    import ConfigParser as configparser\n import difflib\n import json\n import logging\n@@ -22,7 +27,9 @@\n \n def main():\n     config = configparser.ConfigParser()\n-    config.read_file(open(os.path.dirname(__file__) + \"/../config.ini\"))\n+    config.optionxform = str\n+    config.readfp(open(os.path.join(os.path.dirname(__file__), \"../config.ini\")))\n+    env_conf = dict(config.items('environment'))\n \n     parser = argparse.ArgumentParser(description=__doc__)\n     parser.add_argument('-v', '--verbose', action='store_true')\n@@ -37,7 +44,7 @@ def main():\n     # Add the format/level to the logger\n     logging.basicConfig(format=formatter, level=level)\n \n-    bctester(config[\"environment\"][\"SRCDIR\"] + \"/test/util/data\", \"bitcoin-util-test.json\", config[\"environment\"])\n+    bctester(os.path.join(env_conf[\"SRCDIR\"], \"test/util/data\"), \"bitcoin-util-test.json\", env_conf)\n \n def bctester(testDir, input_basename, buildenv):\n     \"\"\" Loads and parses the input file, runs all tests and reports results\"\"\""
      }
    ]
  },
  {
    "sha": "20cdc2b36c40221a0eec942a1fbdf38ca7c4e005",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMGNkYzJiMzZjNDAyMjFhMGVlYzk0MmExZmJkZjM4Y2E3YzRlMDA1",
    "commit": {
      "author": {
        "name": "Pedro Branco",
        "email": "branco@uphold.com",
        "date": "2017-10-11T10:12:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-17T19:44:23Z"
      },
      "message": "Fix importmulti bug when importing an already imported key\n\nGithub-Pull: #11483\nRebased-From: a44a215177ab55b4a3b36a7980c313e908e2dd18",
      "tree": {
        "sha": "0aa67d9446e49456d0cd4635a44f7b9e3a93e295",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0aa67d9446e49456d0cd4635a44f7b9e3a93e295"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/20cdc2b36c40221a0eec942a1fbdf38ca7c4e005",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20cdc2b36c40221a0eec942a1fbdf38ca7c4e005",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/20cdc2b36c40221a0eec942a1fbdf38ca7c4e005",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20cdc2b36c40221a0eec942a1fbdf38ca7c4e005/comments",
    "author": null,
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "405e069d3b8c71b0f5161d9dfb2334a0bb988f2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/405e069d3b8c71b0f5161d9dfb2334a0bb988f2e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/405e069d3b8c71b0f5161d9dfb2334a0bb988f2e"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 13,
      "deletions": 1
    },
    "files": [
      {
        "sha": "6c8ff7fc3b2ef4b3fe25a6f4db868ac3bc1f3b62",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20cdc2b36c40221a0eec942a1fbdf38ca7c4e005/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20cdc2b36c40221a0eec942a1fbdf38ca7c4e005/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=20cdc2b36c40221a0eec942a1fbdf38ca7c4e005",
        "patch": "@@ -960,7 +960,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n                 pwallet->SetAddressBook(vchAddress, label, \"receive\");\n \n                 if (pwallet->HaveKey(vchAddress)) {\n-                    return false;\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }\n \n                 pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;"
      },
      {
        "sha": "783f06f9121e83fc4bf23eea634b7a020181016a",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/20cdc2b36c40221a0eec942a1fbdf38ca7c4e005/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/20cdc2b36c40221a0eec942a1fbdf38ca7c4e005/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=20cdc2b36c40221a0eec942a1fbdf38ca7c4e005",
        "patch": "@@ -170,6 +170,18 @@ def run_test (self):\n         assert_equal(address_assert['ismine'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n+        self.log.info(\"Should not import an address with private key if is already imported\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -4)\n+        assert_equal(result[0]['error']['message'], 'The wallet already contains the private key for this address or script')\n+\n         # Address + Private key + watchonly\n         self.log.info(\"Should not import an address with private key and with watchonly\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())"
      }
    ]
  },
  {
    "sha": "1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjQ2ZjljNzYwMzYxMGE1NWIzNmVlMWYxZjA1N2VjYWJhZjNlNmRl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T18:40:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-18T18:55:35Z"
      },
      "message": "Merge #11447: 0.15.1: Backports\n\n20cdc2b Fix importmulti bug when importing an already imported key (Pedro Branco)\n405e069 Update importprivkey named args documentation (Dusty Williams)\nc94527a [Docs] Update Windows build instructions for using WSL and Ubuntu 17.04 (fanquake)\n27e861a net: Improve and document SOCKS code (Wladimir J. van der Laan)\ndea3b87 Add new step to clean $PATH var by removing /mnt specific Window's %PATH% paths that cause issues with the make system (Donal OConnor)\na43be5b rpc: Prevent `dumpwallet` from overwriting files (Wladimir J. van der Laan)\nb6c0209 Fix validationinterface build on super old boost/clang (Matt Corallo)\n6a62c74 qt: Backup former GUI settings on `-resetguisettings` (Wladimir J. van der Laan)\n0fe2a9a when clearing addrman clear mapInfo and mapAddr (Gregory Sanders)\n6b4d9f2 wallet: update stored witness in AddToWallet (Suhas Daftuar)\n62d18cd doc: Prepare release notes for 0.15.1 (MarcoFalke)\n8b61aee Put back inadvertently removed copyright notices (Paul Berg)\n75997c3 Disallow uncompressed pubkeys in bitcoin-tx [multisig] output adds (Matt Corallo)\n8d13b42 Replace save|restoreWindowGeometry with Qt functions (MeshCollider)\n6642558 [Qt] Add delay before filtering transactions Fixes 3141 (Lucas Betschart)\n19d63e8 Remove custom fee radio group (Andrew Chow)\nb1a6c94 rpc: make estimatesmartfee argument naming consistent with documentation (Wladimir J. van der Laan)\n921542e rpc: update cli for estimatefee argument rename (Wladimir J. van der Laan)\n2e31b1d Fix division by zero in time remaining (MeshCollider)\n47c02a8 qt: Use IsMine to validate custom change address (Chris Moore)\n7310f1f [Qt] Fix display of package name on 'open config file' tooltip (Daniel Edgecumbe)\n2cb720a Acquire cs_main lock before cs_wallet during wallet initialization (Russell Yanofsky)\nb278a43 rpc: Write authcookie atomically (Wladimir J. van der Laan)\n50bd3f6 Avoid returning a BIP9Stats object with uninitialized values (practicalswift)\n9e8aae3 [wallet] Close DB on error. (Karl-Johan Alm)\n\nPull request description:\n\n  This mostly backports various commits that fix(ed) bugs and issues.\n\n  However, it also includes two patches for qt that only fix minor issues,\n  as well as some doc patches.\n\nTree-SHA512: 5165e309faf6b4395fdf2f6662ccc0d58306971f3769e675504f17b2055efe29b2919f22d0dbf78c4c2dc7fd5c9d08a2c53345615e4a1df73914526687c9d571",
      "tree": {
        "sha": "0324a1c76e3eb18fd218e378e2d0bc2686cc4955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0324a1c76e3eb18fd218e378e2d0bc2686cc4955"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ56OnAAoJEB5K7WKYbNJdYnEH/2hw3m4iMYY0M6YCxb6ZZ0Un\nZ0ZiXedH+5OzZrsHHe+UaZkPPfK7PjOfxcutR/pzoBidwub96fv9u6TSErlVwmBv\n/TX0JFXmAvmnInbum34vFfp4AAooQk+lxZSo49aoZkgQ0NGq8pi92EUXjMJIQMtl\nGmqgDLOcrnBuhEkWtmPjCZSWc94D/vZ3qtTeCZg5yE5eV/QfJrk7g5jKMprLsBX4\nJiG65y+BEorxJBdOjydSyJyGiveubALyW62BWyAMUPIa10VYwIS4QjDNsQRoG9Uc\neMCakMbAvdBlYVhUEouT73XFfH/V4oXfdiH7opdvdXOFxL1t3aVxYA6Mx1Hjnw0=\n=MIMr\n-----END PGP SIGNATURE-----",
        "payload": "tree 0324a1c76e3eb18fd218e378e2d0bc2686cc4955\nparent 51bad9195eb435200626beccbaf6b60774a4a894\nparent 20cdc2b36c40221a0eec942a1fbdf38ca7c4e005\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1508352009 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508352935 +0200\n\nMerge #11447: 0.15.1: Backports\n\n20cdc2b Fix importmulti bug when importing an already imported key (Pedro Branco)\n405e069 Update importprivkey named args documentation (Dusty Williams)\nc94527a [Docs] Update Windows build instructions for using WSL and Ubuntu 17.04 (fanquake)\n27e861a net: Improve and document SOCKS code (Wladimir J. van der Laan)\ndea3b87 Add new step to clean $PATH var by removing /mnt specific Window's %PATH% paths that cause issues with the make system (Donal OConnor)\na43be5b rpc: Prevent `dumpwallet` from overwriting files (Wladimir J. van der Laan)\nb6c0209 Fix validationinterface build on super old boost/clang (Matt Corallo)\n6a62c74 qt: Backup former GUI settings on `-resetguisettings` (Wladimir J. van der Laan)\n0fe2a9a when clearing addrman clear mapInfo and mapAddr (Gregory Sanders)\n6b4d9f2 wallet: update stored witness in AddToWallet (Suhas Daftuar)\n62d18cd doc: Prepare release notes for 0.15.1 (MarcoFalke)\n8b61aee Put back inadvertently removed copyright notices (Paul Berg)\n75997c3 Disallow uncompressed pubkeys in bitcoin-tx [multisig] output adds (Matt Corallo)\n8d13b42 Replace save|restoreWindowGeometry with Qt functions (MeshCollider)\n6642558 [Qt] Add delay before filtering transactions Fixes 3141 (Lucas Betschart)\n19d63e8 Remove custom fee radio group (Andrew Chow)\nb1a6c94 rpc: make estimatesmartfee argument naming consistent with documentation (Wladimir J. van der Laan)\n921542e rpc: update cli for estimatefee argument rename (Wladimir J. van der Laan)\n2e31b1d Fix division by zero in time remaining (MeshCollider)\n47c02a8 qt: Use IsMine to validate custom change address (Chris Moore)\n7310f1f [Qt] Fix display of package name on 'open config file' tooltip (Daniel Edgecumbe)\n2cb720a Acquire cs_main lock before cs_wallet during wallet initialization (Russell Yanofsky)\nb278a43 rpc: Write authcookie atomically (Wladimir J. van der Laan)\n50bd3f6 Avoid returning a BIP9Stats object with uninitialized values (practicalswift)\n9e8aae3 [wallet] Close DB on error. (Karl-Johan Alm)\n\nPull request description:\n\n  This mostly backports various commits that fix(ed) bugs and issues.\n\n  However, it also includes two patches for qt that only fix minor issues,\n  as well as some doc patches.\n\nTree-SHA512: 5165e309faf6b4395fdf2f6662ccc0d58306971f3769e675504f17b2055efe29b2919f22d0dbf78c4c2dc7fd5c9d08a2c53345615e4a1df73914526687c9d571\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51bad9195eb435200626beccbaf6b60774a4a894",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51bad9195eb435200626beccbaf6b60774a4a894",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51bad9195eb435200626beccbaf6b60774a4a894"
      },
      {
        "sha": "20cdc2b36c40221a0eec942a1fbdf38ca7c4e005",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/20cdc2b36c40221a0eec942a1fbdf38ca7c4e005",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/20cdc2b36c40221a0eec942a1fbdf38ca7c4e005"
      }
    ],
    "stats": {
      "total": 1464,
      "additions": 1299,
      "deletions": 165
    },
    "files": [
      {
        "sha": "45d51c3c7851ed2043b6b540f31fcd0d54dc861f",
        "filename": "COPYING",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/COPYING?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -1,6 +1,7 @@\n The MIT License (MIT)\n \n Copyright (c) 2009-2017 The Bitcoin Core developers\n+Copyright (c) 2009-2017 Bitcoin Developers\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
      },
      {
        "sha": "3b62a106031c86f431981d4bae5f5447ef0efea1",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -249,6 +249,7 @@ EXTRA_DIST += \\\n     test/util/data/txcreatemultisig3.json \\\n     test/util/data/txcreatemultisig4.hex \\\n     test/util/data/txcreatemultisig4.json \\\n+    test/util/data/txcreatemultisig5.json \\\n     test/util/data/txcreateoutpubkey1.hex \\\n     test/util/data/txcreateoutpubkey1.json \\\n     test/util/data/txcreateoutpubkey2.hex \\"
      },
      {
        "sha": "7527a418584b54a67dd83e4b062ad87a86fccc48",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 15,
        "deletions": 4,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -4,10 +4,11 @@ WINDOWS BUILD NOTES\n Below are some notes on how to build Bitcoin Core for Windows.\n \n Most developers use cross-compilation from Ubuntu to build executables for\n-Windows. This is also used to build the release binaries.\n+Windows. Cross-compilation is also used to build the release binaries.\n \n-Currently only building on Ubuntu Trusty 14.04 is supported.\n-Other versions are unsupported or known to be broken (e.g. Ubuntu Xenial 16.04).\n+Currently only building on Ubuntu Trusty 14.04 or Ubuntu Zesty 17.04 or later is supported.\n+Building on Ubuntu Xenial 16.04 is known to be broken, see extensive discussion in issue [8732](https://github.com/bitcoin/bitcoin/issues/8732).\n+While it may be possible to do so with work arounds, it's potentially dangerous and not recommended.\n \n While there are potentially a number of ways to build on Windows (for example using msys / mingw-w64),\n using the Windows Subsystem For Linux is the most straightforward. If you are building with\n@@ -62,6 +63,14 @@ A host toolchain (`build-essential`) is necessary because some dependency\n packages (such as `protobuf`) need to build host utilities that are used in the\n build process.\n \n+\n+If you're building on Ubuntu 17.04 or later, run these two commands, selecting the 'posix' variant for both,\n+to work around issues with mingw-w64. See issue [8732](https://github.com/bitcoin/bitcoin/issues/8732) for more information.\n+```\n+sudo update-alternatives --config x86_64-w64-mingw32-g++\n+sudo update-alternatives --config x86_64-w64-mingw32-gcc\n+```\n+\n ## Building for 64-bit Windows\n \n To build executables for Windows 64-bit, install the following dependencies:\n@@ -70,6 +79,7 @@ To build executables for Windows 64-bit, install the following dependencies:\n \n Then build using:\n \n+    PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n     make HOST=x86_64-w64-mingw32\n     cd ..\n@@ -81,10 +91,11 @@ Then build using:\n \n To build executables for Windows 32-bit, install the following dependencies:\n \n-    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev \n+    sudo apt-get install g++-mingw-w64-i686 mingw-w64-i686-dev\n \n Then build using:\n \n+    PATH=$(echo \"$PATH\" | sed -e 's/:\\/mnt.*//g') # strip out problematic Windows %PATH% imported var\n     cd depends\n     make HOST=i686-w64-mingw32\n     cd .."
      },
      {
        "sha": "3d603445fbfcd7d75a8541f0c7f41c6ee289840e",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -15,6 +15,7 @@\n * wallet.dat: personal wallet (BDB) with keys and transactions\n * .cookie: session RPC authentication cookie (written at start when cookie authentication is used, deleted on shutdown): since 0.12.0\n * onion_private_key: cached Tor hidden service private key for `-listenonion`: since 0.12.0\n+* guisettings.ini.bak: backup of former GUI settings after `-resetguisettings` is used\n \n Only used in pre-0.8.0\n ---------------------"
      },
      {
        "sha": "0235e1c606ecd071e3021ea52fd16145c295efd5",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 12,
        "deletions": 17,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -1,8 +1,12 @@\n-Bitcoin Core version *0.15.0.1* is now available from:\n+(note: this is a temporary file, to be added-to by anybody, and moved to\n+release-notes at release time)\n \n-  <https://bitcoin.org/bin/bitcoin-core-0.15.0.1/>\n+Bitcoin Core version *0.15.1* is now available from:\n \n-This is a minor bug fix for 0.15.0.\n+  <https://bitcoin.org/bin/bitcoin-core-0.15.1/>\n+\n+This is a new minor version release, including various bugfixes and\n+performance improvements, as well as updated translations.\n \n Please report bugs using the issue tracker at GitHub:\n \n@@ -56,28 +60,19 @@ frequently tested on them.\n Notable changes\n ===============\n \n-GUI startup crash issue\n--------------------------\n-\n-After upgrade to 0.15.0, some clients would crash at startup because a custom\n-fee setting was configured that no longer exists in the GUI. This is a minimal\n-patch to avoid this issue from occuring.\n \n-0.15.0.1 Change log\n-====================\n \n--  #11332 `46c8d23` Fix possible crash with invalid nCustomFeeRadio in QSettings (achow101, TheBlueMatt)\n+0.15.1 Change log\n+=================\n \n-Also the manpages were updated, as this was forgotten for 0.15.0.\n+- `dumpwallet` no longer allows overwriting files. This is a security measure\n+  as well as prevents dangerous user mistakes.\n \n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-- Andrew Chow\n-- Matt Corallo\n-- Jonas Schnelli\n-- Wladimir J. van der Laan\n+(fill this in)\n \n As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "53ab02cbb0242957ba3697655d848a9461ab7455",
        "filename": "doc/release-notes/release-notes-0.15.0.1.md",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/doc/release-notes/release-notes-0.15.0.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/doc/release-notes/release-notes-0.15.0.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.15.0.1.md?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -0,0 +1,87 @@\n+Bitcoin Core version *0.15.0.1* is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.15.0.1/>\n+\n+and\n+\n+  <https://bitcoincore.org/bin/bitcoin-core-0.15.0.1/>\n+\n+This is a minor bug fix for 0.15.0.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the \n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+The first time you run version 0.15.0 or higher, your chainstate database will\n+be converted to a new format, which will take anywhere from a few minutes to\n+half an hour, depending on the speed of your machine.\n+\n+The file format of `fee_estimates.dat` changed in version 0.15.0. Hence, a\n+downgrade from version 0.15.0 or upgrade to version 0.15.0 will cause all fee\n+estimates to be discarded.\n+\n+Note that the block database format also changed in version 0.8.0 and there is no\n+automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n+directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n+However, as usual, old wallet versions are still supported.\n+\n+Downgrading warning\n+-------------------\n+\n+The chainstate database for this release is not compatible with previous\n+releases, so if you run 0.15 and then decide to switch back to any\n+older version, you will need to run the old release with the `-reindex-chainstate`\n+option to rebuild the chainstate data structures in the old format.\n+\n+If your node has pruning enabled, this will entail re-downloading and\n+processing the entire blockchain.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is extensively tested on multiple operating systems using\n+the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+frequently tested on them.\n+\n+Notable changes\n+===============\n+\n+GUI startup crash issue\n+-------------------------\n+\n+After upgrade to 0.15.0, some clients would crash at startup because a custom\n+fee setting was configured that no longer exists in the GUI. This is a minimal\n+patch to avoid this issue from occuring.\n+\n+0.15.0.1 Change log\n+====================\n+\n+-  #11332 `46c8d23` Fix possible crash with invalid nCustomFeeRadio in QSettings (achow101, TheBlueMatt)\n+\n+Also the manpages were updated, as this was forgotten for 0.15.0.\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- Andrew Chow\n+- Matt Corallo\n+- Jonas Schnelli\n+- Wladimir J. van der Laan\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "29816cacf73024538d20e24a261fa9565b05801f",
        "filename": "doc/release-notes/release-notes-0.15.0.md",
        "status": "added",
        "additions": 878,
        "deletions": 0,
        "changes": 878,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/doc/release-notes/release-notes-0.15.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/doc/release-notes/release-notes-0.15.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.15.0.md?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -0,0 +1,878 @@\n+Bitcoin Core version *0.15.0* is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.15.0/>\n+\n+This is a new major version release, including new features, various bugfixes\n+and performance improvements, as well as updated translations.\n+\n+Please report bugs using the issue tracker at GitHub:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+How to Upgrade\n+==============\n+\n+If you are running an older version, shut it down. Wait until it has completely\n+shut down (which might take a few minutes for older versions), then run the \n+installer (on Windows) or just copy over `/Applications/Bitcoin-Qt` (on Mac)\n+or `bitcoind`/`bitcoin-qt` (on Linux).\n+\n+The first time you run version 0.15.0, your chainstate database will be converted to a\n+new format, which will take anywhere from a few minutes to half an hour,\n+depending on the speed of your machine.\n+\n+The file format of `fee_estimates.dat` changed in version 0.15.0. Hence, a\n+downgrade from version 0.15.0 or upgrade to version 0.15.0 will cause all fee\n+estimates to be discarded.\n+\n+Note that the block database format also changed in version 0.8.0 and there is no\n+automatic upgrade code from before version 0.8 to version 0.15.0. Upgrading\n+directly from 0.7.x and earlier without redownloading the blockchain is not supported.\n+However, as usual, old wallet versions are still supported.\n+\n+Downgrading warning\n+-------------------\n+\n+The chainstate database for this release is not compatible with previous\n+releases, so if you run 0.15 and then decide to switch back to any\n+older version, you will need to run the old release with the `-reindex-chainstate`\n+option to rebuild the chainstate data structures in the old format.\n+\n+If your node has pruning enabled, this will entail re-downloading and\n+processing the entire blockchain.\n+\n+Compatibility\n+==============\n+\n+Bitcoin Core is extensively tested on multiple operating systems using\n+the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not supported.\n+\n+Bitcoin Core should also work on most other Unix-like systems but is not\n+frequently tested on them.\n+\n+Notes for 0.15.0\n+================\n+\n+Current SegWit support\n+----------------------\n+\n+Version 0.15.0 supports adding a segregated witness address via the `addwitnessaddress` RPC, but\n+please note that this is a testing/expert RPC, which does not guarantee recovery from backup. Only use\n+this RPC if you know what you are doing. More complete wallet support for segregated witness is coming\n+in a next version.\n+\n+Rescanning with encrypted wallets\n+---------------------------------\n+\n+As in previous versions, when using an encrypted HD wallet, the keypool cannot be topped up without unlocking\n+the wallet. This means that currently, in order to recover from a backup of an encrypted HD wallet, the user\n+must unlock the wallet with a really long timeout and manually trigger a rescan, otherwise they risk missing\n+some keys when auto-topup cannot run. Unfortunately there is no `rescan` RPC in this version, that will be\n+included in a future version, so for now a rescan can be triggered using one of the `import*` commands, using\n+a dummy address generated by another (trusted) wallet.\n+\n+Notable changes\n+===============\n+\n+Performance Improvements\n+------------------------\n+\n+Version 0.15 contains a number of significant performance improvements, which make\n+Initial Block Download, startup, transaction and block validation much faster:\n+\n+- The chainstate database (which is used for tracking UTXOs) has been changed\n+  from a per-transaction model to a per-output model (See [PR 10195](https://github.com/bitcoin/bitcoin/pull/10195)). Advantages of this model\n+  are that it:\n+    - avoids the CPU overhead of deserializing and serializing the unused outputs;\n+    - has more predictable memory usage;\n+    - uses simpler code;\n+    - is adaptable to various future cache flushing strategies.\n+\n+  As a result, validating the blockchain during Initial Block Download (IBD) and reindex\n+  is ~30-40% faster, uses 10-20% less memory, and flushes to disk far less frequently.\n+  The only downside is that the on-disk database is 15% larger. During the conversion from the previous format\n+  a few extra gigabytes may be used.\n+- Earlier versions experienced a spike in memory usage while flushing UTXO updates to disk.\n+  As a result, only half of the available memory was actually used as cache, and the other half was\n+  reserved to accommodate flushing. This is no longer the case (See [PR 10148](https://github.com/bitcoin/bitcoin/pull/10148)), and the entirety of\n+  the available cache (see `-dbcache`) is now actually used as cache. This reduces the flushing\n+  frequency by a factor 2 or more.\n+- In previous versions, signature validation for transactions has been cached when the\n+  transaction is accepted to the mempool. Version 0.15 extends this to cache the entire script\n+  validity (See [PR 10192](https://github.com/bitcoin/bitcoin/pull/10192)). This means that if a transaction in a block has already been accepted to the\n+  mempool, the scriptSig does not need to be re-evaluated. Empirical tests show that\n+  this results in new block validation being 40-50% faster.\n+- LevelDB has been upgraded to version 1.20 (See [PR 10544](https://github.com/bitcoin/bitcoin/pull/10544)). This version contains hardware acceleration for CRC\n+  on architectures supporting SSE 4.2. As a result, synchronization and block validation are now faster.\n+- SHA256 hashing has been optimized for architectures supporting SSE 4 (See [PR 10821](https://github.com/bitcoin/bitcoin/pull/10821)). SHA256 is around\n+  50% faster on supported hardware, which results in around 5% faster IBD and block\n+  validation. In version 0.15, SHA256 hardware optimization is disabled in release builds by\n+  default, but can be enabled by using `--enable-experimental-asm` when building.\n+- Refill of the keypool no longer flushes the wallet between each key which resulted in a ~20x speedup in creating a new wallet. Part of this speedup was used to increase the default keypool to 1000 keys to make recovery more robust. (See [PR 10831](https://github.com/bitcoin/bitcoin/pull/10831)).\n+\n+Fee Estimation Improvements\n+---------------------------\n+\n+Fee estimation has been significantly improved in version 0.15, with more accurate fee estimates used by the wallet and a wider range of options for advanced users of the `estimatesmartfee` and `estimaterawfee` RPCs (See [PR 10199](https://github.com/bitcoin/bitcoin/pull/10199)).\n+\n+### Changes to internal logic and wallet behavior\n+\n+- Internally, estimates are now tracked on 3 different time horizons. This allows for longer targets and means estimates adjust more quickly to changes in conditions.\n+- Estimates can now be *conservative* or *economical*. *Conservative* estimates use longer time horizons to produce an estimate which is less susceptible to rapid changes in fee conditions. *Economical* estimates use shorter time horizons and will be more affected by short-term changes in fee conditions. Economical estimates may be considerably lower during periods of low transaction activity (for example over weekends), but may result in transactions being unconfirmed if prevailing fees increase rapidly.\n+- By default, the wallet will use conservative fee estimates to increase the reliability of transactions being confirmed within the desired target. For transactions that are marked as replaceable, the wallet will use an economical estimate by default, since the fee can be 'bumped' if the fee conditions change rapidly (See [PR 10589](https://github.com/bitcoin/bitcoin/pull/10589)).\n+- Estimates can now be made for confirmation targets up to 1008 blocks (one week).\n+- More data on historical fee rates is stored, leading to more precise fee estimates.\n+- Transactions which leave the mempool due to eviction or other non-confirmed reasons are now taken into account by the fee estimation logic, leading to more accurate fee estimates.\n+- The fee estimation logic will make sure enough data has been gathered to return a meaningful estimate. If there is insufficient data, a fallback default fee is used.\n+\n+### Changes to fee estimate RPCs\n+\n+- The `estimatefee` RPC is now deprecated in favor of using only `estimatesmartfee` (which is the implementation used by the GUI)\n+- The `estimatesmartfee` RPC interface has been changed (See [PR 10707](https://github.com/bitcoin/bitcoin/pull/10707)):\n+    - The `nblocks` argument has been renamed to `conf_target` (to be consistent with other RPC methods).\n+    - An `estimate_mode` argument has been added. This argument takes one of the following strings: `CONSERVATIVE`, `ECONOMICAL` or `UNSET` (which defaults to `CONSERVATIVE`).\n+    - The RPC return object now contains an `errors` member, which returns errors encountered during processing.\n+    - If Bitcoin Core has not been running for long enough and has not seen enough blocks or transactions to produce an accurate fee estimation, an error will be returned (previously a value of -1 was used to indicate an error, which could be confused for a feerate).\n+- A new `estimaterawfee` RPC is added to provide raw fee data. External clients can query and use this data in their own fee estimation logic.\n+\n+Multi-wallet support\n+--------------------\n+\n+Bitcoin Core now supports loading multiple, separate wallets (See [PR 8694](https://github.com/bitcoin/bitcoin/pull/8694), [PR 10849](https://github.com/bitcoin/bitcoin/pull/10849)). The wallets are completely separated, with individual balances, keys and received transactions.\n+\n+Multi-wallet is enabled by using more than one `-wallet` argument when starting Bitcoin, either on the command line or in the Bitcoin config file.\n+\n+**In Bitcoin-Qt, only the first wallet will be displayed and accessible for creating and signing transactions.** GUI selectable multiple wallets will be supported in a future version. However, even in 0.15 other loaded wallets will remain synchronized to the node's current tip in the background. This can be useful if running a pruned node, since loading a wallet where the most recent sync is beyond the pruned height results in having to download and revalidate the whole blockchain. Continuing to synchronize all wallets in the background avoids this problem.\n+\n+Bitcoin Core 0.15.0 contains the following changes to the RPC interface and `bitcoin-cli` for multi-wallet:\n+\n+* When running Bitcoin Core with a single wallet, there are **no** changes to the RPC interface or `bitcoin-cli`. All RPC calls and `bitcoin-cli` commands continue to work as before.\n+* When running Bitcoin Core with multi-wallet, all *node-level* RPC methods continue to work as before. HTTP RPC requests should be send to the normal `<RPC IP address>:<RPC port>/` endpoint, and `bitcoin-cli` commands should be run as before. A *node-level* RPC method is any method which does not require access to the wallet.\n+* When running Bitcoin Core with multi-wallet, *wallet-level* RPC methods must specify the wallet for which they're intended in every request. HTTP RPC requests should be send to the `<RPC IP address>:<RPC port>/wallet/<wallet name>/` endpoint, for example `127.0.0.1:8332/wallet/wallet1.dat/`. `bitcoin-cli` commands should be run with a `-rpcwallet` option, for example `bitcoin-cli -rpcwallet=wallet1.dat getbalance`.\n+* A new *node-level* `listwallets` RPC method is added to display which wallets are currently loaded. The names returned by this method are the same as those used in the HTTP endpoint and for the `rpcwallet` argument.\n+\n+Note that while multi-wallet is now fully supported, the RPC multi-wallet interface should be considered unstable for version 0.15.0, and there may backwards-incompatible changes in future versions.\n+\n+Replace-by-fee control in the GUI\n+---------------------------------\n+\n+Bitcoin Core has supported creating opt-in replace-by-fee (RBF) transactions\n+since version 0.12.0, and since version 0.14.0 has included a `bumpfee` RPC method to\n+replace unconfirmed opt-in RBF transactions with a new transaction that pays\n+a higher fee.\n+\n+In version 0.15, creating an opt-in RBF transaction and replacing the unconfirmed\n+transaction with a higher-fee transaction are both supported in the GUI (See [PR 9592](https://github.com/bitcoin/bitcoin/pull/9592)).\n+\n+Removal of Coin Age Priority\n+----------------------------\n+\n+In previous versions of Bitcoin Core, a portion of each block could be reserved for transactions based on the age and value of UTXOs they spent. This concept (Coin Age Priority) is a policy choice by miners, and there are no consensus rules around the inclusion of Coin Age Priority transactions in blocks. In practice, only a few miners continue to use Coin Age Priority for transaction selection in blocks. Bitcoin Core 0.15 removes all remaining support for Coin Age Priority (See [PR 9602](https://github.com/bitcoin/bitcoin/pull/9602)). This has the following implications:\n+\n+- The concept of *free transactions* has been removed. High Coin Age Priority transactions would previously be allowed to be relayed even if they didn't attach a miner fee. This is no longer possible since there is no concept of Coin Age Priority. The `-limitfreerelay` and `-relaypriority` options which controlled relay of free transactions have therefore been removed.\n+- The `-sendfreetransactions` option has been removed, since almost all miners do not include transactions which do not attach a transaction fee.\n+- The `-blockprioritysize` option has been removed.\n+- The `estimatepriority` and `estimatesmartpriority` RPCs have been removed.\n+- The `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`.\n+- The `prioritisetransaction` RPC no longer takes a `priority_delta` argument, which is replaced by a `dummy` argument for backwards compatibility with clients using positional arguments. The RPC is still used to change the apparent fee-rate of the transaction by using the `fee_delta` argument.\n+- `-minrelaytxfee` can now be set to 0. If `minrelaytxfee` is set, then fees smaller than `minrelaytxfee` (per kB) are rejected from relaying, mining and transaction creation. This defaults to 1000 satoshi/kB.\n+- The `-printpriority` option has been updated to only output the fee rate and hash of transactions included in a block by the mining code.\n+\n+Mempool Persistence Across Restarts\n+-----------------------------------\n+\n+Version 0.14 introduced mempool persistence across restarts (the mempool is saved to a `mempool.dat` file in the data directory prior to shutdown and restores the mempool when the node is restarted). Version 0.15 allows this feature to be switched on or off using the `-persistmempool` command-line option (See [PR 9966](https://github.com/bitcoin/bitcoin/pull/9966)). By default, the option is set to true, and the mempool is saved on shutdown and reloaded on startup. If set to false, the `mempool.dat` file will not be loaded on startup or saved on shutdown.\n+\n+New RPC methods\n+---------------\n+\n+Version 0.15 introduces several new RPC methods:\n+\n+- `abortrescan` stops current wallet rescan, e.g. when triggered by an `importprivkey` call (See [PR 10208](https://github.com/bitcoin/bitcoin/pull/10208)).\n+- `combinerawtransaction` accepts a JSON array of raw transactions and combines them into a single raw transaction (See [PR 10571](https://github.com/bitcoin/bitcoin/pull/10571)).\n+- `estimaterawfee` returns raw fee data so that customized logic can be implemented to analyze the data and calculate estimates. See [Fee Estimation Improvements](#fee-estimation-improvements) for full details on changes to the fee estimation logic and interface.\n+- `getchaintxstats` returns statistics about the total number and rate of transactions\n+  in the chain (See [PR 9733](https://github.com/bitcoin/bitcoin/pull/9733)).\n+- `listwallets` lists wallets which are currently loaded. See the *Multi-wallet* section\n+  of these release notes for full details (See [Multi-wallet support](#multi-wallet-support)).\n+- `uptime` returns the total runtime of the `bitcoind` server since its last start (See [PR 10400](https://github.com/bitcoin/bitcoin/pull/10400)).\n+\n+Low-level RPC changes\n+---------------------\n+\n+- When using Bitcoin Core in multi-wallet mode, RPC requests for wallet methods must specify\n+  the wallet that they're intended for. See [Multi-wallet support](#multi-wallet-support) for full details.\n+\n+- The new database model no longer stores information about transaction\n+  versions of unspent outputs (See [Performance improvements](#performance-improvements)). This means that:\n+  - The `gettxout` RPC no longer has a `version` field in the response.\n+  - The `gettxoutsetinfo` RPC reports `hash_serialized_2` instead of `hash_serialized`,\n+    which does not commit to the transaction versions of unspent outputs, but does\n+    commit to the height and coinbase information.\n+  - The `getutxos` REST path no longer reports the `txvers` field in JSON format,\n+    and always reports 0 for transaction versions in the binary format\n+\n+- The `estimatefee` RPC is deprecated. Clients should switch to using the `estimatesmartfee` RPC, which returns better fee estimates. See [Fee Estimation Improvements](#fee-estimation-improvements) for full details on changes to the fee estimation logic and interface.\n+\n+- The `gettxoutsetinfo` response now contains `disk_size` and `bogosize` instead of\n+  `bytes_serialized`. The first is a more accurate estimate of actual disk usage, but\n+  is not deterministic. The second is unrelated to disk usage, but is a\n+  database-independent metric of UTXO set size: it counts every UTXO entry as 50 + the\n+  length of its scriptPubKey (See [PR 10426](https://github.com/bitcoin/bitcoin/pull/10426)).\n+\n+- `signrawtransaction` can no longer be used to combine multiple transactions into a single transaction. Instead, use the new `combinerawtransaction` RPC (See [PR 10571](https://github.com/bitcoin/bitcoin/pull/10571)).\n+\n+- `fundrawtransaction` no longer accepts a `reserveChangeKey` option. This option used to allow RPC users to fund a raw transaction using an key from the keypool for the change address without removing it from the available keys in the keypool. The key could then be re-used for a `getnewaddress` call, which could potentially result in confusing or dangerous behaviour (See [PR 10784](https://github.com/bitcoin/bitcoin/pull/10784)).\n+\n+- `estimatepriority` and `estimatesmartpriority` have been removed. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n+\n+- The `listunspent` RPC now takes a `query_options` argument (see [PR 8952](https://github.com/bitcoin/bitcoin/pull/8952)), which is a JSON object\n+  containing one or more of the following members:\n+  - `minimumAmount` - a number specifying the minimum value of each UTXO\n+  - `maximumAmount` - a number specifying the maximum value of each UTXO\n+  - `maximumCount` - a number specifying the minimum number of UTXOs\n+  - `minimumSumAmount` - a number specifying the minimum sum value of all UTXOs\n+\n+- The `getmempoolancestors`, `getmempooldescendants`, `getmempoolentry` and `getrawmempool` RPCs no longer return `startingpriority` and `currentpriority`. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n+\n+- The `dumpwallet` RPC now returns the full absolute path to the dumped wallet. It\n+  used to return no value, even if successful (See [PR 9740](https://github.com/bitcoin/bitcoin/pull/9740)).\n+\n+- In the `getpeerinfo` RPC, the return object for each peer now returns an `addrbind` member, which contains the ip address and port of the connection to the peer. This is in addition to the `addrlocal` member which contains the ip address and port of the local node as reported by the peer (See [PR 10478](https://github.com/bitcoin/bitcoin/pull/10478)).\n+\n+- The `disconnectnode` RPC can now disconnect a node specified by node ID (as well as by IP address/port). To disconnect a node based on node ID, call the RPC with the new `nodeid` argument (See [PR 10143](https://github.com/bitcoin/bitcoin/pull/10143)).\n+\n+- The second argument in `prioritisetransaction` has been renamed from `priority_delta` to `dummy` since Bitcoin Core no longer has a concept of coin age priority. The `dummy` argument has no functional effect, but is retained for positional argument compatibility. See [Removal of Coin Age Priority](#removal-of-coin-age-priority).\n+\n+- The `resendwallettransactions` RPC throws an error if the `-walletbroadcast` option is set to false (See [PR 10995](https://github.com/bitcoin/bitcoin/pull/10995)).\n+\n+- The second argument in the `submitblock` RPC argument has been renamed from `parameters` to `dummy`. This argument never had any effect, and the renaming is simply to communicate this fact to the user (See [PR 10191](https://github.com/bitcoin/bitcoin/pull/10191))\n+  (Clients should, however, use positional arguments for `submitblock` in order to be compatible with BIP 22.)\n+\n+- The `verbose` argument of `getblock` has been renamed to `verbosity` and now takes an integer from 0 to 2. Verbose level 0 is equivalent to `verbose=false`. Verbose level 1 is equivalent to `verbose=true`. Verbose level 2 will give the full transaction details of each transaction in the output as given by `getrawtransaction`. The old behavior of using the `verbose` named argument and a boolean value is still maintained for compatibility.\n+\n+- Error codes have been updated to be more accurate for the following error cases (See [PR 9853](https://github.com/bitcoin/bitcoin/pull/9853)):\n+  - `getblock` now returns RPC_MISC_ERROR if the block can't be found on disk (for\n+  example if the block has been pruned). Previously returned RPC_INTERNAL_ERROR.\n+  - `pruneblockchain` now returns RPC_MISC_ERROR if the blocks cannot be pruned\n+  because the node is not in pruned mode. Previously returned RPC_METHOD_NOT_FOUND.\n+  - `pruneblockchain` now returns RPC_INVALID_PARAMETER if the blocks cannot be pruned\n+  because the supplied timestamp is too late. Previously returned RPC_INTERNAL_ERROR.\n+  - `pruneblockchain` now returns RPC_MISC_ERROR if the blocks cannot be pruned\n+  because the blockchain is too short. Previously returned RPC_INTERNAL_ERROR.\n+  - `setban` now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the supplied IP address\n+  or subnet is invalid. Previously returned RPC_CLIENT_NODE_ALREADY_ADDED.\n+  - `setban` now returns RPC_CLIENT_INVALID_IP_OR_SUBNET if the user tries to unban\n+  a node that has not previously been banned. Previously returned RPC_MISC_ERROR.\n+  - `removeprunedfunds` now returns RPC_WALLET_ERROR if `bitcoind` is unable to remove\n+  the transaction. Previously returned RPC_INTERNAL_ERROR.\n+  - `removeprunedfunds` now returns RPC_INVALID_PARAMETER if the transaction does not\n+  exist in the wallet. Previously returned RPC_INTERNAL_ERROR.\n+  - `fundrawtransaction` now returns RPC_INVALID_ADDRESS_OR_KEY if an invalid change\n+  address is provided. Previously returned RPC_INVALID_PARAMETER.\n+  - `fundrawtransaction` now returns RPC_WALLET_ERROR if `bitcoind` is unable to create\n+  the transaction. The error message provides further details. Previously returned\n+  RPC_INTERNAL_ERROR.\n+  - `bumpfee` now returns RPC_INVALID_PARAMETER if the provided transaction has\n+  descendants in the wallet. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_INVALID_PARAMETER if the provided transaction has\n+  descendants in the mempool. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has\n+  has been mined or conflicts with a mined transaction. Previously returned\n+  RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction is not\n+  BIP 125 replaceable. Previously returned RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has already\n+  been bumped by a different transaction. Previously returned RPC_INVALID_REQUEST.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction contains\n+  inputs which don't belong to this wallet. Previously returned RPC_INVALID_ADDRESS_OR_KEY.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has multiple change\n+  outputs. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the provided transaction has no change\n+  output. Previously returned RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the fee is too high. Previously returned\n+  RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the fee is too low. Previously returned\n+  RPC_MISC_ERROR.\n+  - `bumpfee` now returns RPC_WALLET_ERROR if the change output is too small to bump the\n+  fee. Previously returned RPC_MISC_ERROR.\n+\n+0.15.0 Change log\n+=================\n+\n+### RPC and other APIs\n+- #9485 `61a640e` ZMQ example using python3 and asyncio (mcelrath)\n+- #9894 `0496e15` remove 'label' filter for rpc command help (instagibbs)\n+- #9853 `02bd6e9` Fix error codes from various RPCs (jnewbery)\n+- #9842 `598ef9c` Fix RPC failure testing (continuation of #9707) (jnewbery)\n+- #10038 `d34995a` Add mallocinfo mode to `getmemoryinfo` RPC (laanwj)\n+- #9500 `3568b30` [Qt][RPC] Autocomplete commands for 'help' command in debug console (achow101)\n+- #10056 `e6156a0` [zmq] Call va_end() on va_start()ed args (kallewoof)\n+- #10086 `7438cea` Trivial: move rpcserialversion into RPC option group (jlopp)\n+- #10150 `350b224` [rpc] Add logging rpc (jnewbery)\n+- #10208 `393160c` [wallet] Rescan abortability (kallewoof)\n+- #10143 `a987def` [net] Allow disconnectnode RPC to be called with node id (jnewbery)\n+- #10281 `0e8499c` doc: Add RPC interface guidelines (laanwj)\n+- #9733 `d4732f3` Add getchaintxstats RPC (sipa)\n+- #10310 `f4b15e2` [doc] Add hint about getmempoolentry to getrawmempool help (kallewoof)\n+- #8704 `96c850c` [RPC] Transaction details in getblock (achow101)\n+- #8952 `9390845` Add query options to listunspent RPC call (pedrobranco)\n+- #10413 `08ac35a` Fix docs (there's no rpc command setpaytxfee) (RHavar)\n+- #8384 `e317c0d` Add witness data output to TxInError messages (instagibbs)\n+- #9571 `4677151` RPC: getblockchaininfo returns BIP signaling statistics  (pinheadmz)\n+- #10450 `ef2d062` Fix bumpfee rpc \"errors\" return value (ryanofsky)\n+- #10475 `39039b1` [RPC] getmempoolinfo mempoolminfee is a BTC/KB feerate (instagibbs)\n+- #10478 `296928e` rpc: Add listen address to incoming connections in `getpeerinfo` (laanwj)\n+- #10403 `08d0390` Fix importmulti failure to return rescan errors (ryanofsky)\n+- #9740 `9fec4da` Add friendly output to dumpwallet (aideca)\n+- #10426 `16f6c98` Replace bytes_serialized with bogosize (sipa)\n+- #10252 `980deaf` RPC/Mining: Restore API compatibility for prioritisetransaction (luke-jr)\n+- #9672 `46311e7` Opt-into-RBF for RPC & bitcoin-tx (luke-jr)\n+- #10481 `9c248e3` Decodehextx scripts sanity check  (achow101)\n+- #10488 `fa1f106` Note that the prioritizetransaction dummy value is deprecated, and has no meaning (TheBlueMatt)\n+- #9738 `c94b89e` gettxoutproof() should return consistent result (jnewbery)\n+- #10191 `00350bd` [trivial] Rename unused RPC arguments 'dummy' (jnewbery)\n+- #10627 `b62b4c8` fixed listunspent rpc convert parameter (tnakagawa)\n+- #10412 `bef02fb` Improve wallet rescan API (ryanofsky)\n+- #10400 `1680ee0` [RPC] Add an uptime command that displays the amount of time (in seconds) bitcoind has been running (rvelhote)\n+- #10683 `d81bec7` rpc: Move the `generate` RPC call to rpcwallet (laanwj)\n+- #10710 `30bc0f6` REST/RPC example update (Mirobit)\n+- #10747 `9edda0c` [rpc] fix verbose argument for getblock in bitcoin-cli (jnewbery)\n+- #10589 `104f5f2` More economical fee estimates for RBF and RPC options to control (morcos)\n+- #10543 `b27b004` Change API to estimaterawfee (morcos)\n+- #10807 `afd2fca` getbalance example covers at least 6 confirms (instagibbs)\n+- #10707 `75b5643` Better API for estimatesmartfee RPC  (morcos)\n+- #10784 `9e8d6a3` Do not allow users to get keys from keypool without reserving them (TheBlueMatt)\n+- #10857 `d445a2c` [RPC] Add a deprecation warning to getinfo's output (achow101)\n+- #10571 `adf170d` [RPC]Move transaction combining from signrawtransaction to new RPC (achow101)\n+- #10783 `041dad9` [RPC] Various rpc argument fixes (instagibbs)\n+- #9622 `6ef3c7e` [rpc] listsinceblock should include lost transactions when parameter is a reorg'd block (kallewoof)\n+- #10799 `8537187` Prevent user from specifying conflicting parameters to fundrawtx (TheBlueMatt)\n+- #10931 `0b11a07` Fix misleading \"Method not found\" multiwallet errors (ryanofsky)\n+- #10788 `f66c596` [RPC] Fix addwitnessaddress by replacing ismine with producesignature (achow101)\n+- #10999 `627c3c0` Fix amounts formatting in `decoderawtransaction` (laanwj)\n+- #11002 `4268426` [wallet] return correct error code from resendwallettransaction (jnewbery)\n+- #11029 `96a63a3` [RPC] trivial: gettxout no longer shows version of tx (FelixWeis)\n+- #11083 `6c2b008` Fix combinerawtransaction RPC help result section (jonasnick)\n+- #11027 `07164bb` [RPC] Only return hex field once in getrawtransaction (achow101)\n+- #10698 `5af6572` Be consistent in calling transactions \"replaceable\" for Opt-In RBF (TheBlueMatt)\n+\n+### Block and transaction handling\n+- #9801 `a8c5751` Removed redundant parameter from mempool.PrioritiseTransaction (gubatron)\n+- #9819 `1efc99c` Remove harmless read of unusued priority estimates (morcos)\n+- #9822 `b7547fa` Remove block file location upgrade code (benma)\n+- #9602 `30ff3a2` Remove coin age priority and free transactions - implementation (morcos)\n+- #9548 `47510ad` Remove min reasonable fee (morcos)\n+- #10249 `c73af54` Switch CCoinsMap from boost to std unordered_map (sipa)\n+- #9966 `2a183de` Control mempool persistence using a command line parameter (jnewbery)\n+- #10199 `318ea50` Better fee estimates (morcos)\n+- #10196 `bee3529` Bugfix: PrioritiseTransaction updates the mempool tx counter (sdaftuar)\n+- #10195 `1088b02` Switch chainstate db and cache to per-txout model (sipa)\n+- #10284 `c2ab38b` Always log debug information for fee calculation in CreateTransaction (morcos)\n+- #10503 `efbcf2b` Use REJECT_DUPLICATE for already known and conflicted txn (sipa)\n+- #10537 `b3eb0d6` Few Minor per-utxo assert-semantics re-adds and tweak (TheBlueMatt)\n+- #10626 `8c841a3` doc: Remove outdated minrelaytxfee comment (MarcoFalke)\n+- #10559 `234ffc6` Change semantics of HaveCoinInCache to match HaveCoin (morcos)\n+- #10581 `7878353` Simplify return values of GetCoin/HaveCoin(InCache) (sipa)\n+- #10684 `a381f6a` Remove no longer used mempool.exists(outpoint) (morcos)\n+- #10148 `d4e551a` Use non-atomic flushing with block replay (sipa)\n+- #10685 `30c2130` Clarify CCoinsViewMemPool documentation (TheBlueMatt)\n+- #10558 `90a002e` Address nits from per-utxo change (morcos)\n+- #10706 `6859ad2` Improve wallet fee logic and fix GUI bugs (morcos)\n+- #10526 `754aa02` Force on-the-fly compaction during pertxout upgrade (sipa)\n+- #10985 `d896d5c` Add undocumented -forcecompactdb to force LevelDB compactions (sipa)\n+- #10292 `e4bbd3d` Improved efficiency in COutPoint constructors (mm-s)\n+- #10290 `8d6d43e` Add -stopatheight for benchmarking (sipa)\n+\n+### P2P protocol and network code\n+- #9726 `7639d38` netbase: Do not print an error on connection timeouts through proxy (laanwj)\n+- #9805 `5b583ef` Add seed.btc.petertodd.org to mainnet DNS seeds (petertodd)\n+- #9861 `22f609f` Trivial: Debug log ambiguity fix for peer addrs (keystrike)\n+- #9774 `90cb2a2` Enable host lookups for -proxy and -onion parameters (jmcorgan)\n+- #9558 `7b585cf` Clarify assumptions made about when BlockCheck is called (TheBlueMatt)\n+- #10135 `e19586a` [p2p] Send the correct error code in reject messages (jnewbery)\n+- #9665 `eab00d9` Use cached [compact] blocks to respond to getdata messages (TheBlueMatt)\n+- #10215 `a077a90` Check interruptNet during dnsseed lookups (TheBlueMatt)\n+- #10234 `faf2dea` [net] listbanned RPC and QT should show correct banned subnets (jnewbery)\n+- #10134 `314ebdf` [qa] Fixes segwit block relay test after inv-direct-fetch was disabled (sdaftuar)\n+- #10351 `3f57c55` removed unused code in INV message (Greg-Griffith)\n+- #10061 `ae78609` [net] Added SetSocketNoDelay() utility function (tjps)\n+- #10408 `28c6e8d` Net: Improvements to Tor control port parser (str4d)\n+- #10460 `5c63d66` Broadcast address every day, not 9 hours (sipa)\n+- #10471 `400fdd0` Denote functions CNode::GetRecvVersion() and CNode::GetRefCount()  as const (pavlosantoniou)\n+- #10345 `67700b3` [P2P] Timeout for headers sync (sdaftuar)\n+- #10564 `8d9f45e` Return early in IsBanned (gmaxwell)\n+- #10587 `de8db47` Net: Fix resource leak in ReadBinaryFile(...) (practicalswift)\n+- #9549 `b33ca14` [net] Avoid possibility of NULL pointer dereference in MarkBlockAsInFlight(...) (practicalswift)\n+- #10446 `2772dc9` net: avoid extra dns query per seed (theuni)\n+- #10824 `9dd6a2b` Avoid unnecessary work in SetNetworkActive (promag)\n+- #10948 `df3a6f4` p2p: Hardcoded seeds update pre-0.15 branch (laanwj)\n+- #10977 `02f4c4a` [net] Fix use of uninitialized value in getnetworkinfo(const JSONRPCRequest&) (practicalswift)\n+- #10982 `c8b62c7` Disconnect network service bits 6 and 8 until Aug 1, 2018 (TheBlueMatt)\n+- #11012 `0e5cff6` Make sure to clean up mapBlockSource if we've already seen the block (theuni)\n+\n+### Validation\n+- #9725 `67023e9` CValidationInterface Cleanups (TheBlueMatt)\n+- #10178 `2584925` Remove CValidationInterface::UpdatedTransaction (TheBlueMatt)\n+- #10201 `a6548a4` pass Consensus::Params& to functions in validation.cpp and make them static (mariodian)\n+- #10297 `431a548` Simplify DisconnectBlock arguments/return value (sipa)\n+- #10464 `f94b7d5` Introduce static DoWarning (simplify UpdateTip) (jtimon)\n+- #10569 `2e7d8f8` Fix stopatheight (achow101)\n+- #10192 `2935b46` Cache full script execution results in addition to signatures (TheBlueMatt)\n+- #10179 `21ed30a` Give CValidationInterface Support for calling notifications on the CScheduler Thread (TheBlueMatt)\n+- #10557 `66270a4` Make check to distinguish between orphan txs and old txs more efficient (morcos)\n+- #10775 `7c2400c` nCheckDepth chain height fix (romanornr)\n+- #10821 `16240f4` Add SSE4 optimized SHA256 (sipa)\n+- #10854 `04d395e` Avoid using sizes on non-fixed-width types to derive protocol constants (gmaxwell)\n+- #10945 `2a50b11` Update defaultAssumeValid according to release-process.md (gmaxwell)\n+- #10986 `2361208` Update chain transaction statistics (sipa)\n+- #11028 `6bdf4b3` Avoid masking of difficulty adjustment errors by checkpoints (sipa)\n+- #9533 `cb598cf` Allow non-power-of-2 signature cache sizes (sipa)\n+- #9208 `acd9957` Improve DisconnectTip performance (sdaftuar)\n+- #10618 `f90603a` Remove confusing MAX_BLOCK_BASE_SIZE (gmaxwell)\n+- #10758 `bd92424` Fix some chainstate-init-order bugs (TheBlueMatt)\n+- #10550 `b7296bc` Don't return stale data from CCoinsViewCache::Cursor() (ryanofsky)\n+- #10998 `2507fd5` Fix upgrade cancel warnings (TheBlueMatt)\n+- #9868 `cbdb473` Abstract out the command line options for block assembly (sipa)\n+\n+### Build system\n+- #9727 `5f0556d` Remove fallbacks for boost_filesystem < v3 (laanwj)\n+- #9788 `50a2265` gitian: bump descriptors for master (theuni)\n+- #9794 `7ca2f54` Minor update to qrencode package builder (mitchellcash)\n+- #9514 `2cc0df1` release: Windows signing script (theuni)\n+- #9921 `8b789d8` build: Probe MSG_DONTWAIT in the same way as MSG_NOSIGNAL (laanwj)\n+- #10011 `32d1b34` build: Fix typo s/HAVE_DONTWAIT/HAVE_MSG_DONTWAIT (laanwj)\n+- #9946 `90dd9e6` Fix build errors if spaces in path or parent directory (pinheadmz)\n+- #10136 `81da4c7` build: Disable Wshadow warning (laanwj)\n+- #10166 `64962ae` Ignore Doxyfile generated from Doxyfile.in template (paveljanik)\n+- #10239 `0416ea9` Make Boost use std::atomic internally (sipa)\n+- #10228 `27faa6c` build: regenerate bitcoin-config.h as necessary (theuni)\n+- #10273 `8979f45` [scripts] Minor improvements to `macdeployqtplus` script (chrisgavin)\n+- #10325 `a26280b` 0.15.0 Depends Updates (fanquake)\n+- #10328 `79aeff6` Update contrib/debian to latest Ubuntu PPA upload (TheBlueMatt)\n+- #7522 `d25449f` Bugfix: Only use git for build info if the repository is actually the right one (luke-jr)\n+- #10489 `e654d61` build: silence gcc7's implicit fallthrough warning (theuni)\n+- #10549 `ad1a13e` Avoid printing generic and duplicated \"checking for QT\" during ./configure (drizzt)\n+- #10628 `8465b68` [depends] expat 2.2.1 (fanquake)\n+- #10806 `db825d2` build: verify that the assembler can handle crc32 functions (theuni)\n+- #10766 `b4d03be` Building Environment: Set ARFLAGS to cr (ReneNyffenegger)\n+- #10803 `91edda8` Explicitly search for bdb5.3 (pstratem)\n+- #10855 `81560b0` random: only use getentropy on openbsd (theuni)\n+- #10508 `1caafa6` Run Qt wallet tests on travis (ryanofsky)\n+- #10851 `e222618` depends: fix fontconfig with newer glibc (theuni)\n+- #10971 `88b1e4b` build: fix missing sse42 in depends builds (theuni)\n+- #11097 `129b03f` gitian: quick hack to fix version string in releases (theuni)\n+- #10039 `919aaf6` Fix compile errors with Qt 5.3.2 and Boost 1.55.0 (ryanofsky)\n+- #10168 `7032021` Fix build warning from #error text (jnewbery)\n+- #10301 `318392c` Check if sys/random.h is required for getentropy (jameshilliard)\n+\n+### GUI\n+- #9724 `1a9fd5c` Qt/Intro: Add explanation of IBD process (luke-jr)\n+- #9834 `b00ba62` qt: clean up initialize/shutdown signals (benma)\n+- #9481 `ce01e62` [Qt] Show more significant warning if we fall back to the default fee (jonasschnelli)\n+- #9974 `b9f930b` Add basic Qt wallet test (ryanofsky)\n+- #9690 `a387d3a` Change 'Clear' button string to 'Reset' (da2x)\n+- #9592 `9c7b7cf` [Qt] Add checkbox in the GUI to opt-in to RBF when creating a transaction (ryanofsky)\n+- #10098 `2b477e6` Make qt wallet test compatible with qt4 (ryanofsky)\n+- #9890 `1fa4ae6` Add a button to open the config file in a text editor (ericshawlinux)\n+- #10156 `51833a1` Fix for issues with startup and multiple monitors on windows (AllanDoensen)\n+- #10177 `de01da7` Changed \"Send\" button default status from true to false (KibbledJiveElkZoo)\n+- #10221 `e96486c` Stop treating coinbase outputs differently in GUI: show them at 1conf (TheBlueMatt)\n+- #10231 `987a6c0` [Qt] Reduce a significant cs_main lock freeze (jonasschnelli)\n+- #10242 `f6f3b58` [qt] Don't call method on null WalletModel object (ryanofsky)\n+- #10093 `a3e756b` [Qt] Don't add arguments of sensitive command to console window (jonasschnelli)\n+- #10362 `95546c8` [GUI] Add OSX keystroke to RPCConsole info (spencerlievens)\n+- #9697 `962cd3f` [Qt] simple fee bumper with user verification (jonasschnelli)\n+- #10390 `e477516` [wallet] remove minimum total fee option (instagibbs)\n+- #10420 `4314544` Add Qt tests for wallet spends & bumpfee (ryanofsky)\n+- #10454 `c1c9a95` Fix broken q4 test build (ryanofsky)\n+- #10449 `64beb13` Overhaul Qt fee bumper (jonasschnelli)\n+- #10582 `7c72fb9` Pass in smart fee slider value to coin control dialog (morcos)\n+- #10673 `4c72cc3` [qt] Avoid potential null pointer dereference in TransactionView::exportClicked() (practicalswift)\n+- #10769 `8fdd23a` [Qt] replace fee slider with a Dropdown, extend conf. targets (jonasschnelli)\n+- #10870 `412b466` [Qt] Use wallet 0 in rpc console if running with multiple wallets (jonasschnelli)\n+- #10988 `a9dd111` qt: Increase BLOCK_CHAIN_SIZE constants (laanwj)\n+- #10644 `e292140` Slightly overhaul NSI pixmaps (jonasschnelli)\n+- #10660 `0c3542e` Allow to cancel the txdb upgrade via splashscreen keypress 'q' (jonasschnelli)\n+\n+### Wallet\n+- #9359 `f7ec7cf` Add test for CWalletTx::GetImmatureCredit() returning stale values (ryanofsky)\n+- #9576 `56ab672` [wallet] Remove redundant initialization (practicalswift)\n+- #9333 `fa625b0` Document CWalletTx::mapValue entries and remove erase of nonexistent \"version\" entry (ryanofsky)\n+- #9906 `72fb515` Disallow copy constructor CReserveKeys (instagibbs)\n+- #9369 `3178b2c` Factor out CWallet::nTimeSmart computation into a method (ryanofsky)\n+- #9830 `afcd7c0` Add safe flag to listunspent result (NicolasDorier)\n+- #9993 `c49355c` Initialize nRelockTime (pstratem)\n+- #9818 `3d857f3` Save watch only key timestamps when reimporting keys (ryanofsky)\n+- #9294 `f34cdcb` Use internal HD chain for change outputs (hd split) (jonasschnelli)\n+- #10164 `e183ea2` Wallet: reduce excess logic InMempool() (kewde)\n+- #10186 `c9ff4f8` Remove SYNC_TRANSACTION_NOT_IN_BLOCK magic number (jnewbery)\n+- #10226 `64c45aa` wallet: Use boost to more portably ensure -wallet specifies only a filename (luke-jr)\n+- #9827 `c91ca0a` Improve ScanForWalletTransactions return value (ryanofsky)\n+- #9951 `fa1ac28` Wallet database handling abstractions/simplifications (laanwj)\n+- #10265 `c29a0d4` [wallet] [moveonly] Check non-null pindex before potentially referencing (kallewoof)\n+- #10283 `a550f6e` Cleanup: reduce to one GetMinimumFee call signature (morcos)\n+- #10294 `e2b99b1` [Wallet] unset change position when there is no change (instagibbs)\n+- #10115 `d3dce0e` Avoid reading the old hd master key during wallet encryption (TheBlueMatt)\n+- #10341 `18c9deb` rpc/wallet: Workaround older UniValue which returns a std::string temporary for get_str (luke-jr)\n+- #10308 `94e5227` [wallet] Securely erase potentially sensitive keys/values (tjps)\n+- #10257 `ea1fd43` [test] Add test for getmemoryinfo (jimmysong)\n+- #10295 `ce8176d` [qt] Move some WalletModel functions into CWallet (ryanofsky)\n+- #10506 `7cc2c67` Fix bumpfee test after #10449 (ryanofsky)\n+- #10500 `098b01d` Avoid CWalletTx copies in GetAddressBalances and GetAddressGroupings (ryanofsky)\n+- #10455 `0747d33` Simplify feebumper minimum fee code slightly (ryanofsky)\n+- #10522 `2805d60` [wallet] Remove unused variables (practicalswift)\n+- #8694 `177433a` Basic multiwallet support (luke-jr)\n+- #10598 `7a74f88` Supress struct/class mismatch warnings introduced in #10284 (paveljanik)\n+- #9343 `209eef6` Don't create change at dust limit (morcos)\n+- #10744 `ed88e31` Use method name via __func__ macro (darksh1ne)\n+- #10712 `e8b9523` Add change output if necessary to reduce excess fee (morcos)\n+- #10816 `1c011ff` Properly forbid -salvagewallet and -zapwallettxes for multi wallet (morcos)\n+- #10235 `5cfdda2` Track keypool entries as internal vs external in memory (TheBlueMatt)\n+- #10330 `bf0a08b` [wallet] fix zapwallettxes interaction with persistent mempool (jnewbery)\n+- #10831 `0b01935` Batch flushing operations to the walletdb during top up and increase keypool size (gmaxwell)\n+- #10795 `7b6e8bc` No longer ever reuse keypool indexes (TheBlueMatt)\n+- #10849 `bde4f93` Multiwallet: simplest endpoint support (jonasschnelli)\n+- #10817 `9022aa3` Redefine Dust and add a discard_rate (morcos)\n+- #10883 `bf3b742` Rename -usewallet to -rpcwallet (morcos)\n+- #10604 `420238d` [wallet] [tests] Add listwallets RPC, include wallet name in `getwalletinfo` and add multiwallet test (jnewbery)\n+- #10885 `70888a3` Reject invalid wallets (promag)\n+- #10949 `af56397` Clarify help message for -discardfee (morcos)\n+- #10942 `2e857bb` Eliminate fee overpaying edge case when subtracting fee from recipients (morcos)\n+- #10995 `fa64636` Fix resendwallettransactions assert failure if -walletbroadcast=0 (TheBlueMatt)\n+- #11022 `653a46d` Basic keypool topup (jnewbery)\n+- #11081 `9fe1f6b` Add length check for CExtKey deserialization (jonasschnelli, guidovranken)\n+- #11044 `4ef8374` [wallet] Keypool topup cleanups (jnewbery)\n+- #11145 `e51bb71` Fix rounding bug in calculation of minimum change (morcos)\n+- #9605 `779f2f9` Use CScheduler for wallet flushing, remove ThreadFlushWalletDB (TheBlueMatt)\n+- #10108 `4e3efd4` ApproximateBestSubset should take inputs by reference, not value (RHavar)\n+\n+### Tests and QA\n+- #9744 `8efd1c8` Remove unused module from rpc-tests (34ro)\n+- #9657 `7ff4a53` Improve rpc-tests.py (jnewbery)\n+- #9766 `7146d96` Add --exclude option to rpc-tests.py (jnewbery)\n+- #9577 `d6064a8` Fix docstrings in qa tests (jnewbery)\n+- #9823 `a13a417` qa: Set correct path for binaries in rpc tests (MarcoFalke)\n+- #9847 `6206252` Extra test vector for BIP32 (sipa)\n+- #9350 `88c2ae3` [Trivial] Adding label for amount inside of tx_valid/tx_invalid.json (Christewart)\n+- #9888 `36afd4d` travis: Verify commits only for one target (MarcoFalke)\n+- #9904 `58861ad` test: Fail if InitBlockIndex fails (laanwj)\n+- #9828 `67c5cc1` Avoid -Wshadow warnings in wallet_tests (ryanofsky)\n+- #9832 `48c3429` [qa] assert_start_raises_init_error (NicolasDorier)\n+- #9739 `9d5fcbf` Fix BIP68 activation test (jnewbery)\n+- #9547 `d32581c` bench: Assert that division by zero is unreachable (practicalswift)\n+- #9843 `c78adbf` Fix segwit getblocktemplate test (jnewbery)\n+- #9929 `d5ce14e` tests: Delete unused function _rpchost_to_args (laanwj)\n+- #9555 `19be26a` [test] Avoid reading a potentially uninitialized variable in tx_invalid-test (transaction_tests.cpp) (practicalswift)\n+- #9945 `ac23a7c` Improve logging in bctest.py if there is a formatting mismatch (jnewbery)\n+- #9768 `8910b47` [qa] Add logging to test_framework.py (jnewbery)\n+- #9972 `21833f9` Fix extended rpc tests broken by #9768 (jnewbery)\n+- #9977 `857d1e1` QA: getblocktemplate_longpoll.py should always use >0 fee tx (sdaftuar)\n+- #9970 `3cc13ea` Improve readability of segwit.py, smartfees.py (sdaftuar)\n+- #9497 `2c781fb` CCheckQueue Unit Tests (JeremyRubin)\n+- #10024 `9225de2` [trivial] Use log.info() instead of print() in remaining functional test cases (jnewbery)\n+- #9956 `3192e52` Reorganise qa directory (jnewbery)\n+- #10017 `02d64bd` combine_logs.py - aggregates log files from multiple bitcoinds during functional tests (jnewbery)\n+- #10047 `dfef6b6` [tests] Remove unused variables and imports (practicalswift)\n+- #9701 `a230b05` Make bumpfee tests less fragile (ryanofsky)\n+- #10053 `ca20923` [test] Allow functional test cases to be skipped (jnewbery)\n+- #10052 `a0b1e57` [test] Run extended tests once daily in Travis (jnewbery)\n+- #10069 `1118493` [QA] Fix typo in fundrawtransaction test (NicolasDorier)\n+- #10083 `c044f03` [QA] Renaming rawTx into rawtx (NicolasDorier)\n+- #10073 `b1a4f27` Actually run assumevalid.py (jnewbery)\n+- #9780 `c412fd8` Suppress noisy output from qa tests in Travis (jnewbery)\n+- #10096 `79af9fb` Check that all test scripts in test/functional are being run (jnewbery)\n+- #10076 `5b029aa` [qa] combine_logs: Use ordered list for logfiles (MarcoFalke)\n+- #10107 `f2734c2` Remove unused variable. Remove accidental trailing semicolons in Python code (practicalswift)\n+- #10109 `8ac8041` Remove SingleNodeConnCB (jnewbery)\n+- #10114 `edc62c9` [tests] sync_with_ping should assert that ping hasn't timed out (jnewbery)\n+- #10128 `427d2fd` Speed Up CuckooCache tests (JeremyRubin)\n+- #10072 `12af74b` Remove sources of unreliablility in extended functional tests (jnewbery)\n+- #10077 `ebfd653` [qa] Add setnetworkactive smoke test (MarcoFalke)\n+- #10152 `080d7c7` [trivial] remove unused line in Travis config (jnewbery)\n+- #10159 `df1ca9e` [tests] color test results and sort alphabetically (jnewbery)\n+- #10124 `88799ea` [test] Suppress test logging spam (jnewbery)\n+- #10142 `ed09dd3` Run bitcoin_test-qt under minimal QPA platform (ryanofsky)\n+- #9949 `a27dbc5` [bench] Avoid function call arguments which are pointers to uninitialized values (practicalswift)\n+- #10187 `b44adf9` tests: Fix test_runner return value in case of skipped test (laanwj)\n+- #10197 `d86bb07` [tests] Functional test warnings (jnewbery)\n+- #10219 `9111df9` Tests: Order Python Tests Differently (jimmysong)\n+- #10229 `f3db4c6` Tests: Add test for getdifficulty (jimmysong)\n+- #10224 `2723bcd` [test] Add test for getaddednodeinfo (jimmysong)\n+- #10023 `c530c15` [tests] remove maxblocksinflight.py (functionality covered by other test) (jnewbery)\n+- #10097 `1b25b6d` Move zmq test skipping logic into individual test case (jnewbery)\n+- #10272 `54e2d87` [Tests] Prevent warning: variable 'x' is uninitialized (paveljanik)\n+- #10225 `e0a7e19` [test] Add aborttrescan tests (kallewoof)\n+- #10278 `8254a8a` [test] Add Unit Test for GetListenPort (jimmysong)\n+- #10280 `47535d7` [test] Unit test amount.h/amount.cpp (jimmysong)\n+- #10256 `80c3a73` [test] Add test for gettxout to wallet.py (jimmysong)\n+- #10264 `492d22f` [test] Add tests for getconnectioncount, getnettotals and ping (jimmysong)\n+- #10169 `8f3e384` [tests] Remove func test code duplication (jnewbery)\n+- #10198 `dc8fc0c` [tests] Remove is_network_split from functional test framework (jnewbery)\n+- #10255 `3c5e6c9` [test] Add test for listaddressgroupings (jimmysong)\n+- #10137 `75171f0` Remove unused import. Remove accidental trailing semicolons (practicalswift)\n+- #10307 `83073de` [tests] allow zmq test to be run in out-of-tree builds (jnewbery)\n+- #10344 `e927483` [tests] Fix abandonconflict.py intermittency (jnewbery)\n+- #10318 `170bc2c` [tests] fix wait_for_inv() (jnewbery)\n+- #10171 `fff72de` [tests] Add node methods to test framework (jnewbery)\n+- #10352 `23d78c4` test: Add elapsed time to RPC tracing (laanwj)\n+- #10342 `6a796b2` [tests] Improve mempool_persist test (jnewbery)\n+- #10287 `776ba23` [tests] Update Unit Test for addrman.h/addrman.cpp (jimmysong)\n+- #10365 `7ee5236` [tests] increase timeouts in sendheaders test (jnewbery)\n+- #10361 `f6241b3` qa: disablewallet: Check that wallet is really disabled (MarcoFalke)\n+- #10371 `4b766fc` [tests] Clean up addrman_tests.cpp (jimmysong)\n+- #10253 `87abe20` [test] Add test for getnetworkhashps (jimmysong)\n+- #10376 `8bd16ee` [tests] fix disconnect_ban intermittency (jnewbery)\n+- #10374 `5411997` qa: Warn when specified test is not found (MarcoFalke)\n+- #10405 `0542978` tests: Correct testcase in script_tests.json for large number OP_EQUAL (laanwj)\n+- #10429 `6b99daf` tests: fix spurious addrman test failure (theuni)\n+- #10433 `8e57256` [tests] improve tmpdir structure (jnewbery)\n+- #10415 `217b416` [tests] Speed up fuzzing by ~200x when using afl-fuzz (practicalswift)\n+- #10445 `b4b057a` Add test for empty chain and reorg consistency for gettxoutsetinfo (gmaxwell)\n+- #10423 `1aefc94` [tests] skipped tests should clean up after themselves (jnewbery)\n+- #10359 `329fc1d` [tests] functional tests should call BitcoinTestFramework start/stop node methods (jnewbery)\n+- #10514 `e103b3f` Bugfix: missing == 0 after randrange (sipa)\n+- #10515 `c871f32` [test] Add test for getchaintxstats (jimmysong)\n+- #10509 `bea5b00` Remove xvfb configuration from travis (ryanofsky)\n+- #10535 `30853e1` [qa] fundrawtx: Fix shutdown race (MarcoFalke)\n+- #9909 `300f8e7` tests: Add FindEarliestAtLeast test for edge cases (ryanofsky)\n+- #10331 `75e898c` Share config between util and functional tests (jnewbery)\n+- #10321 `e801084` Use FastRandomContext for all tests (sipa)\n+- #10524 `6c2d81f` [tests] Remove printf(...) (practicalswift)\n+- #10547 `71ab6e5` [tests] Use FastRandomContext instead of boost::random::{mt19937,uniform_int_distribution} (practicalswift)\n+- #10551 `6702617` [Tests] Wallet encryption functional tests (achow101)\n+- #10555 `643fa0b` [tests] various improvements to zmq_test.py (jnewbery)\n+- #10533 `d083bd9` [tests] Use cookie auth instead of rpcuser and rpcpassword (achow101)\n+- #10632 `c68a9a6` qa: Add stopatheight test (MarcoFalke)\n+- #10636 `4bc853b` [qa] util: Check return code after closing bitcoind proc (MarcoFalke)\n+- #10662 `e0a7801` Initialize randomness in benchmarks (achow101)\n+- #10612 `7c87a9c` The young person's guide to the test_framework (jnewbery)\n+- #10659 `acb1153` [qa] blockchain: Pass on closed connection during generate call (MarcoFalke)\n+- #10690 `416af3e` [qa] Bugfix: allow overriding extra_args in ComparisonTestFramework (sdaftuar)\n+- #10556 `65cc7aa` Move stop/start functions from utils.py into BitcoinTestFramework (jnewbery)\n+- #10704 `dd07f47` [tests] nits in dbcrash.py (jnewbery)\n+- #10743 `be82498` [test] don't run dbcrash.py on Travis (jnewbery)\n+- #10761 `d3b5870` [tests] fix replace_by_fee.py (jnewbery)\n+- #10759 `1d4805c` Fix multi_rpc test for hosts that dont default to utf8 (TheBlueMatt)\n+- #10190 `e4f226a` [tests] mining functional tests (including regression test for submitblock) (jnewbery)\n+- #10739 `1fc783f` test: Move variable `state` down where it is used (paveljanik)\n+- #9980 `fee0d80` Fix mem access violation merkleblock (Christewart)\n+- #10893 `0c173a1` [QA] Avoid running multiwallet.py twice (jonasschnelli)\n+- #10927 `9d5e8f9` test: Make sure wallet.backup is created in temp path (laanwj)\n+- #10899 `f29d5db` [test] Qt: Use _putenv_s instead of setenv on Windows builds (brianmcmichael)\n+- #10912 `5c8eb79` [tests] Fix incorrect memory_cleanse(\u2026) call in crypto_tests.cpp (practicalswift)\n+- #11001 `fa8a063` [tests] Test disconnecting unsupported service bits logic (jnewbery)\n+- #10695 `929fd72` [qa] Rewrite BIP65/BIP66 functional tests (sdaftuar)\n+- #10963 `ecd2135` [bench] Restore format state of cout after printing with std::fixed/setprecision (practicalswift)\n+- #11025 `e5d26e4` qa: Fix inv race in example_test (MarcoFalke)\n+- #10765 `2c811e0` Tests: address placement should be deterministic by default (ReneNyffenegger)\n+- #11000 `ac016e1` test: Add resendwallettransactions functional tests (promag)\n+- #11032 `aeb3175` [qa] Fix block message processing error in sendheaders.py (sdaftuar)\n+- #10105 `0b9fb68` [tests] fixup - make all Travis test runs quiet, non just cron job runs (jnewbery)\n+- #10222 `6ce7337` [tests] test_runner - check unicode (jnewbery)\n+- #10327 `35da2ae` [tests] remove import-abort-rescan.py (jnewbery)\n+- #11023 `bf74d37` [tests] Add option to attach a python debugger if functional test fails (jnewbery)\n+- #10565 `8c2098a` [coverage] Remove subtrees and benchmarks from coverage report (achow101)\n+\n+### Miscellaneous\n+- #9871 `be8ba2c` Add a tree sha512 hash to merge commits (sipa)\n+- #9821 `d19d45a` util: Specific GetOSRandom for Linux/FreeBSD/OpenBSD (laanwj)\n+- #9903 `ba80a68` Docs: add details to -rpcclienttimeout doc (ian-kelling)\n+- #9910 `53c300f` Docs: correct and elaborate -rpcbind doc (ian-kelling)\n+- #9905 `01b7cda` [contrib] gh-merge: Move second sha512 check to the end (MarcoFalke)\n+- #9880 `4df8213` Verify Tree-SHA512s in merge commits, enforce sigs are not SHA1 (TheBlueMatt)\n+- #9932 `00c13ea` Fix verify-commits on travis and always check top commit's tree (TheBlueMatt)\n+- #9952 `6996e06` Add historical release notes for 0.14.0 (laanwj)\n+- #9940 `fa99663` Fix verify-commits on OSX, update for new bad Tree-SHA512, point travis to different keyservers (TheBlueMatt)\n+- #9963 `8040ae6` util: Properly handle errors during log message formatting (laanwj)\n+- #9984 `cce056d` devtools: Make github-merge compute SHA512 from git, instead of worktree (laanwj)\n+- #9995 `8bcf934` [doc] clarify blockchain size and pruning (askmike)\n+- #9734 `0c17afc` Add updating of chainTxData to release process (sipa)\n+- #10063 `530fcbd` add missing spaces so that markdown recognizes headline (flack)\n+- #10085 `db1ae54` Docs: remove 'noconnect' option (jlopp)\n+- #10090 `8e4f7e7` Update bitcoin.conf with example for pruning (coinables)\n+- #9424 `1a5aaab` Change LogAcceptCategory to use uint32_t rather than sets of strings (gmaxwell)\n+- #10036 `fbf36ca` Fix init README format to render correctly on github (jlopp)\n+- #10058 `a2cd0b0` No need to use OpenSSL malloc/free (tjps)\n+- #10123 `471ed00` Allow debug logs to be excluded from specified component (jnewbery)\n+- #10104 `fadf078` linearize script: Option to use RPC cookie (achow101)\n+- #10162 `a3a2160` [trivial] Log calls to getblocktemplate (jnewbery)\n+- #10155 `928695b` build: Deduplicate version numbers (laanwj)\n+- #10211 `a86255b` [doc] Contributor fixes & new \"finding reviewers\" section (kallewoof)\n+- #10250 `1428f30` Fix some empty vector references (sipa)\n+- #10270 `95f5e44` Remove Clang workaround for Boost 1.46 (fanquake)\n+- #10263 `cb007e4` Trivial: fix fee estimate write error log message (CryptAxe)\n+- #9670 `bd9ec0e` contrib: github-merge improvements (laanwj)\n+- #10260 `1d75597` [doc] Minor corrections to osx dependencies (fanquake)\n+- #10189 `750c5a5` devtools/net: add a verifier for scriptable changes. Use it to make CNode::id private (theuni)\n+- #10322 `bc64b5a` Use hardware timestamps in RNG seeding (sipa)\n+- #10381 `7f2b9e0` Shadowing warnings are not enabled by default, update doc accordingly (paveljanik)\n+- #10380 `b6ee855` [doc] Removing comments about dirty entries on txmempool (madeo)\n+- #10383 `d0c37ee` [logging] log system time and mock time (jnewbery)\n+- #10404 `b45a52a` doc: Add logging to FinalizeNode() (sdaftuar)\n+- #10388 `526e839` Output line to debug.log when IsInitialBlockDownload latches to false (morcos)\n+- #10372 `15254e9` Add perf counter data to GetStrongRandBytes state in scheduler (TheBlueMatt)\n+- #10461 `55b72f3` Update style guide (sipa)\n+- #10486 `10e8c0a` devtools: Retry after signing fails in github-merge (laanwj)\n+- #10447 `f259263` Make bitcoind invalid argument error message specific (laanwj)\n+- #10495 `6a38b79` contrib: Update location of seeds.txt (laanwj)\n+- #10469 `b6b150b` Fixing typo in rpcdump.cpp help message (keystrike)\n+- #10451 `27b9931` contrib/init/bitcoind.openrcconf: Don't disable wallet by default (luke-jr)\n+- #10323 `00d3692` Update to latest libsecp256k1 master (sipa)\n+- #10422 `cec9e1e` Fix timestamp in fee estimate debug message (morcos)\n+- #10566 `5d034ee` [docs] Use the \"domain name setup\" image (previously unused) in the gitian docs (practicalswift)\n+- #10534 `a514ac3` Clarify prevector::erase and avoid swap-to-clear (sipa)\n+- #10575 `22ec768` Header include guideline (sipa)\n+- #10480 `fbf5d3b` Improve commit-check-script.sh (sipa)\n+- #10502 `1ad3d4e` scripted-diff: Remove BOOST_FOREACH, Q_FOREACH and PAIRTYPE (jtimon)\n+- #10377 `b63be2c` Use rdrand as entropy source on supported platforms (sipa)\n+- #9895 `228c319` Turn TryCreateDirectory() into TryCreateDirectories() (benma)\n+- #10602 `d76e84a` Make clang-format use C++11 features (e.g. A<A<int>> instead of A<A<int> >) (practicalswift)\n+- #10623 `c38f540` doc: Add 0.14.2 release notes (MarcoFalke)\n+- #10276 `b750b33` contrib/verifybinaries: allow filtering by platform (knocte)\n+- #10248 `01c4b14` Rewrite addrdb with less duplication using CHashVerifier (sipa)\n+- #10577 `232508f` Add an explanation of quickly hashing onto a non-power of two range (gmaxwell)\n+- #10608 `eee398f` Add a comment explaining the use of MAX_BLOCK_BASE_SIZE (gmaxwell)\n+- #10728 `7397af9` fix typo in help text for removeprunedfunds (AkioNak)\n+- #10193 `6dbcc74` scripted-diff: Remove #include <boost/foreach.hpp> (jtimon)\n+- #10676 `379aed0` document script-based return fields for validateaddress (instagibbs)\n+- #10651 `cef4b5c` Verify binaries from bitcoincore.org and bitcoin.org (TheBlueMatt)\n+- #10786 `ca4c545` Add PR description to merge commit in github-merge.py (sipa)\n+- #10812 `c5904e8` [utils] Allow bitcoin-cli's -rpcconnect option to be used with square brackets (jnewbery)\n+- #10842 `3895e25` Fix incorrect Doxygen tag (@ince \u2192 @since). Doxygen parameter name matching (practicalswift)\n+- #10681 `df0793f` add gdb attach process to test README (instagibbs)\n+- #10789 `1124328` Punctuation/grammer fixes in rpcwallet.cpp (stevendlander)\n+- #10655 `78f307b` Properly document target_confirmations in listsinceblock (RHavar)\n+- #10917 `5c003cb` developer-notes: add reference to snake_case and PascalCase (benma)\n+- #11003 `4b5a7ce` Docs: Capitalize bullet points in CONTRIBUTING guide (eklitzke)\n+- #10968 `98aa3f6` Add instructions for parallel gitian builds (coblee)\n+- #11076 `1c4b9b3` 0.15 release-notes nits: fix redundancy, remove accidental parenthesis & fix range style (practicalswift)\n+- #11090 `8f0121c` Update contributor names in release-notes.md (Derek701)\n+- #11056 `cbdd338` disable jni in builds (instagibbs)\n+- #11080 `2b59cfb` doc: Update build-openbsd for 6.1 (laanwj)\n+- #11119 `0a6af47` [doc] build-windows: Mention that only trusty works (MarcoFalke)\n+- #11108 `e8ad101` Changing -txindex requires -reindex, not -reindex-chainstate (TheBlueMatt)\n+- #9792 `342b9bc` FastRandomContext improvements and switch to ChaCha20 (sipa)\n+- #9505 `67ed40e` Prevector Quick Destruct (JeremyRubin)\n+- #10820 `ef37f20` Use cpuid intrinsics instead of asm code (sipa)\n+- #9999 `a328904` [LevelDB] Plug leveldb logs to bitcoin logs (NicolasDorier)\n+- #9693 `c5e9e42` Prevent integer overflow in ReadVarInt (gmaxwell)\n+- #10129 `351d0ad` scheduler: fix sub-second precision with boost < 1.50 (theuni)\n+- #10153 `fade788` logging: Fix off-by-one for shrinkdebugfile default (MarcoFalke)\n+- #10305 `c45da32` Fix potential NPD introduced in b297426c (TheBlueMatt)\n+- #10338 `daf3e7d` Maintain state across GetStrongRandBytes calls (sipa)\n+- #10544 `a4fe077` Update to LevelDB 1.20 (sipa)\n+- #10614 `cafe24f` random: fix crash on some 64bit platforms (theuni)\n+- #10714 `2a09a38` Avoid printing incorrect block indexing time due to uninitialized variable (practicalswift)\n+- #10837 `8bc6d1f` Fix resource leak on error in GetDevURandom (corebob)\n+- #10832 `89bb036` init: Factor out AppInitLockDataDirectory and fix startup core dump issue (laanwj)\n+- #10914 `b995a37` Add missing lock in CScheduler::AreThreadsServicingQueue() (TheBlueMatt)\n+- #10958 `659c096` Update to latest Bitcoin patches for LevelDB (sipa)\n+- #10919 `c1c671f` Fix more init bugs (TheBlueMatt)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- \u30ed\u30cf\u30f3 \u30c0\u30eb\n+- Ahmad Kazi\n+- aideca\n+- Akio Nakamura\n+- Alex Morcos\n+- Allan Doensen\n+- Andres G. Aragoneses\n+- Andrew Chow\n+- Angel Leon\n+- Awemany\n+- Bob McElrath\n+- Brian McMichael\n+- BtcDrak\n+- Charlie Lee\n+- Chris Gavin\n+- Chris Stewart\n+- Cory Fields\n+- CryptAxe\n+- Dag Robole\n+- Daniel Aleksandersen\n+- Daniel Cousens\n+- darksh1ne\n+- Dimitris Tsapakidis\n+- Eric Shaw\n+- Evan Klitzke\n+- fanquake\n+- Felix Weis\n+- flack\n+- Guido Vranken\n+- Greg Griffith\n+- Gregory Maxwell\n+- Gregory Sanders\n+- Ian Kelling\n+- Jack Grigg\n+- James Evans\n+- James Hilliard\n+- Jameson Lopp\n+- Jeremy Rubin\n+- Jimmy Song\n+- Jo\u00e3o Barbosa\n+- Johnathan Corgan\n+- John Newbery\n+- Jonas Schnelli\n+- Jorge Tim\u00f3n\n+- Karl-Johan Alm\n+- kewde\n+- KibbledJiveElkZoo\n+- Kirit Thadaka\n+- kobake\n+- Kyle Honeycutt\n+- Lawrence Nahum\n+- Luke Dashjr\n+- Marco Falke\n+- Marcos Mayorga\n+- Marijn Stollenga\n+- Mario Dian\n+- Mark Friedenbach\n+- Marko Bencun\n+- Masahiko Hyuga\n+- Matt Corallo\n+- Matthew Zipkin\n+- Matthias Grundmann\n+- Michael Goldstein\n+- Michael Rotarius\n+- Mikerah\n+- Mike van Rossum\n+- Mitchell Cash\n+- Nicolas Dorier\n+- Patrick Strateman\n+- Pavel Jan\u00edk\n+- Pavlos Antoniou\n+- Pavol Rusnak\n+- Pedro Branco\n+- Peter Todd\n+- Pieter Wuille\n+- practicalswift\n+- Ren\u00e9 Nyffenegger\n+- Ricardo Velhote\n+- romanornr\n+- Russell Yanofsky\n+- Rusty Russell\n+- Ryan Havar\n+- shaolinfry\n+- Shigeya Suzuki\n+- Simone Madeo\n+- Spencer Lievens\n+- Steven D. Lander\n+- Suhas Daftuar\n+- Takashi Mitsuta\n+- Thomas Snider\n+- Timothy Redaelli\n+- tintinweb\n+- tnaka\n+- Warren Togami\n+- Wladimir J. van der Laan\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      },
      {
        "sha": "18f3062287306d15c06b00e72a91855148872c08",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -472,6 +472,8 @@ class CAddrMan\n         nTried = 0;\n         nNew = 0;\n         nLastGood = 1; //Initially at 1 so that \"never\" is strictly worse.\n+        mapInfo.clear();\n+        mapAddr.clear();\n     }\n \n     CAddrMan()"
      },
      {
        "sha": "0f2c19bd5df7206814499f232993bd76b5798c42",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -310,6 +310,9 @@ static void MutateTxAddOutPubKey(CMutableTransaction& tx, const std::string& str\n     }\n \n     if (bSegWit) {\n+        if (!pubkey.IsCompressed()) {\n+            throw std::runtime_error(\"Uncompressed pubkeys are not useable for SegWit outputs\");\n+        }\n         // Call GetScriptForWitness() to build a P2WSH scriptPubKey\n         scriptPubKey = GetScriptForWitness(scriptPubKey);\n     }\n@@ -377,6 +380,11 @@ static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& s\n     CScript scriptPubKey = GetScriptForMultisig(required, pubkeys);\n \n     if (bSegWit) {\n+        for (CPubKey& pubkey : pubkeys) {\n+            if (!pubkey.IsCompressed()) {\n+                throw std::runtime_error(\"Uncompressed pubkeys are not useable for SegWit outputs\");\n+            }\n+        }\n         // Call GetScriptForWitness() to build a P2WSH scriptPubKey\n         scriptPubKey = GetScriptForWitness(scriptPubKey);\n     }"
      },
      {
        "sha": "914124cb178183bd7ae726e610d97cdc6b410c74",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 89,
        "deletions": 36,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -184,6 +184,48 @@ struct timeval MillisToTimeval(int64_t nTimeout)\n     return timeout;\n }\n \n+/** SOCKS version */\n+enum SOCKSVersion: uint8_t {\n+    SOCKS4 = 0x04,\n+    SOCKS5 = 0x05\n+};\n+\n+/** Values defined for METHOD in RFC1928 */\n+enum SOCKS5Method: uint8_t {\n+    NOAUTH = 0x00,        //! No authentication required\n+    GSSAPI = 0x01,        //! GSSAPI\n+    USER_PASS = 0x02,     //! Username/password\n+    NO_ACCEPTABLE = 0xff, //! No acceptable methods\n+};\n+\n+/** Values defined for CMD in RFC1928 */\n+enum SOCKS5Command: uint8_t {\n+    CONNECT = 0x01,\n+    BIND = 0x02,\n+    UDP_ASSOCIATE = 0x03\n+};\n+\n+/** Values defined for REP in RFC1928 */\n+enum SOCKS5Reply: uint8_t {\n+    SUCCEEDED = 0x00,        //! Succeeded\n+    GENFAILURE = 0x01,       //! General failure\n+    NOTALLOWED = 0x02,       //! Connection not allowed by ruleset\n+    NETUNREACHABLE = 0x03,   //! Network unreachable\n+    HOSTUNREACHABLE = 0x04,  //! Network unreachable\n+    CONNREFUSED = 0x05,      //! Connection refused\n+    TTLEXPIRED = 0x06,       //! TTL expired\n+    CMDUNSUPPORTED = 0x07,   //! Command not supported\n+    ATYPEUNSUPPORTED = 0x08, //! Address type not supported\n+};\n+\n+/** Values defined for ATYPE in RFC1928 */\n+enum SOCKS5Atyp: uint8_t {\n+    IPV4 = 0x01,\n+    DOMAINNAME = 0x03,\n+    IPV6 = 0x04,\n+};\n+\n+/** Status codes that can be returned by InterruptibleRecv */\n enum class IntrRecvError {\n     OK,\n     Timeout,\n@@ -203,15 +245,15 @@ enum class IntrRecvError {\n  *\n  * @note This function requires that hSocket is in non-blocking mode.\n  */\n-static IntrRecvError InterruptibleRecv(char* data, size_t len, int timeout, const SOCKET& hSocket)\n+static IntrRecvError InterruptibleRecv(uint8_t* data, size_t len, int timeout, const SOCKET& hSocket)\n {\n     int64_t curTime = GetTimeMillis();\n     int64_t endTime = curTime + timeout;\n     // Maximum time to wait in one select call. It will take up until this time (in millis)\n     // to break off in case of an interruption.\n     const int64_t maxWait = 1000;\n     while (len > 0 && curTime < endTime) {\n-        ssize_t ret = recv(hSocket, data, len, 0); // Optimistically try the recv first\n+        ssize_t ret = recv(hSocket, (char*)data, len, 0); // Optimistically try the recv first\n         if (ret > 0) {\n             len -= ret;\n             data += ret;\n@@ -242,24 +284,35 @@ static IntrRecvError InterruptibleRecv(char* data, size_t len, int timeout, cons\n     return len == 0 ? IntrRecvError::OK : IntrRecvError::Timeout;\n }\n \n+/** Credentials for proxy authentication */\n struct ProxyCredentials\n {\n     std::string username;\n     std::string password;\n };\n \n-std::string Socks5ErrorString(int err)\n+/** Convert SOCKS5 reply to a an error message */\n+std::string Socks5ErrorString(uint8_t err)\n {\n     switch(err) {\n-        case 0x01: return \"general failure\";\n-        case 0x02: return \"connection not allowed\";\n-        case 0x03: return \"network unreachable\";\n-        case 0x04: return \"host unreachable\";\n-        case 0x05: return \"connection refused\";\n-        case 0x06: return \"TTL expired\";\n-        case 0x07: return \"protocol error\";\n-        case 0x08: return \"address type not supported\";\n-        default:   return \"unknown\";\n+        case SOCKS5Reply::GENFAILURE:\n+            return \"general failure\";\n+        case SOCKS5Reply::NOTALLOWED:\n+            return \"connection not allowed\";\n+        case SOCKS5Reply::NETUNREACHABLE:\n+            return \"network unreachable\";\n+        case SOCKS5Reply::HOSTUNREACHABLE:\n+            return \"host unreachable\";\n+        case SOCKS5Reply::CONNREFUSED:\n+            return \"connection refused\";\n+        case SOCKS5Reply::TTLEXPIRED:\n+            return \"TTL expired\";\n+        case SOCKS5Reply::CMDUNSUPPORTED:\n+            return \"protocol error\";\n+        case SOCKS5Reply::ATYPEUNSUPPORTED:\n+            return \"address type not supported\";\n+        default:\n+            return \"unknown\";\n     }\n }\n \n@@ -274,34 +327,34 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n     }\n     // Accepted authentication methods\n     std::vector<uint8_t> vSocks5Init;\n-    vSocks5Init.push_back(0x05);\n+    vSocks5Init.push_back(SOCKSVersion::SOCKS5);\n     if (auth) {\n-        vSocks5Init.push_back(0x02); // # METHODS\n-        vSocks5Init.push_back(0x00); // X'00' NO AUTHENTICATION REQUIRED\n-        vSocks5Init.push_back(0x02); // X'02' USERNAME/PASSWORD (RFC1929)\n+        vSocks5Init.push_back(0x02); // Number of methods\n+        vSocks5Init.push_back(SOCKS5Method::NOAUTH);\n+        vSocks5Init.push_back(SOCKS5Method::USER_PASS);\n     } else {\n-        vSocks5Init.push_back(0x01); // # METHODS\n-        vSocks5Init.push_back(0x00); // X'00' NO AUTHENTICATION REQUIRED\n+        vSocks5Init.push_back(0x01); // Number of methods\n+        vSocks5Init.push_back(SOCKS5Method::NOAUTH);\n     }\n     ssize_t ret = send(hSocket, (const char*)vSocks5Init.data(), vSocks5Init.size(), MSG_NOSIGNAL);\n     if (ret != (ssize_t)vSocks5Init.size()) {\n         CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n-    char pchRet1[2];\n+    uint8_t pchRet1[2];\n     if ((recvr = InterruptibleRecv(pchRet1, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: InterruptibleRecv() timeout or other failure\\n\", strDest, port);\n         return false;\n     }\n-    if (pchRet1[0] != 0x05) {\n+    if (pchRet1[0] != SOCKSVersion::SOCKS5) {\n         CloseSocket(hSocket);\n         return error(\"Proxy failed to initialize\");\n     }\n-    if (pchRet1[1] == 0x02 && auth) {\n+    if (pchRet1[1] == SOCKS5Method::USER_PASS && auth) {\n         // Perform username/password authentication (as described in RFC1929)\n         std::vector<uint8_t> vAuth;\n-        vAuth.push_back(0x01);\n+        vAuth.push_back(0x01); // Current (and only) version of user/pass subnegotiation\n         if (auth->username.size() > 255 || auth->password.size() > 255)\n             return error(\"Proxy username or password too long\");\n         vAuth.push_back(auth->username.size());\n@@ -314,7 +367,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             return error(\"Error sending authentication to proxy\");\n         }\n         LogPrint(BCLog::PROXY, \"SOCKS5 sending proxy authentication %s:%s\\n\", auth->username, auth->password);\n-        char pchRetA[2];\n+        uint8_t pchRetA[2];\n         if ((recvr = InterruptibleRecv(pchRetA, 2, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n             CloseSocket(hSocket);\n             return error(\"Error reading proxy authentication response\");\n@@ -323,17 +376,17 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             CloseSocket(hSocket);\n             return error(\"Proxy authentication unsuccessful\");\n         }\n-    } else if (pchRet1[1] == 0x00) {\n+    } else if (pchRet1[1] == SOCKS5Method::NOAUTH) {\n         // Perform no authentication\n     } else {\n         CloseSocket(hSocket);\n         return error(\"Proxy requested wrong authentication method %02x\", pchRet1[1]);\n     }\n     std::vector<uint8_t> vSocks5;\n-    vSocks5.push_back(0x05); // VER protocol version\n-    vSocks5.push_back(0x01); // CMD CONNECT\n-    vSocks5.push_back(0x00); // RSV Reserved\n-    vSocks5.push_back(0x03); // ATYP DOMAINNAME\n+    vSocks5.push_back(SOCKSVersion::SOCKS5); // VER protocol version\n+    vSocks5.push_back(SOCKS5Command::CONNECT); // CMD CONNECT\n+    vSocks5.push_back(0x00); // RSV Reserved must be 0\n+    vSocks5.push_back(SOCKS5Atyp::DOMAINNAME); // ATYP DOMAINNAME\n     vSocks5.push_back(strDest.size()); // Length<=255 is checked at beginning of function\n     vSocks5.insert(vSocks5.end(), strDest.begin(), strDest.end());\n     vSocks5.push_back((port >> 8) & 0xFF);\n@@ -343,7 +396,7 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n         CloseSocket(hSocket);\n         return error(\"Error sending to proxy\");\n     }\n-    char pchRet2[4];\n+    uint8_t pchRet2[4];\n     if ((recvr = InterruptibleRecv(pchRet2, 4, SOCKS5_RECV_TIMEOUT, hSocket)) != IntrRecvError::OK) {\n         CloseSocket(hSocket);\n         if (recvr == IntrRecvError::Timeout) {\n@@ -355,26 +408,26 @@ static bool Socks5(const std::string& strDest, int port, const ProxyCredentials\n             return error(\"Error while reading proxy response\");\n         }\n     }\n-    if (pchRet2[0] != 0x05) {\n+    if (pchRet2[0] != SOCKSVersion::SOCKS5) {\n         CloseSocket(hSocket);\n         return error(\"Proxy failed to accept request\");\n     }\n-    if (pchRet2[1] != 0x00) {\n+    if (pchRet2[1] != SOCKS5Reply::SUCCEEDED) {\n         // Failures to connect to a peer that are not proxy errors\n         CloseSocket(hSocket);\n         LogPrintf(\"Socks5() connect to %s:%d failed: %s\\n\", strDest, port, Socks5ErrorString(pchRet2[1]));\n         return false;\n     }\n-    if (pchRet2[2] != 0x00) {\n+    if (pchRet2[2] != 0x00) { // Reserved field must be 0\n         CloseSocket(hSocket);\n         return error(\"Error: malformed proxy response\");\n     }\n-    char pchRet3[256];\n+    uint8_t pchRet3[256];\n     switch (pchRet2[3])\n     {\n-        case 0x01: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case 0x04: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n-        case 0x03:\n+        case SOCKS5Atyp::IPV4: recvr = InterruptibleRecv(pchRet3, 4, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case SOCKS5Atyp::IPV6: recvr = InterruptibleRecv(pchRet3, 16, SOCKS5_RECV_TIMEOUT, hSocket); break;\n+        case SOCKS5Atyp::DOMAINNAME:\n         {\n             recvr = InterruptibleRecv(pchRet3, 1, SOCKS5_RECV_TIMEOUT, hSocket);\n             if (recvr != IntrRecvError::OK) {"
      },
      {
        "sha": "56373563b81b4b37cf68a773c837453171d7e8b0",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -123,7 +123,11 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *_platformStyle, const NetworkStyle *\n     spinnerFrame(0),\n     platformStyle(_platformStyle)\n {\n-    GUIUtil::restoreWindowGeometry(\"nWindow\", QSize(850, 550), this);\n+    QSettings settings;\n+    if (!restoreGeometry(settings.value(\"MainWindowGeometry\").toByteArray())) {\n+        // Restore failed (perhaps missing setting), center the window\n+        move(QApplication::desktop()->availableGeometry().center() - frameGeometry().center());\n+    }\n \n     QString windowTitle = tr(PACKAGE_NAME) + \" - \";\n #ifdef ENABLE_WALLET\n@@ -261,7 +265,8 @@ BitcoinGUI::~BitcoinGUI()\n     // Unsubscribe from notifications from core\n     unsubscribeFromCoreSignals();\n \n-    GUIUtil::saveWindowGeometry(\"nWindow\", this);\n+    QSettings settings;\n+    settings.setValue(\"MainWindowGeometry\", saveGeometry());\n     if(trayIcon) // Hide tray icon, as deleting will let it linger until quit (on Ubuntu)\n         trayIcon->hide();\n #ifdef Q_OS_MAC"
      },
      {
        "sha": "a0e48334c1b5b4394ed5f7b96a1a1ee3e5eaed1e",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -846,19 +846,13 @@\n                <item>\n                 <layout class=\"QHBoxLayout\" name=\"horizontalLayoutFee13\">\n                  <item>\n-                  <widget class=\"QRadioButton\" name=\"radioCustomPerKilobyte\">\n+                  <widget class=\"QLabel\" name=\"labelCustomPerKilobyte\">\n                    <property name=\"toolTip\">\n                     <string>If the custom fee is set to 1000 satoshis and the transaction is only 250 bytes, then &quot;per kilobyte&quot; only pays 250 satoshis in fee, while &quot;total at least&quot; pays 1000 satoshis. For transactions bigger than a kilobyte both pay by kilobyte.</string>\n                    </property>\n                    <property name=\"text\">\n                     <string>per kilobyte</string>\n                    </property>\n-                   <property name=\"checked\">\n-                    <bool>true</bool>\n-                   </property>\n-                   <attribute name=\"buttonGroup\">\n-                    <string notr=\"true\">groupCustomFee</string>\n-                   </attribute>\n                   </widget>\n                  </item>\n                  <item>\n@@ -1285,6 +1279,5 @@\n  <connections/>\n  <buttongroups>\n   <buttongroup name=\"groupFee\"/>\n-  <buttongroup name=\"groupCustomFee\"/>\n  </buttongroups>\n </ui>"
      },
      {
        "sha": "69c3e06869639ec25d7e39261bc13cb193997d44",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -842,32 +842,6 @@ bool SetStartOnSystemStartup(bool fAutoStart) { return false; }\n \n #endif\n \n-void saveWindowGeometry(const QString& strSetting, QWidget *parent)\n-{\n-    QSettings settings;\n-    settings.setValue(strSetting + \"Pos\", parent->pos());\n-    settings.setValue(strSetting + \"Size\", parent->size());\n-}\n-\n-void restoreWindowGeometry(const QString& strSetting, const QSize& defaultSize, QWidget *parent)\n-{\n-    QSettings settings;\n-    QPoint pos = settings.value(strSetting + \"Pos\").toPoint();\n-    QSize size = settings.value(strSetting + \"Size\", defaultSize).toSize();\n-\n-    parent->resize(size);\n-    parent->move(pos);\n-\n-    if ((!pos.x() && !pos.y()) || (QApplication::desktop()->screenNumber(parent) == -1))\n-    {\n-        QRect screen = QApplication::desktop()->screenGeometry();\n-        QPoint defaultPos((screen.width() - defaultSize.width()) / 2,\n-                          (screen.height() - defaultSize.height()) / 2);\n-        parent->resize(defaultSize);\n-        parent->move(defaultPos);\n-    }\n-}\n-\n void setClipboard(const QString& str)\n {\n     QApplication::clipboard()->setText(str, QClipboard::Clipboard);"
      },
      {
        "sha": "d10818d0c88e9804497266e5eb738d3948e484e0",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -179,11 +179,6 @@ namespace GUIUtil\n     bool GetStartOnSystemStartup();\n     bool SetStartOnSystemStartup(bool fAutoStart);\n \n-    /** Save window size and position */\n-    void saveWindowGeometry(const QString& strSetting, QWidget *parent);\n-    /** Restore window size and position */\n-    void restoreWindowGeometry(const QString& strSetting, const QSize &defaultSizeIn, QWidget *parent);\n-\n     /* Convert QString to OS specific boost path through UTF-8 */\n     fs::path qstringToBoostPath(const QString &path);\n "
      },
      {
        "sha": "4f357e297d79e6cd89a0ed27abe43553beeb6b21",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -99,15 +99,18 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n                 progressDelta = progressStart-sample.second;\n                 timeDelta = blockProcessTime[0].first - sample.first;\n                 progressPerHour = progressDelta/(double)timeDelta*1000*3600;\n-                remainingMSecs = remainingProgress / progressDelta * timeDelta;\n+                remainingMSecs = (progressDelta > 0) ? remainingProgress / progressDelta * timeDelta : -1;\n                 break;\n             }\n         }\n         // show progress increase per hour\n         ui->progressIncreasePerH->setText(QString::number(progressPerHour*100, 'f', 2)+\"%\");\n \n-        // show expected remaining time\n-        ui->expectedTimeLeft->setText(GUIUtil::formatNiceTimeOffset(remainingMSecs/1000.0));\n+        if(remainingMSecs >= 0) {\t\n+            ui->expectedTimeLeft->setText(GUIUtil::formatNiceTimeOffset(remainingMSecs / 1000.0));\n+        } else {\n+            ui->expectedTimeLeft->setText(QObject::tr(\"unknown\"));\n+        }\n \n         static const int MAX_SAMPLES = 5000;\n         if (blockProcessTime.count() > MAX_SAMPLES)\n@@ -169,4 +172,4 @@ void ModalOverlay::closeClicked()\n {\n     showHide(true);\n     userClosed = true;\n-}\n+}\n\\ No newline at end of file"
      },
      {
        "sha": "550884ed8e4f2f01dfb4211e75be21d2120460fe",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -80,6 +80,8 @@ OptionsDialog::OptionsDialog(QWidget *parent, bool enableWallet) :\n     ui->bitcoinAtStartup->setToolTip(ui->bitcoinAtStartup->toolTip().arg(tr(PACKAGE_NAME)));\n     ui->bitcoinAtStartup->setText(ui->bitcoinAtStartup->text().arg(tr(PACKAGE_NAME)));\n \n+    ui->openBitcoinConfButton->setToolTip(ui->openBitcoinConfButton->toolTip().arg(tr(PACKAGE_NAME)));\n+\n     ui->lang->setToolTip(ui->lang->toolTip().arg(tr(PACKAGE_NAME)));\n     ui->lang->addItem(QString(\"(\") + tr(\"default\") + QString(\")\"), QVariant(\"\"));\n     for (const QString &langStr : translations.entryList())"
      },
      {
        "sha": "a2dd52d9cbe4b9e2125b0e0541b1be74aa143442",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -151,10 +151,32 @@ void OptionsModel::Init(bool resetSettings)\n     language = settings.value(\"language\").toString();\n }\n \n+/** Helper function to copy contents from one QSettings to another.\n+ * By using allKeys this also covers nested settings in a hierarchy.\n+ */\n+static void CopySettings(QSettings& dst, const QSettings& src)\n+{\n+    for (const QString& key : src.allKeys()) {\n+        dst.setValue(key, src.value(key));\n+    }\n+}\n+\n+/** Back up a QSettings to an ini-formatted file. */\n+static void BackupSettings(const fs::path& filename, const QSettings& src)\n+{\n+    qWarning() << \"Backing up GUI settings to\" << GUIUtil::boostPathToQString(filename);\n+    QSettings dst(GUIUtil::boostPathToQString(filename), QSettings::IniFormat);\n+    dst.clear();\n+    CopySettings(dst, src);\n+}\n+\n void OptionsModel::Reset()\n {\n     QSettings settings;\n \n+    // Backup old settings to chain-specific datadir for troubleshooting\n+    BackupSettings(GetDataDir(true) / \"guisettings.ini.bak\", settings);\n+\n     // Save the strDataDir setting\n     QString dataDir = Intro::getDefaultDataDirectory();\n     dataDir = settings.value(\"strDataDir\", dataDir).toString();"
      },
      {
        "sha": "d895fc16630c96c621bd2c358adcb7499d156781",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -28,6 +28,7 @@\n #include <wallet/wallet.h>\n #endif\n \n+#include <QDesktopWidget>\n #include <QKeyEvent>\n #include <QMenu>\n #include <QMessageBox>\n@@ -428,7 +429,11 @@ RPCConsole::RPCConsole(const PlatformStyle *_platformStyle, QWidget *parent) :\n     consoleFontSize(0)\n {\n     ui->setupUi(this);\n-    GUIUtil::restoreWindowGeometry(\"nRPCConsoleWindow\", this->size(), this);\n+    QSettings settings;\n+    if (!restoreGeometry(settings.value(\"RPCConsoleWindowGeometry\").toByteArray())) {\n+        // Restore failed (perhaps missing setting), center the window\n+        move(QApplication::desktop()->availableGeometry().center() - frameGeometry().center());\n+    }\n \n     ui->openDebugLogfileButton->setToolTip(ui->openDebugLogfileButton->toolTip().arg(tr(PACKAGE_NAME)));\n \n@@ -466,14 +471,14 @@ RPCConsole::RPCConsole(const PlatformStyle *_platformStyle, QWidget *parent) :\n     ui->detailWidget->hide();\n     ui->peerHeading->setText(tr(\"Select a peer to view detailed information.\"));\n \n-    QSettings settings;\n     consoleFontSize = settings.value(fontSizeSettingsKey, QFontInfo(QFont()).pointSize()).toInt();\n     clear();\n }\n \n RPCConsole::~RPCConsole()\n {\n-    GUIUtil::saveWindowGeometry(\"nRPCConsoleWindow\", this);\n+    QSettings settings;\n+    settings.setValue(\"RPCConsoleWindowGeometry\", saveGeometry());\n     RPCUnsetTimerInterface(rpcTimerInterface);\n     delete rpcTimerInterface;\n     delete ui;"
      },
      {
        "sha": "96adae73daf6849091eabdd5ef28828d2e8d6e4f",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 18,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -114,10 +114,6 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n         settings.setValue(\"nFeeRadio\", 1); // custom\n     if (!settings.contains(\"nFeeRadio\"))\n         settings.setValue(\"nFeeRadio\", 0); // recommended\n-    if (!settings.contains(\"nCustomFeeRadio\") && settings.contains(\"nTransactionFee\") && settings.value(\"nTransactionFee\").toLongLong() > 0) // compatibility\n-        settings.setValue(\"nCustomFeeRadio\", 1); // total at least\n-    if (!settings.contains(\"nCustomFeeRadio\"))\n-        settings.setValue(\"nCustomFeeRadio\", 0); // per kilobyte\n     if (!settings.contains(\"nSmartFeeSliderPosition\"))\n         settings.setValue(\"nSmartFeeSliderPosition\", 0);\n     if (!settings.contains(\"nTransactionFee\"))\n@@ -127,8 +123,6 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n     ui->groupFee->setId(ui->radioSmartFee, 0);\n     ui->groupFee->setId(ui->radioCustomFee, 1);\n     ui->groupFee->button((int)std::max(0, std::min(1, settings.value(\"nFeeRadio\").toInt())))->setChecked(true);\n-    ui->groupCustomFee->setId(ui->radioCustomPerKilobyte, 0);\n-    ui->groupCustomFee->button(0)->setChecked(true);\n     ui->customFee->setValue(settings.value(\"nTransactionFee\").toLongLong());\n     ui->checkBoxMinimumFee->setChecked(settings.value(\"fPayOnlyMinFee\").toBool());\n     minimizeFeeSection(settings.value(\"fFeeSectionMinimized\").toBool());\n@@ -178,7 +172,6 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         connect(ui->confTargetSelector, SIGNAL(currentIndexChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(updateFeeSectionControls()));\n         connect(ui->groupFee, SIGNAL(buttonClicked(int)), this, SLOT(coinControlUpdateLabels()));\n-        connect(ui->groupCustomFee, SIGNAL(buttonClicked(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->customFee, SIGNAL(valueChanged()), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(setMinimumFee()));\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(updateFeeSectionControls()));\n@@ -214,7 +207,6 @@ SendCoinsDialog::~SendCoinsDialog()\n     QSettings settings;\n     settings.setValue(\"fFeeSectionMinimized\", fFeeMinimized);\n     settings.setValue(\"nFeeRadio\", ui->groupFee->checkedId());\n-    settings.setValue(\"nCustomFeeRadio\", ui->groupCustomFee->checkedId());\n     settings.setValue(\"nConfTarget\", getConfTargetForIndex(ui->confTargetSelector->currentIndex()));\n     settings.setValue(\"nTransactionFee\", (qint64)ui->customFee->value());\n     settings.setValue(\"fPayOnlyMinFee\", ui->checkBoxMinimumFee->isChecked());\n@@ -609,7 +601,6 @@ void SendCoinsDialog::on_buttonMinimizeFee_clicked()\n \n void SendCoinsDialog::setMinimumFee()\n {\n-    ui->radioCustomPerKilobyte->setChecked(true);\n     ui->customFee->setValue(CWallet::GetRequiredFee(1000));\n }\n \n@@ -622,7 +613,7 @@ void SendCoinsDialog::updateFeeSectionControls()\n     ui->labelFeeEstimation      ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->checkBoxMinimumFee      ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->labelMinFeeWarning      ->setEnabled(ui->radioCustomFee->isChecked());\n-    ui->radioCustomPerKilobyte  ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n+    ui->labelCustomPerKilobyte  ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n     ui->customFee               ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n }\n \n@@ -634,8 +625,7 @@ void SendCoinsDialog::updateFeeMinimizedLabel()\n     if (ui->radioSmartFee->isChecked())\n         ui->labelFeeMinimized->setText(ui->labelSmartFee->text());\n     else {\n-        ui->labelFeeMinimized->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), ui->customFee->value()) +\n-            ((ui->radioCustomPerKilobyte->isChecked()) ? \"/kB\" : \"\"));\n+        ui->labelFeeMinimized->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), ui->customFee->value()) + \"/kB\");\n     }\n }\n \n@@ -789,18 +779,16 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n         }\n         else // Valid address\n         {\n-            CKeyID keyid;\n-            addr.GetKeyID(keyid);\n-            if (!model->havePrivKey(keyid)) // Unknown change address\n-            {\n+            const CTxDestination dest = addr.Get();\n+            if (!model->IsSpendable(dest)) {\n                 ui->labelCoinControlChangeLabel->setText(tr(\"Warning: Unknown change address\"));\n \n                 // confirmation dialog\n                 QMessageBox::StandardButton btnRetVal = QMessageBox::question(this, tr(\"Confirm custom change address\"), tr(\"The address you selected for change is not part of this wallet. Any or all funds in your wallet may be sent to this address. Are you sure?\"),\n                     QMessageBox::Yes | QMessageBox::Cancel, QMessageBox::Cancel);\n \n                 if(btnRetVal == QMessageBox::Yes)\n-                    CoinControlDialog::coinControl->destChange = addr.Get();\n+                    CoinControlDialog::coinControl->destChange = dest;\n                 else\n                 {\n                     ui->lineEditCoinControlChange->setText(\"\");\n@@ -819,7 +807,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n                 else\n                     ui->labelCoinControlChangeLabel->setText(tr(\"(no label)\"));\n \n-                CoinControlDialog::coinControl->destChange = addr.Get();\n+                CoinControlDialog::coinControl->destChange = dest;\n             }\n         }\n     }"
      },
      {
        "sha": "39dfdb587c2a6c1d0288a400d8dbb7e4551bfa8b",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 7,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -33,6 +33,7 @@\n #include <QScrollBar>\n #include <QSignalMapper>\n #include <QTableView>\n+#include <QTimer>\n #include <QUrl>\n #include <QVBoxLayout>\n \n@@ -112,6 +113,17 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     amountWidget->setValidator(new QDoubleValidator(0, 1e20, 8, this));\n     hlayout->addWidget(amountWidget);\n \n+    // Delay before filtering transactions in ms\n+    static const int input_filter_delay = 200;\n+\n+    QTimer* amount_typing_delay = new QTimer(this);\n+    amount_typing_delay->setSingleShot(true);\n+    amount_typing_delay->setInterval(input_filter_delay);\n+\n+    QTimer* prefix_typing_delay = new QTimer(this);\n+    prefix_typing_delay->setSingleShot(true);\n+    prefix_typing_delay->setInterval(input_filter_delay);\n+\n     QVBoxLayout *vlayout = new QVBoxLayout(this);\n     vlayout->setContentsMargins(0,0,0,0);\n     vlayout->setSpacing(0);\n@@ -173,8 +185,10 @@ TransactionView::TransactionView(const PlatformStyle *platformStyle, QWidget *pa\n     connect(dateWidget, SIGNAL(activated(int)), this, SLOT(chooseDate(int)));\n     connect(typeWidget, SIGNAL(activated(int)), this, SLOT(chooseType(int)));\n     connect(watchOnlyWidget, SIGNAL(activated(int)), this, SLOT(chooseWatchonly(int)));\n-    connect(addressWidget, SIGNAL(textChanged(QString)), this, SLOT(changedPrefix(QString)));\n-    connect(amountWidget, SIGNAL(textChanged(QString)), this, SLOT(changedAmount(QString)));\n+    connect(amountWidget, SIGNAL(textChanged(QString)), amount_typing_delay, SLOT(start()));\n+    connect(amount_typing_delay, SIGNAL(timeout()), this, SLOT(changedAmount()));\n+    connect(addressWidget, SIGNAL(textChanged(QString)), prefix_typing_delay, SLOT(start()));\n+    connect(prefix_typing_delay, SIGNAL(timeout()), this, SLOT(changedPrefix()));\n \n     connect(view, SIGNAL(doubleClicked(QModelIndex)), this, SIGNAL(doubleClicked(QModelIndex)));\n     connect(view, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(contextualMenu(QPoint)));\n@@ -312,20 +326,19 @@ void TransactionView::chooseWatchonly(int idx)\n         (TransactionFilterProxy::WatchOnlyFilter)watchOnlyWidget->itemData(idx).toInt());\n }\n \n-void TransactionView::changedPrefix(const QString &prefix)\n+void TransactionView::changedPrefix()\n {\n     if(!transactionProxyModel)\n         return;\n-    transactionProxyModel->setAddressPrefix(prefix);\n+    transactionProxyModel->setAddressPrefix(addressWidget->text());\n }\n \n-void TransactionView::changedAmount(const QString &amount)\n+void TransactionView::changedAmount()\n {\n     if(!transactionProxyModel)\n         return;\n     CAmount amount_parsed = 0;\n-    if(BitcoinUnits::parse(model->getOptionsModel()->getDisplayUnit(), amount, &amount_parsed))\n-    {\n+    if (BitcoinUnits::parse(model->getOptionsModel()->getDisplayUnit(), amountWidget->text(), &amount_parsed)) {\n         transactionProxyModel->setMinAmount(amount_parsed);\n     }\n     else"
      },
      {
        "sha": "5b4cfd4a88d3822eb1c3559317a53374fd6b651e",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -112,8 +112,8 @@ public Q_SLOTS:\n     void chooseDate(int idx);\n     void chooseType(int idx);\n     void chooseWatchonly(int idx);\n-    void changedPrefix(const QString &prefix);\n-    void changedAmount(const QString &amount);\n+    void changedAmount();\n+    void changedPrefix();\n     void exportClicked();\n     void focusTransaction(const QModelIndex&);\n "
      },
      {
        "sha": "aedbf22e4d1d3c637fcae04ef17217af49c39f42",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -561,9 +561,9 @@ bool WalletModel::getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const\n     return wallet->GetPubKey(address, vchPubKeyOut);\n }\n \n-bool WalletModel::havePrivKey(const CKeyID &address) const\n+bool WalletModel::IsSpendable(const CTxDestination& dest) const\n {\n-    return wallet->HaveKey(address);\n+    return IsMine(*wallet, dest) & ISMINE_SPENDABLE;\n }\n \n bool WalletModel::getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const"
      },
      {
        "sha": "05733f82727a6be6d695685e71297e5deb98c6a4",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -190,7 +190,7 @@ class WalletModel : public QObject\n     UnlockContext requestUnlock();\n \n     bool getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n-    bool havePrivKey(const CKeyID &address) const;\n+    bool IsSpendable(const CTxDestination& dest) const;\n     bool getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const;\n     void getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs);\n     bool isSpent(const COutPoint& outpoint) const;"
      },
      {
        "sha": "406ad2f6ec6032f65be8fbe170b85d35247e7c99",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -115,8 +115,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"keypoolrefill\", 0, \"newsize\" },\n     { \"getrawmempool\", 0, \"verbose\" },\n     { \"estimatefee\", 0, \"nblocks\" },\n-    { \"estimatesmartfee\", 0, \"nblocks\" },\n-    { \"estimaterawfee\", 0, \"nblocks\" },\n+    { \"estimatesmartfee\", 0, \"conf_target\" },\n+    { \"estimaterawfee\", 0, \"conf_target\" },\n     { \"estimaterawfee\", 1, \"threshold\" },\n     { \"prioritisetransaction\", 1, \"dummy\" },\n     { \"prioritisetransaction\", 2, \"fee_delta\" },"
      },
      {
        "sha": "dc6bcec382fb26f57fcc95da986d0cd5a66685da",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -66,9 +66,14 @@ static const std::string COOKIEAUTH_USER = \"__cookie__\";\n /** Default name for auth cookie file */\n static const std::string COOKIEAUTH_FILE = \".cookie\";\n \n-fs::path GetAuthCookieFile()\n+/** Get name of RPC authentication cookie file */\n+static fs::path GetAuthCookieFile(bool temp=false)\n {\n-    fs::path path(gArgs.GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE));\n+    std::string arg = gArgs.GetArg(\"-rpccookiefile\", COOKIEAUTH_FILE);\n+    if (temp) {\n+        arg += \".tmp\";\n+    }\n+    fs::path path(arg);\n     if (!path.is_complete()) path = GetDataDir() / path;\n     return path;\n }\n@@ -84,14 +89,20 @@ bool GenerateAuthCookie(std::string *cookie_out)\n      * these are set to 077 in init.cpp unless overridden with -sysperms.\n      */\n     std::ofstream file;\n-    fs::path filepath = GetAuthCookieFile();\n-    file.open(filepath.string().c_str());\n+    fs::path filepath_tmp = GetAuthCookieFile(true);\n+    file.open(filepath_tmp.string().c_str());\n     if (!file.is_open()) {\n-        LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath.string());\n+        LogPrintf(\"Unable to open cookie authentication file %s for writing\\n\", filepath_tmp.string());\n         return false;\n     }\n     file << cookie;\n     file.close();\n+\n+    fs::path filepath = GetAuthCookieFile(false);\n+    if (!RenameOver(filepath_tmp, filepath)) {\n+        LogPrintf(\"Unable to rename cookie authentication file %s to %s\\n\", filepath_tmp.string(), filepath.string());\n+        return false;\n+    }\n     LogPrintf(\"Generated RPC authentication cookie %s\\n\", filepath.string());\n \n     if (cookie_out)"
      },
      {
        "sha": "5c9c64f67d1ce47b9b3131ad8972c42759a11ab7",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -91,8 +91,6 @@ UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const Un\n std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n UniValue JSONRPCError(int code, const std::string& message);\n \n-/** Get name of RPC authentication cookie file */\n-fs::path GetAuthCookieFile();\n /** Generate a new RPC authentication cookie and write it to disk */\n bool GenerateAuthCookie(std::string *cookie_out);\n /** Read the RPC authentication cookie from disk */"
      },
      {
        "sha": "cd2fecd2245590431ffa61298efc4f6b0b574b56",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -4,7 +4,9 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"validationinterface.h\"\n+\n #include \"init.h\"\n+#include \"primitives/block.h\"\n #include \"scheduler.h\"\n #include \"sync.h\"\n #include \"util.h\""
      },
      {
        "sha": "59588023ad77793fdab28c8371ece94062a3804b",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -107,7 +107,7 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n // return the numerical statistics of blocks signalling the specified BIP9 condition in this current period\n BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const\n {\n-    BIP9Stats stats;\n+    BIP9Stats stats = {};\n \n     stats.period = Period(params);\n     stats.threshold = Threshold(params);"
      },
      {
        "sha": "d2fe4866fae36743e521b8db773e328ef86d12b3",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -101,8 +101,10 @@ bool CDBEnv::Open(const fs::path& pathIn)\n                              DB_RECOVER |\n                              nEnvFlags,\n                          S_IRUSR | S_IWUSR);\n-    if (ret != 0)\n+    if (ret != 0) {\n+        dbenv->close(0);\n         return error(\"CDBEnv::Open: Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+    }\n \n     fDbEnvInit = true;\n     fMockDb = false;\n@@ -196,9 +198,9 @@ bool CDB::Recover(const std::string& filename, void *callbackDataIn, bool (*reco\n                             DB_BTREE,           // Database type\n                             DB_CREATE,          // Flags\n                             0);\n-    if (ret > 0)\n-    {\n+    if (ret > 0) {\n         LogPrintf(\"Cannot create database file %s\\n\", filename);\n+        pdbCopy->close(0);\n         return false;\n     }\n \n@@ -536,8 +538,10 @@ bool CDB::Rewrite(CWalletDBWrapper& dbw, const char* pszSkip)\n                         env->CloseDb(strFile);\n                         if (pdbCopy->close(0))\n                             fSuccess = false;\n-                        delete pdbCopy;\n+                    } else {\n+                        pdbCopy->close(0);\n                     }\n+                    delete pdbCopy;\n                 }\n                 if (fSuccess) {\n                     Db dbA(env->dbenv, 0);"
      },
      {
        "sha": "6c8ff7fc3b2ef4b3fe25a6f4db868ac3bc1f3b62",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -79,10 +79,10 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n+            \"importprivkey \\\"privkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n+            \"1. \\\"privkey\\\"          (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n@@ -595,7 +595,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             \"dumpwallet \\\"filename\\\"\\n\"\n-            \"\\nDumps all wallet keys in a human-readable format.\\n\"\n+            \"\\nDumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"filename\\\"    (string, required) The filename with path (either absolute or relative to bitcoind)\\n\"\n             \"\\nResult:\\n\"\n@@ -611,9 +611,19 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    std::ofstream file;\n     boost::filesystem::path filepath = request.params[0].get_str();\n     filepath = boost::filesystem::absolute(filepath);\n+\n+    /* Prevent arbitrary files from being overwritten. There have been reports\n+     * that users have overwritten wallet files this way:\n+     * https://github.com/bitcoin/bitcoin/issues/9934\n+     * It may also avoid other security issues.\n+     */\n+    if (boost::filesystem::exists(filepath)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, filepath.string() + \" already exists. If you are sure this is what you want, move it out of the way first\");\n+    }\n+\n+    std::ofstream file;\n     file.open(filepath.string().c_str());\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n@@ -950,7 +960,7 @@ UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int6\n                 pwallet->SetAddressBook(vchAddress, label, \"receive\");\n \n                 if (pwallet->HaveKey(vchAddress)) {\n-                    return false;\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }\n \n                 pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;"
      },
      {
        "sha": "5ebacd57d3ab897f3bb8c5fe7d2fe221eaf96d0f",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -364,6 +364,12 @@ BOOST_AUTO_TEST_CASE(ApproximateBestSubset)\n     empty_wallet();\n }\n \n+static void AddKey(CWallet& wallet, const CKey& key)\n+{\n+    LOCK(wallet.cs_wallet);\n+    wallet.AddKeyPubKey(key, key.GetPubKey());\n+}\n+\n BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n {\n     LOCK(cs_main);\n@@ -379,8 +385,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // and new block files.\n     {\n         CWallet wallet;\n-        LOCK(wallet.cs_wallet);\n-        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        AddKey(wallet, coinbaseKey);\n         BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n     }\n@@ -393,8 +398,7 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     // file.\n     {\n         CWallet wallet;\n-        LOCK(wallet.cs_wallet);\n-        wallet.AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        AddKey(wallet, coinbaseKey);\n         BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n@@ -599,8 +603,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         wallet.reset(new CWallet(std::unique_ptr<CWalletDBWrapper>(new CWalletDBWrapper(&bitdb, \"wallet_test.dat\"))));\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n-        LOCK(wallet->cs_wallet);\n-        wallet->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        AddKey(*wallet, coinbaseKey);\n         wallet->ScanForWalletTransactions(chainActive.Genesis());\n     }\n \n@@ -635,7 +638,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n {\n     std::string coinbaseAddress = coinbaseKey.GetPubKey().GetID().ToString();\n-    LOCK(wallet->cs_wallet);\n+    LOCK2(cs_main, wallet->cs_wallet);\n \n     // Confirm ListCoins initially returns 1 coin grouped under coinbaseKey\n     // address."
      },
      {
        "sha": "5e833ebee70e81dc3c1f5c0abcf36ba21188a0ba",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -969,6 +969,15 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n             wtx.fFromMe = wtxIn.fFromMe;\n             fUpdated = true;\n         }\n+        // If we have a witness-stripped version of this transaction, and we\n+        // see a new version with a witness, then we must be upgrading a pre-segwit\n+        // wallet.  Store the new version of the transaction with the witness,\n+        // as the stripped-version must be invalid.\n+        // TODO: Store all versions of the transaction, instead of just one.\n+        if (wtxIn.tx->HasWitness() && !wtx.tx->HasWitness()) {\n+            wtx.SetTx(wtxIn.tx);\n+            fUpdated = true;\n+        }\n     }\n \n     //// debug print\n@@ -3101,13 +3110,14 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_c\n \n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n+    LOCK2(cs_main, cs_wallet);\n+\n     fFirstRunRet = false;\n     DBErrors nLoadWalletRet = CWalletDB(*dbw,\"cr+\").LoadWallet(this);\n     if (nLoadWalletRet == DB_NEED_REWRITE)\n     {\n         if (dbw->Rewrite(\"\\x04pool\"))\n         {\n-            LOCK(cs_wallet);\n             setInternalKeyPool.clear();\n             setExternalKeyPool.clear();\n             m_pool_key_to_index.clear();"
      },
      {
        "sha": "6907d640705249c24065750da61c094de53494fc",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -169,6 +169,18 @@ def run_test (self):\n         assert_equal(address_assert['ismine'], True)\n         assert_equal(address_assert['timestamp'], timestamp)\n \n+        self.log.info(\"Should not import an address with private key if is already imported\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"timestamp\": \"now\",\n+            \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -4)\n+        assert_equal(result[0]['error']['message'], 'The wallet already contains the private key for this address or script')\n+\n         # Address + Private key + watchonly\n         self.log.info(\"Should not import an address with private key and with watchonly\")\n         address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())"
      },
      {
        "sha": "996ff96cc38b799fc7fa156f5ef1f2e74ebbf448",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -79,8 +79,8 @@ def run_test(self):\n         assert_equal(balance2, Decimal('0.05'))\n \n         #Import with private key with no rescan\n-        self.nodes[1].importprivkey(address3_privkey, \"add3\", False)\n-        result3 = self.nodes[1].importprunedfunds(rawtxn3, proof3)\n+        self.nodes[1].importprivkey(privkey=address3_privkey, label=\"add3\", rescan=False)\n+        self.nodes[1].importprunedfunds(rawtxn3, proof3)\n         balance3 = self.nodes[1].getbalance(\"add3\", 0, False)\n         assert_equal(balance3, Decimal('0.025'))\n         balance3 = self.nodes[1].getbalance(\"*\", 0, True)"
      },
      {
        "sha": "bd745ac854e70800370897e0c965e0ac8021c46b",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -7,7 +7,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import (assert_equal, assert_raises_jsonrpc)\n \n \n def read_dump(file_name, addrs, hd_master_addr_old):\n@@ -105,5 +105,8 @@ def run_test (self):\n         assert_equal(found_addr_chg, 90*2 + 50)  # old reserve keys are marked as change now\n         assert_equal(found_addr_rsv, 90*2) \n \n+        # Overwriting should fail\n+        assert_raises_jsonrpc(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n+\n if __name__ == '__main__':\n     WalletDumpTest().main ()"
      },
      {
        "sha": "89b28bba6ced9ccd0633221405bc27cfaeac23dd",
        "filename": "test/util/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/test/util/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/test/util/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/bitcoin-util-test.json?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -261,6 +261,13 @@\n     \"output_cmp\": \"txcreateoutpubkey3.json\",\n     \"description\": \"Creates a new transaction with a single pay-to-pub-key output, wrapped in P2SH (output as json)\"\n   },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\":\n+    [\"-json\", \"-create\", \"outpubkey=0:047d1368ba7ae01c94bc32293efd70bd7e3be7aa7912d07d0b1c659c1008d179b8642f5fb90f47580feb29f045e216ff5a4716d3a0fed36da414d332046303c44a:WS\", \"nversion=1\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"error: Uncompressed pubkeys are not useable for SegWit outputs\",\n+    \"description\": \"Creates a new transaction with a single pay-to-pub-key output, wrapped in P2SH (output as json)\"\n+  },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\",\n@@ -388,5 +395,16 @@\n     \"args\": [\"-json\", \"-create\", \"outmultisig=1:2:3:02a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff397:021ac43c7ff740014c3b33737ede99c967e4764553d1b2b83db77c83b8715fa72d:02df2089105c77f266fa11a9d33f05c735234075f2e8780824c6b709415f9fb485:WS\", \"nversion=1\"],\n     \"output_cmp\": \"txcreatemultisig4.json\",\n     \"description\": \"Creates a new transaction with a single 2-of-3 multisig in a P2WSH output, wrapped in P2SH (output in json)\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-json\", \"-create\", \"outmultisig=1:2:3:02a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff397:021ac43c7ff740014c3b33737ede99c967e4764553d1b2b83db77c83b8715fa72d:047d1368ba7ae01c94bc32293efd70bd7e3be7aa7912d07d0b1c659c1008d179b8642f5fb90f47580feb29f045e216ff5a4716d3a0fed36da414d332046303c44a:S\"],\n+    \"output_cmp\": \"txcreatemultisig5.json\",\n+    \"description\": \"Uncompressed pubkeys should work just fine for non-witness outputs\"\n+  },\n+  { \"exec\": \"./bitcoin-tx\",\n+    \"args\": [\"-json\", \"-create\", \"outmultisig=1:2:3:02a5613bd857b7048924264d1e70e08fb2a7e6527d32b7ab1bb993ac59964ff397:021ac43c7ff740014c3b33737ede99c967e4764553d1b2b83db77c83b8715fa72d:047d1368ba7ae01c94bc32293efd70bd7e3be7aa7912d07d0b1c659c1008d179b8642f5fb90f47580feb29f045e216ff5a4716d3a0fed36da414d332046303c44a:WS\"],\n+    \"return_code\": 1,\n+    \"error_txt\": \"error: Uncompressed pubkeys are not useable for SegWit outputs\",\n+    \"description\": \"Ensure adding witness outputs with uncompressed pubkeys fails\"\n   }\n ]"
      },
      {
        "sha": "20e9bb077bbf5bc85bc4a60876e7061dbd7e6960",
        "filename": "test/util/data/txcreatemultisig5.json",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/test/util/data/txcreatemultisig5.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1646f9c7603610a55b36ee1f1f057ecabaf3e6de/test/util/data/txcreatemultisig5.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatemultisig5.json?ref=1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "patch": "@@ -0,0 +1,26 @@\n+{\n+    \"txid\": \"813cf75e1f08debd242ef7c8192b7d478fb651355209369499a0de779ba7eb2f\",\n+    \"hash\": \"813cf75e1f08debd242ef7c8192b7d478fb651355209369499a0de779ba7eb2f\",\n+    \"version\": 2,\n+    \"size\": 42,\n+    \"vsize\": 42,\n+    \"locktime\": 0,\n+    \"vin\": [\n+    ],\n+    \"vout\": [\n+        {\n+            \"value\": 1.00000000,\n+            \"n\": 0,\n+            \"scriptPubKey\": {\n+                \"asm\": \"OP_HASH160 a4051c02398868af83f28f083208fae99a769263 OP_EQUAL\",\n+                \"hex\": \"a914a4051c02398868af83f28f083208fae99a76926387\",\n+                \"reqSigs\": 1,\n+                \"type\": \"scripthash\",\n+                \"addresses\": [\n+                    \"3GeGs1eHUxPz5YyuFe9WPpXid2UsUb5Jos\"\n+                ]\n+            }\n+        }\n+    ],\n+    \"hex\": \"02000000000100e1f5050000000017a914a4051c02398868af83f28f083208fae99a7692638700000000\"\n+}"
      }
    ]
  },
  {
    "sha": "b28415baaed092724b021e8fa79dbd3f07349abf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjg0MTViYWFlZDA5MjcyNGIwMjFlOGZhNzlkYmQzZjA3MzQ5YWJm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-18T18:24:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-19T12:55:24Z"
      },
      "message": "travis: move back to the minimal image\n\nThe most recent update replaced the minimal image with a large one for the\n'generic' image. Switching back to 'minimal' should reduce dependencies and\nmaybe speed us up some.\n\nIt should also eliminiate the need for aa2e0f09e.\n\nGithub-Pull: #11521\nRebased-From: a86e81b78fc2a2ecc827a7890cba21ed229957f2\nTree-SHA512: 40f07304c60b11876a172b7ac75cb738b2da4209d54370714a6e731485643fbb33925a422accd3e065dcaa4fea84a1268f37ca0a8ee83b8cf70a71a25b59fb6b",
      "tree": {
        "sha": "ff25341de436eb4f20fa7ab3b52819cd8512c566",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff25341de436eb4f20fa7ab3b52819cd8512c566"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b28415baaed092724b021e8fa79dbd3f07349abf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ6KC8AAoJEB5K7WKYbNJdbWEH/imWl49HR/vu6t110RJ/iw3x\nWS8MTn4F/w4rWH7kNADwL9lHYWZiaYoGULVX3xMUcpYoX5WhqnXoPu+FlWA80Zd2\nZ8QA37BhAPFKYuk2K12K1cS7nK37612D2ACR9zhKzK4XmNpV01r9VzqOBvz70QGL\n8yklpWLFCD8SpFDvDauCzkoO2fh8TtoPd5FFvVHk8QAhyz4R/feJjJ+ZcNLlLt0w\nlVT0wd+9izbUBncZvxq1x3s5lesNjXOAmqUyZZr9mS25f22XcHc7O413ISHmAw4G\nmqio48K5jG8acMgRv9tm1ZtN7nR7NjsPD3G+/qQMNfXvOSSZQ6FPMLjKOHI5O/w=\n=+j0A\n-----END PGP SIGNATURE-----",
        "payload": "tree ff25341de436eb4f20fa7ab3b52819cd8512c566\nparent 1646f9c7603610a55b36ee1f1f057ecabaf3e6de\nauthor Cory Fields <cory-nospam-@coryfields.com> 1508351061 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508417724 +0200\n\ntravis: move back to the minimal image\n\nThe most recent update replaced the minimal image with a large one for the\n'generic' image. Switching back to 'minimal' should reduce dependencies and\nmaybe speed us up some.\n\nIt should also eliminiate the need for aa2e0f09e.\n\nGithub-Pull: #11521\nRebased-From: a86e81b78fc2a2ecc827a7890cba21ed229957f2\nTree-SHA512: 40f07304c60b11876a172b7ac75cb738b2da4209d54370714a6e731485643fbb33925a422accd3e065dcaa4fea84a1268f37ca0a8ee83b8cf70a71a25b59fb6b\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b28415baaed092724b021e8fa79dbd3f07349abf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b28415baaed092724b021e8fa79dbd3f07349abf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b28415baaed092724b021e8fa79dbd3f07349abf/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1646f9c7603610a55b36ee1f1f057ecabaf3e6de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1646f9c7603610a55b36ee1f1f057ecabaf3e6de"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "120d033411960602d981ec8976c9a09caa4a811f",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b28415baaed092724b021e8fa79dbd3f07349abf/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b28415baaed092724b021e8fa79dbd3f07349abf/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=b28415baaed092724b021e8fa79dbd3f07349abf",
        "patch": "@@ -1,7 +1,7 @@\n sudo: required\n dist: trusty\n os: linux\n-language: generic\n+language: minimal\n cache:\n   directories:\n   - depends/built"
      }
    ]
  },
  {
    "sha": "ca0f3f734c468f3c3d57f2d63c6ceb780325a2e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTBmM2Y3MzRjNDY4ZjNjM2Q1N2YyZDYzYzZjZWI3ODAzMjVhMmU3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-10-18T18:42:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-19T12:55:29Z"
      },
      "message": "Revert \"travis: filter out pyenv\"\n\nThis reverts commit aa2e0f09ec94dd0908f792ebc2249859ad174586.\n\nGithub-Pull: #11521\nRebased-From: 3d1c31126b8ac9fe18d151dc4e9cf8598dd77362\nTree-SHA512: 3c42bb2715853178f1fa950d7f0926a860a81b563606633cc58a67cf7218c80dd6545b9a89db387e6352b4caed38d7dd04d50c28547c340c032e2ba2f7c79173",
      "tree": {
        "sha": "5959dfb6b10d1022bb8b8586c84e36371180231a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5959dfb6b10d1022bb8b8586c84e36371180231a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca0f3f734c468f3c3d57f2d63c6ceb780325a2e7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ6KDBAAoJEB5K7WKYbNJdp7gH/2T/IjIerJZM6aZvFysC4K/U\n8FW1whHBRj2lmgPOe9juGxzyi2DtgVZ0Qk+zeNekdiSyQ1fBBhPDmlSQJzh189E8\n7tec480zWkW/Ep5eMUA2jgRV2CXU+WlkiEQeQ2qxFbs9ffGldh8okFHBzlmSkOWy\nEnao8kl+sV/HtQWactcxjavStfkyihUMEvKnoIf11NXEwt56H751zfrPsiEWkHX9\nPznWh47hSE9F6NiIPuu79h8oEBn0ohc20vCoX197HD7gOE4wz3/w8GgS8LjUoFVo\n4OqbOxQEwQe2B8wJKMAisMUpaV0olDzN8y1+saeA28kgvi0gafbuCHygYftPVWA=\n=B/oo\n-----END PGP SIGNATURE-----",
        "payload": "tree 5959dfb6b10d1022bb8b8586c84e36371180231a\nparent b28415baaed092724b021e8fa79dbd3f07349abf\nauthor Cory Fields <cory-nospam-@coryfields.com> 1508352128 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508417729 +0200\n\nRevert \"travis: filter out pyenv\"\n\nThis reverts commit aa2e0f09ec94dd0908f792ebc2249859ad174586.\n\nGithub-Pull: #11521\nRebased-From: 3d1c31126b8ac9fe18d151dc4e9cf8598dd77362\nTree-SHA512: 3c42bb2715853178f1fa950d7f0926a860a81b563606633cc58a67cf7218c80dd6545b9a89db387e6352b4caed38d7dd04d50c28547c340c032e2ba2f7c79173\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca0f3f734c468f3c3d57f2d63c6ceb780325a2e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca0f3f734c468f3c3d57f2d63c6ceb780325a2e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca0f3f734c468f3c3d57f2d63c6ceb780325a2e7/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b28415baaed092724b021e8fa79dbd3f07349abf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b28415baaed092724b021e8fa79dbd3f07349abf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b28415baaed092724b021e8fa79dbd3f07349abf"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3bea8f36babf7cd7651d95a5c5e985c1754842cc",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca0f3f734c468f3c3d57f2d63c6ceb780325a2e7/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca0f3f734c468f3c3d57f2d63c6ceb780325a2e7/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=ca0f3f734c468f3c3d57f2d63c6ceb780325a2e7",
        "patch": "@@ -38,7 +38,6 @@ env:\n \n before_install:\n     - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/python/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n-    - export PATH=$(echo $PATH | tr ':' \"\\n\" | sed '/\\/opt\\/pyenv/d' | tr \"\\n\" \":\" | sed \"s|::|:|g\")\n install:\n     - if [ -n \"$DPKG_ADD_ARCH\" ]; then sudo dpkg --add-architecture \"$DPKG_ADD_ARCH\" ; fi\n     - if [ -n \"$PACKAGES\" ]; then travis_retry sudo apt-get update; fi"
      }
    ]
  },
  {
    "sha": "a2bd86a5ff1d75d85089e4ba6c908ece83451c5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmJkODZhNWZmMWQ3NWQ4NTA4OWU0YmE2YzkwOGVjZTgzNDUxYzVj",
    "commit": {
      "author": {
        "name": "Andreas Schildbach",
        "email": "andreas@schildbach.de",
        "date": "2017-10-19T10:45:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-19T13:02:08Z"
      },
      "message": "Remove my testnet DNS seed as I currently don't have the capacity to keep it up to date.\n\nGithub-Pull: #11527\nRebased-From: 132d3225f325b84afc282638c9e99623d249a52c\nTree-SHA512: 3738afd8070fa601b5039e268088b7f3827613dbc37fae192b96b13c91f56d41fa3209533a3cad876c4e673b19015aabfce331b0b5f46a0ac518d00816e912a4",
      "tree": {
        "sha": "dc24a7b4a46717cfb1747e69d35768f61512f997",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc24a7b4a46717cfb1747e69d35768f61512f997"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2bd86a5ff1d75d85089e4ba6c908ece83451c5c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ6KJQAAoJEB5K7WKYbNJdmN8IALovUB5PxSpvlPDrJL64eT+H\nglCU7qQJd4Byr6PXBZnpa0J1KgtHCylLosBoaqKp/KuB7PMC0PG0mXdMSNKR4RII\nEOCS7PSiVNG8ROCmk9u+NR7kisdAQJGzAOol8FVq2bet2Dt+WZ5Sq+mr8NolcWQn\n/OoS186Mfc0QoHHf/kA5RdJT9kDfctVJ8VnhEjKRNhFoH537gC22UzDEdm94cnoY\nZG6W3tKSpp8xaJ3iqp5l0jSsS3JrdH6v5QcoqAMlraqihgKUYNHXG7QhWdU7N085\nIuGf5rCrVzd3uIKBmpmYBkJ9UAdsUvTUkOFmZsOfJ54S5dMjRZxymiRGxR22OWc=\n=IRfb\n-----END PGP SIGNATURE-----",
        "payload": "tree dc24a7b4a46717cfb1747e69d35768f61512f997\nparent ca0f3f734c468f3c3d57f2d63c6ceb780325a2e7\nauthor Andreas Schildbach <andreas@schildbach.de> 1508409911 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1508418128 +0200\n\nRemove my testnet DNS seed as I currently don't have the capacity to keep it up to date.\n\nGithub-Pull: #11527\nRebased-From: 132d3225f325b84afc282638c9e99623d249a52c\nTree-SHA512: 3738afd8070fa601b5039e268088b7f3827613dbc37fae192b96b13c91f56d41fa3209533a3cad876c4e673b19015aabfce331b0b5f46a0ac518d00816e912a4\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bd86a5ff1d75d85089e4ba6c908ece83451c5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2bd86a5ff1d75d85089e4ba6c908ece83451c5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bd86a5ff1d75d85089e4ba6c908ece83451c5c/comments",
    "author": {
      "login": "schildbach",
      "id": 743306,
      "node_id": "MDQ6VXNlcjc0MzMwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/743306?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/schildbach",
      "html_url": "https://github.com/schildbach",
      "followers_url": "https://api.github.com/users/schildbach/followers",
      "following_url": "https://api.github.com/users/schildbach/following{/other_user}",
      "gists_url": "https://api.github.com/users/schildbach/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/schildbach/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/schildbach/subscriptions",
      "organizations_url": "https://api.github.com/users/schildbach/orgs",
      "repos_url": "https://api.github.com/users/schildbach/repos",
      "events_url": "https://api.github.com/users/schildbach/events{/privacy}",
      "received_events_url": "https://api.github.com/users/schildbach/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ca0f3f734c468f3c3d57f2d63c6ceb780325a2e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca0f3f734c468f3c3d57f2d63c6ceb780325a2e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ca0f3f734c468f3c3d57f2d63c6ceb780325a2e7"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "872626f16089652fb2b866036995c599a75fe0d4",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2bd86a5ff1d75d85089e4ba6c908ece83451c5c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2bd86a5ff1d75d85089e4ba6c908ece83451c5c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=a2bd86a5ff1d75d85089e4ba6c908ece83451c5c",
        "patch": "@@ -228,7 +228,6 @@ class CTestNetParams : public CChainParams {\n         vSeeds.emplace_back(\"testnet-seed.bitcoin.jonasschnelli.ch\", true);\n         vSeeds.emplace_back(\"seed.tbtc.petertodd.org\", true);\n         vSeeds.emplace_back(\"testnet-seed.bluematt.me\", false);\n-        vSeeds.emplace_back(\"testnet-seed.bitcoin.schildbach.de\", false);\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);"
      }
    ]
  },
  {
    "sha": "fdad04e6170cfab5028b64a02a091c717795c65e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZGFkMDRlNjE3MGNmYWI1MDI4YjY0YTAyYTA5MWM3MTc3OTVjNjVl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-20T20:10:08Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-23T15:23:07Z"
      },
      "message": "qa: Fix replace-by-fee race condition failures\n\nGithub-Pull: #11538\nRebased-From: c96b2e4f096780c75e3fa8acba496d71322583a1",
      "tree": {
        "sha": "9a82f3914dd44c02ff28061bc79288997c122ae3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a82f3914dd44c02ff28061bc79288997c122ae3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fdad04e6170cfab5028b64a02a091c717795c65e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdad04e6170cfab5028b64a02a091c717795c65e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fdad04e6170cfab5028b64a02a091c717795c65e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdad04e6170cfab5028b64a02a091c717795c65e/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "019c492490077a7581ab526b4208439200cbff24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/019c492490077a7581ab526b4208439200cbff24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/019c492490077a7581ab526b4208439200cbff24"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "43005e98b9588dd287fb31b132dc3a34d5ff8a50",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fdad04e6170cfab5028b64a02a091c717795c65e/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fdad04e6170cfab5028b64a02a091c717795c65e/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=fdad04e6170cfab5028b64a02a091c717795c65e",
        "patch": "@@ -72,6 +72,10 @@ def set_test_params(self):\n                            [\"-mempoolreplacement=0\"]]\n \n     def run_test(self):\n+        # Leave IBD and ensure nodes are synced\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n         make_utxo(self.nodes[0], 1*COIN)\n \n         self.log.info(\"Running test simple doublespend...\")\n@@ -110,13 +114,18 @@ def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n         tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n+        # make_utxo may have generated a bunch of blocks, so we need to sync\n+        # before we can spend the coins generated, or else the resulting\n+        # transactions might not be accepted by our peers.\n+        self.sync_all()\n+\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n-        self.sync_all([self.nodes])\n+        self.sync_all()\n \n         # Should fail because we haven't changed the fee\n         tx1b = CTransaction()"
      }
    ]
  },
  {
    "sha": "adbc9d164a52736408a146294981cdba66de9755",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGJjOWQxNjRhNTI3MzY0MDhhMTQ2Mjk0OTgxY2RiYTY2ZGU5NzU1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-20T20:24:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-23T15:23:14Z"
      },
      "message": "qa: Fix race condition in sendheaders.py\n\nGithub-Pull: #11538\nRebased-From: 6d51eaefe924bfaf2b0f4928dd6020023733480f",
      "tree": {
        "sha": "035fcccc8138542941b42235284edf71140b41d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/035fcccc8138542941b42235284edf71140b41d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/adbc9d164a52736408a146294981cdba66de9755",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adbc9d164a52736408a146294981cdba66de9755",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/adbc9d164a52736408a146294981cdba66de9755",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adbc9d164a52736408a146294981cdba66de9755/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdad04e6170cfab5028b64a02a091c717795c65e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdad04e6170cfab5028b64a02a091c717795c65e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdad04e6170cfab5028b64a02a091c717795c65e"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 8,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1fd7c9127830bccd7d2ab7e28564a9471cb8e1eb",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adbc9d164a52736408a146294981cdba66de9755/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adbc9d164a52736408a146294981cdba66de9755/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=adbc9d164a52736408a146294981cdba66de9755",
        "patch": "@@ -72,12 +72,14 @@ def set_test_params(self):\n                            [\"-mempoolreplacement=0\"]]\n \n     def run_test(self):\n-        # Leave IBD and ensure nodes are synced\n+        # Leave IBD\n         self.nodes[0].generate(1)\n-        self.sync_all()\n \n         make_utxo(self.nodes[0], 1*COIN)\n \n+        # Ensure nodes are synced\n+        self.sync_all()\n+\n         self.log.info(\"Running test simple doublespend...\")\n         self.test_simple_doublespend()\n "
      },
      {
        "sha": "60d107b248b847cc6543f49de16a36e682a9a66c",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/adbc9d164a52736408a146294981cdba66de9755/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/adbc9d164a52736408a146294981cdba66de9755/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=adbc9d164a52736408a146294981cdba66de9755",
        "patch": "@@ -225,6 +225,10 @@ def run_test(self):\n         inv_node.wait_for_verack()\n         test_node.wait_for_verack()\n \n+        # Ensure verack's have been processed by our peer\n+        inv_node.sync_with_ping()\n+        test_node.sync_with_ping()\n+\n         tip = int(self.nodes[0].getbestblockhash(), 16)\n \n         # PART 1"
      }
    ]
  },
  {
    "sha": "01223a02613610c7477449929dc74db96229f13d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMTIyM2EwMjYxMzYxMGM3NDc3NDQ5OTI5ZGM3NGRiOTYyMjlmMTNk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-20T20:35:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-23T15:28:32Z"
      },
      "message": "[verify-commits] Allow revoked keys to expire\n\nGithub-Pull: #11539\nRebased-From: d23be309c2c45f655d5f5405e031833fb4b6bbb4",
      "tree": {
        "sha": "7425e38e232a3e2f032cb85110f04721f2b1bfc9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7425e38e232a3e2f032cb85110f04721f2b1bfc9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/01223a02613610c7477449929dc74db96229f13d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01223a02613610c7477449929dc74db96229f13d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/01223a02613610c7477449929dc74db96229f13d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01223a02613610c7477449929dc74db96229f13d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "adbc9d164a52736408a146294981cdba66de9755",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/adbc9d164a52736408a146294981cdba66de9755",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/adbc9d164a52736408a146294981cdba66de9755"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "abd8f5fd9fe371f9df0a1399e0d7ec20fdac4681",
        "filename": "contrib/verify-commits/gpg.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/01223a02613610c7477449929dc74db96229f13d/contrib/verify-commits/gpg.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/01223a02613610c7477449929dc74db96229f13d/contrib/verify-commits/gpg.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/gpg.sh?ref=01223a02613610c7477449929dc74db96229f13d",
        "patch": "@@ -46,6 +46,11 @@ for LINE in $(echo \"$GPG_RES\"); do\n \t\tREVSIG=true\n \t\tGOODREVSIG=\"[GNUPG:] GOODSIG ${LINE#* * *}\"\n \t\t;;\n+\t\"[GNUPG:] EXPKEYSIG \"*)\n+\t\t[ \"$BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG\" != 1 ] && exit 1\n+\t\tREVSIG=true\n+\t\tGOODREVSIG=\"[GNUPG:] GOODSIG ${LINE#* * *}\"\n+\t\t;;\n \tesac\n done\n if ! $VALID; then"
      }
    ]
  },
  {
    "sha": "265bb214ecf616a7a55fc979a227d5f215046d84",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjViYjIxNGVjZjYxNmE3YTU1ZmM5NzlhMjI3ZDVmMjE1MDQ2ZDg0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-19T20:19:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-10-26T15:28:32Z"
      },
      "message": "Add share/rpcuser to dist. source code archive\n\nGithub-Pull: #11530\nRebased-From: fa81534d068cb5479684ed9fb073dc51532b91ca\nTree-SHA512: 97bc91760a3284a9b60dcde04e789aed3c83539ec6621cb38dbc5bd852bfc0cdcaffceff7ca6de0c64f00149e6774d7dd651520b39876a674f1e82efba98945d",
      "tree": {
        "sha": "04eabdb88eadba2e541416b9981d7f89f7b1f883",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04eabdb88eadba2e541416b9981d7f89f7b1f883"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/265bb214ecf616a7a55fc979a227d5f215046d84",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ8f8gAAoJEB5K7WKYbNJdIswIAK6nA2dZ3cIu3oxG0BA2ARpB\nlCc8wNfWl4Wd1Uy96XlKsZ0ECF2nnbK40/AYSvt3kXDFD+kYb3jtZpwaQqAPojqn\nPLqDOum2hikJYKaT+/jX6nJ/FUjXDn3EESlr2EKhcgMlk84qd4atwxrqRRyJIoMn\n/sEkgR5jepkkRQjtr8H8xDXLAuR4UZJkVKq/sCYQdn4IpeL3osCohtbll3YEJMGu\nV/fH5G3gmBBXhWaOp+xGjiwf5oOUCuvGCcEyPjhV7I0K0zBWctpIwerFXqZZl5Yx\nKJrhgTgw+c3QhYHWBhNtLAZ4Vzm9sIZMZQbPfeo3qPZbIpY+uTkDkmmmmz1VHSw=\n=T/zb\n-----END PGP SIGNATURE-----",
        "payload": "tree 04eabdb88eadba2e541416b9981d7f89f7b1f883\nparent a2bd86a5ff1d75d85089e4ba6c908ece83451c5c\nauthor MarcoFalke <falke.marco@gmail.com> 1508444397 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509031712 +0200\n\nAdd share/rpcuser to dist. source code archive\n\nGithub-Pull: #11530\nRebased-From: fa81534d068cb5479684ed9fb073dc51532b91ca\nTree-SHA512: 97bc91760a3284a9b60dcde04e789aed3c83539ec6621cb38dbc5bd852bfc0cdcaffceff7ca6de0c64f00149e6774d7dd651520b39876a674f1e82efba98945d\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/265bb214ecf616a7a55fc979a227d5f215046d84",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/265bb214ecf616a7a55fc979a227d5f215046d84",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/265bb214ecf616a7a55fc979a227d5f215046d84/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2bd86a5ff1d75d85089e4ba6c908ece83451c5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2bd86a5ff1d75d85089e4ba6c908ece83451c5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2bd86a5ff1d75d85089e4ba6c908ece83451c5c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ad522f5a56dbd03145dc512e932f55f2ec8bcf1c",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/265bb214ecf616a7a55fc979a227d5f215046d84/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/265bb214ecf616a7a55fc979a227d5f215046d84/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=265bb214ecf616a7a55fc979a227d5f215046d84",
        "patch": "@@ -44,6 +44,9 @@ DIST_CONTRIB = $(top_srcdir)/contrib/bitcoin-cli.bash-completion \\\n \t       $(top_srcdir)/contrib/bitcoind.bash-completion \\\n \t       $(top_srcdir)/contrib/init \\\n \t       $(top_srcdir)/contrib/rpm\n+DIST_SHARE = \\\n+  $(top_srcdir)/share/genbuild.sh \\\n+  $(top_srcdir)/share/rpcuser\n \n BIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n            $(top_srcdir)/contrib/devtools/security-check.py\n@@ -213,7 +216,7 @@ endif\n \n dist_noinst_SCRIPTS = autogen.sh\n \n-EXTRA_DIST = $(top_srcdir)/share/genbuild.sh test/functional/test_runner.py test/functional $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n+EXTRA_DIST = $(DIST_SHARE) test/functional/test_runner.py test/functional $(DIST_CONTRIB) $(DIST_DOCS) $(WINDOWS_PACKAGING) $(OSX_PACKAGING) $(BIN_CHECKS)\n \n EXTRA_DIST += \\\n     test/util/bitcoin-util-test.py \\"
      }
    ]
  },
  {
    "sha": "cf18f4289911c657eb876d91dee055db807870ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjE4ZjQyODk5MTFjNjU3ZWI4NzZkOTFkZWUwNTVkYjgwNzg3MGFk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2017-10-03T02:15:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:04:27Z"
      },
      "message": "[Docs] Update OpenBSD Build Instructions for OpenBSD 6.2\n\nGithub-Pull: #11442\nRebased-From: 9d30f54ef1c9412f2c71b89664952dd95b6ef959\nTree-SHA512: fc7ae48126ed9569bda7d444a2464c09ba3db2398d05933df7e1ca92a0d03c2bd3c370fea977d1a3ffe70c76e9caf45ee69d41c9dc24abcc0139e4146d8c1abd",
      "tree": {
        "sha": "ce617ecf417595958cf5dec2fcbdc81cf1c5f34d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce617ecf417595958cf5dec2fcbdc81cf1c5f34d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf18f4289911c657eb876d91dee055db807870ad",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ+cZbAAoJEB5K7WKYbNJd6eMH/3BQ5n1FgRzZP+dLt6KVIiXM\ncrjYq+MGvhHS1j0ZZbDr4F1xO4pSEhpDdty7Q6dskmdb/DIx2vDlWY2Tw5VQ+saN\nkOdb/7WYGc+CmoQNVKKYfkf5QC1baBrN89SDAHTMXTL8Sp+cFdPtcbkbGoDMyMJ3\nU5nL6wG9Ep7kAl+KUv5Zeug38I+6EP918jCG1cE4CWiHHrQeN28rqO+VscEQE1sH\njFH6wcIaaqN8D/UsyzOgtcDe2OjUukvEIOqC5bTPHyhc0eUSCugqiIfOcUgNCH+3\nbxPf7XEN8jAgkubVHwuLRfVD4K8CXb1dByFWg19LDK+MilIpdYYvWtBz16JdyKs=\n=W99D\n-----END PGP SIGNATURE-----",
        "payload": "tree ce617ecf417595958cf5dec2fcbdc81cf1c5f34d\nparent 265bb214ecf616a7a55fc979a227d5f215046d84\nauthor fanquake <fanquake@gmail.com> 1506996955 +0800\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509541467 +0100\n\n[Docs] Update OpenBSD Build Instructions for OpenBSD 6.2\n\nGithub-Pull: #11442\nRebased-From: 9d30f54ef1c9412f2c71b89664952dd95b6ef959\nTree-SHA512: fc7ae48126ed9569bda7d444a2464c09ba3db2398d05933df7e1ca92a0d03c2bd3c370fea977d1a3ffe70c76e9caf45ee69d41c9dc24abcc0139e4146d8c1abd\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf18f4289911c657eb876d91dee055db807870ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf18f4289911c657eb876d91dee055db807870ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf18f4289911c657eb876d91dee055db807870ad/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "265bb214ecf616a7a55fc979a227d5f215046d84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/265bb214ecf616a7a55fc979a227d5f215046d84",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/265bb214ecf616a7a55fc979a227d5f215046d84"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 23,
      "deletions": 82
    },
    "files": [
      {
        "sha": "760bb69b158a366bd0d0240271a6eda8446f02cd",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 23,
        "deletions": 82,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf18f4289911c657eb876d91dee055db807870ad/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf18f4289911c657eb876d91dee055db807870ad/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=cf18f4289911c657eb876d91dee055db807870ad",
        "patch": "@@ -1,76 +1,44 @@\n OpenBSD build guide\n ======================\n-(updated for OpenBSD 6.1)\n+(updated for OpenBSD 6.2)\n \n This guide describes how to build bitcoind and command-line utilities on OpenBSD.\n \n-As OpenBSD is most common as a server OS, we will not bother with the GUI.\n+OpenBSD is most commonly used as a server OS, so this guide does not contain instructions for building the GUI.\n \n Preparation\n -------------\n \n Run the following as root to install the base dependencies for building:\n \n ```bash\n-pkg_add gmake libtool libevent\n+pkg_add git gmake libevent libtool\n pkg_add autoconf # (select highest version, e.g. 2.69)\n pkg_add automake # (select highest version, e.g. 1.15)\n-pkg_add python # (select highest version, e.g. 3.5)\n+pkg_add python # (select highest version, e.g. 3.6)\n+pkg_add boost\n+\n+git clone https://github.com/bitcoin/bitcoin.git\n ```\n \n-The default C++ compiler that comes with OpenBSD 5.9 is g++ 4.2. This version is old (from 2007), and is not able to compile the current version of Bitcoin Core, primarily as it has no C++11 support, but even before there were issues. So here we will be installing a newer compiler.\n+See [dependencies.md](dependencies.md) for a complete overview.\n \n GCC\n -------\n \n-You can install a newer version of gcc with:\n+The default C++ compiler that comes with OpenBSD 6.2 is g++ 4.2.1. This version is old (from 2007), and is not able to compile the current version of Bitcoin Core because it has no C++11 support. We'll install a newer version of GCC:\n \n ```bash\n-pkg_add g++ # (select newest 4.x version, e.g. 4.9.3)\n-```\n-\n-This compiler will not overwrite the system compiler, it will be installed as `egcc` and `eg++` in `/usr/local/bin`.\n-\n-### Building boost\n-\n-Do not use `pkg_add boost`! The boost version installed thus is compiled using the `g++` compiler not `eg++`, which will result in a conflict between `/usr/local/lib/libestdc++.so.XX.0` and `/usr/lib/libstdc++.so.XX.0`, resulting in a test crash:\n-\n-    test_bitcoin:/usr/lib/libstdc++.so.57.0: /usr/local/lib/libestdc++.so.17.0 : WARNING: symbol(_ZN11__gnu_debug17_S_debug_me ssagesE) size mismatch, relink your program\n-    ...\n-    Segmentation fault (core dumped)\n+ pkg_add g++\n+ ```\n \n-This makes it necessary to build boost, or at least the parts used by Bitcoin Core, manually:\n-\n-```\n-# Pick some path to install boost to, here we create a directory within the bitcoin directory\n-BITCOIN_ROOT=$(pwd)\n-BOOST_PREFIX=\"${BITCOIN_ROOT}/boost\"\n-mkdir -p $BOOST_PREFIX\n-\n-# Fetch the source and verify that it is not tampered with\n-curl -o boost_1_64_0.tar.bz2 https://netcologne.dl.sourceforge.net/project/boost/boost/1.64.0/boost_1_64_0.tar.bz2\n-echo '7bcc5caace97baa948931d712ea5f37038dbb1c5d89b43ad4def4ed7cb683332 boost_1_64_0.tar.bz2' | sha256 -c\n-# MUST output: (SHA256) boost_1_64_0.tar.bz2: OK\n-tar -xjf boost_1_64_0.tar.bz2\n-\n-# Boost 1.64 needs one small patch for OpenBSD\n-cd boost_1_64_0\n-# Also here: https://gist.githubusercontent.com/laanwj/bf359281dc319b8ff2e1/raw/92250de8404b97bb99d72ab898f4a8cb35ae1ea3/patch-boost_test_impl_execution_monitor_ipp.patch\n-patch -p0 < /usr/ports/devel/boost/patches/patch-boost_test_impl_execution_monitor_ipp\n-\n-# Build w/ minimum configuration necessary for bitcoin\n-echo 'using gcc : : eg++ : <cxxflags>\"-fvisibility=hidden -fPIC\" <linkflags>\"\" <archiver>\"ar\" <striper>\"strip\"  <ranlib>\"ranlib\" <rc>\"\" : ;' > user-config.jam\n-config_opts=\"runtime-link=shared threadapi=pthread threading=multi link=static variant=release --layout=tagged --build-type=complete --user-config=user-config.jam -sNO_BZIP2=1\"\n-./bootstrap.sh --without-icu --with-libraries=chrono,filesystem,program_options,system,thread,test\n-./b2 -d2 -j2 -d1 ${config_opts} --prefix=${BOOST_PREFIX} stage\n-./b2 -d0 -j4 ${config_opts} --prefix=${BOOST_PREFIX} install\n-```\n+ This compiler will not overwrite the system compiler, it will be installed as `egcc` and `eg++` in `/usr/local/bin`.\n \n ### Building BerkeleyDB\n \n BerkeleyDB is only necessary for the wallet functionality. To skip this, pass `--disable-wallet` to `./configure`.\n \n-See \"Berkeley DB\" in [build_unix.md](build_unix.md) for instructions on how to build BerkeleyDB 4.8.\n+See \"Berkeley DB\" in [build-unix.md](build-unix.md#berkeley-db) for instructions on how to build BerkeleyDB 4.8.\n You cannot use the BerkeleyDB library from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n \n ```bash\n@@ -98,8 +66,8 @@ The standard ulimit restrictions in OpenBSD are very strict:\n \n     data(kbytes)         1572864\n \n-This is, unfortunately, no longer enough to compile some `.cpp` files in the project,\n-at least with gcc 4.9.3 (see issue https://github.com/bitcoin/bitcoin/issues/6658).\n+This, unfortunately, may no longer be enough to compile some `.cpp` files in the project,\n+at least with GCC 4.9.4 (see issue [#6658](https://github.com/bitcoin/bitcoin/issues/6658)).\n If your user is in the `staff` group the limit can be raised with:\n \n     ulimit -d 3000000\n@@ -118,59 +86,32 @@ export AUTOCONF_VERSION=2.69 # replace this with the autoconf version that you i\n export AUTOMAKE_VERSION=1.15 # replace this with the automake version that you installed\n ./autogen.sh\n ```\n-Make sure `BDB_PREFIX` and `BOOST_PREFIX` are set to the appropriate paths from the above steps.\n+Make sure `BDB_PREFIX` is set to the appropriate path from the above steps.\n \n To configure with wallet:\n ```bash\n-./configure --with-gui=no --with-boost=$BOOST_PREFIX \\\n-    CC=egcc CXX=eg++ CPP=ecpp \\\n+./configure --with-gui=no CC=egcc CXX=eg++ CPP=ecpp \\\n     BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I${BDB_PREFIX}/include\"\n ```\n \n To configure without wallet:\n ```bash\n-./configure --disable-wallet --with-gui=no --with-boost=$BOOST_PREFIX \\\n-    CC=egcc CXX=eg++ CPP=ecpp\n+./configure --disable-wallet --with-gui=no CC=egcc CXX=eg++ CPP=ecpp\n ```\n \n Build and run the tests:\n ```bash\n-gmake # can use -jX here for parallelism\n+gmake # use -jX here for parallelism\n gmake check\n ```\n \n-Clang (not currently working)\n+Clang\n ------------------------------\n \n-WARNING: This is outdated, needs to be updated for OpenBSD 6.0 and re-tried.\n-\n-Using a newer g++ results in linking the new code to a new libstdc++.\n-Libraries built with the old g++, will still import the old library.\n-This gives conflicts, necessitating rebuild of all C++ dependencies of the application.\n-\n-With clang this can - at least theoretically - be avoided because it uses the\n-base system's libstdc++.\n-\n ```bash\n-pkg_add llvm boost\n-```\n+pkg_add llvm\n \n-```bash\n ./configure --disable-wallet --with-gui=no CC=clang CXX=clang++\n-gmake\n+gmake # use -jX here for parallelism\n+gmake check\n ```\n-\n-However, this does not appear to work. Compilation succeeds, but link fails\n-with many 'local symbol discarded' errors:\n-\n-    local symbol 150: discarded in section `.text._ZN10tinyformat6detail14FormatIterator6finishEv' from libbitcoin_util.a(libbitcoin_util_a-random.o)\n-    local symbol 151: discarded in section `.text._ZN10tinyformat6detail14FormatIterator21streamStateFromFormatERSoRjPKcii' from libbitcoin_util.a(libbitcoin_util_a-random.o)\n-    local symbol 152: discarded in section `.text._ZN10tinyformat6detail12convertToIntIA13_cLb0EE6invokeERA13_Kc' from libbitcoin_util.a(libbitcoin_util_a-random.o)\n-\n-According to similar reported errors this is a binutils (ld) issue in 2.15, the\n-version installed by OpenBSD 5.7:\n-\n-- http://openbsd-archive.7691.n7.nabble.com/UPDATE-cppcheck-1-65-td248900.html\n-- https://llvm.org/bugs/show_bug.cgi?id=9758\n-\n-There is no known workaround for this."
      }
    ]
  },
  {
    "sha": "7d4546f17dca84928bd2b6d1e2588b673c237321",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDQ1NDZmMTdkY2E4NDkyOGJkMmI2ZDFlMjU4OGI2NzNjMjM3MzIx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-26T11:10:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:15:59Z"
      },
      "message": "Make listsinceblock refuse unknown block hash\n\nChange suggested by Cory Fields <cory-nospam-@coryfields.com> who noticed\nlistsinceblock would ignore invalid block hashes causing it to return a\ncompletely unfiltered list of transactions.\n\nGithub-Pull: #11565\nRebased-From: 659b2061c4329472a45e913c5d45e6ab180600a3\nTree-SHA512: 2091a830b730421b49c806cb83a16c7da2ec0a7adac2bac0585324aad12a32bb99a840264c3d346937ea84786fac56e44befb6641511a417977803875efe5a21",
      "tree": {
        "sha": "f359f7d7ddcfac17083bcb3fb242801d50485433",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f359f7d7ddcfac17083bcb3fb242801d50485433"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d4546f17dca84928bd2b6d1e2588b673c237321",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ+ckPAAoJEB5K7WKYbNJdgwoH/2QplRIU/nnBBfD4eetkVl/O\nhff3oS8H3RRL6XT2tg8EDMYdzlrnXZpIBPeGzAtxRW1osa88g6zHZHDrFvZr7ivI\nx51Y/fo8K5kksZF3d+6B8hq7sJMVkTnFv4GgijbkF5gJ1L2jdN8suympYt39iDg7\n7ZmfN0UhkSOGW4TgITqC7JUqAc0XkOotlL1loxjorY594hZjKH0eNqKwZ5fQC53m\nZuMdmgrRN814kfcSEKKpnjRNAzKMfJLJVVZEILB7Y3gwi73W7C005otgXna1vxYf\nPbv9dZCSiWQtysehAUrnPcViMfDMwLkC9GgZ7qhcEtmCmnpW1UVFEb6pweyv4Uk=\n=THfE\n-----END PGP SIGNATURE-----",
        "payload": "tree f359f7d7ddcfac17083bcb3fb242801d50485433\nparent cf18f4289911c657eb876d91dee055db807870ad\nauthor Russell Yanofsky <russ@yanofsky.org> 1509016259 -0400\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509542159 +0100\n\nMake listsinceblock refuse unknown block hash\n\nChange suggested by Cory Fields <cory-nospam-@coryfields.com> who noticed\nlistsinceblock would ignore invalid block hashes causing it to return a\ncompletely unfiltered list of transactions.\n\nGithub-Pull: #11565\nRebased-From: 659b2061c4329472a45e913c5d45e6ab180600a3\nTree-SHA512: 2091a830b730421b49c806cb83a16c7da2ec0a7adac2bac0585324aad12a32bb99a840264c3d346937ea84786fac56e44befb6641511a417977803875efe5a21\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d4546f17dca84928bd2b6d1e2588b673c237321",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d4546f17dca84928bd2b6d1e2588b673c237321",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d4546f17dca84928bd2b6d1e2588b673c237321/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf18f4289911c657eb876d91dee055db807870ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf18f4289911c657eb876d91dee055db807870ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf18f4289911c657eb876d91dee055db807870ad"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 48,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1bb02e3761484f680cd07ae6e2d9d6db9decdc3f",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d4546f17dca84928bd2b6d1e2588b673c237321/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d4546f17dca84928bd2b6d1e2588b673c237321/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=7d4546f17dca84928bd2b6d1e2588b673c237321",
        "patch": "@@ -68,6 +68,10 @@ Notable changes\n - `dumpwallet` no longer allows overwriting files. This is a security measure\n   as well as prevents dangerous user mistakes.\n \n+- `listsinceblock` will now throw an error if an unknown `blockhash` argument\n+  value is passed, instead of returning a list of all wallet transactions since\n+  the genesis block.\n+\n Credits\n =======\n "
      },
      {
        "sha": "6efbc23281fc586b3116f95d2814329262409e08",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d4546f17dca84928bd2b6d1e2588b673c237321/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d4546f17dca84928bd2b6d1e2588b673c237321/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7d4546f17dca84928bd2b6d1e2588b673c237321",
        "patch": "@@ -1823,19 +1823,20 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n-    if (!request.params[0].isNull()) {\n+    if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n         uint256 blockId;\n \n         blockId.SetHex(request.params[0].get_str());\n         BlockMap::iterator it = mapBlockIndex.find(blockId);\n-        if (it != mapBlockIndex.end()) {\n-            paltindex = pindex = it->second;\n-            if (chainActive[pindex->nHeight] != pindex) {\n-                // the block being asked for is a part of a deactivated chain;\n-                // we don't want to depend on its perceived height in the block\n-                // chain, we want to instead use the last common ancestor\n-                pindex = chainActive.FindFork(pindex);\n-            }\n+        if (it == mapBlockIndex.end()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+        }\n+        paltindex = pindex = it->second;\n+        if (chainActive[pindex->nHeight] != pindex) {\n+            // the block being asked for is a part of a deactivated chain;\n+            // we don't want to depend on its perceived height in the block\n+            // chain, we want to instead use the last common ancestor\n+            pindex = chainActive.FindFork(pindex);\n         }\n     }\n "
      },
      {
        "sha": "67e7744bf8433c79134469111a4b0aacca22b60d",
        "filename": "test/functional/listsinceblock.py",
        "status": "modified",
        "additions": 34,
        "deletions": 1,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d4546f17dca84928bd2b6d1e2588b673c237321/test/functional/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d4546f17dca84928bd2b6d1e2588b673c237321/test/functional/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listsinceblock.py?ref=7d4546f17dca84928bd2b6d1e2588b673c237321",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test the listsincelast RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import assert_equal, assert_array_result, assert_raises_rpc_error\n \n class ListSinceBlockTest (BitcoinTestFramework):\n     def set_test_params(self):\n@@ -16,10 +16,43 @@ def run_test(self):\n         self.nodes[2].generate(101)\n         self.sync_all()\n \n+        self.test_no_blockhash()\n+        self.test_invalid_blockhash()\n         self.test_reorg()\n         self.test_double_spend()\n         self.test_double_send()\n \n+    def test_no_blockhash(self):\n+        txid = self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n+        blockhash, = self.nodes[2].generate(1)\n+        self.sync_all()\n+\n+        txs = self.nodes[0].listtransactions()\n+        assert_array_result(txs, {\"txid\": txid}, {\n+            \"category\": \"receive\",\n+            \"amount\": 1,\n+            \"blockhash\": blockhash,\n+            \"confirmations\": 1,\n+        })\n+        assert_equal(\n+            self.nodes[0].listsinceblock(),\n+            {\"lastblock\": blockhash,\n+             \"removed\": [],\n+             \"transactions\": txs})\n+        assert_equal(\n+            self.nodes[0].listsinceblock(\"\"),\n+            {\"lastblock\": blockhash,\n+             \"removed\": [],\n+             \"transactions\": txs})\n+\n+    def test_invalid_blockhash(self):\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].listsinceblock,\n+                                \"42759cde25462784395a337460bde75f58e73d3f08bd31fdc3507cbac856a2c4\")\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].listsinceblock,\n+                                \"0000000000000000000000000000000000000000000000000000000000000000\")\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].listsinceblock,\n+                                \"invalid-hex\")\n+\n     def test_reorg(self):\n         '''\n         `listsinceblock` did not behave correctly when handed a block that was"
      }
    ]
  },
  {
    "sha": "34833534b656f565df9510a6c649687063db956d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDgzMzUzNGI2NTZmNTY1ZGY5NTEwYTZjNjQ5Njg3MDYzZGI5NTZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:21:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-01T13:21:39Z"
      },
      "message": "Merge #11550: [0.15.1] qa: Backports\n\n01223a0 [verify-commits] Allow revoked keys to expire (Matt Corallo)\nadbc9d1 qa: Fix race condition in sendheaders.py (Suhas Daftuar)\nfdad04e qa: Fix replace-by-fee race condition failures (Suhas Daftuar)\n\nPull request description:\n\nTree-SHA512: e1532a02a84d9406cc78975a59201dbde78750217d504896e7e448aa86d6b4df98dc959fae440044c8f9aedebf296a9537b18e281976344ca8e4b705d7bd50b0",
      "tree": {
        "sha": "b5e9a72ad17a5b3501ee769e90b3dc3354c4040e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5e9a72ad17a5b3501ee769e90b3dc3354c4040e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34833534b656f565df9510a6c649687063db956d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ+cpjAAoJEB5K7WKYbNJd8AcIAIBE5KafV0bhop9r7JM81IgC\nxAHZwKNj15leGxrbjmi/JmW/S1JohijLiw9mM6SEypOSnBGBFnhc8jWxIoD28Um4\nLonvt6ILd/npLr36wTheujtbejoYZJchWMF0vUuFJkjUMUbg1oE2kmH81DggpxeJ\nyFRMvufJCCHNEjTzjndtgOWpeoQ7G7Fb4wuU5haYV++aH7wjXXx7QKkZuaZLAcLZ\nx5kk6hq3DPHTPk7X2R1CS8jnQhx/zu6Xl268PtCNSxQq52Nah9ZntZ2GgRsdmcs+\n9Ugb7MRhX+Dxz+JixyX0dXqHHFx3eGqudPpzMPJl3DD4w7reCPuS0o6ogGUUXpw=\n=t7OU\n-----END PGP SIGNATURE-----",
        "payload": "tree b5e9a72ad17a5b3501ee769e90b3dc3354c4040e\nparent 7d4546f17dca84928bd2b6d1e2588b673c237321\nparent 01223a02613610c7477449929dc74db96229f13d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509542483 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509542499 +0100\n\nMerge #11550: [0.15.1] qa: Backports\n\n01223a0 [verify-commits] Allow revoked keys to expire (Matt Corallo)\nadbc9d1 qa: Fix race condition in sendheaders.py (Suhas Daftuar)\nfdad04e qa: Fix replace-by-fee race condition failures (Suhas Daftuar)\n\nPull request description:\n\nTree-SHA512: e1532a02a84d9406cc78975a59201dbde78750217d504896e7e448aa86d6b4df98dc959fae440044c8f9aedebf296a9537b18e281976344ca8e4b705d7bd50b0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34833534b656f565df9510a6c649687063db956d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34833534b656f565df9510a6c649687063db956d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34833534b656f565df9510a6c649687063db956d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7d4546f17dca84928bd2b6d1e2588b673c237321",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d4546f17dca84928bd2b6d1e2588b673c237321",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d4546f17dca84928bd2b6d1e2588b673c237321"
      },
      {
        "sha": "01223a02613610c7477449929dc74db96229f13d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01223a02613610c7477449929dc74db96229f13d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01223a02613610c7477449929dc74db96229f13d"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 21,
      "deletions": 1
    },
    "files": [
      {
        "sha": "abd8f5fd9fe371f9df0a1399e0d7ec20fdac4681",
        "filename": "contrib/verify-commits/gpg.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34833534b656f565df9510a6c649687063db956d/contrib/verify-commits/gpg.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34833534b656f565df9510a6c649687063db956d/contrib/verify-commits/gpg.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/gpg.sh?ref=34833534b656f565df9510a6c649687063db956d",
        "patch": "@@ -46,6 +46,11 @@ for LINE in $(echo \"$GPG_RES\"); do\n \t\tREVSIG=true\n \t\tGOODREVSIG=\"[GNUPG:] GOODSIG ${LINE#* * *}\"\n \t\t;;\n+\t\"[GNUPG:] EXPKEYSIG \"*)\n+\t\t[ \"$BITCOIN_VERIFY_COMMITS_ALLOW_REVSIG\" != 1 ] && exit 1\n+\t\tREVSIG=true\n+\t\tGOODREVSIG=\"[GNUPG:] GOODSIG ${LINE#* * *}\"\n+\t\t;;\n \tesac\n done\n if ! $VALID; then"
      },
      {
        "sha": "1fd7c9127830bccd7d2ab7e28564a9471cb8e1eb",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34833534b656f565df9510a6c649687063db956d/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34833534b656f565df9510a6c649687063db956d/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=34833534b656f565df9510a6c649687063db956d",
        "patch": "@@ -72,8 +72,14 @@ def set_test_params(self):\n                            [\"-mempoolreplacement=0\"]]\n \n     def run_test(self):\n+        # Leave IBD\n+        self.nodes[0].generate(1)\n+\n         make_utxo(self.nodes[0], 1*COIN)\n \n+        # Ensure nodes are synced\n+        self.sync_all()\n+\n         self.log.info(\"Running test simple doublespend...\")\n         self.test_simple_doublespend()\n \n@@ -110,13 +116,18 @@ def test_simple_doublespend(self):\n         \"\"\"Simple doublespend\"\"\"\n         tx0_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n+        # make_utxo may have generated a bunch of blocks, so we need to sync\n+        # before we can spend the coins generated, or else the resulting\n+        # transactions might not be accepted by our peers.\n+        self.sync_all()\n+\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n-        self.sync_all([self.nodes])\n+        self.sync_all()\n \n         # Should fail because we haven't changed the fee\n         tx1b = CTransaction()"
      },
      {
        "sha": "60d107b248b847cc6543f49de16a36e682a9a66c",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34833534b656f565df9510a6c649687063db956d/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34833534b656f565df9510a6c649687063db956d/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=34833534b656f565df9510a6c649687063db956d",
        "patch": "@@ -225,6 +225,10 @@ def run_test(self):\n         inv_node.wait_for_verack()\n         test_node.wait_for_verack()\n \n+        # Ensure verack's have been processed by our peer\n+        inv_node.sync_with_ping()\n+        test_node.sync_with_ping()\n+\n         tip = int(self.nodes[0].getbestblockhash(), 16)\n \n         # PART 1"
      }
    ]
  },
  {
    "sha": "5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YjcyOGM4ZTk4YTRkM2Q3MmIxY2E1ZjZhYzI4N2I0NTNiMGZiNWQ2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-12T14:29:02Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-01T14:40:09Z"
      },
      "message": "[tests] remove direct testing on JSONRPCException from individual test cases\n\nGithub-Pull: #10853\nRebased-From: 5864e9c1611e6034a8d49b78231abe6bfade686d",
      "tree": {
        "sha": "c4a4cd22c46b1d214a27f532bf4e39adc5d395aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4a4cd22c46b1d214a27f532bf4e39adc5d395aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34833534b656f565df9510a6c649687063db956d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34833534b656f565df9510a6c649687063db956d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34833534b656f565df9510a6c649687063db956d"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 26,
      "deletions": 26
    },
    "files": [
      {
        "sha": "c7eb07ab12d7fa8005c3946ff92c3d007f229be8",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6",
        "patch": "@@ -19,9 +19,8 @@\n happened previously.\n \"\"\"\n \n-from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (connect_nodes, sync_blocks, assert_equal, set_node_times)\n+from test_framework.util import (assert_raises_jsonrpc, connect_nodes, sync_blocks, assert_equal, set_node_times)\n \n import collections\n import enum\n@@ -35,21 +34,26 @@\n class Variant(collections.namedtuple(\"Variant\", \"call data rescan prune\")):\n     \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n \n+    def try_rpc(self, func, *args, **kwargs):\n+        if self.expect_disabled:\n+            assert_raises_jsonrpc(-4, \"Rescan is disabled in pruned mode\", func, *args, **kwargs)\n+        else:\n+            return func(*args, **kwargs)\n+\n     def do_import(self, timestamp):\n         \"\"\"Call one key import RPC.\"\"\"\n \n         if self.call == Call.single:\n             if self.data == Data.address:\n-                response, error = try_rpc(self.node.importaddress, self.address[\"address\"], self.label,\n-                                          self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importaddress, self.address[\"address\"], self.label,\n+                                               self.rescan == Rescan.yes)\n             elif self.data == Data.pub:\n-                response, error = try_rpc(self.node.importpubkey, self.address[\"pubkey\"], self.label,\n-                                          self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importpubkey, self.address[\"pubkey\"], self.label,\n+                                               self.rescan == Rescan.yes)\n             elif self.data == Data.priv:\n-                response, error = try_rpc(self.node.importprivkey, self.key, self.label, self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importprivkey, self.key, self.label, self.rescan == Rescan.yes)\n             assert_equal(response, None)\n-            assert_equal(error, {'message': 'Rescan is disabled in pruned mode',\n-                                 'code': -4} if self.expect_disabled else None)\n+\n         elif self.call == Call.multi:\n             response = self.node.importmulti([{\n                 \"scriptPubKey\": {\n@@ -180,13 +184,5 @@ def run_test(self):\n             else:\n                 variant.check()\n \n-\n-def try_rpc(func, *args, **kwargs):\n-    try:\n-        return func(*args, **kwargs), None\n-    except JSONRPCException as e:\n-        return None, e.error\n-\n-\n if __name__ == \"__main__\":\n     ImportRescanTest().main()"
      },
      {
        "sha": "f16c9ab97aad78ff2438c14ea6a5d5ad425d8a77",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6",
        "patch": "@@ -448,11 +448,11 @@ def run_test (self):\n \n         # Bad or missing timestamps\n         self.log.info(\"Should throw on invalid or missing timestamp values\")\n-        assert_raises_message(JSONRPCException, 'Missing required timestamp field for key',\n+        assert_raises_jsonrpc(-3, 'Missing required timestamp field for key',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n             }])\n-        assert_raises_message(JSONRPCException, 'Expected number or \"now\" timestamp value for key. got type string',\n+        assert_raises_jsonrpc(-3, 'Expected number or \"now\" timestamp value for key. got type string',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n                 \"timestamp\": \"\","
      },
      {
        "sha": "7571bd1a37bccbc18c39848c461bf61ca43d1aeb",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6",
        "patch": "@@ -443,11 +443,7 @@ def run_test(self):\n         for i in importlist:\n             # import all generated addresses. The wallet already has the private keys for some of these, so catch JSON RPC\n             # exceptions and continue.\n-            try:\n-                self.nodes[0].importaddress(i,\"\",False,True)\n-            except JSONRPCException as exp:\n-                assert_equal(exp.error[\"message\"], \"The wallet already contains the private key for this address or script\")\n-                assert_equal(exp.error[\"code\"], -4)\n+            try_rpc(-4, \"The wallet already contains the private key for this address or script\", self.nodes[0].importaddress, i, \"\", False, True)\n \n         self.nodes[0].importaddress(script_to_p2sh(op0)) # import OP_0 as address only\n         self.nodes[0].importaddress(multisig_without_privkey_address) # Test multisig_without_privkey"
      },
      {
        "sha": "00a58e108e76c1d67aa104c80fe0b866e894b4e4",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6",
        "patch": "@@ -82,7 +82,7 @@ def script_verification_error_test(self):\n             assert_equal(decodedRawTx[\"vin\"][i][\"vout\"], inp[\"vout\"])\n \n         # Make sure decoderawtransaction throws if there is extra data\n-        assert_raises(JSONRPCException, self.nodes[0].decoderawtransaction, rawTx + \"00\")\n+        assert_raises_jsonrpc(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n         rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n "
      },
      {
        "sha": "44d7e04a898096b9b1dff961f89e6cab85cce665",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6",
        "patch": "@@ -99,6 +99,13 @@ def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n         args*: positional arguments for the function.\n         kwds**: named arguments for the function.\n     \"\"\"\n+    assert try_rpc(code, message, fun, *args, **kwds), \"No exception raised\"\n+\n+def try_rpc(code, message, fun, *args, **kwds):\n+    \"\"\"Tries to run an rpc command.\n+\n+    Test against error code and message if the rpc fails.\n+    Returns whether a JSONRPCException was raised.\"\"\"\n     try:\n         fun(*args, **kwds)\n     except JSONRPCException as e:\n@@ -107,10 +114,11 @@ def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n             raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n         if (message is not None) and (message not in e.error['message']):\n             raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n+        return True\n     except Exception as e:\n         raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n     else:\n-        raise AssertionError(\"No exception raised\")\n+        return False\n \n def assert_is_hex_string(string):\n     try:"
      }
    ]
  },
  {
    "sha": "623de0acbb7a586adba8d1f9a64c77fabb0e98a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjNkZTBhY2JiN2E1ODZhZGJhOGQxZjlhNjRjNzdmYWJiMGU5OGE0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-07-12T14:29:21Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-01T14:40:22Z"
      },
      "message": "[tests] do not allow assert_raises_message to be called with JSONRPCException\n\nGithub-Pull: #10853\nRebased-From: 677d893ff758b61f66203730da224bd7ef8f0b43",
      "tree": {
        "sha": "2599885d2222dc81fd93246eac359fa545a5f510",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2599885d2222dc81fd93246eac359fa545a5f510"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/623de0acbb7a586adba8d1f9a64c77fabb0e98a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/623de0acbb7a586adba8d1f9a64c77fabb0e98a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/623de0acbb7a586adba8d1f9a64c77fabb0e98a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/623de0acbb7a586adba8d1f9a64c77fabb0e98a4/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5b728c8e98a4d3d72b1ca5f6ac287b453b0fb5d6"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ed35bf576eb83b9a3c6587594beca73a1b00bfb5",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/623de0acbb7a586adba8d1f9a64c77fabb0e98a4/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/623de0acbb7a586adba8d1f9a64c77fabb0e98a4/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=623de0acbb7a586adba8d1f9a64c77fabb0e98a4",
        "patch": "@@ -51,6 +51,8 @@ def assert_raises(exc, fun, *args, **kwds):\n def assert_raises_message(exc, message, fun, *args, **kwds):\n     try:\n         fun(*args, **kwds)\n+    except JSONRPCException:\n+        raise AssertionError(\"Use assert_raises_jsonrpc() to test RPC failures\")\n     except exc as e:\n         if message is not None and message not in e.error['message']:\n             raise AssertionError(\"Expected substring not found:\" + e.error['message'])"
      }
    ]
  },
  {
    "sha": "d94fc336c47b5fd0f42217806faad1aa201b9d63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTRmYzMzNmM0N2I1ZmQwZjQyMjE3ODA2ZmFhZDFhYTIwMWI5ZDYz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-11-01T14:41:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-01T14:42:30Z"
      },
      "message": "scripted-diff: rename assert_raises_jsonrpc to assert_raises_rpc error\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/assert_raises_jsonrpc/assert_raises_rpc_error/g' test/functional/*py test/functional/test_framework/*py\n-END VERIFY SCRIPT-\n\nGithub-Pull: #10853\nRebased-From: 47ba8cf71e9a3a6f7452488fc9ab3b350f0fae36",
      "tree": {
        "sha": "1603fa9706a06bb0eb1ccaa5e9f78390896bbedd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1603fa9706a06bb0eb1ccaa5e9f78390896bbedd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d94fc336c47b5fd0f42217806faad1aa201b9d63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d94fc336c47b5fd0f42217806faad1aa201b9d63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d94fc336c47b5fd0f42217806faad1aa201b9d63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d94fc336c47b5fd0f42217806faad1aa201b9d63/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "623de0acbb7a586adba8d1f9a64c77fabb0e98a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/623de0acbb7a586adba8d1f9a64c77fabb0e98a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/623de0acbb7a586adba8d1f9a64c77fabb0e98a4"
      }
    ],
    "stats": {
      "total": 226,
      "additions": 113,
      "deletions": 113
    },
    "files": [
      {
        "sha": "b3b5adf425c1245e331934de5939d6b34871a772",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -83,7 +83,7 @@ def test_disable_flag(self):\n         tx2.vout = [CTxOut(int(value-self.relayfee*COIN), CScript([b'a']))]\n         tx2.rehash()\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx2))\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx2))\n \n         # Setting the version back down to 1 should disable the sequence lock,\n         # so this should be accepted.\n@@ -180,7 +180,7 @@ def test_sequence_lock_confirmed_inputs(self):\n \n             if (using_sequence_locks and not should_pass):\n                 # This transaction should be rejected\n-                assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, rawtx)\n+                assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, rawtx)\n             else:\n                 # This raw transaction should be accepted\n                 self.nodes[0].sendrawtransaction(rawtx)\n@@ -227,7 +227,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n \n             if (orig_tx.hash in node.getrawmempool()):\n                 # sendrawtransaction should fail if the tx is in the mempool\n-                assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, node.sendrawtransaction, ToHex(tx))\n+                assert_raises_rpc_error(-26, NOT_FINAL_ERROR, node.sendrawtransaction, ToHex(tx))\n             else:\n                 # sendrawtransaction should succeed if the tx is not in the mempool\n                 node.sendrawtransaction(ToHex(tx))\n@@ -280,7 +280,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n         raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n \n         # Test mempool-BIP68 consistency after reorg\n         #\n@@ -353,7 +353,7 @@ def test_bip68_not_consensus(self):\n         tx3.vout = [CTxOut(int(tx2.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n         tx3.rehash()\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx3))\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx3))\n \n         # make a block that violates bip68; ensure that the tip updates\n         tip = int(self.nodes[0].getbestblockhash(), 16)"
      },
      {
        "sha": "4c2997f8bdfd5a258d8b622e3f3f2511eed04a9a",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -25,7 +25,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     assert_is_hex_string,\n     assert_is_hash_string,\n )\n@@ -96,7 +96,7 @@ def _test_gettxoutsetinfo(self):\n     def _test_getblockheader(self):\n         node = self.nodes[0]\n \n-        assert_raises_jsonrpc(-5, \"Block not found\",\n+        assert_raises_rpc_error(-5, \"Block not found\",\n                               node.getblockheader, \"nonsense\")\n \n         besthash = node.getbestblockhash()"
      },
      {
        "sha": "c2aa75209caedac26bb1f67940ef472c80e444db",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -133,7 +133,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n     # cannot replace a non RBF transaction (from node which did not enable RBF)\n     not_rbfid = peer_node.sendtoaddress(dest_address, Decimal(\"0.00090000\"))\n-    assert_raises_jsonrpc(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n+    assert_raises_rpc_error(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n \n \n def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n@@ -153,7 +153,7 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     signedtx = rbf_node.signrawtransaction(rawtx)\n     signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n-    assert_raises_jsonrpc(-4, \"Transaction contains inputs that don't belong to this wallet\",\n+    assert_raises_rpc_error(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                           rbf_node.bumpfee, rbfid)\n \n \n@@ -164,7 +164,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n     tx = rbf_node.signrawtransaction(tx)\n     txid = rbf_node.sendrawtransaction(tx[\"hex\"])\n-    assert_raises_jsonrpc(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n+    assert_raises_rpc_error(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n \n def test_small_output_fails(rbf_node, dest_address):\n@@ -173,7 +173,7 @@ def test_small_output_fails(rbf_node, dest_address):\n     rbf_node.bumpfee(rbfid, {\"totalFee\": 50000})\n \n     rbfid = spend_one_input(rbf_node, dest_address)\n-    assert_raises_jsonrpc(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n+    assert_raises_rpc_error(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n \n \n def test_dust_to_fee(rbf_node, dest_address):\n@@ -205,15 +205,15 @@ def test_rebumping(rbf_node, dest_address):\n     # check that re-bumping the original tx fails, but bumping the bumper succeeds\n     rbfid = spend_one_input(rbf_node, dest_address)\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 2000})\n-    assert_raises_jsonrpc(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 3000})\n+    assert_raises_rpc_error(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 3000})\n     rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 3000})\n \n \n def test_rebumping_not_replaceable(rbf_node, dest_address):\n     # check that re-bumping a non-replaceable bump tx fails\n     rbfid = spend_one_input(rbf_node, dest_address)\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n-    assert_raises_jsonrpc(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n+    assert_raises_rpc_error(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n                           {\"totalFee\": 20000})\n \n \n@@ -264,7 +264,7 @@ def test_bumpfee_metadata(rbf_node, dest_address):\n def test_locked_wallet_fails(rbf_node, dest_address):\n     rbfid = spend_one_input(rbf_node, dest_address)\n     rbf_node.walletlock()\n-    assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n+    assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n                           rbf_node.bumpfee, rbfid)\n \n "
      },
      {
        "sha": "c75ef9b9f12d562a3667ec246e601045ce9bba97",
        "filename": "test/functional/disablewallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disablewallet.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -19,7 +19,7 @@ def set_test_params(self):\n \n     def run_test (self):\n         # Make sure wallet is really disabled\n-        assert_raises_jsonrpc(-32601, 'Method not found', self.nodes[0].getwalletinfo)\n+        assert_raises_rpc_error(-32601, 'Method not found', self.nodes[0].getwalletinfo)\n         x = self.nodes[0].validateaddress('3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n         assert(x['isvalid'] == False)\n         x = self.nodes[0].validateaddress('mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n@@ -28,7 +28,7 @@ def run_test (self):\n         # Checking mining to an address without a wallet. Generating to a valid address should succeed\n         # but generating to an invalid address will fail.\n         self.nodes[0].generatetoaddress(1, 'mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n-        assert_raises_jsonrpc(-5, \"Invalid address\", self.nodes[0].generatetoaddress, 1, '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n+        assert_raises_rpc_error(-5, \"Invalid address\", self.nodes[0].generatetoaddress, 1, '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n \n if __name__ == '__main__':\n     DisableWalletTest ().main ()"
      },
      {
        "sha": "59655d37fbe21878e13b76f5952c533a1512197a",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -8,7 +8,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     connect_nodes_bi,\n     wait_until,\n )\n@@ -34,14 +34,14 @@ def run_test(self):\n \n         self.log.info(\"setban: fail to ban an already banned subnet\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n-        assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[1].setban, \"127.0.0.1\", \"add\")\n+        assert_raises_rpc_error(-23, \"IP/Subnet already banned\", self.nodes[1].setban, \"127.0.0.1\", \"add\")\n \n         self.log.info(\"setban: fail to ban an invalid subnet\")\n-        assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[1].setban, \"127.0.0.1/42\", \"add\")\n+        assert_raises_rpc_error(-30, \"Error: Invalid IP/Subnet\", self.nodes[1].setban, \"127.0.0.1/42\", \"add\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)  # still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n \n         self.log.info(\"setban remove: fail to unban a non-banned subnet\")\n-        assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[1].setban, \"127.0.0.1\", \"remove\")\n+        assert_raises_rpc_error(-30, \"Error: Unban failed\", self.nodes[1].setban, \"127.0.0.1\", \"remove\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n \n         self.log.info(\"setban remove: successfully unban subnet\")\n@@ -81,10 +81,10 @@ def run_test(self):\n         self.log.info(\"disconnectnode: fail to disconnect when calling with address and nodeid\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']\n         node1 = self.nodes[0].getpeerinfo()[0]['addr']\n-        assert_raises_jsonrpc(-32602, \"Only one of address and nodeid should be provided.\", self.nodes[0].disconnectnode, address=address1, nodeid=node1)\n+        assert_raises_rpc_error(-32602, \"Only one of address and nodeid should be provided.\", self.nodes[0].disconnectnode, address=address1, nodeid=node1)\n \n         self.log.info(\"disconnectnode: fail to disconnect when calling with junk address\")\n-        assert_raises_jsonrpc(-29, \"Node not found in connected nodes\", self.nodes[0].disconnectnode, address=\"221B Baker Street\")\n+        assert_raises_rpc_error(-29, \"Node not found in connected nodes\", self.nodes[0].disconnectnode, address=\"221B Baker Street\")\n \n         self.log.info(\"disconnectnode: successfully disconnect node by address\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']"
      },
      {
        "sha": "1c4f269ec0e22e36e920a18e80ae21755207e8fe",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -179,7 +179,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        assert_raises_jsonrpc(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n+        assert_raises_rpc_error(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n \n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n@@ -192,7 +192,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        assert_raises_jsonrpc(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n+        assert_raises_rpc_error(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n \n         ############################################################\n         # test a fundrawtransaction with a provided change address #\n@@ -206,7 +206,7 @@ def run_test(self):\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n         change = self.nodes[2].getnewaddress()\n-        assert_raises_jsonrpc(-8, \"changePosition out of bounds\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':change, 'changePosition':2})\n+        assert_raises_rpc_error(-8, \"changePosition out of bounds\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':change, 'changePosition':2})\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         out = dec_tx['vout'][0]\n@@ -315,7 +315,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n@@ -470,14 +470,14 @@ def run_test(self):\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        assert_raises_jsonrpc(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawtx)\n \n         #refill the keypool\n         self.nodes[1].walletpassphrase(\"test\", 100)\n         self.nodes[1].keypoolrefill(8) #need to refill the keypool to get an internal change address\n         self.nodes[1].walletlock()\n \n-        assert_raises_jsonrpc(-13, \"walletpassphrase\", self.nodes[1].sendtoaddress, self.nodes[0].getnewaddress(), 1.2)\n+        assert_raises_rpc_error(-13, \"walletpassphrase\", self.nodes[1].sendtoaddress, self.nodes[0].getnewaddress(), 1.2)\n \n         oldBalance = self.nodes[0].getbalance()\n "
      },
      {
        "sha": "955554204d81ac141cecc515914cd8a2d769ca17",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -20,7 +20,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_raises_jsonrpc, connect_nodes, sync_blocks, assert_equal, set_node_times)\n+from test_framework.util import (assert_raises_rpc_error, connect_nodes, sync_blocks, assert_equal, set_node_times)\n \n import collections\n import enum\n@@ -36,7 +36,7 @@ class Variant(collections.namedtuple(\"Variant\", \"call data rescan prune\")):\n \n     def try_rpc(self, func, *args, **kwargs):\n         if self.expect_disabled:\n-            assert_raises_jsonrpc(-4, \"Rescan is disabled in pruned mode\", func, *args, **kwargs)\n+            assert_raises_rpc_error(-4, \"Rescan is disabled in pruned mode\", func, *args, **kwargs)\n         else:\n             return func(*args, **kwargs)\n "
      },
      {
        "sha": "324f6458e3059b608f96fc8a36b56df9326db5ad",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -448,11 +448,11 @@ def run_test (self):\n \n         # Bad or missing timestamps\n         self.log.info(\"Should throw on invalid or missing timestamp values\")\n-        assert_raises_jsonrpc(-3, 'Missing required timestamp field for key',\n+        assert_raises_rpc_error(-3, 'Missing required timestamp field for key',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n             }])\n-        assert_raises_jsonrpc(-3, 'Expected number or \"now\" timestamp value for key. got type string',\n+        assert_raises_rpc_error(-3, 'Expected number or \"now\" timestamp value for key. got type string',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n                 \"timestamp\": \"\","
      },
      {
        "sha": "c445b66df3ac69a752f1ab6d8460fffa899958cf",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -67,7 +67,7 @@ def run_test(self):\n         self.sync_all()\n \n         #Import with no affiliated address\n-        assert_raises_jsonrpc(-5, \"No addresses\", self.nodes[1].importprunedfunds, rawtxn1, proof1)\n+        assert_raises_rpc_error(-5, \"No addresses\", self.nodes[1].importprunedfunds, rawtxn1, proof1)\n \n         balance1 = self.nodes[1].getbalance(\"\", 0, True)\n         assert_equal(balance1, Decimal(0))\n@@ -98,7 +98,7 @@ def run_test(self):\n         assert_equal(address_info['ismine'], True)\n \n         #Remove transactions\n-        assert_raises_jsonrpc(-8, \"Transaction does not exist in wallet.\", self.nodes[1].removeprunedfunds, txnid1)\n+        assert_raises_rpc_error(-8, \"Transaction does not exist in wallet.\", self.nodes[1].removeprunedfunds, txnid1)\n \n         balance1 = self.nodes[1].getbalance(\"*\", 0, True)\n         assert_equal(balance1, Decimal('0.075'))"
      },
      {
        "sha": "f2701c36bdcacbfd45ff30d27fd839131b1e228d",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -28,7 +28,7 @@ def run_test(self):\n         wallet_info = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['hdmasterkeyid'])\n         assert(addr_data['hdmasterkeyid'] == wallet_info['hdmasterkeyid'])\n-        assert_raises_jsonrpc(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n+        assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # put six (plus 2) new keys in the keypool (100% external-, +100% internal-keys, 1 in min)\n         nodes[0].walletpassphrase('test', 12000)\n@@ -47,7 +47,7 @@ def run_test(self):\n         nodes[0].getrawchangeaddress()\n         addr = set()\n         # the next one should fail\n-        assert_raises_jsonrpc(-12, \"Keypool ran out\", nodes[0].getrawchangeaddress)\n+        assert_raises_rpc_error(-12, \"Keypool ran out\", nodes[0].getrawchangeaddress)\n \n         # drain the external keys\n         addr.add(nodes[0].getnewaddress())\n@@ -58,7 +58,7 @@ def run_test(self):\n         addr.add(nodes[0].getnewaddress())\n         assert(len(addr) == 6)\n         # the next one should fail\n-        assert_raises_jsonrpc(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n+        assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # refill keypool with three new addresses\n         nodes[0].walletpassphrase('test', 1)\n@@ -72,7 +72,7 @@ def run_test(self):\n         nodes[0].generate(1)\n         nodes[0].generate(1)\n         nodes[0].generate(1)\n-        assert_raises_jsonrpc(-12, \"Keypool ran out\", nodes[0].generate, 1)\n+        assert_raises_rpc_error(-12, \"Keypool ran out\", nodes[0].generate, 1)\n \n         nodes[0].walletpassphrase('test', 100)\n         nodes[0].keypoolrefill(100)"
      },
      {
        "sha": "6d3849bf57ebb86f00207a0d00822abc645f4ddb",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -115,7 +115,7 @@ def run_test(self):\n             assert_equal(mempool[x]['descendantfees'], descendant_fees * COIN + 1000)\n \n         # Adding one more transaction on to the chain should fail.\n-        assert_raises_jsonrpc(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], txid, vout, value, fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], txid, vout, value, fee, 1)\n \n         # Check that prioritising a tx before it's added to the mempool works\n         # First clear the mempool by mining a block.\n@@ -167,7 +167,7 @@ def run_test(self):\n \n         # Sending one more chained transaction will fail\n         utxo = transaction_package.pop(0)\n-        assert_raises_jsonrpc(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n \n         # TODO: check that node1's mempool is as expected\n "
      },
      {
        "sha": "2803371f5b603892fc549e15284f01b98ec73883",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -50,14 +50,14 @@ def run_test(self):\n         timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n         timelock_tx = self.nodes[0].signrawtransaction(timelock_tx)[\"hex\"]\n         # This will raise an exception because the timelock transaction is too immature to spend\n-        assert_raises_jsonrpc(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n+        assert_raises_rpc_error(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Broadcast and mine spend_102 and 103:\n         spend_102_id = self.nodes[0].sendrawtransaction(spend_102_raw)\n         spend_103_id = self.nodes[0].sendrawtransaction(spend_103_raw)\n         self.nodes[0].generate(1)\n         # Time-locked transaction is still too immature to spend\n-        assert_raises_jsonrpc(-26,'non-final', self.nodes[0].sendrawtransaction, timelock_tx)\n+        assert_raises_rpc_error(-26,'non-final', self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Create 102_1 and 103_1:\n         spend_102_1_raw = create_tx(self.nodes[0], spend_102_id, node1_address, 49.98)"
      },
      {
        "sha": "6e8a635a765413fd3ab3ba0e38e739a6836039c9",
        "filename": "test/functional/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spendcoinbase.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -36,7 +36,7 @@ def run_test(self):\n         spend_101_id = self.nodes[0].sendrawtransaction(spends_raw[0])\n \n         # coinbase at height 102 should be too immature to spend\n-        assert_raises_jsonrpc(-26,\"bad-txns-premature-spend-of-coinbase\", self.nodes[0].sendrawtransaction, spends_raw[1])\n+        assert_raises_rpc_error(-26,\"bad-txns-premature-spend-of-coinbase\", self.nodes[0].sendrawtransaction, spends_raw[1])\n \n         # mempool should have just spend_101:\n         assert_equal(self.nodes[0].getrawmempool(), [ spend_101_id ])"
      },
      {
        "sha": "b3989a4c54885ab9d9763cded9c263ef4dd06f75",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -38,7 +38,7 @@ def run_test(self):\n         tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n         txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx2)[\"hex\"])\n         # This will raise an exception because the transaction is not yet in a block\n-        assert_raises_jsonrpc(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n+        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n \n         self.nodes[0].generate(1)\n         blockhash = self.nodes[0].getblockhash(chain_height + 1)\n@@ -63,11 +63,11 @@ def run_test(self):\n         txid_unspent = txid1 if txin_spent[\"txid\"] != txid1 else txid2\n \n         # We can't find the block from a fully-spent tx\n-        assert_raises_jsonrpc(-5, \"Transaction not yet in block\", self.nodes[2].gettxoutproof, [txid_spent])\n+        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[2].gettxoutproof, [txid_spent])\n         # We can get the proof if we specify the block\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_spent], blockhash)), [txid_spent])\n         # We can't get the proof if we specify a non-existent block\n-        assert_raises_jsonrpc(-5, \"Block not found\", self.nodes[2].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[2].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n         # We can get the proof if the transaction is unspent\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_unspent])), [txid_unspent])\n         # We can get the proof if we provide a list of transactions and one of them is unspent. The ordering of the list should not matter.\n@@ -76,7 +76,7 @@ def run_test(self):\n         # We can always get a proof if we have a -txindex\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[3].gettxoutproof([txid_spent])), [txid_spent])\n         # We can't get a proof if we specify transactions from different blocks\n-        assert_raises_jsonrpc(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[2].gettxoutproof, [txid1, txid3])\n+        assert_raises_rpc_error(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[2].gettxoutproof, [txid1, txid3])\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "085bdb568bdc6983dc6fd5a1af9af1ca331e5b81",
        "filename": "test/functional/mining.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -15,7 +15,7 @@\n from test_framework.blocktools import create_coinbase\n from test_framework.mininode import CBlock\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n@@ -69,7 +69,7 @@ def run_test(self):\n         assert_template(node, block, None)\n \n         self.log.info(\"submitblock: Test block decode failure\")\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.submitblock, b2x(block.serialize()[:-15]))\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.submitblock, b2x(block.serialize()[:-15]))\n \n         self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n         bad_block = copy.deepcopy(block)\n@@ -78,10 +78,10 @@ def run_test(self):\n         assert_template(node, bad_block, 'bad-cb-missing')\n \n         self.log.info(\"submitblock: Test invalid coinbase transaction\")\n-        assert_raises_jsonrpc(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n+        assert_raises_rpc_error(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n \n         self.log.info(\"getblocktemplate: Test truncated final transaction\")\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})\n \n         self.log.info(\"getblocktemplate: Test duplicate transaction\")\n         bad_block = copy.deepcopy(block)\n@@ -108,7 +108,7 @@ def run_test(self):\n         bad_block_sn = bytearray(block.serialize())\n         assert_equal(bad_block_sn[TX_COUNT_OFFSET], 1)\n         bad_block_sn[TX_COUNT_OFFSET] += 1\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal'})\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal'})\n \n         self.log.info(\"getblocktemplate: Test bad bits\")\n         bad_block = copy.deepcopy(block)"
      },
      {
        "sha": "6adcc1fd88289f6980c078507269f5a89e98c15e",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -9,7 +9,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -43,10 +43,10 @@ def run_test(self):\n         w1.generate(1)\n \n         # accessing invalid wallet fails\n-        assert_raises_jsonrpc(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n+        assert_raises_rpc_error(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n \n         # accessing wallet RPC without using wallet endpoint fails\n-        assert_raises_jsonrpc(-19, \"Wallet file not specified\", self.nodes[0].getwalletinfo)\n+        assert_raises_rpc_error(-19, \"Wallet file not specified\", self.nodes[0].getwalletinfo)\n \n         # check w1 wallet balance\n         w1_info = w1.getwalletinfo()"
      },
      {
        "sha": "61a5e1f2e9d4154132e75163017dc44c594e1320",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -12,7 +12,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     connect_nodes_bi,\n     p2p_port,\n )\n@@ -84,7 +84,7 @@ def _test_getaddednodeinfo(self):\n         assert_equal(len(added_nodes), 1)\n         assert_equal(added_nodes[0]['addednode'], ip_port)\n         # check that a non-existant node returns an error\n-        assert_raises_jsonrpc(-24, \"Node has not been added\",\n+        assert_raises_rpc_error(-24, \"Node has not been added\",\n                               self.nodes[0].getaddednodeinfo, '1.1.1.1')\n \n     def _test_getpeerinfo(self):"
      },
      {
        "sha": "91c4550653826253b949775bdd04807cffa532a1",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -71,7 +71,7 @@ def run_test(self):\n         self.log.info(\"Test 2: Non-NULLDUMMY base multisig transaction should not be accepted to mempool before activation\")\n         test2tx = self.create_transaction(self.nodes[0], txid2, self.ms_address, 47)\n         trueDummy(test2tx)\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test2tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test2tx.serialize_with_witness()), True)\n \n         self.log.info(\"Test 3: Non-NULLDUMMY base transactions should be accepted in a block before activation [431]\")\n         self.block_submit(self.nodes[0], [test2tx], False, True)\n@@ -80,14 +80,14 @@ def run_test(self):\n         test4tx = self.create_transaction(self.nodes[0], test2tx.hash, self.address, 46)\n         test6txs=[CTransaction(test4tx)]\n         trueDummy(test4tx)\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test4tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test4tx.serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], [test4tx])\n \n         self.log.info(\"Test 5: Non-NULLDUMMY P2WSH multisig transaction invalid after activation\")\n         test5tx = self.create_transaction(self.nodes[0], txid3, self.wit_address, 48)\n         test6txs.append(CTransaction(test5tx))\n         test5tx.wit.vtxinwit[0].scriptWitness.stack[0] = b'\\x01'\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test5tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test5tx.serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], [test5tx], True)\n \n         self.log.info(\"Test 6: NULLDUMMY compliant base/witness transactions should be accepted to mempool and in block after activation [432]\")"
      },
      {
        "sha": "5b6429b410194d87a5c8ae76cf695d442cc3fad9",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -171,7 +171,7 @@ def run_test(self):\n         # Blocks 1-287 should be accepted, block 288 should be ignored because it's too far ahead\n         for x in all_blocks[:-1]:\n             self.nodes[0].getblock(x.hash)\n-        assert_raises_jsonrpc(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n \n         headers_message.headers.pop() # Ensure the last block is unrequested\n         white_node.send_message(headers_message) # Send headers leading to tip"
      },
      {
        "sha": "bb56db9b40f31758a96bc1605787cc019ec7aae2",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -101,7 +101,7 @@ def run_test(self):\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met\n-        assert_raises_jsonrpc(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n+        assert_raises_rpc_error(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n         assert(tx_id not in self.nodes[0].getrawmempool())\n \n         # This is a less than 1000-byte transaction, so just set the fee"
      },
      {
        "sha": "1b0f0ba1cdaffac88c22e2488d2d1705410bc8ca",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -185,7 +185,7 @@ def reorg_test(self):\n \n     def reorg_back(self):\n         # Verify that a block on the old main chain fork has been pruned away\n-        assert_raises_jsonrpc(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n+        assert_raises_rpc_error(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n         self.log.info(\"Will need to redownload block %d\" % self.forkheight)\n \n         # Verify that we have enough history to reorg back to the fork point\n@@ -232,7 +232,7 @@ def manual_test(self, node_number, use_timestamp):\n         self.start_node(node_number)\n         node = self.nodes[node_number]\n         assert_equal(node.getblockcount(), 995)\n-        assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n+        assert_raises_rpc_error(-1, \"not in prune mode\", node.pruneblockchain, 500)\n \n         # now re-start in manual pruning mode\n         self.stop_node(node_number)\n@@ -265,14 +265,14 @@ def has_block(index):\n             return os.path.isfile(self.options.tmpdir + \"/node{}/regtest/blocks/blk{:05}.dat\".format(node_number, index))\n \n         # should not prune because chain tip of node 3 (995) < PruneAfterHeight (1000)\n-        assert_raises_jsonrpc(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n+        assert_raises_rpc_error(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n \n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n         node.generate(6)\n         assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n         # negative heights should raise an exception\n-        assert_raises_jsonrpc(-8, \"Negative\", node.pruneblockchain, -10)\n+        assert_raises_rpc_error(-8, \"Negative\", node.pruneblockchain, -10)\n \n         # height=100 too low to prune first block file so this is a no-op\n         prune(100)"
      },
      {
        "sha": "ec9467eb445a0cb94517cc7522d47e7fe7aab1d9",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].signrawtransaction(rawtx)\n \n         # This will raise an exception since there are missing inputs\n-        assert_raises_jsonrpc(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n+        assert_raises_rpc_error(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n \n         #########################\n         # RAW TX MULTISIG TESTS #\n@@ -190,13 +190,13 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n \n         # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n \n         # 7. invalid parameters - supply txid and empty array\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n \n         # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n@@ -207,12 +207,12 @@ def run_test(self):\n         # 9. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n \n         # 10. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }"
      },
      {
        "sha": "4ef10e6b3651618587ae74e1ce29c583cc3dcef0",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -136,17 +136,17 @@ def test_simple_doublespend(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n         # This will raise an exception due to transaction replacement being disabled\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n \n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx1b_hex = txToHex(tx1b)\n         # Replacement still disabled even with \"enough fee\"\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n         # Works when enabled\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n \n@@ -189,7 +189,7 @@ def test_doublespend_chain(self):\n         dbl_tx_hex = txToHex(dbl_tx)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n         # Accepted with sufficient fee\n         dbl_tx = CTransaction()\n@@ -250,7 +250,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n         dbl_tx.vout = [CTxOut(initial_nValue - fee*n, CScript([1]))]\n         dbl_tx_hex = txToHex(dbl_tx)\n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n         # 1 BTC fee is enough\n         dbl_tx = CTransaction()\n@@ -278,7 +278,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n             dbl_tx.vout = [CTxOut(initial_nValue - 2*fee*n, CScript([1]))]\n             dbl_tx_hex = txToHex(dbl_tx)\n             # This will raise an exception\n-            assert_raises_jsonrpc(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+            assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n             for tx in tree_txs:\n                 tx.rehash()\n@@ -302,7 +302,7 @@ def test_replacement_feeperkb(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n     def test_spends_of_conflicting_outputs(self):\n         \"\"\"Replacements that spend conflicting tx outputs are rejected\"\"\"\n@@ -325,7 +325,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n         # Spend tx1a's output to test the indirect case.\n         tx1b = CTransaction()\n@@ -342,7 +342,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n     def test_new_unconfirmed_inputs(self):\n         \"\"\"Replacements that add new unconfirmed inputs are rejected\"\"\"\n@@ -361,7 +361,7 @@ def test_new_unconfirmed_inputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"replacement-adds-unconfirmed\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"replacement-adds-unconfirmed\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n     def test_too_many_replacements(self):\n         \"\"\"Replacements that evict too many transactions are rejected\"\"\"\n@@ -407,7 +407,7 @@ def test_too_many_replacements(self):\n         double_tx_hex = txToHex(double_tx)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, True)\n \n         # If we remove an input, it should pass\n         double_tx = CTransaction()\n@@ -434,7 +434,7 @@ def test_opt_in(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n         tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n@@ -452,7 +452,7 @@ def test_opt_in(self):\n         tx2b_hex = txToHex(tx2b)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n \n         # Now create a new transaction that spends from tx1a and tx2a\n         # opt-in on one of the inputs\n@@ -504,7 +504,7 @@ def test_prioritised_transactions(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # Verify tx1b cannot replace tx1a.\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n         # Use prioritisetransaction to set tx1a's fee to 0.\n         self.nodes[0].prioritisetransaction(txid=tx1a_txid, fee_delta=int(-0.1*COIN))\n@@ -531,7 +531,7 @@ def test_prioritised_transactions(self):\n         tx2b_hex = txToHex(tx2b)\n \n         # Verify tx2b cannot replace tx2a.\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n \n         # Now prioritise tx2b to have a higher modified fee\n         self.nodes[0].prioritisetransaction(txid=tx2b.hash, fee_delta=int(0.1*COIN))"
      },
      {
        "sha": "d959bb4c3836466fa11e50fabc9da6f3d1cfc4d9",
        "filename": "test/functional/resendwallettransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/resendwallettransactions.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test resendwallettransactions RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class ResendWalletTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -14,7 +14,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled.\n-        assert_raises_jsonrpc(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)\n+        assert_raises_rpc_error(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)\n \n         # Should return an empty array if there aren't unconfirmed wallet transactions.\n         self.stop_node(0)"
      },
      {
        "sha": "0e8c3fa209ee82d73336ce2abda17c59f71dd55d",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -101,7 +101,7 @@ def run_test(self):\n \n         # Check that with invalid rpcallowip, we are denied\n         self.run_allowip_test([non_loopback_ip], non_loopback_ip, defaultport)\n-        assert_raises_jsonrpc(-342, \"non-JSON HTTP response with '403 Forbidden' from server\", self.run_allowip_test, ['1.1.1.1'], non_loopback_ip, defaultport)\n+        assert_raises_rpc_error(-342, \"non-JSON HTTP response with '403 Forbidden' from server\", self.run_allowip_test, ['1.1.1.1'], non_loopback_ip, defaultport)\n \n if __name__ == '__main__':\n     RPCBindTest().main()"
      },
      {
        "sha": "0fb0a62afd02be732abcdd87602c9d65b25f57db",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n )\n \n class NamedArgumentTest(BitcoinTestFramework):\n@@ -19,7 +19,7 @@ def run_test(self):\n         h = node.help(command='getinfo')\n         assert(h.startswith('getinfo\\n'))\n \n-        assert_raises_jsonrpc(-8, 'Unknown named parameter', node.help, random='getinfo')\n+        assert_raises_rpc_error(-8, 'Unknown named parameter', node.help, random='getinfo')\n \n         h = node.getblockhash(height=0)\n         node.getblock(blockhash=h)"
      },
      {
        "sha": "7cd87e562698dbeaee19c822f49cc404a2081b01",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -100,11 +100,11 @@ def skip_mine(self, node, txid, sign, redeem_script=\"\"):\n         sync_blocks(self.nodes)\n \n     def fail_accept(self, node, error_msg, txid, sign, redeem_script=\"\"):\n-        assert_raises_jsonrpc(-26, error_msg, send_to_witness, 1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n+        assert_raises_rpc_error(-26, error_msg, send_to_witness, 1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n \n     def fail_mine(self, node, txid, sign, redeem_script=\"\"):\n         send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n-        assert_raises_jsonrpc(-1, \"CreateNewBlock: TestBlockValidity failed\", node.generate, 1)\n+        assert_raises_rpc_error(-1, \"CreateNewBlock: TestBlockValidity failed\", node.generate, 1)\n         sync_blocks(self.nodes)\n \n     def run_test(self):\n@@ -456,7 +456,7 @@ def run_test(self):\n         # addwitnessaddress should refuse to return a witness address if an uncompressed key is used\n         # note that no witness address should be returned by unsolvable addresses\n         for i in uncompressed_spendable_address + uncompressed_solvable_address + unknown_address + unsolvable_address:\n-            assert_raises_jsonrpc(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n+            assert_raises_rpc_error(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n         # addwitnessaddress should return a witness addresses even if keys are not in the wallet\n         self.nodes[0].addwitnessaddress(multisig_without_privkey_address)\n@@ -539,7 +539,7 @@ def run_test(self):\n         # premature_witaddress are not accepted until the script is added with addwitnessaddress first\n         for i in uncompressed_spendable_address + uncompressed_solvable_address + premature_witaddress:\n             # This will raise an exception\n-            assert_raises_jsonrpc(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n+            assert_raises_rpc_error(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n         # after importaddress it should pass addwitnessaddress\n         v = self.nodes[0].validateaddress(compressed_solvable_address[1])"
      },
      {
        "sha": "9a45d53cb85640e41c0542270148427294a03d4c",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -82,7 +82,7 @@ def script_verification_error_test(self):\n             assert_equal(decodedRawTx[\"vin\"][i][\"vout\"], inp[\"vout\"])\n \n         # Make sure decoderawtransaction throws if there is extra data\n-        assert_raises_jsonrpc(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n+        assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n         rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n "
      },
      {
        "sha": "102c903018fedf239bae20be22451349539cf701",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -52,7 +52,7 @@ def assert_raises_message(exc, message, fun, *args, **kwds):\n     try:\n         fun(*args, **kwds)\n     except JSONRPCException:\n-        raise AssertionError(\"Use assert_raises_jsonrpc() to test RPC failures\")\n+        raise AssertionError(\"Use assert_raises_rpc_error() to test RPC failures\")\n     except exc as e:\n         if message is not None and message not in e.error['message']:\n             raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n@@ -85,7 +85,7 @@ def assert_raises_process_error(returncode, output, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n-def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n+def assert_raises_rpc_error(code, message, fun, *args, **kwds):\n     \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n \n     Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException"
      },
      {
        "sha": "2ca01c7f0822eaa418ff0caababfd9af9c09eb1d",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -7,7 +7,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal, assert_raises_jsonrpc)\n+from test_framework.util import (assert_equal, assert_raises_rpc_error)\n \n \n def read_dump(file_name, addrs, hd_master_addr_old):\n@@ -106,7 +106,7 @@ def run_test (self):\n         assert_equal(found_addr_rsv, 90*2) \n \n         # Overwriting should fail\n-        assert_raises_jsonrpc(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n+        assert_raises_rpc_error(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n \n if __name__ == '__main__':\n     WalletDumpTest().main ()"
      },
      {
        "sha": "db62e1e30f489b18f573b08a135ccc5d7d321f04",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -9,7 +9,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n )\n \n class WalletEncryptionTest(BitcoinTestFramework):\n@@ -32,28 +32,28 @@ def run_test(self):\n         self.start_node(0)\n \n         # Test that the wallet is encrypted\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Check that walletpassphrase works\n         self.nodes[0].walletpassphrase(passphrase, 2)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n \n         # Check that the timeout is right\n         time.sleep(2)\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Test wrong passphrase\n-        assert_raises_jsonrpc(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase + \"wrong\", 10)\n+        assert_raises_rpc_error(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase + \"wrong\", 10)\n \n         # Test walletlock\n         self.nodes[0].walletpassphrase(passphrase, 84600)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n         self.nodes[0].walletlock()\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Test passphrase changes\n         self.nodes[0].walletpassphrasechange(passphrase, passphrase2)\n-        assert_raises_jsonrpc(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase, 10)\n+        assert_raises_rpc_error(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase, 10)\n         self.nodes[0].walletpassphrase(passphrase2, 10)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n "
      },
      {
        "sha": "7d6b0b24b6f42d88715163809a898fb7f9ef53b0",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -102,7 +102,7 @@ def run_test(self):\n         unspent_0 = self.nodes[2].listunspent()[0]\n         unspent_0 = {\"txid\": unspent_0[\"txid\"], \"vout\": unspent_0[\"vout\"]}\n         self.nodes[2].lockunspent(False, [unspent_0])\n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n         assert_equal([unspent_0], self.nodes[2].listlockunspent())\n         self.nodes[2].lockunspent(True, [unspent_0])\n         assert_equal(len(self.nodes[2].listlockunspent()), 0)\n@@ -287,10 +287,10 @@ def run_test(self):\n         assert_equal(txObj['amount'], Decimal('-0.0001'))\n \n         # This will raise an exception because the amount type is wrong\n-        assert_raises_jsonrpc(-3, \"Invalid amount\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"1f-4\")\n+        assert_raises_rpc_error(-3, \"Invalid amount\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"1f-4\")\n \n         # This will raise an exception since generate does not accept a string\n-        assert_raises_jsonrpc(-1, \"not an integer\", self.nodes[0].generate, \"2\")\n+        assert_raises_rpc_error(-1, \"not an integer\", self.nodes[0].generate, \"2\")\n \n         # Import address and private key to check correct behavior of spendable unspents\n         # 1. Send some coins to generate new UTXO\n@@ -423,7 +423,7 @@ def run_test(self):\n \n         node0_balance = self.nodes[0].getbalance()\n         # With walletrejectlongchains we will not create the tx and store it in our wallet.\n-        assert_raises_jsonrpc(-4, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))\n+        assert_raises_rpc_error(-4, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))\n \n         # Verify nothing new in wallet\n         assert_equal(total_txs, len(self.nodes[0].listtransactions(\"*\",99999)))"
      },
      {
        "sha": "8cd622dc8ec3b7996140f2115f904a89e3a6639e",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94fc336c47b5fd0f42217806faad1aa201b9d63/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "patch": "@@ -17,7 +17,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     wait_until,\n )\n \n@@ -72,7 +72,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n \n         # This will raise an exception because the unconfirmed transaction has been zapped\n-        assert_raises_jsonrpc(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n \n if __name__ == '__main__':\n     ZapWalletTXesTest().main()"
      }
    ]
  },
  {
    "sha": "fd79ed6b202ec872aa794ba6a23d4dfc373a98f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDc5ZWQ2YjIwMmVjODcyYWE3OTRiYTZhMjNkNGRmYzM3M2E5OGYx",
    "commit": {
      "author": {
        "name": "Tomas van der Wansem",
        "email": "tomas@tomasvdw.nl",
        "date": "2017-09-20T22:10:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-01T19:23:06Z"
      },
      "message": "Ensure backupwallet fails when attempting to backup to source file\n\nPrevious behaviour was to destroy the wallet (to zero-length)\n\nGithub-Pull: #11376\nRebased-From: 5d465e396249a0e2cc60b16984a2bdbe4c8993c3",
      "tree": {
        "sha": "9a8e2ce5deba2c1ba8dd4c0da0145275624d80cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a8e2ce5deba2c1ba8dd4c0da0145275624d80cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd79ed6b202ec872aa794ba6a23d4dfc373a98f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd79ed6b202ec872aa794ba6a23d4dfc373a98f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd79ed6b202ec872aa794ba6a23d4dfc373a98f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd79ed6b202ec872aa794ba6a23d4dfc373a98f1/comments",
    "author": {
      "login": "tomasvdw",
      "id": 534388,
      "node_id": "MDQ6VXNlcjUzNDM4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/534388?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tomasvdw",
      "html_url": "https://github.com/tomasvdw",
      "followers_url": "https://api.github.com/users/tomasvdw/followers",
      "following_url": "https://api.github.com/users/tomasvdw/following{/other_user}",
      "gists_url": "https://api.github.com/users/tomasvdw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tomasvdw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tomasvdw/subscriptions",
      "organizations_url": "https://api.github.com/users/tomasvdw/orgs",
      "repos_url": "https://api.github.com/users/tomasvdw/repos",
      "events_url": "https://api.github.com/users/tomasvdw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tomasvdw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d94fc336c47b5fd0f42217806faad1aa201b9d63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d94fc336c47b5fd0f42217806faad1aa201b9d63"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 16,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8c23d9c0722d66df5feba6d1242abc62aac9db83",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd79ed6b202ec872aa794ba6a23d4dfc373a98f1/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd79ed6b202ec872aa794ba6a23d4dfc373a98f1/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=fd79ed6b202ec872aa794ba6a23d4dfc373a98f1",
        "patch": "@@ -673,6 +673,11 @@ bool CWalletDBWrapper::Backup(const std::string& strDest)\n                     pathDest /= strFile;\n \n                 try {\n+                    if (fs::equivalent(pathSrc, pathDest)) {\n+                        LogPrintf(\"cannot backup to wallet source file %s\\n\", pathDest.string());\n+                        return false;\n+                    }\n+\n                     fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists);\n                     LogPrintf(\"copied %s to %s\\n\", strFile, pathDest.string());\n                     return true;"
      },
      {
        "sha": "6f3cfe9557042181ea3c73e0e30d9c06fc550197",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd79ed6b202ec872aa794ba6a23d4dfc373a98f1/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd79ed6b202ec872aa794ba6a23d4dfc373a98f1/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=fd79ed6b202ec872aa794ba6a23d4dfc373a98f1",
        "patch": "@@ -45,7 +45,7 @@ class CDBEnv\n     void Reset();\n \n     void MakeMock();\n-    bool IsMock() { return fMockDb; }\n+    bool IsMock() const { return fMockDb; }\n \n     /**\n      * Verify that database file strFile is OK. If it is not,"
      },
      {
        "sha": "85a149793e730fcaa072b80ee756d2b964ddf7b2",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd79ed6b202ec872aa794ba6a23d4dfc373a98f1/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd79ed6b202ec872aa794ba6a23d4dfc373a98f1/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=fd79ed6b202ec872aa794ba6a23d4dfc373a98f1",
        "patch": "@@ -190,6 +190,16 @@ def run_test(self):\n         assert_equal(self.nodes[1].getbalance(), balance1)\n         assert_equal(self.nodes[2].getbalance(), balance2)\n \n+        # Backup to source wallet file must fail\n+        sourcePaths = [\n+            tmpdir + \"/node0/regtest/wallet.dat\",\n+            tmpdir + \"/node0/./regtest/wallet.dat\",\n+            tmpdir + \"/node0/regtest/\",\n+            tmpdir + \"/node0/regtest\"]\n+\n+        for sourcePath in sourcePaths:\n+            assert_raises_rpc_error(-4, \"backup failed\", self.nodes[0].backupwallet, sourcePath)\n+\n \n if __name__ == '__main__':\n     WalletBackupTest().main()"
      }
    ]
  },
  {
    "sha": "de7053f1141756158c2107bcba376401b4cc94e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTcwNTNmMTE0MTc1NjE1OGMyMTA3YmNiYTM3NjQwMWI0Y2M5NGU5",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-12T22:14:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-01T19:23:06Z"
      },
      "message": "[wallet] Fix leak in CDB constructor\n\nNow using a std::unique_ptr, the Db instance is correctly released\nwhen CDB initialization fails.\nThe internal CDB state and mapFileUseCount are only mutated when\nthe CDB initialization succeeds.\n\nGithub-Pull: #11492\nRebased-From: 7104de8b1f3a31d3a60009b5dc376adbedac6a9c",
      "tree": {
        "sha": "6b248c20036e2f7aa2bc8015b36f428b3ae9955a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b248c20036e2f7aa2bc8015b36f428b3ae9955a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de7053f1141756158c2107bcba376401b4cc94e9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de7053f1141756158c2107bcba376401b4cc94e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de7053f1141756158c2107bcba376401b4cc94e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de7053f1141756158c2107bcba376401b4cc94e9/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd79ed6b202ec872aa794ba6a23d4dfc373a98f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd79ed6b202ec872aa794ba6a23d4dfc373a98f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd79ed6b202ec872aa794ba6a23d4dfc373a98f1"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 16,
      "deletions": 18
    },
    "files": [
      {
        "sha": "f5f96768b074bd647cc0358bcf9fe70c4a5fa12d",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 18,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de7053f1141756158c2107bcba376401b4cc94e9/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de7053f1141756158c2107bcba376401b4cc94e9/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=de7053f1141756158c2107bcba376401b4cc94e9",
        "patch": "@@ -379,45 +379,43 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n         if (!env->Open(GetDataDir()))\n             throw std::runtime_error(\"CDB: Failed to open database environment.\");\n \n-        strFile = strFilename;\n-        ++env->mapFileUseCount[strFile];\n-        pdb = env->mapDb[strFile];\n+        pdb = env->mapDb[strFilename];\n         if (pdb == nullptr) {\n             int ret;\n-            pdb = new Db(env->dbenv, 0);\n+            std::unique_ptr<Db> pdb_temp(new Db(env->dbenv, 0));\n \n             bool fMockDb = env->IsMock();\n             if (fMockDb) {\n-                DbMpoolFile* mpf = pdb->get_mpf();\n+                DbMpoolFile* mpf = pdb_temp->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n-                if (ret != 0)\n-                    throw std::runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFile));\n+                if (ret != 0) {\n+                    throw std::runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFilename));\n+                }\n             }\n \n-            ret = pdb->open(nullptr,                               // Txn pointer\n-                            fMockDb ? nullptr : strFile.c_str(),   // Filename\n-                            fMockDb ? strFile.c_str() : \"main\", // Logical db name\n-                            DB_BTREE,                           // Database type\n-                            nFlags,                             // Flags\n+            ret = pdb_temp->open(nullptr,                             // Txn pointer\n+                            fMockDb ? nullptr : strFilename.c_str(),  // Filename\n+                            fMockDb ? strFilename.c_str() : \"main\",   // Logical db name\n+                            DB_BTREE,                                 // Database type\n+                            nFlags,                                   // Flags\n                             0);\n \n             if (ret != 0) {\n-                delete pdb;\n-                pdb = nullptr;\n-                --env->mapFileUseCount[strFile];\n-                strFile = \"\";\n                 throw std::runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFilename));\n             }\n \n+            pdb = pdb_temp.release();\n+            env->mapDb[strFilename] = pdb;\n+\n             if (fCreate && !Exists(std::string(\"version\"))) {\n                 bool fTmp = fReadOnly;\n                 fReadOnly = false;\n                 WriteVersion(CLIENT_VERSION);\n                 fReadOnly = fTmp;\n             }\n-\n-            env->mapDb[strFile] = pdb;\n         }\n+        ++env->mapFileUseCount[strFilename];\n+        strFile = strFilename;\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "9c8006dc332139069d798f39406ec67186ecb311",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YzgwMDZkYzMzMjEzOTA2OWQ3OThmMzk0MDZlYzY3MTg2ZWNiMzEx",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-10-10T19:27:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-01T19:23:06Z"
      },
      "message": "Avoid opening copied wallet databases simultaneously\n\nMake sure wallet databases have unique fileids. If they don't, throw an error.\nBDB caches do not work properly when more than one open database has the same\nfileid, because values written to one database may show up in reads to other\ndatabases.\n\nBitcoin will never create different databases with the same fileid, but users\ncan create them by manually copying database files.\n\nBDB caching bug was reported by Chris Moore <dooglus@gmail.com>\nhttps://github.com/bitcoin/bitcoin/issues/11429\n\nFixes #11429\n\nGithub-Pull: #11476\nRebased-From: 478a89c1ef79a75275d1b508122c06eee9386b2d",
      "tree": {
        "sha": "84b4f3330847e5bb0d1a5ddcb1827123a0f6caec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84b4f3330847e5bb0d1a5ddcb1827123a0f6caec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9c8006dc332139069d798f39406ec67186ecb311",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8006dc332139069d798f39406ec67186ecb311",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9c8006dc332139069d798f39406ec67186ecb311",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8006dc332139069d798f39406ec67186ecb311/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "de7053f1141756158c2107bcba376401b4cc94e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de7053f1141756158c2107bcba376401b4cc94e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/de7053f1141756158c2107bcba376401b4cc94e9"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 41,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fb6e57607475e68eaa94c2f48ccf86aa8040781a",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8006dc332139069d798f39406ec67186ecb311/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8006dc332139069d798f39406ec67186ecb311/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=9c8006dc332139069d798f39406ec67186ecb311",
        "patch": "@@ -20,6 +20,40 @@\n \n #include <boost/thread.hpp>\n \n+namespace {\n+//! Make sure database has a unique fileid within the environment. If it\n+//! doesn't, throw an error. BDB caches do not work properly when more than one\n+//! open database has the same fileid (values written to one database may show\n+//! up in reads to other databases).\n+//!\n+//! BerkeleyDB generates unique fileids by default\n+//! (https://docs.oracle.com/cd/E17275_01/html/programmer_reference/program_copy.html),\n+//! so bitcoin should never create different databases with the same fileid, but\n+//! this error can be triggered if users manually copy database files.\n+void CheckUniqueFileid(const CDBEnv& env, const std::string& filename, Db& db)\n+{\n+    if (env.IsMock()) return;\n+\n+    u_int8_t fileid[DB_FILE_ID_LEN];\n+    int ret = db.get_mpf()->get_fileid(fileid);\n+    if (ret != 0) {\n+        throw std::runtime_error(strprintf(\"CDB: Can't open database %s (get_fileid failed with %d)\", filename, ret));\n+    }\n+\n+    for (const auto& item : env.mapDb) {\n+        u_int8_t item_fileid[DB_FILE_ID_LEN];\n+        if (item.second && item.second->get_mpf()->get_fileid(item_fileid) == 0 &&\n+            memcmp(fileid, item_fileid, sizeof(fileid)) == 0) {\n+            const char* item_filename = nullptr;\n+            item.second->get_dbname(&item_filename, nullptr);\n+            throw std::runtime_error(strprintf(\"CDB: Can't open database %s (duplicates fileid %s from %s)\", filename,\n+                HexStr(std::begin(item_fileid), std::end(item_fileid)),\n+                item_filename ? item_filename : \"(unknown database)\"));\n+        }\n+    }\n+}\n+} // namespace\n+\n //\n // CDB\n //\n@@ -403,6 +437,7 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n             if (ret != 0) {\n                 throw std::runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFilename));\n             }\n+            CheckUniqueFileid(*env, strFilename, *pdb_temp);\n \n             pdb = pdb_temp.release();\n             env->mapDb[strFilename] = pdb;"
      },
      {
        "sha": "ba6b659ddcfd9334f5c0885f7b6915a4535a2bec",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9c8006dc332139069d798f39406ec67186ecb311/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9c8006dc332139069d798f39406ec67186ecb311/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=9c8006dc332139069d798f39406ec67186ecb311",
        "patch": "@@ -7,6 +7,7 @@\n Verify that a bitcoind node can load multiple wallet files\n \"\"\"\n import os\n+import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n@@ -29,6 +30,11 @@ def run_test(self):\n         os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w11'))\n         self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n \n+        # should not initialize if one wallet is a copy of another\n+        shutil.copyfile(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w2'),\n+                        os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w22'))\n+        self.assert_start_raises_init_error(0, ['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n+\n         # should not initialize if wallet file is a symlink\n         os.symlink(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w1'), os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w12'))\n         self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')"
      }
    ]
  },
  {
    "sha": "f3457d0e83c408770eeabb002f569e22c9832c1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMzQ1N2QwZTgzYzQwODc3MGVlYWJiMDAyZjU2OWUyMmM5ODMyYzFi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-09T22:04:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-01T19:23:06Z"
      },
      "message": "qa: Make tmpdir option an absolute path\n\nThis should fix issues with the multiwallet test and symlinks\nwhen the tmpdir is a relative path.\n\nRather than fixing os.symlink to work with paths relative to a\ndirectory descriptor, which does not work on Windows, normalize\nthe path instead.\n\nGithub-Pull: #11472\nRebased-From: fa9de370b17297d6dd542da627c8dd2b31aec340",
      "tree": {
        "sha": "6e653cb243fadda7665928ca1e0364212fd04a06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e653cb243fadda7665928ca1e0364212fd04a06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f3457d0e83c408770eeabb002f569e22c9832c1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3457d0e83c408770eeabb002f569e22c9832c1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f3457d0e83c408770eeabb002f569e22c9832c1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3457d0e83c408770eeabb002f569e22c9832c1b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9c8006dc332139069d798f39406ec67186ecb311",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9c8006dc332139069d798f39406ec67186ecb311",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9c8006dc332139069d798f39406ec67186ecb311"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7aabdd9c007c56fb45846213c6067ef801cdc157",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f3457d0e83c408770eeabb002f569e22c9832c1b/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f3457d0e83c408770eeabb002f569e22c9832c1b/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=f3457d0e83c408770eeabb002f569e22c9832c1b",
        "patch": "@@ -102,8 +102,11 @@ def main(self):\n \n         check_json_precision()\n \n+        self.options.cachedir = os.path.abspath(self.options.cachedir)\n+\n         # Set up temp directory and start logging\n         if self.options.tmpdir:\n+            self.options.tmpdir = os.path.abspath(self.options.tmpdir)\n             os.makedirs(self.options.tmpdir, exist_ok=False)\n         else:\n             self.options.tmpdir = tempfile.mkdtemp(prefix=\"test\")"
      }
    ]
  },
  {
    "sha": "41088795dd9a1c90bb379b2d5237d88ae8889c90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTA4ODc5NWRkOWExYzkwYmIzNzliMmQ1MjM3ZDg4YWU4ODg5Yzkw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-11T20:14:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-01T19:23:06Z"
      },
      "message": "qa: Remove never used return value of sync_with_ping\n\nGithub-Pull: #11472\nRebased-From: fafa0039708e15d1067be091b2bfc10195afa480",
      "tree": {
        "sha": "118bf80a3a71222f2dba01e594ce834bbd0cf17e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/118bf80a3a71222f2dba01e594ce834bbd0cf17e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/41088795dd9a1c90bb379b2d5237d88ae8889c90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41088795dd9a1c90bb379b2d5237d88ae8889c90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/41088795dd9a1c90bb379b2d5237d88ae8889c90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41088795dd9a1c90bb379b2d5237d88ae8889c90/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f3457d0e83c408770eeabb002f569e22c9832c1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f3457d0e83c408770eeabb002f569e22c9832c1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f3457d0e83c408770eeabb002f569e22c9832c1b"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "6c7e6a22ec9cc540dc68f5bbee4e1beee18c6e6b",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41088795dd9a1c90bb379b2d5237d88ae8889c90/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41088795dd9a1c90bb379b2d5237d88ae8889c90/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=41088795dd9a1c90bb379b2d5237d88ae8889c90",
        "patch": "@@ -103,7 +103,8 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h2[0]))\n         white_node.send_message(msg_block(blocks_h2[1]))\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n+        for x in [test_node, white_node]:\n+            x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n         self.log.info(\"First height 2 block accepted by both nodes\")\n@@ -116,7 +117,8 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h2f[0]))\n         white_node.send_message(msg_block(blocks_h2f[1]))\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n+        for x in [test_node, white_node]:\n+            x.sync_with_ping()\n         for x in self.nodes[0].getchaintips():\n             if x['hash'] == blocks_h2f[0].hash:\n                 assert_equal(x['status'], \"headers-only\")\n@@ -135,7 +137,8 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h3[0]))\n         white_node.send_message(msg_block(blocks_h3[1]))\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n+        for x in [test_node, white_node]:\n+            x.sync_with_ping()\n         # Since the earlier block was not processed by node0, the new block\n         # can't be fully validated.\n         for x in self.nodes[0].getchaintips():"
      },
      {
        "sha": "dc8731066b27740312a69ae4babe15c0dbf85919",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/41088795dd9a1c90bb379b2d5237d88ae8889c90/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/41088795dd9a1c90bb379b2d5237d88ae8889c90/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=41088795dd9a1c90bb379b2d5237d88ae8889c90",
        "patch": "@@ -1622,7 +1622,6 @@ def sync_with_ping(self, timeout=60):\n         test_function = lambda: self.last_message.get(\"pong\") and self.last_message[\"pong\"].nonce == self.ping_counter\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         self.ping_counter += 1\n-        return True\n \n # The actual NodeConn class\n # This class provides an interface for a p2p connection to a specified node"
      }
    ]
  },
  {
    "sha": "da4908c3a05659846dae81b8d0bd73a04f7ed7c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTQ5MDhjM2EwNTY1OTg0NmRhZTgxYjhkMGJkNzNhMDRmN2VkN2M5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-05-07T18:10:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:08:43Z"
      },
      "message": "Allow setting nMinimumChainWork on command line\n\nGithub-Pull: #10357\nRebased-From: 0311836f6927aec4ba5687ea12af35df3c509682",
      "tree": {
        "sha": "c3c0269c5244bb2bffd2459417c9ef34cdb77f3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3c0269c5244bb2bffd2459417c9ef34cdb77f3c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da4908c3a05659846dae81b8d0bd73a04f7ed7c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da4908c3a05659846dae81b8d0bd73a04f7ed7c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da4908c3a05659846dae81b8d0bd73a04f7ed7c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41088795dd9a1c90bb379b2d5237d88ae8889c90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41088795dd9a1c90bb379b2d5237d88ae8889c90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41088795dd9a1c90bb379b2d5237d88ae8889c90"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 68,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c9bb827f82006cd99ea1e334578ada1e259b3302",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=da4908c3a05659846dae81b8d0bd73a04f7ed7c9",
        "patch": "@@ -362,6 +362,9 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n+    if (showDebug) {\n+        strUsage += HelpMessageOpt(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()));\n+    }\n     strUsage += HelpMessageOpt(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL));\n     strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n@@ -979,6 +982,20 @@ bool AppInitParameterInteraction()\n     else\n         LogPrintf(\"Validating signatures for all blocks.\\n\");\n \n+    if (gArgs.IsArgSet(\"-minimumchainwork\")) {\n+        const std::string minChainWorkStr = gArgs.GetArg(\"-minimumchainwork\", \"\");\n+        if (!IsHexNumber(minChainWorkStr)) {\n+            return InitError(strprintf(\"Invalid non-hex (%s) minimum chain work value specified\", minChainWorkStr));\n+        }\n+        nMinimumChainWork = UintToArith256(uint256S(minChainWorkStr));\n+    } else {\n+        nMinimumChainWork = UintToArith256(chainparams.GetConsensus().nMinimumChainWork);\n+    }\n+    LogPrintf(\"Setting nMinimumChainWork=%s\\n\", nMinimumChainWork.GetHex());\n+    if (nMinimumChainWork < UintToArith256(chainparams.GetConsensus().nMinimumChainWork)) {\n+        LogPrintf(\"Warning: nMinimumChainWork set below default value of %s\\n\", chainparams.GetConsensus().nMinimumChainWork.GetHex());\n+    }\n+\n     // mempool limits\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;"
      },
      {
        "sha": "5f117dea7ebe871bff2647c68523613bf3c862a5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=da4908c3a05659846dae81b8d0bd73a04f7ed7c9",
        "patch": "@@ -466,7 +466,7 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n     // Make sure pindexBestKnownBlock is up to date, we'll need it.\n     ProcessBlockAvailability(nodeid);\n \n-    if (state->pindexBestKnownBlock == nullptr || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork || state->pindexBestKnownBlock->nChainWork < UintToArith256(consensusParams.nMinimumChainWork)) {\n+    if (state->pindexBestKnownBlock == nullptr || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork || state->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n         // This peer has nothing interesting.\n         return;\n     }"
      },
      {
        "sha": "6ec544290daa534879c4ab7ec5c9ebb3b0af57ba",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=da4908c3a05659846dae81b8d0bd73a04f7ed7c9",
        "patch": "@@ -253,6 +253,31 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n+BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+{\n+    BOOST_CHECK(IsHexNumber(\"0x0\"));\n+    BOOST_CHECK(IsHexNumber(\"0\"));\n+    BOOST_CHECK(IsHexNumber(\"0x10\"));\n+    BOOST_CHECK(IsHexNumber(\"10\"));\n+    BOOST_CHECK(IsHexNumber(\"0xff\"));\n+    BOOST_CHECK(IsHexNumber(\"ff\"));\n+    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n+    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+\n+    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n+    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n+    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n+    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n+    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n+    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n+    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n+    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n+    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n+\n+}\n+\n BOOST_AUTO_TEST_CASE(util_seed_insecure_rand)\n {\n     SeedInsecureRand(true);"
      },
      {
        "sha": "741680e93f79609351925af29edece852483dc0a",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=da4908c3a05659846dae81b8d0bd73a04f7ed7c9",
        "patch": "@@ -65,6 +65,19 @@ bool IsHex(const std::string& str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n+bool IsHexNumber(const std::string& str)\n+{\n+    size_t starting_location = 0;\n+    if (str.size() > 2 && *str.begin() == '0' && *(str.begin()+1) == 'x') {\n+        starting_location = 2;\n+    }\n+    for (auto c : str.substr(starting_location)) {\n+        if (HexDigit(c) < 0) return false;\n+    }\n+    // Return false for empty string or \"0x\".\n+    return (str.size() > starting_location);\n+}\n+\n std::vector<unsigned char> ParseHex(const char* psz)\n {\n     // convert hex dump to vector"
      },
      {
        "sha": "192f33fb290e037d0fc5a692f35c7187dca536ba",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=da4908c3a05659846dae81b8d0bd73a04f7ed7c9",
        "patch": "@@ -38,7 +38,13 @@ std::string SanitizeString(const std::string& str, int rule = SAFE_CHARS_DEFAULT\n std::vector<unsigned char> ParseHex(const char* psz);\n std::vector<unsigned char> ParseHex(const std::string& str);\n signed char HexDigit(char c);\n+/* Returns true if each character in str is a hex character, and has an even\n+ * number of hex digits.*/\n bool IsHex(const std::string& str);\n+/**\n+* Return true if the string is a hex number, optionally prefixed with \"0x\"\n+*/\n+bool IsHexNumber(const std::string& str);\n std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid = nullptr);\n std::string DecodeBase64(const std::string& str);\n std::string EncodeBase64(const unsigned char* pch, size_t len);"
      },
      {
        "sha": "76b8401f1ba597d36bf4da93f440140ba55524bf",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=da4908c3a05659846dae81b8d0bd73a04f7ed7c9",
        "patch": "@@ -80,6 +80,7 @@ int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n \n uint256 hashAssumeValid;\n+arith_uint256 nMinimumChainWork;\n \n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n@@ -1032,8 +1033,6 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n \n bool IsInitialBlockDownload()\n {\n-    const CChainParams& chainParams = Params();\n-\n     // Once this function has returned false, it must remain false.\n     static std::atomic<bool> latchToFalse{false};\n     // Optimization: pre-test latch before taking the lock.\n@@ -1047,7 +1046,7 @@ bool IsInitialBlockDownload()\n         return true;\n     if (chainActive.Tip() == nullptr)\n         return true;\n-    if (chainActive.Tip()->nChainWork < UintToArith256(chainParams.GetConsensus().nMinimumChainWork))\n+    if (chainActive.Tip()->nChainWork < nMinimumChainWork)\n         return true;\n     if (chainActive.Tip()->GetBlockTime() < (GetTime() - nMaxTipAge))\n         return true;\n@@ -1664,7 +1663,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         if (it != mapBlockIndex.end()) {\n             if (it->second->GetAncestor(pindex->nHeight) == pindex &&\n                 pindexBestHeader->GetAncestor(pindex->nHeight) == pindex &&\n-                pindexBestHeader->nChainWork >= UintToArith256(chainparams.GetConsensus().nMinimumChainWork)) {\n+                pindexBestHeader->nChainWork >= nMinimumChainWork) {\n                 // This block is a member of the assumed verified chain and an ancestor of the best header.\n                 // The equivalent time check discourages hash power from extorting the network via DOS attack\n                 //  into accepting an invalid block through telling users they must manually set assumevalid."
      },
      {
        "sha": "f3d88d318090b2db3b5e093256ac9e6f447cda5f",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da4908c3a05659846dae81b8d0bd73a04f7ed7c9/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=da4908c3a05659846dae81b8d0bd73a04f7ed7c9",
        "patch": "@@ -186,6 +186,9 @@ extern bool fEnableReplacement;\n /** Block hash whose ancestors we will assume to have valid scripts without checking them. */\n extern uint256 hashAssumeValid;\n \n+/** Minimum work we will assume exists on some valid chain. */\n+extern arith_uint256 nMinimumChainWork;\n+\n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;\n "
      }
    ]
  },
  {
    "sha": "0e9d04bf0a9465d085df1f8c8858cf427c6c97ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTlkMDRiZjBhOTQ2NWQwODVkZjFmOGM4ODU4Y2Y0MjdjNmM5N2Jh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-05-08T13:59:00Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:08:50Z"
      },
      "message": "[qa] Test nMinimumChainWork\n\nNodes don't consider themselves out of \"initial block download\" until\ntheir active chain has more work than nMinimumChainWork.\n\nWhile in initial block download, nodes won't relay blocks to their\npeers, so test that this parameter functions as intended by verifying\nthat block relay only succeeds past a given node once its\nnMinimumChainWork has been exceeded.\n\nGithub-Pull: #10357\nRebased-From: eac64bb7a3b6aba747403b23b3b1d3609843f8db",
      "tree": {
        "sha": "019a9326821f535edc1bda5955e6c6830ed6925d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/019a9326821f535edc1bda5955e6c6830ed6925d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e9d04bf0a9465d085df1f8c8858cf427c6c97ba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e9d04bf0a9465d085df1f8c8858cf427c6c97ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e9d04bf0a9465d085df1f8c8858cf427c6c97ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e9d04bf0a9465d085df1f8c8858cf427c6c97ba/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da4908c3a05659846dae81b8d0bd73a04f7ed7c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da4908c3a05659846dae81b8d0bd73a04f7ed7c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da4908c3a05659846dae81b8d0bd73a04f7ed7c9"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 82,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c7579d2548e4642ffc65c07dcc000f55a39825d0",
        "filename": "test/functional/minchainwork.py",
        "status": "added",
        "additions": 81,
        "deletions": 0,
        "changes": 81,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e9d04bf0a9465d085df1f8c8858cf427c6c97ba/test/functional/minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e9d04bf0a9465d085df1f8c8858cf427c6c97ba/test/functional/minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/minchainwork.py?ref=0e9d04bf0a9465d085df1f8c8858cf427c6c97ba",
        "patch": "@@ -0,0 +1,81 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for setting nMinimumChainWork on command line.\n+\n+Nodes don't consider themselves out of \"initial block download\" until\n+their active chain has more work than nMinimumChainWork.\n+\n+Nodes don't download blocks from a peer unless the peer's best known block\n+has more work than nMinimumChainWork.\n+\n+While in initial block download, nodes won't relay blocks to their peers, so\n+test that this parameter functions as intended by verifying that block relay\n+only succeeds past a given node once its nMinimumChainWork has been exceeded.\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import sync_blocks, connect_nodes, assert_equal\n+\n+# 2 hashes required per regtest block (with no difficulty adjustment)\n+REGTEST_WORK_PER_BLOCK = 2\n+\n+class MinimumChainWorkTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+        self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n+        self.node_min_work = [0, 101, 101]\n+\n+    def setup_network(self):\n+        # This test relies on the chain setup being:\n+        # node0 <- node1 <- node2\n+        # Before leaving IBD, nodes prefer to download blocks from outbound\n+        # peers, so ensure that we're mining on an outbound peer and testing\n+        # block relay to inbound peers.\n+        self.setup_nodes()\n+        for i in range(self.num_nodes-1):\n+            connect_nodes(self.nodes[i+1], i)\n+\n+    def run_test(self):\n+        # Start building a chain on node0.  node2 shouldn't be able to sync until node1's\n+        # minchainwork is exceeded\n+        starting_chain_work = REGTEST_WORK_PER_BLOCK # Genesis block's work\n+        self.log.info(\"Testing relay across node %d (minChainWork = %d)\", 1, self.node_min_work[1])\n+\n+        starting_blockcount = self.nodes[2].getblockcount()\n+\n+        num_blocks_to_generate = int((self.node_min_work[1] - starting_chain_work) / REGTEST_WORK_PER_BLOCK)\n+        self.log.info(\"Generating %d blocks on node0\", num_blocks_to_generate)\n+        hashes = self.nodes[0].generate(num_blocks_to_generate)\n+\n+        self.log.info(\"Node0 current chain work: %s\", self.nodes[0].getblockheader(hashes[-1])['chainwork'])\n+\n+        # Sleep a few seconds and verify that node2 didn't get any new blocks\n+        # or headers.  We sleep, rather than sync_blocks(node0, node1) because\n+        # it's reasonable either way for node1 to get the blocks, or not get\n+        # them (since they're below node1's minchainwork).\n+        time.sleep(3)\n+\n+        self.log.info(\"Verifying node 2 has no more blocks than before\")\n+        self.log.info(\"Blockcounts: %s\", [n.getblockcount() for n in self.nodes])\n+        # Node2 shouldn't have any new headers yet, because node1 should not\n+        # have relayed anything.\n+        assert_equal(len(self.nodes[2].getchaintips()), 1)\n+        assert_equal(self.nodes[2].getchaintips()[0]['height'], 0)\n+\n+        assert self.nodes[1].getbestblockhash() != self.nodes[0].getbestblockhash()\n+        assert_equal(self.nodes[2].getblockcount(), starting_blockcount)\n+\n+        self.log.info(\"Generating one more block\")\n+        self.nodes[0].generate(1)\n+\n+        self.log.info(\"Verifying nodes are all synced\")\n+        self.sync_all()\n+        self.log.info(\"Blockcounts: %s\", [n.getblockcount() for n in self.nodes])\n+\n+if __name__ == '__main__':\n+    MinimumChainWorkTest().main()"
      },
      {
        "sha": "714a907ee8da9c4ad58baf0b9b192a09ac0f5b58",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e9d04bf0a9465d085df1f8c8858cf427c6c97ba/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e9d04bf0a9465d085df1f8c8858cf427c6c97ba/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=0e9d04bf0a9465d085df1f8c8858cf427c6c97ba",
        "patch": "@@ -121,6 +121,7 @@\n     'bip65-cltv-p2p.py',\n     'uptime.py',\n     'resendwallettransactions.py',\n+    'minchainwork.py',\n ]\n \n EXTENDED_SCRIPTS = ["
      }
    ]
  },
  {
    "sha": "3acec3878133c52f4f3a594baf1dcbd6575244bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWNlYzM4NzgxMzNjNTJmNGYzYTU5NGJhZjFkY2JkNjU3NTI0NGJi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-06T18:11:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:09:00Z"
      },
      "message": "Don't process unrequested, low-work blocks\n\nA peer could try to waste our resources by sending us unrequested blocks with\nlow work, eg to fill up our disk.  Since\ne2652002b6011f793185d473f87f1730c625593b we no longer request blocks until we\nknow we're on a chain with more than nMinimumChainWork (our anti-DoS\nthreshold), but we would still process unrequested blocks that had more work\nthan our tip.  This commit fixes that behavior.\n\nGithub-Pull: #11458\nRebased-From: ce8cd7a7da9174ab151172fc0ce97b5164637cf3",
      "tree": {
        "sha": "701f01e965031ed46f2735b447d46ce91c29b6bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/701f01e965031ed46f2735b447d46ce91c29b6bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3acec3878133c52f4f3a594baf1dcbd6575244bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3acec3878133c52f4f3a594baf1dcbd6575244bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3acec3878133c52f4f3a594baf1dcbd6575244bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3acec3878133c52f4f3a594baf1dcbd6575244bb/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e9d04bf0a9465d085df1f8c8858cf427c6c97ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e9d04bf0a9465d085df1f8c8858cf427c6c97ba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e9d04bf0a9465d085df1f8c8858cf427c6c97ba"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3bff2d8228760ba1c38f6e0bb63ce2b8eb32c81c",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3acec3878133c52f4f3a594baf1dcbd6575244bb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3acec3878133c52f4f3a594baf1dcbd6575244bb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=3acec3878133c52f4f3a594baf1dcbd6575244bb",
        "patch": "@@ -3120,6 +3120,12 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n         if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n         if (!fHasMoreWork) return true;     // Don't process less-work chains\n         if (fTooFarAhead) return true;      // Block height is too high\n+\n+        // Protect against DoS attacks from low-work chains.\n+        // If our tip is behind, a peer could try to send us\n+        // low-work blocks on a fake chain that we would never\n+        // request; don't process these.\n+        if (pindex->nChainWork < nMinimumChainWork) return true;\n     }\n     if (fNewBlock) *fNewBlock = true;\n "
      }
    ]
  },
  {
    "sha": "2df65eeb98100a376678cdf9cad4c973733df894",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZGY2NWVlYjk4MTAwYTM3NjY3OGNkZjljYWQ0Yzk3MzczM2RmODk0",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-06T18:32:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:09:03Z"
      },
      "message": "qa: add test for minchainwork use in acceptblock\n\nGithub-Pull: #11458\nRebased-From: 08fd822771bf8dae1c21698811f57aa691b2f25d",
      "tree": {
        "sha": "6767f71bf07110d67bcc6ee4398a5b91a85cf1d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6767f71bf07110d67bcc6ee4398a5b91a85cf1d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2df65eeb98100a376678cdf9cad4c973733df894",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2df65eeb98100a376678cdf9cad4c973733df894",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2df65eeb98100a376678cdf9cad4c973733df894",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2df65eeb98100a376678cdf9cad4c973733df894/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3acec3878133c52f4f3a594baf1dcbd6575244bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3acec3878133c52f4f3a594baf1dcbd6575244bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3acec3878133c52f4f3a594baf1dcbd6575244bb"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 33,
      "deletions": 11
    },
    "files": [
      {
        "sha": "27ae0c27e19656733ebfee3edc3a0ad9399f3a0b",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 33,
        "deletions": 11,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2df65eeb98100a376678cdf9cad4c973733df894/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2df65eeb98100a376678cdf9cad4c973733df894/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=2df65eeb98100a376678cdf9cad4c973733df894",
        "patch": "@@ -8,17 +8,22 @@\n versus non-whitelisted peers, this tests the behavior of both (effectively two\n separate tests running in parallel).\n \n-Setup: two nodes, node0 and node1, not connected to each other.  Node0 does not\n+Setup: three nodes, node0+node1+node2, not connected to each other.  Node0 does not\n whitelist localhost, but node1 does. They will each be on their own chain for\n-this test.\n+this test.  Node2 will have nMinimumChainWork set to 0x10, so it won't process\n+low-work unrequested blocks.\n \n-We have one NodeConn connection to each, test_node and white_node respectively.\n+We have one NodeConn connection to each, test_node, white_node, and min_work_node,\n+respectively.\n \n The test:\n 1. Generate one block on each node, to leave IBD.\n \n 2. Mine a new block on each tip, and deliver to each node from node's peer.\n-   The tip should advance.\n+   The tip should advance for node0 and node1, but node2 should skip processing\n+   due to nMinimumChainWork.\n+\n+Node2 is unused in tests 3-7:\n \n 3. Mine a block that forks the previous block, and deliver to each node from\n    corresponding peer.\n@@ -46,6 +51,10 @@\n \n 7. Send Node0 the missing block again.\n    Node0 should process and the tip should advance.\n+\n+8. Test Node2 is able to sync when connected to node0 (which should have sufficient\n+work on its chain).\n+\n \"\"\"\n \n from test_framework.mininode import *\n@@ -62,52 +71,60 @@ def add_options(self, parser):\n \n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 2\n-        self.extra_args = [[], [\"-whitelist=127.0.0.1\"]]\n+        self.num_nodes = 3\n+        self.extra_args = [[], [\"-whitelist=127.0.0.1\"], [\"-minimumchainwork=0x10\"]]\n \n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for\n         # the whitelisted case.\n+        # Node2 will be used for non-whitelisted peers to test the interaction\n+        # with nMinimumChainWork.\n         self.setup_nodes()\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         test_node = NodeConnCB()   # connects to node0 (not whitelisted)\n         white_node = NodeConnCB()  # connects to node1 (whitelisted)\n+        min_work_node = NodeConnCB()  # connects to node2 (not whitelisted)\n \n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node))\n         connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], white_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], min_work_node))\n         test_node.add_connection(connections[0])\n         white_node.add_connection(connections[1])\n+        min_work_node.add_connection(connections[2])\n \n         NetworkThread().start() # Start up network handling in another thread\n \n         # Test logic begins here\n         test_node.wait_for_verack()\n         white_node.wait_for_verack()\n+        min_work_node.wait_for_verack()\n \n-        # 1. Have both nodes mine a block (leave IBD)\n+        # 1. Have nodes mine a block (nodes1/2 leave IBD)\n         [ n.generate(1) for n in self.nodes ]\n         tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n \n         # 2. Send one block that builds on each tip.\n-        # This should be accepted.\n+        # This should be accepted by nodes 1/2\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n         block_time = int(time.time()) + 1\n-        for i in range(2):\n+        for i in range(3):\n             blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()\n             block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n         white_node.send_message(msg_block(blocks_h2[1]))\n+        min_work_node.send_message(msg_block(blocks_h2[2]))\n \n-        for x in [test_node, white_node]:\n+        for x in [test_node, white_node, min_work_node]:\n             x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n-        self.log.info(\"First height 2 block accepted by both nodes\")\n+        assert_equal(self.nodes[2].getblockcount(), 1)\n+        self.log.info(\"First height 2 block accepted by node0/node1; correctly rejected by node2\")\n \n         # 3. Send another block that builds on the original tip.\n         blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n@@ -220,6 +237,11 @@ def run_test(self):\n         assert_equal(self.nodes[0].getblockcount(), 290)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n+        # 8. Connect node2 to node0 and ensure it is able to sync\n+        connect_nodes(self.nodes[0], 2)\n+        sync_blocks([self.nodes[0], self.nodes[2]])\n+        self.log.info(\"Successfully synced nodes 2 and 0\")\n+\n         [ c.disconnect_node() for c in connections ]\n \n if __name__ == '__main__':"
      }
    ]
  },
  {
    "sha": "ffb6ea4e5ebfe109e9771aab058bdd4d2f6468a8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmI2ZWE0ZTVlYmZlMTA5ZTk3NzFhYWIwNThiZGQ0ZDJmNjQ2OGE4",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-20T00:52:30Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:09:16Z"
      },
      "message": "Add comment explaining forced processing of compact blocks\n\nGithub-Pull: #11458\nRebased-From: 01b52cedd42f50a93b40981c91af7c12de6e45ce",
      "tree": {
        "sha": "ba355b722427dd221a126d79850ea318b8d96d42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba355b722427dd221a126d79850ea318b8d96d42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffb6ea4e5ebfe109e9771aab058bdd4d2f6468a8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffb6ea4e5ebfe109e9771aab058bdd4d2f6468a8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffb6ea4e5ebfe109e9771aab058bdd4d2f6468a8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffb6ea4e5ebfe109e9771aab058bdd4d2f6468a8/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2df65eeb98100a376678cdf9cad4c973733df894",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2df65eeb98100a376678cdf9cad4c973733df894",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2df65eeb98100a376678cdf9cad4c973733df894"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 15,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5b97509d642c85b5856152bb34032009fd93c1bb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffb6ea4e5ebfe109e9771aab058bdd4d2f6468a8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffb6ea4e5ebfe109e9771aab058bdd4d2f6468a8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ffb6ea4e5ebfe109e9771aab058bdd4d2f6468a8",
        "patch": "@@ -2144,7 +2144,16 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 mapBlockSource.emplace(pblock->GetHash(), std::make_pair(pfrom->GetId(), false));\n             }\n             bool fNewBlock = false;\n-            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            // Setting fForceProcessing to true means that we bypass some of\n+            // our anti-DoS protections in AcceptBlock, which filters\n+            // unrequested blocks that might be trying to waste our resources\n+            // (eg disk space). Because we only try to reconstruct blocks when\n+            // we're close to caught up (via the CanDirectFetch() requirement\n+            // above, combined with the behavior of not requesting blocks until\n+            // we have a chain with at least nMinimumChainWork), and we ignore\n+            // compact blocks with less work than our tip, it is safe to treat\n+            // reconstructed compact blocks as having been requested.\n+            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n@@ -2224,7 +2233,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             bool fNewBlock = false;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n-            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            // This bypasses some anti-DoS logic in AcceptBlock (eg to prevent\n+            // disk-space attacks), but this should be safe due to the\n+            // protections in the compact block handler -- see related comment\n+            // in compact block optimistic reconstruction handling.\n+            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {"
      }
    ]
  },
  {
    "sha": "6f279652b04eea5d11a3fdf6eac5865f0b8557c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjI3OTY1MmIwNGVlYTVkMTFhM2ZkZjZlYWM1ODY1ZjBiODU1N2M1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-11-01T20:48:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:11:54Z"
      },
      "message": "Rename fAddnode to a more-descriptive \"manual_connection\"\n\nGithub-Pull: #11456\nRebased-From: 57edc0b0c86549020a39cd65f96496e9771c4769",
      "tree": {
        "sha": "7f548e749ab3d03515fac7f65632498bc50a9380",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f548e749ab3d03515fac7f65632498bc50a9380"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f279652b04eea5d11a3fdf6eac5865f0b8557c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f279652b04eea5d11a3fdf6eac5865f0b8557c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f279652b04eea5d11a3fdf6eac5865f0b8557c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f279652b04eea5d11a3fdf6eac5865f0b8557c5/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffb6ea4e5ebfe109e9771aab058bdd4d2f6468a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffb6ea4e5ebfe109e9771aab058bdd4d2f6468a8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffb6ea4e5ebfe109e9771aab058bdd4d2f6468a8"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "864bd31cba236ffb71bf95a4a270d00ac8ef96fa",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f279652b04eea5d11a3fdf6eac5865f0b8557c5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f279652b04eea5d11a3fdf6eac5865f0b8557c5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=6f279652b04eea5d11a3fdf6eac5865f0b8557c5",
        "patch": "@@ -665,7 +665,7 @@ void CNode::copyStats(CNodeStats &stats)\n         X(cleanSubVer);\n     }\n     X(fInbound);\n-    X(fAddnode);\n+    X(m_manual_connection);\n     X(nStartingHeight);\n     {\n         LOCK(cs_vSend);\n@@ -1738,7 +1738,7 @@ void CConnman::ThreadOpenConnections()\n         {\n             LOCK(cs_vNodes);\n             for (CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->fAddnode) {\n+                if (!pnode->fInbound && !pnode->m_manual_connection) {\n \n                     // Count the peers that have all relevant services\n                     if (pnode->fSuccessfullyConnected && !pnode->fFeeler && ((pnode->nServices & nRelevantServices) == nRelevantServices)) {\n@@ -1934,7 +1934,7 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)\n+bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection)\n {\n     //\n     // Initiate outbound network connection\n@@ -1963,8 +1963,8 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         pnode->fOneShot = true;\n     if (fFeeler)\n         pnode->fFeeler = true;\n-    if (fAddnode)\n-        pnode->fAddnode = true;\n+    if (manual_connection)\n+        pnode->m_manual_connection = true;\n \n     GetNodeSignals().InitializeNode(pnode, *this);\n     {\n@@ -2704,7 +2704,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     strSubVer = \"\";\n     fWhitelisted = false;\n     fOneShot = false;\n-    fAddnode = false;\n+    m_manual_connection = false;\n     fClient = false; // set by version message\n     fFeeler = false;\n     fSuccessfullyConnected = false;"
      },
      {
        "sha": "fa9404ffbcf92b42185c0467e6c0ec434025c516",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f279652b04eea5d11a3fdf6eac5865f0b8557c5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f279652b04eea5d11a3fdf6eac5865f0b8557c5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=6f279652b04eea5d11a3fdf6eac5865f0b8557c5",
        "patch": "@@ -170,7 +170,7 @@ class CConnman\n     void Interrupt();\n     bool GetNetworkActive() const { return fNetworkActive; };\n     void SetNetworkActive(bool active);\n-    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool fAddnode = false);\n+    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n@@ -508,7 +508,7 @@ class CNodeStats\n     int nVersion;\n     std::string cleanSubVer;\n     bool fInbound;\n-    bool fAddnode;\n+    bool m_manual_connection;\n     int nStartingHeight;\n     uint64_t nSendBytes;\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n@@ -618,7 +618,7 @@ class CNode\n     bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;\n-    bool fAddnode;\n+    bool m_manual_connection;\n     bool fClient;\n     const bool fInbound;\n     std::atomic_bool fSuccessfullyConnected;"
      },
      {
        "sha": "6e6b62484c5dc2e018afa3776b6ad63f2f8c23e7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f279652b04eea5d11a3fdf6eac5865f0b8557c5/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f279652b04eea5d11a3fdf6eac5865f0b8557c5/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6f279652b04eea5d11a3fdf6eac5865f0b8557c5",
        "patch": "@@ -2656,7 +2656,7 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman& connman)\n         state.fShouldBan = false;\n         if (pnode->fWhitelisted)\n             LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode->addr.ToString());\n-        else if (pnode->fAddnode)\n+        else if (pnode->m_manual_connection)\n             LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pnode->addr.ToString());\n         else {\n             pnode->fDisconnect = true;"
      },
      {
        "sha": "2916bdc02ff4e4e835505b8500aa8a4d2adaee3d",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f279652b04eea5d11a3fdf6eac5865f0b8557c5/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f279652b04eea5d11a3fdf6eac5865f0b8557c5/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=6f279652b04eea5d11a3fdf6eac5865f0b8557c5",
        "patch": "@@ -156,7 +156,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n         // their ver message.\n         obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n         obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.fAddnode));\n+        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n         obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n         if (fStateStats) {\n             obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));"
      }
    ]
  },
  {
    "sha": "8aee55af3d21fb79edf148e42c3bd10bf80f7ec8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWVlNTVhZjNkMjFmYjc5ZWRmMTQ4ZTQyYzNiZDEwYmY4MGY3ZWM4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-06T17:53:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:15:02Z"
      },
      "message": "net: pass CConnman via pointer rather than reference\n\nThere are a few too many edge-cases here to make this a scripted diff.\n\nThe following commits will move a few functions into PeerLogicValidation, where\nthe local connman instance can be used. This change prepares for that usage.\n\nGithub-Pull: #10756\nRebased-From: 28f11e9406b185dc87144f1f29af0d93eb115b4e",
      "tree": {
        "sha": "9ecea5ae74040a03ea9746380830c14bdb64f8b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ecea5ae74040a03ea9746380830c14bdb64f8b6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f279652b04eea5d11a3fdf6eac5865f0b8557c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f279652b04eea5d11a3fdf6eac5865f0b8557c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f279652b04eea5d11a3fdf6eac5865f0b8557c5"
      }
    ],
    "stats": {
      "total": 208,
      "additions": 104,
      "deletions": 104
    },
    "files": [
      {
        "sha": "5bb1a82598bf733576d8f73271833dcdb7719580",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=8aee55af3d21fb79edf148e42c3bd10bf80f7ec8",
        "patch": "@@ -1114,7 +1114,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n-    GetNodeSignals().InitializeNode(pnode, *this);\n+    GetNodeSignals().InitializeNode(pnode, this);\n \n     LogPrint(BCLog::NET, \"connection from %s accepted\\n\", addr.ToString());\n \n@@ -1966,7 +1966,7 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     if (manual_connection)\n         pnode->m_manual_connection = true;\n \n-    GetNodeSignals().InitializeNode(pnode, *this);\n+    GetNodeSignals().InitializeNode(pnode, this);\n     {\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n@@ -1996,15 +1996,15 @@ void CConnman::ThreadMessageHandler()\n                 continue;\n \n             // Receive messages\n-            bool fMoreNodeWork = GetNodeSignals().ProcessMessages(pnode, *this, flagInterruptMsgProc);\n+            bool fMoreNodeWork = GetNodeSignals().ProcessMessages(pnode, this, flagInterruptMsgProc);\n             fMoreWork |= (fMoreNodeWork && !pnode->fPauseSend);\n             if (flagInterruptMsgProc)\n                 return;\n \n             // Send messages\n             {\n                 LOCK(pnode->cs_sendProcessing);\n-                GetNodeSignals().SendMessages(pnode, *this, flagInterruptMsgProc);\n+                GetNodeSignals().SendMessages(pnode, this, flagInterruptMsgProc);\n             }\n             if (flagInterruptMsgProc)\n                 return;"
      },
      {
        "sha": "9e1898d14d803a1ac53c066bd3fe6436399650f3",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8aee55af3d21fb79edf148e42c3bd10bf80f7ec8",
        "patch": "@@ -439,9 +439,9 @@ struct CombinerAll\n // Signals for message handling\n struct CNodeSignals\n {\n-    boost::signals2::signal<bool (CNode*, CConnman&, std::atomic<bool>&), CombinerAll> ProcessMessages;\n-    boost::signals2::signal<bool (CNode*, CConnman&, std::atomic<bool>&), CombinerAll> SendMessages;\n-    boost::signals2::signal<void (CNode*, CConnman&)> InitializeNode;\n+    boost::signals2::signal<bool (CNode*, CConnman*, std::atomic<bool>&), CombinerAll> ProcessMessages;\n+    boost::signals2::signal<bool (CNode*, CConnman*, std::atomic<bool>&), CombinerAll> SendMessages;\n+    boost::signals2::signal<void (CNode*, CConnman*)> InitializeNode;\n     boost::signals2::signal<void (NodeId, bool&)> FinalizeNode;\n };\n "
      },
      {
        "sha": "e3d2a51e7ec6e513581b87dd2e93e97ea30d9d01",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 84,
        "deletions": 84,
        "changes": 168,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=8aee55af3d21fb79edf148e42c3bd10bf80f7ec8",
        "patch": "@@ -244,7 +244,7 @@ void UpdatePreferredDownload(CNode* node, CNodeState* state)\n     nPreferredDownload += state->fPreferredDownload;\n }\n \n-void PushNodeVersion(CNode *pnode, CConnman& connman, int64_t nTime)\n+void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n {\n     ServiceFlags nLocalNodeServices = pnode->GetLocalServices();\n     uint64_t nonce = pnode->GetLocalNonce();\n@@ -255,7 +255,7 @@ void PushNodeVersion(CNode *pnode, CConnman& connman, int64_t nTime)\n     CAddress addrYou = (addr.IsRoutable() && !IsProxy(addr) ? addr : CAddress(CService(), addr.nServices));\n     CAddress addrMe = CAddress(CService(), nLocalNodeServices);\n \n-    connman.PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (uint64_t)nLocalNodeServices, nTime, addrYou, addrMe,\n+    connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (uint64_t)nLocalNodeServices, nTime, addrYou, addrMe,\n             nonce, strSubVersion, nNodeStartingHeight, ::fRelayTxes));\n \n     if (fLogIPs) {\n@@ -265,7 +265,7 @@ void PushNodeVersion(CNode *pnode, CConnman& connman, int64_t nTime)\n     }\n }\n \n-void InitializeNode(CNode *pnode, CConnman& connman) {\n+void InitializeNode(CNode *pnode, CConnman* connman) {\n     CAddress addr = pnode->addr;\n     std::string addrName = pnode->GetAddrName();\n     NodeId nodeid = pnode->GetId();\n@@ -402,7 +402,7 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n     }\n }\n \n-void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman& connman) {\n+void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n     AssertLockHeld(cs_main);\n     CNodeState* nodestate = State(nodeid);\n     if (!nodestate || !nodestate->fSupportsDesiredCmpctVersion) {\n@@ -417,20 +417,20 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman& connman) {\n                 return;\n             }\n         }\n-        connman.ForNode(nodeid, [&connman](CNode* pfrom){\n+        connman->ForNode(nodeid, [connman](CNode* pfrom){\n             bool fAnnounceUsingCMPCTBLOCK = false;\n             uint64_t nCMPCTBLOCKVersion = (pfrom->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\n             if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\n                 // As per BIP152, we only get 3 of our peers to announce\n                 // blocks using compact encodings.\n-                connman.ForNode(lNodesAnnouncingHeaderAndIDs.front(), [&connman, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion](CNode* pnodeStop){\n-                    connman.PushMessage(pnodeStop, CNetMsgMaker(pnodeStop->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+                connman->ForNode(lNodesAnnouncingHeaderAndIDs.front(), [connman, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion](CNode* pnodeStop){\n+                    connman->PushMessage(pnodeStop, CNetMsgMaker(pnodeStop->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n                     return true;\n                 });\n                 lNodesAnnouncingHeaderAndIDs.pop_front();\n             }\n             fAnnounceUsingCMPCTBLOCK = true;\n-            connman.PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+            connman->PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n             lNodesAnnouncingHeaderAndIDs.push_back(pfrom->GetId());\n             return true;\n         });\n@@ -865,7 +865,7 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationSta\n              !IsInitialBlockDownload() &&\n              mapBlocksInFlight.count(hash) == mapBlocksInFlight.size()) {\n         if (it != mapBlockSource.end()) {\n-            MaybeSetPeerAsAnnouncingHeaderAndIDs(it->second.first, *connman);\n+            MaybeSetPeerAsAnnouncingHeaderAndIDs(it->second.first, connman);\n         }\n     }\n     if (it != mapBlockSource.end())\n@@ -910,24 +910,24 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     return true;\n }\n \n-static void RelayTransaction(const CTransaction& tx, CConnman& connman)\n+static void RelayTransaction(const CTransaction& tx, CConnman* connman)\n {\n     CInv inv(MSG_TX, tx.GetHash());\n-    connman.ForEachNode([&inv](CNode* pnode)\n+    connman->ForEachNode([&inv](CNode* pnode)\n     {\n         pnode->PushInventory(inv);\n     });\n }\n \n-static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connman)\n+static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connman)\n {\n     unsigned int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)\n \n     // Relay to a limited number of other nodes\n     // Use deterministic randomness to send to the same nodes for 24 hours\n     // at a time so the addrKnowns of the chosen nodes prevent repeats\n     uint64_t hashAddr = addr.GetHash();\n-    const CSipHasher hasher = connman.GetDeterministicRandomizer(RANDOMIZER_ID_ADDRESS_RELAY).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24*60*60));\n+    const CSipHasher hasher = connman->GetDeterministicRandomizer(RANDOMIZER_ID_ADDRESS_RELAY).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24*60*60));\n     FastRandomContext insecure_rand;\n \n     std::array<std::pair<uint64_t, CNode*>,2> best{{{0, nullptr}, {0, nullptr}}};\n@@ -952,10 +952,10 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n         }\n     };\n \n-    connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n+    connman->ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n+void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n@@ -1017,7 +1017,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 // disconnect node in case we have reached the outbound limit for serving historical blocks\n                 // never disconnect whitelisted nodes\n                 static const int nOneWeek = 7 * 24 * 60 * 60; // assume > 1 week = historical\n-                if (send && connman.OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n+                if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n                 {\n                     LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n \n@@ -1040,9 +1040,9 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         pblock = pblockRead;\n                     }\n                     if (inv.type == MSG_BLOCK)\n-                        connman.PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n+                        connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n                     else if (inv.type == MSG_WITNESS_BLOCK)\n-                        connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n+                        connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n                     else if (inv.type == MSG_FILTERED_BLOCK)\n                     {\n                         bool sendMerkleBlock = false;\n@@ -1055,7 +1055,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             }\n                         }\n                         if (sendMerkleBlock) {\n-                            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n+                            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n                             // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n                             // This avoids hurting performance by pointlessly requiring a round-trip\n                             // Note that there is currently no way for a node to request any single transactions we didn't send here -\n@@ -1064,7 +1064,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             // however we MUST always provide at least what the remote peer needs\n                             typedef std::pair<unsigned int, uint256> PairType;\n                             for (PairType& pair : merkleBlock.vMatchedTxn)\n-                                connman.PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n+                                connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n                         }\n                         // else\n                             // no response\n@@ -1079,13 +1079,13 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n                         if (CanDirectFetch(consensusParams) && mi->second->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n                             if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == mi->second->GetBlockHash()) {\n-                                connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n+                                connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n                             } else {\n                                 CBlockHeaderAndShortTxIDs cmpctblock(*pblock, fPeerWantsWitness);\n-                                connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                                connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n                             }\n                         } else {\n-                            connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, *pblock));\n+                            connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, *pblock));\n                         }\n                     }\n \n@@ -1097,7 +1097,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // wait for other stuff first.\n                         std::vector<CInv> vInv;\n                         vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n-                        connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n+                        connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n                         pfrom->hashContinue.SetNull();\n                     }\n                 }\n@@ -1109,14 +1109,14 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 auto mi = mapRelay.find(inv.hash);\n                 int nSendFlags = (inv.type == MSG_TX ? SERIALIZE_TRANSACTION_NO_WITNESS : 0);\n                 if (mi != mapRelay.end()) {\n-                    connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                     push = true;\n                 } else if (pfrom->timeLastMempoolReq) {\n                     auto txinfo = mempool.info(inv.hash);\n                     // To protect privacy, do not answer getdata using the mempool when\n                     // that TX couldn't have been INVed in reply to a MEMPOOL request.\n                     if (txinfo.tx && txinfo.nTime <= pfrom->timeLastMempoolReq) {\n-                        connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *txinfo.tx));\n+                        connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *txinfo.tx));\n                         push = true;\n                     }\n                 }\n@@ -1143,7 +1143,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n         // do that because they want to know about (and store and rebroadcast and\n         // risk analyze) the dependencies of transactions relevant to them, without\n         // having to download the entire memory pool.\n-        connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::NOTFOUND, vNotFound));\n+        connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::NOTFOUND, vNotFound));\n     }\n }\n \n@@ -1155,7 +1155,7 @@ uint32_t GetFetchFlags(CNode* pfrom) {\n     return nFetchFlags;\n }\n \n-inline void static SendBlockTransactions(const CBlock& block, const BlockTransactionsRequest& req, CNode* pfrom, CConnman& connman) {\n+inline void static SendBlockTransactions(const CBlock& block, const BlockTransactionsRequest& req, CNode* pfrom, CConnman* connman) {\n     BlockTransactions resp(req);\n     for (size_t i = 0; i < req.indexes.size(); i++) {\n         if (req.indexes[i] >= block.vtx.size()) {\n@@ -1169,10 +1169,10 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     LOCK(cs_main);\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     int nSendFlags = State(pfrom->GetId())->fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n-    connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n+    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n+bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -1225,7 +1225,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n-            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, std::string(\"Duplicate version message\")));\n+            connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, std::string(\"Duplicate version message\")));\n             LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 1);\n             return false;\n@@ -1249,12 +1249,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         nServices = ServiceFlags(nServiceInt);\n         if (!pfrom->fInbound)\n         {\n-            connman.SetServices(pfrom->addr, nServices);\n+            connman->SetServices(pfrom->addr, nServices);\n         }\n         if (pfrom->nServicesExpected & ~nServices)\n         {\n             LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->GetId(), nServices, pfrom->nServicesExpected);\n-            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n+            connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n                                strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected)));\n             pfrom->fDisconnect = true;\n             return false;\n@@ -1275,7 +1275,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         {\n             // disconnect from peers older than this proto version\n             LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->GetId(), nVersion);\n-            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n+            connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n                                strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION)));\n             pfrom->fDisconnect = true;\n             return false;\n@@ -1295,7 +1295,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (!vRecv.empty())\n             vRecv >> fRelay;\n         // Disconnect if we connected to ourself\n-        if (pfrom->fInbound && !connman.CheckIncomingNonce(nNonce))\n+        if (pfrom->fInbound && !connman->CheckIncomingNonce(nNonce))\n         {\n             LogPrintf(\"connected to self at %s, disconnecting\\n\", pfrom->addr.ToString());\n             pfrom->fDisconnect = true;\n@@ -1311,7 +1311,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (pfrom->fInbound)\n             PushNodeVersion(pfrom, connman, GetAdjustedTime());\n \n-        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+        connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n \n         pfrom->nServices = nServices;\n         pfrom->SetAddrLocal(addrMe);\n@@ -1362,12 +1362,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             }\n \n             // Get recent addresses\n-            if (pfrom->fOneShot || pfrom->nVersion >= CADDR_TIME_VERSION || connman.GetAddressCount() < 1000)\n+            if (pfrom->fOneShot || pfrom->nVersion >= CADDR_TIME_VERSION || connman->GetAddressCount() < 1000)\n             {\n-                connman.PushMessage(pfrom, CNetMsgMaker(nSendVersion).Make(NetMsgType::GETADDR));\n+                connman->PushMessage(pfrom, CNetMsgMaker(nSendVersion).Make(NetMsgType::GETADDR));\n                 pfrom->fGetAddr = true;\n             }\n-            connman.MarkAddressGood(pfrom->addr);\n+            connman->MarkAddressGood(pfrom->addr);\n         }\n \n         std::string remoteAddr;\n@@ -1386,7 +1386,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // If the peer is old enough to have the old alert system, send it the final alert.\n         if (pfrom->nVersion <= 70012) {\n             CDataStream finalAlert(ParseHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\"), SER_NETWORK, PROTOCOL_VERSION);\n-            connman.PushMessage(pfrom, CNetMsgMaker(nSendVersion).Make(\"alert\", finalAlert));\n+            connman->PushMessage(pfrom, CNetMsgMaker(nSendVersion).Make(\"alert\", finalAlert));\n         }\n \n         // Feeler connections exist only to verify if address is online.\n@@ -1424,7 +1424,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // We send this to non-NODE NETWORK peers as well, because even\n             // non-NODE NETWORK peers can announce blocks (such as pruning\n             // nodes)\n-            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDHEADERS));\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDHEADERS));\n         }\n         if (pfrom->nVersion >= SHORT_IDS_BLOCKS_VERSION) {\n             // Tell our peer we are willing to provide version 1 or 2 cmpctblocks\n@@ -1435,9 +1435,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             bool fAnnounceUsingCMPCTBLOCK = false;\n             uint64_t nCMPCTBLOCKVersion = 2;\n             if (pfrom->GetLocalServices() & NODE_WITNESS)\n-                connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n             nCMPCTBLOCKVersion = 1;\n-            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n         }\n         pfrom->fSuccessfullyConnected = true;\n     }\n@@ -1456,7 +1456,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         vRecv >> vAddr;\n \n         // Don't want addr from older versions unless seeding\n-        if (pfrom->nVersion < CADDR_TIME_VERSION && connman.GetAddressCount() > 1000)\n+        if (pfrom->nVersion < CADDR_TIME_VERSION && connman->GetAddressCount() > 1000)\n             return true;\n         if (vAddr.size() > 1000)\n         {\n@@ -1490,7 +1490,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             if (fReachable)\n                 vAddrOk.push_back(addr);\n         }\n-        connman.AddNewAddresses(vAddrOk, pfrom->addr, 2 * 60 * 60);\n+        connman->AddNewAddresses(vAddrOk, pfrom->addr, 2 * 60 * 60);\n         if (vAddr.size() < 1000)\n             pfrom->fGetAddr = false;\n         if (pfrom->fOneShot)\n@@ -1568,7 +1568,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     // fell back to inv we probably have a reorg which we should get the headers for first,\n                     // we now only provide a getheaders response here. When we receive the headers, we will\n                     // then ask for the blocks we need.\n-                    connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), inv.hash));\n+                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), inv.hash));\n                     LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->GetId());\n                 }\n             }\n@@ -1774,7 +1774,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // will re-announce the new block via headers (or compact blocks again)\n         // in the SendMessages logic.\n         nodestate->pindexBestHeaderSent = pindex ? pindex : chainActive.Tip();\n-        connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n+        connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n     }\n \n \n@@ -1955,7 +1955,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 pfrom->GetId(),\n                 FormatStateMessage(state));\n             if (state.GetRejectCode() > 0 && state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n-                connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash));\n             if (nDoS > 0) {\n                 Misbehaving(pfrom->GetId(), nDoS);\n@@ -1975,7 +1975,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (mapBlockIndex.find(cmpctblock.header.hashPrevBlock) == mapBlockIndex.end()) {\n             // Doesn't connect (or is genesis), instead of DoSing in AcceptBlockHeader, request deeper headers\n             if (!IsInitialBlockDownload())\n-                connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n             return true;\n         }\n         }\n@@ -2030,7 +2030,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // so we just grab the block via normal getdata\n                 std::vector<CInv> vInv(1);\n                 vInv[0] = CInv(MSG_BLOCK | GetFetchFlags(pfrom), cmpctblock.header.GetHash());\n-                connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vInv));\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vInv));\n             }\n             return true;\n         }\n@@ -2074,7 +2074,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     // Duplicate txindexes, the block is now in-flight, so just request it\n                     std::vector<CInv> vInv(1);\n                     vInv[0] = CInv(MSG_BLOCK | GetFetchFlags(pfrom), cmpctblock.header.GetHash());\n-                    connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vInv));\n+                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vInv));\n                     return true;\n                 }\n \n@@ -2091,7 +2091,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     fProcessBLOCKTXN = true;\n                 } else {\n                     req.blockhash = pindex->GetBlockHash();\n-                    connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETBLOCKTXN, req));\n+                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETBLOCKTXN, req));\n                 }\n             } else {\n                 // This block is either already in flight from a different\n@@ -2117,7 +2117,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // mempool will probably be useless - request the block normally\n                 std::vector<CInv> vInv(1);\n                 vInv[0] = CInv(MSG_BLOCK | GetFetchFlags(pfrom), cmpctblock.header.GetHash());\n-                connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vInv));\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vInv));\n                 return true;\n             } else {\n                 // If this was an announce-cmpctblock, we want the same treatment as a header message\n@@ -2200,7 +2200,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // Might have collided, fall back to getdata now :(\n                 std::vector<CInv> invs;\n                 invs.push_back(CInv(MSG_BLOCK | GetFetchFlags(pfrom), resp.blockhash));\n-                connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, invs));\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, invs));\n             } else {\n                 // Block is either okay, or possibly we received\n                 // READ_STATUS_CHECKBLOCK_FAILED.\n@@ -2285,7 +2285,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         //   nUnconnectingHeaders gets reset back to 0.\n         if (mapBlockIndex.find(headers[0].hashPrevBlock) == mapBlockIndex.end() && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n             nodestate->nUnconnectingHeaders++;\n-            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n             LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n                     headers[0].GetHash().ToString(),\n                     headers[0].hashPrevBlock.ToString(),\n@@ -2340,7 +2340,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n             // from there instead.\n             LogPrint(BCLog::NET, \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->GetId(), pfrom->nStartingHeight);\n-            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256()));\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256()));\n         }\n \n         bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n@@ -2390,7 +2390,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                         // In any case, we want to download using a compact block, not a regular one\n                         vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n                     }\n-                    connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n+                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n                 }\n             }\n         }\n@@ -2451,7 +2451,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         pfrom->fSentAddr = true;\n \n         pfrom->vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman.GetAddresses();\n+        std::vector<CAddress> vAddr = connman->GetAddresses();\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr)\n             pfrom->PushAddress(addr, insecure_rand);\n@@ -2467,7 +2467,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             return true;\n         }\n \n-        if (connman.OutboundTargetReached(false) && !pfrom->fWhitelisted)\n+        if (connman->OutboundTargetReached(false) && !pfrom->fWhitelisted)\n         {\n             LogPrint(BCLog::NET, \"mempool request with bandwidth limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n             pfrom->fDisconnect = true;\n@@ -2496,7 +2496,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // it, if the remote node sends a ping once per second and this node takes 5\n             // seconds to respond to each, the 5th ping the remote sends would appear to\n             // return very quickly.\n-            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::PONG, nonce));\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::PONG, nonce));\n         }\n     }\n \n@@ -2642,13 +2642,13 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n-static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman& connman)\n+static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n {\n     AssertLockHeld(cs_main);\n     CNodeState &state = *State(pnode->GetId());\n \n     for (const CBlockReject& reject : state.rejects) {\n-        connman.PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+        connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n     }\n     state.rejects.clear();\n \n@@ -2664,15 +2664,15 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman& connman)\n                 LogPrintf(\"Warning: not banning local peer %s!\\n\", pnode->addr.ToString());\n             else\n             {\n-                connman.Ban(pnode->addr, BanReasonNodeMisbehaving);\n+                connman->Ban(pnode->addr, BanReasonNodeMisbehaving);\n             }\n         }\n         return true;\n     }\n     return false;\n }\n \n-bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n+bool ProcessMessages(CNode* pfrom, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n     //\n@@ -2706,7 +2706,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n         // Just take one message\n         msgs.splice(msgs.begin(), pfrom->vProcessMsg, pfrom->vProcessMsg.begin());\n         pfrom->nProcessQueueSize -= msgs.front().vRecv.size() + CMessageHeader::HEADER_SIZE;\n-        pfrom->fPauseRecv = pfrom->nProcessQueueSize > connman.GetReceiveFloodSize();\n+        pfrom->fPauseRecv = pfrom->nProcessQueueSize > connman->GetReceiveFloodSize();\n         fMoreWork = !pfrom->vProcessMsg.empty();\n     }\n     CNetMessage& msg(msgs.front());\n@@ -2755,7 +2755,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n     }\n     catch (const std::ios_base::failure& e)\n     {\n-        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n+        connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n         if (strstr(e.what(), \"end of data\"))\n         {\n             // Allow exceptions from under-length message on vRecv\n@@ -2809,7 +2809,7 @@ class CompareInvMempoolOrder\n     }\n };\n \n-bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n+bool SendMessages(CNode* pto, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {\n@@ -2841,11 +2841,11 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n             pto->nPingUsecStart = GetTimeMicros();\n             if (pto->nVersion > BIP0031_VERSION) {\n                 pto->nPingNonceSent = nonce;\n-                connman.PushMessage(pto, msgMaker.Make(NetMsgType::PING, nonce));\n+                connman->PushMessage(pto, msgMaker.Make(NetMsgType::PING, nonce));\n             } else {\n                 // Peer is too old to support ping command with nonce, pong will never arrive.\n                 pto->nPingNonceSent = 0;\n-                connman.PushMessage(pto, msgMaker.Make(NetMsgType::PING));\n+                connman->PushMessage(pto, msgMaker.Make(NetMsgType::PING));\n             }\n         }\n \n@@ -2880,14 +2880,14 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                     // receiver rejects addr messages larger than 1000\n                     if (vAddr.size() >= 1000)\n                     {\n-                        connman.PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n+                        connman->PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n                         vAddr.clear();\n                     }\n                 }\n             }\n             pto->vAddrToSend.clear();\n             if (!vAddr.empty())\n-                connman.PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n+                connman->PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n             // we only send the big addr message once\n             if (pto->vAddrToSend.capacity() > 40)\n                 pto->vAddrToSend.shrink_to_fit();\n@@ -2914,7 +2914,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 if (pindexStart->pprev)\n                     pindexStart = pindexStart->pprev;\n                 LogPrint(BCLog::NET, \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->GetId(), pto->nStartingHeight);\n-                connman.PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexStart), uint256()));\n+                connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexStart), uint256()));\n             }\n         }\n \n@@ -2923,7 +2923,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n         // transactions become unconfirmed and spams other nodes.\n         if (!fReindex && !fImporting && !IsInitialBlockDownload())\n         {\n-            GetMainSignals().Broadcast(nTimeBestReceived, &connman);\n+            GetMainSignals().Broadcast(nTimeBestReceived, connman);\n         }\n \n         //\n@@ -3007,10 +3007,10 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                         LOCK(cs_most_recent_block);\n                         if (most_recent_block_hash == pBestIndex->GetBlockHash()) {\n                             if (state.fWantsCmpctWitness || !fWitnessesPresentInMostRecentCompactBlock)\n-                                connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *most_recent_compact_block));\n+                                connman->PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *most_recent_compact_block));\n                             else {\n                                 CBlockHeaderAndShortTxIDs cmpctblock(*most_recent_block, state.fWantsCmpctWitness);\n-                                connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                                connman->PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n                             }\n                             fGotBlockFromCache = true;\n                         }\n@@ -3020,7 +3020,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                         bool ret = ReadBlockFromDisk(block, pBestIndex, consensusParams);\n                         assert(ret);\n                         CBlockHeaderAndShortTxIDs cmpctblock(block, state.fWantsCmpctWitness);\n-                        connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                        connman->PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n                     }\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else if (state.fPreferHeaders) {\n@@ -3033,7 +3033,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                         LogPrint(BCLog::NET, \"%s: sending header %s to peer=%d\\n\", __func__,\n                                 vHeaders.front().GetHash().ToString(), pto->GetId());\n                     }\n-                    connman.PushMessage(pto, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n+                    connman->PushMessage(pto, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else\n                     fRevertToInv = true;\n@@ -3079,7 +3079,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n             for (const uint256& hash : pto->vInventoryBlockToSend) {\n                 vInv.push_back(CInv(MSG_BLOCK, hash));\n                 if (vInv.size() == MAX_INV_SZ) {\n-                    connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n+                    connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n                     vInv.clear();\n                 }\n             }\n@@ -3125,7 +3125,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                     pto->filterInventoryKnown.insert(hash);\n                     vInv.push_back(inv);\n                     if (vInv.size() == MAX_INV_SZ) {\n-                        connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n+                        connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n                         vInv.clear();\n                     }\n                 }\n@@ -3191,15 +3191,15 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                         }\n                     }\n                     if (vInv.size() == MAX_INV_SZ) {\n-                        connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n+                        connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n                         vInv.clear();\n                     }\n                     pto->filterInventoryKnown.insert(hash);\n                 }\n             }\n         }\n         if (!vInv.empty())\n-            connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n+            connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n         nNow = GetTimeMicros();\n@@ -3294,7 +3294,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 vGetData.push_back(inv);\n                 if (vGetData.size() >= 1000)\n                 {\n-                    connman.PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n+                    connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n                     vGetData.clear();\n                 }\n             } else {\n@@ -3304,7 +3304,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n             pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }\n         if (!vGetData.empty())\n-            connman.PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n+            connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n \n         //\n         // Message: feefilter\n@@ -3321,7 +3321,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 // We always have a fee filter of at least minRelayTxFee\n                 filterToSend = std::max(filterToSend, ::minRelayTxFee.GetFeePerK());\n                 if (filterToSend != pto->lastSentFeeFilter) {\n-                    connman.PushMessage(pto, msgMaker.Make(NetMsgType::FEEFILTER, filterToSend));\n+                    connman->PushMessage(pto, msgMaker.Make(NetMsgType::FEEFILTER, filterToSend));\n                     pto->lastSentFeeFilter = filterToSend;\n                 }\n                 pto->nextSendTimeFeeFilter = PoissonNextSend(timeNow, AVG_FEEFILTER_BROADCAST_INTERVAL);"
      },
      {
        "sha": "84ec7a7662834a855d51db1240d5fbec82895729",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=8aee55af3d21fb79edf148e42c3bd10bf80f7ec8",
        "patch": "@@ -53,7 +53,7 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n void Misbehaving(NodeId nodeid, int howmuch);\n \n /** Process protocol messages received from a given node */\n-bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interrupt);\n+bool ProcessMessages(CNode* pfrom, CConnman* connman, const std::atomic<bool>& interrupt);\n /**\n  * Send queued protocol messages to be sent to a give node.\n  *\n@@ -62,6 +62,6 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n  * @param[in]   interrupt       Interrupt condition for processing threads\n  * @return                      True if there is more work to be done\n  */\n-bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interrupt);\n+bool SendMessages(CNode* pto, CConnman* connman, const std::atomic<bool>& interrupt);\n \n #endif // BITCOIN_NET_PROCESSING_H"
      },
      {
        "sha": "39a75f7c820cef98f889cfaaf2b7f0a239553b6f",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=8aee55af3d21fb79edf148e42c3bd10bf80f7ec8",
        "patch": "@@ -50,26 +50,26 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n+    GetNodeSignals().InitializeNode(&dummyNode1, connman);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n-    SendMessages(&dummyNode1, *connman, interruptDummy);\n+    SendMessages(&dummyNode1, connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n     CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", true);\n     dummyNode2.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode2, *connman);\n+    GetNodeSignals().InitializeNode(&dummyNode2, connman);\n     dummyNode2.nVersion = 1;\n     dummyNode2.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2, *connman, interruptDummy);\n+    SendMessages(&dummyNode2, connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(connman->IsBanned(addr1));  // ... but 1 still should be\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2, *connman, interruptDummy);\n+    SendMessages(&dummyNode2, connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr2));\n }\n \n@@ -82,17 +82,17 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, 1, CAddress(), \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n+    GetNodeSignals().InitializeNode(&dummyNode1, connman);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100);\n-    SendMessages(&dummyNode1, *connman, interruptDummy);\n+    SendMessages(&dummyNode1, connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 10);\n-    SendMessages(&dummyNode1, *connman, interruptDummy);\n+    SendMessages(&dummyNode1, connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 1);\n-    SendMessages(&dummyNode1, *connman, interruptDummy);\n+    SendMessages(&dummyNode1, connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n }\n@@ -108,12 +108,12 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, 4, CAddress(), \"\", true);\n     dummyNode.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode, *connman);\n+    GetNodeSignals().InitializeNode(&dummyNode, connman);\n     dummyNode.nVersion = 1;\n     dummyNode.fSuccessfullyConnected = true;\n \n     Misbehaving(dummyNode.GetId(), 100);\n-    SendMessages(&dummyNode, *connman, interruptDummy);\n+    SendMessages(&dummyNode, connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60);"
      }
    ]
  },
  {
    "sha": "dc897e53d8a6c29016a19c862ddd0b656ae8de3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzg5N2U1M2Q4YTZjMjkwMTZhMTljODYyZGRkMGI2NTZhZThkZTNm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-06T17:40:09Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:16:28Z"
      },
      "message": "net: use an interface class rather than signals for message processing\n\nDrop boost signals in favor of a stateful class. This will allow the message\nprocessing loop to actually move to net_processing in a future step.\n\nGithub-Pull: #10756\nRebased-From: 8ad663c1fa88d68843e45580deced56112343183",
      "tree": {
        "sha": "6ee77baaf72f7d5fa09cc05d717816736cd9a598",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ee77baaf72f7d5fa09cc05d717816736cd9a598"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc897e53d8a6c29016a19c862ddd0b656ae8de3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc897e53d8a6c29016a19c862ddd0b656ae8de3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc897e53d8a6c29016a19c862ddd0b656ae8de3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8aee55af3d21fb79edf148e42c3bd10bf80f7ec8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8aee55af3d21fb79edf148e42c3bd10bf80f7ec8"
      }
    ],
    "stats": {
      "total": 228,
      "additions": 103,
      "deletions": 125
    },
    "files": [
      {
        "sha": "62250664e360abd50467ff7e0b2cf0791302d0e1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=dc897e53d8a6c29016a19c862ddd0b656ae8de3f",
        "patch": "@@ -194,11 +194,10 @@ void Shutdown()\n #endif\n     MapPort(false);\n     UnregisterValidationInterface(peerLogic.get());\n-    peerLogic.reset();\n     g_connman.reset();\n+    peerLogic.reset();\n \n     StopTorControl();\n-    UnregisterNodeSignals(GetNodeSignals());\n     if (fDumpMempoolLater && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool();\n     }\n@@ -1277,7 +1276,6 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     peerLogic.reset(new PeerLogicValidation(&connman));\n     RegisterValidationInterface(peerLogic.get());\n-    RegisterNodeSignals(GetNodeSignals());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n@@ -1668,6 +1666,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nMaxFeeler = 1;\n     connOptions.nBestHeight = chainActive.Height();\n     connOptions.uiInterface = &uiInterface;\n+    connOptions.m_msgproc = peerLogic.get();\n     connOptions.nSendBufferMaxSize = 1000*gArgs.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n     connOptions.nReceiveFloodSize = 1000*gArgs.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n "
      },
      {
        "sha": "63ac833405bc81961440458a6ebb163a67089d88",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=dc897e53d8a6c29016a19c862ddd0b656ae8de3f",
        "patch": "@@ -89,10 +89,6 @@ std::string strSubVersion;\n \n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n-// Signals for message handling\n-static CNodeSignals g_signals;\n-CNodeSignals& GetNodeSignals() { return g_signals; }\n-\n void CConnman::AddOneShot(const std::string& strDest)\n {\n     LOCK(cs_vOneShots);\n@@ -1114,7 +1110,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n-    GetNodeSignals().InitializeNode(pnode, this);\n+    m_msgproc->InitializeNode(pnode, this);\n \n     LogPrint(BCLog::NET, \"connection from %s accepted\\n\", addr.ToString());\n \n@@ -1966,7 +1962,7 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     if (manual_connection)\n         pnode->m_manual_connection = true;\n \n-    GetNodeSignals().InitializeNode(pnode, this);\n+    m_msgproc->InitializeNode(pnode, this);\n     {\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n@@ -1996,16 +1992,16 @@ void CConnman::ThreadMessageHandler()\n                 continue;\n \n             // Receive messages\n-            bool fMoreNodeWork = GetNodeSignals().ProcessMessages(pnode, this, flagInterruptMsgProc);\n+            bool fMoreNodeWork = m_msgproc->ProcessMessages(pnode, this, flagInterruptMsgProc);\n             fMoreWork |= (fMoreNodeWork && !pnode->fPauseSend);\n             if (flagInterruptMsgProc)\n                 return;\n-\n             // Send messages\n             {\n                 LOCK(pnode->cs_sendProcessing);\n-                GetNodeSignals().SendMessages(pnode, this, flagInterruptMsgProc);\n+                m_msgproc->SendMessages(pnode, this, flagInterruptMsgProc);\n             }\n+\n             if (flagInterruptMsgProc)\n                 return;\n         }\n@@ -2324,6 +2320,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     //\n     // Start threads\n     //\n+    assert(m_msgproc);\n     InterruptSocks5(false);\n     interruptNet.reset();\n     flagInterruptMsgProc = false;\n@@ -2443,9 +2440,10 @@ void CConnman::DeleteNode(CNode* pnode)\n {\n     assert(pnode);\n     bool fUpdateConnectionTime = false;\n-    GetNodeSignals().FinalizeNode(pnode->GetId(), fUpdateConnectionTime);\n-    if(fUpdateConnectionTime)\n+    m_msgproc->FinalizeNode(pnode->GetId(), fUpdateConnectionTime);\n+    if(fUpdateConnectionTime) {\n         addrman.Connected(pnode->addr);\n+    }\n     delete pnode;\n }\n "
      },
      {
        "sha": "fcbf93672f06a58fc0f101adaab764cd0a83c991",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=dc897e53d8a6c29016a19c862ddd0b656ae8de3f",
        "patch": "@@ -33,7 +33,6 @@\n #include <arpa/inet.h>\n #endif\n \n-#include <boost/signals2/signal.hpp>\n \n class CScheduler;\n class CNode;\n@@ -116,7 +115,7 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n-\n+class NetEventsInterface;\n class CConnman\n {\n public:\n@@ -138,6 +137,7 @@ class CConnman\n         int nMaxFeeler = 0;\n         int nBestHeight = 0;\n         CClientUIInterface* uiInterface = nullptr;\n+        NetEventsInterface* m_msgproc = nullptr;\n         unsigned int nSendBufferMaxSize = 0;\n         unsigned int nReceiveFloodSize = 0;\n         uint64_t nMaxOutboundTimeframe = 0;\n@@ -156,6 +156,7 @@ class CConnman\n         nMaxFeeler = connOptions.nMaxFeeler;\n         nBestHeight = connOptions.nBestHeight;\n         clientInterface = connOptions.uiInterface;\n+        m_msgproc = connOptions.m_msgproc;\n         nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n         nReceiveFloodSize = connOptions.nReceiveFloodSize;\n         nMaxOutboundTimeframe = connOptions.nMaxOutboundTimeframe;\n@@ -396,6 +397,7 @@ class CConnman\n     int nMaxFeeler;\n     std::atomic<int> nBestHeight;\n     CClientUIInterface* clientInterface;\n+    NetEventsInterface* m_msgproc;\n \n     /** SipHasher seeds for deterministic randomness */\n     const uint64_t nSeed0, nSeed1;\n@@ -436,19 +438,18 @@ struct CombinerAll\n     }\n };\n \n-// Signals for message handling\n-struct CNodeSignals\n+/**\n+ * Interface for message handling\n+ */\n+class NetEventsInterface\n {\n-    boost::signals2::signal<bool (CNode*, CConnman*, std::atomic<bool>&), CombinerAll> ProcessMessages;\n-    boost::signals2::signal<bool (CNode*, CConnman*, std::atomic<bool>&), CombinerAll> SendMessages;\n-    boost::signals2::signal<void (CNode*, CConnman*)> InitializeNode;\n-    boost::signals2::signal<void (NodeId, bool&)> FinalizeNode;\n+public:\n+    virtual bool ProcessMessages(CNode* pnode, CConnman* connman, std::atomic<bool>& interrupt) = 0;\n+    virtual bool SendMessages(CNode* pnode, CConnman* connman, std::atomic<bool>& interrupt) = 0;\n+    virtual void InitializeNode(CNode* pnode, CConnman* connman) = 0;\n+    virtual void FinalizeNode(NodeId id, bool& update_connection_time) = 0;\n };\n \n-\n-CNodeSignals& GetNodeSignals();\n-\n-\n enum\n {\n     LOCAL_NONE,   // unknown"
      },
      {
        "sha": "22d7ee194bb39d9beee306bbf1adb1f375bd1c82",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 66,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=dc897e53d8a6c29016a19c862ddd0b656ae8de3f",
        "patch": "@@ -123,11 +123,6 @@ namespace {\n     std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration;\n } // namespace\n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// Registration of network node signals.\n-//\n-\n namespace {\n \n struct CBlockReject {\n@@ -265,49 +260,6 @@ void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n     }\n }\n \n-void InitializeNode(CNode *pnode, CConnman* connman) {\n-    CAddress addr = pnode->addr;\n-    std::string addrName = pnode->GetAddrName();\n-    NodeId nodeid = pnode->GetId();\n-    {\n-        LOCK(cs_main);\n-        mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName)));\n-    }\n-    if(!pnode->fInbound)\n-        PushNodeVersion(pnode, connman, GetTime());\n-}\n-\n-void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n-    fUpdateConnectionTime = false;\n-    LOCK(cs_main);\n-    CNodeState *state = State(nodeid);\n-\n-    if (state->fSyncStarted)\n-        nSyncStarted--;\n-\n-    if (state->nMisbehavior == 0 && state->fCurrentlyConnected) {\n-        fUpdateConnectionTime = true;\n-    }\n-\n-    for (const QueuedBlock& entry : state->vBlocksInFlight) {\n-        mapBlocksInFlight.erase(entry.hash);\n-    }\n-    EraseOrphansFor(nodeid);\n-    nPreferredDownload -= state->fPreferredDownload;\n-    nPeersWithValidatedDownloads -= (state->nBlocksInFlightValidHeaders != 0);\n-    assert(nPeersWithValidatedDownloads >= 0);\n-\n-    mapNodeState.erase(nodeid);\n-\n-    if (mapNodeState.empty()) {\n-        // Do a consistency check after the last peer is removed.\n-        assert(mapBlocksInFlight.empty());\n-        assert(nPreferredDownload == 0);\n-        assert(nPeersWithValidatedDownloads == 0);\n-    }\n-    LogPrint(BCLog::NET, \"Cleared nodestate for peer=%d\\n\", nodeid);\n-}\n-\n // Requires cs_main.\n // Returns a bool indicating whether we requested this block.\n // Also used if a block was /not/ received and timed out or started with another peer\n@@ -543,6 +495,50 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n \n } // namespace\n \n+void PeerLogicValidation::InitializeNode(CNode *pnode, CConnman* connman) {\n+    CAddress addr = pnode->addr;\n+    std::string addrName = pnode->GetAddrName();\n+    NodeId nodeid = pnode->GetId();\n+    {\n+        LOCK(cs_main);\n+        mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName)));\n+    }\n+    if(!pnode->fInbound)\n+        PushNodeVersion(pnode, connman, GetTime());\n+}\n+\n+void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n+    fUpdateConnectionTime = false;\n+    LOCK(cs_main);\n+    CNodeState *state = State(nodeid);\n+    assert(state != nullptr);\n+\n+    if (state->fSyncStarted)\n+        nSyncStarted--;\n+\n+    if (state->nMisbehavior == 0 && state->fCurrentlyConnected) {\n+        fUpdateConnectionTime = true;\n+    }\n+\n+    for (const QueuedBlock& entry : state->vBlocksInFlight) {\n+        mapBlocksInFlight.erase(entry.hash);\n+    }\n+    EraseOrphansFor(nodeid);\n+    nPreferredDownload -= state->fPreferredDownload;\n+    nPeersWithValidatedDownloads -= (state->nBlocksInFlightValidHeaders != 0);\n+    assert(nPeersWithValidatedDownloads >= 0);\n+\n+    mapNodeState.erase(nodeid);\n+\n+    if (mapNodeState.empty()) {\n+        // Do a consistency check after the last peer is removed.\n+        assert(mapBlocksInFlight.empty());\n+        assert(nPreferredDownload == 0);\n+        assert(nPeersWithValidatedDownloads == 0);\n+    }\n+    LogPrint(BCLog::NET, \"Cleared nodestate for peer=%d\\n\", nodeid);\n+}\n+\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     LOCK(cs_main);\n     CNodeState *state = State(nodeid);\n@@ -558,22 +554,6 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     return true;\n }\n \n-void RegisterNodeSignals(CNodeSignals& nodeSignals)\n-{\n-    nodeSignals.ProcessMessages.connect(&ProcessMessages);\n-    nodeSignals.SendMessages.connect(&SendMessages);\n-    nodeSignals.InitializeNode.connect(&InitializeNode);\n-    nodeSignals.FinalizeNode.connect(&FinalizeNode);\n-}\n-\n-void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n-{\n-    nodeSignals.ProcessMessages.disconnect(&ProcessMessages);\n-    nodeSignals.SendMessages.disconnect(&SendMessages);\n-    nodeSignals.InitializeNode.disconnect(&InitializeNode);\n-    nodeSignals.FinalizeNode.disconnect(&FinalizeNode);\n-}\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // mapOrphanTransactions\n@@ -2672,7 +2652,7 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n     return false;\n }\n \n-bool ProcessMessages(CNode* pfrom, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n+bool PeerLogicValidation::ProcessMessages(CNode* pfrom, CConnman* connman, std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n     //\n@@ -2809,7 +2789,7 @@ class CompareInvMempoolOrder\n     }\n };\n \n-bool SendMessages(CNode* pto, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n+bool PeerLogicValidation::SendMessages(CNode* pto, CConnman* connman, std::atomic<bool>& interruptMsgProc)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {"
      },
      {
        "sha": "d79b74fcb7f71ec057282f66538f66fc17a2bf12",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 17,
        "deletions": 19,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=dc897e53d8a6c29016a19c862ddd0b656ae8de3f",
        "patch": "@@ -22,22 +22,32 @@ static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; // 15 minutes\n static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; // 1ms/header\n \n-/** Register with a network node to receive its signals */\n-void RegisterNodeSignals(CNodeSignals& nodeSignals);\n-/** Unregister a network node */\n-void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n-\n-class PeerLogicValidation : public CValidationInterface {\n+class PeerLogicValidation : public CValidationInterface, public NetEventsInterface {\n private:\n     CConnman* connman;\n \n public:\n-    PeerLogicValidation(CConnman* connmanIn);\n+    explicit PeerLogicValidation(CConnman* connman);\n \n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n     void BlockChecked(const CBlock& block, const CValidationState& state) override;\n     void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n+\n+\n+    void InitializeNode(CNode* pnode, CConnman* connman) override;\n+    void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) override;\n+    /** Process protocol messages received from a given node */\n+    bool ProcessMessages(CNode* pfrom, CConnman* connman, std::atomic<bool>& interrupt) override;\n+    /**\n+    * Send queued protocol messages to be sent to a give node.\n+    *\n+    * @param[in]   pto             The node which we are sending messages to.\n+    * @param[in]   connman         The connection manager for that node.\n+    * @param[in]   interrupt       Interrupt condition for processing threads\n+    * @return                      True if there is more work to be done\n+    */\n+    bool SendMessages(CNode* pto, CConnman* connman, std::atomic<bool>& interrupt) override;\n };\n \n struct CNodeStateStats {\n@@ -52,16 +62,4 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n /** Increase a node's misbehavior score. */\n void Misbehaving(NodeId nodeid, int howmuch);\n \n-/** Process protocol messages received from a given node */\n-bool ProcessMessages(CNode* pfrom, CConnman* connman, const std::atomic<bool>& interrupt);\n-/**\n- * Send queued protocol messages to be sent to a give node.\n- *\n- * @param[in]   pto             The node which we are sending messages to.\n- * @param[in]   connman         The connection manager for that node.\n- * @param[in]   interrupt       Interrupt condition for processing threads\n- * @return                      True if there is more work to be done\n- */\n-bool SendMessages(CNode* pto, CConnman* connman, const std::atomic<bool>& interrupt);\n-\n #endif // BITCOIN_NET_PROCESSING_H"
      },
      {
        "sha": "fc5ef84ad2ac5f06709de1508b29fd5af7e9b894",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=dc897e53d8a6c29016a19c862ddd0b656ae8de3f",
        "patch": "@@ -50,26 +50,26 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode1, connman);\n+    peerLogic->InitializeNode(&dummyNode1, connman);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n-    SendMessages(&dummyNode1, connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode1, connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n     CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", true);\n     dummyNode2.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode2, connman);\n+    peerLogic->InitializeNode(&dummyNode2, connman);\n     dummyNode2.nVersion = 1;\n     dummyNode2.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2, connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode2, connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(connman->IsBanned(addr1));  // ... but 1 still should be\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2, connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode2, connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr2));\n }\n \n@@ -82,17 +82,17 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, 1, CAddress(), \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode1, connman);\n+    peerLogic->InitializeNode(&dummyNode1, connman);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100);\n-    SendMessages(&dummyNode1, connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode1, connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 10);\n-    SendMessages(&dummyNode1, connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode1, connman, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 1);\n-    SendMessages(&dummyNode1, connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode1, connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n }\n@@ -108,12 +108,12 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, 4, CAddress(), \"\", true);\n     dummyNode.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode, connman);\n+    peerLogic->InitializeNode(&dummyNode, connman);\n     dummyNode.nVersion = 1;\n     dummyNode.fSuccessfullyConnected = true;\n \n     Misbehaving(dummyNode.GetId(), 100);\n-    SendMessages(&dummyNode, connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode, connman, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60);"
      },
      {
        "sha": "045655983c66fdbafc0679b8a6fb0befc3a1bd19",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=dc897e53d8a6c29016a19c862ddd0b656ae8de3f",
        "patch": "@@ -48,7 +48,6 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n BasicTestingSetup::~BasicTestingSetup()\n {\n         ECC_Stop();\n-        g_connman.reset();\n }\n \n TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n@@ -86,16 +85,17 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n             threadGroup.create_thread(&ThreadScriptCheck);\n         g_connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337)); // Deterministic randomness for tests.\n         connman = g_connman.get();\n-        RegisterNodeSignals(GetNodeSignals());\n+        peerLogic.reset(new PeerLogicValidation(connman));\n }\n \n TestingSetup::~TestingSetup()\n {\n-        UnregisterNodeSignals(GetNodeSignals());\n         threadGroup.interrupt_all();\n         threadGroup.join_all();\n         GetMainSignals().FlushBackgroundCallbacks();\n         GetMainSignals().UnregisterBackgroundSignalScheduler();\n+        g_connman.reset();\n+        peerLogic.reset();\n         UnloadBlockIndex();\n         delete pcoinsTip;\n         delete pcoinsdbview;"
      },
      {
        "sha": "5a39f8ab821c11d37519309339f9067b4aabf564",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc897e53d8a6c29016a19c862ddd0b656ae8de3f/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=dc897e53d8a6c29016a19c862ddd0b656ae8de3f",
        "patch": "@@ -49,12 +49,14 @@ struct BasicTestingSetup {\n  * Included are data directory, coins database, script check threads setup.\n  */\n class CConnman;\n+class PeerLogicValidation;\n struct TestingSetup: public BasicTestingSetup {\n     CCoinsViewDB *pcoinsdbview;\n     fs::path pathTemp;\n     boost::thread_group threadGroup;\n     CConnman* connman;\n     CScheduler scheduler;\n+    std::unique_ptr<PeerLogicValidation> peerLogic;\n \n     TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~TestingSetup();"
      }
    ]
  },
  {
    "sha": "b4136f21cfbbeb043ce46ffa1bf5f353838bfbea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDEzNmYyMWNmYmJlYjA0M2NlNDZmZmExYmY1ZjM1MzgzOGJmYmVh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-07-06T18:08:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:16:50Z"
      },
      "message": "net: drop unused connman param\n\nThe copy in PeerLogicValidation can be used instead.\n\nGithub-Pull: #10756\nRebased-From: 80e2e9d0cec890c5d2f81360ebb81e81c07ccb8c",
      "tree": {
        "sha": "895075c49d165a9372ffaa7e85f417aa84145993",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/895075c49d165a9372ffaa7e85f417aa84145993"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dc897e53d8a6c29016a19c862ddd0b656ae8de3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc897e53d8a6c29016a19c862ddd0b656ae8de3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dc897e53d8a6c29016a19c862ddd0b656ae8de3f"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 24,
      "deletions": 25
    },
    "files": [
      {
        "sha": "a07b22bf5d819789fa68896b1230d633b2f879d3",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b4136f21cfbbeb043ce46ffa1bf5f353838bfbea",
        "patch": "@@ -1110,7 +1110,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n-    m_msgproc->InitializeNode(pnode, this);\n+    m_msgproc->InitializeNode(pnode);\n \n     LogPrint(BCLog::NET, \"connection from %s accepted\\n\", addr.ToString());\n \n@@ -1962,7 +1962,7 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n     if (manual_connection)\n         pnode->m_manual_connection = true;\n \n-    m_msgproc->InitializeNode(pnode, this);\n+    m_msgproc->InitializeNode(pnode);\n     {\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n@@ -1992,14 +1992,14 @@ void CConnman::ThreadMessageHandler()\n                 continue;\n \n             // Receive messages\n-            bool fMoreNodeWork = m_msgproc->ProcessMessages(pnode, this, flagInterruptMsgProc);\n+            bool fMoreNodeWork = m_msgproc->ProcessMessages(pnode, flagInterruptMsgProc);\n             fMoreWork |= (fMoreNodeWork && !pnode->fPauseSend);\n             if (flagInterruptMsgProc)\n                 return;\n             // Send messages\n             {\n                 LOCK(pnode->cs_sendProcessing);\n-                m_msgproc->SendMessages(pnode, this, flagInterruptMsgProc);\n+                m_msgproc->SendMessages(pnode, flagInterruptMsgProc);\n             }\n \n             if (flagInterruptMsgProc)"
      },
      {
        "sha": "9bb1d3c39b085dcd70fb059cdfb16ddb97a2b8ca",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b4136f21cfbbeb043ce46ffa1bf5f353838bfbea",
        "patch": "@@ -444,9 +444,9 @@ struct CombinerAll\n class NetEventsInterface\n {\n public:\n-    virtual bool ProcessMessages(CNode* pnode, CConnman* connman, std::atomic<bool>& interrupt) = 0;\n-    virtual bool SendMessages(CNode* pnode, CConnman* connman, std::atomic<bool>& interrupt) = 0;\n-    virtual void InitializeNode(CNode* pnode, CConnman* connman) = 0;\n+    virtual bool ProcessMessages(CNode* pnode, std::atomic<bool>& interrupt) = 0;\n+    virtual bool SendMessages(CNode* pnode, std::atomic<bool>& interrupt) = 0;\n+    virtual void InitializeNode(CNode* pnode) = 0;\n     virtual void FinalizeNode(NodeId id, bool& update_connection_time) = 0;\n };\n "
      },
      {
        "sha": "24d8d49c0c39255a81d52656b0fb6f4ae358b857",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b4136f21cfbbeb043ce46ffa1bf5f353838bfbea",
        "patch": "@@ -495,7 +495,7 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n \n } // namespace\n \n-void PeerLogicValidation::InitializeNode(CNode *pnode, CConnman* connman) {\n+void PeerLogicValidation::InitializeNode(CNode *pnode) {\n     CAddress addr = pnode->addr;\n     std::string addrName = pnode->GetAddrName();\n     NodeId nodeid = pnode->GetId();\n@@ -2652,7 +2652,7 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n     return false;\n }\n \n-bool PeerLogicValidation::ProcessMessages(CNode* pfrom, CConnman* connman, std::atomic<bool>& interruptMsgProc)\n+bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n     //\n@@ -2789,7 +2789,7 @@ class CompareInvMempoolOrder\n     }\n };\n \n-bool PeerLogicValidation::SendMessages(CNode* pto, CConnman* connman, std::atomic<bool>& interruptMsgProc)\n+bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptMsgProc)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {"
      },
      {
        "sha": "79745cdd42c96ad765b27703b313ce2b6278ad59",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=b4136f21cfbbeb043ce46ffa1bf5f353838bfbea",
        "patch": "@@ -35,19 +35,18 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n     void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n \n \n-    void InitializeNode(CNode* pnode, CConnman* connman) override;\n+    void InitializeNode(CNode* pnode) override;\n     void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) override;\n     /** Process protocol messages received from a given node */\n-    bool ProcessMessages(CNode* pfrom, CConnman* connman, std::atomic<bool>& interrupt) override;\n+    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n     /**\n     * Send queued protocol messages to be sent to a give node.\n     *\n     * @param[in]   pto             The node which we are sending messages to.\n-    * @param[in]   connman         The connection manager for that node.\n     * @param[in]   interrupt       Interrupt condition for processing threads\n     * @return                      True if there is more work to be done\n     */\n-    bool SendMessages(CNode* pto, CConnman* connman, std::atomic<bool>& interrupt) override;\n+    bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n };\n \n struct CNodeStateStats {"
      },
      {
        "sha": "b88ad5ed1b8ab892c358a4f6b6b1e7cb9248e8fc",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=b4136f21cfbbeb043ce46ffa1bf5f353838bfbea",
        "patch": "@@ -50,26 +50,26 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode1, connman);\n+    peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n-    peerLogic->SendMessages(&dummyNode1, connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n     CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", true);\n     dummyNode2.SetSendVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode2, connman);\n+    peerLogic->InitializeNode(&dummyNode2);\n     dummyNode2.nVersion = 1;\n     dummyNode2.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode2.GetId(), 50);\n-    peerLogic->SendMessages(&dummyNode2, connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode2, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(connman->IsBanned(addr1));  // ... but 1 still should be\n     Misbehaving(dummyNode2.GetId(), 50);\n-    peerLogic->SendMessages(&dummyNode2, connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode2, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr2));\n }\n \n@@ -82,17 +82,17 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, 1, CAddress(), \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode1, connman);\n+    peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100);\n-    peerLogic->SendMessages(&dummyNode1, connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 10);\n-    peerLogic->SendMessages(&dummyNode1, connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 1);\n-    peerLogic->SendMessages(&dummyNode1, connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n }\n@@ -108,12 +108,12 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, 4, CAddress(), \"\", true);\n     dummyNode.SetSendVersion(PROTOCOL_VERSION);\n-    peerLogic->InitializeNode(&dummyNode, connman);\n+    peerLogic->InitializeNode(&dummyNode);\n     dummyNode.nVersion = 1;\n     dummyNode.fSuccessfullyConnected = true;\n \n     Misbehaving(dummyNode.GetId(), 100);\n-    peerLogic->SendMessages(&dummyNode, connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60);"
      }
    ]
  },
  {
    "sha": "0a5477c7e30667f4dc864b69975a8da5f63ca71e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTU0NzdjN2UzMDY2N2Y0ZGM4NjRiNjk5NzVhOGRhNWY2M2NhNzFl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-09-07T18:26:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:16:57Z"
      },
      "message": "net: stop both net/net_processing before destroying them\n\nThis should avoid either attempting to use an invalid reference/pointer to the\nother.\n\nGithub-Pull: #10756\nRebased-From: 2525b972af6645ca239ac1078cffb132b402bfbb",
      "tree": {
        "sha": "4b6dd3118c9f798babfaf5966da897e121c4e95d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b6dd3118c9f798babfaf5966da897e121c4e95d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a5477c7e30667f4dc864b69975a8da5f63ca71e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a5477c7e30667f4dc864b69975a8da5f63ca71e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a5477c7e30667f4dc864b69975a8da5f63ca71e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a5477c7e30667f4dc864b69975a8da5f63ca71e/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4136f21cfbbeb043ce46ffa1bf5f353838bfbea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4136f21cfbbeb043ce46ffa1bf5f353838bfbea"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "798c24a2a83a3c813aa4351e9ea85859343b6a0f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a5477c7e30667f4dc864b69975a8da5f63ca71e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a5477c7e30667f4dc864b69975a8da5f63ca71e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0a5477c7e30667f4dc864b69975a8da5f63ca71e",
        "patch": "@@ -193,9 +193,13 @@ void Shutdown()\n     }\n #endif\n     MapPort(false);\n+\n+    // Because these depend on each-other, we make sure that neither can be\n+    // using the other before destroying them.\n     UnregisterValidationInterface(peerLogic.get());\n-    g_connman.reset();\n+    g_connman->Stop();\n     peerLogic.reset();\n+    g_connman.reset();\n \n     StopTorControl();\n     if (fDumpMempoolLater && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {"
      }
    ]
  },
  {
    "sha": "d570aa4290bf678bab764aa58dde19167bc927f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTcwYWE0MjkwYmY2NzhiYWI3NjRhYTU4ZGRlMTkxNjdiYzkyN2Y1",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-09-14T03:18:55Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:17:58Z"
      },
      "message": "Fix uninitialized g_connman crash in Shutdown()\n\nGithub-Pull: #11326\nRebased-From: 77939f27f7dc42640ebfb9fe52490a2ddacc3ad4",
      "tree": {
        "sha": "7398db5824d4dc0574a809e25e0a4ddf9d8af79d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7398db5824d4dc0574a809e25e0a4ddf9d8af79d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d570aa4290bf678bab764aa58dde19167bc927f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d570aa4290bf678bab764aa58dde19167bc927f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d570aa4290bf678bab764aa58dde19167bc927f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d570aa4290bf678bab764aa58dde19167bc927f5/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a5477c7e30667f4dc864b69975a8da5f63ca71e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a5477c7e30667f4dc864b69975a8da5f63ca71e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a5477c7e30667f4dc864b69975a8da5f63ca71e"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4efc06a4be9b4fc44040b7dc66bc8fabcee540f1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d570aa4290bf678bab764aa58dde19167bc927f5/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d570aa4290bf678bab764aa58dde19167bc927f5/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d570aa4290bf678bab764aa58dde19167bc927f5",
        "patch": "@@ -197,7 +197,7 @@ void Shutdown()\n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n     UnregisterValidationInterface(peerLogic.get());\n-    g_connman->Stop();\n+    if(g_connman) g_connman->Stop();\n     peerLogic.reset();\n     g_connman.reset();\n "
      }
    ]
  },
  {
    "sha": "bf191a71836f357d7949459f666db506dffd123b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjE5MWE3MTgzNmYzNTdkNzk0OTQ1OWY2NjZkYjUwNmRmZmQxMjNi",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2017-10-11T12:55:14Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:18:23Z"
      },
      "message": "Disconnecting from bad outbound peers in IBD\n\nWhen in IBD, we'd like to use all our outbound peers to help us\nsync the chain.  Disconnect any outbound peers whose headers have\ninsufficient work.\n\nGithub-Pull: #11490\nRebased-From: c60fd71a65e841efe187992f46c583a704cc37f5",
      "tree": {
        "sha": "f6f410b14e72bda966ef09956617bdd04a72f9f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6f410b14e72bda966ef09956617bdd04a72f9f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf191a71836f357d7949459f666db506dffd123b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf191a71836f357d7949459f666db506dffd123b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf191a71836f357d7949459f666db506dffd123b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf191a71836f357d7949459f666db506dffd123b/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d570aa4290bf678bab764aa58dde19167bc927f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d570aa4290bf678bab764aa58dde19167bc927f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d570aa4290bf678bab764aa58dde19167bc927f5"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "87a36553072c971d4789ec3af7ff330f1be56ddb",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf191a71836f357d7949459f666db506dffd123b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf191a71836f357d7949459f666db506dffd123b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=bf191a71836f357d7949459f666db506dffd123b",
        "patch": "@@ -2374,6 +2374,24 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 }\n             }\n         }\n+        // If we're in IBD, we want outbound peers that will serve us a useful\n+        // chain. Disconnect peers that are on chains with insufficient work.\n+        if (IsInitialBlockDownload() && nCount != MAX_HEADERS_RESULTS) {\n+            // When nCount < MAX_HEADERS_RESULTS, we know we have no more\n+            // headers to fetch from this peer.\n+            if (nodestate->pindexBestKnownBlock && nodestate->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n+                // This peer has too little work on their headers chain to help\n+                // us sync -- disconnect if using an outbound slot (unless\n+                // whitelisted or addnode).\n+                // Note: We compare their tip to nMinimumChainWork (rather than\n+                // chainActive.Tip()) because we won't start block download\n+                // until we have a headers chain that has at least\n+                // nMinimumChainWork, even if a peer has a chain past our tip,\n+                if (!(pfrom->fInbound || pfrom->fWhitelisted || pfrom->m_manual_connection)) {\n+                    pfrom->fDisconnect = true;\n+                }\n+            }\n+        }\n         }\n     }\n "
      },
      {
        "sha": "35cd7ad1418079f70692a6a7c4c759f92b7808f5",
        "filename": "test/functional/minchainwork.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf191a71836f357d7949459f666db506dffd123b/test/functional/minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf191a71836f357d7949459f666db506dffd123b/test/functional/minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/minchainwork.py?ref=bf191a71836f357d7949459f666db506dffd123b",
        "patch": "@@ -27,6 +27,7 @@ class MinimumChainWorkTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+\n         self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n         self.node_min_work = [0, 101, 101]\n \n@@ -74,6 +75,13 @@ def run_test(self):\n         self.nodes[0].generate(1)\n \n         self.log.info(\"Verifying nodes are all synced\")\n+\n+        # Because nodes in regtest are all manual connections (eg using\n+        # addnode), node1 should not have disconnected node0. If not for that,\n+        # we'd expect node1 to have disconnected node0 for serving an\n+        # insufficient work chain, in which case we'd need to reconnect them to\n+        # continue the test.\n+\n         self.sync_all()\n         self.log.info(\"Blockcounts: %s\", [n.getblockcount() for n in self.nodes])\n "
      }
    ]
  },
  {
    "sha": "9961abf9e469da17a3142697007fb810ca88c145",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTYxYWJmOWU0NjlkYTE3YTMxNDI2OTcwMDdmYjgxMGNhODhjMTQ1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-12T17:55:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:18:34Z"
      },
      "message": "Permit disconnection of outbound peers on bad/slow chains\n\nCurrently we have no rotation of outbound peers.  If an outbound peer\nstops serving us blocks, or is on a consensus-incompatible chain with\nless work than our tip (but otherwise valid headers), then we will never\ndisconnect that peer, even though that peer is using one of our 8\noutbound connection slots.  Because we rely on our outbound peers to\nfind an honest node in order to reach consensus, allowing an\nincompatible peer to occupy one of those slots is undesirable,\nparticularly if it is possible for all such slots to be occupied by such\npeers.\n\nProtect against this by always checking to see if a peer's best known\nblock has less work than our tip, and if so, set a 20 minute timeout --\nif the peer is still not known to have caught up to a chain with as much\nwork as ours after 20 minutes, then send a single getheaders message,\nwait 2 more minutes, and if a better header hasn't been received by then,\ndisconnect that peer.\n\nNote:\n\n- we do not require that our peer sync to the same tip as ours, just an\nequal or greater work tip.  (Doing otherwise would risk partitioning the\nnetwork in the event of a chain split, and is also unnecessary.)\n\n- we pick 4 of our outbound peers and do not subject them to this logic,\nto be more conservative. We don't wish to permit temporary network\nissues (or an attacker) to excessively disrupt network topology.\n\nGithub-Pull: #11490\nRebased-From: 5a6d00c6defc587e22c93e63029fdd538ce8858d",
      "tree": {
        "sha": "bd174ea3414f569aa76fbb993d9d144918413acd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd174ea3414f569aa76fbb993d9d144918413acd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9961abf9e469da17a3142697007fb810ca88c145",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9961abf9e469da17a3142697007fb810ca88c145",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9961abf9e469da17a3142697007fb810ca88c145",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9961abf9e469da17a3142697007fb810ca88c145/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf191a71836f357d7949459f666db506dffd123b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf191a71836f357d7949459f666db506dffd123b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf191a71836f357d7949459f666db506dffd123b"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 120,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d81a90323f9fa27b662a8dafafeb4149a6985ce2",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 112,
        "deletions": 1,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9961abf9e469da17a3142697007fb810ca88c145/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9961abf9e469da17a3142697007fb810ca88c145/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=9961abf9e469da17a3142697007fb810ca88c145",
        "patch": "@@ -116,6 +116,9 @@ namespace {\n     /** Number of peers from which we're downloading blocks. */\n     int nPeersWithValidatedDownloads = 0;\n \n+    /** Number of outbound peers with m_chain_sync.m_protect. */\n+    int g_outbound_peers_with_protect_from_disconnect = 0;\n+\n     /** Relay map, protected by cs_main. */\n     typedef std::map<uint256, CTransactionRef> MapRelay;\n     MapRelay mapRelay;\n@@ -193,6 +196,33 @@ struct CNodeState {\n      */\n     bool fSupportsDesiredCmpctVersion;\n \n+    /** State used to enforce CHAIN_SYNC_TIMEOUT\n+      * Only in effect for outbound, non-manual connections, with\n+      * m_protect == false\n+      * Algorithm: if a peer's best known block has less work than our tip,\n+      * set a timeout CHAIN_SYNC_TIMEOUT seconds in the future:\n+      *   - If at timeout their best known block now has more work than our tip\n+      *     when the timeout was set, then either reset the timeout or clear it\n+      *     (after comparing against our current tip's work)\n+      *   - If at timeout their best known block still has less work than our\n+      *     tip did when the timeout was set, then send a getheaders message,\n+      *     and set a shorter timeout, HEADERS_RESPONSE_TIME seconds in future.\n+      *     If their best known block is still behind when that new timeout is\n+      *     reached, disconnect.\n+      */\n+    struct ChainSyncTimeoutState {\n+        //! A timeout used for checking whether our peer has sufficiently synced\n+        int64_t m_timeout;\n+        //! A header with the work we require on our peer's chain\n+        const CBlockIndex * m_work_header;\n+        //! After timeout is reached, set to true after sending getheaders\n+        bool m_sent_getheaders;\n+        //! Whether this peer is protected from disconnection due to a bad/slow chain\n+        bool m_protect;\n+    };\n+\n+    ChainSyncTimeoutState m_chain_sync;\n+\n     CNodeState(CAddress addrIn, std::string addrNameIn) : address(addrIn), name(addrNameIn) {\n         fCurrentlyConnected = false;\n         nMisbehavior = 0;\n@@ -215,6 +245,7 @@ struct CNodeState {\n         fHaveWitness = false;\n         fWantsCmpctWitness = false;\n         fSupportsDesiredCmpctVersion = false;\n+        m_chain_sync = { 0, nullptr, false, false };\n     }\n };\n \n@@ -495,6 +526,13 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n \n } // namespace\n \n+// Returns true for outbound peers, excluding manual connections, feelers, and\n+// one-shots\n+bool IsOutboundDisconnectionCandidate(const CNode *node)\n+{\n+    return !(node->fInbound || node->m_manual_connection || node->fFeeler || node->fOneShot);\n+}\n+\n void PeerLogicValidation::InitializeNode(CNode *pnode) {\n     CAddress addr = pnode->addr;\n     std::string addrName = pnode->GetAddrName();\n@@ -527,6 +565,8 @@ void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTim\n     nPreferredDownload -= state->fPreferredDownload;\n     nPeersWithValidatedDownloads -= (state->nBlocksInFlightValidHeaders != 0);\n     assert(nPeersWithValidatedDownloads >= 0);\n+    g_outbound_peers_with_protect_from_disconnect -= state->m_chain_sync.m_protect;\n+    assert(g_outbound_peers_with_protect_from_disconnect >= 0);\n \n     mapNodeState.erase(nodeid);\n \n@@ -535,6 +575,7 @@ void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTim\n         assert(mapBlocksInFlight.empty());\n         assert(nPreferredDownload == 0);\n         assert(nPeersWithValidatedDownloads == 0);\n+        assert(g_outbound_peers_with_protect_from_disconnect == 0);\n     }\n     LogPrint(BCLog::NET, \"Cleared nodestate for peer=%d\\n\", nodeid);\n }\n@@ -2315,6 +2356,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         assert(pindexLast);\n         UpdateBlockAvailability(pfrom->GetId(), pindexLast->GetBlockHash());\n \n+        // From here, pindexBestKnownBlock should be guaranteed to be non-null,\n+        // because it is set in UpdateBlockAvailability. Some nullptr checks\n+        // are still present, however, as belt-and-suspenders.\n+\n         if (nCount == MAX_HEADERS_RESULTS) {\n             // Headers message had its maximum size; the peer may have more headers.\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n@@ -2387,11 +2432,22 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // chainActive.Tip()) because we won't start block download\n                 // until we have a headers chain that has at least\n                 // nMinimumChainWork, even if a peer has a chain past our tip,\n-                if (!(pfrom->fInbound || pfrom->fWhitelisted || pfrom->m_manual_connection)) {\n+                // as an anti-DoS measure.\n+                if (IsOutboundDisconnectionCandidate(pfrom)) {\n+                    LogPrintf(\"Disconnecting outbound peer %d -- headers chain has insufficient work\\n\", pfrom->GetId());\n                     pfrom->fDisconnect = true;\n                 }\n             }\n         }\n+\n+        if (!pfrom->fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr) {\n+            // If this is an outbound peer, check to see if we should protect\n+            // it from the bad/lagging chain logic.\n+            if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n+                nodestate->m_chain_sync.m_protect = true;\n+                ++g_outbound_peers_with_protect_from_disconnect;\n+            }\n+        }\n         }\n     }\n \n@@ -2790,6 +2846,58 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     return fMoreWork;\n }\n \n+void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    CNodeState &state = *State(pto->GetId());\n+    const CNetMsgMaker msgMaker(pto->GetSendVersion());\n+\n+    if (!state.m_chain_sync.m_protect && IsOutboundDisconnectionCandidate(pto) && state.fSyncStarted) {\n+        // This is an outbound peer subject to disconnection if they don't\n+        // announce a block with as much work as the current tip within\n+        // CHAIN_SYNC_TIMEOUT + HEADERS_RESPONSE_TIME seconds (note: if\n+        // their chain has more work than ours, we should sync to it,\n+        // unless it's invalid, in which case we should find that out and\n+        // disconnect from them elsewhere).\n+        if (state.pindexBestKnownBlock != nullptr && state.pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork) {\n+            if (state.m_chain_sync.m_timeout != 0) {\n+                state.m_chain_sync.m_timeout = 0;\n+                state.m_chain_sync.m_work_header = nullptr;\n+                state.m_chain_sync.m_sent_getheaders = false;\n+            }\n+        } else if (state.m_chain_sync.m_timeout == 0 || (state.m_chain_sync.m_work_header != nullptr && state.pindexBestKnownBlock != nullptr && state.pindexBestKnownBlock->nChainWork >= state.m_chain_sync.m_work_header->nChainWork)) {\n+            // Our best block known by this peer is behind our tip, and we're either noticing\n+            // that for the first time, OR this peer was able to catch up to some earlier point\n+            // where we checked against our tip.\n+            // Either way, set a new timeout based on current tip.\n+            state.m_chain_sync.m_timeout = time_in_seconds + CHAIN_SYNC_TIMEOUT;\n+            state.m_chain_sync.m_work_header = chainActive.Tip();\n+            state.m_chain_sync.m_sent_getheaders = false;\n+        } else if (state.m_chain_sync.m_timeout > 0 && time_in_seconds > state.m_chain_sync.m_timeout) {\n+            // No evidence yet that our peer has synced to a chain with work equal to that\n+            // of our tip, when we first detected it was behind. Send a single getheaders\n+            // message to give the peer a chance to update us.\n+            if (state.m_chain_sync.m_sent_getheaders) {\n+                // They've run out of time to catch up!\n+                LogPrintf(\"Disconnecting outbound peer %d for old chain, best known block = %s\\n\", pto->GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\");\n+                pto->fDisconnect = true;\n+            } else {\n+                LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto->GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n+                connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n+                state.m_chain_sync.m_sent_getheaders = true;\n+                constexpr int64_t HEADERS_RESPONSE_TIME = 120; // 2 minutes\n+                // Bump the timeout to allow a response, which could clear the timeout\n+                // (if the response shows the peer has synced), reset the timeout (if\n+                // the peer syncs to the required work but not to our tip), or result\n+                // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n+                // has not sufficiently progressed)\n+                state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;\n+            }\n+        }\n+    }\n+}\n+\n class CompareInvMempoolOrder\n {\n     CTxMemPool *mp;\n@@ -3256,6 +3364,9 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n             }\n         }\n \n+        // Check that outbound peers have reasonable chains\n+        // GetTime() is used by this anti-DoS logic so we can test this using mocktime\n+        ConsiderEviction(pto, GetTime());\n \n         //\n         // Message: getdata (blocks)"
      },
      {
        "sha": "656324bba0c4cc327455eed03793ca8ef8007129",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9961abf9e469da17a3142697007fb810ca88c145/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9961abf9e469da17a3142697007fb810ca88c145/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=9961abf9e469da17a3142697007fb810ca88c145",
        "patch": "@@ -21,6 +21,12 @@ static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n  *  Timeout = base + per_header * (expected number of headers) */\n static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; // 15 minutes\n static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; // 1ms/header\n+/** Protect at least this many outbound peers from disconnection due to slow/\n+ * behind headers chain.\n+ */\n+static constexpr int32_t MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT = 4;\n+/** Timeout for (unprotected) outbound peers to sync to our chainwork, in seconds */\n+static constexpr int64_t CHAIN_SYNC_TIMEOUT = 20 * 60; // 20 minutes\n \n class PeerLogicValidation : public CValidationInterface, public NetEventsInterface {\n private:\n@@ -47,6 +53,8 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n     * @return                      True if there is more work to be done\n     */\n     bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n+\n+    void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n };\n \n struct CNodeStateStats {"
      }
    ]
  },
  {
    "sha": "e3272242e25a3b8a4a2bc4ebec85b26ab989b959",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzI3MjI0MmUyNWEzYjhhNGEyYmM0ZWJlYzg1YjI2YWI5ODliOTU5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-19T15:42:47Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:18:44Z"
      },
      "message": "Add unit test for outbound peer eviction\n\nGithub-Pull: #11490\nRebased-From: e065249c014a070a8799b2ff947af5b8f012c5c1",
      "tree": {
        "sha": "bda1a1befb98f5cb105d3f7bc51a0cdae8c1a75d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bda1a1befb98f5cb105d3f7bc51a0cdae8c1a75d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3272242e25a3b8a4a2bc4ebec85b26ab989b959",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3272242e25a3b8a4a2bc4ebec85b26ab989b959",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3272242e25a3b8a4a2bc4ebec85b26ab989b959",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3272242e25a3b8a4a2bc4ebec85b26ab989b959/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9961abf9e469da17a3142697007fb810ca88c145",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9961abf9e469da17a3142697007fb810ca88c145",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9961abf9e469da17a3142697007fb810ca88c145"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 55,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7bcf304833f175596968cec2f3a6cb0dc30f21ca",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3272242e25a3b8a4a2bc4ebec85b26ab989b959/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3272242e25a3b8a4a2bc4ebec85b26ab989b959/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=e3272242e25a3b8a4a2bc4ebec85b26ab989b959",
        "patch": "@@ -42,6 +42,51 @@ static NodeId id = 0;\n \n BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n \n+// Test eviction of an outbound peer whose chain never advances\n+// Mock a node connection, and use mocktime to simulate a peer\n+// which never sends any headers messages.  PeerLogic should\n+// decide to evict that outbound peer, after the appropriate timeouts.\n+// Note that we protect 4 outbound nodes from being subject to\n+// this logic; this test takes advantage of that protection only\n+// being applied to nodes which send headers with sufficient\n+// work.\n+BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n+{\n+    std::atomic<bool> interruptDummy(false);\n+\n+    // Mock an outbound peer\n+    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n+    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", /*fInboundIn=*/ false);\n+    dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n+\n+    peerLogic->InitializeNode(&dummyNode1);\n+    dummyNode1.nVersion = 1;\n+    dummyNode1.fSuccessfullyConnected = true;\n+\n+    // This test requires that we have a chain with non-zero work.\n+    BOOST_CHECK(chainActive.Tip() != nullptr);\n+    BOOST_CHECK(chainActive.Tip()->nChainWork > 0);\n+\n+    // Test starts here\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n+    BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n+    dummyNode1.vSendMsg.clear();\n+\n+    int64_t nStartTime = GetTime();\n+    // Wait 21 minutes\n+    SetMockTime(nStartTime+21*60);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n+    BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n+    // Wait 3 more minutes\n+    SetMockTime(nStartTime+24*60);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in disconnect\n+    BOOST_CHECK(dummyNode1.fDisconnect == true);\n+    SetMockTime(0);\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n+}\n+\n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     std::atomic<bool> interruptDummy(false);\n@@ -71,6 +116,10 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     Misbehaving(dummyNode2.GetId(), 50);\n     peerLogic->SendMessages(&dummyNode2, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr2));\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n+    peerLogic->FinalizeNode(dummyNode2.GetId(), dummy);\n }\n \n BOOST_AUTO_TEST_CASE(DoS_banscore)\n@@ -95,6 +144,9 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)\n@@ -121,6 +173,9 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n \n     SetMockTime(nStartTime+60*60*24+1);\n     BOOST_CHECK(!connman->IsBanned(addr));\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n CTransactionRef RandomOrphan()"
      }
    ]
  },
  {
    "sha": "fc966bbd2b6596f8ac68ef3c345d47fbb5d7e0c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzk2NmJiZDJiNjU5NmY4YWM2OGVmM2MzNDVkNDdmYmI1ZDdlMGM5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-26T18:46:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:19:47Z"
      },
      "message": "moveonly: factor out headers processing into separate function\n\nProcessMessages will now return earlier when processing headers\nmessages, rather than continuing on (and do nothing).\n\nGithub-Pull: #11568\nRebased-From: 4637f18522429473e68f6f512a03040e121a446d",
      "tree": {
        "sha": "ec98b43ff2ec2338dc33a794baee33b3195bf1af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec98b43ff2ec2338dc33a794baee33b3195bf1af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc966bbd2b6596f8ac68ef3c345d47fbb5d7e0c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc966bbd2b6596f8ac68ef3c345d47fbb5d7e0c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc966bbd2b6596f8ac68ef3c345d47fbb5d7e0c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc966bbd2b6596f8ac68ef3c345d47fbb5d7e0c9/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3272242e25a3b8a4a2bc4ebec85b26ab989b959",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3272242e25a3b8a4a2bc4ebec85b26ab989b959",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3272242e25a3b8a4a2bc4ebec85b26ab989b959"
      }
    ],
    "stats": {
      "total": 336,
      "additions": 173,
      "deletions": 163
    },
    "files": [
      {
        "sha": "eac2853cd7e1251fa9958cb3942037a7676425f6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 173,
        "deletions": 163,
        "changes": 336,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc966bbd2b6596f8ac68ef3c345d47fbb5d7e0c9/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc966bbd2b6596f8ac68ef3c345d47fbb5d7e0c9/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fc966bbd2b6596f8ac68ef3c345d47fbb5d7e0c9",
        "patch": "@@ -1193,6 +1193,178 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n+bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams)\n+{\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    size_t nCount = headers.size();\n+\n+    if (nCount == 0) {\n+        // Nothing interesting. Stop asking this peers for more headers.\n+        return true;\n+    }\n+\n+    const CBlockIndex *pindexLast = nullptr;\n+    {\n+        LOCK(cs_main);\n+        CNodeState *nodestate = State(pfrom->GetId());\n+\n+        // If this looks like it could be a block announcement (nCount <\n+        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n+        // don't connect:\n+        // - Send a getheaders message in response to try to connect the chain.\n+        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+        //   don't connect before giving DoS points\n+        // - Once a headers message is received that is valid and does connect,\n+        //   nUnconnectingHeaders gets reset back to 0.\n+        if (mapBlockIndex.find(headers[0].hashPrevBlock) == mapBlockIndex.end() && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n+            nodestate->nUnconnectingHeaders++;\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n+            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+                    headers[0].GetHash().ToString(),\n+                    headers[0].hashPrevBlock.ToString(),\n+                    pindexBestHeader->nHeight,\n+                    pfrom->GetId(), nodestate->nUnconnectingHeaders);\n+            // Set hashLastUnknownBlock for this peer, so that if we\n+            // eventually get the headers - even from a different peer -\n+            // we can use this peer to download.\n+            UpdateBlockAvailability(pfrom->GetId(), headers.back().GetHash());\n+\n+            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+                Misbehaving(pfrom->GetId(), 20);\n+            }\n+            return true;\n+        }\n+\n+        uint256 hashLastBlock;\n+        for (const CBlockHeader& header : headers) {\n+            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+                Misbehaving(pfrom->GetId(), 20);\n+                return error(\"non-continuous headers sequence\");\n+            }\n+            hashLastBlock = header.GetHash();\n+        }\n+    }\n+\n+    CValidationState state;\n+    if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast)) {\n+        int nDoS;\n+        if (state.IsInvalid(nDoS)) {\n+            if (nDoS > 0) {\n+                LOCK(cs_main);\n+                Misbehaving(pfrom->GetId(), nDoS);\n+            }\n+            return error(\"invalid header received\");\n+        }\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        CNodeState *nodestate = State(pfrom->GetId());\n+        if (nodestate->nUnconnectingHeaders > 0) {\n+            LogPrint(BCLog::NET, \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->GetId(), nodestate->nUnconnectingHeaders);\n+        }\n+        nodestate->nUnconnectingHeaders = 0;\n+\n+        assert(pindexLast);\n+        UpdateBlockAvailability(pfrom->GetId(), pindexLast->GetBlockHash());\n+\n+        // From here, pindexBestKnownBlock should be guaranteed to be non-null,\n+        // because it is set in UpdateBlockAvailability. Some nullptr checks\n+        // are still present, however, as belt-and-suspenders.\n+\n+        if (nCount == MAX_HEADERS_RESULTS) {\n+            // Headers message had its maximum size; the peer may have more headers.\n+            // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n+            // from there instead.\n+            LogPrint(BCLog::NET, \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->GetId(), pfrom->nStartingHeight);\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256()));\n+        }\n+\n+        bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n+        // If this set of headers is valid and ends in a block with at least as\n+        // much work as our tip, download as much as possible.\n+        if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && chainActive.Tip()->nChainWork <= pindexLast->nChainWork) {\n+            std::vector<const CBlockIndex*> vToFetch;\n+            const CBlockIndex *pindexWalk = pindexLast;\n+            // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n+            while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n+                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n+                        (!IsWitnessEnabled(pindexWalk->pprev, chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n+                    // We don't have this block, and it's not yet in flight.\n+                    vToFetch.push_back(pindexWalk);\n+                }\n+                pindexWalk = pindexWalk->pprev;\n+            }\n+            // If pindexWalk still isn't on our main chain, we're looking at a\n+            // very large reorg at a time we think we're close to caught up to\n+            // the main chain -- this shouldn't really happen.  Bail out on the\n+            // direct fetch and rely on parallel download instead.\n+            if (!chainActive.Contains(pindexWalk)) {\n+                LogPrint(BCLog::NET, \"Large reorg, won't direct fetch to %s (%d)\\n\",\n+                        pindexLast->GetBlockHash().ToString(),\n+                        pindexLast->nHeight);\n+            } else {\n+                std::vector<CInv> vGetData;\n+                // Download as much as possible, from earliest to latest.\n+                for (const CBlockIndex *pindex : reverse_iterate(vToFetch)) {\n+                    if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                        // Can't download any more from this peer\n+                        break;\n+                    }\n+                    uint32_t nFetchFlags = GetFetchFlags(pfrom);\n+                    vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n+                    MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), pindex);\n+                    LogPrint(BCLog::NET, \"Requesting block %s from  peer=%d\\n\",\n+                            pindex->GetBlockHash().ToString(), pfrom->GetId());\n+                }\n+                if (vGetData.size() > 1) {\n+                    LogPrint(BCLog::NET, \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n+                            pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n+                }\n+                if (vGetData.size() > 0) {\n+                    if (nodestate->fSupportsDesiredCmpctVersion && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n+                        // In any case, we want to download using a compact block, not a regular one\n+                        vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n+                    }\n+                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n+                }\n+            }\n+        }\n+        // If we're in IBD, we want outbound peers that will serve us a useful\n+        // chain. Disconnect peers that are on chains with insufficient work.\n+        if (IsInitialBlockDownload() && nCount != MAX_HEADERS_RESULTS) {\n+            // When nCount < MAX_HEADERS_RESULTS, we know we have no more\n+            // headers to fetch from this peer.\n+            if (nodestate->pindexBestKnownBlock && nodestate->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n+                // This peer has too little work on their headers chain to help\n+                // us sync -- disconnect if using an outbound slot (unless\n+                // whitelisted or addnode).\n+                // Note: We compare their tip to nMinimumChainWork (rather than\n+                // chainActive.Tip()) because we won't start block download\n+                // until we have a headers chain that has at least\n+                // nMinimumChainWork, even if a peer has a chain past our tip,\n+                // as an anti-DoS measure.\n+                if (IsOutboundDisconnectionCandidate(pfrom)) {\n+                    LogPrintf(\"Disconnecting outbound peer %d -- headers chain has insufficient work\\n\", pfrom->GetId());\n+                    pfrom->fDisconnect = true;\n+                }\n+            }\n+        }\n+\n+        if (!pfrom->fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr) {\n+            // If this is an outbound peer, check to see if we should protect\n+            // it from the bad/lagging chain logic.\n+            if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n+                nodestate->m_chain_sync.m_protect = true;\n+                ++g_outbound_peers_with_protect_from_disconnect;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n@@ -2286,169 +2458,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             ReadCompactSize(vRecv); // ignore tx count; assume it is 0.\n         }\n \n-        if (nCount == 0) {\n-            // Nothing interesting. Stop asking this peers for more headers.\n-            return true;\n-        }\n-\n-        const CBlockIndex *pindexLast = nullptr;\n-        {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom->GetId());\n-\n-        // If this looks like it could be a block announcement (nCount <\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (mapBlockIndex.find(headers[0].hashPrevBlock) == mapBlockIndex.end() && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                    headers[0].GetHash().ToString(),\n-                    headers[0].hashPrevBlock.ToString(),\n-                    pindexBestHeader->nHeight,\n-                    pfrom->GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom->GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(pfrom->GetId(), 20);\n-            }\n-            return true;\n-        }\n-\n-        uint256 hashLastBlock;\n-        for (const CBlockHeader& header : headers) {\n-            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(pfrom->GetId(), 20);\n-                return error(\"non-continuous headers sequence\");\n-            }\n-            hashLastBlock = header.GetHash();\n-        }\n-        }\n-\n-        CValidationState state;\n-        if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast)) {\n-            int nDoS;\n-            if (state.IsInvalid(nDoS)) {\n-                if (nDoS > 0) {\n-                    LOCK(cs_main);\n-                    Misbehaving(pfrom->GetId(), nDoS);\n-                }\n-                return error(\"invalid header received\");\n-            }\n-        }\n-\n-        {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom->GetId());\n-        if (nodestate->nUnconnectingHeaders > 0) {\n-            LogPrint(BCLog::NET, \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->GetId(), nodestate->nUnconnectingHeaders);\n-        }\n-        nodestate->nUnconnectingHeaders = 0;\n-\n-        assert(pindexLast);\n-        UpdateBlockAvailability(pfrom->GetId(), pindexLast->GetBlockHash());\n-\n-        // From here, pindexBestKnownBlock should be guaranteed to be non-null,\n-        // because it is set in UpdateBlockAvailability. Some nullptr checks\n-        // are still present, however, as belt-and-suspenders.\n-\n-        if (nCount == MAX_HEADERS_RESULTS) {\n-            // Headers message had its maximum size; the peer may have more headers.\n-            // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n-            // from there instead.\n-            LogPrint(BCLog::NET, \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->GetId(), pfrom->nStartingHeight);\n-            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256()));\n-        }\n-\n-        bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n-        // If this set of headers is valid and ends in a block with at least as\n-        // much work as our tip, download as much as possible.\n-        if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && chainActive.Tip()->nChainWork <= pindexLast->nChainWork) {\n-            std::vector<const CBlockIndex*> vToFetch;\n-            const CBlockIndex *pindexWalk = pindexLast;\n-            // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n-            while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-                if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n-                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n-                        (!IsWitnessEnabled(pindexWalk->pprev, chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n-                    // We don't have this block, and it's not yet in flight.\n-                    vToFetch.push_back(pindexWalk);\n-                }\n-                pindexWalk = pindexWalk->pprev;\n-            }\n-            // If pindexWalk still isn't on our main chain, we're looking at a\n-            // very large reorg at a time we think we're close to caught up to\n-            // the main chain -- this shouldn't really happen.  Bail out on the\n-            // direct fetch and rely on parallel download instead.\n-            if (!chainActive.Contains(pindexWalk)) {\n-                LogPrint(BCLog::NET, \"Large reorg, won't direct fetch to %s (%d)\\n\",\n-                        pindexLast->GetBlockHash().ToString(),\n-                        pindexLast->nHeight);\n-            } else {\n-                std::vector<CInv> vGetData;\n-                // Download as much as possible, from earliest to latest.\n-                for (const CBlockIndex *pindex : reverse_iterate(vToFetch)) {\n-                    if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-                        // Can't download any more from this peer\n-                        break;\n-                    }\n-                    uint32_t nFetchFlags = GetFetchFlags(pfrom);\n-                    vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                    MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), pindex);\n-                    LogPrint(BCLog::NET, \"Requesting block %s from  peer=%d\\n\",\n-                            pindex->GetBlockHash().ToString(), pfrom->GetId());\n-                }\n-                if (vGetData.size() > 1) {\n-                    LogPrint(BCLog::NET, \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n-                            pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n-                }\n-                if (vGetData.size() > 0) {\n-                    if (nodestate->fSupportsDesiredCmpctVersion && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n-                        // In any case, we want to download using a compact block, not a regular one\n-                        vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n-                    }\n-                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n-                }\n-            }\n-        }\n-        // If we're in IBD, we want outbound peers that will serve us a useful\n-        // chain. Disconnect peers that are on chains with insufficient work.\n-        if (IsInitialBlockDownload() && nCount != MAX_HEADERS_RESULTS) {\n-            // When nCount < MAX_HEADERS_RESULTS, we know we have no more\n-            // headers to fetch from this peer.\n-            if (nodestate->pindexBestKnownBlock && nodestate->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n-                // This peer has too little work on their headers chain to help\n-                // us sync -- disconnect if using an outbound slot (unless\n-                // whitelisted or addnode).\n-                // Note: We compare their tip to nMinimumChainWork (rather than\n-                // chainActive.Tip()) because we won't start block download\n-                // until we have a headers chain that has at least\n-                // nMinimumChainWork, even if a peer has a chain past our tip,\n-                // as an anti-DoS measure.\n-                if (IsOutboundDisconnectionCandidate(pfrom)) {\n-                    LogPrintf(\"Disconnecting outbound peer %d -- headers chain has insufficient work\\n\", pfrom->GetId());\n-                    pfrom->fDisconnect = true;\n-                }\n-            }\n-        }\n-\n-        if (!pfrom->fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr) {\n-            // If this is an outbound peer, check to see if we should protect\n-            // it from the bad/lagging chain logic.\n-            if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n-                nodestate->m_chain_sync.m_protect = true;\n-                ++g_outbound_peers_with_protect_from_disconnect;\n-            }\n-        }\n-        }\n+        return ProcessHeadersMessage(pfrom, connman, headers, chainparams);\n     }\n \n     else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing"
      }
    ]
  },
  {
    "sha": "59b210d9a7fec79afba07d2ea90b190ce1d74209",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWIyMTBkOWE3ZmVjNzlhZmJhMDdkMmVhOTBiMTkwY2UxZDc0MjA5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-26T18:54:33Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:19:57Z"
      },
      "message": "Disconnect outbound peers relaying invalid headers\n\nGithub-Pull: #11568\nRebased-From: 37886d5e2f9992678dea4b1bd893f4f10d61d3ad",
      "tree": {
        "sha": "95faab56ca70a01a261875fb84bb3aa8e179a291",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/95faab56ca70a01a261875fb84bb3aa8e179a291"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59b210d9a7fec79afba07d2ea90b190ce1d74209",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59b210d9a7fec79afba07d2ea90b190ce1d74209",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59b210d9a7fec79afba07d2ea90b190ce1d74209",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59b210d9a7fec79afba07d2ea90b190ce1d74209/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc966bbd2b6596f8ac68ef3c345d47fbb5d7e0c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc966bbd2b6596f8ac68ef3c345d47fbb5d7e0c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc966bbd2b6596f8ac68ef3c345d47fbb5d7e0c9"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 56,
      "deletions": 12
    },
    "files": [
      {
        "sha": "f677915de12eaa36473299647061e38f3d548984",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 10,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b210d9a7fec79afba07d2ea90b190ce1d74209/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b210d9a7fec79afba07d2ea90b190ce1d74209/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=59b210d9a7fec79afba07d2ea90b190ce1d74209",
        "patch": "@@ -1193,7 +1193,7 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams)\n+bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams, bool punish_duplicate_invalid)\n {\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     size_t nCount = headers.size();\n@@ -1246,13 +1246,48 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n     }\n \n     CValidationState state;\n-    if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast)) {\n+    CBlockHeader first_invalid_header;\n+    if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast, &first_invalid_header)) {\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             if (nDoS > 0) {\n                 LOCK(cs_main);\n                 Misbehaving(pfrom->GetId(), nDoS);\n             }\n+            if (punish_duplicate_invalid && mapBlockIndex.find(first_invalid_header.GetHash()) != mapBlockIndex.end()) {\n+                // Goal: don't allow outbound peers to use up our outbound\n+                // connection slots if they are on incompatible chains.\n+                //\n+                // We ask the caller to set punish_invalid appropriately based\n+                // on the peer and the method of header delivery (compact\n+                // blocks are allowed to be invalid in some circumstances,\n+                // under BIP 152).\n+                // Here, we try to detect the narrow situation that we have a\n+                // valid block header (ie it was valid at the time the header\n+                // was received, and hence stored in mapBlockIndex) but know the\n+                // block is invalid, and that a peer has announced that same\n+                // block as being on its active chain.\n+                // Disconnect the peer in such a situation.\n+                //\n+                // Note: if the header that is invalid was not accepted to our\n+                // mapBlockIndex at all, that may also be grounds for\n+                // disconnecting the peer, as the chain they are on is likely\n+                // to be incompatible. However, there is a circumstance where\n+                // that does not hold: if the header's timestamp is more than\n+                // 2 hours ahead of our current time. In that case, the header\n+                // may become valid in the future, and we don't want to\n+                // disconnect a peer merely for serving us one too-far-ahead\n+                // block header, to prevent an attacker from splitting the\n+                // network by mining a block right at the 2 hour boundary.\n+                //\n+                // TODO: update the DoS logic (or, rather, rewrite the\n+                // DoS-interface between validation and net_processing) so that\n+                // the interface is cleaner, and so that we disconnect on all the\n+                // reasons that a peer's headers chain is incompatible\n+                // with ours (eg block->nVersion softforks, MTP violations,\n+                // etc), and not just the duplicate-invalid case.\n+                pfrom->fDisconnect = true;\n+            }\n             return error(\"invalid header received\");\n         }\n     }\n@@ -2197,7 +2232,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // If we end up treating this as a plain headers message, call that as well\n         // without cs_main.\n         bool fRevertToHeaderProcessing = false;\n-        CDataStream vHeadersMsg(SER_NETWORK, PROTOCOL_VERSION);\n \n         // Keep a CBlock for \"optimistic\" compactblock reconstructions (see\n         // below)\n@@ -2314,10 +2348,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 return true;\n             } else {\n                 // If this was an announce-cmpctblock, we want the same treatment as a header message\n-                // Dirty hack to process as if it were just a headers message (TODO: move message handling into their own functions)\n-                std::vector<CBlock> headers;\n-                headers.push_back(cmpctblock.header);\n-                vHeadersMsg << headers;\n                 fRevertToHeaderProcessing = true;\n             }\n         }\n@@ -2326,8 +2356,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (fProcessBLOCKTXN)\n             return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n \n-        if (fRevertToHeaderProcessing)\n-            return ProcessMessage(pfrom, NetMsgType::HEADERS, vHeadersMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n+        if (fRevertToHeaderProcessing) {\n+            // Headers received from HB compact block peers are permitted to be\n+            // relayed before full validation (see BIP 152), so we don't want to disconnect\n+            // the peer if the header turns out to be for an invalid block.\n+            // Note that if a peer tries to build on an invalid chain, that\n+            // will be detected and the peer will be banned.\n+            return ProcessHeadersMessage(pfrom, connman, {cmpctblock.header}, chainparams, /*punish_duplicate_invalid=*/false);\n+        }\n \n         if (fBlockReconstructed) {\n             // If we got here, we were able to optimistically reconstruct a\n@@ -2458,7 +2494,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             ReadCompactSize(vRecv); // ignore tx count; assume it is 0.\n         }\n \n-        return ProcessHeadersMessage(pfrom, connman, headers, chainparams);\n+        // Headers received via a HEADERS message should be valid, and reflect\n+        // the chain the peer is on. If we receive a known-invalid header,\n+        // disconnect the peer if it is using one of our outbound connection\n+        // slots.\n+        bool should_punish = !pfrom->fInbound && !pfrom->m_manual_connection;\n+        return ProcessHeadersMessage(pfrom, connman, headers, chainparams, should_punish);\n     }\n \n     else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing"
      },
      {
        "sha": "c52f8bf70b6037513e0c2c457d0a132f1d35a34a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b210d9a7fec79afba07d2ea90b190ce1d74209/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b210d9a7fec79afba07d2ea90b190ce1d74209/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=59b210d9a7fec79afba07d2ea90b190ce1d74209",
        "patch": "@@ -3064,13 +3064,15 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n }\n \n // Exposed wrapper for AcceptBlockHeader\n-bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex)\n+bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex, CBlockHeader *first_invalid)\n {\n+    if (first_invalid != nullptr) first_invalid->SetNull();\n     {\n         LOCK(cs_main);\n         for (const CBlockHeader& header : headers) {\n             CBlockIndex *pindex = nullptr; // Use a temp pindex instead of ppindex to avoid a const_cast\n             if (!AcceptBlockHeader(header, state, chainparams, &pindex)) {\n+                if (first_invalid) *first_invalid = header;\n                 return false;\n             }\n             if (ppindex) {"
      },
      {
        "sha": "4acdac81c92690d01b8758ef18a4f8e3916cc947",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59b210d9a7fec79afba07d2ea90b190ce1d74209/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59b210d9a7fec79afba07d2ea90b190ce1d74209/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=59b210d9a7fec79afba07d2ea90b190ce1d74209",
        "patch": "@@ -248,8 +248,9 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n  * @param[out] state This may be set to an Error state if any error occurred processing them\n  * @param[in]  chainparams The params for the chain we want to connect to\n  * @param[out] ppindex If set, the pointer will be set to point to the last new block index object for the given headers\n+ * @param[out] first_invalid First header that fails validation, if one exists\n  */\n-bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex=nullptr);\n+bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex=nullptr, CBlockHeader *first_invalid=nullptr);\n \n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);"
      }
    ]
  },
  {
    "sha": "ec8dedff4683220cb30b69df7f987546536565ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzhkZWRmZjQ2ODMyMjBjYjMwYjY5ZGY3Zjk4NzU0NjUzNjU2NWFi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-30T13:28:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:20:18Z"
      },
      "message": "net: Add missing lock in ProcessHeadersMessage(...)\n\nReading the variable mapBlockIndex requires holding the mutex cs_main.\n\nThe new \"Disconnect outbound peers relaying invalid headers\" code\nadded in commit 37886d5e2f9992678dea4b1bd893f4f10d61d3ad and merged\nas part of #11568 two days ago did not lock cs_main prior to accessing\nmapBlockIndex.\n\nGithub-Pull: #11578\nRebased-From: 2530bf27b72e53cc6ffec27de35f3b487984833d",
      "tree": {
        "sha": "7f1a9b70ea2cf5d87493dec9af543fe2d0d803c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f1a9b70ea2cf5d87493dec9af543fe2d0d803c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec8dedff4683220cb30b69df7f987546536565ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec8dedff4683220cb30b69df7f987546536565ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec8dedff4683220cb30b69df7f987546536565ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec8dedff4683220cb30b69df7f987546536565ab/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59b210d9a7fec79afba07d2ea90b190ce1d74209",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59b210d9a7fec79afba07d2ea90b190ce1d74209",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59b210d9a7fec79afba07d2ea90b190ce1d74209"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "69db5d74283c6ea91880f064ad28b7543d289377",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec8dedff4683220cb30b69df7f987546536565ab/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec8dedff4683220cb30b69df7f987546536565ab/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ec8dedff4683220cb30b69df7f987546536565ab",
        "patch": "@@ -1250,8 +1250,8 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n     if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast, &first_invalid_header)) {\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n+            LOCK(cs_main);\n             if (nDoS > 0) {\n-                LOCK(cs_main);\n                 Misbehaving(pfrom->GetId(), nDoS);\n             }\n             if (punish_duplicate_invalid && mapBlockIndex.find(first_invalid_header.GetHash()) != mapBlockIndex.end()) {"
      }
    ]
  },
  {
    "sha": "e976c36ddf183982d172da3127dc613111a25b42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOTc2YzM2ZGRmMTgzOTgyZDE3MmRhMzEyN2RjNjEzMTExYTI1YjQy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-11T19:38:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:20:38Z"
      },
      "message": "Rewrite p2p-acceptblock in preparation for slight behavior changes\n\nRemoves checking whitelisted behavior (which will be removed, the\ndifference in behavior here makes little sense) and no longer\nrequires that blocks at the same work as our tip be dropped if not\nrequested (in part because we *do* request those blocks).\n\nGithub-Pull: #11531\nRebased-From: 3b4ac43bc371561b5fa559bccb17dc0702bd4b69",
      "tree": {
        "sha": "a0cd0f54ef0e3bf212632a996b11f75e3d099c87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0cd0f54ef0e3bf212632a996b11f75e3d099c87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e976c36ddf183982d172da3127dc613111a25b42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e976c36ddf183982d172da3127dc613111a25b42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e976c36ddf183982d172da3127dc613111a25b42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e976c36ddf183982d172da3127dc613111a25b42/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec8dedff4683220cb30b69df7f987546536565ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec8dedff4683220cb30b69df7f987546536565ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec8dedff4683220cb30b69df7f987546536565ab"
      }
    ],
    "stats": {
      "total": 236,
      "additions": 122,
      "deletions": 114
    },
    "files": [
      {
        "sha": "9b2c1a73fc2f2f49f0eee3db4d61c452d1d87e0a",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 122,
        "deletions": 114,
        "changes": 236,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e976c36ddf183982d172da3127dc613111a25b42/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e976c36ddf183982d172da3127dc613111a25b42/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=e976c36ddf183982d172da3127dc613111a25b42",
        "patch": "@@ -4,42 +4,32 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test processing of unrequested blocks.\n \n-Since behavior differs when receiving unrequested blocks from whitelisted peers\n-versus non-whitelisted peers, this tests the behavior of both (effectively two\n-separate tests running in parallel).\n+Setup: two nodes, node0+node1, not connected to each other. Node1 will have\n+nMinimumChainWork set to 0x10, so it won't process low-work unrequested blocks.\n \n-Setup: three nodes, node0+node1+node2, not connected to each other.  Node0 does not\n-whitelist localhost, but node1 does. They will each be on their own chain for\n-this test.  Node2 will have nMinimumChainWork set to 0x10, so it won't process\n-low-work unrequested blocks.\n-\n-We have one NodeConn connection to each, test_node, white_node, and min_work_node,\n-respectively.\n+We have one NodeConn connection to node0 called test_node, and one to node1\n+called min_work_node.\n \n The test:\n 1. Generate one block on each node, to leave IBD.\n \n 2. Mine a new block on each tip, and deliver to each node from node's peer.\n-   The tip should advance for node0 and node1, but node2 should skip processing\n-   due to nMinimumChainWork.\n+   The tip should advance for node0, but node1 should skip processing due to\n+   nMinimumChainWork.\n \n-Node2 is unused in tests 3-7:\n+Node1 is unused in tests 3-7:\n \n-3. Mine a block that forks the previous block, and deliver to each node from\n-   corresponding peer.\n-   Node0 should not process this block (just accept the header), because it is\n-   unrequested and doesn't have more work than the tip.\n-   Node1 should process because this is coming from a whitelisted peer.\n+3. Mine a block that forks from the genesis block, and deliver to test_node.\n+   Node0 should not process this block (just accept the header), because it\n+   is unrequested and doesn't have more or equal work to the tip.\n \n-4. Send another block that builds on the forking block.\n-   Node0 should process this block but be stuck on the shorter chain, because\n-   it's missing an intermediate block.\n-   Node1 should reorg to this longer chain.\n+4a,b. Send another two blocks that build on the forking block.\n+   Node0 should process the second block but be stuck on the shorter chain,\n+   because it's missing an intermediate block.\n \n-4b.Send 288 more blocks on the longer chain.\n+4c.Send 288 more blocks on the longer chain (the number of blocks ahead\n+   we currently store).\n    Node0 should process all but the last block (too far ahead in height).\n-   Send all headers to Node1, and then send the last block in that chain.\n-   Node1 should accept the block because it's coming from a whitelisted peer.\n \n 5. Send a duplicate of the block in #3 to Node0.\n    Node0 should not process the block because it is unrequested, and stay on\n@@ -52,7 +42,7 @@\n 7. Send Node0 the missing block again.\n    Node0 should process and the tip should advance.\n \n-8. Test Node2 is able to sync when connected to node0 (which should have sufficient\n+8. Test Node1 is able to sync when connected to node0 (which should have sufficient\n work on its chain).\n \n \"\"\"\n@@ -71,8 +61,8 @@ def add_options(self, parser):\n \n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 3\n-        self.extra_args = [[], [\"-whitelist=127.0.0.1\"], [\"-minimumchainwork=0x10\"]]\n+        self.num_nodes = 2\n+        self.extra_args = [[], [\"-minimumchainwork=0x10\"]]\n \n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n@@ -84,132 +74,149 @@ def setup_network(self):\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n-        test_node = NodeConnCB()   # connects to node0 (not whitelisted)\n-        white_node = NodeConnCB()  # connects to node1 (whitelisted)\n-        min_work_node = NodeConnCB()  # connects to node2 (not whitelisted)\n+        test_node = NodeConnCB()   # connects to node0\n+        min_work_node = NodeConnCB()  # connects to node1\n \n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node))\n-        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], white_node))\n-        connections.append(NodeConn('127.0.0.1', p2p_port(2), self.nodes[2], min_work_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], min_work_node))\n         test_node.add_connection(connections[0])\n-        white_node.add_connection(connections[1])\n-        min_work_node.add_connection(connections[2])\n+        min_work_node.add_connection(connections[1])\n \n         NetworkThread().start() # Start up network handling in another thread\n \n         # Test logic begins here\n         test_node.wait_for_verack()\n-        white_node.wait_for_verack()\n         min_work_node.wait_for_verack()\n \n-        # 1. Have nodes mine a block (nodes1/2 leave IBD)\n+        # 1. Have nodes mine a block (leave IBD)\n         [ n.generate(1) for n in self.nodes ]\n         tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n \n         # 2. Send one block that builds on each tip.\n-        # This should be accepted by nodes 1/2\n+        # This should be accepted by node0\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n         block_time = int(time.time()) + 1\n-        for i in range(3):\n+        for i in range(2):\n             blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()\n             block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n-        white_node.send_message(msg_block(blocks_h2[1]))\n-        min_work_node.send_message(msg_block(blocks_h2[2]))\n+        min_work_node.send_message(msg_block(blocks_h2[1]))\n \n-        for x in [test_node, white_node, min_work_node]:\n+        for x in [test_node, min_work_node]:\n             x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n-        assert_equal(self.nodes[1].getblockcount(), 2)\n-        assert_equal(self.nodes[2].getblockcount(), 1)\n-        self.log.info(\"First height 2 block accepted by node0/node1; correctly rejected by node2\")\n+        assert_equal(self.nodes[1].getblockcount(), 1)\n+        self.log.info(\"First height 2 block accepted by node0; correctly rejected by node1\")\n \n-        # 3. Send another block that builds on the original tip.\n-        blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n-        for i in range(2):\n-            blocks_h2f.append(create_block(tips[i], create_coinbase(2), blocks_h2[i].nTime+1))\n-            blocks_h2f[i].solve()\n-        test_node.send_message(msg_block(blocks_h2f[0]))\n-        white_node.send_message(msg_block(blocks_h2f[1]))\n+        # 3. Send another block that builds on genesis.\n+        block_h1f = create_block(int(\"0x\" + self.nodes[0].getblockhash(0), 0), create_coinbase(1), block_time)\n+        block_time += 1\n+        block_h1f.solve()\n+        test_node.send_message(msg_block(block_h1f))\n \n-        for x in [test_node, white_node]:\n-            x.sync_with_ping()\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n         for x in self.nodes[0].getchaintips():\n-            if x['hash'] == blocks_h2f[0].hash:\n+            if x['hash'] == block_h1f.hash:\n                 assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, block_h1f.hash)\n+\n+        # 4. Send another two block that build on the fork.\n+        block_h2f = create_block(block_h1f.sha256, create_coinbase(2), block_time)\n+        block_time += 1\n+        block_h2f.solve()\n+        test_node.send_message(msg_block(block_h2f))\n \n-        for x in self.nodes[1].getchaintips():\n-            if x['hash'] == blocks_h2f[1].hash:\n-                assert_equal(x['status'], \"valid-headers\")\n+        test_node.sync_with_ping()\n+        # Since the earlier block was not processed by node, the new block\n+        # can't be fully validated.\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_h2f.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n \n-        self.log.info(\"Second height 2 block accepted only from whitelisted peer\")\n+        # But this block should be accepted by node since it has equal work.\n+        # TODO: We currently drop this block but likely shouldn't\n+        #self.nodes[0].getblock(block_h2f.hash)\n+        self.log.info(\"Second height 2 block accepted, but not reorg'ed to\")\n \n-        # 4. Now send another block that builds on the forking chain.\n-        blocks_h3 = []\n-        for i in range(2):\n-            blocks_h3.append(create_block(blocks_h2f[i].sha256, create_coinbase(3), blocks_h2f[i].nTime+1))\n-            blocks_h3[i].solve()\n-        test_node.send_message(msg_block(blocks_h3[0]))\n-        white_node.send_message(msg_block(blocks_h3[1]))\n+        # 4b. Now send another block that builds on the forking chain.\n+        block_h3 = create_block(block_h2f.sha256, create_coinbase(3), block_h2f.nTime+1)\n+        block_h3.solve()\n+        test_node.send_message(msg_block(block_h3))\n \n-        for x in [test_node, white_node]:\n-            x.sync_with_ping()\n-        # Since the earlier block was not processed by node0, the new block\n+        test_node.sync_with_ping()\n+        # Since the earlier block was not processed by node, the new block\n         # can't be fully validated.\n+        tip_entry_found = False\n         for x in self.nodes[0].getchaintips():\n-            if x['hash'] == blocks_h3[0].hash:\n+            if x['hash'] == block_h3.hash:\n                 assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+        self.nodes[0].getblock(block_h3.hash)\n+\n+        # But this block should be accepted by node since it has more work.\n+        self.nodes[0].getblock(block_h3.hash)\n+        self.log.info(\"Unrequested more-work block accepted\")\n+\n+        # 4c. Now mine 288 more blocks and deliver; all should be processed but\n+        # the last (height-too-high) on node (as long as its not missing any headers)\n+        tip = block_h3\n+        all_blocks = []\n+        for i in range(288):\n+            next_block = create_block(tip.sha256, create_coinbase(i + 4), tip.nTime+1)\n+            next_block.solve()\n+            all_blocks.append(next_block)\n+            tip = next_block\n+\n+        # Now send the block at height 5 and check that it wasn't accepted (missing header)\n+        test_node.send_message(msg_block(all_blocks[1]))\n+        test_node.sync_with_ping()\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getblock, all_blocks[1].hash)\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getblockheader, all_blocks[1].hash)\n \n-        # But this block should be accepted by node0 since it has more work.\n-        self.nodes[0].getblock(blocks_h3[0].hash)\n-        self.log.info(\"Unrequested more-work block accepted from non-whitelisted peer\")\n+        # The block at height 5 should be accepted if we provide the missing header, though\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(all_blocks[0]))\n+        test_node.send_message(headers_message)\n+        test_node.send_message(msg_block(all_blocks[1]))\n+        test_node.sync_with_ping()\n+        self.nodes[0].getblock(all_blocks[1].hash)\n \n-        # Node1 should have accepted and reorged.\n-        assert_equal(self.nodes[1].getblockcount(), 3)\n-        self.log.info(\"Successfully reorged to length 3 chain from whitelisted peer\")\n+        # Now send the blocks in all_blocks\n+        for i in range(288):\n+            test_node.send_message(msg_block(all_blocks[i]))\n+        test_node.sync_with_ping()\n \n-        # 4b. Now mine 288 more blocks and deliver; all should be processed but\n-        # the last (height-too-high) on node0.  Node1 should process the tip if\n-        # we give it the headers chain leading to the tip.\n-        tips = blocks_h3\n-        headers_message = msg_headers()\n-        all_blocks = []   # node0's blocks\n-        for j in range(2):\n-            for i in range(288):\n-                next_block = create_block(tips[j].sha256, create_coinbase(i + 4), tips[j].nTime+1)\n-                next_block.solve()\n-                if j==0:\n-                    test_node.send_message(msg_block(next_block))\n-                    all_blocks.append(next_block)\n-                else:\n-                    headers_message.headers.append(CBlockHeader(next_block))\n-                tips[j] = next_block\n-\n-        time.sleep(2)\n         # Blocks 1-287 should be accepted, block 288 should be ignored because it's too far ahead\n         for x in all_blocks[:-1]:\n             self.nodes[0].getblock(x.hash)\n         assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n \n-        headers_message.headers.pop() # Ensure the last block is unrequested\n-        white_node.send_message(headers_message) # Send headers leading to tip\n-        white_node.send_message(msg_block(tips[1]))  # Now deliver the tip\n-        white_node.sync_with_ping()\n-        self.nodes[1].getblock(tips[1].hash)\n-        self.log.info(\"Unrequested block far ahead of tip accepted from whitelisted peer\")\n-\n         # 5. Test handling of unrequested block on the node that didn't process\n         # Should still not be processed (even though it has a child that has more\n         # work).\n-        test_node.send_message(msg_block(blocks_h2f[0]))\n \n-        # Here, if the sleep is too short, the test could falsely succeed (if the\n-        # node hasn't processed the block by the time the sleep returns, and then\n-        # the node processes it and incorrectly advances the tip).\n-        # But this would be caught later on, when we verify that an inv triggers\n-        # a getdata request for this block.\n+        # The node should have requested the blocks at some point, so\n+        # disconnect/reconnect first\n+        connections[0].disconnect_node()\n+        test_node.wait_for_disconnect()\n+\n+        test_node = NodeConnCB()   # connects to node (not whitelisted)\n+        connections[0] = NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node)\n+        test_node.add_connection(connections[0])\n+\n+        test_node.wait_for_verack()\n+        test_node.send_message(msg_block(block_h1f))\n+        test_node.send_message(msg_block(block_h2f)) # This should not be required\n+\n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         self.log.info(\"Unrequested block that would complete more-work chain was ignored\")\n@@ -220,27 +227,28 @@ def run_test(self):\n         with mininode_lock:\n             # Clear state so we can check the getdata request\n             test_node.last_message.pop(\"getdata\", None)\n-            test_node.send_message(msg_inv([CInv(2, blocks_h3[0].sha256)]))\n+            test_node.send_message(msg_inv([CInv(2, block_h3.sha256)]))\n \n         test_node.sync_with_ping()\n         with mininode_lock:\n             getdata = test_node.last_message[\"getdata\"]\n \n         # Check that the getdata includes the right block\n-        assert_equal(getdata.inv[0].hash, blocks_h2f[0].sha256)\n+        assert_equal(getdata.inv[0].hash, block_h1f.sha256)\n         self.log.info(\"Inv at tip triggered getdata for unprocessed block\")\n \n         # 7. Send the missing block for the third time (now it is requested)\n-        test_node.send_message(msg_block(blocks_h2f[0]))\n+        test_node.send_message(msg_block(block_h1f))\n+        test_node.send_message(msg_block(block_h2f)) # This should not be required\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n-        # 8. Connect node2 to node0 and ensure it is able to sync\n-        connect_nodes(self.nodes[0], 2)\n-        sync_blocks([self.nodes[0], self.nodes[2]])\n-        self.log.info(\"Successfully synced nodes 2 and 0\")\n+        # 8. Connect node1 to node0 and ensure it is able to sync\n+        connect_nodes(self.nodes[0], 1)\n+        sync_blocks([self.nodes[0], self.nodes[1]])\n+        self.log.info(\"Successfully synced nodes 1 and 0\")\n \n         [ c.disconnect_node() for c in connections ]\n "
      }
    ]
  },
  {
    "sha": "c6e4d0ce82cfd9fb775ba5ca5874af207585837b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmU0ZDBjZTgyY2ZkOWZiNzc1YmE1Y2E1ODc0YWYyMDc1ODU4Mzdi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-11T20:01:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:20:45Z"
      },
      "message": "Stop always storing blocks from whitelisted peers\n\nThere is no reason to wish to store blocks on disk always just\nbecause a peer is whitelisted. This appears to be a historical\nquirk to avoid breaking things when the accept limits were added.\n\nGithub-Pull: #11531\nRebased-From: 3d9c70ca0fd5d42f31114b689714af1825f0ed30",
      "tree": {
        "sha": "c48fc38eeb17af46c9cb054a8d7703e3361c6a31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c48fc38eeb17af46c9cb054a8d7703e3361c6a31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6e4d0ce82cfd9fb775ba5ca5874af207585837b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6e4d0ce82cfd9fb775ba5ca5874af207585837b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6e4d0ce82cfd9fb775ba5ca5874af207585837b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6e4d0ce82cfd9fb775ba5ca5874af207585837b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e976c36ddf183982d172da3127dc613111a25b42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e976c36ddf183982d172da3127dc613111a25b42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e976c36ddf183982d172da3127dc613111a25b42"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 1,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0697c6bea57e6318d23a820cd2e14b6bbfc5acc5",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6e4d0ce82cfd9fb775ba5ca5874af207585837b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6e4d0ce82cfd9fb775ba5ca5874af207585837b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c6e4d0ce82cfd9fb775ba5ca5874af207585837b",
        "patch": "@@ -2509,11 +2509,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom->GetId());\n \n-        // Process all blocks from whitelisted peers, even if not requested,\n-        // unless we're still syncing with the network.\n-        // Such an unrequested block may still be processed, subject to the\n-        // conditions in AcceptBlock().\n-        bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        bool forceProcessing = false;\n         const uint256 hash(pblock->GetHash());\n         {\n             LOCK(cs_main);"
      }
    ]
  },
  {
    "sha": "51001d684b1b26ea5109986b7317ffe24bf71b43",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTAwMWQ2ODRiMWIyNmVhNTEwOTk4NmI3MzE3ZmZlMjRiZjcxYjQz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-11T20:04:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:20:53Z"
      },
      "message": "Accept unrequested blocks with work equal to our tip\n\nThis is a simple change that makes our accept requirements the\nsame as our request requirements, (ever so slightly) further\ndecoupling our consensus logic from our FindNextBlocksToDownload\nlogic in net_processing.\n\nGithub-Pull: #11531\nRebased-From: 932f118e6a3779bb3d6c3cc83963cf34ac150e42",
      "tree": {
        "sha": "28ea95b7324d688fff13fd90a678800a49857a31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28ea95b7324d688fff13fd90a678800a49857a31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51001d684b1b26ea5109986b7317ffe24bf71b43",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51001d684b1b26ea5109986b7317ffe24bf71b43",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51001d684b1b26ea5109986b7317ffe24bf71b43",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51001d684b1b26ea5109986b7317ffe24bf71b43/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6e4d0ce82cfd9fb775ba5ca5874af207585837b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6e4d0ce82cfd9fb775ba5ca5874af207585837b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6e4d0ce82cfd9fb775ba5ca5874af207585837b"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "c641cae7e9b6543f6a610e62d896e728eb742bfa",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51001d684b1b26ea5109986b7317ffe24bf71b43/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51001d684b1b26ea5109986b7317ffe24bf71b43/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=51001d684b1b26ea5109986b7317ffe24bf71b43",
        "patch": "@@ -3102,7 +3102,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     // process an unrequested block if it's new and has enough work to\n     // advance our tip, and isn't too many blocks ahead.\n     bool fAlreadyHave = pindex->nStatus & BLOCK_HAVE_DATA;\n-    bool fHasMoreWork = (chainActive.Tip() ? pindex->nChainWork > chainActive.Tip()->nChainWork : true);\n+    bool fHasMoreOrSameWork = (chainActive.Tip() ? pindex->nChainWork >= chainActive.Tip()->nChainWork : true);\n     // Blocks that are too out-of-order needlessly limit the effectiveness of\n     // pruning, because pruning will not delete block files that contain any\n     // blocks which are too close in height to the tip.  Apply this test\n@@ -3119,9 +3119,9 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     // and unrequested blocks.\n     if (fAlreadyHave) return true;\n     if (!fRequested) {  // If we didn't ask for it:\n-        if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n-        if (!fHasMoreWork) return true;     // Don't process less-work chains\n-        if (fTooFarAhead) return true;      // Block height is too high\n+        if (pindex->nTx != 0) return true;    // This is a previously-processed block that was pruned\n+        if (!fHasMoreOrSameWork) return true; // Don't process less-work chains\n+        if (fTooFarAhead) return true;        // Block height is too high\n \n         // Protect against DoS attacks from low-work chains.\n         // If our tip is behind, a peer could try to send us"
      },
      {
        "sha": "36e0bd9ec68ce95bcb70e0e6135ac0f7dd631833",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51001d684b1b26ea5109986b7317ffe24bf71b43/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51001d684b1b26ea5109986b7317ffe24bf71b43/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=51001d684b1b26ea5109986b7317ffe24bf71b43",
        "patch": "@@ -142,8 +142,7 @@ def run_test(self):\n         assert(tip_entry_found)\n \n         # But this block should be accepted by node since it has equal work.\n-        # TODO: We currently drop this block but likely shouldn't\n-        #self.nodes[0].getblock(block_h2f.hash)\n+        self.nodes[0].getblock(block_h2f.hash)\n         self.log.info(\"Second height 2 block accepted, but not reorg'ed to\")\n \n         # 4b. Now send another block that builds on the forking chain.\n@@ -215,7 +214,6 @@ def run_test(self):\n \n         test_node.wait_for_verack()\n         test_node.send_message(msg_block(block_h1f))\n-        test_node.send_message(msg_block(block_h2f)) # This should not be required\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n@@ -239,7 +237,6 @@ def run_test(self):\n \n         # 7. Send the missing block for the third time (now it is requested)\n         test_node.send_message(msg_block(block_h1f))\n-        test_node.send_message(msg_block(block_h2f)) # This should not be required\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)"
      }
    ]
  },
  {
    "sha": "92d6105c4e571e557348771bf39bf7bbacc81cd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MmQ2MTA1YzRlNTcxZTU1NzM0ODc3MWJmMzliZjdiYmFjYzgxY2Qx",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-19T20:55:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:21:07Z"
      },
      "message": "Reject headers building on invalid chains by tracking invalidity\n\nThis tracks the set of all known invalid-themselves blocks (ie\nblocks which we attempted to connect but which were found to be\ninvalid). This is used to cheaply check if new headers build on an\ninvalid chain.\n\nWhile we're at it we also resolve an edge-case in invalidateblock\non pruned nodes which results in them needing a reindex if they\nfail to reorg.\n\nGithub-Pull: #11531\nRebased-From: 015a5258adffb0cf394f387a95ac9c8afc34cfc3",
      "tree": {
        "sha": "be7a9abc595acbf2e60835fb4751bf0af329ad7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/be7a9abc595acbf2e60835fb4751bf0af329ad7d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/92d6105c4e571e557348771bf39bf7bbacc81cd1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92d6105c4e571e557348771bf39bf7bbacc81cd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/92d6105c4e571e557348771bf39bf7bbacc81cd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92d6105c4e571e557348771bf39bf7bbacc81cd1/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51001d684b1b26ea5109986b7317ffe24bf71b43",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51001d684b1b26ea5109986b7317ffe24bf71b43",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51001d684b1b26ea5109986b7317ffe24bf71b43"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 66,
      "deletions": 8
    },
    "files": [
      {
        "sha": "8a92992dba778042973d36a26407095fd6953ef3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 8,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/92d6105c4e571e557348771bf39bf7bbacc81cd1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/92d6105c4e571e557348771bf39bf7bbacc81cd1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=92d6105c4e571e557348771bf39bf7bbacc81cd1",
        "patch": "@@ -153,6 +153,26 @@ namespace {\n     /** chainwork for the last block that preciousblock has been applied to. */\n     arith_uint256 nLastPreciousChainwork = 0;\n \n+    /** In order to efficiently track invalidity of headers, we keep the set of\n+      * blocks which we tried to connect and found to be invalid here (ie which\n+      * were set to BLOCK_FAILED_VALID since the last restart). We can then\n+      * walk this set and check if a new header is a descendant of something in\n+      * this set, preventing us from having to walk mapBlockIndex when we try\n+      * to connect a bad block and fail.\n+      *\n+      * While this is more complicated than marking everything which descends\n+      * from an invalid block as invalid at the time we discover it to be\n+      * invalid, doing so would require walking all of mapBlockIndex to find all\n+      * descendants. Since this case should be very rare, keeping track of all\n+      * BLOCK_FAILED_VALID blocks in a set should be just fine and work just as\n+      * well.\n+      *\n+      * Because we alreardy walk mapBlockIndex in height-order at startup, we go\n+      * ahead and mark descendants of invalid blocks as FAILED_CHILD at that time,\n+      * instead of putting things in this set.\n+      */\n+    std::set<CBlockIndex*> g_failed_blocks;\n+\n     /** Dirty block index entries. */\n     std::set<CBlockIndex*> setDirtyBlockIndex;\n \n@@ -1168,6 +1188,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n     if (!state.CorruptionPossible()) {\n         pindex->nStatus |= BLOCK_FAILED_VALID;\n+        g_failed_blocks.insert(pindex);\n         setDirtyBlockIndex.insert(pindex);\n         setBlockIndexCandidates.erase(pindex);\n         InvalidChainFound(pindex);\n@@ -2517,17 +2538,18 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n {\n     AssertLockHeld(cs_main);\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n+    // We first disconnect backwards and then mark the blocks as invalid.\n+    // This prevents a case where pruned nodes may fail to invalidateblock\n+    // and be left unable to start as they have no tip candidates (as there\n+    // are no blocks that meet the \"have data and are not invalid per\n+    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n+\n+    bool pindex_was_in_chain = false;\n+    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n     DisconnectedBlockTransactions disconnectpool;\n     while (chainActive.Contains(pindex)) {\n-        CBlockIndex *pindexWalk = chainActive.Tip();\n-        pindexWalk->nStatus |= BLOCK_FAILED_CHILD;\n-        setDirtyBlockIndex.insert(pindexWalk);\n-        setBlockIndexCandidates.erase(pindexWalk);\n+        pindex_was_in_chain = true;\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n         if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n@@ -2538,6 +2560,21 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n         }\n     }\n \n+    // Now mark the blocks we just disconnected as descendants invalid\n+    // (note this may not be all descendants).\n+    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n+        setDirtyBlockIndex.insert(invalid_walk_tip);\n+        setBlockIndexCandidates.erase(invalid_walk_tip);\n+        invalid_walk_tip = invalid_walk_tip->pprev;\n+    }\n+\n+    // Mark the block itself as invalid.\n+    pindex->nStatus |= BLOCK_FAILED_VALID;\n+    setDirtyBlockIndex.insert(pindex);\n+    setBlockIndexCandidates.erase(pindex);\n+    g_failed_blocks.insert(pindex);\n+\n     // DisconnectTip will add transactions to disconnectpool; try to add these\n     // back to the mempool.\n     UpdateMempoolForReorg(disconnectpool, true);\n@@ -2575,6 +2612,7 @@ bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n                 // Reset invalid block marker if it was pointing to one of those.\n                 pindexBestInvalid = nullptr;\n             }\n+            g_failed_blocks.erase(it->second);\n         }\n         it++;\n     }\n@@ -3051,6 +3089,21 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+\n+        if (!pindexPrev->IsValid(BLOCK_VALID_SCRIPTS)) {\n+            for (const CBlockIndex* failedit : g_failed_blocks) {\n+                if (pindexPrev->GetAncestor(failedit->nHeight) == failedit) {\n+                    assert(failedit->nStatus & BLOCK_FAILED_VALID);\n+                    CBlockIndex* invalid_walk = pindexPrev;\n+                    while (invalid_walk != failedit) {\n+                        invalid_walk->nStatus |= BLOCK_FAILED_CHILD;\n+                        setDirtyBlockIndex.insert(invalid_walk);\n+                        invalid_walk = invalid_walk->pprev;\n+                    }\n+                    return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+                }\n+            }\n+        }\n     }\n     if (pindex == nullptr)\n         pindex = AddToBlockIndex(block);\n@@ -3477,6 +3530,10 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n                 pindex->nChainTx = pindex->nTx;\n             }\n         }\n+        if (!(pindex->nStatus & BLOCK_FAILED_MASK) && pindex->pprev && (pindex->pprev->nStatus & BLOCK_FAILED_MASK)) {\n+            pindex->nStatus |= BLOCK_FAILED_CHILD;\n+            setDirtyBlockIndex.insert(pindex);\n+        }\n         if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && (pindex->nChainTx || pindex->pprev == nullptr))\n             setBlockIndexCandidates.insert(pindex);\n         if (pindex->nStatus & BLOCK_FAILED_MASK && (!pindexBestInvalid || pindex->nChainWork > pindexBestInvalid->nChainWork))\n@@ -3867,6 +3924,7 @@ void UnloadBlockIndex()\n     nLastBlockFile = 0;\n     nBlockSequenceId = 1;\n     setDirtyBlockIndex.clear();\n+    g_failed_blocks.clear();\n     setDirtyFileInfo.clear();\n     versionbitscache.Clear();\n     for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {"
      }
    ]
  },
  {
    "sha": "5bec7744d112141848e57d7f628dc17597f89dd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YmVjNzc0NGQxMTIxNDE4NDhlNTdkN2Y2MjhkYzE3NTk3Zjg5ZGQ1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-11T20:57:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:21:23Z"
      },
      "message": "[qa] test that invalid blocks on an invalid chain get a disconnect\n\nGithub-Pull: #11531\nRebased-From: 00dcda60f6ee63d35bec640f27efe2338dd71270",
      "tree": {
        "sha": "70b7d79d4502ae40463bee8bddb3ad9d05fbc4a1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70b7d79d4502ae40463bee8bddb3ad9d05fbc4a1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5bec7744d112141848e57d7f628dc17597f89dd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bec7744d112141848e57d7f628dc17597f89dd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5bec7744d112141848e57d7f628dc17597f89dd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bec7744d112141848e57d7f628dc17597f89dd5/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92d6105c4e571e557348771bf39bf7bbacc81cd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92d6105c4e571e557348771bf39bf7bbacc81cd1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92d6105c4e571e557348771bf39bf7bbacc81cd1"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 80,
      "deletions": 4
    },
    "files": [
      {
        "sha": "220b7763694ed54f14b3403722ddacc5a544bad8",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 80,
        "deletions": 4,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5bec7744d112141848e57d7f628dc17597f89dd5/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5bec7744d112141848e57d7f628dc17597f89dd5/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=5bec7744d112141848e57d7f628dc17597f89dd5",
        "patch": "@@ -42,16 +42,20 @@\n 7. Send Node0 the missing block again.\n    Node0 should process and the tip should advance.\n \n-8. Test Node1 is able to sync when connected to node0 (which should have sufficient\n-work on its chain).\n+8. Create a fork which is invalid at a height longer than the current chain\n+   (ie to which the node will try to reorg) but which has headers built on top\n+   of the invalid block. Check that we get disconnected if we send more headers\n+   on the chain the node now knows to be invalid.\n \n+9. Test Node1 is able to sync when connected to node0 (which should have sufficient\n+   work on its chain).\n \"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n import time\n-from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n \n class AcceptBlockTest(BitcoinTestFramework):\n     def add_options(self, parser):\n@@ -240,9 +244,81 @@ def run_test(self):\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n+        self.nodes[0].getblock(all_blocks[286].hash)\n+        assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[287].hash)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n-        # 8. Connect node1 to node0 and ensure it is able to sync\n+        # 8. Create a chain which is invalid at a height longer than the\n+        # current chain, but which has more blocks on top of that\n+        block_289f = create_block(all_blocks[284].sha256, create_coinbase(289), all_blocks[284].nTime+1)\n+        block_289f.solve()\n+        block_290f = create_block(block_289f.sha256, create_coinbase(290), block_289f.nTime+1)\n+        block_290f.solve()\n+        block_291 = create_block(block_290f.sha256, create_coinbase(291), block_290f.nTime+1)\n+        # block_291 spends a coinbase below maturity!\n+        block_291.vtx.append(create_transaction(block_290f.vtx[0], 0, b\"42\", 1))\n+        block_291.hashMerkleRoot = block_291.calc_merkle_root()\n+        block_291.solve()\n+        block_292 = create_block(block_291.sha256, create_coinbase(292), block_291.nTime+1)\n+        block_292.solve()\n+\n+        # Now send all the headers on the chain and enough blocks to trigger reorg\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(block_289f))\n+        headers_message.headers.append(CBlockHeader(block_290f))\n+        headers_message.headers.append(CBlockHeader(block_291))\n+        headers_message.headers.append(CBlockHeader(block_292))\n+        test_node.send_message(headers_message)\n+\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_292.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, block_292.hash)\n+\n+        test_node.send_message(msg_block(block_289f))\n+        test_node.send_message(msg_block(block_290f))\n+\n+        test_node.sync_with_ping()\n+        self.nodes[0].getblock(block_289f.hash)\n+        self.nodes[0].getblock(block_290f.hash)\n+\n+        test_node.send_message(msg_block(block_291))\n+\n+        # At this point we've sent an obviously-bogus block, wait for full processing\n+        # without assuming whether we will be disconnected or not\n+        try:\n+            # Only wait a short while so the test doesn't take forever if we do get\n+            # disconnected\n+            test_node.sync_with_ping(timeout=1)\n+        except AssertionError:\n+            test_node.wait_for_disconnect()\n+\n+            test_node = NodeConnCB()   # connects to node (not whitelisted)\n+            connections[0] = NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node)\n+            test_node.add_connection(connections[0])\n+\n+            NetworkThread().start() # Start up network handling in another thread\n+            test_node.wait_for_verack()\n+\n+        # We should have failed reorg and switched back to 290 (but have block 291)\n+        assert_equal(self.nodes[0].getblockcount(), 290)\n+        assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n+        assert_equal(self.nodes[0].getblock(block_291.hash)[\"confirmations\"], -1)\n+\n+        # Now send a new header on the invalid chain, indicating we're forked off, and expect to get disconnected\n+        block_293 = create_block(block_292.sha256, create_coinbase(293), block_292.nTime+1)\n+        block_293.solve()\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(block_293))\n+        test_node.send_message(headers_message)\n+        test_node.wait_for_disconnect()\n+\n+        # 9. Connect node1 to node0 and ensure it is able to sync\n         connect_nodes(self.nodes[0], 1)\n         sync_blocks([self.nodes[0], self.nodes[1]])\n         self.log.info(\"Successfully synced nodes 1 and 0\")"
      }
    ]
  },
  {
    "sha": "55b7abfa8a7dd1400f4399f734a1b2b6b439d52a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NWI3YWJmYThhN2RkMTQwMGY0Mzk5ZjczNGExYjJiNmI0MzlkNTJh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-10-31T01:28:42Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T17:22:25Z"
      },
      "message": "Make p2p-acceptablock not an extended test\n\nGithub-Pull: #11531\nRebased-From: f3d4adfa6ff5db180ec09d93f78cdc8bfda26f96",
      "tree": {
        "sha": "41f8397dba29195f6de0b2be5eb64bd3cbba5481",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41f8397dba29195f6de0b2be5eb64bd3cbba5481"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/55b7abfa8a7dd1400f4399f734a1b2b6b439d52a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55b7abfa8a7dd1400f4399f734a1b2b6b439d52a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/55b7abfa8a7dd1400f4399f734a1b2b6b439d52a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55b7abfa8a7dd1400f4399f734a1b2b6b439d52a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bec7744d112141848e57d7f628dc17597f89dd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bec7744d112141848e57d7f628dc17597f89dd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bec7744d112141848e57d7f628dc17597f89dd5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ca74bb68da7dc2acc7728323c7f5062543c109ba",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/55b7abfa8a7dd1400f4399f734a1b2b6b439d52a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/55b7abfa8a7dd1400f4399f734a1b2b6b439d52a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=55b7abfa8a7dd1400f4399f734a1b2b6b439d52a",
        "patch": "@@ -122,6 +122,7 @@\n     'uptime.py',\n     'resendwallettransactions.py',\n     'minchainwork.py',\n+    'p2p-acceptblock.py',\n ]\n \n EXTENDED_SCRIPTS = [\n@@ -149,7 +150,6 @@\n     'txn_clone.py --mineblock',\n     'forknotify.py',\n     'invalidateblock.py',\n-    'p2p-acceptblock.py',\n     'replace-by-fee.py',\n ]\n "
      }
    ]
  },
  {
    "sha": "6baa317b5fa615d463cdf0a2095533f6c10c84de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmFhMzE3YjVmYTYxNWQ0NjNjZGYwYTIwOTU1MzNmNmMxMGM4NGRl",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-11-02T19:02:48Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-11-02T19:02:48Z"
      },
      "message": "Fix minchainwork test for 0.15 backport",
      "tree": {
        "sha": "aa7da4541ff7c7a274982c9fcf45f18f6494add5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa7da4541ff7c7a274982c9fcf45f18f6494add5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6baa317b5fa615d463cdf0a2095533f6c10c84de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6baa317b5fa615d463cdf0a2095533f6c10c84de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6baa317b5fa615d463cdf0a2095533f6c10c84de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6baa317b5fa615d463cdf0a2095533f6c10c84de/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "55b7abfa8a7dd1400f4399f734a1b2b6b439d52a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/55b7abfa8a7dd1400f4399f734a1b2b6b439d52a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/55b7abfa8a7dd1400f4399f734a1b2b6b439d52a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e136dc2b7c00a94032562aa538ec50d7cab2b310",
        "filename": "test/functional/minchainwork.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6baa317b5fa615d463cdf0a2095533f6c10c84de/test/functional/minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6baa317b5fa615d463cdf0a2095533f6c10c84de/test/functional/minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/minchainwork.py?ref=6baa317b5fa615d463cdf0a2095533f6c10c84de",
        "patch": "@@ -81,6 +81,10 @@ def run_test(self):\n         # we'd expect node1 to have disconnected node0 for serving an\n         # insufficient work chain, in which case we'd need to reconnect them to\n         # continue the test.\n+        # NOTE: before commit 44407100ff9b478d6131a1c38ee993b50b1830df, regtest\n+        # connections were not manual, so the reconnect is necessary.\n+        if (len(self.nodes[0].getpeerinfo()) == 0):\n+            connect_nodes(self.nodes[1], 0)\n \n         self.sync_all()\n         self.log.info(\"Blockcounts: %s\", [n.getblockcount() for n in self.nodes])"
      }
    ]
  },
  {
    "sha": "7871a7d3be4b89e1605ca29c2269c08f3ae68472",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODcxYTdkM2JlNGI4OWUxNjA1Y2EyOWMyMjY5YzA4ZjNhZTY4NDcy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-24T15:36:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T19:18:56Z"
      },
      "message": "Deprecate confusing blockmaxsize, fix getmininginfo output\n\n* This removes block-size-limiting code in favor of GBT clients\n  doing the limiting themselves (if at all).\n* -blockmaxsize is deprecated and only used to calculate an implied\n  blockmaxweight, addressing confusion from multiple users.\n* getmininginfo's currentblocksize return value was returning\n  garbage values, and has been removed, also removing a\n  GetSerializeSize call in some block generation inner loops and\n  potentially addressing some performance edge cases.\n\nGithub-Pull: #11100\nRebased-From: ba206d2c63a8d3cbd4a8dd47e9ef126af1bb3bb9",
      "tree": {
        "sha": "2b34fb69d7c925d37af2e3ce8a094930a14219b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b34fb69d7c925d37af2e3ce8a094930a14219b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7871a7d3be4b89e1605ca29c2269c08f3ae68472",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7871a7d3be4b89e1605ca29c2269c08f3ae68472",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7871a7d3be4b89e1605ca29c2269c08f3ae68472",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7871a7d3be4b89e1605ca29c2269c08f3ae68472/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6baa317b5fa615d463cdf0a2095533f6c10c84de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6baa317b5fa615d463cdf0a2095533f6c10c84de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6baa317b5fa615d463cdf0a2095533f6c10c84de"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 13,
      "deletions": 46
    },
    "files": [
      {
        "sha": "4282b0911dad6a5387565e7e042fbae450125eae",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7871a7d3be4b89e1605ca29c2269c08f3ae68472/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7871a7d3be4b89e1605ca29c2269c08f3ae68472/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7871a7d3be4b89e1605ca29c2269c08f3ae68472",
        "patch": "@@ -500,7 +500,7 @@ std::string HelpMessage(HelpMessageMode mode)\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n     strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n-    strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n+    strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", _(\"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\"));\n     strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n@@ -802,6 +802,15 @@ void InitParameterInteraction()\n         if (gArgs.SoftSetBoolArg(\"-whitelistrelay\", true))\n             LogPrintf(\"%s: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1\\n\", __func__);\n     }\n+\n+    if (gArgs.IsArgSet(\"-blockmaxsize\")) {\n+        unsigned int max_size = gArgs.GetArg(\"-blockmaxsize\", 0);\n+        if (gArgs.SoftSetArg(\"blockmaxweight\", strprintf(\"%d\", max_size * WITNESS_SCALE_FACTOR))) {\n+            LogPrintf(\"%s: parameter interaction: -blockmaxsize=%d -> setting -blockmaxweight=%d (-blockmaxsize is deprecated!)\\n\", __func__, max_size, max_size * WITNESS_SCALE_FACTOR);\n+        } else {\n+            LogPrintf(\"%s: Ignoring blockmaxsize setting which is overridden by blockmaxweight\", __func__);\n+        }\n+    }\n }\n \n static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)"
      },
      {
        "sha": "9d571a2eb02295837365019d109eba8ca36e7761",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 36,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7871a7d3be4b89e1605ca29c2269c08f3ae68472/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7871a7d3be4b89e1605ca29c2269c08f3ae68472/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7871a7d3be4b89e1605ca29c2269c08f3ae68472",
        "patch": "@@ -43,7 +43,6 @@\n // its ancestors.\n \n uint64_t nLastBlockTx = 0;\n-uint64_t nLastBlockSize = 0;\n uint64_t nLastBlockWeight = 0;\n \n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n@@ -64,18 +63,13 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n BlockAssembler::Options::Options() {\n     blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n-    nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n }\n \n BlockAssembler::BlockAssembler(const CChainParams& params, const Options& options) : chainparams(params)\n {\n     blockMinFeeRate = options.blockMinFeeRate;\n     // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n     nBlockMaxWeight = std::max<size_t>(4000, std::min<size_t>(MAX_BLOCK_WEIGHT - 4000, options.nBlockMaxWeight));\n-    // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n-    nBlockMaxSize = std::max<size_t>(1000, std::min<size_t>(MAX_BLOCK_SERIALIZED_SIZE - 1000, options.nBlockMaxSize));\n-    // Whether we need to account for byte usage (in addition to weight usage)\n-    fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE - 1000);\n }\n \n static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n@@ -85,20 +79,7 @@ static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n     // If only one is given, only restrict the specified resource.\n     // If both are given, restrict both.\n     BlockAssembler::Options options;\n-    options.nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n-    options.nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n-    bool fWeightSet = false;\n-    if (gArgs.IsArgSet(\"-blockmaxweight\")) {\n-        options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n-        options.nBlockMaxSize = MAX_BLOCK_SERIALIZED_SIZE;\n-        fWeightSet = true;\n-    }\n-    if (gArgs.IsArgSet(\"-blockmaxsize\")) {\n-        options.nBlockMaxSize = gArgs.GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n-        if (!fWeightSet) {\n-            options.nBlockMaxWeight = options.nBlockMaxSize * WITNESS_SCALE_FACTOR;\n-        }\n-    }\n+    options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n     if (gArgs.IsArgSet(\"-blockmintxfee\")) {\n         CAmount n = 0;\n         ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n);\n@@ -116,7 +97,6 @@ void BlockAssembler::resetBlock()\n     inBlock.clear();\n \n     // Reserve space for coinbase tx\n-    nBlockSize = 1000;\n     nBlockWeight = 4000;\n     nBlockSigOpsCost = 400;\n     fIncludeWitness = false;\n@@ -175,7 +155,6 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     int64_t nTime1 = GetTimeMicros();\n \n     nLastBlockTx = nBlockTx;\n-    nLastBlockSize = nBlockSize;\n     nLastBlockWeight = nBlockWeight;\n \n     // Create coinbase transaction.\n@@ -190,8 +169,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());\n     pblocktemplate->vTxFees[0] = -nFees;\n \n-    uint64_t nSerializeSize = GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION);\n-    LogPrintf(\"CreateNewBlock(): total size: %u block weight: %u txs: %u fees: %ld sigops %d\\n\", nSerializeSize, GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);\n+    LogPrintf(\"CreateNewBlock(): block weight: %u txs: %u fees: %ld sigops %d\\n\", GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);\n \n     // Fill in header\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n@@ -238,22 +216,13 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n // - transaction finality (locktime)\n // - premature witness (in case segwit transactions are added to mempool before\n //   segwit activation)\n-// - serialized size (in case -blockmaxsize is in use)\n bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)\n {\n-    uint64_t nPotentialBlockSize = nBlockSize; // only used with fNeedSizeAccounting\n     for (const CTxMemPool::txiter it : package) {\n         if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n             return false;\n         if (!fIncludeWitness && it->GetTx().HasWitness())\n             return false;\n-        if (fNeedSizeAccounting) {\n-            uint64_t nTxSize = ::GetSerializeSize(it->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n-            if (nPotentialBlockSize + nTxSize >= nBlockMaxSize) {\n-                return false;\n-            }\n-            nPotentialBlockSize += nTxSize;\n-        }\n     }\n     return true;\n }\n@@ -263,9 +232,6 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n     pblock->vtx.emplace_back(iter->GetSharedTx());\n     pblocktemplate->vTxFees.push_back(iter->GetFee());\n     pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    if (fNeedSizeAccounting) {\n-        nBlockSize += ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n-    }\n     nBlockWeight += iter->GetTxWeight();\n     ++nBlockTx;\n     nBlockSigOpsCost += iter->GetSigOpCost();"
      },
      {
        "sha": "f68f77c0bacc16705e17ed72d40fb5a58ee1d236",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7871a7d3be4b89e1605ca29c2269c08f3ae68472/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7871a7d3be4b89e1605ca29c2269c08f3ae68472/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=7871a7d3be4b89e1605ca29c2269c08f3ae68472",
        "patch": "@@ -139,13 +139,11 @@ class BlockAssembler\n \n     // Configuration parameters for the block size\n     bool fIncludeWitness;\n-    unsigned int nBlockMaxWeight, nBlockMaxSize;\n-    bool fNeedSizeAccounting;\n+    unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n \n     // Information on the current status of the block\n     uint64_t nBlockWeight;\n-    uint64_t nBlockSize;\n     uint64_t nBlockTx;\n     uint64_t nBlockSigOpsCost;\n     CAmount nFees;"
      },
      {
        "sha": "702471383426b77adf735d6b15de7299d6c2984b",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7871a7d3be4b89e1605ca29c2269c08f3ae68472/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7871a7d3be4b89e1605ca29c2269c08f3ae68472/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=7871a7d3be4b89e1605ca29c2269c08f3ae68472",
        "patch": "@@ -16,8 +16,6 @@\n class CCoinsViewCache;\n class CTxOut;\n \n-/** Default for -blockmaxsize, which controls the maximum size of block the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n /** Default for -blockmaxweight, which controls the range of block weights the mining code will create **/\n static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = 3000000;\n /** Default for -blockmintxfee, which sets the minimum feerate for a transaction in blocks created by mining code **/"
      },
      {
        "sha": "441cd1e8f4d4b30086274ea0eba2f5e08bb404b6",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7871a7d3be4b89e1605ca29c2269c08f3ae68472/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7871a7d3be4b89e1605ca29c2269c08f3ae68472/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=7871a7d3be4b89e1605ca29c2269c08f3ae68472",
        "patch": "@@ -195,7 +195,6 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n-            \"  \\\"currentblocksize\\\": nnn,   (numeric) The last block size\\n\"\n             \"  \\\"currentblockweight\\\": nnn, (numeric) The last block weight\\n\"\n             \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n             \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n@@ -214,7 +213,6 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n \n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n-    obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n     obj.push_back(Pair(\"currentblockweight\", (uint64_t)nLastBlockWeight));\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));"
      },
      {
        "sha": "804fb644d9943c7cacc351084bd6e3ff495f1679",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7871a7d3be4b89e1605ca29c2269c08f3ae68472/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7871a7d3be4b89e1605ca29c2269c08f3ae68472/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=7871a7d3be4b89e1605ca29c2269c08f3ae68472",
        "patch": "@@ -161,7 +161,6 @@ extern CTxMemPool mempool;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap mapBlockIndex;\n extern uint64_t nLastBlockTx;\n-extern uint64_t nLastBlockSize;\n extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n extern CWaitableCriticalSection csBestBlock;"
      },
      {
        "sha": "9aee06864efce0bbe04f0baa45e3cfd5cc48769d",
        "filename": "test/functional/mining.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7871a7d3be4b89e1605ca29c2269c08f3ae68472/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7871a7d3be4b89e1605ca29c2269c08f3ae68472/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=7871a7d3be4b89e1605ca29c2269c08f3ae68472",
        "patch": "@@ -38,7 +38,6 @@ def run_test(self):\n         mining_info = node.getmininginfo()\n         assert_equal(mining_info['blocks'], 200)\n         assert_equal(mining_info['chain'], 'regtest')\n-        assert_equal(mining_info['currentblocksize'], 0)\n         assert_equal(mining_info['currentblocktx'], 0)\n         assert_equal(mining_info['currentblockweight'], 0)\n         assert_equal(mining_info['difficulty'], Decimal('4.656542373906925E-10'))"
      }
    ]
  },
  {
    "sha": "4c82cea99b514193672d8145c7777f3e715694ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzgyY2VhOTliNTE0MTkzNjcyZDgxNDVjNzc3N2YzZTcxNTY5NGVj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-25T16:06:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T19:18:56Z"
      },
      "message": "Use a sensible default for blockmaxweight\n\nNo sensible user will ever keep the default settings here, so not\nhaving sensible defaults only serves to screw users who are\npaying less attention, which makes for terrible defaults.\n\nGithub-Pull: #11100\nRebased-From: 3dc263c9b9068ee9793b6c7a0023eff16d70fb8f",
      "tree": {
        "sha": "fb9cf95bf35d3b270f3da82f70ad560c3c45a372",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fb9cf95bf35d3b270f3da82f70ad560c3c45a372"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c82cea99b514193672d8145c7777f3e715694ec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c82cea99b514193672d8145c7777f3e715694ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c82cea99b514193672d8145c7777f3e715694ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c82cea99b514193672d8145c7777f3e715694ec/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7871a7d3be4b89e1605ca29c2269c08f3ae68472",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7871a7d3be4b89e1605ca29c2269c08f3ae68472",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7871a7d3be4b89e1605ca29c2269c08f3ae68472"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ef71dd73bcd574ba64005b0e259722a041afd7f8",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c82cea99b514193672d8145c7777f3e715694ec/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c82cea99b514193672d8145c7777f3e715694ec/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=4c82cea99b514193672d8145c7777f3e715694ec",
        "patch": "@@ -17,7 +17,7 @@ class CCoinsViewCache;\n class CTxOut;\n \n /** Default for -blockmaxweight, which controls the range of block weights the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = 3000000;\n+static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = MAX_BLOCK_WEIGHT - 4000;\n /** Default for -blockmintxfee, which sets the minimum feerate for a transaction in blocks created by mining code **/\n static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 1000;\n /** The maximum weight for transactions we're willing to relay/mine */"
      }
    ]
  },
  {
    "sha": "bb83fe19026b4d86a6514e6f3ed5f4d71f1bc4bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjgzZmUxOTAyNmI0ZDg2YTY1MTRlNmYzZWQ1ZjRkNzFmMWJjNGJj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-08-25T15:27:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T19:18:56Z"
      },
      "message": "Add release notes describing blockmaxweight deprecation\n\nGithub-Pull: #11100\nRebased-From: 6f703e9bf11c5f2fcb0fca0e4243fce6b4b9d35a",
      "tree": {
        "sha": "6ee383a28fcaf9209373627f55ca5f071fb913a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ee383a28fcaf9209373627f55ca5f071fb913a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb83fe19026b4d86a6514e6f3ed5f4d71f1bc4bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb83fe19026b4d86a6514e6f3ed5f4d71f1bc4bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb83fe19026b4d86a6514e6f3ed5f4d71f1bc4bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb83fe19026b4d86a6514e6f3ed5f4d71f1bc4bc/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c82cea99b514193672d8145c7777f3e715694ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c82cea99b514193672d8145c7777f3e715694ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c82cea99b514193672d8145c7777f3e715694ec"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6e4bd03cd5ae2381ea01144c7a9a0514746b1cd7",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb83fe19026b4d86a6514e6f3ed5f4d71f1bc4bc/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb83fe19026b4d86a6514e6f3ed5f4d71f1bc4bc/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=bb83fe19026b4d86a6514e6f3ed5f4d71f1bc4bc",
        "patch": "@@ -72,6 +72,22 @@ Notable changes\n   value is passed, instead of returning a list of all wallet transactions since\n   the genesis block.\n \n+Miner block size limiting deprecated\n+------------------------------------\n+\n+Though blockmaxweight has been preferred for limiting the size of blocks returned by\n+getblocktemplate since 0.13.0, blockmaxsize remained as an option for those who wished\n+to limit their block size directly. Using this option resulted in a few UI issues as\n+well as non-optimal fee selection and ever-so-slightly worse performance, and has thus\n+now been deprecated. Further, the blockmaxsize option is now used only to calculate an\n+implied blockmaxweight, instead of limiting block size directly. Any miners who wish\n+to limit their blocks by size, instead of by weight, will have to do so manually by\n+removing transactions from their block template directly.\n+\n+Low-level RPC changes\n+----------------------\n+- The \"currentblocksize\" value in getmininginfo has been removed.\n+\n Credits\n =======\n "
      }
    ]
  },
  {
    "sha": "49bf090185ad7f6aa4d86bae8aeedfcaf396771c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWJmMDkwMTg1YWQ3ZjZhYTRkODZiYWU4YWVlZGZjYWYzOTY3NzFj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-23T17:36:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T19:18:56Z"
      },
      "message": "net: Allow connecting to extra outbound peers\n\nGithub-Pull: #11560\nRebased-From: 2d4327db1973a354e9e4153de6958d49120fcde8",
      "tree": {
        "sha": "9fe4617e8f3d2b5d5535fd81f34cbadac361c061",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fe4617e8f3d2b5d5535fd81f34cbadac361c061"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49bf090185ad7f6aa4d86bae8aeedfcaf396771c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49bf090185ad7f6aa4d86bae8aeedfcaf396771c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49bf090185ad7f6aa4d86bae8aeedfcaf396771c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49bf090185ad7f6aa4d86bae8aeedfcaf396771c/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb83fe19026b4d86a6514e6f3ed5f4d71f1bc4bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb83fe19026b4d86a6514e6f3ed5f4d71f1bc4bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb83fe19026b4d86a6514e6f3ed5f4d71f1bc4bc"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 51,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1687900ed762ca7f5b2930daf163dec1b05ea4d7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 1,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49bf090185ad7f6aa4d86bae8aeedfcaf396771c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49bf090185ad7f6aa4d86bae8aeedfcaf396771c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=49bf090185ad7f6aa4d86bae8aeedfcaf396771c",
        "patch": "@@ -1670,6 +1670,36 @@ void CConnman::ProcessOneShot()\n     }\n }\n \n+bool CConnman::GetTryNewOutboundPeer()\n+{\n+    return m_try_another_outbound_peer;\n+}\n+\n+void CConnman::SetTryNewOutboundPeer(bool flag)\n+{\n+    m_try_another_outbound_peer = flag;\n+}\n+\n+// Return the number of peers we have over our outbound connection limit\n+// Exclude peers that are marked for disconnect, or are going to be\n+// disconnected soon (eg one-shots and feelers)\n+// Also exclude peers that haven't finished initial connection handshake yet\n+// (so that we don't decide we're over our desired connection limit, and then\n+// evict some peer that has finished the handshake)\n+int CConnman::GetExtraOutboundCount()\n+{\n+    int nOutbound = 0;\n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* pnode : vNodes) {\n+            if (!pnode->fInbound && !pnode->m_manual_connection && !pnode->fFeeler && !pnode->fDisconnect && !pnode->fOneShot && pnode->fSuccessfullyConnected) {\n+                ++nOutbound;\n+            }\n+        }\n+    }\n+    return std::max(nOutbound - nMaxOutbound, 0);\n+}\n+\n void CConnman::ThreadOpenConnections()\n {\n     // Connect to specific addresses\n@@ -1764,7 +1794,8 @@ void CConnman::ThreadOpenConnections()\n         //  * Only make a feeler connection once every few minutes.\n         //\n         bool fFeeler = false;\n-        if (nOutbound >= nMaxOutbound) {\n+\n+        if (nOutbound >= nMaxOutbound && !GetTryNewOutboundPeer()) {\n             int64_t nTime = GetTimeMicros(); // The current time right now (in microseconds).\n             if (nTime > nNextFeeler) {\n                 nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n@@ -2207,6 +2238,7 @@ CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSe\n     semOutbound = nullptr;\n     semAddnode = nullptr;\n     flagInterruptMsgProc = false;\n+    SetTryNewOutboundPeer(false);\n \n     Options connOptions;\n     Init(connOptions);"
      },
      {
        "sha": "83f2d967624d6565da23d07c38aa53e621ed049a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49bf090185ad7f6aa4d86bae8aeedfcaf396771c/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49bf090185ad7f6aa4d86bae8aeedfcaf396771c/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=49bf090185ad7f6aa4d86bae8aeedfcaf396771c",
        "patch": "@@ -251,6 +251,19 @@ class CConnman\n     void GetBanned(banmap_t &banmap);\n     void SetBanned(const banmap_t &banmap);\n \n+    // This allows temporarily exceeding nMaxOutbound, with the goal of finding\n+    // a peer that is better than all our current peers.\n+    void SetTryNewOutboundPeer(bool flag);\n+    bool GetTryNewOutboundPeer();\n+\n+    // Return the number of outbound peers we have in excess of our target (eg,\n+    // if we previously called SetTryNewOutboundPeer(true), and have since set\n+    // to false, we may have extra peers that we wish to disconnect). This may\n+    // return a value less than (num_outbound_connections - num_outbound_slots)\n+    // in cases where some outbound connections are not yet fully connected, or\n+    // not yet fully disconnected.\n+    int GetExtraOutboundCount();\n+\n     bool AddNode(const std::string& node);\n     bool RemoveAddedNode(const std::string& node);\n     std::vector<AddedNodeInfo> GetAddedNodeInfo();\n@@ -416,6 +429,11 @@ class CConnman\n     std::thread threadOpenAddedConnections;\n     std::thread threadOpenConnections;\n     std::thread threadMessageHandler;\n+\n+    /** flag for deciding to connect to an extra outbound peer,\n+     *  in excess of nMaxOutbound\n+     *  This takes the place of a feeler connection */\n+    std::atomic_bool m_try_another_outbound_peer;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void Discover(boost::thread_group& threadGroup);"
      }
    ]
  },
  {
    "sha": "459f2db425eaa3257819d496b37430558653289a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTlmMmRiNDI1ZWFhMzI1NzgxOWQ0OTZiMzc0MzA1NTg2NTMyODlh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-23T17:59:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T19:18:56Z"
      },
      "message": "Track tip update time and last new block announcement from each peer\n\nGithub-Pull: #11560\nRebased-From: db32a6589720e5b15931cef82e477118dfd92669",
      "tree": {
        "sha": "7291c214888ffa7f44e60d1c627bcc43eb827983",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7291c214888ffa7f44e60d1c627bcc43eb827983"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/459f2db425eaa3257819d496b37430558653289a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/459f2db425eaa3257819d496b37430558653289a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/459f2db425eaa3257819d496b37430558653289a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/459f2db425eaa3257819d496b37430558653289a/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49bf090185ad7f6aa4d86bae8aeedfcaf396771c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49bf090185ad7f6aa4d86bae8aeedfcaf396771c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49bf090185ad7f6aa4d86bae8aeedfcaf396771c"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 35,
      "deletions": 2
    },
    "files": [
      {
        "sha": "92c88477c92df9687c02b42336a85d1d8485277a",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 2,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/459f2db425eaa3257819d496b37430558653289a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/459f2db425eaa3257819d496b37430558653289a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=459f2db425eaa3257819d496b37430558653289a",
        "patch": "@@ -119,6 +119,10 @@ namespace {\n     /** Number of outbound peers with m_chain_sync.m_protect. */\n     int g_outbound_peers_with_protect_from_disconnect = 0;\n \n+\n+    /** When our tip was last updated. */\n+    int64_t g_last_tip_update = 0;\n+\n     /** Relay map, protected by cs_main. */\n     typedef std::map<uint256, CTransactionRef> MapRelay;\n     MapRelay mapRelay;\n@@ -223,6 +227,9 @@ struct CNodeState {\n \n     ChainSyncTimeoutState m_chain_sync;\n \n+    //! Time of last new block announcement\n+    int64_t m_last_block_announcement;\n+\n     CNodeState(CAddress addrIn, std::string addrNameIn) : address(addrIn), name(addrNameIn) {\n         fCurrentlyConnected = false;\n         nMisbehavior = 0;\n@@ -246,6 +253,7 @@ struct CNodeState {\n         fWantsCmpctWitness = false;\n         fSupportsDesiredCmpctVersion = false;\n         m_chain_sync = { 0, nullptr, false, false };\n+        m_last_block_announcement = 0;\n     }\n };\n \n@@ -779,6 +787,8 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n         }\n         LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n+\n+    g_last_tip_update = GetTime();\n }\n \n // All of the following cache a recent block, and are protected by cs_most_recent_block\n@@ -1203,6 +1213,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n         return true;\n     }\n \n+    bool received_new_header = false;\n     const CBlockIndex *pindexLast = nullptr;\n     {\n         LOCK(cs_main);\n@@ -1243,6 +1254,12 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n             }\n             hashLastBlock = header.GetHash();\n         }\n+\n+        // If we don't have the last header, then they'll have given us\n+        // something new (if these headers are valid).\n+        if (mapBlockIndex.find(hashLastBlock) == mapBlockIndex.end()) {\n+            received_new_header = true;\n+        }\n     }\n \n     CValidationState state;\n@@ -1307,6 +1324,10 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n         // because it is set in UpdateBlockAvailability. Some nullptr checks\n         // are still present, however, as belt-and-suspenders.\n \n+        if (received_new_header && pindexLast->nChainWork > chainActive.Tip()->nChainWork) {\n+            nodestate->m_last_block_announcement = GetTime();\n+        }\n+\n         if (nCount == MAX_HEADERS_RESULTS) {\n             // Headers message had its maximum size; the peer may have more headers.\n             // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n@@ -2197,6 +2218,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         CBlockHeaderAndShortTxIDs cmpctblock;\n         vRecv >> cmpctblock;\n \n+        bool received_new_header = false;\n+\n         {\n         LOCK(cs_main);\n \n@@ -2206,6 +2229,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n             return true;\n         }\n+\n+        if (mapBlockIndex.find(cmpctblock.header.GetHash()) == mapBlockIndex.end()) {\n+            received_new_header = true;\n+        }\n         }\n \n         const CBlockIndex *pindex = nullptr;\n@@ -2244,6 +2271,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         assert(pindex);\n         UpdateBlockAvailability(pfrom->GetId(), pindex->GetBlockHash());\n \n+        CNodeState *nodestate = State(pfrom->GetId());\n+\n+        // If this was a new header with more work than our tip, update the\n+        // peer's last block announcement time\n+        if (received_new_header && pindex->nChainWork > chainActive.Tip()->nChainWork) {\n+            nodestate->m_last_block_announcement = GetTime();\n+        }\n+\n         std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n         bool fAlreadyInFlight = blockInFlightIt != mapBlocksInFlight.end();\n \n@@ -2266,8 +2301,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (!fAlreadyInFlight && !CanDirectFetch(chainparams.GetConsensus()))\n             return true;\n \n-        CNodeState *nodestate = State(pfrom->GetId());\n-\n         if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) && !nodestate->fSupportsDesiredCmpctVersion) {\n             // Don't bother trying to process compact blocks from v1 peers\n             // after segwit activates."
      }
    ]
  },
  {
    "sha": "a607a95d8185b2b8d5a4de6f1bd9054308ebf60a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjA3YTk1ZDgxODViMmI4ZDVhNGRlNmYxYmQ5MDU0MzA4ZWJmNjBh",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-24T20:56:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T19:18:56Z"
      },
      "message": "Connect to an extra outbound peer if our tip is stale\n\nIf our tip hasn't updated in a while, that may be because our peers are\nnot relaying blocks to us that we would consider valid. Allow connection\nto an additional outbound peer in that circumstance.\n\nAlso, periodically check to see if we are exceeding our target number of\noutbound peers, and disconnect the one which has least recently\nannounced a new block to us (choosing the newest such peer in the case\nof tie).\n\nGithub-Pull: #11560\nRebased-From: ac7b37cd2bd612a64a4009ba82f1cd1d57f37434",
      "tree": {
        "sha": "afd3d482cae2da26bc598247698164c3e618ab4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afd3d482cae2da26bc598247698164c3e618ab4e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "459f2db425eaa3257819d496b37430558653289a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/459f2db425eaa3257819d496b37430558653289a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/459f2db425eaa3257819d496b37430558653289a"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 114,
      "deletions": 6
    },
    "files": [
      {
        "sha": "5196eee9535fbd3cd09162dc7827545c9deb6219",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a607a95d8185b2b8d5a4de6f1bd9054308ebf60a",
        "patch": "@@ -1287,7 +1287,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n     CConnman& connman = *g_connman;\n \n-    peerLogic.reset(new PeerLogicValidation(&connman));\n+    peerLogic.reset(new PeerLogicValidation(&connman, scheduler));\n     RegisterValidationInterface(peerLogic.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size"
      },
      {
        "sha": "b3bc8292fc6fe091dc271aad1c32eba0caddcaa2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a607a95d8185b2b8d5a4de6f1bd9054308ebf60a",
        "patch": "@@ -1678,6 +1678,7 @@ bool CConnman::GetTryNewOutboundPeer()\n void CConnman::SetTryNewOutboundPeer(bool flag)\n {\n     m_try_another_outbound_peer = flag;\n+    LogPrint(BCLog::NET, \"net: setting try another outbound peer=%s\\n\", flag ? \"true\" : \"false\");\n }\n \n // Return the number of peers we have over our outbound connection limit"
      },
      {
        "sha": "0eb01f36b2eb41b42939ae293ae91fc45938c9fa",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 97,
        "deletions": 2,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a607a95d8185b2b8d5a4de6f1bd9054308ebf60a",
        "patch": "@@ -23,6 +23,7 @@\n #include \"primitives/transaction.h\"\n #include \"random.h\"\n #include \"reverse_iterator.h\"\n+#include \"scheduler.h\"\n #include \"tinyformat.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n@@ -119,7 +120,6 @@ namespace {\n     /** Number of outbound peers with m_chain_sync.m_protect. */\n     int g_outbound_peers_with_protect_from_disconnect = 0;\n \n-\n     /** When our tip was last updated. */\n     int64_t g_last_tip_update = 0;\n \n@@ -428,6 +428,15 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n     }\n }\n \n+bool TipMayBeStale(const Consensus::Params &consensusParams)\n+{\n+    AssertLockHeld(cs_main);\n+    if (g_last_tip_update == 0) {\n+        g_last_tip_update = GetTime();\n+    }\n+    return g_last_tip_update < GetTime() - consensusParams.nPowTargetSpacing * 3 && mapBlocksInFlight.empty();\n+}\n+\n // Requires cs_main\n bool CanDirectFetch(const Consensus::Params &consensusParams)\n {\n@@ -754,9 +763,17 @@ void Misbehaving(NodeId pnode, int howmuch)\n // blockchain -> download logic notification\n //\n \n-PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {\n+PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &scheduler) : connman(connmanIn), m_stale_tip_check_time(0) {\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n+\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    // Stale tip checking and peer eviction are on two different timers, but we\n+    // don't want them to get out of sync due to drift in the scheduler, so we\n+    // combine them in one function and schedule at the quicker (peer-eviction)\n+    // timer.\n+    static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n+    scheduler.scheduleEvery(std::bind(&PeerLogicValidation::CheckForStaleTipAndEvictPeers, this, consensusParams), EXTRA_PEER_CHECK_INTERVAL * 1000);\n }\n \n void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n@@ -1412,6 +1429,7 @@ bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::ve\n             // If this is an outbound peer, check to see if we should protect\n             // it from the bad/lagging chain logic.\n             if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n+                LogPrint(BCLog::NET, \"Protecting outbound peer=%d from eviction\\n\", pfrom->GetId());\n                 nodestate->m_chain_sync.m_protect = true;\n                 ++g_outbound_peers_with_protect_from_disconnect;\n             }\n@@ -2978,6 +2996,83 @@ void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds)\n     }\n }\n \n+void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n+{\n+    // Check whether we have too many outbound peers\n+    int extra_peers = connman->GetExtraOutboundCount();\n+    if (extra_peers > 0) {\n+        // If we have more outbound peers than we target, disconnect one.\n+        // Pick the outbound peer that least recently announced\n+        // us a new block, with ties broken by choosing the more recent\n+        // connection (higher node id)\n+        NodeId worst_peer = -1;\n+        int64_t oldest_block_announcement = std::numeric_limits<int64_t>::max();\n+\n+        LOCK(cs_main);\n+\n+        connman->ForEachNode([&](CNode* pnode) {\n+            // Ignore non-outbound peers, or nodes marked for disconnect already\n+            if (!IsOutboundDisconnectionCandidate(pnode) || pnode->fDisconnect) return;\n+            CNodeState *state = State(pnode->GetId());\n+            if (state == nullptr) return; // shouldn't be possible, but just in case\n+            // Don't evict our protected peers\n+            if (state->m_chain_sync.m_protect) return;\n+            if (state->m_last_block_announcement < oldest_block_announcement || (state->m_last_block_announcement == oldest_block_announcement && pnode->GetId() > worst_peer)) {\n+                worst_peer = pnode->GetId();\n+                oldest_block_announcement = state->m_last_block_announcement;\n+            }\n+        });\n+        if (worst_peer != -1) {\n+            bool disconnected = connman->ForNode(worst_peer, [&](CNode *pnode) {\n+                // Only disconnect a peer that has been connected to us for\n+                // some reasonable fraction of our check-frequency, to give\n+                // it time for new information to have arrived.\n+                // Also don't disconnect any peer we're trying to download a\n+                // block from.\n+                CNodeState &state = *State(pnode->GetId());\n+                if (time_in_seconds - pnode->nTimeConnected > MINIMUM_CONNECT_TIME && state.nBlocksInFlight == 0) {\n+                    LogPrint(BCLog::NET, \"disconnecting extra outbound peer=%d (last block announcement received at time %d)\\n\", pnode->GetId(), oldest_block_announcement);\n+                    pnode->fDisconnect = true;\n+                    return true;\n+                } else {\n+                    LogPrint(BCLog::NET, \"keeping outbound peer=%d chosen for eviction (connect time: %d, blocks_in_flight: %d)\\n\", pnode->GetId(), pnode->nTimeConnected, state.nBlocksInFlight);\n+                    return false;\n+                }\n+            });\n+            if (disconnected) {\n+                // If we disconnected an extra peer, that means we successfully\n+                // connected to at least one peer after the last time we\n+                // detected a stale tip. Don't try any more extra peers until\n+                // we next detect a stale tip, to limit the load we put on the\n+                // network from these extra connections.\n+                connman->SetTryNewOutboundPeer(false);\n+            }\n+        }\n+    }\n+}\n+\n+void PeerLogicValidation::CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams)\n+{\n+    if (connman == nullptr) return;\n+\n+    int64_t time_in_seconds = GetTime();\n+\n+    EvictExtraOutboundPeers(time_in_seconds);\n+\n+    if (time_in_seconds > m_stale_tip_check_time) {\n+        LOCK(cs_main);\n+        // Check whether our tip is stale, and if so, allow using an extra\n+        // outbound peer\n+        if (TipMayBeStale(consensusParams)) {\n+            LogPrintf(\"Potential stale tip detected, will try using extra outbound peer (last tip update: %d seconds ago)\\n\", time_in_seconds - g_last_tip_update);\n+            connman->SetTryNewOutboundPeer(true);\n+        } else if (connman->GetTryNewOutboundPeer()) {\n+            connman->SetTryNewOutboundPeer(false);\n+        }\n+        m_stale_tip_check_time = time_in_seconds + STALE_CHECK_INTERVAL;\n+    }\n+}\n+\n class CompareInvMempoolOrder\n {\n     CTxMemPool *mp;"
      },
      {
        "sha": "0a49972eed148f2447e50a2301e905f3b3be4ff7",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=a607a95d8185b2b8d5a4de6f1bd9054308ebf60a",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"net.h\"\n #include \"validationinterface.h\"\n+#include \"consensus/params.h\"\n \n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n@@ -27,13 +28,19 @@ static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; // 1ms/head\n static constexpr int32_t MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT = 4;\n /** Timeout for (unprotected) outbound peers to sync to our chainwork, in seconds */\n static constexpr int64_t CHAIN_SYNC_TIMEOUT = 20 * 60; // 20 minutes\n+/** How frequently to check for stale tips, in seconds */\n+static constexpr int64_t STALE_CHECK_INTERVAL = 10 * 60; // 10 minutes\n+/** How frequently to check for extra outbound peers and disconnect, in seconds */\n+static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;\n+/** Minimum time an outbound-peer-eviction candidate must be connected for, in order to evict, in seconds */\n+static constexpr int64_t MINIMUM_CONNECT_TIME = 30;\n \n class PeerLogicValidation : public CValidationInterface, public NetEventsInterface {\n private:\n-    CConnman* connman;\n+    CConnman* const connman;\n \n public:\n-    explicit PeerLogicValidation(CConnman* connman);\n+    explicit PeerLogicValidation(CConnman* connman, CScheduler &scheduler);\n \n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n@@ -55,6 +62,11 @@ class PeerLogicValidation : public CValidationInterface, public NetEventsInterfa\n     bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n \n     void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n+    void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n+    void EvictExtraOutboundPeers(int64_t time_in_seconds);\n+\n+private:\n+    int64_t m_stale_tip_check_time; //! Next time to check for stale tip\n };\n \n struct CNodeStateStats {"
      },
      {
        "sha": "10959adea0da1a297fe0adb9350d9f1ec0dc8fe1",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=a607a95d8185b2b8d5a4de6f1bd9054308ebf60a",
        "patch": "@@ -85,7 +85,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n             threadGroup.create_thread(&ThreadScriptCheck);\n         g_connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337)); // Deterministic randomness for tests.\n         connman = g_connman.get();\n-        peerLogic.reset(new PeerLogicValidation(connman));\n+        peerLogic.reset(new PeerLogicValidation(connman, scheduler));\n }\n \n TestingSetup::~TestingSetup()"
      }
    ]
  },
  {
    "sha": "2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZWQwNjQ3YWMxZDZjMTRmZjFiZTExZjhkNTI4NGMwZGM2NDVmYzE4",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2017-10-24T08:26:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T19:18:56Z"
      },
      "message": "Add CConnmanTest to mutate g_connman in tests\n\nGithub-Pull: #11560\nRebased-From: 83df25736ebaa23777e965d265ed677a8d79f23f",
      "tree": {
        "sha": "a8520afa18dd613d23856d19c9812e39ea9e327f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8520afa18dd613d23856d19c9812e39ea9e327f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a607a95d8185b2b8d5a4de6f1bd9054308ebf60a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a607a95d8185b2b8d5a4de6f1bd9054308ebf60a"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6b57d5cf79d02780843855421b77b16e0d69bd77",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18",
        "patch": "@@ -434,6 +434,8 @@ class CConnman\n      *  in excess of nMaxOutbound\n      *  This takes the place of a feeler connection */\n     std::atomic_bool m_try_another_outbound_peer;\n+\n+    friend struct CConnmanTest;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void Discover(boost::thread_group& threadGroup);"
      },
      {
        "sha": "01e2a555e60e067b3d024a71bdd97dbbcccec2f5",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18",
        "patch": "@@ -24,6 +24,18 @@\n \n #include <memory>\n \n+void CConnmanTest::AddNode(CNode& node)\n+{\n+    LOCK(g_connman->cs_vNodes);\n+    g_connman->vNodes.push_back(&node);\n+}\n+\n+void CConnmanTest::ClearNodes()\n+{\n+    LOCK(g_connman->cs_vNodes);\n+    g_connman->vNodes.clear();\n+}\n+\n uint256 insecure_rand_seed = GetRandHash();\n FastRandomContext insecure_rand_ctx(insecure_rand_seed);\n "
      },
      {
        "sha": "642be476a648824cb8284869048e5000624bb91a",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18",
        "patch": "@@ -49,6 +49,12 @@ struct BasicTestingSetup {\n  * Included are data directory, coins database, script check threads setup.\n  */\n class CConnman;\n+class CNode;\n+struct CConnmanTest {\n+    static void AddNode(CNode& node);\n+    static void ClearNodes();\n+};\n+\n class PeerLogicValidation;\n struct TestingSetup: public BasicTestingSetup {\n     CCoinsViewDB *pcoinsdbview;"
      }
    ]
  },
  {
    "sha": "fc308a6cdb6c6d481b8721fa498e26c630210bf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzMwOGE2Y2RiNmM2ZDQ4MWI4NzIxZmE0OThlMjZjNjMwMjEwYmYx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2017-10-26T14:32:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T19:18:56Z"
      },
      "message": "Add unit test for stale tip checking\n\nGithub-Pull: #11560\nRebased-From: 626291508c433488439b662f2e88882048fb59fb",
      "tree": {
        "sha": "b72c7bb0ef2ae4c4628177798ff87a2bbc93cb7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b72c7bb0ef2ae4c4628177798ff87a2bbc93cb7e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc308a6cdb6c6d481b8721fa498e26c630210bf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc308a6cdb6c6d481b8721fa498e26c630210bf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc308a6cdb6c6d481b8721fa498e26c630210bf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc308a6cdb6c6d481b8721fa498e26c630210bf1/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ed0647ac1d6c14ff1be11f8d5284c0dc645fc18"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 94,
      "deletions": 0
    },
    "files": [
      {
        "sha": "dea4b042e610ba5c9b444c2c797604272d35915b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc308a6cdb6c6d481b8721fa498e26c630210bf1/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc308a6cdb6c6d481b8721fa498e26c630210bf1/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fc308a6cdb6c6d481b8721fa498e26c630210bf1",
        "patch": "@@ -543,6 +543,15 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n \n } // namespace\n \n+// This function is used for testing the stale tip eviction logic, see\n+// DoS_tests.cpp\n+void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n+{\n+    LOCK(cs_main);\n+    CNodeState *state = State(node);\n+    if (state) state->m_last_block_announcement = time_in_seconds;\n+}\n+\n // Returns true for outbound peers, excluding manual connections, feelers, and\n // one-shots\n bool IsOutboundDisconnectionCandidate(const CNode *node)"
      },
      {
        "sha": "d1f9e63ecf5537b4aced43eac01eb610ae458d5e",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 0,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc308a6cdb6c6d481b8721fa498e26c630210bf1/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc308a6cdb6c6d481b8721fa498e26c630210bf1/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=fc308a6cdb6c6d481b8721fa498e26c630210bf1",
        "patch": "@@ -40,6 +40,8 @@ CService ip(uint32_t i)\n \n static NodeId id = 0;\n \n+void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds);\n+\n BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n \n // Test eviction of an outbound peer whose chain never advances\n@@ -87,6 +89,89 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n }\n \n+void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic)\n+{\n+    CAddress addr(ip(GetRandInt(0xffffffff)), NODE_NONE);\n+    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", /*fInboundIn=*/ false));\n+    CNode &node = *vNodes.back();\n+    node.SetSendVersion(PROTOCOL_VERSION);\n+\n+    peerLogic.InitializeNode(&node);\n+    node.nVersion = 1;\n+    node.fSuccessfullyConnected = true;\n+\n+    CConnmanTest::AddNode(node);\n+}\n+\n+BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n+{\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    constexpr int nMaxOutbound = 8;\n+    CConnman::Options options;\n+    options.nMaxConnections = 125;\n+    options.nMaxOutbound = nMaxOutbound;\n+    options.nMaxFeeler = 1;\n+\n+    connman->Init(options);\n+    std::vector<CNode *> vNodes;\n+\n+    // Mock some outbound peers\n+    for (int i=0; i<nMaxOutbound; ++i) {\n+        AddRandomOutboundPeer(vNodes, *peerLogic);\n+    }\n+\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+\n+    // No nodes should be marked for disconnection while we have no extra peers\n+    for (const CNode *node : vNodes) {\n+        BOOST_CHECK(node->fDisconnect == false);\n+    }\n+\n+    SetMockTime(GetTime() + 3*consensusParams.nPowTargetSpacing + 1);\n+\n+    // Now tip should definitely be stale, and we should look for an extra\n+    // outbound peer\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+    BOOST_CHECK(connman->GetTryNewOutboundPeer());\n+\n+    // Still no peers should be marked for disconnection\n+    for (const CNode *node : vNodes) {\n+        BOOST_CHECK(node->fDisconnect == false);\n+    }\n+\n+    // If we add one more peer, something should get marked for eviction\n+    // on the next check (since we're mocking the time to be in the future, the\n+    // required time connected check should be satisfied).\n+    AddRandomOutboundPeer(vNodes, *peerLogic);\n+\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+    for (int i=0; i<nMaxOutbound; ++i) {\n+        BOOST_CHECK(vNodes[i]->fDisconnect == false);\n+    }\n+    // Last added node should get marked for eviction\n+    BOOST_CHECK(vNodes.back()->fDisconnect == true);\n+\n+    vNodes.back()->fDisconnect = false;\n+\n+    // Update the last announced block time for the last\n+    // peer, and check that the next newest node gets evicted.\n+    UpdateLastBlockAnnounceTime(vNodes.back()->GetId(), GetTime());\n+\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+    for (int i=0; i<nMaxOutbound-1; ++i) {\n+        BOOST_CHECK(vNodes[i]->fDisconnect == false);\n+    }\n+    BOOST_CHECK(vNodes[nMaxOutbound-1]->fDisconnect == true);\n+    BOOST_CHECK(vNodes.back()->fDisconnect == false);\n+\n+    bool dummy;\n+    for (const CNode *node : vNodes) {\n+        peerLogic->FinalizeNode(node->GetId(), dummy);\n+    }\n+\n+    CConnmanTest::ClearNodes();\n+}\n+\n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     std::atomic<bool> interruptDummy(false);"
      }
    ]
  },
  {
    "sha": "f224cbc3d8f4478d30e121126658c2ab22c6fb90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjI0Y2JjM2Q4ZjQ0NzhkMzBlMTIxMTI2NjU4YzJhYjIyYzZmYjkw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-02T19:20:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-02T19:26:37Z"
      },
      "message": "build: Bump version to 0.15.1\n\nTree-SHA512: d998b31250208078414a27431d21b847592bdb1e4bd7eb1df6bee7f67671a4124dcaa2971ebef52304528080ab2d2ff6553b7d7138d948a364e64fc4e37dacd3",
      "tree": {
        "sha": "0b1f15777a9e4fe8ae949eecb5b823769607d41c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b1f15777a9e4fe8ae949eecb5b823769607d41c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f224cbc3d8f4478d30e121126658c2ab22c6fb90",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ+3FtAAoJEB5K7WKYbNJdL2MIALwCfxsNr7KaMnSPlnxkbw+B\nGdkrzDmDD+RmsDSdUX4z89H4HV/XgAYDac9ePu5A0Xc0AMR2ldGLsLqsVkWPk86u\nB+XOVX0bjVEsOendoiTs5TVUKP/FQ4DTAGIqxT44LZQja1TV3Vo6iMfZyTUgT9rm\n4FMwU7S68B4I0qikHHrcz1GS/ApSlkEG1F7z37MUYOQtz0usLY8DgFzTXtV3qgkx\nKSXrtPxQpXI9xQzOfjOj5jxjUkl4Mu4EyYqEBkPqkxVS+5xv0e+qwLWy4lyJjK5i\nkFTC8GlhHXaxS/jnXA9qajX+lRFHvVsY6LhOQjKrYJ9OlGw0bQ/Rn+9SVcMqsBc=\n=tvvL\n-----END PGP SIGNATURE-----",
        "payload": "tree 0b1f15777a9e4fe8ae949eecb5b823769607d41c\nparent 34833534b656f565df9510a6c649687063db956d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509650413 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509650797 +0100\n\nbuild: Bump version to 0.15.1\n\nTree-SHA512: d998b31250208078414a27431d21b847592bdb1e4bd7eb1df6bee7f67671a4124dcaa2971ebef52304528080ab2d2ff6553b7d7138d948a364e64fc4e37dacd3\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f224cbc3d8f4478d30e121126658c2ab22c6fb90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f224cbc3d8f4478d30e121126658c2ab22c6fb90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f224cbc3d8f4478d30e121126658c2ab22c6fb90/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34833534b656f565df9510a6c649687063db956d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34833534b656f565df9510a6c649687063db956d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34833534b656f565df9510a6c649687063db956d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4766e0431d3a943e8a74c41f90521473c0190549",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f224cbc3d8f4478d30e121126658c2ab22c6fb90/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f224cbc3d8f4478d30e121126658c2ab22c6fb90/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f224cbc3d8f4478d30e121126658c2ab22c6fb90",
        "patch": "@@ -2,8 +2,8 @@ dnl require autoconf 2.60 (AS_ECHO/AS_ECHO_N)\n AC_PREREQ([2.60])\n define(_CLIENT_VERSION_MAJOR, 0)\n define(_CLIENT_VERSION_MINOR, 15)\n-define(_CLIENT_VERSION_REVISION, 0)\n-define(_CLIENT_VERSION_BUILD, 1)\n+define(_CLIENT_VERSION_REVISION, 1)\n+define(_CLIENT_VERSION_BUILD, 0)\n define(_CLIENT_VERSION_IS_RELEASE, true)\n define(_COPYRIGHT_YEAR, 2017)\n define(_COPYRIGHT_HOLDERS,[The %s developers])"
      }
    ]
  },
  {
    "sha": "34153a7e4a52be30582d96426e77a7a04e9721fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDE1M2E3ZTRhNTJiZTMwNTgyZDk2NDI2ZTc3YTdhMDRlOTcyMWZi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-11-01T16:02:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T19:31:18Z"
      },
      "message": "rpc: work-around an upstream libevent bug\n\nA rare race condition may trigger while awaiting the body of a message, see\nupsteam commit 5ff8eb26371c4dc56f384b2de35bea2d87814779 for details.\n\nThis may fix some reported rpc hangs/crashes.\n\nGithub-Pull: #11593\nRebased-From: 6b58360f9b64eb0b680a662fdfd590e47f115f44",
      "tree": {
        "sha": "bcf1aef12fcdd4de91b7a42f1bec8c54259c766d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bcf1aef12fcdd4de91b7a42f1bec8c54259c766d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34153a7e4a52be30582d96426e77a7a04e9721fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34153a7e4a52be30582d96426e77a7a04e9721fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34153a7e4a52be30582d96426e77a7a04e9721fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34153a7e4a52be30582d96426e77a7a04e9721fb/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc308a6cdb6c6d481b8721fa498e26c630210bf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc308a6cdb6c6d481b8721fa498e26c630210bf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc308a6cdb6c6d481b8721fa498e26c630210bf1"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 28,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a3a90080ebe038e1bd79682fc1b879f595b42c91",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 4,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34153a7e4a52be30582d96426e77a7a04e9721fb/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34153a7e4a52be30582d96426e77a7a04e9721fb/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=34153a7e4a52be30582d96426e77a7a04e9721fb",
        "patch": "@@ -24,6 +24,7 @@\n \n #include <event2/thread.h>\n #include <event2/buffer.h>\n+#include <event2/bufferevent.h>\n #include <event2/util.h>\n #include <event2/keyvalq_struct.h>\n \n@@ -239,6 +240,16 @@ static std::string RequestMethodString(HTTPRequest::RequestMethod m)\n /** HTTP request callback */\n static void http_request_cb(struct evhttp_request* req, void* arg)\n {\n+    // Disable reading to work around a libevent bug, fixed in 2.2.0.\n+    if (event_get_version_number() < 0x02020001) {\n+        evhttp_connection* conn = evhttp_request_get_connection(req);\n+        if (conn) {\n+            bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n+            if (bev) {\n+                bufferevent_disable(bev, EV_READ);\n+            }\n+        }\n+    }\n     std::unique_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n \n     LogPrint(BCLog::HTTP, \"Received a %s request for %s from %s\\n\",\n@@ -599,11 +610,24 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n     struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n     assert(evb);\n     evbuffer_add(evb, strReply.data(), strReply.size());\n-    HTTPEvent* ev = new HTTPEvent(eventBase, true,\n-        std::bind(evhttp_send_reply, req, nStatus, (const char*)nullptr, (struct evbuffer *)nullptr));\n-    ev->trigger(0);\n+    auto req_copy = req;\n+    HTTPEvent* ev = new HTTPEvent(eventBase, true, [req_copy, nStatus]{\n+        evhttp_send_reply(req_copy, nStatus, nullptr, nullptr);\n+        // Re-enable reading from the socket. This is the second part of the libevent\n+        // workaround above.\n+        if (event_get_version_number() < 0x02020001) {\n+            evhttp_connection* conn = evhttp_request_get_connection(req_copy);\n+            if (conn) {\n+                bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n+                if (bev) {\n+                    bufferevent_enable(bev, EV_READ | EV_WRITE);\n+                }\n+            }\n+        }\n+    });\n+    ev->trigger(nullptr);\n     replySent = true;\n-    req = 0; // transferred back to main thread\n+    req = nullptr; // transferred back to main thread\n }\n \n CService HTTPRequest::GetPeer()"
      }
    ]
  },
  {
    "sha": "8195cb0d7fc4f8699b35aff7a43ed2fb3013608c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTk1Y2IwZDdmYzRmODY5OWIzNWFmZjdhNDNlZDJmYjMwMTM2MDhj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2017-11-02T18:37:33Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-11-02T19:31:39Z"
      },
      "message": "rpc: further constrain the libevent workaround\n\nThe bug was introduced in 2.1.6-beta, versions before that don't need the\nworkaround.\n\nGithub-Pull: #11593\nRebased-From: 97932cd2689659addfbb58dc6148928b73af3bd0",
      "tree": {
        "sha": "159288b7a528c27545197abf36f271dabd76a9f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/159288b7a528c27545197abf36f271dabd76a9f8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8195cb0d7fc4f8699b35aff7a43ed2fb3013608c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8195cb0d7fc4f8699b35aff7a43ed2fb3013608c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8195cb0d7fc4f8699b35aff7a43ed2fb3013608c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8195cb0d7fc4f8699b35aff7a43ed2fb3013608c/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34153a7e4a52be30582d96426e77a7a04e9721fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34153a7e4a52be30582d96426e77a7a04e9721fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34153a7e4a52be30582d96426e77a7a04e9721fb"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dc7016b85ba9d34be1f9dd4cdddc7910c281eeb1",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8195cb0d7fc4f8699b35aff7a43ed2fb3013608c/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8195cb0d7fc4f8699b35aff7a43ed2fb3013608c/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=8195cb0d7fc4f8699b35aff7a43ed2fb3013608c",
        "patch": "@@ -241,7 +241,7 @@ static std::string RequestMethodString(HTTPRequest::RequestMethod m)\n static void http_request_cb(struct evhttp_request* req, void* arg)\n {\n     // Disable reading to work around a libevent bug, fixed in 2.2.0.\n-    if (event_get_version_number() < 0x02020001) {\n+    if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02020001) {\n         evhttp_connection* conn = evhttp_request_get_connection(req);\n         if (conn) {\n             bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n@@ -615,7 +615,7 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n         evhttp_send_reply(req_copy, nStatus, nullptr, nullptr);\n         // Re-enable reading from the socket. This is the second part of the libevent\n         // workaround above.\n-        if (event_get_version_number() < 0x02020001) {\n+        if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02020001) {\n             evhttp_connection* conn = evhttp_request_get_connection(req_copy);\n             if (conn) {\n                 bufferevent* bev = evhttp_connection_get_bufferevent(conn);"
      }
    ]
  },
  {
    "sha": "f518d9ae6aa525c4cd360a16f07a9272cbef558d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNTE4ZDlhZTZhYTUyNWM0Y2QzNjBhMTZmMDdhOTI3MmNiZWY1NThk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-03T22:32:02Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-11-03T22:42:50Z"
      },
      "message": "Merge #11592: 0.15: Backports\n\n8195cb0d7 rpc: further constrain the libevent workaround (Cory Fields)\n34153a7e4 rpc: work-around an upstream libevent bug (Cory Fields)\nfc308a6cd Add unit test for stale tip checking (Suhas Daftuar)\n2ed0647ac Add CConnmanTest to mutate g_connman in tests (Jo\u00e3o Barbosa)\na607a95d8 Connect to an extra outbound peer if our tip is stale (Suhas Daftuar)\n459f2db42 Track tip update time and last new block announcement from each peer (Suhas Daftuar)\n49bf09018 net: Allow connecting to extra outbound peers (Suhas Daftuar)\nbb83fe190 Add release notes describing blockmaxweight deprecation (Matt Corallo)\n4c82cea99 Use a sensible default for blockmaxweight (Matt Corallo)\n7871a7d3b Deprecate confusing blockmaxsize, fix getmininginfo output (Matt Corallo)\n6baa317b5 Fix minchainwork test for 0.15 backport (Suhas Daftuar)\n55b7abfa8 Make p2p-acceptablock not an extended test (Matt Corallo)\n5bec7744d [qa] test that invalid blocks on an invalid chain get a disconnect (Matt Corallo)\n92d6105c4 Reject headers building on invalid chains by tracking invalidity (Matt Corallo)\n51001d684 Accept unrequested blocks with work equal to our tip (Matt Corallo)\nc6e4d0ce8 Stop always storing blocks from whitelisted peers (Matt Corallo)\ne976c36dd Rewrite p2p-acceptblock in preparation for slight behavior changes (Matt Corallo)\nec8dedff4 net: Add missing lock in ProcessHeadersMessage(...) (practicalswift)\n59b210d9a Disconnect outbound peers relaying invalid headers (Suhas Daftuar)\nfc966bbd2 moveonly: factor out headers processing into separate function (Suhas Daftuar)\ne3272242e Add unit test for outbound peer eviction (Suhas Daftuar)\n9961abf9e Permit disconnection of outbound peers on bad/slow chains (Suhas Daftuar)\nbf191a718 Disconnecting from bad outbound peers in IBD (Suhas Daftuar)\nd570aa429 Fix uninitialized g_connman crash in Shutdown() (MeshCollider)\n0a5477c7e net: stop both net/net_processing before destroying them (Cory Fields)\nb4136f21c net: drop unused connman param (Cory Fields)\ndc897e53d net: use an interface class rather than signals for message processing (Cory Fields)\n8aee55af3 net: pass CConnman via pointer rather than reference (Cory Fields)\n6f279652b Rename fAddnode to a more-descriptive \"manual_connection\" (Matt Corallo)\nffb6ea4e5 Add comment explaining forced processing of compact blocks (Suhas Daftuar)\n2df65eeb9 qa: add test for minchainwork use in acceptblock (Suhas Daftuar)\n3acec3878 Don't process unrequested, low-work blocks (Suhas Daftuar)\n0e9d04bf0 [qa] Test nMinimumChainWork (Suhas Daftuar)\nda4908c3a Allow setting nMinimumChainWork on command line (Suhas Daftuar)\n41088795d qa: Remove never used return value of sync_with_ping (MarcoFalke)\nf3457d0e8 qa: Make tmpdir option an absolute path (MarcoFalke)\n9c8006dc3 Avoid opening copied wallet databases simultaneously (Russell Yanofsky)\nde7053f11 [wallet] Fix leak in CDB constructor (Jo\u00e3o Barbosa)\nfd79ed6b2 Ensure backupwallet fails when attempting to backup to source file (Tomas van der Wansem)\nd94fc336c scripted-diff: rename assert_raises_jsonrpc to assert_raises_rpc error (John Newbery)\n623de0acb [tests] do not allow assert_raises_message to be called with JSONRPCException (John Newbery)\n5b728c8e9 [tests] remove direct testing on JSONRPCException from individual test cases (John Newbery)\n\nPull request description:\n\nTree-SHA512: 9fdb5c47844a899271023d8d445f7fc728e3ad71916490cd9783464684967594b07cda05dd644b722bfcea9fade74d06cfc501e1a68abf118d6d03fbbf7d7707",
      "tree": {
        "sha": "335ee53ff19753f10dfd40b42570e0419701e183",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/335ee53ff19753f10dfd40b42570e0419701e183"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f518d9ae6aa525c4cd360a16f07a9272cbef558d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJZ/PDqAAoJEKY26XYx92fg6YIQAKZ6MnioDqpxsEldkrzh32AZ\npAI5CWMtYRxyx2Y+ewQoRct41bn/ectGqeQNmAkSkwPh3bD4nfXlZBuzWFM03YWs\n++5HAW/al21Q9CdTJ/Ijw35kQZUyS+QSbeh/AGkhvQh787Qf1cxAMaqE0zP2uqr1\n0+Y6WyjuFj37zHXSCHF8EO8J7h6cRbaM5BqaCslSKxfnUIQKD6rszenq0W7J1TWa\nxd1wYpc91ZBaIkIVoodxVRQrNIlcI0/ybGVzSSbGdXBCdIT8E6XCUt4xPCDJmWQ4\ne0RK0zqAnM1ZXwV0JIi0TGUg1EtupPHn140xh6nIGU64mG5V/aJg/DrExmUUUu3K\nU1Gyh4zvu/RBHPECvFr+YyWWsu84JUN1lAc+GSLd26ZPiHqsT0qZzZKByYoduIKp\nejiQls4gly747yF2e+iYKYIYmTu6fYDUVatTboaSTgTGub7SHhd5mNVSl5+SBbF9\nTakSY+YJUxBn0ml2hC1T6tAokDWu7t5gQMmIqxRxSEWEOwpZctsV8oKKQIi/ne4F\nZNEcdszoUUe2o7qPNgrmYCxVq5C+kOrNeDCHZdU8rRDWydaOhBsMuxkbA1bN87w/\nTBnMiD9o2tPlWAIbhGlhBdGwTodqfQql/4OoHn9T/N5OU6IpYdFUu7wSBniYyRGQ\nhmeh71LGguoihk3N2joB\n=jWDz\n-----END PGP SIGNATURE-----",
        "payload": "tree 335ee53ff19753f10dfd40b42570e0419701e183\nparent f224cbc3d8f4478d30e121126658c2ab22c6fb90\nparent 8195cb0d7fc4f8699b35aff7a43ed2fb3013608c\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1509748322 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1509748970 -0700\n\nMerge #11592: 0.15: Backports\n\n8195cb0d7 rpc: further constrain the libevent workaround (Cory Fields)\n34153a7e4 rpc: work-around an upstream libevent bug (Cory Fields)\nfc308a6cd Add unit test for stale tip checking (Suhas Daftuar)\n2ed0647ac Add CConnmanTest to mutate g_connman in tests (Jo\u00e3o Barbosa)\na607a95d8 Connect to an extra outbound peer if our tip is stale (Suhas Daftuar)\n459f2db42 Track tip update time and last new block announcement from each peer (Suhas Daftuar)\n49bf09018 net: Allow connecting to extra outbound peers (Suhas Daftuar)\nbb83fe190 Add release notes describing blockmaxweight deprecation (Matt Corallo)\n4c82cea99 Use a sensible default for blockmaxweight (Matt Corallo)\n7871a7d3b Deprecate confusing blockmaxsize, fix getmininginfo output (Matt Corallo)\n6baa317b5 Fix minchainwork test for 0.15 backport (Suhas Daftuar)\n55b7abfa8 Make p2p-acceptablock not an extended test (Matt Corallo)\n5bec7744d [qa] test that invalid blocks on an invalid chain get a disconnect (Matt Corallo)\n92d6105c4 Reject headers building on invalid chains by tracking invalidity (Matt Corallo)\n51001d684 Accept unrequested blocks with work equal to our tip (Matt Corallo)\nc6e4d0ce8 Stop always storing blocks from whitelisted peers (Matt Corallo)\ne976c36dd Rewrite p2p-acceptblock in preparation for slight behavior changes (Matt Corallo)\nec8dedff4 net: Add missing lock in ProcessHeadersMessage(...) (practicalswift)\n59b210d9a Disconnect outbound peers relaying invalid headers (Suhas Daftuar)\nfc966bbd2 moveonly: factor out headers processing into separate function (Suhas Daftuar)\ne3272242e Add unit test for outbound peer eviction (Suhas Daftuar)\n9961abf9e Permit disconnection of outbound peers on bad/slow chains (Suhas Daftuar)\nbf191a718 Disconnecting from bad outbound peers in IBD (Suhas Daftuar)\nd570aa429 Fix uninitialized g_connman crash in Shutdown() (MeshCollider)\n0a5477c7e net: stop both net/net_processing before destroying them (Cory Fields)\nb4136f21c net: drop unused connman param (Cory Fields)\ndc897e53d net: use an interface class rather than signals for message processing (Cory Fields)\n8aee55af3 net: pass CConnman via pointer rather than reference (Cory Fields)\n6f279652b Rename fAddnode to a more-descriptive \"manual_connection\" (Matt Corallo)\nffb6ea4e5 Add comment explaining forced processing of compact blocks (Suhas Daftuar)\n2df65eeb9 qa: add test for minchainwork use in acceptblock (Suhas Daftuar)\n3acec3878 Don't process unrequested, low-work blocks (Suhas Daftuar)\n0e9d04bf0 [qa] Test nMinimumChainWork (Suhas Daftuar)\nda4908c3a Allow setting nMinimumChainWork on command line (Suhas Daftuar)\n41088795d qa: Remove never used return value of sync_with_ping (MarcoFalke)\nf3457d0e8 qa: Make tmpdir option an absolute path (MarcoFalke)\n9c8006dc3 Avoid opening copied wallet databases simultaneously (Russell Yanofsky)\nde7053f11 [wallet] Fix leak in CDB constructor (Jo\u00e3o Barbosa)\nfd79ed6b2 Ensure backupwallet fails when attempting to backup to source file (Tomas van der Wansem)\nd94fc336c scripted-diff: rename assert_raises_jsonrpc to assert_raises_rpc error (John Newbery)\n623de0acb [tests] do not allow assert_raises_message to be called with JSONRPCException (John Newbery)\n5b728c8e9 [tests] remove direct testing on JSONRPCException from individual test cases (John Newbery)\n\nPull request description:\n\nTree-SHA512: 9fdb5c47844a899271023d8d445f7fc728e3ad71916490cd9783464684967594b07cda05dd644b722bfcea9fade74d06cfc501e1a68abf118d6d03fbbf7d7707\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f518d9ae6aa525c4cd360a16f07a9272cbef558d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f518d9ae6aa525c4cd360a16f07a9272cbef558d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f518d9ae6aa525c4cd360a16f07a9272cbef558d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f224cbc3d8f4478d30e121126658c2ab22c6fb90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f224cbc3d8f4478d30e121126658c2ab22c6fb90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f224cbc3d8f4478d30e121126658c2ab22c6fb90"
      },
      {
        "sha": "8195cb0d7fc4f8699b35aff7a43ed2fb3013608c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8195cb0d7fc4f8699b35aff7a43ed2fb3013608c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8195cb0d7fc4f8699b35aff7a43ed2fb3013608c"
      }
    ],
    "stats": {
      "total": 2301,
      "additions": 1617,
      "deletions": 684
    },
    "files": [
      {
        "sha": "6e4bd03cd5ae2381ea01144c7a9a0514746b1cd7",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -72,6 +72,22 @@ Notable changes\n   value is passed, instead of returning a list of all wallet transactions since\n   the genesis block.\n \n+Miner block size limiting deprecated\n+------------------------------------\n+\n+Though blockmaxweight has been preferred for limiting the size of blocks returned by\n+getblocktemplate since 0.13.0, blockmaxsize remained as an option for those who wished\n+to limit their block size directly. Using this option resulted in a few UI issues as\n+well as non-optimal fee selection and ever-so-slightly worse performance, and has thus\n+now been deprecated. Further, the blockmaxsize option is now used only to calculate an\n+implied blockmaxweight, instead of limiting block size directly. Any miners who wish\n+to limit their blocks by size, instead of by weight, will have to do so manually by\n+removing transactions from their block template directly.\n+\n+Low-level RPC changes\n+----------------------\n+- The \"currentblocksize\" value in getmininginfo has been removed.\n+\n Credits\n =======\n "
      },
      {
        "sha": "dc7016b85ba9d34be1f9dd4cdddc7910c281eeb1",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 4,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -24,6 +24,7 @@\n \n #include <event2/thread.h>\n #include <event2/buffer.h>\n+#include <event2/bufferevent.h>\n #include <event2/util.h>\n #include <event2/keyvalq_struct.h>\n \n@@ -239,6 +240,16 @@ static std::string RequestMethodString(HTTPRequest::RequestMethod m)\n /** HTTP request callback */\n static void http_request_cb(struct evhttp_request* req, void* arg)\n {\n+    // Disable reading to work around a libevent bug, fixed in 2.2.0.\n+    if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02020001) {\n+        evhttp_connection* conn = evhttp_request_get_connection(req);\n+        if (conn) {\n+            bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n+            if (bev) {\n+                bufferevent_disable(bev, EV_READ);\n+            }\n+        }\n+    }\n     std::unique_ptr<HTTPRequest> hreq(new HTTPRequest(req));\n \n     LogPrint(BCLog::HTTP, \"Received a %s request for %s from %s\\n\",\n@@ -599,11 +610,24 @@ void HTTPRequest::WriteReply(int nStatus, const std::string& strReply)\n     struct evbuffer* evb = evhttp_request_get_output_buffer(req);\n     assert(evb);\n     evbuffer_add(evb, strReply.data(), strReply.size());\n-    HTTPEvent* ev = new HTTPEvent(eventBase, true,\n-        std::bind(evhttp_send_reply, req, nStatus, (const char*)nullptr, (struct evbuffer *)nullptr));\n-    ev->trigger(0);\n+    auto req_copy = req;\n+    HTTPEvent* ev = new HTTPEvent(eventBase, true, [req_copy, nStatus]{\n+        evhttp_send_reply(req_copy, nStatus, nullptr, nullptr);\n+        // Re-enable reading from the socket. This is the second part of the libevent\n+        // workaround above.\n+        if (event_get_version_number() >= 0x02010600 && event_get_version_number() < 0x02020001) {\n+            evhttp_connection* conn = evhttp_request_get_connection(req_copy);\n+            if (conn) {\n+                bufferevent* bev = evhttp_connection_get_bufferevent(conn);\n+                if (bev) {\n+                    bufferevent_enable(bev, EV_READ | EV_WRITE);\n+                }\n+            }\n+        }\n+    });\n+    ev->trigger(nullptr);\n     replySent = true;\n-    req = 0; // transferred back to main thread\n+    req = nullptr; // transferred back to main thread\n }\n \n CService HTTPRequest::GetPeer()"
      },
      {
        "sha": "5196eee9535fbd3cd09162dc7827545c9deb6219",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 4,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -193,12 +193,15 @@ void Shutdown()\n     }\n #endif\n     MapPort(false);\n+\n+    // Because these depend on each-other, we make sure that neither can be\n+    // using the other before destroying them.\n     UnregisterValidationInterface(peerLogic.get());\n+    if(g_connman) g_connman->Stop();\n     peerLogic.reset();\n     g_connman.reset();\n \n     StopTorControl();\n-    UnregisterNodeSignals(GetNodeSignals());\n     if (fDumpMempoolLater && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool();\n     }\n@@ -362,6 +365,9 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n     strUsage += HelpMessageOpt(\"-maxmempool=<n>\", strprintf(_(\"Keep the transaction memory pool below <n> megabytes (default: %u)\"), DEFAULT_MAX_MEMPOOL_SIZE));\n     strUsage += HelpMessageOpt(\"-mempoolexpiry=<n>\", strprintf(_(\"Do not keep transactions in the mempool longer than <n> hours (default: %u)\"), DEFAULT_MEMPOOL_EXPIRY));\n+    if (showDebug) {\n+        strUsage += HelpMessageOpt(\"-minimumchainwork=<hex>\", strprintf(\"Minimum work assumed to exist on a valid chain in hex (default: %s, testnet: %s)\", defaultChainParams->GetConsensus().nMinimumChainWork.GetHex(), testnetChainParams->GetConsensus().nMinimumChainWork.GetHex()));\n+    }\n     strUsage += HelpMessageOpt(\"-persistmempool\", strprintf(_(\"Whether to save the mempool on shutdown and load on restart (default: %u)\"), DEFAULT_PERSIST_MEMPOOL));\n     strUsage += HelpMessageOpt(\"-blockreconstructionextratxn=<n>\", strprintf(_(\"Extra transactions to keep in memory for compact block reconstructions (default: %u)\"), DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN));\n     strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n@@ -494,7 +500,7 @@ std::string HelpMessage(HelpMessageMode mode)\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n     strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n-    strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n+    strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", _(\"Set maximum BIP141 block weight to this * 4. Deprecated, use blockmaxweight\"));\n     strUsage += HelpMessageOpt(\"-blockmintxfee=<amt>\", strprintf(_(\"Set lowest fee rate (in %s/kB) for transactions to be included in block creation. (default: %s)\"), CURRENCY_UNIT, FormatMoney(DEFAULT_BLOCK_MIN_TX_FEE)));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-blockversion=<n>\", \"Override block version to test forking scenarios\");\n@@ -796,6 +802,15 @@ void InitParameterInteraction()\n         if (gArgs.SoftSetBoolArg(\"-whitelistrelay\", true))\n             LogPrintf(\"%s: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1\\n\", __func__);\n     }\n+\n+    if (gArgs.IsArgSet(\"-blockmaxsize\")) {\n+        unsigned int max_size = gArgs.GetArg(\"-blockmaxsize\", 0);\n+        if (gArgs.SoftSetArg(\"blockmaxweight\", strprintf(\"%d\", max_size * WITNESS_SCALE_FACTOR))) {\n+            LogPrintf(\"%s: parameter interaction: -blockmaxsize=%d -> setting -blockmaxweight=%d (-blockmaxsize is deprecated!)\\n\", __func__, max_size, max_size * WITNESS_SCALE_FACTOR);\n+        } else {\n+            LogPrintf(\"%s: Ignoring blockmaxsize setting which is overridden by blockmaxweight\", __func__);\n+        }\n+    }\n }\n \n static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)\n@@ -979,6 +994,20 @@ bool AppInitParameterInteraction()\n     else\n         LogPrintf(\"Validating signatures for all blocks.\\n\");\n \n+    if (gArgs.IsArgSet(\"-minimumchainwork\")) {\n+        const std::string minChainWorkStr = gArgs.GetArg(\"-minimumchainwork\", \"\");\n+        if (!IsHexNumber(minChainWorkStr)) {\n+            return InitError(strprintf(\"Invalid non-hex (%s) minimum chain work value specified\", minChainWorkStr));\n+        }\n+        nMinimumChainWork = UintToArith256(uint256S(minChainWorkStr));\n+    } else {\n+        nMinimumChainWork = UintToArith256(chainparams.GetConsensus().nMinimumChainWork);\n+    }\n+    LogPrintf(\"Setting nMinimumChainWork=%s\\n\", nMinimumChainWork.GetHex());\n+    if (nMinimumChainWork < UintToArith256(chainparams.GetConsensus().nMinimumChainWork)) {\n+        LogPrintf(\"Warning: nMinimumChainWork set below default value of %s\\n\", chainparams.GetConsensus().nMinimumChainWork.GetHex());\n+    }\n+\n     // mempool limits\n     int64_t nMempoolSizeMax = gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000;\n     int64_t nMempoolSizeMin = gArgs.GetArg(\"-limitdescendantsize\", DEFAULT_DESCENDANT_SIZE_LIMIT) * 1000 * 40;\n@@ -1258,9 +1287,8 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n     CConnman& connman = *g_connman;\n \n-    peerLogic.reset(new PeerLogicValidation(&connman));\n+    peerLogic.reset(new PeerLogicValidation(&connman, scheduler));\n     RegisterValidationInterface(peerLogic.get());\n-    RegisterNodeSignals(GetNodeSignals());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n@@ -1651,6 +1679,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     connOptions.nMaxFeeler = 1;\n     connOptions.nBestHeight = chainActive.Height();\n     connOptions.uiInterface = &uiInterface;\n+    connOptions.m_msgproc = peerLogic.get();\n     connOptions.nSendBufferMaxSize = 1000*gArgs.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n     connOptions.nReceiveFloodSize = 1000*gArgs.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n "
      },
      {
        "sha": "9d571a2eb02295837365019d109eba8ca36e7761",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 36,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -43,7 +43,6 @@\n // its ancestors.\n \n uint64_t nLastBlockTx = 0;\n-uint64_t nLastBlockSize = 0;\n uint64_t nLastBlockWeight = 0;\n \n int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n@@ -64,18 +63,13 @@ int64_t UpdateTime(CBlockHeader* pblock, const Consensus::Params& consensusParam\n BlockAssembler::Options::Options() {\n     blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n     nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n-    nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n }\n \n BlockAssembler::BlockAssembler(const CChainParams& params, const Options& options) : chainparams(params)\n {\n     blockMinFeeRate = options.blockMinFeeRate;\n     // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n     nBlockMaxWeight = std::max<size_t>(4000, std::min<size_t>(MAX_BLOCK_WEIGHT - 4000, options.nBlockMaxWeight));\n-    // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n-    nBlockMaxSize = std::max<size_t>(1000, std::min<size_t>(MAX_BLOCK_SERIALIZED_SIZE - 1000, options.nBlockMaxSize));\n-    // Whether we need to account for byte usage (in addition to weight usage)\n-    fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE - 1000);\n }\n \n static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n@@ -85,20 +79,7 @@ static BlockAssembler::Options DefaultOptions(const CChainParams& params)\n     // If only one is given, only restrict the specified resource.\n     // If both are given, restrict both.\n     BlockAssembler::Options options;\n-    options.nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n-    options.nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n-    bool fWeightSet = false;\n-    if (gArgs.IsArgSet(\"-blockmaxweight\")) {\n-        options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n-        options.nBlockMaxSize = MAX_BLOCK_SERIALIZED_SIZE;\n-        fWeightSet = true;\n-    }\n-    if (gArgs.IsArgSet(\"-blockmaxsize\")) {\n-        options.nBlockMaxSize = gArgs.GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n-        if (!fWeightSet) {\n-            options.nBlockMaxWeight = options.nBlockMaxSize * WITNESS_SCALE_FACTOR;\n-        }\n-    }\n+    options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n     if (gArgs.IsArgSet(\"-blockmintxfee\")) {\n         CAmount n = 0;\n         ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n);\n@@ -116,7 +97,6 @@ void BlockAssembler::resetBlock()\n     inBlock.clear();\n \n     // Reserve space for coinbase tx\n-    nBlockSize = 1000;\n     nBlockWeight = 4000;\n     nBlockSigOpsCost = 400;\n     fIncludeWitness = false;\n@@ -175,7 +155,6 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     int64_t nTime1 = GetTimeMicros();\n \n     nLastBlockTx = nBlockTx;\n-    nLastBlockSize = nBlockSize;\n     nLastBlockWeight = nBlockWeight;\n \n     // Create coinbase transaction.\n@@ -190,8 +169,7 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     pblocktemplate->vchCoinbaseCommitment = GenerateCoinbaseCommitment(*pblock, pindexPrev, chainparams.GetConsensus());\n     pblocktemplate->vTxFees[0] = -nFees;\n \n-    uint64_t nSerializeSize = GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION);\n-    LogPrintf(\"CreateNewBlock(): total size: %u block weight: %u txs: %u fees: %ld sigops %d\\n\", nSerializeSize, GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);\n+    LogPrintf(\"CreateNewBlock(): block weight: %u txs: %u fees: %ld sigops %d\\n\", GetBlockWeight(*pblock), nBlockTx, nFees, nBlockSigOpsCost);\n \n     // Fill in header\n     pblock->hashPrevBlock  = pindexPrev->GetBlockHash();\n@@ -238,22 +216,13 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n // - transaction finality (locktime)\n // - premature witness (in case segwit transactions are added to mempool before\n //   segwit activation)\n-// - serialized size (in case -blockmaxsize is in use)\n bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)\n {\n-    uint64_t nPotentialBlockSize = nBlockSize; // only used with fNeedSizeAccounting\n     for (const CTxMemPool::txiter it : package) {\n         if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n             return false;\n         if (!fIncludeWitness && it->GetTx().HasWitness())\n             return false;\n-        if (fNeedSizeAccounting) {\n-            uint64_t nTxSize = ::GetSerializeSize(it->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n-            if (nPotentialBlockSize + nTxSize >= nBlockMaxSize) {\n-                return false;\n-            }\n-            nPotentialBlockSize += nTxSize;\n-        }\n     }\n     return true;\n }\n@@ -263,9 +232,6 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n     pblock->vtx.emplace_back(iter->GetSharedTx());\n     pblocktemplate->vTxFees.push_back(iter->GetFee());\n     pblocktemplate->vTxSigOpsCost.push_back(iter->GetSigOpCost());\n-    if (fNeedSizeAccounting) {\n-        nBlockSize += ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n-    }\n     nBlockWeight += iter->GetTxWeight();\n     ++nBlockTx;\n     nBlockSigOpsCost += iter->GetSigOpCost();"
      },
      {
        "sha": "f68f77c0bacc16705e17ed72d40fb5a58ee1d236",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -139,13 +139,11 @@ class BlockAssembler\n \n     // Configuration parameters for the block size\n     bool fIncludeWitness;\n-    unsigned int nBlockMaxWeight, nBlockMaxSize;\n-    bool fNeedSizeAccounting;\n+    unsigned int nBlockMaxWeight;\n     CFeeRate blockMinFeeRate;\n \n     // Information on the current status of the block\n     uint64_t nBlockWeight;\n-    uint64_t nBlockSize;\n     uint64_t nBlockTx;\n     uint64_t nBlockSigOpsCost;\n     CAmount nFees;"
      },
      {
        "sha": "b3bc8292fc6fe091dc271aad1c32eba0caddcaa2",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 18,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -89,10 +89,6 @@ std::string strSubVersion;\n \n limitedmap<uint256, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n-// Signals for message handling\n-static CNodeSignals g_signals;\n-CNodeSignals& GetNodeSignals() { return g_signals; }\n-\n void CConnman::AddOneShot(const std::string& strDest)\n {\n     LOCK(cs_vOneShots);\n@@ -665,7 +661,7 @@ void CNode::copyStats(CNodeStats &stats)\n         X(cleanSubVer);\n     }\n     X(fInbound);\n-    X(fAddnode);\n+    X(m_manual_connection);\n     X(nStartingHeight);\n     {\n         LOCK(cs_vSend);\n@@ -1114,7 +1110,7 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, addr_bind, \"\", true);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n-    GetNodeSignals().InitializeNode(pnode, *this);\n+    m_msgproc->InitializeNode(pnode);\n \n     LogPrint(BCLog::NET, \"connection from %s accepted\\n\", addr.ToString());\n \n@@ -1674,6 +1670,37 @@ void CConnman::ProcessOneShot()\n     }\n }\n \n+bool CConnman::GetTryNewOutboundPeer()\n+{\n+    return m_try_another_outbound_peer;\n+}\n+\n+void CConnman::SetTryNewOutboundPeer(bool flag)\n+{\n+    m_try_another_outbound_peer = flag;\n+    LogPrint(BCLog::NET, \"net: setting try another outbound peer=%s\\n\", flag ? \"true\" : \"false\");\n+}\n+\n+// Return the number of peers we have over our outbound connection limit\n+// Exclude peers that are marked for disconnect, or are going to be\n+// disconnected soon (eg one-shots and feelers)\n+// Also exclude peers that haven't finished initial connection handshake yet\n+// (so that we don't decide we're over our desired connection limit, and then\n+// evict some peer that has finished the handshake)\n+int CConnman::GetExtraOutboundCount()\n+{\n+    int nOutbound = 0;\n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* pnode : vNodes) {\n+            if (!pnode->fInbound && !pnode->m_manual_connection && !pnode->fFeeler && !pnode->fDisconnect && !pnode->fOneShot && pnode->fSuccessfullyConnected) {\n+                ++nOutbound;\n+            }\n+        }\n+    }\n+    return std::max(nOutbound - nMaxOutbound, 0);\n+}\n+\n void CConnman::ThreadOpenConnections()\n {\n     // Connect to specific addresses\n@@ -1738,7 +1765,7 @@ void CConnman::ThreadOpenConnections()\n         {\n             LOCK(cs_vNodes);\n             for (CNode* pnode : vNodes) {\n-                if (!pnode->fInbound && !pnode->fAddnode) {\n+                if (!pnode->fInbound && !pnode->m_manual_connection) {\n \n                     // Count the peers that have all relevant services\n                     if (pnode->fSuccessfullyConnected && !pnode->fFeeler && ((pnode->nServices & nRelevantServices) == nRelevantServices)) {\n@@ -1768,7 +1795,8 @@ void CConnman::ThreadOpenConnections()\n         //  * Only make a feeler connection once every few minutes.\n         //\n         bool fFeeler = false;\n-        if (nOutbound >= nMaxOutbound) {\n+\n+        if (nOutbound >= nMaxOutbound && !GetTryNewOutboundPeer()) {\n             int64_t nTime = GetTimeMicros(); // The current time right now (in microseconds).\n             if (nTime > nNextFeeler) {\n                 nNextFeeler = PoissonNextSend(nTime, FEELER_INTERVAL);\n@@ -1934,7 +1962,7 @@ void CConnman::ThreadOpenAddedConnections()\n }\n \n // if successful, this moves the passed grant to the constructed node\n-bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool fAddnode)\n+bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound, const char *pszDest, bool fOneShot, bool fFeeler, bool manual_connection)\n {\n     //\n     // Initiate outbound network connection\n@@ -1963,10 +1991,10 @@ bool CConnman::OpenNetworkConnection(const CAddress& addrConnect, bool fCountFai\n         pnode->fOneShot = true;\n     if (fFeeler)\n         pnode->fFeeler = true;\n-    if (fAddnode)\n-        pnode->fAddnode = true;\n+    if (manual_connection)\n+        pnode->m_manual_connection = true;\n \n-    GetNodeSignals().InitializeNode(pnode, *this);\n+    m_msgproc->InitializeNode(pnode);\n     {\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n@@ -1996,16 +2024,16 @@ void CConnman::ThreadMessageHandler()\n                 continue;\n \n             // Receive messages\n-            bool fMoreNodeWork = GetNodeSignals().ProcessMessages(pnode, *this, flagInterruptMsgProc);\n+            bool fMoreNodeWork = m_msgproc->ProcessMessages(pnode, flagInterruptMsgProc);\n             fMoreWork |= (fMoreNodeWork && !pnode->fPauseSend);\n             if (flagInterruptMsgProc)\n                 return;\n-\n             // Send messages\n             {\n                 LOCK(pnode->cs_sendProcessing);\n-                GetNodeSignals().SendMessages(pnode, *this, flagInterruptMsgProc);\n+                m_msgproc->SendMessages(pnode, flagInterruptMsgProc);\n             }\n+\n             if (flagInterruptMsgProc)\n                 return;\n         }\n@@ -2211,6 +2239,7 @@ CConnman::CConnman(uint64_t nSeed0In, uint64_t nSeed1In) : nSeed0(nSeed0In), nSe\n     semOutbound = nullptr;\n     semAddnode = nullptr;\n     flagInterruptMsgProc = false;\n+    SetTryNewOutboundPeer(false);\n \n     Options connOptions;\n     Init(connOptions);\n@@ -2324,6 +2353,7 @@ bool CConnman::Start(CScheduler& scheduler, const Options& connOptions)\n     //\n     // Start threads\n     //\n+    assert(m_msgproc);\n     InterruptSocks5(false);\n     interruptNet.reset();\n     flagInterruptMsgProc = false;\n@@ -2443,9 +2473,10 @@ void CConnman::DeleteNode(CNode* pnode)\n {\n     assert(pnode);\n     bool fUpdateConnectionTime = false;\n-    GetNodeSignals().FinalizeNode(pnode->GetId(), fUpdateConnectionTime);\n-    if(fUpdateConnectionTime)\n+    m_msgproc->FinalizeNode(pnode->GetId(), fUpdateConnectionTime);\n+    if(fUpdateConnectionTime) {\n         addrman.Connected(pnode->addr);\n+    }\n     delete pnode;\n }\n \n@@ -2704,7 +2735,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     strSubVer = \"\";\n     fWhitelisted = false;\n     fOneShot = false;\n-    fAddnode = false;\n+    m_manual_connection = false;\n     fClient = false; // set by version message\n     fFeeler = false;\n     fSuccessfullyConnected = false;"
      },
      {
        "sha": "6b57d5cf79d02780843855421b77b16e0d69bd77",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 36,
        "deletions": 15,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -33,7 +33,6 @@\n #include <arpa/inet.h>\n #endif\n \n-#include <boost/signals2/signal.hpp>\n \n class CScheduler;\n class CNode;\n@@ -116,7 +115,7 @@ struct CSerializedNetMsg\n     std::string command;\n };\n \n-\n+class NetEventsInterface;\n class CConnman\n {\n public:\n@@ -138,6 +137,7 @@ class CConnman\n         int nMaxFeeler = 0;\n         int nBestHeight = 0;\n         CClientUIInterface* uiInterface = nullptr;\n+        NetEventsInterface* m_msgproc = nullptr;\n         unsigned int nSendBufferMaxSize = 0;\n         unsigned int nReceiveFloodSize = 0;\n         uint64_t nMaxOutboundTimeframe = 0;\n@@ -156,6 +156,7 @@ class CConnman\n         nMaxFeeler = connOptions.nMaxFeeler;\n         nBestHeight = connOptions.nBestHeight;\n         clientInterface = connOptions.uiInterface;\n+        m_msgproc = connOptions.m_msgproc;\n         nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n         nReceiveFloodSize = connOptions.nReceiveFloodSize;\n         nMaxOutboundTimeframe = connOptions.nMaxOutboundTimeframe;\n@@ -170,7 +171,7 @@ class CConnman\n     void Interrupt();\n     bool GetNetworkActive() const { return fNetworkActive; };\n     void SetNetworkActive(bool active);\n-    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool fAddnode = false);\n+    bool OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n@@ -250,6 +251,19 @@ class CConnman\n     void GetBanned(banmap_t &banmap);\n     void SetBanned(const banmap_t &banmap);\n \n+    // This allows temporarily exceeding nMaxOutbound, with the goal of finding\n+    // a peer that is better than all our current peers.\n+    void SetTryNewOutboundPeer(bool flag);\n+    bool GetTryNewOutboundPeer();\n+\n+    // Return the number of outbound peers we have in excess of our target (eg,\n+    // if we previously called SetTryNewOutboundPeer(true), and have since set\n+    // to false, we may have extra peers that we wish to disconnect). This may\n+    // return a value less than (num_outbound_connections - num_outbound_slots)\n+    // in cases where some outbound connections are not yet fully connected, or\n+    // not yet fully disconnected.\n+    int GetExtraOutboundCount();\n+\n     bool AddNode(const std::string& node);\n     bool RemoveAddedNode(const std::string& node);\n     std::vector<AddedNodeInfo> GetAddedNodeInfo();\n@@ -396,6 +410,7 @@ class CConnman\n     int nMaxFeeler;\n     std::atomic<int> nBestHeight;\n     CClientUIInterface* clientInterface;\n+    NetEventsInterface* m_msgproc;\n \n     /** SipHasher seeds for deterministic randomness */\n     const uint64_t nSeed0, nSeed1;\n@@ -414,6 +429,13 @@ class CConnman\n     std::thread threadOpenAddedConnections;\n     std::thread threadOpenConnections;\n     std::thread threadMessageHandler;\n+\n+    /** flag for deciding to connect to an extra outbound peer,\n+     *  in excess of nMaxOutbound\n+     *  This takes the place of a feeler connection */\n+    std::atomic_bool m_try_another_outbound_peer;\n+\n+    friend struct CConnmanTest;\n };\n extern std::unique_ptr<CConnman> g_connman;\n void Discover(boost::thread_group& threadGroup);\n@@ -436,19 +458,18 @@ struct CombinerAll\n     }\n };\n \n-// Signals for message handling\n-struct CNodeSignals\n+/**\n+ * Interface for message handling\n+ */\n+class NetEventsInterface\n {\n-    boost::signals2::signal<bool (CNode*, CConnman&, std::atomic<bool>&), CombinerAll> ProcessMessages;\n-    boost::signals2::signal<bool (CNode*, CConnman&, std::atomic<bool>&), CombinerAll> SendMessages;\n-    boost::signals2::signal<void (CNode*, CConnman&)> InitializeNode;\n-    boost::signals2::signal<void (NodeId, bool&)> FinalizeNode;\n+public:\n+    virtual bool ProcessMessages(CNode* pnode, std::atomic<bool>& interrupt) = 0;\n+    virtual bool SendMessages(CNode* pnode, std::atomic<bool>& interrupt) = 0;\n+    virtual void InitializeNode(CNode* pnode) = 0;\n+    virtual void FinalizeNode(NodeId id, bool& update_connection_time) = 0;\n };\n \n-\n-CNodeSignals& GetNodeSignals();\n-\n-\n enum\n {\n     LOCAL_NONE,   // unknown\n@@ -508,7 +529,7 @@ class CNodeStats\n     int nVersion;\n     std::string cleanSubVer;\n     bool fInbound;\n-    bool fAddnode;\n+    bool m_manual_connection;\n     int nStartingHeight;\n     uint64_t nSendBytes;\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n@@ -618,7 +639,7 @@ class CNode\n     bool fWhitelisted; // This peer can bypass DoS banning.\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;\n-    bool fAddnode;\n+    bool m_manual_connection;\n     bool fClient;\n     const bool fInbound;\n     std::atomic_bool fSuccessfullyConnected;"
      },
      {
        "sha": "dea4b042e610ba5c9b444c2c797604272d35915b",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 599,
        "deletions": 293,
        "changes": 892,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -23,6 +23,7 @@\n #include \"primitives/transaction.h\"\n #include \"random.h\"\n #include \"reverse_iterator.h\"\n+#include \"scheduler.h\"\n #include \"tinyformat.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n@@ -116,18 +117,19 @@ namespace {\n     /** Number of peers from which we're downloading blocks. */\n     int nPeersWithValidatedDownloads = 0;\n \n+    /** Number of outbound peers with m_chain_sync.m_protect. */\n+    int g_outbound_peers_with_protect_from_disconnect = 0;\n+\n+    /** When our tip was last updated. */\n+    int64_t g_last_tip_update = 0;\n+\n     /** Relay map, protected by cs_main. */\n     typedef std::map<uint256, CTransactionRef> MapRelay;\n     MapRelay mapRelay;\n     /** Expiration-time ordered list of (expire time, relay map entry) pairs, protected by cs_main). */\n     std::deque<std::pair<int64_t, MapRelay::iterator>> vRelayExpiration;\n } // namespace\n \n-//////////////////////////////////////////////////////////////////////////////\n-//\n-// Registration of network node signals.\n-//\n-\n namespace {\n \n struct CBlockReject {\n@@ -198,6 +200,36 @@ struct CNodeState {\n      */\n     bool fSupportsDesiredCmpctVersion;\n \n+    /** State used to enforce CHAIN_SYNC_TIMEOUT\n+      * Only in effect for outbound, non-manual connections, with\n+      * m_protect == false\n+      * Algorithm: if a peer's best known block has less work than our tip,\n+      * set a timeout CHAIN_SYNC_TIMEOUT seconds in the future:\n+      *   - If at timeout their best known block now has more work than our tip\n+      *     when the timeout was set, then either reset the timeout or clear it\n+      *     (after comparing against our current tip's work)\n+      *   - If at timeout their best known block still has less work than our\n+      *     tip did when the timeout was set, then send a getheaders message,\n+      *     and set a shorter timeout, HEADERS_RESPONSE_TIME seconds in future.\n+      *     If their best known block is still behind when that new timeout is\n+      *     reached, disconnect.\n+      */\n+    struct ChainSyncTimeoutState {\n+        //! A timeout used for checking whether our peer has sufficiently synced\n+        int64_t m_timeout;\n+        //! A header with the work we require on our peer's chain\n+        const CBlockIndex * m_work_header;\n+        //! After timeout is reached, set to true after sending getheaders\n+        bool m_sent_getheaders;\n+        //! Whether this peer is protected from disconnection due to a bad/slow chain\n+        bool m_protect;\n+    };\n+\n+    ChainSyncTimeoutState m_chain_sync;\n+\n+    //! Time of last new block announcement\n+    int64_t m_last_block_announcement;\n+\n     CNodeState(CAddress addrIn, std::string addrNameIn) : address(addrIn), name(addrNameIn) {\n         fCurrentlyConnected = false;\n         nMisbehavior = 0;\n@@ -220,6 +252,8 @@ struct CNodeState {\n         fHaveWitness = false;\n         fWantsCmpctWitness = false;\n         fSupportsDesiredCmpctVersion = false;\n+        m_chain_sync = { 0, nullptr, false, false };\n+        m_last_block_announcement = 0;\n     }\n };\n \n@@ -244,7 +278,7 @@ void UpdatePreferredDownload(CNode* node, CNodeState* state)\n     nPreferredDownload += state->fPreferredDownload;\n }\n \n-void PushNodeVersion(CNode *pnode, CConnman& connman, int64_t nTime)\n+void PushNodeVersion(CNode *pnode, CConnman* connman, int64_t nTime)\n {\n     ServiceFlags nLocalNodeServices = pnode->GetLocalServices();\n     uint64_t nonce = pnode->GetLocalNonce();\n@@ -255,7 +289,7 @@ void PushNodeVersion(CNode *pnode, CConnman& connman, int64_t nTime)\n     CAddress addrYou = (addr.IsRoutable() && !IsProxy(addr) ? addr : CAddress(CService(), addr.nServices));\n     CAddress addrMe = CAddress(CService(), nLocalNodeServices);\n \n-    connman.PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (uint64_t)nLocalNodeServices, nTime, addrYou, addrMe,\n+    connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERSION, PROTOCOL_VERSION, (uint64_t)nLocalNodeServices, nTime, addrYou, addrMe,\n             nonce, strSubVersion, nNodeStartingHeight, ::fRelayTxes));\n \n     if (fLogIPs) {\n@@ -265,49 +299,6 @@ void PushNodeVersion(CNode *pnode, CConnman& connman, int64_t nTime)\n     }\n }\n \n-void InitializeNode(CNode *pnode, CConnman& connman) {\n-    CAddress addr = pnode->addr;\n-    std::string addrName = pnode->GetAddrName();\n-    NodeId nodeid = pnode->GetId();\n-    {\n-        LOCK(cs_main);\n-        mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName)));\n-    }\n-    if(!pnode->fInbound)\n-        PushNodeVersion(pnode, connman, GetTime());\n-}\n-\n-void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n-    fUpdateConnectionTime = false;\n-    LOCK(cs_main);\n-    CNodeState *state = State(nodeid);\n-\n-    if (state->fSyncStarted)\n-        nSyncStarted--;\n-\n-    if (state->nMisbehavior == 0 && state->fCurrentlyConnected) {\n-        fUpdateConnectionTime = true;\n-    }\n-\n-    for (const QueuedBlock& entry : state->vBlocksInFlight) {\n-        mapBlocksInFlight.erase(entry.hash);\n-    }\n-    EraseOrphansFor(nodeid);\n-    nPreferredDownload -= state->fPreferredDownload;\n-    nPeersWithValidatedDownloads -= (state->nBlocksInFlightValidHeaders != 0);\n-    assert(nPeersWithValidatedDownloads >= 0);\n-\n-    mapNodeState.erase(nodeid);\n-\n-    if (mapNodeState.empty()) {\n-        // Do a consistency check after the last peer is removed.\n-        assert(mapBlocksInFlight.empty());\n-        assert(nPreferredDownload == 0);\n-        assert(nPeersWithValidatedDownloads == 0);\n-    }\n-    LogPrint(BCLog::NET, \"Cleared nodestate for peer=%d\\n\", nodeid);\n-}\n-\n // Requires cs_main.\n // Returns a bool indicating whether we requested this block.\n // Also used if a block was /not/ received and timed out or started with another peer\n@@ -402,7 +393,7 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n     }\n }\n \n-void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman& connman) {\n+void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n     AssertLockHeld(cs_main);\n     CNodeState* nodestate = State(nodeid);\n     if (!nodestate || !nodestate->fSupportsDesiredCmpctVersion) {\n@@ -417,26 +408,35 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman& connman) {\n                 return;\n             }\n         }\n-        connman.ForNode(nodeid, [&connman](CNode* pfrom){\n+        connman->ForNode(nodeid, [connman](CNode* pfrom){\n             bool fAnnounceUsingCMPCTBLOCK = false;\n             uint64_t nCMPCTBLOCKVersion = (pfrom->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\n             if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\n                 // As per BIP152, we only get 3 of our peers to announce\n                 // blocks using compact encodings.\n-                connman.ForNode(lNodesAnnouncingHeaderAndIDs.front(), [&connman, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion](CNode* pnodeStop){\n-                    connman.PushMessage(pnodeStop, CNetMsgMaker(pnodeStop->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+                connman->ForNode(lNodesAnnouncingHeaderAndIDs.front(), [connman, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion](CNode* pnodeStop){\n+                    connman->PushMessage(pnodeStop, CNetMsgMaker(pnodeStop->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n                     return true;\n                 });\n                 lNodesAnnouncingHeaderAndIDs.pop_front();\n             }\n             fAnnounceUsingCMPCTBLOCK = true;\n-            connman.PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+            connman->PushMessage(pfrom, CNetMsgMaker(pfrom->GetSendVersion()).Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n             lNodesAnnouncingHeaderAndIDs.push_back(pfrom->GetId());\n             return true;\n         });\n     }\n }\n \n+bool TipMayBeStale(const Consensus::Params &consensusParams)\n+{\n+    AssertLockHeld(cs_main);\n+    if (g_last_tip_update == 0) {\n+        g_last_tip_update = GetTime();\n+    }\n+    return g_last_tip_update < GetTime() - consensusParams.nPowTargetSpacing * 3 && mapBlocksInFlight.empty();\n+}\n+\n // Requires cs_main\n bool CanDirectFetch(const Consensus::Params &consensusParams)\n {\n@@ -466,7 +466,7 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n     // Make sure pindexBestKnownBlock is up to date, we'll need it.\n     ProcessBlockAvailability(nodeid);\n \n-    if (state->pindexBestKnownBlock == nullptr || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork || state->pindexBestKnownBlock->nChainWork < UintToArith256(consensusParams.nMinimumChainWork)) {\n+    if (state->pindexBestKnownBlock == nullptr || state->pindexBestKnownBlock->nChainWork < chainActive.Tip()->nChainWork || state->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n         // This peer has nothing interesting.\n         return;\n     }\n@@ -543,6 +543,69 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<con\n \n } // namespace\n \n+// This function is used for testing the stale tip eviction logic, see\n+// DoS_tests.cpp\n+void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds)\n+{\n+    LOCK(cs_main);\n+    CNodeState *state = State(node);\n+    if (state) state->m_last_block_announcement = time_in_seconds;\n+}\n+\n+// Returns true for outbound peers, excluding manual connections, feelers, and\n+// one-shots\n+bool IsOutboundDisconnectionCandidate(const CNode *node)\n+{\n+    return !(node->fInbound || node->m_manual_connection || node->fFeeler || node->fOneShot);\n+}\n+\n+void PeerLogicValidation::InitializeNode(CNode *pnode) {\n+    CAddress addr = pnode->addr;\n+    std::string addrName = pnode->GetAddrName();\n+    NodeId nodeid = pnode->GetId();\n+    {\n+        LOCK(cs_main);\n+        mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName)));\n+    }\n+    if(!pnode->fInbound)\n+        PushNodeVersion(pnode, connman, GetTime());\n+}\n+\n+void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n+    fUpdateConnectionTime = false;\n+    LOCK(cs_main);\n+    CNodeState *state = State(nodeid);\n+    assert(state != nullptr);\n+\n+    if (state->fSyncStarted)\n+        nSyncStarted--;\n+\n+    if (state->nMisbehavior == 0 && state->fCurrentlyConnected) {\n+        fUpdateConnectionTime = true;\n+    }\n+\n+    for (const QueuedBlock& entry : state->vBlocksInFlight) {\n+        mapBlocksInFlight.erase(entry.hash);\n+    }\n+    EraseOrphansFor(nodeid);\n+    nPreferredDownload -= state->fPreferredDownload;\n+    nPeersWithValidatedDownloads -= (state->nBlocksInFlightValidHeaders != 0);\n+    assert(nPeersWithValidatedDownloads >= 0);\n+    g_outbound_peers_with_protect_from_disconnect -= state->m_chain_sync.m_protect;\n+    assert(g_outbound_peers_with_protect_from_disconnect >= 0);\n+\n+    mapNodeState.erase(nodeid);\n+\n+    if (mapNodeState.empty()) {\n+        // Do a consistency check after the last peer is removed.\n+        assert(mapBlocksInFlight.empty());\n+        assert(nPreferredDownload == 0);\n+        assert(nPeersWithValidatedDownloads == 0);\n+        assert(g_outbound_peers_with_protect_from_disconnect == 0);\n+    }\n+    LogPrint(BCLog::NET, \"Cleared nodestate for peer=%d\\n\", nodeid);\n+}\n+\n bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     LOCK(cs_main);\n     CNodeState *state = State(nodeid);\n@@ -558,22 +621,6 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     return true;\n }\n \n-void RegisterNodeSignals(CNodeSignals& nodeSignals)\n-{\n-    nodeSignals.ProcessMessages.connect(&ProcessMessages);\n-    nodeSignals.SendMessages.connect(&SendMessages);\n-    nodeSignals.InitializeNode.connect(&InitializeNode);\n-    nodeSignals.FinalizeNode.connect(&FinalizeNode);\n-}\n-\n-void UnregisterNodeSignals(CNodeSignals& nodeSignals)\n-{\n-    nodeSignals.ProcessMessages.disconnect(&ProcessMessages);\n-    nodeSignals.SendMessages.disconnect(&SendMessages);\n-    nodeSignals.InitializeNode.disconnect(&InitializeNode);\n-    nodeSignals.FinalizeNode.disconnect(&FinalizeNode);\n-}\n-\n //////////////////////////////////////////////////////////////////////////////\n //\n // mapOrphanTransactions\n@@ -725,9 +772,17 @@ void Misbehaving(NodeId pnode, int howmuch)\n // blockchain -> download logic notification\n //\n \n-PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {\n+PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn, CScheduler &scheduler) : connman(connmanIn), m_stale_tip_check_time(0) {\n     // Initialize global variables that cannot be constructed at startup.\n     recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n+\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    // Stale tip checking and peer eviction are on two different timers, but we\n+    // don't want them to get out of sync due to drift in the scheduler, so we\n+    // combine them in one function and schedule at the quicker (peer-eviction)\n+    // timer.\n+    static_assert(EXTRA_PEER_CHECK_INTERVAL < STALE_CHECK_INTERVAL, \"peer eviction timer should be less than stale tip check timer\");\n+    scheduler.scheduleEvery(std::bind(&PeerLogicValidation::CheckForStaleTipAndEvictPeers, this, consensusParams), EXTRA_PEER_CHECK_INTERVAL * 1000);\n }\n \n void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindex, const std::vector<CTransactionRef>& vtxConflicted) {\n@@ -758,6 +813,8 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n         }\n         LogPrint(BCLog::MEMPOOL, \"Erased %d orphan tx included or conflicted by block\\n\", nErased);\n     }\n+\n+    g_last_tip_update = GetTime();\n }\n \n // All of the following cache a recent block, and are protected by cs_most_recent_block\n@@ -865,7 +922,7 @@ void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationSta\n              !IsInitialBlockDownload() &&\n              mapBlocksInFlight.count(hash) == mapBlocksInFlight.size()) {\n         if (it != mapBlockSource.end()) {\n-            MaybeSetPeerAsAnnouncingHeaderAndIDs(it->second.first, *connman);\n+            MaybeSetPeerAsAnnouncingHeaderAndIDs(it->second.first, connman);\n         }\n     }\n     if (it != mapBlockSource.end())\n@@ -910,24 +967,24 @@ bool static AlreadyHave(const CInv& inv) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     return true;\n }\n \n-static void RelayTransaction(const CTransaction& tx, CConnman& connman)\n+static void RelayTransaction(const CTransaction& tx, CConnman* connman)\n {\n     CInv inv(MSG_TX, tx.GetHash());\n-    connman.ForEachNode([&inv](CNode* pnode)\n+    connman->ForEachNode([&inv](CNode* pnode)\n     {\n         pnode->PushInventory(inv);\n     });\n }\n \n-static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connman)\n+static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connman)\n {\n     unsigned int nRelayNodes = fReachable ? 2 : 1; // limited relaying of addresses outside our network(s)\n \n     // Relay to a limited number of other nodes\n     // Use deterministic randomness to send to the same nodes for 24 hours\n     // at a time so the addrKnowns of the chosen nodes prevent repeats\n     uint64_t hashAddr = addr.GetHash();\n-    const CSipHasher hasher = connman.GetDeterministicRandomizer(RANDOMIZER_ID_ADDRESS_RELAY).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24*60*60));\n+    const CSipHasher hasher = connman->GetDeterministicRandomizer(RANDOMIZER_ID_ADDRESS_RELAY).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24*60*60));\n     FastRandomContext insecure_rand;\n \n     std::array<std::pair<uint64_t, CNode*>,2> best{{{0, nullptr}, {0, nullptr}}};\n@@ -952,10 +1009,10 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n         }\n     };\n \n-    connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n+    connman->ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n+void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n     std::deque<CInv>::iterator it = pfrom->vRecvGetData.begin();\n     std::vector<CInv> vNotFound;\n@@ -1017,7 +1074,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 // disconnect node in case we have reached the outbound limit for serving historical blocks\n                 // never disconnect whitelisted nodes\n                 static const int nOneWeek = 7 * 24 * 60 * 60; // assume > 1 week = historical\n-                if (send && connman.OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n+                if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - mi->second->GetBlockTime() > nOneWeek)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n                 {\n                     LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n \n@@ -1040,9 +1097,9 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         pblock = pblockRead;\n                     }\n                     if (inv.type == MSG_BLOCK)\n-                        connman.PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n+                        connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, *pblock));\n                     else if (inv.type == MSG_WITNESS_BLOCK)\n-                        connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n+                        connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::BLOCK, *pblock));\n                     else if (inv.type == MSG_FILTERED_BLOCK)\n                     {\n                         bool sendMerkleBlock = false;\n@@ -1055,7 +1112,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             }\n                         }\n                         if (sendMerkleBlock) {\n-                            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n+                            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::MERKLEBLOCK, merkleBlock));\n                             // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n                             // This avoids hurting performance by pointlessly requiring a round-trip\n                             // Note that there is currently no way for a node to request any single transactions we didn't send here -\n@@ -1064,7 +1121,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             // however we MUST always provide at least what the remote peer needs\n                             typedef std::pair<unsigned int, uint256> PairType;\n                             for (PairType& pair : merkleBlock.vMatchedTxn)\n-                                connman.PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n+                                connman->PushMessage(pfrom, msgMaker.Make(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::TX, *pblock->vtx[pair.first]));\n                         }\n                         // else\n                             // no response\n@@ -1079,13 +1136,13 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         int nSendFlags = fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n                         if (CanDirectFetch(consensusParams) && mi->second->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n                             if ((fPeerWantsWitness || !fWitnessesPresentInARecentCompactBlock) && a_recent_compact_block && a_recent_compact_block->header.GetHash() == mi->second->GetBlockHash()) {\n-                                connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n+                                connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *a_recent_compact_block));\n                             } else {\n                                 CBlockHeaderAndShortTxIDs cmpctblock(*pblock, fPeerWantsWitness);\n-                                connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                                connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n                             }\n                         } else {\n-                            connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, *pblock));\n+                            connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCK, *pblock));\n                         }\n                     }\n \n@@ -1097,7 +1154,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // wait for other stuff first.\n                         std::vector<CInv> vInv;\n                         vInv.push_back(CInv(MSG_BLOCK, chainActive.Tip()->GetBlockHash()));\n-                        connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n+                        connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n                         pfrom->hashContinue.SetNull();\n                     }\n                 }\n@@ -1109,14 +1166,14 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 auto mi = mapRelay.find(inv.hash);\n                 int nSendFlags = (inv.type == MSG_TX ? SERIALIZE_TRANSACTION_NO_WITNESS : 0);\n                 if (mi != mapRelay.end()) {\n-                    connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n+                    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *mi->second));\n                     push = true;\n                 } else if (pfrom->timeLastMempoolReq) {\n                     auto txinfo = mempool.info(inv.hash);\n                     // To protect privacy, do not answer getdata using the mempool when\n                     // that TX couldn't have been INVed in reply to a MEMPOOL request.\n                     if (txinfo.tx && txinfo.nTime <= pfrom->timeLastMempoolReq) {\n-                        connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *txinfo.tx));\n+                        connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::TX, *txinfo.tx));\n                         push = true;\n                     }\n                 }\n@@ -1143,7 +1200,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n         // do that because they want to know about (and store and rebroadcast and\n         // risk analyze) the dependencies of transactions relevant to them, without\n         // having to download the entire memory pool.\n-        connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::NOTFOUND, vNotFound));\n+        connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::NOTFOUND, vNotFound));\n     }\n }\n \n@@ -1155,7 +1212,7 @@ uint32_t GetFetchFlags(CNode* pfrom) {\n     return nFetchFlags;\n }\n \n-inline void static SendBlockTransactions(const CBlock& block, const BlockTransactionsRequest& req, CNode* pfrom, CConnman& connman) {\n+inline void static SendBlockTransactions(const CBlock& block, const BlockTransactionsRequest& req, CNode* pfrom, CConnman* connman) {\n     BlockTransactions resp(req);\n     for (size_t i = 0; i < req.indexes.size(); i++) {\n         if (req.indexes[i] >= block.vtx.size()) {\n@@ -1169,10 +1226,229 @@ inline void static SendBlockTransactions(const CBlock& block, const BlockTransac\n     LOCK(cs_main);\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     int nSendFlags = State(pfrom->GetId())->fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS;\n-    connman.PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n+    connman->PushMessage(pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n+bool static ProcessHeadersMessage(CNode *pfrom, CConnman *connman, const std::vector<CBlockHeader>& headers, const CChainParams& chainparams, bool punish_duplicate_invalid)\n+{\n+    const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n+    size_t nCount = headers.size();\n+\n+    if (nCount == 0) {\n+        // Nothing interesting. Stop asking this peers for more headers.\n+        return true;\n+    }\n+\n+    bool received_new_header = false;\n+    const CBlockIndex *pindexLast = nullptr;\n+    {\n+        LOCK(cs_main);\n+        CNodeState *nodestate = State(pfrom->GetId());\n+\n+        // If this looks like it could be a block announcement (nCount <\n+        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n+        // don't connect:\n+        // - Send a getheaders message in response to try to connect the chain.\n+        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n+        //   don't connect before giving DoS points\n+        // - Once a headers message is received that is valid and does connect,\n+        //   nUnconnectingHeaders gets reset back to 0.\n+        if (mapBlockIndex.find(headers[0].hashPrevBlock) == mapBlockIndex.end() && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n+            nodestate->nUnconnectingHeaders++;\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n+            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n+                    headers[0].GetHash().ToString(),\n+                    headers[0].hashPrevBlock.ToString(),\n+                    pindexBestHeader->nHeight,\n+                    pfrom->GetId(), nodestate->nUnconnectingHeaders);\n+            // Set hashLastUnknownBlock for this peer, so that if we\n+            // eventually get the headers - even from a different peer -\n+            // we can use this peer to download.\n+            UpdateBlockAvailability(pfrom->GetId(), headers.back().GetHash());\n+\n+            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n+                Misbehaving(pfrom->GetId(), 20);\n+            }\n+            return true;\n+        }\n+\n+        uint256 hashLastBlock;\n+        for (const CBlockHeader& header : headers) {\n+            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n+                Misbehaving(pfrom->GetId(), 20);\n+                return error(\"non-continuous headers sequence\");\n+            }\n+            hashLastBlock = header.GetHash();\n+        }\n+\n+        // If we don't have the last header, then they'll have given us\n+        // something new (if these headers are valid).\n+        if (mapBlockIndex.find(hashLastBlock) == mapBlockIndex.end()) {\n+            received_new_header = true;\n+        }\n+    }\n+\n+    CValidationState state;\n+    CBlockHeader first_invalid_header;\n+    if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast, &first_invalid_header)) {\n+        int nDoS;\n+        if (state.IsInvalid(nDoS)) {\n+            LOCK(cs_main);\n+            if (nDoS > 0) {\n+                Misbehaving(pfrom->GetId(), nDoS);\n+            }\n+            if (punish_duplicate_invalid && mapBlockIndex.find(first_invalid_header.GetHash()) != mapBlockIndex.end()) {\n+                // Goal: don't allow outbound peers to use up our outbound\n+                // connection slots if they are on incompatible chains.\n+                //\n+                // We ask the caller to set punish_invalid appropriately based\n+                // on the peer and the method of header delivery (compact\n+                // blocks are allowed to be invalid in some circumstances,\n+                // under BIP 152).\n+                // Here, we try to detect the narrow situation that we have a\n+                // valid block header (ie it was valid at the time the header\n+                // was received, and hence stored in mapBlockIndex) but know the\n+                // block is invalid, and that a peer has announced that same\n+                // block as being on its active chain.\n+                // Disconnect the peer in such a situation.\n+                //\n+                // Note: if the header that is invalid was not accepted to our\n+                // mapBlockIndex at all, that may also be grounds for\n+                // disconnecting the peer, as the chain they are on is likely\n+                // to be incompatible. However, there is a circumstance where\n+                // that does not hold: if the header's timestamp is more than\n+                // 2 hours ahead of our current time. In that case, the header\n+                // may become valid in the future, and we don't want to\n+                // disconnect a peer merely for serving us one too-far-ahead\n+                // block header, to prevent an attacker from splitting the\n+                // network by mining a block right at the 2 hour boundary.\n+                //\n+                // TODO: update the DoS logic (or, rather, rewrite the\n+                // DoS-interface between validation and net_processing) so that\n+                // the interface is cleaner, and so that we disconnect on all the\n+                // reasons that a peer's headers chain is incompatible\n+                // with ours (eg block->nVersion softforks, MTP violations,\n+                // etc), and not just the duplicate-invalid case.\n+                pfrom->fDisconnect = true;\n+            }\n+            return error(\"invalid header received\");\n+        }\n+    }\n+\n+    {\n+        LOCK(cs_main);\n+        CNodeState *nodestate = State(pfrom->GetId());\n+        if (nodestate->nUnconnectingHeaders > 0) {\n+            LogPrint(BCLog::NET, \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->GetId(), nodestate->nUnconnectingHeaders);\n+        }\n+        nodestate->nUnconnectingHeaders = 0;\n+\n+        assert(pindexLast);\n+        UpdateBlockAvailability(pfrom->GetId(), pindexLast->GetBlockHash());\n+\n+        // From here, pindexBestKnownBlock should be guaranteed to be non-null,\n+        // because it is set in UpdateBlockAvailability. Some nullptr checks\n+        // are still present, however, as belt-and-suspenders.\n+\n+        if (received_new_header && pindexLast->nChainWork > chainActive.Tip()->nChainWork) {\n+            nodestate->m_last_block_announcement = GetTime();\n+        }\n+\n+        if (nCount == MAX_HEADERS_RESULTS) {\n+            // Headers message had its maximum size; the peer may have more headers.\n+            // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n+            // from there instead.\n+            LogPrint(BCLog::NET, \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->GetId(), pfrom->nStartingHeight);\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256()));\n+        }\n+\n+        bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n+        // If this set of headers is valid and ends in a block with at least as\n+        // much work as our tip, download as much as possible.\n+        if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && chainActive.Tip()->nChainWork <= pindexLast->nChainWork) {\n+            std::vector<const CBlockIndex*> vToFetch;\n+            const CBlockIndex *pindexWalk = pindexLast;\n+            // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n+            while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n+                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n+                        (!IsWitnessEnabled(pindexWalk->pprev, chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n+                    // We don't have this block, and it's not yet in flight.\n+                    vToFetch.push_back(pindexWalk);\n+                }\n+                pindexWalk = pindexWalk->pprev;\n+            }\n+            // If pindexWalk still isn't on our main chain, we're looking at a\n+            // very large reorg at a time we think we're close to caught up to\n+            // the main chain -- this shouldn't really happen.  Bail out on the\n+            // direct fetch and rely on parallel download instead.\n+            if (!chainActive.Contains(pindexWalk)) {\n+                LogPrint(BCLog::NET, \"Large reorg, won't direct fetch to %s (%d)\\n\",\n+                        pindexLast->GetBlockHash().ToString(),\n+                        pindexLast->nHeight);\n+            } else {\n+                std::vector<CInv> vGetData;\n+                // Download as much as possible, from earliest to latest.\n+                for (const CBlockIndex *pindex : reverse_iterate(vToFetch)) {\n+                    if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n+                        // Can't download any more from this peer\n+                        break;\n+                    }\n+                    uint32_t nFetchFlags = GetFetchFlags(pfrom);\n+                    vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n+                    MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), pindex);\n+                    LogPrint(BCLog::NET, \"Requesting block %s from  peer=%d\\n\",\n+                            pindex->GetBlockHash().ToString(), pfrom->GetId());\n+                }\n+                if (vGetData.size() > 1) {\n+                    LogPrint(BCLog::NET, \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n+                            pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n+                }\n+                if (vGetData.size() > 0) {\n+                    if (nodestate->fSupportsDesiredCmpctVersion && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n+                        // In any case, we want to download using a compact block, not a regular one\n+                        vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n+                    }\n+                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n+                }\n+            }\n+        }\n+        // If we're in IBD, we want outbound peers that will serve us a useful\n+        // chain. Disconnect peers that are on chains with insufficient work.\n+        if (IsInitialBlockDownload() && nCount != MAX_HEADERS_RESULTS) {\n+            // When nCount < MAX_HEADERS_RESULTS, we know we have no more\n+            // headers to fetch from this peer.\n+            if (nodestate->pindexBestKnownBlock && nodestate->pindexBestKnownBlock->nChainWork < nMinimumChainWork) {\n+                // This peer has too little work on their headers chain to help\n+                // us sync -- disconnect if using an outbound slot (unless\n+                // whitelisted or addnode).\n+                // Note: We compare their tip to nMinimumChainWork (rather than\n+                // chainActive.Tip()) because we won't start block download\n+                // until we have a headers chain that has at least\n+                // nMinimumChainWork, even if a peer has a chain past our tip,\n+                // as an anti-DoS measure.\n+                if (IsOutboundDisconnectionCandidate(pfrom)) {\n+                    LogPrintf(\"Disconnecting outbound peer %d -- headers chain has insufficient work\\n\", pfrom->GetId());\n+                    pfrom->fDisconnect = true;\n+                }\n+            }\n+        }\n+\n+        if (!pfrom->fDisconnect && IsOutboundDisconnectionCandidate(pfrom) && nodestate->pindexBestKnownBlock != nullptr) {\n+            // If this is an outbound peer, check to see if we should protect\n+            // it from the bad/lagging chain logic.\n+            if (g_outbound_peers_with_protect_from_disconnect < MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT && nodestate->pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork && !nodestate->m_chain_sync.m_protect) {\n+                LogPrint(BCLog::NET, \"Protecting outbound peer=%d from eviction\\n\", pfrom->GetId());\n+                nodestate->m_chain_sync.m_protect = true;\n+                ++g_outbound_peers_with_protect_from_disconnect;\n+            }\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -1225,7 +1501,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n-            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, std::string(\"Duplicate version message\")));\n+            connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, std::string(\"Duplicate version message\")));\n             LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 1);\n             return false;\n@@ -1249,12 +1525,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         nServices = ServiceFlags(nServiceInt);\n         if (!pfrom->fInbound)\n         {\n-            connman.SetServices(pfrom->addr, nServices);\n+            connman->SetServices(pfrom->addr, nServices);\n         }\n         if (pfrom->nServicesExpected & ~nServices)\n         {\n             LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->GetId(), nServices, pfrom->nServicesExpected);\n-            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n+            connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n                                strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected)));\n             pfrom->fDisconnect = true;\n             return false;\n@@ -1275,7 +1551,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         {\n             // disconnect from peers older than this proto version\n             LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->GetId(), nVersion);\n-            connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n+            connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n                                strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION)));\n             pfrom->fDisconnect = true;\n             return false;\n@@ -1295,7 +1571,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (!vRecv.empty())\n             vRecv >> fRelay;\n         // Disconnect if we connected to ourself\n-        if (pfrom->fInbound && !connman.CheckIncomingNonce(nNonce))\n+        if (pfrom->fInbound && !connman->CheckIncomingNonce(nNonce))\n         {\n             LogPrintf(\"connected to self at %s, disconnecting\\n\", pfrom->addr.ToString());\n             pfrom->fDisconnect = true;\n@@ -1311,7 +1587,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (pfrom->fInbound)\n             PushNodeVersion(pfrom, connman, GetAdjustedTime());\n \n-        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n+        connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::VERACK));\n \n         pfrom->nServices = nServices;\n         pfrom->SetAddrLocal(addrMe);\n@@ -1362,12 +1638,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             }\n \n             // Get recent addresses\n-            if (pfrom->fOneShot || pfrom->nVersion >= CADDR_TIME_VERSION || connman.GetAddressCount() < 1000)\n+            if (pfrom->fOneShot || pfrom->nVersion >= CADDR_TIME_VERSION || connman->GetAddressCount() < 1000)\n             {\n-                connman.PushMessage(pfrom, CNetMsgMaker(nSendVersion).Make(NetMsgType::GETADDR));\n+                connman->PushMessage(pfrom, CNetMsgMaker(nSendVersion).Make(NetMsgType::GETADDR));\n                 pfrom->fGetAddr = true;\n             }\n-            connman.MarkAddressGood(pfrom->addr);\n+            connman->MarkAddressGood(pfrom->addr);\n         }\n \n         std::string remoteAddr;\n@@ -1386,7 +1662,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // If the peer is old enough to have the old alert system, send it the final alert.\n         if (pfrom->nVersion <= 70012) {\n             CDataStream finalAlert(ParseHex(\"60010000000000000000000000ffffff7f00000000ffffff7ffeffff7f01ffffff7f00000000ffffff7f00ffffff7f002f555247454e543a20416c657274206b657920636f6d70726f6d697365642c2075706772616465207265717569726564004630440220653febd6410f470f6bae11cad19c48413becb1ac2c17f908fd0fd53bdc3abd5202206d0e9c96fe88d4a0f01ed9dedae2b6f9e00da94cad0fecaae66ecf689bf71b50\"), SER_NETWORK, PROTOCOL_VERSION);\n-            connman.PushMessage(pfrom, CNetMsgMaker(nSendVersion).Make(\"alert\", finalAlert));\n+            connman->PushMessage(pfrom, CNetMsgMaker(nSendVersion).Make(\"alert\", finalAlert));\n         }\n \n         // Feeler connections exist only to verify if address is online.\n@@ -1424,7 +1700,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // We send this to non-NODE NETWORK peers as well, because even\n             // non-NODE NETWORK peers can announce blocks (such as pruning\n             // nodes)\n-            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDHEADERS));\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDHEADERS));\n         }\n         if (pfrom->nVersion >= SHORT_IDS_BLOCKS_VERSION) {\n             // Tell our peer we are willing to provide version 1 or 2 cmpctblocks\n@@ -1435,9 +1711,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             bool fAnnounceUsingCMPCTBLOCK = false;\n             uint64_t nCMPCTBLOCKVersion = 2;\n             if (pfrom->GetLocalServices() & NODE_WITNESS)\n-                connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n             nCMPCTBLOCKVersion = 1;\n-            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion));\n         }\n         pfrom->fSuccessfullyConnected = true;\n     }\n@@ -1456,7 +1732,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         vRecv >> vAddr;\n \n         // Don't want addr from older versions unless seeding\n-        if (pfrom->nVersion < CADDR_TIME_VERSION && connman.GetAddressCount() > 1000)\n+        if (pfrom->nVersion < CADDR_TIME_VERSION && connman->GetAddressCount() > 1000)\n             return true;\n         if (vAddr.size() > 1000)\n         {\n@@ -1490,7 +1766,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             if (fReachable)\n                 vAddrOk.push_back(addr);\n         }\n-        connman.AddNewAddresses(vAddrOk, pfrom->addr, 2 * 60 * 60);\n+        connman->AddNewAddresses(vAddrOk, pfrom->addr, 2 * 60 * 60);\n         if (vAddr.size() < 1000)\n             pfrom->fGetAddr = false;\n         if (pfrom->fOneShot)\n@@ -1568,7 +1844,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     // fell back to inv we probably have a reorg which we should get the headers for first,\n                     // we now only provide a getheaders response here. When we receive the headers, we will\n                     // then ask for the blocks we need.\n-                    connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), inv.hash));\n+                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), inv.hash));\n                     LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->GetId());\n                 }\n             }\n@@ -1774,7 +2050,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // will re-announce the new block via headers (or compact blocks again)\n         // in the SendMessages logic.\n         nodestate->pindexBestHeaderSent = pindex ? pindex : chainActive.Tip();\n-        connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n+        connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n     }\n \n \n@@ -1955,7 +2231,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 pfrom->GetId(),\n                 FormatStateMessage(state));\n             if (state.GetRejectCode() > 0 && state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n-                connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash));\n             if (nDoS > 0) {\n                 Misbehaving(pfrom->GetId(), nDoS);\n@@ -1969,15 +2245,21 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         CBlockHeaderAndShortTxIDs cmpctblock;\n         vRecv >> cmpctblock;\n \n+        bool received_new_header = false;\n+\n         {\n         LOCK(cs_main);\n \n         if (mapBlockIndex.find(cmpctblock.header.hashPrevBlock) == mapBlockIndex.end()) {\n             // Doesn't connect (or is genesis), instead of DoSing in AcceptBlockHeader, request deeper headers\n             if (!IsInitialBlockDownload())\n-                connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n             return true;\n         }\n+\n+        if (mapBlockIndex.find(cmpctblock.header.GetHash()) == mapBlockIndex.end()) {\n+            received_new_header = true;\n+        }\n         }\n \n         const CBlockIndex *pindex = nullptr;\n@@ -2004,7 +2286,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // If we end up treating this as a plain headers message, call that as well\n         // without cs_main.\n         bool fRevertToHeaderProcessing = false;\n-        CDataStream vHeadersMsg(SER_NETWORK, PROTOCOL_VERSION);\n \n         // Keep a CBlock for \"optimistic\" compactblock reconstructions (see\n         // below)\n@@ -2017,6 +2298,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         assert(pindex);\n         UpdateBlockAvailability(pfrom->GetId(), pindex->GetBlockHash());\n \n+        CNodeState *nodestate = State(pfrom->GetId());\n+\n+        // If this was a new header with more work than our tip, update the\n+        // peer's last block announcement time\n+        if (received_new_header && pindex->nChainWork > chainActive.Tip()->nChainWork) {\n+            nodestate->m_last_block_announcement = GetTime();\n+        }\n+\n         std::map<uint256, std::pair<NodeId, std::list<QueuedBlock>::iterator> >::iterator blockInFlightIt = mapBlocksInFlight.find(pindex->GetBlockHash());\n         bool fAlreadyInFlight = blockInFlightIt != mapBlocksInFlight.end();\n \n@@ -2030,7 +2319,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // so we just grab the block via normal getdata\n                 std::vector<CInv> vInv(1);\n                 vInv[0] = CInv(MSG_BLOCK | GetFetchFlags(pfrom), cmpctblock.header.GetHash());\n-                connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vInv));\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vInv));\n             }\n             return true;\n         }\n@@ -2039,8 +2328,6 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (!fAlreadyInFlight && !CanDirectFetch(chainparams.GetConsensus()))\n             return true;\n \n-        CNodeState *nodestate = State(pfrom->GetId());\n-\n         if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) && !nodestate->fSupportsDesiredCmpctVersion) {\n             // Don't bother trying to process compact blocks from v1 peers\n             // after segwit activates.\n@@ -2074,7 +2361,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     // Duplicate txindexes, the block is now in-flight, so just request it\n                     std::vector<CInv> vInv(1);\n                     vInv[0] = CInv(MSG_BLOCK | GetFetchFlags(pfrom), cmpctblock.header.GetHash());\n-                    connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vInv));\n+                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vInv));\n                     return true;\n                 }\n \n@@ -2091,7 +2378,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                     fProcessBLOCKTXN = true;\n                 } else {\n                     req.blockhash = pindex->GetBlockHash();\n-                    connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETBLOCKTXN, req));\n+                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETBLOCKTXN, req));\n                 }\n             } else {\n                 // This block is either already in flight from a different\n@@ -2117,14 +2404,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // mempool will probably be useless - request the block normally\n                 std::vector<CInv> vInv(1);\n                 vInv[0] = CInv(MSG_BLOCK | GetFetchFlags(pfrom), cmpctblock.header.GetHash());\n-                connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vInv));\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vInv));\n                 return true;\n             } else {\n                 // If this was an announce-cmpctblock, we want the same treatment as a header message\n-                // Dirty hack to process as if it were just a headers message (TODO: move message handling into their own functions)\n-                std::vector<CBlock> headers;\n-                headers.push_back(cmpctblock.header);\n-                vHeadersMsg << headers;\n                 fRevertToHeaderProcessing = true;\n             }\n         }\n@@ -2133,8 +2416,14 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (fProcessBLOCKTXN)\n             return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n \n-        if (fRevertToHeaderProcessing)\n-            return ProcessMessage(pfrom, NetMsgType::HEADERS, vHeadersMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n+        if (fRevertToHeaderProcessing) {\n+            // Headers received from HB compact block peers are permitted to be\n+            // relayed before full validation (see BIP 152), so we don't want to disconnect\n+            // the peer if the header turns out to be for an invalid block.\n+            // Note that if a peer tries to build on an invalid chain, that\n+            // will be detected and the peer will be banned.\n+            return ProcessHeadersMessage(pfrom, connman, {cmpctblock.header}, chainparams, /*punish_duplicate_invalid=*/false);\n+        }\n \n         if (fBlockReconstructed) {\n             // If we got here, we were able to optimistically reconstruct a\n@@ -2144,7 +2433,16 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 mapBlockSource.emplace(pblock->GetHash(), std::make_pair(pfrom->GetId(), false));\n             }\n             bool fNewBlock = false;\n-            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            // Setting fForceProcessing to true means that we bypass some of\n+            // our anti-DoS protections in AcceptBlock, which filters\n+            // unrequested blocks that might be trying to waste our resources\n+            // (eg disk space). Because we only try to reconstruct blocks when\n+            // we're close to caught up (via the CanDirectFetch() requirement\n+            // above, combined with the behavior of not requesting blocks until\n+            // we have a chain with at least nMinimumChainWork), and we ignore\n+            // compact blocks with less work than our tip, it is safe to treat\n+            // reconstructed compact blocks as having been requested.\n+            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n@@ -2191,7 +2489,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n                 // Might have collided, fall back to getdata now :(\n                 std::vector<CInv> invs;\n                 invs.push_back(CInv(MSG_BLOCK | GetFetchFlags(pfrom), resp.blockhash));\n-                connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, invs));\n+                connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, invs));\n             } else {\n                 // Block is either okay, or possibly we received\n                 // READ_STATUS_CHECKBLOCK_FAILED.\n@@ -2224,7 +2522,11 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             bool fNewBlock = false;\n             // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n             // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n-            ProcessNewBlock(chainparams, pblock, true, &fNewBlock);\n+            // This bypasses some anti-DoS logic in AcceptBlock (eg to prevent\n+            // disk-space attacks), but this should be safe due to the\n+            // protections in the compact block handler -- see related comment\n+            // in compact block optimistic reconstruction handling.\n+            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n@@ -2252,136 +2554,12 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             ReadCompactSize(vRecv); // ignore tx count; assume it is 0.\n         }\n \n-        if (nCount == 0) {\n-            // Nothing interesting. Stop asking this peers for more headers.\n-            return true;\n-        }\n-\n-        const CBlockIndex *pindexLast = nullptr;\n-        {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom->GetId());\n-\n-        // If this looks like it could be a block announcement (nCount <\n-        // MAX_BLOCKS_TO_ANNOUNCE), use special logic for handling headers that\n-        // don't connect:\n-        // - Send a getheaders message in response to try to connect the chain.\n-        // - The peer can send up to MAX_UNCONNECTING_HEADERS in a row that\n-        //   don't connect before giving DoS points\n-        // - Once a headers message is received that is valid and does connect,\n-        //   nUnconnectingHeaders gets reset back to 0.\n-        if (mapBlockIndex.find(headers[0].hashPrevBlock) == mapBlockIndex.end() && nCount < MAX_BLOCKS_TO_ANNOUNCE) {\n-            nodestate->nUnconnectingHeaders++;\n-            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexBestHeader), uint256()));\n-            LogPrint(BCLog::NET, \"received header %s: missing prev block %s, sending getheaders (%d) to end (peer=%d, nUnconnectingHeaders=%d)\\n\",\n-                    headers[0].GetHash().ToString(),\n-                    headers[0].hashPrevBlock.ToString(),\n-                    pindexBestHeader->nHeight,\n-                    pfrom->GetId(), nodestate->nUnconnectingHeaders);\n-            // Set hashLastUnknownBlock for this peer, so that if we\n-            // eventually get the headers - even from a different peer -\n-            // we can use this peer to download.\n-            UpdateBlockAvailability(pfrom->GetId(), headers.back().GetHash());\n-\n-            if (nodestate->nUnconnectingHeaders % MAX_UNCONNECTING_HEADERS == 0) {\n-                Misbehaving(pfrom->GetId(), 20);\n-            }\n-            return true;\n-        }\n-\n-        uint256 hashLastBlock;\n-        for (const CBlockHeader& header : headers) {\n-            if (!hashLastBlock.IsNull() && header.hashPrevBlock != hashLastBlock) {\n-                Misbehaving(pfrom->GetId(), 20);\n-                return error(\"non-continuous headers sequence\");\n-            }\n-            hashLastBlock = header.GetHash();\n-        }\n-        }\n-\n-        CValidationState state;\n-        if (!ProcessNewBlockHeaders(headers, state, chainparams, &pindexLast)) {\n-            int nDoS;\n-            if (state.IsInvalid(nDoS)) {\n-                if (nDoS > 0) {\n-                    LOCK(cs_main);\n-                    Misbehaving(pfrom->GetId(), nDoS);\n-                }\n-                return error(\"invalid header received\");\n-            }\n-        }\n-\n-        {\n-        LOCK(cs_main);\n-        CNodeState *nodestate = State(pfrom->GetId());\n-        if (nodestate->nUnconnectingHeaders > 0) {\n-            LogPrint(BCLog::NET, \"peer=%d: resetting nUnconnectingHeaders (%d -> 0)\\n\", pfrom->GetId(), nodestate->nUnconnectingHeaders);\n-        }\n-        nodestate->nUnconnectingHeaders = 0;\n-\n-        assert(pindexLast);\n-        UpdateBlockAvailability(pfrom->GetId(), pindexLast->GetBlockHash());\n-\n-        if (nCount == MAX_HEADERS_RESULTS) {\n-            // Headers message had its maximum size; the peer may have more headers.\n-            // TODO: optimize: if pindexLast is an ancestor of chainActive.Tip or pindexBestHeader, continue\n-            // from there instead.\n-            LogPrint(BCLog::NET, \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom->GetId(), pfrom->nStartingHeight);\n-            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexLast), uint256()));\n-        }\n-\n-        bool fCanDirectFetch = CanDirectFetch(chainparams.GetConsensus());\n-        // If this set of headers is valid and ends in a block with at least as\n-        // much work as our tip, download as much as possible.\n-        if (fCanDirectFetch && pindexLast->IsValid(BLOCK_VALID_TREE) && chainActive.Tip()->nChainWork <= pindexLast->nChainWork) {\n-            std::vector<const CBlockIndex*> vToFetch;\n-            const CBlockIndex *pindexWalk = pindexLast;\n-            // Calculate all the blocks we'd need to switch to pindexLast, up to a limit.\n-            while (pindexWalk && !chainActive.Contains(pindexWalk) && vToFetch.size() <= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-                if (!(pindexWalk->nStatus & BLOCK_HAVE_DATA) &&\n-                        !mapBlocksInFlight.count(pindexWalk->GetBlockHash()) &&\n-                        (!IsWitnessEnabled(pindexWalk->pprev, chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n-                    // We don't have this block, and it's not yet in flight.\n-                    vToFetch.push_back(pindexWalk);\n-                }\n-                pindexWalk = pindexWalk->pprev;\n-            }\n-            // If pindexWalk still isn't on our main chain, we're looking at a\n-            // very large reorg at a time we think we're close to caught up to\n-            // the main chain -- this shouldn't really happen.  Bail out on the\n-            // direct fetch and rely on parallel download instead.\n-            if (!chainActive.Contains(pindexWalk)) {\n-                LogPrint(BCLog::NET, \"Large reorg, won't direct fetch to %s (%d)\\n\",\n-                        pindexLast->GetBlockHash().ToString(),\n-                        pindexLast->nHeight);\n-            } else {\n-                std::vector<CInv> vGetData;\n-                // Download as much as possible, from earliest to latest.\n-                for (const CBlockIndex *pindex : reverse_iterate(vToFetch)) {\n-                    if (nodestate->nBlocksInFlight >= MAX_BLOCKS_IN_TRANSIT_PER_PEER) {\n-                        // Can't download any more from this peer\n-                        break;\n-                    }\n-                    uint32_t nFetchFlags = GetFetchFlags(pfrom);\n-                    vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n-                    MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), pindex);\n-                    LogPrint(BCLog::NET, \"Requesting block %s from  peer=%d\\n\",\n-                            pindex->GetBlockHash().ToString(), pfrom->GetId());\n-                }\n-                if (vGetData.size() > 1) {\n-                    LogPrint(BCLog::NET, \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n-                            pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n-                }\n-                if (vGetData.size() > 0) {\n-                    if (nodestate->fSupportsDesiredCmpctVersion && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n-                        // In any case, we want to download using a compact block, not a regular one\n-                        vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n-                    }\n-                    connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n-                }\n-            }\n-        }\n-        }\n+        // Headers received via a HEADERS message should be valid, and reflect\n+        // the chain the peer is on. If we receive a known-invalid header,\n+        // disconnect the peer if it is using one of our outbound connection\n+        // slots.\n+        bool should_punish = !pfrom->fInbound && !pfrom->m_manual_connection;\n+        return ProcessHeadersMessage(pfrom, connman, headers, chainparams, should_punish);\n     }\n \n     else if (strCommand == NetMsgType::BLOCK && !fImporting && !fReindex) // Ignore blocks received while importing\n@@ -2391,11 +2569,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         LogPrint(BCLog::NET, \"received block %s peer=%d\\n\", pblock->GetHash().ToString(), pfrom->GetId());\n \n-        // Process all blocks from whitelisted peers, even if not requested,\n-        // unless we're still syncing with the network.\n-        // Such an unrequested block may still be processed, subject to the\n-        // conditions in AcceptBlock().\n-        bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        bool forceProcessing = false;\n         const uint256 hash(pblock->GetHash());\n         {\n             LOCK(cs_main);\n@@ -2438,7 +2612,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         pfrom->fSentAddr = true;\n \n         pfrom->vAddrToSend.clear();\n-        std::vector<CAddress> vAddr = connman.GetAddresses();\n+        std::vector<CAddress> vAddr = connman->GetAddresses();\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr)\n             pfrom->PushAddress(addr, insecure_rand);\n@@ -2454,7 +2628,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             return true;\n         }\n \n-        if (connman.OutboundTargetReached(false) && !pfrom->fWhitelisted)\n+        if (connman->OutboundTargetReached(false) && !pfrom->fWhitelisted)\n         {\n             LogPrint(BCLog::NET, \"mempool request with bandwidth limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n             pfrom->fDisconnect = true;\n@@ -2483,7 +2657,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // it, if the remote node sends a ping once per second and this node takes 5\n             // seconds to respond to each, the 5th ping the remote sends would appear to\n             // return very quickly.\n-            connman.PushMessage(pfrom, msgMaker.Make(NetMsgType::PONG, nonce));\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::PONG, nonce));\n         }\n     }\n \n@@ -2629,37 +2803,37 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n-static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman& connman)\n+static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n {\n     AssertLockHeld(cs_main);\n     CNodeState &state = *State(pnode->GetId());\n \n     for (const CBlockReject& reject : state.rejects) {\n-        connman.PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+        connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, (std::string)NetMsgType::BLOCK, reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n     }\n     state.rejects.clear();\n \n     if (state.fShouldBan) {\n         state.fShouldBan = false;\n         if (pnode->fWhitelisted)\n             LogPrintf(\"Warning: not punishing whitelisted peer %s!\\n\", pnode->addr.ToString());\n-        else if (pnode->fAddnode)\n+        else if (pnode->m_manual_connection)\n             LogPrintf(\"Warning: not punishing addnoded peer %s!\\n\", pnode->addr.ToString());\n         else {\n             pnode->fDisconnect = true;\n             if (pnode->addr.IsLocal())\n                 LogPrintf(\"Warning: not banning local peer %s!\\n\", pnode->addr.ToString());\n             else\n             {\n-                connman.Ban(pnode->addr, BanReasonNodeMisbehaving);\n+                connman->Ban(pnode->addr, BanReasonNodeMisbehaving);\n             }\n         }\n         return true;\n     }\n     return false;\n }\n \n-bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n+bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& interruptMsgProc)\n {\n     const CChainParams& chainparams = Params();\n     //\n@@ -2693,7 +2867,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n         // Just take one message\n         msgs.splice(msgs.begin(), pfrom->vProcessMsg, pfrom->vProcessMsg.begin());\n         pfrom->nProcessQueueSize -= msgs.front().vRecv.size() + CMessageHeader::HEADER_SIZE;\n-        pfrom->fPauseRecv = pfrom->nProcessQueueSize > connman.GetReceiveFloodSize();\n+        pfrom->fPauseRecv = pfrom->nProcessQueueSize > connman->GetReceiveFloodSize();\n         fMoreWork = !pfrom->vProcessMsg.empty();\n     }\n     CNetMessage& msg(msgs.front());\n@@ -2742,7 +2916,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n     }\n     catch (const std::ios_base::failure& e)\n     {\n-        connman.PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n+        connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n         if (strstr(e.what(), \"end of data\"))\n         {\n             // Allow exceptions from under-length message on vRecv\n@@ -2779,6 +2953,135 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& i\n     return fMoreWork;\n }\n \n+void PeerLogicValidation::ConsiderEviction(CNode *pto, int64_t time_in_seconds)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    CNodeState &state = *State(pto->GetId());\n+    const CNetMsgMaker msgMaker(pto->GetSendVersion());\n+\n+    if (!state.m_chain_sync.m_protect && IsOutboundDisconnectionCandidate(pto) && state.fSyncStarted) {\n+        // This is an outbound peer subject to disconnection if they don't\n+        // announce a block with as much work as the current tip within\n+        // CHAIN_SYNC_TIMEOUT + HEADERS_RESPONSE_TIME seconds (note: if\n+        // their chain has more work than ours, we should sync to it,\n+        // unless it's invalid, in which case we should find that out and\n+        // disconnect from them elsewhere).\n+        if (state.pindexBestKnownBlock != nullptr && state.pindexBestKnownBlock->nChainWork >= chainActive.Tip()->nChainWork) {\n+            if (state.m_chain_sync.m_timeout != 0) {\n+                state.m_chain_sync.m_timeout = 0;\n+                state.m_chain_sync.m_work_header = nullptr;\n+                state.m_chain_sync.m_sent_getheaders = false;\n+            }\n+        } else if (state.m_chain_sync.m_timeout == 0 || (state.m_chain_sync.m_work_header != nullptr && state.pindexBestKnownBlock != nullptr && state.pindexBestKnownBlock->nChainWork >= state.m_chain_sync.m_work_header->nChainWork)) {\n+            // Our best block known by this peer is behind our tip, and we're either noticing\n+            // that for the first time, OR this peer was able to catch up to some earlier point\n+            // where we checked against our tip.\n+            // Either way, set a new timeout based on current tip.\n+            state.m_chain_sync.m_timeout = time_in_seconds + CHAIN_SYNC_TIMEOUT;\n+            state.m_chain_sync.m_work_header = chainActive.Tip();\n+            state.m_chain_sync.m_sent_getheaders = false;\n+        } else if (state.m_chain_sync.m_timeout > 0 && time_in_seconds > state.m_chain_sync.m_timeout) {\n+            // No evidence yet that our peer has synced to a chain with work equal to that\n+            // of our tip, when we first detected it was behind. Send a single getheaders\n+            // message to give the peer a chance to update us.\n+            if (state.m_chain_sync.m_sent_getheaders) {\n+                // They've run out of time to catch up!\n+                LogPrintf(\"Disconnecting outbound peer %d for old chain, best known block = %s\\n\", pto->GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\");\n+                pto->fDisconnect = true;\n+            } else {\n+                LogPrint(BCLog::NET, \"sending getheaders to outbound peer=%d to verify chain work (current best known block:%s, benchmark blockhash: %s)\\n\", pto->GetId(), state.pindexBestKnownBlock != nullptr ? state.pindexBestKnownBlock->GetBlockHash().ToString() : \"<none>\", state.m_chain_sync.m_work_header->GetBlockHash().ToString());\n+                connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(state.m_chain_sync.m_work_header->pprev), uint256()));\n+                state.m_chain_sync.m_sent_getheaders = true;\n+                constexpr int64_t HEADERS_RESPONSE_TIME = 120; // 2 minutes\n+                // Bump the timeout to allow a response, which could clear the timeout\n+                // (if the response shows the peer has synced), reset the timeout (if\n+                // the peer syncs to the required work but not to our tip), or result\n+                // in disconnect (if we advance to the timeout and pindexBestKnownBlock\n+                // has not sufficiently progressed)\n+                state.m_chain_sync.m_timeout = time_in_seconds + HEADERS_RESPONSE_TIME;\n+            }\n+        }\n+    }\n+}\n+\n+void PeerLogicValidation::EvictExtraOutboundPeers(int64_t time_in_seconds)\n+{\n+    // Check whether we have too many outbound peers\n+    int extra_peers = connman->GetExtraOutboundCount();\n+    if (extra_peers > 0) {\n+        // If we have more outbound peers than we target, disconnect one.\n+        // Pick the outbound peer that least recently announced\n+        // us a new block, with ties broken by choosing the more recent\n+        // connection (higher node id)\n+        NodeId worst_peer = -1;\n+        int64_t oldest_block_announcement = std::numeric_limits<int64_t>::max();\n+\n+        LOCK(cs_main);\n+\n+        connman->ForEachNode([&](CNode* pnode) {\n+            // Ignore non-outbound peers, or nodes marked for disconnect already\n+            if (!IsOutboundDisconnectionCandidate(pnode) || pnode->fDisconnect) return;\n+            CNodeState *state = State(pnode->GetId());\n+            if (state == nullptr) return; // shouldn't be possible, but just in case\n+            // Don't evict our protected peers\n+            if (state->m_chain_sync.m_protect) return;\n+            if (state->m_last_block_announcement < oldest_block_announcement || (state->m_last_block_announcement == oldest_block_announcement && pnode->GetId() > worst_peer)) {\n+                worst_peer = pnode->GetId();\n+                oldest_block_announcement = state->m_last_block_announcement;\n+            }\n+        });\n+        if (worst_peer != -1) {\n+            bool disconnected = connman->ForNode(worst_peer, [&](CNode *pnode) {\n+                // Only disconnect a peer that has been connected to us for\n+                // some reasonable fraction of our check-frequency, to give\n+                // it time for new information to have arrived.\n+                // Also don't disconnect any peer we're trying to download a\n+                // block from.\n+                CNodeState &state = *State(pnode->GetId());\n+                if (time_in_seconds - pnode->nTimeConnected > MINIMUM_CONNECT_TIME && state.nBlocksInFlight == 0) {\n+                    LogPrint(BCLog::NET, \"disconnecting extra outbound peer=%d (last block announcement received at time %d)\\n\", pnode->GetId(), oldest_block_announcement);\n+                    pnode->fDisconnect = true;\n+                    return true;\n+                } else {\n+                    LogPrint(BCLog::NET, \"keeping outbound peer=%d chosen for eviction (connect time: %d, blocks_in_flight: %d)\\n\", pnode->GetId(), pnode->nTimeConnected, state.nBlocksInFlight);\n+                    return false;\n+                }\n+            });\n+            if (disconnected) {\n+                // If we disconnected an extra peer, that means we successfully\n+                // connected to at least one peer after the last time we\n+                // detected a stale tip. Don't try any more extra peers until\n+                // we next detect a stale tip, to limit the load we put on the\n+                // network from these extra connections.\n+                connman->SetTryNewOutboundPeer(false);\n+            }\n+        }\n+    }\n+}\n+\n+void PeerLogicValidation::CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams)\n+{\n+    if (connman == nullptr) return;\n+\n+    int64_t time_in_seconds = GetTime();\n+\n+    EvictExtraOutboundPeers(time_in_seconds);\n+\n+    if (time_in_seconds > m_stale_tip_check_time) {\n+        LOCK(cs_main);\n+        // Check whether our tip is stale, and if so, allow using an extra\n+        // outbound peer\n+        if (TipMayBeStale(consensusParams)) {\n+            LogPrintf(\"Potential stale tip detected, will try using extra outbound peer (last tip update: %d seconds ago)\\n\", time_in_seconds - g_last_tip_update);\n+            connman->SetTryNewOutboundPeer(true);\n+        } else if (connman->GetTryNewOutboundPeer()) {\n+            connman->SetTryNewOutboundPeer(false);\n+        }\n+        m_stale_tip_check_time = time_in_seconds + STALE_CHECK_INTERVAL;\n+    }\n+}\n+\n class CompareInvMempoolOrder\n {\n     CTxMemPool *mp;\n@@ -2796,7 +3099,7 @@ class CompareInvMempoolOrder\n     }\n };\n \n-bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interruptMsgProc)\n+bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptMsgProc)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {\n@@ -2828,11 +3131,11 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n             pto->nPingUsecStart = GetTimeMicros();\n             if (pto->nVersion > BIP0031_VERSION) {\n                 pto->nPingNonceSent = nonce;\n-                connman.PushMessage(pto, msgMaker.Make(NetMsgType::PING, nonce));\n+                connman->PushMessage(pto, msgMaker.Make(NetMsgType::PING, nonce));\n             } else {\n                 // Peer is too old to support ping command with nonce, pong will never arrive.\n                 pto->nPingNonceSent = 0;\n-                connman.PushMessage(pto, msgMaker.Make(NetMsgType::PING));\n+                connman->PushMessage(pto, msgMaker.Make(NetMsgType::PING));\n             }\n         }\n \n@@ -2867,14 +3170,14 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                     // receiver rejects addr messages larger than 1000\n                     if (vAddr.size() >= 1000)\n                     {\n-                        connman.PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n+                        connman->PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n                         vAddr.clear();\n                     }\n                 }\n             }\n             pto->vAddrToSend.clear();\n             if (!vAddr.empty())\n-                connman.PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n+                connman->PushMessage(pto, msgMaker.Make(NetMsgType::ADDR, vAddr));\n             // we only send the big addr message once\n             if (pto->vAddrToSend.capacity() > 40)\n                 pto->vAddrToSend.shrink_to_fit();\n@@ -2901,7 +3204,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 if (pindexStart->pprev)\n                     pindexStart = pindexStart->pprev;\n                 LogPrint(BCLog::NET, \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->GetId(), pto->nStartingHeight);\n-                connman.PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexStart), uint256()));\n+                connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, chainActive.GetLocator(pindexStart), uint256()));\n             }\n         }\n \n@@ -2910,7 +3213,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n         // transactions become unconfirmed and spams other nodes.\n         if (!fReindex && !fImporting && !IsInitialBlockDownload())\n         {\n-            GetMainSignals().Broadcast(nTimeBestReceived, &connman);\n+            GetMainSignals().Broadcast(nTimeBestReceived, connman);\n         }\n \n         //\n@@ -2994,10 +3297,10 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                         LOCK(cs_most_recent_block);\n                         if (most_recent_block_hash == pBestIndex->GetBlockHash()) {\n                             if (state.fWantsCmpctWitness || !fWitnessesPresentInMostRecentCompactBlock)\n-                                connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *most_recent_compact_block));\n+                                connman->PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, *most_recent_compact_block));\n                             else {\n                                 CBlockHeaderAndShortTxIDs cmpctblock(*most_recent_block, state.fWantsCmpctWitness);\n-                                connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                                connman->PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n                             }\n                             fGotBlockFromCache = true;\n                         }\n@@ -3007,7 +3310,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                         bool ret = ReadBlockFromDisk(block, pBestIndex, consensusParams);\n                         assert(ret);\n                         CBlockHeaderAndShortTxIDs cmpctblock(block, state.fWantsCmpctWitness);\n-                        connman.PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n+                        connman->PushMessage(pto, msgMaker.Make(nSendFlags, NetMsgType::CMPCTBLOCK, cmpctblock));\n                     }\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else if (state.fPreferHeaders) {\n@@ -3020,7 +3323,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                         LogPrint(BCLog::NET, \"%s: sending header %s to peer=%d\\n\", __func__,\n                                 vHeaders.front().GetHash().ToString(), pto->GetId());\n                     }\n-                    connman.PushMessage(pto, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n+                    connman->PushMessage(pto, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else\n                     fRevertToInv = true;\n@@ -3066,7 +3369,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n             for (const uint256& hash : pto->vInventoryBlockToSend) {\n                 vInv.push_back(CInv(MSG_BLOCK, hash));\n                 if (vInv.size() == MAX_INV_SZ) {\n-                    connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n+                    connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n                     vInv.clear();\n                 }\n             }\n@@ -3112,7 +3415,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                     pto->filterInventoryKnown.insert(hash);\n                     vInv.push_back(inv);\n                     if (vInv.size() == MAX_INV_SZ) {\n-                        connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n+                        connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n                         vInv.clear();\n                     }\n                 }\n@@ -3178,15 +3481,15 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                         }\n                     }\n                     if (vInv.size() == MAX_INV_SZ) {\n-                        connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n+                        connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n                         vInv.clear();\n                     }\n                     pto->filterInventoryKnown.insert(hash);\n                 }\n             }\n         }\n         if (!vInv.empty())\n-            connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n+            connman->PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n \n         // Detect whether we're stalling\n         nNow = GetTimeMicros();\n@@ -3245,6 +3548,9 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n             }\n         }\n \n+        // Check that outbound peers have reasonable chains\n+        // GetTime() is used by this anti-DoS logic so we can test this using mocktime\n+        ConsiderEviction(pto, GetTime());\n \n         //\n         // Message: getdata (blocks)\n@@ -3281,7 +3587,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 vGetData.push_back(inv);\n                 if (vGetData.size() >= 1000)\n                 {\n-                    connman.PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n+                    connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n                     vGetData.clear();\n                 }\n             } else {\n@@ -3291,7 +3597,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n             pto->mapAskFor.erase(pto->mapAskFor.begin());\n         }\n         if (!vGetData.empty())\n-            connman.PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n+            connman->PushMessage(pto, msgMaker.Make(NetMsgType::GETDATA, vGetData));\n \n         //\n         // Message: feefilter\n@@ -3308,7 +3614,7 @@ bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interr\n                 // We always have a fee filter of at least minRelayTxFee\n                 filterToSend = std::max(filterToSend, ::minRelayTxFee.GetFeePerK());\n                 if (filterToSend != pto->lastSentFeeFilter) {\n-                    connman.PushMessage(pto, msgMaker.Make(NetMsgType::FEEFILTER, filterToSend));\n+                    connman->PushMessage(pto, msgMaker.Make(NetMsgType::FEEFILTER, filterToSend));\n                     pto->lastSentFeeFilter = filterToSend;\n                 }\n                 pto->nextSendTimeFeeFilter = PoissonNextSend(timeNow, AVG_FEEFILTER_BROADCAST_INTERVAL);"
      },
      {
        "sha": "0a49972eed148f2447e50a2301e905f3b3be4ff7",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 37,
        "deletions": 20,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -8,6 +8,7 @@\n \n #include \"net.h\"\n #include \"validationinterface.h\"\n+#include \"consensus/params.h\"\n \n /** Default for -maxorphantx, maximum number of orphan transactions kept in memory */\n static const unsigned int DEFAULT_MAX_ORPHAN_TRANSACTIONS = 100;\n@@ -21,23 +22,51 @@ static const unsigned int DEFAULT_BLOCK_RECONSTRUCTION_EXTRA_TXN = 100;\n  *  Timeout = base + per_header * (expected number of headers) */\n static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_BASE = 15 * 60 * 1000000; // 15 minutes\n static constexpr int64_t HEADERS_DOWNLOAD_TIMEOUT_PER_HEADER = 1000; // 1ms/header\n+/** Protect at least this many outbound peers from disconnection due to slow/\n+ * behind headers chain.\n+ */\n+static constexpr int32_t MAX_OUTBOUND_PEERS_TO_PROTECT_FROM_DISCONNECT = 4;\n+/** Timeout for (unprotected) outbound peers to sync to our chainwork, in seconds */\n+static constexpr int64_t CHAIN_SYNC_TIMEOUT = 20 * 60; // 20 minutes\n+/** How frequently to check for stale tips, in seconds */\n+static constexpr int64_t STALE_CHECK_INTERVAL = 10 * 60; // 10 minutes\n+/** How frequently to check for extra outbound peers and disconnect, in seconds */\n+static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;\n+/** Minimum time an outbound-peer-eviction candidate must be connected for, in order to evict, in seconds */\n+static constexpr int64_t MINIMUM_CONNECT_TIME = 30;\n \n-/** Register with a network node to receive its signals */\n-void RegisterNodeSignals(CNodeSignals& nodeSignals);\n-/** Unregister a network node */\n-void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n-\n-class PeerLogicValidation : public CValidationInterface {\n+class PeerLogicValidation : public CValidationInterface, public NetEventsInterface {\n private:\n-    CConnman* connman;\n+    CConnman* const connman;\n \n public:\n-    PeerLogicValidation(CConnman* connmanIn);\n+    explicit PeerLogicValidation(CConnman* connman, CScheduler &scheduler);\n \n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex* pindexConnected, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) override;\n     void BlockChecked(const CBlock& block, const CValidationState& state) override;\n     void NewPoWValidBlock(const CBlockIndex *pindex, const std::shared_ptr<const CBlock>& pblock) override;\n+\n+\n+    void InitializeNode(CNode* pnode) override;\n+    void FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) override;\n+    /** Process protocol messages received from a given node */\n+    bool ProcessMessages(CNode* pfrom, std::atomic<bool>& interrupt) override;\n+    /**\n+    * Send queued protocol messages to be sent to a give node.\n+    *\n+    * @param[in]   pto             The node which we are sending messages to.\n+    * @param[in]   interrupt       Interrupt condition for processing threads\n+    * @return                      True if there is more work to be done\n+    */\n+    bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n+\n+    void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n+    void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n+    void EvictExtraOutboundPeers(int64_t time_in_seconds);\n+\n+private:\n+    int64_t m_stale_tip_check_time; //! Next time to check for stale tip\n };\n \n struct CNodeStateStats {\n@@ -52,16 +81,4 @@ bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n /** Increase a node's misbehavior score. */\n void Misbehaving(NodeId nodeid, int howmuch);\n \n-/** Process protocol messages received from a given node */\n-bool ProcessMessages(CNode* pfrom, CConnman& connman, const std::atomic<bool>& interrupt);\n-/**\n- * Send queued protocol messages to be sent to a give node.\n- *\n- * @param[in]   pto             The node which we are sending messages to.\n- * @param[in]   connman         The connection manager for that node.\n- * @param[in]   interrupt       Interrupt condition for processing threads\n- * @return                      True if there is more work to be done\n- */\n-bool SendMessages(CNode* pto, CConnman& connman, const std::atomic<bool>& interrupt);\n-\n #endif // BITCOIN_NET_PROCESSING_H"
      },
      {
        "sha": "ef71dd73bcd574ba64005b0e259722a041afd7f8",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -16,10 +16,8 @@\n class CCoinsViewCache;\n class CTxOut;\n \n-/** Default for -blockmaxsize, which controls the maximum size of block the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n /** Default for -blockmaxweight, which controls the range of block weights the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = 3000000;\n+static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = MAX_BLOCK_WEIGHT - 4000;\n /** Default for -blockmintxfee, which sets the minimum feerate for a transaction in blocks created by mining code **/\n static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 1000;\n /** The maximum weight for transactions we're willing to relay/mine */"
      },
      {
        "sha": "441cd1e8f4d4b30086274ea0eba2f5e08bb404b6",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -195,7 +195,6 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n-            \"  \\\"currentblocksize\\\": nnn,   (numeric) The last block size\\n\"\n             \"  \\\"currentblockweight\\\": nnn, (numeric) The last block weight\\n\"\n             \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n             \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n@@ -214,7 +213,6 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n \n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n-    obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n     obj.push_back(Pair(\"currentblockweight\", (uint64_t)nLastBlockWeight));\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));"
      },
      {
        "sha": "2916bdc02ff4e4e835505b8500aa8a4d2adaee3d",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -156,7 +156,7 @@ UniValue getpeerinfo(const JSONRPCRequest& request)\n         // their ver message.\n         obj.push_back(Pair(\"subver\", stats.cleanSubVer));\n         obj.push_back(Pair(\"inbound\", stats.fInbound));\n-        obj.push_back(Pair(\"addnode\", stats.fAddnode));\n+        obj.push_back(Pair(\"addnode\", stats.m_manual_connection));\n         obj.push_back(Pair(\"startingheight\", stats.nStartingHeight));\n         if (fStateStats) {\n             obj.push_back(Pair(\"banscore\", statestats.nMisbehavior));"
      },
      {
        "sha": "d1f9e63ecf5537b4aced43eac01eb610ae458d5e",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 151,
        "deletions": 11,
        "changes": 162,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -40,8 +40,138 @@ CService ip(uint32_t i)\n \n static NodeId id = 0;\n \n+void UpdateLastBlockAnnounceTime(NodeId node, int64_t time_in_seconds);\n+\n BOOST_FIXTURE_TEST_SUITE(DoS_tests, TestingSetup)\n \n+// Test eviction of an outbound peer whose chain never advances\n+// Mock a node connection, and use mocktime to simulate a peer\n+// which never sends any headers messages.  PeerLogic should\n+// decide to evict that outbound peer, after the appropriate timeouts.\n+// Note that we protect 4 outbound nodes from being subject to\n+// this logic; this test takes advantage of that protection only\n+// being applied to nodes which send headers with sufficient\n+// work.\n+BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n+{\n+    std::atomic<bool> interruptDummy(false);\n+\n+    // Mock an outbound peer\n+    CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n+    CNode dummyNode1(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", /*fInboundIn=*/ false);\n+    dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n+\n+    peerLogic->InitializeNode(&dummyNode1);\n+    dummyNode1.nVersion = 1;\n+    dummyNode1.fSuccessfullyConnected = true;\n+\n+    // This test requires that we have a chain with non-zero work.\n+    BOOST_CHECK(chainActive.Tip() != nullptr);\n+    BOOST_CHECK(chainActive.Tip()->nChainWork > 0);\n+\n+    // Test starts here\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n+    BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n+    dummyNode1.vSendMsg.clear();\n+\n+    int64_t nStartTime = GetTime();\n+    // Wait 21 minutes\n+    SetMockTime(nStartTime+21*60);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n+    BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n+    // Wait 3 more minutes\n+    SetMockTime(nStartTime+24*60);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in disconnect\n+    BOOST_CHECK(dummyNode1.fDisconnect == true);\n+    SetMockTime(0);\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n+}\n+\n+void AddRandomOutboundPeer(std::vector<CNode *> &vNodes, PeerLogicValidation &peerLogic)\n+{\n+    CAddress addr(ip(GetRandInt(0xffffffff)), NODE_NONE);\n+    vNodes.emplace_back(new CNode(id++, ServiceFlags(NODE_NETWORK|NODE_WITNESS), 0, INVALID_SOCKET, addr, 0, 0, CAddress(), \"\", /*fInboundIn=*/ false));\n+    CNode &node = *vNodes.back();\n+    node.SetSendVersion(PROTOCOL_VERSION);\n+\n+    peerLogic.InitializeNode(&node);\n+    node.nVersion = 1;\n+    node.fSuccessfullyConnected = true;\n+\n+    CConnmanTest::AddNode(node);\n+}\n+\n+BOOST_AUTO_TEST_CASE(stale_tip_peer_management)\n+{\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n+    constexpr int nMaxOutbound = 8;\n+    CConnman::Options options;\n+    options.nMaxConnections = 125;\n+    options.nMaxOutbound = nMaxOutbound;\n+    options.nMaxFeeler = 1;\n+\n+    connman->Init(options);\n+    std::vector<CNode *> vNodes;\n+\n+    // Mock some outbound peers\n+    for (int i=0; i<nMaxOutbound; ++i) {\n+        AddRandomOutboundPeer(vNodes, *peerLogic);\n+    }\n+\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+\n+    // No nodes should be marked for disconnection while we have no extra peers\n+    for (const CNode *node : vNodes) {\n+        BOOST_CHECK(node->fDisconnect == false);\n+    }\n+\n+    SetMockTime(GetTime() + 3*consensusParams.nPowTargetSpacing + 1);\n+\n+    // Now tip should definitely be stale, and we should look for an extra\n+    // outbound peer\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+    BOOST_CHECK(connman->GetTryNewOutboundPeer());\n+\n+    // Still no peers should be marked for disconnection\n+    for (const CNode *node : vNodes) {\n+        BOOST_CHECK(node->fDisconnect == false);\n+    }\n+\n+    // If we add one more peer, something should get marked for eviction\n+    // on the next check (since we're mocking the time to be in the future, the\n+    // required time connected check should be satisfied).\n+    AddRandomOutboundPeer(vNodes, *peerLogic);\n+\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+    for (int i=0; i<nMaxOutbound; ++i) {\n+        BOOST_CHECK(vNodes[i]->fDisconnect == false);\n+    }\n+    // Last added node should get marked for eviction\n+    BOOST_CHECK(vNodes.back()->fDisconnect == true);\n+\n+    vNodes.back()->fDisconnect = false;\n+\n+    // Update the last announced block time for the last\n+    // peer, and check that the next newest node gets evicted.\n+    UpdateLastBlockAnnounceTime(vNodes.back()->GetId(), GetTime());\n+\n+    peerLogic->CheckForStaleTipAndEvictPeers(consensusParams);\n+    for (int i=0; i<nMaxOutbound-1; ++i) {\n+        BOOST_CHECK(vNodes[i]->fDisconnect == false);\n+    }\n+    BOOST_CHECK(vNodes[nMaxOutbound-1]->fDisconnect == true);\n+    BOOST_CHECK(vNodes.back()->fDisconnect == false);\n+\n+    bool dummy;\n+    for (const CNode *node : vNodes) {\n+        peerLogic->FinalizeNode(node->GetId(), dummy);\n+    }\n+\n+    CConnmanTest::ClearNodes();\n+}\n+\n BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     std::atomic<bool> interruptDummy(false);\n@@ -50,27 +180,31 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, CAddress(), \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n+    peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n-    SendMessages(&dummyNode1, *connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n     CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, CAddress(), \"\", true);\n     dummyNode2.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode2, *connman);\n+    peerLogic->InitializeNode(&dummyNode2);\n     dummyNode2.nVersion = 1;\n     dummyNode2.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2, *connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode2, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(connman->IsBanned(addr1));  // ... but 1 still should be\n     Misbehaving(dummyNode2.GetId(), 50);\n-    SendMessages(&dummyNode2, *connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode2, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr2));\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n+    peerLogic->FinalizeNode(dummyNode2.GetId(), dummy);\n }\n \n BOOST_AUTO_TEST_CASE(DoS_banscore)\n@@ -82,19 +216,22 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, 1, CAddress(), \"\", true);\n     dummyNode1.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode1, *connman);\n+    peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n     Misbehaving(dummyNode1.GetId(), 100);\n-    SendMessages(&dummyNode1, *connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 10);\n-    SendMessages(&dummyNode1, *connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n     Misbehaving(dummyNode1.GetId(), 1);\n-    SendMessages(&dummyNode1, *connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode1.GetId(), dummy);\n }\n \n BOOST_AUTO_TEST_CASE(DoS_bantime)\n@@ -108,19 +245,22 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n     CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, 4, CAddress(), \"\", true);\n     dummyNode.SetSendVersion(PROTOCOL_VERSION);\n-    GetNodeSignals().InitializeNode(&dummyNode, *connman);\n+    peerLogic->InitializeNode(&dummyNode);\n     dummyNode.nVersion = 1;\n     dummyNode.fSuccessfullyConnected = true;\n \n     Misbehaving(dummyNode.GetId(), 100);\n-    SendMessages(&dummyNode, *connman, interruptDummy);\n+    peerLogic->SendMessages(&dummyNode, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60);\n     BOOST_CHECK(connman->IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60*24+1);\n     BOOST_CHECK(!connman->IsBanned(addr));\n+\n+    bool dummy;\n+    peerLogic->FinalizeNode(dummyNode.GetId(), dummy);\n }\n \n CTransactionRef RandomOrphan()"
      },
      {
        "sha": "01e2a555e60e067b3d024a71bdd97dbbcccec2f5",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -24,6 +24,18 @@\n \n #include <memory>\n \n+void CConnmanTest::AddNode(CNode& node)\n+{\n+    LOCK(g_connman->cs_vNodes);\n+    g_connman->vNodes.push_back(&node);\n+}\n+\n+void CConnmanTest::ClearNodes()\n+{\n+    LOCK(g_connman->cs_vNodes);\n+    g_connman->vNodes.clear();\n+}\n+\n uint256 insecure_rand_seed = GetRandHash();\n FastRandomContext insecure_rand_ctx(insecure_rand_seed);\n \n@@ -48,7 +60,6 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n BasicTestingSetup::~BasicTestingSetup()\n {\n         ECC_Stop();\n-        g_connman.reset();\n }\n \n TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(chainName)\n@@ -86,16 +97,17 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n             threadGroup.create_thread(&ThreadScriptCheck);\n         g_connman = std::unique_ptr<CConnman>(new CConnman(0x1337, 0x1337)); // Deterministic randomness for tests.\n         connman = g_connman.get();\n-        RegisterNodeSignals(GetNodeSignals());\n+        peerLogic.reset(new PeerLogicValidation(connman, scheduler));\n }\n \n TestingSetup::~TestingSetup()\n {\n-        UnregisterNodeSignals(GetNodeSignals());\n         threadGroup.interrupt_all();\n         threadGroup.join_all();\n         GetMainSignals().FlushBackgroundCallbacks();\n         GetMainSignals().UnregisterBackgroundSignalScheduler();\n+        g_connman.reset();\n+        peerLogic.reset();\n         UnloadBlockIndex();\n         delete pcoinsTip;\n         delete pcoinsdbview;"
      },
      {
        "sha": "642be476a648824cb8284869048e5000624bb91a",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -49,12 +49,20 @@ struct BasicTestingSetup {\n  * Included are data directory, coins database, script check threads setup.\n  */\n class CConnman;\n+class CNode;\n+struct CConnmanTest {\n+    static void AddNode(CNode& node);\n+    static void ClearNodes();\n+};\n+\n+class PeerLogicValidation;\n struct TestingSetup: public BasicTestingSetup {\n     CCoinsViewDB *pcoinsdbview;\n     fs::path pathTemp;\n     boost::thread_group threadGroup;\n     CConnman* connman;\n     CScheduler scheduler;\n+    std::unique_ptr<PeerLogicValidation> peerLogic;\n \n     TestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n     ~TestingSetup();"
      },
      {
        "sha": "6ec544290daa534879c4ab7ec5c9ebb3b0af57ba",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -253,6 +253,31 @@ BOOST_AUTO_TEST_CASE(util_IsHex)\n     BOOST_CHECK(!IsHex(\"0x0000\"));\n }\n \n+BOOST_AUTO_TEST_CASE(util_IsHexNumber)\n+{\n+    BOOST_CHECK(IsHexNumber(\"0x0\"));\n+    BOOST_CHECK(IsHexNumber(\"0\"));\n+    BOOST_CHECK(IsHexNumber(\"0x10\"));\n+    BOOST_CHECK(IsHexNumber(\"10\"));\n+    BOOST_CHECK(IsHexNumber(\"0xff\"));\n+    BOOST_CHECK(IsHexNumber(\"ff\"));\n+    BOOST_CHECK(IsHexNumber(\"0xFfa\"));\n+    BOOST_CHECK(IsHexNumber(\"Ffa\"));\n+    BOOST_CHECK(IsHexNumber(\"0x00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+    BOOST_CHECK(IsHexNumber(\"00112233445566778899aabbccddeeffAABBCCDDEEFF\"));\n+\n+    BOOST_CHECK(!IsHexNumber(\"\"));   // empty string not allowed\n+    BOOST_CHECK(!IsHexNumber(\"0x\")); // empty string after prefix not allowed\n+    BOOST_CHECK(!IsHexNumber(\"0x0 \")); // no spaces at end,\n+    BOOST_CHECK(!IsHexNumber(\" 0x0\")); // or beginning,\n+    BOOST_CHECK(!IsHexNumber(\"0x 0\")); // or middle,\n+    BOOST_CHECK(!IsHexNumber(\" \"));    // etc.\n+    BOOST_CHECK(!IsHexNumber(\"0x0ga\")); // invalid character\n+    BOOST_CHECK(!IsHexNumber(\"x0\"));    // broken prefix\n+    BOOST_CHECK(!IsHexNumber(\"0x0x00\")); // two prefixes not allowed\n+\n+}\n+\n BOOST_AUTO_TEST_CASE(util_seed_insecure_rand)\n {\n     SeedInsecureRand(true);"
      },
      {
        "sha": "741680e93f79609351925af29edece852483dc0a",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -65,6 +65,19 @@ bool IsHex(const std::string& str)\n     return (str.size() > 0) && (str.size()%2 == 0);\n }\n \n+bool IsHexNumber(const std::string& str)\n+{\n+    size_t starting_location = 0;\n+    if (str.size() > 2 && *str.begin() == '0' && *(str.begin()+1) == 'x') {\n+        starting_location = 2;\n+    }\n+    for (auto c : str.substr(starting_location)) {\n+        if (HexDigit(c) < 0) return false;\n+    }\n+    // Return false for empty string or \"0x\".\n+    return (str.size() > starting_location);\n+}\n+\n std::vector<unsigned char> ParseHex(const char* psz)\n {\n     // convert hex dump to vector"
      },
      {
        "sha": "192f33fb290e037d0fc5a692f35c7187dca536ba",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -38,7 +38,13 @@ std::string SanitizeString(const std::string& str, int rule = SAFE_CHARS_DEFAULT\n std::vector<unsigned char> ParseHex(const char* psz);\n std::vector<unsigned char> ParseHex(const std::string& str);\n signed char HexDigit(char c);\n+/* Returns true if each character in str is a hex character, and has an even\n+ * number of hex digits.*/\n bool IsHex(const std::string& str);\n+/**\n+* Return true if the string is a hex number, optionally prefixed with \"0x\"\n+*/\n+bool IsHexNumber(const std::string& str);\n std::vector<unsigned char> DecodeBase64(const char* p, bool* pfInvalid = nullptr);\n std::string DecodeBase64(const std::string& str);\n std::string EncodeBase64(const unsigned char* pch, size_t len);"
      },
      {
        "sha": "8a92992dba778042973d36a26407095fd6953ef3",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 17,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -80,6 +80,7 @@ int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n \n uint256 hashAssumeValid;\n+arith_uint256 nMinimumChainWork;\n \n CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n@@ -152,6 +153,26 @@ namespace {\n     /** chainwork for the last block that preciousblock has been applied to. */\n     arith_uint256 nLastPreciousChainwork = 0;\n \n+    /** In order to efficiently track invalidity of headers, we keep the set of\n+      * blocks which we tried to connect and found to be invalid here (ie which\n+      * were set to BLOCK_FAILED_VALID since the last restart). We can then\n+      * walk this set and check if a new header is a descendant of something in\n+      * this set, preventing us from having to walk mapBlockIndex when we try\n+      * to connect a bad block and fail.\n+      *\n+      * While this is more complicated than marking everything which descends\n+      * from an invalid block as invalid at the time we discover it to be\n+      * invalid, doing so would require walking all of mapBlockIndex to find all\n+      * descendants. Since this case should be very rare, keeping track of all\n+      * BLOCK_FAILED_VALID blocks in a set should be just fine and work just as\n+      * well.\n+      *\n+      * Because we alreardy walk mapBlockIndex in height-order at startup, we go\n+      * ahead and mark descendants of invalid blocks as FAILED_CHILD at that time,\n+      * instead of putting things in this set.\n+      */\n+    std::set<CBlockIndex*> g_failed_blocks;\n+\n     /** Dirty block index entries. */\n     std::set<CBlockIndex*> setDirtyBlockIndex;\n \n@@ -1032,8 +1053,6 @@ CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n \n bool IsInitialBlockDownload()\n {\n-    const CChainParams& chainParams = Params();\n-\n     // Once this function has returned false, it must remain false.\n     static std::atomic<bool> latchToFalse{false};\n     // Optimization: pre-test latch before taking the lock.\n@@ -1047,7 +1066,7 @@ bool IsInitialBlockDownload()\n         return true;\n     if (chainActive.Tip() == nullptr)\n         return true;\n-    if (chainActive.Tip()->nChainWork < UintToArith256(chainParams.GetConsensus().nMinimumChainWork))\n+    if (chainActive.Tip()->nChainWork < nMinimumChainWork)\n         return true;\n     if (chainActive.Tip()->GetBlockTime() < (GetTime() - nMaxTipAge))\n         return true;\n@@ -1169,6 +1188,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n     if (!state.CorruptionPossible()) {\n         pindex->nStatus |= BLOCK_FAILED_VALID;\n+        g_failed_blocks.insert(pindex);\n         setDirtyBlockIndex.insert(pindex);\n         setBlockIndexCandidates.erase(pindex);\n         InvalidChainFound(pindex);\n@@ -1664,7 +1684,7 @@ static bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockInd\n         if (it != mapBlockIndex.end()) {\n             if (it->second->GetAncestor(pindex->nHeight) == pindex &&\n                 pindexBestHeader->GetAncestor(pindex->nHeight) == pindex &&\n-                pindexBestHeader->nChainWork >= UintToArith256(chainparams.GetConsensus().nMinimumChainWork)) {\n+                pindexBestHeader->nChainWork >= nMinimumChainWork) {\n                 // This block is a member of the assumed verified chain and an ancestor of the best header.\n                 // The equivalent time check discourages hash power from extorting the network via DOS attack\n                 //  into accepting an invalid block through telling users they must manually set assumevalid.\n@@ -2518,17 +2538,18 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n {\n     AssertLockHeld(cs_main);\n \n-    // Mark the block itself as invalid.\n-    pindex->nStatus |= BLOCK_FAILED_VALID;\n-    setDirtyBlockIndex.insert(pindex);\n-    setBlockIndexCandidates.erase(pindex);\n+    // We first disconnect backwards and then mark the blocks as invalid.\n+    // This prevents a case where pruned nodes may fail to invalidateblock\n+    // and be left unable to start as they have no tip candidates (as there\n+    // are no blocks that meet the \"have data and are not invalid per\n+    // nStatus\" criteria for inclusion in setBlockIndexCandidates).\n+\n+    bool pindex_was_in_chain = false;\n+    CBlockIndex *invalid_walk_tip = chainActive.Tip();\n \n     DisconnectedBlockTransactions disconnectpool;\n     while (chainActive.Contains(pindex)) {\n-        CBlockIndex *pindexWalk = chainActive.Tip();\n-        pindexWalk->nStatus |= BLOCK_FAILED_CHILD;\n-        setDirtyBlockIndex.insert(pindexWalk);\n-        setBlockIndexCandidates.erase(pindexWalk);\n+        pindex_was_in_chain = true;\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n         if (!DisconnectTip(state, chainparams, &disconnectpool)) {\n@@ -2539,6 +2560,21 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n         }\n     }\n \n+    // Now mark the blocks we just disconnected as descendants invalid\n+    // (note this may not be all descendants).\n+    while (pindex_was_in_chain && invalid_walk_tip != pindex) {\n+        invalid_walk_tip->nStatus |= BLOCK_FAILED_CHILD;\n+        setDirtyBlockIndex.insert(invalid_walk_tip);\n+        setBlockIndexCandidates.erase(invalid_walk_tip);\n+        invalid_walk_tip = invalid_walk_tip->pprev;\n+    }\n+\n+    // Mark the block itself as invalid.\n+    pindex->nStatus |= BLOCK_FAILED_VALID;\n+    setDirtyBlockIndex.insert(pindex);\n+    setBlockIndexCandidates.erase(pindex);\n+    g_failed_blocks.insert(pindex);\n+\n     // DisconnectTip will add transactions to disconnectpool; try to add these\n     // back to the mempool.\n     UpdateMempoolForReorg(disconnectpool, true);\n@@ -2576,6 +2612,7 @@ bool ResetBlockFailureFlags(CBlockIndex *pindex) {\n                 // Reset invalid block marker if it was pointing to one of those.\n                 pindexBestInvalid = nullptr;\n             }\n+            g_failed_blocks.erase(it->second);\n         }\n         it++;\n     }\n@@ -3052,6 +3089,21 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n             return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n         if (!ContextualCheckBlockHeader(block, state, chainparams, pindexPrev, GetAdjustedTime()))\n             return error(\"%s: Consensus::ContextualCheckBlockHeader: %s, %s\", __func__, hash.ToString(), FormatStateMessage(state));\n+\n+        if (!pindexPrev->IsValid(BLOCK_VALID_SCRIPTS)) {\n+            for (const CBlockIndex* failedit : g_failed_blocks) {\n+                if (pindexPrev->GetAncestor(failedit->nHeight) == failedit) {\n+                    assert(failedit->nStatus & BLOCK_FAILED_VALID);\n+                    CBlockIndex* invalid_walk = pindexPrev;\n+                    while (invalid_walk != failedit) {\n+                        invalid_walk->nStatus |= BLOCK_FAILED_CHILD;\n+                        setDirtyBlockIndex.insert(invalid_walk);\n+                        invalid_walk = invalid_walk->pprev;\n+                    }\n+                    return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+                }\n+            }\n+        }\n     }\n     if (pindex == nullptr)\n         pindex = AddToBlockIndex(block);\n@@ -3065,13 +3117,15 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n }\n \n // Exposed wrapper for AcceptBlockHeader\n-bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex)\n+bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& headers, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex, CBlockHeader *first_invalid)\n {\n+    if (first_invalid != nullptr) first_invalid->SetNull();\n     {\n         LOCK(cs_main);\n         for (const CBlockHeader& header : headers) {\n             CBlockIndex *pindex = nullptr; // Use a temp pindex instead of ppindex to avoid a const_cast\n             if (!AcceptBlockHeader(header, state, chainparams, &pindex)) {\n+                if (first_invalid) *first_invalid = header;\n                 return false;\n             }\n             if (ppindex) {\n@@ -3101,7 +3155,7 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     // process an unrequested block if it's new and has enough work to\n     // advance our tip, and isn't too many blocks ahead.\n     bool fAlreadyHave = pindex->nStatus & BLOCK_HAVE_DATA;\n-    bool fHasMoreWork = (chainActive.Tip() ? pindex->nChainWork > chainActive.Tip()->nChainWork : true);\n+    bool fHasMoreOrSameWork = (chainActive.Tip() ? pindex->nChainWork >= chainActive.Tip()->nChainWork : true);\n     // Blocks that are too out-of-order needlessly limit the effectiveness of\n     // pruning, because pruning will not delete block files that contain any\n     // blocks which are too close in height to the tip.  Apply this test\n@@ -3118,9 +3172,15 @@ static bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidation\n     // and unrequested blocks.\n     if (fAlreadyHave) return true;\n     if (!fRequested) {  // If we didn't ask for it:\n-        if (pindex->nTx != 0) return true;  // This is a previously-processed block that was pruned\n-        if (!fHasMoreWork) return true;     // Don't process less-work chains\n-        if (fTooFarAhead) return true;      // Block height is too high\n+        if (pindex->nTx != 0) return true;    // This is a previously-processed block that was pruned\n+        if (!fHasMoreOrSameWork) return true; // Don't process less-work chains\n+        if (fTooFarAhead) return true;        // Block height is too high\n+\n+        // Protect against DoS attacks from low-work chains.\n+        // If our tip is behind, a peer could try to send us\n+        // low-work blocks on a fake chain that we would never\n+        // request; don't process these.\n+        if (pindex->nChainWork < nMinimumChainWork) return true;\n     }\n     if (fNewBlock) *fNewBlock = true;\n \n@@ -3470,6 +3530,10 @@ bool static LoadBlockIndexDB(const CChainParams& chainparams)\n                 pindex->nChainTx = pindex->nTx;\n             }\n         }\n+        if (!(pindex->nStatus & BLOCK_FAILED_MASK) && pindex->pprev && (pindex->pprev->nStatus & BLOCK_FAILED_MASK)) {\n+            pindex->nStatus |= BLOCK_FAILED_CHILD;\n+            setDirtyBlockIndex.insert(pindex);\n+        }\n         if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && (pindex->nChainTx || pindex->pprev == nullptr))\n             setBlockIndexCandidates.insert(pindex);\n         if (pindex->nStatus & BLOCK_FAILED_MASK && (!pindexBestInvalid || pindex->nChainWork > pindexBestInvalid->nChainWork))\n@@ -3860,6 +3924,7 @@ void UnloadBlockIndex()\n     nLastBlockFile = 0;\n     nBlockSequenceId = 1;\n     setDirtyBlockIndex.clear();\n+    g_failed_blocks.clear();\n     setDirtyFileInfo.clear();\n     versionbitscache.Clear();\n     for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {"
      },
      {
        "sha": "804fb644d9943c7cacc351084bd6e3ff495f1679",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -161,7 +161,6 @@ extern CTxMemPool mempool;\n typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap mapBlockIndex;\n extern uint64_t nLastBlockTx;\n-extern uint64_t nLastBlockSize;\n extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n extern CWaitableCriticalSection csBestBlock;\n@@ -186,6 +185,9 @@ extern bool fEnableReplacement;\n /** Block hash whose ancestors we will assume to have valid scripts without checking them. */\n extern uint256 hashAssumeValid;\n \n+/** Minimum work we will assume exists on some valid chain. */\n+extern arith_uint256 nMinimumChainWork;\n+\n /** Best header we've seen so far (used for getheaders queries' starting points). */\n extern CBlockIndex *pindexBestHeader;\n \n@@ -245,8 +247,9 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n  * @param[out] state This may be set to an Error state if any error occurred processing them\n  * @param[in]  chainparams The params for the chain we want to connect to\n  * @param[out] ppindex If set, the pointer will be set to point to the last new block index object for the given headers\n+ * @param[out] first_invalid First header that fails validation, if one exists\n  */\n-bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex=nullptr);\n+bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex=nullptr, CBlockHeader *first_invalid=nullptr);\n \n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);"
      },
      {
        "sha": "fb6e57607475e68eaa94c2f48ccf86aa8040781a",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 18,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -20,6 +20,40 @@\n \n #include <boost/thread.hpp>\n \n+namespace {\n+//! Make sure database has a unique fileid within the environment. If it\n+//! doesn't, throw an error. BDB caches do not work properly when more than one\n+//! open database has the same fileid (values written to one database may show\n+//! up in reads to other databases).\n+//!\n+//! BerkeleyDB generates unique fileids by default\n+//! (https://docs.oracle.com/cd/E17275_01/html/programmer_reference/program_copy.html),\n+//! so bitcoin should never create different databases with the same fileid, but\n+//! this error can be triggered if users manually copy database files.\n+void CheckUniqueFileid(const CDBEnv& env, const std::string& filename, Db& db)\n+{\n+    if (env.IsMock()) return;\n+\n+    u_int8_t fileid[DB_FILE_ID_LEN];\n+    int ret = db.get_mpf()->get_fileid(fileid);\n+    if (ret != 0) {\n+        throw std::runtime_error(strprintf(\"CDB: Can't open database %s (get_fileid failed with %d)\", filename, ret));\n+    }\n+\n+    for (const auto& item : env.mapDb) {\n+        u_int8_t item_fileid[DB_FILE_ID_LEN];\n+        if (item.second && item.second->get_mpf()->get_fileid(item_fileid) == 0 &&\n+            memcmp(fileid, item_fileid, sizeof(fileid)) == 0) {\n+            const char* item_filename = nullptr;\n+            item.second->get_dbname(&item_filename, nullptr);\n+            throw std::runtime_error(strprintf(\"CDB: Can't open database %s (duplicates fileid %s from %s)\", filename,\n+                HexStr(std::begin(item_fileid), std::end(item_fileid)),\n+                item_filename ? item_filename : \"(unknown database)\"));\n+        }\n+    }\n+}\n+} // namespace\n+\n //\n // CDB\n //\n@@ -379,45 +413,44 @@ CDB::CDB(CWalletDBWrapper& dbw, const char* pszMode, bool fFlushOnCloseIn) : pdb\n         if (!env->Open(GetDataDir()))\n             throw std::runtime_error(\"CDB: Failed to open database environment.\");\n \n-        strFile = strFilename;\n-        ++env->mapFileUseCount[strFile];\n-        pdb = env->mapDb[strFile];\n+        pdb = env->mapDb[strFilename];\n         if (pdb == nullptr) {\n             int ret;\n-            pdb = new Db(env->dbenv, 0);\n+            std::unique_ptr<Db> pdb_temp(new Db(env->dbenv, 0));\n \n             bool fMockDb = env->IsMock();\n             if (fMockDb) {\n-                DbMpoolFile* mpf = pdb->get_mpf();\n+                DbMpoolFile* mpf = pdb_temp->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n-                if (ret != 0)\n-                    throw std::runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFile));\n+                if (ret != 0) {\n+                    throw std::runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFilename));\n+                }\n             }\n \n-            ret = pdb->open(nullptr,                               // Txn pointer\n-                            fMockDb ? nullptr : strFile.c_str(),   // Filename\n-                            fMockDb ? strFile.c_str() : \"main\", // Logical db name\n-                            DB_BTREE,                           // Database type\n-                            nFlags,                             // Flags\n+            ret = pdb_temp->open(nullptr,                             // Txn pointer\n+                            fMockDb ? nullptr : strFilename.c_str(),  // Filename\n+                            fMockDb ? strFilename.c_str() : \"main\",   // Logical db name\n+                            DB_BTREE,                                 // Database type\n+                            nFlags,                                   // Flags\n                             0);\n \n             if (ret != 0) {\n-                delete pdb;\n-                pdb = nullptr;\n-                --env->mapFileUseCount[strFile];\n-                strFile = \"\";\n                 throw std::runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFilename));\n             }\n+            CheckUniqueFileid(*env, strFilename, *pdb_temp);\n+\n+            pdb = pdb_temp.release();\n+            env->mapDb[strFilename] = pdb;\n \n             if (fCreate && !Exists(std::string(\"version\"))) {\n                 bool fTmp = fReadOnly;\n                 fReadOnly = false;\n                 WriteVersion(CLIENT_VERSION);\n                 fReadOnly = fTmp;\n             }\n-\n-            env->mapDb[strFile] = pdb;\n         }\n+        ++env->mapFileUseCount[strFilename];\n+        strFile = strFilename;\n     }\n }\n \n@@ -673,6 +706,11 @@ bool CWalletDBWrapper::Backup(const std::string& strDest)\n                     pathDest /= strFile;\n \n                 try {\n+                    if (fs::equivalent(pathSrc, pathDest)) {\n+                        LogPrintf(\"cannot backup to wallet source file %s\\n\", pathDest.string());\n+                        return false;\n+                    }\n+\n                     fs::copy_file(pathSrc, pathDest, fs::copy_option::overwrite_if_exists);\n                     LogPrintf(\"copied %s to %s\\n\", strFile, pathDest.string());\n                     return true;"
      },
      {
        "sha": "6f3cfe9557042181ea3c73e0e30d9c06fc550197",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -45,7 +45,7 @@ class CDBEnv\n     void Reset();\n \n     void MakeMock();\n-    bool IsMock() { return fMockDb; }\n+    bool IsMock() const { return fMockDb; }\n \n     /**\n      * Verify that database file strFile is OK. If it is not,"
      },
      {
        "sha": "b3b5adf425c1245e331934de5939d6b34871a772",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -83,7 +83,7 @@ def test_disable_flag(self):\n         tx2.vout = [CTxOut(int(value-self.relayfee*COIN), CScript([b'a']))]\n         tx2.rehash()\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx2))\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx2))\n \n         # Setting the version back down to 1 should disable the sequence lock,\n         # so this should be accepted.\n@@ -180,7 +180,7 @@ def test_sequence_lock_confirmed_inputs(self):\n \n             if (using_sequence_locks and not should_pass):\n                 # This transaction should be rejected\n-                assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, rawtx)\n+                assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, rawtx)\n             else:\n                 # This raw transaction should be accepted\n                 self.nodes[0].sendrawtransaction(rawtx)\n@@ -227,7 +227,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n \n             if (orig_tx.hash in node.getrawmempool()):\n                 # sendrawtransaction should fail if the tx is in the mempool\n-                assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, node.sendrawtransaction, ToHex(tx))\n+                assert_raises_rpc_error(-26, NOT_FINAL_ERROR, node.sendrawtransaction, ToHex(tx))\n             else:\n                 # sendrawtransaction should succeed if the tx is not in the mempool\n                 node.sendrawtransaction(ToHex(tx))\n@@ -280,7 +280,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         tx5.vout[0].nValue += int(utxos[0][\"amount\"]*COIN)\n         raw_tx5 = self.nodes[0].signrawtransaction(ToHex(tx5))[\"hex\"]\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, raw_tx5)\n \n         # Test mempool-BIP68 consistency after reorg\n         #\n@@ -353,7 +353,7 @@ def test_bip68_not_consensus(self):\n         tx3.vout = [CTxOut(int(tx2.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n         tx3.rehash()\n \n-        assert_raises_jsonrpc(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx3))\n+        assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx3))\n \n         # make a block that violates bip68; ensure that the tip updates\n         tip = int(self.nodes[0].getbestblockhash(), 16)"
      },
      {
        "sha": "4c2997f8bdfd5a258d8b622e3f3f2511eed04a9a",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -25,7 +25,7 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     assert_is_hex_string,\n     assert_is_hash_string,\n )\n@@ -96,7 +96,7 @@ def _test_gettxoutsetinfo(self):\n     def _test_getblockheader(self):\n         node = self.nodes[0]\n \n-        assert_raises_jsonrpc(-5, \"Block not found\",\n+        assert_raises_rpc_error(-5, \"Block not found\",\n                               node.getblockheader, \"nonsense\")\n \n         besthash = node.getbestblockhash()"
      },
      {
        "sha": "c2aa75209caedac26bb1f67940ef472c80e444db",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -133,7 +133,7 @@ def test_segwit_bumpfee_succeeds(rbf_node, dest_address):\n def test_nonrbf_bumpfee_fails(peer_node, dest_address):\n     # cannot replace a non RBF transaction (from node which did not enable RBF)\n     not_rbfid = peer_node.sendtoaddress(dest_address, Decimal(\"0.00090000\"))\n-    assert_raises_jsonrpc(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n+    assert_raises_rpc_error(-4, \"not BIP 125 replaceable\", peer_node.bumpfee, not_rbfid)\n \n \n def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n@@ -153,7 +153,7 @@ def test_notmine_bumpfee_fails(rbf_node, peer_node, dest_address):\n     signedtx = rbf_node.signrawtransaction(rawtx)\n     signedtx = peer_node.signrawtransaction(signedtx[\"hex\"])\n     rbfid = rbf_node.sendrawtransaction(signedtx[\"hex\"])\n-    assert_raises_jsonrpc(-4, \"Transaction contains inputs that don't belong to this wallet\",\n+    assert_raises_rpc_error(-4, \"Transaction contains inputs that don't belong to this wallet\",\n                           rbf_node.bumpfee, rbfid)\n \n \n@@ -164,7 +164,7 @@ def test_bumpfee_with_descendant_fails(rbf_node, rbf_node_address, dest_address)\n     tx = rbf_node.createrawtransaction([{\"txid\": parent_id, \"vout\": 0}], {dest_address: 0.00020000})\n     tx = rbf_node.signrawtransaction(tx)\n     txid = rbf_node.sendrawtransaction(tx[\"hex\"])\n-    assert_raises_jsonrpc(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n+    assert_raises_rpc_error(-8, \"Transaction has descendants in the wallet\", rbf_node.bumpfee, parent_id)\n \n \n def test_small_output_fails(rbf_node, dest_address):\n@@ -173,7 +173,7 @@ def test_small_output_fails(rbf_node, dest_address):\n     rbf_node.bumpfee(rbfid, {\"totalFee\": 50000})\n \n     rbfid = spend_one_input(rbf_node, dest_address)\n-    assert_raises_jsonrpc(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n+    assert_raises_rpc_error(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n \n \n def test_dust_to_fee(rbf_node, dest_address):\n@@ -205,15 +205,15 @@ def test_rebumping(rbf_node, dest_address):\n     # check that re-bumping the original tx fails, but bumping the bumper succeeds\n     rbfid = spend_one_input(rbf_node, dest_address)\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 2000})\n-    assert_raises_jsonrpc(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 3000})\n+    assert_raises_rpc_error(-4, \"already bumped\", rbf_node.bumpfee, rbfid, {\"totalFee\": 3000})\n     rbf_node.bumpfee(bumped[\"txid\"], {\"totalFee\": 3000})\n \n \n def test_rebumping_not_replaceable(rbf_node, dest_address):\n     # check that re-bumping a non-replaceable bump tx fails\n     rbfid = spend_one_input(rbf_node, dest_address)\n     bumped = rbf_node.bumpfee(rbfid, {\"totalFee\": 10000, \"replaceable\": False})\n-    assert_raises_jsonrpc(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n+    assert_raises_rpc_error(-4, \"Transaction is not BIP 125 replaceable\", rbf_node.bumpfee, bumped[\"txid\"],\n                           {\"totalFee\": 20000})\n \n \n@@ -264,7 +264,7 @@ def test_bumpfee_metadata(rbf_node, dest_address):\n def test_locked_wallet_fails(rbf_node, dest_address):\n     rbfid = spend_one_input(rbf_node, dest_address)\n     rbf_node.walletlock()\n-    assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n+    assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n                           rbf_node.bumpfee, rbfid)\n \n "
      },
      {
        "sha": "c75ef9b9f12d562a3667ec246e601045ce9bba97",
        "filename": "test/functional/disablewallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disablewallet.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -19,7 +19,7 @@ def set_test_params(self):\n \n     def run_test (self):\n         # Make sure wallet is really disabled\n-        assert_raises_jsonrpc(-32601, 'Method not found', self.nodes[0].getwalletinfo)\n+        assert_raises_rpc_error(-32601, 'Method not found', self.nodes[0].getwalletinfo)\n         x = self.nodes[0].validateaddress('3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n         assert(x['isvalid'] == False)\n         x = self.nodes[0].validateaddress('mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n@@ -28,7 +28,7 @@ def run_test (self):\n         # Checking mining to an address without a wallet. Generating to a valid address should succeed\n         # but generating to an invalid address will fail.\n         self.nodes[0].generatetoaddress(1, 'mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n-        assert_raises_jsonrpc(-5, \"Invalid address\", self.nodes[0].generatetoaddress, 1, '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n+        assert_raises_rpc_error(-5, \"Invalid address\", self.nodes[0].generatetoaddress, 1, '3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n \n if __name__ == '__main__':\n     DisableWalletTest ().main ()"
      },
      {
        "sha": "59655d37fbe21878e13b76f5952c533a1512197a",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -8,7 +8,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     connect_nodes_bi,\n     wait_until,\n )\n@@ -34,14 +34,14 @@ def run_test(self):\n \n         self.log.info(\"setban: fail to ban an already banned subnet\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n-        assert_raises_jsonrpc(-23, \"IP/Subnet already banned\", self.nodes[1].setban, \"127.0.0.1\", \"add\")\n+        assert_raises_rpc_error(-23, \"IP/Subnet already banned\", self.nodes[1].setban, \"127.0.0.1\", \"add\")\n \n         self.log.info(\"setban: fail to ban an invalid subnet\")\n-        assert_raises_jsonrpc(-30, \"Error: Invalid IP/Subnet\", self.nodes[1].setban, \"127.0.0.1/42\", \"add\")\n+        assert_raises_rpc_error(-30, \"Error: Invalid IP/Subnet\", self.nodes[1].setban, \"127.0.0.1/42\", \"add\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)  # still only one banned ip because 127.0.0.1 is within the range of 127.0.0.0/24\n \n         self.log.info(\"setban remove: fail to unban a non-banned subnet\")\n-        assert_raises_jsonrpc(-30, \"Error: Unban failed\", self.nodes[1].setban, \"127.0.0.1\", \"remove\")\n+        assert_raises_rpc_error(-30, \"Error: Unban failed\", self.nodes[1].setban, \"127.0.0.1\", \"remove\")\n         assert_equal(len(self.nodes[1].listbanned()), 1)\n \n         self.log.info(\"setban remove: successfully unban subnet\")\n@@ -81,10 +81,10 @@ def run_test(self):\n         self.log.info(\"disconnectnode: fail to disconnect when calling with address and nodeid\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']\n         node1 = self.nodes[0].getpeerinfo()[0]['addr']\n-        assert_raises_jsonrpc(-32602, \"Only one of address and nodeid should be provided.\", self.nodes[0].disconnectnode, address=address1, nodeid=node1)\n+        assert_raises_rpc_error(-32602, \"Only one of address and nodeid should be provided.\", self.nodes[0].disconnectnode, address=address1, nodeid=node1)\n \n         self.log.info(\"disconnectnode: fail to disconnect when calling with junk address\")\n-        assert_raises_jsonrpc(-29, \"Node not found in connected nodes\", self.nodes[0].disconnectnode, address=\"221B Baker Street\")\n+        assert_raises_rpc_error(-29, \"Node not found in connected nodes\", self.nodes[0].disconnectnode, address=\"221B Baker Street\")\n \n         self.log.info(\"disconnectnode: successfully disconnect node by address\")\n         address1 = self.nodes[0].getpeerinfo()[0]['addr']"
      },
      {
        "sha": "1c4f269ec0e22e36e920a18e80ae21755207e8fe",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -179,7 +179,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        assert_raises_jsonrpc(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n+        assert_raises_rpc_error(-3, \"Unexpected key foo\", self.nodes[2].fundrawtransaction, rawtx, {'foo':'bar'})\n \n         ############################################################\n         # test a fundrawtransaction with an invalid change address #\n@@ -192,7 +192,7 @@ def run_test(self):\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n-        assert_raises_jsonrpc(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n+        assert_raises_rpc_error(-5, \"changeAddress must be a valid bitcoin address\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':'foobar'})\n \n         ############################################################\n         # test a fundrawtransaction with a provided change address #\n@@ -206,7 +206,7 @@ def run_test(self):\n         assert_equal(utx['txid'], dec_tx['vin'][0]['txid'])\n \n         change = self.nodes[2].getnewaddress()\n-        assert_raises_jsonrpc(-8, \"changePosition out of bounds\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':change, 'changePosition':2})\n+        assert_raises_rpc_error(-8, \"changePosition out of bounds\", self.nodes[2].fundrawtransaction, rawtx, {'changeAddress':change, 'changePosition':2})\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx, {'changeAddress': change, 'changePosition': 0})\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n         out = dec_tx['vout'][0]\n@@ -315,7 +315,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtx)\n \n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].fundrawtransaction, rawtx)\n \n         ############################################################\n         #compare fee of a standard pubkeyhash transaction\n@@ -470,14 +470,14 @@ def run_test(self):\n         rawtx = self.nodes[1].createrawtransaction(inputs, outputs)\n         # fund a transaction that requires a new key for the change output\n         # creating the key must be impossible because the wallet is locked\n-        assert_raises_jsonrpc(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawtx)\n+        assert_raises_rpc_error(-4, \"Keypool ran out, please call keypoolrefill first\", self.nodes[1].fundrawtransaction, rawtx)\n \n         #refill the keypool\n         self.nodes[1].walletpassphrase(\"test\", 100)\n         self.nodes[1].keypoolrefill(8) #need to refill the keypool to get an internal change address\n         self.nodes[1].walletlock()\n \n-        assert_raises_jsonrpc(-13, \"walletpassphrase\", self.nodes[1].sendtoaddress, self.nodes[0].getnewaddress(), 1.2)\n+        assert_raises_rpc_error(-13, \"walletpassphrase\", self.nodes[1].sendtoaddress, self.nodes[0].getnewaddress(), 1.2)\n \n         oldBalance = self.nodes[0].getbalance()\n "
      },
      {
        "sha": "955554204d81ac141cecc515914cd8a2d769ca17",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -19,9 +19,8 @@\n happened previously.\n \"\"\"\n \n-from test_framework.authproxy import JSONRPCException\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (connect_nodes, sync_blocks, assert_equal, set_node_times)\n+from test_framework.util import (assert_raises_rpc_error, connect_nodes, sync_blocks, assert_equal, set_node_times)\n \n import collections\n import enum\n@@ -35,21 +34,26 @@\n class Variant(collections.namedtuple(\"Variant\", \"call data rescan prune\")):\n     \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n \n+    def try_rpc(self, func, *args, **kwargs):\n+        if self.expect_disabled:\n+            assert_raises_rpc_error(-4, \"Rescan is disabled in pruned mode\", func, *args, **kwargs)\n+        else:\n+            return func(*args, **kwargs)\n+\n     def do_import(self, timestamp):\n         \"\"\"Call one key import RPC.\"\"\"\n \n         if self.call == Call.single:\n             if self.data == Data.address:\n-                response, error = try_rpc(self.node.importaddress, self.address[\"address\"], self.label,\n-                                          self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importaddress, self.address[\"address\"], self.label,\n+                                               self.rescan == Rescan.yes)\n             elif self.data == Data.pub:\n-                response, error = try_rpc(self.node.importpubkey, self.address[\"pubkey\"], self.label,\n-                                          self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importpubkey, self.address[\"pubkey\"], self.label,\n+                                               self.rescan == Rescan.yes)\n             elif self.data == Data.priv:\n-                response, error = try_rpc(self.node.importprivkey, self.key, self.label, self.rescan == Rescan.yes)\n+                response = self.try_rpc(self.node.importprivkey, self.key, self.label, self.rescan == Rescan.yes)\n             assert_equal(response, None)\n-            assert_equal(error, {'message': 'Rescan is disabled in pruned mode',\n-                                 'code': -4} if self.expect_disabled else None)\n+\n         elif self.call == Call.multi:\n             response = self.node.importmulti([{\n                 \"scriptPubKey\": {\n@@ -180,13 +184,5 @@ def run_test(self):\n             else:\n                 variant.check()\n \n-\n-def try_rpc(func, *args, **kwargs):\n-    try:\n-        return func(*args, **kwargs), None\n-    except JSONRPCException as e:\n-        return None, e.error\n-\n-\n if __name__ == \"__main__\":\n     ImportRescanTest().main()"
      },
      {
        "sha": "324f6458e3059b608f96fc8a36b56df9326db5ad",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -448,11 +448,11 @@ def run_test (self):\n \n         # Bad or missing timestamps\n         self.log.info(\"Should throw on invalid or missing timestamp values\")\n-        assert_raises_message(JSONRPCException, 'Missing required timestamp field for key',\n+        assert_raises_rpc_error(-3, 'Missing required timestamp field for key',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n             }])\n-        assert_raises_message(JSONRPCException, 'Expected number or \"now\" timestamp value for key. got type string',\n+        assert_raises_rpc_error(-3, 'Expected number or \"now\" timestamp value for key. got type string',\n             self.nodes[1].importmulti, [{\n                 \"scriptPubKey\": address['scriptPubKey'],\n                 \"timestamp\": \"\","
      },
      {
        "sha": "c445b66df3ac69a752f1ab6d8460fffa899958cf",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -67,7 +67,7 @@ def run_test(self):\n         self.sync_all()\n \n         #Import with no affiliated address\n-        assert_raises_jsonrpc(-5, \"No addresses\", self.nodes[1].importprunedfunds, rawtxn1, proof1)\n+        assert_raises_rpc_error(-5, \"No addresses\", self.nodes[1].importprunedfunds, rawtxn1, proof1)\n \n         balance1 = self.nodes[1].getbalance(\"\", 0, True)\n         assert_equal(balance1, Decimal(0))\n@@ -98,7 +98,7 @@ def run_test(self):\n         assert_equal(address_info['ismine'], True)\n \n         #Remove transactions\n-        assert_raises_jsonrpc(-8, \"Transaction does not exist in wallet.\", self.nodes[1].removeprunedfunds, txnid1)\n+        assert_raises_rpc_error(-8, \"Transaction does not exist in wallet.\", self.nodes[1].removeprunedfunds, txnid1)\n \n         balance1 = self.nodes[1].getbalance(\"*\", 0, True)\n         assert_equal(balance1, Decimal('0.075'))"
      },
      {
        "sha": "f2701c36bdcacbfd45ff30d27fd839131b1e228d",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -28,7 +28,7 @@ def run_test(self):\n         wallet_info = nodes[0].getwalletinfo()\n         assert(addr_before_encrypting_data['hdmasterkeyid'] != wallet_info['hdmasterkeyid'])\n         assert(addr_data['hdmasterkeyid'] == wallet_info['hdmasterkeyid'])\n-        assert_raises_jsonrpc(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n+        assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # put six (plus 2) new keys in the keypool (100% external-, +100% internal-keys, 1 in min)\n         nodes[0].walletpassphrase('test', 12000)\n@@ -47,7 +47,7 @@ def run_test(self):\n         nodes[0].getrawchangeaddress()\n         addr = set()\n         # the next one should fail\n-        assert_raises_jsonrpc(-12, \"Keypool ran out\", nodes[0].getrawchangeaddress)\n+        assert_raises_rpc_error(-12, \"Keypool ran out\", nodes[0].getrawchangeaddress)\n \n         # drain the external keys\n         addr.add(nodes[0].getnewaddress())\n@@ -58,7 +58,7 @@ def run_test(self):\n         addr.add(nodes[0].getnewaddress())\n         assert(len(addr) == 6)\n         # the next one should fail\n-        assert_raises_jsonrpc(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n+        assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # refill keypool with three new addresses\n         nodes[0].walletpassphrase('test', 1)\n@@ -72,7 +72,7 @@ def run_test(self):\n         nodes[0].generate(1)\n         nodes[0].generate(1)\n         nodes[0].generate(1)\n-        assert_raises_jsonrpc(-12, \"Keypool ran out\", nodes[0].generate, 1)\n+        assert_raises_rpc_error(-12, \"Keypool ran out\", nodes[0].generate, 1)\n \n         nodes[0].walletpassphrase('test', 100)\n         nodes[0].keypoolrefill(100)"
      },
      {
        "sha": "6d3849bf57ebb86f00207a0d00822abc645f4ddb",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -115,7 +115,7 @@ def run_test(self):\n             assert_equal(mempool[x]['descendantfees'], descendant_fees * COIN + 1000)\n \n         # Adding one more transaction on to the chain should fail.\n-        assert_raises_jsonrpc(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], txid, vout, value, fee, 1)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], txid, vout, value, fee, 1)\n \n         # Check that prioritising a tx before it's added to the mempool works\n         # First clear the mempool by mining a block.\n@@ -167,7 +167,7 @@ def run_test(self):\n \n         # Sending one more chained transaction will fail\n         utxo = transaction_package.pop(0)\n-        assert_raises_jsonrpc(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n+        assert_raises_rpc_error(-26, \"too-long-mempool-chain\", self.chain_transaction, self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n \n         # TODO: check that node1's mempool is as expected\n "
      },
      {
        "sha": "2803371f5b603892fc549e15284f01b98ec73883",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -50,14 +50,14 @@ def run_test(self):\n         timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n         timelock_tx = self.nodes[0].signrawtransaction(timelock_tx)[\"hex\"]\n         # This will raise an exception because the timelock transaction is too immature to spend\n-        assert_raises_jsonrpc(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n+        assert_raises_rpc_error(-26, \"non-final\", self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Broadcast and mine spend_102 and 103:\n         spend_102_id = self.nodes[0].sendrawtransaction(spend_102_raw)\n         spend_103_id = self.nodes[0].sendrawtransaction(spend_103_raw)\n         self.nodes[0].generate(1)\n         # Time-locked transaction is still too immature to spend\n-        assert_raises_jsonrpc(-26,'non-final', self.nodes[0].sendrawtransaction, timelock_tx)\n+        assert_raises_rpc_error(-26,'non-final', self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Create 102_1 and 103_1:\n         spend_102_1_raw = create_tx(self.nodes[0], spend_102_id, node1_address, 49.98)"
      },
      {
        "sha": "6e8a635a765413fd3ab3ba0e38e739a6836039c9",
        "filename": "test/functional/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spendcoinbase.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -36,7 +36,7 @@ def run_test(self):\n         spend_101_id = self.nodes[0].sendrawtransaction(spends_raw[0])\n \n         # coinbase at height 102 should be too immature to spend\n-        assert_raises_jsonrpc(-26,\"bad-txns-premature-spend-of-coinbase\", self.nodes[0].sendrawtransaction, spends_raw[1])\n+        assert_raises_rpc_error(-26,\"bad-txns-premature-spend-of-coinbase\", self.nodes[0].sendrawtransaction, spends_raw[1])\n \n         # mempool should have just spend_101:\n         assert_equal(self.nodes[0].getrawmempool(), [ spend_101_id ])"
      },
      {
        "sha": "b3989a4c54885ab9d9763cded9c263ef4dd06f75",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -38,7 +38,7 @@ def run_test(self):\n         tx2 = self.nodes[0].createrawtransaction([node0utxos.pop()], {self.nodes[1].getnewaddress(): 49.99})\n         txid2 = self.nodes[0].sendrawtransaction(self.nodes[0].signrawtransaction(tx2)[\"hex\"])\n         # This will raise an exception because the transaction is not yet in a block\n-        assert_raises_jsonrpc(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n+        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[0].gettxoutproof, [txid1])\n \n         self.nodes[0].generate(1)\n         blockhash = self.nodes[0].getblockhash(chain_height + 1)\n@@ -63,11 +63,11 @@ def run_test(self):\n         txid_unspent = txid1 if txin_spent[\"txid\"] != txid1 else txid2\n \n         # We can't find the block from a fully-spent tx\n-        assert_raises_jsonrpc(-5, \"Transaction not yet in block\", self.nodes[2].gettxoutproof, [txid_spent])\n+        assert_raises_rpc_error(-5, \"Transaction not yet in block\", self.nodes[2].gettxoutproof, [txid_spent])\n         # We can get the proof if we specify the block\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_spent], blockhash)), [txid_spent])\n         # We can't get the proof if we specify a non-existent block\n-        assert_raises_jsonrpc(-5, \"Block not found\", self.nodes[2].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[2].gettxoutproof, [txid_spent], \"00000000000000000000000000000000\")\n         # We can get the proof if the transaction is unspent\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[2].gettxoutproof([txid_unspent])), [txid_unspent])\n         # We can get the proof if we provide a list of transactions and one of them is unspent. The ordering of the list should not matter.\n@@ -76,7 +76,7 @@ def run_test(self):\n         # We can always get a proof if we have a -txindex\n         assert_equal(self.nodes[2].verifytxoutproof(self.nodes[3].gettxoutproof([txid_spent])), [txid_spent])\n         # We can't get a proof if we specify transactions from different blocks\n-        assert_raises_jsonrpc(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[2].gettxoutproof, [txid1, txid3])\n+        assert_raises_rpc_error(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[2].gettxoutproof, [txid1, txid3])\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "e136dc2b7c00a94032562aa538ec50d7cab2b310",
        "filename": "test/functional/minchainwork.py",
        "status": "added",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/minchainwork.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -0,0 +1,93 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test logic for setting nMinimumChainWork on command line.\n+\n+Nodes don't consider themselves out of \"initial block download\" until\n+their active chain has more work than nMinimumChainWork.\n+\n+Nodes don't download blocks from a peer unless the peer's best known block\n+has more work than nMinimumChainWork.\n+\n+While in initial block download, nodes won't relay blocks to their peers, so\n+test that this parameter functions as intended by verifying that block relay\n+only succeeds past a given node once its nMinimumChainWork has been exceeded.\n+\"\"\"\n+\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import sync_blocks, connect_nodes, assert_equal\n+\n+# 2 hashes required per regtest block (with no difficulty adjustment)\n+REGTEST_WORK_PER_BLOCK = 2\n+\n+class MinimumChainWorkTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 3\n+\n+        self.extra_args = [[], [\"-minimumchainwork=0x65\"], [\"-minimumchainwork=0x65\"]]\n+        self.node_min_work = [0, 101, 101]\n+\n+    def setup_network(self):\n+        # This test relies on the chain setup being:\n+        # node0 <- node1 <- node2\n+        # Before leaving IBD, nodes prefer to download blocks from outbound\n+        # peers, so ensure that we're mining on an outbound peer and testing\n+        # block relay to inbound peers.\n+        self.setup_nodes()\n+        for i in range(self.num_nodes-1):\n+            connect_nodes(self.nodes[i+1], i)\n+\n+    def run_test(self):\n+        # Start building a chain on node0.  node2 shouldn't be able to sync until node1's\n+        # minchainwork is exceeded\n+        starting_chain_work = REGTEST_WORK_PER_BLOCK # Genesis block's work\n+        self.log.info(\"Testing relay across node %d (minChainWork = %d)\", 1, self.node_min_work[1])\n+\n+        starting_blockcount = self.nodes[2].getblockcount()\n+\n+        num_blocks_to_generate = int((self.node_min_work[1] - starting_chain_work) / REGTEST_WORK_PER_BLOCK)\n+        self.log.info(\"Generating %d blocks on node0\", num_blocks_to_generate)\n+        hashes = self.nodes[0].generate(num_blocks_to_generate)\n+\n+        self.log.info(\"Node0 current chain work: %s\", self.nodes[0].getblockheader(hashes[-1])['chainwork'])\n+\n+        # Sleep a few seconds and verify that node2 didn't get any new blocks\n+        # or headers.  We sleep, rather than sync_blocks(node0, node1) because\n+        # it's reasonable either way for node1 to get the blocks, or not get\n+        # them (since they're below node1's minchainwork).\n+        time.sleep(3)\n+\n+        self.log.info(\"Verifying node 2 has no more blocks than before\")\n+        self.log.info(\"Blockcounts: %s\", [n.getblockcount() for n in self.nodes])\n+        # Node2 shouldn't have any new headers yet, because node1 should not\n+        # have relayed anything.\n+        assert_equal(len(self.nodes[2].getchaintips()), 1)\n+        assert_equal(self.nodes[2].getchaintips()[0]['height'], 0)\n+\n+        assert self.nodes[1].getbestblockhash() != self.nodes[0].getbestblockhash()\n+        assert_equal(self.nodes[2].getblockcount(), starting_blockcount)\n+\n+        self.log.info(\"Generating one more block\")\n+        self.nodes[0].generate(1)\n+\n+        self.log.info(\"Verifying nodes are all synced\")\n+\n+        # Because nodes in regtest are all manual connections (eg using\n+        # addnode), node1 should not have disconnected node0. If not for that,\n+        # we'd expect node1 to have disconnected node0 for serving an\n+        # insufficient work chain, in which case we'd need to reconnect them to\n+        # continue the test.\n+        # NOTE: before commit 44407100ff9b478d6131a1c38ee993b50b1830df, regtest\n+        # connections were not manual, so the reconnect is necessary.\n+        if (len(self.nodes[0].getpeerinfo()) == 0):\n+            connect_nodes(self.nodes[1], 0)\n+\n+        self.sync_all()\n+        self.log.info(\"Blockcounts: %s\", [n.getblockcount() for n in self.nodes])\n+\n+if __name__ == '__main__':\n+    MinimumChainWorkTest().main()"
      },
      {
        "sha": "9aee06864efce0bbe04f0baa45e3cfd5cc48769d",
        "filename": "test/functional/mining.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/mining.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/mining.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -15,7 +15,7 @@\n from test_framework.blocktools import create_coinbase\n from test_framework.mininode import CBlock\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n def b2x(b):\n     return b2a_hex(b).decode('ascii')\n@@ -38,7 +38,6 @@ def run_test(self):\n         mining_info = node.getmininginfo()\n         assert_equal(mining_info['blocks'], 200)\n         assert_equal(mining_info['chain'], 'regtest')\n-        assert_equal(mining_info['currentblocksize'], 0)\n         assert_equal(mining_info['currentblocktx'], 0)\n         assert_equal(mining_info['currentblockweight'], 0)\n         assert_equal(mining_info['difficulty'], Decimal('4.656542373906925E-10'))\n@@ -69,7 +68,7 @@ def run_test(self):\n         assert_template(node, block, None)\n \n         self.log.info(\"submitblock: Test block decode failure\")\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.submitblock, b2x(block.serialize()[:-15]))\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.submitblock, b2x(block.serialize()[:-15]))\n \n         self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n         bad_block = copy.deepcopy(block)\n@@ -78,10 +77,10 @@ def run_test(self):\n         assert_template(node, bad_block, 'bad-cb-missing')\n \n         self.log.info(\"submitblock: Test invalid coinbase transaction\")\n-        assert_raises_jsonrpc(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n+        assert_raises_rpc_error(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n \n         self.log.info(\"getblocktemplate: Test truncated final transaction\")\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal'})\n \n         self.log.info(\"getblocktemplate: Test duplicate transaction\")\n         bad_block = copy.deepcopy(block)\n@@ -108,7 +107,7 @@ def run_test(self):\n         bad_block_sn = bytearray(block.serialize())\n         assert_equal(bad_block_sn[TX_COUNT_OFFSET], 1)\n         bad_block_sn[TX_COUNT_OFFSET] += 1\n-        assert_raises_jsonrpc(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal'})\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal'})\n \n         self.log.info(\"getblocktemplate: Test bad bits\")\n         bad_block = copy.deepcopy(block)"
      },
      {
        "sha": "ba6b659ddcfd9334f5c0885f7b6915a4535a2bec",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -7,9 +7,10 @@\n Verify that a bitcoind node can load multiple wallet files\n \"\"\"\n import os\n+import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class MultiWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -29,6 +30,11 @@ def run_test(self):\n         os.mkdir(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w11'))\n         self.assert_start_raises_init_error(0, ['-wallet=w11'], 'Error loading wallet w11. -wallet filename must be a regular file.')\n \n+        # should not initialize if one wallet is a copy of another\n+        shutil.copyfile(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w2'),\n+                        os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w22'))\n+        self.assert_start_raises_init_error(0, ['-wallet=w2', '-wallet=w22'], 'duplicates fileid')\n+\n         # should not initialize if wallet file is a symlink\n         os.symlink(os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w1'), os.path.join(self.options.tmpdir, 'node0', 'regtest', 'w12'))\n         self.assert_start_raises_init_error(0, ['-wallet=w12'], 'Error loading wallet w12. -wallet filename must be a regular file.')\n@@ -43,10 +49,10 @@ def run_test(self):\n         w1.generate(1)\n \n         # accessing invalid wallet fails\n-        assert_raises_jsonrpc(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n+        assert_raises_rpc_error(-18, \"Requested wallet does not exist or is not loaded\", wallet_bad.getwalletinfo)\n \n         # accessing wallet RPC without using wallet endpoint fails\n-        assert_raises_jsonrpc(-19, \"Wallet file not specified\", self.nodes[0].getwalletinfo)\n+        assert_raises_rpc_error(-19, \"Wallet file not specified\", self.nodes[0].getwalletinfo)\n \n         # check w1 wallet balance\n         w1_info = w1.getwalletinfo()"
      },
      {
        "sha": "61a5e1f2e9d4154132e75163017dc44c594e1320",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -12,7 +12,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     connect_nodes_bi,\n     p2p_port,\n )\n@@ -84,7 +84,7 @@ def _test_getaddednodeinfo(self):\n         assert_equal(len(added_nodes), 1)\n         assert_equal(added_nodes[0]['addednode'], ip_port)\n         # check that a non-existant node returns an error\n-        assert_raises_jsonrpc(-24, \"Node has not been added\",\n+        assert_raises_rpc_error(-24, \"Node has not been added\",\n                               self.nodes[0].getaddednodeinfo, '1.1.1.1')\n \n     def _test_getpeerinfo(self):"
      },
      {
        "sha": "91c4550653826253b949775bdd04807cffa532a1",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -71,7 +71,7 @@ def run_test(self):\n         self.log.info(\"Test 2: Non-NULLDUMMY base multisig transaction should not be accepted to mempool before activation\")\n         test2tx = self.create_transaction(self.nodes[0], txid2, self.ms_address, 47)\n         trueDummy(test2tx)\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test2tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test2tx.serialize_with_witness()), True)\n \n         self.log.info(\"Test 3: Non-NULLDUMMY base transactions should be accepted in a block before activation [431]\")\n         self.block_submit(self.nodes[0], [test2tx], False, True)\n@@ -80,14 +80,14 @@ def run_test(self):\n         test4tx = self.create_transaction(self.nodes[0], test2tx.hash, self.address, 46)\n         test6txs=[CTransaction(test4tx)]\n         trueDummy(test4tx)\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test4tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test4tx.serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], [test4tx])\n \n         self.log.info(\"Test 5: Non-NULLDUMMY P2WSH multisig transaction invalid after activation\")\n         test5tx = self.create_transaction(self.nodes[0], txid3, self.wit_address, 48)\n         test6txs.append(CTransaction(test5tx))\n         test5tx.wit.vtxinwit[0].scriptWitness.stack[0] = b'\\x01'\n-        assert_raises_jsonrpc(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test5tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test5tx.serialize_with_witness()), True)\n         self.block_submit(self.nodes[0], [test5tx], True)\n \n         self.log.info(\"Test 6: NULLDUMMY compliant base/witness transactions should be accepted to mempool and in block after activation [432]\")"
      },
      {
        "sha": "220b7763694ed54f14b3403722ddacc5a544bad8",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 204,
        "deletions": 98,
        "changes": 302,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -4,37 +4,32 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test processing of unrequested blocks.\n \n-Since behavior differs when receiving unrequested blocks from whitelisted peers\n-versus non-whitelisted peers, this tests the behavior of both (effectively two\n-separate tests running in parallel).\n+Setup: two nodes, node0+node1, not connected to each other. Node1 will have\n+nMinimumChainWork set to 0x10, so it won't process low-work unrequested blocks.\n \n-Setup: two nodes, node0 and node1, not connected to each other.  Node0 does not\n-whitelist localhost, but node1 does. They will each be on their own chain for\n-this test.\n-\n-We have one NodeConn connection to each, test_node and white_node respectively.\n+We have one NodeConn connection to node0 called test_node, and one to node1\n+called min_work_node.\n \n The test:\n 1. Generate one block on each node, to leave IBD.\n \n 2. Mine a new block on each tip, and deliver to each node from node's peer.\n-   The tip should advance.\n+   The tip should advance for node0, but node1 should skip processing due to\n+   nMinimumChainWork.\n+\n+Node1 is unused in tests 3-7:\n \n-3. Mine a block that forks the previous block, and deliver to each node from\n-   corresponding peer.\n-   Node0 should not process this block (just accept the header), because it is\n-   unrequested and doesn't have more work than the tip.\n-   Node1 should process because this is coming from a whitelisted peer.\n+3. Mine a block that forks from the genesis block, and deliver to test_node.\n+   Node0 should not process this block (just accept the header), because it\n+   is unrequested and doesn't have more or equal work to the tip.\n \n-4. Send another block that builds on the forking block.\n-   Node0 should process this block but be stuck on the shorter chain, because\n-   it's missing an intermediate block.\n-   Node1 should reorg to this longer chain.\n+4a,b. Send another two blocks that build on the forking block.\n+   Node0 should process the second block but be stuck on the shorter chain,\n+   because it's missing an intermediate block.\n \n-4b.Send 288 more blocks on the longer chain.\n+4c.Send 288 more blocks on the longer chain (the number of blocks ahead\n+   we currently store).\n    Node0 should process all but the last block (too far ahead in height).\n-   Send all headers to Node1, and then send the last block in that chain.\n-   Node1 should accept the block because it's coming from a whitelisted peer.\n \n 5. Send a duplicate of the block in #3 to Node0.\n    Node0 should not process the block because it is unrequested, and stay on\n@@ -46,13 +41,21 @@\n \n 7. Send Node0 the missing block again.\n    Node0 should process and the tip should advance.\n+\n+8. Create a fork which is invalid at a height longer than the current chain\n+   (ie to which the node will try to reorg) but which has headers built on top\n+   of the invalid block. Check that we get disconnected if we send more headers\n+   on the chain the node now knows to be invalid.\n+\n+9. Test Node1 is able to sync when connected to node0 (which should have sufficient\n+   work on its chain).\n \"\"\"\n \n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n import time\n-from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.blocktools import create_block, create_coinbase, create_transaction\n \n class AcceptBlockTest(BitcoinTestFramework):\n     def add_options(self, parser):\n@@ -63,133 +66,159 @@ def add_options(self, parser):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.extra_args = [[], [\"-whitelist=127.0.0.1\"]]\n+        self.extra_args = [[], [\"-minimumchainwork=0x10\"]]\n \n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for\n         # the whitelisted case.\n+        # Node2 will be used for non-whitelisted peers to test the interaction\n+        # with nMinimumChainWork.\n         self.setup_nodes()\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n-        test_node = NodeConnCB()   # connects to node0 (not whitelisted)\n-        white_node = NodeConnCB()  # connects to node1 (whitelisted)\n+        test_node = NodeConnCB()   # connects to node0\n+        min_work_node = NodeConnCB()  # connects to node1\n \n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node))\n-        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], white_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1], min_work_node))\n         test_node.add_connection(connections[0])\n-        white_node.add_connection(connections[1])\n+        min_work_node.add_connection(connections[1])\n \n         NetworkThread().start() # Start up network handling in another thread\n \n         # Test logic begins here\n         test_node.wait_for_verack()\n-        white_node.wait_for_verack()\n+        min_work_node.wait_for_verack()\n \n-        # 1. Have both nodes mine a block (leave IBD)\n+        # 1. Have nodes mine a block (leave IBD)\n         [ n.generate(1) for n in self.nodes ]\n         tips = [ int(\"0x\" + n.getbestblockhash(), 0) for n in self.nodes ]\n \n         # 2. Send one block that builds on each tip.\n-        # This should be accepted.\n+        # This should be accepted by node0\n         blocks_h2 = []  # the height 2 blocks on each node's chain\n         block_time = int(time.time()) + 1\n         for i in range(2):\n             blocks_h2.append(create_block(tips[i], create_coinbase(2), block_time))\n             blocks_h2[i].solve()\n             block_time += 1\n         test_node.send_message(msg_block(blocks_h2[0]))\n-        white_node.send_message(msg_block(blocks_h2[1]))\n+        min_work_node.send_message(msg_block(blocks_h2[1]))\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n+        for x in [test_node, min_work_node]:\n+            x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n-        assert_equal(self.nodes[1].getblockcount(), 2)\n-        self.log.info(\"First height 2 block accepted by both nodes\")\n+        assert_equal(self.nodes[1].getblockcount(), 1)\n+        self.log.info(\"First height 2 block accepted by node0; correctly rejected by node1\")\n \n-        # 3. Send another block that builds on the original tip.\n-        blocks_h2f = []  # Blocks at height 2 that fork off the main chain\n-        for i in range(2):\n-            blocks_h2f.append(create_block(tips[i], create_coinbase(2), blocks_h2[i].nTime+1))\n-            blocks_h2f[i].solve()\n-        test_node.send_message(msg_block(blocks_h2f[0]))\n-        white_node.send_message(msg_block(blocks_h2f[1]))\n+        # 3. Send another block that builds on genesis.\n+        block_h1f = create_block(int(\"0x\" + self.nodes[0].getblockhash(0), 0), create_coinbase(1), block_time)\n+        block_time += 1\n+        block_h1f.solve()\n+        test_node.send_message(msg_block(block_h1f))\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n         for x in self.nodes[0].getchaintips():\n-            if x['hash'] == blocks_h2f[0].hash:\n+            if x['hash'] == block_h1f.hash:\n                 assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, block_h1f.hash)\n \n-        for x in self.nodes[1].getchaintips():\n-            if x['hash'] == blocks_h2f[1].hash:\n-                assert_equal(x['status'], \"valid-headers\")\n+        # 4. Send another two block that build on the fork.\n+        block_h2f = create_block(block_h1f.sha256, create_coinbase(2), block_time)\n+        block_time += 1\n+        block_h2f.solve()\n+        test_node.send_message(msg_block(block_h2f))\n \n-        self.log.info(\"Second height 2 block accepted only from whitelisted peer\")\n+        test_node.sync_with_ping()\n+        # Since the earlier block was not processed by node, the new block\n+        # can't be fully validated.\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_h2f.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n \n-        # 4. Now send another block that builds on the forking chain.\n-        blocks_h3 = []\n-        for i in range(2):\n-            blocks_h3.append(create_block(blocks_h2f[i].sha256, create_coinbase(3), blocks_h2f[i].nTime+1))\n-            blocks_h3[i].solve()\n-        test_node.send_message(msg_block(blocks_h3[0]))\n-        white_node.send_message(msg_block(blocks_h3[1]))\n+        # But this block should be accepted by node since it has equal work.\n+        self.nodes[0].getblock(block_h2f.hash)\n+        self.log.info(\"Second height 2 block accepted, but not reorg'ed to\")\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n-        # Since the earlier block was not processed by node0, the new block\n+        # 4b. Now send another block that builds on the forking chain.\n+        block_h3 = create_block(block_h2f.sha256, create_coinbase(3), block_h2f.nTime+1)\n+        block_h3.solve()\n+        test_node.send_message(msg_block(block_h3))\n+\n+        test_node.sync_with_ping()\n+        # Since the earlier block was not processed by node, the new block\n         # can't be fully validated.\n+        tip_entry_found = False\n         for x in self.nodes[0].getchaintips():\n-            if x['hash'] == blocks_h3[0].hash:\n+            if x['hash'] == block_h3.hash:\n                 assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+        self.nodes[0].getblock(block_h3.hash)\n+\n+        # But this block should be accepted by node since it has more work.\n+        self.nodes[0].getblock(block_h3.hash)\n+        self.log.info(\"Unrequested more-work block accepted\")\n+\n+        # 4c. Now mine 288 more blocks and deliver; all should be processed but\n+        # the last (height-too-high) on node (as long as its not missing any headers)\n+        tip = block_h3\n+        all_blocks = []\n+        for i in range(288):\n+            next_block = create_block(tip.sha256, create_coinbase(i + 4), tip.nTime+1)\n+            next_block.solve()\n+            all_blocks.append(next_block)\n+            tip = next_block\n+\n+        # Now send the block at height 5 and check that it wasn't accepted (missing header)\n+        test_node.send_message(msg_block(all_blocks[1]))\n+        test_node.sync_with_ping()\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getblock, all_blocks[1].hash)\n+        assert_raises_rpc_error(-5, \"Block not found\", self.nodes[0].getblockheader, all_blocks[1].hash)\n \n-        # But this block should be accepted by node0 since it has more work.\n-        self.nodes[0].getblock(blocks_h3[0].hash)\n-        self.log.info(\"Unrequested more-work block accepted from non-whitelisted peer\")\n+        # The block at height 5 should be accepted if we provide the missing header, though\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(all_blocks[0]))\n+        test_node.send_message(headers_message)\n+        test_node.send_message(msg_block(all_blocks[1]))\n+        test_node.sync_with_ping()\n+        self.nodes[0].getblock(all_blocks[1].hash)\n \n-        # Node1 should have accepted and reorged.\n-        assert_equal(self.nodes[1].getblockcount(), 3)\n-        self.log.info(\"Successfully reorged to length 3 chain from whitelisted peer\")\n+        # Now send the blocks in all_blocks\n+        for i in range(288):\n+            test_node.send_message(msg_block(all_blocks[i]))\n+        test_node.sync_with_ping()\n \n-        # 4b. Now mine 288 more blocks and deliver; all should be processed but\n-        # the last (height-too-high) on node0.  Node1 should process the tip if\n-        # we give it the headers chain leading to the tip.\n-        tips = blocks_h3\n-        headers_message = msg_headers()\n-        all_blocks = []   # node0's blocks\n-        for j in range(2):\n-            for i in range(288):\n-                next_block = create_block(tips[j].sha256, create_coinbase(i + 4), tips[j].nTime+1)\n-                next_block.solve()\n-                if j==0:\n-                    test_node.send_message(msg_block(next_block))\n-                    all_blocks.append(next_block)\n-                else:\n-                    headers_message.headers.append(CBlockHeader(next_block))\n-                tips[j] = next_block\n-\n-        time.sleep(2)\n         # Blocks 1-287 should be accepted, block 288 should be ignored because it's too far ahead\n         for x in all_blocks[:-1]:\n             self.nodes[0].getblock(x.hash)\n-        assert_raises_jsonrpc(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n-\n-        headers_message.headers.pop() # Ensure the last block is unrequested\n-        white_node.send_message(headers_message) # Send headers leading to tip\n-        white_node.send_message(msg_block(tips[1]))  # Now deliver the tip\n-        white_node.sync_with_ping()\n-        self.nodes[1].getblock(tips[1].hash)\n-        self.log.info(\"Unrequested block far ahead of tip accepted from whitelisted peer\")\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[-1].hash)\n \n         # 5. Test handling of unrequested block on the node that didn't process\n         # Should still not be processed (even though it has a child that has more\n         # work).\n-        test_node.send_message(msg_block(blocks_h2f[0]))\n \n-        # Here, if the sleep is too short, the test could falsely succeed (if the\n-        # node hasn't processed the block by the time the sleep returns, and then\n-        # the node processes it and incorrectly advances the tip).\n-        # But this would be caught later on, when we verify that an inv triggers\n-        # a getdata request for this block.\n+        # The node should have requested the blocks at some point, so\n+        # disconnect/reconnect first\n+        connections[0].disconnect_node()\n+        test_node.wait_for_disconnect()\n+\n+        test_node = NodeConnCB()   # connects to node (not whitelisted)\n+        connections[0] = NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node)\n+        test_node.add_connection(connections[0])\n+\n+        test_node.wait_for_verack()\n+        test_node.send_message(msg_block(block_h1f))\n+\n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         self.log.info(\"Unrequested block that would complete more-work chain was ignored\")\n@@ -200,23 +229,100 @@ def run_test(self):\n         with mininode_lock:\n             # Clear state so we can check the getdata request\n             test_node.last_message.pop(\"getdata\", None)\n-            test_node.send_message(msg_inv([CInv(2, blocks_h3[0].sha256)]))\n+            test_node.send_message(msg_inv([CInv(2, block_h3.sha256)]))\n \n         test_node.sync_with_ping()\n         with mininode_lock:\n             getdata = test_node.last_message[\"getdata\"]\n \n         # Check that the getdata includes the right block\n-        assert_equal(getdata.inv[0].hash, blocks_h2f[0].sha256)\n+        assert_equal(getdata.inv[0].hash, block_h1f.sha256)\n         self.log.info(\"Inv at tip triggered getdata for unprocessed block\")\n \n         # 7. Send the missing block for the third time (now it is requested)\n-        test_node.send_message(msg_block(blocks_h2f[0]))\n+        test_node.send_message(msg_block(block_h1f))\n \n         test_node.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 290)\n+        self.nodes[0].getblock(all_blocks[286].hash)\n+        assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, all_blocks[287].hash)\n         self.log.info(\"Successfully reorged to longer chain from non-whitelisted peer\")\n \n+        # 8. Create a chain which is invalid at a height longer than the\n+        # current chain, but which has more blocks on top of that\n+        block_289f = create_block(all_blocks[284].sha256, create_coinbase(289), all_blocks[284].nTime+1)\n+        block_289f.solve()\n+        block_290f = create_block(block_289f.sha256, create_coinbase(290), block_289f.nTime+1)\n+        block_290f.solve()\n+        block_291 = create_block(block_290f.sha256, create_coinbase(291), block_290f.nTime+1)\n+        # block_291 spends a coinbase below maturity!\n+        block_291.vtx.append(create_transaction(block_290f.vtx[0], 0, b\"42\", 1))\n+        block_291.hashMerkleRoot = block_291.calc_merkle_root()\n+        block_291.solve()\n+        block_292 = create_block(block_291.sha256, create_coinbase(292), block_291.nTime+1)\n+        block_292.solve()\n+\n+        # Now send all the headers on the chain and enough blocks to trigger reorg\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(block_289f))\n+        headers_message.headers.append(CBlockHeader(block_290f))\n+        headers_message.headers.append(CBlockHeader(block_291))\n+        headers_message.headers.append(CBlockHeader(block_292))\n+        test_node.send_message(headers_message)\n+\n+        test_node.sync_with_ping()\n+        tip_entry_found = False\n+        for x in self.nodes[0].getchaintips():\n+            if x['hash'] == block_292.hash:\n+                assert_equal(x['status'], \"headers-only\")\n+                tip_entry_found = True\n+        assert(tip_entry_found)\n+        assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, block_292.hash)\n+\n+        test_node.send_message(msg_block(block_289f))\n+        test_node.send_message(msg_block(block_290f))\n+\n+        test_node.sync_with_ping()\n+        self.nodes[0].getblock(block_289f.hash)\n+        self.nodes[0].getblock(block_290f.hash)\n+\n+        test_node.send_message(msg_block(block_291))\n+\n+        # At this point we've sent an obviously-bogus block, wait for full processing\n+        # without assuming whether we will be disconnected or not\n+        try:\n+            # Only wait a short while so the test doesn't take forever if we do get\n+            # disconnected\n+            test_node.sync_with_ping(timeout=1)\n+        except AssertionError:\n+            test_node.wait_for_disconnect()\n+\n+            test_node = NodeConnCB()   # connects to node (not whitelisted)\n+            connections[0] = NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test_node)\n+            test_node.add_connection(connections[0])\n+\n+            NetworkThread().start() # Start up network handling in another thread\n+            test_node.wait_for_verack()\n+\n+        # We should have failed reorg and switched back to 290 (but have block 291)\n+        assert_equal(self.nodes[0].getblockcount(), 290)\n+        assert_equal(self.nodes[0].getbestblockhash(), all_blocks[286].hash)\n+        assert_equal(self.nodes[0].getblock(block_291.hash)[\"confirmations\"], -1)\n+\n+        # Now send a new header on the invalid chain, indicating we're forked off, and expect to get disconnected\n+        block_293 = create_block(block_292.sha256, create_coinbase(293), block_292.nTime+1)\n+        block_293.solve()\n+        headers_message = msg_headers()\n+        headers_message.headers.append(CBlockHeader(block_293))\n+        test_node.send_message(headers_message)\n+        test_node.wait_for_disconnect()\n+\n+        # 9. Connect node1 to node0 and ensure it is able to sync\n+        connect_nodes(self.nodes[0], 1)\n+        sync_blocks([self.nodes[0], self.nodes[1]])\n+        self.log.info(\"Successfully synced nodes 1 and 0\")\n+\n         [ c.disconnect_node() for c in connections ]\n \n if __name__ == '__main__':"
      },
      {
        "sha": "bb56db9b40f31758a96bc1605787cc019ec7aae2",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -101,7 +101,7 @@ def run_test(self):\n         tx_id = self.nodes[0].decoderawtransaction(tx_hex)[\"txid\"]\n \n         # This will raise an exception due to min relay fee not being met\n-        assert_raises_jsonrpc(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n+        assert_raises_rpc_error(-26, \"66: min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n         assert(tx_id not in self.nodes[0].getrawmempool())\n \n         # This is a less than 1000-byte transaction, so just set the fee"
      },
      {
        "sha": "1b0f0ba1cdaffac88c22e2488d2d1705410bc8ca",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -185,7 +185,7 @@ def reorg_test(self):\n \n     def reorg_back(self):\n         # Verify that a block on the old main chain fork has been pruned away\n-        assert_raises_jsonrpc(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n+        assert_raises_rpc_error(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n         self.log.info(\"Will need to redownload block %d\" % self.forkheight)\n \n         # Verify that we have enough history to reorg back to the fork point\n@@ -232,7 +232,7 @@ def manual_test(self, node_number, use_timestamp):\n         self.start_node(node_number)\n         node = self.nodes[node_number]\n         assert_equal(node.getblockcount(), 995)\n-        assert_raises_jsonrpc(-1, \"not in prune mode\", node.pruneblockchain, 500)\n+        assert_raises_rpc_error(-1, \"not in prune mode\", node.pruneblockchain, 500)\n \n         # now re-start in manual pruning mode\n         self.stop_node(node_number)\n@@ -265,14 +265,14 @@ def has_block(index):\n             return os.path.isfile(self.options.tmpdir + \"/node{}/regtest/blocks/blk{:05}.dat\".format(node_number, index))\n \n         # should not prune because chain tip of node 3 (995) < PruneAfterHeight (1000)\n-        assert_raises_jsonrpc(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n+        assert_raises_rpc_error(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))\n \n         # mine 6 blocks so we are at height 1001 (i.e., above PruneAfterHeight)\n         node.generate(6)\n         assert_equal(node.getblockchaininfo()[\"blocks\"], 1001)\n \n         # negative heights should raise an exception\n-        assert_raises_jsonrpc(-8, \"Negative\", node.pruneblockchain, -10)\n+        assert_raises_rpc_error(-8, \"Negative\", node.pruneblockchain, -10)\n \n         # height=100 too low to prune first block file so this is a no-op\n         prune(100)"
      },
      {
        "sha": "ec9467eb445a0cb94517cc7522d47e7fe7aab1d9",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -48,7 +48,7 @@ def run_test(self):\n         rawtx   = self.nodes[2].signrawtransaction(rawtx)\n \n         # This will raise an exception since there are missing inputs\n-        assert_raises_jsonrpc(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n+        assert_raises_rpc_error(-25, \"Missing inputs\", self.nodes[2].sendrawtransaction, rawtx['hex'])\n \n         #########################\n         # RAW TX MULTISIG TESTS #\n@@ -190,13 +190,13 @@ def run_test(self):\n         assert_equal(self.nodes[0].getrawtransaction(txHash, True)[\"hex\"], rawTxSigned['hex'])\n \n         # 6. invalid parameters - supply txid and string \"Flase\"\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, \"Flase\")\n \n         # 7. invalid parameters - supply txid and empty array\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, [])\n \n         # 8. invalid parameters - supply txid and empty dict\n-        assert_raises_jsonrpc(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n+        assert_raises_rpc_error(-3,\"Invalid type\", self.nodes[0].getrawtransaction, txHash, {})\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 1000}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n@@ -207,12 +207,12 @@ def run_test(self):\n         # 9. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : -1}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n \n         # 10. invalid parameters - sequence number out of range\n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967296}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }\n-        assert_raises_jsonrpc(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n+        assert_raises_rpc_error(-8, 'Invalid parameter, sequence number is out of range', self.nodes[0].createrawtransaction, inputs, outputs)\n \n         inputs  = [ {'txid' : \"1d1d4e24ed99057e84c3f80fd8fbec79ed9e1acee37da269356ecea000000000\", 'vout' : 1, 'sequence' : 4294967294}]\n         outputs = { self.nodes[0].getnewaddress() : 1 }"
      },
      {
        "sha": "4ef10e6b3651618587ae74e1ce29c583cc3dcef0",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -136,17 +136,17 @@ def test_simple_doublespend(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n         # This will raise an exception due to transaction replacement being disabled\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n \n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n         tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n         tx1b_hex = txToHex(tx1b)\n         # Replacement still disabled even with \"enough fee\"\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n         # Works when enabled\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n \n@@ -189,7 +189,7 @@ def test_doublespend_chain(self):\n         dbl_tx_hex = txToHex(dbl_tx)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n         # Accepted with sufficient fee\n         dbl_tx = CTransaction()\n@@ -250,7 +250,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n         dbl_tx.vout = [CTxOut(initial_nValue - fee*n, CScript([1]))]\n         dbl_tx_hex = txToHex(dbl_tx)\n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n         # 1 BTC fee is enough\n         dbl_tx = CTransaction()\n@@ -278,7 +278,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n             dbl_tx.vout = [CTxOut(initial_nValue - 2*fee*n, CScript([1]))]\n             dbl_tx_hex = txToHex(dbl_tx)\n             # This will raise an exception\n-            assert_raises_jsonrpc(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n+            assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n             for tx in tree_txs:\n                 tx.rehash()\n@@ -302,7 +302,7 @@ def test_replacement_feeperkb(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n     def test_spends_of_conflicting_outputs(self):\n         \"\"\"Replacements that spend conflicting tx outputs are rejected\"\"\"\n@@ -325,7 +325,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n         # Spend tx1a's output to test the indirect case.\n         tx1b = CTransaction()\n@@ -342,7 +342,7 @@ def test_spends_of_conflicting_outputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"bad-txns-spends-conflicting-tx\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n     def test_new_unconfirmed_inputs(self):\n         \"\"\"Replacements that add new unconfirmed inputs are rejected\"\"\"\n@@ -361,7 +361,7 @@ def test_new_unconfirmed_inputs(self):\n         tx2_hex = txToHex(tx2)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"replacement-adds-unconfirmed\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n+        assert_raises_rpc_error(-26, \"replacement-adds-unconfirmed\", self.nodes[0].sendrawtransaction, tx2_hex, True)\n \n     def test_too_many_replacements(self):\n         \"\"\"Replacements that evict too many transactions are rejected\"\"\"\n@@ -407,7 +407,7 @@ def test_too_many_replacements(self):\n         double_tx_hex = txToHex(double_tx)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, True)\n+        assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, double_tx_hex, True)\n \n         # If we remove an input, it should pass\n         double_tx = CTransaction()\n@@ -434,7 +434,7 @@ def test_opt_in(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n         tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n \n@@ -452,7 +452,7 @@ def test_opt_in(self):\n         tx2b_hex = txToHex(tx2b)\n \n         # This will raise an exception\n-        assert_raises_jsonrpc(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n+        assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n \n         # Now create a new transaction that spends from tx1a and tx2a\n         # opt-in on one of the inputs\n@@ -504,7 +504,7 @@ def test_prioritised_transactions(self):\n         tx1b_hex = txToHex(tx1b)\n \n         # Verify tx1b cannot replace tx1a.\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx1b_hex, True)\n \n         # Use prioritisetransaction to set tx1a's fee to 0.\n         self.nodes[0].prioritisetransaction(txid=tx1a_txid, fee_delta=int(-0.1*COIN))\n@@ -531,7 +531,7 @@ def test_prioritised_transactions(self):\n         tx2b_hex = txToHex(tx2b)\n \n         # Verify tx2b cannot replace tx2a.\n-        assert_raises_jsonrpc(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n+        assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, tx2b_hex, True)\n \n         # Now prioritise tx2b to have a higher modified fee\n         self.nodes[0].prioritisetransaction(txid=tx2b.hash, fee_delta=int(0.1*COIN))"
      },
      {
        "sha": "d959bb4c3836466fa11e50fabc9da6f3d1cfc4d9",
        "filename": "test/functional/resendwallettransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/resendwallettransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/resendwallettransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/resendwallettransactions.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test resendwallettransactions RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_jsonrpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n class ResendWalletTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -14,7 +14,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         # Should raise RPC_WALLET_ERROR (-4) if walletbroadcast is disabled.\n-        assert_raises_jsonrpc(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)\n+        assert_raises_rpc_error(-4, \"Error: Wallet transaction broadcasting is disabled with -walletbroadcast\", self.nodes[0].resendwallettransactions)\n \n         # Should return an empty array if there aren't unconfirmed wallet transactions.\n         self.stop_node(0)"
      },
      {
        "sha": "0e8c3fa209ee82d73336ce2abda17c59f71dd55d",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -101,7 +101,7 @@ def run_test(self):\n \n         # Check that with invalid rpcallowip, we are denied\n         self.run_allowip_test([non_loopback_ip], non_loopback_ip, defaultport)\n-        assert_raises_jsonrpc(-342, \"non-JSON HTTP response with '403 Forbidden' from server\", self.run_allowip_test, ['1.1.1.1'], non_loopback_ip, defaultport)\n+        assert_raises_rpc_error(-342, \"non-JSON HTTP response with '403 Forbidden' from server\", self.run_allowip_test, ['1.1.1.1'], non_loopback_ip, defaultport)\n \n if __name__ == '__main__':\n     RPCBindTest().main()"
      },
      {
        "sha": "0fb0a62afd02be732abcdd87602c9d65b25f57db",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n )\n \n class NamedArgumentTest(BitcoinTestFramework):\n@@ -19,7 +19,7 @@ def run_test(self):\n         h = node.help(command='getinfo')\n         assert(h.startswith('getinfo\\n'))\n \n-        assert_raises_jsonrpc(-8, 'Unknown named parameter', node.help, random='getinfo')\n+        assert_raises_rpc_error(-8, 'Unknown named parameter', node.help, random='getinfo')\n \n         h = node.getblockhash(height=0)\n         node.getblock(blockhash=h)"
      },
      {
        "sha": "7cd87e562698dbeaee19c822f49cc404a2081b01",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -100,11 +100,11 @@ def skip_mine(self, node, txid, sign, redeem_script=\"\"):\n         sync_blocks(self.nodes)\n \n     def fail_accept(self, node, error_msg, txid, sign, redeem_script=\"\"):\n-        assert_raises_jsonrpc(-26, error_msg, send_to_witness, 1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n+        assert_raises_rpc_error(-26, error_msg, send_to_witness, 1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n \n     def fail_mine(self, node, txid, sign, redeem_script=\"\"):\n         send_to_witness(1, node, getutxo(txid), self.pubkey[0], False, Decimal(\"49.998\"), sign, redeem_script)\n-        assert_raises_jsonrpc(-1, \"CreateNewBlock: TestBlockValidity failed\", node.generate, 1)\n+        assert_raises_rpc_error(-1, \"CreateNewBlock: TestBlockValidity failed\", node.generate, 1)\n         sync_blocks(self.nodes)\n \n     def run_test(self):\n@@ -443,11 +443,7 @@ def run_test(self):\n         for i in importlist:\n             # import all generated addresses. The wallet already has the private keys for some of these, so catch JSON RPC\n             # exceptions and continue.\n-            try:\n-                self.nodes[0].importaddress(i,\"\",False,True)\n-            except JSONRPCException as exp:\n-                assert_equal(exp.error[\"message\"], \"The wallet already contains the private key for this address or script\")\n-                assert_equal(exp.error[\"code\"], -4)\n+            try_rpc(-4, \"The wallet already contains the private key for this address or script\", self.nodes[0].importaddress, i, \"\", False, True)\n \n         self.nodes[0].importaddress(script_to_p2sh(op0)) # import OP_0 as address only\n         self.nodes[0].importaddress(multisig_without_privkey_address) # Test multisig_without_privkey\n@@ -460,7 +456,7 @@ def run_test(self):\n         # addwitnessaddress should refuse to return a witness address if an uncompressed key is used\n         # note that no witness address should be returned by unsolvable addresses\n         for i in uncompressed_spendable_address + uncompressed_solvable_address + unknown_address + unsolvable_address:\n-            assert_raises_jsonrpc(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n+            assert_raises_rpc_error(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n         # addwitnessaddress should return a witness addresses even if keys are not in the wallet\n         self.nodes[0].addwitnessaddress(multisig_without_privkey_address)\n@@ -543,7 +539,7 @@ def run_test(self):\n         # premature_witaddress are not accepted until the script is added with addwitnessaddress first\n         for i in uncompressed_spendable_address + uncompressed_solvable_address + premature_witaddress:\n             # This will raise an exception\n-            assert_raises_jsonrpc(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n+            assert_raises_rpc_error(-4, \"Public key or redeemscript not known to wallet, or the key is uncompressed\", self.nodes[0].addwitnessaddress, i)\n \n         # after importaddress it should pass addwitnessaddress\n         v = self.nodes[0].validateaddress(compressed_solvable_address[1])"
      },
      {
        "sha": "9a45d53cb85640e41c0542270148427294a03d4c",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -82,7 +82,7 @@ def script_verification_error_test(self):\n             assert_equal(decodedRawTx[\"vin\"][i][\"vout\"], inp[\"vout\"])\n \n         # Make sure decoderawtransaction throws if there is extra data\n-        assert_raises(JSONRPCException, self.nodes[0].decoderawtransaction, rawTx + \"00\")\n+        assert_raises_rpc_error(-22, \"TX decode failed\", self.nodes[0].decoderawtransaction, rawTx + \"00\")\n \n         rawTxSigned = self.nodes[0].signrawtransaction(rawTx, scripts, privKeys)\n "
      },
      {
        "sha": "dc8731066b27740312a69ae4babe15c0dbf85919",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -1622,7 +1622,6 @@ def sync_with_ping(self, timeout=60):\n         test_function = lambda: self.last_message.get(\"pong\") and self.last_message[\"pong\"].nonce == self.ping_counter\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         self.ping_counter += 1\n-        return True\n \n # The actual NodeConn class\n # This class provides an interface for a p2p connection to a specified node"
      },
      {
        "sha": "7aabdd9c007c56fb45846213c6067ef801cdc157",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -102,8 +102,11 @@ def main(self):\n \n         check_json_precision()\n \n+        self.options.cachedir = os.path.abspath(self.options.cachedir)\n+\n         # Set up temp directory and start logging\n         if self.options.tmpdir:\n+            self.options.tmpdir = os.path.abspath(self.options.tmpdir)\n             os.makedirs(self.options.tmpdir, exist_ok=False)\n         else:\n             self.options.tmpdir = tempfile.mkdtemp(prefix=\"test\")"
      },
      {
        "sha": "102c903018fedf239bae20be22451349539cf701",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -51,6 +51,8 @@ def assert_raises(exc, fun, *args, **kwds):\n def assert_raises_message(exc, message, fun, *args, **kwds):\n     try:\n         fun(*args, **kwds)\n+    except JSONRPCException:\n+        raise AssertionError(\"Use assert_raises_rpc_error() to test RPC failures\")\n     except exc as e:\n         if message is not None and message not in e.error['message']:\n             raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n@@ -83,7 +85,7 @@ def assert_raises_process_error(returncode, output, fun, *args, **kwds):\n     else:\n         raise AssertionError(\"No exception raised\")\n \n-def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n+def assert_raises_rpc_error(code, message, fun, *args, **kwds):\n     \"\"\"Run an RPC and verify that a specific JSONRPC exception code and message is raised.\n \n     Calls function `fun` with arguments `args` and `kwds`. Catches a JSONRPCException\n@@ -99,6 +101,13 @@ def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n         args*: positional arguments for the function.\n         kwds**: named arguments for the function.\n     \"\"\"\n+    assert try_rpc(code, message, fun, *args, **kwds), \"No exception raised\"\n+\n+def try_rpc(code, message, fun, *args, **kwds):\n+    \"\"\"Tries to run an rpc command.\n+\n+    Test against error code and message if the rpc fails.\n+    Returns whether a JSONRPCException was raised.\"\"\"\n     try:\n         fun(*args, **kwds)\n     except JSONRPCException as e:\n@@ -107,10 +116,11 @@ def assert_raises_jsonrpc(code, message, fun, *args, **kwds):\n             raise AssertionError(\"Unexpected JSONRPC error code %i\" % e.error[\"code\"])\n         if (message is not None) and (message not in e.error['message']):\n             raise AssertionError(\"Expected substring not found:\" + e.error['message'])\n+        return True\n     except Exception as e:\n         raise AssertionError(\"Unexpected exception raised: \" + type(e).__name__)\n     else:\n-        raise AssertionError(\"No exception raised\")\n+        return False\n \n def assert_is_hex_string(string):\n     try:"
      },
      {
        "sha": "ca74bb68da7dc2acc7728323c7f5062543c109ba",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -121,6 +121,8 @@\n     'bip65-cltv-p2p.py',\n     'uptime.py',\n     'resendwallettransactions.py',\n+    'minchainwork.py',\n+    'p2p-acceptblock.py',\n ]\n \n EXTENDED_SCRIPTS = [\n@@ -148,7 +150,6 @@\n     'txn_clone.py --mineblock',\n     'forknotify.py',\n     'invalidateblock.py',\n-    'p2p-acceptblock.py',\n     'replace-by-fee.py',\n ]\n "
      },
      {
        "sha": "2ca01c7f0822eaa418ff0caababfd9af9c09eb1d",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -7,7 +7,7 @@\n import os\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal, assert_raises_jsonrpc)\n+from test_framework.util import (assert_equal, assert_raises_rpc_error)\n \n \n def read_dump(file_name, addrs, hd_master_addr_old):\n@@ -106,7 +106,7 @@ def run_test (self):\n         assert_equal(found_addr_rsv, 90*2) \n \n         # Overwriting should fail\n-        assert_raises_jsonrpc(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n+        assert_raises_rpc_error(-8, \"already exists\", self.nodes[0].dumpwallet, tmpdir + \"/node0/wallet.unencrypted.dump\")\n \n if __name__ == '__main__':\n     WalletDumpTest().main ()"
      },
      {
        "sha": "db62e1e30f489b18f573b08a135ccc5d7d321f04",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -9,7 +9,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n )\n \n class WalletEncryptionTest(BitcoinTestFramework):\n@@ -32,28 +32,28 @@ def run_test(self):\n         self.start_node(0)\n \n         # Test that the wallet is encrypted\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Check that walletpassphrase works\n         self.nodes[0].walletpassphrase(passphrase, 2)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n \n         # Check that the timeout is right\n         time.sleep(2)\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Test wrong passphrase\n-        assert_raises_jsonrpc(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase + \"wrong\", 10)\n+        assert_raises_rpc_error(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase + \"wrong\", 10)\n \n         # Test walletlock\n         self.nodes[0].walletpassphrase(passphrase, 84600)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n         self.nodes[0].walletlock()\n-        assert_raises_jsonrpc(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n \n         # Test passphrase changes\n         self.nodes[0].walletpassphrasechange(passphrase, passphrase2)\n-        assert_raises_jsonrpc(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase, 10)\n+        assert_raises_rpc_error(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase, 10)\n         self.nodes[0].walletpassphrase(passphrase2, 10)\n         assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n "
      },
      {
        "sha": "7d6b0b24b6f42d88715163809a898fb7f9ef53b0",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -102,7 +102,7 @@ def run_test(self):\n         unspent_0 = self.nodes[2].listunspent()[0]\n         unspent_0 = {\"txid\": unspent_0[\"txid\"], \"vout\": unspent_0[\"vout\"]}\n         self.nodes[2].lockunspent(False, [unspent_0])\n-        assert_raises_jsonrpc(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n+        assert_raises_rpc_error(-4, \"Insufficient funds\", self.nodes[2].sendtoaddress, self.nodes[2].getnewaddress(), 20)\n         assert_equal([unspent_0], self.nodes[2].listlockunspent())\n         self.nodes[2].lockunspent(True, [unspent_0])\n         assert_equal(len(self.nodes[2].listlockunspent()), 0)\n@@ -287,10 +287,10 @@ def run_test(self):\n         assert_equal(txObj['amount'], Decimal('-0.0001'))\n \n         # This will raise an exception because the amount type is wrong\n-        assert_raises_jsonrpc(-3, \"Invalid amount\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"1f-4\")\n+        assert_raises_rpc_error(-3, \"Invalid amount\", self.nodes[0].sendtoaddress, self.nodes[2].getnewaddress(), \"1f-4\")\n \n         # This will raise an exception since generate does not accept a string\n-        assert_raises_jsonrpc(-1, \"not an integer\", self.nodes[0].generate, \"2\")\n+        assert_raises_rpc_error(-1, \"not an integer\", self.nodes[0].generate, \"2\")\n \n         # Import address and private key to check correct behavior of spendable unspents\n         # 1. Send some coins to generate new UTXO\n@@ -423,7 +423,7 @@ def run_test(self):\n \n         node0_balance = self.nodes[0].getbalance()\n         # With walletrejectlongchains we will not create the tx and store it in our wallet.\n-        assert_raises_jsonrpc(-4, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))\n+        assert_raises_rpc_error(-4, \"Transaction has too long of a mempool chain\", self.nodes[0].sendtoaddress, sending_addr, node0_balance - Decimal('0.01'))\n \n         # Verify nothing new in wallet\n         assert_equal(total_txs, len(self.nodes[0].listtransactions(\"*\",99999)))"
      },
      {
        "sha": "85a149793e730fcaa072b80ee756d2b964ddf7b2",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -190,6 +190,16 @@ def run_test(self):\n         assert_equal(self.nodes[1].getbalance(), balance1)\n         assert_equal(self.nodes[2].getbalance(), balance2)\n \n+        # Backup to source wallet file must fail\n+        sourcePaths = [\n+            tmpdir + \"/node0/regtest/wallet.dat\",\n+            tmpdir + \"/node0/./regtest/wallet.dat\",\n+            tmpdir + \"/node0/regtest/\",\n+            tmpdir + \"/node0/regtest\"]\n+\n+        for sourcePath in sourcePaths:\n+            assert_raises_rpc_error(-4, \"backup failed\", self.nodes[0].backupwallet, sourcePath)\n+\n \n if __name__ == '__main__':\n     WalletBackupTest().main()"
      },
      {
        "sha": "8cd622dc8ec3b7996140f2115f904a89e3a6639e",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f518d9ae6aa525c4cd360a16f07a9272cbef558d/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "patch": "@@ -17,7 +17,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    assert_raises_jsonrpc,\n+    assert_raises_rpc_error,\n     wait_until,\n )\n \n@@ -72,7 +72,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n \n         # This will raise an exception because the unconfirmed transaction has been zapped\n-        assert_raises_jsonrpc(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n \n if __name__ == '__main__':\n     ZapWalletTXesTest().main()"
      }
    ]
  },
  {
    "sha": "2ce9e586d5b11e1f61af4db27b7326687d5e5124",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2U5ZTU4NmQ1YjExZTFmNjFhZjRkYjI3YjczMjY2ODdkNWU1MTI0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-05T13:58:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-05T13:59:38Z"
      },
      "message": "doc: Fill in 0.15.1 changelog and authors in release notes\n\nTree-SHA512: 569816ca62319650d803b2dd4bc3a8791aaea1f573cd52a9e2cf220dc1ec08180a66fbb0ac44441f6b9f48cb9041ce08f56ff2e864b58510308b9a4b6898f8e8",
      "tree": {
        "sha": "73777e1ffa4bc51d774f9c1ab65bc9105afce496",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/73777e1ffa4bc51d774f9c1ab65bc9105afce496"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ce9e586d5b11e1f61af4db27b7326687d5e5124",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJZ/xlKAAoJEB5K7WKYbNJdW3IH/1axKgsCr8aM5JG5bhEMGY2m\nKxrRVZKkGFLtKBZ3mjKw9r/3OEkqj27wjxPAkWjHZnsG2+F8cVWOrHrCpC6HS6dq\nFSEoXtylAlL1k58/nJQIg0p7BYYpuMZtHE0A8M6HjtGYKlBfAgw+9BOsp8IzFt4D\nlEznA+ilkSLf4pX61EbfuQQUReosFHSQFoXGQG6dz0Qvp6GJmv5hZ04+WNoDwl/h\n/Ub28YuW6Cenh2zYVQs2ul68Buabx9VXnBBXim6ulxbryUOUSV7adiraINBtivjI\nZLPBbPmmCAEVF+nz8N+o+27CQ2Me1BQGdkh6S5GhXgLYCB5Xnm0nAVK2IYO7yNA=\n=wuAo\n-----END PGP SIGNATURE-----",
        "payload": "tree 73777e1ffa4bc51d774f9c1ab65bc9105afce496\nparent f518d9ae6aa525c4cd360a16f07a9272cbef558d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509890301 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509890378 +0100\n\ndoc: Fill in 0.15.1 changelog and authors in release notes\n\nTree-SHA512: 569816ca62319650d803b2dd4bc3a8791aaea1f573cd52a9e2cf220dc1ec08180a66fbb0ac44441f6b9f48cb9041ce08f56ff2e864b58510308b9a4b6898f8e8\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce9e586d5b11e1f61af4db27b7326687d5e5124",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ce9e586d5b11e1f61af4db27b7326687d5e5124",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce9e586d5b11e1f61af4db27b7326687d5e5124/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f518d9ae6aa525c4cd360a16f07a9272cbef558d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f518d9ae6aa525c4cd360a16f07a9272cbef558d"
      }
    ],
    "stats": {
      "total": 150,
      "additions": 134,
      "deletions": 16
    },
    "files": [
      {
        "sha": "edac364d8511ff248e44b24bdcc5f506373d60f0",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 134,
        "deletions": 16,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ce9e586d5b11e1f61af4db27b7326687d5e5124/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ce9e586d5b11e1f61af4db27b7326687d5e5124/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=2ce9e586d5b11e1f61af4db27b7326687d5e5124",
        "patch": "@@ -1,8 +1,9 @@\n-(note: this is a temporary file, to be added-to by anybody, and moved to\n-release-notes at release time)\n-\n Bitcoin Core version *0.15.1* is now available from:\n \n+  <https://bitcoincore.org/bin/bitcoin-core-0.15.1/>\n+\n+or\n+\n   <https://bitcoin.org/bin/bitcoin-core-0.15.1/>\n \n This is a new minor version release, including various bugfixes and\n@@ -60,18 +61,6 @@ frequently tested on them.\n Notable changes\n ===============\n \n-\n-\n-0.15.1 Change log\n-=================\n-\n-- `dumpwallet` no longer allows overwriting files. This is a security measure\n-  as well as prevents dangerous user mistakes.\n-\n-- `listsinceblock` will now throw an error if an unknown `blockhash` argument\n-  value is passed, instead of returning a list of all wallet transactions since\n-  the genesis block.\n-\n Miner block size limiting deprecated\n ------------------------------------\n \n@@ -88,11 +77,140 @@ Low-level RPC changes\n ----------------------\n - The \"currentblocksize\" value in getmininginfo has been removed.\n \n+- `dumpwallet` no longer allows overwriting files. This is a security measure\n+  as well as prevents dangerous user mistakes.\n+\n+- `listsinceblock` will now throw an error if an unknown `blockhash` argument\n+  value is passed, instead of returning a list of all wallet transactions since\n+  the genesis block.\n+\n+0.15.1 Change log\n+=================\n+\n+### Mining\n+- #11100 `7871a7d` Fix confusing blockmax{size,weight} options, dont default to throwing away money (TheBlueMatt)\n+\n+### RPC and other APIs\n+- #10859 `2a5d099` gettxout: Slightly improve doc and tests (jtimon)\n+- #11267 `b1a6c94` update cli for estimate\\*fee argument rename (laanwj)\n+- #11483 `20cdc2b` Fix importmulti bug when importing an already imported key (pedrobranco)\n+- #9937 `a43be5b` Prevent `dumpwallet` from overwriting files (laanwj)\n+- #11465 `405e069` Update named args documentation for importprivkey (dusty-wil)\n+- #11131 `b278a43` Write authcookie atomically (laanwj)\n+- #11565 `7d4546f` Make listsinceblock refuse unknown block hash (ryanofsky)\n+- #11593 `8195cb0` Work-around an upstream libevent bug (theuni)\n+\n+### P2P protocol and network code\n+- #11397 `27e861a` Improve and document SOCKS code (laanwj)\n+- #11252 `0fe2a9a` When clearing addrman clear mapInfo and mapAddr (instagibbs)\n+- #11527 `a2bd86a` Remove my testnet DNS seed (schildbach)\n+- #10756 `0a5477c` net processing: swap out signals for an interface class (theuni)\n+- #11531 `55b7abf` Check that new headers are not a descendant of an invalid block (more effeciently) (TheBlueMatt)\n+- #11560 `49bf090` Connect to a new outbound peer if our tip is stale (sdaftuar)\n+- #11568 `fc966bb` Disconnect outbound peers on invalid chains (sdaftuar)\n+- #11578 `ec8dedf` Add missing lock in ProcessHeadersMessage(...) (practicalswift)\n+- #11456 `6f27965` Replace relevant services logic with a function suite (TheBlueMatt)\n+- #11490 `bf191a7` Disconnect from outbound peers with bad headers chains (sdaftuar)\n+\n+### Validation\n+- #10357 `da4908c` Allow setting nMinimumChainWork on command line (sdaftuar)\n+- #11458 `2df65ee` Don't process unrequested, low-work blocks (sdaftuar)\n+\n+### Build system\n+- #11440 `b6c0209` Fix validationinterface build on super old boost/clang (TheBlueMatt)\n+- #11530 `265bb21` Add share/rpcuser to dist. source code archive (MarcoFalke)\n+\n+### GUI\n+- #11334 `19d63e8` Remove custom fee radio group and remove nCustomFeeRadio setting (achow101)\n+- #11198 `7310f1f` Fix display of package name on 'open config file' tooltip (esotericnonsense)\n+- #11015 `6642558` Add delay before filtering transactions (lclc)\n+- #11338 `6a62c74` Backup former GUI settings on `-resetguisettings` (laanwj)\n+- #11335 `8d13b42` Replace save|restoreWindowGeometry with Qt functions (MeshCollider)\n+- #11237 `2e31b1d` Fixing division by zero in time remaining (MeshCollider)\n+- #11247 `47c02a8` Use IsMine to validate custom change address (MarcoFalke)\n+\n+### Wallet\n+- #11017 `9e8aae3` Close DB on error (kallewoof)\n+- #11225 `6b4d9f2` Update stored witness in AddToWallet (sdaftuar)\n+- #11126 `2cb720a` Acquire cs_main lock before cs_wallet during wallet initialization (ryanofsky)\n+- #11476 `9c8006d` Avoid opening copied wallet databases simultaneously (ryanofsky)\n+- #11492 `de7053f` Fix leak in CDB constructor (promag)\n+- #11376 `fd79ed6` Ensure backupwallet fails when attempting to backup to source file (tomasvdw)\n+- #11326 `d570aa4` Fix crash on shutdown with invalid wallet (MeshCollider)\n+\n+### Tests and QA\n+- #11399 `a825d4a` Fix bip68-sequence rpc test (jl2012)\n+- #11150 `847c75e` Add getmininginfo test (mess110)\n+- #11407 `806c78f` add functional test for mempoolreplacement command line arg (instagibbs)\n+- #11433 `e169349` Restore bitcoin-util-test py2 compatibility (MarcoFalke)\n+- #11308 `2e1ac70` zapwallettxes: Wait up to 3s for mempool reload (MarcoFalke)\n+- #10798 `716066d` test bitcoin-cli (jnewbery)\n+- #11443 `019c492` Allow \"make cov\" out-of-tree; Fix rpc mapping check (MarcoFalke)\n+- #11445 `51bad91` 0.15.1 Backports (MarcoFalke)\n+- #11319 `2f0b30a` Fix error introduced into p2p-segwit.py, and prevent future similar errors (sdaftuar)\n+- #10552 `e4605d9` Tests for zmqpubrawtx and zmqpubrawblock (achow101)\n+- #11067 `eeb24a3` TestNode: Add wait_until_stopped helper method (MarcoFalke)\n+- #11068 `5398f20` Move wait_until to util (MarcoFalke)\n+- #11125 `812c870` Add bitcoin-cli -stdin and -stdinrpcpass functional tests (promag)\n+- #11077 `1d80d1e` fix timeout issues from TestNode (jnewbery)\n+- #11078 `f1ced0d` Make p2p-leaktests.py more robust (jnewbery)\n+- #11210 `f3f7891` Stop test_bitcoin-qt touching ~/.bitcoin (MeshCollider)\n+- #11234 `f0b6795` Remove redundant testutil.cpp|h files (MeshCollider)\n+- #11215 `cef0319` fixups from set_test_params() (jnewbery)\n+- #11345 `f9cf7b5` Check connectivity before sending in assumevalid.py (jnewbery)\n+- #11091 `c276c1e` Increase initial RPC timeout to 60 seconds (laanwj)\n+- #10711 `fc2aa09` Introduce TestNode (jnewbery)\n+- #11230 `d8dd8e7` Fixup dbcrash interaction with add_nodes() (jnewbery)\n+- #11241 `4424176` Improve signmessages functional test (mess110)\n+- #11116 `2c4ff35` Unit tests for script/standard and IsMine functions (jimpo)\n+- #11422 `a36f332` Verify DBWrapper iterators are taking snapshots (TheBlueMatt)\n+- #11121 `bb5e7cb` TestNode tidyups (jnewbery)\n+- #11521 `ca0f3f7` travis: move back to the minimal image (theuni)\n+- #11538 `adbc9d1` Fix race condition failures in replace-by-fee.py, sendheaders.py (sdaftuar)\n+- #11472 `4108879` Make tmpdir option an absolute path, misc cleanup (MarcoFalke)\n+- #10853 `5b728c8` Fix RPC failure testing (again) (jnewbery)\n+- #11310 `b6468d3` Test listwallets RPC (mess110)\n+\n+### Miscellaneous\n+- #11377 `75997c3` Disallow uncompressed pubkeys in bitcoin-tx [multisig] output adds (TheBlueMatt)\n+- #11437 `dea3b87` [Docs] Update Windows build instructions for using WSL and Ubuntu 17.04 (fanquake)\n+- #11318 `8b61aee` Put back inadvertently removed copyright notices (gmaxwell)\n+- #11442 `cf18f42` [Docs] Update OpenBSD Build Instructions for OpenBSD 6.2 (fanquake)\n+- #10957 `50bd3f6` Avoid returning a BIP9Stats object with uninitialized values (practicalswift)\n+- #11539 `01223a0` [verify-commits] Allow revoked keys to expire (TheBlueMatt)\n+\n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-(fill this in)\n+- Andreas Schildbach\n+- Andrew Chow\n+- Chris Moore\n+- Cory Fields\n+- Cristian Mircea Messel\n+- Daniel Edgecumbe\n+- Donal OConnor\n+- Dusty Williams\n+- fanquake\n+- Gregory Sanders\n+- Jim Posen\n+- John Newbery\n+- Johnson Lau\n+- Jo\u00e3o Barbosa\n+- Jorge Tim\u00f3n\n+- Karl-Johan Alm\n+- Lucas Betschart\n+- MarcoFalke\n+- Matt Corallo\n+- MeshCollider\n+- Paul Berg\n+- Pedro Branco\n+- Pieter Wuille\n+- practicalswift\n+- Russell Yanofsky\n+- Suhas Daftuar\n+- Tomas van der Wansem\n+- Wladimir J. van der Laan\n \n As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "4fcb915944b27759dafb188566bfd14dbcd95cff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmNiOTE1OTQ0YjI3NzU5ZGFmYjE4ODU2NmJmZDE0ZGJjZDk1Y2Zm",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-05T04:19:58Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-05T23:13:02Z"
      },
      "message": "Update release notes for 0.15.1",
      "tree": {
        "sha": "d7e71f33b32b8b2cd5f4bdba320d184b36177a61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7e71f33b32b8b2cd5f4bdba320d184b36177a61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fcb915944b27759dafb188566bfd14dbcd95cff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fcb915944b27759dafb188566bfd14dbcd95cff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fcb915944b27759dafb188566bfd14dbcd95cff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fcb915944b27759dafb188566bfd14dbcd95cff/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ce9e586d5b11e1f61af4db27b7326687d5e5124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce9e586d5b11e1f61af4db27b7326687d5e5124",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ce9e586d5b11e1f61af4db27b7326687d5e5124"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 64,
      "deletions": 3
    },
    "files": [
      {
        "sha": "75d2e097142499137a07a65bd35c2a4b91d9cd33",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 64,
        "deletions": 3,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fcb915944b27759dafb188566bfd14dbcd95cff/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fcb915944b27759dafb188566bfd14dbcd95cff/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=4fcb915944b27759dafb188566bfd14dbcd95cff",
        "patch": "@@ -30,7 +30,7 @@ be converted to a new format, which will take anywhere from a few minutes to\n half an hour, depending on the speed of your machine.\n \n The file format of `fee_estimates.dat` changed in version 0.15.0. Hence, a\n-downgrade from version 0.15.0 or upgrade to version 0.15.0 will cause all fee\n+downgrade from version 0.15 or upgrade to version 0.15 will cause all fee\n estimates to be discarded.\n \n Note that the block database format also changed in version 0.8.0 and there is no\n@@ -58,9 +58,42 @@ the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not su\n Bitcoin Core should also work on most other Unix-like systems but is not\n frequently tested on them.\n \n+\n Notable changes\n ===============\n \n+Network fork safety enhancements\n+--------------------------------\n+\n+A number of changes to the way Bitcoin Core deals with peer connections and invalid blocks\n+have been made, as a safety precaution against blockchain forks and misbehaving peers.\n+\n+- Unrequested blocks with less work than the minimum-chain-work are now no longer processed even\n+if they have more work than the tip (a potential issue during IBD where the tip may have low-work).\n+This prevents peers wasting the resources of a node. \n+\n+- Peers which provide a chain with less work than the minimum-chain-work during IBD will now be disconnected.\n+\n+- For a given outbound peer, we now check whether their best known block has at least as much work as our tip. If it\n+doesn't, and if we still haven't heard about a block with sufficient work after a 20 minute timeout, then we send\n+a single getheaders message, and wait 2 more minutes. If after two minutes their best known block has insufficient\n+work, we disconnect that peer. We protect 4 of our outbound peers from being disconnected by this logic to prevent\n+excessive network topology changes as a result of this algorithm, while still ensuring that we have a reasonable\n+number of nodes not known to be on bogus chains.\n+\n+- Outbound (non-manual) peers that serve us block headers that are already known to be invalid (other than compact\n+block announcements, because BIP 152 explicitly permits nodes to relay compact blocks before fully validating them)\n+will now be disconnected.\n+\n+- If the chain tip has not been advanced for over 30 minutes, we now assume the tip may be stale and will try to connect\n+to an additional outbound peer. A periodic check ensures that if this extra peer connection is in use, we will disconnect\n+the peer that least recently announced a new block.\n+\n+- The set of all known invalid-themselves blocks (i.e. blocks which we attempted to connect but which were found to be\n+invalid) are now tracked and used to check if new headers build on an invalid chain. This ensures that everything that\n+descends from an invalid block is marked as such.\n+\n+\n Miner block size limiting deprecated\n ------------------------------------\n \n@@ -73,16 +106,43 @@ implied blockmaxweight, instead of limiting block size directly. Any miners who\n to limit their blocks by size, instead of by weight, will have to do so manually by\n removing transactions from their block template directly.\n \n+\n+GUI settings backed up on reset\n+-------------------------------\n+\n+The GUI settings will now be written to `guisettings.ini.bak` in the data directory before wiping them when\n+the `-resetguisettings` argument is used. This can be used to retroactively troubleshoot issues due to the\n+GUI settings.\n+\n+\n+Duplicate wallets disallowed\n+----------------------------\n+\n+Previously, it was possible to open the same wallet twice by manually copying the wallet file, causing\n+issues when both were opened simultaneously. It is no longer possible to open copies of the same wallet.\n+\n+\n+Debug `-minimumchainwork` argument added\n+----------------------------------------\n+\n+A hidden debug argument `-minimumchainwork` has been added to allow a custom minimum work value to be used\n+when validating a chain.\n+\n+\n Low-level RPC changes\n ----------------------\n+\n - The \"currentblocksize\" value in getmininginfo has been removed.\n \n - `dumpwallet` no longer allows overwriting files. This is a security measure\n   as well as prevents dangerous user mistakes.\n \n+- `backupwallet` will now fail when attempting to backup to source file, rather than\n+  destroying the wallet.\n+\n - `listsinceblock` will now throw an error if an unknown `blockhash` argument\n   value is passed, instead of returning a list of all wallet transactions since\n-  the genesis block.\n+  the genesis block. The behaviour is unchanged when an empty string is provided.\n \n 0.15.1 Change log\n =================\n@@ -179,6 +239,7 @@ Low-level RPC changes\n - #10957 `50bd3f6` Avoid returning a BIP9Stats object with uninitialized values (practicalswift)\n - #11539 `01223a0` [verify-commits] Allow revoked keys to expire (TheBlueMatt)\n \n+\n Credits\n =======\n \n@@ -203,12 +264,12 @@ Thanks to everyone who directly contributed to this release:\n - Lucas Betschart\n - MarcoFalke\n - Matt Corallo\n-- MeshCollider\n - Paul Berg\n - Pedro Branco\n - Pieter Wuille\n - practicalswift\n - Russell Yanofsky\n+- Samuel Dobson\n - Suhas Daftuar\n - Tomas van der Wansem\n - Wladimir J. van der Laan"
      }
    ]
  },
  {
    "sha": "7b57bc998f334775b50ebc8ca5e78ca728db4c58",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjU3YmM5OThmMzM0Nzc1YjUwZWJjOGNhNWU3OGNhNzI4ZGI0YzU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-06T08:46:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-06T08:46:24Z"
      },
      "message": "Merge #11610: [0.15] Update release notes for 0.15.1\n\n4fcb915 Update release notes for 0.15.1 (MeshCollider)\n\nPull request description:\n\n  Adds info for the more notable changes since 0.15.0.1 to the release notes.\n\n  ~Still needs the list of commits added too.~ (added in https://github.com/bitcoin/bitcoin/commit/2ce9e586d5b11e1f61af4db27b7326687d5e5124)\n\nTree-SHA512: 54d30b1f0105d0d9d86a0dba017471bfa13b6bdd39fc4ee785cb515958c0f72874fb2d1e967076ac61762a16ff7b23b0eebc016f2ab0fb0aa9d6941fd6662042",
      "tree": {
        "sha": "d7e71f33b32b8b2cd5f4bdba320d184b36177a61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7e71f33b32b8b2cd5f4bdba320d184b36177a61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b57bc998f334775b50ebc8ca5e78ca728db4c58",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaACFgAAoJEB5K7WKYbNJdDFoIAI9+OF8r/RerrcdmPilA1HeK\nehXUMXJ87K03ApyHbnkQ+qN+Aer0eCNbGEIwC1S/AsemTH2/uGWiFOLQjHb57w6u\nPBWFEObXMMOxrOB2xoGq1jzloz3xBvjOkelTX8Mos+8z8wMJUtFz0Jgcrogz0n9C\nBWowjDIsTBaYAzOpjQEzDJhGqcWZLPPhQGmaUHPuxMo7zheNPt44jYso4lX7aB/g\nAIiE1H6ax4se1sVmtuZEXz0YKC+VOcWfcU2CrcGlZIzacwiCl0ww+k8B5kQ7P8hO\nO7aHO4yOCsz39L8pj4czFOxctE27N81BbSoIBu8lZodux0KPxFP6g//kZm0+R4A=\n=MIG1\n-----END PGP SIGNATURE-----",
        "payload": "tree d7e71f33b32b8b2cd5f4bdba320d184b36177a61\nparent 2ce9e586d5b11e1f61af4db27b7326687d5e5124\nparent 4fcb915944b27759dafb188566bfd14dbcd95cff\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1509957971 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1509957984 +0100\n\nMerge #11610: [0.15] Update release notes for 0.15.1\n\n4fcb915 Update release notes for 0.15.1 (MeshCollider)\n\nPull request description:\n\n  Adds info for the more notable changes since 0.15.0.1 to the release notes.\n\n  ~Still needs the list of commits added too.~ (added in https://github.com/bitcoin/bitcoin/commit/2ce9e586d5b11e1f61af4db27b7326687d5e5124)\n\nTree-SHA512: 54d30b1f0105d0d9d86a0dba017471bfa13b6bdd39fc4ee785cb515958c0f72874fb2d1e967076ac61762a16ff7b23b0eebc016f2ab0fb0aa9d6941fd6662042\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b57bc998f334775b50ebc8ca5e78ca728db4c58",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b57bc998f334775b50ebc8ca5e78ca728db4c58",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b57bc998f334775b50ebc8ca5e78ca728db4c58/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ce9e586d5b11e1f61af4db27b7326687d5e5124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ce9e586d5b11e1f61af4db27b7326687d5e5124",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ce9e586d5b11e1f61af4db27b7326687d5e5124"
      },
      {
        "sha": "4fcb915944b27759dafb188566bfd14dbcd95cff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fcb915944b27759dafb188566bfd14dbcd95cff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fcb915944b27759dafb188566bfd14dbcd95cff"
      }
    ],
    "stats": {
      "total": 67,
      "additions": 64,
      "deletions": 3
    },
    "files": [
      {
        "sha": "75d2e097142499137a07a65bd35c2a4b91d9cd33",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 64,
        "deletions": 3,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b57bc998f334775b50ebc8ca5e78ca728db4c58/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b57bc998f334775b50ebc8ca5e78ca728db4c58/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=7b57bc998f334775b50ebc8ca5e78ca728db4c58",
        "patch": "@@ -30,7 +30,7 @@ be converted to a new format, which will take anywhere from a few minutes to\n half an hour, depending on the speed of your machine.\n \n The file format of `fee_estimates.dat` changed in version 0.15.0. Hence, a\n-downgrade from version 0.15.0 or upgrade to version 0.15.0 will cause all fee\n+downgrade from version 0.15 or upgrade to version 0.15 will cause all fee\n estimates to be discarded.\n \n Note that the block database format also changed in version 0.8.0 and there is no\n@@ -58,9 +58,42 @@ the Linux kernel, macOS 10.8+, and Windows Vista and later. Windows XP is not su\n Bitcoin Core should also work on most other Unix-like systems but is not\n frequently tested on them.\n \n+\n Notable changes\n ===============\n \n+Network fork safety enhancements\n+--------------------------------\n+\n+A number of changes to the way Bitcoin Core deals with peer connections and invalid blocks\n+have been made, as a safety precaution against blockchain forks and misbehaving peers.\n+\n+- Unrequested blocks with less work than the minimum-chain-work are now no longer processed even\n+if they have more work than the tip (a potential issue during IBD where the tip may have low-work).\n+This prevents peers wasting the resources of a node. \n+\n+- Peers which provide a chain with less work than the minimum-chain-work during IBD will now be disconnected.\n+\n+- For a given outbound peer, we now check whether their best known block has at least as much work as our tip. If it\n+doesn't, and if we still haven't heard about a block with sufficient work after a 20 minute timeout, then we send\n+a single getheaders message, and wait 2 more minutes. If after two minutes their best known block has insufficient\n+work, we disconnect that peer. We protect 4 of our outbound peers from being disconnected by this logic to prevent\n+excessive network topology changes as a result of this algorithm, while still ensuring that we have a reasonable\n+number of nodes not known to be on bogus chains.\n+\n+- Outbound (non-manual) peers that serve us block headers that are already known to be invalid (other than compact\n+block announcements, because BIP 152 explicitly permits nodes to relay compact blocks before fully validating them)\n+will now be disconnected.\n+\n+- If the chain tip has not been advanced for over 30 minutes, we now assume the tip may be stale and will try to connect\n+to an additional outbound peer. A periodic check ensures that if this extra peer connection is in use, we will disconnect\n+the peer that least recently announced a new block.\n+\n+- The set of all known invalid-themselves blocks (i.e. blocks which we attempted to connect but which were found to be\n+invalid) are now tracked and used to check if new headers build on an invalid chain. This ensures that everything that\n+descends from an invalid block is marked as such.\n+\n+\n Miner block size limiting deprecated\n ------------------------------------\n \n@@ -73,16 +106,43 @@ implied blockmaxweight, instead of limiting block size directly. Any miners who\n to limit their blocks by size, instead of by weight, will have to do so manually by\n removing transactions from their block template directly.\n \n+\n+GUI settings backed up on reset\n+-------------------------------\n+\n+The GUI settings will now be written to `guisettings.ini.bak` in the data directory before wiping them when\n+the `-resetguisettings` argument is used. This can be used to retroactively troubleshoot issues due to the\n+GUI settings.\n+\n+\n+Duplicate wallets disallowed\n+----------------------------\n+\n+Previously, it was possible to open the same wallet twice by manually copying the wallet file, causing\n+issues when both were opened simultaneously. It is no longer possible to open copies of the same wallet.\n+\n+\n+Debug `-minimumchainwork` argument added\n+----------------------------------------\n+\n+A hidden debug argument `-minimumchainwork` has been added to allow a custom minimum work value to be used\n+when validating a chain.\n+\n+\n Low-level RPC changes\n ----------------------\n+\n - The \"currentblocksize\" value in getmininginfo has been removed.\n \n - `dumpwallet` no longer allows overwriting files. This is a security measure\n   as well as prevents dangerous user mistakes.\n \n+- `backupwallet` will now fail when attempting to backup to source file, rather than\n+  destroying the wallet.\n+\n - `listsinceblock` will now throw an error if an unknown `blockhash` argument\n   value is passed, instead of returning a list of all wallet transactions since\n-  the genesis block.\n+  the genesis block. The behaviour is unchanged when an empty string is provided.\n \n 0.15.1 Change log\n =================\n@@ -179,6 +239,7 @@ Low-level RPC changes\n - #10957 `50bd3f6` Avoid returning a BIP9Stats object with uninitialized values (practicalswift)\n - #11539 `01223a0` [verify-commits] Allow revoked keys to expire (TheBlueMatt)\n \n+\n Credits\n =======\n \n@@ -203,12 +264,12 @@ Thanks to everyone who directly contributed to this release:\n - Lucas Betschart\n - MarcoFalke\n - Matt Corallo\n-- MeshCollider\n - Paul Berg\n - Pedro Branco\n - Pieter Wuille\n - practicalswift\n - Russell Yanofsky\n+- Samuel Dobson\n - Suhas Daftuar\n - Tomas van der Wansem\n - Wladimir J. van der Laan"
      }
    ]
  },
  {
    "sha": "a81642c650cf6aa5b00fc9ef7d35941da5b32aa4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODE2NDJjNjUwY2Y2YWE1YjAwZmM5ZWY3ZDM1OTQxZGE1YjMyYWE0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-11T14:47:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-11-11T14:48:06Z"
      },
      "message": "Doc: Clean out release notes after 0.15.1\n\nTree-SHA512: 9478e6b5be237961f74e46640bf3a0f91e7a1fc82215572b17aeb1f00b8dc3244358ee15eae5d8dec2ec4cebe37de7e70db8fe95be81ceb8f2a6abb6ddb35856",
      "tree": {
        "sha": "5c1f9a7c97a8bc89867e26987f6914d37477d24b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c1f9a7c97a8bc89867e26987f6914d37477d24b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a81642c650cf6aa5b00fc9ef7d35941da5b32aa4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQEcBAABCgAGBQJaBw2mAAoJEB5K7WKYbNJdzj0IAJBmt35Xm3Z6Fclm77c06Ql2\ndGZVD+Y+OekdLQnkjBKEoVM0cqAQe+GMtwIOYPvPccB90VvpQoIUG0uaOJ1sAosx\nDBBc0pbLw+muhI7+FBVj62rX7O1Q928xjLqnBDNBHdZdwdI+ZpSGT3nfa7FdpKsm\nJZfejvEoUysQFocjD/ERYTww0MjJHB+Qv4UjqueNBVqF02sfJqDNwMUBUXBtno0i\nbJN+lh2NAd/BHkoeUjDApMjp73Hr8x/YHxCqglB8lqIIeYmQzqEXE8ZihYj9IJOr\nOZhNbIq0zWZc1fMHk+NlsV5xLzfdWpkUL9VlDoXz9RwcApKYP5OBomI3+h3RSuY=\n=KIYk\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c1f9a7c97a8bc89867e26987f6914d37477d24b\nparent 7b57bc998f334775b50ebc8ca5e78ca728db4c58\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1510411653 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1510411686 +0100\n\nDoc: Clean out release notes after 0.15.1\n\nTree-SHA512: 9478e6b5be237961f74e46640bf3a0f91e7a1fc82215572b17aeb1f00b8dc3244358ee15eae5d8dec2ec4cebe37de7e70db8fe95be81ceb8f2a6abb6ddb35856\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a81642c650cf6aa5b00fc9ef7d35941da5b32aa4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a81642c650cf6aa5b00fc9ef7d35941da5b32aa4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a81642c650cf6aa5b00fc9ef7d35941da5b32aa4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b57bc998f334775b50ebc8ca5e78ca728db4c58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b57bc998f334775b50ebc8ca5e78ca728db4c58",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b57bc998f334775b50ebc8ca5e78ca728db4c58"
      }
    ],
    "stats": {
      "total": 209,
      "additions": 4,
      "deletions": 205
    },
    "files": [
      {
        "sha": "e9da25732c407eb1793c82d5078d64da84bdf315",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 4,
        "deletions": 205,
        "changes": 209,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a81642c650cf6aa5b00fc9ef7d35941da5b32aa4/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a81642c650cf6aa5b00fc9ef7d35941da5b32aa4/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=a81642c650cf6aa5b00fc9ef7d35941da5b32aa4",
        "patch": "@@ -1,10 +1,10 @@\n Bitcoin Core version *0.15.1* is now available from:\n \n-  <https://bitcoincore.org/bin/bitcoin-core-0.15.1/>\n+  <https://bitcoincore.org/bin/bitcoin-core-0.15.x/>\n \n or\n \n-  <https://bitcoin.org/bin/bitcoin-core-0.15.1/>\n+  <https://bitcoin.org/bin/bitcoin-core-0.15.x/>\n \n This is a new minor version release, including various bugfixes and\n performance improvements, as well as updated translations.\n@@ -62,216 +62,15 @@ frequently tested on them.\n Notable changes\n ===============\n \n-Network fork safety enhancements\n---------------------------------\n-\n-A number of changes to the way Bitcoin Core deals with peer connections and invalid blocks\n-have been made, as a safety precaution against blockchain forks and misbehaving peers.\n-\n-- Unrequested blocks with less work than the minimum-chain-work are now no longer processed even\n-if they have more work than the tip (a potential issue during IBD where the tip may have low-work).\n-This prevents peers wasting the resources of a node. \n-\n-- Peers which provide a chain with less work than the minimum-chain-work during IBD will now be disconnected.\n-\n-- For a given outbound peer, we now check whether their best known block has at least as much work as our tip. If it\n-doesn't, and if we still haven't heard about a block with sufficient work after a 20 minute timeout, then we send\n-a single getheaders message, and wait 2 more minutes. If after two minutes their best known block has insufficient\n-work, we disconnect that peer. We protect 4 of our outbound peers from being disconnected by this logic to prevent\n-excessive network topology changes as a result of this algorithm, while still ensuring that we have a reasonable\n-number of nodes not known to be on bogus chains.\n-\n-- Outbound (non-manual) peers that serve us block headers that are already known to be invalid (other than compact\n-block announcements, because BIP 152 explicitly permits nodes to relay compact blocks before fully validating them)\n-will now be disconnected.\n-\n-- If the chain tip has not been advanced for over 30 minutes, we now assume the tip may be stale and will try to connect\n-to an additional outbound peer. A periodic check ensures that if this extra peer connection is in use, we will disconnect\n-the peer that least recently announced a new block.\n-\n-- The set of all known invalid-themselves blocks (i.e. blocks which we attempted to connect but which were found to be\n-invalid) are now tracked and used to check if new headers build on an invalid chain. This ensures that everything that\n-descends from an invalid block is marked as such.\n-\n-\n-Miner block size limiting deprecated\n-------------------------------------\n-\n-Though blockmaxweight has been preferred for limiting the size of blocks returned by\n-getblocktemplate since 0.13.0, blockmaxsize remained as an option for those who wished\n-to limit their block size directly. Using this option resulted in a few UI issues as\n-well as non-optimal fee selection and ever-so-slightly worse performance, and has thus\n-now been deprecated. Further, the blockmaxsize option is now used only to calculate an\n-implied blockmaxweight, instead of limiting block size directly. Any miners who wish\n-to limit their blocks by size, instead of by weight, will have to do so manually by\n-removing transactions from their block template directly.\n-\n-\n-GUI settings backed up on reset\n--------------------------------\n-\n-The GUI settings will now be written to `guisettings.ini.bak` in the data directory before wiping them when\n-the `-resetguisettings` argument is used. This can be used to retroactively troubleshoot issues due to the\n-GUI settings.\n-\n-\n-Duplicate wallets disallowed\n-----------------------------\n-\n-Previously, it was possible to open the same wallet twice by manually copying the wallet file, causing\n-issues when both were opened simultaneously. It is no longer possible to open copies of the same wallet.\n-\n-\n-Debug `-minimumchainwork` argument added\n-----------------------------------------\n-\n-A hidden debug argument `-minimumchainwork` has been added to allow a custom minimum work value to be used\n-when validating a chain.\n-\n-\n-Low-level RPC changes\n-----------------------\n-\n-- The \"currentblocksize\" value in getmininginfo has been removed.\n-\n-- `dumpwallet` no longer allows overwriting files. This is a security measure\n-  as well as prevents dangerous user mistakes.\n-\n-- `backupwallet` will now fail when attempting to backup to source file, rather than\n-  destroying the wallet.\n-\n-- `listsinceblock` will now throw an error if an unknown `blockhash` argument\n-  value is passed, instead of returning a list of all wallet transactions since\n-  the genesis block. The behaviour is unchanged when an empty string is provided.\n-\n-0.15.1 Change log\n+0.15.x Change log\n =================\n \n-### Mining\n-- #11100 `7871a7d` Fix confusing blockmax{size,weight} options, dont default to throwing away money (TheBlueMatt)\n-\n-### RPC and other APIs\n-- #10859 `2a5d099` gettxout: Slightly improve doc and tests (jtimon)\n-- #11267 `b1a6c94` update cli for estimate\\*fee argument rename (laanwj)\n-- #11483 `20cdc2b` Fix importmulti bug when importing an already imported key (pedrobranco)\n-- #9937 `a43be5b` Prevent `dumpwallet` from overwriting files (laanwj)\n-- #11465 `405e069` Update named args documentation for importprivkey (dusty-wil)\n-- #11131 `b278a43` Write authcookie atomically (laanwj)\n-- #11565 `7d4546f` Make listsinceblock refuse unknown block hash (ryanofsky)\n-- #11593 `8195cb0` Work-around an upstream libevent bug (theuni)\n-\n-### P2P protocol and network code\n-- #11397 `27e861a` Improve and document SOCKS code (laanwj)\n-- #11252 `0fe2a9a` When clearing addrman clear mapInfo and mapAddr (instagibbs)\n-- #11527 `a2bd86a` Remove my testnet DNS seed (schildbach)\n-- #10756 `0a5477c` net processing: swap out signals for an interface class (theuni)\n-- #11531 `55b7abf` Check that new headers are not a descendant of an invalid block (more effeciently) (TheBlueMatt)\n-- #11560 `49bf090` Connect to a new outbound peer if our tip is stale (sdaftuar)\n-- #11568 `fc966bb` Disconnect outbound peers on invalid chains (sdaftuar)\n-- #11578 `ec8dedf` Add missing lock in ProcessHeadersMessage(...) (practicalswift)\n-- #11456 `6f27965` Replace relevant services logic with a function suite (TheBlueMatt)\n-- #11490 `bf191a7` Disconnect from outbound peers with bad headers chains (sdaftuar)\n-\n-### Validation\n-- #10357 `da4908c` Allow setting nMinimumChainWork on command line (sdaftuar)\n-- #11458 `2df65ee` Don't process unrequested, low-work blocks (sdaftuar)\n-\n-### Build system\n-- #11440 `b6c0209` Fix validationinterface build on super old boost/clang (TheBlueMatt)\n-- #11530 `265bb21` Add share/rpcuser to dist. source code archive (MarcoFalke)\n-\n-### GUI\n-- #11334 `19d63e8` Remove custom fee radio group and remove nCustomFeeRadio setting (achow101)\n-- #11198 `7310f1f` Fix display of package name on 'open config file' tooltip (esotericnonsense)\n-- #11015 `6642558` Add delay before filtering transactions (lclc)\n-- #11338 `6a62c74` Backup former GUI settings on `-resetguisettings` (laanwj)\n-- #11335 `8d13b42` Replace save|restoreWindowGeometry with Qt functions (MeshCollider)\n-- #11237 `2e31b1d` Fixing division by zero in time remaining (MeshCollider)\n-- #11247 `47c02a8` Use IsMine to validate custom change address (MarcoFalke)\n-\n-### Wallet\n-- #11017 `9e8aae3` Close DB on error (kallewoof)\n-- #11225 `6b4d9f2` Update stored witness in AddToWallet (sdaftuar)\n-- #11126 `2cb720a` Acquire cs_main lock before cs_wallet during wallet initialization (ryanofsky)\n-- #11476 `9c8006d` Avoid opening copied wallet databases simultaneously (ryanofsky)\n-- #11492 `de7053f` Fix leak in CDB constructor (promag)\n-- #11376 `fd79ed6` Ensure backupwallet fails when attempting to backup to source file (tomasvdw)\n-- #11326 `d570aa4` Fix crash on shutdown with invalid wallet (MeshCollider)\n-\n-### Tests and QA\n-- #11399 `a825d4a` Fix bip68-sequence rpc test (jl2012)\n-- #11150 `847c75e` Add getmininginfo test (mess110)\n-- #11407 `806c78f` add functional test for mempoolreplacement command line arg (instagibbs)\n-- #11433 `e169349` Restore bitcoin-util-test py2 compatibility (MarcoFalke)\n-- #11308 `2e1ac70` zapwallettxes: Wait up to 3s for mempool reload (MarcoFalke)\n-- #10798 `716066d` test bitcoin-cli (jnewbery)\n-- #11443 `019c492` Allow \"make cov\" out-of-tree; Fix rpc mapping check (MarcoFalke)\n-- #11445 `51bad91` 0.15.1 Backports (MarcoFalke)\n-- #11319 `2f0b30a` Fix error introduced into p2p-segwit.py, and prevent future similar errors (sdaftuar)\n-- #10552 `e4605d9` Tests for zmqpubrawtx and zmqpubrawblock (achow101)\n-- #11067 `eeb24a3` TestNode: Add wait_until_stopped helper method (MarcoFalke)\n-- #11068 `5398f20` Move wait_until to util (MarcoFalke)\n-- #11125 `812c870` Add bitcoin-cli -stdin and -stdinrpcpass functional tests (promag)\n-- #11077 `1d80d1e` fix timeout issues from TestNode (jnewbery)\n-- #11078 `f1ced0d` Make p2p-leaktests.py more robust (jnewbery)\n-- #11210 `f3f7891` Stop test_bitcoin-qt touching ~/.bitcoin (MeshCollider)\n-- #11234 `f0b6795` Remove redundant testutil.cpp|h files (MeshCollider)\n-- #11215 `cef0319` fixups from set_test_params() (jnewbery)\n-- #11345 `f9cf7b5` Check connectivity before sending in assumevalid.py (jnewbery)\n-- #11091 `c276c1e` Increase initial RPC timeout to 60 seconds (laanwj)\n-- #10711 `fc2aa09` Introduce TestNode (jnewbery)\n-- #11230 `d8dd8e7` Fixup dbcrash interaction with add_nodes() (jnewbery)\n-- #11241 `4424176` Improve signmessages functional test (mess110)\n-- #11116 `2c4ff35` Unit tests for script/standard and IsMine functions (jimpo)\n-- #11422 `a36f332` Verify DBWrapper iterators are taking snapshots (TheBlueMatt)\n-- #11121 `bb5e7cb` TestNode tidyups (jnewbery)\n-- #11521 `ca0f3f7` travis: move back to the minimal image (theuni)\n-- #11538 `adbc9d1` Fix race condition failures in replace-by-fee.py, sendheaders.py (sdaftuar)\n-- #11472 `4108879` Make tmpdir option an absolute path, misc cleanup (MarcoFalke)\n-- #10853 `5b728c8` Fix RPC failure testing (again) (jnewbery)\n-- #11310 `b6468d3` Test listwallets RPC (mess110)\n-\n-### Miscellaneous\n-- #11377 `75997c3` Disallow uncompressed pubkeys in bitcoin-tx [multisig] output adds (TheBlueMatt)\n-- #11437 `dea3b87` [Docs] Update Windows build instructions for using WSL and Ubuntu 17.04 (fanquake)\n-- #11318 `8b61aee` Put back inadvertently removed copyright notices (gmaxwell)\n-- #11442 `cf18f42` [Docs] Update OpenBSD Build Instructions for OpenBSD 6.2 (fanquake)\n-- #10957 `50bd3f6` Avoid returning a BIP9Stats object with uninitialized values (practicalswift)\n-- #11539 `01223a0` [verify-commits] Allow revoked keys to expire (TheBlueMatt)\n-\n \n Credits\n =======\n \n Thanks to everyone who directly contributed to this release:\n \n-- Andreas Schildbach\n-- Andrew Chow\n-- Chris Moore\n-- Cory Fields\n-- Cristian Mircea Messel\n-- Daniel Edgecumbe\n-- Donal OConnor\n-- Dusty Williams\n-- fanquake\n-- Gregory Sanders\n-- Jim Posen\n-- John Newbery\n-- Johnson Lau\n-- Jo\u00e3o Barbosa\n-- Jorge Tim\u00f3n\n-- Karl-Johan Alm\n-- Lucas Betschart\n-- MarcoFalke\n-- Matt Corallo\n-- Paul Berg\n-- Pedro Branco\n-- Pieter Wuille\n-- practicalswift\n-- Russell Yanofsky\n-- Samuel Dobson\n-- Suhas Daftuar\n-- Tomas van der Wansem\n-- Wladimir J. van der Laan\n+(todo)\n \n As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "12cd096d39f57370db83e0c9ee4724ad7bcdfb30",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmNkMDk2ZDM5ZjU3MzcwZGI4M2UwYzllZTQ3MjRhZDdiY2RmYjMw",
    "commit": {
      "author": {
        "name": "SwaddleDoddle",
        "email": "31337575+SwaddleDoddle@users.noreply.github.com",
        "date": "2017-11-14T08:57:12Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2017-11-14T08:57:12Z"
      },
      "message": "Update README.md",
      "tree": {
        "sha": "ab9d7ed031c6cff7cb4bc0ac598d9c559c11d13a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab9d7ed031c6cff7cb4bc0ac598d9c559c11d13a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12cd096d39f57370db83e0c9ee4724ad7bcdfb30",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaCq/oCRBK7hj4Ov3rIwAAdHIIAKZbv8mD/Nq8QHcHWLR0OFl6\nirXeqHmPQwPyAn4Z5AjaeFqUXTmqlMB0Wg5nRt0+sF624KQl4AMbyDDQruucjWiF\nbBIZUZqMzV1tDs89I/bXYZ+KuO4Vq/3Rk6QFwtQMdv6RjqRhoGFGnUTwDnEGyeMW\nhUzMZb458fYhkxnKPjvc7njrc0HBJyQOcqU7dIYHo6UY9Eo/n/26tIANKoqqwOW3\nVqPoRxXdVRAVjVbh689dEBb7Wm6EgtGmlnxLf9Yl9Vl9PFOLvEZ0bJcTl4D4bTjb\nisWUBCeeL9X/+UOZ9vrIhLxtqfyovVj+rJt6Pp8H3p12koIvATbdPnQOvnzYiH0=\n=E1zP\n-----END PGP SIGNATURE-----\n",
        "payload": "tree ab9d7ed031c6cff7cb4bc0ac598d9c559c11d13a\nparent a81642c650cf6aa5b00fc9ef7d35941da5b32aa4\nauthor SwaddleDoddle <31337575+SwaddleDoddle@users.noreply.github.com> 1510649832 -0600\ncommitter GitHub <noreply@github.com> 1510649832 -0600\n\nUpdate README.md"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12cd096d39f57370db83e0c9ee4724ad7bcdfb30",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12cd096d39f57370db83e0c9ee4724ad7bcdfb30",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12cd096d39f57370db83e0c9ee4724ad7bcdfb30/comments",
    "author": {
      "login": "SwaddleDoddle",
      "id": 31337575,
      "node_id": "MDQ6VXNlcjMxMzM3NTc1",
      "avatar_url": "https://avatars.githubusercontent.com/u/31337575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/SwaddleDoddle",
      "html_url": "https://github.com/SwaddleDoddle",
      "followers_url": "https://api.github.com/users/SwaddleDoddle/followers",
      "following_url": "https://api.github.com/users/SwaddleDoddle/following{/other_user}",
      "gists_url": "https://api.github.com/users/SwaddleDoddle/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/SwaddleDoddle/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/SwaddleDoddle/subscriptions",
      "organizations_url": "https://api.github.com/users/SwaddleDoddle/orgs",
      "repos_url": "https://api.github.com/users/SwaddleDoddle/repos",
      "events_url": "https://api.github.com/users/SwaddleDoddle/events{/privacy}",
      "received_events_url": "https://api.github.com/users/SwaddleDoddle/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a81642c650cf6aa5b00fc9ef7d35941da5b32aa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a81642c650cf6aa5b00fc9ef7d35941da5b32aa4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a81642c650cf6aa5b00fc9ef7d35941da5b32aa4"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 1,
      "deletions": 82
    },
    "files": [
      {
        "sha": "14d42c2977b37a94525178fa37909124d26f8355",
        "filename": "README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 82,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12cd096d39f57370db83e0c9ee4724ad7bcdfb30/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12cd096d39f57370db83e0c9ee4724ad7bcdfb30/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=12cd096d39f57370db83e0c9ee4724ad7bcdfb30",
        "patch": "@@ -1,82 +1 @@\n-Bitcoin Core integration/staging tree\n-=====================================\n-\n-[![Build Status](https://travis-ci.org/bitcoin/bitcoin.svg?branch=master)](https://travis-ci.org/bitcoin/bitcoin)\n-\n-https://bitcoincore.org\n-\n-What is Bitcoin?\n-----------------\n-\n-Bitcoin is an experimental digital currency that enables instant payments to\n-anyone, anywhere in the world. Bitcoin uses peer-to-peer technology to operate\n-with no central authority: managing transactions and issuing money are carried\n-out collectively by the network. Bitcoin Core is the name of open source\n-software which enables the use of this currency.\n-\n-For more information, as well as an immediately useable, binary version of\n-the Bitcoin Core software, see https://bitcoin.org/en/download, or read the\n-[original whitepaper](https://bitcoincore.org/bitcoin.pdf).\n-\n-License\n--------\n-\n-Bitcoin Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\n-information or see https://opensource.org/licenses/MIT.\n-\n-Development Process\n--------------------\n-\n-The `master` branch is regularly built and tested, but is not guaranteed to be\n-completely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\n-regularly to indicate new official, stable release versions of Bitcoin Core.\n-\n-The contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md).\n-\n-The developer [mailing list](https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev)\n-should be used to discuss complicated or controversial changes before working\n-on a patch set.\n-\n-Developer IRC can be found on Freenode at #bitcoin-core-dev.\n-\n-Testing\n--------\n-\n-Testing and code review is the bottleneck for development; we get more pull\n-requests than we can review and test on short notice. Please be patient and help out by testing\n-other people's pull requests, and remember this is a security-critical project where any mistake might cost people\n-lots of money.\n-\n-### Automated Testing\n-\n-Developers are strongly encouraged to write [unit tests](src/test/README.md) for new code, and to\n-submit new unit tests for old code. Unit tests can be compiled and run\n-(assuming they weren't disabled in configure) with: `make check`. Further details on running\n-and extending unit tests can be found in [/src/test/README.md](/src/test/README.md).\n-\n-There are also [regression and integration tests](/test), written\n-in Python, that are run automatically on the build server.\n-These tests can be run (if the [test dependencies](/test) are installed) with: `test/functional/test_runner.py`\n-\n-The Travis CI system makes sure that every pull request is built for Windows, Linux, and OS X, and that unit/sanity tests are run automatically.\n-\n-### Manual Quality Assurance (QA) Testing\n-\n-Changes should be tested by somebody other than the developer who wrote the\n-code. This is especially important for large or high-risk changes. It is useful\n-to add a test plan to the pull request description if testing the changes is\n-not straightforward.\n-\n-Translations\n-------------\n-\n-Changes to translations as well as new translations can be submitted to\n-[Bitcoin Core's Transifex page](https://www.transifex.com/projects/p/bitcoin/).\n-\n-Translations are periodically pulled from Transifex and merged into the git repository. See the\n-[translation process](doc/translation_process.md) for details on how this works.\n-\n-**Important**: We do not accept translation changes as GitHub pull requests because the next\n-pull from Transifex would automatically overwrite them again.\n-\n-Translators should also subscribe to the [mailing list](https://groups.google.com/forum/#!forum/bitcoin-translators).\n+Bigger Bangs"
      }
    ]
  }
]