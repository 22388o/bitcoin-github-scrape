[
  {
    "sha": "d308f943d1b26fe258b639ed82639f146baa6b5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzA4Zjk0M2QxYjI2ZmUyNThiNjM5ZWQ4MjYzOWYxNDZiYWE2YjVk",
    "commit": {
      "author": {
        "name": "ccdle12",
        "email": "chris.coverdale24@gmail.com",
        "date": "2018-05-19T12:52:14Z"
      },
      "committer": {
        "name": "ccdle12",
        "email": "chris.coverdale24@gmail.com",
        "date": "2018-06-11T08:23:56Z"
      },
      "message": "Creating unit test sub-directory folders in temp directory\n\nAdding namespace util_tests and updating dirname using unit_test_directory\n\nAdding header file for util_tests and exposing namespace util_tests\n\nAdding include statement for util_tests.h and changing pathTemp to m_path_temp\n\nImplementing util_tests function to create temp directory 'test_main'\n\nImplementing util_tests function to create temp directory 'dbwrapper_tests'\n\nImplementing util_tests function to create highest level temp dir 'test_bitcoin'\n\nRefactoring pathTemp to m_path_temp",
      "tree": {
        "sha": "58b0deb98ac9c1636303068af426e19d2372c24c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/58b0deb98ac9c1636303068af426e19d2372c24c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d308f943d1b26fe258b639ed82639f146baa6b5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d308f943d1b26fe258b639ed82639f146baa6b5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d308f943d1b26fe258b639ed82639f146baa6b5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d308f943d1b26fe258b639ed82639f146baa6b5d/comments",
    "author": {
      "login": "ccdle12",
      "id": 18324680,
      "node_id": "MDQ6VXNlcjE4MzI0Njgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/18324680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ccdle12",
      "html_url": "https://github.com/ccdle12",
      "followers_url": "https://api.github.com/users/ccdle12/followers",
      "following_url": "https://api.github.com/users/ccdle12/following{/other_user}",
      "gists_url": "https://api.github.com/users/ccdle12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ccdle12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ccdle12/subscriptions",
      "organizations_url": "https://api.github.com/users/ccdle12/orgs",
      "repos_url": "https://api.github.com/users/ccdle12/repos",
      "events_url": "https://api.github.com/users/ccdle12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ccdle12/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ccdle12",
      "id": 18324680,
      "node_id": "MDQ6VXNlcjE4MzI0Njgw",
      "avatar_url": "https://avatars.githubusercontent.com/u/18324680?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ccdle12",
      "html_url": "https://github.com/ccdle12",
      "followers_url": "https://api.github.com/users/ccdle12/followers",
      "following_url": "https://api.github.com/users/ccdle12/following{/other_user}",
      "gists_url": "https://api.github.com/users/ccdle12/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ccdle12/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ccdle12/subscriptions",
      "organizations_url": "https://api.github.com/users/ccdle12/orgs",
      "repos_url": "https://api.github.com/users/ccdle12/repos",
      "events_url": "https://api.github.com/users/ccdle12/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ccdle12/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "56f69360dc98bd68704f19646a84d045788d199e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56f69360dc98bd68704f19646a84d045788d199e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/56f69360dc98bd68704f19646a84d045788d199e"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 52,
      "deletions": 22
    },
    "files": [
      {
        "sha": "54e6ef9690bc3582b6c385dba5999d62858ffa02",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d308f943d1b26fe258b639ed82639f146baa6b5d/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d308f943d1b26fe258b639ed82639f146baa6b5d/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=d308f943d1b26fe258b639ed82639f146baa6b5d",
        "patch": "@@ -6,11 +6,12 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <test/util_tests.h>\n #include <chainparams.h>\n+#include <qt/test/compattests.h>\n #include <qt/test/rpcnestedtests.h>\n-#include <util.h>\n #include <qt/test/uritests.h>\n-#include <qt/test/compattests.h>\n+#include <util.h>\n \n #ifdef ENABLE_WALLET\n #include <qt/test/addressbooktests.h>\n@@ -55,7 +56,7 @@ int main(int argc, char *argv[])\n     SelectParams(CBaseChainParams::MAIN);\n     noui_connect();\n     ClearDatadirCache();\n-    fs::path pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin-qt_%lu_%i\", (unsigned long)GetTime(), (int)GetRand(100000));\n+    fs::path pathTemp = util_tests::unit_test_directory(\"test_main\");\n     fs::create_directories(pathTemp);\n     gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n "
      },
      {
        "sha": "9c2990ed08e5b1a044d8d98cdc9a5f8a76b337a0",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d308f943d1b26fe258b639ed82639f146baa6b5d/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d308f943d1b26fe258b639ed82639f146baa6b5d/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=d308f943d1b26fe258b639ed82639f146baa6b5d",
        "patch": "@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (bool obfuscate : {false, true}) {\n-        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+        fs::path ph = util_tests::unit_test_directory(\"dbwrapper_tests\");\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n         char key = 'k';\n         uint256 in = InsecureRand256();\n@@ -47,7 +47,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_batch)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (bool obfuscate : {false, true}) {\n-        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+        fs::path ph = util_tests::unit_test_directory(\"dbwrapper_tests\");\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         char key = 'i';\n@@ -83,7 +83,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n     for (bool obfuscate : {false, true}) {\n-        fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+        fs::path ph = util_tests::unit_test_directory(\"dbwrapper_tests\");\n         CDBWrapper dbw(ph, (1 << 20), true, false, obfuscate);\n \n         // The two keys are intentionally chosen for ordering\n@@ -123,7 +123,7 @@ BOOST_AUTO_TEST_CASE(dbwrapper_iterator)\n BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n {\n     // We're going to share this fs::path between two wrappers\n-    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+    fs::path ph = util_tests::unit_test_directory(\"dbwrapper_tests\");\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -164,7 +164,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n BOOST_AUTO_TEST_CASE(existing_data_reindex)\n {\n     // We're going to share this fs::path between two wrappers\n-    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+    fs::path ph = util_tests::unit_test_directory(\"dbwrapper_tests\");\n     create_directories(ph);\n \n     // Set up a non-obfuscated wrapper to write some initial data.\n@@ -199,7 +199,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n \n BOOST_AUTO_TEST_CASE(iterator_ordering)\n {\n-    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+    fs::path ph = util_tests::unit_test_directory(\"dbwrapper_tests\");\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<256; ++x) {\n         uint8_t key = x;\n@@ -277,7 +277,7 @@ BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n {\n     char buf[10];\n \n-    fs::path ph = fs::temp_directory_path() / fs::unique_path();\n+    fs::path ph = util_tests::unit_test_directory(\"dbwrapper_tests\");\n     CDBWrapper dbw(ph, (1 << 20), true, false, false);\n     for (int x=0x00; x<10; ++x) {\n         for (int y = 0; y < 10; y++) {"
      },
      {
        "sha": "ddcf2ca16c13883a85908c4eeb3e5c15467aa53c",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d308f943d1b26fe258b639ed82639f146baa6b5d/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d308f943d1b26fe258b639ed82639f146baa6b5d/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=d308f943d1b26fe258b639ed82639f146baa6b5d",
        "patch": "@@ -4,19 +4,20 @@\n \n #include <test/test_bitcoin.h>\n \n+#include <test/util_tests.h>\n #include <chainparams.h>\n #include <consensus/consensus.h>\n #include <consensus/validation.h>\n #include <crypto/sha256.h>\n-#include <validation.h>\n #include <miner.h>\n #include <net_processing.h>\n #include <pow.h>\n-#include <ui_interface.h>\n-#include <streams.h>\n-#include <rpc/server.h>\n #include <rpc/register.h>\n+#include <rpc/server.h>\n #include <script/sigcache.h>\n+#include <streams.h>\n+#include <ui_interface.h>\n+#include <validation.h>\n \n void CConnmanTest::AddNode(CNode& node)\n {\n@@ -72,9 +73,9 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n \n         RegisterAllCoreRPCCommands(tableRPC);\n         ClearDatadirCache();\n-        pathTemp = fs::temp_directory_path() / strprintf(\"test_bitcoin_%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(1 << 30)));\n-        fs::create_directories(pathTemp);\n-        gArgs.ForceSetArg(\"-datadir\", pathTemp.string());\n+        m_path_temp = util_tests::unit_test_directory(\"test_bitcoin\");\n+        fs::create_directories(m_path_temp);\n+        gArgs.ForceSetArg(\"-datadir\", m_path_temp.string());\n \n         // We have to run a scheduler thread to prevent ActivateBestChain\n         // from blocking due to queue overrun.\n@@ -114,7 +115,7 @@ TestingSetup::~TestingSetup()\n         pcoinsTip.reset();\n         pcoinsdbview.reset();\n         pblocktree.reset();\n-        fs::remove_all(pathTemp);\n+        fs::remove_all(m_path_temp);\n }\n \n TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)"
      },
      {
        "sha": "62ba3dd156faec45456b778fccc435ec9a0bc708",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d308f943d1b26fe258b639ed82639f146baa6b5d/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d308f943d1b26fe258b639ed82639f146baa6b5d/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=d308f943d1b26fe258b639ed82639f146baa6b5d",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_TEST_TEST_BITCOIN_H\n #define BITCOIN_TEST_TEST_BITCOIN_H\n \n+#include <test/util_tests.h>\n #include <chainparamsbase.h>\n #include <fs.h>\n #include <key.h>\n@@ -59,7 +60,7 @@ struct CConnmanTest {\n \n class PeerLogicValidation;\n struct TestingSetup: public BasicTestingSetup {\n-    fs::path pathTemp;\n+    fs::path m_path_temp;\n     boost::thread_group threadGroup;\n     CConnman* connman;\n     CScheduler scheduler;"
      },
      {
        "sha": "e5ee6c638faf91645ffa715ec4a7ca1d7764018b",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d308f943d1b26fe258b639ed82639f146baa6b5d/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d308f943d1b26fe258b639ed82639f146baa6b5d/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=d308f943d1b26fe258b639ed82639f146baa6b5d",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <util.h>\n \n+#include <test/util_tests.h>\n #include <clientversion.h>\n #include <primitives/transaction.h>\n #include <sync.h>\n@@ -21,6 +22,18 @@\n \n #include <boost/test/unit_test.hpp>\n \n+namespace util_tests {\n+// Create and return temporary subdirectory for test outputs\n+fs::path unit_test_directory(const std::string& fileName)\n+{\n+    std::string sub_dir = \"bitcoin_unit_tests\";\n+    fs::path dir(fs::temp_directory_path() / sub_dir);\n+    fs::path test_dir(dir / fileName / std::string(boost::unit_test::framework::current_test_case().p_name));\n+\n+    return test_dir;\n+}\n+} // namespace util_tests\n+\n BOOST_FIXTURE_TEST_SUITE(util_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(util_criticalsection)\n@@ -1100,7 +1113,7 @@ static void TestOtherProcess(fs::path dirname, std::string lockname, int fd)\n \n BOOST_AUTO_TEST_CASE(test_LockDirectory)\n {\n-    fs::path dirname = fs::temp_directory_path() / fs::unique_path();\n+    fs::path dirname = unit_test_directory(\"util_tests\");\n     const std::string lockname = \".lock\";\n #ifndef WIN32\n     // Revert SIGCHLD to default, otherwise boost.test will catch and fail on"
      },
      {
        "sha": "fa484a9c6293d6e38f6be4116ed7aa99ba66ac32",
        "filename": "src/test/util_tests.h",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d308f943d1b26fe258b639ed82639f146baa6b5d/src/test/util_tests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d308f943d1b26fe258b639ed82639f146baa6b5d/src/test/util_tests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.h?ref=d308f943d1b26fe258b639ed82639f146baa6b5d",
        "patch": "@@ -0,0 +1,14 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_TESTS_H\n+#define BITCOIN_TEST_UTIL_TESTS_H\n+\n+#include <fs.h>\n+\n+namespace util_tests {\n+    fs::path unit_test_directory(const std::string& fileName);\n+}; //namespace util_tests\n+\n+#endif // BITCOIN_TEST_UTIL_TESTS_H\n\\ No newline at end of file"
      },
      {
        "sha": "cf403743ae6d22e20cf9a82e3c3bf9c6c9d7f369",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d308f943d1b26fe258b639ed82639f146baa6b5d/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d308f943d1b26fe258b639ed82639f146baa6b5d/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=d308f943d1b26fe258b639ed82639f146baa6b5d",
        "patch": "@@ -139,7 +139,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n         JSONRPCRequest request;\n         request.params.setArray();\n-        request.params.push_back((pathTemp / \"wallet.backup\").string());\n+        request.params.push_back((m_path_temp / \"wallet.backup\").string());\n         AddWallet(wallet);\n         ::dumpwallet(request);\n         RemoveWallet(wallet);\n@@ -152,7 +152,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n         JSONRPCRequest request;\n         request.params.setArray();\n-        request.params.push_back((pathTemp / \"wallet.backup\").string());\n+        request.params.push_back((m_path_temp / \"wallet.backup\").string());\n         AddWallet(wallet);\n         ::importwallet(request);\n         RemoveWallet(wallet);"
      }
    ]
  }
]