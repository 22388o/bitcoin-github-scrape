[
  {
    "sha": "c22ce8a7b8954ed443e518e06319b907b6efd7be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjJjZThhN2I4OTU0ZWQ0NDNlNTE4ZTA2MzE5YjkwN2I2ZWZkN2Jl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T14:57:27Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-09T13:56:49Z"
      },
      "message": "[Tests] Write stdout/stderr to datadir instead of temp file.",
      "tree": {
        "sha": "2eb39849a1ffe1a7144983db72a8987dfe619878",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2eb39849a1ffe1a7144983db72a8987dfe619878"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c22ce8a7b8954ed443e518e06319b907b6efd7be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c22ce8a7b8954ed443e518e06319b907b6efd7be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c22ce8a7b8954ed443e518e06319b907b6efd7be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c22ce8a7b8954ed443e518e06319b907b6efd7be/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a50ec0efd06477b4121cd1767a37ccc25632c6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a50ec0efd06477b4121cd1767a37ccc25632c6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a50ec0efd06477b4121cd1767a37ccc25632c6f"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 21,
      "deletions": 9
    },
    "files": [
      {
        "sha": "bb850740ce2b92e7bd7a0b00b1c9c62e6a829f13",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c22ce8a7b8954ed443e518e06319b907b6efd7be/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c22ce8a7b8954ed443e518e06319b907b6efd7be/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=c22ce8a7b8954ed443e518e06319b907b6efd7be",
        "patch": "@@ -256,7 +256,7 @@ def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, bin\n         assert_equal(len(extra_args), num_nodes)\n         assert_equal(len(binary), num_nodes)\n         for i in range(num_nodes):\n-            self.nodes.append(TestNode(i, get_datadir_path(self.options.tmpdir, i), rpchost=rpchost, timewait=timewait, bitcoind=binary[i], bitcoin_cli=self.options.bitcoincli, stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, extra_conf=extra_confs[i], extra_args=extra_args[i], use_cli=self.options.usecli))\n+            self.nodes.append(TestNode(i, get_datadir_path(self.options.tmpdir, i), rpchost=rpchost, timewait=timewait, bitcoind=binary[i], bitcoin_cli=self.options.bitcoincli, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, extra_conf=extra_confs[i], extra_args=extra_args[i], use_cli=self.options.usecli))\n \n     def start_node(self, i, *args, **kwargs):\n         \"\"\"Start a bitcoind\"\"\"\n@@ -407,7 +407,7 @@ def _initialize_chain(self):\n                 args = [self.options.bitcoind, \"-datadir=\" + datadir]\n                 if i > 0:\n                     args.append(\"-connect=127.0.0.1:\" + str(p2p_port(0)))\n-                self.nodes.append(TestNode(i, get_datadir_path(self.options.cachedir, i), extra_conf=[\"bind=127.0.0.1\"], extra_args=[], rpchost=None, timewait=None, bitcoind=self.options.bitcoind, bitcoin_cli=self.options.bitcoincli, stderr=None, mocktime=self.mocktime, coverage_dir=None))\n+                self.nodes.append(TestNode(i, get_datadir_path(self.options.cachedir, i), extra_conf=[\"bind=127.0.0.1\"], extra_args=[], rpchost=None, timewait=None, bitcoind=self.options.bitcoind, bitcoin_cli=self.options.bitcoincli, mocktime=self.mocktime, coverage_dir=None))\n                 self.nodes[i].args = args\n                 self.start_node(i)\n "
      },
      {
        "sha": "bec3841d124431894e813e1cbf1bd2d68b6d14d4",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c22ce8a7b8954ed443e518e06319b907b6efd7be/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c22ce8a7b8954ed443e518e06319b907b6efd7be/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=c22ce8a7b8954ed443e518e06319b907b6efd7be",
        "patch": "@@ -10,6 +10,7 @@\n import http.client\n import json\n import logging\n+import os\n import re\n import subprocess\n import tempfile\n@@ -55,17 +56,18 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, rpchost, timewait, bitcoind, bitcoin_cli, stderr, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False):\n+    def __init__(self, i, datadir, rpchost, timewait, bitcoind, bitcoin_cli, mocktime, coverage_dir, extra_conf=None, extra_args=None, use_cli=False):\n         self.index = i\n         self.datadir = datadir\n+        self.stdout_dir = os.path.join(self.datadir, \"stdout\")\n+        self.stderr_dir = os.path.join(self.datadir, \"stderr\")\n         self.rpchost = rpchost\n         if timewait:\n             self.rpc_timeout = timewait\n         else:\n             # Wait for up to 60 seconds for the RPC server to respond\n             self.rpc_timeout = 60\n         self.binary = bitcoind\n-        self.stderr = stderr\n         self.coverage_dir = coverage_dir\n         if extra_conf != None:\n             append_config(datadir, extra_conf)\n@@ -124,17 +126,24 @@ def __getattr__(self, name):\n             assert self.rpc_connected and self.rpc is not None, self._node_msg(\"Error: no RPC connection\")\n             return getattr(self.rpc, name)\n \n-    def start(self, extra_args=None, stderr=None, *args, **kwargs):\n+    def start(self, extra_args=None, stdout=None, stderr=None, *args, **kwargs):\n         \"\"\"Start the node.\"\"\"\n         if extra_args is None:\n             extra_args = self.extra_args\n+\n+        # Add a new stdout and stderr file each time bitcoind is started\n         if stderr is None:\n-            stderr = self.stderr\n+            stderr = tempfile.NamedTemporaryFile(dir=self.stderr_dir, delete=False)\n+        if stdout is None:\n+            stdout = tempfile.NamedTemporaryFile(dir=self.stdout_dir, delete=False)\n+        self.stderr = stderr\n+        self.stdout = stdout\n+\n         # Delete any existing cookie file -- if such a file exists (eg due to\n         # unclean shutdown), it will get overwritten anyway by bitcoind, and\n         # potentially interfere with our attempt to authenticate\n         delete_cookie_file(self.datadir)\n-        self.process = subprocess.Popen(self.args + extra_args, stderr=stderr, *args, **kwargs)\n+        self.process = subprocess.Popen(self.args + extra_args, stdout=stdout, stderr=stderr, *args, **kwargs)\n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n \n@@ -217,9 +226,10 @@ def assert_start_raises_init_error(self, extra_args=None, expected_msg=None, mat\n \n         Will throw if bitcoind starts without an error.\n         Will throw if an expected_msg is provided and it does not match bitcoind's stdout.\"\"\"\n-        with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n+        with tempfile.NamedTemporaryFile(dir=self.stderr_dir, delete=False) as log_stderr, \\\n+             tempfile.NamedTemporaryFile(dir=self.stdout_dir, delete=False) as log_stdout:\n             try:\n-                self.start(extra_args, stderr=log_stderr, *args, **kwargs)\n+                self.start(extra_args, stdout=log_stdout, stderr=log_stderr, *args, **kwargs)\n                 self.wait_for_rpc_connection()\n                 self.stop_node()\n                 self.wait_until_stopped()"
      },
      {
        "sha": "540727dc85920b94672c83000c97b07bdedc48b7",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c22ce8a7b8954ed443e518e06319b907b6efd7be/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c22ce8a7b8954ed443e518e06319b907b6efd7be/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=c22ce8a7b8954ed443e518e06319b907b6efd7be",
        "patch": "@@ -301,6 +301,8 @@ def initialize_datadir(dirname, n):\n         f.write(\"keypool=1\\n\")\n         f.write(\"discover=0\\n\")\n         f.write(\"listenonion=0\\n\")\n+        os.makedirs(os.path.join(datadir, 'stderr'), exist_ok=True)\n+        os.makedirs(os.path.join(datadir, 'stdout'), exist_ok=True)\n     return datadir\n \n def get_datadir_path(dirname, n):"
      }
    ]
  },
  {
    "sha": "e5036715c8f56170e1674f8aa4eb4b54565bb451",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTAzNjcxNWM4ZjU2MTcwZTE2NzRmOGFhNGViNGI1NDU2NWJiNDUx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T15:00:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-09T13:56:49Z"
      },
      "message": "[Tests] Use LIBC_FATAL_STDERR_=1 in tests\n\nBy default, libc will print fatal errors to /dev/tty instead of stderr.\nAdding the LIBC_FATAL_STDERR_ to the environment variables allows\nus to catch libc errors in stderr and test for them.",
      "tree": {
        "sha": "f7304accfd61d12bfea99c8723ddd1d7675e48e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7304accfd61d12bfea99c8723ddd1d7675e48e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5036715c8f56170e1674f8aa4eb4b54565bb451",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5036715c8f56170e1674f8aa4eb4b54565bb451",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5036715c8f56170e1674f8aa4eb4b54565bb451",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5036715c8f56170e1674f8aa4eb4b54565bb451/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c22ce8a7b8954ed443e518e06319b907b6efd7be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c22ce8a7b8954ed443e518e06319b907b6efd7be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c22ce8a7b8954ed443e518e06319b907b6efd7be"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "440e4586b7645a5cb4bbd9dd3260d6185861e2aa",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5036715c8f56170e1674f8aa4eb4b54565bb451/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5036715c8f56170e1674f8aa4eb4b54565bb451/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=e5036715c8f56170e1674f8aa4eb4b54565bb451",
        "patch": "@@ -143,7 +143,12 @@ def start(self, extra_args=None, stdout=None, stderr=None, *args, **kwargs):\n         # unclean shutdown), it will get overwritten anyway by bitcoind, and\n         # potentially interfere with our attempt to authenticate\n         delete_cookie_file(self.datadir)\n-        self.process = subprocess.Popen(self.args + extra_args, stdout=stdout, stderr=stderr, *args, **kwargs)\n+\n+        # add environment variable LIBC_FATAL_STDERR_=1 so that libc errors are written to stderr and not the terminal\n+        subp_env = dict(os.environ, LIBC_FATAL_STDERR_=\"1\")\n+\n+        self.process = subprocess.Popen(self.args + extra_args, env=subp_env, stdout=stdout, stderr=stderr, *args, **kwargs)\n+\n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n "
      }
    ]
  },
  {
    "sha": "beee49ba1f17937539aa4b543d5b28a9d76c0f4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZWVlNDliYTFmMTc5Mzc1MzlhYTRiNTQzZDViMjhhOWQ3NmMwZjRh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-02-07T15:51:13Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-05-09T14:39:31Z"
      },
      "message": "[tests] Allow stderr to be tested against specified string\n\nAllow bitcoind's stderr to be tested against a specified string on\nshutdown.",
      "tree": {
        "sha": "aa446e7a681dd3d971f1ccc8ccf69899d2f8b86e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa446e7a681dd3d971f1ccc8ccf69899d2f8b86e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/beee49ba1f17937539aa4b543d5b28a9d76c0f4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beee49ba1f17937539aa4b543d5b28a9d76c0f4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/beee49ba1f17937539aa4b543d5b28a9d76c0f4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/beee49ba1f17937539aa4b543d5b28a9d76c0f4a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5036715c8f56170e1674f8aa4eb4b54565bb451",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5036715c8f56170e1674f8aa4eb4b54565bb451",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5036715c8f56170e1674f8aa4eb4b54565bb451"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 17,
      "deletions": 13
    },
    "files": [
      {
        "sha": "1ead2fcb024d6c21da4c5d8e377f0408f5547a24",
        "filename": "test/functional/feature_includeconf.py",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beee49ba1f17937539aa4b543d5b28a9d76c0f4a/test/functional/feature_includeconf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beee49ba1f17937539aa4b543d5b28a9d76c0f4a/test/functional/feature_includeconf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_includeconf.py?ref=beee49ba1f17937539aa4b543d5b28a9d76c0f4a",
        "patch": "@@ -15,9 +15,8 @@\n    file.\n \"\"\"\n import os\n-import tempfile\n \n-from test_framework.test_framework import BitcoinTestFramework, assert_equal\n+from test_framework.test_framework import BitcoinTestFramework\n \n class IncludeConfTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -44,20 +43,18 @@ def run_test(self):\n \n         self.log.info(\"-includeconf cannot be used as command-line arg. subversion should still end with 'main; relative)/'\")\n         self.stop_node(0)\n-        with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n-            self.start_node(0, extra_args=[\"-includeconf=relative2.conf\"], stderr=log_stderr)\n \n-            subversion = self.nodes[0].getnetworkinfo()[\"subversion\"]\n-            assert subversion.endswith(\"main; relative)/\")\n-            log_stderr.seek(0)\n-            stderr = log_stderr.read().decode('utf-8').strip()\n-            assert_equal(stderr, 'warning: -includeconf cannot be used from commandline; ignoring -includeconf=relative2.conf')\n+        self.start_node(0, extra_args=[\"-includeconf=relative2.conf\"])\n+\n+        subversion = self.nodes[0].getnetworkinfo()[\"subversion\"]\n+        assert subversion.endswith(\"main; relative)/\")\n+        self.stop_node(0, expected_stderr=\"warning: -includeconf cannot be used from commandline; ignoring -includeconf=relative2.conf\")\n \n         self.log.info(\"-includeconf cannot be used recursively. subversion should end with 'main; relative)/'\")\n         with open(os.path.join(self.options.tmpdir, \"node0\", \"relative.conf\"), \"a\", encoding=\"utf8\") as f:\n             f.write(\"includeconf=relative2.conf\\n\")\n \n-        self.restart_node(0)\n+        self.start_node(0)\n \n         subversion = self.nodes[0].getnetworkinfo()[\"subversion\"]\n         assert subversion.endswith(\"main; relative)/\")"
      },
      {
        "sha": "b842e6ef4e58d098059a80ed5c23d6bb22913af0",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beee49ba1f17937539aa4b543d5b28a9d76c0f4a/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beee49ba1f17937539aa4b543d5b28a9d76c0f4a/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=beee49ba1f17937539aa4b543d5b28a9d76c0f4a",
        "patch": "@@ -289,9 +289,9 @@ def start_nodes(self, extra_args=None, *args, **kwargs):\n             for node in self.nodes:\n                 coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n \n-    def stop_node(self, i):\n+    def stop_node(self, i, expected_stderr=''):\n         \"\"\"Stop a bitcoind test node\"\"\"\n-        self.nodes[i].stop_node()\n+        self.nodes[i].stop_node(expected_stderr)\n         self.nodes[i].wait_until_stopped()\n \n     def stop_nodes(self):"
      },
      {
        "sha": "eac6057de625d6860ea9eec2cbc8fa896415cee8",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/beee49ba1f17937539aa4b543d5b28a9d76c0f4a/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/beee49ba1f17937539aa4b543d5b28a9d76c0f4a/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=beee49ba1f17937539aa4b543d5b28a9d76c0f4a",
        "patch": "@@ -188,7 +188,7 @@ def get_wallet_rpc(self, wallet_name):\n             wallet_path = \"wallet/%s\" % wallet_name\n             return self.rpc / wallet_path\n \n-    def stop_node(self):\n+    def stop_node(self, expected_stderr=''):\n         \"\"\"Stop the node.\"\"\"\n         if not self.running:\n             return\n@@ -197,6 +197,13 @@ def stop_node(self):\n             self.stop()\n         except http.client.CannotSendRequest:\n             self.log.exception(\"Unable to stop node.\")\n+\n+        # Check that stderr is as expected\n+        self.stderr.seek(0)\n+        stderr = self.stderr.read().decode('utf-8').strip()\n+        if stderr != expected_stderr:\n+            raise AssertionError(\"Unexpected stderr {} != {}\".format(stderr, expected_stderr))\n+\n         del self.p2ps[:]\n \n     def is_node_stopped(self):"
      }
    ]
  }
]