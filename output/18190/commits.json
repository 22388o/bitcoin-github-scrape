[
  {
    "sha": "69749fbe6a95f45eb7a695a5f89be87e55c91fb8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTc0OWZiZTZhOTVmNDVlYjdhNjk1YTVmODliZTg3ZTU1YzkxZmI4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-02-21T15:57:02Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-04-20T14:57:48Z"
      },
      "message": "tests: Add fuzzing harness for Golomb-Rice coding (GolombRiceEncode/GolombRiceDecode)",
      "tree": {
        "sha": "d063fea75993299a426057b007bdd38c73dd969a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d063fea75993299a426057b007bdd38c73dd969a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69749fbe6a95f45eb7a695a5f89be87e55c91fb8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69749fbe6a95f45eb7a695a5f89be87e55c91fb8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69749fbe6a95f45eb7a695a5f89be87e55c91fb8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69749fbe6a95f45eb7a695a5f89be87e55c91fb8/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "299544f9c5375810f3b4f70e68d2340fe689108a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/299544f9c5375810f3b4f70e68d2340fe689108a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/299544f9c5375810f3b4f70e68d2340fe689108a"
      }
    ],
    "stats": {
      "total": 195,
      "additions": 164,
      "deletions": 31
    },
    "files": [
      {
        "sha": "9a4fdfdacfa5e94814317539ab74446d454a3b9f",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69749fbe6a95f45eb7a695a5f89be87e55c91fb8/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69749fbe6a95f45eb7a695a5f89be87e55c91fb8/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=69749fbe6a95f45eb7a695a5f89be87e55c91fb8",
        "patch": "@@ -215,6 +215,7 @@ BITCOIN_CORE_H = \\\n   util/check.h \\\n   util/error.h \\\n   util/fees.h \\\n+  util/golombrice.h \\\n   util/spanparsing.h \\\n   util/system.h \\\n   util/macros.h \\"
      },
      {
        "sha": "4e88f7004b6419568c6cbfde21381e566f82656e",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69749fbe6a95f45eb7a695a5f89be87e55c91fb8/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69749fbe6a95f45eb7a695a5f89be87e55c91fb8/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=69749fbe6a95f45eb7a695a5f89be87e55c91fb8",
        "patch": "@@ -37,6 +37,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/flat_file_pos_deserialize \\\n   test/fuzz/flatfile \\\n   test/fuzz/float \\\n+  test/fuzz/golomb_rice \\\n   test/fuzz/hex \\\n   test/fuzz/integer \\\n   test/fuzz/inv_deserialize \\\n@@ -483,6 +484,12 @@ test_fuzz_float_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_float_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_float_SOURCES = test/fuzz/float.cpp\n \n+test_fuzz_golomb_rice_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_golomb_rice_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_golomb_rice_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_golomb_rice_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_golomb_rice_SOURCES = test/fuzz/golomb_rice.cpp\n+\n test_fuzz_hex_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_hex_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_hex_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "5f5bed5bda0f4be918ac126c8ed5c7c8f032cd39",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 31,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69749fbe6a95f45eb7a695a5f89be87e55c91fb8/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69749fbe6a95f45eb7a695a5f89be87e55c91fb8/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=69749fbe6a95f45eb7a695a5f89be87e55c91fb8",
        "patch": "@@ -12,6 +12,7 @@\n #include <primitives/transaction.h>\n #include <script/script.h>\n #include <streams.h>\n+#include <util/golombrice.h>\n \n /// SerType used to serialize parameters in GCS filter encoding.\n static constexpr int GCS_SER_TYPE = SER_NETWORK;\n@@ -23,37 +24,6 @@ static const std::map<BlockFilterType, std::string> g_filter_types = {\n     {BlockFilterType::BASIC, \"basic\"},\n };\n \n-template <typename OStream>\n-static void GolombRiceEncode(BitStreamWriter<OStream>& bitwriter, uint8_t P, uint64_t x)\n-{\n-    // Write quotient as unary-encoded: q 1's followed by one 0.\n-    uint64_t q = x >> P;\n-    while (q > 0) {\n-        int nbits = q <= 64 ? static_cast<int>(q) : 64;\n-        bitwriter.Write(~0ULL, nbits);\n-        q -= nbits;\n-    }\n-    bitwriter.Write(0, 1);\n-\n-    // Write the remainder in P bits. Since the remainder is just the bottom\n-    // P bits of x, there is no need to mask first.\n-    bitwriter.Write(x, P);\n-}\n-\n-template <typename IStream>\n-static uint64_t GolombRiceDecode(BitStreamReader<IStream>& bitreader, uint8_t P)\n-{\n-    // Read unary-encoded quotient: q 1's followed by one 0.\n-    uint64_t q = 0;\n-    while (bitreader.Read(1) == 1) {\n-        ++q;\n-    }\n-\n-    uint64_t r = bitreader.Read(P);\n-\n-    return (q << P) + r;\n-}\n-\n // Map a value x that is uniformly distributed in the range [0, 2^64) to a\n // value uniformly distributed in [0, n) by returning the upper 64 bits of\n // x * n."
      },
      {
        "sha": "3e20416116921913ed36232867c4764dc48374f4",
        "filename": "src/test/fuzz/golomb_rice.cpp",
        "status": "added",
        "additions": 112,
        "deletions": 0,
        "changes": 112,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69749fbe6a95f45eb7a695a5f89be87e55c91fb8/src/test/fuzz/golomb_rice.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69749fbe6a95f45eb7a695a5f89be87e55c91fb8/src/test/fuzz/golomb_rice.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/golomb_rice.cpp?ref=69749fbe6a95f45eb7a695a5f89be87e55c91fb8",
        "patch": "@@ -0,0 +1,112 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <blockfilter.h>\n+#include <serialize.h>\n+#include <streams.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/util.h>\n+#include <util/bytevectorhash.h>\n+#include <util/golombrice.h>\n+\n+#include <algorithm>\n+#include <cassert>\n+#include <cstdint>\n+#include <iosfwd>\n+#include <unordered_set>\n+#include <vector>\n+\n+namespace {\n+uint64_t MapIntoRange(const uint64_t x, const uint64_t n)\n+{\n+    const uint64_t x_hi = x >> 32;\n+    const uint64_t x_lo = x & 0xFFFFFFFF;\n+    const uint64_t n_hi = n >> 32;\n+    const uint64_t n_lo = n & 0xFFFFFFFF;\n+    const uint64_t ac = x_hi * n_hi;\n+    const uint64_t ad = x_hi * n_lo;\n+    const uint64_t bc = x_lo * n_hi;\n+    const uint64_t bd = x_lo * n_lo;\n+    const uint64_t mid34 = (bd >> 32) + (bc & 0xFFFFFFFF) + (ad & 0xFFFFFFFF);\n+    const uint64_t upper64 = ac + (bc >> 32) + (ad >> 32) + (mid34 >> 32);\n+    return upper64;\n+}\n+\n+uint64_t HashToRange(const std::vector<uint8_t>& element, const uint64_t f)\n+{\n+    const uint64_t hash = CSipHasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL)\n+                              .Write(element.data(), element.size())\n+                              .Finalize();\n+    return MapIntoRange(hash, f);\n+}\n+\n+std::vector<uint64_t> BuildHashedSet(const std::unordered_set<std::vector<uint8_t>, ByteVectorHash>& elements, const uint64_t f)\n+{\n+    std::vector<uint64_t> hashed_elements;\n+    hashed_elements.reserve(elements.size());\n+    for (const std::vector<uint8_t>& element : elements) {\n+        hashed_elements.push_back(HashToRange(element, f));\n+    }\n+    std::sort(hashed_elements.begin(), hashed_elements.end());\n+    return hashed_elements;\n+}\n+} // namespace\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+    std::vector<uint8_t> golomb_rice_data;\n+    std::vector<uint64_t> encoded_deltas;\n+    {\n+        std::unordered_set<std::vector<uint8_t>, ByteVectorHash> elements;\n+        const int n = fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 512);\n+        for (int i = 0; i < n; ++i) {\n+            elements.insert(ConsumeRandomLengthByteVector(fuzzed_data_provider, 16));\n+        }\n+        CVectorWriter stream(SER_NETWORK, 0, golomb_rice_data, 0);\n+        WriteCompactSize(stream, static_cast<uint32_t>(elements.size()));\n+        BitStreamWriter<CVectorWriter> bitwriter(stream);\n+        if (!elements.empty()) {\n+            uint64_t last_value = 0;\n+            for (const uint64_t value : BuildHashedSet(elements, static_cast<uint64_t>(elements.size()) * static_cast<uint64_t>(BASIC_FILTER_M))) {\n+                const uint64_t delta = value - last_value;\n+                encoded_deltas.push_back(delta);\n+                GolombRiceEncode(bitwriter, BASIC_FILTER_P, delta);\n+                last_value = value;\n+            }\n+        }\n+        bitwriter.Flush();\n+    }\n+\n+    std::vector<uint64_t> decoded_deltas;\n+    {\n+        VectorReader stream{SER_NETWORK, 0, golomb_rice_data, 0};\n+        BitStreamReader<VectorReader> bitreader(stream);\n+        const uint32_t n = static_cast<uint32_t>(ReadCompactSize(stream));\n+        for (uint32_t i = 0; i < n; ++i) {\n+            decoded_deltas.push_back(GolombRiceDecode(bitreader, BASIC_FILTER_P));\n+        }\n+    }\n+\n+    assert(encoded_deltas == decoded_deltas);\n+\n+    {\n+        const std::vector<uint8_t> random_bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider, 1024);\n+        VectorReader stream{SER_NETWORK, 0, random_bytes, 0};\n+        uint32_t n;\n+        try {\n+            n = static_cast<uint32_t>(ReadCompactSize(stream));\n+        } catch (const std::ios_base::failure&) {\n+            return;\n+        }\n+        BitStreamReader<VectorReader> bitreader(stream);\n+        for (uint32_t i = 0; i < std::min<uint32_t>(n, 1024); ++i) {\n+            try {\n+                (void)GolombRiceDecode(bitreader, BASIC_FILTER_P);\n+            } catch (const std::ios_base::failure&) {\n+            }\n+        }\n+    }\n+}"
      },
      {
        "sha": "425e7f66812539238cd1aa6f43948f0c729a30fb",
        "filename": "src/util/golombrice.h",
        "status": "added",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69749fbe6a95f45eb7a695a5f89be87e55c91fb8/src/util/golombrice.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69749fbe6a95f45eb7a695a5f89be87e55c91fb8/src/util/golombrice.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/golombrice.h?ref=69749fbe6a95f45eb7a695a5f89be87e55c91fb8",
        "patch": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_GOLOMBRICE_H\n+#define BITCOIN_UTIL_GOLOMBRICE_H\n+\n+#include <streams.h>\n+\n+#include <cstdint>\n+\n+template <typename OStream>\n+void GolombRiceEncode(BitStreamWriter<OStream>& bitwriter, uint8_t P, uint64_t x)\n+{\n+    // Write quotient as unary-encoded: q 1's followed by one 0.\n+    uint64_t q = x >> P;\n+    while (q > 0) {\n+        int nbits = q <= 64 ? static_cast<int>(q) : 64;\n+        bitwriter.Write(~0ULL, nbits);\n+        q -= nbits;\n+    }\n+    bitwriter.Write(0, 1);\n+\n+    // Write the remainder in P bits. Since the remainder is just the bottom\n+    // P bits of x, there is no need to mask first.\n+    bitwriter.Write(x, P);\n+}\n+\n+template <typename IStream>\n+uint64_t GolombRiceDecode(BitStreamReader<IStream>& bitreader, uint8_t P)\n+{\n+    // Read unary-encoded quotient: q 1's followed by one 0.\n+    uint64_t q = 0;\n+    while (bitreader.Read(1) == 1) {\n+        ++q;\n+    }\n+\n+    uint64_t r = bitreader.Read(P);\n+\n+    return (q << P) + r;\n+}\n+\n+#endif // BITCOIN_UTIL_GOLOMBRICE_H"
      }
    ]
  }
]