[
  {
    "sha": "be77b637fcf5983286382a9b9677fb97b026abe2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTc3YjYzN2ZjZjU5ODMyODYzODJhOWI5Njc3ZmI5N2IwMjZhYmUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-05-19T15:36:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2013-06-16T08:21:41Z"
      },
      "message": "qt: allow user to choose data directory\n\nThis adds an introduction screen that is shown when the client is first\nstarted in which the user can choose a data directory.\n\nIt is also possible to force the intro screen to appear using command\nline argument `-choosedatadir`.\n\nThe user is warned that the client will download and store 10Gb of data.\nThe intro screen shows how much space is available on the device that\ncontains the chosen directory and warns if this is less than the 10Gb.\n\nTo make it possible to translate the introduction dialog, the initialization\nsequence is changed so that translations are\nloaded before the data directory. This has the by-effect that it is\nno longer possible to specify a language in bitcoin.conf inside the data\ndirectory.",
      "tree": {
        "sha": "7629a57d8c6372b86319bd54a40217ace9ee6805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7629a57d8c6372b86319bd54a40217ace9ee6805"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be77b637fcf5983286382a9b9677fb97b026abe2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be77b637fcf5983286382a9b9677fb97b026abe2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be77b637fcf5983286382a9b9677fb97b026abe2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be77b637fcf5983286382a9b9677fb97b026abe2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e58154c447670a546936b850f0bba4de087a1583",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e58154c447670a546936b850f0bba4de087a1583",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e58154c447670a546936b850f0bba4de087a1583"
      }
    ],
    "stats": {
      "total": 715,
      "additions": 671,
      "deletions": 44
    },
    "files": [
      {
        "sha": "6be4d3bf8316e48f683b85d52eb2a99cdedcb787",
        "filename": "bitcoin-qt.pro",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be77b637fcf5983286382a9b9677fb97b026abe2/bitcoin-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be77b637fcf5983286382a9b9677fb97b026abe2/bitcoin-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/bitcoin-qt.pro?ref=be77b637fcf5983286382a9b9677fb97b026abe2",
        "patch": "@@ -213,7 +213,8 @@ HEADERS += src/qt/bitcoingui.h \\\n     src/leveldb.h \\\n     src/threadsafety.h \\\n     src/limitedmap.h \\\n-    src/qt/splashscreen.h\n+    src/qt/splashscreen.h \\\n+    src/qt/intro.h\n \n SOURCES += src/qt/bitcoin.cpp \\\n     src/qt/bitcoingui.cpp \\\n@@ -282,7 +283,8 @@ SOURCES += src/qt/bitcoin.cpp \\\n     src/noui.cpp \\\n     src/leveldb.cpp \\\n     src/txdb.cpp \\\n-    src/qt/splashscreen.cpp\n+    src/qt/splashscreen.cpp \\\n+    src/qt/intro.cpp\n \n RESOURCES += src/qt/bitcoin.qrc\n \n@@ -296,7 +298,8 @@ FORMS += src/qt/forms/sendcoinsdialog.ui \\\n     src/qt/forms/sendcoinsentry.ui \\\n     src/qt/forms/askpassphrasedialog.ui \\\n     src/qt/forms/rpcconsole.ui \\\n-    src/qt/forms/optionsdialog.ui\n+    src/qt/forms/optionsdialog.ui \\\n+    src/qt/forms/intro.ui\n \n contains(USE_QRCODE, 1) {\n HEADERS += src/qt/qrcodedialog.h"
      },
      {
        "sha": "b0c45d686373a990e96c1160b5f5cff81f34254b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 40,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be77b637fcf5983286382a9b9677fb97b026abe2/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be77b637fcf5983286382a9b9677fb97b026abe2/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=be77b637fcf5983286382a9b9677fb97b026abe2",
        "patch": "@@ -15,6 +15,7 @@\n #include \"ui_interface.h\"\n #include \"paymentserver.h\"\n #include \"splashscreen.h\"\n+#include \"intro.h\"\n \n #include <QMessageBox>\n #if QT_VERSION < 0x050000\n@@ -24,6 +25,7 @@\n #include <QTimer>\n #include <QTranslator>\n #include <QLibraryInfo>\n+#include <QSettings>\n \n #if defined(BITCOIN_NEED_QT_PLUGINS) && !defined(_BITCOIN_QT_PLUGINS_INCLUDED)\n #define _BITCOIN_QT_PLUGINS_INCLUDED\n@@ -110,6 +112,46 @@ static void handleRunawayException(std::exception *e)\n     exit(1);\n }\n \n+/** Set up translations */\n+static void initTranslations(QTranslator &qtTranslatorBase, QTranslator &qtTranslator, QTranslator &translatorBase, QTranslator &translator)\n+{\n+    QSettings settings;\n+\n+    // Get desired locale (e.g. \"de_DE\")\n+    // 1) System default language\n+    QString lang_territory = QLocale::system().name();\n+    // 2) Language from QSettings\n+    QString lang_territory_qsettings = settings.value(\"language\", \"\").toString();\n+    if(!lang_territory_qsettings.isEmpty())\n+        lang_territory = lang_territory_qsettings;\n+    // 3) -lang command line argument\n+    lang_territory = QString::fromStdString(GetArg(\"-lang\", lang_territory.toStdString()));\n+\n+    // Convert to \"de\" only by truncating \"_DE\"\n+    QString lang = lang_territory;\n+    lang.truncate(lang_territory.lastIndexOf('_'));\n+\n+    // Load language files for configured locale:\n+    // - First load the translator for the base language, without territory\n+    // - Then load the more specific locale translator\n+\n+    // Load e.g. qt_de.qm\n+    if (qtTranslatorBase.load(\"qt_\" + lang, QLibraryInfo::location(QLibraryInfo::TranslationsPath)))\n+        QApplication::installTranslator(&qtTranslatorBase);\n+\n+    // Load e.g. qt_de_DE.qm\n+    if (qtTranslator.load(\"qt_\" + lang_territory, QLibraryInfo::location(QLibraryInfo::TranslationsPath)))\n+        QApplication::installTranslator(&qtTranslator);\n+\n+    // Load e.g. bitcoin_de.qm (shortcut \"de\" needs to be defined in bitcoin.qrc)\n+    if (translatorBase.load(lang, \":/translations/\"))\n+        QApplication::installTranslator(&translatorBase);\n+\n+    // Load e.g. bitcoin_de_DE.qm (shortcut \"de_DE\" needs to be defined in bitcoin.qrc)\n+    if (translator.load(lang_territory, \":/translations/\"))\n+        QApplication::installTranslator(&translator);\n+}\n+\n #ifndef BITCOIN_QT_TEST\n int main(int argc, char *argv[])\n {\n@@ -130,6 +172,22 @@ int main(int argc, char *argv[])\n     // Register meta types used for QMetaObject::invokeMethod\n     qRegisterMetaType< bool* >();\n \n+    // Application identification (must be set before OptionsModel is initialized,\n+    // as it is used to locate QSettings)\n+    QApplication::setOrganizationName(\"Bitcoin\");\n+    QApplication::setOrganizationDomain(\"bitcoin.org\");\n+    if (GetBoolArg(\"-testnet\", false)) // Separate UI settings for testnet\n+        QApplication::setApplicationName(\"Bitcoin-Qt-testnet\");\n+    else\n+        QApplication::setApplicationName(\"Bitcoin-Qt\");\n+\n+    // Now that QSettings are accessible, initialize translations\n+    QTranslator qtTranslatorBase, qtTranslator, translatorBase, translator;\n+    initTranslations(qtTranslatorBase, qtTranslator, translatorBase, translator);\n+\n+    // User language is set up: pick a data directory\n+    Intro::pickDataDirectory();\n+\n     // Do this early as we don't want to bother initializing if we are just calling IPC\n     // ... but do it after creating app, so QCoreApplication::arguments is initialized:\n     if (PaymentServer::ipcSendCommandLine())\n@@ -142,53 +200,15 @@ int main(int argc, char *argv[])\n     // ... then bitcoin.conf:\n     if (!boost::filesystem::is_directory(GetDataDir(false)))\n     {\n-        // This message can not be translated, as translation is not initialized yet\n-        // (which not yet possible because lang=XX can be overridden in bitcoin.conf in the data directory)\n-        QMessageBox::critical(0, \"Bitcoin\",\n-                              QString(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(mapArgs[\"-datadir\"])));\n+        QMessageBox::critical(0, QObject::tr(\"Bitcoin\"),\n+                              QObject::tr(\"Error: Specified data directory \\\"%1\\\" does not exist.\").arg(QString::fromStdString(mapArgs[\"-datadir\"])));\n         return 1;\n     }\n     ReadConfigFile(mapArgs, mapMultiArgs);\n \n-    // Application identification (must be set before OptionsModel is initialized,\n-    // as it is used to locate QSettings)\n-    QApplication::setOrganizationName(\"Bitcoin\");\n-    QApplication::setOrganizationDomain(\"bitcoin.org\");\n-    if (GetBoolArg(\"-testnet\", false)) // Separate UI settings for testnet\n-        QApplication::setApplicationName(\"Bitcoin-Qt-testnet\");\n-    else\n-        QApplication::setApplicationName(\"Bitcoin-Qt\");\n-\n     // ... then GUI settings:\n     OptionsModel optionsModel;\n \n-    // Get desired locale (e.g. \"de_DE\") from command line or use system locale\n-    QString lang_territory = QString::fromStdString(GetArg(\"-lang\", QLocale::system().name().toStdString()));\n-    QString lang = lang_territory;\n-    // Convert to \"de\" only by truncating \"_DE\"\n-    lang.truncate(lang_territory.lastIndexOf('_'));\n-\n-    QTranslator qtTranslatorBase, qtTranslator, translatorBase, translator;\n-    // Load language files for configured locale:\n-    // - First load the translator for the base language, without territory\n-    // - Then load the more specific locale translator\n-\n-    // Load e.g. qt_de.qm\n-    if (qtTranslatorBase.load(\"qt_\" + lang, QLibraryInfo::location(QLibraryInfo::TranslationsPath)))\n-        app.installTranslator(&qtTranslatorBase);\n-\n-    // Load e.g. qt_de_DE.qm\n-    if (qtTranslator.load(\"qt_\" + lang_territory, QLibraryInfo::location(QLibraryInfo::TranslationsPath)))\n-        app.installTranslator(&qtTranslator);\n-\n-    // Load e.g. bitcoin_de.qm (shortcut \"de\" needs to be defined in bitcoin.qrc)\n-    if (translatorBase.load(lang, \":/translations/\"))\n-        app.installTranslator(&translatorBase);\n-\n-    // Load e.g. bitcoin_de_DE.qm (shortcut \"de_DE\" needs to be defined in bitcoin.qrc)\n-    if (translator.load(lang_territory, \":/translations/\"))\n-        app.installTranslator(&translator);\n-\n     // Subscribe to global signals from core\n     uiInterface.ThreadSafeMessageBox.connect(ThreadSafeMessageBox);\n     uiInterface.ThreadSafeAskFee.connect(ThreadSafeAskFee);"
      },
      {
        "sha": "0f6ae5a7d0100f4b802e9c6ee9ab14323d57fcda",
        "filename": "src/qt/forms/intro.ui",
        "status": "added",
        "additions": 266,
        "deletions": 0,
        "changes": 266,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be77b637fcf5983286382a9b9677fb97b026abe2/src/qt/forms/intro.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be77b637fcf5983286382a9b9677fb97b026abe2/src/qt/forms/intro.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/intro.ui?ref=be77b637fcf5983286382a9b9677fb97b026abe2",
        "patch": "@@ -0,0 +1,266 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>Intro</class>\n+ <widget class=\"QDialog\" name=\"Intro\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>674</width>\n+    <height>363</height>\n+   </rect>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Welcome</string>\n+  </property>\n+  <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n+   <item>\n+    <widget class=\"QLabel\" name=\"label_2\">\n+     <property name=\"styleSheet\">\n+      <string notr=\"true\">QLabel { font-style:italic; }</string>\n+     </property>\n+     <property name=\"text\">\n+      <string>Welcome to Bitcoin-Qt.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <spacer name=\"verticalSpacer_4\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Vertical</enum>\n+     </property>\n+     <property name=\"sizeType\">\n+      <enum>QSizePolicy::Minimum</enum>\n+     </property>\n+     <property name=\"sizeHint\" stdset=\"0\">\n+      <size>\n+       <width>20</width>\n+       <height>15</height>\n+      </size>\n+     </property>\n+    </spacer>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"label_4\">\n+     <property name=\"text\">\n+      <string>As this is the first time the program is launched, you can choose where Bitcoin-Qt will store its data.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QLabel\" name=\"sizeWarningLabel\">\n+     <property name=\"text\">\n+      <string>Bitcoin-Qt will download and store a copy of the Bitcoin block chain. At least %1GB of data will be stored in this directory, and it will grow over time. The wallet will also be stored in this directory.</string>\n+     </property>\n+     <property name=\"wordWrap\">\n+      <bool>true</bool>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QRadioButton\" name=\"dataDirDefault\">\n+     <property name=\"text\">\n+      <string>Use the default data directory</string>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <widget class=\"QRadioButton\" name=\"dataDirCustom\">\n+     <property name=\"text\">\n+      <string>Use a custom data directory:</string>\n+     </property>\n+    </widget>\n+   </item>\n+   <item>\n+    <layout class=\"QHBoxLayout\" name=\"horizontalLayout\">\n+     <property name=\"spacing\">\n+      <number>0</number>\n+     </property>\n+     <property name=\"sizeConstraint\">\n+      <enum>QLayout::SetDefaultConstraint</enum>\n+     </property>\n+     <item>\n+      <spacer name=\"horizontalSpacer\">\n+       <property name=\"orientation\">\n+        <enum>Qt::Horizontal</enum>\n+       </property>\n+       <property name=\"sizeType\">\n+        <enum>QSizePolicy::Fixed</enum>\n+       </property>\n+       <property name=\"sizeHint\" stdset=\"0\">\n+        <size>\n+         <width>60</width>\n+         <height>20</height>\n+        </size>\n+       </property>\n+      </spacer>\n+     </item>\n+     <item>\n+      <layout class=\"QVBoxLayout\" name=\"verticalLayout_2\">\n+       <property name=\"sizeConstraint\">\n+        <enum>QLayout::SetDefaultConstraint</enum>\n+       </property>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2\">\n+         <item>\n+          <widget class=\"QLineEdit\" name=\"dataDirectory\"/>\n+         </item>\n+         <item>\n+          <widget class=\"QPushButton\" name=\"ellipsisButton\">\n+           <property name=\"sizePolicy\">\n+            <sizepolicy hsizetype=\"Minimum\" vsizetype=\"Fixed\">\n+             <horstretch>0</horstretch>\n+             <verstretch>0</verstretch>\n+            </sizepolicy>\n+           </property>\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>30</width>\n+             <height>16777215</height>\n+            </size>\n+           </property>\n+           <property name=\"text\">\n+            <string notr=\"true\">\u2026</string>\n+           </property>\n+           <property name=\"autoDefault\">\n+            <bool>false</bool>\n+           </property>\n+          </widget>\n+         </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <spacer name=\"verticalSpacer_3\">\n+         <property name=\"orientation\">\n+          <enum>Qt::Vertical</enum>\n+         </property>\n+         <property name=\"sizeType\">\n+          <enum>QSizePolicy::Fixed</enum>\n+         </property>\n+         <property name=\"sizeHint\" stdset=\"0\">\n+          <size>\n+           <width>20</width>\n+           <height>5</height>\n+          </size>\n+         </property>\n+        </spacer>\n+       </item>\n+       <item>\n+        <widget class=\"QLabel\" name=\"freeSpace\">\n+         <property name=\"sizePolicy\">\n+          <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Expanding\">\n+           <horstretch>1</horstretch>\n+           <verstretch>0</verstretch>\n+          </sizepolicy>\n+         </property>\n+         <property name=\"text\">\n+          <string/>\n+         </property>\n+         <property name=\"wordWrap\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <spacer name=\"verticalSpacer_2\">\n+         <property name=\"orientation\">\n+          <enum>Qt::Vertical</enum>\n+         </property>\n+         <property name=\"sizeType\">\n+          <enum>QSizePolicy::Fixed</enum>\n+         </property>\n+         <property name=\"sizeHint\" stdset=\"0\">\n+          <size>\n+           <width>20</width>\n+           <height>5</height>\n+          </size>\n+         </property>\n+        </spacer>\n+       </item>\n+       <item>\n+        <widget class=\"QLabel\" name=\"errorMessage\">\n+         <property name=\"sizePolicy\">\n+          <sizepolicy hsizetype=\"Preferred\" vsizetype=\"Expanding\">\n+           <horstretch>0</horstretch>\n+           <verstretch>0</verstretch>\n+          </sizepolicy>\n+         </property>\n+         <property name=\"textFormat\">\n+          <enum>Qt::RichText</enum>\n+         </property>\n+         <property name=\"wordWrap\">\n+          <bool>true</bool>\n+         </property>\n+        </widget>\n+       </item>\n+      </layout>\n+     </item>\n+    </layout>\n+   </item>\n+   <item>\n+    <spacer name=\"verticalSpacer\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Vertical</enum>\n+     </property>\n+     <property name=\"sizeHint\" stdset=\"0\">\n+      <size>\n+       <width>20</width>\n+       <height>40</height>\n+      </size>\n+     </property>\n+    </spacer>\n+   </item>\n+   <item>\n+    <widget class=\"QDialogButtonBox\" name=\"buttonBox\">\n+     <property name=\"orientation\">\n+      <enum>Qt::Horizontal</enum>\n+     </property>\n+     <property name=\"standardButtons\">\n+      <set>QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>\n+     </property>\n+    </widget>\n+   </item>\n+  </layout>\n+ </widget>\n+ <resources/>\n+ <connections>\n+  <connection>\n+   <sender>buttonBox</sender>\n+   <signal>accepted()</signal>\n+   <receiver>Intro</receiver>\n+   <slot>accept()</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>248</x>\n+     <y>254</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>157</x>\n+     <y>274</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+  <connection>\n+   <sender>buttonBox</sender>\n+   <signal>rejected()</signal>\n+   <receiver>Intro</receiver>\n+   <slot>reject()</slot>\n+   <hints>\n+    <hint type=\"sourcelabel\">\n+     <x>316</x>\n+     <y>260</y>\n+    </hint>\n+    <hint type=\"destinationlabel\">\n+     <x>286</x>\n+     <y>274</y>\n+    </hint>\n+   </hints>\n+  </connection>\n+ </connections>\n+</ui>"
      },
      {
        "sha": "3d1e91efdcfd426b667cde2421983af1a7b29e8e",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be77b637fcf5983286382a9b9677fb97b026abe2/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be77b637fcf5983286382a9b9677fb97b026abe2/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=be77b637fcf5983286382a9b9677fb97b026abe2",
        "patch": "@@ -500,7 +500,8 @@ HelpMessageBox::HelpMessageBox(QWidget *parent) :\n     uiOptions = tr(\"UI options\") + \":\\n\" +\n         \"  -lang=<lang>           \" + tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\") + \"\\n\" +\n         \"  -min                   \" + tr(\"Start minimized\") + \"\\n\" +\n-        \"  -splash                \" + tr(\"Show splash screen on startup (default: 1)\") + \"\\n\";\n+        \"  -splash                \" + tr(\"Show splash screen on startup (default: 1)\") + \"\\n\" +\n+        \"  -choosedatadir         \" + tr(\"Choose data directory on startup (default: 0)\") + \"\\n\";\n \n     setWindowTitle(tr(\"Bitcoin-Qt\"));\n     setTextFormat(Qt::PlainText);"
      },
      {
        "sha": "51f3c812e47a953a69f2d891a93fc31798d843dd",
        "filename": "src/qt/intro.cpp",
        "status": "added",
        "additions": 270,
        "deletions": 0,
        "changes": 270,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be77b637fcf5983286382a9b9677fb97b026abe2/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be77b637fcf5983286382a9b9677fb97b026abe2/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=be77b637fcf5983286382a9b9677fb97b026abe2",
        "patch": "@@ -0,0 +1,270 @@\n+#include \"intro.h\"\n+#include \"ui_intro.h\"\n+#include \"util.h\"\n+\n+#include <QFileDialog>\n+#include <QSettings>\n+#include <QMessageBox>\n+\n+#include <boost/filesystem.hpp>\n+\n+/* Minimum free space (in bytes) needed for data directory */\n+static const uint64 GB_BYTES = 1000000000LL;\n+static const uint64 BLOCK_CHAIN_SIZE = 10LL * GB_BYTES;\n+\n+/* Check free space asynchronously to prevent hanging the UI thread.\n+\n+   Up to one request to check a path is in flight to this thread; when the check()\n+   function runs, the current path is requested from the associated Intro object.\n+   The reply is sent back through a signal.\n+\n+   This ensures that no queue of checking requests is built up while the user is\n+   still entering the path, and that always the most recently entered path is checked as\n+   soon as the thread becomes available.\n+*/\n+class FreespaceChecker : public QObject\n+{\n+    Q_OBJECT\n+public:\n+    FreespaceChecker(Intro *intro);\n+\n+    enum Status {\n+        ST_OK,\n+        ST_ERROR\n+    };\n+\n+public slots:\n+    void check();\n+\n+signals:\n+    void reply(int status, const QString &message, quint64 available);\n+\n+private:\n+    Intro *intro;\n+};\n+\n+#include \"intro.moc\"\n+\n+FreespaceChecker::FreespaceChecker(Intro *intro)\n+{\n+    this->intro = intro;\n+}\n+\n+void FreespaceChecker::check()\n+{\n+    namespace fs = boost::filesystem;\n+    QString dataDirStr = intro->getPathToCheck();\n+    fs::path dataDir = fs::path(dataDirStr.toStdString());\n+    uint64 freeBytesAvailable = 0;\n+    int replyStatus = ST_OK;\n+    QString replyMessage = tr(\"A new data directory will be created.\");\n+\n+    /* Find first parent that exists, so that fs::space does not fail */\n+    fs::path parentDir = dataDir;\n+    while(parentDir.has_parent_path() && !fs::exists(parentDir))\n+    {\n+        parentDir = parentDir.parent_path();\n+    }\n+\n+    try {\n+        freeBytesAvailable = fs::space(parentDir).available;\n+        if(fs::exists(dataDir))\n+        {\n+            if(fs::is_directory(dataDir))\n+            {\n+                QString separator = QDir::toNativeSeparators(\"/\");\n+                replyStatus = ST_OK;\n+                replyMessage = tr(\"Directory already exists. Add <code>%1name</code> if you intend to create a new directory here.\").arg(separator);\n+            } else {\n+                replyStatus = ST_ERROR;\n+                replyMessage = tr(\"Path already exists, and is not a directory.\");\n+            }\n+        }\n+    } catch(fs::filesystem_error &e)\n+    {\n+        /* Parent directory does not exist or is not accessible */\n+        replyStatus = ST_ERROR;\n+        replyMessage = tr(\"Cannot create data directory here.\");\n+    }\n+    emit reply(replyStatus, replyMessage, freeBytesAvailable);\n+}\n+\n+\n+Intro::Intro(QWidget *parent) :\n+    QDialog(parent),\n+    ui(new Ui::Intro),\n+    thread(0),\n+    signalled(false)\n+{\n+    ui->setupUi(this);\n+    ui->sizeWarningLabel->setText(ui->sizeWarningLabel->text().arg(BLOCK_CHAIN_SIZE/GB_BYTES));\n+    startThread();\n+}\n+\n+Intro::~Intro()\n+{\n+    delete ui;\n+    /* Ensure thread is finished before it is deleted */\n+    emit stopThread();\n+    thread->wait();\n+}\n+\n+QString Intro::getDataDirectory()\n+{\n+    return ui->dataDirectory->text();\n+}\n+\n+void Intro::setDataDirectory(const QString &dataDir)\n+{\n+    ui->dataDirectory->setText(dataDir);\n+    if(dataDir == getDefaultDataDirectory())\n+    {\n+        ui->dataDirDefault->setChecked(true);\n+        ui->dataDirectory->setEnabled(false);\n+        ui->ellipsisButton->setEnabled(false);\n+    } else {\n+        ui->dataDirCustom->setChecked(true);\n+        ui->dataDirectory->setEnabled(true);\n+        ui->ellipsisButton->setEnabled(true);\n+    }\n+}\n+\n+QString Intro::getDefaultDataDirectory()\n+{\n+    return QString::fromStdString(GetDefaultDataDir().string());\n+}\n+\n+void Intro::pickDataDirectory()\n+{\n+    namespace fs = boost::filesystem;;\n+    QSettings settings;\n+    /* If data directory provided on command line, no need to look at settings\n+       or show a picking dialog */\n+    if(!GetArg(\"-datadir\", \"\").empty())\n+        return;\n+    /* 1) Default data directory for operating system */\n+    QString dataDir = getDefaultDataDirectory();\n+    /* 2) Allow QSettings to override default dir */\n+    dataDir = settings.value(\"strDataDir\", dataDir).toString();\n+\n+    if(!fs::exists(dataDir.toStdString()) || GetBoolArg(\"-choosedatadir\", false))\n+    {\n+        /* If current default data directory does not exist, let the user choose one */\n+        Intro intro;\n+        intro.setDataDirectory(dataDir);\n+        while(true)\n+        {\n+            if(!intro.exec())\n+            {\n+                /* Cancel clicked */\n+                exit(0);\n+            }\n+            dataDir = intro.getDataDirectory();\n+            try {\n+                fs::create_directory(dataDir.toStdString());\n+                break;\n+            } catch(fs::filesystem_error &e) {\n+                QMessageBox::critical(0, QObject::tr(\"Bitcoin\"),\n+                                      QObject::tr(\"Error: Specified data directory \\\"%1\\\" can not be created.\").arg(dataDir));\n+                /* fall through, back to choosing screen */\n+            }\n+        }\n+\n+        settings.setValue(\"strDataDir\", dataDir);\n+    }\n+    SoftSetArg(\"-datadir\", dataDir.toStdString());\n+}\n+\n+void Intro::setStatus(int status, const QString &message, quint64 bytesAvailable)\n+{\n+    switch(status)\n+    {\n+    case FreespaceChecker::ST_OK:\n+        ui->errorMessage->setText(message);\n+        ui->errorMessage->setStyleSheet(\"\");\n+        break;\n+    case FreespaceChecker::ST_ERROR:\n+        ui->errorMessage->setText(tr(\"Error\") + \": \" + message);\n+        ui->errorMessage->setStyleSheet(\"QLabel { color: #800000 }\");\n+        break;\n+    }\n+    /* Indicate number of bytes available */\n+    if(status == FreespaceChecker::ST_ERROR)\n+    {\n+        ui->freeSpace->setText(\"\");\n+    } else {\n+        QString freeString = QString::number(bytesAvailable/GB_BYTES) + tr(\"GB of free space available\");\n+        if(bytesAvailable < BLOCK_CHAIN_SIZE)\n+        {\n+            freeString += \" \" + tr(\"(of %1GB needed)\").arg(BLOCK_CHAIN_SIZE/GB_BYTES);\n+            ui->freeSpace->setStyleSheet(\"QLabel { color: #800000 }\");\n+        } else {\n+            ui->freeSpace->setStyleSheet(\"\");\n+        }\n+        ui->freeSpace->setText(freeString+\".\");\n+    }\n+    /* Don't allow confirm in ERROR state */\n+    ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(status != FreespaceChecker::ST_ERROR);\n+}\n+\n+void Intro::on_dataDirectory_textChanged(const QString &dataDirStr)\n+{\n+    /* Disable OK button until check result comes in */\n+    ui->buttonBox->button(QDialogButtonBox::Ok)->setEnabled(false);\n+    checkPath(dataDirStr);\n+}\n+\n+void Intro::on_ellipsisButton_clicked()\n+{\n+    QString dir = QFileDialog::getExistingDirectory(0, \"Choose data directory\", ui->dataDirectory->text());\n+    if(!dir.isEmpty())\n+        ui->dataDirectory->setText(dir);\n+}\n+\n+void Intro::on_dataDirDefault_clicked()\n+{\n+    setDataDirectory(getDefaultDataDirectory());\n+}\n+\n+void Intro::on_dataDirCustom_clicked()\n+{\n+    ui->dataDirectory->setEnabled(true);\n+    ui->ellipsisButton->setEnabled(true);\n+}\n+\n+void Intro::startThread()\n+{\n+    thread = new QThread(this);\n+    FreespaceChecker *executor = new FreespaceChecker(this);\n+    executor->moveToThread(thread);\n+\n+    connect(executor, SIGNAL(reply(int,QString,quint64)), this, SLOT(setStatus(int,QString,quint64)));\n+    connect(this, SIGNAL(requestCheck()), executor, SLOT(check()));\n+    /*  make sure executor object is deleted in its own thread */\n+    connect(this, SIGNAL(stopThread()), executor, SLOT(deleteLater()));\n+    connect(this, SIGNAL(stopThread()), thread, SLOT(quit()));\n+\n+    thread->start();\n+}\n+\n+void Intro::checkPath(const QString &dataDir)\n+{\n+    mutex.lock();\n+    pathToCheck = dataDir;\n+    if(!signalled)\n+    {\n+        signalled = true;\n+        emit requestCheck();\n+    }\n+    mutex.unlock();\n+}\n+\n+QString Intro::getPathToCheck()\n+{\n+    QString retval;\n+    mutex.lock();\n+    retval = pathToCheck;\n+    signalled = false; /* new request can be queued now */\n+    mutex.unlock();\n+    return retval;\n+}"
      },
      {
        "sha": "b246c65a829dc33ec54d67caf811b307e1f5d902",
        "filename": "src/qt/intro.h",
        "status": "added",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be77b637fcf5983286382a9b9677fb97b026abe2/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be77b637fcf5983286382a9b9677fb97b026abe2/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=be77b637fcf5983286382a9b9677fb97b026abe2",
        "patch": "@@ -0,0 +1,67 @@\n+#ifndef INTRO_H\n+#define INTRO_H\n+\n+#include <QDialog>\n+#include <QThread>\n+#include <QMutex>\n+\n+namespace Ui {\n+class Intro;\n+}\n+class FreespaceChecker;\n+\n+/** Introduction screen (pre-GUI startup).\n+  Allows the user to choose a data directory,\n+  in which the wallet and block chain will be stored.\n+ */\n+class Intro : public QDialog\n+{\n+    Q_OBJECT\n+\n+public:\n+    explicit Intro(QWidget *parent = 0);\n+    ~Intro();\n+\n+    QString getDataDirectory();\n+    void setDataDirectory(const QString &dataDir);\n+\n+    /**\n+     * Determine data directory. Let the user choose if the current one doesn't exist.\n+     *\n+     * @note do NOT call global GetDataDir() before calling this function, this\n+     * will cause the wrong path to be cached.\n+     */\n+    static void pickDataDirectory();\n+\n+    /**\n+     * Determine default data directory for operating system.\n+     */\n+    static QString getDefaultDataDirectory();\n+signals:\n+    void requestCheck();\n+    void stopThread();\n+\n+public slots:\n+    void setStatus(int status, const QString &message, quint64 bytesAvailable);\n+\n+private slots:\n+    void on_dataDirectory_textChanged(const QString &arg1);\n+    void on_ellipsisButton_clicked();\n+    void on_dataDirDefault_clicked();\n+    void on_dataDirCustom_clicked();\n+\n+private:\n+    Ui::Intro *ui;\n+    QThread *thread;\n+    QMutex mutex;\n+    bool signalled;\n+    QString pathToCheck;\n+\n+    void startThread();\n+    void checkPath(const QString &dataDir);\n+    QString getPathToCheck();\n+\n+    friend class FreespaceChecker;\n+};\n+\n+#endif // INTRO_H"
      }
    ]
  }
]