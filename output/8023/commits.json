[
  {
    "sha": "483103590f42b609c266c54d439ddc71f0001a19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODMxMDM1OTBmNDJiNjA5YzI2NmM1NGQ0MzlkZGM3MWYwMDAxYTE5",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-06T07:02:52Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-08T08:42:50Z"
      },
      "message": "threads: add interruptible threads\n\nThese should be drop-in replacements for:\nboost::thread\nboost::thread_group\nboost::condition_variable\nboost::this_thread::sleep_for",
      "tree": {
        "sha": "effa9f6fa1332331f0cfee7091a5b437c1a2cba9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/effa9f6fa1332331f0cfee7091a5b437c1a2cba9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/483103590f42b609c266c54d439ddc71f0001a19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/483103590f42b609c266c54d439ddc71f0001a19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/483103590f42b609c266c54d439ddc71f0001a19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/483103590f42b609c266c54d439ddc71f0001a19/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fbd84788e676c9cbd126f6236ec46bb2f342bd00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fbd84788e676c9cbd126f6236ec46bb2f342bd00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fbd84788e676c9cbd126f6236ec46bb2f342bd00"
      }
    ],
    "stats": {
      "total": 630,
      "additions": 630,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f5438de819c4f72a0ee4a02e2463c6d4ebc25e88",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483103590f42b609c266c54d439ddc71f0001a19/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483103590f42b609c266c54d439ddc71f0001a19/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=483103590f42b609c266c54d439ddc71f0001a19",
        "patch": "@@ -95,6 +95,12 @@ BITCOIN_CORE_H = \\\n   httprpc.h \\\n   httpserver.h \\\n   init.h \\\n+  interruptible/condition_variable.h \\\n+  interruptible/lock.h  \\\n+  interruptible/this_thread.h \\\n+  interruptible/thread.h \\\n+  interruptible/thread_data.h \\\n+  interruptible/thread_group.h \\\n   key.h \\\n   keystore.h \\\n   dbwrapper.h \\\n@@ -306,6 +312,9 @@ libbitcoin_util_a_SOURCES = \\\n   compat/glibc_sanity.cpp \\\n   compat/glibcxx_sanity.cpp \\\n   compat/strnlen.cpp \\\n+  interruptible/this_thread.cpp \\\n+  interruptible/thread.cpp \\\n+  interruptible/thread_group.cpp \\\n   random.cpp \\\n   rpc/protocol.cpp \\\n   support/cleanse.cpp \\"
      },
      {
        "sha": "fa29265b8160992e4f3d1d7748a082e9964e7104",
        "filename": "src/interruptible/condition_variable.h",
        "status": "added",
        "additions": 104,
        "deletions": 0,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/condition_variable.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/condition_variable.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/condition_variable.h?ref=483103590f42b609c266c54d439ddc71f0001a19",
        "patch": "@@ -0,0 +1,104 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERRUPTIBLE_CONDITION_VARIABLE_H\n+#define BITCOIN_INTERRUPTIBLE_CONDITION_VARIABLE_H\n+\n+#include \"interruptible/lock.h\"\n+#include \"interruptible/this_thread.h\"\n+\n+#include <chrono>\n+#include <condition_variable>\n+#include <mutex>\n+#include <thread>\n+\n+namespace interruptible\n+{\n+class condition_variable\n+{\n+public:\n+    typedef int_lock<std::unique_lock<std::mutex> > lock_type;\n+\n+    condition_variable() = default;\n+    ~condition_variable() = default;\n+\n+    condition_variable(const condition_variable&) = delete;\n+    condition_variable& operator=(const condition_variable&) = delete;\n+\n+    inline void notify_one() noexcept\n+    {\n+        m_condvar.notify_one();\n+    }\n+\n+    inline void notify_all() noexcept\n+    {\n+        m_condvar.notify_all();\n+    }\n+\n+    template <class Lockable>\n+    inline void wait(Lockable& user_lock)\n+    {\n+        lock_type lock(m_condvar, user_lock);\n+        this_thread::interruption_point();\n+        m_condvar.wait(lock);\n+        this_thread::interruption_point();\n+    }\n+\n+    template <class Lockable, class Predicate>\n+    void wait(Lockable& user_lock, Predicate pred)\n+    {\n+        lock_type lock(m_condvar, user_lock);\n+        this_thread::interruption_point();\n+        while (!pred()) {\n+            m_condvar.wait(lock);\n+            this_thread::interruption_point();\n+        }\n+    }\n+\n+    template <class Lockable, class Clock, class Duration>\n+    std::cv_status wait_until(Lockable& user_lock, const std::chrono::time_point<Clock, Duration>& abs_time)\n+    {\n+        lock_type lock(m_condvar, user_lock);\n+        this_thread::interruption_point();\n+        std::cv_status ret = m_condvar.wait_until(lock, abs_time);\n+        this_thread::interruption_point();\n+        return ret;\n+    }\n+\n+    template <class Lockable, class Clock, class Duration, class Predicate>\n+    bool wait_until(Lockable& user_lock, const std::chrono::time_point<Clock, Duration>& abs_time, Predicate pred)\n+    {\n+        lock_type lock(m_condvar, user_lock);\n+        this_thread::interruption_point();\n+        while (!pred()) {\n+            bool ret = m_condvar.wait_until(lock, abs_time) == std::cv_status::timeout;\n+            this_thread::interruption_point();\n+            if (!ret)\n+                return pred();\n+        }\n+        return true;\n+    }\n+\n+    template <class Lockable, class Rep, class Period>\n+    std::cv_status wait_for(Lockable& user_lock, const std::chrono::duration<Rep, Period>& rel_time)\n+    {\n+        lock_type lock(m_condvar, user_lock);\n+        this_thread::interruption_point();\n+        std::cv_status ret = m_condvar.wait_for(lock, rel_time);\n+        this_thread::interruption_point();\n+        return ret;\n+    }\n+\n+    template <class Lockable, class Rep, class Period, class Predicate>\n+    bool wait_for(Lockable& user_lock, const std::chrono::duration<Rep, Period>& rel_time, Predicate pred)\n+    {\n+        return wait_until(user_lock, std::chrono::steady_clock::now() + rel_time, pred);\n+    }\n+\n+private:\n+    std::condition_variable_any m_condvar;\n+};\n+}\n+\n+#endif // BITCOIN_INTERRUPTIBLE_CONDITION_VARIABLE_H"
      },
      {
        "sha": "3dd63e64c6d37730f6bfacc8615b70713c6d01e4",
        "filename": "src/interruptible/lock.h",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/lock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/lock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/lock.h?ref=483103590f42b609c266c54d439ddc71f0001a19",
        "patch": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERRUPTIBLE_LOCK_H\n+#define BITCOIN_INTERRUPTIBLE_LOCK_H\n+\n+#include \"interruptible/this_thread.h\"\n+\n+#include <condition_variable>\n+#include <mutex>\n+#include <assert.h>\n+\n+/*\n+In order to avoid exposing the internals of thread_data, the semantics here are a bit funky.\n+thread_data's mutex must be locked when setting/unsetting the condition pointer, and should\n+also lock/unlock along with the user's mutex.\n+\n+To facilitate that, set_cond returns a (locked) unique_lock which the caller should hold until\n+releasing the cond with unset_cond, which moves back the lock, which is then destroyed.\n+\n+*/\n+\n+namespace interruptible\n+{\n+template <typename Lockable>\n+class int_lock\n+{\n+public:\n+    int_lock(const int_lock&) = delete;\n+    int_lock& operator=(const int_lock&) = delete;\n+\n+    int_lock(std::condition_variable_any& cond, Lockable& user_lock) : m_user_lock(user_lock), m_cond_lock(this_thread::detail::set_cond(&cond))\n+    {\n+        assert(m_user_lock.owns_lock());\n+        assert(m_cond_lock.owns_lock());\n+    }\n+    ~int_lock()\n+    {\n+        assert(m_user_lock.owns_lock());\n+        assert(m_cond_lock.owns_lock());\n+        this_thread::detail::unset_cond(std::move(m_cond_lock));\n+    }\n+    inline void lock()\n+    {\n+        assert(!m_user_lock.owns_lock());\n+        assert(!m_cond_lock.owns_lock());\n+        std::lock(m_user_lock, m_cond_lock);\n+    }\n+    inline void unlock()\n+    {\n+        assert(m_user_lock.owns_lock());\n+        assert(m_cond_lock.owns_lock());\n+        m_cond_lock.unlock();\n+        m_user_lock.unlock();\n+    }\n+\n+private:\n+    Lockable& m_user_lock;\n+    std::unique_lock<std::mutex> m_cond_lock;\n+};\n+}\n+\n+#endif // BITCOIN_INTERRUPTIBLE_LOCK_H"
      },
      {
        "sha": "d9526ef2af8a886ba0dc1dee40a896e21975aa66",
        "filename": "src/interruptible/this_thread.cpp",
        "status": "added",
        "additions": 75,
        "deletions": 0,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/this_thread.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/this_thread.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/this_thread.cpp?ref=483103590f42b609c266c54d439ddc71f0001a19",
        "patch": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"interruptible/condition_variable.h\"\n+#include \"interruptible/this_thread.h\"\n+#include \"interruptible/thread.h\"\n+#include \"interruptible/thread_data.h\"\n+\n+#include <mutex>\n+#include <assert.h>\n+\n+thread_local interruptible::detail::thread_data* t_data = nullptr;\n+\n+interruptible::detail::thread_data* interruptible::this_thread::detail::get_thread_data()\n+{\n+    return t_data;\n+}\n+\n+std::unique_lock<std::mutex> interruptible::this_thread::detail::set_cond(std::condition_variable_any* cond)\n+{\n+    return t_data->set_cond(cond);\n+}\n+\n+void interruptible::this_thread::detail::unset_cond(std::unique_lock<std::mutex>&& lock)\n+{\n+    t_data->unset_cond(std::move(lock));\n+}\n+\n+void interruptible::this_thread::detail::set_thread_data(interruptible::detail::thread_data* indata)\n+{\n+    t_data = indata;\n+}\n+\n+void interruptible::this_thread::detail::sleep_until(std::chrono::time_point<std::chrono::steady_clock> endtime)\n+{\n+    std::mutex mutex;\n+    std::unique_lock<std::mutex> lock(mutex);\n+    interruptible::condition_variable cond;\n+    cond.wait_until(lock, endtime, [&endtime] { return std::chrono::steady_clock::now() >= endtime; });\n+}\n+\n+void interruptible::this_thread::detail::interrupt()\n+{\n+    assert(t_data);\n+    throw ::interruptible::thread_interrupted();\n+}\n+\n+bool interruptible::this_thread::detail::check_interrupt()\n+{\n+    assert(t_data);\n+    if (t_data->is_interrupted())\n+        interrupt();\n+    return false;\n+}\n+\n+bool interruptible::this_thread::detail::enable_interruption(bool thread_interruption_enabled)\n+{\n+    if (t_data)\n+        return t_data->enable_interruption(thread_interruption_enabled);\n+    return false;\n+}\n+\n+bool interruptible::this_thread::interruption_enabled()\n+{\n+    if (t_data)\n+        return t_data->interruption_enabled();\n+    return false;\n+}\n+\n+void interruptible::this_thread::interruption_point()\n+{\n+    if (t_data && t_data->interruption_enabled())\n+        detail::check_interrupt();\n+}"
      },
      {
        "sha": "066485ad3cb8709c0618d6ea5aa0d8734b4e76dd",
        "filename": "src/interruptible/this_thread.h",
        "status": "added",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/this_thread.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/this_thread.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/this_thread.h?ref=483103590f42b609c266c54d439ddc71f0001a19",
        "patch": "@@ -0,0 +1,80 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERRUPTIBLE_THIS_THREAD_H\n+#define BITCOIN_INTERRUPTIBLE_THIS_THREAD_H\n+\n+#include <condition_variable>\n+#include <mutex>\n+#include <thread>\n+\n+namespace interruptible\n+{\n+namespace detail\n+{\n+class thread_data;\n+}\n+\n+namespace this_thread\n+{\n+namespace detail\n+{\n+std::unique_lock<std::mutex> set_cond(std::condition_variable_any* cond);\n+void unset_cond(std::unique_lock<std::mutex>&& lock);\n+::interruptible::detail::thread_data* get_thread_data();\n+void set_thread_data(::interruptible::detail::thread_data* indata);\n+void interrupt();\n+bool check_interrupt();\n+bool enable_interruption(bool thread_interruption_enabled);\n+void sleep_until(std::chrono::time_point<std::chrono::steady_clock> endtime);\n+}\n+\n+\n+void interruption_point();\n+bool interruption_enabled();\n+\n+class disable_interruption\n+{\n+    friend class restore_interruption;\n+\n+public:\n+    disable_interruption()\n+    {\n+        m_was_enabled = detail::enable_interruption(false);\n+    }\n+    ~disable_interruption()\n+    {\n+        detail::enable_interruption(m_was_enabled);\n+    }\n+    disable_interruption(const disable_interruption&) = delete;\n+    disable_interruption& operator=(const disable_interruption&) = delete;\n+\n+private:\n+    bool m_was_enabled;\n+};\n+\n+class restore_interruption\n+{\n+public:\n+    explicit restore_interruption(disable_interruption& disabler)\n+    {\n+        detail::enable_interruption(disabler.m_was_enabled);\n+    }\n+    ~restore_interruption()\n+    {\n+        detail::enable_interruption(false);\n+    }\n+    restore_interruption(const restore_interruption&) = delete;\n+    restore_interruption& operator=(const restore_interruption&) = delete;\n+};\n+\n+template <class Rep, class Period>\n+void sleep_for(const std::chrono::duration<Rep, Period>& sleep_duration)\n+{\n+    detail::sleep_until(std::chrono::steady_clock::now() + sleep_duration);\n+}\n+}\n+}\n+\n+#endif // BITCOIN_INTERRUPTIBLE_THIS_THREAD_H"
      },
      {
        "sha": "89396046f683099555ffc7cfa28af4cd89092f70",
        "filename": "src/interruptible/thread.cpp",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/thread.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/thread.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/thread.cpp?ref=483103590f42b609c266c54d439ddc71f0001a19",
        "patch": "@@ -0,0 +1,63 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"interruptible/thread.h\"\n+#include \"interruptible/thread_data.h\"\n+#include \"interruptible/this_thread.h\"\n+\n+void interruptible::thread::start_thread(std::function<void()>&& func)\n+{\n+    m_data = std::make_shared<interruptible::detail::thread_data>();\n+    auto run_thread_func = [func, this] {\n+        interruptible::this_thread::detail::set_thread_data(m_data.get());\n+        try {\n+            func();\n+        }\n+        catch (const thread_interrupted&) {\n+        }\n+    };\n+    m_data->start_thread(run_thread_func);\n+}\n+\n+void interruptible::thread::interrupt()\n+{\n+    m_data->set_interrupted();\n+}\n+\n+void interruptible::thread::join()\n+{\n+    if (m_data->get_thread().joinable()) {\n+        m_data->get_thread().join();\n+    }\n+}\n+\n+void interruptible::thread::swap(interruptible::thread& rhs) noexcept\n+{\n+    m_data.swap(rhs.m_data);\n+}\n+\n+bool interruptible::thread::joinable() const noexcept\n+{\n+    return m_data->get_thread().joinable();\n+}\n+\n+void interruptible::thread::detach()\n+{\n+    m_data->get_thread().detach();\n+}\n+\n+interruptible::thread::id interruptible::thread::get_id() const noexcept\n+{\n+    return m_data->get_thread().get_id();\n+}\n+\n+interruptible::thread::native_handle_type interruptible::thread::native_handle()\n+{\n+    return m_data->get_thread().native_handle();\n+}\n+\n+unsigned interruptible::thread::hardware_concurrency() noexcept\n+{\n+    return thread_type::hardware_concurrency();\n+}"
      },
      {
        "sha": "bca3883ab835e708baef6b988960e6a27f3b1284",
        "filename": "src/interruptible/thread.h",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/thread.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/thread.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/thread.h?ref=483103590f42b609c266c54d439ddc71f0001a19",
        "patch": "@@ -0,0 +1,63 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERRUPTIBLE_THREAD_H\n+#define BITCOIN_INTERRUPTIBLE_THREAD_H\n+\n+#include \"interruptible/this_thread.h\"\n+\n+#include <thread>\n+#include <memory>\n+\n+namespace interruptible\n+{\n+namespace detail\n+{\n+class thread_data;\n+}\n+\n+class thread\n+{\n+public:\n+    typedef std::thread thread_type;\n+    typedef thread_type::native_handle_type native_handle_type;\n+    typedef thread_type::id id;\n+\n+    thread() noexcept = default;\n+\n+    template <typename T, typename... Args>\n+    explicit thread(T&& func, Args&&... args)\n+    {\n+        start_thread(std::bind(std::forward<T>(func), std::forward<Args>(args)...));\n+    }\n+\n+    thread(const thread&) = delete;\n+    thread(thread&& t) noexcept(true) = default;\n+\n+    thread& operator=(const thread&) = delete;\n+    thread& operator=(thread&& t) noexcept(true) = default;\n+\n+    void join();\n+    void swap(thread& rhs) noexcept;\n+    bool joinable() const noexcept;\n+    void detach();\n+    id get_id() const noexcept;\n+    native_handle_type native_handle();\n+    static unsigned hardware_concurrency() noexcept;\n+\n+    // interruptible additions\n+    void interrupt();\n+    bool interruption_requested() const;\n+\n+private:\n+    std::shared_ptr<detail::thread_data> m_data;\n+    void start_thread(std::function<void()>&& func);\n+};\n+\n+class thread_interrupted\n+{\n+};\n+}\n+\n+#endif // BITCOIN_INTERRUPTIBLE_THREAD_H"
      },
      {
        "sha": "d56da36dfbca2cc4497cdc2f26abddd10217a507",
        "filename": "src/interruptible/thread_data.h",
        "status": "added",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/thread_data.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/thread_data.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/thread_data.h?ref=483103590f42b609c266c54d439ddc71f0001a19",
        "patch": "@@ -0,0 +1,86 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERRUPTIBLE_THREAD_DATA_H\n+#define BITCOIN_INTERRUPTIBLE_THREAD_DATA_H\n+\n+#include <atomic>\n+#include <assert.h>\n+#include <mutex>\n+\n+namespace interruptible\n+{\n+namespace detail\n+{\n+class thread_data\n+{\n+public:\n+    thread_data() noexcept = default;\n+    thread_data(thread_data&& t) = default;\n+    thread_data& operator=(thread_data&& t) = default;\n+    ~thread_data() = default;\n+\n+    thread_data(const thread_data&) = delete;\n+    thread_data& operator=(const thread_data&) = delete;\n+\n+    template <typename T, typename... Args>\n+    void start_thread(T&& func, Args&&... args)\n+    {\n+        m_thread = std::thread(std::forward<T>(func), std::forward<Args>(args)...);\n+    }\n+\n+    void set_interrupted()\n+    {\n+        m_interrupted.store(true, std::memory_order_relaxed);\n+        std::lock_guard<std::mutex> lock(m_wake_mutex);\n+        if (m_cond_wake_ptr != nullptr)\n+            m_cond_wake_ptr->notify_all();\n+    }\n+\n+    bool is_interrupted() const\n+    {\n+        return m_interrupted;\n+    }\n+\n+    bool enable_interruption(bool thread_interruption_enabled)\n+    {\n+        bool prev = interruption_enabled();\n+        m_thread_interruption_enabled = thread_interruption_enabled;\n+        return prev;\n+    }\n+\n+    bool interruption_enabled() const\n+    {\n+        return m_thread_interruption_enabled;\n+    }\n+\n+    std::unique_lock<std::mutex> set_cond(std::condition_variable_any* cond)\n+    {\n+        std::unique_lock<std::mutex> lock(m_wake_mutex);\n+        m_cond_wake_ptr = cond;\n+        return lock;\n+    }\n+\n+    void unset_cond(std::unique_lock<std::mutex>&& lock)\n+    {\n+        (void)lock; // just let it deconstruct\n+        m_cond_wake_ptr = nullptr;\n+    }\n+\n+    std::thread& get_thread()\n+    {\n+        return m_thread;\n+    }\n+\n+    std::mutex m_wake_mutex;\n+    std::condition_variable_any* m_cond_wake_ptr = nullptr;\n+\n+private:\n+    bool m_thread_interruption_enabled = true;\n+    std::atomic<bool> m_interrupted;\n+    std::thread m_thread;\n+};\n+}\n+}\n+#endif // BITCOIN_INTERRUPTIBLE_THREAD_DATA_H"
      },
      {
        "sha": "a7353ea93afd21a10edaa1e190b7c7c424c94566",
        "filename": "src/interruptible/thread_group.cpp",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/thread_group.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/thread_group.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/thread_group.cpp?ref=483103590f42b609c266c54d439ddc71f0001a19",
        "patch": "@@ -0,0 +1,44 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"interruptible/thread_group.h\"\n+\n+namespace interruptible\n+{\n+void thread_group::add_thread(interruptible::thread* rhs)\n+{\n+    if (rhs != nullptr) {\n+        std::lock_guard<std::mutex> lock(m_mutex);\n+        m_threads.emplace_back(rhs);\n+    }\n+}\n+\n+void thread_group::remove_thread(interruptible::thread* rhs)\n+{\n+    if (rhs != nullptr) {\n+        std::lock_guard<std::mutex> lock(m_mutex);\n+        m_threads.remove_if([rhs](const std::unique_ptr<interruptible::thread>& it) { return rhs->get_id() == it->get_id(); });\n+    }\n+}\n+\n+void thread_group::interrupt_all()\n+{\n+    std::lock_guard<std::mutex> lock(m_mutex);\n+    for (auto&& thread : m_threads)\n+        thread->interrupt();\n+}\n+\n+void thread_group::join_all()\n+{\n+    std::lock_guard<std::mutex> lock(m_mutex);\n+    for (auto&& thread : m_threads)\n+        thread->join();\n+}\n+\n+size_t thread_group::size() const\n+{\n+    std::lock_guard<std::mutex> lock(m_mutex);\n+    return m_threads.size();\n+}\n+}"
      },
      {
        "sha": "2d1b14825b493bf1e8cf6c3df6e4a01c164fb8d3",
        "filename": "src/interruptible/thread_group.h",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/thread_group.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483103590f42b609c266c54d439ddc71f0001a19/src/interruptible/thread_group.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/thread_group.h?ref=483103590f42b609c266c54d439ddc71f0001a19",
        "patch": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_INTERRUPTIBLE_THREAD_GROUP_H\n+#define BITCOIN_INTERRUPTIBLE_THREAD_GROUP_H\n+\n+#include \"interruptible/thread.h\"\n+\n+#include <list>\n+#include <memory>\n+\n+namespace interruptible\n+{\n+class thread;\n+class thread_group\n+{\n+public:\n+    thread_group() = default;\n+    thread_group(const thread_group&) = delete;\n+    thread_group& operator=(const thread_group&) = delete;\n+\n+    template <typename T, typename... Args>\n+    void create_thread(T&& func, Args&&... args)\n+    {\n+        auto thread_ptr(new interruptible::thread(std::forward<T>(func), std::forward<Args>(args)...));\n+        m_threads.emplace_back(thread_ptr);\n+    }\n+\n+    void add_thread(interruptible::thread* rhs);\n+    void remove_thread(interruptible::thread* rhs);\n+    void interrupt_all();\n+    void join_all();\n+    size_t size() const;\n+\n+private:\n+    mutable std::mutex m_mutex;\n+    std::list<std::unique_ptr<interruptible::thread> > m_threads;\n+};\n+}\n+\n+#endif // BITCOIN_INTERRUPTIBLE_THREAD_GROUP_H"
      }
    ]
  },
  {
    "sha": "33dd6c85b92e1d09048329c31e70141fb0eef42c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozM2RkNmM4NWI5MmUxZDA5MDQ4MzI5YzMxZTcwMTQxZmIwZWVmNDJj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-08T08:37:16Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-08T08:42:50Z"
      },
      "message": "threads: add some tests for interruptible threads",
      "tree": {
        "sha": "432b89e8927de775d7f00391c92d20c24fb1718d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/432b89e8927de775d7f00391c92d20c24fb1718d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/33dd6c85b92e1d09048329c31e70141fb0eef42c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33dd6c85b92e1d09048329c31e70141fb0eef42c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/33dd6c85b92e1d09048329c31e70141fb0eef42c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33dd6c85b92e1d09048329c31e70141fb0eef42c/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "483103590f42b609c266c54d439ddc71f0001a19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/483103590f42b609c266c54d439ddc71f0001a19",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/483103590f42b609c266c54d439ddc71f0001a19"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 149,
      "deletions": 0
    },
    "files": [
      {
        "sha": "55fa7ec65eacbb2738d2af50953c157c50443826",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33dd6c85b92e1d09048329c31e70141fb0eef42c/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33dd6c85b92e1d09048329c31e70141fb0eef42c/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=33dd6c85b92e1d09048329c31e70141fb0eef42c",
        "patch": "@@ -51,6 +51,7 @@ BITCOIN_TESTS =\\\n   test/DoS_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n+  test/interruptible.cpp \\\n   test/key_tests.cpp \\\n   test/limitedmap_tests.cpp \\\n   test/dbwrapper_tests.cpp \\"
      },
      {
        "sha": "b73d71f0f41169f4150dfbd2940810b5911f99de",
        "filename": "src/test/interruptible.cpp",
        "status": "added",
        "additions": 148,
        "deletions": 0,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/33dd6c85b92e1d09048329c31e70141fb0eef42c/src/test/interruptible.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/33dd6c85b92e1d09048329c31e70141fb0eef42c/src/test/interruptible.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interruptible.cpp?ref=33dd6c85b92e1d09048329c31e70141fb0eef42c",
        "patch": "@@ -0,0 +1,148 @@\n+// Copyright (c) 2012-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"interruptible/thread.h\"\n+#include \"interruptible/thread_group.h\"\n+#include \"interruptible/condition_variable.h\"\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+static constexpr std::chrono::seconds wait_time(5);\n+\n+BOOST_FIXTURE_TEST_SUITE(interruptible_tests, BasicTestingSetup)\n+\n+void long_loop()\n+{\n+    auto start = std::chrono::steady_clock::now();\n+    while (std::chrono::steady_clock::now() - start < wait_time) {\n+        interruptible::this_thread::interruption_point();\n+        std::this_thread::yield();\n+    }\n+}\n+\n+static void long_sleep()\n+{\n+    interruptible::this_thread::sleep_for(std::chrono::seconds(wait_time));\n+}\n+\n+\n+static void condvar_wait()\n+{\n+    std::mutex m;\n+    std::unique_lock<std::mutex> lock(m);\n+    interruptible::condition_variable cond;\n+    auto start = std::chrono::steady_clock::now();\n+    while (std::chrono::steady_clock::now() - start < wait_time)\n+        cond.wait(lock);\n+}\n+\n+static void condvar_wait_pred()\n+{\n+    std::mutex m;\n+    std::unique_lock<std::mutex> lock(m);\n+    interruptible::condition_variable cond;\n+    auto start = std::chrono::steady_clock::now();\n+    cond.wait(lock, [&] {return std::chrono::steady_clock::now() - start >= wait_time; });\n+}\n+\n+static void condvar_wait_for()\n+{\n+    std::mutex m;\n+    std::unique_lock<std::mutex> lock(m);\n+    interruptible::condition_variable cond;\n+    auto start = std::chrono::steady_clock::now();\n+    while (std::chrono::steady_clock::now() - start < wait_time)\n+        cond.wait_for(lock, wait_time);\n+}\n+\n+static void condvar_wait_for_pred()\n+{\n+    std::mutex m;\n+    std::unique_lock<std::mutex> lock(m);\n+    interruptible::condition_variable cond;\n+    auto start = std::chrono::steady_clock::now();\n+    cond.wait_for(lock, wait_time, [&] {return std::chrono::steady_clock::now() - start >= wait_time; });\n+}\n+\n+static void condvar_wait_until()\n+{\n+    std::mutex m;\n+    std::unique_lock<std::mutex> lock(m);\n+    interruptible::condition_variable cond;\n+    auto start = std::chrono::steady_clock::now();\n+    auto end = start + wait_time;\n+    while (std::chrono::steady_clock::now() - start < wait_time)\n+        cond.wait_until(lock, end);\n+}\n+\n+static void condvar_wait_until_pred()\n+{\n+    std::mutex m;\n+    std::unique_lock<std::mutex> lock(m);\n+    interruptible::condition_variable cond;\n+    auto start = std::chrono::steady_clock::now();\n+    auto end = start + wait_time;\n+    cond.wait_until(lock, end, [&] {return std::chrono::steady_clock::now() - start >= wait_time; });\n+}\n+\n+static void catcher(std::function<void()>&& func)\n+{\n+    BOOST_CHECK_THROW(func(), interruptible::thread_interrupted);\n+}\n+\n+template <typename T>\n+static bool run_test(T&& func)\n+{\n+    interruptible::thread runthread(catcher, std::forward<T>(func));\n+    std::this_thread::sleep_for(std::chrono::milliseconds(50));\n+    runthread.interrupt();\n+    runthread.join();\n+    return true;\n+}\n+\n+template <typename T>\n+static bool run_group_test(T&& func)\n+{\n+    interruptible::thread_group group;\n+    group.create_thread(catcher, func);\n+    std::this_thread::sleep_for(std::chrono::milliseconds(5));\n+    group.create_thread(catcher, func);\n+    std::this_thread::sleep_for(std::chrono::milliseconds(50));\n+    group.interrupt_all();\n+    group.join_all();\n+    return true;\n+}\n+\n+BOOST_AUTO_TEST_CASE(interruption_point)\n+{\n+    BOOST_CHECK(run_test(long_loop));\n+    BOOST_CHECK(run_group_test(long_loop));\n+}\n+\n+\n+BOOST_AUTO_TEST_CASE(interruptible_sleep)\n+{\n+    BOOST_CHECK(run_test(long_sleep));\n+    BOOST_CHECK(run_group_test(long_sleep));\n+}\n+\n+BOOST_AUTO_TEST_CASE(interruptible_condvar)\n+{\n+    BOOST_CHECK(run_test(condvar_wait));\n+    BOOST_CHECK(run_test(condvar_wait_pred));\n+    BOOST_CHECK(run_test(condvar_wait_for));\n+    BOOST_CHECK(run_test(condvar_wait_for_pred));\n+    BOOST_CHECK(run_test(condvar_wait_until));\n+    BOOST_CHECK(run_test(condvar_wait_until_pred));\n+\n+    BOOST_CHECK(run_group_test(condvar_wait));\n+    BOOST_CHECK(run_group_test(condvar_wait_pred));\n+    BOOST_CHECK(run_group_test(condvar_wait_for));\n+    BOOST_CHECK(run_group_test(condvar_wait_for_pred));\n+    BOOST_CHECK(run_group_test(condvar_wait_until));\n+    BOOST_CHECK(run_group_test(condvar_wait_until_pred));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "bb31ffbda5e9fc4c5c854a51d72754b72ef63c50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjMxZmZiZGE1ZTlmYzRjNWM4NTRhNTFkNzI3NTRiNzJlZjYzYzUw",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-08T16:32:42Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-08T17:04:25Z"
      },
      "message": "squashme: fixup thread_data pointer\n\nas kazcw points out, the raw thread may be running free after the interruptible\nhas been destroyed, so its data needs to remain valid.\n\nTODO: This probably isn't enough to cope with detaching, need to poke at it and\nadd some tests.",
      "tree": {
        "sha": "732cd9988a983df3a1f04a6ff97176a4b7d9e82c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/732cd9988a983df3a1f04a6ff97176a4b7d9e82c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb31ffbda5e9fc4c5c854a51d72754b72ef63c50",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb31ffbda5e9fc4c5c854a51d72754b72ef63c50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb31ffbda5e9fc4c5c854a51d72754b72ef63c50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb31ffbda5e9fc4c5c854a51d72754b72ef63c50/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "33dd6c85b92e1d09048329c31e70141fb0eef42c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/33dd6c85b92e1d09048329c31e70141fb0eef42c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/33dd6c85b92e1d09048329c31e70141fb0eef42c"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 16,
      "deletions": 32
    },
    "files": [
      {
        "sha": "72e5d384586d96c1dec9d9716a75cd085e1f2ecc",
        "filename": "src/interruptible/this_thread.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 25,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb31ffbda5e9fc4c5c854a51d72754b72ef63c50/src/interruptible/this_thread.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb31ffbda5e9fc4c5c854a51d72754b72ef63c50/src/interruptible/this_thread.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/this_thread.cpp?ref=bb31ffbda5e9fc4c5c854a51d72754b72ef63c50",
        "patch": "@@ -10,24 +10,21 @@\n #include <mutex>\n #include <assert.h>\n \n-thread_local interruptible::detail::thread_data* t_data = nullptr;\n-\n-interruptible::detail::thread_data* interruptible::this_thread::detail::get_thread_data()\n-{\n-    return t_data;\n-}\n+thread_local std::shared_ptr<interruptible::detail::thread_data> t_data;\n \n std::unique_lock<std::mutex> interruptible::this_thread::detail::set_cond(std::condition_variable_any* cond)\n {\n+    assert(t_data);\n     return t_data->set_cond(cond);\n }\n \n void interruptible::this_thread::detail::unset_cond(std::unique_lock<std::mutex>&& lock)\n {\n+    assert(t_data);\n     t_data->unset_cond(std::move(lock));\n }\n \n-void interruptible::this_thread::detail::set_thread_data(interruptible::detail::thread_data* indata)\n+void interruptible::this_thread::detail::set_thread_data(const std::shared_ptr<interruptible::detail::thread_data>& indata)\n {\n     t_data = indata;\n }\n@@ -40,36 +37,22 @@ void interruptible::this_thread::detail::sleep_until(std::chrono::time_point<std\n     cond.wait_until(lock, endtime, [&endtime] { return std::chrono::steady_clock::now() >= endtime; });\n }\n \n-void interruptible::this_thread::detail::interrupt()\n-{\n-    assert(t_data);\n-    throw ::interruptible::thread_interrupted();\n-}\n-\n-bool interruptible::this_thread::detail::check_interrupt()\n-{\n-    assert(t_data);\n-    if (t_data->is_interrupted())\n-        interrupt();\n-    return false;\n-}\n-\n bool interruptible::this_thread::detail::enable_interruption(bool thread_interruption_enabled)\n {\n-    if (t_data)\n+    if(t_data)\n         return t_data->enable_interruption(thread_interruption_enabled);\n     return false;\n }\n \n bool interruptible::this_thread::interruption_enabled()\n {\n-    if (t_data)\n+    if(t_data)\n         return t_data->interruption_enabled();\n     return false;\n }\n \n void interruptible::this_thread::interruption_point()\n {\n-    if (t_data && t_data->interruption_enabled())\n-        detail::check_interrupt();\n+    if(t_data && t_data->should_interrupt())\n+        throw ::interruptible::thread_interrupted();\n }"
      },
      {
        "sha": "b05968a2ff4128d92af0bb3f0708e65e7fdfa600",
        "filename": "src/interruptible/this_thread.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb31ffbda5e9fc4c5c854a51d72754b72ef63c50/src/interruptible/this_thread.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb31ffbda5e9fc4c5c854a51d72754b72ef63c50/src/interruptible/this_thread.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/this_thread.h?ref=bb31ffbda5e9fc4c5c854a51d72754b72ef63c50",
        "patch": "@@ -22,10 +22,7 @@ namespace detail\n {\n std::unique_lock<std::mutex> set_cond(std::condition_variable_any* cond);\n void unset_cond(std::unique_lock<std::mutex>&& lock);\n-::interruptible::detail::thread_data* get_thread_data();\n-void set_thread_data(::interruptible::detail::thread_data* indata);\n-void interrupt();\n-bool check_interrupt();\n+void set_thread_data(const std::shared_ptr<::interruptible::detail::thread_data>& indata);\n bool enable_interruption(bool thread_interruption_enabled);\n void sleep_until(std::chrono::time_point<std::chrono::steady_clock> endtime);\n }"
      },
      {
        "sha": "bd85a72ae08722dc24556dc3e03a50874a08e0e8",
        "filename": "src/interruptible/thread.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb31ffbda5e9fc4c5c854a51d72754b72ef63c50/src/interruptible/thread.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb31ffbda5e9fc4c5c854a51d72754b72ef63c50/src/interruptible/thread.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/thread.cpp?ref=bb31ffbda5e9fc4c5c854a51d72754b72ef63c50",
        "patch": "@@ -10,7 +10,7 @@ void interruptible::thread::start_thread(std::function<void()>&& func)\n {\n     m_data = std::make_shared<interruptible::detail::thread_data>();\n     auto run_thread_func = [func, this] {\n-        interruptible::this_thread::detail::set_thread_data(m_data.get());\n+        interruptible::this_thread::detail::set_thread_data(m_data);\n         try {\n             func();\n         }"
      },
      {
        "sha": "bcdaf1fbbc592e9ba681e71396847f65d3cf3f06",
        "filename": "src/interruptible/thread_data.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb31ffbda5e9fc4c5c854a51d72754b72ef63c50/src/interruptible/thread_data.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb31ffbda5e9fc4c5c854a51d72754b72ef63c50/src/interruptible/thread_data.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/thread_data.h?ref=bb31ffbda5e9fc4c5c854a51d72754b72ef63c50",
        "patch": "@@ -55,6 +55,11 @@ class thread_data\n         return m_thread_interruption_enabled;\n     }\n \n+    bool should_interrupt() const\n+    {\n+        return m_thread_interruption_enabled && m_interrupted;\n+    }\n+\n     std::unique_lock<std::mutex> set_cond(std::condition_variable_any* cond)\n     {\n         std::unique_lock<std::mutex> lock(m_wake_mutex);\n@@ -73,10 +78,9 @@ class thread_data\n         return m_thread;\n     }\n \n+private:\n     std::mutex m_wake_mutex;\n     std::condition_variable_any* m_cond_wake_ptr = nullptr;\n-\n-private:\n     bool m_thread_interruption_enabled = true;\n     std::atomic<bool> m_interrupted;\n     std::thread m_thread;"
      }
    ]
  },
  {
    "sha": "383e087c48d11b88510a0fd563589a2b5a2e50bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODNlMDg3YzQ4ZDExYjg4NTEwYTBmZDU2MzU4OWEyYjVhMmU1MGJj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-08T16:44:05Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-08T17:04:29Z"
      },
      "message": "squashme: cleanup tests\n\nClarify some wait_until, and make doubly-sure that exceptions have been thrown.",
      "tree": {
        "sha": "030164a66562a293199e86bc8855d7dfd1c51e6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/030164a66562a293199e86bc8855d7dfd1c51e6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/383e087c48d11b88510a0fd563589a2b5a2e50bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/383e087c48d11b88510a0fd563589a2b5a2e50bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/383e087c48d11b88510a0fd563589a2b5a2e50bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/383e087c48d11b88510a0fd563589a2b5a2e50bc/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb31ffbda5e9fc4c5c854a51d72754b72ef63c50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb31ffbda5e9fc4c5c854a51d72754b72ef63c50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb31ffbda5e9fc4c5c854a51d72754b72ef63c50"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8ddde5cc66695a3025913768f198bacfcd34be53",
        "filename": "src/test/interruptible.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/383e087c48d11b88510a0fd563589a2b5a2e50bc/src/test/interruptible.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/383e087c48d11b88510a0fd563589a2b5a2e50bc/src/test/interruptible.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/interruptible.cpp?ref=383e087c48d11b88510a0fd563589a2b5a2e50bc",
        "patch": "@@ -25,6 +25,7 @@ void long_loop()\n static void long_sleep()\n {\n     interruptible::this_thread::sleep_for(std::chrono::seconds(wait_time));\n+    BOOST_CHECK(false);\n }\n \n \n@@ -36,6 +37,7 @@ static void condvar_wait()\n     auto start = std::chrono::steady_clock::now();\n     while (std::chrono::steady_clock::now() - start < wait_time)\n         cond.wait(lock);\n+    BOOST_CHECK(false);\n }\n \n static void condvar_wait_pred()\n@@ -45,6 +47,7 @@ static void condvar_wait_pred()\n     interruptible::condition_variable cond;\n     auto start = std::chrono::steady_clock::now();\n     cond.wait(lock, [&] {return std::chrono::steady_clock::now() - start >= wait_time; });\n+    BOOST_CHECK(false);\n }\n \n static void condvar_wait_for()\n@@ -55,6 +58,7 @@ static void condvar_wait_for()\n     auto start = std::chrono::steady_clock::now();\n     while (std::chrono::steady_clock::now() - start < wait_time)\n         cond.wait_for(lock, wait_time);\n+    BOOST_CHECK(false);\n }\n \n static void condvar_wait_for_pred()\n@@ -64,6 +68,7 @@ static void condvar_wait_for_pred()\n     interruptible::condition_variable cond;\n     auto start = std::chrono::steady_clock::now();\n     cond.wait_for(lock, wait_time, [&] {return std::chrono::steady_clock::now() - start >= wait_time; });\n+    BOOST_CHECK(false);\n }\n \n static void condvar_wait_until()\n@@ -73,8 +78,9 @@ static void condvar_wait_until()\n     interruptible::condition_variable cond;\n     auto start = std::chrono::steady_clock::now();\n     auto end = start + wait_time;\n-    while (std::chrono::steady_clock::now() - start < wait_time)\n+    while (std::chrono::steady_clock::now() < end)\n         cond.wait_until(lock, end);\n+    BOOST_CHECK(false);\n }\n \n static void condvar_wait_until_pred()\n@@ -84,7 +90,8 @@ static void condvar_wait_until_pred()\n     interruptible::condition_variable cond;\n     auto start = std::chrono::steady_clock::now();\n     auto end = start + wait_time;\n-    cond.wait_until(lock, end, [&] {return std::chrono::steady_clock::now() - start >= wait_time; });\n+    cond.wait_until(lock, end, [&] {return std::chrono::steady_clock::now() >= end; });\n+    BOOST_CHECK(false);\n }\n \n static void catcher(std::function<void()>&& func)"
      }
    ]
  },
  {
    "sha": "584cd8ce9723ba57c7cf4bcecd84c68c283b6dd5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODRjZDhjZTk3MjNiYTU3YzdjZjRiY2VjZDg0YzY4YzI4M2I2ZGQ1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-08T17:01:39Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-08T17:04:29Z"
      },
      "message": "squashme: fixup thread_group\n\nThanks to kazcw for pointing out that boost's thread_group only deletes threads\nin its own dtor.\n\nAlso updated create_thread to return a pointer to the thread to match the boost\nfunctionality.",
      "tree": {
        "sha": "ec5b88fa38d134701480dc9ce2f6ed1a9bf2ea2c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec5b88fa38d134701480dc9ce2f6ed1a9bf2ea2c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/584cd8ce9723ba57c7cf4bcecd84c68c283b6dd5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/584cd8ce9723ba57c7cf4bcecd84c68c283b6dd5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/584cd8ce9723ba57c7cf4bcecd84c68c283b6dd5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/584cd8ce9723ba57c7cf4bcecd84c68c283b6dd5/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "383e087c48d11b88510a0fd563589a2b5a2e50bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/383e087c48d11b88510a0fd563589a2b5a2e50bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/383e087c48d11b88510a0fd563589a2b5a2e50bc"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 20,
      "deletions": 6
    },
    "files": [
      {
        "sha": "747a0808acdb80a14e5aae1063fa106c88299dbf",
        "filename": "src/interruptible/thread_group.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/584cd8ce9723ba57c7cf4bcecd84c68c283b6dd5/src/interruptible/thread_group.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/584cd8ce9723ba57c7cf4bcecd84c68c283b6dd5/src/interruptible/thread_group.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/thread_group.cpp?ref=584cd8ce9723ba57c7cf4bcecd84c68c283b6dd5",
        "patch": "@@ -6,19 +6,26 @@\n \n namespace interruptible\n {\n+\n+thread_group::~thread_group()\n+{\n+    for (auto&& thread : m_threads)\n+        delete thread;\n+}\n+\n void thread_group::add_thread(interruptible::thread* rhs)\n {\n     if (rhs != nullptr) {\n         std::lock_guard<std::mutex> lock(m_mutex);\n-        m_threads.emplace_back(rhs);\n+        m_threads.push_back(rhs);\n     }\n }\n \n void thread_group::remove_thread(interruptible::thread* rhs)\n {\n     if (rhs != nullptr) {\n         std::lock_guard<std::mutex> lock(m_mutex);\n-        m_threads.remove_if([rhs](const std::unique_ptr<interruptible::thread>& it) { return rhs->get_id() == it->get_id(); });\n+        m_threads.remove_if([rhs](const interruptible::thread* it) { return rhs->get_id() == it->get_id(); });\n     }\n }\n "
      },
      {
        "sha": "672cf940ee9f711bab4709cf702dfa76cd81b6a1",
        "filename": "src/interruptible/thread_group.h",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/584cd8ce9723ba57c7cf4bcecd84c68c283b6dd5/src/interruptible/thread_group.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/584cd8ce9723ba57c7cf4bcecd84c68c283b6dd5/src/interruptible/thread_group.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/thread_group.h?ref=584cd8ce9723ba57c7cf4bcecd84c68c283b6dd5",
        "patch": "@@ -21,11 +21,18 @@ class thread_group\n     thread_group& operator=(const thread_group&) = delete;\n \n     template <typename T, typename... Args>\n-    void create_thread(T&& func, Args&&... args)\n+    interruptible::thread* create_thread(T&& func, Args&&... args)\n     {\n-        auto thread_ptr(new interruptible::thread(std::forward<T>(func), std::forward<Args>(args)...));\n-        m_threads.emplace_back(thread_ptr);\n+        std::unique_ptr<interruptible::thread> thread_ptr(new interruptible::thread(std::forward<T>(func), std::forward<Args>(args)...));\n+        if(thread_ptr) {\n+            {\n+                std::lock_guard<std::mutex> lock(m_mutex);\n+                m_threads.push_back(thread_ptr.get());\n+            }\n+        }\n+        return thread_ptr.release();\n     }\n+    ~thread_group();\n \n     void add_thread(interruptible::thread* rhs);\n     void remove_thread(interruptible::thread* rhs);\n@@ -35,7 +42,7 @@ class thread_group\n \n private:\n     mutable std::mutex m_mutex;\n-    std::list<std::unique_ptr<interruptible::thread> > m_threads;\n+    std::list<interruptible::thread*> m_threads;\n };\n }\n "
      }
    ]
  },
  {
    "sha": "64133202a7b927839bd706e6a957e8f43797f4b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDEzMzIwMmE3YjkyNzgzOWJkNzA2ZTZhOTU3ZThmNDM3OTdmNGI4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-08T17:19:31Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-08T17:20:38Z"
      },
      "message": "squashme: fixup condition_variable::wait_until",
      "tree": {
        "sha": "3f0f734855f2f69a7b25a715a5c91d4d483b5086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f0f734855f2f69a7b25a715a5c91d4d483b5086"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64133202a7b927839bd706e6a957e8f43797f4b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64133202a7b927839bd706e6a957e8f43797f4b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64133202a7b927839bd706e6a957e8f43797f4b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64133202a7b927839bd706e6a957e8f43797f4b8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "584cd8ce9723ba57c7cf4bcecd84c68c283b6dd5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/584cd8ce9723ba57c7cf4bcecd84c68c283b6dd5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/584cd8ce9723ba57c7cf4bcecd84c68c283b6dd5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "091df6d7de71e42443e13850be0b3016004dac60",
        "filename": "src/interruptible/condition_variable.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64133202a7b927839bd706e6a957e8f43797f4b8/src/interruptible/condition_variable.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64133202a7b927839bd706e6a957e8f43797f4b8/src/interruptible/condition_variable.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interruptible/condition_variable.h?ref=64133202a7b927839bd706e6a957e8f43797f4b8",
        "patch": "@@ -72,9 +72,9 @@ class condition_variable\n         lock_type lock(m_condvar, user_lock);\n         this_thread::interruption_point();\n         while (!pred()) {\n-            bool ret = m_condvar.wait_until(lock, abs_time) == std::cv_status::timeout;\n+            auto ret = m_condvar.wait_until(lock, abs_time);\n             this_thread::interruption_point();\n-            if (!ret)\n+            if (ret == std::cv_status::timeout)\n                 return pred();\n         }\n         return true;"
      }
    ]
  }
]