luke-jr,2012-07-21T18:56:47Z,"- LevelDB should not be forked unless absolutely necessary; try to get Win32 support upstream first\n- If it must be forked, the fork should have its own git repository, which can be embedded using git submodules (or just pulled in by gitian for Win32)\n- Dynamic linking to OS-provided LevelDB should be supported, especially since the fork is only needed for Win32\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7155521,7155521,
luke-jr,2012-07-21T18:59:51Z,"Also, does LevelDB support in-memory db environments for the test suite?\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7155550,7155550,
justmoon,2012-07-21T23:04:20Z,"> If it must be forked, the fork should have its own git repository, which can be embedded using git submodules (or just pulled in by gitian for Win32)\n\nI'm maintaining the branch here, feel free to fork/clone: https://github.com/justmoon/leveldb-mingw\n\nIt should be pointed out that the ""fork"" doesn't actually modify a single line of code in LevelDB. LevelDB runs in Chromium (`env_chromium.cc`",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7157433,7157433,
mikehearn,2012-07-21T23:10:30Z,"I'll wait for Gavin to give his opinion on this before doing any work.\n\nHonestly, I don't care about trying to get the Windows support into upstream. The authors/maintainers of LevelDB are some of the most senior engineers at Google. They are, to put it mildly, very busy. Nor do they particularly care about making LevelDB useful outside the Chrome context. As forks go, this one is likely to not ",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7157476,7157476,
Diapolo,2012-07-21T23:26:48Z,"So should this compile fine on Windows with MinGW and the default Qt SDK GCC (which is currently still 4.4) as it is? Just interested, how much longer takes a compilation with this patch?\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7157567,7157567,
mikehearn,2012-07-22T00:03:36Z,Try it and find out :-)\n\nLevelDB is a small library. It should only take a minute or two more.\n,https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7157747,7157747,
justmoon,2012-07-22T08:25:57Z,"> So should this compile fine on Windows with MinGW and the default Qt SDK GCC (which is currently still 4.4) as it is? \n\nLevelDB's build system uses a shell script (`build_detect_platform`) to create a `build_config.mk` file. To build natively on Windows, we would need some other way to generate that file. Other than that, the code should work with MSVC and MingW-GCC - though I haven't tested i",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7159646,7159646,
mikehearn,2012-07-22T10:24:47Z,"make clean should work. If you look at the makefile diffs then I tried to ensure it'd be run at the right times, at least for the makefiles in src/. Is there a case where that doesn't work?\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7160205,7160205,
justmoon,2012-07-22T10:59:28Z,```\nmoon@clymene:/home/ubuntu/bitcoin$ make clean\n[...]\nmoon@clymene:/home/ubuntu/bitcoin$ ls src/leveldb-1.5.0/libleveldb.a \nsrc/leveldb-1.5.0/libleveldb.a\n```\n,https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7160437,7160437,
justmoon,2012-07-22T11:09:25Z,"Oh I see what you mean - I think you added it to the makefiles, but not to `bitcoin-qt.pro`, so when using qmake if you do a make clean, LevelDB won't be included.\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7160509,7160509,
mikehearn,2012-07-30T10:02:54Z,"I've just seen the same issue as Stefan reported, where sometimes hashBestChain seems to go missing from the DB. I haven't had time to investigate yet.\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7364545,7364545,
justmoon,2012-07-30T10:16:28Z,"For reference, this is the error Mike is talking about. After a clean shutdown, the next start goes like this:\n\n```\nBitcoin version v0.6.1-523-g2af483b-dirty-beta (2012-07-02 17:41:31 +0200)\nStartup time: 07/24/12 08:40:11\nDefault data directory C:\Users\moon\AppData\Roaming\Bitcoin\nUsed data directory C:\Users\moon\AppData\Roaming\Bitcoin\nBound to [::]:8333\nBound to 0.0.0.0:8333\nLoading ",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7364764,7364764,
sipa,2012-07-31T14:03:14Z,"I'd like to have all database-breaking changing merged at once, as I don't we'd like to either support many different combinations of database environments, or force users to regularly rebuild or at least reindex their database.\n\nI'm specifically referring to Jeff's attempts to split the database in several parts, and my ""ultraprune"" branch (though we should first do benchmarks to check the perf",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7399074,7399074,
mikehearn,2012-08-01T07:57:18Z,"My concern with that is we need better performance right now, because\nminers have been observed dropping transactions to ensure fast block\npropagation.\n\nPruning is a more complex change with unresolved questions like how to\nensure we have a good enough collection of archival nodes, how they are\nfound, etc. I guess it also improves performance (maybe?) due to the\nsmaller working set - combin",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7420822,7420822,
luke-jr,2012-08-01T08:03:18Z,"IMO, the solution to block propagation is to relay before doing any of the heavy per-transaction lifting anyway. Anything else just reduces the problem, but doesn't eliminate it.\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7420932,7420932,
Diapolo,2012-08-01T08:03:49Z,"As I still had not the time to test it another question. This does not replace the blk000x.dat files, which are no ""database"", right?\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7420943,7420943,
sipa,2012-08-01T10:29:45Z,"@mikehearn The reason I'm pushing ultraprune is exactly because of the performance improvements. If I disable signature checking, importing the entire blockchain (using -loadblock, a few weeks ago) took 7 minutes on my laptop (6 minutes when on tmpfs instead of disk, 5 minutes when I use an std::map-backed store instead of BDB). It was originally intended to reduce storage requirements and permit ",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7423774,7423774,
justmoon,2012-08-01T13:39:33Z,"> As I still had not the time to test it another question. This does not replace the blk000x.dat files, which are no ""database"", right?\n\nThats correct.\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7427531,7427531,
BitcoinPullTester,2012-08-08T23:20:56Z,"Automatic sanity-testing: FAILED, see http://jenkins.bluematt.me/pull-tester/1e195ded241c171cfae1353e21f13b412fffb3b5 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts\n2. It does not merge cleanly onto current master\n3.",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7600773,7600773,
mikehearn,2012-08-15T14:44:47Z,"I rebased and fixed up the unit tests that no longer worked. It uses an in-memory leveldb for the tests now. Also made qmake clean work, but it relies on a horrible hack that assumes things about how qmake works internally. I didn't find a better way to do it, unfortunately.\n\nAFAIK this now resolves all issues except for Lukes comments, but as mentioned before, I don't plan on doing anything abo",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7757667,7757667,
luke-jr,2012-08-15T14:53:37Z,"No benefit? I'd think improved maintainability and socially acceptable distribution of the client, not to mention the benefit of Win32 support for other projects if LevelDB accepts the patches upstream, are pretty obvious benefits. It shouldn't be much work, either.\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7757902,7757902,
BitcoinPullTester,2012-08-15T14:55:19Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/9211106f282e05b345e77fee608e5c832e775923 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts\n2. It does not build on either Linux i386",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7757945,7757945,
mikehearn,2012-08-15T15:19:12Z,"I think Jenkins was building an earlier version. I did two forced pushes fairly close to each other. Hopefully it'll try again soon.\n\nThe main reason I don't see much benefit is I don't really expect leveldb to change from this point onwards. If upstream doesn't change then having it be a separate library doesn't achieve much.\n\nThe patch we're using wouldn't be accepted upstream, I already ask",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7758638,7758638,
jgarzik,2012-08-15T15:45:30Z,"Most of the @luke-jr requests are not reasonable, but I do agree about wanting to avoid forking Windows support.\n\nIs there a technical reason why straight Win32 API cannot be used?  I looked through env_boost.cc and port_win.cc, and it seems like a doable task.\n\nSeveral of the functions in env_boost.cc would become quite a bit shorter, possibly just one line, if you just used the standard Wind",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7759455,7759455,
laanwj,2012-08-15T15:48:08Z,"I think it's OK to maintain our own database within the bitcoin source base. This gives more control, and prevents unexpected data format changes and incompatibility (as we have seen with BerkelyDB...).\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7759541,7759541,
justmoon,2012-08-15T16:05:42Z,"> Is there a technical reason why straight Win32 API cannot be used? I looked through env_boost.cc and port_win.cc, and it seems like a doable task.\n\nYes it is doable as evidenced by the fact that it has been done:\n\nhttp://code.google.com/p/leveldbwin/source/browse/trunk/leveldb/util/env_win32.cc?r=3\n\nThis file is woefully out of date I'm afraid. But it should allow even somebody with very l",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7760115,7760115,
sipa,2012-08-15T16:14:06Z,"I have no problem with keeping a fork in our codebase for now. The code is small, and as mentioned, it makes us safe(r) from incompatible database file changes.\n\nIf a Win32 support gets merged upstream, we can still consider switching back.\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7760425,7760425,
BitcoinPullTester,2012-08-15T16:24:52Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/ad6ba92a3b5f86c2c11b282bb98aea85371feabd for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts\n2. It does not build on either Linux i386",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7760769,7760769,
BitcoinPullTester,2012-08-15T17:57:50Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/39f12e99f7699f4ec0e3e26051dda1571de6cf84 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts\n2. It does not build on either Linux i386",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7763606,7763606,
luke-jr,2012-08-15T19:12:19Z,"@jgarzik Why is it unreasonable to keep a separate git repository for a separate codebase? It's trivial (would take about 15 minutes to setup), harmless, and has much to gain (upstream _can_ merge it, directly). If @mikehearn doesn't want to spend 15 minutes on it, I wouldn't object to doing it myself...\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7765978,7765978,
jgarzik,2012-08-15T19:36:24Z,"A separate git tree is a messy headache... but hey, LLVM does it with clang.\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7766703,7766703,
sipa,2012-08-15T19:45:13Z,"Oh I was just commenting on whether or not to maintain our own LevelDB branch. I don't mind doing it in a separate git repository, though I don't have a preference.\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7766954,7766954,
laanwj,2012-08-16T06:51:46Z,"I'd prefer to keep everything that is needed to build bitcoin together in one repository. I've worked with git submodules before, and it's a pain. I'm sure if it's a pain for me it's especially for new contributors that don't know the system. Splitting up the repository is useful for really large and modular projects, neither applies to bitcoin. \n\nWe can always remove it again _if_ upstream ever",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7778004,7778004,
luke-jr,2012-08-16T07:41:47Z,"Guess we better import libstdc++, G++, etc...\n\nUpstream doesn't even have to merge anything for most builders. The LevelDB fork is _only_ needed for Windows - which is already stupidly difficult without gitian, and gitian can easily pull in any repo it needs.\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7778750,7778750,
laanwj,2012-08-16T09:48:59Z,"If it is decided to include leveldb:\n- We should not hardcode the version number (1.5.0) inside the repository, and thus rename the directory to 'src/leveldb'\n- I'm not sure building the .a separately is needed. It makes the qmake file (at least) pretty ugly. Is it possible to include the .cc files that we need in the build project like we do with spirit-json? I'm not sure this is a good idea ei",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7781069,7781069,
jgarzik,2012-08-16T15:03:38Z,Building internal foo.a files is not ugly -- it is normal for large projects.  _And_ it usually helps improve link times.  I'm certain Qt can handle it somehow.\n,https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7788063,7788063,
laanwj,2012-08-16T15:06:34Z,This has nothing to do with qt; most bigger qt projects use cmake... qmake is pretty much a hack itself\n,https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7788172,7788172,
BitcoinPullTester,2012-08-21T13:23:32Z,"Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/ae98492e87de56f5e6c1869b1a7bb80f7b79c579 for test log.\n\nThis pull does not merge cleanly onto current master\n",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7900638,7900638,
BitcoinPullTester,2012-08-30T15:12:54Z,"Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/9ab78efc90dc8ac7380e23f6f53d5a9b71666af9 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts\n2. It does not build on either Linux i386",https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-8162593,8162593,
mikehearn,2012-09-20T16:04:20Z,Closing this as it should be merged as part of ultraprune.\n,https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-8735245,8735245,
