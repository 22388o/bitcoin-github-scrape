[
  {
    "sha": "34846825a6676bc733f089902834dd99b99ce69e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDg0NjgyNWE2Njc2YmM3MzNmMDg5OTAyODM0ZGQ5OWI5OWNlNjll",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-04-26T08:36:34Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-11-20T16:51:40Z"
      },
      "message": "extend core proxy options and handling\n\n- rework the proxy handling in init to cover more cases and work more\n  thoroughly\n- add -proxy6 to allow setting a separate SOCKS5 proxy to reach peers via\n  IPv6\n- add a hard-block for -tor to be able to remove compatibility code\n- rework proxy data-structures to allow recognition of the default proxy\n  (-proxy) to give users the ability to see, which proxy (IPv6 / Tor) is\n  derived from the default proxy and which was explicitly set\n- remove proxy info from RPC getinfo call\n- add new getproxyinfo RPC call",
      "tree": {
        "sha": "ed236d29e2eefeec27cdca03c319fb7c14e5a309",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed236d29e2eefeec27cdca03c319fb7c14e5a309"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34846825a6676bc733f089902834dd99b99ce69e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34846825a6676bc733f089902834dd99b99ce69e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34846825a6676bc733f089902834dd99b99ce69e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34846825a6676bc733f089902834dd99b99ce69e/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "d980f9b7d687a1e60eecf3691b592d9806a30f4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d980f9b7d687a1e60eecf3691b592d9806a30f4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d980f9b7d687a1e60eecf3691b592d9806a30f4a"
      }
    ],
    "stats": {
      "total": 231,
      "additions": 155,
      "deletions": 76
    },
    "files": [
      {
        "sha": "09883554952012c27710d130585f163a10f94ed8",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34846825a6676bc733f089902834dd99b99ce69e/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34846825a6676bc733f089902834dd99b99ce69e/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=34846825a6676bc733f089902834dd99b99ce69e",
        "patch": "@@ -232,6 +232,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"getconnectioncount\",     &getconnectioncount,     true,      false,      false },\n     { \"getpeerinfo\",            &getpeerinfo,            true,      false,      false },\n     { \"ping\",                   &ping,                   true,      false,      false },\n+    { \"getproxyinfo\",           &getproxyinfo,           true,      false,      false },\n     { \"addnode\",                &addnode,                true,      true,       false },\n     { \"getaddednodeinfo\",       &getaddednodeinfo,       true,      true,       false },\n     { \"getnettotals\",           &getnettotals,           true,      true,       false },"
      },
      {
        "sha": "13256f69cc575a967cf69dfbcee95841b9c9f9dc",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34846825a6676bc733f089902834dd99b99ce69e/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34846825a6676bc733f089902834dd99b99ce69e/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=34846825a6676bc733f089902834dd99b99ce69e",
        "patch": "@@ -161,6 +161,7 @@ extern void EnsureWalletIsUnlocked();\n extern json_spirit::Value getconnectioncount(const json_spirit::Array& params, bool fHelp); // in rpcnet.cpp\n extern json_spirit::Value getpeerinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value ping(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value getproxyinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value addnode(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getaddednodeinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getnettotals(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "951562f88d90fff9c86ba0efd03346c40ae07940",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 35,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34846825a6676bc733f089902834dd99b99ce69e/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34846825a6676bc733f089902834dd99b99ce69e/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=34846825a6676bc733f089902834dd99b99ce69e",
        "patch": "@@ -188,9 +188,10 @@ std::string HelpMessage(HelpMessageMode hmm)\n         strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \"\\n\";\n         strUsage += \"  -dbcache=<n>           \" + _(\"Set database cache size in megabytes (default: 25)\") + \"\\n\";\n         strUsage += \"  -timeout=<n>           \" + _(\"Specify connection timeout in milliseconds (default: 5000)\") + \"\\n\";\n-        strUsage += \"  -proxy=<ip:port>       \" + _(\"Connect through socks proxy\") + \"\\n\";\n-        strUsage += \"  -socks=<n>             \" + _(\"Select the version of socks proxy to use (4-5, default: 5)\") + \"\\n\";\n-        strUsage += \"  -onion=<ip:port>         \" + _(\"Use proxy to reach tor hidden services (default: same as -proxy)\") + \"\\n\";\n+        strUsage += \"  -proxy=<ip:port>       \" + _(\"Connect through SOCKS proxy\") + \"\\n\";\n+        strUsage += \"  -socks=<n>             \" + _(\"Select SOCKS version for -proxy (4 or 5, default: 5)\") + \"\\n\";\n+        strUsage += \"  -proxy6=<ip:port>      \" + _(\"Use separate SOCKS5 proxy to reach peers via IPv6 (default: -proxy)\") + \"\\n\";\n+        strUsage += \"  -onion=<ip:port>       \" + _(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: -proxy)\") + \"\\n\";\n         strUsage += \"  -dns                   \" + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \"\\n\";\n         strUsage += \"  -port=<port>           \" + _(\"Listen for connections on <port> (default: 8333 or testnet: 18333)\") + \"\\n\";\n         strUsage += \"  -maxconnections=<n>    \" + _(\"Maintain at most <n> connections to peers (default: 125)\") + \"\\n\";\n@@ -361,6 +362,28 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n     }\n }\n \n+// check proxies and (if they are valid) set them to be used by the client\n+bool ProxyInit(Network net, const std::string& strArg, int nSocksVersion, bool fIsDefault)\n+{\n+    // if network is not limited and -no{proxy/proxy6/tor} was NOT specified\n+    if (!IsLimited(net) && (GetArg(strArg, \"0\") != \"0\")) {\n+        CService addrProxy = CService(mapArgs[strArg], 9050);\n+\n+        // try to set address as proxy\n+        if (!SetProxy(net, addrProxy, nSocksVersion, fIsDefault))\n+            return InitError(strprintf(_(\"Invalid proxy address '%s' for: %s\"), mapArgs[strArg].c_str(), strArg.c_str()));\n+        // special-case Tor, which needs to be set as reachable manually\n+        if (net == NET_TOR)\n+            SetReachable(NET_TOR);\n+\n+        // everything ok\n+        return true;\n+    }\n+\n+    // prerequisites failed (no error for default proxy)\n+    return fIsDefault;\n+}\n+\n /** Initialize bitcoin.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n@@ -436,7 +459,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n     }\n \n     if (mapArgs.count(\"-proxy\")) {\n-        // to protect privacy, do not listen by default if a proxy server is specified\n+        // to protect privacy, do not listen by default if a default proxy server is specified\n         SoftSetBoolArg(\"-listen\", false);\n     }\n \n@@ -477,6 +500,9 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n     // Check for -debugnet (deprecated)\n     if (GetBoolArg(\"-debugnet\", false))\n         InitWarning(_(\"Warning: Deprecated argument -debugnet ignored, use -debug=net\"));\n+    // Check for -tor (deprecated) - as this is a privacy risk to continue, exit here\n+    if (GetBoolArg(\"-tor\", false))\n+        return InitError(_(\"Error: Deprecated argument -tor found, use -onion\"));\n \n     fBenchmark = GetBoolArg(\"-benchmark\", false);\n     mempool.setSanityCheck(GetBoolArg(\"-checkmempool\", RegTest()));\n@@ -663,41 +689,35 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n #endif\n #endif\n \n-    CService addrProxy;\n-    bool fProxy = false;\n-    if (mapArgs.count(\"-proxy\")) {\n-        addrProxy = CService(mapArgs[\"-proxy\"], 9050);\n-        if (!addrProxy.IsValid())\n-            return InitError(strprintf(_(\"Invalid -proxy address: '%s'\"), mapArgs[\"-proxy\"].c_str()));\n+    // check for presence of default proxy to reach peers via IPv4\n+    if (!ProxyInit(NET_IPV4, \"-proxy\", nSocksVersion, true))\n+        return false; // errors with default proxy lead to exit\n \n-        if (!IsLimited(NET_IPV4))\n-            SetProxy(NET_IPV4, addrProxy, nSocksVersion);\n-        if (nSocksVersion > 4) {\n+    if (nSocksVersion == 4) {\n+        // disable outgoing IPv6/Tor connections for default proxy (if no separate SOCKS5 proxy will be used)\n #ifdef USE_IPV6\n-            if (!IsLimited(NET_IPV6))\n-                SetProxy(NET_IPV6, addrProxy, nSocksVersion);\n+        if (!ProxyInit(NET_IPV6, \"-proxy6\", 5, false))\n+            SetLimited(NET_IPV6);\n #endif\n-            SetNameProxy(addrProxy, nSocksVersion);\n-        }\n-        fProxy = true;\n+        if (!ProxyInit(NET_TOR, \"-onion\", 5, false))\n+            SetLimited(NET_TOR);\n     }\n-\n-    // -onion can override normal proxy, -noonion disables tor entirely\n-    // -tor here is a temporary backwards compatibility measure\n-    if (mapArgs.count(\"-tor\"))\n-        printf(\"Notice: option -tor has been replaced with -onion and will be removed in a later version.\\n\");\n-    if (!(mapArgs.count(\"-onion\") && mapArgs[\"-onion\"] == \"0\") &&\n-        !(mapArgs.count(\"-tor\") && mapArgs[\"-tor\"] == \"0\") &&\n-         (fProxy || mapArgs.count(\"-onion\") || mapArgs.count(\"-tor\"))) {\n-        CService addrOnion;\n-        if (!mapArgs.count(\"-onion\") && !mapArgs.count(\"-tor\"))\n-            addrOnion = addrProxy;\n-        else\n-            addrOnion = mapArgs.count(\"-onion\")?CService(mapArgs[\"-onion\"], 9050):CService(mapArgs[\"-tor\"], 9050);\n-        if (!addrOnion.IsValid())\n-            return InitError(strprintf(_(\"Invalid -onion address: '%s'\"), mapArgs.count(\"-onion\")?mapArgs[\"-onion\"].c_str():mapArgs[\"-tor\"].c_str()));\n-        SetProxy(NET_TOR, addrOnion, 5);\n-        SetReachable(NET_TOR);\n+    else if (nSocksVersion == 5) {\n+        // enable outgoing IPv6/Tor connections for default proxy (if no separate SOCKS5 proxy will be used)\n+#ifdef USE_IPV6\n+        if (!ProxyInit(NET_IPV6, \"-proxy6\", 5, false))\n+            if (!ProxyInit(NET_IPV6, \"-proxy\", 5, true))\n+                return false;  // errors with default proxy lead to exit\n+#endif\n+        if (!ProxyInit(NET_TOR, \"-onion\", 5, false))\n+            if (!ProxyInit(NET_TOR, \"-proxy\", 5, true))\n+                return false;  // errors with default proxy lead to exit\n+\n+        // if -noproxy was not specified\n+        if (GetArg(\"-proxy\", \"0\") != \"0\")\n+            // setup default name proxy and exit on error\n+            if (!SetNameProxy(CService(mapArgs[\"-proxy\"], 9050), 5))\n+                return InitError(strprintf(_(\"Invalid name proxy address '%s' for: -proxy\"), mapArgs[\"-proxy\"].c_str()));\n     }\n \n     // see Step 2: parameter interactions for more information about these"
      },
      {
        "sha": "74abfc47ac6d7908d62713585d15aebc3f6e339d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34846825a6676bc733f089902834dd99b99ce69e/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34846825a6676bc733f089902834dd99b99ce69e/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=34846825a6676bc733f089902834dd99b99ce69e",
        "patch": "@@ -254,7 +254,7 @@ class CNode\n     int64_t nPingUsecStart;\n     int64_t nPingUsecTime;\n     bool fPingQueued;\n-    \n+\n     CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn = \"\", bool fInboundIn=false) : ssSend(SER_NETWORK, INIT_PROTO_VERSION)\n     {\n         nServices = 0;"
      },
      {
        "sha": "a84ee60051e5071a6bdde6c521efd5f0bac54d3a",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34846825a6676bc733f089902834dd99b99ce69e/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34846825a6676bc733f089902834dd99b99ce69e/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=34846825a6676bc733f089902834dd99b99ce69e",
        "patch": "@@ -25,7 +25,7 @@ using namespace std;\n \n // Settings\n static proxyType proxyInfo[NET_MAX];\n-static proxyType nameproxyInfo;\n+static nameproxyType nameproxyInfo;\n static CCriticalSection cs_proxyInfos;\n int nConnectTimeout = 5000;\n bool fNameLookup = false;\n@@ -424,21 +424,23 @@ bool static ConnectSocketDirectly(const CService &addrConnect, SOCKET& hSocketRe\n     return true;\n }\n \n-bool SetProxy(enum Network net, CService addrProxy, int nSocksVersion) {\n+bool SetProxy(enum Network net, CService addrProxy, int nSocksVersion, bool fIsDefault) {\n     assert(net >= 0 && net < NET_MAX);\n     if (nSocksVersion != 0 && nSocksVersion != 4 && nSocksVersion != 5)\n         return false;\n     if (nSocksVersion != 0 && !addrProxy.IsValid())\n         return false;\n     LOCK(cs_proxyInfos);\n-    proxyInfo[net] = std::make_pair(addrProxy, nSocksVersion);\n+    proxyInfo[net].addrProxy = addrProxy;\n+    proxyInfo[net].nSocksVersion = nSocksVersion;\n+    proxyInfo[net].fIsDefault = fIsDefault;\n     return true;\n }\n \n bool GetProxy(enum Network net, proxyType &proxyInfoOut) {\n     assert(net >= 0 && net < NET_MAX);\n     LOCK(cs_proxyInfos);\n-    if (!proxyInfo[net].second)\n+    if (!proxyInfo[net].nSocksVersion)\n         return false;\n     proxyInfoOut = proxyInfo[net];\n     return true;\n@@ -454,7 +456,7 @@ bool SetNameProxy(CService addrProxy, int nSocksVersion) {\n     return true;\n }\n \n-bool GetNameProxy(proxyType &nameproxyInfoOut) {\n+bool GetNameProxy(nameproxyType &nameproxyInfoOut) {\n     LOCK(cs_proxyInfos);\n     if (!nameproxyInfo.second)\n         return false;\n@@ -470,7 +472,7 @@ bool HaveNameProxy() {\n bool IsProxy(const CNetAddr &addr) {\n     LOCK(cs_proxyInfos);\n     for (int i = 0; i < NET_MAX; i++) {\n-        if (proxyInfo[i].second && (addr == (CNetAddr)proxyInfo[i].first))\n+        if (proxyInfo[i].nSocksVersion && (addr == (CNetAddr)proxyInfo[i].addrProxy))\n             return true;\n     }\n     return false;\n@@ -487,11 +489,11 @@ bool ConnectSocket(const CService &addrDest, SOCKET& hSocketRet, int nTimeout)\n     SOCKET hSocket = INVALID_SOCKET;\n \n     // first connect to proxy server\n-    if (!ConnectSocketDirectly(proxy.first, hSocket, nTimeout))\n+    if (!ConnectSocketDirectly(proxy.addrProxy, hSocket, nTimeout))\n         return false;\n \n     // do socks negotiation\n-    switch (proxy.second) {\n+    switch (proxy.nSocksVersion) {\n     case 4:\n         if (!Socks4(addrDest, hSocket))\n             return false;\n@@ -516,7 +518,7 @@ bool ConnectSocketByName(CService &addr, SOCKET& hSocketRet, const char *pszDest\n \n     SOCKET hSocket = INVALID_SOCKET;\n \n-    proxyType nameproxy;\n+    nameproxyType nameproxy;\n     GetNameProxy(nameproxy);\n \n     CService addrResolved(CNetAddr(strDest, fNameLookup && !nameproxy.second), port);"
      },
      {
        "sha": "b248b845eb054759927da0416aca40b91b295415",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34846825a6676bc733f089902834dd99b99ce69e/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34846825a6676bc733f089902834dd99b99ce69e/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=34846825a6676bc733f089902834dd99b99ce69e",
        "patch": "@@ -137,14 +137,20 @@ class CService : public CNetAddr\n             )\n };\n \n-typedef std::pair<CService, int> proxyType;\n+typedef struct proxyType {\n+    CService addrProxy;\n+    int nSocksVersion;\n+    bool fIsDefault;\n+} proxyType;\n+\n+typedef std::pair<CService, int> nameproxyType;\n \n enum Network ParseNetwork(std::string net);\n void SplitHostPort(std::string in, int &portOut, std::string &hostOut);\n-bool SetProxy(enum Network net, CService addrProxy, int nSocksVersion = 5);\n+bool SetProxy(enum Network net, CService addrProxy, int nSocksVersion, bool fIsDefault);\n bool GetProxy(enum Network net, proxyType &proxyInfoOut);\n bool IsProxy(const CNetAddr &addr);\n-bool SetNameProxy(CService addrProxy, int nSocksVersion = 5);\n+bool SetNameProxy(CService addrProxy, int nSocksVersion);\n bool HaveNameProxy();\n bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions = 0, bool fAllowLookup = true);\n bool LookupHostNumeric(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions = 0);"
      },
      {
        "sha": "21dc13f2444f15566e7cd13ab4d63073a274ca14",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 14,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34846825a6676bc733f089902834dd99b99ce69e/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34846825a6676bc733f089902834dd99b99ce69e/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=34846825a6676bc733f089902834dd99b99ce69e",
        "patch": "@@ -37,11 +37,11 @@ bool static ApplyProxySettings()\n     if (nSocksVersion && !addrProxy.IsValid())\n         return false;\n     if (!IsLimited(NET_IPV4))\n-        SetProxy(NET_IPV4, addrProxy, nSocksVersion);\n+        SetProxy(NET_IPV4, addrProxy, nSocksVersion, true);\n     if (nSocksVersion > 4) {\n #ifdef USE_IPV6\n         if (!IsLimited(NET_IPV6))\n-            SetProxy(NET_IPV6, addrProxy, nSocksVersion);\n+            SetProxy(NET_IPV6, addrProxy, nSocksVersion, true);\n #endif\n         SetNameProxy(addrProxy, nSocksVersion);\n     }\n@@ -63,12 +63,15 @@ void OptionsModel::Init()\n \n     // These are shared with core Bitcoin; we want\n     // command-line options to override the GUI settings:\n+\n+    // Network\n     if (settings.contains(\"fUseUPnP\"))\n         SoftSetBoolArg(\"-upnp\", settings.value(\"fUseUPnP\").toBool());\n     if (settings.contains(\"addrProxy\") && settings.value(\"fUseProxy\").toBool())\n         SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString());\n     if (settings.contains(\"nSocksVersion\") && settings.value(\"fUseProxy\").toBool())\n         SoftSetArg(\"-socks\", settings.value(\"nSocksVersion\").toString().toStdString());\n+    // Display\n     if (!language.isEmpty())\n         SoftSetArg(\"-lang\", language.toStdString());\n }\n@@ -175,28 +178,30 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n #endif\n         case MinimizeOnClose:\n             return QVariant(fMinimizeOnClose);\n+\n+        // base proxy\n         case ProxyUse: {\n             proxyType proxy;\n             return QVariant(GetProxy(NET_IPV4, proxy));\n         }\n         case ProxyIP: {\n             proxyType proxy;\n             if (GetProxy(NET_IPV4, proxy))\n-                return QVariant(QString::fromStdString(proxy.first.ToStringIP()));\n+                return QVariant(QString::fromStdString(proxy.addrProxy.ToStringIP()));\n             else\n                 return QVariant(QString::fromStdString(\"127.0.0.1\"));\n         }\n         case ProxyPort: {\n             proxyType proxy;\n             if (GetProxy(NET_IPV4, proxy))\n-                return QVariant(proxy.first.GetPort());\n+                return QVariant(proxy.addrProxy.GetPort());\n             else\n                 return QVariant(9050);\n         }\n         case ProxySocksVersion: {\n             proxyType proxy;\n             if (GetProxy(NET_IPV4, proxy))\n-                return QVariant(proxy.second);\n+                return QVariant(proxy.nSocksVersion);\n             else\n                 return QVariant(5);\n         }\n@@ -240,38 +245,39 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             fMinimizeOnClose = value.toBool();\n             settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n             break;\n+        // base proxy\n         case ProxyUse:\n             settings.setValue(\"fUseProxy\", value.toBool());\n             successful = ApplyProxySettings();\n             break;\n         case ProxyIP: {\n             proxyType proxy;\n-            proxy.first = CService(\"127.0.0.1\", 9050);\n+            proxy.addrProxy = CService(\"127.0.0.1\", 9050);\n             GetProxy(NET_IPV4, proxy);\n \n             CNetAddr addr(value.toString().toStdString());\n-            proxy.first.SetIP(addr);\n-            settings.setValue(\"addrProxy\", proxy.first.ToStringIPPort().c_str());\n+            proxy.addrProxy.SetIP(addr);\n+            settings.setValue(\"addrProxy\", proxy.addrProxy.ToStringIPPort().c_str());\n             successful = ApplyProxySettings();\n         }\n         break;\n         case ProxyPort: {\n             proxyType proxy;\n-            proxy.first = CService(\"127.0.0.1\", 9050);\n+            proxy.addrProxy = CService(\"127.0.0.1\", 9050);\n             GetProxy(NET_IPV4, proxy);\n \n-            proxy.first.SetPort(value.toInt());\n-            settings.setValue(\"addrProxy\", proxy.first.ToStringIPPort().c_str());\n+            proxy.addrProxy.SetPort(value.toInt());\n+            settings.setValue(\"addrProxy\", proxy.addrProxy.ToStringIPPort().c_str());\n             successful = ApplyProxySettings();\n         }\n         break;\n         case ProxySocksVersion: {\n             proxyType proxy;\n-            proxy.second = 5;\n+            proxy.nSocksVersion = 5;\n             GetProxy(NET_IPV4, proxy);\n \n-            proxy.second = value.toInt();\n-            settings.setValue(\"nSocksVersion\", proxy.second);\n+            proxy.nSocksVersion = value.toInt();\n+            settings.setValue(\"nSocksVersion\", proxy.nSocksVersion);\n             successful = ApplyProxySettings();\n         }\n         break;"
      },
      {
        "sha": "04c1386971161f83e3b5ec65c353912ddc88ff67",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34846825a6676bc733f089902834dd99b99ce69e/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34846825a6676bc733f089902834dd99b99ce69e/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=34846825a6676bc733f089902834dd99b99ce69e",
        "patch": "@@ -328,3 +328,51 @@ Value getnettotals(const Array& params, bool fHelp)\n     obj.push_back(Pair(\"timemillis\", static_cast<boost::int64_t>(GetTimeMillis())));\n     return obj;\n }\n+\n+Value getproxyinfo(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 0)\n+        throw runtime_error(\n+            \"getproxyinfo\\n\"\n+            \"Returns information about used proxy servers.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"proxy-default-ip\\\": xxxxx,                 (string)  ip of default proxy server\\n\"\n+            \"  \\\"proxy-default-socks\\\": n,                  (numeric) socks version of above proxy server\\n\"\n+#ifdef USE_IPV6\n+            \"  \\\"proxy-ipv6-ip\\\": xxxxx,                    (string)  ip of proxy server for reaching peers via ipv6\\n\"\n+            \"  \\\"proxy-ipv6-socks\\\": n,                     (numeric) socks version of above proxy server\\n\"\n+            \"  \\\"proxy-ipv6-from-default\\\": true|false,     (boolean) is ip derived from default proxy server\\n\"\n+#endif\n+            \"  \\\"proxy-onion-ip\\\": xxxxxx,                  (string)  ip of proxy server for reaching peers via tor hidden services\\n\"\n+            \"  \\\"proxy-onion-socks\\\": n,                    (numeric) socks version of above proxy server\\n\"\n+            \"  \\\"proxy-onion-from-default\\\": true|false,    (boolean) is ip derived from default proxy server\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getproxyinfo\", \"\")\n+            + HelpExampleRpc(\"getproxyinfo\", \"\")\n+        );\n+\n+    // collect current proxy settings\n+    proxyType proxyIpv4;\n+    GetProxy(NET_IPV4, proxyIpv4);\n+#ifdef USE_IPV6\n+    proxyType proxyIpv6;\n+    GetProxy(NET_IPV6, proxyIpv6);\n+#endif\n+    proxyType proxyTor;\n+    GetProxy(NET_TOR, proxyTor);\n+\n+    Object obj;\n+    obj.push_back(Pair(\"proxy-default-ip\",            proxyIpv4.addrProxy.IsValid() ? proxyIpv4.addrProxy.ToStringIPPort() : \"none\"));\n+    obj.push_back(Pair(\"proxy-default-socks\",         proxyIpv4.addrProxy.IsValid() ? proxyIpv4.nSocksVersion : 0));\n+#ifdef USE_IPV6\n+    obj.push_back(Pair(\"proxy-ipv6-ip\",               proxyIpv6.addrProxy.IsValid() ? proxyIpv6.addrProxy.ToStringIPPort() : \"none\"));\n+    obj.push_back(Pair(\"proxy-ipv6-socks\",            proxyIpv6.addrProxy.IsValid() ? proxyIpv6.nSocksVersion : 0));\n+    obj.push_back(Pair(\"proxy-ipv6-from-default\",     proxyIpv6.fIsDefault));\n+#endif\n+    obj.push_back(Pair(\"proxy-onion-ip\",              proxyTor.addrProxy.IsValid() ? proxyTor.addrProxy.ToStringIPPort() : \"none\"));\n+    obj.push_back(Pair(\"proxy-onion-socks\",           proxyTor.addrProxy.IsValid() ? proxyTor.nSocksVersion : 0));\n+    obj.push_back(Pair(\"proxy-onion-from-default\",    proxyTor.fIsDefault));\n+    return obj;\n+}"
      },
      {
        "sha": "6fd054b2c7f5ab4a353fbcd26ce427e78f9f08c8",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34846825a6676bc733f089902834dd99b99ce69e/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34846825a6676bc733f089902834dd99b99ce69e/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=34846825a6676bc733f089902834dd99b99ce69e",
        "patch": "@@ -92,7 +92,6 @@ Value getinfo(const Array& params, bool fHelp)\n             \"  \\\"blocks\\\": xxxxxx,           (numeric) the current number of blocks processed in the server\\n\"\n             \"  \\\"timeoffset\\\": xxxxx,        (numeric) the time offset\\n\"\n             \"  \\\"connections\\\": xxxxx,       (numeric) the number of connections\\n\"\n-            \"  \\\"proxy\\\": \\\"host:port\\\",     (string, optional) the proxy used by the server\\n\"\n             \"  \\\"difficulty\\\": xxxxxx,       (numeric) the current difficulty\\n\"\n             \"  \\\"testnet\\\": true|false,      (boolean) if the server is using testnet or not\\n\"\n             \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n@@ -106,30 +105,26 @@ Value getinfo(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getinfo\", \"\")\n         );\n \n-    proxyType proxy;\n-    GetProxy(NET_IPV4, proxy);\n-\n     Object obj;\n-    obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n-    obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n+    obj.push_back(Pair(\"version\",           (int)CLIENT_VERSION));\n+    obj.push_back(Pair(\"protocolversion\",   (int)PROTOCOL_VERSION));\n     if (pwalletMain) {\n         obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n         obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n     }\n-    obj.push_back(Pair(\"blocks\",        (int)chainActive.Height()));\n-    obj.push_back(Pair(\"timeoffset\",    (boost::int64_t)GetTimeOffset()));\n-    obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n-    obj.push_back(Pair(\"proxy\",         (proxy.first.IsValid() ? proxy.first.ToStringIPPort() : string())));\n-    obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n-    obj.push_back(Pair(\"testnet\",       TestNet()));\n+    obj.push_back(Pair(\"blocks\",            (int)chainActive.Height()));\n+    obj.push_back(Pair(\"timeoffset\",        (boost::int64_t)GetTimeOffset()));\n+    obj.push_back(Pair(\"connections\",       (int)vNodes.size()));\n+    obj.push_back(Pair(\"difficulty\",        (double)GetDifficulty()));\n+    obj.push_back(Pair(\"testnet\",           TestNet()));\n     if (pwalletMain) {\n         obj.push_back(Pair(\"keypoololdest\", (boost::int64_t)pwalletMain->GetOldestKeyPoolTime()));\n         obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n     }\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(nTransactionFee)));\n+    obj.push_back(Pair(\"paytxfee\",          ValueFromAmount(nTransactionFee)));\n     if (pwalletMain && pwalletMain->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", (boost::int64_t)nWalletUnlockTime));\n-    obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n+    obj.push_back(Pair(\"errors\",            GetWarnings(\"statusbar\")));\n     return obj;\n }\n "
      }
    ]
  },
  {
    "sha": "f873f7abb8ebf4774b53275aa9c0b5f907130730",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODczZjdhYmI4ZWJmNDc3NGI1MzI3NWFhOWMwYjVmOTA3MTMwNzMw",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-09-14T10:09:15Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2013-11-20T16:55:10Z"
      },
      "message": "Bitcoin-Qt: massive options/settings handling rework\n\n- add new options for database cache and script verification threads\n- add new options for setting separate IPv6 and Tor proxy and show for\n  which networks the base proxy is used currently\n- add label which displays options that are overridden by command-line\n  parameters\n- proxy settings are not applied on-the-fly anymore and require a\n  client restart (ApplyProxySettings() was removed and was not working\n  very well anyway)\n- re-work options reset and require a client shutdown (as it is much\n  easier to do it this way without having to mess with what can be\n  changed on-the-fly and what needs a restart anyway)\n- options reset now writes default values for every single option\n- when changing an option which requires a client restart display a 10\n  second warning message in statusLabel (via a QTimer)\n- when applying the changes via ok change that to a persistent message,\n  which is displayed even after closing optionsdialog and re-open it,\n  when no client restart was made\n- remove dialog boxes used when changing language or proxy settings\n- add setRestartRequired() and isRestartRequired() to OptionsModel and\n  use the set function when updating options to signal OptionsDialog when\n  a restart is needed\n- resize optionsdialog a little and add some min sizes for certain GUI\n  elements\n- remove apply button from optionsdialog\n- save and restore optionsdialog window position\n- update nTransactionFee in QSettings with a set -paytxfee value when\n  opening optionsdialog (I'm not sure about this yet, perhaps revert\n  to not updating QSettings and just display current -paytxfee value in\n  optionsdialog.)",
      "tree": {
        "sha": "994cd9f469c8ab108f5f718db59fbf8c4849e06a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/994cd9f469c8ab108f5f718db59fbf8c4849e06a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f873f7abb8ebf4774b53275aa9c0b5f907130730",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f873f7abb8ebf4774b53275aa9c0b5f907130730",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f873f7abb8ebf4774b53275aa9c0b5f907130730",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f873f7abb8ebf4774b53275aa9c0b5f907130730/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "34846825a6676bc733f089902834dd99b99ce69e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34846825a6676bc733f089902834dd99b99ce69e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34846825a6676bc733f089902834dd99b99ce69e"
      }
    ],
    "stats": {
      "total": 1119,
      "additions": 869,
      "deletions": 250
    },
    "files": [
      {
        "sha": "8fe36bc445664d8f5b24a722908ad05007079275",
        "filename": "src/qt/forms/optionsdialog.ui",
        "status": "modified",
        "additions": 443,
        "deletions": 44,
        "changes": 487,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f873f7abb8ebf4774b53275aa9c0b5f907130730/src/qt/forms/optionsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f873f7abb8ebf4774b53275aa9c0b5f907130730/src/qt/forms/optionsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/optionsdialog.ui?ref=f873f7abb8ebf4774b53275aa9c0b5f907130730",
        "patch": "@@ -6,8 +6,8 @@\n    <rect>\n     <x>0</x>\n     <y>0</y>\n-    <width>540</width>\n-    <height>380</height>\n+    <width>560</width>\n+    <height>400</height>\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n@@ -19,9 +19,6 @@\n   <layout class=\"QVBoxLayout\" name=\"verticalLayout\">\n    <item>\n     <widget class=\"QTabWidget\" name=\"tabWidget\">\n-     <property name=\"tabPosition\">\n-      <enum>QTabWidget::North</enum>\n-     </property>\n      <property name=\"currentIndex\">\n       <number>0</number>\n      </property>\n@@ -86,21 +83,34 @@\n          </property>\n         </widget>\n        </item>\n-       <item>\n-        <spacer name=\"verticalSpacer_Main\">\n-         <property name=\"orientation\">\n-          <enum>Qt::Vertical</enum>\n-         </property>\n-         <property name=\"sizeHint\" stdset=\"0\">\n-          <size>\n-           <width>20</width>\n-           <height>40</height>\n-          </size>\n-         </property>\n-        </spacer>\n-       </item>\n        <item>\n         <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2_Main\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"databaseCacheLabel\">\n+           <property name=\"text\">\n+            <string>Size of &amp;database cache</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>databaseCache</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QSpinBox\" name=\"databaseCache\">\n+           <property name=\"toolTip\">\n+            <string>Set database cache size in megabytes (default: 25)</string>\n+           </property>\n+           <property name=\"maximum\">\n+            <number>1024</number>\n+           </property>\n+           <property name=\"value\">\n+            <number>25</number>\n+           </property>\n+          </widget>\n+         </item>\n          <item>\n           <spacer name=\"horizontalSpacer_2_Main\">\n            <property name=\"orientation\">\n@@ -114,21 +124,64 @@\n            </property>\n           </spacer>\n          </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_3_Main\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"threadsScriptVerifLabel\">\n+           <property name=\"text\">\n+            <string>Number of script &amp;verification threads</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>threadsScriptVerif</cstring>\n+           </property>\n+          </widget>\n+         </item>\n          <item>\n-          <widget class=\"QPushButton\" name=\"resetButton\">\n+          <widget class=\"QSpinBox\" name=\"threadsScriptVerif\">\n            <property name=\"toolTip\">\n-            <string>Reset all client options to default.</string>\n+            <string>Set the number of script verification threads (up to 16, 0 = auto, &lt;0 = leave that many cores free, default: 0)</string>\n            </property>\n-           <property name=\"text\">\n-            <string>&amp;Reset Options</string>\n+           <property name=\"minimum\">\n+            <number>-16</number>\n            </property>\n-           <property name=\"autoDefault\">\n-            <bool>false</bool>\n+           <property name=\"maximum\">\n+            <number>16</number>\n            </property>\n           </widget>\n          </item>\n+         <item>\n+          <spacer name=\"horizontalSpacer_3_Main\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Horizontal</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>40</width>\n+             <height>20</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n         </layout>\n        </item>\n+       <item>\n+        <spacer name=\"verticalSpacer_Main\">\n+         <property name=\"orientation\">\n+          <enum>Qt::Vertical</enum>\n+         </property>\n+         <property name=\"sizeHint\" stdset=\"0\">\n+          <size>\n+           <width>20</width>\n+           <height>40</height>\n+          </size>\n+         </property>\n+        </spacer>\n+       </item>\n       </layout>\n      </widget>\n      <widget class=\"QWidget\" name=\"tabNetwork\">\n@@ -149,15 +202,15 @@\n        <item>\n         <widget class=\"QCheckBox\" name=\"connectSocks\">\n          <property name=\"toolTip\">\n-          <string>Connect to the Bitcoin network through a SOCKS proxy (e.g. when connecting through Tor).</string>\n+          <string>Connect to the Bitcoin network through a SOCKS proxy.</string>\n          </property>\n          <property name=\"text\">\n-          <string>&amp;Connect through SOCKS proxy:</string>\n+          <string>&amp;Connect through SOCKS proxy (base):</string>\n          </property>\n         </widget>\n        </item>\n        <item>\n-        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_Network\">\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_1_Network\">\n          <item>\n           <widget class=\"QLabel\" name=\"proxyIpLabel\">\n            <property name=\"text\">\n@@ -173,14 +226,20 @@\n          </item>\n          <item>\n           <widget class=\"QValidatedLineEdit\" name=\"proxyIp\">\n+           <property name=\"minimumSize\">\n+            <size>\n+             <width>140</width>\n+             <height>0</height>\n+            </size>\n+           </property>\n            <property name=\"maximumSize\">\n             <size>\n              <width>140</width>\n              <height>16777215</height>\n             </size>\n            </property>\n            <property name=\"toolTip\">\n-            <string>IP address of the proxy (e.g. 127.0.0.1)</string>\n+            <string>IP address of the proxy (e.g. IPv4: 127.0.0.1 / IPv6: ::1)</string>\n            </property>\n           </widget>\n          </item>\n@@ -199,6 +258,12 @@\n          </item>\n          <item>\n           <widget class=\"QLineEdit\" name=\"proxyPort\">\n+           <property name=\"minimumSize\">\n+            <size>\n+             <width>55</width>\n+             <height>0</height>\n+            </size>\n+           </property>\n            <property name=\"maximumSize\">\n             <size>\n              <width>55</width>\n@@ -231,7 +296,285 @@\n           </widget>\n          </item>\n          <item>\n-          <spacer name=\"horizontalSpacer_Network\">\n+          <spacer name=\"horizontalSpacer_1_Network\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Horizontal</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>40</width>\n+             <height>20</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_2_Network\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyActiveNets\">\n+           <property name=\"text\">\n+            <string>Used for reaching peers via:</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QCheckBox\" name=\"proxyReachIPv4\">\n+           <property name=\"enabled\">\n+            <bool>false</bool>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Shows, if the supplied (base) SOCKS proxy is used to reach peers via this network type.</string>\n+           </property>\n+           <property name=\"text\">\n+            <string/>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyReachIPv4Label\">\n+           <property name=\"text\">\n+            <string>IPv4</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QCheckBox\" name=\"proxyReachIPv6\">\n+           <property name=\"enabled\">\n+            <bool>false</bool>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Shows, if the supplied (base) SOCKS proxy is used to reach peers via this network type.</string>\n+           </property>\n+           <property name=\"text\">\n+            <string/>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyReachIPv6Label\">\n+           <property name=\"text\">\n+            <string>IPv6</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QCheckBox\" name=\"proxyReachTor\">\n+           <property name=\"enabled\">\n+            <bool>false</bool>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Shows, if the supplied (base) SOCKS proxy is used to reach peers via this network type.</string>\n+           </property>\n+           <property name=\"text\">\n+            <string/>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyReachTorLabel\">\n+           <property name=\"text\">\n+            <string>Tor</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <spacer name=\"horizontalSpacer_2_Network\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Horizontal</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>40</width>\n+             <height>20</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <widget class=\"QCheckBox\" name=\"connectSocksIpv6\">\n+         <property name=\"toolTip\">\n+          <string>Connect to the Bitcoin network through a separate SOCKS5 proxy for IPv6 peers.</string>\n+         </property>\n+         <property name=\"text\">\n+          <string>Use separate SOCKS5 proxy to reach &amp;IPv6 peers:</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_3_Network\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyIpv6Label\">\n+           <property name=\"text\">\n+            <string>Proxy &amp;IP:</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>proxyIpv6</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QValidatedLineEdit\" name=\"proxyIpv6\">\n+           <property name=\"minimumSize\">\n+            <size>\n+             <width>140</width>\n+             <height>0</height>\n+            </size>\n+           </property>\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>140</width>\n+             <height>16777215</height>\n+            </size>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>IP address of the proxy (e.g. IPv4: 127.0.0.1 / IPv6: ::1)</string>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyPortIpv6Label\">\n+           <property name=\"text\">\n+            <string>&amp;Port:</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>proxyPortIpv6</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLineEdit\" name=\"proxyPortIpv6\">\n+           <property name=\"minimumSize\">\n+            <size>\n+             <width>55</width>\n+             <height>0</height>\n+            </size>\n+           </property>\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>55</width>\n+             <height>16777215</height>\n+            </size>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Port of the proxy (e.g. 9050)</string>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <spacer name=\"horizontalSpacer_3_Network\">\n+           <property name=\"orientation\">\n+            <enum>Qt::Horizontal</enum>\n+           </property>\n+           <property name=\"sizeHint\" stdset=\"0\">\n+            <size>\n+             <width>40</width>\n+             <height>20</height>\n+            </size>\n+           </property>\n+          </spacer>\n+         </item>\n+        </layout>\n+       </item>\n+       <item>\n+        <widget class=\"QCheckBox\" name=\"connectSocksTor\">\n+         <property name=\"toolTip\">\n+          <string>Connect to the Bitcoin network through a separate SOCKS5 proxy for hidden services.</string>\n+         </property>\n+         <property name=\"text\">\n+          <string>Use separate SOCKS5 proxy to reach &amp;Tor hidden services:</string>\n+         </property>\n+        </widget>\n+       </item>\n+       <item>\n+        <layout class=\"QHBoxLayout\" name=\"horizontalLayout_4_Network\">\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyIpTorLabel\">\n+           <property name=\"text\">\n+            <string>Proxy &amp;IP:</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>proxyIpTor</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QValidatedLineEdit\" name=\"proxyIpTor\">\n+           <property name=\"minimumSize\">\n+            <size>\n+             <width>140</width>\n+             <height>0</height>\n+            </size>\n+           </property>\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>140</width>\n+             <height>16777215</height>\n+            </size>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>IP address of the proxy (e.g. IPv4: 127.0.0.1 / IPv6: ::1)</string>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLabel\" name=\"proxyPortTorLabel\">\n+           <property name=\"text\">\n+            <string>&amp;Port:</string>\n+           </property>\n+           <property name=\"textFormat\">\n+            <enum>Qt::PlainText</enum>\n+           </property>\n+           <property name=\"buddy\">\n+            <cstring>proxyPortTor</cstring>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <widget class=\"QLineEdit\" name=\"proxyPortTor\">\n+           <property name=\"minimumSize\">\n+            <size>\n+             <width>55</width>\n+             <height>0</height>\n+            </size>\n+           </property>\n+           <property name=\"maximumSize\">\n+            <size>\n+             <width>55</width>\n+             <height>16777215</height>\n+            </size>\n+           </property>\n+           <property name=\"toolTip\">\n+            <string>Port of the proxy (e.g. 9050)</string>\n+           </property>\n+          </widget>\n+         </item>\n+         <item>\n+          <spacer name=\"horizontalSpacer_4_Network\">\n            <property name=\"orientation\">\n             <enum>Qt::Horizontal</enum>\n            </property>\n@@ -390,6 +733,65 @@\n      </widget>\n     </widget>\n    </item>\n+   <item>\n+    <widget class=\"QFrame\" name=\"frame\">\n+     <layout class=\"QVBoxLayout\" name=\"verticalLayout_Bottom\">\n+      <item>\n+       <layout class=\"QHBoxLayout\" name=\"horizontalLayout_Bottom\">\n+        <item>\n+         <widget class=\"QLabel\" name=\"overriddenByCommandLineInfoLabel\">\n+          <property name=\"text\">\n+           <string>Active command-line options that override above options: </string>\n+          </property>\n+          <property name=\"textFormat\">\n+           <enum>Qt::PlainText</enum>\n+          </property>\n+         </widget>\n+        </item>\n+        <item>\n+         <spacer name=\"horizontalSpacer_Bottom\">\n+          <property name=\"orientation\">\n+           <enum>Qt::Horizontal</enum>\n+          </property>\n+          <property name=\"sizeHint\" stdset=\"0\">\n+           <size>\n+            <width>40</width>\n+            <height>20</height>\n+           </size>\n+          </property>\n+         </spacer>\n+        </item>\n+        <item>\n+         <widget class=\"QPushButton\" name=\"resetButton\">\n+          <property name=\"toolTip\">\n+           <string>Reset all client options to default.</string>\n+          </property>\n+          <property name=\"text\">\n+           <string>&amp;Reset Options</string>\n+          </property>\n+          <property name=\"autoDefault\">\n+           <bool>false</bool>\n+          </property>\n+         </widget>\n+        </item>\n+       </layout>\n+      </item>\n+      <item>\n+       <widget class=\"QLabel\" name=\"overriddenByCommandLineLabel\">\n+        <property name=\"text\">\n+         <string/>\n+        </property>\n+        <property name=\"textFormat\">\n+         <enum>Qt::PlainText</enum>\n+        </property>\n+        <property name=\"wordWrap\">\n+         <bool>true</bool>\n+        </property>\n+       </widget>\n+      </item>\n+     </layout>\n+    </widget>\n+   </item>\n    <item>\n     <layout class=\"QHBoxLayout\" name=\"horizontalLayout_Buttons\">\n      <item>\n@@ -407,6 +809,12 @@\n      </item>\n      <item>\n       <widget class=\"QLabel\" name=\"statusLabel\">\n+       <property name=\"minimumSize\">\n+        <size>\n+         <width>200</width>\n+         <height>0</height>\n+        </size>\n+       </property>\n        <property name=\"font\">\n         <font>\n          <weight>75</weight>\n@@ -454,16 +862,6 @@\n        </property>\n       </widget>\n      </item>\n-     <item>\n-      <widget class=\"QPushButton\" name=\"applyButton\">\n-       <property name=\"text\">\n-        <string>&amp;Apply</string>\n-       </property>\n-       <property name=\"autoDefault\">\n-        <bool>false</bool>\n-       </property>\n-      </widget>\n-     </item>\n     </layout>\n    </item>\n   </layout>\n@@ -473,17 +871,18 @@\n    <class>BitcoinAmountField</class>\n    <extends>QLineEdit</extends>\n    <header>bitcoinamountfield.h</header>\n-  </customwidget>\n-  <customwidget>\n-   <class>QValueComboBox</class>\n-   <extends>QComboBox</extends>\n-   <header>qvaluecombobox.h</header>\n+   <container>1</container>\n   </customwidget>\n   <customwidget>\n    <class>QValidatedLineEdit</class>\n    <extends>QLineEdit</extends>\n    <header>qvalidatedlineedit.h</header>\n   </customwidget>\n+  <customwidget>\n+   <class>QValueComboBox</class>\n+   <extends>QComboBox</extends>\n+   <header>qvaluecombobox.h</header>\n+  </customwidget>\n  </customwidgets>\n  <resources/>\n  <connections/>"
      },
      {
        "sha": "f015d0ae055188ab95584c6fd6f7f6af2b29df58",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 115,
        "deletions": 72,
        "changes": 187,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f873f7abb8ebf4774b53275aa9c0b5f907130730/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f873f7abb8ebf4774b53275aa9c0b5f907130730/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=f873f7abb8ebf4774b53275aa9c0b5f907130730",
        "patch": "@@ -10,6 +10,7 @@\n #include \"ui_optionsdialog.h\"\n \n #include \"bitcoinunits.h\"\n+#include \"guiutil.h\"\n #include \"monitoreddatamapper.h\"\n #include \"optionsmodel.h\"\n \n@@ -19,17 +20,20 @@\n #include <QIntValidator>\n #include <QLocale>\n #include <QMessageBox>\n+#include <QTimer>\n \n OptionsDialog::OptionsDialog(QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::OptionsDialog),\n     model(0),\n     mapper(0),\n-    fRestartWarningDisplayed_Proxy(false),\n-    fRestartWarningDisplayed_Lang(false),\n-    fProxyIpValid(true)\n+    fProxyIpsValid(true)\n {\n     ui->setupUi(this);\n+    GUIUtil::restoreWindowGeometry(\"nOptionsDialogWindow\", this->size(), this);\n+\n+    /* Main elements init */\n+    ui->databaseCache->setMaximum(sizeof(void*) > 4 ? 4096 : 1024);\n \n     /* Network elements init */\n #ifndef USE_UPNP\n@@ -40,17 +44,35 @@ OptionsDialog::OptionsDialog(QWidget *parent) :\n     ui->proxyPort->setEnabled(false);\n     ui->proxyPort->setValidator(new QIntValidator(1, 65535, this));\n \n+    /** SOCKS version is only selectable for base proxy and is always 5 for IPv6 and Tor */\n     ui->socksVersion->setEnabled(false);\n     ui->socksVersion->addItem(\"5\", 5);\n     ui->socksVersion->addItem(\"4\", 4);\n     ui->socksVersion->setCurrentIndex(0);\n \n+    ui->proxyIpv6->setEnabled(false);\n+    ui->proxyPortIpv6->setEnabled(false);\n+    ui->proxyPortIpv6->setValidator(new QIntValidator(1, 65535, this));\n+\n+    ui->proxyIpTor->setEnabled(false);\n+    ui->proxyPortTor->setEnabled(false);\n+    ui->proxyPortTor->setValidator(new QIntValidator(1, 65535, this));\n+\n     connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->proxyIp, SLOT(setEnabled(bool)));\n     connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->proxyPort, SLOT(setEnabled(bool)));\n     connect(ui->connectSocks, SIGNAL(toggled(bool)), ui->socksVersion, SLOT(setEnabled(bool)));\n-    connect(ui->connectSocks, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning_Proxy()));\n+\n+    connect(ui->connectSocksIpv6, SIGNAL(toggled(bool)), ui->proxyIpv6, SLOT(setEnabled(bool)));\n+    connect(ui->connectSocksIpv6, SIGNAL(toggled(bool)), ui->proxyPortIpv6, SLOT(setEnabled(bool)));\n+\n+    connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyIpTor, SLOT(setEnabled(bool)));\n+    connect(ui->connectSocksTor, SIGNAL(toggled(bool)), ui->proxyPortTor, SLOT(setEnabled(bool)));\n \n     ui->proxyIp->installEventFilter(this);\n+    ui->proxyIpv6->installEventFilter(this);\n+    ui->proxyIpTor->installEventFilter(this);\n+\n+    updateDefaultProxyNets();\n \n     /* Window elements init */\n #ifdef Q_OS_MAC\n@@ -95,16 +117,13 @@ OptionsDialog::OptionsDialog(QWidget *parent) :\n     mapper->setSubmitPolicy(QDataWidgetMapper::ManualSubmit);\n     mapper->setOrientation(Qt::Vertical);\n \n-    /* enable apply button when data modified */\n-    connect(mapper, SIGNAL(viewModified()), this, SLOT(enableApplyButton()));\n-    /* disable apply button when new data loaded */\n-    connect(mapper, SIGNAL(currentIndexChanged(int)), this, SLOT(disableApplyButton()));\n-    /* setup/change UI elements when proxy IP is invalid/valid */\n-    connect(this, SIGNAL(proxyIpValid(QValidatedLineEdit *, bool)), this, SLOT(handleProxyIpValid(QValidatedLineEdit *, bool)));\n+    /* setup/change UI elements when proxy IPs are invalid/valid */\n+    connect(this, SIGNAL(proxyIpChecks(QValidatedLineEdit *, int)), this, SLOT(doProxyIpChecks(QValidatedLineEdit *, int)));\n }\n \n OptionsDialog::~OptionsDialog()\n {\n+    GUIUtil::saveWindowGeometry(\"nOptionsDialogWindow\", this);\n     delete ui;\n }\n \n@@ -114,6 +133,15 @@ void OptionsDialog::setModel(OptionsModel *model)\n \n     if(model)\n     {\n+        /* check if client restart is needed and show persistent message */\n+        if (model->isRestartRequired())\n+            showRestartWarning(true);\n+\n+        QString strLabel = model->getOverriddenByCommandLine();\n+        if (strLabel.isEmpty())\n+            strLabel = tr(\"none\");\n+        ui->overriddenByCommandLineLabel->setText(strLabel);\n+\n         connect(model, SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n \n         mapper->setModel(model);\n@@ -124,18 +152,24 @@ void OptionsDialog::setModel(OptionsModel *model)\n     /* update the display unit, to not use the default (\"BTC\") */\n     updateDisplayUnit();\n \n-    /* warn only when language selection changes by user action (placed here so init via mapper doesn't trigger this) */\n-    connect(ui->lang, SIGNAL(valueChanged()), this, SLOT(showRestartWarning_Lang()));\n+    /* warn when one of the following settings changes by user action (placed here so init via mapper doesn't trigger them) */\n \n-    /* disable apply button after settings are loaded as there is nothing to save */\n-    disableApplyButton();\n+    /* Main */\n+    connect(ui->databaseCache, SIGNAL(valueChanged(int)), this, SLOT(showRestartWarning()));\n+    connect(ui->threadsScriptVerif, SIGNAL(valueChanged(int)), this, SLOT(showRestartWarning()));\n+    /* Network */\n+    connect(ui->connectSocks, SIGNAL(clicked(bool)), this, SLOT(showRestartWarning()));\n+    /* Display */\n+    connect(ui->lang, SIGNAL(valueChanged()), this, SLOT(showRestartWarning()));\n }\n \n void OptionsDialog::setMapper()\n {\n     /* Main */\n     mapper->addMapping(ui->transactionFee, OptionsModel::Fee);\n     mapper->addMapping(ui->bitcoinAtStartup, OptionsModel::StartAtStartup);\n+    mapper->addMapping(ui->threadsScriptVerif, OptionsModel::ThreadsScriptVerif);\n+    mapper->addMapping(ui->databaseCache, OptionsModel::DatabaseCache);\n \n     /* Network */\n     mapper->addMapping(ui->mapPortUpnp, OptionsModel::MapPortUPnP);\n@@ -145,6 +179,14 @@ void OptionsDialog::setMapper()\n     mapper->addMapping(ui->proxyPort, OptionsModel::ProxyPort);\n     mapper->addMapping(ui->socksVersion, OptionsModel::ProxySocksVersion);\n \n+    mapper->addMapping(ui->connectSocksIpv6, OptionsModel::ProxyUseIPv6);\n+    mapper->addMapping(ui->proxyIpv6, OptionsModel::ProxyIPv6);\n+    mapper->addMapping(ui->proxyPortIpv6, OptionsModel::ProxyPortIPv6);\n+\n+    mapper->addMapping(ui->connectSocksTor, OptionsModel::ProxyUseTor);\n+    mapper->addMapping(ui->proxyIpTor, OptionsModel::ProxyIPTor);\n+    mapper->addMapping(ui->proxyPortTor, OptionsModel::ProxyPortTor);\n+\n     /* Window */\n #ifndef Q_OS_MAC\n     mapper->addMapping(ui->minimizeToTray, OptionsModel::MinimizeToTray);\n@@ -158,31 +200,20 @@ void OptionsDialog::setMapper()\n     mapper->addMapping(ui->coinControlFeatures, OptionsModel::CoinControlFeatures);\n }\n \n-void OptionsDialog::enableApplyButton()\n-{\n-    ui->applyButton->setEnabled(true);\n-}\n-\n-void OptionsDialog::disableApplyButton()\n-{\n-    ui->applyButton->setEnabled(false);\n-}\n-\n-void OptionsDialog::enableSaveButtons()\n+void OptionsDialog::enableOkButton()\n {\n-    /* prevent enabling of the save buttons when data modified, if there is an invalid proxy address present */\n-    if(fProxyIpValid)\n-        setSaveButtonState(true);\n+    /* prevent enabling of the OK button when data modified, if there is an invalid proxy address present */\n+    if(fProxyIpsValid)\n+        setOkButtonState(true);\n }\n \n-void OptionsDialog::disableSaveButtons()\n+void OptionsDialog::disableOkButton()\n {\n-    setSaveButtonState(false);\n+    setOkButtonState(false);\n }\n \n-void OptionsDialog::setSaveButtonState(bool fState)\n+void OptionsDialog::setOkButtonState(bool fState)\n {\n-    ui->applyButton->setEnabled(fState);\n     ui->okButton->setEnabled(fState);\n }\n \n@@ -192,60 +223,50 @@ void OptionsDialog::on_resetButton_clicked()\n     {\n         // confirmation dialog\n         QMessageBox::StandardButton btnRetVal = QMessageBox::question(this, tr(\"Confirm options reset\"),\n-            tr(\"Some settings may require a client restart to take effect.\") + \"<br><br>\" + tr(\"Do you want to proceed?\"),\n+            tr(\"Client restart required to activate changes.\") + \"<br><br>\" + tr(\"Client will be shutdown, do you want to proceed?\"),\n             QMessageBox::Yes | QMessageBox::Cancel, QMessageBox::Cancel);\n \n         if(btnRetVal == QMessageBox::Cancel)\n             return;\n \n-        disableApplyButton();\n-\n-        /* disable restart warning messages display */\n-        fRestartWarningDisplayed_Lang = fRestartWarningDisplayed_Proxy = true;\n-\n-        /* reset all options and save the default values (QSettings) */\n+        /* reset all options and close Bitcoin-Qt */\n         model->Reset();\n-        mapper->toFirst();\n-        mapper->submit();\n-\n-        /* re-enable restart warning messages display */\n-        fRestartWarningDisplayed_Lang = fRestartWarningDisplayed_Proxy = false;\n+        QApplication::quit();\n     }\n }\n \n void OptionsDialog::on_okButton_clicked()\n {\n     mapper->submit();\n     accept();\n+    updateDefaultProxyNets();\n }\n \n void OptionsDialog::on_cancelButton_clicked()\n {\n     reject();\n }\n \n-void OptionsDialog::on_applyButton_clicked()\n+void OptionsDialog::showRestartWarning(bool fPersistent)\n {\n-    mapper->submit();\n-    disableApplyButton();\n-}\n+    ui->statusLabel->setStyleSheet(\"QLabel { color: red; }\");\n \n-void OptionsDialog::showRestartWarning_Proxy()\n-{\n-    if(!fRestartWarningDisplayed_Proxy)\n+    if(fPersistent)\n+    {\n+        ui->statusLabel->setText(tr(\"Client restart required to activate changes.\"));\n+    }\n+    else\n     {\n-        QMessageBox::warning(this, tr(\"Warning\"), tr(\"This setting will take effect after restarting Bitcoin.\"), QMessageBox::Ok);\n-        fRestartWarningDisplayed_Proxy = true;\n+        ui->statusLabel->setText(tr(\"This change would require a client restart.\"));\n+        // clear non-persistent status label after 10 seconds\n+        // Todo: should perhaps be a class attribute, if we extend the use of statusLabel\n+        QTimer::singleShot(10000, this, SLOT(clearStatusLabel()));\n     }\n }\n \n-void OptionsDialog::showRestartWarning_Lang()\n+void OptionsDialog::clearStatusLabel()\n {\n-    if(!fRestartWarningDisplayed_Lang)\n-    {\n-        QMessageBox::warning(this, tr(\"Warning\"), tr(\"This setting will take effect after restarting Bitcoin.\"), QMessageBox::Ok);\n-        fRestartWarningDisplayed_Lang = true;\n-    }\n+    ui->statusLabel->clear();\n }\n \n void OptionsDialog::updateDisplayUnit()\n@@ -257,34 +278,56 @@ void OptionsDialog::updateDisplayUnit()\n     }\n }\n \n-void OptionsDialog::handleProxyIpValid(QValidatedLineEdit *object, bool fState)\n+void OptionsDialog::doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort)\n {\n-    // this is used in a check before re-enabling the save buttons\n-    fProxyIpValid = fState;\n+    Q_UNUSED(nProxyPort);\n+\n+    const std::string strAddrProxy = pUiProxyIp->text().toStdString();\n+    CService addrProxy;\n \n-    if(fProxyIpValid)\n+    /* Check for a valid IPv4 / IPv6 address */\n+    if (!(fProxyIpsValid = LookupNumeric(strAddrProxy.c_str(), addrProxy)))\n     {\n-        enableSaveButtons();\n-        ui->statusLabel->clear();\n+        disableOkButton();\n+        pUiProxyIp->setValid(false);\n+        ui->statusLabel->setStyleSheet(\"QLabel { color: red; }\");\n+        ui->statusLabel->setText(tr(\"The supplied proxy address is invalid.\"));\n     }\n     else\n     {\n-        disableSaveButtons();\n-        object->setValid(fProxyIpValid);\n-        ui->statusLabel->setStyleSheet(\"QLabel { color: red; }\");\n-        ui->statusLabel->setText(tr(\"The supplied proxy address is invalid.\"));\n+        enableOkButton();\n+        ui->statusLabel->clear();\n     }\n }\n \n+void OptionsDialog::updateDefaultProxyNets()\n+{\n+    proxyType proxy;\n+\n+    (GetProxy(NET_IPV4, proxy) && proxy.fIsDefault) ? ui->proxyReachIPv4->setChecked(true) : ui->proxyReachIPv4->setChecked(false);\n+#ifdef USE_IPV6\n+    (GetProxy(NET_IPV6, proxy) && proxy.fIsDefault) ? ui->proxyReachIPv6->setChecked(true) : ui->proxyReachIPv6->setChecked(false);\n+#else\n+    ui->proxyReachIPv6->setChecked(false);\n+#endif\n+    (GetProxy(NET_TOR, proxy) && proxy.fIsDefault) ? ui->proxyReachTor->setChecked(true) : ui->proxyReachTor->setChecked(false);\n+}\n+\n bool OptionsDialog::eventFilter(QObject *object, QEvent *event)\n {\n     if(event->type() == QEvent::FocusOut)\n     {\n         if(object == ui->proxyIp)\n         {\n-            CService addr;\n-            /* Check proxyIp for a valid IPv4/IPv6 address and emit the proxyIpValid signal */\n-            emit proxyIpValid(ui->proxyIp, LookupNumeric(ui->proxyIp->text().toStdString().c_str(), addr));\n+            emit proxyIpChecks(ui->proxyIp, ui->proxyPort->text().toInt());\n+        }\n+        else if(object == ui->proxyIpv6)\n+        {\n+            emit proxyIpChecks(ui->proxyIpv6, ui->proxyPortIpv6->text().toInt());\n+        }\n+        else if(object == ui->proxyIpTor)\n+        {\n+            emit proxyIpChecks(ui->proxyIpTor, ui->proxyPortTor->text().toInt());\n         }\n     }\n     return QDialog::eventFilter(object, event);"
      },
      {
        "sha": "b2118473fea2bc1111d9346814c8c751bf792079",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 13,
        "deletions": 18,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f873f7abb8ebf4774b53275aa9c0b5f907130730/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f873f7abb8ebf4774b53275aa9c0b5f907130730/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=f873f7abb8ebf4774b53275aa9c0b5f907130730",
        "patch": "@@ -31,36 +31,31 @@ class OptionsDialog : public QDialog\n     bool eventFilter(QObject *object, QEvent *event);\n \n private slots:\n-    /* enable only apply button */\n-    void enableApplyButton();\n-    /* disable only apply button */\n-    void disableApplyButton();\n-    /* enable apply button and OK button */\n-    void enableSaveButtons();\n-    /* disable apply button and OK button */\n-    void disableSaveButtons();\n-    /* set apply button and OK button state (enabled / disabled) */\n-    void setSaveButtonState(bool fState);\n+    /* enable OK button */\n+    void enableOkButton();\n+    /* disable OK button */\n+    void disableOkButton();\n+    /* set OK button state (enabled / disabled) */\n+    void setOkButtonState(bool fState);\n     void on_resetButton_clicked();\n     void on_okButton_clicked();\n     void on_cancelButton_clicked();\n-    void on_applyButton_clicked();\n \n-    void showRestartWarning_Proxy();\n-    void showRestartWarning_Lang();\n+    void showRestartWarning(bool fPersistent = false);\n+    void clearStatusLabel();\n     void updateDisplayUnit();\n-    void handleProxyIpValid(QValidatedLineEdit *object, bool fState);\n+    void doProxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n+    /* query the networks, for which the base proxy is used */\n+    void updateDefaultProxyNets();\n \n signals:\n-    void proxyIpValid(QValidatedLineEdit *object, bool fValid);\n+    void proxyIpChecks(QValidatedLineEdit *pUiProxyIp, int nProxyPort);\n \n private:\n     Ui::OptionsDialog *ui;\n     OptionsModel *model;\n     MonitoredDataMapper *mapper;\n-    bool fRestartWarningDisplayed_Proxy;\n-    bool fRestartWarningDisplayed_Lang;\n-    bool fProxyIpValid;\n+    bool fProxyIpsValid;\n };\n \n #endif // OPTIONSDIALOG_H"
      },
      {
        "sha": "e27c1d446ad0245ac6619b1da2c809692b22ac38",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 279,
        "deletions": 111,
        "changes": 390,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f873f7abb8ebf4774b53275aa9c0b5f907130730/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f873f7abb8ebf4774b53275aa9c0b5f907130730/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=f873f7abb8ebf4774b53275aa9c0b5f907130730",
        "patch": "@@ -17,89 +17,138 @@\n #include \"walletdb.h\"\n \n #include <QSettings>\n+#include <QStringList>\n \n OptionsModel::OptionsModel(QObject *parent) :\n     QAbstractListModel(parent)\n {\n     Init();\n }\n \n-bool static ApplyProxySettings()\n-{\n-    QSettings settings;\n-    CService addrProxy(settings.value(\"addrProxy\", \"127.0.0.1:9050\").toString().toStdString());\n-    int nSocksVersion(settings.value(\"nSocksVersion\", 5).toInt());\n-    if (!settings.value(\"fUseProxy\", false).toBool()) {\n-        addrProxy = CService();\n-        nSocksVersion = 0;\n-        return false;\n-    }\n-    if (nSocksVersion && !addrProxy.IsValid())\n-        return false;\n-    if (!IsLimited(NET_IPV4))\n-        SetProxy(NET_IPV4, addrProxy, nSocksVersion, true);\n-    if (nSocksVersion > 4) {\n-#ifdef USE_IPV6\n-        if (!IsLimited(NET_IPV6))\n-            SetProxy(NET_IPV6, addrProxy, nSocksVersion, true);\n-#endif\n-        SetNameProxy(addrProxy, nSocksVersion);\n-    }\n-    return true;\n-}\n-\n+// Writes all missing QSettings with their default values\n void OptionsModel::Init()\n {\n     QSettings settings;\n \n+    // Ensure restart flag is unset on client startup\n+    setRestartRequired(false);\n+\n     // These are Qt-only settings:\n-    nDisplayUnit = settings.value(\"nDisplayUnit\", BitcoinUnits::BTC).toInt();\n+\n+    // Window\n+    if (!settings.contains(\"fMinimizeToTray\"))\n+        settings.setValue(\"fMinimizeToTray\", false);\n+    fMinimizeToTray = settings.value(\"fMinimizeToTray\").toBool();\n+\n+    if (!settings.contains(\"fMinimizeOnClose\"))\n+        settings.setValue(\"fMinimizeOnClose\", false);\n+    fMinimizeOnClose = settings.value(\"fMinimizeOnClose\").toBool();\n+\n+    // Display\n+    if (!settings.contains(\"nDisplayUnit\"))\n+        settings.setValue(\"nDisplayUnit\", BitcoinUnits::BTC);\n+    nDisplayUnit = settings.value(\"nDisplayUnit\").toInt();\n+\n+    if (!settings.contains(\"bDisplayAddresses\"))\n+        settings.setValue(\"bDisplayAddresses\", false);\n     bDisplayAddresses = settings.value(\"bDisplayAddresses\", false).toBool();\n-    fMinimizeToTray = settings.value(\"fMinimizeToTray\", false).toBool();\n-    fMinimizeOnClose = settings.value(\"fMinimizeOnClose\", false).toBool();\n-    nTransactionFee = settings.value(\"nTransactionFee\").toLongLong();\n-    language = settings.value(\"language\", \"\").toString();\n+\n+    if (!settings.contains(\"fCoinControlFeatures\"))\n+        settings.setValue(\"fCoinControlFeatures\", false);\n     fCoinControlFeatures = settings.value(\"fCoinControlFeatures\", false).toBool();\n \n-    // These are shared with core Bitcoin; we want\n-    // command-line options to override the GUI settings:\n+    // These are shared with the core or have a command-line parameter\n+    // and we want command-line parameters to overwrite the GUI settings.\n+    //\n+    // If setting doesn't exist create it with defaults.\n+    //\n+    // If SoftSetArg() or SoftSetBoolArg() return false we were overridden\n+    // by command-line and show this in the UI.\n+\n+    // Main\n+    if (!settings.contains(\"nTransactionFee\"))\n+        settings.setValue(\"nTransactionFee\", 0);\n+\n+    if (!settings.contains(\"nDatabaseCache\"))\n+        settings.setValue(\"nDatabaseCache\", 25);\n+    if (!SoftSetArg(\"-dbcache\", settings.value(\"nDatabaseCache\").toString().toStdString()))\n+        strOverriddenByCommandLine += \"-dbcache \";\n+\n+    if (!settings.contains(\"nThreadsScriptVerif\"))\n+        settings.setValue(\"nThreadsScriptVerif\", 0);\n+    if (!SoftSetArg(\"-par\", settings.value(\"nThreadsScriptVerif\").toString().toStdString()))\n+        strOverriddenByCommandLine += \"-par \";\n \n     // Network\n-    if (settings.contains(\"fUseUPnP\"))\n-        SoftSetBoolArg(\"-upnp\", settings.value(\"fUseUPnP\").toBool());\n-    if (settings.contains(\"addrProxy\") && settings.value(\"fUseProxy\").toBool())\n-        SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString());\n-    if (settings.contains(\"nSocksVersion\") && settings.value(\"fUseProxy\").toBool())\n-        SoftSetArg(\"-socks\", settings.value(\"nSocksVersion\").toString().toStdString());\n+    if (!settings.contains(\"fUseUPnP\"))\n+#ifdef USE_UPNP\n+        settings.setValue(\"fUseUPnP\", true);\n+#else\n+        settings.setValue(\"fUseUPnP\", false);\n+#endif\n+    if (!SoftSetBoolArg(\"-upnp\", settings.value(\"fUseUPnP\").toBool()))\n+        strOverriddenByCommandLine += \"-upnp \";\n+\n+    if (!settings.contains(\"fUseProxy\"))\n+        settings.setValue(\"fUseProxy\", false);\n+    if (!settings.contains(\"addrProxy\"))\n+        settings.setValue(\"addrProxy\", \"127.0.0.1:9050\");\n+    // Only try to set -proxy, if user has enabled fUseProxy\n+    if (settings.value(\"fUseProxy\").toBool() && !SoftSetArg(\"-proxy\", settings.value(\"addrProxy\").toString().toStdString()))\n+        strOverriddenByCommandLine += \"-proxy \";\n+    if (!settings.contains(\"nSocksVersion\"))\n+        settings.setValue(\"nSocksVersion\", 5);\n+    // Only try to set -socks, if user has enabled fUseProxy\n+    if (settings.value(\"fUseProxy\").toBool() && !SoftSetArg(\"-socks\", settings.value(\"nSocksVersion\").toString().toStdString()))\n+        strOverriddenByCommandLine += \"-socks \";\n+\n+    if (!settings.contains(\"fUseSeparateProxyIPv6\"))\n+        settings.setValue(\"fUseSeparateProxyIPv6\", false);\n+    if (!settings.contains(\"addrSeparateProxyIPv6\"))\n+        settings.setValue(\"addrSeparateProxyIPv6\", \"127.0.0.1:9050\");\n+    // Only try to set -proxy6, if user has enabled fUseSeparateProxyIPv6\n+    if (settings.value(\"fUseSeparateProxyIPv6\").toBool() && !SoftSetArg(\"-proxy6\", settings.value(\"addrSeparateProxyIPv6\").toString().toStdString()))\n+        strOverriddenByCommandLine += \"-proxy6 \";\n+\n+    if (!settings.contains(\"fUseSeparateProxyTor\"))\n+        settings.setValue(\"fUseSeparateProxyTor\", false);\n+    if (!settings.contains(\"addrSeparateProxyTor\"))\n+        settings.setValue(\"addrSeparateProxyTor\", \"127.0.0.1:9050\");\n+    // Only try to set -onion, if user has enabled fUseSeparateProxyTor\n+    if (settings.value(\"fUseSeparateProxyTor\").toBool() && !SoftSetArg(\"-onion\", settings.value(\"addrSeparateProxyTor\").toString().toStdString()))\n+        strOverriddenByCommandLine += \"-onion \";\n+\n     // Display\n-    if (!language.isEmpty())\n-        SoftSetArg(\"-lang\", language.toStdString());\n+    if (!settings.contains(\"language\"))\n+        settings.setValue(\"language\", \"\");\n+    if (!SoftSetArg(\"-lang\", settings.value(\"language\").toString().toStdString()))\n+        strOverriddenByCommandLine += \"-lang\";\n+\n+    language = settings.value(\"language\").toString();\n }\n \n void OptionsModel::Reset()\n {\n     QSettings settings;\n \n-    // Remove all entries in this QSettings object\n+    // Remove all entries from our QSettings object\n     settings.clear();\n \n     // default setting for OptionsModel::StartAtStartup - disabled\n     if (GUIUtil::GetStartOnSystemStartup())\n         GUIUtil::SetStartOnSystemStartup(false);\n \n-    // Re-Init to get default values\n-    Init();\n-\n     // Ensure Upgrade() is not running again by setting the bImportFinished flag\n     settings.setValue(\"bImportFinished\", true);\n }\n \n-bool OptionsModel::Upgrade()\n+void OptionsModel::Upgrade()\n {\n     QSettings settings;\n \n+    // Already upgraded\n     if (settings.contains(\"bImportFinished\"))\n-        return false; // Already upgraded\n+        return;\n \n     settings.setValue(\"bImportFinished\", true);\n \n@@ -147,18 +196,16 @@ bool OptionsModel::Upgrade()\n             walletdb.EraseSetting(\"addrProxy\");\n         }\n     }\n-    ApplyProxySettings();\n-    Init();\n \n-    return true;\n+    Init();\n }\n \n-\n int OptionsModel::rowCount(const QModelIndex & parent) const\n {\n     return OptionIDRowCount;\n }\n \n+// read QSettings values and return them\n QVariant OptionsModel::data(const QModelIndex & index, int role) const\n {\n     if(role == Qt::EditRole)\n@@ -167,61 +214,91 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n         switch(index.row())\n         {\n         case StartAtStartup:\n-            return QVariant(GUIUtil::GetStartOnSystemStartup());\n+            return GUIUtil::GetStartOnSystemStartup();\n         case MinimizeToTray:\n-            return QVariant(fMinimizeToTray);\n+            return fMinimizeToTray;\n         case MapPortUPnP:\n #ifdef USE_UPNP\n-            return settings.value(\"fUseUPnP\", GetBoolArg(\"-upnp\", true));\n+            return settings.value(\"fUseUPnP\");\n #else\n-            return QVariant(false);\n+            return false;\n #endif\n         case MinimizeOnClose:\n-            return QVariant(fMinimizeOnClose);\n+            return fMinimizeOnClose;\n \n         // base proxy\n-        case ProxyUse: {\n-            proxyType proxy;\n-            return QVariant(GetProxy(NET_IPV4, proxy));\n-        }\n+        case ProxyUse:\n+            return settings.value(\"fUseProxy\", false);\n         case ProxyIP: {\n-            proxyType proxy;\n-            if (GetProxy(NET_IPV4, proxy))\n-                return QVariant(QString::fromStdString(proxy.addrProxy.ToStringIP()));\n-            else\n-                return QVariant(QString::fromStdString(\"127.0.0.1\"));\n+            // contains IP at index 0 and port at index 1\n+            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n+            return strlIpPort.at(0);\n         }\n         case ProxyPort: {\n-            proxyType proxy;\n-            if (GetProxy(NET_IPV4, proxy))\n-                return QVariant(proxy.addrProxy.GetPort());\n-            else\n-                return QVariant(9050);\n+            // contains IP at index 0 and port at index 1\n+            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n+            return strlIpPort.at(1);\n         }\n-        case ProxySocksVersion: {\n-            proxyType proxy;\n-            if (GetProxy(NET_IPV4, proxy))\n-                return QVariant(proxy.nSocksVersion);\n-            else\n-                return QVariant(5);\n+        case ProxySocksVersion:\n+            return settings.value(\"nSocksVersion\", 5);\n+\n+        // separate IPv6 proxy\n+        case ProxyUseIPv6:\n+            return settings.value(\"fUseSeparateProxyIPv6\", false);\n+        case ProxyIPv6: {\n+            // contains IP at index 0 and port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyIPv6\").toString().split(\":\", QString::SkipEmptyParts);\n+            return strlIpPort.at(0);\n+        }\n+        case ProxyPortIPv6: {\n+            // contains IP at index 0 and port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyIPv6\").toString().split(\":\", QString::SkipEmptyParts);\n+            return strlIpPort.at(1);\n         }\n+\n+        // separate Tor proxy\n+        case ProxyUseTor:\n+            return settings.value(\"fUseSeparateProxyTor\", false);\n+        case ProxyIPTor: {\n+            // contains IP at index 0 and port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            return strlIpPort.at(0);\n+        }\n+        case ProxyPortTor: {\n+            // contains IP at index 0 and port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            return strlIpPort.at(1);\n+        }\n+\n         case Fee:\n-            return QVariant((qint64) nTransactionFee);\n+            // Attention: Init() is called before nTransactionFee is set in AppInit2()!\n+            // To ensure we can change the fee on-the-fly update our QSetting when\n+            // opening OptionsDialog, which queries Fee via the mapper.\n+            if (nTransactionFee != settings.value(\"nTransactionFee\").toLongLong())\n+                settings.setValue(\"nTransactionFee\", nTransactionFee);\n+            // Todo: Consider to revert back to use just nTransactionFee here, if we don't want\n+            // -paytxfee to update our QSettings!\n+            return settings.value(\"nTransactionFee\");\n         case DisplayUnit:\n-            return QVariant(nDisplayUnit);\n+            return nDisplayUnit;\n         case DisplayAddresses:\n-            return QVariant(bDisplayAddresses);\n+            return bDisplayAddresses;\n         case Language:\n-            return settings.value(\"language\", \"\");\n+            return settings.value(\"language\");\n         case CoinControlFeatures:\n-            return QVariant(fCoinControlFeatures);\n+            return fCoinControlFeatures;\n+        case DatabaseCache:\n+            return settings.value(\"nDatabaseCache\");\n+        case ThreadsScriptVerif:\n+            return settings.value(\"nThreadsScriptVerif\");\n         default:\n             return QVariant();\n         }\n     }\n     return QVariant();\n }\n \n+// write QSettings values\n bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, int role)\n {\n     bool successful = true; /* set to false on parse error */\n@@ -237,53 +314,122 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             fMinimizeToTray = value.toBool();\n             settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n             break;\n-        case MapPortUPnP:\n+        case MapPortUPnP: // core option - can be changed on-the-fly\n             settings.setValue(\"fUseUPnP\", value.toBool());\n             MapPort(value.toBool());\n             break;\n         case MinimizeOnClose:\n             fMinimizeOnClose = value.toBool();\n             settings.setValue(\"fMinimizeOnClose\", fMinimizeOnClose);\n             break;\n+\n         // base proxy\n         case ProxyUse:\n-            settings.setValue(\"fUseProxy\", value.toBool());\n-            successful = ApplyProxySettings();\n+            if (settings.value(\"fUseProxy\") != value) {\n+                settings.setValue(\"fUseProxy\", value.toBool());\n+                setRestartRequired(true);\n+            }\n             break;\n         case ProxyIP: {\n-            proxyType proxy;\n-            proxy.addrProxy = CService(\"127.0.0.1\", 9050);\n-            GetProxy(NET_IPV4, proxy);\n-\n-            CNetAddr addr(value.toString().toStdString());\n-            proxy.addrProxy.SetIP(addr);\n-            settings.setValue(\"addrProxy\", proxy.addrProxy.ToStringIPPort().c_str());\n-            successful = ApplyProxySettings();\n+            // contains current IP at index 0 and current port at index 1\n+            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n+            // if that key doesn't exist or has a changed IP\n+            if (!settings.contains(\"addrProxy\") || strlIpPort.at(0) != value.toString()) {\n+                // construct new value from new IP and current port\n+                QString strNewValue = value.toString() + \":\" + strlIpPort.at(1);\n+                settings.setValue(\"addrProxy\", strNewValue);\n+                setRestartRequired(true);\n+            }\n         }\n         break;\n         case ProxyPort: {\n-            proxyType proxy;\n-            proxy.addrProxy = CService(\"127.0.0.1\", 9050);\n-            GetProxy(NET_IPV4, proxy);\n-\n-            proxy.addrProxy.SetPort(value.toInt());\n-            settings.setValue(\"addrProxy\", proxy.addrProxy.ToStringIPPort().c_str());\n-            successful = ApplyProxySettings();\n+            // contains current IP at index 0 and current port at index 1\n+            QStringList strlIpPort = settings.value(\"addrProxy\").toString().split(\":\", QString::SkipEmptyParts);\n+            // if that key doesn't exist or has a changed port\n+            if (!settings.contains(\"addrProxy\") || strlIpPort.at(1) != value.toString()) {\n+                // construct new value from current IP and new port\n+                QString strNewValue = strlIpPort.at(0) + \":\" + value.toString();\n+                settings.setValue(\"addrProxy\", strNewValue);\n+                setRestartRequired(true);\n+            }\n         }\n         break;\n         case ProxySocksVersion: {\n-            proxyType proxy;\n-            proxy.nSocksVersion = 5;\n-            GetProxy(NET_IPV4, proxy);\n+            if (settings.value(\"nSocksVersion\") != value) {\n+                settings.setValue(\"nSocksVersion\", value.toInt());\n+                setRestartRequired(true);\n+            }\n+        }\n+        break;\n \n-            proxy.nSocksVersion = value.toInt();\n-            settings.setValue(\"nSocksVersion\", proxy.nSocksVersion);\n-            successful = ApplyProxySettings();\n+        // separate IPv6 proxy\n+        case ProxyUseIPv6:\n+            if (settings.value(\"fUseSeparateProxyIPv6\") != value) {\n+                settings.setValue(\"fUseSeparateProxyIPv6\", value.toBool());\n+                setRestartRequired(true);\n+            }\n+            break;\n+        case ProxyIPv6: {\n+            // contains current IP at index 0 and current port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyIPv6\").toString().split(\":\", QString::SkipEmptyParts);\n+            // if that key doesn't exist or has a changed IP\n+            if (!settings.contains(\"addrSeparateProxyIPv6\") || strlIpPort.at(0) != value.toString()) {\n+                // construct new value from new IP and current port\n+                QString strNewValue = value.toString() + \":\" + strlIpPort.at(1);\n+                settings.setValue(\"addrSeparateProxyIPv6\", strNewValue);\n+                setRestartRequired(true);\n+            }\n         }\n         break;\n-        case Fee:\n+        case ProxyPortIPv6: {\n+            // contains current IP at index 0 and current port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyIPv6\").toString().split(\":\", QString::SkipEmptyParts);\n+            // if that key doesn't exist or has a changed port\n+            if (!settings.contains(\"addrSeparateProxyIPv6\") || strlIpPort.at(1) != value.toString()) {\n+                // construct new value from current IP and new port\n+                QString strNewValue = strlIpPort.at(0) + \":\" + value.toString();\n+                settings.setValue(\"addrSeparateProxyIPv6\", strNewValue);\n+                setRestartRequired(true);\n+            }\n+        }\n+        break;\n+\n+        // separate Tor proxy\n+        case ProxyUseTor:\n+            if (settings.value(\"fUseSeparateProxyTor\") != value) {\n+                settings.setValue(\"fUseSeparateProxyTor\", value.toBool());\n+                setRestartRequired(true);\n+            }\n+            break;\n+        case ProxyIPTor: {\n+            // contains current IP at index 0 and current port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            // if that key doesn't exist or has a changed IP\n+            if (!settings.contains(\"addrSeparateProxyTor\") || strlIpPort.at(0) != value.toString()) {\n+                // construct new value from new IP and current port\n+                QString strNewValue = value.toString() + \":\" + strlIpPort.at(1);\n+                settings.setValue(\"addrSeparateProxyTor\", strNewValue);\n+                setRestartRequired(true);\n+            }\n+        }\n+        break;\n+        case ProxyPortTor: {\n+            // contains current IP at index 0 and current port at index 1\n+            QStringList strlIpPort = settings.value(\"addrSeparateProxyTor\").toString().split(\":\", QString::SkipEmptyParts);\n+            // if that key doesn't exist or has a changed port\n+            if (!settings.contains(\"addrSeparateProxyTor\") || strlIpPort.at(1) != value.toString()) {\n+                // construct new value from current IP and new port\n+                QString strNewValue = strlIpPort.at(0) + \":\" + value.toString();\n+                settings.setValue(\"addrSeparateProxyTor\", strNewValue);\n+                setRestartRequired(true);\n+            }\n+        }\n+        break;\n+\n+        case Fee: // core option - can be changed on-the-fly\n+            // Todo: check via if (nTransactionFee > 0.25 * COIN) and warn via message()\n             nTransactionFee = value.toLongLong();\n-            settings.setValue(\"nTransactionFee\", (qint64) nTransactionFee);\n+            settings.setValue(\"nTransactionFee\", (qint64)nTransactionFee);\n             emit transactionFeeChanged(nTransactionFee);\n             break;\n         case DisplayUnit:\n@@ -296,13 +442,28 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             settings.setValue(\"bDisplayAddresses\", bDisplayAddresses);\n             break;\n         case Language:\n-            settings.setValue(\"language\", value);\n+            if (settings.value(\"language\") != value) {\n+                settings.setValue(\"language\", value);\n+                setRestartRequired(true);\n+            }\n             break;\n         case CoinControlFeatures:\n             fCoinControlFeatures = value.toBool();\n             settings.setValue(\"fCoinControlFeatures\", fCoinControlFeatures);\n             emit coinControlFeaturesChanged(fCoinControlFeatures);\n             break;\n+        case DatabaseCache:\n+            if (settings.value(\"nDatabaseCache\") != value) {\n+                settings.setValue(\"nDatabaseCache\", value);\n+                setRestartRequired(true);\n+            }\n+            break;\n+        case ThreadsScriptVerif:\n+            if (settings.value(\"nThreadsScriptVerif\") != value) {\n+                settings.setValue(\"nThreadsScriptVerif\", value);\n+                setRestartRequired(true);\n+            }\n+            break;\n         default:\n             break;\n         }\n@@ -312,11 +473,6 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n     return successful;\n }\n \n-qint64 OptionsModel::getTransactionFee()\n-{\n-    return (qint64) nTransactionFee;\n-}\n-\n bool OptionsModel::getProxySettings(QString& proxyIP, quint16 &proxyPort) const\n {\n     std::string proxy = GetArg(\"-proxy\", \"\");\n@@ -327,3 +483,15 @@ bool OptionsModel::getProxySettings(QString& proxyIP, quint16 &proxyPort) const\n     proxyPort = addrProxy.GetPort();\n     return true;\n }\n+\n+void OptionsModel::setRestartRequired(bool fRequired)\n+{\n+    QSettings settings;\n+    return settings.setValue(\"fRestartRequired\", fRequired);\n+}\n+\n+bool OptionsModel::isRestartRequired()\n+{\n+    QSettings settings;\n+    return settings.value(\"fRestartRequired\", false).toBool();\n+}"
      },
      {
        "sha": "6f7293f4e27d5e80bf3c8f8a29eaa5724b43b63e",
        "filename": "src/qt/optionsmodel.h",
        "status": "modified",
        "additions": 19,
        "deletions": 5,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f873f7abb8ebf4774b53275aa9c0b5f907130730/src/qt/optionsmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f873f7abb8ebf4774b53275aa9c0b5f907130730/src/qt/optionsmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.h?ref=f873f7abb8ebf4774b53275aa9c0b5f907130730",
        "patch": "@@ -29,41 +29,55 @@ class OptionsModel : public QAbstractListModel\n         ProxyIP,                // QString\n         ProxyPort,              // int\n         ProxySocksVersion,      // int\n+        ProxyUseIPv6,           // bool\n+        ProxyIPv6,              // QString\n+        ProxyPortIPv6,          // int\n+        ProxyUseTor,            // bool\n+        ProxyIPTor,             // QString\n+        ProxyPortTor,           // int\n         Fee,                    // qint64\n         DisplayUnit,            // BitcoinUnits::Unit\n         DisplayAddresses,       // bool\n         Language,               // QString\n         CoinControlFeatures,    // bool\n+        ThreadsScriptVerif,     // int\n+        DatabaseCache,          // int\n         OptionIDRowCount,\n     };\n \n     void Init();\n     void Reset();\n \n     /* Migrate settings from wallet.dat after app initialization */\n-    bool Upgrade(); /* returns true if settings upgraded */\n+    void Upgrade();\n \n     int rowCount(const QModelIndex & parent = QModelIndex()) const;\n     QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const;\n     bool setData(const QModelIndex & index, const QVariant & value, int role = Qt::EditRole);\n \n     /* Explicit getters */\n-    qint64 getTransactionFee();\n     bool getMinimizeToTray() { return fMinimizeToTray; }\n     bool getMinimizeOnClose() { return fMinimizeOnClose; }\n     int getDisplayUnit() { return nDisplayUnit; }\n     bool getDisplayAddresses() { return bDisplayAddresses; }\n-    QString getLanguage() { return language; }\n     bool getProxySettings(QString& proxyIP, quint16 &proxyPort) const;\n     bool getCoinControlFeatures() { return fCoinControlFeatures; }\n+    const QString& getOverriddenByCommandLine() { return strOverriddenByCommandLine; }\n+\n+    /* Restart flag helper */\n+    void setRestartRequired(bool fRequired);\n+    bool isRestartRequired();\n \n private:\n-    int nDisplayUnit;\n-    bool bDisplayAddresses;\n+    /* Qt-only settings */\n     bool fMinimizeToTray;\n     bool fMinimizeOnClose;\n     QString language;\n+    int nDisplayUnit;\n+    bool bDisplayAddresses;\n     bool fCoinControlFeatures;\n+    /* settings that were overriden by command-line */\n+    QString strOverriddenByCommandLine;\n \n signals:\n     void displayUnitChanged(int unit);"
      }
    ]
  }
]