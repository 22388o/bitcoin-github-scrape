[
  {
    "sha": "18dfea0dd082af18dfb02981b7ee1cd44d514388",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGRmZWEwZGQwODJhZjE4ZGZiMDI5ODFiN2VlMWNkNDRkNTE0Mzg4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-07-14T23:03:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-10T01:39:56Z"
      },
      "message": "Always create 70 byte signatures with low R values\n\nWhen extra entropy is not specified by the caller, CKey::Sign will\nnow always create a signature that has a low R value and is at most\n70 bytes. The resulting signature on the stack will be 71 bytes when\nthe sighash byte is included.\n\nUsing low R signatures means that the resulting DER encoded signature\nwill never need to have additional padding to account for high R\nvalues.",
      "tree": {
        "sha": "ed176dc1ae965ff650a12c4b81f4da91c35d783e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed176dc1ae965ff650a12c4b81f4da91c35d783e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18dfea0dd082af18dfb02981b7ee1cd44d514388",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18dfea0dd082af18dfb02981b7ee1cd44d514388",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18dfea0dd082af18dfb02981b7ee1cd44d514388",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18dfea0dd082af18dfb02981b7ee1cd44d514388/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d86aad287f07e20066138b9f909758ad7a2e098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d86aad287f07e20066138b9f909758ad7a2e098",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d86aad287f07e20066138b9f909758ad7a2e098"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 70,
      "deletions": 22
    },
    "files": [
      {
        "sha": "1d599b2685f1049f3ec6ba71764016f3e25b76ac",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dfea0dd082af18dfb02981b7ee1cd44d514388/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dfea0dd082af18dfb02981b7ee1cd44d514388/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=18dfea0dd082af18dfb02981b7ee1cd44d514388",
        "patch": "@@ -76,7 +76,7 @@ static void VerifyScriptBench(benchmark::State& state)\n     CMutableTransaction txSpend = BuildSpendingTransaction(scriptSig, txCredit);\n     CScriptWitness& witness = txSpend.vin[0].scriptWitness;\n     witness.stack.emplace_back();\n-    key.Sign(SignatureHash(witScriptPubkey, txSpend, 0, SIGHASH_ALL, txCredit.vout[0].nValue, SigVersion::WITNESS_V0), witness.stack.back(), 0);\n+    key.Sign(SignatureHash(witScriptPubkey, txSpend, 0, SIGHASH_ALL, txCredit.vout[0].nValue, SigVersion::WITNESS_V0), witness.stack.back());\n     witness.stack.back().push_back(static_cast<unsigned char>(SIGHASH_ALL));\n     witness.stack.push_back(ToByteVector(pubkey));\n "
      },
      {
        "sha": "69af255be6b9d29000060976e0b835c2e6d992a6",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dfea0dd082af18dfb02981b7ee1cd44d514388/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dfea0dd082af18dfb02981b7ee1cd44d514388/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=18dfea0dd082af18dfb02981b7ee1cd44d514388",
        "patch": "@@ -189,15 +189,35 @@ CPubKey CKey::GetPubKey() const {\n     return result;\n }\n \n-bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, uint32_t test_case) const {\n+// Check that the sig has a low R value and will be less than 71 bytes\n+bool SigHasLowR(const secp256k1_ecdsa_signature* sig)\n+{\n+    unsigned char compact_sig[64];\n+    secp256k1_ecdsa_signature_serialize_compact(secp256k1_context_sign, compact_sig, sig);\n+\n+    // In DER serialization, all values are interpreted as big-endian, signed integers. The highest bit in the integer indicates\n+    // its signed-ness; 0 is positive, 1 is negative. When the value is interpreted as a negative integer, it must be converted\n+    // to a positive value by prepending a 0x00 byte so that the highest bit is 0. We can avoid this prepending by ensuring that\n+    // our highest bit is always 0, and thus we must check that the first byte is less than 0x80.\n+    return compact_sig[0] < 0x80;\n+}\n+\n+bool CKey::Sign(const uint256 &hash, std::vector<unsigned char>& vchSig, bool grind, uint32_t test_case) const {\n     if (!fValid)\n         return false;\n     vchSig.resize(CPubKey::SIGNATURE_SIZE);\n     size_t nSigLen = CPubKey::SIGNATURE_SIZE;\n     unsigned char extra_entropy[32] = {0};\n     WriteLE32(extra_entropy, test_case);\n     secp256k1_ecdsa_signature sig;\n-    int ret = secp256k1_ecdsa_sign(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, test_case ? extra_entropy : nullptr);\n+    uint32_t counter = 0;\n+    int ret = secp256k1_ecdsa_sign(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, (!grind && test_case) ? extra_entropy : nullptr);\n+\n+    // Grind for low R\n+    while (ret && !SigHasLowR(&sig) && grind) {\n+        WriteLE32(extra_entropy, ++counter);\n+        ret = secp256k1_ecdsa_sign(secp256k1_context_sign, &sig, hash.begin(), begin(), secp256k1_nonce_function_rfc6979, extra_entropy);\n+    }\n     assert(ret);\n     secp256k1_ecdsa_signature_serialize_der(secp256k1_context_sign, vchSig.data(), &nSigLen, &sig);\n     vchSig.resize(nSigLen);"
      },
      {
        "sha": "ce49b3df02dd7d02ee1b42100879af1fd03d3a71",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dfea0dd082af18dfb02981b7ee1cd44d514388/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dfea0dd082af18dfb02981b7ee1cd44d514388/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=18dfea0dd082af18dfb02981b7ee1cd44d514388",
        "patch": "@@ -114,7 +114,7 @@ class CKey\n      * Create a DER-serialized signature.\n      * The test_case parameter tweaks the deterministic nonce.\n      */\n-    bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig, uint32_t test_case = 0) const;\n+    bool Sign(const uint256& hash, std::vector<unsigned char>& vchSig, bool grind = true, uint32_t test_case = 0) const;\n \n     /**\n      * Create a compact signature (65 bytes), which allows reconstructing the used public key."
      },
      {
        "sha": "acd213dac21cbe61b7ee1cc0427db433118bb728",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dfea0dd082af18dfb02981b7ee1cd44d514388/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dfea0dd082af18dfb02981b7ee1cd44d514388/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=18dfea0dd082af18dfb02981b7ee1cd44d514388",
        "patch": "@@ -152,4 +152,40 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     BOOST_CHECK(detsigc == ParseHex(\"2052d8a32079c11e79db95af63bb9600c5b04f21a9ca33dc129c2bfa8ac9dc1cd561d8ae5e0f6c1a16bde3719c64c2fd70e404b6428ab9a69566962e8771b5944d\"));\n }\n \n+BOOST_AUTO_TEST_CASE(key_signature_tests)\n+{\n+    // When entropy is specified, we should see at least one high R signature within 20 signatures\n+    CKey key = DecodeSecret(strSecret1);\n+    std::string msg = \"A message to be signed\";\n+    uint256 msg_hash = Hash(msg.begin(), msg.end());\n+    std::vector<unsigned char> sig;\n+    bool found = false;\n+\n+    for (int i = 1; i <=20; ++i) {\n+        sig.clear();\n+        key.Sign(msg_hash, sig, false, i);\n+        found = sig[3] == 0x21 && sig[4] == 0x00;\n+        if (found) {\n+            break;\n+        }\n+    }\n+    BOOST_CHECK(found);\n+\n+    // When entropy is not specified, we should always see low R signatures that are less than 70 bytes in 256 tries\n+    // We should see at least one signature that is less than 70 bytes.\n+    found = true;\n+    bool found_small = false;\n+    for (int i = 0; i < 256; ++i) {\n+        sig.clear();\n+        std::string msg = \"A message to be signed\" + std::to_string(i);\n+        msg_hash = Hash(msg.begin(), msg.end());\n+        key.Sign(msg_hash, sig);\n+        found = sig[3] == 0x20;\n+        BOOST_CHECK(sig.size() <= 70);\n+        found_small |= sig.size() < 70;\n+    }\n+    BOOST_CHECK(found);\n+    BOOST_CHECK(found_small);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "63a98928216f13795cbb6b61175be526f8e70be5",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dfea0dd082af18dfb02981b7ee1cd44d514388/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dfea0dd082af18dfb02981b7ee1cd44d514388/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=18dfea0dd082af18dfb02981b7ee1cd44d514388",
        "patch": "@@ -369,7 +369,7 @@ class TestBuilder\n         std::vector<unsigned char> vchSig, r, s;\n         uint32_t iter = 0;\n         do {\n-            key.Sign(hash, vchSig, iter++);\n+            key.Sign(hash, vchSig, false, iter++);\n             if ((lenS == 33) != (vchSig[5 + vchSig[3]] == 33)) {\n                 NegateSignatureS(vchSig);\n             }"
      },
      {
        "sha": "d800fa97a5cb320bcfaf6ca3fc604eb7bb6eec7a",
        "filename": "test/functional/data/rpc_psbt.json",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dfea0dd082af18dfb02981b7ee1cd44d514388/test/functional/data/rpc_psbt.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dfea0dd082af18dfb02981b7ee1cd44d514388/test/functional/data/rpc_psbt.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/data/rpc_psbt.json?ref=18dfea0dd082af18dfb02981b7ee1cd44d514388",
        "patch": "@@ -57,14 +57,6 @@\n             ],\n             \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAQMEAQAAAAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAAQMEAQAAAAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n             \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgf0cwRAIgdAGK1BgAl7hzMjwAFXILNoTMgSOJEEjn282bVa1nnJkCIHPTabdA4+tT3O+jOCPIBwUUylWn3ZVE8VfBZ5EyYRGMAQEDBAEAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAAEBIADC6wsAAAAAF6kUt/X69A49QKWkWbHbNTXyty+pIeiHIgIDCJ3BDHrG21T5EymvYXMz2ziM6tDCMfcjN50bmQMLAtxHMEQCIGLrelVhB6fHP0WsSrWh3d9vcHX7EnWWmn84Pv/3hLyyAiAMBdu3Rw2/LwhVfdNWxzJcHtMJE+mWzThAlF2xIijaXwEBAwQBAAAAAQQiACCMI1MXN0O1ld+0oHtyuo5C43l9p06H/n2ddJfjsgKJAwEFR1IhAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcIQI63ZBPPW3PWd25BrDe4jUpt/+57VDl6GFRkmhgIh8Oc1KuIgYCOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnMQ2QxqTwAAAIAAAACAAwAAgCIGAwidwQx6xttU+RMpr2FzM9s4jOrQwjH3IzedG5kDCwLcENkMak8AAACAAAAAgAIAAIAAIgIDqaTDf1mW06ol26xrVwrwZQOUSSlCRgs1R1Ptnuylh3EQ2QxqTwAAAIAAAACABAAAgAAiAgJ/Y5l1fS7/VaE2rQLGhLGDi2VW5fG2s0KCqUtrUAUQlhDZDGpPAAAAgAAAAIAFAACAAA==\"\n-        },\n-        {\n-            \"privkeys\" : [\n-                \"cT7J9YpCwY3AVRFSjN6ukeEeWY6mhpbJPxRaDaP5QTdygQRxP9Au\",\n-                \"cNBc3SWUip9PPm1GjRoLEJT6T41iNzCYtD7qro84FMnM5zEqeJsE\"\n-            ],\n-            \"psbt\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAABBEdSIQKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfyEC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtdSriIGApWDvzmuCmCXR60Zmt3WNPphCFWdbFzTm0whg/GrluB/ENkMak8AAACAAAAAgAAAAIAiBgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU21xDZDGpPAAAAgAAAAIABAACAAQMEAQAAAAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohwEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAAQMEAQAAAAAiAgOppMN/WZbTqiXbrGtXCvBlA5RJKUJGCzVHU+2e7KWHcRDZDGpPAAAAgAAAAIAEAACAACICAn9jmXV9Lv9VoTatAsaEsYOLZVbl8bazQoKpS2tQBRCWENkMak8AAACAAAAAgAUAAIAA\",\n-            \"result\" : \"cHNidP8BAJoCAAAAAljoeiG1ba8MI76OcHBFbDNvfLqlyHV5JPVFiHuyq911AAAAAAD/////g40EJ9DsZQpoqka7CwmK6kQiwHGyyng1Kgd5WdB86h0BAAAAAP////8CcKrwCAAAAAAWABTYXCtx0AYLCcmIauuBXlCZHdoSTQDh9QUAAAAAFgAUAK6pouXw+HaliN9VRuh0LR2HAI8AAAAAAAEAuwIAAAABqtc5MQGL0l+ErkALaISL4J23BurCrBgpi6vucatlb4sAAAAASEcwRAIgWPb8fGoz4bMVSNSByCbAFb0wE1qtQs1neQ2rZtKtJDsCIEoc7SYExnNbY5PltBaR3XiwDwxZQvufdRhW+qk4FX26Af7///8CgPD6AgAAAAAXqRQPuUY0IWlrgsgzryQceMF9295JNIfQ8gonAQAAABepFCnKdPigj4GZlCgYXJe12FLkBj9hh2UAAAAiAgLath/0mhTban0CsM0fu3j8SxgxK1tOVNrk26L7/vU210gwRQIhAPYQOLMI3B2oZaNIUnRvAVdyk0IIxtJEVDk82ZvfIhd3AiAFbmdaZ1ptCgK4WxTl4pB02KJam1dgvqKBb2YZEKAG6gEBAwQBAAAAAQRHUiEClYO/Oa4KYJdHrRma3dY0+mEIVZ1sXNObTCGD8auW4H8hAtq2H/SaFNtqfQKwzR+7ePxLGDErW05U2uTbovv+9TbXUq4iBgKVg785rgpgl0etGZrd1jT6YQhVnWxc05tMIYPxq5bgfxDZDGpPAAAAgAAAAIAAAACAIgYC2rYf9JoU22p9ArDNH7t4/EsYMStbTlTa5Nui+/71NtcQ2QxqTwAAAIAAAACAAQAAgAABASAAwusLAAAAABepFLf1+vQOPUClpFmx2zU18rcvqSHohyICAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zRzBEAiBl9FulmYtZon/+GnvtAWrx8fkNVLOqj3RQql9WolEDvQIgf3JHA60e25ZoCyhLVtT/y4j3+3Weq74IqjDym4UTg9IBAQMEAQAAAAEEIgAgjCNTFzdDtZXftKB7crqOQuN5fadOh/59nXSX47ICiQMBBUdSIQMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3CECOt2QTz1tz1nduQaw3uI1Kbf/ue1Q5ehhUZJoYCIfDnNSriIGAjrdkE89bc9Z3bkGsN7iNSm3/7ntUOXoYVGSaGAiHw5zENkMak8AAACAAAAAgAMAAIAiBgMIncEMesbbVPkTKa9hczPbOIzq0MIx9yM3nRuZAwsC3BDZDGpPAAAAgAAAAIACAACAACICA6mkw39ZltOqJdusa1cK8GUDlEkpQkYLNUdT7Z7spYdxENkMak8AAACAAAAAgAQAAIAAIgICf2OZdX0u/1WhNq0CxoSxg4tlVuXxtrNCgqlLa1AFEJYQ2QxqTwAAAIAAAACABQAAgAA=\"\n         }\n     ],\n     \"combiner\" : ["
      },
      {
        "sha": "40039319bd21572795859b6caa6ea2e88fdf31db",
        "filename": "test/util/data/txcreatesignv1.hex",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dfea0dd082af18dfb02981b7ee1cd44d514388/test/util/data/txcreatesignv1.hex",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dfea0dd082af18dfb02981b7ee1cd44d514388/test/util/data/txcreatesignv1.hex",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatesignv1.hex?ref=18dfea0dd082af18dfb02981b7ee1cd44d514388",
        "patch": "@@ -1 +1 @@\n-01000000018594c5bdcaec8f06b78b596f31cd292a294fd031e24eec716f43dac91ea7494d000000008b48304502210096a75056c9e2cc62b7214777b3d2a592cfda7092520126d4ebfcd6d590c99bd8022051bb746359cf98c0603f3004477eac68701132380db8facba19c89dc5ab5c5e201410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ffffffff01a0860100000000001976a9145834479edbbe0539b31ffd3a8f8ebadc2165ed0188ac00000000\n+01000000018594c5bdcaec8f06b78b596f31cd292a294fd031e24eec716f43dac91ea7494d000000008a4730440220131432090a6af42da3e8335ff110831b41a44f4e9d18d88f5d50278380696c7202200fc2e48938f323ad13625890c0ea926c8a189c08b8efc38376b20c8a2188e96e01410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ffffffff01a0860100000000001976a9145834479edbbe0539b31ffd3a8f8ebadc2165ed0188ac00000000"
      },
      {
        "sha": "7a06aa9ffeae549cecab5fbee649ec1cbf9f1774",
        "filename": "test/util/data/txcreatesignv1.json",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dfea0dd082af18dfb02981b7ee1cd44d514388/test/util/data/txcreatesignv1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dfea0dd082af18dfb02981b7ee1cd44d514388/test/util/data/txcreatesignv1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/util/data/txcreatesignv1.json?ref=18dfea0dd082af18dfb02981b7ee1cd44d514388",
        "patch": "@@ -1,18 +1,18 @@\n {\n-    \"txid\": \"977e7cd286cb72cd470d539ba6cb48400f8f387d97451d45cdb8819437a303af\",\n-    \"hash\": \"977e7cd286cb72cd470d539ba6cb48400f8f387d97451d45cdb8819437a303af\",\n+    \"txid\": \"ffc7e509ec3fd60a182eb712621d41a47dc7d4ff310a70826c2fb0e9afb3fa02\",\n+    \"hash\": \"ffc7e509ec3fd60a182eb712621d41a47dc7d4ff310a70826c2fb0e9afb3fa02\",\n     \"version\": 1,\n-    \"size\": 224,\n-    \"vsize\": 224,\n-    \"weight\": 896,\n+    \"size\": 223,\n+    \"vsize\": 223,\n+    \"weight\": 892,\n     \"locktime\": 0,\n     \"vin\": [\n         {\n             \"txid\": \"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485\",\n             \"vout\": 0,\n             \"scriptSig\": {\n-                \"asm\": \"304502210096a75056c9e2cc62b7214777b3d2a592cfda7092520126d4ebfcd6d590c99bd8022051bb746359cf98c0603f3004477eac68701132380db8facba19c89dc5ab5c5e2[ALL] 0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n-                \"hex\": \"48304502210096a75056c9e2cc62b7214777b3d2a592cfda7092520126d4ebfcd6d590c99bd8022051bb746359cf98c0603f3004477eac68701132380db8facba19c89dc5ab5c5e201410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"\n+                \"asm\": \"30440220131432090a6af42da3e8335ff110831b41a44f4e9d18d88f5d50278380696c7202200fc2e48938f323ad13625890c0ea926c8a189c08b8efc38376b20c8a2188e96e[ALL] 0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+                \"hex\": \"4730440220131432090a6af42da3e8335ff110831b41a44f4e9d18d88f5d50278380696c7202200fc2e48938f323ad13625890c0ea926c8a189c08b8efc38376b20c8a2188e96e01410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\"\n             },\n             \"sequence\": 4294967295\n         }\n@@ -32,5 +32,5 @@\n             }\n         }\n     ],\n-    \"hex\": \"01000000018594c5bdcaec8f06b78b596f31cd292a294fd031e24eec716f43dac91ea7494d000000008b48304502210096a75056c9e2cc62b7214777b3d2a592cfda7092520126d4ebfcd6d590c99bd8022051bb746359cf98c0603f3004477eac68701132380db8facba19c89dc5ab5c5e201410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ffffffff01a0860100000000001976a9145834479edbbe0539b31ffd3a8f8ebadc2165ed0188ac00000000\"\n+    \"hex\": \"01000000018594c5bdcaec8f06b78b596f31cd292a294fd031e24eec716f43dac91ea7494d000000008a4730440220131432090a6af42da3e8335ff110831b41a44f4e9d18d88f5d50278380696c7202200fc2e48938f323ad13625890c0ea926c8a189c08b8efc38376b20c8a2188e96e01410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ffffffff01a0860100000000001976a9145834479edbbe0539b31ffd3a8f8ebadc2165ed0188ac00000000\"\n }"
      }
    ]
  },
  {
    "sha": "48b1473c898129a99212e2db36c61cf93625ea17",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGIxNDczYzg5ODEyOWE5OTIxMmUyZGIzNmM2MWNmOTM2MjVlYTE3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-07-15T02:19:44Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-10T01:39:56Z"
      },
      "message": "Use 71 byte signature for DUMMY_SIGNATURE_CREATOR\n\nChanges DUMMY_SIGNATURE_CREATOR to create 71 byte dummy signatures.\n\nUpdate comments to reflect this change",
      "tree": {
        "sha": "5450731f5b800cec8548802e28deccfd45cc946a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5450731f5b800cec8548802e28deccfd45cc946a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48b1473c898129a99212e2db36c61cf93625ea17",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48b1473c898129a99212e2db36c61cf93625ea17",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48b1473c898129a99212e2db36c61cf93625ea17",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48b1473c898129a99212e2db36c61cf93625ea17/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18dfea0dd082af18dfb02981b7ee1cd44d514388",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18dfea0dd082af18dfb02981b7ee1cd44d514388",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18dfea0dd082af18dfb02981b7ee1cd44d514388"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "c103e3c2f0256109e83310039a84c8b3c50bd875",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48b1473c898129a99212e2db36c61cf93625ea17/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48b1473c898129a99212e2db36c61cf93625ea17/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=48b1473c898129a99212e2db36c61cf93625ea17",
        "patch": "@@ -423,16 +423,16 @@ class DummySignatureCreator final : public BaseSignatureCreator {\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override\n     {\n         // Create a dummy signature that is a valid DER-encoding\n-        vchSig.assign(72, '\\000');\n+        vchSig.assign(71, '\\000');\n         vchSig[0] = 0x30;\n-        vchSig[1] = 69;\n+        vchSig[1] = 68;\n         vchSig[2] = 0x02;\n-        vchSig[3] = 33;\n+        vchSig[3] = 32;\n         vchSig[4] = 0x01;\n-        vchSig[4 + 33] = 0x02;\n-        vchSig[5 + 33] = 32;\n-        vchSig[6 + 33] = 0x01;\n-        vchSig[6 + 33 + 32] = SIGHASH_ALL;\n+        vchSig[4 + 32] = 0x02;\n+        vchSig[5 + 32] = 32;\n+        vchSig[6 + 32] = 0x01;\n+        vchSig[6 + 32 + 32] = SIGHASH_ALL;\n         return true;\n     }\n };"
      },
      {
        "sha": "173f1b786c9b8ea528156e5bb403d9ba14b0cba5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48b1473c898129a99212e2db36c61cf93625ea17/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48b1473c898129a99212e2db36c61cf93625ea17/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=48b1473c898129a99212e2db36c61cf93625ea17",
        "patch": "@@ -1540,7 +1540,7 @@ int64_t CWalletTx::GetTxTime() const\n     return n ? n : nTimeReceived;\n }\n \n-// Helper for producing a max-sized low-S signature (eg 72 bytes)\n+// Helper for producing a max-sized low-S low-R signature (eg 71 bytes)\n bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n {\n     // Fill in dummy signatures for fee calculation.\n@@ -1556,7 +1556,7 @@ bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n     return true;\n }\n \n-// Helper for producing a bunch of max-sized low-S signatures (eg 72 bytes)\n+// Helper for producing a bunch of max-sized low-S low-R signatures (eg 71 bytes)\n bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const\n {\n     // Fill in dummy signatures for fee calculation."
      },
      {
        "sha": "8054cfadf0393dd674e17ebba0795593ef7c01d7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48b1473c898129a99212e2db36c61cf93625ea17/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48b1473c898129a99212e2db36c61cf93625ea17/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=48b1473c898129a99212e2db36c61cf93625ea17",
        "patch": "@@ -1308,7 +1308,7 @@ class WalletRescanReserver\n };\n \n // Calculate the size of the transaction assuming all signatures are max size\n-// Use DummySignatureCreator, which inserts 72 byte signatures everywhere.\n+// Use DummySignatureCreator, which inserts 71 byte signatures everywhere.\n // NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n // be IsAllFromMe).\n int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet);"
      }
    ]
  },
  {
    "sha": "e306be742932d4ea5aca0ea4768e54b2fc3dc6a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzA2YmU3NDI5MzJkNGVhNWFjYTBlYTQ3NjhlNTRiMmZjM2RjNmEw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-07T23:59:53Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-08-10T01:39:56Z"
      },
      "message": "Use 72 byte dummy signatures when watching only inputs may be used\n\nWith watching only inputs, we do not know how large the signatures\nfor those inputs will be as their signers may not have implemented\n71 byte signatures. Thus we estimate their fees using the 72 byte\ndummy signature to ensure that we pay enough fees.\n\nThis only effects fundrawtransaction when includeWatching is true.",
      "tree": {
        "sha": "29777760bfbb33ee879fe33e50297a7ddd7a1bef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29777760bfbb33ee879fe33e50297a7ddd7a1bef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e306be742932d4ea5aca0ea4768e54b2fc3dc6a0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e306be742932d4ea5aca0ea4768e54b2fc3dc6a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e306be742932d4ea5aca0ea4768e54b2fc3dc6a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e306be742932d4ea5aca0ea4768e54b2fc3dc6a0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48b1473c898129a99212e2db36c61cf93625ea17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48b1473c898129a99212e2db36c61cf93625ea17",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48b1473c898129a99212e2db36c61cf93625ea17"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 45,
      "deletions": 37
    },
    "files": [
      {
        "sha": "66d942d7c5dab9042c73760dba069d9f1f3e7874",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e306be742932d4ea5aca0ea4768e54b2fc3dc6a0/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e306be742932d4ea5aca0ea4768e54b2fc3dc6a0/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=e306be742932d4ea5aca0ea4768e54b2fc3dc6a0",
        "patch": "@@ -417,22 +417,25 @@ class DummySignatureChecker final : public BaseSignatureChecker\n const DummySignatureChecker DUMMY_CHECKER;\n \n class DummySignatureCreator final : public BaseSignatureCreator {\n+private:\n+    char m_r_len = 32;\n+    char m_s_len = 32;\n public:\n-    DummySignatureCreator() {}\n+    DummySignatureCreator(char r_len, char s_len) : m_r_len(r_len), m_s_len(s_len) {}\n     const BaseSignatureChecker& Checker() const override { return DUMMY_CHECKER; }\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override\n     {\n         // Create a dummy signature that is a valid DER-encoding\n-        vchSig.assign(71, '\\000');\n+        vchSig.assign(m_r_len + m_s_len + 7, '\\000');\n         vchSig[0] = 0x30;\n-        vchSig[1] = 68;\n+        vchSig[1] = m_r_len + m_s_len + 4;\n         vchSig[2] = 0x02;\n-        vchSig[3] = 32;\n+        vchSig[3] = m_r_len;\n         vchSig[4] = 0x01;\n-        vchSig[4 + 32] = 0x02;\n-        vchSig[5 + 32] = 32;\n-        vchSig[6 + 32] = 0x01;\n-        vchSig[6 + 32 + 32] = SIGHASH_ALL;\n+        vchSig[4 + m_r_len] = 0x02;\n+        vchSig[5 + m_r_len] = m_s_len;\n+        vchSig[6 + m_r_len] = 0x01;\n+        vchSig[6 + m_r_len + m_s_len] = SIGHASH_ALL;\n         return true;\n     }\n };\n@@ -450,7 +453,8 @@ bool LookupHelper(const M& map, const K& key, V& value)\n \n }\n \n-const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR = DummySignatureCreator();\n+const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR = DummySignatureCreator(32, 32);\n+const BaseSignatureCreator& DUMMY_MAXIMUM_SIGNATURE_CREATOR = DummySignatureCreator(33, 32);\n const SigningProvider& DUMMY_SIGNING_PROVIDER = SigningProvider();\n \n bool IsSolvable(const SigningProvider& provider, const CScript& script)"
      },
      {
        "sha": "a614d17a9f248f293043c201b6e96ea8a6ad7a21",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e306be742932d4ea5aca0ea4768e54b2fc3dc6a0/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e306be742932d4ea5aca0ea4768e54b2fc3dc6a0/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=e306be742932d4ea5aca0ea4768e54b2fc3dc6a0",
        "patch": "@@ -80,8 +80,10 @@ class MutableTransactionSignatureCreator : public BaseSignatureCreator {\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };\n \n-/** A signature creator that just produces 72-byte empty signatures. */\n+/** A signature creator that just produces 71-byte empty signatures. */\n extern const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR;\n+/** A signature creator that just produces 72-byte empty signatures. */\n+extern const BaseSignatureCreator& DUMMY_MAXIMUM_SIGNATURE_CREATOR;\n \n typedef std::pair<CPubKey, std::vector<unsigned char>> SigPair;\n "
      },
      {
        "sha": "3a473e4de3757ce8747b945b6db7a70b370e14f3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 15,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e306be742932d4ea5aca0ea4768e54b2fc3dc6a0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e306be742932d4ea5aca0ea4768e54b2fc3dc6a0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e306be742932d4ea5aca0ea4768e54b2fc3dc6a0",
        "patch": "@@ -1541,29 +1541,28 @@ int64_t CWalletTx::GetTxTime() const\n }\n \n // Helper for producing a max-sized low-S low-R signature (eg 71 bytes)\n-bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n+// or a max-sized low-S signature (e.g. 72 bytes) if use_max_sig is true\n+bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig) const\n {\n     // Fill in dummy signatures for fee calculation.\n     const CScript& scriptPubKey = txout.scriptPubKey;\n     SignatureData sigdata;\n \n-    if (!ProduceSignature(*this, DUMMY_SIGNATURE_CREATOR, scriptPubKey, sigdata))\n-    {\n+    if (!ProduceSignature(*this, use_max_sig ? DUMMY_MAXIMUM_SIGNATURE_CREATOR : DUMMY_SIGNATURE_CREATOR, scriptPubKey, sigdata)) {\n         return false;\n-    } else {\n-        UpdateInput(tx_in, sigdata);\n     }\n+    UpdateInput(tx_in, sigdata);\n     return true;\n }\n \n // Helper for producing a bunch of max-sized low-S low-R signatures (eg 71 bytes)\n-bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const\n+bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts, bool use_max_sig) const\n {\n     // Fill in dummy signatures for fee calculation.\n     int nIn = 0;\n     for (const auto& txout : txouts)\n     {\n-        if (!DummySignInput(txNew.vin[nIn], txout)) {\n+        if (!DummySignInput(txNew.vin[nIn], txout, use_max_sig)) {\n             return false;\n         }\n \n@@ -1572,7 +1571,7 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n     return true;\n }\n \n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet)\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig)\n {\n     std::vector<CTxOut> txouts;\n     // Look up the inputs.  We should have already checked that this transaction\n@@ -1586,26 +1585,26 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wall\n         assert(input.prevout.n < mi->second.tx->vout.size());\n         txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n     }\n-    return CalculateMaximumSignedTxSize(tx, wallet, txouts);\n+    return CalculateMaximumSignedTxSize(tx, wallet, txouts, use_max_sig);\n }\n \n // txouts needs to be in the order of tx.vin\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts)\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts, bool use_max_sig)\n {\n     CMutableTransaction txNew(tx);\n-    if (!wallet->DummySignTx(txNew, txouts)) {\n+    if (!wallet->DummySignTx(txNew, txouts, use_max_sig)) {\n         // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n         // implies that we can sign for every input.\n         return -1;\n     }\n     return GetVirtualTransactionSize(txNew);\n }\n \n-int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* wallet)\n+int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* wallet, bool use_max_sig)\n {\n     CMutableTransaction txn;\n     txn.vin.push_back(CTxIn(COutPoint()));\n-    if (!wallet->DummySignInput(txn.vin[0], txout)) {\n+    if (!wallet->DummySignInput(txn.vin[0], txout, use_max_sig)) {\n         // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n         // implies that we can sign for every input.\n         return -1;\n@@ -2332,7 +2331,7 @@ void CWallet::AvailableCoins(std::vector<COutput> &vCoins, bool fOnlySafe, const\n             bool solvable = IsSolvable(*this, pcoin->tx->vout[i].scriptPubKey);\n             bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n \n-            vCoins.push_back(COutput(pcoin, i, nDepth, spendable, solvable, safeTx));\n+            vCoins.push_back(COutput(pcoin, i, nDepth, spendable, solvable, safeTx, (coinControl && coinControl->fAllowWatchOnly)));\n \n             // Checks the sum amount of all UTXO's.\n             if (nMinimumSumAmount != MAX_MONEY) {\n@@ -2881,7 +2880,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                     txNew.vin.push_back(CTxIn(coin.outpoint,CScript()));\n                 }\n \n-                nBytes = CalculateMaximumSignedTxSize(txNew, this);\n+                nBytes = CalculateMaximumSignedTxSize(txNew, this, coin_control.fAllowWatchOnly);\n                 if (nBytes < 0) {\n                     strFailReason = _(\"Signing transaction failed\");\n                     return false;"
      },
      {
        "sha": "d1c0218d9e5733abe86c1fac331dc54041aff4b3",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e306be742932d4ea5aca0ea4768e54b2fc3dc6a0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e306be742932d4ea5aca0ea4768e54b2fc3dc6a0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e306be742932d4ea5aca0ea4768e54b2fc3dc6a0",
        "patch": "@@ -276,7 +276,7 @@ class CMerkleTx\n };\n \n //Get the marginal bytes of spending the specified output\n-int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* pwallet);\n+int CalculateMaximumSignedInputSize(const CTxOut& txout, const CWallet* pwallet, bool use_max_sig = false);\n \n /**\n  * A transaction with a bunch of additional info that only the owner cares about.\n@@ -461,9 +461,9 @@ class CWalletTx : public CMerkleTx\n     CAmount GetChange() const;\n \n     // Get the marginal bytes if spending the specified output from this transaction\n-    int GetSpendSize(unsigned int out) const\n+    int GetSpendSize(unsigned int out, bool use_max_sig = false) const\n     {\n-        return CalculateMaximumSignedInputSize(tx->vout[out], pwallet);\n+        return CalculateMaximumSignedInputSize(tx->vout[out], pwallet, use_max_sig);\n     }\n \n     void GetAmounts(std::list<COutputEntry>& listReceived,\n@@ -507,20 +507,23 @@ class COutput\n     /** Whether we know how to spend this output, ignoring the lack of keys */\n     bool fSolvable;\n \n+    /** Whether to use the maximum sized, 72 byte signature when calculating the size of the input spend. This should only be set when watch-only outputs are allowed */\n+    bool use_max_sig;\n+\n     /**\n      * Whether this output is considered safe to spend. Unconfirmed transactions\n      * from outside keys and unconfirmed replacement transactions are considered\n      * unsafe and will not be used to fund new spending transactions.\n      */\n     bool fSafe;\n \n-    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn, bool fSolvableIn, bool fSafeIn)\n+    COutput(const CWalletTx *txIn, int iIn, int nDepthIn, bool fSpendableIn, bool fSolvableIn, bool fSafeIn, bool use_max_sig_in = false)\n     {\n-        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn; fSolvable = fSolvableIn; fSafe = fSafeIn; nInputBytes = -1;\n+        tx = txIn; i = iIn; nDepth = nDepthIn; fSpendable = fSpendableIn; fSolvable = fSolvableIn; fSafe = fSafeIn; nInputBytes = -1; use_max_sig = use_max_sig_in;\n         // If known and signable by the given wallet, compute nInputBytes\n         // Failure will keep this value -1\n         if (fSpendable && tx) {\n-            nInputBytes = tx->GetSpendSize(i);\n+            nInputBytes = tx->GetSpendSize(i, use_max_sig);\n         }\n     }\n \n@@ -976,14 +979,14 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries);\n     bool AddAccountingEntry(const CAccountingEntry&);\n     bool AddAccountingEntry(const CAccountingEntry&, WalletBatch *batch);\n-    bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts) const\n+    bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts, bool use_max_sig = false) const\n     {\n         std::vector<CTxOut> v_txouts(txouts.size());\n         std::copy(txouts.begin(), txouts.end(), v_txouts.begin());\n-        return DummySignTx(txNew, v_txouts);\n+        return DummySignTx(txNew, v_txouts, use_max_sig);\n     }\n-    bool DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const;\n-    bool DummySignInput(CTxIn &tx_in, const CTxOut &txout) const;\n+    bool DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts, bool use_max_sig = false) const;\n+    bool DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig = false) const;\n \n     CFeeRate m_pay_tx_fee{DEFAULT_PAY_TX_FEE};\n     unsigned int m_confirm_target{DEFAULT_TX_CONFIRM_TARGET};\n@@ -1311,6 +1314,6 @@ class WalletRescanReserver\n // Use DummySignatureCreator, which inserts 71 byte signatures everywhere.\n // NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n // be IsAllFromMe).\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet);\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts);\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig = false);\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts, bool use_max_sig = false);\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  }
]