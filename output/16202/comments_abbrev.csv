DrahtBot,2019-06-13 11:13:05,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16839](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16839.html) (Replace Connman and BanMan globals with Nod",https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-501659119,501659119,
jonasschnelli,2019-07-25 11:09:33,"Thanks @ariard for the review.\nFixed those points/nits. Mainly the private declaration of members and methods of the `V1TransportDeserializer` class. ",https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-515002359,515002359,
sipa,2019-07-29 22:56:05,"Concept and approach ACK.\n\nI'll go through the code in more detail soon, but one thing I noticed is that this introduces an unnecessary copy of the message payload in the `GetMessage()` function. It can be avoided by moving the `CDataStream`: https://github.com/sipa/bitcoin/tree/pr16202",https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-516192751,516192751,
jonasschnelli,2019-07-30 14:22:47,"Thanks @sipa.\nAdded sipa's 6e4d18346195310df96f42dcce4e29eec2fcc2eb to this PR",https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-516441452,516441452,
promag,2019-08-06 01:24:59,"Concept ACK, following https://github.com/bitcoin/bitcoin/pull/14046#issuecomment-431528330 does makes sense vs #14046.",https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-518459156,518459156,
etscrivner,2019-09-24 15:17:30,"ACK 7370bed970e9455dc686c8088dd3e3afb219bbee\n\nApproach is very clean. All unit and functional tests pass. Manually tested some P2P functionality to provide additional confidence.",https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-534607497,534607497,
jkczyz,2019-09-25 18:30:17,"Not sure if more refactoring would be first required, but it would be nice if `TransportDeserializer`'s interface could be simplified to a single method. Roughly speaking:\n\n```c++\nStatusOr<CNetMessage> Deserialize(CDataStream& stream);\n```\n\nWhere StatusOr is essentially a variant type of error or result, though I suppose exceptions could be used instead. An output parameter for the res",https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-535152710,535152710,
fjahr,2019-09-30 17:16:36,"ACK 7370bed\n\nSuccessfully ran unit and functional tests, reviewed code. I agree with @jkczyz as in I would prefer a stateless deserializer as well but also with @jonatack that this would be better as a follow-up PR.",https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-536660326,536660326,
marcinja,2019-10-04 01:00:41,"ACK 7370bed970e9455dc686c8088dd3e3afb219bbee \n\nReviewed code and ran tests at each commit. I also agree with other reviewers that a stateless deserializer would be nice for a potential follow-up.",https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-538185974,538185974,
practicalswift,2019-10-04 04:51:44,@jonasschnelli Have you considered adding a fuzz harness to test the robustness? What would be a good harness entry point?,https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-538232435,538232435,
jonasschnelli,2019-10-10 19:35:31,Rebased,https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-540747501,540747501,
practicalswift,2019-10-13 22:08:39,@jonasschnelli Friendly ping regarding my fuzzing question :),https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-541464501,541464501,
jonasschnelli,2019-10-15 12:33:28,@practicalswift: this PR doesn't change the behaviour and the way it reads into the buffers is identical. More fuzz tests for the network layer are upcoming (already in my p2p-v2 branch).,https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-542188571,542188571,
jonasschnelli,2019-10-18 06:59:07,Fixed all remaining nits and issues.,https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-543553533,543553533,
practicalswift,2019-10-18 07:25:40,@jonasschnelli Sounds very good! Are the fuzzers available to look at? I couldn't find the `p2p-v2` branch :),https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-543565831,543565831,
jonasschnelli,2019-10-18 07:42:21,"@practicalswift\nThe branch is not yet pushed. Sorry.\n\nHowever. Fuzzing is not a planed part of this PR.",https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-543573463,543573463,
sipa,2019-10-18 21:34:42,"ACK efecb74677222f6c70adf7f860c315f430d39ec4\n\nI have a few suggested improvements at https://github.com/sipa/bitcoin/commits/jonasschnelli_net_refactor_1: getting rid of the special message for oversized messages (strange to deal with that specifically if even larger messages are ignored, and the interface is cleaner without it), simplifying the interface a bit, and adding final/override.",https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-543960025,543960025,
jonasschnelli,2019-10-23 07:31:36,"Added one extra commit that fixes wrong `std::move` behaviour for the `CNetMessages:m_recv` (`CDataStream`).\n\nAlso added @sipa s three commits.",https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-545310229,545310229,
promag,2019-10-27 16:16:51,Code review ACK ed2dc5e48abed1cde6ab98025dc8212917d47d21.,https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-546709859,546709859,
marcinja,2019-10-28 01:51:15,Code review ACK ed2dc5e48abed1cde6ab98025dc8212917d47d21,https://github.com/bitcoin/bitcoin/pull/16202#issuecomment-546761590,546761590,
ariard,2019-07-23 14:15:41,Shouldn't these both methods be part of the private interface given they are version-message specific ?,https://github.com/bitcoin/bitcoin/pull/16202#discussion_r306343247,306343247,src/net.h
ariard,2019-07-23 14:16:47,nit: if it's a public interface maybe add a short line of comment on what is expected for every method,https://github.com/bitcoin/bitcoin/pull/16202#discussion_r306343873,306343873,src/net.h
ariard,2019-07-23 14:31:29,"IMO, you may also move more members in the private interface, what's the reason to have `in_data` as public ?",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r306352424,306352424,src/net.h
ariard,2019-07-23 14:52:29,nit : wonder if this change shouldn't be part of first commit,https://github.com/bitcoin/bitcoin/pull/16202#discussion_r306364952,306364952,src/net.cpp
ariard,2019-07-23 15:23:22,"Isn't this check redundant with first check in `IsValid` ? Furthermore isn't netmagic validity a subset of header one,  and so you may remove it completely and only rely on `m_valid_header` ?",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r306382732,306382732,src/net.cpp
ariard,2019-07-23 15:33:24,So next step would be to move these transport-protocol-specific fields in the Transport Deserializer ? If a `CNetMessage` doesn't have a valid_header it shouldn't succeed deserialization right ?,https://github.com/bitcoin/bitcoin/pull/16202#discussion_r306388229,306388229,src/net.h
ariard,2019-07-23 15:49:38,"nit: ""check header""",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r306396755,306396755,src/net_processing.cpp
ariard,2019-07-23 15:50:45,"And if yes, I think checks in `ProcessMessages` won't have anymore a reason to exist?",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r306397371,306397371,src/net.h
jonasschnelli,2019-07-24 06:40:48,"I agree with that they should be private methods (will fix).\nBut I don't think we should make behavioral changes in this PR that's why I tried to not move the checks.\nPRs that ""optimize"" those checks are #15206 and #15197.",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r306648411,306648411,src/net.h
jonasschnelli,2019-07-24 06:48:17,"Yes. It's redundant for the same reason as said above. Further optimizations would change the behavior of v1 decomposing.\n\n`ProcessMessages()` happens after de-queuing deserialized messages. If we would check during deserialization (and disconnect), we would change the behavior.\n\nAlso, `ProcessMessages()` differentiates between invalid netmagic and invalid header. It tolerates invalid head",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r306650400,306650400,src/net.cpp
jonasschnelli,2019-07-24 06:49:35,Next step would be to further avoid transport-specific stuff in `ProcessMessages()`. I think  #15206 and #15197 are a good next step (would need rebase after this).,https://github.com/bitcoin/bitcoin/pull/16202#discussion_r306650745,306650745,src/net.h
ariard,2019-07-24 15:32:19,"Ok thanks, going to check them once they are rebased",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r306878168,306878168,src/net.h
ariard,2019-07-24 15:37:19,"Ah yes exact, you may have a valid netmagic and an invalid header and get accepted. \n\nOkay, I agree if these points are addressed later in behavioral changes specific PRs that's better than everything at once. ",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r306880677,306880677,src/net.cpp
ariard,2019-07-25 14:28:35,nit: s/retruns/returns/,https://github.com/bitcoin/bitcoin/pull/16202#discussion_r307326085,307326085,src/net.h
jonasschnelli,2019-08-05 11:54:56,fixed.,https://github.com/bitcoin/bitcoin/pull/16202#discussion_r310567059,310567059,src/net.h
dongcarl,2019-09-05 17:24:31,Had to do a double-take here... But this shouldn't change behaviour as `msgs.front().m_recv.size()` is always equal to `msgs.front().m_message_size` because the `msgs.front().m_recv` hasn't advanced its `nReadPos` yet. Verified by placing an assert and running the unit and functional tests.,https://github.com/bitcoin/bitcoin/pull/16202#discussion_r321387249,321387249,src/net_processing.cpp
jkczyz,2019-09-25 15:26:46,Nit: Use default member initializers for these rather than repeating the members in the constructor.,https://github.com/bitcoin/bitcoin/pull/16202#discussion_r328190108,328190108,src/net.h
jkczyz,2019-09-25 15:42:54,"Rather than implementing a custom `Reset` function, would it be simpler to use `unique_ptr::reset` with a new deserializer in `CNode` whenever a new message is parsed? That is, an instance of `TransportDeserializer` would be responsible for deserializing a single message. Then there is no risk of forgetting to update the `Reset` method as the code changes, which could leave the deserializer in a p",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r328198724,328198724,src/net.h
marcinja,2019-10-04 00:56:30,It might be useful to  print `pfrom->GetId()` in here also. ,https://github.com/bitcoin/bitcoin/pull/16202#discussion_r331308653,331308653,src/net_processing.cpp
promag,2019-10-15 23:08:18,"d8c3e95a443cb581825e0d4456f0b7886960e489\n\nJust use `msg`:\n```cpp\nmapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(msg.m_command);\n```",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r335215820,335215820,src/net.cpp
promag,2019-10-15 23:09:44,"d8c3e95a443cb581825e0d4456f0b7886960e489\n\n```cpp\ni->second += msg.m_message_size + CMessageHeader::HEADER_SIZE;\n```",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r335216152,335216152,src/net.cpp
promag,2019-10-15 23:11:14,"d8c3e95a443cb581825e0d4456f0b7886960e489\n\nnit, could move these up before L707 and avoid the duplicate `GetCommand()` in L709.",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r335216505,335216505,src/net.cpp
promag,2019-10-15 23:14:11,"d8c3e95a443cb581825e0d4456f0b7886960e489\n\nAgree with @jkczyz.",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r335217170,335217170,src/net.h
promag,2019-10-15 23:20:03,"d8c3e95a443cb581825e0d4456f0b7886960e489\n\nMake this `const std::string&`? Changed locally and looks good.",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r335218509,335218509,src/net_processing.cpp
promag,2019-10-15 23:23:34,"b8e9633d127fd1e740b3c9e25a6ed5d480a77f25\n\nnit, use correct style in new code? `int version`.",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r335219338,335219338,src/net.h
promag,2019-10-15 23:24:02,"b8e9633d127fd1e740b3c9e25a6ed5d480a77f25\n\nnit, `virtual int Read(const char* data, unsigned int bytes) = 0`\n",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r335219454,335219454,src/net.h
jonasschnelli,2019-10-18 06:51:13,"For the current use case, I find a explicit manual reset better understand- and readable.",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r336341668,336341668,src/net.h
ryanofsky,2019-10-18 18:04:19,"In commit ""Refactor: split network transport deserializing from message container"" (6294ecdb8bb4eb7049a18c721ee8cb4a53d80a06)\n\nstd::move here is misleading, and will result in a copy because recv_in is const. Would suggest dropping std::move or changing the argument type to non-const `CDataStream recv_in` (if you want to give the caller the option of moving or copying) or `CDataStream&& recv_i",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r336612138,336612138,src/net.h
ryanofsky,2019-10-18 18:23:36,"In commit ""Refactor: split network transport deserializing from message container"" (6294ecdb8bb4eb7049a18c721ee8cb4a53d80a06)\n\nIt seems strange that this commit now logs two slightly different CHECKSUM ERROR line from different code locations instead of definitively logging in one place like the previous code.\n\nIt is also odd that the checksum error log print was copied here, but the inval",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r336619783,336619783,src/net.cpp
ryanofsky,2019-10-18 19:13:41,"In commit ""Refactor: split network transport deserializing from message container"" (6294ecdb8bb4eb7049a18c721ee8cb4a53d80a06)\n\nWhy do CNetMessage and TransportDeserializer both have SetVersion methods now? It seems like only TransportDeserializer should have a SetVersion method, and it should be responsible for passing it the version on to CNetMessage objects as it constructs them.\n\nRght n",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r336638822,336638822,src/net.h
ryanofsky,2019-10-18 19:25:27,"In commit ""Refactor: split network transport deserializing from message container"" (6294ecdb8bb4eb7049a18c721ee8cb4a53d80a06)\n\nReset method seems to reset every member except `hdr`, leaving it untouched. I guess this is because `CMessageHeader` doesn't have a clear method or easily callable constructor, but it would be good to have a comment saying `hdr` is intentionally skipped, because this ",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r336642836,336642836,src/net.h
ryanofsky,2019-10-18 19:42:42,"In commit ""Use adapter pattern for the network deserializer"" (efecb74677222f6c70adf7f860c315f430d39ec4)\n\nWould be good to add `override` keyword to Complete, Read, and other overridden methods for clarity and compile errors if there are changes to superclass and subclass methods no longer match up.",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r336648622,336648622,src/net.h
ryanofsky,2019-10-23 15:32:24,"In commit ""Remove oversized message detection from log and interface"" (6a91499496d76c2b3e84489e9723b60514fb08db)\n\nIs there a different log message this could check for? It would seem better if the test could continue checking the reason for disconnect.",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r338122333,338122333,test/functional/p2p_invalid_messages.py
ryanofsky,2019-10-23 15:43:16,"In commit ""Add override/final modifiers to V1TransportDeserializer"" (ed2dc5e48abed1cde6ab98025dc8212917d47d21)\n\nThis function is still never called. Isn't it pointless for CNetMessage and TransportDeserializer to both have SetVersion methods, instead of just setting the version in a single place? See previous https://github.com/bitcoin/bitcoin/pull/16202#discussion_r336638822",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r338128482,338128482,src/net.h
ariard,2019-10-23 21:06:45,"nit: ""store ... wire message size"" has been dropped",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r338278857,338278857,src/net.cpp
ariard,2019-10-23 21:37:58,"Why define `nMessageSize` and `strCommand` here, can't we use `CNetMessage` members directly ? We don't need to check anything on them",https://github.com/bitcoin/bitcoin/pull/16202#discussion_r338291351,338291351,src/net_processing.cpp
rebroad,2021-05-08 08:00:48,why is this function in the .h instead of the .cpp?,https://github.com/bitcoin/bitcoin/pull/16202#discussion_r628718553,628718553,src/net.h
rebroad,2021-05-08 08:01:07,why is this function in the .h instead of in the .cpp?,https://github.com/bitcoin/bitcoin/pull/16202#discussion_r628718578,628718578,src/net.h
