[
  {
    "sha": "8537ecdfc40181249ec37556015a99cfae4b21fd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTM3ZWNkZmM0MDE4MTI0OWVjMzc1NTYwMTVhOTljZmFlNGIyMWZk",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-01T20:05:16Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-01T20:05:16Z"
      },
      "message": "Revert \"Enable policy enforcing GetMedianTimePast as the end point of lock-time constraints\"\n\nThis reverts commit dea8d21fc63e9f442299c97010e4740558f4f037.",
      "tree": {
        "sha": "e7a5c3815bcfd33247cd1195d248f13767517c2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7a5c3815bcfd33247cd1195d248f13767517c2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8537ecdfc40181249ec37556015a99cfae4b21fd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8537ecdfc40181249ec37556015a99cfae4b21fd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8537ecdfc40181249ec37556015a99cfae4b21fd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8537ecdfc40181249ec37556015a99cfae4b21fd/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02a95be97759e70d9e7537775c95eec219c8333e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a95be97759e70d9e7537775c95eec219c8333e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02a95be97759e70d9e7537775c95eec219c8333e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "fdc54a70a1bcd3730038fbc6fb1346ebee3ae419",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8537ecdfc40181249ec37556015a99cfae4b21fd/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8537ecdfc40181249ec37556015a99cfae4b21fd/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=8537ecdfc40181249ec37556015a99cfae4b21fd",
        "patch": "@@ -44,7 +44,7 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n /** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_MEDIAN_TIME_PAST;\n+static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = 0;\n \n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**"
      },
      {
        "sha": "91a3a5738ef298526c762d2f85ebdf3f5ca135cc",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8537ecdfc40181249ec37556015a99cfae4b21fd/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8537ecdfc40181249ec37556015a99cfae4b21fd/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=8537ecdfc40181249ec37556015a99cfae4b21fd",
        "patch": "@@ -4,7 +4,6 @@\n \n #include \"chainparams.h\"\n #include \"coins.h\"\n-#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n@@ -230,7 +229,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n+    BOOST_CHECK(!CheckFinalTx(tx));\n \n     // time locked\n     tx2.vin.resize(1);\n@@ -244,7 +243,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n+    BOOST_CHECK(!CheckFinalTx(tx2));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n \n@@ -262,7 +261,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     //BOOST_CHECK(CheckFinalTx(tx2));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n     delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;"
      }
    ]
  },
  {
    "sha": "40cd32e835092c3158175511da5193193ec54939",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGNkMzJlODM1MDkyYzMxNTgxNzU1MTFkYTUxOTMxOTNlYzU0OTM5",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-01T20:05:18Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2015-11-01T20:05:18Z"
      },
      "message": "Revert \"Add rules--presently disabled--for using GetMedianTimePast as endpoint for lock-time calculations\"\n\nThis reverts commit 9d55050773d57c0e12005e524f2e54d9e622c6e2.\n\nAs noted by Luke-Jr, under some conditions this will accept transactions which are invalid by the network\n rules.  This happens when the current block time is head of the median time past and a transaction's\n locktime is in the middle.\n\nThis could be addressed by changing the rule to MAX(this_block_time, MTP+offset) but this solution and\n the particular offset used deserve some consideration.",
      "tree": {
        "sha": "a277d4f0514dc26c86c8fa86ab831acd6ed3e63f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a277d4f0514dc26c86c8fa86ab831acd6ed3e63f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40cd32e835092c3158175511da5193193ec54939",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40cd32e835092c3158175511da5193193ec54939",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40cd32e835092c3158175511da5193193ec54939",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40cd32e835092c3158175511da5193193ec54939/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8537ecdfc40181249ec37556015a99cfae4b21fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8537ecdfc40181249ec37556015a99cfae4b21fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8537ecdfc40181249ec37556015a99cfae4b21fd"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 7,
      "deletions": 54
    },
    "files": [
      {
        "sha": "f937844e9f7e15391537db3aea9cdfadd1a94617",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40cd32e835092c3158175511da5193193ec54939/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40cd32e835092c3158175511da5193193ec54939/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=40cd32e835092c3158175511da5193193ec54939",
        "patch": "@@ -13,10 +13,4 @@ static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n-/** Flags for LockTime() */\n-enum {\n-    /* Use GetMedianTimePast() instead of nTime for end point timestamp. */\n-    LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),\n-};\n-\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "26a22ae6fd7cfd7d618410c6a03a6022b22d01ee",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 35,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40cd32e835092c3158175511da5193193ec54939/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40cd32e835092c3158175511da5193193ec54939/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=40cd32e835092c3158175511da5193193ec54939",
        "patch": "@@ -650,35 +650,10 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return true;\n }\n \n-bool CheckFinalTx(const CTransaction &tx, int flags)\n+bool CheckFinalTx(const CTransaction &tx)\n {\n     AssertLockHeld(cs_main);\n-\n-    // By convention a negative value for flags indicates that the\n-    // current network-enforced consensus rules should be used. In\n-    // a future soft-fork scenario that would mean checking which\n-    // rules would be enforced for the next block and setting the\n-    // appropriate flags. At the present time no soft-forks are\n-    // scheduled, so no flags are set.\n-    flags = std::max(flags, 0);\n-\n-    // CheckFinalTx() uses chainActive.Height()+1 to evaluate\n-    // nLockTime because when IsFinalTx() is called within\n-    // CBlock::AcceptBlock(), the height of the block *being*\n-    // evaluated is what is used. Thus if we want to know if a\n-    // transaction can be part of the *next* block, we need to call\n-    // IsFinalTx() with one more than chainActive.Height().\n-    const int nBlockHeight = chainActive.Height() + 1;\n-\n-    // Timestamps on the other hand don't get any special treatment,\n-    // because we can't know what timestamp the next block will have,\n-    // and there aren't timestamp applications where it matters.\n-    // However this changes once median past time-locks are enforced:\n-    const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n-                             ? chainActive.Tip()->GetMedianTimePast()\n-                             : GetAdjustedTime();\n-\n-    return IsFinalTx(tx, nBlockHeight, nBlockTime);\n+    return IsFinalTx(tx, chainActive.Height() + 1, GetAdjustedTime());\n }\n \n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n@@ -822,7 +797,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    if (!CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+    if (!CheckFinalTx(tx))\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n@@ -2748,15 +2723,10 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n-        int nLockTimeFlags = 0;\n-        int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n-                                ? pindexPrev->GetMedianTimePast()\n-                                : block.GetBlockTime();\n-        if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n+        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n             return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n         }\n-    }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):"
      },
      {
        "sha": "202d2c772ba896b3f9f71cba6d1e6121ddd53594",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40cd32e835092c3158175511da5193193ec54939/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40cd32e835092c3158175511da5193193ec54939/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=40cd32e835092c3158175511da5193193ec54939",
        "patch": "@@ -308,10 +308,8 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  * Check if transaction will be final in the next block to be created.\n  *\n  * Calls IsFinalTx() with current block height and appropriate block time.\n- *\n- * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n+bool CheckFinalTx(const CTransaction &tx);\n \n /** \n  * Closure representing one script verification"
      },
      {
        "sha": "42c8bb970b9b5aa051af5b280944b9895a67f114",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40cd32e835092c3158175511da5193193ec54939/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40cd32e835092c3158175511da5193193ec54939/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=40cd32e835092c3158175511da5193193ec54939",
        "patch": "@@ -148,7 +148,6 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         CBlockIndex* pindexPrev = chainActive.Tip();\n         const int nHeight = pindexPrev->nHeight + 1;\n         pblock->nTime = GetAdjustedTime();\n-        const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n         CCoinsViewCache view(pcoinsTip);\n \n         // Priority order to process transactions\n@@ -163,12 +162,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n              mi != mempool.mapTx.end(); ++mi)\n         {\n             const CTransaction& tx = mi->GetTx();\n-\n-            int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n-                                    ? nMedianTimePast\n-                                    : pblock->GetBlockTime();\n-\n-            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, nLockTimeCutoff))\n+            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, pblock->nTime))\n                 continue;\n \n             COrphan* porphan = NULL;"
      },
      {
        "sha": "747c5ce8ce4abf6e92767277bfbadd17e1dee640",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40cd32e835092c3158175511da5193193ec54939/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40cd32e835092c3158175511da5193193ec54939/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=40cd32e835092c3158175511da5193193ec54939",
        "patch": "@@ -43,9 +43,6 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n-/** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = 0;\n-\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**\n      * Check for standard transaction types"
      }
    ]
  }
]