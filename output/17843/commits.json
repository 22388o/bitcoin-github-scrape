[
  {
    "sha": "6fc554f591d8ea1681b8bb25aa12da8d4f023f66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZmM1NTRmNTkxZDhlYTE2ODFiOGJiMjVhYTEyZGE4ZDRmMDIzZjY2",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2019-12-31T18:55:18Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-01-13T12:40:06Z"
      },
      "message": "wallet: Reset reused transactions cache\n\nIf a destination is reused we mark the cache of the other transactions going to that destination dirty so they are not accidentally reported as trusted when the cache is hit.",
      "tree": {
        "sha": "2ab3afcf7114c8bab9630dd255685958123c4dd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ab3afcf7114c8bab9630dd255685958123c4dd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6fc554f591d8ea1681b8bb25aa12da8d4f023f66",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl4cZSkVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNLFcP/AzSHPP1RU7779GobsazH5+8an+F\nN45Te2EfGgvhLuJaS3mJoenOl+9L0M6oSDdhw2q0yvmNfJo1iRNA4XHZPK+y5m8I\nJIK7zOZA/OrlWs9RFbLhEvbzo6TESXWPDitQOXYn2SvaFRSXG8uAO4REl185TdmI\nlqoyeDG6o56uxoNfg7fKekJn9Y6CwsypJzk6gsjm6yWMSmIp/yfHbIOAGzaV7VN9\nAcpBmv2Im9uy0i7NfuK2GTf6pRU9DA/V7C5DCcJesjpvXAilO0FqWP42PE8uYR0I\nY4GKFEEynvEjlp7MA/XoHKS1rq9c6NX6q+vPLR9Aq0eGJvFoMnBeZmfHu0Ul7iEk\nQMMooxfvjEWIL2f9Sa4+nYD29+1N5uZ6464SbWAB86ahqFCwyhMWVwgA2VihBCYy\nF4vzh0ln0TjTeHhPihfTyeyl7Xe06qaUL9rjWopc3ZQtUZyx6r6/26shf6uV686A\nlqrCPE3urJ5cE+3SRtmF/Y59PUAc4bg18Nh7ypiK670TIho0BeQDIIMQzhXnwTGk\nK+mWSJ2s/4bcSRctlftUArnYdczemeQGHOXU5Cexf87pCdGGMpsgbVd8oXiBfiXL\nMaJjHkQhG/uXBx3IWwOOjH/4i72UdBY+VD9wgqi9lFFN/aOjsaTgQonVkjnvSzyG\nKVG7JXdqhxjBiSRF\n=I600\n-----END PGP SIGNATURE-----",
        "payload": "tree 2ab3afcf7114c8bab9630dd255685958123c4dd6\nparent 6196e930018181301b5972842ae384ea4288ff34\nauthor Fabian Jahr <fjahr@protonmail.com> 1577818518 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1578919206 +0100\n\nwallet: Reset reused transactions cache\n\nIf a destination is reused we mark the cache of the other transactions going to that destination dirty so they are not accidentally reported as trusted when the cache is hit.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc554f591d8ea1681b8bb25aa12da8d4f023f66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6fc554f591d8ea1681b8bb25aa12da8d4f023f66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6fc554f591d8ea1681b8bb25aa12da8d4f023f66/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6196e930018181301b5972842ae384ea4288ff34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6196e930018181301b5972842ae384ea4288ff34",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6196e930018181301b5972842ae384ea4288ff34"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 63,
      "deletions": 5
    },
    "files": [
      {
        "sha": "68d2b3cb05bb2a36823190aad3e5f10d80614bbb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 3,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fc554f591d8ea1681b8bb25aa12da8d4f023f66/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fc554f591d8ea1681b8bb25aa12da8d4f023f66/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6fc554f591d8ea1681b8bb25aa12da8d4f023f66",
        "patch": "@@ -708,7 +708,7 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n     return success;\n }\n \n-void CWallet::SetUsedDestinationState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used)\n+void CWallet::SetUsedDestinationState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used, std::set<CTxDestination>& tx_destinations)\n {\n     AssertLockHeld(cs_wallet);\n     const CWalletTx* srctx = GetWalletTx(hash);\n@@ -718,7 +718,9 @@ void CWallet::SetUsedDestinationState(WalletBatch& batch, const uint256& hash, u\n     if (ExtractDestination(srctx->tx->vout[n].scriptPubKey, dst)) {\n         if (IsMine(dst)) {\n             if (used && !GetDestData(dst, \"used\", nullptr)) {\n-                AddDestData(batch, dst, \"used\", \"p\"); // p for \"present\", opposite of absent (null)\n+                if (AddDestData(batch, dst, \"used\", \"p\")) { // p for \"present\", opposite of absent (null)\n+                    tx_destinations.insert(dst);\n+                }\n             } else if (!used && GetDestData(dst, \"used\", nullptr)) {\n                 EraseDestData(batch, dst, \"used\");\n             }\n@@ -765,10 +767,14 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose)\n \n     if (IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE)) {\n         // Mark used destinations\n+        std::set<CTxDestination> tx_destinations;\n+\n         for (const CTxIn& txin : wtxIn.tx->vin) {\n             const COutPoint& op = txin.prevout;\n-            SetUsedDestinationState(batch, op.hash, op.n, true);\n+            SetUsedDestinationState(batch, op.hash, op.n, true, tx_destinations);\n         }\n+\n+        MarkDestinationsDirty(tx_destinations);\n     }\n \n     // Inserts only if not already there, returns tx inserted or tx found\n@@ -3162,6 +3168,21 @@ int64_t CWallet::GetOldestKeyPoolTime()\n     return oldestKey;\n }\n \n+void CWallet::MarkDestinationsDirty(const std::set<CTxDestination>& destinations) {\n+    for (auto& entry : mapWallet) {\n+        CWalletTx& wtx = entry.second;\n+\n+        for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n+            CTxDestination dst;\n+\n+            if (ExtractDestination(wtx.tx->vout[i].scriptPubKey, dst) && destinations.count(dst)) {\n+                wtx.MarkDirty();\n+                break;\n+            }\n+        }\n+    }\n+}\n+\n std::map<CTxDestination, CAmount> CWallet::GetAddressBalances(interfaces::Chain::Lock& locked_chain)\n {\n     std::map<CTxDestination, CAmount> balances;"
      },
      {
        "sha": "5811f598ae8ba6191a178025b7edd76b5d21a2d4",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fc554f591d8ea1681b8bb25aa12da8d4f023f66/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fc554f591d8ea1681b8bb25aa12da8d4f023f66/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6fc554f591d8ea1681b8bb25aa12da8d4f023f66",
        "patch": "@@ -803,7 +803,7 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     // Whether this or any known UTXO with the same single key has been spent.\n     bool IsUsedDestination(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n-    void SetUsedDestinationState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void SetUsedDestinationState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used, std::set<CTxDestination>& tx_destinations) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const;\n \n@@ -963,6 +963,12 @@ class CWallet final : public WalletStorage, private interfaces::Chain::Notificat\n \n     std::set<CTxDestination> GetLabelAddresses(const std::string& label) const;\n \n+    /**\n+     * Marks all outputs in each one of the destinations dirty, so their cache is\n+     * reset and does not return outdated information.\n+     */\n+    void MarkDestinationsDirty(const std::set<CTxDestination>& destinations) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n     bool GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error);\n     bool GetNewChangeDestination(const OutputType type, CTxDestination& dest, std::string& error);\n "
      },
      {
        "sha": "7a4f345b6e2bcbb4cf4f7937ca7077115af82d41",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 32,
        "deletions": 1,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6fc554f591d8ea1681b8bb25aa12da8d4f023f66/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6fc554f591d8ea1681b8bb25aa12da8d4f023f66/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=6fc554f591d8ea1681b8bb25aa12da8d4f023f66",
        "patch": "@@ -91,7 +91,8 @@ def run_test(self):\n         self.test_fund_send_fund_send(\"p2sh-segwit\")\n         reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n         self.test_fund_send_fund_send(\"bech32\")\n-\n+        reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n+        self.test_getbalances_used()\n \n     def test_persistence(self):\n         '''Test that wallet files persist the avoid_reuse flag.'''\n@@ -257,5 +258,35 @@ def test_fund_send_fund_send(self, second_addr_type):\n         assert_approx(self.nodes[1].getbalance(), 1, 0.001)\n         assert_approx(self.nodes[1].getbalance(avoid_reuse=False), 11, 0.001)\n \n+    def test_getbalances_used(self):\n+        '''\n+        getbalances and listunspent should pick up on reused addresses\n+        immediately, even for address reusing outputs created before the first\n+        transaction was spending from that address\n+        '''\n+        self.log.info(\"Test getbalances used category\")\n+\n+        # node under test should be completely empty\n+        assert_equal(self.nodes[1].getbalance(avoid_reuse=False), 0)\n+\n+        new_addr = self.nodes[1].getnewaddress()\n+        ret_addr = self.nodes[0].getnewaddress()\n+\n+        # send multiple transactions, reusing one address\n+        for _ in range(11):\n+            self.nodes[0].sendtoaddress(new_addr, 1)\n+\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # send transaction that should not use all the available outputs\n+        # per the current coin selection algorithm\n+        self.nodes[1].sendtoaddress(ret_addr, 5)\n+\n+        # getbalances and listunspent should show the remaining outputs\n+        # in the reused address as used/reused\n+        assert_unspent(self.nodes[1], total_count=2, total_sum=6, reused_count=1, reused_sum=1)\n+        assert_balances(self.nodes[1], mine={\"used\": 1, \"trusted\": 5})\n+\n if __name__ == '__main__':\n     AvoidReuseTest().main()"
      }
    ]
  }
]