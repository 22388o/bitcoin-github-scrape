DrahtBot,2020-01-02 05:27:25,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17889](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17889.html) (wallet: Improve CWallet:MarkDestinationsDir",https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-570121251,570121251,
kallewoof,2020-01-03 06:48:08,"Github spazzing out, but https://github.com/bitcoin/bitcoin/pull/17843#discussion_r362716618 is in response to @instagibbs suggestion to `break`. I think breaking would skip over any remaining UTXO:s sent to the same address.",https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-570481136,570481136,
kallewoof,2020-01-03 12:20:50,@promag You may be right. Would love to see worst case scenario analysis (is this O(n) or O(n^2) or worse?).,https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-570557941,570557941,
kallewoof,2020-01-03 12:52:45,"> @kallewoof I think it's O(n). Problem is that for big wallets, all transaction outputs will be scanned as much as the input count of the new transaction.\n\nSo if `n` is wallet size and `m` is input count, this would be `O(nm)`. That's pretty bad, but honestly don't think it's a huge deal. I could be wrong, though.",https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-570564192,570564192,
instagibbs,2020-01-03 16:53:47,"This might make a good topic for IRC meeting. I think making this slower is ok provided it's opt-in, which it appears to be based on the required avoid_reuse wallet flag guarding `SetUsedDestinationState`. An algorithmic cleanup is of course encouraged.",https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-570630488,570630488,
achow101,2020-01-03 16:55:13,"I agree with @promag. I think we should use `std::unordered_multimap` and accumulate the destinations so that it can all be done with one iteration over the fewest `CWalletTx`s needed. `O(nm)` can be pretty slow. We already know that for large wallets, things that do this kind of iteration can take a while so I think we should try to avoid further iteration like this, especially in something that ",https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-570630882,570630882,
promag,2020-01-03 17:08:24,"I also think it's fine to improve in a follow up and have the fix merged. In that case I'd just change this to do as suggested:\n> accumulate all CTxDestination to be marked dirty and then iterate the wallet transactions just once.\n\nwhich is pretty simple.",https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-570634613,570634613,
fjahr,2020-01-03 17:31:02,"Thanks for the feedback everyone! I can improve the PR as suggested by @promag shortly, no need to have a separate follow-up for that. But a further improvement using an index could be a follow-up.",https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-570640871,570640871,
fjahr,2020-01-06 18:02:46,"Pushed update including most of the feedback and implementing the simpler solution suggestion by @promag:\n\n> * accumulate all `CTxDestination` to be marked dirty and then iterate the wallet transactions just once.\n\n",https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-571243507,571243507,
fjahr,2020-01-08 17:49:05,Rebased and addressed feedback.,https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-572181191,572181191,
achow101,2020-01-08 18:57:10,"ACK 7618ea2cc02042cd20c633de9d29c34b5a1179b0\n\nJust suggested changes and rebase since last review.",https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-572207819,572207819,
promag,2020-01-08 21:10:48,"I think you could revert latest change regarding amount caches considering what's done in #17889.\n\n",https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-572258384,572258384,
fjahr,2020-01-08 22:32:07,"> I think you could revert latest change regarding amount caches considering what's done in #17889.\n\nRemoved skipping dirty tx again to make it a more coherent change together with #17889. Sorry @achow101 .",https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-572290002,572290002,
achow101,2020-01-09 15:45:19,ACK 9e98d6cdf025fbda99a81ab1cecff21f1e45e234,https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-572619551,572619551,
kallewoof,2020-01-11 01:40:56,"I did some rough benchmarks to see how this would affect biggish wallets, and am not seeing any significant drops in performance:\n\n```bash\n# 2 btc per send\n\n# Master:\n#\n# UTXO count    Total Time      Transactions    Time per transaction\n# 100           00:57           160             0.356\n# 500           00:56           160             0.350\n# 1000          01:09           16",https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-573266706,573266706,
fjahr,2020-01-13 12:43:36,"> I did some rough benchmarks to see how this would affect biggish wallets, and am not seeing any significant drops in performance:\n\nThanks a lot for running these!\n\nPushed update to outdated comment.",https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-573645205,573645205,
kallewoof,2020-01-14 11:27:45,Code review re-ACK 6fc554f591d8ea1681b8bb25aa12da8d4f023f66,https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-574130749,574130749,
fanquake,2020-01-29 11:41:32,@meshcollider does this need backporting to 0.19?,https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-579717581,579717581,
fanquake,2020-02-06 06:12:33,Being backported in #18083.,https://github.com/bitcoin/bitcoin/pull/17843#issuecomment-582753708,582753708,
promag,2020-01-02 16:04:40,"Looks like we should have `std::multimap<CTxDestination,  CWalletTx*>`?",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r362527074,362527074,src/wallet/wallet.cpp
instagibbs,2020-01-02 20:08:11,you can break here.,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r362611962,362611962,src/wallet/wallet.cpp
kallewoof,2020-01-03 06:39:21,"Can do `const CTxDestination&` to avoid unnecessary copy, I think.",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r362716520,362716520,src/wallet/wallet.cpp
kallewoof,2020-01-03 06:40:22,Won't that skip 2nd+ reuse?,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r362716618,362716618,src/wallet/wallet.cpp
kallewoof,2020-01-03 06:40:52,Nit: `{` on same line as `for`; `++i` over `i++`.,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r362716695,362716695,src/wallet/wallet.cpp
kallewoof,2020-01-03 06:42:45,"Could probably simplify to\n```C++\nif (ExtractDestination(wtx.tx->vout[i].scriptPubKey, dst) && target_dst == dst) {\n```\n",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r362716958,362716958,src/wallet/wallet.cpp
promag,2020-01-03 12:34:11,"nit, it could skip this `wtx` if already dirty, but not sure that's easy to know.",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r362794337,362794337,src/wallet/wallet.cpp
achow101,2020-01-03 16:45:49,"The entire transaction will have its balances recomputed, so it doesn't matter if another output in the same tx reuses.",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r362878502,362878502,src/wallet/wallet.cpp
fjahr,2020-01-06 17:57:37,done,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363408004,363408004,src/wallet/wallet.cpp
fjahr,2020-01-06 17:57:46,done,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363408071,363408071,src/wallet/wallet.cpp
fjahr,2020-01-06 17:59:36,"true, but since `MarkDirty` just resets several values I think it's not so easy.",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363408781,363408781,src/wallet/wallet.cpp
fjahr,2020-01-06 17:59:46,done,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363408860,363408860,src/wallet/wallet.cpp
fjahr,2020-01-06 17:59:57,done,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363408944,363408944,src/wallet/wallet.cpp
promag,2020-01-06 18:01:23,"This must be an argument, like `std::set<CTxDestination>& tx_destinations`. In the call site you do\n```cpp\n    if (IsWalletFlagSet(WALLET_FLAG_AVOID_REUSE)) {\n        // Mark used destinations\n        std::set<CTxDestination> tx_destinations;\n        for (const CTxIn& txin : wtxIn.tx->vin) {\n            const COutPoint& op = txin.prevout;\n            SetUsedDestinationState(batch, op",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363409480,363409480,src/wallet/wallet.cpp
instagibbs,2020-01-06 18:03:59,Move this comment to the function declaration in the header,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363410447,363410447,src/wallet/wallet.cpp
fjahr,2020-01-06 19:02:02,fixed,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363434364,363434364,src/wallet/wallet.cpp
fjahr,2020-01-06 19:02:33,"done, also reworded it to be more general",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363434585,363434585,src/wallet/wallet.cpp
achow101,2020-01-06 22:06:40,nit: extra line,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363505945,363505945,src/wallet/wallet.cpp
achow101,2020-01-06 22:28:53,"```\nbool dirty = false;\nfor (int i = 0; i < AMOUNTTYPE_ENUM_ELEMENTS; ++i) {\n    dirty |= wtx.m_amounts[i].m_cached.none();\n|\nif (dirty) continue;\n```\nshould work.\n\n`CachableAmount` has `std::bitset m_cached` which sets various bits when something is cached. If no bits are set (checked with `none()`), nothing is cached so it is dirty and can thus be skipped.",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363513805,363513805,src/wallet/wallet.cpp
promag,2020-01-06 23:15:38,"nit, add `{}`.",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363527660,363527660,src/wallet/wallet.cpp
promag,2020-01-06 23:26:41,"@achow101 nice, and what about `fChangeCached`?\n\nMaybe this can be done next to not scope creep, could also add a `bool CWalletTx::m_is_dirty` to avoid going thru m_amounts.",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363530694,363530694,src/wallet/wallet.cpp
promag,2020-01-06 23:32:46,Add annotation `EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)` and remove recursive lock in L3149.,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363532261,363532261,src/wallet/wallet.h
achow101,2020-01-07 00:06:58,`fChangeCached` is only for computing the change amounts and isn't used by `GetCachableAmount` which is what we care about for marking a tx as dirty. I agree that we should follow that same model and have a variable to indicate whether the tx is marked dirty.,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363540446,363540446,src/wallet/wallet.cpp
promag,2020-01-07 13:44:07,Actually shouldn't the check be `&= wtx.m_amounts[i].m_cached.none()`? If all amounts are empty then no need to extract+markdirty?,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r363752843,363752843,src/wallet/wallet.cpp
promag,2020-01-08 01:11:18,"> I agree that we should follow that same model and have a variable to indicate whether the tx is marked dirty.\n\n@achow101 done in #17889.",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r364025893,364025893,src/wallet/wallet.cpp
fjahr,2020-01-08 17:44:37,"Implement it, as @promag noted the check actually needed to look that all the cached values are reset, so I did that and restructed it a bit as well.",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r364358796,364358796,src/wallet/wallet.cpp
fjahr,2020-01-08 17:45:17,done,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r364359070,364359070,src/wallet/wallet.h
fjahr,2020-01-08 17:45:30,done,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r364359162,364359162,src/wallet/wallet.cpp
fjahr,2020-01-08 17:45:41,fixed,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r364359265,364359265,src/wallet/wallet.cpp
promag,2020-01-08 20:43:16,I think you could revert this latest change considering what's done in #17889.,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r364434141,364434141,src/wallet/wallet.cpp
kallewoof,2020-01-10 01:32:38,"Why is reused sum 1 and not 6? All of the UTXOs should be counted as reused except the change back to self (if any?).\n\nAlso assert_balances should be ~all used, no?",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r365038506,365038506,test/functional/wallet_avoidreuse.py
fjahr,2020-01-10 18:00:40,"There are 11 outputs of 1 BTC at the address and 10 are summed up in a group (`OUTPUT_GROUP_MAX_ENTRIES`) which is then being used for the inputs. So only one output of 1 BTC is left at the address, 5 BTC have been sent to `ret_addr` and 5 BTC are in a change address which is trusted (`total_sum=6`).",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r365358579,365358579,test/functional/wallet_avoidreuse.py
kallewoof,2020-01-11 01:38:46,You're right. Thanks for explaining.,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r365488651,365488651,test/functional/wallet_avoidreuse.py
kallewoof,2020-01-11 01:44:06,The comment should be updated to reflect the fact there are now multiple destinations.,https://github.com/bitcoin/bitcoin/pull/17843#discussion_r365489047,365489047,src/wallet/wallet.h
fjahr,2020-01-13 12:42:35,"thanks, updated",https://github.com/bitcoin/bitcoin/pull/17843#discussion_r365783366,365783366,src/wallet/wallet.h
