[
  {
    "sha": "a061a299708d39ad63f85085ae07c457308823cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDYxYTI5OTcwOGQzOWFkNjNmODUwODVhZTA3YzQ1NzMwODgyM2Nm",
    "commit": {
      "author": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-03-02T23:16:16Z"
      },
      "committer": {
        "name": "Martin Zumsande",
        "email": "mzumsande@gmail.com",
        "date": "2021-03-02T23:16:16Z"
      },
      "message": "test: bring p2p_leak.py up to date.\n\nAfter the introduction of wtxidrelay and sendaddrv2 messages during\nversion handshake, extend p2p_leak.py test to reflect this.\nAlso, some minor fixes and doc improvements.",
      "tree": {
        "sha": "a9d06d7b7b6646e6d1177614e30764ce445b1546",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9d06d7b7b6646e6d1177614e30764ce445b1546"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a061a299708d39ad63f85085ae07c457308823cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a061a299708d39ad63f85085ae07c457308823cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a061a299708d39ad63f85085ae07c457308823cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a061a299708d39ad63f85085ae07c457308823cf/comments",
    "author": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b9f41df1ead4b6a83a51fc41966b111c8459c313",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9f41df1ead4b6a83a51fc41966b111c8459c313",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b9f41df1ead4b6a83a51fc41966b111c8459c313"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 46,
      "deletions": 18
    },
    "files": [
      {
        "sha": "71d5ca92b38ba8bff6689b11ccc61c226e1ff0a8",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 46,
        "deletions": 18,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a061a299708d39ad63f85085ae07c457308823cf/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a061a299708d39ad63f85085ae07c457308823cf/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=a061a299708d39ad63f85085ae07c457308823cf",
        "patch": "@@ -4,8 +4,8 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test message sending before handshake completion.\n \n-A node should never send anything other than VERSION/VERACK until it's\n-received a VERACK.\n+Before receiving a VERACK, a node should not send anything but VERSION/VERACK\n+and feature negotiation messages (WTXIDRELAY, SENDADDRV2).\n \n This test connects to a node and sends it a few messages, trying to entice it\n into sending us something it shouldn't.\"\"\"\n@@ -35,10 +35,12 @@ def __init__(self):\n         super().__init__()\n         self.unexpected_msg = False\n         self.ever_connected = False\n+        self.got_wtxidrelay = False\n+        self.got_sendaddrv2 = False\n \n     def bad_message(self, message):\n         self.unexpected_msg = True\n-        self.log.info(\"should not have received message: %s\" % message.msgtype)\n+        print(\"should not have received message: %s\" % message.msgtype)\n \n     def on_open(self):\n         self.ever_connected = True\n@@ -64,6 +66,8 @@ def on_sendcmpct(self, message): self.bad_message(message)\n     def on_cmpctblock(self, message): self.bad_message(message)\n     def on_getblocktxn(self, message): self.bad_message(message)\n     def on_blocktxn(self, message): self.bad_message(message)\n+    def on_wtxidrelay(self, message): self.got_wtxidrelay = True\n+    def on_sendaddrv2(self, message): self.got_sendaddrv2 = True\n \n \n # Peer that sends a version but not a verack.\n@@ -94,32 +98,61 @@ def on_version(self, msg):\n class P2PLeakTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n+        self.extra_args = [['-peertimeout=4']]\n+\n+    def create_old_version(self, nversion):\n+        old_version_msg = msg_version()\n+        old_version_msg.nVersion = nversion\n+        old_version_msg.strSubVer = P2P_SUBVERSION\n+        old_version_msg.nServices = P2P_SERVICES\n+        old_version_msg.relay = P2P_VERSION_RELAY\n+        return old_version_msg\n \n     def run_test(self):\n-        # Another peer that never sends a version, nor any other messages. It shouldn't receive anything from the node.\n+        self.log.info('Check that the node doesn\\'t send unexpected messages before handshake completion')\n+        # Peer that never sends a version, nor any other messages. It shouldn't receive anything from the node.\n         no_version_idle_peer = self.nodes[0].add_p2p_connection(LazyPeer(), send_version=False, wait_for_verack=False)\n \n         # Peer that sends a version but not a verack.\n         no_verack_idle_peer = self.nodes[0].add_p2p_connection(NoVerackIdlePeer(), wait_for_verack=False)\n \n-        # Wait until we got the verack in response to the version. Though, don't wait for the node to receive the\n-        # verack, since we never sent one\n+        # Pre-wtxidRelay peer that sends a version but not a verack and does not support feature negotiation\n+        # messages which start at nVersion == 70016\n+        pre_wtxidrelay_peer = self.nodes[0].add_p2p_connection(NoVerackIdlePeer(), send_version=False, wait_for_verack=False)\n+        pre_wtxidrelay_peer.send_message(self.create_old_version(70015))\n+\n+        # Wait until the peer gets the verack in response to the version. Though, don't wait for the node to receive the\n+        # verack, since the peer never sent one\n         no_verack_idle_peer.wait_for_verack()\n+        pre_wtxidrelay_peer.wait_for_verack()\n \n         no_version_idle_peer.wait_until(lambda: no_version_idle_peer.ever_connected)\n         no_verack_idle_peer.wait_until(lambda: no_verack_idle_peer.version_received)\n+        pre_wtxidrelay_peer.wait_until(lambda: pre_wtxidrelay_peer.version_received)\n \n         # Mine a block and make sure that it's not sent to the connected peers\n         self.nodes[0].generate(nblocks=1)\n \n-        #Give the node enough time to possibly leak out a message\n+        # Give the node enough time to possibly leak out a message\n         time.sleep(5)\n \n-        self.nodes[0].disconnect_p2ps()\n+        # Make sure only expected messages came in\n+        assert not no_version_idle_peer.unexpected_msg\n+        assert not no_version_idle_peer.got_wtxidrelay\n+        assert not no_version_idle_peer.got_sendaddrv2\n \n-        # Make sure no unexpected messages came in\n-        assert no_version_idle_peer.unexpected_msg == False\n-        assert no_verack_idle_peer.unexpected_msg == False\n+        assert not no_verack_idle_peer.unexpected_msg\n+        assert no_verack_idle_peer.got_wtxidrelay\n+        assert no_verack_idle_peer.got_sendaddrv2\n+\n+        assert not pre_wtxidrelay_peer.unexpected_msg\n+        assert not pre_wtxidrelay_peer.got_wtxidrelay\n+        assert not pre_wtxidrelay_peer.got_sendaddrv2\n+\n+        # Expect peers to be disconnected due to timeout\n+        assert not no_version_idle_peer.is_connected\n+        assert not no_verack_idle_peer.is_connected\n+        assert not pre_wtxidrelay_peer.is_connected\n \n         self.log.info('Check that the version message does not leak the local address of the node')\n         p2p_version_store = self.nodes[0].add_p2p_connection(P2PVersionStore())\n@@ -134,13 +167,8 @@ def run_test(self):\n \n         self.log.info('Check that old peers are disconnected')\n         p2p_old_peer = self.nodes[0].add_p2p_connection(P2PInterface(), send_version=False, wait_for_verack=False)\n-        old_version_msg = msg_version()\n-        old_version_msg.nVersion = 31799\n-        old_version_msg.strSubVer = P2P_SUBVERSION\n-        old_version_msg.nServices = P2P_SERVICES\n-        old_version_msg.relay = P2P_VERSION_RELAY\n-        with self.nodes[0].assert_debug_log(['peer=3 using obsolete version 31799; disconnecting']):\n-            p2p_old_peer.send_message(old_version_msg)\n+        with self.nodes[0].assert_debug_log(['peer=4 using obsolete version 31799; disconnecting']):\n+            p2p_old_peer.send_message(self.create_old_version(31799))\n             p2p_old_peer.wait_for_disconnect()\n \n "
      }
    ]
  }
]