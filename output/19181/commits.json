[
  {
    "sha": "106f9148848ffa64b433f1bc2dd6980930a4cb02",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDZmOTE0ODg0OGZmYTY0YjQzM2YxYmMyZGQ2OTgwOTMwYTRjYjAy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-20T01:20:44Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-06-11T21:18:14Z"
      },
      "message": "Add SHA256Writer",
      "tree": {
        "sha": "3416057cfa9379ed39bbccadd8d7dcc6c999dbe3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3416057cfa9379ed39bbccadd8d7dcc6c999dbe3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/106f9148848ffa64b433f1bc2dd6980930a4cb02",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl7in5kVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNR+oP/15WIQMKBcAfrMfJRnOD0qkW5VEO\nDfAsWy8Hv51h5ouUl3q2athEv9+oH9lMdth+Drd/sl4eF43fIZEZV0f1iHoFvWi0\n8ejJCspBcUXIKMEIEHfPe07t8CI6Ks2Bfq1REeueAXC4KoluX8YL5pd8eNWNAWTS\nQh+qRMWdNH08GkZS/0QZO/v+gLHsAJbNsdilLXPXk037phk4j3B6ywbkgCfkOl3Q\nFe/bEKBABh/0E0NYk00xBQYpZcIdI4cnnTvb04kA5Ca4H8Esd9YTTGWerYzQsSqW\nN9RsvqebzcOXsz1/jbRAaUr09grz8N8gMWlrcNY0nqdgSYKhcY4TD5PPAWO75bJX\n9PUTutDF/WXQH3Nwfcijwx4tUB5KX2KfHwkR2cGP5RJ9FSYFYSLzOD3Sk7xM91lj\nRB2BxsxqNRyGbaCPfMkY2VGycvqpsKG8HckFVCDic1d8SlP1DP4v2S2nEWpSOXC7\n264dzyLFH9opdM49owc+VGxLp7fxBx1dUvg8RTqygNpneG7Y5VTaeXDvJ7umImJm\neoczU0jPySXAo5D+77N08Jrvdycn8WEDUIXCT2jB2rk+iZbPXulnqNHgWq0fz0dV\nEkyTimiCiRM+QJUKYWZzWmDXwsgzOGJUYK2h7QkR77DOEiw4Qz1jiALh9ebtlqIl\nTjUZrSMi/fZRGwbF\n=6q2i\n-----END PGP SIGNATURE-----",
        "payload": "tree 3416057cfa9379ed39bbccadd8d7dcc6c999dbe3\nparent 7a24cca82906e4ee1e082c8f4563fb873170532c\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1495243244 -0700\ncommitter Fabian Jahr <fjahr@protonmail.com> 1591910294 +0200\n\nAdd SHA256Writer\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/106f9148848ffa64b433f1bc2dd6980930a4cb02",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/106f9148848ffa64b433f1bc2dd6980930a4cb02",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/106f9148848ffa64b433f1bc2dd6980930a4cb02/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a24cca82906e4ee1e082c8f4563fb873170532c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a24cca82906e4ee1e082c8f4563fb873170532c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a24cca82906e4ee1e082c8f4563fb873170532c"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0de7c8eff1fa6837c84ec984c6094b4eca4a69d7",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/106f9148848ffa64b433f1bc2dd6980930a4cb02/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/106f9148848ffa64b433f1bc2dd6980930a4cb02/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=106f9148848ffa64b433f1bc2dd6980930a4cb02",
        "patch": "@@ -191,6 +191,40 @@ class CHashVerifier : public CHashWriter\n     }\n };\n \n+/** A writer stream that computes a SHA256 hash. */\n+class SHA256Writer\n+{\n+private:\n+    CSHA256 ctx;\n+\n+    const int nType;\n+    const int nVersion;\n+public:\n+\n+    SHA256Writer(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}\n+\n+    int GetType() const { return nType; }\n+    int GetVersion() const { return nVersion; }\n+\n+    void write(const char *pch, size_t size) {\n+        ctx.Write((const unsigned char*)pch, size);\n+    }\n+\n+    uint256 GetHash() {\n+        uint256 result;\n+        unsigned char out[32];\n+        ctx.Finalize((unsigned char*)&result);\n+        return result;\n+    }\n+\n+    template<typename T>\n+    SHA256Writer& operator<<(const T& obj) {\n+        // Serialize to this stream\n+        ::Serialize(*this, obj);\n+        return (*this);\n+    }\n+};\n+\n /** Compute the 256-bit hash of an object's serialization. */\n template<typename T>\n uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)"
      }
    ]
  },
  {
    "sha": "fe9ea729fc67e012de773975018a0f749c03790f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTllYTcyOWZjNjdlMDEyZGU3NzM5NzUwMThhMGY3NDljMDM3OTBm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-05-18T22:50:31Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-06-11T21:52:53Z"
      },
      "message": "MuHash3072 implementation\n\nCo-authored-by: Fabian Jahr <fjahr@protonmail.com>",
      "tree": {
        "sha": "dc58523dc21aaa9bf04c8135fc75942a0816c58e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc58523dc21aaa9bf04c8135fc75942a0816c58e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe9ea729fc67e012de773975018a0f749c03790f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl7ip7gVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNmoYP/1TsIOPiwuij8KlKuFFiR2BoGx+D\nc7/9trVQPra36LBkGZoRvoODZmHxdcNfQtkoCQcBOGI1pZ92WODDxKoJ7u56bTmV\n6lYjjGr6ZOv5WzTjM1I0NKrYktehi0jUkKIT1/6qhSohDonUxk4duejq+m955sEl\nF6M4ExglVCN47k3fLjbpWqU5ZWxstqmoA7yvx4lZPSs774lpvPV/PPfehEfLc8vy\nljACp1iMv6fXrwCut4G7wNBuUdC7Wo3LZfy8bgwVay/zN3ocAHVIi/fpY1ZOo1+r\noY/tdMV/nPcNulz6dGbJCSfIwWfdmQkpQLoLAVQ55bA3Lk7KOxne7m3giqSqiE3q\nrtq1rdXJuLOHeTbW8OXW7xdvXfLt7tdjhIANu5kUxCf3Yf+7/wQuTPuVhYXW+UY0\nkgdlYro9ETHmAO028R8NTBsVoyWBOZrwZo8o6LmKgEZMyQRT717dKxgIfIm7xG6n\nGM/N7nhaSxgtT8VNZ0IYev/H+K6DPXA5vUaHH3ZUHILoZ3AFnNK2SK+5PTXoI3Eh\nuxfIDaIEDS/4omjqxgi/9WzO48GgKk2ahD9Uowattr5QU5WwpHeF5nMZBFDyoFUN\nbCNgRg99K4VmmChbjNSFXZqTppyeuuis7ebL6vOT6Nmqd/bW1vFGHAfZyomVM0YA\nYgiZA0sbvM9r0+ad\n=5yvJ\n-----END PGP SIGNATURE-----",
        "payload": "tree dc58523dc21aaa9bf04c8135fc75942a0816c58e\nparent 106f9148848ffa64b433f1bc2dd6980930a4cb02\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1495147831 -0700\ncommitter Fabian Jahr <fjahr@protonmail.com> 1591912373 +0200\n\nMuHash3072 implementation\n\nCo-authored-by: Fabian Jahr <fjahr@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe9ea729fc67e012de773975018a0f749c03790f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe9ea729fc67e012de773975018a0f749c03790f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe9ea729fc67e012de773975018a0f749c03790f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "106f9148848ffa64b433f1bc2dd6980930a4cb02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/106f9148848ffa64b433f1bc2dd6980930a4cb02",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/106f9148848ffa64b433f1bc2dd6980930a4cb02"
      }
    ],
    "stats": {
      "total": 431,
      "additions": 430,
      "deletions": 1
    },
    "files": [
      {
        "sha": "195967e2e7ef098877266badcb82057b0c27e5b1",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe9ea729fc67e012de773975018a0f749c03790f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe9ea729fc67e012de773975018a0f749c03790f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=fe9ea729fc67e012de773975018a0f749c03790f",
        "patch": "@@ -721,6 +721,9 @@ if test x$use_lcov_branch != xno; then\n   AC_SUBST(LCOV_OPTS, \"$LCOV_OPTS --rc lcov_branch_coverage=1\")\n fi\n \n+dnl Check for __int128\n+AC_CHECK_TYPES([__int128])\n+\n dnl Check for endianness\n AC_C_BIGENDIAN\n "
      },
      {
        "sha": "095026583edcc4a01be83baf335074795fc56e36",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe9ea729fc67e012de773975018a0f749c03790f/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe9ea729fc67e012de773975018a0f749c03790f/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=fe9ea729fc67e012de773975018a0f749c03790f",
        "patch": "@@ -392,6 +392,8 @@ crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/hmac_sha512.h \\\n   crypto/poly1305.h \\\n   crypto/poly1305.cpp \\\n+  crypto/muhash.h \\\n+  crypto/muhash.cpp \\\n   crypto/ripemd160.cpp \\\n   crypto/ripemd160.h \\\n   crypto/sha1.cpp \\"
      },
      {
        "sha": "c858f02aa466fdbbd53b194238fafdcb2805617c",
        "filename": "src/bench/crypto_hash.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe9ea729fc67e012de773975018a0f749c03790f/src/bench/crypto_hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe9ea729fc67e012de773975018a0f749c03790f/src/bench/crypto_hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/crypto_hash.cpp?ref=fe9ea729fc67e012de773975018a0f749c03790f",
        "patch": "@@ -4,6 +4,7 @@\n \n \n #include <bench/bench.h>\n+#include <crypto/muhash.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>\n@@ -91,6 +92,18 @@ static void FastRandom_1bit(benchmark::State& state)\n     }\n }\n \n+static void MuHash(benchmark::State& state)\n+{\n+    FastRandomContext rng(true);\n+    MuHash3072 acc;\n+    unsigned char key[32] = {0};\n+    int i = 0;\n+    while (state.KeepRunning()) {\n+        key[0] = ++i;\n+        acc *= MuHash3072(key);\n+    }\n+}\n+\n BENCHMARK(RIPEMD160, 440);\n BENCHMARK(SHA1, 570);\n BENCHMARK(SHA256, 340);\n@@ -101,3 +114,5 @@ BENCHMARK(SipHash_32b, 40 * 1000 * 1000);\n BENCHMARK(SHA256D64_1024, 7400);\n BENCHMARK(FastRandom_32bit, 110 * 1000 * 1000);\n BENCHMARK(FastRandom_1bit, 440 * 1000 * 1000);\n+\n+BENCHMARK(MuHash, 5000);"
      },
      {
        "sha": "35027be638c01446bb0e6db746519ee0da6b190a",
        "filename": "src/crypto/muhash.cpp",
        "status": "added",
        "additions": 277,
        "deletions": 0,
        "changes": 277,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe9ea729fc67e012de773975018a0f749c03790f/src/crypto/muhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe9ea729fc67e012de773975018a0f749c03790f/src/crypto/muhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.cpp?ref=fe9ea729fc67e012de773975018a0f749c03790f",
        "patch": "@@ -0,0 +1,277 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/muhash.h>\n+\n+#include <crypto/chacha20.h>\n+#include <crypto/common.h>\n+\n+#include <assert.h>\n+#include <stdio.h>\n+\n+#include <limits>\n+\n+namespace {\n+\n+/** 2^3072 - 1103717, the next largest 3072-bit safe prime number, is used as the order of the group. */\n+#define MAX_PRIME_DIFF 1103717\n+\n+/** Extract the lowest limb of [c0,c1,c2] into n, and left shift the number by 1 limb. */\n+#define extract3(c0,c1,c2,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = c2; \\\n+    c2 = 0; \\\n+}\n+\n+/** Extract the lowest limb of [c0,c1] into n, and left shift the number by 1 limb. */\n+#define extract2(c0,c1,n) { \\\n+    (n) = c0; \\\n+    c0 = c1; \\\n+    c1 = 0; \\\n+}\n+\n+/** [c0,c1] = a * b */\n+#define mul(c0,c1,a,b) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+    c2 = 0; \\\n+    c1 = t >> Num3072::LIMB_SIZE; \\\n+    c0 = t; \\\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is 0 initially */\n+#define mulnadd3(c0,c1,c2,d0,d1,d2,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)d0 * n + c0; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)d1 * n + c1; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    c2 = t + d2 * n; \\\n+}\n+\n+/* [c0,c1] *= n */\n+#define muln2(c0,c1,n) { \\\n+    Num3072::double_limb_type t = (Num3072::double_limb_type)c0 * n; \\\n+    c0 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+    t += (Num3072::double_limb_type)c1 * n; \\\n+    c1 = t; \\\n+    t >>= Num3072::LIMB_SIZE; \\\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+#define muladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+#define muldbladd3(c0,c1,c2,a,b) { \\\n+    Num3072::limb_type tl, th; \\\n+    { \\\n+        Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n+        th = t >> Num3072::LIMB_SIZE; \\\n+        tl = t; \\\n+    } \\\n+    c0 += tl; \\\n+    Num3072::limb_type tt = th + ((c0 < tl) ? 1 : 0); \\\n+    c1 += tt; \\\n+    c2 += (c1 < tt) ? 1 : 0; \\\n+    c0 += tl; \\\n+    th += (c0 < tl) ? 1 : 0; \\\n+    c1 += th; \\\n+    c2 += (c1 < th) ? 1 : 0; \\\n+}\n+\n+/** [c0,c1] += a */\n+#define add2(c0,c1,a) { \\\n+    c0 += (a); \\\n+    c1 += (c0 < (a)) ? 1 : 0; \\\n+}\n+\n+bool IsOverflow(const Num3072* d)\n+{\n+    for (int i = 1; i < Num3072::LIMBS - 1; ++i) {\n+        if (d->limbs[i] != std::numeric_limits<Num3072::limb_type>::max()) return false;\n+    }\n+    if (d->limbs[0] <= std::numeric_limits<Num3072::limb_type>::max() - MAX_PRIME_DIFF) return false;\n+    return true;\n+}\n+\n+void FullReduce(Num3072* d)\n+{\n+    Num3072::limb_type c0 = MAX_PRIME_DIFF;\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        Num3072::limb_type c1 = 0;\n+        add2(c0, c1, d->limbs[i]);\n+        extract2(c0, c1, d->limbs[i]);\n+    }\n+}\n+\n+void Multiply(Num3072* out, const Num3072* a, const Num3072* b)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*b into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        mul(d0, d1, a->limbs[1 + j], b->limbs[Num3072::LIMBS + j - (1 + j)]);\n+        for (int i = 2 + j; i < Num3072::LIMBS; ++i) muladd3(d0, d1, d2, a->limbs[i], b->limbs[Num3072::LIMBS + j - i]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < j + 1; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[j - i]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    /* Compute limb N-1 of a*b into tmp. */\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS; ++i) muladd3(c0, c1, c2, a->limbs[i], b->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Square(Num3072* out, const Num3072* a)\n+{\n+    Num3072::limb_type c0 = 0, c1 = 0;\n+    Num3072 tmp;\n+\n+    /* Compute limbs 0..N-2 of a*a into tmp, including one reduction. */\n+    for (int j = 0; j < Num3072::LIMBS - 1; ++j) {\n+        Num3072::limb_type d0 = 0, d1 = 0, d2 = 0, c2 = 0;\n+        for (int i = 0; i < (Num3072::LIMBS - 1 - j) / 2; ++i) muldbladd3(d0, d1, d2, a->limbs[i + j + 1], a->limbs[Num3072::LIMBS - 1 - i]);\n+        if ((j + 1) & 1) muladd3(d0, d1, d2, a->limbs[(Num3072::LIMBS - 1 - j) / 2 + j + 1], a->limbs[Num3072::LIMBS - 1 - (Num3072::LIMBS - 1 - j) / 2]);\n+        mulnadd3(c0, c1, c2, d0, d1, d2, MAX_PRIME_DIFF);\n+        for (int i = 0; i < (j + 1) / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[j - i]);\n+        if ((j + 1) & 1) muladd3(c0, c1, c2, a->limbs[(j + 1) / 2], a->limbs[j - (j + 1) / 2]);\n+        extract3(c0, c1, c2, tmp.limbs[j]);\n+    }\n+    {\n+        Num3072::limb_type c2 = 0;\n+        for (int i = 0; i < Num3072::LIMBS / 2; ++i) muldbladd3(c0, c1, c2, a->limbs[i], a->limbs[Num3072::LIMBS - 1 - i]);\n+        extract3(c0, c1, c2, tmp.limbs[Num3072::LIMBS - 1]);\n+    }\n+    /* Perform a second reduction. */\n+    muln2(c0, c1, MAX_PRIME_DIFF);\n+    for (int j = 0; j < Num3072::LIMBS; ++j) {\n+        add2(c0, c1, tmp.limbs[j]);\n+        extract2(c0, c1, out->limbs[j]);\n+    }\n+    assert(c1 == 0);\n+    assert(c0 == 0 || c0 == 1);\n+    /* Perform a potential third reduction. */\n+    if (c0) FullReduce(out);\n+}\n+\n+void Inverse(Num3072* out, const Num3072* a)\n+{\n+    Num3072 p[12]; // p[i] = a^(2^(2^i)-1)\n+    Num3072 x;\n+\n+    p[0] = *a;\n+\n+    for (int i = 0; i < 11; ++i) {\n+        p[i + 1] = p[i];\n+        for (int j = 0; j < (1 << i); ++j) Square(&p[i + 1], &p[i + 1]);\n+        Multiply(&p[i + 1], &p[i + 1], &p[i]);\n+    }\n+\n+    x = p[11];\n+\n+    for (int j = 0; j < 512; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[9]);\n+    for (int j = 0; j < 256; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[8]);\n+    for (int j = 0; j < 128; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[7]);\n+    for (int j = 0; j < 64; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[6]);\n+    for (int j = 0; j < 32; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[5]);\n+    for (int j = 0; j < 8; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[3]);\n+    for (int j = 0; j < 2; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[1]);\n+    for (int j = 0; j < 1; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 5; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[2]);\n+    for (int j = 0; j < 3; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 2; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+    for (int j = 0; j < 4; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[1]);\n+    for (int j = 0; j < 3; ++j) Square(&x, &x);\n+    Multiply(&x, &x, &p[0]);\n+\n+    *out = x;\n+}\n+\n+}\n+\n+MuHash3072::MuHash3072() noexcept\n+{\n+    data.limbs[0] = 1;\n+    for (int i = 1; i < Num3072::LIMBS; ++i) data.limbs[i] = 0;\n+}\n+\n+MuHash3072::MuHash3072(const unsigned char* key32) noexcept\n+{\n+    unsigned char tmp[384];\n+    ChaCha20(key32, 32).Keystream(tmp, 384);\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        if (sizeof(Num3072::limb_type) == 4) {\n+            data.limbs[i] = ReadLE32(tmp + 4 * i);\n+        } else if (sizeof(Num3072::limb_type) == 8) {\n+            data.limbs[i] = ReadLE64(tmp + 8 * i);\n+        }\n+    }\n+}\n+\n+void MuHash3072::Finalize(unsigned char* hash384) noexcept\n+{\n+    if (IsOverflow(&data)) FullReduce(&data);\n+    for (int i = 0; i < Num3072::LIMBS; ++i) {\n+        if (sizeof(Num3072::limb_type) == 4) {\n+            WriteLE32(hash384 + i * 4, data.limbs[i]);\n+        } else if (sizeof(Num3072::limb_type) == 8) {\n+            WriteLE64(hash384 + i * 8, data.limbs[i]);\n+        }\n+    }\n+}\n+\n+MuHash3072& MuHash3072::operator*=(const MuHash3072& x) noexcept\n+{\n+    Multiply(&this->data, &this->data, &x.data);\n+    return *this;\n+}\n+\n+MuHash3072& MuHash3072::operator/=(const MuHash3072& x) noexcept\n+{\n+    Num3072 tmp;\n+    Inverse(&tmp, &x.data);\n+    Multiply(&this->data, &this->data, &tmp);\n+    return *this;\n+}"
      },
      {
        "sha": "d4afb9cc4ce391608ff1f5f42b0d781d0b74cd28",
        "filename": "src/crypto/muhash.h",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe9ea729fc67e012de773975018a0f749c03790f/src/crypto/muhash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe9ea729fc67e012de773975018a0f749c03790f/src/crypto/muhash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.h?ref=fe9ea729fc67e012de773975018a0f749c03790f",
        "patch": "@@ -0,0 +1,78 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_MUHASH_H\n+#define BITCOIN_CRYPTO_MUHASH_H\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <stdint.h>\n+\n+struct Num3072 {\n+#ifdef HAVE___INT128\n+    typedef unsigned __int128 double_limb_type;\n+    typedef uint64_t limb_type;\n+    static constexpr int LIMBS = 48;\n+    static constexpr int LIMB_SIZE = 64;\n+#else\n+    typedef uint64_t double_limb_type;\n+    typedef uint32_t limb_type;\n+    static constexpr int LIMBS = 96;\n+    static constexpr int LIMB_SIZE = 32;\n+#endif\n+    limb_type limbs[LIMBS];\n+};\n+\n+/** A class representing MuHash sets\n+ *\n+ * MuHash is a hashing algorithm that supports adding set elements in any\n+ * order but also deleting in any order. As a result, it can maintain a\n+ * running sum for a set of data as a whole, and add/subtract when data\n+ * is added to or removed from it. A downside of MuHash is that computing\n+ * an inverse is relatively expensive. This can be solved by representing\n+ * the running value as a fraction, and multiplying added elements into\n+ * the numerator and removed elements into the denominator. Only when the\n+ * final hash is desired, a single modular inverse and multiplication is\n+ * needed to combine the two.\n+ *\n+ * As the update operations are also associative, H(a)+H(b)+H(c)+H(d) can\n+ * in fact be computed as (H(a)+H(b)) + (H(c)+H(d)). This implies that\n+ * all of this is perfectly parallellizable: each thread can process an\n+ * arbitrary subset of the update operations, allowing them to be\n+ * efficiently combined later.\n+ *\n+ * This class does not enforce the use of a set as the data it represents.\n+ * It is possible to add elements more than once and also to remove\n+ * elements that have not been added before. However, it is not clear if\n+ * security assumptions still hold in this case, so it should for now\n+ * only be used to represent a set of elements.\n+ *\n+ * See also https://cseweb.ucsd.edu/~mihir/papers/inchash.pdf and\n+ * https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-May/014337.html.\n+ */\n+class MuHash3072\n+{\n+private:\n+    Num3072 data;\n+\n+public:\n+    /* The empty set. */\n+    MuHash3072() noexcept;\n+\n+    /* A singleton with a single 32-byte key in it. */\n+    explicit MuHash3072(const unsigned char* key32) noexcept;\n+\n+    /* Multiply (resulting in a hash for the union of the sets) */\n+    MuHash3072& operator*=(const MuHash3072& add) noexcept;\n+\n+    /* Divide (resulting in a hash for the difference of the sets) */\n+    MuHash3072& operator/=(const MuHash3072& sub) noexcept;\n+\n+    /* Finalize into a 384-byte hash. Does not change this object's value. */\n+    void Finalize(unsigned char* hash384) noexcept;\n+};\n+\n+#endif // BITCOIN_CRYPTO_MUHASH_H"
      },
      {
        "sha": "9cf7e521bf348b3b08f45fc679eb87e227e37cc5",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe9ea729fc67e012de773975018a0f749c03790f/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe9ea729fc67e012de773975018a0f749c03790f/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=fe9ea729fc67e012de773975018a0f749c03790f",
        "patch": "@@ -212,7 +212,6 @@ class SHA256Writer\n \n     uint256 GetHash() {\n         uint256 result;\n-        unsigned char out[32];\n         ctx.Finalize((unsigned char*)&result);\n         return result;\n     }"
      },
      {
        "sha": "f1b2976f701ee981b67c2b0917efc0776a4f82b6",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 55,
        "deletions": 0,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe9ea729fc67e012de773975018a0f749c03790f/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe9ea729fc67e012de773975018a0f749c03790f/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=fe9ea729fc67e012de773975018a0f749c03790f",
        "patch": "@@ -13,6 +13,7 @@\n #include <crypto/sha1.h>\n #include <crypto/sha256.h>\n #include <crypto/sha512.h>\n+#include <crypto/muhash.h>\n #include <random.h>\n #include <test/util/setup_common.h>\n #include <util/strencodings.h>\n@@ -750,4 +751,58 @@ BOOST_AUTO_TEST_CASE(sha256d64)\n     }\n }\n \n+static MuHash3072 FromInt(unsigned char i) {\n+    unsigned char tmp[32] = {i, 0};\n+    return MuHash3072(tmp);\n+}\n+\n+BOOST_AUTO_TEST_CASE(muhash_tests)\n+{\n+    unsigned char out[384];\n+\n+    for (int iter = 0; iter < 10; ++iter) {\n+        unsigned char res[384];\n+        int table[4];\n+        for (int i = 0; i < 4; ++i) {\n+            table[i] = g_insecure_rand_ctx.randbits(3);\n+        }\n+        for (int order = 0; order < 4; ++order) {\n+            MuHash3072 acc;\n+            for (int i = 0; i < 4; ++i) {\n+                int t = table[i ^ order];\n+                if (t & 4) {\n+                    acc /= FromInt(t & 3);\n+                } else {\n+                    acc *= FromInt(t & 3);\n+                }\n+            }\n+            acc.Finalize(out);\n+            if (order == 0) {\n+                memcpy(res, out, 384);\n+            } else {\n+                BOOST_CHECK(memcmp(res, out, 384) == 0);\n+            }\n+        }\n+\n+        MuHash3072 x = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X\n+        MuHash3072 y = FromInt(g_insecure_rand_ctx.randbits(4)); // x=X, y=Y\n+        MuHash3072 z; // x=X, y=Y, z=1\n+        z *= x; // x=X, y=Y, z=X\n+        z /= y; // x=X, y=Y, z=X/Y\n+        y /= x; // x=X, y=Y/X, z=X/Y\n+        z *= y; // x=X, y=Y/X, z=1\n+        z.Finalize(out);\n+        for (int i = 0; i < 384; ++i) {\n+            BOOST_CHECK_EQUAL(out[i], i == 0);\n+        }\n+    }\n+\n+    MuHash3072 acc = FromInt(0);\n+    acc *= FromInt(1);\n+    acc /= FromInt(2);\n+    acc.Finalize(out);\n+    uint256 x = (SHA256Writer(SER_DISK, 0) << out).GetHash();\n+    BOOST_CHECK(x == uint256S(\"a44e16d5e34d259b349af21c06e65d653915d2e208e4e03f389af750dc0bfdc3\"));\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "8ca82da868d4410bca5604544d3a52a0727ceabd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2E4MmRhODY4ZDQ0MTBiY2E1NjA0NTQ0ZDNhNTJhMDcyN2NlYWJk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2017-06-30T18:15:17Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-06-11T22:04:37Z"
      },
      "message": "Add x86_64 assembly optimization for MuHash",
      "tree": {
        "sha": "c0ffe41d1af46c4eea3e34b6e1e2805aa1510469",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c0ffe41d1af46c4eea3e34b6e1e2805aa1510469"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ca82da868d4410bca5604544d3a52a0727ceabd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl7iqnUVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNLW0P/RTdwDArgICOXYFqI20xkuqDeb9I\nXMOR4V+b4MvXodSWIoEuIec4zcE02EFeKO+Yz9Pw9vxjc06taURLvBFXs43KzjIF\nAwdoTHtPDQnvNNxIMNrQW8qjhlWpmbsqi95NhdugJ8LXDsH5CJtEYhqOjCTJyWsY\nD18qIWCYNOL4jn+oPNT2yutraTy5KE0KDEQWxoeYYMNSd6zrUnqCEfxQ5yqb/zlw\ngPN3UoIg2BB2CmSLc71g2NQEaJMQqASpWJbvOmGb9cffyKBU+lkXjBhdzAgnYQCO\nVZPRJU4gQrQjZdEzjdvKGxtdvQbBZA+2nuV2vOwDD8ukgpWd3IUyFpNiR9/ZXvNg\n0NrjGIX6DEEaN/GPH7Q22ULHJVUeMePHQFank6zs13rQHQ9rh4517qyPcF7yTEFh\n1eZLRMAFq1Vm9wp3mBLgFtX5ME9kwOdTb5SdA4vTwlsaWWgDgGK6QvDFCUwBJql6\nuxbqHR8iCkQtbQ95ZVZV5CC9WD9JLVGUUS8jVaqqCUImtSEY7FvNHf9KRh511Dcy\nr0HhhLZ74xiskE4wXpj87YZQ3WoZuY2zfhAAiZSKQWjJca+i5mzJquJNcNfhumJi\nWNIe8tDrA6IN2D6uypphPQemNoVgqOy0pB+jnRqyVwps//COcl3OymBRlbs4iVt1\nyv8AcBOXLJhDleID\n=6IqR\n-----END PGP SIGNATURE-----",
        "payload": "tree c0ffe41d1af46c4eea3e34b6e1e2805aa1510469\nparent fe9ea729fc67e012de773975018a0f749c03790f\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1498846517 -0700\ncommitter Fabian Jahr <fjahr@protonmail.com> 1591913077 +0200\n\nAdd x86_64 assembly optimization for MuHash\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ca82da868d4410bca5604544d3a52a0727ceabd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ca82da868d4410bca5604544d3a52a0727ceabd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ca82da868d4410bca5604544d3a52a0727ceabd/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe9ea729fc67e012de773975018a0f749c03790f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe9ea729fc67e012de773975018a0f749c03790f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe9ea729fc67e012de773975018a0f749c03790f"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 50,
      "deletions": 0
    },
    "files": [
      {
        "sha": "edd47ab73bb5205aa45052b71bc2a65b0f1f0c62",
        "filename": "src/crypto/muhash.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ca82da868d4410bca5604544d3a52a0727ceabd/src/crypto/muhash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ca82da868d4410bca5604544d3a52a0727ceabd/src/crypto/muhash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/muhash.cpp?ref=8ca82da868d4410bca5604544d3a52a0727ceabd",
        "patch": "@@ -32,6 +32,54 @@ namespace {\n     c1 = 0; \\\n }\n \n+#if defined(__amd64__) || defined(__x86_64__)\n+\n+/** [c0,c1] = a * b */\n+#define mul(c0,c1,a,b) { \\\n+    __asm__ (\"mulq %3\" : \"=d\"(c1), \"=a\"(c0) : \"a\"(a), \"g\"(b) : \"cc\"); \\\n+}\n+\n+/** [c0,c1,c2] += a * b */\n+#define muladd3(c0,c1,c2,a,b) { \\\n+    uint64_t tl, th; \\\n+    __asm__ (\"mulq %3\" : \"=a\"(tl), \"=d\"(th) : \"a\"(a), \"g\"(b) : \"cc\"); \\\n+    __asm__ (\"addq %3,%0; adcq %4,%1; adcq $0,%2\" : \"+r\"(c0), \"+r\"(c1), \"+r\"(c2) : \"a\"(tl), \"d\"(th) : \"cc\"); \\\n+}\n+\n+/** [c0,c1,c2] += 2 * a * b */\n+#define muldbladd3(c0,c1,c2,a,b) { \\\n+    uint64_t tl, th; \\\n+    __asm__ (\"mulq %3\" : \"=a\"(tl), \"=d\"(th) : \"a\"(a), \"g\"(b) : \"cc\"); \\\n+    __asm__ (\"addq %3,%0; adcq %4,%1; adcq $0,%2\" : \"+r\"(c0), \"+r\"(c1), \"+r\"(c2) : \"a\"(tl), \"d\"(th) : \"cc\"); \\\n+    __asm__ (\"addq %3,%0; adcq %4,%1; adcq $0,%2\" : \"+r\"(c0), \"+r\"(c1), \"+r\"(c2) : \"a\"(tl), \"d\"(th) : \"cc\"); \\\n+}\n+\n+/* [c0,c1,c2] += n * [d0,d1,d2]. c2 is initially 0 */\n+#define mulnadd3(c0,c1,c2,d0,d1,d2,n) { \\\n+    uint64_t tl1, th1, tl2, th2, tl3; \\\n+    __asm__ (\"mulq %3\" : \"=a\"(tl1), \"=d\"(th1) : \"a\"(d0), \"r\"((Num3072::limb_type)n) : \"cc\"); \\\n+    __asm__ (\"addq %3,%0; adcq %4,%1; adcq $0,%2\" : \"+r\"(c0), \"+r\"(c1), \"+r\"(c2) : \"g\"(tl1), \"g\"(th1) : \"cc\"); \\\n+    __asm__ (\"mulq %3\" : \"=a\"(tl2), \"=d\"(th2) : \"a\"(d1), \"r\"((Num3072::limb_type)n) : \"cc\"); \\\n+    __asm__ (\"addq %2,%0; adcq %3,%1\" : \"+r\"(c1), \"+r\"(c2) : \"g\"(tl2), \"g\"(th2) : \"cc\"); \\\n+    __asm__ (\"imulq %2,%1,%0\" : \"=r\"(tl3) : \"g\"(d2), \"i\"(n) : \"cc\"); \\\n+    __asm__ (\"addq %1,%0\" : \"+r\"(c2) : \"g\"(tl3) : \"cc\"); \\\n+}\n+\n+/* [c0,c1] *= n */\n+#define muln2(c0,c1,n) { \\\n+    uint64_t th; \\\n+    __asm__ (\"mulq %2\" : \"+a\"(c0), \"=d\"(th) : \"r\"((Num3072::limb_type)n) : \"cc\"); \\\n+    __asm__ (\"imul %1,%0,%0\" : \"+r\"(c1) : \"i\"(n) : \"cc\"); \\\n+    __asm__ (\"addq %1,%0\" : \"+r\"(c1) : \"g\"(th) : \"cc\"); \\\n+}\n+\n+/** [c0,c1] += a */\n+#define add2(c0,c1,a) { \\\n+    __asm__ (\"add %2,%0; adc $0,%1\" : \"+r\"(c0), \"+r\"(c1) : \"r\"(a) : \"cc\"); \\\n+}\n+\n+#else\n+\n /** [c0,c1] = a * b */\n #define mul(c0,c1,a,b) { \\\n     Num3072::double_limb_type t = (Num3072::double_limb_type)a * b; \\\n@@ -99,6 +147,8 @@ namespace {\n     c1 += (c0 < (a)) ? 1 : 0; \\\n }\n \n+#endif\n+\n bool IsOverflow(const Num3072* d)\n {\n     for (int i = 1; i < Num3072::LIMBS - 1; ++i) {"
      }
    ]
  }
]