[
  {
    "sha": "bdc3c1636f6da360926151e7820e7b32e4de1dd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGMzYzE2MzZmNmRhMzYwOTI2MTUxZTc4MjBlN2IzMmU0ZGUxZGQ4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-07-27T21:01:13Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-03T23:43:55Z"
      },
      "message": "Add zapwallettxes RPC\n\nUpdates the test to use this RPC. The test will also use multiple\nwallets instead of multiple nodes",
      "tree": {
        "sha": "e3a032ec040d6938667aa483451039e7eb046add",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3a032ec040d6938667aa483451039e7eb046add"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdc3c1636f6da360926151e7820e7b32e4de1dd8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdc3c1636f6da360926151e7820e7b32e4de1dd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdc3c1636f6da360926151e7820e7b32e4de1dd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdc3c1636f6da360926151e7820e7b32e4de1dd8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34eb2362581d4d8f0bfd3baa12ba750afaf85c62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34eb2362581d4d8f0bfd3baa12ba750afaf85c62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34eb2362581d4d8f0bfd3baa12ba750afaf85c62"
      }
    ],
    "stats": {
      "total": 186,
      "additions": 160,
      "deletions": 26
    },
    "files": [
      {
        "sha": "1501d00b02587ea7855d2559870c6fb5c410c445",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc3c1636f6da360926151e7820e7b32e4de1dd8/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc3c1636f6da360926151e7820e7b32e4de1dd8/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=bdc3c1636f6da360926151e7820e7b32e4de1dd8",
        "patch": "@@ -173,6 +173,11 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createwallet\", 4, \"avoid_reuse\"},\n     { \"createwallet\", 5, \"descriptors\"},\n     { \"getnodeaddresses\", 0, \"count\"},\n+    { \"zapwallettxes\", 0, \"keep_metadata\"},\n+    { \"zapwallettxes\", 1, \"rescan\"},\n+    { \"zapwallettxes\", 2, \"start_height\"},\n+    { \"zapwallettxes\", 3, \"stop_height\"},\n+    { \"zapwallettxes\", 4, \"scan_mempool\"},\n     { \"stop\", 0, \"wait\" },\n };\n // clang-format on"
      },
      {
        "sha": "b4cc678413f9cb532e8ee31733dcd8aa9c366d5c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 114,
        "deletions": 0,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc3c1636f6da360926151e7820e7b32e4de1dd8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc3c1636f6da360926151e7820e7b32e4de1dd8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bdc3c1636f6da360926151e7820e7b32e4de1dd8",
        "patch": "@@ -4113,6 +4113,119 @@ static UniValue upgradewallet(const JSONRPCRequest& request)\n     return error.original;\n }\n \n+static UniValue zapwallettxes(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"zapwallettxes\",\n+        \"\\nRemoves all of the wallet's transactions with the option to keep transaction metadata and to rescan the blockchain.\",\n+        {\n+            {\"keep_metadata\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to keep transaction metadata for transactions that are found to be in the wallet. This only works rescan is true.\"},\n+            {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether to rescan the blockchain for transactions\"},\n+            {\"start_height\", RPCArg::Type::NUM, /* default */ \"0\", \"block height where the rescan should start\"},\n+            {\"stop_height\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED_NAMED_ARG, \"The last block height that should be scanned. If none is provided, the rescan will proceed to the tip at the return time of this call.\"},\n+            {\"scan_mempool\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether to also scan the mempool for transactions\"},\n+        },\n+        RPCResults{},\n+        RPCExamples{\n+            HelpExampleCli(\"zapwallettxes\", \"\")\n+            + HelpExampleRpc(\"zapwallettxes\", \"\")\n+        }\n+    }.Check(request);\n+\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+\n+    RPCTypeCheck(request.params, {UniValue::VBOOL, UniValue::VBOOL, UniValue::VNUM, UniValue::VNUM}, true);\n+\n+    bool keep_meta = request.params[0].isNull() ? true : request.params[0].get_bool();\n+    bool rescan = request.params[1].isNull() ? true : request.params[1].get_bool();\n+    bool scan_mempool = request.params[4].isNull() ? false : request.params[4].get_bool();\n+\n+    // Do the zap\n+    std::list<CWalletTx> wtxs;\n+    DBErrors res = wallet->ZapWalletTx(wtxs);\n+    if (res != DBErrors::LOAD_OK) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Unable to remove the wallet transactions\");\n+    }\n+\n+    // Rescan\n+    if (rescan) {\n+        WalletRescanReserver reserver(*wallet);\n+        if (!reserver.reserve()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n+        }\n+        int start_height = 0;\n+        Optional<int> stop_height;\n+        uint256 start_block;\n+        {\n+            LOCK(wallet->cs_wallet);\n+            int tip_height = wallet->GetLastBlockHeight();\n+\n+            if (!request.params[2].isNull()) {\n+                start_height = request.params[2].get_int();\n+                if (start_height < 0 || start_height > tip_height) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n+                }\n+            }\n+\n+            if (!request.params[3].isNull()) {\n+                stop_height = request.params[3].get_int();\n+                if (*stop_height < 0 || *stop_height > tip_height) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n+                } else if (*stop_height < start_height) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater than start_height\");\n+                }\n+            }\n+\n+            // We can't rescan beyond non-pruned blocks, stop and throw an error\n+            if (!wallet->chain().hasBlocks(wallet->GetLastBlockHash(), start_height, stop_height)) {\n+                throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n+            }\n+\n+            CHECK_NONFATAL(wallet->chain().findAncestorByHeight(wallet->GetLastBlockHash(), start_height, FoundBlock().hash(start_block)));\n+        }\n+\n+        CWallet::ScanResult result =\n+            wallet->ScanForWalletTransactions(start_block, start_height, stop_height, reserver, true /* fUpdate */);\n+        switch (result.status) {\n+        case CWallet::ScanResult::SUCCESS:\n+            break;\n+        case CWallet::ScanResult::FAILURE:\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Rescan failed. Potentially corrupted data files.\");\n+        case CWallet::ScanResult::USER_ABORT:\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");\n+            // no default case, so the compiler can warn about missing cases\n+        }\n+    }\n+\n+    // Scan the mempool\n+    if (scan_mempool) {\n+        LOCK(wallet->cs_wallet);\n+        wallet->chain().requestMempoolTransactions(*wallet);\n+    }\n+\n+    // Keep the metadata\n+    if (keep_meta) {\n+        LOCK(wallet->cs_wallet);\n+        WalletBatch batch(wallet->GetDatabase());\n+        for (const CWalletTx& wtx_old : wtxs) {\n+            uint256 hash = wtx_old.GetHash();\n+            const auto it = wallet->mapWallet.find(hash);\n+            if (it != wallet->mapWallet.end()) {\n+                CWalletTx& new_wtx = it->second;\n+                new_wtx.mapValue = wtx_old.mapValue;\n+                new_wtx.vOrderForm = wtx_old.vOrderForm;\n+                new_wtx.nTimeReceived = wtx_old.nTimeReceived;\n+                new_wtx.nTimeSmart = wtx_old.nTimeSmart;\n+                new_wtx.fFromMe = wtx_old.fFromMe;\n+                new_wtx.nOrderPos = wtx_old.nOrderPos;\n+                batch.WriteTx(new_wtx);\n+            }\n+        }\n+    }\n+\n+    return NullUniValue;\n+}\n+\n UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp\n UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n UniValue importprivkey(const JSONRPCRequest& request);\n@@ -4184,6 +4297,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"signrawtransactionwithwallet\",     &signrawtransactionwithwallet,  {\"hexstring\",\"prevtxs\",\"sighashtype\"} },\n     { \"wallet\",             \"unloadwallet\",                     &unloadwallet,                  {\"wallet_name\"} },\n     { \"wallet\",             \"upgradewallet\",                    &upgradewallet,                 {\"version\"} },\n+    { \"wallet\",             \"zapwallettxes\",                    &zapwallettxes,                 {\"keep_metadata\", \"rescan\", \"start_height\", \"stop_height\", \"scan_mempool\"} },\n     { \"wallet\",             \"walletcreatefundedpsbt\",           &walletcreatefundedpsbt,        {\"inputs\",\"outputs\",\"locktime\",\"options\",\"bip32derivs\"} },\n     { \"wallet\",             \"walletlock\",                       &walletlock,                    {} },\n     { \"wallet\",             \"walletpassphrase\",                 &walletpassphrase,              {\"passphrase\",\"timeout\"} },"
      },
      {
        "sha": "51aa868c03542a5c1384f90f0e81e82cc0646595",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc3c1636f6da360926151e7820e7b32e4de1dd8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc3c1636f6da360926151e7820e7b32e4de1dd8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bdc3c1636f6da360926151e7820e7b32e4de1dd8",
        "patch": "@@ -3177,6 +3177,14 @@ DBErrors CWallet::ZapWalletTx(std::list<CWalletTx>& vWtx)\n     if (nZapWalletTxRet != DBErrors::LOAD_OK)\n         return nZapWalletTxRet;\n \n+    // Clear mapWallet and mapTxSpends\n+    {\n+        LOCK(cs_wallet);\n+        mapWallet.clear();\n+        mapTxSpends.clear();\n+        wtxOrdered.clear();\n+    }\n+\n     return DBErrors::LOAD_OK;\n }\n "
      },
      {
        "sha": "f82a284d0d4dcab8495c9d89c44480966958422a",
        "filename": "test/functional/wallet_zapwallettxes.py",
        "status": "modified",
        "additions": 33,
        "deletions": 26,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdc3c1636f6da360926151e7820e7b32e4de1dd8/test/functional/wallet_zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdc3c1636f6da360926151e7820e7b32e4de1dd8/test/functional/wallet_zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_zapwallettxes.py?ref=bdc3c1636f6da360926151e7820e7b32e4de1dd8",
        "patch": "@@ -18,62 +18,69 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    wait_until,\n )\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 2\n+        self.num_nodes = 1\n \n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-        self.nodes[1].generate(100)\n+        self.nodes[0].generate(101)\n         self.sync_all()\n \n+        # Make a wallet that we will do the zapping on\n+        self.nodes[0].createwallet(wallet_name=\"zaptx\")\n+        zaptx = self.nodes[0].get_wallet_rpc(\"zaptx\")\n+        default = self.nodes[0].get_wallet_rpc(\"\")\n+\n         # This transaction will be confirmed\n-        txid1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 10)\n+        txid1 = default.sendtoaddress(zaptx.getnewaddress(), 10)\n \n         self.nodes[0].generate(1)\n         self.sync_all()\n \n         # This transaction will not be confirmed\n-        txid2 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 20)\n+        txid2 = default.sendtoaddress(zaptx.getnewaddress(), 20)\n+\n+        # Confirmed and unconfirmed transactions are the only transactions in the wallet.\n+        assert_equal(zaptx.gettransaction(txid1)['txid'], txid1)\n+        assert_equal(zaptx.gettransaction(txid2)['txid'], txid2)\n+        assert_equal(len(zaptx.listtransactions()), 2)\n \n-        # Confirmed and unconfirmed transactions are now in the wallet.\n-        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n-        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n+        # Zap with no scans, wallet should not have any txs\n+        zaptx.zapwallettxes(keep_metadata=False, rescan=False, scan_mempool=False)\n+        assert_equal(len(zaptx.listtransactions()), 0)\n \n-        # Restart node0. Both confirmed and unconfirmed transactions remain in the wallet.\n-        self.restart_node(0)\n+        # Rescanning blockchain should give us the confirmed tx\n+        zaptx.rescanblockchain(0)\n+        assert_equal(zaptx.gettransaction(txid1)['txid'], txid1)\n \n-        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n-        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n+        # Unload and reload wallet to get the mempool rescan\n+        zaptx.unloadwallet()\n+        self.nodes[0].loadwallet(\"zaptx\")\n \n-        # Restart node0 with zapwallettxes and persistmempool. The unconfirmed\n-        # transaction is zapped from the wallet, but is re-added when the mempool is reloaded.\n-        self.restart_node(0, [\"-persistmempool=1\", \"-zapwallettxes=2\"])\n+        assert_equal(zaptx.gettransaction(txid1)['txid'], txid1)\n+        assert_equal(zaptx.gettransaction(txid2)['txid'], txid2)\n \n-        wait_until(lambda: self.nodes[0].getmempoolinfo()['size'] == 1, timeout=3)\n-        self.nodes[0].syncwithvalidationinterfacequeue()  # Flush mempool to wallet\n+        # Zap with blockchain and mempool rescan\n+        zaptx.zapwallettxes(rescan=True, scan_mempool=True)\n \n-        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n-        assert_equal(self.nodes[0].gettransaction(txid2)['txid'], txid2)\n+        assert_equal(zaptx.gettransaction(txid1)['txid'], txid1)\n+        assert_equal(zaptx.gettransaction(txid2)['txid'], txid2)\n \n-        # Restart node0 with zapwallettxes, but not persistmempool.\n-        # The unconfirmed transaction is zapped and is no longer in the wallet.\n-        self.restart_node(0, [\"-zapwallettxes=2\"])\n+        # Zap with no args (just blockchain rescan)\n+        zaptx.zapwallettxes()\n \n         # tx1 is still be available because it was confirmed\n-        assert_equal(self.nodes[0].gettransaction(txid1)['txid'], txid1)\n+        assert_equal(zaptx.gettransaction(txid1)['txid'], txid1)\n \n         # This will raise an exception because the unconfirmed transaction has been zapped\n-        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', self.nodes[0].gettransaction, txid2)\n+        assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', zaptx.gettransaction, txid2)\n \n if __name__ == '__main__':\n     ZapWalletTXesTest().main()"
      }
    ]
  },
  {
    "sha": "aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWE5NTM2MzNmMGUxYjdlNWQzOGFiMGZhMmExYTI3YWQyYjAzYzE5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-03T20:07:14Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-06T22:34:14Z"
      },
      "message": "Remove -zapwallettxes startup option\n\nRemoves the startup option and replaces it with an error message telling\nusers to use the RPC instead.",
      "tree": {
        "sha": "d1a393e419d2de624115eaf795344b957307be35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1a393e419d2de624115eaf795344b957307be35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bdc3c1636f6da360926151e7820e7b32e4de1dd8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdc3c1636f6da360926151e7820e7b32e4de1dd8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdc3c1636f6da360926151e7820e7b32e4de1dd8"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 9,
      "deletions": 66
    },
    "files": [
      {
        "sha": "2d62d286e51198823563e5e07bf769e1cca19c16",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19",
        "patch": "@@ -48,7 +48,6 @@ void DummyWalletInit::AddWalletOptions(ArgsManager& argsman) const\n         \"-walletdir=<dir>\",\n         \"-walletnotify=<cmd>\",\n         \"-walletrbf\",\n-        \"-zapwallettxes=<mode>\",\n         \"-dblogsize=<n>\",\n         \"-flushwallet\",\n         \"-privdb\","
      },
      {
        "sha": "247889a94362189c853f5e519df8894c97de3d86",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 18,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19",
        "patch": "@@ -64,13 +64,13 @@ void WalletInit::AddWalletOptions(ArgsManager& argsman) const\n     argsman.AddArg(\"-walletnotify=<cmd>\", \"Execute command when a wallet transaction changes. %s in cmd is replaced by TxID and %w is replaced by wallet name. %w is not currently implemented on windows. On systems where %w is supported, it should NOT be quoted because this would break shell escaping used to invoke the command.\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n #endif\n     argsman.AddArg(\"-walletrbf\", strprintf(\"Send transactions with full-RBF opt-in enabled (RPC only, default: %u)\", DEFAULT_WALLET_RBF), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    argsman.AddArg(\"-zapwallettxes=<mode>\", \"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\"\n-                               \" (1 = keep tx meta data e.g. payment request information, 2 = drop tx meta data)\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n \n     argsman.AddArg(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n     argsman.AddArg(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n     argsman.AddArg(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n     argsman.AddArg(\"-walletrejectlongchains\", strprintf(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\", DEFAULT_WALLET_REJECT_LONG_CHAINS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::WALLET_DEBUG_TEST);\n+\n+    argsman.AddHiddenArgs({\"-zapwallettxes\"});\n }\n \n bool WalletInit::ParameterInteraction() const\n@@ -83,26 +83,12 @@ bool WalletInit::ParameterInteraction() const\n         return true;\n     }\n \n-    const bool is_multiwallet = gArgs.GetArgs(\"-wallet\").size() > 1;\n-\n     if (gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)) {\n         LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n     }\n \n-    bool zapwallettxes = gArgs.GetBoolArg(\"-zapwallettxes\", false);\n-    // -zapwallettxes implies dropping the mempool on startup\n-    if (zapwallettxes && gArgs.SoftSetBoolArg(\"-persistmempool\", false)) {\n-        LogPrintf(\"%s: parameter interaction: -zapwallettxes enabled -> setting -persistmempool=0\\n\", __func__);\n-    }\n-\n-    // -zapwallettxes implies a rescan\n-    if (zapwallettxes) {\n-        if (is_multiwallet) {\n-            return InitError(strprintf(Untranslated(\"%s is only allowed with a single wallet file\"), \"-zapwallettxes\"));\n-        }\n-        if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n-            LogPrintf(\"%s: parameter interaction: -zapwallettxes enabled -> setting -rescan=1\\n\", __func__);\n-        }\n+    if (gArgs.IsArgSet(\"-zapwallettxes\")) {\n+        return InitError(_(\"-zapwallettxes has been replaced with the zapwallettxes RPC. Please use that instead.\"));\n     }\n \n     if (gArgs.GetBoolArg(\"-sysperms\", false))"
      },
      {
        "sha": "253ee75406be2bd131f264ce136509292afdb874",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19",
        "patch": "@@ -2480,7 +2480,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n             RPCHelpMan{\"loadwallet\",\n                 \"\\nLoads a wallet from a wallet file or directory.\"\n                 \"\\nNote that all wallet command-line options used when starting bitcoind will be\"\n-                \"\\napplied to the new wallet (eg -zapwallettxes, rescan, etc).\\n\",\n+                \"\\napplied to the new wallet (eg -rescan, etc).\\n\",\n                 {\n                     {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet directory or .dat file.\"},\n                 },"
      },
      {
        "sha": "1b9efb6b0e2210fd6d127bc527d74d11d3291896",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 38,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19",
        "patch": "@@ -3767,20 +3767,6 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n {\n     const std::string walletFile = WalletDataFilePath(location.GetPath()).string();\n \n-    // needed to restore wallet transaction meta data after -zapwallettxes\n-    std::list<CWalletTx> vWtx;\n-\n-    if (gArgs.GetBoolArg(\"-zapwallettxes\", false)) {\n-        chain.initMessage(_(\"Zapping all transactions from wallet...\").translated);\n-\n-        std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(&chain, location, CreateWalletDatabase(location.GetPath()));\n-        DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n-        if (nZapWalletRet != DBErrors::LOAD_OK) {\n-            error = strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile);\n-            return nullptr;\n-        }\n-    }\n-\n     chain.initMessage(_(\"Loading wallet...\").translated);\n \n     int64_t nStart = GetTimeMillis();\n@@ -4041,30 +4027,6 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         }\n         walletInstance->chainStateFlushed(chain.getTipLocator());\n         walletInstance->database->IncrementUpdateCounter();\n-\n-        // Restore wallet transaction metadata after -zapwallettxes=1\n-        if (gArgs.GetBoolArg(\"-zapwallettxes\", false) && gArgs.GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n-        {\n-            WalletBatch batch(*walletInstance->database);\n-\n-            for (const CWalletTx& wtxOld : vWtx)\n-            {\n-                uint256 hash = wtxOld.GetHash();\n-                std::map<uint256, CWalletTx>::iterator mi = walletInstance->mapWallet.find(hash);\n-                if (mi != walletInstance->mapWallet.end())\n-                {\n-                    const CWalletTx* copyFrom = &wtxOld;\n-                    CWalletTx* copyTo = &mi->second;\n-                    copyTo->mapValue = copyFrom->mapValue;\n-                    copyTo->vOrderForm = copyFrom->vOrderForm;\n-                    copyTo->nTimeReceived = copyFrom->nTimeReceived;\n-                    copyTo->nTimeSmart = copyFrom->nTimeSmart;\n-                    copyTo->fFromMe = copyFrom->fFromMe;\n-                    copyTo->nOrderPos = copyFrom->nOrderPos;\n-                    batch.WriteTx(*copyTo);\n-                }\n-            }\n-        }\n     }\n \n     {"
      },
      {
        "sha": "6e8d86089a0bc69549f12bbf73532caa155f93dd",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19",
        "patch": "@@ -527,8 +527,6 @@ def run_test(self):\n         maintenance = [\n             '-rescan',\n             '-reindex',\n-            '-zapwallettxes=1',\n-            '-zapwallettxes=2',\n         ]\n         chainlimit = 6\n         for m in maintenance:"
      },
      {
        "sha": "f110c20c02b47c1f79344704cc34f7491e2081f4",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19",
        "patch": "@@ -134,11 +134,6 @@ def wallet_file(name):\n         open(not_a_dir, 'a', encoding=\"utf8\").close()\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=' + not_a_dir], 'Error: Specified -walletdir \"' + not_a_dir + '\" is not a directory')\n \n-        self.log.info(\"Do not allow -zapwallettxes with multiwallet\")\n-        self.nodes[0].assert_start_raises_init_error(['-zapwallettxes', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n-        self.nodes[0].assert_start_raises_init_error(['-zapwallettxes=1', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n-        self.nodes[0].assert_start_raises_init_error(['-zapwallettxes=2', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n-\n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n         os.rename(wallet_dir(), wallet_dir2)"
      },
      {
        "sha": "06c0e2bf2478520706af563f21c2ac26e2ebd07c",
        "filename": "test/functional/wallet_zapwallettxes.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/test/functional/wallet_zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/test/functional/wallet_zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_zapwallettxes.py?ref=aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19",
        "patch": "@@ -82,5 +82,8 @@ def run_test(self):\n         # This will raise an exception because the unconfirmed transaction has been zapped\n         assert_raises_rpc_error(-5, 'Invalid or non-wallet transaction id', zaptx.gettransaction, txid2)\n \n+        self.log.info(\"Make sure -zapwallettxes gives an error\")\n+        self.nodes[0].assert_start_raises_init_error([\"-zapwallettxes\"], \"Error: -zapwallettxes has been replaced with the zapwallettxes RPC. Please use that instead.\")\n+\n if __name__ == '__main__':\n     ZapWalletTXesTest().main()"
      },
      {
        "sha": "f77242d3353aaabc2a71f017bfbcb47845db35f0",
        "filename": "test/lint/check-doc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/test/lint/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19/test/lint/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-doc.py?ref=aaa953633f0e1b7e5d38ab0fa2a1a27ad2b03c19",
        "patch": "@@ -23,7 +23,7 @@\n CMD_GREP_WALLET_HIDDEN_ARGS = r\"git grep --function-context 'void DummyWalletInit::AddWalletOptions' -- {}\".format(CMD_ROOT_DIR)\n CMD_GREP_DOCS = r\"git grep --perl-regexp '{}' {}\".format(REGEX_DOC, CMD_ROOT_DIR)\n # list unsupported, deprecated and duplicate args as they need no documentation\n-SET_DOC_OPTIONAL = set(['-h', '-help', '-dbcrashratio', '-forcecompactdb'])\n+SET_DOC_OPTIONAL = set(['-h', '-help', '-dbcrashratio', '-forcecompactdb', '-zapwallettxes'])\n \n \n def lint_missing_argument_documentation():"
      }
    ]
  }
]